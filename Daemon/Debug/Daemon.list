
Daemon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024e60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.__at_0x08000534 00000080  08024ff0  08024ff0  00034ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e20  08025070  08025070  00035070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.__at_0x08020610 00000400  08026e90  08026e90  00036e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08027290  08027290  00040328  2**0
                  CONTENTS
  6 .ARM          00000008  08027290  08027290  00037290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08027298  08027298  00040328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08027298  08027298  00037298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  080272a0  080272a0  000372a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000328  20000000  080272a8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001fb8  20000328  080275d0  00040328  2**3
                  ALLOC
 12 ._user_heap_stack 00005400  200022e0  080275d0  000422e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00068baa  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a0fc  00000000  00000000  000a8f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002688  00000000  00000000  000b3000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002578  00000000  00000000  000b5688  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00039ed2  00000000  00000000  000b7c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00035aa3  00000000  00000000  000f1ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0012436f  00000000  00000000  00127575  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024b8e4  2**0
                  CONTENTS, READONLY
 22 gpi_profile_info 0000000c  00000000  00000000  0024b960  2**2
                  CONTENTS, READONLY
 23 .debug_frame  0000b598  00000000  00000000  0024b96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000328 	.word	0x20000328
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024fd0 	.word	0x08024fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	08024fd0 	.word	0x08024fd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d2:	f1a4 0401 	sub.w	r4, r4, #1
 80003d6:	d1e9      	bne.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bd 	b.w	8000f98 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b972 	b.w	8000f98 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4615      	mov	r5, r2
 8000cde:	d967      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b14a      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce6:	f1c2 0720 	rsb	r7, r2, #32
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf2:	4095      	lsls	r5, r2
 8000cf4:	ea47 0803 	orr.w	r8, r7, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d04:	fa1f fc85 	uxth.w	ip, r5
 8000d08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d10:	fb07 f10c 	mul.w	r1, r7, ip
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18eb      	adds	r3, r5, r3
 8000d1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1e:	f080 811b 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8118 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d28:	3f02      	subs	r7, #2
 8000d2a:	442b      	add	r3, r5
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d54:	3802      	subs	r0, #2
 8000d56:	442c      	add	r4, r5
 8000d58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	2700      	movs	r7, #0
 8000d62:	b11e      	cbz	r6, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xbe>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80eb 	beq.w	8000f52 <__udivmoddi4+0x286>
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d82:	4638      	mov	r0, r7
 8000d84:	4639      	mov	r1, r7
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f783 	clz	r7, r3
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d147      	bne.n	8000e22 <__udivmoddi4+0x156>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd0>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2c4>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4698      	mov	r8, r3
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000daa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xe8>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 808f 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbe:	1b49      	subs	r1, r1, r5
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	fa1f f885 	uxth.w	r8, r5
 8000dc8:	2701      	movs	r7, #1
 8000dca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000de0:	18eb      	adds	r3, r5, r3
 8000de2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dee:	4684      	mov	ip, r0
 8000df0:	1a59      	subs	r1, r3, r1
 8000df2:	b2a3      	uxth	r3, r4
 8000df4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e00:	fb08 f800 	mul.w	r8, r8, r0
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x14c>
 8000e08:	192c      	adds	r4, r5, r4
 8000e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14a>
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	f200 80b6 	bhi.w	8000f82 <__udivmoddi4+0x2b6>
 8000e16:	4618      	mov	r0, r3
 8000e18:	eba4 0408 	sub.w	r4, r4, r8
 8000e1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e20:	e79f      	b.n	8000d62 <__udivmoddi4+0x96>
 8000e22:	f1c7 0c20 	rsb	ip, r7, #32
 8000e26:	40bb      	lsls	r3, r7
 8000e28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e30:	fa01 f407 	lsl.w	r4, r1, r7
 8000e34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e40:	4325      	orrs	r5, r4
 8000e42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e46:	0c2c      	lsrs	r4, r5, #16
 8000e48:	fb08 3319 	mls	r3, r8, r9, r3
 8000e4c:	fa1f fa8e 	uxth.w	sl, lr
 8000e50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e54:	fb09 f40a 	mul.w	r4, r9, sl
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1e 0303 	adds.w	r3, lr, r3
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	f080 8087 	bcs.w	8000f7e <__udivmoddi4+0x2b2>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f240 8084 	bls.w	8000f7e <__udivmoddi4+0x2b2>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4473      	add	r3, lr
 8000e7c:	1b1b      	subs	r3, r3, r4
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1e 0404 	adds.w	r4, lr, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9c:	d26b      	bcs.n	8000f76 <__udivmoddi4+0x2aa>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d969      	bls.n	8000f76 <__udivmoddi4+0x2aa>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4474      	add	r4, lr
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c2      	mov	sl, r8
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	d354      	bcc.n	8000f64 <__udivmoddi4+0x298>
 8000eba:	d051      	beq.n	8000f60 <__udivmoddi4+0x294>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d069      	beq.n	8000f94 <__udivmoddi4+0x2c8>
 8000ec0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ecc:	40fd      	lsrs	r5, r7
 8000ece:	40fc      	lsrs	r4, r7
 8000ed0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e747      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee4:	4095      	lsls	r5, r2
 8000ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eea:	fa21 f303 	lsr.w	r3, r1, r3
 8000eee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef2:	4338      	orrs	r0, r7
 8000ef4:	0c01      	lsrs	r1, r0, #16
 8000ef6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efa:	fa1f f885 	uxth.w	r8, r5
 8000efe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb07 f308 	mul.w	r3, r7, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x256>
 8000f12:	1869      	adds	r1, r5, r1
 8000f14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f18:	d22f      	bcs.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d92d      	bls.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1e:	3f02      	subs	r7, #2
 8000f20:	4429      	add	r1, r5
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b281      	uxth	r1, r0
 8000f26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb00 f308 	mul.w	r3, r0, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x27e>
 8000f3a:	1869      	adds	r1, r5, r1
 8000f3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f40:	d217      	bcs.n	8000f72 <__udivmoddi4+0x2a6>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d915      	bls.n	8000f72 <__udivmoddi4+0x2a6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4429      	add	r1, r5
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f50:	e73b      	b.n	8000dca <__udivmoddi4+0xfe>
 8000f52:	4637      	mov	r7, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e709      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	e6e7      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f60:	4541      	cmp	r1, r8
 8000f62:	d2ab      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f68:	eb69 020e 	sbc.w	r2, r9, lr
 8000f6c:	3801      	subs	r0, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	e7a4      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f72:	4660      	mov	r0, ip
 8000f74:	e7e9      	b.n	8000f4a <__udivmoddi4+0x27e>
 8000f76:	4618      	mov	r0, r3
 8000f78:	e795      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7a:	4667      	mov	r7, ip
 8000f7c:	e7d1      	b.n	8000f22 <__udivmoddi4+0x256>
 8000f7e:	4681      	mov	r9, r0
 8000f80:	e77c      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f82:	3802      	subs	r0, #2
 8000f84:	442c      	add	r4, r5
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0x14c>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	442b      	add	r3, r5
 8000f8e:	e72f      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f90:	4638      	mov	r0, r7
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xda>
 8000f94:	4637      	mov	r7, r6
 8000f96:	e6e9      	b.n	8000d6c <__udivmoddi4+0xa0>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <NVIC_SystemReset+0x20>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <NVIC_SystemReset+0x20>)
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <NVIC_SystemReset+0x24>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60cb      	str	r3, [r1, #12]
 8000fb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000fb8:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fba:	e7fd      	b.n	8000fb8 <NVIC_SystemReset+0x1c>
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	05fa0004 	.word	0x05fa0004

08000fc4 <node_id_restore>:
 * @description: Read hardware id
 * @param None
 * @return: None
 */
static void node_id_restore(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	device_id[0] = DEVICE_ID_REG0;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <node_id_restore+0x44>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <node_id_restore+0x48>)
 8000fce:	6013      	str	r3, [r2, #0]
	device_id[1] = DEVICE_ID_REG1;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <node_id_restore+0x4c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <node_id_restore+0x48>)
 8000fd6:	6053      	str	r3, [r2, #4]
	device_id[2] = DEVICE_ID_REG2;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <node_id_restore+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <node_id_restore+0x48>)
 8000fde:	6093      	str	r3, [r2, #8]

	(*(uint32_t *)node_mac) = DEVICE_ID_REG1;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <node_id_restore+0x4c>)
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <node_id_restore+0x54>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
	(*(((uint32_t *)node_mac) + 1)) = DEVICE_ID_REG2 + DEVICE_ID_REG0;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <node_id_restore+0x50>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <node_id_restore+0x44>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	490a      	ldr	r1, [pc, #40]	; (800101c <node_id_restore+0x58>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
	// stm_node_id = (uint32_t)(DEVICE_ID_REG0);
	TOS_NODE_ID = (uint32_t)(DEVICE_ID_REG0);
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <node_id_restore+0x44>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <node_id_restore+0x5c>)
 8000ffc:	6013      	str	r3, [r2, #0]
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	1fff7590 	.word	0x1fff7590
 800100c:	20000ccc 	.word	0x20000ccc
 8001010:	1fff7594 	.word	0x1fff7594
 8001014:	1fff7598 	.word	0x1fff7598
 8001018:	20000cd8 	.word	0x20000cd8
 800101c:	20000cdc 	.word	0x20000cdc
 8001020:	20000000 	.word	0x20000000

08001024 <hardware_init>:
 * @description: Initialization with hardware based on HAL library, peripherals, GPS, interrupt, System clock, radio, node id allocation and rand seed.
 * @param None
 * @return: node_id
 */
static uint8_t hardware_init()
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b093      	sub	sp, #76	; 0x4c
 8001028:	af04      	add	r7, sp, #16
	uint8_t node_id;

	HAL_Init();
 800102a:	f000 fcd3 	bl	80019d4 <HAL_Init>
	gpi_platform_init();
 800102e:	f00d f833 	bl	800e098 <gpi_platform_init>

	#if BANK_1_RUN
	/* Only when the board is stable (eg, after a long time of getting GPS signal), the flash option bytes can be changed. Otherwise, readout protection will be triggered, when the voltage of the external power supply falls below the power down threshold.
	*/
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8001032:	4b8c      	ldr	r3, [pc, #560]	; (8001264 <hardware_init+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a8b      	ldr	r2, [pc, #556]	; (8001264 <hardware_init+0x240>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6013      	str	r3, [r2, #0]
	HAL_Delay(5000);
 800103e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001042:	f000 fd13 	bl	8001a6c <HAL_Delay>
	Bank_WRT_Check();
 8001046:	f018 fecb 	bl	8019de0 <Bank_WRT_Check>
	#endif

	/* Disable SysTick Interrupt */
	HAL_SuspendTick();
 800104a:	f000 fd2d 	bl	8001aa8 <HAL_SuspendTick>

	menu_bank();
 800104e:	f01c f81d 	bl	801d08c <menu_bank>
  __ASM volatile ("cpsie i" : : : "memory");
 8001052:	b662      	cpsie	i

	gpi_int_enable();

	/* init RF transceiver */
	gpi_radio_init();
 8001054:	f00c f93a 	bl	800d2cc <gpi_radio_init>
	node_id_restore();
 8001058:	f7ff ffb4 	bl	8000fc4 <node_id_restore>

	PRINTF("\tStarting node 0x%X \n", TOS_NODE_ID);
 800105c:	4b82      	ldr	r3, [pc, #520]	; (8001268 <hardware_init+0x244>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4882      	ldr	r0, [pc, #520]	; (800126c <hardware_init+0x248>)
 8001064:	f021 f89e 	bl	80221a4 <iprintf>

	/* translate TOS_NODE_ID to logical node id used with mixer */
	for (node_id = 0; node_id < NUM_ELEMENTS(nodes); ++node_id)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{
		PRINTF("node:%d, 0x%x\n", node_id, nodes[node_id]);
 800106e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <hardware_init+0x24c>)
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	461a      	mov	r2, r3
 800107e:	487d      	ldr	r0, [pc, #500]	; (8001274 <hardware_init+0x250>)
 8001080:	f021 f890 	bl	80221a4 <iprintf>
		if (nodes[node_id] == 0)
 8001084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001088:	4a79      	ldr	r2, [pc, #484]	; (8001270 <hardware_init+0x24c>)
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <hardware_init+0x7a>
	for (node_id = 0; node_id < NUM_ELEMENTS(nodes); ++node_id)
 8001092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001096:	3301      	adds	r3, #1
 8001098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		PRINTF("node:%d, 0x%x\n", node_id, nodes[node_id]);
 800109c:	e7e7      	b.n	800106e <hardware_init+0x4a>
			break;
 800109e:	bf00      	nop
	}
	MX_NUM_NODES_CONF = node_id;
 80010a0:	4a75      	ldr	r2, [pc, #468]	; (8001278 <hardware_init+0x254>)
 80010a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010a6:	7013      	strb	r3, [r2, #0]
	PRINTF("MX_NUM_NODES_CONFi:%d\n", MX_NUM_NODES_CONF);
 80010a8:	4b73      	ldr	r3, [pc, #460]	; (8001278 <hardware_init+0x254>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4873      	ldr	r0, [pc, #460]	; (800127c <hardware_init+0x258>)
 80010b0:	f021 f878 	bl	80221a4 <iprintf>

	for (node_id = 0; node_id < MX_NUM_NODES_CONF; ++node_id)
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010ba:	e00d      	b.n	80010d8 <hardware_init+0xb4>
	{
		if (nodes[node_id] == TOS_NODE_ID)
 80010bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c0:	4a6b      	ldr	r2, [pc, #428]	; (8001270 <hardware_init+0x24c>)
 80010c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <hardware_init+0x244>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d00b      	beq.n	80010e6 <hardware_init+0xc2>
	for (node_id = 0; node_id < MX_NUM_NODES_CONF; ++node_id)
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	3301      	adds	r3, #1
 80010d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010d8:	4b67      	ldr	r3, [pc, #412]	; (8001278 <hardware_init+0x254>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3eb      	bcc.n	80010bc <hardware_init+0x98>
 80010e4:	e000      	b.n	80010e8 <hardware_init+0xc4>
			break;
 80010e6:	bf00      	nop
	}

	if (node_id >= MX_NUM_NODES_CONF)
 80010e8:	4b63      	ldr	r3, [pc, #396]	; (8001278 <hardware_init+0x254>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d306      	bcc.n	8001102 <hardware_init+0xde>
	{
		PRINTF("Warning: node mapping not found for node 0x%x !!!\n", TOS_NODE_ID);
 80010f4:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <hardware_init+0x244>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4861      	ldr	r0, [pc, #388]	; (8001280 <hardware_init+0x25c>)
 80010fc:	f021 f852 	bl	80221a4 <iprintf>
		while (1)
 8001100:	e7fe      	b.n	8001100 <hardware_init+0xdc>
			;
	}
	PRINTF("Running with node ID: %d\n", node_id);
 8001102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001106:	4619      	mov	r1, r3
 8001108:	485e      	ldr	r0, [pc, #376]	; (8001284 <hardware_init+0x260>)
 800110a:	f021 f84b 	bl	80221a4 <iprintf>

	/* init RNG with randomized seed */
	mixer_rand_seed(gpi_mulu_16x16(TOS_NODE_ID, gpi_tick_fast_native()));
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <hardware_init+0x244>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29a      	uxth	r2, r3

//**************************************************************************************************

static ALWAYS_INLINE Gpi_Fast_Tick_Native gpi_tick_fast_native()
{
	return htim2.Instance->CNT;
 8001114:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <hardware_init+0x264>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	b29b      	uxth	r3, r3
 800111c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800111e:	847b      	strh	r3, [r7, #34]	; 0x22
//**************************************************************************************************
//*************************************************************************************************

static ALWAYS_INLINE uint32_t gpi_mulu_16x16(uint16_t a, uint16_t b)
{
	return (uint32_t)a * (uint32_t)b;
 8001120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001122:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f017 fb21 	bl	8018770 <mixer_rand_seed>

	DS3231_ClearAlarm1_Time();
 800112e:	f017 ffdf 	bl	80190f0 <DS3231_ClearAlarm1_Time>
	GPS_Init();
 8001132:	f008 fedb 	bl	8009eec <GPS_Init>
	GPS_On();
 8001136:	f008 ff35 	bl	8009fa4 <GPS_On>
#if GPS_DATA
	GPS_Waiting_PPS(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f009 f892 	bl	800a264 <GPS_Waiting_PPS>
	Chirp_Time gps_time;
    memset(&gps_time, 0, sizeof(gps_time));
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	2208      	movs	r2, #8
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f020 fa1e 	bl	802158a <memset>
	while(!gps_time.chirp_year)
 800114e:	e009      	b.n	8001164 <hardware_init+0x140>
	{
		gps_time = GPS_Get_Time();
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f008 ff6e 	bl	800a034 <GPS_Get_Time>
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	463a      	mov	r2, r7
 800115e:	6810      	ldr	r0, [r2, #0]
 8001160:	6851      	ldr	r1, [r2, #4]
 8001162:	c303      	stmia	r3!, {r0, r1}
	while(!gps_time.chirp_year)
 8001164:	8b3b      	ldrh	r3, [r7, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f2      	beq.n	8001150 <hardware_init+0x12c>
	}
	RTC_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 800116a:	8b3b      	ldrh	r3, [r7, #24]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	7ebc      	ldrb	r4, [r7, #26]
 8001174:	7efd      	ldrb	r5, [r7, #27]
 8001176:	7f3e      	ldrb	r6, [r7, #28]
 8001178:	7f7b      	ldrb	r3, [r7, #29]
 800117a:	7fba      	ldrb	r2, [r7, #30]
 800117c:	7ff9      	ldrb	r1, [r7, #31]
 800117e:	9102      	str	r1, [sp, #8]
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4633      	mov	r3, r6
 8001186:	462a      	mov	r2, r5
 8001188:	4621      	mov	r1, r4
 800118a:	f009 fb33 	bl	800a7f4 <RTC_ModifyTime>
	#if BANK_1_RUN
	time_t rtc_diff = 0x05;
 800118e:	f04f 0305 	mov.w	r3, #5
 8001192:	f04f 0400 	mov.w	r4, #0
 8001196:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	uint8_t count = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* if is in bank1, daemon erase jump1 to ensure keep in bank1 */
	while((rtc_diff < 0) || (rtc_diff >= 0x05))
 80011a0:	e03a      	b.n	8001218 <hardware_init+0x1f4>
	{
		count++;
 80011a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		assert_reset((count < 10));
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d906      	bls.n	80011c2 <hardware_init+0x19e>
 80011b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d902      	bls.n	80011c2 <hardware_init+0x19e>
  __ASM volatile ("cpsid f" : : : "memory");
 80011bc:	b671      	cpsid	f
 80011be:	f7ff feed 	bl	8000f9c <NVIC_SystemReset>
		DS3231_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 80011c2:	8b3b      	ldrh	r3, [r7, #24]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3330      	adds	r3, #48	; 0x30
 80011c8:	b2d8      	uxtb	r0, r3
 80011ca:	7ebc      	ldrb	r4, [r7, #26]
 80011cc:	7efd      	ldrb	r5, [r7, #27]
 80011ce:	7f3e      	ldrb	r6, [r7, #28]
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	7fba      	ldrb	r2, [r7, #30]
 80011d4:	7ff9      	ldrb	r1, [r7, #31]
 80011d6:	9102      	str	r1, [sp, #8]
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4633      	mov	r3, r6
 80011de:	462a      	mov	r2, r5
 80011e0:	4621      	mov	r1, r4
 80011e2:	f017 fe19 	bl	8018e18 <DS3231_ModifyTime>
		DS3231_GetTime();
 80011e6:	f017 fe89 	bl	8018efc <DS3231_GetTime>
		Chirp_Time RTC_Time = DS3231_ShowTime();
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4618      	mov	r0, r3
 80011f0:	f017 fe9e 	bl	8018f30 <DS3231_ShowTime>
		rtc_diff = GPS_Diff(&gps_time, RTC_Time.chirp_year, RTC_Time.chirp_month, RTC_Time.chirp_date, RTC_Time.chirp_hour, RTC_Time.chirp_min, RTC_Time.chirp_sec);
 80011f4:	893c      	ldrh	r4, [r7, #8]
 80011f6:	7abd      	ldrb	r5, [r7, #10]
 80011f8:	7afe      	ldrb	r6, [r7, #11]
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	7bba      	ldrb	r2, [r7, #14]
 80011fe:	7bf9      	ldrb	r1, [r7, #15]
 8001200:	f107 0018 	add.w	r0, r7, #24
 8001204:	9102      	str	r1, [sp, #8]
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4633      	mov	r3, r6
 800120c:	462a      	mov	r2, r5
 800120e:	4621      	mov	r1, r4
 8001210:	f008 ffcc 	bl	800a1ac <GPS_Diff>
 8001214:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	while((rtc_diff < 0) || (rtc_diff >= 0x05))
 8001218:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	f174 0300 	sbcs.w	r3, r4, #0
 8001222:	dbbe      	blt.n	80011a2 <hardware_init+0x17e>
 8001224:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001228:	2b05      	cmp	r3, #5
 800122a:	f174 0300 	sbcs.w	r3, r4, #0
 800122e:	dab8      	bge.n	80011a2 <hardware_init+0x17e>
	}
	#endif
    uint32_t reset_time_flash[sizeof(Chirp_Time) / sizeof(uint32_t)];
	memcpy(reset_time_flash, (uint32_t *)&gps_time, sizeof(reset_time_flash));
 8001230:	f107 0118 	add.w	r1, r7, #24
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2208      	movs	r2, #8
 800123a:	4618      	mov	r0, r3
 800123c:	f020 f99a 	bl	8021574 <memcpy>
	FLASH_If_Erase_Pages(1, RESET_PAGE);
 8001240:	21fb      	movs	r1, #251	; 0xfb
 8001242:	2001      	movs	r0, #1
 8001244:	f01b f8fa 	bl	801c43c <FLASH_If_Erase_Pages>
	FLASH_If_Write(RESET_FLASH_ADDRESS, (uint32_t *)reset_time_flash, sizeof(reset_time_flash) / sizeof(uint32_t));
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2202      	movs	r2, #2
 800124e:	4619      	mov	r1, r3
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <hardware_init+0x268>)
 8001252:	f01b f977 	bl	801c544 <FLASH_If_Write>
#endif

	return node_id;
 8001256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800125a:	4618      	mov	r0, r3
 800125c:	373c      	adds	r7, #60	; 0x3c
 800125e:	46bd      	mov	sp, r7
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010
 8001268:	20000000 	.word	0x20000000
 800126c:	08025224 	.word	0x08025224
 8001270:	08026e90 	.word	0x08026e90
 8001274:	0802523c 	.word	0x0802523c
 8001278:	20000cc0 	.word	0x20000cc0
 800127c:	0802524c 	.word	0x0802524c
 8001280:	08025264 	.word	0x08025264
 8001284:	08025298 	.word	0x08025298
 8001288:	200012c8 	.word	0x200012c8
 800128c:	0807d800 	.word	0x0807d800

08001290 <main>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	/****************************** HARDWARE INITIALIZATION ***************************/
	uint8_t node_id = hardware_init();
 8001296:	f7ff fec5 	bl	8001024 <hardware_init>
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	node_id_allocate = node_id;
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <main+0x2c>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	7013      	strb	r3, [r2, #0]

	/************************************ Chirpbox ************************************/
	chirp_start(node_id, MX_NUM_NODES_CONF);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <main+0x30>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f01d fdd3 	bl	801ee58 <chirp_start>

	return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000cc1 	.word	0x20000cc1
 80012c0:	20000cc0 	.word	0x20000cc0

080012c4 <_Error_Handler>:

//**************************************************************************************************
void _Error_Handler(char *file, int line)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 80012ce:	e7fe      	b.n	80012ce <_Error_Handler+0xa>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_MspInit+0x98>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_MspInit+0x98>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_MspInit+0x98>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_MspInit+0x98>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_MspInit+0x98>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_MspInit+0x98>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001306:	2003      	movs	r0, #3
 8001308:	f000 fcc4 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	f06f 000b 	mvn.w	r0, #11
 8001314:	f000 fcc9 	bl	8001caa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	f06f 000a 	mvn.w	r0, #10
 8001320:	f000 fcc3 	bl	8001caa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	f06f 0009 	mvn.w	r0, #9
 800132c:	f000 fcbd 	bl	8001caa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	f06f 0004 	mvn.w	r0, #4
 8001338:	f000 fcb7 	bl	8001caa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	f06f 0003 	mvn.w	r0, #3
 8001344:	f000 fcb1 	bl	8001caa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	f06f 0001 	mvn.w	r0, #1
 8001350:	f000 fcab 	bl	8001caa <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 fca5 	bl	8001caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d114      	bne.n	80013a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201c      	movs	r0, #28
 800139c:	f000 fc85 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a0:	201c      	movs	r0, #28
 80013a2:	f000 fc9e 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80013a6:	e018      	b.n	80013da <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_TIM_Base_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d113      	bne.n	80013da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_TIM_Base_MspInit+0x78>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2032      	movs	r0, #50	; 0x32
 80013d0:	f000 fc6b 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f000 fc84 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40000c00 	.word	0x40000c00

080013ec <HAL_LPTIM_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(hlptim->Instance==LPTIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_LPTIM_MspInit+0x44>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d113      	bne.n	8001426 <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_LPTIM_MspInit+0x48>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_LPTIM_MspInit+0x48>)
 8001404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_LPTIM_MspInit+0x48>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2041      	movs	r0, #65	; 0x41
 800141c:	f000 fc45 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001420:	2041      	movs	r0, #65	; 0x41
 8001422:	f000 fc5e 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40007c00 	.word	0x40007c00
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a30      	ldr	r2, [pc, #192]	; (8001508 <HAL_UART_MspInit+0xd0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d125      	bne.n	8001496 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_UART_MspInit+0xd4>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a2f      	ldr	r2, [pc, #188]	; (800150c <HAL_UART_MspInit+0xd4>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_UART_MspInit+0xd4>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001472:	2307      	movs	r3, #7
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f001 fd7c 	bl	8002f7c <HAL_GPIO_Init>

	/* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2026      	movs	r0, #38	; 0x26
 800148a:	f000 fc0e 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800148e:	2026      	movs	r0, #38	; 0x26
 8001490:	f000 fc27 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001494:	e034      	b.n	8001500 <HAL_UART_MspInit+0xc8>
  else if(huart->Instance==USART3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_UART_MspInit+0xd8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d12f      	bne.n	8001500 <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014aa:	6593      	str	r3, [r2, #88]	; 0x58
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_UART_MspInit+0xd4>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80014d0:	2330      	movs	r3, #48	; 0x30
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e0:	2307      	movs	r3, #7
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <HAL_UART_MspInit+0xdc>)
 80014ec:	f001 fd46 	bl	8002f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2101      	movs	r1, #1
 80014f4:	2027      	movs	r0, #39	; 0x27
 80014f6:	f000 fbd8 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014fa:	2027      	movs	r0, #39	; 0x27
 80014fc:	f000 fbf1 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40004400 	.word	0x40004400
 800150c:	40021000 	.word	0x40021000
 8001510:	40004800 	.word	0x40004800
 8001514:	48000800 	.word	0x48000800

08001518 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <HAL_UART_MspDeInit+0x5c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10e      	bne.n	8001548 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_UART_MspDeInit+0x60>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_UART_MspDeInit+0x60>)
 8001530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001536:	210c      	movs	r1, #12
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f001 feca 	bl	80032d4 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001540:	2026      	movs	r0, #38	; 0x26
 8001542:	f000 fbdc 	bl	8001cfe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001546:	e011      	b.n	800156c <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_UART_MspDeInit+0x64>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10c      	bne.n	800156c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_UART_MspDeInit+0x60>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_UART_MspDeInit+0x60>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, USART3_TX_Pin|USART3_RX_Pin);
 800155e:	2130      	movs	r1, #48	; 0x30
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <HAL_UART_MspDeInit+0x68>)
 8001562:	f001 feb7 	bl	80032d4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001566:	2027      	movs	r0, #39	; 0x27
 8001568:	f000 fbc9 	bl	8001cfe <HAL_NVIC_DisableIRQ>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40004400 	.word	0x40004400
 8001578:	40021000 	.word	0x40021000
 800157c:	40004800 	.word	0x40004800
 8001580:	48000800 	.word	0x48000800

08001584 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_SPI_MspInit+0x78>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12d      	bne.n	80015f2 <HAL_SPI_MspInit+0x6e>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_SPI_MspInit+0x7c>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_SPI_MspInit+0x7c>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a0:	6613      	str	r3, [r2, #96]	; 0x60
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_SPI_MspInit+0x7c>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ae:	23e0      	movs	r3, #224	; 0xe0
 80015b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015be:	2305      	movs	r3, #5
 80015c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f001 fcd6 	bl	8002f7c <HAL_GPIO_Init>

//		NSS
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d0:	2340      	movs	r3, #64	; 0x40
 80015d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <HAL_SPI_MspInit+0x80>)
 80015e4:	f001 fcca 	bl	8002f7c <HAL_GPIO_Init>
		HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6 , 1 );
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_SPI_MspInit+0x80>)
 80015ee:	f001 ff69 	bl	80034c4 <HAL_GPIO_WritePin>
  }

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40013000 	.word	0x40013000
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400

08001608 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_RTC_MspInit+0x3c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10f      	bne.n	800163a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RTC_MspInit+0x40>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RTC_MspInit+0x40>)
 8001622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2003      	movs	r0, #3
 8001630:	f000 fb3b 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fb54 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40002800 	.word	0x40002800
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_CRC_MspInit+0x38>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10b      	bne.n	8001676 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_CRC_MspInit+0x3c>)
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_CRC_MspInit+0x3c>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_CRC_MspInit+0x3c>)
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023000 	.word	0x40023000
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_I2C_MspInit+0x9c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d138      	bne.n	8001720 <HAL_I2C_MspInit+0x94>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d8:	2304      	movs	r3, #4
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4813      	ldr	r0, [pc, #76]	; (8001730 <HAL_I2C_MspInit+0xa4>)
 80016e4:	f001 fc4a 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f2:	6593      	str	r3, [r2, #88]	; 0x58
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_I2C_MspInit+0xa0>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2021      	movs	r0, #33	; 0x21
 8001706:	f000 fad0 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800170a:	2021      	movs	r0, #33	; 0x21
 800170c:	f000 fae9 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2022      	movs	r0, #34	; 0x22
 8001716:	f000 fac8 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800171a:	2022      	movs	r0, #34	; 0x22
 800171c:	f000 fae1 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  }
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40005800 	.word	0x40005800
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400

08001734 <HAL_GPIO_EXTI_Callback>:
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  HW_GPIO_IrqHandler( GPIO_Pin );
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4618      	mov	r0, r3
 8001742:	f00c f83f 	bl	800d7c4 <HW_GPIO_IrqHandler>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 f971 	bl	8001a38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001756:	f000 faec 	bl	8001d32 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART2_IRQHandler+0x10>)
 8001766:	f007 fb1d 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000134c 	.word	0x2000134c

08001774 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART3_IRQHandler+0x10>)
 800177a:	f007 fb13 	bl	8008da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20001058 	.word	0x20001058

08001788 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <I2C2_EV_IRQHandler+0x10>)
 800178e:	f002 fa1d 	bl	8003bcc <HAL_I2C_EV_IRQHandler>
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200010e0 	.word	0x200010e0

0800179c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C2_ER_IRQHandler+0x10>)
 80017a2:	f002 fa2d 	bl	8003c00 <HAL_I2C_ER_IRQHandler>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200010e0 	.word	0x200010e0

080017b0 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line[15:0] interrupts.
*/
void EXTI0_IRQHandler( void )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 80017b4:	2001      	movs	r0, #1
 80017b6:	f001 fe9d 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}

080017be <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 80017c2:	2002      	movs	r0, #2
 80017c4:	f001 fe96 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 80017d0:	2004      	movs	r0, #4
 80017d2:	f001 fe8f 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}

080017da <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 80017de:	2008      	movs	r0, #8
 80017e0:	f001 fe88 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 80017ec:	2010      	movs	r0, #16
 80017ee:	f001 fe81 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 80017fa:	2020      	movs	r0, #32
 80017fc:	f001 fe7a 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8001800:	2040      	movs	r0, #64	; 0x40
 8001802:	f001 fe77 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8001806:	2080      	movs	r0, #128	; 0x80
 8001808:	f001 fe74 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800180c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001810:	f001 fe70 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8001814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001818:	f001 fe6c 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8001824:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001828:	f001 fe64 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800182c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001830:	f001 fe60 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8001834:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001838:	f001 fe5c 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800183c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001840:	f001 fe58 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8001844:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001848:	f001 fe54 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800184c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001850:	f001 fe50 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <_kill+0x20>)
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
	return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	200022dc 	.word	0x200022dc

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffe5 	bl	8001868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800189e:	e7fe      	b.n	800189e <_exit+0x12>

080018a0 <_sbrk>:
//	}
//	return len;
//}

caddr_t _sbrk(int incr)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x50>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x16>
		heap_end = &end;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <_sbrk+0x50>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <_sbrk+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <_sbrk+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <_sbrk+0x50>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	466a      	mov	r2, sp
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d905      	bls.n	80018d6 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <_sbrk+0x58>)
 80018cc:	220c      	movs	r2, #12
 80018ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	e006      	b.n	80018e4 <_sbrk+0x44>
	}

	heap_end += incr;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <_sbrk+0x50>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <_sbrk+0x50>)
 80018e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	20000348 	.word	0x20000348
 80018f4:	200022e0 	.word	0x200022e0
 80018f8:	200022dc 	.word	0x200022dc

080018fc <_close>:

int _close(int file)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	return -1;
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001924:	605a      	str	r2, [r3, #4]
	return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_isatty>:

int _isatty(int file)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	return 1;
 800193c:	2301      	movs	r3, #1
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
	return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <SystemInit+0x64>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <SystemInit+0x64>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <SystemInit+0x68>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a13      	ldr	r2, [pc, #76]	; (80019cc <SystemInit+0x68>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <SystemInit+0x68>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <SystemInit+0x68>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <SystemInit+0x68>)
 8001990:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001994:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001998:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <SystemInit+0x68>)
 800199c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <SystemInit+0x68>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <SystemInit+0x68>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <SystemInit+0x68>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SystemInit+0x64>)
 80019b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ba:	609a      	str	r2, [r3, #8]
#endif
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	40021000 	.word	0x40021000

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x28>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x28>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f955 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fc6e 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_InitTick+0x30>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_InitTick+0x34>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f980 	bl	8001d1a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a22:	f000 f942 	bl	8001caa <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000068 	.word	0x20000068
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick++;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_IncTick+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x18>)
 8001a44:	6013      	str	r3, [r2, #0]
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20000ce8 	.word	0x20000ce8

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000ce8 	.word	0x20000ce8

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d002      	beq.n	8001a8c <HAL_Delay+0x20>
  {
    wait++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8001a8c:	bf00      	nop
 8001a8e:	f7ff ffe1 	bl	8001a54 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8f7      	bhi.n	8001a8e <HAL_Delay+0x22>
  {
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_SuspendTick+0x1c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_SuspendTick+0x1c>)
 8001ab2:	f023 0302 	bic.w	r3, r3, #2
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <NVIC_EnableIRQ+0x30>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <NVIC_DisableIRQ+0x30>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	3320      	adds	r3, #32
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	da0b      	bge.n	8001bc0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <NVIC_SetPriority+0x4c>)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	3b04      	subs	r3, #4
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbe:	e009      	b.n	8001bd4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4907      	ldr	r1, [pc, #28]	; (8001be4 <NVIC_SetPriority+0x50>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff13 	bl	8001ac8 <NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff28 	bl	8001b10 <NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff1b 	bl	8001b2c <NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff27 	bl	8001b60 <NVIC_DisableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff94 	bl	8001c50 <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d36:	f000 f802 	bl	8001d3e <HAL_SYSTICK_Callback>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e054      	b.n	8001e08 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7f5b      	ldrb	r3, [r3, #29]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fc6c 	bl	800164c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	791b      	ldrb	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <HAL_CRC_Init+0xc4>)
 8001d88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0218 	bic.w	r2, r2, #24
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	e00c      	b.n	8001db6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	461a      	mov	r2, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f950 	bl	800204c <HAL_CRCEx_Polynomial_Set>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e028      	b.n	8001e08 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	e004      	b.n	8001dd4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6912      	ldr	r2, [r2, #16]
 8001dd2:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	04c11db7 	.word	0x04c11db7

08001e14 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the  
  *        handle field hcrc->InputDataFormat. 
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0; /* CRC input data buffer index */
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
    
  /* Process locked */
  __HAL_LOCK(hcrc); 
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	7f1b      	ldrb	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_CRC_Calculate+0x20>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e042      	b.n	8001eba <HAL_CRC_Calculate+0xa6>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	771a      	strb	r2, [r3, #28]
  
  /* Change CRC peripheral state */  
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	775a      	strb	r2, [r3, #29]
  
  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is 
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	609a      	str	r2, [r3, #8]
  
  switch (hcrc->InputDataFormat)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d022      	beq.n	8001e9e <HAL_CRC_Calculate+0x8a>
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d002      	beq.n	8001e62 <HAL_CRC_Calculate+0x4e>
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d017      	beq.n	8001e90 <HAL_CRC_Calculate+0x7c>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
      break;
      
    default:
      break;    
 8001e60:	e024      	b.n	8001eac <HAL_CRC_Calculate+0x98>
      for(index = 0; index < BufferLength; index++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e00a      	b.n	8001e7e <HAL_CRC_Calculate+0x6a>
        hcrc->Instance->DR = pBuffer[index];
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	441a      	add	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	601a      	str	r2, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3f0      	bcc.n	8001e68 <HAL_CRC_Calculate+0x54>
      temp = hcrc->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
      break;
 8001e8e:	e00d      	b.n	8001eac <HAL_CRC_Calculate+0x98>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f814 	bl	8001ec2 <CRC_Handle_8>
 8001e9a:	6138      	str	r0, [r7, #16]
      break;
 8001e9c:	e006      	b.n	8001eac <HAL_CRC_Calculate+0x98>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f897 	bl	8001fd6 <CRC_Handle_16>
 8001ea8:	6138      	str	r0, [r7, #16]
      break;
 8001eaa:	bf00      	nop
  }

  /* Change CRC peripheral state */    
  hcrc->State = HAL_CRC_STATE_READY; 
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	775a      	strb	r2, [r3, #29]
  
  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
  
  /* Return the CRC computed value */ 
  return temp;
 8001eb8:	693b      	ldr	r3, [r7, #16]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b087      	sub	sp, #28
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  uint32_t i = 0; /* input data buffer index */
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e023      	b.n	8001f20 <CRC_Handle_8+0x5e>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	061a      	lsls	r2, r3, #24
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	440b      	add	r3, r1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	440b      	add	r3, r1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3303      	adds	r3, #3
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3d6      	bcc.n	8001ed8 <CRC_Handle_8+0x16>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d047      	beq.n	8001fc4 <CRC_Handle_8+0x102>
   {
     if  (BufferLength%4 == 1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <CRC_Handle_8+0x8c>
     {
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	7013      	strb	r3, [r2, #0]
     }
     if  (BufferLength%4 == 2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d113      	bne.n	8001f80 <CRC_Handle_8+0xbe>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	440b      	add	r3, r1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	6809      	ldr	r1, [r1, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	800b      	strh	r3, [r1, #0]
     }
     if  (BufferLength%4 == 3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d11c      	bne.n	8001fc4 <CRC_Handle_8+0x102>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	6809      	ldr	r1, [r1, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	800b      	strh	r3, [r1, #0]
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;  /* input data buffer index */
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e013      	b.n	8002014 <CRC_Handle_16+0x3e>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2*i]<<16) | (uint32_t)pBuffer[2*i+1];     
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	041a      	lsls	r2, r3, #16
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	440b      	add	r3, r1
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3e6      	bcc.n	8001fec <CRC_Handle_16+0x16>
  }
  if ((BufferLength%2) != 0)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <CRC_Handle_16+0x62>
  {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4413      	add	r3, r2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002058:	231f      	movs	r3, #31
 800205a:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)) {}
 800205c:	bf00      	nop
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <HAL_CRCEx_Polynomial_Set+0x2a>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	617a      	str	r2, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f3      	bne.n	800205e <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b18      	cmp	r3, #24
 800207a:	d844      	bhi.n	8002106 <HAL_CRCEx_Polynomial_Set+0xba>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <HAL_CRCEx_Polynomial_Set+0x38>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	08002107 	.word	0x08002107
 8002088:	08002107 	.word	0x08002107
 800208c:	08002107 	.word	0x08002107
 8002090:	08002107 	.word	0x08002107
 8002094:	08002107 	.word	0x08002107
 8002098:	08002107 	.word	0x08002107
 800209c:	08002107 	.word	0x08002107
 80020a0:	08002107 	.word	0x08002107
 80020a4:	080020fd 	.word	0x080020fd
 80020a8:	08002107 	.word	0x08002107
 80020ac:	08002107 	.word	0x08002107
 80020b0:	08002107 	.word	0x08002107
 80020b4:	08002107 	.word	0x08002107
 80020b8:	08002107 	.word	0x08002107
 80020bc:	08002107 	.word	0x08002107
 80020c0:	08002107 	.word	0x08002107
 80020c4:	080020f3 	.word	0x080020f3
 80020c8:	08002107 	.word	0x08002107
 80020cc:	08002107 	.word	0x08002107
 80020d0:	08002107 	.word	0x08002107
 80020d4:	08002107 	.word	0x08002107
 80020d8:	08002107 	.word	0x08002107
 80020dc:	08002107 	.word	0x08002107
 80020e0:	08002107 	.word	0x08002107
 80020e4:	080020e9 	.word	0x080020e9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d90d      	bls.n	800210a <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e01f      	b.n	8002132 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d90a      	bls.n	800210e <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01a      	b.n	8002132 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d907      	bls.n	8002112 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e015      	b.n	8002132 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                        
 8002106:	bf00      	nop
 8002108:	e004      	b.n	8002114 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800210a:	bf00      	nop
 800210c:	e002      	b.n	8002114 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800210e:	bf00      	nop
 8002110:	e000      	b.n	8002114 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002112:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0118 	bic.w	r1, r3, #24
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(NULL == hdma)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Abort+0x16>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e022      	b.n	800219c <HAL_DMA_Abort+0x5c>
  }

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 020e 	bic.w	r2, r2, #14
 8002164:	601a      	str	r2, [r3, #0]
  /* disable the DMAMUX sync overrun IT*/
  hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f003 021c 	and.w	r2, r3, #28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	605a      	str	r2, [r3, #4]
  }

#endif /* DMAMUX1 */

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d005      	beq.n	80021cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2204      	movs	r2, #4
 80021c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e029      	b.n	8002220 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020e 	bic.w	r2, r2, #14
 80021da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 021c 	and.w	r2, r3, #28
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
    }
  }
  return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800223e:	4b2f      	ldr	r3, [pc, #188]	; (80022fc <HAL_FLASH_Program+0xd0>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_FLASH_Program+0x1e>
 8002246:	2302      	movs	r3, #2
 8002248:	e053      	b.n	80022f2 <HAL_FLASH_Program+0xc6>
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_FLASH_Program+0xd0>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002250:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002254:	f000 f8b6 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002258:	4603      	mov	r3, r0
 800225a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d143      	bne.n	80022ea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_FLASH_Program+0xd0>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_FLASH_Program+0xd4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_FLASH_Program+0xd4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_FLASH_Program+0xd4>)
 800227a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800227e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_FLASH_Program+0xd0>)
 8002282:	2202      	movs	r2, #2
 8002284:	771a      	strb	r2, [r3, #28]
 8002286:	e002      	b.n	800228e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_FLASH_Program+0xd0>)
 800228a:	2200      	movs	r2, #0
 800228c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f000 f8f1 	bl	8002480 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800229e:	2301      	movs	r3, #1
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	e010      	b.n	80022c6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d002      	beq.n	80022b0 <HAL_FLASH_Program+0x84>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d10a      	bne.n	80022c6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	68b8      	ldr	r0, [r7, #8]
 80022b6:	f000 f905 	bl	80024c4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d102      	bne.n	80022c6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80022c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022c4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022ca:	f000 f87b 	bl	80023c4 <FLASH_WaitForLastOperation>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_FLASH_Program+0xd4>)
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <HAL_FLASH_Program+0xd4>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022e6:	f000 fad5 	bl	8002894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_FLASH_Program+0xd0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]

  return status;
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000006c 	.word	0x2000006c
 8002300:	40022000 	.word	0x40022000

08002304 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_FLASH_Unlock+0x38>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	da0b      	bge.n	800232e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_FLASH_Unlock+0x38>)
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_FLASH_Unlock+0x3c>)
 800231a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_FLASH_Unlock+0x38>)
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_FLASH_Unlock+0x40>)
 8002320:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_FLASH_Unlock+0x38>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da01      	bge.n	800232e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800232e:	79fb      	ldrb	r3, [r7, #7]
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40022000 	.word	0x40022000
 8002340:	45670123 	.word	0x45670123
 8002344:	cdef89ab 	.word	0xcdef89ab

08002348 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_FLASH_Lock+0x1c>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_FLASH_Lock+0x1c>)
 8002352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002356:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40022000 	.word	0x40022000

08002368 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_FLASH_OB_Unlock+0x2c>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_FLASH_OB_Unlock+0x2c>)
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_FLASH_OB_Unlock+0x30>)
 800237c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_FLASH_OB_Unlock+0x2c>)
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_FLASH_OB_Unlock+0x34>)
 8002382:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40022000 	.word	0x40022000
 8002398:	08192a3b 	.word	0x08192a3b
 800239c:	4c5d6e7f 	.word	0x4c5d6e7f

080023a0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_FLASH_OB_Launch+0x20>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_FLASH_OB_Launch+0x20>)
 80023aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ae:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80023b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b4:	f000 f806 	bl	80023c4 <FLASH_WaitForLastOperation>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000

080023c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fb42 	bl	8001a54 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023d2:	e00d      	b.n	80023f0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d009      	beq.n	80023f0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80023dc:	f7ff fb3a 	bl	8001a54 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d801      	bhi.n	80023f0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03f      	b.n	8002470 <FLASH_WaitForLastOperation+0xac>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d0ea      	beq.n	80023d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002406:	4013      	ands	r3, r2
 8002408:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01e      	beq.n	800245c <FLASH_WaitForLastOperation+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <FLASH_WaitForLastOperation+0xb8>)
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	4a15      	ldr	r2, [pc, #84]	; (800247c <FLASH_WaitForLastOperation+0xb8>)
 8002428:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <FLASH_WaitForLastOperation+0x80>
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800243e:	490e      	ldr	r1, [pc, #56]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	618b      	str	r3, [r1, #24]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <FLASH_WaitForLastOperation+0x94>
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002456:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e009      	b.n	8002470 <FLASH_WaitForLastOperation+0xac>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d102      	bne.n	800246e <FLASH_WaitForLastOperation+0xaa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <FLASH_WaitForLastOperation+0xb4>)
 800246a:	2201      	movs	r2, #1
 800246c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40022000 	.word	0x40022000
 800247c:	2000006c 	.word	0x2000006c

08002480 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002480:	b490      	push	{r4, r7}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <FLASH_Program_DoubleWord+0x40>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <FLASH_Program_DoubleWord+0x40>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6153      	str	r3, [r2, #20]

  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800249e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	f04f 0400 	mov.w	r4, #0
 80024aa:	0013      	movs	r3, r2
 80024ac:	2400      	movs	r4, #0
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	3204      	adds	r2, #4
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc90      	pop	{r4, r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000

080024c4 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80024ce:	2340      	movs	r3, #64	; 0x40
 80024d0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <FLASH_Program_Fast+0x54>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <FLASH_Program_Fast+0x54>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e4:	6153      	str	r3, [r2, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e6:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	3304      	adds	r3, #4
 80024f4:	613b      	str	r3, [r7, #16]
    src_addr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
    row_index--;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	3b01      	subs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  } while (row_index != 0U);
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ef      	bne.n	80024e8 <FLASH_Program_Fast+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8002508:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_FLASHEx_Erase+0x16>
 800252e:	2302      	movs	r3, #2
 8002530:	e08d      	b.n	800264e <HAL_FLASHEx_Erase+0x132>
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002538:	f24c 3050 	movw	r0, #50000	; 0xc350
 800253c:	f7ff ff42 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d17d      	bne.n	8002646 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3e      	ldr	r2, [pc, #248]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002562:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002566:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002568:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002574:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a38      	ldr	r2, [pc, #224]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 800257a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 8002582:	2203      	movs	r2, #3
 8002584:	771a      	strb	r2, [r3, #28]
 8002586:	e016      	b.n	80025b6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 800258a:	2201      	movs	r2, #1
 800258c:	771a      	strb	r2, [r3, #28]
 800258e:	e012      	b.n	80025b6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2e      	ldr	r2, [pc, #184]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 80025a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	771a      	strb	r2, [r3, #28]
 80025ae:	e002      	b.n	80025b6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d113      	bne.n	80025e6 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f908 	bl	80027d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025cc:	f7ff fefa 	bl	80023c4 <FLASH_WaitForLastOperation>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 80025da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6153      	str	r3, [r2, #20]
 80025e4:	e02d      	b.n	8002642 <HAL_FLASHEx_Erase+0x126>
#endif      
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	601a      	str	r2, [r3, #0]
      
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	e01d      	b.n	8002632 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4619      	mov	r1, r3
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f000 f913 	bl	8002828 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002602:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002606:	f7ff fedd 	bl	80023c4 <FLASH_WaitForLastOperation>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <HAL_FLASHEx_Erase+0x140>)
 8002614:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002618:	f023 0302 	bic.w	r3, r3, #2
 800261c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	601a      	str	r2, [r3, #0]
          break;
 800262a:	e00a      	b.n	8002642 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4413      	add	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3d9      	bcc.n	80025f6 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }
    
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002642:	f000 f927 	bl	8002894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_FLASHEx_Erase+0x13c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]

  return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000006c 	.word	0x2000006c
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_FLASHEx_OBProgram+0xd8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_FLASHEx_OBProgram+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e05a      	b.n	800272e <HAL_FLASHEx_OBProgram+0xce>
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_FLASHEx_OBProgram+0xd8>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
  
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800267e:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <HAL_FLASHEx_OBProgram+0xd8>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6858      	ldr	r0, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	461a      	mov	r2, r3
 800269e:	f000 f93d 	bl	800291c <FLASH_OB_WRPConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
    }
    
  }
  
  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f991 	bl	80029e4 <FLASH_OB_RDPConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f000 f9ac 	bl	8002a40 <FLASH_OB_UserConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	429a      	cmp	r2, r3
 8002708:	d00d      	beq.n	8002726 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69d8      	ldr	r0, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a19      	ldr	r1, [r3, #32]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	461a      	mov	r2, r3
 8002718:	f000 fa8a 	bl	8002c30 <FLASH_OB_PCROPConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_FLASHEx_OBProgram+0xd8>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000006c 	.word	0x2000006c

0800273c <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2206      	movs	r2, #6
 8002748:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_FLASHEx_OBGetConfig+0x2e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d10f      	bne.n	800278a <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6858      	ldr	r0, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f103 0108 	add.w	r1, r3, #8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	330c      	adds	r3, #12
 8002784:	461a      	mov	r2, r3
 8002786:	f000 fafd 	bl	8002d84 <FLASH_OB_GetWRP>
  }
  
  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800278a:	f000 fb45 	bl	8002e18 <FLASH_OB_GetRDP>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	611a      	str	r2, [r3, #16]
  
  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002794:	f000 fb5a 	bl	8002e4c <FLASH_OB_GetUser>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d003      	beq.n	80027ae <HAL_FLASHEx_OBGetConfig+0x72>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d110      	bne.n	80027d0 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif    
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f043 0208 	orr.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f103 001c 	add.w	r0, r3, #28
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0120 	add.w	r1, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 fb52 	bl	8002e74 <FLASH_OB_GetPCROP>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <FLASH_MassErase+0x4c>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <FLASH_MassErase+0x4c>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6153      	str	r3, [r2, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <FLASH_MassErase+0x4c>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <FLASH_MassErase+0x4c>)
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <FLASH_MassErase+0x4c>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <FLASH_MassErase+0x4c>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002816:	6153      	str	r3, [r2, #20]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40022000 	.word	0x40022000

08002828 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <FLASH_PageErase+0x68>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <FLASH_PageErase+0x68>)
 8002842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002846:	6153      	str	r3, [r2, #20]
 8002848:	e005      	b.n	8002856 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <FLASH_PageErase+0x68>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <FLASH_PageErase+0x68>)
 8002850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002854:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <FLASH_PageErase+0x68>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <FLASH_PageErase+0x68>)
 8002868:	4313      	orrs	r3, r2
 800286a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <FLASH_PageErase+0x68>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <FLASH_PageErase+0x68>)
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <FLASH_PageErase+0x68>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <FLASH_PageErase+0x68>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6153      	str	r3, [r2, #20]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40022000 	.word	0x40022000

08002894 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <FLASH_FlushCaches+0x80>)
 800289c:	7f1b      	ldrb	r3, [r3, #28]
 800289e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <FLASH_FlushCaches+0x18>
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d111      	bne.n	80028d0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d002      	beq.n	80028dc <FLASH_FlushCaches+0x48>
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d111      	bne.n	8002900 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <FLASH_FlushCaches+0x84>)
 80028fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fe:	6013      	str	r3, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <FLASH_FlushCaches+0x80>)
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000006c 	.word	0x2000006c
 8002918:	40022000 	.word	0x40022000

0800291c <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1) 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002928:	f24c 3050 	movw	r0, #50000	; 0xc350
 800292c:	f7ff fd4a 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d14c      	bne.n	80029d4 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END), 
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0419      	lsls	r1, r3, #16
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	430b      	orrs	r3, r1
 8002950:	4923      	ldr	r1, [pc, #140]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002956:	e02b      	b.n	80029b0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10b      	bne.n	8002976 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END), 
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0419      	lsls	r1, r3, #16
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	430b      	orrs	r3, r1
 800296e:	491c      	ldr	r1, [pc, #112]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	630b      	str	r3, [r1, #48]	; 0x30
 8002974:	e01c      	b.n	80029b0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10b      	bne.n	8002994 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END), 
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0419      	lsls	r1, r3, #16
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	430b      	orrs	r3, r1
 800298c:	4914      	ldr	r1, [pc, #80]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002992:	e00d      	b.n	80029b0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d10a      	bne.n	80029b0 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END), 
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0419      	lsls	r1, r3, #16
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	490d      	ldr	r1, [pc, #52]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029c0:	f7ff fd00 	bl	80023c4 <FLASH_WaitForLastOperation>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <FLASH_OB_WRPConfig+0xc4>)
 80029ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029d2:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000

080029e4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f0:	f7ff fce8 	bl	80023c4 <FLASH_WaitForLastOperation>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <FLASH_OB_RDPConfig+0x4e>
  { 
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a06:	490d      	ldr	r1, [pc, #52]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a1e:	f7ff fcd1 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <FLASH_OB_RDPConfig+0x58>)
 8002a2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a30:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022000 	.word	0x40022000

08002a40 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25). 
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a56:	f7ff fcb5 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80de 	bne.w	8002c22 <FLASH_OB_UserConfig+0x1e2>
  { 
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));
    
      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a82:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));
    
      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d009      	beq.n	8002ac0 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));
    
      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002abe:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));
    
      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));
    
      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));
    
      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));
    
      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b36:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));
    
      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b54:	613b      	str	r3, [r7, #16]
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));
    
      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b72:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));
    
      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b90:	613b      	str	r3, [r7, #16]
#endif
    }
#endif
    
    if((UserType & OB_USER_nBOOT1) != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));
    
      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bae:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));
    
      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));
    
      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bea:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif
    
    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	490d      	ldr	r1, [pc, #52]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c0e:	f7ff fbd9 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <FLASH_OB_UserConfig+0x1ec>)
 8002c1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c20:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022000 	.word	0x40022000

08002c30 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c40:	f7ff fbc0 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002c44:	4603      	mov	r3, r0
 8002c46:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8002c48:	7ffb      	ldrb	r3, [r7, #31]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 808a 	bne.w	8002d64 <FLASH_OB_PCROPConfig+0x134>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <FLASH_OB_PCROPConfig+0x140>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d114      	bne.n	8002c86 <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8002c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c60:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <FLASH_OB_PCROPConfig+0x144>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d008      	beq.n	8002c80 <FLASH_OB_PCROPConfig+0x50>
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <FLASH_OB_PCROPConfig+0x144>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	085a      	lsrs	r2, r3, #1
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <FLASH_OB_PCROPConfig+0x148>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c7e:	e000      	b.n	8002c82 <FLASH_OB_PCROPConfig+0x52>
 8002c80:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <FLASH_OB_PCROPConfig+0x14c>)
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e013      	b.n	8002cae <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <FLASH_OB_PCROPConfig+0x144>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d008      	beq.n	8002ca4 <FLASH_OB_PCROPConfig+0x74>
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <FLASH_OB_PCROPConfig+0x144>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	085a      	lsrs	r2, r3, #1
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <FLASH_OB_PCROPConfig+0x148>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ca2:	e000      	b.n	8002ca6 <FLASH_OB_PCROPConfig+0x76>
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <FLASH_OB_PCROPConfig+0x14c>)
 8002ca6:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8002ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cac:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d11a      	bne.n	8002cee <FLASH_OB_PCROPConfig+0xbe>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	492d      	ldr	r1, [pc, #180]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	624b      	str	r3, [r1, #36]	; 0x24
        
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	08db      	lsrs	r3, r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	4926      	ldr	r1, [pc, #152]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	628b      	str	r3, [r1, #40]	; 0x28
 8002cec:	e01e      	b.n	8002d2c <FLASH_OB_PCROPConfig+0xfc>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d119      	bne.n	8002d2c <FLASH_OB_PCROPConfig+0xfc>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	08db      	lsrs	r3, r3, #3
 8002d00:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002d02:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	491d      	ldr	r1, [pc, #116]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	644b      	str	r3, [r1, #68]	; 0x44
        
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }
    
    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	4911      	ldr	r1, [pc, #68]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	628b      	str	r3, [r1, #40]	; 0x28
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4a:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d50:	f7ff fb38 	bl	80023c4 <FLASH_WaitForLastOperation>
 8002d54:	4603      	mov	r3, r0
 8002d56:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <FLASH_OB_PCROPConfig+0x150>)
 8002d5e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d62:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000
 8002d74:	1fff75e0 	.word	0x1fff75e0
 8002d78:	001ffe00 	.word	0x001ffe00
 8002d7c:	08080000 	.word	0x08080000
 8002d80:	40022000 	.word	0x40022000

08002d84 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8002da0:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8002dac:	e02b      	b.n	8002e06 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10b      	bne.n	8002dcc <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	e01c      	b.n	8002e06 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d10b      	bne.n	8002dea <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
}
 8002de8:	e00d      	b.n	8002e06 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d10a      	bne.n	8002e06 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <FLASH_OB_GetWRP+0x90>)
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000

08002e18 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <FLASH_OB_GetRDP+0x30>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2baa      	cmp	r3, #170	; 0xaa
 8002e2a:	d004      	beq.n	8002e36 <FLASH_OB_GetRDP+0x1e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2bcc      	cmp	r3, #204	; 0xcc
 8002e30:	d001      	beq.n	8002e36 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002e32:	23bb      	movs	r3, #187	; 0xbb
 8002e34:	e002      	b.n	8002e3c <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <FLASH_OB_GetRDP+0x30>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	b2db      	uxtb	r3, r3
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40022000 	.word	0x40022000

08002e4c <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),  
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27). 
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <FLASH_OB_GetUser+0x24>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e5e:	607b      	str	r3, [r7, #4]
  
  return user_config;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000

08002e74 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <FLASH_OB_GetPCROP+0xf4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8002e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e90:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002e92:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <FLASH_OB_GetPCROP+0xf8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <FLASH_OB_GetPCROP+0x3c>
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <FLASH_OB_GetPCROP+0xf8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	085a      	lsrs	r2, r3, #1
 8002ea6:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <FLASH_OB_GetPCROP+0xfc>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002eae:	e000      	b.n	8002eb2 <FLASH_OB_GetPCROP+0x3e>
 8002eb0:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <FLASH_OB_GetPCROP+0x100>)
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e013      	b.n	8002ede <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <FLASH_OB_GetPCROP+0xf8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d008      	beq.n	8002ed4 <FLASH_OB_GetPCROP+0x60>
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <FLASH_OB_GetPCROP+0xf8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	085a      	lsrs	r2, r3, #1
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <FLASH_OB_GetPCROP+0xfc>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ed2:	e000      	b.n	8002ed6 <FLASH_OB_GetPCROP+0x62>
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <FLASH_OB_GetPCROP+0x100>)
 8002ed6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8002ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d114      	bne.n	8002f14 <FLASH_OB_GetPCROP+0xa0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <FLASH_OB_GetPCROP+0x104>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	441a      	add	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <FLASH_OB_GetPCROP+0x104>)
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e019      	b.n	8002f48 <FLASH_OB_GetPCROP+0xd4>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d113      	bne.n	8002f48 <FLASH_OB_GetPCROP+0xd4>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <FLASH_OB_GetPCROP+0x104>)
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	00da      	lsls	r2, r3, #3
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <FLASH_OB_GetPCROP+0x104>)
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }
  
  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <FLASH_OB_GetPCROP+0x104>)
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	1fff75e0 	.word	0x1fff75e0
 8002f70:	001ffe00 	.word	0x001ffe00
 8002f74:	08080000 	.word	0x08080000
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002f92:	e17f      	b.n	8003294 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8171 	beq.w	800328e <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x40>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b12      	cmp	r3, #18
 8002fba:	d123      	bne.n	8003004 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	6939      	ldr	r1, [r7, #16]
 8003000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00b      	beq.n	8003058 <HAL_GPIO_Init+0xdc>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d007      	beq.n	8003058 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304c:	2b11      	cmp	r3, #17
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b12      	cmp	r3, #18
 8003056:	d130      	bne.n	80030ba <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0201 	and.w	r2, r3, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d118      	bne.n	80030f8 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80ac 	beq.w	800328e <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	4a5d      	ldr	r2, [pc, #372]	; (80032b0 <HAL_GPIO_Init+0x334>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6613      	str	r3, [r2, #96]	; 0x60
 8003142:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_GPIO_Init+0x338>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003178:	d025      	beq.n	80031c6 <HAL_GPIO_Init+0x24a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_GPIO_Init+0x33c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01f      	beq.n	80031c2 <HAL_GPIO_Init+0x246>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_GPIO_Init+0x340>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d019      	beq.n	80031be <HAL_GPIO_Init+0x242>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_GPIO_Init+0x344>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0x23e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <HAL_GPIO_Init+0x348>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <HAL_GPIO_Init+0x23a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4a      	ldr	r2, [pc, #296]	; (80032c8 <HAL_GPIO_Init+0x34c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_Init+0x236>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_GPIO_Init+0x350>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_GPIO_Init+0x232>
 80031aa:	2306      	movs	r3, #6
 80031ac:	e00c      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00a      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031b2:	2305      	movs	r3, #5
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x24c>
 80031c6:	2300      	movs	r3, #0
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031d8:	4936      	ldr	r1, [pc, #216]	; (80032b4 <HAL_GPIO_Init+0x338>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_GPIO_Init+0x354>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320a:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800325e:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003288:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae78 	bne.w	8002f94 <HAL_GPIO_Init+0x18>
  }
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40010000 	.word	0x40010000
 80032b8:	48000400 	.word	0x48000400
 80032bc:	48000800 	.word	0x48000800
 80032c0:	48000c00 	.word	0x48000c00
 80032c4:	48001000 	.word	0x48001000
 80032c8:	48001400 	.word	0x48001400
 80032cc:	48001800 	.word	0x48001800
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 80032ea:	e0cd      	b.n	8003488 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80032ec:	2201      	movs	r2, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80c0 	beq.w	8003482 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2103      	movs	r1, #3
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	08d2      	lsrs	r2, r2, #3
 8003336:	4019      	ands	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2103      	movs	r1, #3
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	401a      	ands	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	2101      	movs	r1, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	401a      	ands	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2103      	movs	r1, #3
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8003394:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <HAL_GPIO_DeInit+0x1d0>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a0:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	220f      	movs	r2, #15
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_DeInit+0x136>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <HAL_GPIO_DeInit+0x1d4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <HAL_GPIO_DeInit+0x132>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a38      	ldr	r2, [pc, #224]	; (80034ac <HAL_GPIO_DeInit+0x1d8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_DeInit+0x12e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <HAL_GPIO_DeInit+0x1dc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_DeInit+0x12a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_GPIO_DeInit+0x1e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_DeInit+0x126>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <HAL_GPIO_DeInit+0x1e4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_DeInit+0x122>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a34      	ldr	r2, [pc, #208]	; (80034bc <HAL_GPIO_DeInit+0x1e8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_DeInit+0x11e>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00c      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e00a      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 80033f6:	2305      	movs	r3, #5
 80033f8:	e008      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e006      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 80033fe:	2303      	movs	r3, #3
 8003400:	e004      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 8003402:	2302      	movs	r3, #2
 8003404:	e002      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_GPIO_DeInit+0x138>
 800340a:	2300      	movs	r3, #0
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	f002 0203 	and.w	r2, r2, #3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4093      	lsls	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d132      	bne.n	8003482 <HAL_GPIO_DeInit+0x1ae>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_GPIO_DeInit+0x1d0>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43da      	mvns	r2, r3
 800343c:	4819      	ldr	r0, [pc, #100]	; (80034a4 <HAL_GPIO_DeInit+0x1d0>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	400a      	ands	r2, r1
 8003444:	3302      	adds	r3, #2
 8003446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 8003454:	4013      	ands	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	4917      	ldr	r1, [pc, #92]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 8003462:	4013      	ands	r3, r2
 8003464:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	4914      	ldr	r1, [pc, #80]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 8003470:	4013      	ands	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	4910      	ldr	r1, [pc, #64]	; (80034c0 <HAL_GPIO_DeInit+0x1ec>)
 800347e:	4013      	ands	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	f47f af2b 	bne.w	80032ec <HAL_GPIO_DeInit+0x18>
  }
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	48000400 	.word	0x48000400
 80034ac:	48000800 	.word	0x48000800
 80034b0:	48000c00 	.word	0x48000c00
 80034b4:	48001000 	.word	0x48001000
 80034b8:	48001400 	.word	0x48001400
 80034bc:	48001800 	.word	0x48001800
 80034c0:	40010400 	.word	0x40010400

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e0:	e002      	b.n	80034e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe f90e 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_I2C_Init+0x1a>
  {
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e081      	b.n	8003642 <HAL_I2C_Init+0x11e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe f89a 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800357c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_I2C_Init+0x82>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	e006      	b.n	80035b4 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d104      	bne.n	80035c6 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	ea42 0103 	orr.w	r1, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b20      	cmp	r3, #32
 8003670:	f040 80f7 	bne.w	8003862 <HAL_I2C_Mem_Write+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_I2C_Mem_Write+0x34>
 800367a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0eb      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_I2C_Mem_Write+0x4e>
 8003696:	2302      	movs	r3, #2
 8003698:	e0e4      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036a2:	f7fe f9d7 	bl	8001a54 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2319      	movs	r3, #25
 80036ae:	2201      	movs	r2, #1
 80036b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f001 fb63 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0cf      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2221      	movs	r2, #33	; 0x21
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ec:	88f8      	ldrh	r0, [r7, #6]
 80036ee:	893a      	ldrh	r2, [r7, #8]
 80036f0:	8979      	ldrh	r1, [r7, #10]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4603      	mov	r3, r0
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fec7 	bl	8004490 <I2C_RequestMemoryWrite>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0a7      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2bff      	cmp	r3, #255	; 0xff
 800371c:	d90e      	bls.n	800373c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	b2da      	uxtb	r2, r3
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f001 fc45 	bl	8004fc4 <I2C_TransferConfig>
 800373a:	e00f      	b.n	800375c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	b2da      	uxtb	r2, r3
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f001 fc34 	bl	8004fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f001 fb4d 	bl	8004e00 <I2C_WaitOnTXISFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e079      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6251      	str	r1, [r2, #36]	; 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d034      	beq.n	8003810 <HAL_I2C_Mem_Write+0x1c4>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d130      	bne.n	8003810 <HAL_I2C_Mem_Write+0x1c4>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f001 fae1 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x17c>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e04d      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2bff      	cmp	r3, #255	; 0xff
 80037d0:	d90e      	bls.n	80037f0 <HAL_I2C_Mem_Write+0x1a4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	22ff      	movs	r2, #255	; 0xff
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f001 fbeb 	bl	8004fc4 <I2C_TransferConfig>
 80037ee:	e00f      	b.n	8003810 <HAL_I2C_Mem_Write+0x1c4>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f001 fbda 	bl	8004fc4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1a0      	bne.n	800375c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f001 fb2e 	bl	8004e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Mem_Write+0x1e2>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01a      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_I2C_Mem_Write+0x220>)
 8003842:	400b      	ands	r3, r1
 8003844:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_I2C_Mem_Write+0x218>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	fe00e800 	.word	0xfe00e800

08003870 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80fb 	bne.w	8003a8e <HAL_I2C_Mem_Read+0x21e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ef      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Read+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0e8      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe f8c5 	bl	8001a54 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f001 fa51 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d3      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2222      	movs	r2, #34	; 0x22
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fe09 	bl	8004538 <I2C_RequestMemoryRead>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0ab      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_I2C_Mem_Read+0x228>)
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 fb33 	bl	8004fc4 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <HAL_I2C_Mem_Read+0x228>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f001 fb22 	bl	8004fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2200      	movs	r2, #0
 8003988:	2104      	movs	r1, #4
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f001 f9f8 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07a      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c59      	adds	r1, r3, #1
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	6251      	str	r1, [r2, #36]	; 0x24
 80039aa:	b2c2      	uxtb	r2, r0
 80039ac:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d034      	beq.n	8003a3c <HAL_I2C_Mem_Read+0x1cc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d130      	bne.n	8003a3c <HAL_I2C_Mem_Read+0x1cc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f001 f9cb 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x184>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04d      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d90e      	bls.n	8003a1c <HAL_I2C_Mem_Read+0x1ac>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f001 fad5 	bl	8004fc4 <I2C_TransferConfig>
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Mem_Read+0x1cc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	8979      	ldrh	r1, [r7, #10]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f001 fac4 	bl	8004fc4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d19c      	bne.n	8003980 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f001 fa18 	bl	8004e80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Mem_Read+0x1ea>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e01a      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_I2C_Mem_Read+0x22c>)
 8003a6e:	400b      	ands	r3, r1
 8003a70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_I2C_Mem_Read+0x220>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	80002400 	.word	0x80002400
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d176      	bne.n	8003bb4 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_I2C_Mem_Read_IT+0x32>
 8003acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06b      	b.n	8003bb6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	e061      	b.n	8003bb6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2C_Mem_Read_IT+0x60>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e05a      	b.n	8003bb6 <HAL_I2C_Mem_Read_IT+0x116>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b08:	f7fd ffa4 	bl	8001a54 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2222      	movs	r2, #34	; 0x22
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2240      	movs	r2, #64	; 0x40
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <HAL_I2C_Mem_Read_IT+0x120>)
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_I2C_Mem_Read_IT+0x124>)
 8003b3a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	d906      	bls.n	8003b54 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e007      	b.n	8003b64 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b62:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003b64:	88f8      	ldrh	r0, [r7, #6]
 8003b66:	893a      	ldrh	r2, [r7, #8]
 8003b68:	8979      	ldrh	r1, [r7, #10]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4603      	mov	r3, r0
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fcdf 	bl	8004538 <I2C_RequestMemoryRead>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e014      	b.n	8003bb6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_I2C_Mem_Read_IT+0x128>)
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f001 fa12 	bl	8004fc4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ba8:	2102      	movs	r1, #2
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 fa38 	bl	8005020 <I2C_Enable_IRQ>

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	ffff0000 	.word	0xffff0000
 8003bc4:	08003d5f 	.word	0x08003d5f
 8003bc8:	80002400 	.word	0x80002400

08003bcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <HAL_I2C_ER_IRQHandler+0x42>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c40:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <HAL_I2C_ER_IRQHandler+0x6c>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00f      	beq.n	8003c96 <HAL_I2C_ER_IRQHandler+0x96>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c94:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f003 030b 	and.w	r3, r3, #11
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 ff53 	bl	8004b54 <I2C_ITError>
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	4613      	mov	r3, r2
 8003d14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af02      	add	r7, sp, #8
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <I2C_Master_ISR_IT+0x1a>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e101      	b.n	8003f7c <I2C_Master_ISR_IT+0x21e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <I2C_Master_ISR_IT+0x52>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <I2C_Master_ISR_IT+0x52>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 ff99 	bl	8004ce0 <I2C_Flush_TXDR>
 8003dae:	e0d2      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01c      	beq.n	8003df4 <I2C_Master_ISR_IT+0x96>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <I2C_Master_ISR_IT+0x96>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	6251      	str	r1, [r2, #36]	; 0x24
 8003dd4:	b2c2      	uxtb	r2, r0
 8003dd6:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df2:	e0b0      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01b      	beq.n	8003e36 <I2C_Master_ISR_IT+0xd8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d016      	beq.n	8003e36 <I2C_Master_ISR_IT+0xd8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c59      	adds	r1, r3, #1
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	6251      	str	r1, [r2, #36]	; 0x24
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e34:	e08f      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05d      	beq.n	8003efc <I2C_Master_ISR_IT+0x19e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d058      	beq.n	8003efc <I2C_Master_ISR_IT+0x19e>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d041      	beq.n	8003ed8 <I2C_Master_ISR_IT+0x17a>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d13d      	bne.n	8003ed8 <I2C_Master_ISR_IT+0x17a>
    {
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e68:	82fb      	strh	r3, [r7, #22]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2bff      	cmp	r3, #255	; 0xff
 8003e72:	d90e      	bls.n	8003e92 <I2C_Master_ISR_IT+0x134>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	8af9      	ldrh	r1, [r7, #22]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f001 f89a 	bl	8004fc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e90:	e033      	b.n	8003efa <I2C_Master_ISR_IT+0x19c>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea4:	d00c      	beq.n	8003ec0 <I2C_Master_ISR_IT+0x162>
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003eb0:	8af9      	ldrh	r1, [r7, #22]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f001 f883 	bl	8004fc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ebe:	e01c      	b.n	8003efa <I2C_Master_ISR_IT+0x19c>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8af9      	ldrh	r1, [r7, #22]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f001 f877 	bl	8004fc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	e010      	b.n	8003efa <I2C_Master_ISR_IT+0x19c>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee6:	d003      	beq.n	8003ef0 <I2C_Master_ISR_IT+0x192>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSequentialCplt(hi2c);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fbfb 	bl	80046e4 <I2C_ITMasterSequentialCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eee:	e032      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fe2e 	bl	8004b54 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ef8:	e02d      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
 8003efa:	e02c      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
      }
    }
  }
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d027      	beq.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d022      	beq.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
  {
    if (hi2c->XferCount == 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d119      	bne.n	8003f4e <I2C_Master_ISR_IT+0x1f0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f28:	d015      	beq.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f32:	d108      	bne.n	8003f46 <I2C_Master_ISR_IT+0x1e8>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e007      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSequentialCplt(hi2c);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fbcc 	bl	80046e4 <I2C_ITMasterSequentialCplt>
 8003f4c:	e003      	b.n	8003f56 <I2C_Master_ISR_IT+0x1f8>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fdff 	bl	8004b54 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <I2C_Master_ISR_IT+0x214>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <I2C_Master_ISR_IT+0x214>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fc33 	bl	80047d8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <I2C_Slave_ISR_IT+0x1a>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e0d8      	b.n	8004150 <I2C_Slave_ISR_IT+0x1cc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d045      	beq.n	800403c <I2C_Slave_ISR_IT+0xb8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d040      	beq.n	800403c <I2C_Slave_ISR_IT+0xb8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d12f      	bne.n	8004024 <I2C_Slave_ISR_IT+0xa0>
    {
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fcc:	d004      	beq.n	8003fd8 <I2C_Slave_ISR_IT+0x54>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd6:	d10a      	bne.n	8003fee <I2C_Slave_ISR_IT+0x6a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fde:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8003fe0:	2b28      	cmp	r3, #40	; 0x28
 8003fe2:	d104      	bne.n	8003fee <I2C_Slave_ISR_IT+0x6a>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fd62 	bl	8004ab0 <I2C_ITListenCplt>
 8003fec:	e025      	b.n	800403a <I2C_Slave_ISR_IT+0xb6>
      }
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff6:	d010      	beq.n	800401a <I2C_Slave_ISR_IT+0x96>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b29      	cmp	r3, #41	; 0x29
 8004002:	d10a      	bne.n	800401a <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2210      	movs	r2, #16
 800400a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fe67 	bl	8004ce0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fba3 	bl	800475e <I2C_ITSlaveSequentialCplt>
 8004018:	e00f      	b.n	800403a <I2C_Slave_ISR_IT+0xb6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2210      	movs	r2, #16
 8004020:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004022:	e082      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2210      	movs	r2, #16
 800402a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f043 0204 	orr.w	r2, r3, #4
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
    if (hi2c->XferCount == 0U)
 8004038:	e077      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
 800403a:	e076      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
    }
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <I2C_Slave_ISR_IT+0x120>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <I2C_Slave_ISR_IT+0x120>
  {
    if (hi2c->XferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <I2C_Slave_ISR_IT+0x104>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	6251      	str	r1, [r2, #36]	; 0x24
 800406a:	b2c2      	uxtb	r2, r0
 800406c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d14a      	bne.n	8004128 <I2C_Slave_ISR_IT+0x1a4>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8004096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800409a:	d045      	beq.n	8004128 <I2C_Slave_ISR_IT+0x1a4>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb5e 	bl	800475e <I2C_ITSlaveSequentialCplt>
    if ((hi2c->XferCount == 0U) && \
 80040a2:	e041      	b.n	8004128 <I2C_Slave_ISR_IT+0x1a4>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <I2C_Slave_ISR_IT+0x13e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <I2C_Slave_ISR_IT+0x13e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa90 	bl	80045e0 <I2C_ITAddrCplt>
 80040c0:	e033      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02e      	beq.n	800412a <I2C_Slave_ISR_IT+0x1a6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d029      	beq.n	800412a <I2C_Slave_ISR_IT+0x1a6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <I2C_Slave_ISR_IT+0x18a>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c59      	adds	r1, r3, #1
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	6251      	str	r1, [r2, #36]	; 0x24
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
 800410c:	e00d      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004116:	d003      	beq.n	8004120 <I2C_Slave_ISR_IT+0x19c>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <I2C_Slave_ISR_IT+0x1a6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fb1c 	bl	800475e <I2C_ITSlaveSequentialCplt>
 8004126:	e000      	b.n	800412a <I2C_Slave_ISR_IT+0x1a6>
    if ((hi2c->XferCount == 0U) && \
 8004128:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <I2C_Slave_ISR_IT+0x1c2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <I2C_Slave_ISR_IT+0x1c2>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fbe1 	bl	8004908 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <I2C_Master_ISR_DMA+0x1a>
 800416e:	2302      	movs	r3, #2
 8004170:	e0d9      	b.n	8004326 <I2C_Master_ISR_DMA+0x1ce>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d016      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x5a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2210      	movs	r2, #16
 8004194:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041a2:	2112      	movs	r1, #18
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 ff3b 	bl	8005020 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fd98 	bl	8004ce0 <I2C_Flush_TXDR>
 80041b0:	e0b4      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d071      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x148>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d06c      	beq.n	80042a0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d04e      	beq.n	800427e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2bff      	cmp	r3, #255	; 0xff
 80041f6:	d906      	bls.n	8004206 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80041fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e010      	b.n	8004228 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004218:	d003      	beq.n	8004222 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e002      	b.n	8004228 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004226:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8a79      	ldrh	r1, [r7, #18]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fec4 	bl	8004fc4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d108      	bne.n	800426c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004268:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800426a:	e057      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800427c:	e04e      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d003      	beq.n	8004296 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSequentialCplt(hi2c);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fa28 	bl	80046e4 <I2C_ITMasterSequentialCplt>
    if (hi2c->XferCount != 0U)
 8004294:	e042      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004296:	2140      	movs	r1, #64	; 0x40
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fc5b 	bl	8004b54 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800429e:	e03d      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d028      	beq.n	80042fc <I2C_Master_ISR_DMA+0x1a4>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042cc:	d025      	beq.n	800431a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d6:	d108      	bne.n	80042ea <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80042e8:	e017      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSequentialCplt(hi2c);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9fa 	bl	80046e4 <I2C_ITMasterSequentialCplt>
    if (hi2c->XferCount == 0U)
 80042f0:	e013      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042f2:	2140      	movs	r1, #64	; 0x40
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fc2d 	bl	8004b54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042fa:	e00e      	b.n	800431a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <I2C_Master_ISR_DMA+0x1c4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa60 	bl	80047d8 <I2C_ITMasterCplt>
 8004318:	e000      	b.n	800431c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800431a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <I2C_Slave_ISR_DMA+0x1a>
 8004344:	2302      	movs	r3, #2
 8004346:	e09f      	b.n	8004488 <I2C_Slave_ISR_DMA+0x15a>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	d074      	beq.n	8004444 <I2C_Slave_ISR_DMA+0x116>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d06f      	beq.n	8004444 <I2C_Slave_ISR_DMA+0x116>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004372:	d007      	beq.n	8004384 <I2C_Slave_ISR_DMA+0x56>
        ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d159      	bne.n	8004438 <I2C_Slave_ISR_DMA+0x10a>
    {
      if (((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL)) && (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <I2C_Slave_ISR_DMA+0x66>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d045      	beq.n	8004420 <I2C_Slave_ISR_DMA+0xf2>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a2:	d106      	bne.n	80043b2 <I2C_Slave_ISR_DMA+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <I2C_Slave_ISR_DMA+0x90>
 80043b0:	e036      	b.n	8004420 <I2C_Slave_ISR_DMA+0xf2>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d130      	bne.n	8004420 <I2C_Slave_ISR_DMA+0xf2>
      {
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c6:	d004      	beq.n	80043d2 <I2C_Slave_ISR_DMA+0xa4>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d0:	d10a      	bne.n	80043e8 <I2C_Slave_ISR_DMA+0xba>
            (hi2c->State == HAL_I2C_STATE_LISTEN))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80043da:	2b28      	cmp	r3, #40	; 0x28
 80043dc:	d104      	bne.n	80043e8 <I2C_Slave_ISR_DMA+0xba>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fb65 	bl	8004ab0 <I2C_ITListenCplt>
 80043e6:	e01a      	b.n	800441e <I2C_Slave_ISR_DMA+0xf0>
        }
        else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f0:	d010      	beq.n	8004414 <I2C_Slave_ISR_DMA+0xe6>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b29      	cmp	r3, #41	; 0x29
 80043fc:	d10a      	bne.n	8004414 <I2C_Slave_ISR_DMA+0xe6>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fc6a 	bl	8004ce0 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSequentialCplt(hi2c);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f9a6 	bl	800475e <I2C_ITSlaveSequentialCplt>
 8004412:	e004      	b.n	800441e <I2C_Slave_ISR_DMA+0xf0>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	61da      	str	r2, [r3, #28]
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800441c:	e00b      	b.n	8004436 <I2C_Slave_ISR_DMA+0x108>
 800441e:	e00a      	b.n	8004436 <I2C_Slave_ISR_DMA+0x108>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
      if (((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL)) && (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U))
 8004434:	e005      	b.n	8004442 <I2C_Slave_ISR_DMA+0x114>
 8004436:	e004      	b.n	8004442 <I2C_Slave_ISR_DMA+0x114>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2210      	movs	r2, #16
 800443e:	61da      	str	r2, [r3, #28]
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004440:	e01d      	b.n	800447e <I2C_Slave_ISR_DMA+0x150>
 8004442:	e01c      	b.n	800447e <I2C_Slave_ISR_DMA+0x150>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <I2C_Slave_ISR_DMA+0x134>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <I2C_Slave_ISR_DMA+0x134>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f8c0 	bl	80045e0 <I2C_ITAddrCplt>
 8004460:	e00d      	b.n	800447e <I2C_Slave_ISR_DMA+0x150>
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <I2C_Slave_ISR_DMA+0x150>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <I2C_Slave_ISR_DMA+0x150>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fa45 	bl	8004908 <I2C_ITSlaveCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	817b      	strh	r3, [r7, #10]
 80044a2:	460b      	mov	r3, r1
 80044a4:	813b      	strh	r3, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <I2C_RequestMemoryWrite+0xa4>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fd83 	bl	8004fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	69b9      	ldr	r1, [r7, #24]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fc9c 	bl	8004e00 <I2C_WaitOnTXISFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e02c      	b.n	800452c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d105      	bne.n	80044e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
 80044e2:	e015      	b.n	8004510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e4:	893b      	ldrh	r3, [r7, #8]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fc82 	bl	8004e00 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e012      	b.n	800452c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004506:	893b      	ldrh	r3, [r7, #8]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2200      	movs	r2, #0
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fc30 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	80002000 	.word	0x80002000

08004538 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	817b      	strh	r3, [r7, #10]
 800454a:	460b      	mov	r3, r1
 800454c:	813b      	strh	r3, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	8979      	ldrh	r1, [r7, #10]
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <I2C_RequestMemoryRead+0xa4>)
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fd30 	bl	8004fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fc49 	bl	8004e00 <I2C_WaitOnTXISFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e02c      	b.n	80045d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800457e:	893b      	ldrh	r3, [r7, #8]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
 8004588:	e015      	b.n	80045b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800458a:	893b      	ldrh	r3, [r7, #8]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	b29b      	uxth	r3, r3
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fc2f 	bl	8004e00 <I2C_WaitOnTXISFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e012      	b.n	80045d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2200      	movs	r2, #0
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fbdd 	bl	8004d80 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	80002000 	.word	0x80002000

080045e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045f6:	2b28      	cmp	r3, #40	; 0x28
 80045f8:	d168      	bne.n	80046cc <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	b29b      	uxth	r3, r3
 8004614:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004618:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004626:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004634:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d137      	bne.n	80046ae <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	b29a      	uxth	r2, r3
 8004644:	89bb      	ldrh	r3, [r7, #12]
 8004646:	4053      	eors	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	f003 0306 	and.w	r3, r3, #6
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11c      	bne.n	800468c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004664:	2b02      	cmp	r3, #2
 8004666:	d139      	bne.n	80046dc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2208      	movs	r2, #8
 8004674:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800467e:	89ba      	ldrh	r2, [r7, #12]
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fb3e 	bl	8003d06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800468a:	e027      	b.n	80046dc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004690:	2104      	movs	r1, #4
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fd32 	bl	80050fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046a0:	89ba      	ldrh	r2, [r7, #12]
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fb2d 	bl	8003d06 <HAL_I2C_AddrCallback>
}
 80046ac:	e016      	b.n	80046dc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046ae:	2104      	movs	r1, #4
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fd23 	bl	80050fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046be:	89ba      	ldrh	r2, [r7, #12]
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fb1e 	bl	8003d06 <HAL_I2C_AddrCallback>
}
 80046ca:	e007      	b.n	80046dc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2208      	movs	r2, #8
 80046d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_ITMasterSequentialCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d115      	bne.n	800472c <I2C_ITMasterSequentialCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2211      	movs	r2, #17
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004714:	2101      	movs	r1, #1
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fcf0 	bl	80050fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fac6 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800472a:	e014      	b.n	8004756 <I2C_ITMasterSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2212      	movs	r2, #18
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004740:	2102      	movs	r1, #2
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fcda 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff faba 	bl	8003cca <HAL_I2C_MasterRxCpltCallback>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b29      	cmp	r3, #41	; 0x29
 8004778:	d112      	bne.n	80047a0 <I2C_ITSlaveSequentialCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2228      	movs	r2, #40	; 0x28
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2221      	movs	r2, #33	; 0x21
 8004786:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004788:	2101      	movs	r1, #1
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fcb6 	bl	80050fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff faa0 	bl	8003cde <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800479e:	e017      	b.n	80047d0 <I2C_ITSlaveSequentialCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d111      	bne.n	80047d0 <I2C_ITSlaveSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2228      	movs	r2, #40	; 0x28
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2222      	movs	r2, #34	; 0x22
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047ba:	2102      	movs	r1, #2
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fc9d 	bl	80050fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fa91 	bl	8003cf2 <HAL_I2C_SlaveRxCpltCallback>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2220      	movs	r2, #32
 80047e8:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <I2C_ITMasterCplt+0x128>)
 80047f6:	400b      	ands	r3, r1
 80047f8:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a3e      	ldr	r2, [pc, #248]	; (8004904 <I2C_ITMasterCplt+0x12c>)
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c

  if ((ITFlags & I2C_FLAG_AF) != RESET)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <I2C_ITMasterCplt+0x52>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f043 0204 	orr.w	r2, r3, #4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa58 	bl	8004ce0 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004830:	2103      	movs	r1, #3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fc62 	bl	80050fc <I2C_Disable_IRQ>

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <I2C_ITMasterCplt+0x74>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d106      	bne.n	800485a <I2C_ITMasterCplt+0x82>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f97e 	bl	8004b54 <I2C_ITError>
#else
      HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004858:	e04e      	b.n	80048f8 <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d121      	bne.n	80048aa <I2C_ITMasterCplt+0xd2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d10b      	bne.n	8004892 <I2C_ITMasterCplt+0xba>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f014 fe1e 	bl	80194cc <HAL_I2C_MemTxCpltCallback>
}
 8004890:	e032      	b.n	80048f8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fa07 	bl	8003cb6 <HAL_I2C_MasterTxCpltCallback>
}
 80048a8:	e026      	b.n	80048f8 <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b22      	cmp	r3, #34	; 0x22
 80048b4:	d120      	bne.n	80048f8 <I2C_ITMasterCplt+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d10b      	bne.n	80048e2 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f014 fd86 	bl	80193ec <HAL_I2C_MemRxCpltCallback>
}
 80048e0:	e00a      	b.n	80048f8 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff f9e9 	bl	8003cca <HAL_I2C_MasterRxCpltCallback>
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	fe00e800 	.word	0xfe00e800
 8004904:	ffff0000 	.word	0xffff0000

08004908 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2220      	movs	r2, #32
 8004918:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2208      	movs	r2, #8
 8004920:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004922:	2107      	movs	r1, #7
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fbe9 	bl	80050fc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004938:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <I2C_ITSlaveCplt+0x1a0>)
 8004946:	400b      	ands	r3, r1
 8004948:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9c8 	bl	8004ce0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495e:	d007      	beq.n	8004970 <I2C_ITSlaveCplt+0x68>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d11c      	bne.n	80049aa <I2C_ITSlaveCplt+0xa2>
  {
    if ((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <I2C_ITSlaveCplt+0x78>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d014      	beq.n	80049aa <I2C_ITSlaveCplt+0xa2>
    {
      hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498e:	d105      	bne.n	800499c <I2C_ITSlaveCplt+0x94>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	b29b      	uxth	r3, r3
 800499a:	e004      	b.n	80049a6 <I2C_ITSlaveCplt+0x9e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	8553      	strh	r3, [r2, #42]	; 0x2a
    }
  }

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01a      	beq.n	80049ea <I2C_ITSlaveCplt+0xe2>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6251      	str	r1, [r2, #36]	; 0x24
 80049c4:	b2c2      	uxtb	r2, r0
 80049c6:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <I2C_ITSlaveCplt+0xe2>
    {
      hi2c->XferSize--;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <I2C_ITSlaveCplt+0xf8>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <I2C_ITSlaveCplt+0x136>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f896 	bl	8004b54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b28      	cmp	r3, #40	; 0x28
 8004a32:	d135      	bne.n	8004aa0 <I2C_ITSlaveCplt+0x198>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f83a 	bl	8004ab0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a3c:	e030      	b.n	8004aa0 <I2C_ITSlaveCplt+0x198>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a46:	d00e      	beq.n	8004a66 <I2C_ITSlaveCplt+0x15e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	; (8004aac <I2C_ITSlaveCplt+0x1a4>)
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff f95f 	bl	8003d22 <HAL_I2C_ListenCpltCallback>
}
 8004a64:	e01c      	b.n	8004aa0 <I2C_ITSlaveCplt+0x198>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b22      	cmp	r3, #34	; 0x22
 8004a70:	d10b      	bne.n	8004a8a <I2C_ITSlaveCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff f935 	bl	8003cf2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a88:	e00a      	b.n	8004aa0 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff f91f 	bl	8003cde <HAL_I2C_SlaveTxCpltCallback>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	fe00e800 	.word	0xfe00e800
 8004aac:	ffff0000 	.word	0xffff0000

08004ab0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <I2C_ITListenCplt+0xa0>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d020      	beq.n	8004b28 <I2C_ITListenCplt+0x78>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6251      	str	r1, [r2, #36]	; 0x24
 8004af6:	b2c2      	uxtb	r2, r0
 8004af8:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <I2C_ITListenCplt+0x78>
    {
      hi2c->XferSize--;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	f043 0204 	orr.w	r2, r3, #4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b28:	2107      	movs	r1, #7
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fae6 	bl	80050fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2210      	movs	r2, #16
 8004b36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff f8ee 	bl	8003d22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	ffff0000 	.word	0xffff0000

08004b54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <I2C_ITError+0x180>)
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b28      	cmp	r3, #40	; 0x28
 8004b88:	d00b      	beq.n	8004ba2 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b90:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8004b92:	2b29      	cmp	r3, #41	; 0x29
 8004b94:	d005      	beq.n	8004ba2 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba0:	d10e      	bne.n	8004bc0 <I2C_ITError+0x6c>
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 faa9 	bl	80050fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2228      	movs	r2, #40	; 0x28
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a47      	ldr	r2, [pc, #284]	; (8004cd8 <I2C_ITError+0x184>)
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8004bbe:	e013      	b.n	8004be8 <I2C_ITError+0x94>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bc0:	2107      	movs	r1, #7
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa9a 	bl	80050fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d003      	beq.n	8004bdc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf6:	d123      	bne.n	8004c40 <I2C_ITError+0xec>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c06:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05c      	beq.n	8004cca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <I2C_ITError+0x188>)
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fabf 	bl	80021a8 <HAL_DMA_Abort_IT>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d04c      	beq.n	8004cca <I2C_ITError+0x176>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c3e:	e044      	b.n	8004cca <I2C_ITError+0x176>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d123      	bne.n	8004c98 <I2C_ITError+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c5e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d030      	beq.n	8004cca <I2C_ITError+0x176>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <I2C_ITError+0x188>)
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd fa93 	bl	80021a8 <HAL_DMA_Abort_IT>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <I2C_ITError+0x176>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
}
 8004c96:	e018      	b.n	8004cca <I2C_ITError+0x176>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d10b      	bne.n	8004cbc <I2C_ITError+0x168>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff f848 	bl	8003d4a <HAL_I2C_AbortCpltCallback>
}
 8004cba:	e006      	b.n	8004cca <I2C_ITError+0x176>
    __HAL_UNLOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff f836 	bl	8003d36 <HAL_I2C_ErrorCallback>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	ffff0000 	.word	0xffff0000
 8004cd8:	08003f85 	.word	0x08003f85
 8004cdc:	08004d29 	.word	0x08004d29

08004ce0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d103      	bne.n	8004cfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d007      	beq.n	8004d1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	619a      	str	r2, [r3, #24]
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d44:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	2200      	movs	r2, #0
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b60      	cmp	r3, #96	; 0x60
 8004d60:	d107      	bne.n	8004d72 <I2C_DMAAbort+0x4a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7fe ffed 	bl	8003d4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d70:	e002      	b.n	8004d78 <I2C_DMAAbort+0x50>
    HAL_I2C_ErrorCallback(hi2c);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7fe ffdf 	bl	8003d36 <HAL_I2C_ErrorCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d90:	e022      	b.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d01e      	beq.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fc fe5b 	bl	8001a54 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d113      	bne.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e00f      	b.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d0cd      	beq.n	8004d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e0c:	e02c      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f870 	bl	8004ef8 <I2C_IsAcknowledgeFailed>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e02a      	b.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d01e      	beq.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fc fe13 	bl	8001a54 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d113      	bne.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e007      	b.n	8004e78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d1cb      	bne.n	8004e0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e8c:	e028      	b.n	8004ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f830 	bl	8004ef8 <I2C_IsAcknowledgeFailed>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e026      	b.n	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc fdd7 	bl	8001a54 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d113      	bne.n	8004ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e007      	b.n	8004ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d1cf      	bne.n	8004e8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d151      	bne.n	8004fb6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f12:	e022      	b.n	8004f5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d01e      	beq.n	8004f5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1c:	f7fc fd9a 	bl	8001a54 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <I2C_IsAcknowledgeFailed+0x3a>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d113      	bne.n	8004f5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e02e      	b.n	8004fb8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d1d5      	bne.n	8004f14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2220      	movs	r2, #32
 8004f76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff feb1 	bl	8004ce0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	fe00e800 	.word	0xfe00e800

08004fc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	817b      	strh	r3, [r7, #10]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	0d5b      	lsrs	r3, r3, #21
 8004fe0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <I2C_TransferConfig+0x58>)
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	ea02 0103 	and.w	r1, r2, r3
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ff4:	7a7b      	ldrb	r3, [r7, #9]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	431a      	orrs	r2, r3
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	03ff63ff 	.word	0x03ff63ff

08005020 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <I2C_Enable_IRQ+0xd4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800503e:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <I2C_Enable_IRQ+0xd8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d124      	bne.n	800508e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005054:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	f003 0311 	and.w	r3, r3, #17
 800505c:	2b11      	cmp	r3, #17
 800505e:	d103      	bne.n	8005068 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005066:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	f003 0312 	and.w	r3, r3, #18
 800506e:	2b12      	cmp	r3, #18
 8005070:	d103      	bne.n	800507a <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f043 0320 	orr.w	r3, r3, #32
 8005078:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800507a:	887b      	ldrh	r3, [r7, #2]
 800507c:	f003 0312 	and.w	r3, r3, #18
 8005080:	2b12      	cmp	r3, #18
 8005082:	d128      	bne.n	80050d6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800508c:	e023      	b.n	80050d6 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800508e:	887b      	ldrh	r3, [r7, #2]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800509e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050a0:	887b      	ldrh	r3, [r7, #2]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80050b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050b2:	887b      	ldrh	r3, [r7, #2]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80050c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	f003 0312 	and.w	r3, r3, #18
 80050ca:	2b12      	cmp	r3, #18
 80050cc:	d103      	bne.n	80050d6 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f043 0320 	orr.w	r3, r3, #32
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	08004159 	.word	0x08004159
 80050f8:	0800432f 	.word	0x0800432f

080050fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00f      	beq.n	8005136 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800511c:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800512a:	2b28      	cmp	r3, #40	; 0x28
 800512c:	d003      	beq.n	8005136 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005134:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00f      	beq.n	8005160 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005146:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005154:	2b28      	cmp	r3, #40	; 0x28
 8005156:	d003      	beq.n	8005160 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800515e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005170:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	f003 0311 	and.w	r3, r3, #17
 8005178:	2b11      	cmp	r3, #17
 800517a:	d103      	bne.n	8005184 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005182:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	f003 0312 	and.w	r3, r3, #18
 800518a:	2b12      	cmp	r3, #18
 800518c:	d103      	bne.n	8005196 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f043 0320 	orr.w	r3, r3, #32
 8005194:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005196:	887b      	ldrh	r3, [r7, #2]
 8005198:	f003 0312 	and.w	r3, r3, #18
 800519c:	2b12      	cmp	r3, #18
 800519e:	d103      	bne.n	80051a8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	400a      	ands	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d138      	bne.n	800524e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e032      	b.n	8005250 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005218:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b20      	cmp	r3, #32
 8005270:	d139      	bne.n	80052e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800527c:	2302      	movs	r3, #2
 800527e:	e033      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e038      	b.n	8005378 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800530e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f245 5255 	movw	r2, #21845	; 0x5555
 8005318:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6852      	ldr	r2, [r2, #4]
 8005322:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6892      	ldr	r2, [r2, #8]
 800532c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800532e:	f7fc fb91 	bl	8001a54 <HAL_GetTick>
 8005332:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8005334:	e008      	b.n	8005348 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005336:	f7fc fb8d 	bl	8001a54 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d901      	bls.n	8005348 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e017      	b.n	8005378 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f1      	bne.n	8005336 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d005      	beq.n	800536c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68d2      	ldr	r2, [r2, #12]
 8005368:	611a      	str	r2, [r3, #16]
 800536a:	e004      	b.n	8005376 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005390:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e076      	b.n	80054a4 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc f80e 	bl	80013ec <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d103      	bne.n	80053f0 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 031e 	bic.w	r3, r3, #30
 80053ee:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d005      	beq.n	8005408 <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005402:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_LPTIM_Init+0x10c>)
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005418:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800541e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005424:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800542a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d107      	bne.n	800544a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8005442:	4313      	orrs	r3, r2
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005452:	4293      	cmp	r3, r2
 8005454:	d00a      	beq.n	800546c <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800545e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005464:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a0d      	ldr	r2, [pc, #52]	; (80054b0 <HAL_LPTIM_Init+0x110>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	621a      	str	r2, [r3, #32]
 800548e:	e004      	b.n	800549a <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005498:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	ff19f1fe 	.word	0xff19f1fe
 80054b0:	40007c00 	.word	0x40007c00

080054b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40007000 	.word	0x40007000

080054d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_PWREx_GetVoltageRange+0x18>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40007000 	.word	0x40007000

080054f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005502:	d12f      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800550c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005510:	d037      	beq.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005512:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800551a:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005520:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	0c9b      	lsrs	r3, r3, #18
 800552e:	2232      	movs	r2, #50	; 0x32
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8005536:	e002      	b.n	800553e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x62>
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005550:	d0f2      	beq.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d110      	bne.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e00f      	b.n	8005584 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	d007      	beq.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800557c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005580:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}  
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40007000 	.word	0x40007000
 8005594:	20000068 	.word	0x20000068
 8005598:	431bde83 	.word	0x431bde83

0800559c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	4a0f      	ldr	r2, [pc, #60]	; (80055ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_PWREx_EnterSTOP1Mode+0x30>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80055c8:	bf30      	wfi
 80055ca:	e002      	b.n	80055d2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80055cc:	bf40      	sev
  __ASM volatile ("wfe");
 80055ce:	bf20      	wfe
 80055d0:	bf20      	wfe
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	6113      	str	r3, [r2, #16]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40007000 	.word	0x40007000
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e356      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80d0 	beq.w	80057b4 <HAL_RCC_OscConfig+0x1c0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005614:	4ba1      	ldr	r3, [pc, #644]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b00      	cmp	r3, #0
 800561e:	d179      	bne.n	8005714 <HAL_RCC_OscConfig+0x120>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005620:	4b9e      	ldr	r3, [pc, #632]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_OscConfig+0x44>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_OscConfig+0x44>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e33d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	4b97      	ldr	r3, [pc, #604]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCC_OscConfig+0x5e>
 8005648:	4b94      	ldr	r3, [pc, #592]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005650:	e005      	b.n	800565e <HAL_RCC_OscConfig+0x6a>
 8005652:	4b92      	ldr	r3, [pc, #584]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565e:	4293      	cmp	r3, r2
 8005660:	d223      	bcs.n	80056aa <HAL_RCC_OscConfig+0xb6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fce8 	bl	800603c <RCC_SetFlashLatencyFromMSIRange>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e31e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005676:	4b89      	ldr	r3, [pc, #548]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a88      	ldr	r2, [pc, #544]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800567c:	f043 0308 	orr.w	r3, r3, #8
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4b86      	ldr	r3, [pc, #536]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	4983      	ldr	r1, [pc, #524]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005694:	4b81      	ldr	r3, [pc, #516]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	497e      	ldr	r1, [pc, #504]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	604b      	str	r3, [r1, #4]
 80056a8:	e022      	b.n	80056f0 <HAL_RCC_OscConfig+0xfc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056aa:	4b7c      	ldr	r3, [pc, #496]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a7b      	ldr	r2, [pc, #492]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056b0:	f043 0308 	orr.w	r3, r3, #8
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4b79      	ldr	r3, [pc, #484]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4976      	ldr	r1, [pc, #472]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c8:	4b74      	ldr	r3, [pc, #464]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	4971      	ldr	r1, [pc, #452]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fcab 	bl	800603c <RCC_SetFlashLatencyFromMSIRange>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e2e1      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056f0:	f000 fbc0 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 80056f4:	4601      	mov	r1, r0
 80056f6:	4b69      	ldr	r3, [pc, #420]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	4a67      	ldr	r2, [pc, #412]	; (80058a0 <HAL_RCC_OscConfig+0x2ac>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	fa21 f303 	lsr.w	r3, r1, r3
 8005708:	4a66      	ldr	r2, [pc, #408]	; (80058a4 <HAL_RCC_OscConfig+0x2b0>)
 800570a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800570c:	2000      	movs	r0, #0
 800570e:	f7fc f977 	bl	8001a00 <HAL_InitTick>
 8005712:	e04f      	b.n	80057b4 <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d032      	beq.n	8005782 <HAL_RCC_OscConfig+0x18e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800571c:	4b5f      	ldr	r3, [pc, #380]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5e      	ldr	r2, [pc, #376]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005728:	f7fc f994 	bl	8001a54 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005730:	f7fc f990 	bl	8001a54 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e2b8      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005742:	4b56      	ldr	r3, [pc, #344]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x13c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800574e:	4b53      	ldr	r3, [pc, #332]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a52      	ldr	r2, [pc, #328]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	4b50      	ldr	r3, [pc, #320]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	494d      	ldr	r1, [pc, #308]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	4948      	ldr	r1, [pc, #288]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
 8005780:	e018      	b.n	80057b4 <HAL_RCC_OscConfig+0x1c0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005782:	4b46      	ldr	r3, [pc, #280]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a45      	ldr	r2, [pc, #276]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800578e:	f7fc f961 	bl	8001a54 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005796:	f7fc f95d 	bl	8001a54 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e285      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80057a8:	4b3c      	ldr	r3, [pc, #240]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0x1a2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d07b      	beq.n	80058b8 <HAL_RCC_OscConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d00b      	beq.n	80057e4 <HAL_RCC_OscConfig+0x1f0>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057cc:	4b33      	ldr	r3, [pc, #204]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x208>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057d8:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d10b      	bne.n	80057fc <HAL_RCC_OscConfig+0x208>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	4b2d      	ldr	r3, [pc, #180]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d062      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2c2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d15e      	bne.n	80058b6 <HAL_RCC_OscConfig+0x2c2>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e25b      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x220>
 8005806:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a24      	ldr	r2, [pc, #144]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e01d      	b.n	8005850 <HAL_RCC_OscConfig+0x25c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x244>
 800581e:	4b1f      	ldr	r3, [pc, #124]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0x25c>
 8005838:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 800584a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_RCC_OscConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fc f8fc 	bl	8001a54 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fc f8f8 	bl	8001a54 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e220      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_OscConfig+0x2a8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x26c>
 800587e:	e01b      	b.n	80058b8 <HAL_RCC_OscConfig+0x2c4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc f8e8 	bl	8001a54 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005886:	e00f      	b.n	80058a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fc f8e4 	bl	8001a54 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d908      	bls.n	80058a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e20c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
 800589a:	bf00      	nop
 800589c:	40021000 	.word	0x40021000
 80058a0:	0802688c 	.word	0x0802688c
 80058a4:	20000068 	.word	0x20000068
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80058a8:	4ba9      	ldr	r3, [pc, #676]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e9      	bne.n	8005888 <HAL_RCC_OscConfig+0x294>
 80058b4:	e000      	b.n	80058b8 <HAL_RCC_OscConfig+0x2c4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d069      	beq.n	8005998 <HAL_RCC_OscConfig+0x3a4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80058c4:	4ba2      	ldr	r3, [pc, #648]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d00b      	beq.n	80058e8 <HAL_RCC_OscConfig+0x2f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058d0:	4b9f      	ldr	r3, [pc, #636]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80058d8:	2b0c      	cmp	r3, #12
 80058da:	d11c      	bne.n	8005916 <HAL_RCC_OscConfig+0x322>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058dc:	4b9c      	ldr	r3, [pc, #624]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d116      	bne.n	8005916 <HAL_RCC_OscConfig+0x322>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e8:	4b99      	ldr	r3, [pc, #612]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCC_OscConfig+0x30c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_OscConfig+0x30c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e1d9      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	4b93      	ldr	r3, [pc, #588]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	061b      	lsls	r3, r3, #24
 800590e:	4990      	ldr	r1, [pc, #576]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005914:	e040      	b.n	8005998 <HAL_RCC_OscConfig+0x3a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d023      	beq.n	8005966 <HAL_RCC_OscConfig+0x372>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800591e:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a8b      	ldr	r2, [pc, #556]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592a:	f7fc f893 	bl	8001a54 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005932:	f7fc f88f 	bl	8001a54 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e1b7      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005944:	4b82      	ldr	r3, [pc, #520]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b7f      	ldr	r3, [pc, #508]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	497c      	ldr	r1, [pc, #496]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]
 8005964:	e018      	b.n	8005998 <HAL_RCC_OscConfig+0x3a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005966:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a79      	ldr	r2, [pc, #484]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 800596c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005972:	f7fc f86f 	bl	8001a54 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800597a:	f7fc f86b 	bl	8001a54 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e193      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800598c:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03c      	beq.n	8005a1e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ac:	4b68      	ldr	r3, [pc, #416]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80059ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b2:	4a67      	ldr	r2, [pc, #412]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fc f84a 	bl	8001a54 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fc f846 	bl	8001a54 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e16e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80059d6:	4b5e      	ldr	r3, [pc, #376]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80059d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ef      	beq.n	80059c4 <HAL_RCC_OscConfig+0x3d0>
 80059e4:	e01b      	b.n	8005a1e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e6:	4b5a      	ldr	r3, [pc, #360]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ec:	4a58      	ldr	r2, [pc, #352]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fc f82d 	bl	8001a54 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fe:	f7fc f829 	bl	8001a54 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e151      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8005a10:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1ef      	bne.n	80059fe <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 80a6 	beq.w	8005b78 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a30:	4b47      	ldr	r3, [pc, #284]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <HAL_RCC_OscConfig+0x464>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	4a43      	ldr	r2, [pc, #268]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6593      	str	r3, [r2, #88]	; 0x58
 8005a48:	4b41      	ldr	r3, [pc, #260]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a58:	4b3e      	ldr	r3, [pc, #248]	; (8005b54 <HAL_RCC_OscConfig+0x560>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d118      	bne.n	8005a96 <HAL_RCC_OscConfig+0x4a2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a64:	4b3b      	ldr	r3, [pc, #236]	; (8005b54 <HAL_RCC_OscConfig+0x560>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3a      	ldr	r2, [pc, #232]	; (8005b54 <HAL_RCC_OscConfig+0x560>)
 8005a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a70:	f7fb fff0 	bl	8001a54 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a78:	f7fb ffec 	bl	8001a54 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e114      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8a:	4b32      	ldr	r3, [pc, #200]	; (8005b54 <HAL_RCC_OscConfig+0x560>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x484>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d108      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x4bc>
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aae:	e024      	b.n	8005afa <HAL_RCC_OscConfig+0x506>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d110      	bne.n	8005ada <HAL_RCC_OscConfig+0x4e6>
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	4a24      	ldr	r2, [pc, #144]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac8:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	4a20      	ldr	r2, [pc, #128]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad8:	e00f      	b.n	8005afa <HAL_RCC_OscConfig+0x506>
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af0:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005af2:	f023 0304 	bic.w	r3, r3, #4
 8005af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_RCC_OscConfig+0x53c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fb ffa7 	bl	8001a54 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_OscConfig+0x52c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fb ffa3 	bl	8001a54 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0c9      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_OscConfig+0x55c>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0ed      	beq.n	8005b0a <HAL_RCC_OscConfig+0x516>
 8005b2e:	e01a      	b.n	8005b66 <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fb ff90 	bl	8001a54 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005b36:	e00f      	b.n	8005b58 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b38:	f7fb ff8c 	bl	8001a54 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d906      	bls.n	8005b58 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0b2      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
 8005b4e:	bf00      	nop
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005b58:	4b58      	ldr	r3, [pc, #352]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e8      	bne.n	8005b38 <HAL_RCC_OscConfig+0x544>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b6c:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	4a52      	ldr	r2, [pc, #328]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8098 	beq.w	8005cb2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b82:	4b4e      	ldr	r3, [pc, #312]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b0c      	cmp	r3, #12
 8005b8c:	f000 808f 	beq.w	8005cae <HAL_RCC_OscConfig+0x6ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d156      	bne.n	8005c46 <HAL_RCC_OscConfig+0x652>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b98:	4b48      	ldr	r3, [pc, #288]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a47      	ldr	r2, [pc, #284]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fb ff56 	bl	8001a54 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x5ca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fb ff52 	bl	8001a54 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e07a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005bbe:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x5b8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	011a      	lsls	r2, r3, #4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	045b      	lsls	r3, r3, #17
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	055b      	lsls	r3, r3, #21
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	065b      	lsls	r3, r3, #25
 8005c00:	492e      	ldr	r1, [pc, #184]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c06:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c10:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c12:	4b2a      	ldr	r3, [pc, #168]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fb ff19 	bl	8001a54 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x644>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fb ff15 	bl	8001a54 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x644>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e03d      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x632>
 8005c44:	e035      	b.n	8005cb2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c46:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <HAL_RCC_OscConfig+0x682>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8005c5e:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           &&
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_RCC_OscConfig+0x682>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	60d3      	str	r3, [r2, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005c7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fb fee5 	bl	8001a54 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x6ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fb fee1 	bl	8001a54 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_OscConfig+0x6c8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x69a>
 8005cac:	e001      	b.n	8005cb2 <HAL_RCC_OscConfig+0x6be>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6c0>
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0;
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0c2      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b63      	ldr	r3, [pc, #396]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d910      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b60      	ldr	r3, [pc, #384]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 0207 	bic.w	r2, r3, #7
 8005cea:	495e      	ldr	r1, [pc, #376]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b5c      	ldr	r3, [pc, #368]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0aa      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d04c      	beq.n	8005daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005d18:	4b53      	ldr	r3, [pc, #332]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d121      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e098      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005d30:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d115      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e08c      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d107      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005d48:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e080      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005d58:	4b43      	ldr	r3, [pc, #268]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e078      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d68:	4b3f      	ldr	r3, [pc, #252]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 0203 	bic.w	r2, r3, #3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	493c      	ldr	r1, [pc, #240]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7a:	f7fb fe6b 	bl	8001a54 <HAL_GetTick>
 8005d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d82:	f7fb fe67 	bl	8001a54 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e060      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d98:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 020c 	and.w	r2, r3, #12
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d1eb      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db6:	4b2c      	ldr	r3, [pc, #176]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4929      	ldr	r1, [pc, #164]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d210      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b23      	ldr	r3, [pc, #140]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 0207 	bic.w	r2, r3, #7
 8005dde:	4921      	ldr	r1, [pc, #132]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b1f      	ldr	r3, [pc, #124]	; (8005e64 <HAL_RCC_ClockConfig+0x1a4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e030      	b.n	8005e5a <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4915      	ldr	r1, [pc, #84]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	490d      	ldr	r1, [pc, #52]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e36:	f000 f81d 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <HAL_RCC_ClockConfig+0x1a8>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <HAL_RCC_ClockConfig+0x1ac>)
 8005e48:	5cd3      	ldrb	r3, [r2, r3]
 8005e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e4e:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <HAL_RCC_ClockConfig+0x1b0>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e52:	2000      	movs	r0, #0
 8005e54:	f7fb fdd4 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40022000 	.word	0x40022000
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	0802688c 	.word	0x0802688c
 8005e70:	20000068 	.word	0x20000068

08005e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	2302      	movs	r3, #2
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005e9e:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005ea6:	2b0c      	cmp	r3, #12
 8005ea8:	d127      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005eaa:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d121      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8005eb6:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e005      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ede:	4a3a      	ldr	r2, [pc, #232]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x154>)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee6:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005ee8:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d113      	bne.n	8005f1c <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005ef8:	e010      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005efa:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d102      	bne.n	8005f0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f06:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e007      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f1a:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f1c:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d145      	bne.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f28:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f32:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d002      	beq.n	8005f4c <HAL_RCC_GetSysClockFreq+0xd8>
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d00d      	beq.n	8005f66 <HAL_RCC_GetSysClockFreq+0xf2>
 8005f4a:	e019      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x158>)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f56:	68d2      	ldr	r2, [r2, #12]
 8005f58:	0a12      	lsrs	r2, r2, #8
 8005f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f5e:	fb02 f303 	mul.w	r3, r2, r3
 8005f62:	613b      	str	r3, [r7, #16]
      break;
 8005f64:	e019      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f66:	4a1a      	ldr	r2, [pc, #104]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f70:	68d2      	ldr	r2, [r2, #12]
 8005f72:	0a12      	lsrs	r2, r2, #8
 8005f74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	613b      	str	r3, [r7, #16]
      break;
 8005f7e:	e00c      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f8a:	68d2      	ldr	r2, [r2, #12]
 8005f8c:	0a12      	lsrs	r2, r2, #8
 8005f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	613b      	str	r3, [r7, #16]
      break;
 8005f98:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	0e5b      	lsrs	r3, r3, #25
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	080268a4 	.word	0x080268a4
 8005fcc:	00f42400 	.word	0x00f42400
 8005fd0:	007a1200 	.word	0x007a1200

08005fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000068 	.word	0x20000068

08005fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ff0:	f7ff fff0 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4a03      	ldr	r2, [pc, #12]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40021000 	.word	0x40021000
 8006010:	0802689c 	.word	0x0802689c

08006014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006018:	f7ff ffdc 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 800601c:	4601      	mov	r1, r0
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	0adb      	lsrs	r3, r3, #11
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4a03      	ldr	r2, [pc, #12]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	0802689c 	.word	0x0802689c

0800603c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800604c:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006058:	f7ff fa3c 	bl	80054d4 <HAL_PWREx_GetVoltageRange>
 800605c:	6178      	str	r0, [r7, #20]
 800605e:	e014      	b.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	6593      	str	r3, [r2, #88]	; 0x58
 800606c:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006078:	f7ff fa2c 	bl	80054d4 <HAL_PWREx_GetVoltageRange>
 800607c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006090:	d10b      	bne.n	80060aa <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d919      	bls.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2ba0      	cmp	r3, #160	; 0xa0
 800609c:	d902      	bls.n	80060a4 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800609e:	2302      	movs	r3, #2
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	e013      	b.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060a4:	2301      	movs	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e010      	b.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d902      	bls.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060b0:	2303      	movs	r3, #3
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	e00a      	b.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d102      	bne.n	80060c2 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060bc:	2302      	movs	r3, #2
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e004      	b.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b70      	cmp	r3, #112	; 0x70
 80060c6:	d101      	bne.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060c8:	2301      	movs	r3, #1
 80060ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f023 0207 	bic.w	r2, r3, #7
 80060d4:	4909      	ldr	r1, [pc, #36]	; (80060fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060dc:	4b07      	ldr	r3, [pc, #28]	; (80060fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d001      	beq.n	80060ee <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000
 80060fc:	40022000 	.word	0x40022000

08006100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006110:	2300      	movs	r3, #0
 8006112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006114:	2300      	movs	r3, #0
 8006116:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006120:	2b00      	cmp	r3, #0
 8006122:	d03f      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800612c:	d01c      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800612e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006132:	d802      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00e      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006138:	e01f      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800613a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800613e:	d003      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8006140:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006144:	d01c      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8006146:	e018      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006148:	4b82      	ldr	r3, [pc, #520]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a81      	ldr	r2, [pc, #516]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2100      	movs	r1, #0
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fab3 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006166:	e00c      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3320      	adds	r3, #32
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fb9c 	bl	80068ac <RCCEx_PLLSAI2_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006178:	e003      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	74fb      	strb	r3, [r7, #19]
      break;
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8006180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006182:	7cfb      	ldrb	r3, [r7, #19]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10b      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006188:	4b72      	ldr	r3, [pc, #456]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006196:	496f      	ldr	r1, [pc, #444]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800619e:	e001      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03f      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b8:	d01c      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061be:	d802      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80061c4:	e01f      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ca:	d003      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061d0:	d01c      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80061d2:	e018      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061d4:	4b5f      	ldr	r3, [pc, #380]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a5e      	ldr	r2, [pc, #376]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061e0:	e015      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fa6d 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061f2:	e00c      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3320      	adds	r3, #32
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb56 	bl	80068ac <RCCEx_PLLSAI2_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006204:	e003      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	74fb      	strb	r3, [r7, #19]
      break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800620c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006214:	4b4f      	ldr	r3, [pc, #316]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006222:	494c      	ldr	r1, [pc, #304]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800622a:	e001      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 809a 	beq.w	8006372 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 800623e:	2300      	movs	r3, #0
 8006240:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006242:	4b44      	ldr	r3, [pc, #272]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10d      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800624e:	4b41      	ldr	r3, [pc, #260]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	4a40      	ldr	r2, [pc, #256]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6593      	str	r3, [r2, #88]	; 0x58
 800625a:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	60bb      	str	r3, [r7, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006266:	2301      	movs	r3, #1
 8006268:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800626a:	4b3b      	ldr	r3, [pc, #236]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3a      	ldr	r2, [pc, #232]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006276:	f7fb fbed 	bl	8001a54 <HAL_GetTick>
 800627a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800627c:	e009      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627e:	f7fb fbe9 	bl	8001a54 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d902      	bls.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	74fb      	strb	r3, [r7, #19]
        break;
 8006290:	e005      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8006292:	4b31      	ldr	r3, [pc, #196]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0ef      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d15b      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062a4:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d01f      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d019      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062c2:	4b24      	ldr	r3, [pc, #144]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ce:	4b21      	ldr	r3, [pc, #132]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d4:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062ee:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d016      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fb fba8 	bl	8001a54 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006306:	e00b      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fb fba4 	bl	8001a54 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d902      	bls.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	74fb      	strb	r3, [r7, #19]
            break;
 800631e:	e006      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006320:	4b0c      	ldr	r3, [pc, #48]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0ec      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006344:	4903      	ldr	r1, [pc, #12]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800634c:	e008      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	74bb      	strb	r3, [r7, #18]
 8006352:	e005      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8006354:	40021000 	.word	0x40021000
 8006358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006360:	7c7b      	ldrb	r3, [r7, #17]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006366:	4b9e      	ldr	r3, [pc, #632]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636a:	4a9d      	ldr	r2, [pc, #628]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800636c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800637e:	4b98      	ldr	r3, [pc, #608]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f023 0203 	bic.w	r2, r3, #3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4994      	ldr	r1, [pc, #592]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063a0:	4b8f      	ldr	r3, [pc, #572]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f023 020c 	bic.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	498c      	ldr	r1, [pc, #560]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063c2:	4b87      	ldr	r3, [pc, #540]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	4983      	ldr	r1, [pc, #524]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063e4:	4b7e      	ldr	r3, [pc, #504]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	497b      	ldr	r1, [pc, #492]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006406:	4b76      	ldr	r3, [pc, #472]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006414:	4972      	ldr	r1, [pc, #456]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006428:	4b6d      	ldr	r3, [pc, #436]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	496a      	ldr	r1, [pc, #424]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800644a:	4b65      	ldr	r3, [pc, #404]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	4961      	ldr	r1, [pc, #388]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800646c:	4b5c      	ldr	r3, [pc, #368]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647a:	4959      	ldr	r1, [pc, #356]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	4950      	ldr	r1, [pc, #320]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064b0:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064be:	4948      	ldr	r1, [pc, #288]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064d2:	4b43      	ldr	r3, [pc, #268]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e0:	493f      	ldr	r1, [pc, #252]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d028      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f4:	4b3a      	ldr	r3, [pc, #232]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006502:	4937      	ldr	r1, [pc, #220]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006514:	4b32      	ldr	r3, [pc, #200]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800651a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800651e:	60d3      	str	r3, [r2, #12]
 8006520:	e011      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800652a:	d10c      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f8c8 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8006542:	7cfb      	ldrb	r3, [r7, #19]
 8006544:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d028      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006552:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	491f      	ldr	r1, [pc, #124]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006570:	d106      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006572:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800657c:	60d3      	str	r3, [r2, #12]
 800657e:	e011      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	2101      	movs	r1, #1
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f899 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800659a:	7cfb      	ldrb	r3, [r7, #19]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02b      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ce:	d109      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4a02      	ldr	r2, [pc, #8]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065da:	60d3      	str	r3, [r2, #12]
 80065dc:	e014      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	2101      	movs	r1, #1
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f867 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02f      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006614:	4b2b      	ldr	r3, [pc, #172]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006622:	4928      	ldr	r1, [pc, #160]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006632:	d10d      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	2102      	movs	r1, #2
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f844 	bl	80066c8 <RCCEx_PLLSAI1_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800664a:	7cfb      	ldrb	r3, [r7, #19]
 800664c:	74bb      	strb	r3, [r7, #18]
 800664e:	e011      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006658:	d10c      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3320      	adds	r3, #32
 800665e:	2102      	movs	r1, #2
 8006660:	4618      	mov	r0, r3
 8006662:	f000 f923 	bl	80068ac <RCCEx_PLLSAI2_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800666a:	7cfb      	ldrb	r3, [r7, #19]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	490d      	ldr	r1, [pc, #52]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	4904      	ldr	r1, [pc, #16]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40021000 	.word	0x40021000

080066c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066da:	4b73      	ldr	r3, [pc, #460]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066e6:	4b70      	ldr	r3, [pc, #448]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f003 0203 	and.w	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d10d      	bne.n	8006712 <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
       ||
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066fe:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0307 	and.w	r3, r3, #7
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
       ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d044      	beq.n	800679c <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	e041      	b.n	800679c <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d00c      	beq.n	800673a <RCCEx_PLLSAI1_Config+0x72>
 8006720:	2b03      	cmp	r3, #3
 8006722:	d013      	beq.n	800674c <RCCEx_PLLSAI1_Config+0x84>
 8006724:	2b01      	cmp	r3, #1
 8006726:	d120      	bne.n	800676a <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006728:	4b5f      	ldr	r3, [pc, #380]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11d      	bne.n	8006770 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006738:	e01a      	b.n	8006770 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800673a:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006742:	2b00      	cmp	r3, #0
 8006744:	d116      	bne.n	8006774 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800674a:	e013      	b.n	8006774 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800674c:	4b56      	ldr	r3, [pc, #344]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <RCCEx_PLLSAI1_Config+0xb0>
 8006758:	4b53      	ldr	r3, [pc, #332]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006768:	e006      	b.n	8006778 <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
      break;
 800676e:	e004      	b.n	800677a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8006778:	bf00      	nop
    }

    if(status == HAL_OK)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006780:	4b49      	ldr	r3, [pc, #292]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6819      	ldr	r1, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	3b01      	subs	r3, #1
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	430b      	orrs	r3, r1
 8006796:	4944      	ldr	r1, [pc, #272]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d17d      	bne.n	800689e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a40      	ldr	r2, [pc, #256]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ae:	f7fb f951 	bl	8001a54 <HAL_GetTick>
 80067b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80067b4:	e009      	b.n	80067ca <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067b6:	f7fb f94d 	bl	8001a54 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d902      	bls.n	80067ca <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
        break;
 80067c8:	e005      	b.n	80067d6 <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80067ca:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ef      	bne.n	80067b6 <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d160      	bne.n	800689e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d111      	bne.n	8006806 <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6892      	ldr	r2, [r2, #8]
 80067f2:	0211      	lsls	r1, r2, #8
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68d2      	ldr	r2, [r2, #12]
 80067f8:	0912      	lsrs	r2, r2, #4
 80067fa:	0452      	lsls	r2, r2, #17
 80067fc:	430a      	orrs	r2, r1
 80067fe:	492a      	ldr	r1, [pc, #168]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006800:	4313      	orrs	r3, r2
 8006802:	610b      	str	r3, [r1, #16]
 8006804:	e027      	b.n	8006856 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d112      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800680c:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6892      	ldr	r2, [r2, #8]
 800681c:	0211      	lsls	r1, r2, #8
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6912      	ldr	r2, [r2, #16]
 8006822:	0852      	lsrs	r2, r2, #1
 8006824:	3a01      	subs	r2, #1
 8006826:	0552      	lsls	r2, r2, #21
 8006828:	430a      	orrs	r2, r1
 800682a:	491f      	ldr	r1, [pc, #124]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800682c:	4313      	orrs	r3, r2
 800682e:	610b      	str	r3, [r1, #16]
 8006830:	e011      	b.n	8006856 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006832:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800683a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6892      	ldr	r2, [r2, #8]
 8006842:	0211      	lsls	r1, r2, #8
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6952      	ldr	r2, [r2, #20]
 8006848:	0852      	lsrs	r2, r2, #1
 800684a:	3a01      	subs	r2, #1
 800684c:	0652      	lsls	r2, r2, #25
 800684e:	430a      	orrs	r2, r1
 8006850:	4915      	ldr	r1, [pc, #84]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006852:	4313      	orrs	r3, r2
 8006854:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800685c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006860:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006862:	f7fb f8f7 	bl	8001a54 <HAL_GetTick>
 8006866:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8006868:	e009      	b.n	800687e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800686a:	f7fb f8f3 	bl	8001a54 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d902      	bls.n	800687e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	73fb      	strb	r3, [r7, #15]
          break;
 800687c:	e005      	b.n	800688a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ef      	beq.n	800686a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	4903      	ldr	r1, [pc, #12]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800689a:	4313      	orrs	r3, r2
 800689c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000

080068ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068be:	4b68      	ldr	r3, [pc, #416]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068ca:	4b65      	ldr	r3, [pc, #404]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0203 	and.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d10d      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
       ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068e2:	4b5f      	ldr	r3, [pc, #380]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
       ||
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d044      	beq.n	8006980 <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
 80068fa:	e041      	b.n	8006980 <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d00c      	beq.n	800691e <RCCEx_PLLSAI2_Config+0x72>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d013      	beq.n	8006930 <RCCEx_PLLSAI2_Config+0x84>
 8006908:	2b01      	cmp	r3, #1
 800690a:	d120      	bne.n	800694e <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800690c:	4b54      	ldr	r3, [pc, #336]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d11d      	bne.n	8006954 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800691c:	e01a      	b.n	8006954 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800691e:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006926:	2b00      	cmp	r3, #0
 8006928:	d116      	bne.n	8006958 <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800692e:	e013      	b.n	8006958 <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006930:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10f      	bne.n	800695c <RCCEx_PLLSAI2_Config+0xb0>
 800693c:	4b48      	ldr	r3, [pc, #288]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800694c:	e006      	b.n	800695c <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	73fb      	strb	r3, [r7, #15]
      break;
 8006952:	e004      	b.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8006954:	bf00      	nop
 8006956:	e002      	b.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8006958:	bf00      	nop
 800695a:	e000      	b.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 800695c:	bf00      	nop
    }

    if(status == HAL_OK)
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006964:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	430b      	orrs	r3, r1
 800697a:	4939      	ldr	r1, [pc, #228]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 800697c:	4313      	orrs	r3, r2
 800697e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d167      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a35      	ldr	r2, [pc, #212]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 800698c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006992:	f7fb f85f 	bl	8001a54 <HAL_GetTick>
 8006996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8006998:	e009      	b.n	80069ae <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800699a:	f7fb f85b 	bl	8001a54 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d902      	bls.n	80069ae <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	73fb      	strb	r3, [r7, #15]
        break;
 80069ac:	e005      	b.n	80069ba <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80069ae:	4b2c      	ldr	r3, [pc, #176]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1ef      	bne.n	800699a <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d14a      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d111      	bne.n	80069ea <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069c6:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6892      	ldr	r2, [r2, #8]
 80069d6:	0211      	lsls	r1, r2, #8
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68d2      	ldr	r2, [r2, #12]
 80069dc:	0912      	lsrs	r2, r2, #4
 80069de:	0452      	lsls	r2, r2, #17
 80069e0:	430a      	orrs	r2, r1
 80069e2:	491f      	ldr	r1, [pc, #124]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	614b      	str	r3, [r1, #20]
 80069e8:	e011      	b.n	8006a0e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6892      	ldr	r2, [r2, #8]
 80069fa:	0211      	lsls	r1, r2, #8
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6912      	ldr	r2, [r2, #16]
 8006a00:	0852      	lsrs	r2, r2, #1
 8006a02:	3a01      	subs	r2, #1
 8006a04:	0652      	lsls	r2, r2, #25
 8006a06:	430a      	orrs	r2, r1
 8006a08:	4915      	ldr	r1, [pc, #84]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fb f81b 	bl	8001a54 <HAL_GetTick>
 8006a1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8006a20:	e009      	b.n	8006a36 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a22:	f7fb f817 	bl	8001a54 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d902      	bls.n	8006a36 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	73fb      	strb	r3, [r7, #15]
          break;
 8006a34:	e005      	b.n	8006a42 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	4903      	ldr	r1, [pc, #12]	; (8006a60 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40021000 	.word	0x40021000

08006a64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d06f      	beq.n	8006b56 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fa fdbc 	bl	8001608 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	22ca      	movs	r2, #202	; 0xca
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2253      	movs	r2, #83	; 0x53
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fa4c 	bl	8006f46 <RTC_EnterInitMode>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d14e      	bne.n	8006b56 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6899      	ldr	r1, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68d2      	ldr	r2, [r2, #12]
 8006af2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6919      	ldr	r1, [r3, #16]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	041a      	lsls	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa4f 	bl	8006fac <RTC_ExitInitMode>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11e      	bne.n	8006b56 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0203 	bic.w	r2, r2, #3
 8006b26:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d101      	bne.n	8006b7a <HAL_RTC_SetTime+0x1a>
 8006b76:	2302      	movs	r3, #2
 8006b78:	e08b      	b.n	8006c92 <HAL_RTC_SetTime+0x132>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	22ca      	movs	r2, #202	; 0xca
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2253      	movs	r2, #83	; 0x53
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 f9d3 	bl	8006f46 <RTC_EnterInitMode>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006ba4:	7cfb      	ldrb	r3, [r7, #19]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d163      	bne.n	8006c72 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d126      	bne.n	8006bfe <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fa2d 	bl	8007028 <RTC_ByteToBcd2>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fa26 	bl	8007028 <RTC_ByteToBcd2>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006be0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	789b      	ldrb	r3, [r3, #2]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa1e 	bl	8007028 <RTC_ByteToBcd2>
 8006bec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	78db      	ldrb	r3, [r3, #3]
 8006bf6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e018      	b.n	8006c30 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c1e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c24:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6899      	ldr	r1, [r3, #8]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f99f 	bl	8006fac <RTC_ExitInitMode>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	22ff      	movs	r2, #255	; 0xff
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c7a:	7cfb      	ldrb	r3, [r7, #19]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd90      	pop	{r4, r7, pc}

08006c9a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cc8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	0d9b      	lsrs	r3, r3, #22
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11a      	bne.n	8006d48 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f9a6 	bl	8007068 <RTC_Bcd2ToByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f99d 	bl	8007068 <RTC_Bcd2ToByte>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	789b      	ldrb	r3, [r3, #2]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f994 	bl	8007068 <RTC_Bcd2ToByte>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d52:	b590      	push	{r4, r7, lr}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_RTC_SetDate+0x1a>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e075      	b.n	8006e58 <HAL_RTC_SetDate+0x106>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10e      	bne.n	8006da0 <HAL_RTC_SetDate+0x4e>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	f023 0310 	bic.w	r3, r3, #16
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	330a      	adds	r3, #10
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d11c      	bne.n	8006de0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f93c 	bl	8007028 <RTC_ByteToBcd2>
 8006db0:	4603      	mov	r3, r0
 8006db2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f935 	bl	8007028 <RTC_ByteToBcd2>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006dc2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	789b      	ldrb	r3, [r3, #2]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f92d 	bl	8007028 <RTC_ByteToBcd2>
 8006dce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006dd0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e00e      	b.n	8006dfe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	78db      	ldrb	r3, [r3, #3]
 8006de4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006dec:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006df2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ca      	movs	r2, #202	; 0xca
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2253      	movs	r2, #83	; 0x53
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f899 	bl	8006f46 <RTC_EnterInitMode>
 8006e14:	4603      	mov	r3, r0
 8006e16:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006e18:	7cfb      	ldrb	r3, [r7, #19]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f8bc 	bl	8006fac <RTC_ExitInitMode>
 8006e34:	4603      	mov	r3, r0
 8006e36:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	22ff      	movs	r2, #255	; 0xff
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006e56:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd90      	pop	{r4, r7, pc}

08006e60 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	0b5b      	lsrs	r3, r3, #13
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d11a      	bne.n	8006ef0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f8d2 	bl	8007068 <RTC_Bcd2ToByte>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f8c9 	bl	8007068 <RTC_Bcd2ToByte>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	789b      	ldrb	r3, [r3, #2]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f8c0 	bl	8007068 <RTC_Bcd2ToByte>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f10:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006f12:	f7fa fd9f 	bl	8001a54 <HAL_GetTick>
 8006f16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f18:	e009      	b.n	8006f2e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f1a:	f7fa fd9b 	bl	8001a54 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f28:	d901      	bls.n	8006f2e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e007      	b.n	8006f3e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0ee      	beq.n	8006f1a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d120      	bne.n	8006fa2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f04f 32ff 	mov.w	r2, #4294967295
 8006f68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006f6a:	f7fa fd73 	bl	8001a54 <HAL_GetTick>
 8006f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f70:	e00d      	b.n	8006f8e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f72:	f7fa fd6f 	bl	8001a54 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f80:	d905      	bls.n	8006f8e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <RTC_EnterInitMode+0x5c>
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d1e7      	bne.n	8006f72 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <RTC_ExitInitMode+0x78>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <RTC_ExitInitMode+0x78>)
 8006fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <RTC_ExitInitMode+0x78>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10c      	bne.n	8006fea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff92 	bl	8006efa <HAL_RTC_WaitForSynchro>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e017      	b.n	800701a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <RTC_ExitInitMode+0x78>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	4a0d      	ldr	r2, [pc, #52]	; (8007024 <RTC_ExitInitMode+0x78>)
 8006ff0:	f023 0320 	bic.w	r3, r3, #32
 8006ff4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ff7f 	bl	8006efa <HAL_RTC_WaitForSynchro>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2203      	movs	r2, #3
 8007006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <RTC_ExitInitMode+0x78>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4a04      	ldr	r2, [pc, #16]	; (8007024 <RTC_ExitInitMode+0x78>)
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	6093      	str	r3, [r2, #8]
  }

  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40002800 	.word	0x40002800

08007028 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800703a:	e005      	b.n	8007048 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007042:	7afb      	ldrb	r3, [r7, #11]
 8007044:	3b0a      	subs	r3, #10
 8007046:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007048:	7afb      	ldrb	r3, [r7, #11]
 800704a:	2b09      	cmp	r3, #9
 800704c:	d8f6      	bhi.n	800703c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	b2da      	uxtb	r2, r3
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	4313      	orrs	r3, r2
 800705a:	b2db      	uxtb	r3, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	4413      	add	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	b2da      	uxtb	r2, r3
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	4413      	add	r3, r2
 800708e:	b2db      	uxtb	r3, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e07f      	b.n	80071b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80070f6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d120      	bne.n	8007148 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007106:	f7fa fca5 	bl	8001a54 <HAL_GetTick>
 800710a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800710c:	e015      	b.n	800713a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800710e:	f7fa fca1 	bl	8001a54 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711c:	d90d      	bls.n	800713a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	22ff      	movs	r2, #255	; 0xff
 8007124:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2203      	movs	r2, #3
 800712a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e03d      	b.n	80071b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0e2      	beq.n	800710e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 0107 	bic.w	r1, r3, #7
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	430a      	orrs	r2, r1
 8007162:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800716a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007170:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a12      	ldr	r2, [pc, #72]	; (80071c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800717a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800718a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800719a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	22ff      	movs	r2, #255	; 0xff
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40010400 	.word	0x40010400

080071c4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e04d      	b.n	8007276 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	22ca      	movs	r2, #202	; 0xca
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2253      	movs	r2, #83	; 0x53
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007208:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007218:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800721a:	f7fa fc1b 	bl	8001a54 <HAL_GetTick>
 800721e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007220:	e015      	b.n	800724e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007222:	f7fa fc17 	bl	8001a54 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007230:	d90d      	bls.n	800724e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	22ff      	movs	r2, #255	; 0xff
 8007238:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e013      	b.n	8007276 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0e2      	beq.n	8007222 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	22ff      	movs	r2, #255	; 0xff
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e07c      	b.n	800738a <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fa f96a 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072d0:	d902      	bls.n	80072d8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e002      	b.n	80072de <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072e6:	d007      	beq.n	80072f8 <HAL_SPI_Init+0x7a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072f0:	d002      	beq.n	80072f8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007308:	d903      	bls.n	8007312 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
 8007310:	e002      	b.n	8007318 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	ea42 0103 	orr.w	r1, r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	f003 0204 	and.w	r2, r3, #4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	ea42 0103 	orr.w	r1, r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b08a      	sub	sp, #40	; 0x28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80073ac:	2301      	movs	r3, #1
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x32>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e1de      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3f0>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073cc:	f7fa fb42 	bl	8001a54 <HAL_GetTick>
 80073d0:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d00e      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x74>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ee:	d106      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <HAL_SPI_TransmitReceive+0x6c>
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d003      	beq.n	8007406 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
 8007400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007404:	e1b3      	b.n	800776e <HAL_SPI_TransmitReceive+0x3dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x86>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x86>
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800741e:	e1a6      	b.n	800776e <HAL_SPI_TransmitReceive+0x3dc>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b04      	cmp	r3, #4
 800742a:	d003      	beq.n	8007434 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2205      	movs	r2, #5
 8007430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	887a      	ldrh	r2, [r7, #2]
 800745a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	887a      	ldrh	r2, [r7, #2]
 8007460:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007476:	d805      	bhi.n	8007484 <HAL_SPI_TransmitReceive+0xf2>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	d908      	bls.n	8007496 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	e007      	b.n	80074a6 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d007      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074cc:	d975      	bls.n	80075ba <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x14e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d160      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3302      	adds	r3, #2
 80074ee:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074fe:	e050      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01c      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x1ae>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x1ae>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d110      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	881a      	ldrh	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	3302      	adds	r3, #2
 800752c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <HAL_SPI_TransmitReceive+0x1f0>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d113      	bne.n	8007582 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	b29a      	uxth	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3302      	adds	r3, #2
 800756a:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757e:	2301      	movs	r3, #1
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d00b      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x210>
 800758a:	f7fa fa63 	bl	8001a54 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	429a      	cmp	r2, r3
 8007598:	d803      	bhi.n	80075a2 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80075a0:	e0e5      	b.n	800776e <HAL_SPI_TransmitReceive+0x3dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1a9      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x16e>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1a3      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x16e>
 80075b8:	e0c9      	b.n	800774e <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x23c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	f040 80b3 	bne.w	8007734 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d90f      	bls.n	80075f8 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	881a      	ldrh	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3302      	adds	r3, #2
 80075e6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b02      	subs	r3, #2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075f6:	e09d      	b.n	8007734 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	60ba      	str	r2, [r7, #8]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	320c      	adds	r2, #12
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007616:	e08d      	b.n	8007734 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d031      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x2f0>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02c      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x2f0>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b02      	cmp	r3, #2
 8007634:	d125      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d90f      	bls.n	8007660 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	3302      	adds	r3, #2
 800764e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b02      	subs	r3, #2
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800765e:	e00e      	b.n	800767e <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	60ba      	str	r2, [r7, #8]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	320c      	adds	r2, #12
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d042      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x382>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d13b      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d920      	bls.n	80076ea <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3302      	adds	r3, #2
 80076b8:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b02      	subs	r3, #2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d81b      	bhi.n	8007710 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	e012      	b.n	8007710 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f103 020c 	add.w	r2, r3, #12
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	1c59      	adds	r1, r3, #1
 80076f6:	6079      	str	r1, [r7, #4]
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d00b      	beq.n	8007734 <HAL_SPI_TransmitReceive+0x3a2>
 800771c:	f7fa f99a 	bl	8001a54 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007728:	429a      	cmp	r2, r3
 800772a:	d803      	bhi.n	8007734 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007732:	e01c      	b.n	800776e <HAL_SPI_TransmitReceive+0x3dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	f47f af6c 	bne.w	8007618 <HAL_SPI_TransmitReceive+0x286>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	f47f af65 	bne.w	8007618 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f8f1 	bl	800793a <SPI_EndRxTxTransaction>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d006      	beq.n	800776c <HAL_SPI_TransmitReceive+0x3da>
  {
    errorcode = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2220      	movs	r2, #32
 8007768:	661a      	str	r2, [r3, #96]	; 0x60
 800776a:	e000      	b.n	800776e <HAL_SPI_TransmitReceive+0x3dc>
  }

error :
 800776c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800777e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007782:	4618      	mov	r0, r3
 8007784:	3728      	adds	r7, #40	; 0x28
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007798:	e04c      	b.n	8007834 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d048      	beq.n	8007834 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80077a8:	f7fa f954 	bl	8001a54 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d83d      	bhi.n	8007834 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d0:	d111      	bne.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077da:	d004      	beq.n	80077e6 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d107      	bne.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fe:	d10f      	bne.n	8007820 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800781e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e00e      	b.n	8007852 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	4013      	ands	r3, r2
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	d101      	bne.n	8007848 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007844:	2201      	movs	r2, #1
 8007846:	e000      	b.n	800784a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8007848:	2200      	movs	r2, #0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d1a4      	bne.n	800779a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b086      	sub	sp, #24
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8007868:	e05a      	b.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007870:	d109      	bne.n	8007886 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	330c      	adds	r3, #12
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007884:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d048      	beq.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8007894:	f7fa f8de 	bl	8001a54 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d83d      	bhi.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078bc:	d111      	bne.n	80078e2 <SPI_WaitFifoStateUntilTimeout+0x88>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c6:	d004      	beq.n	80078d2 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d0:	d107      	bne.n	80078e2 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ea:	d10f      	bne.n	800790c <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800790a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e008      	b.n	8007932 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4013      	ands	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d19c      	bne.n	800786a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af02      	add	r7, sp, #8
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7ff ff81 	bl	800785a <SPI_WaitFifoStateUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007962:	f043 0220 	orr.w	r2, r3, #32
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e027      	b.n	80079be <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	2180      	movs	r1, #128	; 0x80
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff ff06 	bl	800778a <SPI_WaitFlagStateUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e014      	b.n	80079be <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff ff5a 	bl	800785a <SPI_WaitFifoStateUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e000      	b.n	80079be <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e01d      	b.n	8007a14 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7f9 fcbd 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f000 fa55 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <HAL_TIM_Base_Start+0x54>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b06      	cmp	r3, #6
 8007a38:	d00f      	beq.n	8007a5a <HAL_TIM_Base_Start+0x3e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <HAL_TIM_Base_Start+0x54>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d007      	beq.n	8007a5a <HAL_TIM_Base_Start+0x3e>
  {
    __HAL_TIM_ENABLE(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0201 	orr.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	00010007 	.word	0x00010007

08007a74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e01d      	b.n	8007ac2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f815 	bl	8007aca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f000 f9fe 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b0c      	cmp	r3, #12
 8007aee:	d841      	bhi.n	8007b74 <HAL_TIM_OC_Start_IT+0x94>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_TIM_OC_Start_IT+0x18>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b2d 	.word	0x08007b2d
 8007afc:	08007b75 	.word	0x08007b75
 8007b00:	08007b75 	.word	0x08007b75
 8007b04:	08007b75 	.word	0x08007b75
 8007b08:	08007b3f 	.word	0x08007b3f
 8007b0c:	08007b75 	.word	0x08007b75
 8007b10:	08007b75 	.word	0x08007b75
 8007b14:	08007b75 	.word	0x08007b75
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b75 	.word	0x08007b75
 8007b20:	08007b75 	.word	0x08007b75
 8007b24:	08007b75 	.word	0x08007b75
 8007b28:	08007b63 	.word	0x08007b63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0202 	orr.w	r2, r2, #2
 8007b3a:	60da      	str	r2, [r3, #12]
      break;
 8007b3c:	e01b      	b.n	8007b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0204 	orr.w	r2, r2, #4
 8007b4c:	60da      	str	r2, [r3, #12]
      break;
 8007b4e:	e012      	b.n	8007b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0208 	orr.w	r2, r2, #8
 8007b5e:	60da      	str	r2, [r3, #12]
      break;
 8007b60:	e009      	b.n	8007b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0210 	orr.w	r2, r2, #16
 8007b70:	60da      	str	r2, [r3, #12]
      break;
 8007b72:	e000      	b.n	8007b76 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8007b74:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fda2 	bl	80086c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_TIM_OC_Start_IT+0x128>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d013      	beq.n	8007bb6 <HAL_TIM_OC_Start_IT+0xd6>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <HAL_TIM_OC_Start_IT+0x12c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00e      	beq.n	8007bb6 <HAL_TIM_OC_Start_IT+0xd6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1c      	ldr	r2, [pc, #112]	; (8007c10 <HAL_TIM_OC_Start_IT+0x130>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIM_OC_Start_IT+0xd6>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_TIM_OC_Start_IT+0x134>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIM_OC_Start_IT+0xd6>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_TIM_OC_Start_IT+0x138>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_OC_Start_IT+0xda>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <HAL_TIM_OC_Start_IT+0xdc>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <HAL_TIM_OC_Start_IT+0x13c>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d00f      	beq.n	8007bfe <HAL_TIM_OC_Start_IT+0x11e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <HAL_TIM_OC_Start_IT+0x13c>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bec:	d007      	beq.n	8007bfe <HAL_TIM_OC_Start_IT+0x11e>
  {
    __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	00010007 	.word	0x00010007

08007c20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d101      	bne.n	8007c3a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e06c      	b.n	8007d14 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b14      	cmp	r3, #20
 8007c4e:	d857      	bhi.n	8007d00 <HAL_TIM_OC_ConfigChannel+0xe0>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007cad 	.word	0x08007cad
 8007c5c:	08007d01 	.word	0x08007d01
 8007c60:	08007d01 	.word	0x08007d01
 8007c64:	08007d01 	.word	0x08007d01
 8007c68:	08007cbb 	.word	0x08007cbb
 8007c6c:	08007d01 	.word	0x08007d01
 8007c70:	08007d01 	.word	0x08007d01
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007cc9 	.word	0x08007cc9
 8007c7c:	08007d01 	.word	0x08007d01
 8007c80:	08007d01 	.word	0x08007d01
 8007c84:	08007d01 	.word	0x08007d01
 8007c88:	08007cd7 	.word	0x08007cd7
 8007c8c:	08007d01 	.word	0x08007d01
 8007c90:	08007d01 	.word	0x08007d01
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007ce5 	.word	0x08007ce5
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d01 	.word	0x08007d01
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007cf3 	.word	0x08007cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f998 	bl	8007fe8 <TIM_OC1_SetConfig>
      break;
 8007cb8:	e023      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fa21 	bl	8008108 <TIM_OC2_SetConfig>
      break;
 8007cc6:	e01c      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 faa4 	bl	800821c <TIM_OC3_SetConfig>
      break;
 8007cd4:	e015      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fb25 	bl	800832c <TIM_OC4_SetConfig>
      break;
 8007ce2:	e00e      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fb88 	bl	8008400 <TIM_OC5_SetConfig>
      break;
 8007cf0:	e007      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fbe5 	bl	80084c8 <TIM_OC6_SetConfig>
      break;
 8007cfe:	e000      	b.n	8007d02 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8007d00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_TIM_ConfigClockSource+0x18>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e0ba      	b.n	8007eaa <HAL_TIM_ConfigClockSource+0x18e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d07a      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x14a>
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d80d      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x74>
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	f000 8086 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x16a>
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d803      	bhi.n	8007d86 <HAL_TIM_ConfigClockSource+0x6a>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8081 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d84:	e088      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d07d      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x16a>
 8007d8a:	2b30      	cmp	r3, #48	; 0x30
 8007d8c:	d07b      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8007d8e:	e083      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007d90:	2b70      	cmp	r3, #112	; 0x70
 8007d92:	d018      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0xaa>
 8007d94:	2b70      	cmp	r3, #112	; 0x70
 8007d96:	d804      	bhi.n	8007da2 <HAL_TIM_ConfigClockSource+0x86>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d044      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x10a>
 8007d9c:	2b60      	cmp	r3, #96	; 0x60
 8007d9e:	d052      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8007da0:	e07a      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da6:	d003      	beq.n	8007db0 <HAL_TIM_ConfigClockSource+0x94>
 8007da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dac:	d028      	beq.n	8007e00 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007dae:	e073      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dbe:	f023 0307 	bic.w	r3, r3, #7
 8007dc2:	6093      	str	r3, [r2, #8]
      break;
 8007dc4:	e068      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6899      	ldr	r1, [r3, #8]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f000 fc57 	bl	8008688 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007df4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	609a      	str	r2, [r3, #8]
      break;
 8007dfe:	e04b      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f000 fc3a 	bl	8008688 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e22:	609a      	str	r2, [r3, #8]
      break;
 8007e24:	e038      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f000 fbae 	bl	8008594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2150      	movs	r1, #80	; 0x50
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fc07 	bl	8008652 <TIM_ITRx_SetConfig>
      break;
 8007e44:	e028      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 fbcd 	bl	80085f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2160      	movs	r1, #96	; 0x60
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fbf7 	bl	8008652 <TIM_ITRx_SetConfig>
      break;
 8007e64:	e018      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 fb8e 	bl	8008594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fbe7 	bl	8008652 <TIM_ITRx_SetConfig>
      break;
 8007e84:	e008      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f000 fbde 	bl	8008652 <TIM_ITRx_SetConfig>
      break;
 8007e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a40      	ldr	r2, [pc, #256]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed2:	d00f      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3d      	ldr	r2, [pc, #244]	; (8007fcc <TIM_Base_SetConfig+0x118>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00b      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3c      	ldr	r2, [pc, #240]	; (8007fd0 <TIM_Base_SetConfig+0x11c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d007      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3b      	ldr	r2, [pc, #236]	; (8007fd4 <TIM_Base_SetConfig+0x120>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a3a      	ldr	r2, [pc, #232]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d108      	bne.n	8007f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2f      	ldr	r2, [pc, #188]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01f      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d01b      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <TIM_Base_SetConfig+0x118>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d017      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <TIM_Base_SetConfig+0x11c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d013      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <TIM_Base_SetConfig+0x120>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00f      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00b      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a28      	ldr	r2, [pc, #160]	; (8007fdc <TIM_Base_SetConfig+0x128>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a27      	ldr	r2, [pc, #156]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_Base_SetConfig+0x9a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a26      	ldr	r2, [pc, #152]	; (8007fe4 <TIM_Base_SetConfig+0x130>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d108      	bne.n	8007f60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a10      	ldr	r2, [pc, #64]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00f      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a12      	ldr	r2, [pc, #72]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00b      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <TIM_Base_SetConfig+0x128>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d007      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a0f      	ldr	r2, [pc, #60]	; (8007fe4 <TIM_Base_SetConfig+0x130>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d103      	bne.n	8007fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	615a      	str	r2, [r3, #20]
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40012c00 	.word	0x40012c00
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	40000800 	.word	0x40000800
 8007fd4:	40000c00 	.word	0x40000c00
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800

08007fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a2c      	ldr	r2, [pc, #176]	; (80080f4 <TIM_OC1_SetConfig+0x10c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00f      	beq.n	8008068 <TIM_OC1_SetConfig+0x80>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <TIM_OC1_SetConfig+0x110>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_OC1_SetConfig+0x80>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <TIM_OC1_SetConfig+0x114>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_OC1_SetConfig+0x80>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a29      	ldr	r2, [pc, #164]	; (8008100 <TIM_OC1_SetConfig+0x118>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_OC1_SetConfig+0x80>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a28      	ldr	r2, [pc, #160]	; (8008104 <TIM_OC1_SetConfig+0x11c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d10c      	bne.n	8008082 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0308 	bic.w	r3, r3, #8
 800806e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 0304 	bic.w	r3, r3, #4
 8008080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1b      	ldr	r2, [pc, #108]	; (80080f4 <TIM_OC1_SetConfig+0x10c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00f      	beq.n	80080aa <TIM_OC1_SetConfig+0xc2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <TIM_OC1_SetConfig+0x110>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00b      	beq.n	80080aa <TIM_OC1_SetConfig+0xc2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a19      	ldr	r2, [pc, #100]	; (80080fc <TIM_OC1_SetConfig+0x114>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d007      	beq.n	80080aa <TIM_OC1_SetConfig+0xc2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a18      	ldr	r2, [pc, #96]	; (8008100 <TIM_OC1_SetConfig+0x118>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <TIM_OC1_SetConfig+0xc2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a17      	ldr	r2, [pc, #92]	; (8008104 <TIM_OC1_SetConfig+0x11c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d111      	bne.n	80080ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	621a      	str	r2, [r3, #32]
}
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40012c00 	.word	0x40012c00
 80080f8:	40013400 	.word	0x40013400
 80080fc:	40014000 	.word	0x40014000
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800

08008108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f023 0210 	bic.w	r2, r3, #16
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0320 	bic.w	r3, r3, #32
 8008156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a28      	ldr	r2, [pc, #160]	; (8008208 <TIM_OC2_SetConfig+0x100>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_OC2_SetConfig+0x6c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a27      	ldr	r2, [pc, #156]	; (800820c <TIM_OC2_SetConfig+0x104>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10d      	bne.n	8008190 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a1d      	ldr	r2, [pc, #116]	; (8008208 <TIM_OC2_SetConfig+0x100>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_OC2_SetConfig+0xb0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a1c      	ldr	r2, [pc, #112]	; (800820c <TIM_OC2_SetConfig+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC2_SetConfig+0xb0>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <TIM_OC2_SetConfig+0x108>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC2_SetConfig+0xb0>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <TIM_OC2_SetConfig+0x10c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC2_SetConfig+0xb0>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a19      	ldr	r2, [pc, #100]	; (8008218 <TIM_OC2_SetConfig+0x110>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d113      	bne.n	80081e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	621a      	str	r2, [r3, #32]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40012c00 	.word	0x40012c00
 800820c:	40013400 	.word	0x40013400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800

0800821c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a27      	ldr	r2, [pc, #156]	; (8008318 <TIM_OC3_SetConfig+0xfc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_OC3_SetConfig+0x6a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a26      	ldr	r2, [pc, #152]	; (800831c <TIM_OC3_SetConfig+0x100>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d10d      	bne.n	80082a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800828c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a1c      	ldr	r2, [pc, #112]	; (8008318 <TIM_OC3_SetConfig+0xfc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00f      	beq.n	80082ca <TIM_OC3_SetConfig+0xae>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a1b      	ldr	r2, [pc, #108]	; (800831c <TIM_OC3_SetConfig+0x100>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_OC3_SetConfig+0xae>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a1a      	ldr	r2, [pc, #104]	; (8008320 <TIM_OC3_SetConfig+0x104>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_OC3_SetConfig+0xae>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a19      	ldr	r2, [pc, #100]	; (8008324 <TIM_OC3_SetConfig+0x108>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC3_SetConfig+0xae>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a18      	ldr	r2, [pc, #96]	; (8008328 <TIM_OC3_SetConfig+0x10c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d113      	bne.n	80082f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	621a      	str	r2, [r3, #32]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	40012c00 	.word	0x40012c00
 800831c:	40013400 	.word	0x40013400
 8008320:	40014000 	.word	0x40014000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800

0800832c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800835a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800835e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800837a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	031b      	lsls	r3, r3, #12
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a18      	ldr	r2, [pc, #96]	; (80083ec <TIM_OC4_SetConfig+0xc0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00f      	beq.n	80083b0 <TIM_OC4_SetConfig+0x84>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <TIM_OC4_SetConfig+0xc4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00b      	beq.n	80083b0 <TIM_OC4_SetConfig+0x84>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a16      	ldr	r2, [pc, #88]	; (80083f4 <TIM_OC4_SetConfig+0xc8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_OC4_SetConfig+0x84>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a15      	ldr	r2, [pc, #84]	; (80083f8 <TIM_OC4_SetConfig+0xcc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_OC4_SetConfig+0x84>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a14      	ldr	r2, [pc, #80]	; (80083fc <TIM_OC4_SetConfig+0xd0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d109      	bne.n	80083c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	019b      	lsls	r3, r3, #6
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40012c00 	.word	0x40012c00
 80083f0:	40013400 	.word	0x40013400
 80083f4:	40014000 	.word	0x40014000
 80083f8:	40014400 	.word	0x40014400
 80083fc:	40014800 	.word	0x40014800

08008400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800842e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008444:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <TIM_OC5_SetConfig+0xb4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00f      	beq.n	800847a <TIM_OC5_SetConfig+0x7a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <TIM_OC5_SetConfig+0xb8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00b      	beq.n	800847a <TIM_OC5_SetConfig+0x7a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a15      	ldr	r2, [pc, #84]	; (80084bc <TIM_OC5_SetConfig+0xbc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d007      	beq.n	800847a <TIM_OC5_SetConfig+0x7a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <TIM_OC5_SetConfig+0xc0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_OC5_SetConfig+0x7a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <TIM_OC5_SetConfig+0xc4>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d109      	bne.n	800848e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	621a      	str	r2, [r3, #32]
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40013400 	.word	0x40013400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800850e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	051b      	lsls	r3, r3, #20
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a18      	ldr	r2, [pc, #96]	; (8008580 <TIM_OC6_SetConfig+0xb8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00f      	beq.n	8008544 <TIM_OC6_SetConfig+0x7c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a17      	ldr	r2, [pc, #92]	; (8008584 <TIM_OC6_SetConfig+0xbc>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00b      	beq.n	8008544 <TIM_OC6_SetConfig+0x7c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a16      	ldr	r2, [pc, #88]	; (8008588 <TIM_OC6_SetConfig+0xc0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d007      	beq.n	8008544 <TIM_OC6_SetConfig+0x7c>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a15      	ldr	r2, [pc, #84]	; (800858c <TIM_OC6_SetConfig+0xc4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_OC6_SetConfig+0x7c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <TIM_OC6_SetConfig+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d109      	bne.n	8008558 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800854a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	029b      	lsls	r3, r3, #10
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40012c00 	.word	0x40012c00
 8008584:	40013400 	.word	0x40013400
 8008588:	40014000 	.word	0x40014000
 800858c:	40014400 	.word	0x40014400
 8008590:	40014800 	.word	0x40014800

08008594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f023 0201 	bic.w	r2, r3, #1
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f023 030a 	bic.w	r3, r3, #10
 80085d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b087      	sub	sp, #28
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800861c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	031b      	lsls	r3, r3, #12
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800862e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	621a      	str	r2, [r3, #32]
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	f043 0307 	orr.w	r3, r3, #7
 8008674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	609a      	str	r2, [r3, #8]
}
 800867c:	bf00      	nop
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	021a      	lsls	r2, r3, #8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	2201      	movs	r2, #1
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1a      	ldr	r2, [r3, #32]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	43db      	mvns	r3, r3
 80086ea:	401a      	ands	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008700:	431a      	orrs	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
}
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008728:	2302      	movs	r3, #2
 800872a:	e045      	b.n	80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	4313      	orrs	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	40012c00 	.word	0x40012c00
 80087c8:	40013400 	.word	0x40013400

080087cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e043      	b.n	8008866 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f8 fe20 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2224      	movs	r2, #36	; 0x24
 80087fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0201 	bic.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc09 	bl	8009028 <UART_SetConfig>
 8008816:	4603      	mov	r3, r0
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e022      	b.n	8008866 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 ff49 	bl	80096c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800883c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800884c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0201 	orr.w	r2, r2, #1
 800885c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 ffd0 	bl	8009804 <UART_CheckIdleState>
 8008864:	4603      	mov	r3, r0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e02a      	b.n	80088d6 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	; 0x24
 8008884:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2200      	movs	r2, #0
 80088ae:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f8 fe31 	bl	8001518 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af02      	add	r7, sp, #8
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d177      	bne.n	80089ee <HAL_UART_Transmit+0x110>
  {
    if ((pData == NULL) || (Size == 0U))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_UART_Transmit+0x2c>
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e070      	b.n	80089f0 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_UART_Transmit+0x3e>
 8008918:	2302      	movs	r3, #2
 800891a:	e069      	b.n	80089f0 <HAL_UART_Transmit+0x112>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2221      	movs	r2, #33	; 0x21
 800892e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008932:	f7f9 f88f 	bl	8001a54 <HAL_GetTick>
 8008936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    while (huart->TxXferCount > 0U)
 8008948:	e034      	b.n	80089b4 <HAL_UART_Transmit+0xd6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2200      	movs	r2, #0
 8008952:	2180      	movs	r1, #128	; 0x80
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 ff9e 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_UART_Transmit+0x86>
      {
        return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e045      	b.n	80089f0 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896c:	d111      	bne.n	8008992 <HAL_UART_Transmit+0xb4>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10d      	bne.n	8008992 <HAL_UART_Transmit+0xb4>
      {
        tmp = (uint16_t *) pData;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	881a      	ldrh	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008986:	b292      	uxth	r2, r2
 8008988:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3302      	adds	r3, #2
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	e007      	b.n	80089a2 <HAL_UART_Transmit+0xc4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	60ba      	str	r2, [r7, #8]
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	b292      	uxth	r2, r2
 80089a0:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1c4      	bne.n	800894a <HAL_UART_Transmit+0x6c>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2200      	movs	r2, #0
 80089c8:	2140      	movs	r1, #64	; 0x40
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 ff63 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e00a      	b.n	80089f0 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80089ee:	2302      	movs	r3, #2
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	; 0x28
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	4613      	mov	r3, r2
 8008a06:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	f040 80ad 	bne.w	8008b74 <HAL_UART_Receive+0x17c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <HAL_UART_Receive+0x2e>
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e0a5      	b.n	8008b76 <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_UART_Receive+0x40>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e09e      	b.n	8008b76 <HAL_UART_Receive+0x17e>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2222      	movs	r2, #34	; 0x22
 8008a4a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008a4e:	f7f9 f801 	bl	8001a54 <HAL_GetTick>
 8008a52:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize  = Size;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	88fa      	ldrh	r2, [r7, #6]
 8008a58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	88fa      	ldrh	r2, [r7, #6]
 8008a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6c:	d10e      	bne.n	8008a8c <HAL_UART_Receive+0x94>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d105      	bne.n	8008a82 <HAL_UART_Receive+0x8a>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a80:	e028      	b.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a8a:	e023      	b.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10d      	bne.n	8008ab0 <HAL_UART_Receive+0xb8>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_UART_Receive+0xae>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	22ff      	movs	r2, #255	; 0xff
 8008aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008aa4:	e016      	b.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	227f      	movs	r2, #127	; 0x7f
 8008aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008aae:	e011      	b.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab8:	d10c      	bne.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <HAL_UART_Receive+0xd4>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	227f      	movs	r2, #127	; 0x7f
 8008ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008aca:	e003      	b.n	8008ad4 <HAL_UART_Receive+0xdc>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	223f      	movs	r2, #63	; 0x3f
 8008ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ada:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008adc:	e03a      	b.n	8008b54 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2120      	movs	r1, #32
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fed4 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <HAL_UART_Receive+0x100>
      {
        return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e03e      	b.n	8008b76 <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b00:	d112      	bne.n	8008b28 <HAL_UART_Receive+0x130>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10e      	bne.n	8008b28 <HAL_UART_Receive+0x130>
      {
        tmp = (uint16_t *) pData ;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	8b7b      	ldrh	r3, [r7, #26]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	801a      	strh	r2, [r3, #0]
        pData += 2U;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3302      	adds	r3, #2
 8008b24:	60bb      	str	r3, [r7, #8]
 8008b26:	e00c      	b.n	8008b42 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	b2d9      	uxtb	r1, r3
 8008b32:	8b7b      	ldrh	r3, [r7, #26]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	1c58      	adds	r0, r3, #1
 8008b3a:	60b8      	str	r0, [r7, #8]
 8008b3c:	400a      	ands	r2, r1
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
      }
      huart->RxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1be      	bne.n	8008ade <HAL_UART_Receive+0xe6>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e000      	b.n	8008b76 <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	f040 8086 	bne.w	8008ca8 <HAL_UART_Receive_IT+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_UART_Receive_IT+0x28>
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e07e      	b.n	8008caa <HAL_UART_Receive_IT+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_UART_Receive_IT+0x3a>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e077      	b.n	8008caa <HAL_UART_Receive_IT+0x12a>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be6:	d10e      	bne.n	8008c06 <HAL_UART_Receive_IT+0x86>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <HAL_UART_Receive_IT+0x7c>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bfa:	e028      	b.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	22ff      	movs	r2, #255	; 0xff
 8008c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c04:	e023      	b.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10d      	bne.n	8008c2a <HAL_UART_Receive_IT+0xaa>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <HAL_UART_Receive_IT+0xa0>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c1e:	e016      	b.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	227f      	movs	r2, #127	; 0x7f
 8008c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c28:	e011      	b.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c32:	d10c      	bne.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <HAL_UART_Receive_IT+0xc6>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	227f      	movs	r2, #127	; 0x7f
 8008c40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c44:	e003      	b.n	8008c4e <HAL_UART_Receive_IT+0xce>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	223f      	movs	r2, #63	; 0x3f
 8008c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2222      	movs	r2, #34	; 0x22
 8008c58:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	609a      	str	r2, [r3, #8]
    }
    else
#endif
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c74:	d107      	bne.n	8008c86 <HAL_UART_Receive_IT+0x106>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <HAL_UART_Receive_IT+0x106>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4a0d      	ldr	r2, [pc, #52]	; (8008cb8 <HAL_UART_Receive_IT+0x138>)
 8008c82:	661a      	str	r2, [r3, #96]	; 0x60
 8008c84:	e002      	b.n	8008c8c <HAL_UART_Receive_IT+0x10c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a0c      	ldr	r2, [pc, #48]	; (8008cbc <HAL_UART_Receive_IT+0x13c>)
 8008c8a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
#if defined(USART_CR1_FIFOEN)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
#else
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ca2:	601a      	str	r2, [r3, #0]
#endif
    }

    return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	e000      	b.n	8008caa <HAL_UART_Receive_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008ca8:	2302      	movs	r3, #2
  }
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	08009a73 	.word	0x08009a73
 8008cbc:	080099cd 	.word	0x080099cd

08008cc0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8008cd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0201 	bic.w	r2, r2, #1
 8008ce6:	609a      	str	r2, [r3, #8]
#endif

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d114      	bne.n	8008d20 <HAL_UART_Abort+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d04:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_UART_Abort+0x60>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d12:	2200      	movs	r2, #0
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38

      HAL_DMA_Abort(huart->hdmatx);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f9 fa10 	bl	8002140 <HAL_DMA_Abort>
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2a:	2b40      	cmp	r3, #64	; 0x40
 8008d2c:	d114      	bne.n	8008d58 <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38

      HAL_DMA_Abort(huart->hdmarx);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f9 f9f4 	bl	8002140 <HAL_DMA_Abort>
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	220f      	movs	r2, #15
 8008d6e:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	8b1b      	ldrh	r3, [r3, #24]
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0208 	orr.w	r2, r2, #8
 8008d80:	b292      	uxth	r2, r2
 8008d82:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset Handle ErrorCode to No Error */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d113      	bne.n	8008dfa <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00e      	beq.n	8008dfa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_UART_IRQHandler+0x56>
#endif
    {
      if (huart->RxISR != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80fd 	beq.w	8008fea <HAL_UART_IRQHandler+0x246>
      {
        huart->RxISR(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	4798      	blx	r3
      }
      return;
 8008df8:	e0f7      	b.n	8008fea <HAL_UART_IRQHandler+0x246>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
#else
  if ((errorflags != RESET)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80bf 	beq.w	8008f80 <HAL_UART_IRQHandler+0x1dc>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d105      	bne.n	8008e18 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80b4 	beq.w	8008f80 <HAL_UART_IRQHandler+0x1dc>
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00e      	beq.n	8008e40 <HAL_UART_IRQHandler+0x9c>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2201      	movs	r2, #1
 8008e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e38:	f043 0201 	orr.w	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f003 0302 	and.w	r3, r3, #2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00e      	beq.n	8008e68 <HAL_UART_IRQHandler+0xc4>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d009      	beq.n	8008e68 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e60:	f043 0204 	orr.w	r2, r3, #4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00e      	beq.n	8008e90 <HAL_UART_IRQHandler+0xec>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d009      	beq.n	8008e90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2204      	movs	r2, #4
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e88:	f043 0202 	orr.w	r2, r3, #2
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	675a      	str	r2, [r3, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if (((isrflags & USART_ISR_ORE) != RESET)
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d013      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != RESET)))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d009      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x11e>
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eba:	f043 0208 	orr.w	r2, r3, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8091 	beq.w	8008fee <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00c      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x14c>
#endif
      {
        if (huart->RxISR != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef4:	f003 0308 	and.w	r3, r3, #8
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <HAL_UART_IRQHandler+0x166>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8008f06:	2b40      	cmp	r3, #64	; 0x40
 8008f08:	d131      	bne.n	8008f6e <HAL_UART_IRQHandler+0x1ca>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fd0d 	bl	800992a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d123      	bne.n	8008f66 <HAL_UART_IRQHandler+0x1c2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d013      	beq.n	8008f5e <HAL_UART_IRQHandler+0x1ba>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3a:	4a30      	ldr	r2, [pc, #192]	; (8008ffc <HAL_UART_IRQHandler+0x258>)
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f9 f930 	bl	80021a8 <HAL_DMA_Abort_IT>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d016      	beq.n	8008f7c <HAL_UART_IRQHandler+0x1d8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	e00e      	b.n	8008f7c <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f858 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	e00a      	b.n	8008f7c <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f854 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	e006      	b.n	8008f7c <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f850 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	675a      	str	r2, [r3, #116]	; 0x74
      }
    }
    return;
 8008f7a:	e038      	b.n	8008fee <HAL_UART_IRQHandler+0x24a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7c:	bf00      	nop
    return;
 8008f7e:	e036      	b.n	8008fee <HAL_UART_IRQHandler+0x24a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00d      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x202>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x202>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fdbc 	bl	8009b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fa4:	e026      	b.n	8008ff4 <HAL_UART_IRQHandler+0x250>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
#else
  if (((isrflags & USART_ISR_TXE) != RESET)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00d      	beq.n	8008fcc <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <HAL_UART_IRQHandler+0x228>
#endif
  {
    if (huart->TxISR != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d017      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x24e>
    {
      huart->TxISR(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
    }
    return;
 8008fca:	e012      	b.n	8008ff2 <HAL_UART_IRQHandler+0x24e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x250>
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x250>
  {
    UART_EndTransmit_IT(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fcd9 	bl	8009998 <UART_EndTransmit_IT>
    return;
 8008fe6:	bf00      	nop
 8008fe8:	e004      	b.n	8008ff4 <HAL_UART_IRQHandler+0x250>
      return;
 8008fea:	bf00      	nop
 8008fec:	e002      	b.n	8008ff4 <HAL_UART_IRQHandler+0x250>
    return;
 8008fee:	bf00      	nop
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_IRQHandler+0x250>
    return;
 8008ff2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif
}
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0800996d 	.word	0x0800996d

08009000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009028:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800902c:	b088      	sub	sp, #32
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8009036:	2310      	movs	r3, #16
 8009038:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800903a:	2300      	movs	r3, #0
 800903c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4313      	orrs	r3, r2
 8009060:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4bab      	ldr	r3, [pc, #684]	; (8009318 <UART_SetConfig+0x2f0>)
 800906a:	4013      	ands	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	69f9      	ldr	r1, [r7, #28]
 8009072:	430b      	orrs	r3, r1
 8009074:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4aa1      	ldr	r2, [pc, #644]	; (800931c <UART_SetConfig+0x2f4>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d004      	beq.n	80090a6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	430a      	orrs	r2, r1
 80090b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a98      	ldr	r2, [pc, #608]	; (8009320 <UART_SetConfig+0x2f8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d121      	bne.n	8009108 <UART_SetConfig+0xe0>
 80090c4:	4b97      	ldr	r3, [pc, #604]	; (8009324 <UART_SetConfig+0x2fc>)
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d816      	bhi.n	8009100 <UART_SetConfig+0xd8>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0xb0>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	080090f5 	.word	0x080090f5
 80090e0:	080090ef 	.word	0x080090ef
 80090e4:	080090fb 	.word	0x080090fb
 80090e8:	2301      	movs	r3, #1
 80090ea:	76fb      	strb	r3, [r7, #27]
 80090ec:	e0e6      	b.n	80092bc <UART_SetConfig+0x294>
 80090ee:	2302      	movs	r3, #2
 80090f0:	76fb      	strb	r3, [r7, #27]
 80090f2:	e0e3      	b.n	80092bc <UART_SetConfig+0x294>
 80090f4:	2304      	movs	r3, #4
 80090f6:	76fb      	strb	r3, [r7, #27]
 80090f8:	e0e0      	b.n	80092bc <UART_SetConfig+0x294>
 80090fa:	2308      	movs	r3, #8
 80090fc:	76fb      	strb	r3, [r7, #27]
 80090fe:	e0dd      	b.n	80092bc <UART_SetConfig+0x294>
 8009100:	2310      	movs	r3, #16
 8009102:	76fb      	strb	r3, [r7, #27]
 8009104:	bf00      	nop
 8009106:	e0d9      	b.n	80092bc <UART_SetConfig+0x294>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a86      	ldr	r2, [pc, #536]	; (8009328 <UART_SetConfig+0x300>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d134      	bne.n	800917c <UART_SetConfig+0x154>
 8009112:	4b84      	ldr	r3, [pc, #528]	; (8009324 <UART_SetConfig+0x2fc>)
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	f003 030c 	and.w	r3, r3, #12
 800911c:	2b0c      	cmp	r3, #12
 800911e:	d829      	bhi.n	8009174 <UART_SetConfig+0x14c>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <UART_SetConfig+0x100>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800915d 	.word	0x0800915d
 800912c:	08009175 	.word	0x08009175
 8009130:	08009175 	.word	0x08009175
 8009134:	08009175 	.word	0x08009175
 8009138:	08009169 	.word	0x08009169
 800913c:	08009175 	.word	0x08009175
 8009140:	08009175 	.word	0x08009175
 8009144:	08009175 	.word	0x08009175
 8009148:	08009163 	.word	0x08009163
 800914c:	08009175 	.word	0x08009175
 8009150:	08009175 	.word	0x08009175
 8009154:	08009175 	.word	0x08009175
 8009158:	0800916f 	.word	0x0800916f
 800915c:	2300      	movs	r3, #0
 800915e:	76fb      	strb	r3, [r7, #27]
 8009160:	e0ac      	b.n	80092bc <UART_SetConfig+0x294>
 8009162:	2302      	movs	r3, #2
 8009164:	76fb      	strb	r3, [r7, #27]
 8009166:	e0a9      	b.n	80092bc <UART_SetConfig+0x294>
 8009168:	2304      	movs	r3, #4
 800916a:	76fb      	strb	r3, [r7, #27]
 800916c:	e0a6      	b.n	80092bc <UART_SetConfig+0x294>
 800916e:	2308      	movs	r3, #8
 8009170:	76fb      	strb	r3, [r7, #27]
 8009172:	e0a3      	b.n	80092bc <UART_SetConfig+0x294>
 8009174:	2310      	movs	r3, #16
 8009176:	76fb      	strb	r3, [r7, #27]
 8009178:	bf00      	nop
 800917a:	e09f      	b.n	80092bc <UART_SetConfig+0x294>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a6a      	ldr	r2, [pc, #424]	; (800932c <UART_SetConfig+0x304>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d120      	bne.n	80091c8 <UART_SetConfig+0x1a0>
 8009186:	4b67      	ldr	r3, [pc, #412]	; (8009324 <UART_SetConfig+0x2fc>)
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009190:	2b10      	cmp	r3, #16
 8009192:	d00f      	beq.n	80091b4 <UART_SetConfig+0x18c>
 8009194:	2b10      	cmp	r3, #16
 8009196:	d802      	bhi.n	800919e <UART_SetConfig+0x176>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <UART_SetConfig+0x180>
 800919c:	e010      	b.n	80091c0 <UART_SetConfig+0x198>
 800919e:	2b20      	cmp	r3, #32
 80091a0:	d005      	beq.n	80091ae <UART_SetConfig+0x186>
 80091a2:	2b30      	cmp	r3, #48	; 0x30
 80091a4:	d009      	beq.n	80091ba <UART_SetConfig+0x192>
 80091a6:	e00b      	b.n	80091c0 <UART_SetConfig+0x198>
 80091a8:	2300      	movs	r3, #0
 80091aa:	76fb      	strb	r3, [r7, #27]
 80091ac:	e086      	b.n	80092bc <UART_SetConfig+0x294>
 80091ae:	2302      	movs	r3, #2
 80091b0:	76fb      	strb	r3, [r7, #27]
 80091b2:	e083      	b.n	80092bc <UART_SetConfig+0x294>
 80091b4:	2304      	movs	r3, #4
 80091b6:	76fb      	strb	r3, [r7, #27]
 80091b8:	e080      	b.n	80092bc <UART_SetConfig+0x294>
 80091ba:	2308      	movs	r3, #8
 80091bc:	76fb      	strb	r3, [r7, #27]
 80091be:	e07d      	b.n	80092bc <UART_SetConfig+0x294>
 80091c0:	2310      	movs	r3, #16
 80091c2:	76fb      	strb	r3, [r7, #27]
 80091c4:	bf00      	nop
 80091c6:	e079      	b.n	80092bc <UART_SetConfig+0x294>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a58      	ldr	r2, [pc, #352]	; (8009330 <UART_SetConfig+0x308>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d120      	bne.n	8009214 <UART_SetConfig+0x1ec>
 80091d2:	4b54      	ldr	r3, [pc, #336]	; (8009324 <UART_SetConfig+0x2fc>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	d00f      	beq.n	8009200 <UART_SetConfig+0x1d8>
 80091e0:	2b40      	cmp	r3, #64	; 0x40
 80091e2:	d802      	bhi.n	80091ea <UART_SetConfig+0x1c2>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <UART_SetConfig+0x1cc>
 80091e8:	e010      	b.n	800920c <UART_SetConfig+0x1e4>
 80091ea:	2b80      	cmp	r3, #128	; 0x80
 80091ec:	d005      	beq.n	80091fa <UART_SetConfig+0x1d2>
 80091ee:	2bc0      	cmp	r3, #192	; 0xc0
 80091f0:	d009      	beq.n	8009206 <UART_SetConfig+0x1de>
 80091f2:	e00b      	b.n	800920c <UART_SetConfig+0x1e4>
 80091f4:	2300      	movs	r3, #0
 80091f6:	76fb      	strb	r3, [r7, #27]
 80091f8:	e060      	b.n	80092bc <UART_SetConfig+0x294>
 80091fa:	2302      	movs	r3, #2
 80091fc:	76fb      	strb	r3, [r7, #27]
 80091fe:	e05d      	b.n	80092bc <UART_SetConfig+0x294>
 8009200:	2304      	movs	r3, #4
 8009202:	76fb      	strb	r3, [r7, #27]
 8009204:	e05a      	b.n	80092bc <UART_SetConfig+0x294>
 8009206:	2308      	movs	r3, #8
 8009208:	76fb      	strb	r3, [r7, #27]
 800920a:	e057      	b.n	80092bc <UART_SetConfig+0x294>
 800920c:	2310      	movs	r3, #16
 800920e:	76fb      	strb	r3, [r7, #27]
 8009210:	bf00      	nop
 8009212:	e053      	b.n	80092bc <UART_SetConfig+0x294>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a46      	ldr	r2, [pc, #280]	; (8009334 <UART_SetConfig+0x30c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d124      	bne.n	8009268 <UART_SetConfig+0x240>
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <UART_SetConfig+0x2fc>)
 8009220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922c:	d012      	beq.n	8009254 <UART_SetConfig+0x22c>
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d802      	bhi.n	800923a <UART_SetConfig+0x212>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <UART_SetConfig+0x220>
 8009238:	e012      	b.n	8009260 <UART_SetConfig+0x238>
 800923a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923e:	d006      	beq.n	800924e <UART_SetConfig+0x226>
 8009240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009244:	d009      	beq.n	800925a <UART_SetConfig+0x232>
 8009246:	e00b      	b.n	8009260 <UART_SetConfig+0x238>
 8009248:	2300      	movs	r3, #0
 800924a:	76fb      	strb	r3, [r7, #27]
 800924c:	e036      	b.n	80092bc <UART_SetConfig+0x294>
 800924e:	2302      	movs	r3, #2
 8009250:	76fb      	strb	r3, [r7, #27]
 8009252:	e033      	b.n	80092bc <UART_SetConfig+0x294>
 8009254:	2304      	movs	r3, #4
 8009256:	76fb      	strb	r3, [r7, #27]
 8009258:	e030      	b.n	80092bc <UART_SetConfig+0x294>
 800925a:	2308      	movs	r3, #8
 800925c:	76fb      	strb	r3, [r7, #27]
 800925e:	e02d      	b.n	80092bc <UART_SetConfig+0x294>
 8009260:	2310      	movs	r3, #16
 8009262:	76fb      	strb	r3, [r7, #27]
 8009264:	bf00      	nop
 8009266:	e029      	b.n	80092bc <UART_SetConfig+0x294>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a2b      	ldr	r2, [pc, #172]	; (800931c <UART_SetConfig+0x2f4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d123      	bne.n	80092ba <UART_SetConfig+0x292>
 8009272:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <UART_SetConfig+0x2fc>)
 8009274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800927c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009280:	d012      	beq.n	80092a8 <UART_SetConfig+0x280>
 8009282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009286:	d802      	bhi.n	800928e <UART_SetConfig+0x266>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d007      	beq.n	800929c <UART_SetConfig+0x274>
 800928c:	e012      	b.n	80092b4 <UART_SetConfig+0x28c>
 800928e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009292:	d006      	beq.n	80092a2 <UART_SetConfig+0x27a>
 8009294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009298:	d009      	beq.n	80092ae <UART_SetConfig+0x286>
 800929a:	e00b      	b.n	80092b4 <UART_SetConfig+0x28c>
 800929c:	2300      	movs	r3, #0
 800929e:	76fb      	strb	r3, [r7, #27]
 80092a0:	e00c      	b.n	80092bc <UART_SetConfig+0x294>
 80092a2:	2302      	movs	r3, #2
 80092a4:	76fb      	strb	r3, [r7, #27]
 80092a6:	e009      	b.n	80092bc <UART_SetConfig+0x294>
 80092a8:	2304      	movs	r3, #4
 80092aa:	76fb      	strb	r3, [r7, #27]
 80092ac:	e006      	b.n	80092bc <UART_SetConfig+0x294>
 80092ae:	2308      	movs	r3, #8
 80092b0:	76fb      	strb	r3, [r7, #27]
 80092b2:	e003      	b.n	80092bc <UART_SetConfig+0x294>
 80092b4:	2310      	movs	r3, #16
 80092b6:	76fb      	strb	r3, [r7, #27]
 80092b8:	e000      	b.n	80092bc <UART_SetConfig+0x294>
 80092ba:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a16      	ldr	r2, [pc, #88]	; (800931c <UART_SetConfig+0x2f4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	f040 80fa 	bne.w	80094bc <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092c8:	7efb      	ldrb	r3, [r7, #27]
 80092ca:	2b08      	cmp	r3, #8
 80092cc:	d836      	bhi.n	800933c <UART_SetConfig+0x314>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x2ac>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	08009301 	.word	0x08009301
 80092e0:	0800933d 	.word	0x0800933d
 80092e4:	08009307 	.word	0x08009307
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800930f 	.word	0x0800930f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fc fe78 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 80092fc:	60f8      	str	r0, [r7, #12]
#endif
        break;
 80092fe:	e020      	b.n	8009342 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8009300:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <UART_SetConfig+0x310>)
 8009302:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8009304:	e01d      	b.n	8009342 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8009306:	f7fc fdb5 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 800930a:	60f8      	str	r0, [r7, #12]
#endif
        break;
 800930c:	e019      	b.n	8009342 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800930e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009312:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8009314:	e015      	b.n	8009342 <UART_SetConfig+0x31a>
 8009316:	bf00      	nop
 8009318:	efff69f3 	.word	0xefff69f3
 800931c:	40008000 	.word	0x40008000
 8009320:	40013800 	.word	0x40013800
 8009324:	40021000 	.word	0x40021000
 8009328:	40004400 	.word	0x40004400
 800932c:	40004800 	.word	0x40004800
 8009330:	40004c00 	.word	0x40004c00
 8009334:	40005000 	.word	0x40005000
 8009338:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	74fb      	strb	r3, [r7, #19]
        break;
 8009340:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 81ac 	beq.w	80096a2 <UART_SetConfig+0x67a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	429a      	cmp	r2, r3
 8009358:	d305      	bcc.n	8009366 <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	429a      	cmp	r2, r3
 8009364:	d902      	bls.n	800936c <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	74fb      	strb	r3, [r7, #19]
 800936a:	e19a      	b.n	80096a2 <UART_SetConfig+0x67a>
      }
      else
      {
        switch (clocksource)
 800936c:	7efb      	ldrb	r3, [r7, #27]
 800936e:	2b08      	cmp	r3, #8
 8009370:	f200 8091 	bhi.w	8009496 <UART_SetConfig+0x46e>
 8009374:	a201      	add	r2, pc, #4	; (adr r2, 800937c <UART_SetConfig+0x354>)
 8009376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937a:	bf00      	nop
 800937c:	080093a1 	.word	0x080093a1
 8009380:	08009497 	.word	0x08009497
 8009384:	080093ed 	.word	0x080093ed
 8009388:	08009497 	.word	0x08009497
 800938c:	08009421 	.word	0x08009421
 8009390:	08009497 	.word	0x08009497
 8009394:	08009497 	.word	0x08009497
 8009398:	08009497 	.word	0x08009497
 800939c:	0800946d 	.word	0x0800946d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80093a0:	f7fc fe24 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 80093a4:	4603      	mov	r3, r0
 80093a6:	4619      	mov	r1, r3
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	f04f 0400 	mov.w	r4, #0
 80093b4:	0214      	lsls	r4, r2, #8
 80093b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80093ba:	020b      	lsls	r3, r1, #8
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6852      	ldr	r2, [r2, #4]
 80093c0:	0852      	lsrs	r2, r2, #1
 80093c2:	4611      	mov	r1, r2
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	eb13 0b01 	adds.w	fp, r3, r1
 80093cc:	eb44 0c02 	adc.w	ip, r4, r2
 80093d0:	4658      	mov	r0, fp
 80093d2:	4661      	mov	r1, ip
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f04f 0400 	mov.w	r4, #0
 80093dc:	461a      	mov	r2, r3
 80093de:	4623      	mov	r3, r4
 80093e0:	f7f7 fc5c 	bl	8000c9c <__aeabi_uldivmod>
 80093e4:	4603      	mov	r3, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	617b      	str	r3, [r7, #20]
#endif
            break;
 80093ea:	e057      	b.n	800949c <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	f04f 0400 	mov.w	r4, #0
 80093f6:	49b1      	ldr	r1, [pc, #708]	; (80096bc <UART_SetConfig+0x694>)
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	eb13 0b01 	adds.w	fp, r3, r1
 8009400:	eb44 0c02 	adc.w	ip, r4, r2
 8009404:	4658      	mov	r0, fp
 8009406:	4661      	mov	r1, ip
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f04f 0400 	mov.w	r4, #0
 8009410:	461a      	mov	r2, r3
 8009412:	4623      	mov	r3, r4
 8009414:	f7f7 fc42 	bl	8000c9c <__aeabi_uldivmod>
 8009418:	4603      	mov	r3, r0
 800941a:	460c      	mov	r4, r1
 800941c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800941e:	e03d      	b.n	800949c <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009420:	f7fc fd28 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8009424:	4603      	mov	r3, r0
 8009426:	4619      	mov	r1, r3
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	f04f 0400 	mov.w	r4, #0
 8009434:	0214      	lsls	r4, r2, #8
 8009436:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800943a:	020b      	lsls	r3, r1, #8
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6852      	ldr	r2, [r2, #4]
 8009440:	0852      	lsrs	r2, r2, #1
 8009442:	4611      	mov	r1, r2
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	eb13 0b01 	adds.w	fp, r3, r1
 800944c:	eb44 0c02 	adc.w	ip, r4, r2
 8009450:	4658      	mov	r0, fp
 8009452:	4661      	mov	r1, ip
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f04f 0400 	mov.w	r4, #0
 800945c:	461a      	mov	r2, r3
 800945e:	4623      	mov	r3, r4
 8009460:	f7f7 fc1c 	bl	8000c9c <__aeabi_uldivmod>
 8009464:	4603      	mov	r3, r0
 8009466:	460c      	mov	r4, r1
 8009468:	617b      	str	r3, [r7, #20]
#endif
            break;
 800946a:	e017      	b.n	800949c <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	085b      	lsrs	r3, r3, #1
 8009472:	f04f 0400 	mov.w	r4, #0
 8009476:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800947a:	f144 0100 	adc.w	r1, r4, #0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f04f 0400 	mov.w	r4, #0
 8009486:	461a      	mov	r2, r3
 8009488:	4623      	mov	r3, r4
 800948a:	f7f7 fc07 	bl	8000c9c <__aeabi_uldivmod>
 800948e:	4603      	mov	r3, r0
 8009490:	460c      	mov	r4, r1
 8009492:	617b      	str	r3, [r7, #20]
#endif
            break;
 8009494:	e002      	b.n	800949c <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	74fb      	strb	r3, [r7, #19]
            break;
 800949a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a2:	d308      	bcc.n	80094b6 <UART_SetConfig+0x48e>
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094aa:	d204      	bcs.n	80094b6 <UART_SetConfig+0x48e>
        {
          huart->Instance->BRR = usartdiv;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e0f5      	b.n	80096a2 <UART_SetConfig+0x67a>
        }
        else
        {
          ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	74fb      	strb	r3, [r7, #19]
 80094ba:	e0f2      	b.n	80096a2 <UART_SetConfig+0x67a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c4:	d17f      	bne.n	80095c6 <UART_SetConfig+0x59e>
  {
    switch (clocksource)
 80094c6:	7efb      	ldrb	r3, [r7, #27]
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d85c      	bhi.n	8009586 <UART_SetConfig+0x55e>
 80094cc:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <UART_SetConfig+0x4ac>)
 80094ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d2:	bf00      	nop
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	08009517 	.word	0x08009517
 80094dc:	08009535 	.word	0x08009535
 80094e0:	08009587 	.word	0x08009587
 80094e4:	08009551 	.word	0x08009551
 80094e8:	08009587 	.word	0x08009587
 80094ec:	08009587 	.word	0x08009587
 80094f0:	08009587 	.word	0x08009587
 80094f4:	0800956f 	.word	0x0800956f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80094f8:	f7fc fd78 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 80094fc:	4603      	mov	r3, r0
 80094fe:	005a      	lsls	r2, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	441a      	add	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009510:	b29b      	uxth	r3, r3
 8009512:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009514:	e03a      	b.n	800958c <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009516:	f7fc fd7d 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800951a:	4603      	mov	r3, r0
 800951c:	005a      	lsls	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	441a      	add	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	fbb2 f3f3 	udiv	r3, r2, r3
 800952e:	b29b      	uxth	r3, r3
 8009530:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009532:	e02b      	b.n	800958c <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	085b      	lsrs	r3, r3, #1
 800953a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800953e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	6852      	ldr	r2, [r2, #4]
 8009546:	fbb3 f3f2 	udiv	r3, r3, r2
 800954a:	b29b      	uxth	r3, r3
 800954c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800954e:	e01d      	b.n	800958c <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009550:	f7fc fc90 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8009554:	4603      	mov	r3, r0
 8009556:	005a      	lsls	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	441a      	add	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	617b      	str	r3, [r7, #20]
#endif
        break;
 800956c:	e00e      	b.n	800958c <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009580:	b29b      	uxth	r3, r3
 8009582:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009584:	e002      	b.n	800958c <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	74fb      	strb	r3, [r7, #19]
        break;
 800958a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d916      	bls.n	80095c0 <UART_SetConfig+0x598>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009598:	d212      	bcs.n	80095c0 <UART_SetConfig+0x598>
    {
      brrtemp = usartdiv & 0xFFF0U;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f023 030f 	bic.w	r3, r3, #15
 80095a2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	897b      	ldrh	r3, [r7, #10]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	897a      	ldrh	r2, [r7, #10]
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	e070      	b.n	80096a2 <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	74fb      	strb	r3, [r7, #19]
 80095c4:	e06d      	b.n	80096a2 <UART_SetConfig+0x67a>
    }
  }
  else
  {
    switch (clocksource)
 80095c6:	7efb      	ldrb	r3, [r7, #27]
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d859      	bhi.n	8009680 <UART_SetConfig+0x658>
 80095cc:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <UART_SetConfig+0x5ac>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	080095f9 	.word	0x080095f9
 80095d8:	08009615 	.word	0x08009615
 80095dc:	08009631 	.word	0x08009631
 80095e0:	08009681 	.word	0x08009681
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	08009681 	.word	0x08009681
 80095ec:	08009681 	.word	0x08009681
 80095f0:	08009681 	.word	0x08009681
 80095f4:	08009669 	.word	0x08009669
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80095f8:	f7fc fcf8 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	fbb2 f3f3 	udiv	r3, r2, r3
 800960e:	b29b      	uxth	r3, r3
 8009610:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009612:	e038      	b.n	8009686 <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009614:	f7fc fcfe 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 8009618:	4602      	mov	r2, r0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	b29b      	uxth	r3, r3
 800962c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800962e:	e02a      	b.n	8009686 <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800963a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6852      	ldr	r2, [r2, #4]
 8009642:	fbb3 f3f2 	udiv	r3, r3, r2
 8009646:	b29b      	uxth	r3, r3
 8009648:	617b      	str	r3, [r7, #20]
#endif
        break;
 800964a:	e01c      	b.n	8009686 <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800964c:	f7fc fc12 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8009650:	4602      	mov	r2, r0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	441a      	add	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009662:	b29b      	uxth	r3, r3
 8009664:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009666:	e00e      	b.n	8009686 <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	085b      	lsrs	r3, r3, #1
 800966e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	fbb2 f3f3 	udiv	r3, r2, r3
 800967a:	b29b      	uxth	r3, r3
 800967c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800967e:	e002      	b.n	8009686 <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	74fb      	strb	r3, [r7, #19]
        break;
 8009684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b0f      	cmp	r3, #15
 800968a:	d908      	bls.n	800969e <UART_SetConfig+0x676>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009692:	d204      	bcs.n	800969e <UART_SetConfig+0x676>
    {
      huart->Instance->BRR = usartdiv;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	60da      	str	r2, [r3, #12]
 800969c:	e001      	b.n	80096a2 <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80096ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80096ba:	bf00      	nop
 80096bc:	f4240000 	.word	0xf4240000

080096c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00a      	beq.n	80096ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00a      	beq.n	800972e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00a      	beq.n	8009750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	430a      	orrs	r2, r1
 800974e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01a      	beq.n	80097d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097be:	d10a      	bne.n	80097d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00a      	beq.n	80097f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	605a      	str	r2, [r3, #4]
  }
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009816:	f7f8 f91d 	bl	8001a54 <HAL_GetTick>
 800981a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b08      	cmp	r3, #8
 8009828:	d10e      	bne.n	8009848 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800982a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f82c 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e022      	b.n	800988e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b04      	cmp	r3, #4
 8009854:	d10e      	bne.n	8009874 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009856:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f816 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e00c      	b.n	800988e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	603b      	str	r3, [r7, #0]
 80098a2:	4613      	mov	r3, r2
 80098a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a6:	e02c      	b.n	8009902 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d028      	beq.n	8009902 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80098b6:	f7f8 f8cd 	bl	8001a54 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d21d      	bcs.n	8009902 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098d4:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0201 	bic.w	r2, r2, #1
 80098e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e00f      	b.n	8009922 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69da      	ldr	r2, [r3, #28]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4013      	ands	r3, r2
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	429a      	cmp	r2, r3
 8009910:	bf0c      	ite	eq
 8009912:	2301      	moveq	r3, #1
 8009914:	2300      	movne	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	429a      	cmp	r2, r3
 800991e:	d0c3      	beq.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009940:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0201 	bic.w	r2, r2, #1
 8009950:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fb42 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fb1e 	bl	8009000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b22      	cmp	r3, #34	; 0x22
 80099e6:	d136      	bne.n	8009a56 <UART_RxISR_8BIT+0x8a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80099ee:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099f0:	89bb      	ldrh	r3, [r7, #12]
 80099f2:	b2d9      	uxtb	r1, r3
 80099f4:	89fb      	ldrh	r3, [r7, #14]
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fc:	1c5c      	adds	r4, r3, #1
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	6544      	str	r4, [r0, #84]	; 0x54
 8009a02:	400a      	ands	r2, r1
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]

    if (--huart->RxXferCount == 0)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	3b01      	subs	r3, #1
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	4619      	mov	r1, r3
 8009a18:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d124      	bne.n	8009a6a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a2e:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0201 	bic.w	r2, r2, #1
 8009a3e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f004 fa36 	bl	800dec0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a54:	e009      	b.n	8009a6a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	8b1b      	ldrh	r3, [r3, #24]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0208 	orr.w	r2, r2, #8
 8009a66:	b292      	uxth	r2, r2
 8009a68:	831a      	strh	r2, [r3, #24]
}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd90      	pop	{r4, r7, pc}

08009a72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b22      	cmp	r3, #34	; 0x22
 8009a8c:	d138      	bne.n	8009b00 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a94:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a9c:	89ba      	ldrh	r2, [r7, #12]
 8009a9e:	89fb      	ldrh	r3, [r7, #14]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aac:	1c9a      	adds	r2, r3, #2
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	655a      	str	r2, [r3, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d124      	bne.n	8009b14 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ad8:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0201 	bic.w	r2, r2, #1
 8009ae8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f004 f9e1 	bl	800dec0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009afe:	e009      	b.n	8009b14 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	8b1b      	ldrh	r3, [r3, #24]
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0208 	orr.w	r2, r2, #8
 8009b10:	b292      	uxth	r2, r2
 8009b12:	831a      	strh	r2, [r3, #24]
}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <applib_dt_is_leap_year>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static unsigned char applib_dt_is_leap_year(unsigned short year)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	80fb      	strh	r3, [r7, #6]
    if ((year % 400) == 0)
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	4a15      	ldr	r2, [pc, #84]	; (8009b94 <applib_dt_is_leap_year+0x64>)
 8009b3e:	fba2 1203 	umull	r1, r2, r2, r3
 8009b42:	09d2      	lsrs	r2, r2, #7
 8009b44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009b48:	fb01 f202 	mul.w	r2, r1, r2
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <applib_dt_is_leap_year+0x28>
        return 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e016      	b.n	8009b86 <applib_dt_is_leap_year+0x56>
    else if ((year % 100) == 0)
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	4a0e      	ldr	r2, [pc, #56]	; (8009b94 <applib_dt_is_leap_year+0x64>)
 8009b5c:	fba2 1203 	umull	r1, r2, r2, r3
 8009b60:	0952      	lsrs	r2, r2, #5
 8009b62:	2164      	movs	r1, #100	; 0x64
 8009b64:	fb01 f202 	mul.w	r2, r1, r2
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <applib_dt_is_leap_year+0x44>
        return 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	e008      	b.n	8009b86 <applib_dt_is_leap_year+0x56>
    else if ((year % 4) == 0)
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <applib_dt_is_leap_year+0x54>
        return 1;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e000      	b.n	8009b86 <applib_dt_is_leap_year+0x56>
    else
        return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	51eb851f 	.word	0x51eb851f

08009b98 <applib_dt_last_day_of_mon>:

static unsigned char applib_dt_last_day_of_mon(unsigned char month, unsigned short year)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	71fb      	strb	r3, [r7, #7]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	80bb      	strh	r3, [r7, #4]
    if ((month == 0) || (month > 12))
 8009ba8:	79fb      	ldrb	r3, [r7, #7]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <applib_dt_last_day_of_mon+0x1c>
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	2b0c      	cmp	r3, #12
 8009bb2:	d908      	bls.n	8009bc6 <applib_dt_last_day_of_mon+0x2e>
        return g_day_per_mon[1] + applib_dt_is_leap_year(year);
 8009bb4:	241c      	movs	r4, #28
 8009bb6:	88bb      	ldrh	r3, [r7, #4]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff ffb9 	bl	8009b30 <applib_dt_is_leap_year>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4423      	add	r3, r4
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	e00f      	b.n	8009be6 <applib_dt_last_day_of_mon+0x4e>

    if (month != 2)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d004      	beq.n	8009bd6 <applib_dt_last_day_of_mon+0x3e>
        return g_day_per_mon[month - 1];
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <applib_dt_last_day_of_mon+0x58>)
 8009bd2:	5cd3      	ldrb	r3, [r2, r3]
 8009bd4:	e007      	b.n	8009be6 <applib_dt_last_day_of_mon+0x4e>
    else
        return g_day_per_mon[1] + applib_dt_is_leap_year(year);
 8009bd6:	241c      	movs	r4, #28
 8009bd8:	88bb      	ldrh	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff ffa8 	bl	8009b30 <applib_dt_is_leap_year>
 8009be0:	4603      	mov	r3, r0
 8009be2:	4423      	add	r3, r4
 8009be4:	b2db      	uxtb	r3, r3
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	080268d4 	.word	0x080268d4

08009bf4 <change_unix>:

static void change_unix(long ts, Chirp_Time *gps_time)
{
 8009bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf6:	b093      	sub	sp, #76	; 0x4c
 8009bf8:	af04      	add	r7, sp, #16
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
    int year = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	623b      	str	r3, [r7, #32]
    int month = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
    int date = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	637b      	str	r3, [r7, #52]	; 0x34
    int day = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61bb      	str	r3, [r7, #24]
    int hour = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30
    int minute = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
    int second = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]

    int dates = ts / SEC_PER_DAY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a9f      	ldr	r2, [pc, #636]	; (8009e9c <change_unix+0x2a8>)
 8009c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8009c22:	441a      	add	r2, r3
 8009c24:	1412      	asrs	r2, r2, #16
 8009c26:	17db      	asrs	r3, r3, #31
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int yearTmp = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    int dayTmp = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
    for (yearTmp = UTC_BASE_YEAR; dates > 0; yearTmp++)
 8009c34:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8009c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c3a:	e013      	b.n	8009c64 <change_unix+0x70>
    {
        dayTmp = (DAY_PER_YEAR + applib_dt_is_leap_year(yearTmp));
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff ff75 	bl	8009b30 <applib_dt_is_leap_year>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8009c4c:	60fb      	str	r3, [r7, #12]
        if (dates >= dayTmp)
 8009c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	db0a      	blt.n	8009c6c <change_unix+0x78>
            dates -= dayTmp;
 8009c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (yearTmp = UTC_BASE_YEAR; dates > 0; yearTmp++)
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	3301      	adds	r3, #1
 8009c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dce8      	bgt.n	8009c3c <change_unix+0x48>
 8009c6a:	e000      	b.n	8009c6e <change_unix+0x7a>
        else
            break;
 8009c6c:	bf00      	nop
    }
    year = yearTmp;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	623b      	str	r3, [r7, #32]

    int monthTmp = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
    for (monthTmp = 1; monthTmp < MONTH_PER_YEAR; monthTmp++)
 8009c76:	2301      	movs	r3, #1
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7a:	e014      	b.n	8009ca6 <change_unix+0xb2>
    {
        dayTmp = applib_dt_last_day_of_mon(monthTmp, year);
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	6a3a      	ldr	r2, [r7, #32]
 8009c82:	b292      	uxth	r2, r2
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ff86 	bl	8009b98 <applib_dt_last_day_of_mon>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	60fb      	str	r3, [r7, #12]
        if (dates >= dayTmp)
 8009c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	db0a      	blt.n	8009cae <change_unix+0xba>
            dates -= dayTmp;
 8009c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (monthTmp = 1; monthTmp < MONTH_PER_YEAR; monthTmp++)
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	2b0b      	cmp	r3, #11
 8009caa:	dde7      	ble.n	8009c7c <change_unix+0x88>
 8009cac:	e000      	b.n	8009cb0 <change_unix+0xbc>
        else
            break;
 8009cae:	bf00      	nop
    }
    month = monthTmp;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	61fb      	str	r3, [r7, #28]

    date = dates + 1;
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34

    int secs = ts % SEC_PER_DAY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a77      	ldr	r2, [pc, #476]	; (8009e9c <change_unix+0x2a8>)
 8009cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8009cc2:	441a      	add	r2, r3
 8009cc4:	1411      	asrs	r1, r2, #16
 8009cc6:	17da      	asrs	r2, r3, #31
 8009cc8:	1a8a      	subs	r2, r1, r2
 8009cca:	4975      	ldr	r1, [pc, #468]	; (8009ea0 <change_unix+0x2ac>)
 8009ccc:	fb01 f202 	mul.w	r2, r1, r2
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	60bb      	str	r3, [r7, #8]
    hour = secs / SEC_PER_HOUR;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a73      	ldr	r2, [pc, #460]	; (8009ea4 <change_unix+0x2b0>)
 8009cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8009cdc:	441a      	add	r2, r3
 8009cde:	12d2      	asrs	r2, r2, #11
 8009ce0:	17db      	asrs	r3, r3, #31
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	633b      	str	r3, [r7, #48]	; 0x30
    hour += 8;
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	3308      	adds	r3, #8
 8009cea:	633b      	str	r3, [r7, #48]	; 0x30
    if (hour >= 24)
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	2b17      	cmp	r3, #23
 8009cf0:	dd2b      	ble.n	8009d4a <change_unix+0x156>
    {
        hour -= 24;
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	3b18      	subs	r3, #24
 8009cf6:	633b      	str	r3, [r7, #48]	; 0x30
        date++;
 8009cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	637b      	str	r3, [r7, #52]	; 0x34
        dayTmp = applib_dt_last_day_of_mon(monthTmp, year);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	6a3a      	ldr	r2, [r7, #32]
 8009d04:	b292      	uxth	r2, r2
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff ff45 	bl	8009b98 <applib_dt_last_day_of_mon>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	60fb      	str	r3, [r7, #12]
        if (date > dayTmp)
 8009d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	dd17      	ble.n	8009d4a <change_unix+0x156>
        {
            date -= dayTmp;
 8009d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
            if (month == 12)
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d102      	bne.n	8009d2e <change_unix+0x13a>
                yearTmp = yearTmp + 1;
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28

            monthTmp = (monthTmp + 1) % MONTH_PER_YEAR;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <change_unix+0x2b4>)
 8009d34:	fb83 1302 	smull	r1, r3, r3, r2
 8009d38:	1059      	asrs	r1, r3, #1
 8009d3a:	17d3      	asrs	r3, r2, #31
 8009d3c:	1ac9      	subs	r1, r1, r3
 8009d3e:	460b      	mov	r3, r1
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	440b      	add	r3, r1
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    year = yearTmp;
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	623b      	str	r3, [r7, #32]
    month = monthTmp;
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	61fb      	str	r3, [r7, #28]

    secs %= SEC_PER_HOUR;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4a53      	ldr	r2, [pc, #332]	; (8009ea4 <change_unix+0x2b0>)
 8009d56:	fb82 1203 	smull	r1, r2, r2, r3
 8009d5a:	441a      	add	r2, r3
 8009d5c:	12d1      	asrs	r1, r2, #11
 8009d5e:	17da      	asrs	r2, r3, #31
 8009d60:	1a8a      	subs	r2, r1, r2
 8009d62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009d66:	fb01 f202 	mul.w	r2, r1, r2
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
    minute = secs / SEC_PER_MIN;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4a4e      	ldr	r2, [pc, #312]	; (8009eac <change_unix+0x2b8>)
 8009d72:	fb82 1203 	smull	r1, r2, r2, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	1152      	asrs	r2, r2, #5
 8009d7a:	17db      	asrs	r3, r3, #31
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	617b      	str	r3, [r7, #20]
    second = secs % SEC_PER_MIN;
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4b4a      	ldr	r3, [pc, #296]	; (8009eac <change_unix+0x2b8>)
 8009d84:	fb83 1302 	smull	r1, r3, r3, r2
 8009d88:	4413      	add	r3, r2
 8009d8a:	1159      	asrs	r1, r3, #5
 8009d8c:	17d3      	asrs	r3, r2, #31
 8009d8e:	1ac9      	subs	r1, r1, r3
 8009d90:	460b      	mov	r3, r1
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	1a5b      	subs	r3, r3, r1
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	613b      	str	r3, [r7, #16]

    if (monthTmp == 1 || monthTmp == 2)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d002      	beq.n	8009da8 <change_unix+0x1b4>
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d105      	bne.n	8009db4 <change_unix+0x1c0>
    {
        monthTmp += 12;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	330c      	adds	r3, #12
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
        yearTmp--;
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	3b01      	subs	r3, #1
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    day =  (date + 2 * monthTmp + 3 * (monthTmp + 1) / 5 + yearTmp + yearTmp / 4 - yearTmp / 100 + yearTmp / 400) % 7 + 1;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	005a      	lsls	r2, r3, #1
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	18d1      	adds	r1, r2, r3
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	4a3a      	ldr	r2, [pc, #232]	; (8009eb0 <change_unix+0x2bc>)
 8009dc8:	fb82 0203 	smull	r0, r2, r2, r3
 8009dcc:	1052      	asrs	r2, r2, #1
 8009dce:	17db      	asrs	r3, r3, #31
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	18ca      	adds	r2, r1, r3
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	441a      	add	r2, r3
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da00      	bge.n	8009de0 <change_unix+0x1ec>
 8009dde:	3303      	adds	r3, #3
 8009de0:	109b      	asrs	r3, r3, #2
 8009de2:	441a      	add	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	4933      	ldr	r1, [pc, #204]	; (8009eb4 <change_unix+0x2c0>)
 8009de8:	fb81 0103 	smull	r0, r1, r1, r3
 8009dec:	1149      	asrs	r1, r1, #5
 8009dee:	17db      	asrs	r3, r3, #31
 8009df0:	1a5b      	subs	r3, r3, r1
 8009df2:	441a      	add	r2, r3
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	492f      	ldr	r1, [pc, #188]	; (8009eb4 <change_unix+0x2c0>)
 8009df8:	fb81 0103 	smull	r0, r1, r1, r3
 8009dfc:	11c9      	asrs	r1, r1, #7
 8009dfe:	17db      	asrs	r3, r3, #31
 8009e00:	1acb      	subs	r3, r1, r3
 8009e02:	441a      	add	r2, r3
 8009e04:	4b2c      	ldr	r3, [pc, #176]	; (8009eb8 <change_unix+0x2c4>)
 8009e06:	fb83 1302 	smull	r1, r3, r3, r2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	1099      	asrs	r1, r3, #2
 8009e0e:	17d3      	asrs	r3, r2, #31
 8009e10:	1ac9      	subs	r1, r1, r3
 8009e12:	460b      	mov	r3, r1
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	1a5b      	subs	r3, r3, r1
 8009e18:	1ad1      	subs	r1, r2, r3
 8009e1a:	1c4b      	adds	r3, r1, #1
 8009e1c:	61bb      	str	r3, [r7, #24]

    gps_time->chirp_year = (uint16_t)year;
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	801a      	strh	r2, [r3, #0]
    gps_time->chirp_month = (uint8_t)month;
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	709a      	strb	r2, [r3, #2]
    gps_time->chirp_date = (uint8_t)date;
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	70da      	strb	r2, [r3, #3]
    gps_time->chirp_day = (uint8_t)day;
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	711a      	strb	r2, [r3, #4]
    gps_time->chirp_hour = (uint8_t)hour;
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	715a      	strb	r2, [r3, #5]
    gps_time->chirp_min = (uint8_t)minute;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	719a      	strb	r2, [r3, #6]
    gps_time->chirp_sec = (uint8_t)second;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	71da      	strb	r2, [r3, #7]
    PRINTF("%d-%d-%d %d:%d:%d week: %d\n", gps_time->chirp_year, gps_time->chirp_month, gps_time->chirp_date, gps_time->chirp_hour, gps_time->chirp_min, gps_time->chirp_sec, gps_time->chirp_day);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	461c      	mov	r4, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	789b      	ldrb	r3, [r3, #2]
 8009e60:	461d      	mov	r5, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	78db      	ldrb	r3, [r3, #3]
 8009e66:	461e      	mov	r6, r3
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	795b      	ldrb	r3, [r3, #5]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	799b      	ldrb	r3, [r3, #6]
 8009e72:	4619      	mov	r1, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	79db      	ldrb	r3, [r3, #7]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	791b      	ldrb	r3, [r3, #4]
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	9002      	str	r0, [sp, #8]
 8009e82:	9101      	str	r1, [sp, #4]
 8009e84:	9200      	str	r2, [sp, #0]
 8009e86:	4633      	mov	r3, r6
 8009e88:	462a      	mov	r2, r5
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	480b      	ldr	r0, [pc, #44]	; (8009ebc <change_unix+0x2c8>)
 8009e8e:	f018 f989 	bl	80221a4 <iprintf>
}
 8009e92:	bf00      	nop
 8009e94:	373c      	adds	r7, #60	; 0x3c
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	c22e4507 	.word	0xc22e4507
 8009ea0:	00015180 	.word	0x00015180
 8009ea4:	91a2b3c5 	.word	0x91a2b3c5
 8009ea8:	2aaaaaab 	.word	0x2aaaaaab
 8009eac:	88888889 	.word	0x88888889
 8009eb0:	66666667 	.word	0x66666667
 8009eb4:	51eb851f 	.word	0x51eb851f
 8009eb8:	92492493 	.word	0x92492493
 8009ebc:	080252b4 	.word	0x080252b4

08009ec0 <gps_pps_IRQ>:

void gps_pps_IRQ()
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 8009ec4:	f004 f940 	bl	800e148 <gpi_watchdog_periodic>
    pps_count++;
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <gps_pps_IRQ+0x24>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <gps_pps_IRQ+0x24>)
 8009ed0:	6013      	str	r3, [r2, #0]
    PRINTF("pps:%lu\n", pps_count);
 8009ed2:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <gps_pps_IRQ+0x24>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <gps_pps_IRQ+0x28>)
 8009eda:	f018 f963 	bl	80221a4 <iprintf>
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	2000034c 	.word	0x2000034c
 8009ee8:	080252d0 	.word	0x080252d0

08009eec <GPS_Init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void GPS_Init()
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // config gps
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
    HW_GPIO_Init(GPIOA, GPIO_PIN_12|GPIO_PIN_11, &GPIO_InitStruct );
 8009efe:	1d3b      	adds	r3, r7, #4
 8009f00:	461a      	mov	r2, r3
 8009f02:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f0a:	f003 fbbb 	bl	800d684 <HW_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_RESET);
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f18:	f7f9 fad4 	bl	80034c4 <HAL_GPIO_WritePin>

    // config gps
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f24:	2300      	movs	r3, #0
 8009f26:	613b      	str	r3, [r7, #16]
    HW_GPIO_Init(GPIOB, GPIO_PIN_12, &GPIO_InitStruct );
 8009f28:	1d3b      	adds	r3, r7, #4
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f30:	4818      	ldr	r0, [pc, #96]	; (8009f94 <GPS_Init+0xa8>)
 8009f32:	f003 fba7 	bl	800d684 <HW_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009f36:	2200      	movs	r2, #0
 8009f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f3c:	4815      	ldr	r0, [pc, #84]	; (8009f94 <GPS_Init+0xa8>)
 8009f3e:	f7f9 fac1 	bl	80034c4 <HAL_GPIO_WritePin>

    /*Configure trigger */
    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_RESET);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2104      	movs	r1, #4
 8009f46:	4814      	ldr	r0, [pc, #80]	; (8009f98 <GPS_Init+0xac>)
 8009f48:	f7f9 fabc 	bl	80034c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f54:	2303      	movs	r3, #3
 8009f56:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, &GPIO_InitStruct);
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2104      	movs	r1, #4
 8009f5e:	480e      	ldr	r0, [pc, #56]	; (8009f98 <GPS_Init+0xac>)
 8009f60:	f003 fb90 	bl	800d684 <HW_GPIO_Init>

    /*Configure pps */
    GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8009f64:	2301      	movs	r3, #1
 8009f66:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009f68:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <GPS_Init+0xb0>)
 8009f6a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPS_PPS_Port, &GPIO_InitStruct);
 8009f70:	1d3b      	adds	r3, r7, #4
 8009f72:	4619      	mov	r1, r3
 8009f74:	4808      	ldr	r0, [pc, #32]	; (8009f98 <GPS_Init+0xac>)
 8009f76:	f7f9 f801 	bl	8002f7c <HAL_GPIO_Init>

    HW_GPIO_SetIrq(GPS_PPS_Port, GPS_PPS_Pin, 0, gps_pps_IRQ);
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <GPS_Init+0xb4>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4805      	ldr	r0, [pc, #20]	; (8009f98 <GPS_Init+0xac>)
 8009f82:	f003 fbeb 	bl	800d75c <HW_GPIO_SetIrq>
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 8009f86:	2006      	movs	r0, #6
 8009f88:	f7f7 feb9 	bl	8001cfe <HAL_NVIC_DisableIRQ>
}
 8009f8c:	bf00      	nop
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	48000400 	.word	0x48000400
 8009f98:	48000800 	.word	0x48000800
 8009f9c:	10210000 	.word	0x10210000
 8009fa0:	08009ec1 	.word	0x08009ec1

08009fa4 <GPS_On>:

void GPS_On()
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_SET);
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fb2:	f7f9 fa87 	bl	80034c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fbc:	4802      	ldr	r0, [pc, #8]	; (8009fc8 <GPS_On+0x24>)
 8009fbe:	f7f9 fa81 	bl	80034c4 <HAL_GPIO_WritePin>
}
 8009fc2:	bf00      	nop
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	48000400 	.word	0x48000400

08009fcc <GPS_Off>:

void GPS_Off()
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_RESET);
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fda:	f7f9 fa73 	bl	80034c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fe4:	4802      	ldr	r0, [pc, #8]	; (8009ff0 <GPS_Off+0x24>)
 8009fe6:	f7f9 fa6d 	bl	80034c4 <HAL_GPIO_WritePin>
}
 8009fea:	bf00      	nop
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	48000400 	.word	0x48000400

08009ff4 <GPS_Uart_Irq>:

void GPS_Uart_Irq()
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
    // change_unix(strtol(aRxBuffer, NULL, 10) - 1, &chirp_time);
    gps_done = 2;
 8009ff8:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <GPS_Uart_Irq+0x34>)
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	701a      	strb	r2, [r3, #0]

    HAL_UART_Abort(&huart3);
 8009ffe:	480b      	ldr	r0, [pc, #44]	; (800a02c <GPS_Uart_Irq+0x38>)
 800a000:	f7fe fe5e 	bl	8008cc0 <HAL_UART_Abort>
    /* Disable usart, stop receiving data */
    __HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <GPS_Uart_Irq+0x38>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <GPS_Uart_Irq+0x38>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0220 	bic.w	r2, r2, #32
 800a012:	601a      	str	r2, [r3, #0]
    /* Disable Main Timer, since we have received GPS time */
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800a014:	4b06      	ldr	r3, [pc, #24]	; (800a030 <GPS_Uart_Irq+0x3c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68da      	ldr	r2, [r3, #12]
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <GPS_Uart_Irq+0x3c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0202 	bic.w	r2, r2, #2
 800a022:	60da      	str	r2, [r3, #12]
}
 800a024:	bf00      	nop
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000350 	.word	0x20000350
 800a02c:	20001058 	.word	0x20001058
 800a030:	200012c8 	.word	0x200012c8

0800a034 <GPS_Get_Time>:

Chirp_Time GPS_Get_Time()
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	chirp_isr.state = ISR_GPS;
 800a03c:	4b36      	ldr	r3, [pc, #216]	; (800a118 <GPS_Get_Time+0xe4>)
 800a03e:	2208      	movs	r2, #8
 800a040:	701a      	strb	r2, [r3, #0]
    gps_state = GPS_GET_TIME;
 800a042:	4b36      	ldr	r3, [pc, #216]	; (800a11c <GPS_Get_Time+0xe8>)
 800a044:	2200      	movs	r2, #0
 800a046:	701a      	strb	r2, [r3, #0]

    __HAL_UART_DISABLE(&huart3);
 800a048:	4b35      	ldr	r3, [pc, #212]	; (800a120 <GPS_Get_Time+0xec>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	4b34      	ldr	r3, [pc, #208]	; (800a120 <GPS_Get_Time+0xec>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0201 	bic.w	r2, r2, #1
 800a056:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE(&huart3);
 800a058:	4b31      	ldr	r3, [pc, #196]	; (800a120 <GPS_Get_Time+0xec>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b30      	ldr	r3, [pc, #192]	; (800a120 <GPS_Get_Time+0xec>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 0201 	orr.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]
    memset(aRxBuffer, 0, sizeof(aRxBuffer));
 800a068:	220a      	movs	r2, #10
 800a06a:	2100      	movs	r1, #0
 800a06c:	482d      	ldr	r0, [pc, #180]	; (800a124 <GPS_Get_Time+0xf0>)
 800a06e:	f017 fa8c 	bl	802158a <memset>
    memset(&chirp_time, 0, sizeof(chirp_time));
 800a072:	2208      	movs	r2, #8
 800a074:	2100      	movs	r1, #0
 800a076:	482c      	ldr	r0, [pc, #176]	; (800a128 <GPS_Get_Time+0xf4>)
 800a078:	f017 fa87 	bl	802158a <memset>

    HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, sizeof(aRxBuffer));
 800a07c:	220a      	movs	r2, #10
 800a07e:	4929      	ldr	r1, [pc, #164]	; (800a124 <GPS_Get_Time+0xf0>)
 800a080:	4827      	ldr	r0, [pc, #156]	; (800a120 <GPS_Get_Time+0xec>)
 800a082:	f7fe fd7d 	bl	8008b80 <HAL_UART_Receive_IT>

    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_SET);
 800a086:	2201      	movs	r2, #1
 800a088:	2104      	movs	r1, #4
 800a08a:	4828      	ldr	r0, [pc, #160]	; (800a12c <GPS_Get_Time+0xf8>)
 800a08c:	f7f9 fa1a 	bl	80034c4 <HAL_GPIO_WritePin>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a090:	4b27      	ldr	r3, [pc, #156]	; (800a130 <GPS_Get_Time+0xfc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0202 	mvn.w	r2, #2
 800a098:	611a      	str	r2, [r3, #16]
    MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(1000000);
 800a09a:	4b25      	ldr	r3, [pc, #148]	; (800a130 <GPS_Get_Time+0xfc>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	4a23      	ldr	r2, [pc, #140]	; (800a130 <GPS_Get_Time+0xfc>)
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a0a8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a0ac:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800a0ae:	4b20      	ldr	r3, [pc, #128]	; (800a130 <GPS_Get_Time+0xfc>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	4b1e      	ldr	r3, [pc, #120]	; (800a130 <GPS_Get_Time+0xfc>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f042 0202 	orr.w	r2, r2, #2
 800a0bc:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_RESET);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	481a      	ldr	r0, [pc, #104]	; (800a12c <GPS_Get_Time+0xf8>)
 800a0c4:	f7f9 f9fe 	bl	80034c4 <HAL_GPIO_WritePin>
    gps_done = 0;
 800a0c8:	4b1a      	ldr	r3, [pc, #104]	; (800a134 <GPS_Get_Time+0x100>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	701a      	strb	r2, [r3, #0]
    while (gps_done == 0)
 800a0ce:	bf00      	nop
 800a0d0:	4b18      	ldr	r3, [pc, #96]	; (800a134 <GPS_Get_Time+0x100>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0fa      	beq.n	800a0d0 <GPS_Get_Time+0x9c>
        ;
    if (gps_done == 2)
 800a0da:	4b16      	ldr	r3, [pc, #88]	; (800a134 <GPS_Get_Time+0x100>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d10e      	bne.n	800a102 <GPS_Get_Time+0xce>
    {
        PRINTF("chirp_time:%s\n", aRxBuffer);
 800a0e4:	490f      	ldr	r1, [pc, #60]	; (800a124 <GPS_Get_Time+0xf0>)
 800a0e6:	4814      	ldr	r0, [pc, #80]	; (800a138 <GPS_Get_Time+0x104>)
 800a0e8:	f018 f85c 	bl	80221a4 <iprintf>
        change_unix(strtol(aRxBuffer, NULL, 10) - 1, &chirp_time);
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	480c      	ldr	r0, [pc, #48]	; (800a124 <GPS_Get_Time+0xf0>)
 800a0f2:	f018 f9fd 	bl	80224f0 <strtol>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	490b      	ldr	r1, [pc, #44]	; (800a128 <GPS_Get_Time+0xf4>)
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fd79 	bl	8009bf4 <change_unix>
    }
    return chirp_time;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4908      	ldr	r1, [pc, #32]	; (800a128 <GPS_Get_Time+0xf4>)
 800a106:	461a      	mov	r2, r3
 800a108:	460b      	mov	r3, r1
 800a10a:	cb03      	ldmia	r3!, {r0, r1}
 800a10c:	6010      	str	r0, [r2, #0]
 800a10e:	6051      	str	r1, [r2, #4]
}
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000cfc 	.word	0x20000cfc
 800a11c:	20000cec 	.word	0x20000cec
 800a120:	20001058 	.word	0x20001058
 800a124:	20000cf0 	.word	0x20000cf0
 800a128:	20000354 	.word	0x20000354
 800a12c:	48000800 	.word	0x48000800
 800a130:	200012c8 	.word	0x200012c8
 800a134:	20000350 	.word	0x20000350
 800a138:	080252dc 	.word	0x080252dc

0800a13c <GPS_Conv>:

time_t GPS_Conv(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 800a13c:	b590      	push	{r4, r7, lr}
 800a13e:	b08f      	sub	sp, #60	; 0x3c
 800a140:	af00      	add	r7, sp, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	461a      	mov	r2, r3
 800a14a:	4623      	mov	r3, r4
 800a14c:	80fb      	strh	r3, [r7, #6]
 800a14e:	4603      	mov	r3, r0
 800a150:	717b      	strb	r3, [r7, #5]
 800a152:	460b      	mov	r3, r1
 800a154:	713b      	strb	r3, [r7, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	70fb      	strb	r3, [r7, #3]
    time_t retval = 0;
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	f04f 0400 	mov.w	r4, #0
 800a162:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    struct tm tm;
    tm.tm_year = year - 1900;
 800a166:	88fb      	ldrh	r3, [r7, #6]
 800a168:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800a16c:	623b      	str	r3, [r7, #32]
    tm.tm_mon = month - 1;
 800a16e:	797b      	ldrb	r3, [r7, #5]
 800a170:	3b01      	subs	r3, #1
 800a172:	61fb      	str	r3, [r7, #28]
    tm.tm_mday = date;
 800a174:	793b      	ldrb	r3, [r7, #4]
 800a176:	61bb      	str	r3, [r7, #24]
    tm.tm_hour = hour;
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	617b      	str	r3, [r7, #20]
    tm.tm_min = min;
 800a17c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a180:	613b      	str	r3, [r7, #16]
    tm.tm_sec = sec;
 800a182:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a186:	60fb      	str	r3, [r7, #12]
    tm.tm_isdst = -1;
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    retval = mktime(&tm);
 800a18e:	f107 030c 	add.w	r3, r7, #12
 800a192:	4618      	mov	r0, r3
 800a194:	f017 fadc 	bl	8021750 <mktime>
 800a198:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    return retval;
 800a19c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	373c      	adds	r7, #60	; 0x3c
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd90      	pop	{r4, r7, pc}
	...

0800a1ac <GPS_Diff>:

time_t GPS_Diff(Chirp_Time *gps_time, uint16_t start_year, uint8_t start_month, uint8_t start_date, uint8_t start_hour, uint8_t start_min, uint8_t start_sec)
{
 800a1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ae:	b08b      	sub	sp, #44	; 0x2c
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	807b      	strh	r3, [r7, #2]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	707b      	strb	r3, [r7, #1]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	703b      	strb	r3, [r7, #0]
    time_t now = 0;
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	f04f 0400 	mov.w	r4, #0
 800a1ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
    time_t start = 0;
 800a1d2:	f04f 0300 	mov.w	r3, #0
 800a1d6:	f04f 0400 	mov.w	r4, #0
 800a1da:	e9c7 3404 	strd	r3, r4, [r7, #16]
    time_t diff = 0;
 800a1de:	f04f 0300 	mov.w	r3, #0
 800a1e2:	f04f 0400 	mov.w	r4, #0
 800a1e6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    now = GPS_Conv(gps_time->chirp_year, gps_time->chirp_month, gps_time->chirp_date, gps_time->chirp_hour, gps_time->chirp_min, gps_time->chirp_sec);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8818      	ldrh	r0, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	7899      	ldrb	r1, [r3, #2]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	78dc      	ldrb	r4, [r3, #3]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	795d      	ldrb	r5, [r3, #5]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	799b      	ldrb	r3, [r3, #6]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	79d2      	ldrb	r2, [r2, #7]
 800a202:	9201      	str	r2, [sp, #4]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	462b      	mov	r3, r5
 800a208:	4622      	mov	r2, r4
 800a20a:	f7ff ff97 	bl	800a13c <GPS_Conv>
 800a20e:	e9c7 0106 	strd	r0, r1, [r7, #24]
    start = GPS_Conv(start_year, start_month, start_date, start_hour, start_min, start_sec);
 800a212:	f897 4038 	ldrb.w	r4, [r7, #56]	; 0x38
 800a216:	783a      	ldrb	r2, [r7, #0]
 800a218:	7879      	ldrb	r1, [r7, #1]
 800a21a:	8878      	ldrh	r0, [r7, #2]
 800a21c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4623      	mov	r3, r4
 800a22a:	f7ff ff87 	bl	800a13c <GPS_Conv>
 800a22e:	e9c7 0104 	strd	r0, r1, [r7, #16]
    diff = start - now;
 800a232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a236:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a23a:	1ac9      	subs	r1, r1, r3
 800a23c:	eb62 0204 	sbc.w	r2, r2, r4
 800a240:	460d      	mov	r5, r1
 800a242:	4616      	mov	r6, r2
 800a244:	e9c7 5602 	strd	r5, r6, [r7, #8]
    PRINTF("seconds difference = %lld\n", diff);
 800a248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a24c:	4804      	ldr	r0, [pc, #16]	; (800a260 <GPS_Diff+0xb4>)
 800a24e:	f017 ffa9 	bl	80221a4 <iprintf>
    return diff;
 800a252:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800a256:	4618      	mov	r0, r3
 800a258:	4621      	mov	r1, r4
 800a25a:	3724      	adds	r7, #36	; 0x24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a260:	080252ec 	.word	0x080252ec

0800a264 <GPS_Waiting_PPS>:
  * @brief  wait until PPS is normal, then we can read the gps time
  * @param  none
  * @retval none
  */
void GPS_Waiting_PPS(uint32_t PPS_wait)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
    __HAL_GPIO_EXTI_CLEAR_FLAG(GPS_PPS_Pin);
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <GPS_Waiting_PPS+0x40>)
 800a26e:	2201      	movs	r2, #1
 800a270:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ( EXTI0_IRQn );
 800a272:	2006      	movs	r0, #6
 800a274:	f7f7 fd35 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    {
        pps_count = 0;
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <GPS_Waiting_PPS+0x44>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
        while (pps_count <= PPS_wait)
 800a27e:	e001      	b.n	800a284 <GPS_Waiting_PPS+0x20>
        {
            gpi_watchdog_periodic();
 800a280:	f003 ff62 	bl	800e148 <gpi_watchdog_periodic>
        while (pps_count <= PPS_wait)
 800a284:	4b08      	ldr	r3, [pc, #32]	; (800a2a8 <GPS_Waiting_PPS+0x44>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d2f8      	bcs.n	800a280 <GPS_Waiting_PPS+0x1c>
        }
    }
    pps_count = 0;
 800a28e:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <GPS_Waiting_PPS+0x44>)
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 800a294:	2006      	movs	r0, #6
 800a296:	f7f7 fd32 	bl	8001cfe <HAL_NVIC_DisableIRQ>
}
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	2000034c 	.word	0x2000034c

0800a2ac <GPS_Wakeup>:
  * @brief  obtain current gps time to calculate the length of main timer interrupt compare time
  * @param  interval_sec: interval time of interrupt
  * @retval none
  */
void GPS_Wakeup(uint32_t interval_sec)
{
 800a2ac:	b5b0      	push	{r4, r5, r7, lr}
 800a2ae:	b08c      	sub	sp, #48	; 0x30
 800a2b0:	af04      	add	r7, sp, #16
 800a2b2:	60f8      	str	r0, [r7, #12]
    GPS_Get_Time();
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff febc 	bl	800a034 <GPS_Get_Time>
    time_t diff = GPS_Diff(&chirp_time, 1970, 1, 1, 0, 0, 0);
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9302      	str	r3, [sp, #8]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a2d0:	4829      	ldr	r0, [pc, #164]	; (800a378 <GPS_Wakeup+0xcc>)
 800a2d2:	f7ff ff6b 	bl	800a1ac <GPS_Diff>
 800a2d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
    time_t sleep_sec = interval_sec - (time_t)(0 - diff) % interval_sec;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	461c      	mov	r4, r3
 800a2de:	f04f 0500 	mov.w	r5, #0
 800a2e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2e6:	4250      	negs	r0, r2
 800a2e8:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	f7f6 fc82 	bl	8000bfc <__aeabi_ldivmod>
 800a2f8:	1aa4      	subs	r4, r4, r2
 800a2fa:	eb65 0503 	sbc.w	r5, r5, r3
 800a2fe:	4623      	mov	r3, r4
 800a300:	462c      	mov	r4, r5
 800a302:	e9c7 3404 	strd	r3, r4, [r7, #16]
    PRINTF("sleep_sec:%lld, version: %x-%x\n", sleep_sec, VERSION_MAJOR, VERSION_NODE);
 800a306:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <GPS_Wakeup+0xd0>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <GPS_Wakeup+0xd4>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	9200      	str	r2, [sp, #0]
 800a314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a318:	481a      	ldr	r0, [pc, #104]	; (800a384 <GPS_Wakeup+0xd8>)
 800a31a:	f017 ff43 	bl	80221a4 <iprintf>
    gps_state = GPS_WAKEUP;
 800a31e:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <GPS_Wakeup+0xdc>)
 800a320:	2201      	movs	r2, #1
 800a322:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a324:	4b19      	ldr	r3, [pc, #100]	; (800a38c <GPS_Wakeup+0xe0>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0202 	mvn.w	r2, #2
 800a32c:	611a      	str	r2, [r3, #16]

    HAL_NVIC_EnableIRQ( EXTI0_IRQn );
 800a32e:	2006      	movs	r0, #6
 800a330:	f7f7 fcd7 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    // sleep_sec += 1;
    if (sleep_sec > 0)
 800a334:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	f174 0300 	sbcs.w	r3, r4, #0
 800a33e:	db11      	blt.n	800a364 <GPS_Wakeup+0xb8>
    {
        pps_count = 0;
 800a340:	4b13      	ldr	r3, [pc, #76]	; (800a390 <GPS_Wakeup+0xe4>)
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
        while (pps_count <= sleep_sec)
 800a346:	e003      	b.n	800a350 <GPS_Wakeup+0xa4>
  __ASM volatile ("cpsid i" : : : "memory");
 800a348:	b672      	cpsid	i
        {
            // enter low-power mode
            gpi_int_disable();

            gpi_sleep();
 800a34a:	f003 fedf 	bl	800e10c <gpi_sleep>
  __ASM volatile ("cpsie i" : : : "memory");
 800a34e:	b662      	cpsie	i
        while (pps_count <= sleep_sec)
 800a350:	4b0f      	ldr	r3, [pc, #60]	; (800a390 <GPS_Wakeup+0xe4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f04f 0400 	mov.w	r4, #0
 800a358:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a35c:	4299      	cmp	r1, r3
 800a35e:	eb72 0304 	sbcs.w	r3, r2, r4
 800a362:	daf1      	bge.n	800a348 <GPS_Wakeup+0x9c>

            /* wake by the timer interrupt */
            gpi_int_enable();
        }
    }
    pps_count = 0;
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <GPS_Wakeup+0xe4>)
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 800a36a:	2006      	movs	r0, #6
 800a36c:	f7f7 fcc7 	bl	8001cfe <HAL_NVIC_DisableIRQ>
}
 800a370:	bf00      	nop
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bdb0      	pop	{r4, r5, r7, pc}
 800a378:	20000354 	.word	0x20000354
 800a37c:	08026888 	.word	0x08026888
 800a380:	08026889 	.word	0x08026889
 800a384:	08025308 	.word	0x08025308
 800a388:	20000cec 	.word	0x20000cec
 800a38c:	200012c8 	.word	0x200012c8
 800a390:	2000034c 	.word	0x2000034c

0800a394 <GPS_Sleep>:
  * @brief  call this to go into sleep mode, and wake up at whole time point according to GPS time. Should not exceed 263 s, which is the longest duration of main timer
  * @param  interval_sec: interval time of interrupt
  * @retval none
  */
void GPS_Sleep(uint32_t interval_sec)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
    GPS_Wakeup(interval_sec);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff ff85 	bl	800a2ac <GPS_Wakeup>
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <gps_main_timer_isr>:

void gps_main_timer_isr(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800a3b0:	f003 feca 	bl	800e148 <gpi_watchdog_periodic>
    #if GPS_DATA
    if (gps_state == GPS_GET_TIME)
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <gps_main_timer_isr+0x3c>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d112      	bne.n	800a3e2 <gps_main_timer_isr+0x36>
    {
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a3bc:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <gps_main_timer_isr+0x40>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0202 	mvn.w	r2, #2
 800a3c4:	611a      	str	r2, [r3, #16]

        __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800a3c6:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <gps_main_timer_isr+0x40>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <gps_main_timer_isr+0x40>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0202 	bic.w	r2, r2, #2
 800a3d4:	60da      	str	r2, [r3, #12]
        gps_done = 1;
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <gps_main_timer_isr+0x44>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	701a      	strb	r2, [r3, #0]
        PRINTF("gps timeout!\n");
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <gps_main_timer_isr+0x48>)
 800a3de:	f017 ff69 	bl	80222b4 <puts>
    }
    #endif
}
 800a3e2:	bf00      	nop
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000cec 	.word	0x20000cec
 800a3ec:	200012c8 	.word	0x200012c8
 800a3f0:	20000350 	.word	0x20000350
 800a3f4:	08025328 	.word	0x08025328

0800a3f8 <TIM2_IRQHandler>:
//***** Global Functions ***************************************************************************

//Timer2 IRQ dispatcher
void __attribute__((naked)) MAIN_TIMER_ISR_NAME()
{
	__asm__ volatile
 800a3f8:	4804      	ldr	r0, [pc, #16]	; (800a40c <TIM2_IRQHandler+0x14>)
 800a3fa:	7800      	ldrb	r0, [r0, #0]
 800a3fc:	4487      	add	pc, r0
 800a3fe:	bf00      	nop
 800a400:	f005 bacc 	b.w	800f99c <mixer_main_timer_isr>
 800a404:	f001 bac4 	b.w	800b990 <topo_main_timer_isr>
 800a408:	f7ff bfd0 	b.w	800a3ac <gps_main_timer_isr>
 800a40c:	20000cfc 	.word	0x20000cfc
		"b.w	gps_main_timer_isr			\n"		// 8: gps_main_timer_isr (don't return to here)
		"1:									\n"
		".word	%c0							\n"
		: : "i"(&chirp_isr.state)
	);
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop

0800a414 <SX1276OnDio0Irq>:

//SX1276DIO0 IRQ dispatcher
void __attribute__((naked)) SX1276OnDio0Irq()
{
	__asm__ volatile
 800a414:	4803      	ldr	r0, [pc, #12]	; (800a424 <SX1276OnDio0Irq+0x10>)
 800a416:	7800      	ldrb	r0, [r0, #0]
 800a418:	4487      	add	pc, r0
 800a41a:	bf00      	nop
 800a41c:	f004 bbd2 	b.w	800ebc4 <mixer_dio0_isr>
 800a420:	f001 b928 	b.w	800b674 <topo_dio0_isr>
 800a424:	20000cfc 	.word	0x20000cfc
		"b.w	topo_dio0_isr				\n"		// 4: topo_dio0_isr (don't return to here)
		"1:									\n"
		".word	%c0							\n"
		: : "i"(&chirp_isr.state)
	);
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop

0800a42c <SX1276OnDio3Irq>:
// }

//SX1276DIO3 IRQ dispatcher
void __attribute__((naked)) SX1276OnDio3Irq()
{
	__asm__ volatile
 800a42c:	f005 b958 	b.w	800f6e0 <mixer_dio3_isr>
	(
		"b.w	mixer_dio3_isr		 		\n"		// 0: mixer_dio3_isr (don't return to here)
	);
}
 800a430:	bf00      	nop
	...

0800a434 <NVIC_SystemReset>:
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a438:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a43c:	4b05      	ldr	r3, [pc, #20]	; (800a454 <NVIC_SystemReset+0x20>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a444:	4903      	ldr	r1, [pc, #12]	; (800a454 <NVIC_SystemReset+0x20>)
 800a446:	4b04      	ldr	r3, [pc, #16]	; (800a458 <NVIC_SystemReset+0x24>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	60cb      	str	r3, [r1, #12]
 800a44c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a450:	bf00      	nop
    __NOP();
 800a452:	e7fd      	b.n	800a450 <NVIC_SystemReset+0x1c>
 800a454:	e000ed00 	.word	0xe000ed00
 800a458:	05fa0004 	.word	0x05fa0004

0800a45c <lbt_pesudo_channel>:


//**************************************************************************************************
//***** Global Functions ***************************************************************************
uint8_t lbt_pesudo_channel(uint8_t channel_total, uint8_t last_channel, uint16_t pesudo_value, uint32_t lbt_available)
{
 800a45c:	b5b0      	push	{r4, r5, r7, lr}
 800a45e:	b08e      	sub	sp, #56	; 0x38
 800a460:	af00      	add	r7, sp, #0
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	4603      	mov	r3, r0
 800a466:	71fb      	strb	r3, [r7, #7]
 800a468:	460b      	mov	r3, r1
 800a46a:	71bb      	strb	r3, [r7, #6]
 800a46c:	4613      	mov	r3, r2
 800a46e:	80bb      	strh	r3, [r7, #4]
 800a470:	466b      	mov	r3, sp
 800a472:	461d      	mov	r5, r3
    /* make sure the total number of channel is less than 32 */
    assert_reset((channel_total <= sizeof(uint32_t) * 8));
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	2b20      	cmp	r3, #32
 800a478:	d905      	bls.n	800a486 <lbt_pesudo_channel+0x2a>
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d902      	bls.n	800a486 <lbt_pesudo_channel+0x2a>
  __ASM volatile ("cpsid f" : : : "memory");
 800a480:	b671      	cpsid	f
 800a482:	f7ff ffd7 	bl	800a434 <NVIC_SystemReset>

    /* init seed */
    srand(pesudo_value);
 800a486:	88bb      	ldrh	r3, [r7, #4]
 800a488:	4618      	mov	r0, r3
 800a48a:	f017 ff1b 	bl	80222c4 <srand>
    rand();
 800a48e:	f017 ff3d 	bl	802230c <rand>

    uint32_t help_bitmask = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint32_t lbt = lbt_available & (~(1 << last_channel));
 800a496:	79bb      	ldrb	r3, [r7, #6]
 800a498:	2201      	movs	r2, #1
 800a49a:	fa02 f303 	lsl.w	r3, r2, r3
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	61bb      	str	r3, [r7, #24]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
}

static ALWAYS_INLINE uint_fast8_t gpi_popcnt_32(uint32_t x)
{
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	82fb      	strh	r3, [r7, #22]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4b2:	8afb      	ldrh	r3, [r7, #22]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	757b      	strb	r3, [r7, #21]
	return gpi_popcnt_lut[x];
 800a4b8:	7d7b      	ldrb	r3, [r7, #21]
 800a4ba:	4a4b      	ldr	r2, [pc, #300]	; (800a5e8 <lbt_pesudo_channel+0x18c>)
 800a4bc:	5cd3      	ldrb	r3, [r2, r3]
 800a4be:	4619      	mov	r1, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4c0:	8afb      	ldrh	r3, [r7, #22]
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	753b      	strb	r3, [r7, #20]
	return gpi_popcnt_lut[x];
 800a4ca:	7d3b      	ldrb	r3, [r7, #20]
 800a4cc:	4a46      	ldr	r2, [pc, #280]	; (800a5e8 <lbt_pesudo_channel+0x18c>)
 800a4ce:	5cd3      	ldrb	r3, [r2, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4d0:	18ca      	adds	r2, r1, r3
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	0c1b      	lsrs	r3, r3, #16
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	827b      	strh	r3, [r7, #18]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4da:	8a7b      	ldrh	r3, [r7, #18]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	747b      	strb	r3, [r7, #17]
	return gpi_popcnt_lut[x];
 800a4e0:	7c7b      	ldrb	r3, [r7, #17]
 800a4e2:	4941      	ldr	r1, [pc, #260]	; (800a5e8 <lbt_pesudo_channel+0x18c>)
 800a4e4:	5ccb      	ldrb	r3, [r1, r3]
 800a4e6:	4618      	mov	r0, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4e8:	8a7b      	ldrh	r3, [r7, #18]
 800a4ea:	0a1b      	lsrs	r3, r3, #8
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	743b      	strb	r3, [r7, #16]
	return gpi_popcnt_lut[x];
 800a4f2:	7c3b      	ldrb	r3, [r7, #16]
 800a4f4:	493c      	ldr	r1, [pc, #240]	; (800a5e8 <lbt_pesudo_channel+0x18c>)
 800a4f6:	5ccb      	ldrb	r3, [r1, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4f8:	4403      	add	r3, r0
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a4fa:	4413      	add	r3, r2

    uint8_t lbt_len = gpi_popcnt_32(lbt);
 800a4fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    assert_reset((lbt_len <= channel_total) && (lbt_len > 0));
 800a500:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	429a      	cmp	r2, r3
 800a508:	d803      	bhi.n	800a512 <lbt_pesudo_channel+0xb6>
 800a50a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10b      	bne.n	800a52a <lbt_pesudo_channel+0xce>
 800a512:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d806      	bhi.n	800a52a <lbt_pesudo_channel+0xce>
 800a51c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <lbt_pesudo_channel+0xce>
 800a524:	b671      	cpsid	f
 800a526:	f7ff ff85 	bl	800a434 <NVIC_SystemReset>

    uint8_t lookupTable[lbt_len];
 800a52a:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800a52e:	4603      	mov	r3, r0
 800a530:	3b01      	subs	r3, #1
 800a532:	627b      	str	r3, [r7, #36]	; 0x24
 800a534:	b2c1      	uxtb	r1, r0
 800a536:	f04f 0200 	mov.w	r2, #0
 800a53a:	f04f 0300 	mov.w	r3, #0
 800a53e:	f04f 0400 	mov.w	r4, #0
 800a542:	00d4      	lsls	r4, r2, #3
 800a544:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a548:	00cb      	lsls	r3, r1, #3
 800a54a:	b2c1      	uxtb	r1, r0
 800a54c:	f04f 0200 	mov.w	r2, #0
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	f04f 0400 	mov.w	r4, #0
 800a558:	00d4      	lsls	r4, r2, #3
 800a55a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a55e:	00cb      	lsls	r3, r1, #3
 800a560:	4603      	mov	r3, r0
 800a562:	3307      	adds	r3, #7
 800a564:	08db      	lsrs	r3, r3, #3
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	ebad 0d03 	sub.w	sp, sp, r3
 800a56c:	466b      	mov	r3, sp
 800a56e:	3300      	adds	r3, #0
 800a570:	623b      	str	r3, [r7, #32]
    uint8_t i = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while (lbt)
 800a578:	e020      	b.n	800a5bc <lbt_pesudo_channel+0x160>
    {
        // isolate first set bit
        #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
            help_bitmask = lbt & -lbt;			// isolate LSB
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	425b      	negs	r3, r3
 800a57e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a580:	4013      	ands	r3, r2
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	60bb      	str	r3, [r7, #8]
		asm
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bf0e      	itee	eq
 800a592:	3b01      	subeq	r3, #1
 800a594:	fa93 f3a3 	rbitne	r3, r3
 800a598:	fab3 f383 	clzne	r3, r3
 800a59c:	461c      	mov	r4, r3
	return y;
 800a59e:	4621      	mov	r1, r4
        #else
            #error TODO						// isolate MSB
        #endif

        lookupTable[i++] = gpi_get_lsb_32(lbt);
 800a5a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	b2c9      	uxtb	r1, r1
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	5499      	strb	r1, [r3, r2]
        lbt &= ~help_bitmask;
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	43db      	mvns	r3, r3
 800a5b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	633b      	str	r3, [r7, #48]	; 0x30
    while (lbt)
 800a5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1db      	bne.n	800a57a <lbt_pesudo_channel+0x11e>
    }
    uint8_t value = lookupTable[rand() % lbt_len];
 800a5c2:	f017 fea3 	bl	802230c <rand>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5cc:	fb92 f1f3 	sdiv	r1, r2, r3
 800a5d0:	fb03 f301 	mul.w	r3, r3, r1
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	6a3a      	ldr	r2, [r7, #32]
 800a5d8:	5cd3      	ldrb	r3, [r2, r3]
 800a5da:	77fb      	strb	r3, [r7, #31]

    return value;
 800a5dc:	7ffb      	ldrb	r3, [r7, #31]
 800a5de:	46ad      	mov	sp, r5
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3738      	adds	r7, #56	; 0x38
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5e8:	080268e0 	.word	0x080268e0
 800a5ec:	00000000 	.word	0x00000000

0800a5f0 <lbt_update_channel>:

uint32_t lbt_update_channel(uint32_t tx_us, uint8_t tx_channel)
{
 800a5f0:	b5b0      	push	{r4, r5, r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
    chirp_config.lbt_channel_time_us[tx_channel] += tx_us;
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	4a28      	ldr	r2, [pc, #160]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a600:	331a      	adds	r3, #26
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	6859      	ldr	r1, [r3, #4]
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	440a      	add	r2, r1
 800a60e:	4924      	ldr	r1, [pc, #144]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a610:	331a      	adds	r3, #26
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	440b      	add	r3, r1
 800a616:	605a      	str	r2, [r3, #4]
    chirp_config.lbt_channel_time_stats_us[tx_channel] += tx_us;
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	4a21      	ldr	r2, [pc, #132]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a61c:	3324      	adds	r3, #36	; 0x24
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	6859      	ldr	r1, [r3, #4]
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	440a      	add	r2, r1
 800a62a:	491d      	ldr	r1, [pc, #116]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a62c:	3324      	adds	r3, #36	; 0x24
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	440b      	add	r3, r1
 800a632:	605a      	str	r2, [r3, #4]
    if(tx_us)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d027      	beq.n	800a68a <lbt_update_channel+0x9a>

    /* not enough for the next tx */
    // TODO:
    if ((chirp_config.lbt_channel_time_us[tx_channel]) > LBT_TX_TIME_S * 1e6 - tx_us)
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a63e:	331a      	adds	r3, #26
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4618      	mov	r0, r3
 800a648:	f7f5 ff66 	bl	8000518 <__aeabi_ui2d>
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7f5 ff61 	bl	8000518 <__aeabi_ui2d>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	a10f      	add	r1, pc, #60	; (adr r1, 800a698 <lbt_update_channel+0xa8>)
 800a65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a660:	f7f5 fe1c 	bl	800029c <__aeabi_dsub>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4620      	mov	r0, r4
 800a66a:	4629      	mov	r1, r5
 800a66c:	f7f6 fa5e 	bl	8000b2c <__aeabi_dcmpgt>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d009      	beq.n	800a68a <lbt_update_channel+0x9a>
        chirp_config.lbt_channel_available &= ~(1 << tx_channel);
 800a676:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	2101      	movs	r1, #1
 800a67e:	fa01 f202 	lsl.w	r2, r1, r2
 800a682:	43d2      	mvns	r2, r2
 800a684:	4013      	ands	r3, r2
 800a686:	4a06      	ldr	r2, [pc, #24]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a688:	6613      	str	r3, [r2, #96]	; 0x60
    return chirp_config.lbt_channel_available;
 800a68a:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <lbt_update_channel+0xb0>)
 800a68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bdb0      	pop	{r4, r5, r7, pc}
 800a696:	bf00      	nop
 800a698:	80000000 	.word	0x80000000
 800a69c:	41ead274 	.word	0x41ead274
 800a6a0:	20001430 	.word	0x20001430

0800a6a4 <lbt_check_time>:

void lbt_check_time()
{
 800a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a6:	b08d      	sub	sp, #52	; 0x34
 800a6a8:	af04      	add	r7, sp, #16
	// Chirp_Time gps_time = GPS_Get_Time();
    // time_t diff = GPS_Diff(&gps_time, chirp_config.lbt_init_time.chirp_year, chirp_config.lbt_init_time.chirp_month, chirp_config.lbt_init_time.chirp_date, chirp_config.lbt_init_time.chirp_hour, chirp_config.lbt_init_time.chirp_min, chirp_config.lbt_init_time.chirp_sec);
	Chirp_Time gps_time = RTC_GetTime();
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f8d5 	bl	800a85c <RTC_GetTime>
    time_t diff = GPS_Diff(&gps_time, chirp_config.lbt_init_time.chirp_year, chirp_config.lbt_init_time.chirp_month, chirp_config.lbt_init_time.chirp_date, chirp_config.lbt_init_time.chirp_hour, chirp_config.lbt_init_time.chirp_min, chirp_config.lbt_init_time.chirp_sec);
 800a6b2:	4b2d      	ldr	r3, [pc, #180]	; (800a768 <lbt_check_time+0xc4>)
 800a6b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6b8:	b29c      	uxth	r4, r3
 800a6ba:	4b2b      	ldr	r3, [pc, #172]	; (800a768 <lbt_check_time+0xc4>)
 800a6bc:	f893 5066 	ldrb.w	r5, [r3, #102]	; 0x66
 800a6c0:	4b29      	ldr	r3, [pc, #164]	; (800a768 <lbt_check_time+0xc4>)
 800a6c2:	f893 6067 	ldrb.w	r6, [r3, #103]	; 0x67
 800a6c6:	4b28      	ldr	r3, [pc, #160]	; (800a768 <lbt_check_time+0xc4>)
 800a6c8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a6cc:	4a26      	ldr	r2, [pc, #152]	; (800a768 <lbt_check_time+0xc4>)
 800a6ce:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800a6d2:	4925      	ldr	r1, [pc, #148]	; (800a768 <lbt_check_time+0xc4>)
 800a6d4:	f891 106b 	ldrb.w	r1, [r1, #107]	; 0x6b
 800a6d8:	4638      	mov	r0, r7
 800a6da:	9102      	str	r1, [sp, #8]
 800a6dc:	9201      	str	r2, [sp, #4]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	4633      	mov	r3, r6
 800a6e2:	462a      	mov	r2, r5
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f7ff fd61 	bl	800a1ac <GPS_Diff>
 800a6ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
    if (ABS(diff) >= 3600)
 800a6ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a6f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800a6f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f174 0200 	sbcs.w	r2, r4, #0
 800a700:	da02      	bge.n	800a708 <lbt_check_time+0x64>
 800a702:	425b      	negs	r3, r3
 800a704:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800a708:	4619      	mov	r1, r3
 800a70a:	4622      	mov	r2, r4
 800a70c:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a710:	f04f 0400 	mov.w	r4, #0
 800a714:	428b      	cmp	r3, r1
 800a716:	eb74 0302 	sbcs.w	r3, r4, r2
 800a71a:	da21      	bge.n	800a760 <lbt_check_time+0xbc>
    {
        memcpy(&chirp_config.lbt_init_time, &gps_time, sizeof(Chirp_Time));
 800a71c:	463b      	mov	r3, r7
 800a71e:	2208      	movs	r2, #8
 800a720:	4619      	mov	r1, r3
 800a722:	4812      	ldr	r0, [pc, #72]	; (800a76c <lbt_check_time+0xc8>)
 800a724:	f016 ff26 	bl	8021574 <memcpy>
        memset(&chirp_config.lbt_channel_time_us[0], 0, sizeof(chirp_config.lbt_channel_time_us));
 800a728:	2228      	movs	r2, #40	; 0x28
 800a72a:	2100      	movs	r1, #0
 800a72c:	4810      	ldr	r0, [pc, #64]	; (800a770 <lbt_check_time+0xcc>)
 800a72e:	f016 ff2c 	bl	802158a <memset>
        int32_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 800a732:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a736:	61fb      	str	r3, [r7, #28]
        uint32_t i;
        for (i = sizeof(uint32_t) * 8; i-- > chirp_config.lbt_channel_total;)
 800a738:	2320      	movs	r3, #32
 800a73a:	61bb      	str	r3, [r7, #24]
 800a73c:	e002      	b.n	800a744 <lbt_check_time+0xa0>
            mask >>= 1;
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	105b      	asrs	r3, r3, #1
 800a742:	61fb      	str	r3, [r7, #28]
        for (i = sizeof(uint32_t) * 8; i-- > chirp_config.lbt_channel_total;)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	1e5a      	subs	r2, r3, #1
 800a748:	61ba      	str	r2, [r7, #24]
 800a74a:	4a07      	ldr	r2, [pc, #28]	; (800a768 <lbt_check_time+0xc4>)
 800a74c:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 800a750:	4293      	cmp	r3, r2
 800a752:	d8f4      	bhi.n	800a73e <lbt_check_time+0x9a>
        chirp_config.lbt_channel_available = ~(mask << 1);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	43db      	mvns	r3, r3
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <lbt_check_time+0xc4>)
 800a75e:	661a      	str	r2, [r3, #96]	; 0x60
    }
}
 800a760:	bf00      	nop
 800a762:	3724      	adds	r7, #36	; 0x24
 800a764:	46bd      	mov	sp, r7
 800a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a768:	20001430 	.word	0x20001430
 800a76c:	20001494 	.word	0x20001494
 800a770:	2000149c 	.word	0x2000149c

0800a774 <RTC_Wakeup_Enable>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

void RTC_Wakeup_Enable()
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
    /* Clear the EXTI's line Flag for RTC WakeUpTimer */
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <RTC_Wakeup_Enable+0x30>)
 800a77a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a77e:	615a      	str	r2, [r3, #20]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <RTC_Wakeup_Enable+0x34>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	b2da      	uxtb	r2, r3
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <RTC_Wakeup_Enable+0x34>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a790:	60da      	str	r2, [r3, #12]

    /* Configure the Wakeup Timer counter */
    // 2048 = 32768 (LSE) / 16 (RTC_WAKEUPCLOCK_RTCCLK_DIV16)
    // set 1 second
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800a792:	2200      	movs	r2, #0
 800a794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a798:	4803      	ldr	r0, [pc, #12]	; (800a7a8 <RTC_Wakeup_Enable+0x34>)
 800a79a:	f7fc fc7f 	bl	800709c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40010400 	.word	0x40010400
 800a7a8:	20001240 	.word	0x20001240

0800a7ac <RTC_WKUP_IRQHandler>:

void RTC_TIMER_ISR_NAME(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <RTC_WKUP_IRQHandler+0x38>)
 800a7b2:	221f      	movs	r2, #31
 800a7b4:	619a      	str	r2, [r3, #24]

    /* Clear the EXTI's line Flag for RTC WakeUpTimer */
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <RTC_WKUP_IRQHandler+0x3c>)
 800a7b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7bc:	615a      	str	r2, [r3, #20]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <RTC_WKUP_IRQHandler+0x40>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <RTC_WKUP_IRQHandler+0x40>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a7ce:	60da      	str	r2, [r3, #12]

    gpi_watchdog_periodic();
 800a7d0:	f003 fcba 	bl	800e148 <gpi_watchdog_periodic>
    rtc_count++;
 800a7d4:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <RTC_WKUP_IRQHandler+0x44>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	4a05      	ldr	r2, [pc, #20]	; (800a7f0 <RTC_WKUP_IRQHandler+0x44>)
 800a7dc:	6013      	str	r3, [r2, #0]
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40007000 	.word	0x40007000
 800a7e8:	40010400 	.word	0x40010400
 800a7ec:	20001240 	.word	0x20001240
 800a7f0:	2000035c 	.word	0x2000035c

0800a7f4 <RTC_ModifyTime>:
  * @param  mintue: 00–59
  * @param  second: 00–59
  * @retval None
  */
void RTC_ModifyTime(uint8_t year, uint8_t month, uint8_t date, uint8_t day, uint8_t hour, uint8_t mintue, uint8_t second)
{
 800a7f4:	b590      	push	{r4, r7, lr}
 800a7f6:	b089      	sub	sp, #36	; 0x24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	4611      	mov	r1, r2
 800a800:	461a      	mov	r2, r3
 800a802:	4623      	mov	r3, r4
 800a804:	71fb      	strb	r3, [r7, #7]
 800a806:	4603      	mov	r3, r0
 800a808:	71bb      	strb	r3, [r7, #6]
 800a80a:	460b      	mov	r3, r1
 800a80c:	717b      	strb	r3, [r7, #5]
 800a80e:	4613      	mov	r3, r2
 800a810:	713b      	strb	r3, [r7, #4]
    RTC_TimeTypeDef nTime;
    RTC_DateTypeDef nDate;

    nTime.Hours = hour;
 800a812:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a816:	733b      	strb	r3, [r7, #12]
    nTime.Minutes = mintue;
 800a818:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a81c:	737b      	strb	r3, [r7, #13]
    nTime.Seconds = second;
 800a81e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a822:	73bb      	strb	r3, [r7, #14]
    nDate.WeekDay = day;
 800a824:	793b      	ldrb	r3, [r7, #4]
 800a826:	723b      	strb	r3, [r7, #8]
    nDate.Month = month;
 800a828:	79bb      	ldrb	r3, [r7, #6]
 800a82a:	727b      	strb	r3, [r7, #9]
    nDate.Date = date;
 800a82c:	797b      	ldrb	r3, [r7, #5]
 800a82e:	72bb      	strb	r3, [r7, #10]
    nDate.Year = year;
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	72fb      	strb	r3, [r7, #11]
    HAL_RTC_SetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 800a834:	f107 030c 	add.w	r3, r7, #12
 800a838:	2200      	movs	r2, #0
 800a83a:	4619      	mov	r1, r3
 800a83c:	4806      	ldr	r0, [pc, #24]	; (800a858 <RTC_ModifyTime+0x64>)
 800a83e:	f7fc f98f 	bl	8006b60 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	2200      	movs	r2, #0
 800a848:	4619      	mov	r1, r3
 800a84a:	4803      	ldr	r0, [pc, #12]	; (800a858 <RTC_ModifyTime+0x64>)
 800a84c:	f7fc fa81 	bl	8006d52 <HAL_RTC_SetDate>
}
 800a850:	bf00      	nop
 800a852:	3724      	adds	r7, #36	; 0x24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd90      	pop	{r4, r7, pc}
 800a858:	20001240 	.word	0x20001240

0800a85c <RTC_GetTime>:

Chirp_Time RTC_GetTime(void)
{
 800a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85e:	b08f      	sub	sp, #60	; 0x3c
 800a860:	af04      	add	r7, sp, #16
 800a862:	6078      	str	r0, [r7, #4]
    Chirp_Time RTC_Time;
    RTC_TimeTypeDef nTime;
    RTC_DateTypeDef nDate;
    HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	2200      	movs	r2, #0
 800a86a:	4619      	mov	r1, r3
 800a86c:	4823      	ldr	r0, [pc, #140]	; (800a8fc <RTC_GetTime+0xa0>)
 800a86e:	f7fc fa14 	bl	8006c9a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 800a872:	f107 0308 	add.w	r3, r7, #8
 800a876:	2200      	movs	r2, #0
 800a878:	4619      	mov	r1, r3
 800a87a:	4820      	ldr	r0, [pc, #128]	; (800a8fc <RTC_GetTime+0xa0>)
 800a87c:	f7fc faf0 	bl	8006e60 <HAL_RTC_GetDate>
    RTC_Time.chirp_year = 2000 + nDate.Year;
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	b29b      	uxth	r3, r3
 800a884:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a888:	b29b      	uxth	r3, r3
 800a88a:	843b      	strh	r3, [r7, #32]
    RTC_Time.chirp_month = nDate.Month;
 800a88c:	7a7b      	ldrb	r3, [r7, #9]
 800a88e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RTC_Time.chirp_date = nDate.Date;
 800a892:	7abb      	ldrb	r3, [r7, #10]
 800a894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    RTC_Time.chirp_day = nDate.WeekDay;
 800a898:	7a3b      	ldrb	r3, [r7, #8]
 800a89a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    RTC_Time.chirp_hour = nTime.Hours;
 800a89e:	7b3b      	ldrb	r3, [r7, #12]
 800a8a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    RTC_Time.chirp_min = nTime.Minutes;
 800a8a4:	7b7b      	ldrb	r3, [r7, #13]
 800a8a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    RTC_Time.chirp_sec = nTime.Seconds;
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PRINTF("RTC_GetTime: %d-%d-%d %d:%d:%d week: %d\n", RTC_Time.chirp_year, RTC_Time.chirp_month, RTC_Time.chirp_date, RTC_Time.chirp_hour, RTC_Time.chirp_min, RTC_Time.chirp_sec, RTC_Time.chirp_day);
 800a8b0:	8c3b      	ldrh	r3, [r7, #32]
 800a8b2:	461c      	mov	r4, r3
 800a8b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8b8:	461d      	mov	r5, r3
 800a8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8be:	461e      	mov	r6, r3
 800a8c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a8c8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800a8cc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800a8d0:	9003      	str	r0, [sp, #12]
 800a8d2:	9102      	str	r1, [sp, #8]
 800a8d4:	9201      	str	r2, [sp, #4]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	4633      	mov	r3, r6
 800a8da:	462a      	mov	r2, r5
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4808      	ldr	r0, [pc, #32]	; (800a900 <RTC_GetTime+0xa4>)
 800a8e0:	f017 fc60 	bl	80221a4 <iprintf>

    return RTC_Time;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f107 0320 	add.w	r3, r7, #32
 800a8ec:	cb03      	ldmia	r3!, {r0, r1}
 800a8ee:	6010      	str	r0, [r2, #0]
 800a8f0:	6051      	str	r1, [r2, #4]
}
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	372c      	adds	r7, #44	; 0x2c
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20001240 	.word	0x20001240
 800a900:	08025338 	.word	0x08025338

0800a904 <RTC_Waiting_Count>:
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_WAKEUPTIMER_DISABLE_IT(&hrtc, RTC_IT_WUT);
}

void RTC_Waiting_Count(uint32_t Count_wait)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
    PRINTF("RTC_Waiting_Count:%lu\n", Count_wait);
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4814      	ldr	r0, [pc, #80]	; (800a960 <RTC_Waiting_Count+0x5c>)
 800a910:	f017 fc48 	bl	80221a4 <iprintf>

    if (Count_wait > 1)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d91d      	bls.n	800a956 <RTC_Waiting_Count+0x52>
    {
        Count_wait = Count_wait;
        RTC_Wakeup_Enable();
 800a91a:	f7ff ff2b 	bl	800a774 <RTC_Wakeup_Enable>
        {
            rtc_count = 0;
 800a91e:	4b11      	ldr	r3, [pc, #68]	; (800a964 <RTC_Waiting_Count+0x60>)
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
            while (rtc_count <= Count_wait)
 800a924:	e00c      	b.n	800a940 <RTC_Waiting_Count+0x3c>
            {
                PRINTF("rtc:%lu\n", rtc_count);
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <RTC_Waiting_Count+0x60>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4619      	mov	r1, r3
 800a92c:	480e      	ldr	r0, [pc, #56]	; (800a968 <RTC_Waiting_Count+0x64>)
 800a92e:	f017 fc39 	bl	80221a4 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a932:	b672      	cpsid	i
                // enter low-power mode
                gpi_int_disable();

                // gpi_sleep();
                HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 800a934:	2001      	movs	r0, #1
 800a936:	f7fa fe31 	bl	800559c <HAL_PWREx_EnterSTOP1Mode>
  __ASM volatile ("cpsie i" : : : "memory");
 800a93a:	b662      	cpsie	i

                /* wake by the timer interrupt */
                gpi_int_enable();
                SystemClock_Config();
 800a93c:	f003 f83a 	bl	800d9b4 <SystemClock_Config>
            while (rtc_count <= Count_wait)
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <RTC_Waiting_Count+0x60>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d2ed      	bcs.n	800a926 <RTC_Waiting_Count+0x22>
            }
        }
        rtc_count = 0;
 800a94a:	4b06      	ldr	r3, [pc, #24]	; (800a964 <RTC_Waiting_Count+0x60>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]

        /* Disable the Wakeup Timer */
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a950:	4806      	ldr	r0, [pc, #24]	; (800a96c <RTC_Waiting_Count+0x68>)
 800a952:	f7fc fc37 	bl	80071c4 <HAL_RTCEx_DeactivateWakeUpTimer>
    }
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	08025370 	.word	0x08025370
 800a964:	2000035c 	.word	0x2000035c
 800a968:	08025364 	.word	0x08025364
 800a96c:	20001240 	.word	0x20001240

0800a970 <RTC_Waiting_Count_Sleep>:


void RTC_Waiting_Count_Sleep(uint32_t Count_wait)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    PRINTF("RTC_Waiting_Count:%lu\n", Count_wait);
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	482c      	ldr	r0, [pc, #176]	; (800aa2c <RTC_Waiting_Count_Sleep+0xbc>)
 800a97c:	f017 fc12 	bl	80221a4 <iprintf>

    if (Count_wait > 1)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d94e      	bls.n	800aa24 <RTC_Waiting_Count_Sleep+0xb4>
    {
        Count_wait = Count_wait;
        RTC_Wakeup_Enable();
 800a986:	f7ff fef5 	bl	800a774 <RTC_Wakeup_Enable>
        {
            rtc_count = 0;
 800a98a:	4b29      	ldr	r3, [pc, #164]	; (800aa30 <RTC_Waiting_Count_Sleep+0xc0>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
            while (rtc_count <= Count_wait)
 800a990:	e03d      	b.n	800aa0e <RTC_Waiting_Count_Sleep+0x9e>
            {
                PRINTF("rtc:%lu\n", rtc_count);
 800a992:	4b27      	ldr	r3, [pc, #156]	; (800aa30 <RTC_Waiting_Count_Sleep+0xc0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	4826      	ldr	r0, [pc, #152]	; (800aa34 <RTC_Waiting_Count_Sleep+0xc4>)
 800a99a:	f017 fc03 	bl	80221a4 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a99e:	b672      	cpsid	i
                // enter low-power mode
                gpi_int_disable();

                #if ENERGEST_CONF_ON
                ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800a9a0:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9a2:	79db      	ldrb	r3, [r3, #7]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <RTC_Waiting_Count_Sleep+0x54>
 800a9a8:	4b24      	ldr	r3, [pc, #144]	; (800aa3c <RTC_Waiting_Count_Sleep+0xcc>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ae:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <RTC_Waiting_Count_Sleep+0xd0>)
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	1ad2      	subs	r2, r2, r3
 800a9b4:	4b23      	ldr	r3, [pc, #140]	; (800aa44 <RTC_Waiting_Count_Sleep+0xd4>)
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4a22      	ldr	r2, [pc, #136]	; (800aa44 <RTC_Waiting_Count_Sleep+0xd4>)
 800a9bc:	61d3      	str	r3, [r2, #28]
 800a9be:	4b1e      	ldr	r3, [pc, #120]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	71da      	strb	r2, [r3, #7]
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <RTC_Waiting_Count_Sleep+0xcc>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ENERGEST_ON(ENERGEST_TYPE_LPM);
 800a9ca:	4a1d      	ldr	r2, [pc, #116]	; (800aa40 <RTC_Waiting_Count_Sleep+0xd0>)
 800a9cc:	6213      	str	r3, [r2, #32]
 800a9ce:	4b1a      	ldr	r3, [pc, #104]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	721a      	strb	r2, [r3, #8]
                #endif

                gpi_sleep();
 800a9d4:	f003 fb9a 	bl	800e10c <gpi_sleep>
 800a9d8:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <RTC_Waiting_Count_Sleep+0xcc>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                // HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);

                #if ENERGEST_CONF_ON
                ENERGEST_ON(ENERGEST_TYPE_CPU);
 800a9de:	4a18      	ldr	r2, [pc, #96]	; (800aa40 <RTC_Waiting_Count_Sleep+0xd0>)
 800a9e0:	61d3      	str	r3, [r2, #28]
 800a9e2:	4b15      	ldr	r3, [pc, #84]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	71da      	strb	r2, [r3, #7]
                ENERGEST_OFF(ENERGEST_TYPE_LPM);
 800a9e8:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9ea:	7a1b      	ldrb	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00d      	beq.n	800aa0c <RTC_Waiting_Count_Sleep+0x9c>
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <RTC_Waiting_Count_Sleep+0xcc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <RTC_Waiting_Count_Sleep+0xd0>)
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <RTC_Waiting_Count_Sleep+0xd4>)
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	4413      	add	r3, r2
 800aa02:	4a10      	ldr	r2, [pc, #64]	; (800aa44 <RTC_Waiting_Count_Sleep+0xd4>)
 800aa04:	6213      	str	r3, [r2, #32]
 800aa06:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	721a      	strb	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800aa0c:	b662      	cpsie	i
            while (rtc_count <= Count_wait)
 800aa0e:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <RTC_Waiting_Count_Sleep+0xc0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d2bc      	bcs.n	800a992 <RTC_Waiting_Count_Sleep+0x22>
                /* wake by the timer interrupt */
                gpi_int_enable();
                // SystemClock_Config();
            }
        }
        rtc_count = 0;
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <RTC_Waiting_Count_Sleep+0xc0>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]

        /* Disable the Wakeup Timer */
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800aa1e:	480a      	ldr	r0, [pc, #40]	; (800aa48 <RTC_Waiting_Count_Sleep+0xd8>)
 800aa20:	f7fc fbd0 	bl	80071c4 <HAL_RTCEx_DeactivateWakeUpTimer>
    }
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	08025370 	.word	0x08025370
 800aa30:	2000035c 	.word	0x2000035c
 800aa34:	08025364 	.word	0x08025364
 800aa38:	2000112c 	.word	0x2000112c
 800aa3c:	200012c8 	.word	0x200012c8
 800aa40:	20001308 	.word	0x20001308
 800aa44:	20000f10 	.word	0x20000f10
 800aa48:	20001240 	.word	0x20001240

0800aa4c <NVIC_SystemReset>:
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aa50:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aa54:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <NVIC_SystemReset+0x20>)
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aa5c:	4903      	ldr	r1, [pc, #12]	; (800aa6c <NVIC_SystemReset+0x20>)
 800aa5e:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <NVIC_SystemReset+0x24>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60cb      	str	r3, [r1, #12]
 800aa64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800aa68:	bf00      	nop
    __NOP();
 800aa6a:	e7fd      	b.n	800aa68 <NVIC_SystemReset+0x1c>
 800aa6c:	e000ed00 	.word	0xe000ed00
 800aa70:	05fa0004 	.word	0x05fa0004

0800aa74 <Stats_value>:
Chirp_Energy chirp_stats_all_debug;
//**************************************************************************************************
//***** Global Functions ***************************************************************************

void Stats_value(uint8_t stats_type, uint32_t value)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
    Chirp_Stats *chirp_stats_temp;
    switch (stats_type)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d007      	beq.n	800aa96 <Stats_value+0x22>
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d008      	beq.n	800aa9c <Stats_value+0x28>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d000      	beq.n	800aa90 <Stats_value+0x1c>
        break;
    case TX_STATS:
        chirp_stats_temp = &(chirp_stats_all.tx_on);
        break;
    default:
        break;
 800aa8e:	e008      	b.n	800aaa2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.slot);
 800aa90:	4b1e      	ldr	r3, [pc, #120]	; (800ab0c <Stats_value+0x98>)
 800aa92:	60fb      	str	r3, [r7, #12]
        break;
 800aa94:	e005      	b.n	800aaa2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.rx_on);
 800aa96:	4b1e      	ldr	r3, [pc, #120]	; (800ab10 <Stats_value+0x9c>)
 800aa98:	60fb      	str	r3, [r7, #12]
        break;
 800aa9a:	e002      	b.n	800aaa2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.tx_on);
 800aa9c:	4b1d      	ldr	r3, [pc, #116]	; (800ab14 <Stats_value+0xa0>)
 800aa9e:	60fb      	str	r3, [r7, #12]
        break;
 800aaa0:	bf00      	nop
    }

    if (value)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d025      	beq.n	800aaf4 <Stats_value+0x80>
    {
        if (!chirp_stats_temp->stats_count)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d105      	bne.n	800aabc <Stats_value+0x48>
        {
            chirp_stats_temp->stats_min = value;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	609a      	str	r2, [r3, #8]
            chirp_stats_temp->stats_max = value;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	60da      	str	r2, [r3, #12]
        }
        chirp_stats_temp->stats_sum += value;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	441a      	add	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	601a      	str	r2, [r3, #0]
        chirp_stats_temp->stats_count ++;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	605a      	str	r2, [r3, #4]
        chirp_stats_temp->stats_min = (chirp_stats_temp->stats_min <= value)? chirp_stats_temp->stats_min : value;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	bf28      	it	cs
 800aadc:	461a      	movcs	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	609a      	str	r2, [r3, #8]
        chirp_stats_temp->stats_max = (chirp_stats_temp->stats_max >= value)? chirp_stats_temp->stats_max : value;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	bf38      	it	cc
 800aaec:	461a      	movcc	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        chirp_stats_temp->stats_none ++;
    }
}
 800aaf2:	e004      	b.n	800aafe <Stats_value+0x8a>
        chirp_stats_temp->stats_none ++;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	611a      	str	r2, [r3, #16]
}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000d28 	.word	0x20000d28
 800ab10:	20000d3c 	.word	0x20000d3c
 800ab14:	20000d50 	.word	0x20000d50

0800ab18 <Stats_value_debug>:

void Stats_value_debug(uint8_t energy_type, uint32_t value)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	613b      	str	r3, [r7, #16]
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	60fb      	str	r3, [r7, #12]
		ASSERT_CT(
			(GPI_HYBRID_CLOCK_RATE == (GPI_HYBRID_CLOCK_RATE / 1000000) * 1000000) &&
			IS_POWER_OF_2(GPI_HYBRID_CLOCK_RATE / 1000000),
			GPI_HYBRID_CLOCK_RATE_unsupported);

		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	091b      	lsrs	r3, r3, #4
    // printf("value:%lu, %lu\n", energy_type, (uint32_t)gpi_tick_fast_to_us(value));
    uint32_t value_s = (uint32_t)gpi_tick_fast_to_us(value);
 800ab30:	617b      	str	r3, [r7, #20]
    switch (energy_type)
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	3b07      	subs	r3, #7
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d85c      	bhi.n	800abf4 <Stats_value_debug+0xdc>
 800ab3a:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <Stats_value_debug+0x28>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ab69 	.word	0x0800ab69
 800ab44:	0800ab77 	.word	0x0800ab77
 800ab48:	0800ab85 	.word	0x0800ab85
 800ab4c:	0800ab93 	.word	0x0800ab93
 800ab50:	0800aba1 	.word	0x0800aba1
 800ab54:	0800abaf 	.word	0x0800abaf
 800ab58:	0800abbd 	.word	0x0800abbd
 800ab5c:	0800abcb 	.word	0x0800abcb
 800ab60:	0800abd9 	.word	0x0800abd9
 800ab64:	0800abe7 	.word	0x0800abe7
    {
        case ENERGEST_TYPE_CPU:
            chirp_stats_all_debug.CPU += value_s;
 800ab68:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <Stats_value_debug+0xec>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	4413      	add	r3, r2
 800ab70:	4a24      	ldr	r2, [pc, #144]	; (800ac04 <Stats_value_debug+0xec>)
 800ab72:	6013      	str	r3, [r2, #0]
            break;
 800ab74:	e03f      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_LPM:
            chirp_stats_all_debug.LPM += value_s;
 800ab76:	4b23      	ldr	r3, [pc, #140]	; (800ac04 <Stats_value_debug+0xec>)
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	4a21      	ldr	r2, [pc, #132]	; (800ac04 <Stats_value_debug+0xec>)
 800ab80:	6053      	str	r3, [r2, #4]
            break;
 800ab82:	e038      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_STOP:
            chirp_stats_all_debug.STOP += value_s;
 800ab84:	4b1f      	ldr	r3, [pc, #124]	; (800ac04 <Stats_value_debug+0xec>)
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	4a1d      	ldr	r2, [pc, #116]	; (800ac04 <Stats_value_debug+0xec>)
 800ab8e:	6093      	str	r3, [r2, #8]
            break;
 800ab90:	e031      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_FLASH_WRITE_BANK1:
            chirp_stats_all_debug.FLASH_WRITE_BANK1 += value_s;
 800ab92:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <Stats_value_debug+0xec>)
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	4413      	add	r3, r2
 800ab9a:	4a1a      	ldr	r2, [pc, #104]	; (800ac04 <Stats_value_debug+0xec>)
 800ab9c:	60d3      	str	r3, [r2, #12]
            break;
 800ab9e:	e02a      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_FLASH_WRITE_BANK2:
            chirp_stats_all_debug.FLASH_WRITE_BANK2 += value_s;
 800aba0:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <Stats_value_debug+0xec>)
 800aba2:	691a      	ldr	r2, [r3, #16]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4413      	add	r3, r2
 800aba8:	4a16      	ldr	r2, [pc, #88]	; (800ac04 <Stats_value_debug+0xec>)
 800abaa:	6113      	str	r3, [r2, #16]
            break;
 800abac:	e023      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_FLASH_ERASE:
            chirp_stats_all_debug.FLASH_ERASE += value_s;
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <Stats_value_debug+0xec>)
 800abb0:	695a      	ldr	r2, [r3, #20]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	4413      	add	r3, r2
 800abb6:	4a13      	ldr	r2, [pc, #76]	; (800ac04 <Stats_value_debug+0xec>)
 800abb8:	6153      	str	r3, [r2, #20]
            break;
 800abba:	e01c      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_FLASH_VERIFY:
            chirp_stats_all_debug.FLASH_VERIFY += value_s;
 800abbc:	4b11      	ldr	r3, [pc, #68]	; (800ac04 <Stats_value_debug+0xec>)
 800abbe:	699a      	ldr	r2, [r3, #24]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	4413      	add	r3, r2
 800abc4:	4a0f      	ldr	r2, [pc, #60]	; (800ac04 <Stats_value_debug+0xec>)
 800abc6:	6193      	str	r3, [r2, #24]
            break;
 800abc8:	e015      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_TRANSMIT:
            chirp_stats_all_debug.TRANSMIT += value_s;
 800abca:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <Stats_value_debug+0xec>)
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	4a0c      	ldr	r2, [pc, #48]	; (800ac04 <Stats_value_debug+0xec>)
 800abd4:	61d3      	str	r3, [r2, #28]
            break;
 800abd6:	e00e      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_LISTEN:
            chirp_stats_all_debug.LISTEN += value_s;
 800abd8:	4b0a      	ldr	r3, [pc, #40]	; (800ac04 <Stats_value_debug+0xec>)
 800abda:	6a1a      	ldr	r2, [r3, #32]
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <Stats_value_debug+0xec>)
 800abe2:	6213      	str	r3, [r2, #32]
            break;
 800abe4:	e007      	b.n	800abf6 <Stats_value_debug+0xde>
        case ENERGEST_TYPE_GPS:
            chirp_stats_all_debug.GPS += value_s;
 800abe6:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <Stats_value_debug+0xec>)
 800abe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	4413      	add	r3, r2
 800abee:	4a05      	ldr	r2, [pc, #20]	; (800ac04 <Stats_value_debug+0xec>)
 800abf0:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 800abf2:	e000      	b.n	800abf6 <Stats_value_debug+0xde>
        default:
            break;
 800abf4:	bf00      	nop
    }
}
 800abf6:	bf00      	nop
 800abf8:	371c      	adds	r7, #28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20000d00 	.word	0x20000d00

0800ac08 <Stats_to_Flash>:

void Stats_to_Flash(Mixer_Task task)
{
 800ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0a:	b089      	sub	sp, #36	; 0x24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	71fb      	strb	r3, [r7, #7]
 800ac12:	466b      	mov	r3, sp
 800ac14:	461e      	mov	r6, r3
    uint16_t stats_len = 2 * ((sizeof(chirp_stats_all) + sizeof(uint64_t) - 1) / sizeof(uint64_t));
 800ac16:	2310      	movs	r3, #16
 800ac18:	83fb      	strh	r3, [r7, #30]
    uint32_t stats_array[stats_len];
 800ac1a:	8bfd      	ldrh	r5, [r7, #30]
 800ac1c:	462b      	mov	r3, r5
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	b2a9      	uxth	r1, r5
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	f04f 0400 	mov.w	r4, #0
 800ac30:	0154      	lsls	r4, r2, #5
 800ac32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ac36:	014b      	lsls	r3, r1, #5
 800ac38:	b2a9      	uxth	r1, r5
 800ac3a:	f04f 0200 	mov.w	r2, #0
 800ac3e:	f04f 0300 	mov.w	r3, #0
 800ac42:	f04f 0400 	mov.w	r4, #0
 800ac46:	0154      	lsls	r4, r2, #5
 800ac48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ac4c:	014b      	lsls	r3, r1, #5
 800ac4e:	462b      	mov	r3, r5
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	3303      	adds	r3, #3
 800ac54:	3307      	adds	r3, #7
 800ac56:	08db      	lsrs	r3, r3, #3
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	ebad 0d03 	sub.w	sp, sp, r3
 800ac5e:	466b      	mov	r3, sp
 800ac60:	3303      	adds	r3, #3
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	617b      	str	r3, [r7, #20]
    #if MX_LBT_ACCESS
        uint16_t stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800ac68:	2305      	movs	r3, #5
 800ac6a:	827b      	strh	r3, [r7, #18]
    #endif

    assert_reset((sizeof(stats_array) >= sizeof(chirp_stats_all)));
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	2b3b      	cmp	r3, #59	; 0x3b
 800ac72:	d806      	bhi.n	800ac82 <Stats_to_Flash+0x7a>
 800ac74:	462b      	mov	r3, r5
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	2b3b      	cmp	r3, #59	; 0x3b
 800ac7a:	d802      	bhi.n	800ac82 <Stats_to_Flash+0x7a>
  __ASM volatile ("cpsid f" : : : "memory");
 800ac7c:	b671      	cpsid	f
 800ac7e:	f7ff fee5 	bl	800aa4c <NVIC_SystemReset>
    memset((uint32_t *)stats_array, 0, sizeof(stats_array));
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	462a      	mov	r2, r5
 800ac86:	0092      	lsls	r2, r2, #2
 800ac88:	2100      	movs	r1, #0
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f016 fc7d 	bl	802158a <memset>
    memcpy((uint32_t *)stats_array, (uint32_t *)&chirp_stats_all.slot.stats_sum, sizeof(chirp_stats_all));
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	223c      	movs	r2, #60	; 0x3c
 800ac94:	492b      	ldr	r1, [pc, #172]	; (800ad44 <Stats_to_Flash+0x13c>)
 800ac96:	4618      	mov	r0, r3
 800ac98:	f016 fc6c 	bl	8021574 <memcpy>

    if ((task != MX_ARRANGE) && (task != MX_COLLECT))
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	d01e      	beq.n	800ace0 <Stats_to_Flash+0xd8>
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d01b      	beq.n	800ace0 <Stats_to_Flash+0xd8>
    {
        FLASH_If_Erase_Pages(1, DAEMON_PAGE);
 800aca8:	21fc      	movs	r1, #252	; 0xfc
 800acaa:	2001      	movs	r0, #1
 800acac:	f011 fbc6 	bl	801c43c <FLASH_If_Erase_Pages>
        FLASH_If_Write(DAEMON_FLASH_ADDRESS, (uint32_t *)stats_array, sizeof(stats_array) / sizeof(uint32_t));
 800acb0:	6979      	ldr	r1, [r7, #20]
 800acb2:	462b      	mov	r3, r5
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	089b      	lsrs	r3, r3, #2
 800acb8:	461a      	mov	r2, r3
 800acba:	4823      	ldr	r0, [pc, #140]	; (800ad48 <Stats_to_Flash+0x140>)
 800acbc:	f011 fc42 	bl	801c544 <FLASH_If_Write>
        #if MX_LBT_ACCESS
        stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800acc0:	2305      	movs	r3, #5
 800acc2:	827b      	strh	r3, [r7, #18]
        FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array) * 2, (uint32_t *)&chirp_config.lbt_channel_time_stats_us[0], stats_lbt_len * sizeof(uint64_t) / sizeof(uint32_t));
 800acc4:	462b      	mov	r3, r5
 800acc6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800acca:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800acce:	00d8      	lsls	r0, r3, #3
 800acd0:	8a7b      	ldrh	r3, [r7, #18]
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	089b      	lsrs	r3, r3, #2
 800acd6:	461a      	mov	r2, r3
 800acd8:	491c      	ldr	r1, [pc, #112]	; (800ad4c <Stats_to_Flash+0x144>)
 800acda:	f011 fc33 	bl	801c544 <FLASH_If_Write>
 800acde:	e02c      	b.n	800ad3a <Stats_to_Flash+0x132>
        #endif
    }
    else if (task == MX_COLLECT)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d129      	bne.n	800ad3a <Stats_to_Flash+0x132>
    {
        uint32_t flash_data = *(__IO uint32_t*)(DAEMON_FLASH_ADDRESS + sizeof(stats_array));
 800ace6:	462b      	mov	r3, r5
 800ace8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800acec:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60fb      	str	r3, [r7, #12]
        if (flash_data == 0xFFFFFFFF)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfc:	d11d      	bne.n	800ad3a <Stats_to_Flash+0x132>
        {
            FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array), (uint32_t *)stats_array, sizeof(stats_array) / sizeof(uint32_t));
 800acfe:	462b      	mov	r3, r5
 800ad00:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800ad04:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800ad08:	0098      	lsls	r0, r3, #2
 800ad0a:	6979      	ldr	r1, [r7, #20]
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	089b      	lsrs	r3, r3, #2
 800ad12:	461a      	mov	r2, r3
 800ad14:	f011 fc16 	bl	801c544 <FLASH_If_Write>
            #if MX_LBT_ACCESS
            stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800ad18:	2305      	movs	r3, #5
 800ad1a:	827b      	strh	r3, [r7, #18]
            FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array) * 2 + stats_lbt_len * sizeof(uint64_t), (uint32_t *)&chirp_config.lbt_channel_time_stats_us[0], stats_lbt_len * sizeof(uint64_t) / sizeof(uint32_t));
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	8a7b      	ldrh	r3, [r7, #18]
 800ad20:	4413      	add	r3, r2
 800ad22:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800ad26:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800ad2a:	00d8      	lsls	r0, r3, #3
 800ad2c:	8a7b      	ldrh	r3, [r7, #18]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	089b      	lsrs	r3, r3, #2
 800ad32:	461a      	mov	r2, r3
 800ad34:	4905      	ldr	r1, [pc, #20]	; (800ad4c <Stats_to_Flash+0x144>)
 800ad36:	f011 fc05 	bl	801c544 <FLASH_If_Write>
 800ad3a:	46b5      	mov	sp, r6
            #endif
        }
    }
}
 800ad3c:	bf00      	nop
 800ad3e:	3724      	adds	r7, #36	; 0x24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad44:	20000d28 	.word	0x20000d28
 800ad48:	0807e000 	.word	0x0807e000
 800ad4c:	200014c4 	.word	0x200014c4

0800ad50 <NVIC_SystemReset>:
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ad54:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <NVIC_SystemReset+0x20>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ad60:	4903      	ldr	r1, [pc, #12]	; (800ad70 <NVIC_SystemReset+0x20>)
 800ad62:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <NVIC_SystemReset+0x24>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60cb      	str	r3, [r1, #12]
 800ad68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ad6c:	bf00      	nop
    __NOP();
 800ad6e:	e7fd      	b.n	800ad6c <NVIC_SystemReset+0x1c>
 800ad70:	e000ed00 	.word	0xe000ed00
 800ad74:	05fa0004 	.word	0x05fa0004

0800ad78 <packet_prepare>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

void packet_prepare(uint8_t node_id)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	71fb      	strb	r3, [r7, #7]
    Tx_Buffer[0] = node_id + 1;
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	3301      	adds	r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b0d      	ldr	r3, [pc, #52]	; (800adc0 <packet_prepare+0x48>)
 800ad8a:	701a      	strb	r2, [r3, #0]
    Tx_Buffer[1] = node_id + 2;
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	3302      	adds	r3, #2
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <packet_prepare+0x48>)
 800ad94:	705a      	strb	r2, [r3, #1]
    uint16_t topo_hash_tx = Chirp_RSHash((uint8_t *)&(Tx_Buffer[0]), 2);
 800ad96:	2102      	movs	r1, #2
 800ad98:	4809      	ldr	r0, [pc, #36]	; (800adc0 <packet_prepare+0x48>)
 800ad9a:	f014 f82b 	bl	801edf4 <Chirp_RSHash>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	81fb      	strh	r3, [r7, #14]
    Tx_Buffer[2] = topo_hash_tx >> 8;
 800ada2:	89fb      	ldrh	r3, [r7, #14]
 800ada4:	0a1b      	lsrs	r3, r3, #8
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <packet_prepare+0x48>)
 800adac:	709a      	strb	r2, [r3, #2]
    Tx_Buffer[3] = topo_hash_tx;
 800adae:	89fb      	ldrh	r3, [r7, #14]
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <packet_prepare+0x48>)
 800adb4:	70da      	strb	r2, [r3, #3]
}
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20000d6c 	.word	0x20000d6c

0800adc4 <topo_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************
uint32_t topo_init(uint8_t nodes_num, uint8_t node_id, uint8_t sf, uint8_t payload_len)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af02      	add	r7, sp, #8
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	4611      	mov	r1, r2
 800add0:	461a      	mov	r2, r3
 800add2:	4623      	mov	r3, r4
 800add4:	71fb      	strb	r3, [r7, #7]
 800add6:	4603      	mov	r3, r0
 800add8:	71bb      	strb	r3, [r7, #6]
 800adda:	460b      	mov	r3, r1
 800addc:	717b      	strb	r3, [r7, #5]
 800adde:	4613      	mov	r3, r2
 800ade0:	713b      	strb	r3, [r7, #4]
    tx_num_max = 20;
 800ade2:	4b34      	ldr	r3, [pc, #208]	; (800aeb4 <topo_init+0xf0>)
 800ade4:	2214      	movs	r2, #20
 800ade6:	701a      	strb	r2, [r3, #0]
    assert_reset((payload_len >= 2));
 800ade8:	793b      	ldrb	r3, [r7, #4]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d805      	bhi.n	800adfa <topo_init+0x36>
 800adee:	793b      	ldrb	r3, [r7, #4]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d802      	bhi.n	800adfa <topo_init+0x36>
  __ASM volatile ("cpsid f" : : : "memory");
 800adf4:	b671      	cpsid	f
 800adf6:	f7ff ffab 	bl	800ad50 <NVIC_SystemReset>
    tx_payload_len = payload_len + 2;
 800adfa:	793b      	ldrb	r3, [r7, #4]
 800adfc:	3302      	adds	r3, #2
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b2d      	ldr	r3, [pc, #180]	; (800aeb8 <topo_init+0xf4>)
 800ae02:	701a      	strb	r2, [r3, #0]
    assert_reset((tx_payload_len <= BUFFER_SIZE));
 800ae04:	4b2c      	ldr	r3, [pc, #176]	; (800aeb8 <topo_init+0xf4>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2bc8      	cmp	r3, #200	; 0xc8
 800ae0a:	d906      	bls.n	800ae1a <topo_init+0x56>
 800ae0c:	4b2a      	ldr	r3, [pc, #168]	; (800aeb8 <topo_init+0xf4>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2bc8      	cmp	r3, #200	; 0xc8
 800ae12:	d902      	bls.n	800ae1a <topo_init+0x56>
 800ae14:	b671      	cpsid	f
 800ae16:	f7ff ff9b 	bl	800ad50 <NVIC_SystemReset>
    packet_time_us = SX1276GetPacketTime(sf, 7, 1, 0, chirp_config.lora_plen, tx_payload_len) + 50000;
 800ae1a:	4b28      	ldr	r3, [pc, #160]	; (800aebc <topo_init+0xf8>)
 800ae1c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ae20:	4a25      	ldr	r2, [pc, #148]	; (800aeb8 <topo_init+0xf4>)
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	7978      	ldrb	r0, [r7, #5]
 800ae26:	9201      	str	r2, [sp, #4]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	2107      	movs	r1, #7
 800ae30:	f002 f8ac 	bl	800cf8c <SX1276GetPacketTime>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800ae3a:	3350      	adds	r3, #80	; 0x50
 800ae3c:	4a20      	ldr	r2, [pc, #128]	; (800aec0 <topo_init+0xfc>)
 800ae3e:	6013      	str	r3, [r2, #0]
    node_topology = (Topology_result *)malloc(nodes_num * sizeof(Topology_result));
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f016 fb85 	bl	8021554 <malloc>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	4b1d      	ldr	r3, [pc, #116]	; (800aec4 <topo_init+0x100>)
 800ae50:	601a      	str	r2, [r3, #0]
    memset(node_topology, 0, nodes_num * sizeof(Topology_result));
 800ae52:	4b1c      	ldr	r3, [pc, #112]	; (800aec4 <topo_init+0x100>)
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f016 fb94 	bl	802158a <memset>

    node_topology_link = (Topology_result_link *)malloc(nodes_num * sizeof(Topology_result_link));
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f016 fb74 	bl	8021554 <malloc>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <topo_init+0x104>)
 800ae72:	601a      	str	r2, [r3, #0]
    memset(node_topology_link, 0, nodes_num * sizeof(Topology_result_link));
 800ae74:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <topo_init+0x104>)
 800ae76:	6818      	ldr	r0, [r3, #0]
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	2100      	movs	r1, #0
 800ae80:	f016 fb83 	bl	802158a <memset>

    round_length_us = packet_time_us * (tx_num_max + 3) + 2000000;
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <topo_init+0xf0>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	3303      	adds	r3, #3
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <topo_init+0xfc>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	fb03 f302 	mul.w	r3, r3, r2
 800ae94:	f503 13f4 	add.w	r3, r3, #1998848	; 0x1e8000
 800ae98:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ae9c:	4a0b      	ldr	r2, [pc, #44]	; (800aecc <topo_init+0x108>)
 800ae9e:	6013      	str	r3, [r2, #0]

    packet_prepare(node_id);
 800aea0:	79bb      	ldrb	r3, [r7, #6]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff ff68 	bl	800ad78 <packet_prepare>

    return packet_time_us;
 800aea8:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <topo_init+0xfc>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd90      	pop	{r4, r7, pc}
 800aeb4:	20000360 	.word	0x20000360
 800aeb8:	20000361 	.word	0x20000361
 800aebc:	20001430 	.word	0x20001430
 800aec0:	20000d64 	.word	0x20000d64
 800aec4:	20000e3c 	.word	0x20000e3c
 800aec8:	20000e34 	.word	0x20000e34
 800aecc:	20000364 	.word	0x20000364

0800aed0 <topo_round_robin>:

Gpi_Fast_Tick_Extended topo_round_robin(uint8_t node_id, uint8_t nodes_num, uint8_t i, Gpi_Fast_Tick_Extended deadline)
{
 800aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aed2:	b08f      	sub	sp, #60	; 0x3c
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
 800aeda:	460b      	mov	r3, r1
 800aedc:	71bb      	strb	r3, [r7, #6]
 800aede:	4613      	mov	r3, r2
 800aee0:	717b      	strb	r3, [r7, #5]
	return htim2.Instance->CNT;
 800aee2:	4b8c      	ldr	r3, [pc, #560]	; (800b114 <topo_round_robin+0x244>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    #if ENERGEST_CONF_ON
        ENERGEST_ON(ENERGEST_TYPE_CPU);
 800aee8:	4a8b      	ldr	r2, [pc, #556]	; (800b118 <topo_round_robin+0x248>)
 800aeea:	61d3      	str	r3, [r2, #28]
 800aeec:	4b8b      	ldr	r3, [pc, #556]	; (800b11c <topo_round_robin+0x24c>)
 800aeee:	2201      	movs	r2, #1
 800aef0:	71da      	strb	r2, [r3, #7]
    #endif

    SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800aef2:	2000      	movs	r0, #0
 800aef4:	f001 fcec 	bl	800c8d0 <SX1276SetOpMode>
	chirp_isr.state = ISR_TOPO;
 800aef8:	4b89      	ldr	r3, [pc, #548]	; (800b120 <topo_round_robin+0x250>)
 800aefa:	2204      	movs	r2, #4
 800aefc:	701a      	strb	r2, [r3, #0]

    topology_state = IDLE;
 800aefe:	4b89      	ldr	r3, [pc, #548]	; (800b124 <topo_round_robin+0x254>)
 800af00:	2200      	movs	r2, #0
 800af02:	701a      	strb	r2, [r3, #0]
    tx_send_num = 0;
 800af04:	4b88      	ldr	r3, [pc, #544]	; (800b128 <topo_round_robin+0x258>)
 800af06:	2200      	movs	r2, #0
 800af08:	801a      	strh	r2, [r3, #0]
    rx_receive_num = 0;
 800af0a:	4b88      	ldr	r3, [pc, #544]	; (800b12c <topo_round_robin+0x25c>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	801a      	strh	r2, [r3, #0]
    if (i != node_id)
 800af10:	797a      	ldrb	r2, [r7, #5]
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	429a      	cmp	r2, r3
 800af16:	f000 8119 	beq.w	800b14c <topo_round_robin+0x27c>
    {
        PRINTF("Topology---Rx:%d\n", i);
 800af1a:	797b      	ldrb	r3, [r7, #5]
 800af1c:	4619      	mov	r1, r3
 800af1e:	4884      	ldr	r0, [pc, #528]	; (800b130 <topo_round_robin+0x260>)
 800af20:	f017 f940 	bl	80221a4 <iprintf>
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800af24:	219f      	movs	r1, #159	; 0x9f
 800af26:	2011      	movs	r0, #17
 800af28:	f001 fd4a 	bl	800c9c0 <SX1276Write>
											RFLR_IRQFLAGS_VALIDHEADER |
											RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );
		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK) | RFLR_DIOMAPPING1_DIO0_00);
 800af2c:	2040      	movs	r0, #64	; 0x40
 800af2e:	f001 fd59 	bl	800c9e4 <SX1276Read>
 800af32:	4603      	mov	r3, r0
 800af34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	4619      	mov	r1, r3
 800af3c:	2040      	movs	r0, #64	; 0x40
 800af3e:	f001 fd3f 	bl	800c9c0 <SX1276Write>

		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800af42:	2033      	movs	r0, #51	; 0x33
 800af44:	f001 fd4e 	bl	800c9e4 <SX1276Read>
 800af48:	4603      	mov	r3, r0
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800af50:	b25b      	sxtb	r3, r3
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	b25b      	sxtb	r3, r3
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	4619      	mov	r1, r3
 800af5c:	2033      	movs	r0, #51	; 0x33
 800af5e:	f001 fd2f 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800af62:	211d      	movs	r1, #29
 800af64:	203b      	movs	r0, #59	; 0x3b
 800af66:	f001 fd2b 	bl	800c9c0 <SX1276Write>

		SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800af6a:	2031      	movs	r0, #49	; 0x31
 800af6c:	f001 fd3a 	bl	800c9e4 <SX1276Read>
 800af70:	4603      	mov	r3, r0
 800af72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af76:	b2db      	uxtb	r3, r3
 800af78:	4619      	mov	r1, r3
 800af7a:	2031      	movs	r0, #49	; 0x31
 800af7c:	f001 fd20 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800af80:	2100      	movs	r1, #0
 800af82:	2030      	movs	r0, #48	; 0x30
 800af84:	f001 fd1c 	bl	800c9c0 <SX1276Write>
        SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800af88:	2140      	movs	r1, #64	; 0x40
 800af8a:	202f      	movs	r0, #47	; 0x2f
 800af8c:	f001 fd18 	bl	800c9c0 <SX1276Write>

        SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800af90:	2005      	movs	r0, #5
 800af92:	f001 fc9d 	bl	800c8d0 <SX1276SetOpMode>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800af96:	4b61      	ldr	r3, [pc, #388]	; (800b11c <topo_round_robin+0x24c>)
 800af98:	79db      	ldrb	r3, [r3, #7]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00d      	beq.n	800afba <topo_round_robin+0xea>
 800af9e:	4b5d      	ldr	r3, [pc, #372]	; (800b114 <topo_round_robin+0x244>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afa4:	4b5c      	ldr	r3, [pc, #368]	; (800b118 <topo_round_robin+0x248>)
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	1ad2      	subs	r2, r2, r3
 800afaa:	4b62      	ldr	r3, [pc, #392]	; (800b134 <topo_round_robin+0x264>)
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	4413      	add	r3, r2
 800afb0:	4a60      	ldr	r2, [pc, #384]	; (800b134 <topo_round_robin+0x264>)
 800afb2:	61d3      	str	r3, [r2, #28]
 800afb4:	4b59      	ldr	r3, [pc, #356]	; (800b11c <topo_round_robin+0x24c>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	71da      	strb	r2, [r3, #7]
 800afba:	4b56      	ldr	r3, [pc, #344]	; (800b114 <topo_round_robin+0x244>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 800afc0:	4a55      	ldr	r2, [pc, #340]	; (800b118 <topo_round_robin+0x248>)
 800afc2:	63d3      	str	r3, [r2, #60]	; 0x3c
 800afc4:	4b55      	ldr	r3, [pc, #340]	; (800b11c <topo_round_robin+0x24c>)
 800afc6:	2201      	movs	r2, #1
 800afc8:	73da      	strb	r2, [r3, #15]
        #endif
        topology_state = RX_RUNNING;
 800afca:	4b56      	ldr	r3, [pc, #344]	; (800b124 <topo_round_robin+0x254>)
 800afcc:	2210      	movs	r2, #16
 800afce:	701a      	strb	r2, [r3, #0]

        deadline = gpi_tick_fast_extended() + GPI_TICK_US_TO_FAST2(round_length_us);
 800afd0:	f000 fd44 	bl	800ba5c <gpi_tick_fast_extended>
 800afd4:	4b58      	ldr	r3, [pc, #352]	; (800b138 <topo_round_robin+0x268>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a58      	ldr	r2, [pc, #352]	; (800b13c <topo_round_robin+0x26c>)
 800afda:	fba2 2303 	umull	r2, r3, r2, r3
 800afde:	0c9b      	lsrs	r3, r3, #18
 800afe0:	4a57      	ldr	r2, [pc, #348]	; (800b140 <topo_round_robin+0x270>)
 800afe2:	fb02 f403 	mul.w	r4, r2, r3
 800afe6:	4b54      	ldr	r3, [pc, #336]	; (800b138 <topo_round_robin+0x268>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a56      	ldr	r2, [pc, #344]	; (800b144 <topo_round_robin+0x274>)
 800afec:	fba2 2303 	umull	r2, r3, r2, r3
 800aff0:	099a      	lsrs	r2, r3, #6
 800aff2:	4b54      	ldr	r3, [pc, #336]	; (800b144 <topo_round_robin+0x274>)
 800aff4:	fba3 5302 	umull	r5, r3, r3, r2
 800aff8:	099b      	lsrs	r3, r3, #6
 800affa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800affe:	fb05 f303 	mul.w	r3, r5, r3
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b008:	fb02 f303 	mul.w	r3, r2, r3
 800b00c:	441c      	add	r4, r3
 800b00e:	4b4a      	ldr	r3, [pc, #296]	; (800b138 <topo_round_robin+0x268>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4b4c      	ldr	r3, [pc, #304]	; (800b144 <topo_round_robin+0x274>)
 800b014:	fba3 5302 	umull	r5, r3, r3, r2
 800b018:	099b      	lsrs	r3, r3, #6
 800b01a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b01e:	fb05 f303 	mul.w	r3, r5, r3
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	4423      	add	r3, r4
 800b028:	461d      	mov	r5, r3
 800b02a:	f04f 0600 	mov.w	r6, #0
 800b02e:	182b      	adds	r3, r5, r0
 800b030:	eb46 0401 	adc.w	r4, r6, r1
 800b034:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800b038:	4b36      	ldr	r3, [pc, #216]	; (800b114 <topo_round_robin+0x244>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f06f 0202 	mvn.w	r2, #2
 800b040:	611a      	str	r2, [r3, #16]
        __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800b042:	4b34      	ldr	r3, [pc, #208]	; (800b114 <topo_round_robin+0x244>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68da      	ldr	r2, [r3, #12]
 800b048:	4b32      	ldr	r3, [pc, #200]	; (800b114 <topo_round_robin+0x244>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0202 	bic.w	r2, r2, #2
 800b050:	60da      	str	r2, [r3, #12]
        MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(16000000);
 800b052:	4b30      	ldr	r3, [pc, #192]	; (800b114 <topo_round_robin+0x244>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	4a2e      	ldr	r2, [pc, #184]	; (800b114 <topo_round_robin+0x244>)
 800b05a:	6812      	ldr	r2, [r2, #0]
 800b05c:	f103 6374 	add.w	r3, r3, #255852544	; 0xf400000
 800b060:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 800b064:	6353      	str	r3, [r2, #52]	; 0x34
        __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800b066:	4b2b      	ldr	r3, [pc, #172]	; (800b114 <topo_round_robin+0x244>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	4b29      	ldr	r3, [pc, #164]	; (800b114 <topo_round_robin+0x244>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f042 0202 	orr.w	r2, r2, #2
 800b074:	60da      	str	r2, [r3, #12]

        while(1)
        {
            if (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) >= 0)
 800b076:	f000 fcf1 	bl	800ba5c <gpi_tick_fast_extended>
 800b07a:	4603      	mov	r3, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800b082:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b086:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
//***** Implementations of Inline Functions ********************************************************

_GPI_TICK_COMPARE_FUNCTION(slow_native, 	Gpi_Slow_Tick_Native)
_GPI_TICK_COMPARE_FUNCTION(slow_extended, 	Gpi_Slow_Tick_Extended)
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
_GPI_TICK_COMPARE_FUNCTION(fast_extended, 	Gpi_Fast_Tick_Extended)
 800b08a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b08e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b092:	1ac9      	subs	r1, r1, r3
 800b094:	eb62 0204 	sbc.w	r2, r2, r4
 800b098:	460d      	mov	r5, r1
 800b09a:	4616      	mov	r6, r2
 800b09c:	e9c7 560c 	strd	r5, r6, [r7, #48]	; 0x30
 800b0a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f174 0300 	sbcs.w	r3, r4, #0
 800b0aa:	db08      	blt.n	800b0be <topo_round_robin+0x1ee>
 800b0ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bf14      	ite	ne
 800b0b6:	2301      	movne	r3, #1
 800b0b8:	2300      	moveq	r3, #0
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	e001      	b.n	800b0c2 <topo_round_robin+0x1f2>
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da00      	bge.n	800b0c8 <topo_round_robin+0x1f8>
 800b0c6:	e7d6      	b.n	800b076 <topo_round_robin+0x1a6>
                break;
 800b0c8:	bf00      	nop
        }

        node_topology[i].rx_num = rx_receive_num;
 800b0ca:	4b18      	ldr	r3, [pc, #96]	; (800b12c <topo_round_robin+0x25c>)
 800b0cc:	8819      	ldrh	r1, [r3, #0]
 800b0ce:	4b1e      	ldr	r3, [pc, #120]	; (800b148 <topo_round_robin+0x278>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	797b      	ldrb	r3, [r7, #5]
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	b2ca      	uxtb	r2, r1
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <topo_round_robin+0x244>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 800b0e2:	4a0d      	ldr	r2, [pc, #52]	; (800b118 <topo_round_robin+0x248>)
 800b0e4:	61d3      	str	r3, [r2, #28]
 800b0e6:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <topo_round_robin+0x24c>)
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	71da      	strb	r2, [r3, #7]
            ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <topo_round_robin+0x24c>)
 800b0ee:	7bdb      	ldrb	r3, [r3, #15]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 81ae 	beq.w	800b452 <topo_round_robin+0x582>
 800b0f6:	4b07      	ldr	r3, [pc, #28]	; (800b114 <topo_round_robin+0x244>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0fc:	4b06      	ldr	r3, [pc, #24]	; (800b118 <topo_round_robin+0x248>)
 800b0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b100:	1ad2      	subs	r2, r2, r3
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <topo_round_robin+0x264>)
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	4413      	add	r3, r2
 800b108:	4a0a      	ldr	r2, [pc, #40]	; (800b134 <topo_round_robin+0x264>)
 800b10a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b10c:	4b03      	ldr	r3, [pc, #12]	; (800b11c <topo_round_robin+0x24c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	73da      	strb	r2, [r3, #15]
 800b112:	e19e      	b.n	800b452 <topo_round_robin+0x582>
 800b114:	200012c8 	.word	0x200012c8
 800b118:	20001308 	.word	0x20001308
 800b11c:	2000112c 	.word	0x2000112c
 800b120:	20000cfc 	.word	0x20000cfc
 800b124:	20000d68 	.word	0x20000d68
 800b128:	20000e38 	.word	0x20000e38
 800b12c:	20000e40 	.word	0x20000e40
 800b130:	08025388 	.word	0x08025388
 800b134:	20000f10 	.word	0x20000f10
 800b138:	20000364 	.word	0x20000364
 800b13c:	431bde83 	.word	0x431bde83
 800b140:	00f42400 	.word	0x00f42400
 800b144:	10624dd3 	.word	0x10624dd3
 800b148:	20000e3c 	.word	0x20000e3c
        #endif
    }
    else
    {
        /* delay more than receivers */
        deadline = gpi_tick_fast_extended() + GPI_TICK_US_TO_FAST2(packet_time_us * 3) + GPI_TICK_US_TO_FAST2(1000000);
 800b14c:	f000 fc86 	bl	800ba5c <gpi_tick_fast_extended>
 800b150:	4ba4      	ldr	r3, [pc, #656]	; (800b3e4 <topo_round_robin+0x514>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	4aa3      	ldr	r2, [pc, #652]	; (800b3e8 <topo_round_robin+0x518>)
 800b15c:	fba2 2303 	umull	r2, r3, r2, r3
 800b160:	0c9b      	lsrs	r3, r3, #18
 800b162:	4aa2      	ldr	r2, [pc, #648]	; (800b3ec <topo_round_robin+0x51c>)
 800b164:	fb02 f403 	mul.w	r4, r2, r3
 800b168:	4b9e      	ldr	r3, [pc, #632]	; (800b3e4 <topo_round_robin+0x514>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	4613      	mov	r3, r2
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	4413      	add	r3, r2
 800b172:	4a9f      	ldr	r2, [pc, #636]	; (800b3f0 <topo_round_robin+0x520>)
 800b174:	fba2 2303 	umull	r2, r3, r2, r3
 800b178:	099a      	lsrs	r2, r3, #6
 800b17a:	4b9d      	ldr	r3, [pc, #628]	; (800b3f0 <topo_round_robin+0x520>)
 800b17c:	fba3 5302 	umull	r5, r3, r3, r2
 800b180:	099b      	lsrs	r3, r3, #6
 800b182:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b186:	fb05 f303 	mul.w	r3, r5, r3
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	441c      	add	r4, r3
 800b196:	4b93      	ldr	r3, [pc, #588]	; (800b3e4 <topo_round_robin+0x514>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	4613      	mov	r3, r2
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	441a      	add	r2, r3
 800b1a0:	4b93      	ldr	r3, [pc, #588]	; (800b3f0 <topo_round_robin+0x520>)
 800b1a2:	fba3 5302 	umull	r5, r3, r3, r2
 800b1a6:	099b      	lsrs	r3, r3, #6
 800b1a8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b1ac:	fb05 f303 	mul.w	r3, r5, r3
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	4423      	add	r3, r4
 800b1b6:	f04f 0400 	mov.w	r4, #0
 800b1ba:	181d      	adds	r5, r3, r0
 800b1bc:	eb44 0601 	adc.w	r6, r4, r1
 800b1c0:	498a      	ldr	r1, [pc, #552]	; (800b3ec <topo_round_robin+0x51c>)
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	186b      	adds	r3, r5, r1
 800b1c8:	eb46 0402 	adc.w	r4, r6, r2
 800b1cc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        SX1276WriteFIFO(Tx_Buffer, tx_payload_len);
 800b1d0:	4b88      	ldr	r3, [pc, #544]	; (800b3f4 <topo_round_robin+0x524>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4888      	ldr	r0, [pc, #544]	; (800b3f8 <topo_round_robin+0x528>)
 800b1d8:	f001 fe38 	bl	800ce4c <SX1276WriteFIFO>
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800b1dc:	21f7      	movs	r1, #247	; 0xf7
 800b1de:	2011      	movs	r0, #17
 800b1e0:	f001 fbee 	bl	800c9c0 <SX1276Write>
											RFLR_IRQFLAGS_VALIDHEADER |
											//RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );
        SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800b1e4:	2040      	movs	r0, #64	; 0x40
 800b1e6:	f001 fbfd 	bl	800c9e4 <SX1276Read>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1f2:	b25b      	sxtb	r3, r3
 800b1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f8:	b25b      	sxtb	r3, r3
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	2040      	movs	r0, #64	; 0x40
 800b200:	f001 fbde 	bl	800c9c0 <SX1276Write>

		SX1276Write( REG_LR_PAYLOADLENGTH, tx_payload_len );
 800b204:	4b7b      	ldr	r3, [pc, #492]	; (800b3f4 <topo_round_robin+0x524>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	4619      	mov	r1, r3
 800b20a:	2022      	movs	r0, #34	; 0x22
 800b20c:	f001 fbd8 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800b210:	2033      	movs	r0, #51	; 0x33
 800b212:	f001 fbe7 	bl	800c9e4 <SX1276Read>
 800b216:	4603      	mov	r3, r0
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	f043 0301 	orr.w	r3, r3, #1
 800b224:	b25b      	sxtb	r3, r3
 800b226:	b2db      	uxtb	r3, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	2033      	movs	r0, #51	; 0x33
 800b22c:	f001 fbc8 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800b230:	211d      	movs	r1, #29
 800b232:	203b      	movs	r0, #59	; 0x3b
 800b234:	f001 fbc4 	bl	800c9c0 <SX1276Write>
		// Full buffer used for Tx
		SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800b238:	2100      	movs	r1, #0
 800b23a:	200e      	movs	r0, #14
 800b23c:	f001 fbc0 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800b240:	2100      	movs	r1, #0
 800b242:	200d      	movs	r0, #13
 800b244:	f001 fbbc 	bl	800c9c0 <SX1276Write>

        while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 800b248:	bf00      	nop
 800b24a:	f000 fc07 	bl	800ba5c <gpi_tick_fast_extended>
 800b24e:	4603      	mov	r3, r0
 800b250:	460c      	mov	r4, r1
 800b252:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800b256:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b25a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b25e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b262:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b266:	1ac9      	subs	r1, r1, r3
 800b268:	eb62 0204 	sbc.w	r2, r2, r4
 800b26c:	460d      	mov	r5, r1
 800b26e:	4616      	mov	r6, r2
 800b270:	e9c7 5608 	strd	r5, r6, [r7, #32]
 800b274:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f174 0300 	sbcs.w	r3, r4, #0
 800b27e:	db08      	blt.n	800b292 <topo_round_robin+0x3c2>
 800b280:	6a3a      	ldr	r2, [r7, #32]
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	4313      	orrs	r3, r2
 800b286:	2b00      	cmp	r3, #0
 800b288:	bf14      	ite	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	2300      	moveq	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	e001      	b.n	800b296 <topo_round_robin+0x3c6>
 800b292:	f04f 33ff 	mov.w	r3, #4294967295
 800b296:	2b00      	cmp	r3, #0
 800b298:	dbd7      	blt.n	800b24a <topo_round_robin+0x37a>
        PRINTF("Topology---Tx\n");
 800b29a:	4858      	ldr	r0, [pc, #352]	; (800b3fc <topo_round_robin+0x52c>)
 800b29c:	f017 f80a 	bl	80222b4 <puts>
        SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 800b2a0:	2003      	movs	r0, #3
 800b2a2:	f001 fb15 	bl	800c8d0 <SX1276SetOpMode>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800b2a6:	4b56      	ldr	r3, [pc, #344]	; (800b400 <topo_round_robin+0x530>)
 800b2a8:	79db      	ldrb	r3, [r3, #7]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00d      	beq.n	800b2ca <topo_round_robin+0x3fa>
 800b2ae:	4b55      	ldr	r3, [pc, #340]	; (800b404 <topo_round_robin+0x534>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2b4:	4b54      	ldr	r3, [pc, #336]	; (800b408 <topo_round_robin+0x538>)
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	1ad2      	subs	r2, r2, r3
 800b2ba:	4b54      	ldr	r3, [pc, #336]	; (800b40c <topo_round_robin+0x53c>)
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	4413      	add	r3, r2
 800b2c0:	4a52      	ldr	r2, [pc, #328]	; (800b40c <topo_round_robin+0x53c>)
 800b2c2:	61d3      	str	r3, [r2, #28]
 800b2c4:	4b4e      	ldr	r3, [pc, #312]	; (800b400 <topo_round_robin+0x530>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	71da      	strb	r2, [r3, #7]
 800b2ca:	4b4e      	ldr	r3, [pc, #312]	; (800b404 <topo_round_robin+0x534>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
 800b2d0:	4a4d      	ldr	r2, [pc, #308]	; (800b408 <topo_round_robin+0x538>)
 800b2d2:	6393      	str	r3, [r2, #56]	; 0x38
 800b2d4:	4b4a      	ldr	r3, [pc, #296]	; (800b400 <topo_round_robin+0x530>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	739a      	strb	r2, [r3, #14]
        #endif
        tx_send_num++;
 800b2da:	4b4d      	ldr	r3, [pc, #308]	; (800b410 <topo_round_robin+0x540>)
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	4b4b      	ldr	r3, [pc, #300]	; (800b410 <topo_round_robin+0x540>)
 800b2e4:	801a      	strh	r2, [r3, #0]
        topology_state = TX_RUNNING;
 800b2e6:	4b4b      	ldr	r3, [pc, #300]	; (800b414 <topo_round_robin+0x544>)
 800b2e8:	220c      	movs	r2, #12
 800b2ea:	701a      	strb	r2, [r3, #0]
        deadline += GPI_TICK_US_TO_FAST2(round_length_us - packet_time_us * 3 - 1000000);
 800b2ec:	4b4a      	ldr	r3, [pc, #296]	; (800b418 <topo_round_robin+0x548>)
 800b2ee:	6819      	ldr	r1, [r3, #0]
 800b2f0:	4b3c      	ldr	r3, [pc, #240]	; (800b3e4 <topo_round_robin+0x514>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	4413      	add	r3, r2
 800b2fa:	1acb      	subs	r3, r1, r3
 800b2fc:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b300:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b304:	4a38      	ldr	r2, [pc, #224]	; (800b3e8 <topo_round_robin+0x518>)
 800b306:	fba2 2303 	umull	r2, r3, r2, r3
 800b30a:	0c9b      	lsrs	r3, r3, #18
 800b30c:	4a37      	ldr	r2, [pc, #220]	; (800b3ec <topo_round_robin+0x51c>)
 800b30e:	fb02 f103 	mul.w	r1, r2, r3
 800b312:	4b41      	ldr	r3, [pc, #260]	; (800b418 <topo_round_robin+0x548>)
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	4b33      	ldr	r3, [pc, #204]	; (800b3e4 <topo_round_robin+0x514>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4613      	mov	r3, r2
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	4413      	add	r3, r2
 800b320:	1ac3      	subs	r3, r0, r3
 800b322:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b326:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b32a:	4a31      	ldr	r2, [pc, #196]	; (800b3f0 <topo_round_robin+0x520>)
 800b32c:	fba2 2303 	umull	r2, r3, r2, r3
 800b330:	099a      	lsrs	r2, r3, #6
 800b332:	4b2f      	ldr	r3, [pc, #188]	; (800b3f0 <topo_round_robin+0x520>)
 800b334:	fba3 0302 	umull	r0, r3, r3, r2
 800b338:	099b      	lsrs	r3, r3, #6
 800b33a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b33e:	fb00 f303 	mul.w	r3, r0, r3
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	4419      	add	r1, r3
 800b34e:	4b32      	ldr	r3, [pc, #200]	; (800b418 <topo_round_robin+0x548>)
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	4b24      	ldr	r3, [pc, #144]	; (800b3e4 <topo_round_robin+0x514>)
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	4613      	mov	r3, r2
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	4413      	add	r3, r2
 800b35c:	1ac3      	subs	r3, r0, r3
 800b35e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b362:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b366:	4a22      	ldr	r2, [pc, #136]	; (800b3f0 <topo_round_robin+0x520>)
 800b368:	fba2 0203 	umull	r0, r2, r2, r3
 800b36c:	0992      	lsrs	r2, r2, #6
 800b36e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b372:	fb00 f202 	mul.w	r2, r0, r2
 800b376:	1a9a      	subs	r2, r3, r2
 800b378:	0113      	lsls	r3, r2, #4
 800b37a:	440b      	add	r3, r1
 800b37c:	461d      	mov	r5, r3
 800b37e:	f04f 0600 	mov.w	r6, #0
 800b382:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b386:	186b      	adds	r3, r5, r1
 800b388:	eb46 0402 	adc.w	r4, r6, r2
 800b38c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        while(1)
        {
            if (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) >= 0)
 800b390:	f000 fb64 	bl	800ba5c <gpi_tick_fast_extended>
 800b394:	4603      	mov	r3, r0
 800b396:	460c      	mov	r4, r1
 800b398:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b39c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b3a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800b3a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b3a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b3ac:	1ac9      	subs	r1, r1, r3
 800b3ae:	eb62 0204 	sbc.w	r2, r2, r4
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	e9c7 5604 	strd	r5, r6, [r7, #16]
 800b3ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f174 0300 	sbcs.w	r3, r4, #0
 800b3c4:	db08      	blt.n	800b3d8 <topo_round_robin+0x508>
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bf14      	ite	ne
 800b3d0:	2301      	movne	r3, #1
 800b3d2:	2300      	moveq	r3, #0
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	e001      	b.n	800b3dc <topo_round_robin+0x50c>
 800b3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	da1d      	bge.n	800b41c <topo_round_robin+0x54c>
 800b3e0:	e7d6      	b.n	800b390 <topo_round_robin+0x4c0>
 800b3e2:	bf00      	nop
 800b3e4:	20000d64 	.word	0x20000d64
 800b3e8:	431bde83 	.word	0x431bde83
 800b3ec:	00f42400 	.word	0x00f42400
 800b3f0:	10624dd3 	.word	0x10624dd3
 800b3f4:	20000361 	.word	0x20000361
 800b3f8:	20000d6c 	.word	0x20000d6c
 800b3fc:	0802539c 	.word	0x0802539c
 800b400:	2000112c 	.word	0x2000112c
 800b404:	200012c8 	.word	0x200012c8
 800b408:	20001308 	.word	0x20001308
 800b40c:	20000f10 	.word	0x20000f10
 800b410:	20000e38 	.word	0x20000e38
 800b414:	20000d68 	.word	0x20000d68
 800b418:	20000364 	.word	0x20000364
                break;
 800b41c:	bf00      	nop
 800b41e:	4b18      	ldr	r3, [pc, #96]	; (800b480 <topo_round_robin+0x5b0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 800b424:	4a17      	ldr	r2, [pc, #92]	; (800b484 <topo_round_robin+0x5b4>)
 800b426:	61d3      	str	r3, [r2, #28]
 800b428:	4b17      	ldr	r3, [pc, #92]	; (800b488 <topo_round_robin+0x5b8>)
 800b42a:	2201      	movs	r2, #1
 800b42c:	71da      	strb	r2, [r3, #7]
            ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 800b42e:	4b16      	ldr	r3, [pc, #88]	; (800b488 <topo_round_robin+0x5b8>)
 800b430:	7b9b      	ldrb	r3, [r3, #14]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00d      	beq.n	800b452 <topo_round_robin+0x582>
 800b436:	4b12      	ldr	r3, [pc, #72]	; (800b480 <topo_round_robin+0x5b0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b43c:	4b11      	ldr	r3, [pc, #68]	; (800b484 <topo_round_robin+0x5b4>)
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	1ad2      	subs	r2, r2, r3
 800b442:	4b12      	ldr	r3, [pc, #72]	; (800b48c <topo_round_robin+0x5bc>)
 800b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b446:	4413      	add	r3, r2
 800b448:	4a10      	ldr	r2, [pc, #64]	; (800b48c <topo_round_robin+0x5bc>)
 800b44a:	6393      	str	r3, [r2, #56]	; 0x38
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <topo_round_robin+0x5b8>)
 800b44e:	2200      	movs	r2, #0
 800b450:	739a      	strb	r2, [r3, #14]
        #endif
    }
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <topo_round_robin+0x5b0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f06f 0202 	mvn.w	r2, #2
 800b45a:	611a      	str	r2, [r3, #16]
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800b45c:	4b08      	ldr	r3, [pc, #32]	; (800b480 <topo_round_robin+0x5b0>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	68da      	ldr	r2, [r3, #12]
 800b462:	4b07      	ldr	r3, [pc, #28]	; (800b480 <topo_round_robin+0x5b0>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f022 0202 	bic.w	r2, r2, #2
 800b46a:	60da      	str	r2, [r3, #12]
    SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800b46c:	2000      	movs	r0, #0
 800b46e:	f001 fa2f 	bl	800c8d0 <SX1276SetOpMode>
    return deadline;
 800b472:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
}
 800b476:	4618      	mov	r0, r3
 800b478:	4621      	mov	r1, r4
 800b47a:	373c      	adds	r7, #60	; 0x3c
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b480:	200012c8 	.word	0x200012c8
 800b484:	20001308 	.word	0x20001308
 800b488:	2000112c 	.word	0x2000112c
 800b48c:	20000f10 	.word	0x20000f10

0800b490 <topo_result>:

void topo_result(uint8_t nodes_num)
{
 800b490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b494:	b08b      	sub	sp, #44	; 0x2c
 800b496:	af00      	add	r7, sp, #0
 800b498:	4603      	mov	r3, r0
 800b49a:	71fb      	strb	r3, [r7, #7]
 800b49c:	466b      	mov	r3, sp
 800b49e:	461e      	mov	r6, r3
    gpi_watchdog_periodic();
 800b4a0:	f002 fe52 	bl	800e148 <gpi_watchdog_periodic>
    uint8_t i;
    /* 64 bit length */
    uint32_t topo_result[((nodes_num + 1) / 2) * 2];
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	0fda      	lsrs	r2, r3, #31
 800b4aa:	4413      	add	r3, r2
 800b4ac:	105b      	asrs	r3, r3, #1
 800b4ae:	005d      	lsls	r5, r3, #1
 800b4b0:	1e6b      	subs	r3, r5, #1
 800b4b2:	623b      	str	r3, [r7, #32]
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	f04f 0300 	mov.w	r3, #0
 800b4c0:	f04f 0400 	mov.w	r4, #0
 800b4c4:	0154      	lsls	r4, r2, #5
 800b4c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4ca:	014b      	lsls	r3, r1, #5
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	f04f 0300 	mov.w	r3, #0
 800b4d8:	f04f 0400 	mov.w	r4, #0
 800b4dc:	0154      	lsls	r4, r2, #5
 800b4de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4e2:	014b      	lsls	r3, r1, #5
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	3303      	adds	r3, #3
 800b4ea:	3307      	adds	r3, #7
 800b4ec:	08db      	lsrs	r3, r3, #3
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	ebad 0d03 	sub.w	sp, sp, r3
 800b4f4:	466b      	mov	r3, sp
 800b4f6:	3303      	adds	r3, #3
 800b4f8:	089b      	lsrs	r3, r3, #2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	61fb      	str	r3, [r7, #28]
    memset(topo_result, 0, sizeof(topo_result));
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	462a      	mov	r2, r5
 800b502:	0092      	lsls	r2, r2, #2
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f016 f83f 	bl	802158a <memset>

    for ( i = 0; i < nodes_num; i++)
 800b50c:	2300      	movs	r3, #0
 800b50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b512:	e058      	b.n	800b5c6 <topo_result+0x136>
    {
        uint32_t reliability = (uint32_t)((node_topology[i].rx_num * 1e4) / (uint32_t)(tx_num_max));
 800b514:	4b50      	ldr	r3, [pc, #320]	; (800b658 <topo_result+0x1c8>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4413      	add	r3, r2
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	4618      	mov	r0, r3
 800b524:	f7f5 f808 	bl	8000538 <__aeabi_i2d>
 800b528:	a349      	add	r3, pc, #292	; (adr r3, 800b650 <topo_result+0x1c0>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	f7f5 f86d 	bl	800060c <__aeabi_dmul>
 800b532:	4603      	mov	r3, r0
 800b534:	460c      	mov	r4, r1
 800b536:	4698      	mov	r8, r3
 800b538:	46a1      	mov	r9, r4
 800b53a:	4b48      	ldr	r3, [pc, #288]	; (800b65c <topo_result+0x1cc>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7f4 ffea 	bl	8000518 <__aeabi_ui2d>
 800b544:	4603      	mov	r3, r0
 800b546:	460c      	mov	r4, r1
 800b548:	461a      	mov	r2, r3
 800b54a:	4623      	mov	r3, r4
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f5 f986 	bl	8000860 <__aeabi_ddiv>
 800b554:	4603      	mov	r3, r0
 800b556:	460c      	mov	r4, r1
 800b558:	4618      	mov	r0, r3
 800b55a:	4621      	mov	r1, r4
 800b55c:	f7f5 fb2e 	bl	8000bbc <__aeabi_d2uiz>
 800b560:	4603      	mov	r3, r0
 800b562:	617b      	str	r3, [r7, #20]
        node_topology[i].reliability = reliability;
 800b564:	4b3c      	ldr	r3, [pc, #240]	; (800b658 <topo_result+0x1c8>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	b292      	uxth	r2, r2
 800b574:	805a      	strh	r2, [r3, #2]
        topo_result[i] = (uint8_t)i | (uint32_t)node_topology[i].reliability << 16;
 800b576:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800b57a:	4b37      	ldr	r3, [pc, #220]	; (800b658 <topo_result+0x1c8>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	885b      	ldrh	r3, [r3, #2]
 800b588:	041b      	lsls	r3, r3, #16
 800b58a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b58e:	4319      	orrs	r1, r3
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        PRINTF("r:%d, %d, %x\n", i, node_topology[i].reliability, topo_result[i]);
 800b596:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800b59a:	4b2f      	ldr	r3, [pc, #188]	; (800b658 <topo_result+0x1c8>)
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	885b      	ldrh	r3, [r3, #2]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	482a      	ldr	r0, [pc, #168]	; (800b660 <topo_result+0x1d0>)
 800b5b8:	f016 fdf4 	bl	80221a4 <iprintf>
    for ( i = 0; i < nodes_num; i++)
 800b5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d3a1      	bcc.n	800b514 <topo_result+0x84>
    }

    uint8_t temp_raw = SX1276GetRawTemp();
 800b5d0:	f001 fdfa 	bl	800d1c8 <SX1276GetRawTemp>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	76fb      	strb	r3, [r7, #27]
    uint32_t temp_flash[2];
    temp_flash[0] = (uint32_t)(temp_raw);
 800b5d8:	7efb      	ldrb	r3, [r7, #27]
 800b5da:	60fb      	str	r3, [r7, #12]

    #if MX_FLASH_FILE
        // menu_preSend(0);
        FLASH_If_Erase_Pages(1, 255);
 800b5dc:	21ff      	movs	r1, #255	; 0xff
 800b5de:	2001      	movs	r0, #1
 800b5e0:	f010 ff2c 	bl	801c43c <FLASH_If_Erase_Pages>
        FLASH_If_Write(TOPO_FLASH_ADDRESS, (uint32_t *)(topo_result), sizeof(topo_result) / sizeof(uint32_t));
 800b5e4:	69f9      	ldr	r1, [r7, #28]
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	089b      	lsrs	r3, r3, #2
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	481d      	ldr	r0, [pc, #116]	; (800b664 <topo_result+0x1d4>)
 800b5f0:	f010 ffa8 	bl	801c544 <FLASH_If_Write>
        FLASH_If_Write(TOPO_FLASH_ADDRESS + sizeof(topo_result) + 8, (uint32_t *)(temp_flash), sizeof(temp_flash) / sizeof(uint32_t));
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4b1c      	ldr	r3, [pc, #112]	; (800b668 <topo_result+0x1d8>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	f107 010c 	add.w	r1, r7, #12
 800b600:	2202      	movs	r2, #2
 800b602:	4618      	mov	r0, r3
 800b604:	f010 ff9e 	bl	801c544 <FLASH_If_Write>
        memcpy(topo_result, (uint32_t *)(node_topology_link), nodes_num * sizeof(Topology_result_link));
 800b608:	69f8      	ldr	r0, [r7, #28]
 800b60a:	4b18      	ldr	r3, [pc, #96]	; (800b66c <topo_result+0x1dc>)
 800b60c:	6819      	ldr	r1, [r3, #0]
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	461a      	mov	r2, r3
 800b614:	f015 ffae 	bl	8021574 <memcpy>
        FLASH_If_Write(TOPO_FLASH_ADDRESS + sizeof(topo_result) + 8 + sizeof(temp_flash), (uint32_t *)(topo_result), sizeof(topo_result) / sizeof(uint32_t));
 800b618:	462a      	mov	r2, r5
 800b61a:	4b15      	ldr	r3, [pc, #84]	; (800b670 <topo_result+0x1e0>)
 800b61c:	4413      	add	r3, r2
 800b61e:	0098      	lsls	r0, r3, #2
 800b620:	69f9      	ldr	r1, [r7, #28]
 800b622:	462b      	mov	r3, r5
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	089b      	lsrs	r3, r3, #2
 800b628:	461a      	mov	r2, r3
 800b62a:	f010 ff8b 	bl	801c544 <FLASH_If_Write>
    #endif

    free(node_topology);
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <topo_result+0x1c8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f015 ff96 	bl	8021564 <free>
    free(node_topology_link);
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <topo_result+0x1dc>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f015 ff91 	bl	8021564 <free>
 800b642:	46b5      	mov	sp, r6
}
 800b644:	bf00      	nop
 800b646:	372c      	adds	r7, #44	; 0x2c
 800b648:	46bd      	mov	sp, r7
 800b64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b64e:	bf00      	nop
 800b650:	00000000 	.word	0x00000000
 800b654:	40c38800 	.word	0x40c38800
 800b658:	20000e3c 	.word	0x20000e3c
 800b65c:	20000360 	.word	0x20000360
 800b660:	080253ac 	.word	0x080253ac
 800b664:	0807f800 	.word	0x0807f800
 800b668:	0201fe02 	.word	0x0201fe02
 800b66c:	20000e34 	.word	0x20000e34
 800b670:	0201fe04 	.word	0x0201fe04

0800b674 <topo_dio0_isr>:

void topo_dio0_isr()
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08c      	sub	sp, #48	; 0x30
 800b678:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800b67a:	f002 fd65 	bl	800e148 <gpi_watchdog_periodic>
    /* must be periodically called */
    gpi_tick_hybrid_reference();
 800b67e:	463b      	mov	r3, r7
 800b680:	4618      	mov	r0, r3
 800b682:	f000 fa2d 	bl	800bae0 <gpi_tick_hybrid_reference>

    if (topology_state == RX_RUNNING)
 800b686:	4b9d      	ldr	r3, [pc, #628]	; (800b8fc <topo_dio0_isr+0x288>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b10      	cmp	r3, #16
 800b68c:	f040 8103 	bne.w	800b896 <topo_dio0_isr+0x222>
 800b690:	2300      	movs	r3, #0
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
//**************************************************************************************************
//***** Implementations of Inline Functions ********************************************************

static ALWAYS_INLINE void gpi_led_on(int mask)
{
	if (mask)
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <topo_dio0_isr+0x2c>
		LED_GPIO_Port->BSRR = mask;
 800b69a:	4a99      	ldr	r2, [pc, #612]	; (800b900 <topo_dio0_isr+0x28c>)
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	6193      	str	r3, [r2, #24]
    {
        gpi_led_on(GPI_LED_1);
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800b6a0:	2140      	movs	r1, #64	; 0x40
 800b6a2:	2012      	movs	r0, #18
 800b6a4:	f001 f98c 	bl	800c9c0 <SX1276Write>
        volatile uint8_t packet_len = (uint8_t)SX1276Read( REG_LR_RXNBBYTES );
 800b6a8:	2013      	movs	r0, #19
 800b6aa:	f001 f99b 	bl	800c9e4 <SX1276Read>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	73fb      	strb	r3, [r7, #15]
        volatile uint8_t irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800b6b2:	2012      	movs	r0, #18
 800b6b4:	f001 f996 	bl	800c9e4 <SX1276Read>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73bb      	strb	r3, [r7, #14]
        if(( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) != RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800b6bc:	7bbb      	ldrb	r3, [r7, #14]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	f000 80cd 	beq.w	800b864 <topo_dio0_isr+0x1f0>
        {
            memset(Rx_Buffer, 0, BUFFER_SIZE);
 800b6ca:	22c8      	movs	r2, #200	; 0xc8
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	488d      	ldr	r0, [pc, #564]	; (800b904 <topo_dio0_isr+0x290>)
 800b6d0:	f015 ff5b 	bl	802158a <memset>
            // read rx packet from start address (in data buffer) of last packet received
            SX1276Write(REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800b6d4:	2010      	movs	r0, #16
 800b6d6:	f001 f985 	bl	800c9e4 <SX1276Read>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4619      	mov	r1, r3
 800b6de:	200d      	movs	r0, #13
 800b6e0:	f001 f96e 	bl	800c9c0 <SX1276Write>
            SX1276ReadFifo(Rx_Buffer, packet_len );
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4886      	ldr	r0, [pc, #536]	; (800b904 <topo_dio0_isr+0x290>)
 800b6ec:	f001 fa02 	bl	800caf4 <SX1276ReadFifo>
            uint16_t topo_hash_rx = Chirp_RSHash((uint8_t *)&(Rx_Buffer[0]), 2);
 800b6f0:	2102      	movs	r1, #2
 800b6f2:	4884      	ldr	r0, [pc, #528]	; (800b904 <topo_dio0_isr+0x290>)
 800b6f4:	f013 fb7e 	bl	801edf4 <Chirp_RSHash>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	857b      	strh	r3, [r7, #42]	; 0x2a
            if ((topo_hash_rx == Rx_Buffer[2] >> 8) | (Rx_Buffer[3]))
 800b6fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b6fe:	4b81      	ldr	r3, [pc, #516]	; (800b904 <topo_dio0_isr+0x290>)
 800b700:	789b      	ldrb	r3, [r3, #2]
 800b702:	121b      	asrs	r3, r3, #8
 800b704:	429a      	cmp	r2, r3
 800b706:	bf0c      	ite	eq
 800b708:	2301      	moveq	r3, #1
 800b70a:	2300      	movne	r3, #0
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	461a      	mov	r2, r3
 800b710:	4b7c      	ldr	r3, [pc, #496]	; (800b904 <topo_dio0_isr+0x290>)
 800b712:	78db      	ldrb	r3, [r3, #3]
 800b714:	4313      	orrs	r3, r2
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 809d 	beq.w	800b856 <topo_dio0_isr+0x1e2>
            {
                // count++;
                rx_receive_num++;
 800b71c:	4b7a      	ldr	r3, [pc, #488]	; (800b908 <topo_dio0_isr+0x294>)
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	b29a      	uxth	r2, r3
 800b724:	4b78      	ldr	r3, [pc, #480]	; (800b908 <topo_dio0_isr+0x294>)
 800b726:	801a      	strh	r2, [r3, #0]

                // Returns SNR value [dB] rounded to the nearest integer value
                SnrValue = (((int8_t)SX1276Read(REG_LR_PKTSNRVALUE)) + 2) >> 2;
 800b728:	2019      	movs	r0, #25
 800b72a:	f001 f95b 	bl	800c9e4 <SX1276Read>
 800b72e:	4603      	mov	r3, r0
 800b730:	b25b      	sxtb	r3, r3
 800b732:	3302      	adds	r3, #2
 800b734:	109b      	asrs	r3, r3, #2
 800b736:	b25a      	sxtb	r2, r3
 800b738:	4b74      	ldr	r3, [pc, #464]	; (800b90c <topo_dio0_isr+0x298>)
 800b73a:	701a      	strb	r2, [r3, #0]
                rssi_link = SX1276Read(REG_LR_PKTRSSIVALUE);
 800b73c:	201a      	movs	r0, #26
 800b73e:	f001 f951 	bl	800c9e4 <SX1276Read>
 800b742:	4603      	mov	r3, r0
 800b744:	b21a      	sxth	r2, r3
 800b746:	4b72      	ldr	r3, [pc, #456]	; (800b910 <topo_dio0_isr+0x29c>)
 800b748:	801a      	strh	r2, [r3, #0]

                if (SnrValue < 0)
 800b74a:	4b70      	ldr	r3, [pc, #448]	; (800b90c <topo_dio0_isr+0x298>)
 800b74c:	f993 3000 	ldrsb.w	r3, [r3]
 800b750:	2b00      	cmp	r3, #0
 800b752:	da35      	bge.n	800b7c0 <topo_dio0_isr+0x14c>
                {
                    if (chirp_config.lora_freq > RF_MID_BAND_THRESH)
 800b754:	4b6f      	ldr	r3, [pc, #444]	; (800b914 <topo_dio0_isr+0x2a0>)
 800b756:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800b75a:	4a6f      	ldr	r2, [pc, #444]	; (800b918 <topo_dio0_isr+0x2a4>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d917      	bls.n	800b790 <topo_dio0_isr+0x11c>
                        RssiValue_link = RSSI_OFFSET_HF + rssi_link + (rssi_link >> 4) + SnrValue;
 800b760:	4b6b      	ldr	r3, [pc, #428]	; (800b910 <topo_dio0_isr+0x29c>)
 800b762:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b766:	111b      	asrs	r3, r3, #4
 800b768:	b21b      	sxth	r3, r3
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	4b68      	ldr	r3, [pc, #416]	; (800b910 <topo_dio0_isr+0x29c>)
 800b76e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b772:	b29b      	uxth	r3, r3
 800b774:	4413      	add	r3, r2
 800b776:	b29a      	uxth	r2, r3
 800b778:	4b64      	ldr	r3, [pc, #400]	; (800b90c <topo_dio0_isr+0x298>)
 800b77a:	f993 3000 	ldrsb.w	r3, [r3]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	4413      	add	r3, r2
 800b782:	b29b      	uxth	r3, r3
 800b784:	3b9d      	subs	r3, #157	; 0x9d
 800b786:	b29b      	uxth	r3, r3
 800b788:	b21a      	sxth	r2, r3
 800b78a:	4b64      	ldr	r3, [pc, #400]	; (800b91c <topo_dio0_isr+0x2a8>)
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e040      	b.n	800b812 <topo_dio0_isr+0x19e>
                    else
                        RssiValue_link = RSSI_OFFSET_LF + rssi_link + (rssi_link >> 4) + SnrValue;
 800b790:	4b5f      	ldr	r3, [pc, #380]	; (800b910 <topo_dio0_isr+0x29c>)
 800b792:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b796:	111b      	asrs	r3, r3, #4
 800b798:	b21b      	sxth	r3, r3
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	4b5c      	ldr	r3, [pc, #368]	; (800b910 <topo_dio0_isr+0x29c>)
 800b79e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	4b58      	ldr	r3, [pc, #352]	; (800b90c <topo_dio0_isr+0x298>)
 800b7aa:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3ba4      	subs	r3, #164	; 0xa4
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	b21a      	sxth	r2, r3
 800b7ba:	4b58      	ldr	r3, [pc, #352]	; (800b91c <topo_dio0_isr+0x2a8>)
 800b7bc:	801a      	strh	r2, [r3, #0]
 800b7be:	e028      	b.n	800b812 <topo_dio0_isr+0x19e>
                }
                else
                {
                    if (chirp_config.lora_freq > RF_MID_BAND_THRESH)
 800b7c0:	4b54      	ldr	r3, [pc, #336]	; (800b914 <topo_dio0_isr+0x2a0>)
 800b7c2:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800b7c6:	4a54      	ldr	r2, [pc, #336]	; (800b918 <topo_dio0_isr+0x2a4>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d911      	bls.n	800b7f0 <topo_dio0_isr+0x17c>
                        RssiValue_link = RSSI_OFFSET_HF + rssi_link + (rssi_link >> 4);
 800b7cc:	4b50      	ldr	r3, [pc, #320]	; (800b910 <topo_dio0_isr+0x29c>)
 800b7ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7d2:	111b      	asrs	r3, r3, #4
 800b7d4:	b21b      	sxth	r3, r3
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	4b4d      	ldr	r3, [pc, #308]	; (800b910 <topo_dio0_isr+0x29c>)
 800b7da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	3b9d      	subs	r3, #157	; 0x9d
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	b21a      	sxth	r2, r3
 800b7ea:	4b4c      	ldr	r3, [pc, #304]	; (800b91c <topo_dio0_isr+0x2a8>)
 800b7ec:	801a      	strh	r2, [r3, #0]
 800b7ee:	e010      	b.n	800b812 <topo_dio0_isr+0x19e>
                    else
                        RssiValue_link = RSSI_OFFSET_LF + rssi_link + (rssi_link >> 4);
 800b7f0:	4b47      	ldr	r3, [pc, #284]	; (800b910 <topo_dio0_isr+0x29c>)
 800b7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7f6:	111b      	asrs	r3, r3, #4
 800b7f8:	b21b      	sxth	r3, r3
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	4b44      	ldr	r3, [pc, #272]	; (800b910 <topo_dio0_isr+0x29c>)
 800b7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b802:	b29b      	uxth	r3, r3
 800b804:	4413      	add	r3, r2
 800b806:	b29b      	uxth	r3, r3
 800b808:	3ba4      	subs	r3, #164	; 0xa4
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	b21a      	sxth	r2, r3
 800b80e:	4b43      	ldr	r3, [pc, #268]	; (800b91c <topo_dio0_isr+0x2a8>)
 800b810:	801a      	strh	r2, [r3, #0]
                }
                node_topology_link[Rx_Buffer[0]-1].snr_link = SnrValue;
 800b812:	4b3e      	ldr	r3, [pc, #248]	; (800b90c <topo_dio0_isr+0x298>)
 800b814:	f993 1000 	ldrsb.w	r1, [r3]
 800b818:	4b41      	ldr	r3, [pc, #260]	; (800b920 <topo_dio0_isr+0x2ac>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	4b39      	ldr	r3, [pc, #228]	; (800b904 <topo_dio0_isr+0x290>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b824:	3b01      	subs	r3, #1
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	b20a      	sxth	r2, r1
 800b82c:	801a      	strh	r2, [r3, #0]
                node_topology_link[Rx_Buffer[0]-1].rssi_link = RssiValue_link;
 800b82e:	4b3c      	ldr	r3, [pc, #240]	; (800b920 <topo_dio0_isr+0x2ac>)
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b34      	ldr	r3, [pc, #208]	; (800b904 <topo_dio0_isr+0x290>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b83a:	3b01      	subs	r3, #1
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	4a36      	ldr	r2, [pc, #216]	; (800b91c <topo_dio0_isr+0x2a8>)
 800b842:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b846:	805a      	strh	r2, [r3, #2]
                // printf("rx-----------:%d, %d, %lu\n", SnrValue, RssiValue_link, Rx_Buffer[0]-1);

                PRINTF("RX: %d\n", rx_receive_num);
 800b848:	4b2f      	ldr	r3, [pc, #188]	; (800b908 <topo_dio0_isr+0x294>)
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	4619      	mov	r1, r3
 800b84e:	4835      	ldr	r0, [pc, #212]	; (800b924 <topo_dio0_isr+0x2b0>)
 800b850:	f016 fca8 	bl	80221a4 <iprintf>
 800b854:	e010      	b.n	800b878 <topo_dio0_isr+0x204>
            }
            else
            {
                PRINTF("crc: %d\n", rx_receive_num);
 800b856:	4b2c      	ldr	r3, [pc, #176]	; (800b908 <topo_dio0_isr+0x294>)
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	4832      	ldr	r0, [pc, #200]	; (800b928 <topo_dio0_isr+0x2b4>)
 800b85e:	f016 fca1 	bl	80221a4 <iprintf>
 800b862:	e009      	b.n	800b878 <topo_dio0_isr+0x204>
            }
        }
        else
        {
			SX1276Write(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR);
 800b864:	2120      	movs	r1, #32
 800b866:	2012      	movs	r0, #18
 800b868:	f001 f8aa 	bl	800c9c0 <SX1276Write>
            PRINTF("RX wrong: %d\n", rx_receive_num);
 800b86c:	4b26      	ldr	r3, [pc, #152]	; (800b908 <topo_dio0_isr+0x294>)
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	4619      	mov	r1, r3
 800b872:	482e      	ldr	r0, [pc, #184]	; (800b92c <topo_dio0_isr+0x2b8>)
 800b874:	f016 fc96 	bl	80221a4 <iprintf>
        }
        SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800b878:	2000      	movs	r0, #0
 800b87a:	f001 f829 	bl	800c8d0 <SX1276SetOpMode>
        SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800b87e:	2005      	movs	r0, #5
 800b880:	f001 f826 	bl	800c8d0 <SX1276SetOpMode>
 800b884:	2300      	movs	r3, #0
 800b886:	623b      	str	r3, [r7, #32]
}

static ALWAYS_INLINE void gpi_led_off(int mask)
{
	if (mask)
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d073      	beq.n	800b976 <topo_dio0_isr+0x302>
		LED_GPIO_Port->BRR = mask;
 800b88e:	4a1c      	ldr	r2, [pc, #112]	; (800b900 <topo_dio0_isr+0x28c>)
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	6293      	str	r3, [r2, #40]	; 0x28
            tx_send_num++;
            topology_state = TX_RUNNING;
        }
        gpi_led_off(GPI_LED_2);
    }
}
 800b894:	e06f      	b.n	800b976 <topo_dio0_isr+0x302>
    else if (topology_state == TX_RUNNING)
 800b896:	4b19      	ldr	r3, [pc, #100]	; (800b8fc <topo_dio0_isr+0x288>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b0c      	cmp	r3, #12
 800b89c:	d16b      	bne.n	800b976 <topo_dio0_isr+0x302>
        PRINTF("TXDONE\n");
 800b89e:	4824      	ldr	r0, [pc, #144]	; (800b930 <topo_dio0_isr+0x2bc>)
 800b8a0:	f016 fd08 	bl	80222b4 <puts>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
	if (mask)
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <topo_dio0_isr+0x240>
		LED_GPIO_Port->BSRR = mask;
 800b8ae:	4a14      	ldr	r2, [pc, #80]	; (800b900 <topo_dio0_isr+0x28c>)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	6193      	str	r3, [r2, #24]
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800b8b4:	2108      	movs	r1, #8
 800b8b6:	2012      	movs	r0, #18
 800b8b8:	f001 f882 	bl	800c9c0 <SX1276Write>
        topology_state = 0;
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <topo_dio0_isr+0x288>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
 800b8c2:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <topo_dio0_isr+0x2c0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        Gpi_Fast_Tick_Native tx_interval = gpi_tick_fast_native() + GPI_TICK_US_TO_FAST2(10000);
 800b8c8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800b8cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), tx_interval) < 0);
 800b8d2:	bf00      	nop
 800b8d4:	4b17      	ldr	r3, [pc, #92]	; (800b934 <topo_dio0_isr+0x2c0>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	61bb      	str	r3, [r7, #24]
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	617b      	str	r3, [r7, #20]
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	61bb      	str	r3, [r7, #24]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	db24      	blt.n	800b938 <topo_dio0_isr+0x2c4>
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	bf14      	ite	ne
 800b8f4:	2301      	movne	r3, #1
 800b8f6:	2300      	moveq	r3, #0
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	e01f      	b.n	800b93c <topo_dio0_isr+0x2c8>
 800b8fc:	20000d68 	.word	0x20000d68
 800b900:	48000800 	.word	0x48000800
 800b904:	20000e44 	.word	0x20000e44
 800b908:	20000e40 	.word	0x20000e40
 800b90c:	20000370 	.word	0x20000370
 800b910:	20000e42 	.word	0x20000e42
 800b914:	20001430 	.word	0x20001430
 800b918:	1f4add40 	.word	0x1f4add40
 800b91c:	20000f0c 	.word	0x20000f0c
 800b920:	20000e34 	.word	0x20000e34
 800b924:	080253bc 	.word	0x080253bc
 800b928:	080253c4 	.word	0x080253c4
 800b92c:	080253d0 	.word	0x080253d0
 800b930:	080253e0 	.word	0x080253e0
 800b934:	200012c8 	.word	0x200012c8
 800b938:	f04f 33ff 	mov.w	r3, #4294967295
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dbc9      	blt.n	800b8d4 <topo_dio0_isr+0x260>
        if (tx_send_num < tx_num_max)
 800b940:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <topo_dio0_isr+0x30c>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	b29a      	uxth	r2, r3
 800b946:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <topo_dio0_isr+0x310>)
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d90b      	bls.n	800b966 <topo_dio0_isr+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 800b94e:	2003      	movs	r0, #3
 800b950:	f000 ffbe 	bl	800c8d0 <SX1276SetOpMode>
            tx_send_num++;
 800b954:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <topo_dio0_isr+0x310>)
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	4b09      	ldr	r3, [pc, #36]	; (800b984 <topo_dio0_isr+0x310>)
 800b95e:	801a      	strh	r2, [r3, #0]
            topology_state = TX_RUNNING;
 800b960:	4b09      	ldr	r3, [pc, #36]	; (800b988 <topo_dio0_isr+0x314>)
 800b962:	220c      	movs	r2, #12
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	613b      	str	r3, [r7, #16]
	if (mask)
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <topo_dio0_isr+0x302>
		LED_GPIO_Port->BRR = mask;
 800b970:	4a06      	ldr	r2, [pc, #24]	; (800b98c <topo_dio0_isr+0x318>)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b976:	bf00      	nop
 800b978:	3730      	adds	r7, #48	; 0x30
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000360 	.word	0x20000360
 800b984:	20000e38 	.word	0x20000e38
 800b988:	20000d68 	.word	0x20000d68
 800b98c:	48000800 	.word	0x48000800

0800b990 <topo_main_timer_isr>:

void topo_main_timer_isr()
{
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800b994:	f002 fbd8 	bl	800e148 <gpi_watchdog_periodic>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800b998:	4b10      	ldr	r3, [pc, #64]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0202 	mvn.w	r2, #2
 800b9a0:	611a      	str	r2, [r3, #16]
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800b9a2:	4b0e      	ldr	r3, [pc, #56]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f022 0202 	bic.w	r2, r2, #2
 800b9b0:	60da      	str	r2, [r3, #12]
    MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(16000000);
 800b9b2:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	4a08      	ldr	r2, [pc, #32]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	f103 6374 	add.w	r3, r3, #255852544	; 0xf400000
 800b9c0:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 800b9c4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	4b03      	ldr	r3, [pc, #12]	; (800b9dc <topo_main_timer_isr+0x4c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f042 0202 	orr.w	r2, r2, #2
 800b9d4:	60da      	str	r2, [r3, #12]
}
 800b9d6:	bf00      	nop
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200012c8 	.word	0x200012c8

0800b9e0 <gpi_tick_slow_extended>:

// 	return o.u32;
// }

Gpi_Slow_Tick_Extended gpi_tick_slow_extended()
{
 800b9e0:	b4f0      	push	{r4, r5, r6, r7}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0

	REORDER_BARRIER();

	// NOTE: We do not use CMSIS functions at this point to avoid spill code in debug builds.
	// This may be a matter of taste (it is not absolutely necessary if performance is secondary).
	__ASM volatile
 800b9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ea:	b672      	cpsid	i
 800b9ec:	461d      	mov	r5, r3
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800b9ee:	f3bf 8f5f 	dmb	sy
	);

	REORDER_BARRIER();
	__DMB();

	return ie;
 800b9f2:	462b      	mov	r3, r5
	// TODO: check how the function is used and decide if we can remove the int-lock or
	// provide and unlocked version (using the same static variables)
	// ATTENTION: int-lock makes the function reentrant; it is not without the int-lock.
	// Maybe it is possible to use a marker to avoid nested updates, e.g. the LSB of s.last.

	int ie = gpi_int_lock();
 800b9f4:	60fb      	str	r3, [r7, #12]
		a = hlptim1.Instance->CNT;
 800b9f6:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <gpi_tick_slow_extended+0x74>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	b29d      	uxth	r5, r3
		b = hlptim1.Instance->CNT;
 800b9fe:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <gpi_tick_slow_extended+0x74>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	b29e      	uxth	r6, r3
	while (a != b);
 800ba06:	42b5      	cmp	r5, r6
 800ba08:	d1f5      	bne.n	800b9f6 <gpi_tick_slow_extended+0x16>
	return a;
 800ba0a:	462b      	mov	r3, r5

	o.u16_l = gpi_tick_slow_native();
 800ba0c:	f363 040f 	bfi	r4, r3, #0, #16

	// extend format
	// ATTENTION: function has to be called periodically at least once per 0xFFFF ticks,
	// otherwise it will loose ticks in high part
	if (o.u16_l < s.last)
 800ba10:	b2a2      	uxth	r2, r4
 800ba12:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <gpi_tick_slow_extended+0x78>)
 800ba14:	885b      	ldrh	r3, [r3, #2]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d205      	bcs.n	800ba26 <gpi_tick_slow_extended+0x46>
	{
		// gpi_led_toggle(GPI_LED_2);
		s.high++;
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <gpi_tick_slow_extended+0x78>)
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <gpi_tick_slow_extended+0x78>)
 800ba24:	801a      	strh	r2, [r3, #0]
	}
	s.last = o.u16_l;
 800ba26:	b2a2      	uxth	r2, r4
 800ba28:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <gpi_tick_slow_extended+0x78>)
 800ba2a:	805a      	strh	r2, [r3, #2]

	o.u16_h = s.high;
 800ba2c:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <gpi_tick_slow_extended+0x78>)
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	f363 441f 	bfi	r4, r3, #16, #16
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	60bb      	str	r3, [r7, #8]
 800ba38:	f3bf 8f5f 	dmb	sy
{
	REORDER_BARRIER();
	__DMB();

	// NOTE: we expect ie as it has been returned by gpi_int_lock()
	__set_PRIMASK(ie);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f383 8810 	msr	PRIMASK, r3

	gpi_int_unlock(ie);

	return o.u32;
 800ba46:	4623      	mov	r3, r4
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bcf0      	pop	{r4, r5, r6, r7}
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	200011e4 	.word	0x200011e4
 800ba58:	200003b8 	.word	0x200003b8

0800ba5c <gpi_tick_fast_extended>:

//*************************************************************************************************

Gpi_Fast_Tick_Extended gpi_tick_fast_extended()
{
 800ba5c:	b4f0      	push	{r4, r5, r6, r7}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
	__ASM volatile
 800ba62:	f3ef 8310 	mrs	r3, PRIMASK
 800ba66:	b672      	cpsid	i
 800ba68:	461e      	mov	r6, r3
  __ASM volatile ("dmb 0xF":::"memory");
 800ba6a:	f3bf 8f5f 	dmb	sy
	return ie;
 800ba6e:	4633      	mov	r3, r6
	// TODO: check how the function is used and decide if we can remove the int-lock or
	// provide and unlocked version (using the same static variables)
	// ATTENTION: int-lock makes the function reentrant; it is not without the int-lock.
	// Maybe it is possible to use a marker to avoid nested updates, e.g. the LSB of s.last.

	int ie = gpi_int_lock();
 800ba70:	60fb      	str	r3, [r7, #12]
	return htim2.Instance->CNT;
 800ba72:	4b12      	ldr	r3, [pc, #72]	; (800babc <gpi_tick_fast_extended+0x60>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	o.u32_l = gpi_tick_fast_native();
 800ba78:	461c      	mov	r4, r3
	// extend format
	// ATTENTION: function has to be called periodically at least once per 0xF...F ticks,
	// otherwise it will loose ticks in high part
	// To catch such situations, we could additionally compare the slow ticks. This would
	// decrease the probability of missed overruns (significantly).
	if (o.u32_l < s.last)
 800ba7a:	4622      	mov	r2, r4
 800ba7c:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <gpi_tick_fast_extended+0x64>)
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d204      	bcs.n	800ba8e <gpi_tick_fast_extended+0x32>
		s.high++;
 800ba84:	4b0e      	ldr	r3, [pc, #56]	; (800bac0 <gpi_tick_fast_extended+0x64>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	4a0d      	ldr	r2, [pc, #52]	; (800bac0 <gpi_tick_fast_extended+0x64>)
 800ba8c:	6013      	str	r3, [r2, #0]
	s.last = o.u32_l;
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4b0b      	ldr	r3, [pc, #44]	; (800bac0 <gpi_tick_fast_extended+0x64>)
 800ba92:	605a      	str	r2, [r3, #4]

	o.u32_h = s.high;
 800ba94:	4b0a      	ldr	r3, [pc, #40]	; (800bac0 <gpi_tick_fast_extended+0x64>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	461d      	mov	r5, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f383 8810 	msr	PRIMASK, r3

	gpi_int_unlock(ie);

	return o.u64;
 800baac:	4623      	mov	r3, r4
 800baae:	462c      	mov	r4, r5
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	4621      	mov	r1, r4
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bcf0      	pop	{r4, r5, r6, r7}
 800baba:	4770      	bx	lr
 800babc:	200012c8 	.word	0x200012c8
 800bac0:	200003bc 	.word	0x200003bc

0800bac4 <gpi_tick_hybrid>:
}

//**************************************************************************************************

Gpi_Hybrid_Tick gpi_tick_hybrid()
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	4b04      	ldr	r3, [pc, #16]	; (800badc <gpi_tick_hybrid+0x18>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return gpi_tick_fast_to_hybrid(gpi_tick_fast_native());
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f850 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 800bad4:	4603      	mov	r3, r0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200012c8 	.word	0x200012c8

0800bae0 <gpi_tick_hybrid_reference>:

//**************************************************************************************************
Gpi_Hybrid_Reference gpi_tick_hybrid_reference()
{
 800bae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bae4:	b089      	sub	sp, #36	; 0x24
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
	register Generic32		t;
	register uint16_t		slow;
	register uint32_t		fast;
	Gpi_Hybrid_Reference	r;

	slow = hlptim1.Instance->CNT;
 800baea:	4b20      	ldr	r3, [pc, #128]	; (800bb6c <gpi_tick_hybrid_reference+0x8c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	69db      	ldr	r3, [r3, #28]
 800baf0:	b29d      	uxth	r5, r3
	fast = htim2.Instance->CNT;
 800baf2:	4b1f      	ldr	r3, [pc, #124]	; (800bb70 <gpi_tick_hybrid_reference+0x90>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6a5e      	ldr	r6, [r3, #36]	; 0x24

	t.u32 = gpi_tick_slow_extended();
 800baf8:	f7ff ff72 	bl	800b9e0 <gpi_tick_slow_extended>
 800bafc:	4603      	mov	r3, r0
 800bafe:	461c      	mov	r4, r3
	if (t.u16_l < slow)
 800bb00:	b2a3      	uxth	r3, r4
 800bb02:	429d      	cmp	r5, r3
 800bb04:	d906      	bls.n	800bb14 <gpi_tick_hybrid_reference+0x34>
		t.u16_h--;
 800bb06:	f3c4 430f 	ubfx	r3, r4, #16, #16
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	f363 441f 	bfi	r4, r3, #16, #16
	t.u16_l = slow;
 800bb14:	f365 040f 	bfi	r4, r5, #0, #16
		ASSERT_CT(32768 == GPI_SLOW_CLOCK_RATE, GPI_SLOW_CLOCK_RATE_unsupported);
		ASSERT_CT((512000000u == (512000000u / GPI_HYBRID_CLOCK_RATE) * GPI_HYBRID_CLOCK_RATE) &&
			IS_POWER_OF_2(512000000u / GPI_HYBRID_CLOCK_RATE),
			hybrid_slow_ratio_unsupported);

		t.u32 = gpi_mulu_32x16to64(t.u32, 15625) >> MSB(512000000u / GPI_HYBRID_CLOCK_RATE);
 800bb18:	4623      	mov	r3, r4
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bb20:	837b      	strh	r3, [r7, #26]
	return gpi_mulu_32x32to64(a, b);
 800bb22:	8b7b      	ldrh	r3, [r7, #26]
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	617a      	str	r2, [r7, #20]
 800bb28:	613b      	str	r3, [r7, #16]
	asm
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	fba3 2302 	umull	r2, r3, r3, r2
 800bb32:	4690      	mov	r8, r2
 800bb34:	4699      	mov	r9, r3
	return result.u64;
 800bb36:	4641      	mov	r1, r8
 800bb38:	464a      	mov	r2, r9
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	f04f 0400 	mov.w	r4, #0
 800bb42:	094b      	lsrs	r3, r1, #5
 800bb44:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800bb48:	0954      	lsrs	r4, r2, #5
 800bb4a:	461c      	mov	r4, r3
    }

	r.hybrid_tick = t.u32;
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	60bb      	str	r3, [r7, #8]
	r.fast_capture = fast;
 800bb50:	60fe      	str	r6, [r7, #12]

	return r;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	461a      	mov	r2, r3
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	3724      	adds	r7, #36	; 0x24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb6c:	200011e4 	.word	0x200011e4
 800bb70:	200012c8 	.word	0x200012c8

0800bb74 <gpi_tick_fast_to_hybrid>:

//*************************************************************************************************

Gpi_Hybrid_Tick gpi_tick_fast_to_hybrid(Gpi_Fast_Tick_Native fast_tick)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
	register Gpi_Hybrid_Reference	r;
	register Gpi_Fast_Tick_Native	delta;

	// get last edge ticks
	// ATTENTION: this must happen <= 0xF...F fast ticks after the interesting point in time
	r = gpi_tick_hybrid_reference();
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7ff ffae 	bl	800bae0 <gpi_tick_hybrid_reference>
 800bb84:	f107 0310 	add.w	r3, r7, #16
 800bb88:	463a      	mov	r2, r7
 800bb8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb8e:	e883 0003 	stmia.w	r3, {r0, r1}
	// attention: we expect that fast_tick is before edge tick in the typical case. But the edge is
	// from the (near) past, so it is also possible that fast_tick stems from a period < 1 slow
	// clock cycles after the edge. In this case, -delta < GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE
	// (+ some tolerance if fast clock is asynchronous to slow clock, e.g. DCO vs. XO). Hence we
	// split the interpretation of delta at this value.
	delta = r.fast_capture - fast_tick;
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	1ad4      	subs	r4, r2, r3

	// compute hybrid tick:
	// if fast_tick is behind edge for sure: sub delta with respect to datatypes
	// ATTENTION: we add a safety margin that compensates for clock drift (i.e. delta may be
	// > GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE even if fast_tick is between edge and next edge)
	if (-delta < ((GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE) * 103) / 100)
 800bb98:	4263      	negs	r3, r4
 800bb9a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800bb9e:	d203      	bcs.n	800bba8 <gpi_tick_fast_to_hybrid+0x34>
		r.hybrid_tick += -delta / (GPI_FAST_CLOCK_RATE / GPI_HYBRID_CLOCK_RATE);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	1b1b      	subs	r3, r3, r4
 800bba4:	613b      	str	r3, [r7, #16]
 800bba6:	e002      	b.n	800bbae <gpi_tick_fast_to_hybrid+0x3a>

	// else sub delta in standard way
	else
		r.hybrid_tick -= delta / (GPI_FAST_CLOCK_RATE / GPI_HYBRID_CLOCK_RATE);
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	1b1b      	subs	r3, r3, r4
 800bbac:	613b      	str	r3, [r7, #16]

	return r.hybrid_tick;
 800bbae:	693b      	ldr	r3, [r7, #16]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	371c      	adds	r7, #28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd90      	pop	{r4, r7, pc}

0800bbb8 <SX1276IoInit>:
static bool RadioIsActive = false;
//**************************************************************************************************
//***** Global Functions ***************************************************************************
/*sx1276mb1mas---------------------------------------------------------------------------*/
void SX1276IoInit( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bbbe:	1d3b      	adds	r3, r7, #4
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	605a      	str	r2, [r3, #4]
 800bbc6:	609a      	str	r2, [r3, #8]
 800bbc8:	60da      	str	r2, [r3, #12]
 800bbca:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_IT_RISING;
 800bbcc:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <SX1276IoInit+0x5c>)
 800bbce:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_PULLDOWN;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800bbd8:	1d3b      	adds	r3, r7, #4
 800bbda:	461a      	mov	r2, r3
 800bbdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bbe4:	f001 fd4e 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800bbe8:	1d3b      	adds	r3, r7, #4
 800bbea:	461a      	mov	r2, r3
 800bbec:	2108      	movs	r1, #8
 800bbee:	480a      	ldr	r0, [pc, #40]	; (800bc18 <SX1276IoInit+0x60>)
 800bbf0:	f001 fd48 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800bbf4:	1d3b      	adds	r3, r7, #4
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	2120      	movs	r1, #32
 800bbfa:	4807      	ldr	r0, [pc, #28]	; (800bc18 <SX1276IoInit+0x60>)
 800bbfc:	f001 fd42 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800bc00:	1d3b      	adds	r3, r7, #4
 800bc02:	461a      	mov	r2, r3
 800bc04:	2110      	movs	r1, #16
 800bc06:	4804      	ldr	r0, [pc, #16]	; (800bc18 <SX1276IoInit+0x60>)
 800bc08:	f001 fd3c 	bl	800d684 <HW_GPIO_Init>
}
 800bc0c:	bf00      	nop
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	10110000 	.word	0x10110000
 800bc18:	48000400 	.word	0x48000400

0800bc1c <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
    HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc32:	f001 fd93 	bl	800d75c <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	3304      	adds	r3, #4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	2108      	movs	r1, #8
 800bc40:	480b      	ldr	r0, [pc, #44]	; (800bc70 <SX1276IoIrqInit+0x54>)
 800bc42:	f001 fd8b 	bl	800d75c <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3308      	adds	r3, #8
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	2120      	movs	r1, #32
 800bc50:	4807      	ldr	r0, [pc, #28]	; (800bc70 <SX1276IoIrqInit+0x54>)
 800bc52:	f001 fd83 	bl	800d75c <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	2110      	movs	r1, #16
 800bc60:	4803      	ldr	r0, [pc, #12]	; (800bc70 <SX1276IoIrqInit+0x54>)
 800bc62:	f001 fd7b 	bl	800d75c <HW_GPIO_SetIrq>
}
 800bc66:	bf00      	nop
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	48000400 	.word	0x48000400

0800bc74 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bc7a:	1d3b      	adds	r3, r7, #4
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	605a      	str	r2, [r3, #4]
 800bc82:	609a      	str	r2, [r3, #8]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_IT_RISING ;
 800bc88:	4b10      	ldr	r3, [pc, #64]	; (800bccc <SX1276IoDeInit+0x58>)
 800bc8a:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_PULLDOWN;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	60fb      	str	r3, [r7, #12]

    HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800bc90:	1d3b      	adds	r3, r7, #4
 800bc92:	461a      	mov	r2, r3
 800bc94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc9c:	f001 fcf2 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800bca0:	1d3b      	adds	r3, r7, #4
 800bca2:	461a      	mov	r2, r3
 800bca4:	2108      	movs	r1, #8
 800bca6:	480a      	ldr	r0, [pc, #40]	; (800bcd0 <SX1276IoDeInit+0x5c>)
 800bca8:	f001 fcec 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800bcac:	1d3b      	adds	r3, r7, #4
 800bcae:	461a      	mov	r2, r3
 800bcb0:	2120      	movs	r1, #32
 800bcb2:	4807      	ldr	r0, [pc, #28]	; (800bcd0 <SX1276IoDeInit+0x5c>)
 800bcb4:	f001 fce6 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800bcb8:	1d3b      	adds	r3, r7, #4
 800bcba:	461a      	mov	r2, r3
 800bcbc:	2110      	movs	r1, #16
 800bcbe:	4804      	ldr	r0, [pc, #16]	; (800bcd0 <SX1276IoDeInit+0x5c>)
 800bcc0:	f001 fce0 	bl	800d684 <HW_GPIO_Init>
}
 800bcc4:	bf00      	nop
 800bcc6:	3718      	adds	r7, #24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	10110000 	.word	0x10110000
 800bcd0:	48000400 	.word	0x48000400

0800bcd4 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 800bce6:	2009      	movs	r0, #9
 800bce8:	f000 fe7c 	bl	800c9e4 <SX1276Read>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 800bcf0:	204d      	movs	r0, #77	; 0x4d
 800bcf2:	f000 fe77 	bl	800c9e4 <SX1276Read>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800bcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd02:	b25c      	sxtb	r4, r3
 800bd04:	4b49      	ldr	r3, [pc, #292]	; (800be2c <SX1276SetRfTxPower+0x158>)
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 f891 	bl	800be30 <SX1276GetPaSelect>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	4323      	orrs	r3, r4
 800bd14:	b25b      	sxtb	r3, r3
 800bd16:	73fb      	strb	r3, [r7, #15]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800bd1e:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800bd20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	da4e      	bge.n	800bdc6 <SX1276SetRfTxPower+0xf2>
    {
        if( power > 17 )
 800bd28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd2c:	2b11      	cmp	r3, #17
 800bd2e:	dd04      	ble.n	800bd3a <SX1276SetRfTxPower+0x66>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	f043 0307 	orr.w	r3, r3, #7
 800bd36:	73bb      	strb	r3, [r7, #14]
 800bd38:	e008      	b.n	800bd4c <SX1276SetRfTxPower+0x78>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800bd3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd3e:	f023 0307 	bic.w	r3, r3, #7
 800bd42:	b25b      	sxtb	r3, r3
 800bd44:	f043 0304 	orr.w	r3, r3, #4
 800bd48:	b25b      	sxtb	r3, r3
 800bd4a:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	2b07      	cmp	r3, #7
 800bd54:	d11b      	bne.n	800bd8e <SX1276SetRfTxPower+0xba>
        {
            if( power < 5 )
 800bd56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	dc01      	bgt.n	800bd62 <SX1276SetRfTxPower+0x8e>
            {
                power = 5;
 800bd5e:	2305      	movs	r3, #5
 800bd60:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 800bd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd66:	2b14      	cmp	r3, #20
 800bd68:	dd01      	ble.n	800bd6e <SX1276SetRfTxPower+0x9a>
            {
                power = 20;
 800bd6a:	2314      	movs	r3, #20
 800bd6c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800bd6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd72:	f023 030f 	bic.w	r3, r3, #15
 800bd76:	b25a      	sxtb	r2, r3
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	3b05      	subs	r3, #5
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	b25b      	sxtb	r3, r3
 800bd80:	f003 030f 	and.w	r3, r3, #15
 800bd84:	b25b      	sxtb	r3, r3
 800bd86:	4313      	orrs	r3, r2
 800bd88:	b25b      	sxtb	r3, r3
 800bd8a:	73fb      	strb	r3, [r7, #15]
 800bd8c:	e040      	b.n	800be10 <SX1276SetRfTxPower+0x13c>
        }
        else
        {
            if( power < 2 )
 800bd8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	dc01      	bgt.n	800bd9a <SX1276SetRfTxPower+0xc6>
            {
                power = 2;
 800bd96:	2302      	movs	r3, #2
 800bd98:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 800bd9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd9e:	2b11      	cmp	r3, #17
 800bda0:	dd01      	ble.n	800bda6 <SX1276SetRfTxPower+0xd2>
            {
                power = 17;
 800bda2:	2311      	movs	r3, #17
 800bda4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800bda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdaa:	f023 030f 	bic.w	r3, r3, #15
 800bdae:	b25a      	sxtb	r2, r3
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	3b02      	subs	r3, #2
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	b25b      	sxtb	r3, r3
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b25b      	sxtb	r3, r3
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	b25b      	sxtb	r3, r3
 800bdc2:	73fb      	strb	r3, [r7, #15]
 800bdc4:	e024      	b.n	800be10 <SX1276SetRfTxPower+0x13c>
        }
        // SX1276Write( REG_LR_OCP, 0x2F );
    }
    else
    {
        paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800bdc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdca:	f023 0307 	bic.w	r3, r3, #7
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f043 0304 	orr.w	r3, r3, #4
 800bdd4:	b25b      	sxtb	r3, r3
 800bdd6:	73bb      	strb	r3, [r7, #14]
        if( power < -1 )
 800bdd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	da01      	bge.n	800bde6 <SX1276SetRfTxPower+0x112>
        {
            power = -1;
 800bde2:	23ff      	movs	r3, #255	; 0xff
 800bde4:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 800bde6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdea:	2b0e      	cmp	r3, #14
 800bdec:	dd01      	ble.n	800bdf2 <SX1276SetRfTxPower+0x11e>
        {
            power = 14;
 800bdee:	230e      	movs	r3, #14
 800bdf0:	71fb      	strb	r3, [r7, #7]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800bdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdf6:	f023 030f 	bic.w	r3, r3, #15
 800bdfa:	b25a      	sxtb	r2, r3
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	3301      	adds	r3, #1
 800be00:	b2db      	uxtb	r3, r3
 800be02:	b25b      	sxtb	r3, r3
 800be04:	f003 030f 	and.w	r3, r3, #15
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	4313      	orrs	r3, r2
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	73fb      	strb	r3, [r7, #15]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	4619      	mov	r1, r3
 800be14:	2009      	movs	r0, #9
 800be16:	f000 fdd3 	bl	800c9c0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	4619      	mov	r1, r3
 800be1e:	204d      	movs	r0, #77	; 0x4d
 800be20:	f000 fdce 	bl	800c9c0 <SX1276Write>
}
 800be24:	bf00      	nop
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd90      	pop	{r4, r7, pc}
 800be2c:	200013c4 	.word	0x200013c4

0800be30 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 800be38:	2300      	movs	r3, #0
    // return RF_PACONFIG_PASELECT_PABOOST;
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
	...

0800be48 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 800be52:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <SX1276SetAntSwLowPower+0x38>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	79fa      	ldrb	r2, [r7, #7]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d00d      	beq.n	800be78 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800be5c:	4a08      	ldr	r2, [pc, #32]	; (800be80 <SX1276SetAntSwLowPower+0x38>)
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	7013      	strb	r3, [r2, #0]

        if( status == false )
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	f083 0301 	eor.w	r3, r3, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800be6e:	f000 f809 	bl	800be84 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 800be72:	e001      	b.n	800be78 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 800be74:	f000 f828 	bl	800bec8 <SX1276AntSwDeInit>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000368 	.word	0x20000368

0800be84 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800be8a:	1d3b      	adds	r3, r7, #4
 800be8c:	2200      	movs	r2, #0
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	605a      	str	r2, [r3, #4]
 800be92:	609a      	str	r2, [r3, #8]
 800be94:	60da      	str	r2, [r3, #12]
 800be96:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800be98:	2301      	movs	r3, #1
 800be9a:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bea0:	2303      	movs	r3, #3
 800bea2:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  );
 800bea4:	1d3b      	adds	r3, r7, #4
 800bea6:	461a      	mov	r2, r3
 800bea8:	2102      	movs	r1, #2
 800beaa:	4806      	ldr	r0, [pc, #24]	; (800bec4 <SX1276AntSwInit+0x40>)
 800beac:	f001 fbea 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 800beb0:	2200      	movs	r2, #0
 800beb2:	2102      	movs	r1, #2
 800beb4:	4803      	ldr	r0, [pc, #12]	; (800bec4 <SX1276AntSwInit+0x40>)
 800beb6:	f001 fca3 	bl	800d800 <HW_GPIO_Write>
}
 800beba:	bf00      	nop
 800bebc:	3718      	adds	r7, #24
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	48000800 	.word	0x48000800

0800bec8 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b086      	sub	sp, #24
 800becc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bece:	1d3b      	adds	r3, r7, #4
 800bed0:	2200      	movs	r2, #0
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	605a      	str	r2, [r3, #4]
 800bed6:	609a      	str	r2, [r3, #8]
 800bed8:	60da      	str	r2, [r3, #12]
 800beda:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bedc:	2301      	movs	r3, #1
 800bede:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bee4:	2303      	movs	r3, #3
 800bee6:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct );
 800bee8:	1d3b      	adds	r3, r7, #4
 800beea:	461a      	mov	r2, r3
 800beec:	2102      	movs	r1, #2
 800beee:	4806      	ldr	r0, [pc, #24]	; (800bf08 <SX1276AntSwDeInit+0x40>)
 800bef0:	f001 fbc8 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 800bef4:	2200      	movs	r2, #0
 800bef6:	2102      	movs	r1, #2
 800bef8:	4803      	ldr	r0, [pc, #12]	; (800bf08 <SX1276AntSwDeInit+0x40>)
 800befa:	f001 fc81 	bl	800d800 <HW_GPIO_Write>
}
 800befe:	bf00      	nop
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	48000800 	.word	0x48000800

0800bf0c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	71fb      	strb	r3, [r7, #7]
    switch( opMode )
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d105      	bne.n	800bf28 <SX1276SetAntSw+0x1c>
    {
    case RFLR_OPMODE_TRANSMITTER:
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	2102      	movs	r1, #2
 800bf20:	4806      	ldr	r0, [pc, #24]	; (800bf3c <SX1276SetAntSw+0x30>)
 800bf22:	f001 fc6d 	bl	800d800 <HW_GPIO_Write>
        break;
 800bf26:	e005      	b.n	800bf34 <SX1276SetAntSw+0x28>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	4803      	ldr	r0, [pc, #12]	; (800bf3c <SX1276SetAntSw+0x30>)
 800bf2e:	f001 fc67 	bl	800d800 <HW_GPIO_Write>
        break;
 800bf32:	bf00      	nop
    }
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	48000800 	.word	0x48000800

0800bf40 <SX1276Init>:
SX1276_t SX1276;

DioIrqHandler *DioIrq[] = { SX1276OnDio0Irq, SX1276OnDio1Irq, SX1276OnDio2Irq, SX1276OnDio3Irq, SX1276OnDio4Irq};
/*---------------------------------------------------------------------------*/
uint32_t SX1276Init()
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
    uint8_t i;
    SX1276IoIrqInit( DioIrq );
 800bf46:	482b      	ldr	r0, [pc, #172]	; (800bff4 <SX1276Init+0xb4>)
 800bf48:	f7ff fe68 	bl	800bc1c <SX1276IoIrqInit>
    HAL_NVIC_DisableIRQ( EXTI4_IRQn );
 800bf4c:	200a      	movs	r0, #10
 800bf4e:	f7f5 fed6 	bl	8001cfe <HAL_NVIC_DisableIRQ>

    SX1276Reset( );
 800bf52:	f000 fc93 	bl	800c87c <SX1276Reset>
    // Clear dio3 IRQ (PB4), as SX1276Reset will generate dio3 IRQ
    __HAL_GPIO_EXTI_CLEAR_FLAG(RADIO_DIO_3_PIN);
 800bf56:	4b28      	ldr	r3, [pc, #160]	; (800bff8 <SX1276Init+0xb8>)
 800bf58:	2210      	movs	r2, #16
 800bf5a:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ( EXTI4_IRQn );
 800bf5c:	200a      	movs	r0, #10
 800bf5e:	f7f5 fec0 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800bf62:	2000      	movs	r0, #0
 800bf64:	f000 fcb4 	bl	800c8d0 <SX1276SetOpMode>

    // LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
    // SX1276IoIrqInit( DioIrq );

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800bf68:	2300      	movs	r3, #0
 800bf6a:	71fb      	strb	r3, [r7, #7]
 800bf6c:	e020      	b.n	800bfb0 <SX1276Init+0x70>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800bf6e:	79fa      	ldrb	r2, [r7, #7]
 800bf70:	4922      	ldr	r1, [pc, #136]	; (800bffc <SX1276Init+0xbc>)
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	440b      	add	r3, r1
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 fce1 	bl	800c944 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800bf82:	79fa      	ldrb	r2, [r7, #7]
 800bf84:	491d      	ldr	r1, [pc, #116]	; (800bffc <SX1276Init+0xbc>)
 800bf86:	4613      	mov	r3, r2
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4413      	add	r3, r2
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3301      	adds	r3, #1
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b298      	uxth	r0, r3
 800bf94:	79fa      	ldrb	r2, [r7, #7]
 800bf96:	4919      	ldr	r1, [pc, #100]	; (800bffc <SX1276Init+0xbc>)
 800bf98:	4613      	mov	r3, r2
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	4413      	add	r3, r2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3302      	adds	r3, #2
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f000 fd0b 	bl	800c9c0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	3301      	adds	r3, #1
 800bfae:	71fb      	strb	r3, [r7, #7]
 800bfb0:	79fb      	ldrb	r3, [r7, #7]
 800bfb2:	2b0f      	cmp	r3, #15
 800bfb4:	d9db      	bls.n	800bf6e <SX1276Init+0x2e>
    }
    SX1276SetModem( MODEM_LORA );
 800bfb6:	2001      	movs	r0, #1
 800bfb8:	f000 fcc4 	bl	800c944 <SX1276SetModem>

    // Launch Rx chain calibration
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800bfbc:	203b      	movs	r0, #59	; 0x3b
 800bfbe:	f000 fd11 	bl	800c9e4 <SX1276Read>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	4619      	mov	r1, r3
 800bfcc:	203b      	movs	r0, #59	; 0x3b
 800bfce:	f000 fcf7 	bl	800c9c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800bfd2:	bf00      	nop
 800bfd4:	203b      	movs	r0, #59	; 0x3b
 800bfd6:	f000 fd05 	bl	800c9e4 <SX1276Read>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d0f7      	beq.n	800bfd4 <SX1276Init+0x94>
    {
    }

    SX1276.Settings.State = RF_IDLE;
 800bfe4:	4b06      	ldr	r3, [pc, #24]	; (800c000 <SX1276Init+0xc0>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )(BOARD_WAKEUP_TIME + RADIO_WAKEUP_TIME);// BOARD_WAKEUP_TIME;
 800bfea:	2302      	movs	r3, #2
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	2000008c 	.word	0x2000008c
 800bff8:	40010400 	.word	0x40010400
 800bffc:	080269e0 	.word	0x080269e0
 800c000:	200013c4 	.word	0x200013c4

0800c004 <SX1276SetChannel>:
{
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 800c00c:	4a1a      	ldr	r2, [pc, #104]	; (800c078 <SX1276SetChannel+0x74>)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6093      	str	r3, [r2, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a19      	ldr	r2, [pc, #100]	; (800c07c <SX1276SetChannel+0x78>)
 800c016:	fba2 2303 	umull	r2, r3, r2, r3
 800c01a:	0b1b      	lsrs	r3, r3, #12
 800c01c:	617b      	str	r3, [r7, #20]
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f643 5209 	movw	r2, #15625	; 0x3d09
 800c024:	fb02 f303 	mul.w	r3, r2, r3
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	021a      	lsls	r2, r3, #8
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800c03a:	3304      	adds	r3, #4
 800c03c:	490f      	ldr	r1, [pc, #60]	; (800c07c <SX1276SetChannel+0x78>)
 800c03e:	fba1 1303 	umull	r1, r3, r1, r3
 800c042:	0b1b      	lsrs	r3, r3, #12
 800c044:	4413      	add	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	0c1b      	lsrs	r3, r3, #16
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	4619      	mov	r1, r3
 800c050:	2006      	movs	r0, #6
 800c052:	f000 fcb5 	bl	800c9c0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	0a1b      	lsrs	r3, r3, #8
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	4619      	mov	r1, r3
 800c05e:	2007      	movs	r0, #7
 800c060:	f000 fcae 	bl	800c9c0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	4619      	mov	r1, r3
 800c06a:	2008      	movs	r0, #8
 800c06c:	f000 fca8 	bl	800c9c0 <SX1276Write>
}
 800c070:	bf00      	nop
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	200013c4 	.word	0x200013c4
 800c07c:	431bde83 	.word	0x431bde83

0800c080 <GetFskBandwidthRegValue>:
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    SX1276SetChannel( initialFreq );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]
 800c08c:	e017      	b.n	800c0be <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	4a10      	ldr	r2, [pc, #64]	; (800c0d4 <GetFskBandwidthRegValue+0x54>)
 800c092:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d30d      	bcc.n	800c0b8 <GetFskBandwidthRegValue+0x38>
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	4a0c      	ldr	r2, [pc, #48]	; (800c0d4 <GetFskBandwidthRegValue+0x54>)
 800c0a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d205      	bcs.n	800c0b8 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4a09      	ldr	r2, [pc, #36]	; (800c0d4 <GetFskBandwidthRegValue+0x54>)
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	4413      	add	r3, r2
 800c0b4:	791b      	ldrb	r3, [r3, #4]
 800c0b6:	e006      	b.n	800c0c6 <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	73fb      	strb	r3, [r7, #15]
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
 800c0c0:	2b14      	cmp	r3, #20
 800c0c2:	d9e4      	bls.n	800c08e <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c0c4:	e7fe      	b.n	800c0c4 <GetFskBandwidthRegValue+0x44>
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	08026a10 	.word	0x08026a10

0800c0d8 <SX1276SetRxConfig>:
                        uint32_t bandwidthAfc, uint16_t preambleLen,
                        uint16_t symbTimeout, bool fixLen,
                        uint8_t payloadLen,
                        bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                        bool iqInverted, bool rxContinuous )
{
 800c0d8:	b5b0      	push	{r4, r5, r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	607a      	str	r2, [r7, #4]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	73fb      	strb	r3, [r7, #15]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fc28 	bl	800c944 <SX1276SetModem>

    switch( modem )
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <SX1276SetRxConfig+0x2a>
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	f000 80cf 	beq.w	800c29e <SX1276SetRxConfig+0x1c6>
                            RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800c100:	e1f9      	b.n	800c4f6 <SX1276SetRxConfig+0x41e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c102:	4a91      	ldr	r2, [pc, #580]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	6153      	str	r3, [r2, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800c108:	4a8f      	ldr	r2, [pc, #572]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	61d3      	str	r3, [r2, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800c10e:	4a8e      	ldr	r2, [pc, #568]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	6193      	str	r3, [r2, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800c114:	4a8c      	ldr	r2, [pc, #560]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c11a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800c11e:	4a8a      	ldr	r2, [pc, #552]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c120:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c124:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800c128:	4a87      	ldr	r2, [pc, #540]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c12a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c12e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800c132:	4a85      	ldr	r2, [pc, #532]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c134:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c138:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800c13c:	4a82      	ldr	r2, [pc, #520]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c13e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c142:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c146:	4a80      	ldr	r2, [pc, #512]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c14a:	8413      	strh	r3, [r2, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800c14c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c14e:	4618      	mov	r0, r3
 800c150:	f7f4 f9f2 	bl	8000538 <__aeabi_i2d>
 800c154:	4604      	mov	r4, r0
 800c156:	460d      	mov	r5, r1
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7f4 f9dd 	bl	8000518 <__aeabi_ui2d>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	4979      	ldr	r1, [pc, #484]	; (800c34c <SX1276SetRxConfig+0x274>)
 800c168:	f7f4 fb7a 	bl	8000860 <__aeabi_ddiv>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	4610      	mov	r0, r2
 800c172:	4619      	mov	r1, r3
 800c174:	f04f 0200 	mov.w	r2, #0
 800c178:	4b75      	ldr	r3, [pc, #468]	; (800c350 <SX1276SetRxConfig+0x278>)
 800c17a:	f7f4 fa47 	bl	800060c <__aeabi_dmul>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4620      	mov	r0, r4
 800c184:	4629      	mov	r1, r5
 800c186:	f7f4 fa41 	bl	800060c <__aeabi_dmul>
 800c18a:	4603      	mov	r3, r0
 800c18c:	460c      	mov	r4, r1
 800c18e:	4618      	mov	r0, r3
 800c190:	4621      	mov	r1, r4
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	4b6f      	ldr	r3, [pc, #444]	; (800c354 <SX1276SetRxConfig+0x27c>)
 800c198:	f7f4 fa38 	bl	800060c <__aeabi_dmul>
 800c19c:	4603      	mov	r3, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	f7f4 fd0a 	bl	8000bbc <__aeabi_d2uiz>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	4b67      	ldr	r3, [pc, #412]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c1ac:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7f4 f9b2 	bl	8000518 <__aeabi_ui2d>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4623      	mov	r3, r4
 800c1bc:	a160      	add	r1, pc, #384	; (adr r1, 800c340 <SX1276SetRxConfig+0x268>)
 800c1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1c2:	f7f4 fb4d 	bl	8000860 <__aeabi_ddiv>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f7f4 fcf5 	bl	8000bbc <__aeabi_d2uiz>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	4619      	mov	r1, r3
 800c1e0:	2002      	movs	r0, #2
 800c1e2:	f000 fbed 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	2003      	movs	r0, #3
 800c1ee:	f000 fbe7 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f7ff ff44 	bl	800c080 <GetFskBandwidthRegValue>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	2012      	movs	r0, #18
 800c1fe:	f000 fbdf 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800c202:	6a38      	ldr	r0, [r7, #32]
 800c204:	f7ff ff3c 	bl	800c080 <GetFskBandwidthRegValue>
 800c208:	4603      	mov	r3, r0
 800c20a:	4619      	mov	r1, r3
 800c20c:	2013      	movs	r0, #19
 800c20e:	f000 fbd7 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c214:	0a1b      	lsrs	r3, r3, #8
 800c216:	b29b      	uxth	r3, r3
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	4619      	mov	r1, r3
 800c21c:	2025      	movs	r0, #37	; 0x25
 800c21e:	f000 fbcf 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c224:	b2db      	uxtb	r3, r3
 800c226:	4619      	mov	r1, r3
 800c228:	2026      	movs	r0, #38	; 0x26
 800c22a:	f000 fbc9 	bl	800c9c0 <SX1276Write>
            if( fixLen == 1 )
 800c22e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <SX1276SetRxConfig+0x16c>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800c236:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c23a:	4619      	mov	r1, r3
 800c23c:	2032      	movs	r0, #50	; 0x32
 800c23e:	f000 fbbf 	bl	800c9c0 <SX1276Write>
 800c242:	e003      	b.n	800c24c <SX1276SetRxConfig+0x174>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800c244:	21ff      	movs	r1, #255	; 0xff
 800c246:	2032      	movs	r0, #50	; 0x32
 800c248:	f000 fbba 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_PACKETCONFIG1 ) &
 800c24c:	2030      	movs	r0, #48	; 0x30
 800c24e:	f000 fbc9 	bl	800c9e4 <SX1276Read>
 800c252:	4603      	mov	r3, r0
 800c254:	b25b      	sxtb	r3, r3
                        RF_PACKETCONFIG1_CRC_MASK &
 800c256:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800c25a:	b25b      	sxtb	r3, r3
                        RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800c25c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c260:	2a00      	cmp	r2, #0
 800c262:	d001      	beq.n	800c268 <SX1276SetRxConfig+0x190>
 800c264:	2200      	movs	r2, #0
 800c266:	e001      	b.n	800c26c <SX1276SetRxConfig+0x194>
 800c268:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800c26c:	4313      	orrs	r3, r2
 800c26e:	b25a      	sxtb	r2, r3
                        ( crcOn << 4 ) );
 800c270:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c274:	011b      	lsls	r3, r3, #4
                        ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800c276:	b25b      	sxtb	r3, r3
 800c278:	4313      	orrs	r3, r2
 800c27a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	4619      	mov	r1, r3
 800c280:	2030      	movs	r0, #48	; 0x30
 800c282:	f000 fb9d 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800c286:	2031      	movs	r0, #49	; 0x31
 800c288:	f000 fbac 	bl	800c9e4 <SX1276Read>
 800c28c:	4603      	mov	r3, r0
 800c28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c292:	b2db      	uxtb	r3, r3
 800c294:	4619      	mov	r1, r3
 800c296:	2031      	movs	r0, #49	; 0x31
 800c298:	f000 fb92 	bl	800c9c0 <SX1276Write>
        break;
 800c29c:	e12b      	b.n	800c4f6 <SX1276SetRxConfig+0x41e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c29e:	4a2a      	ldr	r2, [pc, #168]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	6453      	str	r3, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800c2a4:	4a28      	ldr	r2, [pc, #160]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6493      	str	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 800c2aa:	4a27      	ldr	r2, [pc, #156]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800c2b2:	4a25      	ldr	r2, [pc, #148]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b6:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800c2ba:	4a23      	ldr	r2, [pc, #140]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2c0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800c2c4:	4a20      	ldr	r2, [pc, #128]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c2ca:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c2d4:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800c2d8:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c2de:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800c2e2:	4a19      	ldr	r2, [pc, #100]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2e8:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c2ec:	4a16      	ldr	r2, [pc, #88]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2ee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2f2:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800c2f6:	4a14      	ldr	r2, [pc, #80]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c2f8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c2fc:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
            if( datarate > 12 )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b0c      	cmp	r3, #12
 800c304:	d902      	bls.n	800c30c <SX1276SetRxConfig+0x234>
                datarate = 12;
 800c306:	230c      	movs	r3, #12
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	e004      	b.n	800c316 <SX1276SetRxConfig+0x23e>
            else if( datarate < 6 )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d801      	bhi.n	800c316 <SX1276SetRxConfig+0x23e>
                datarate = 6;
 800c312:	2306      	movs	r3, #6
 800c314:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b07      	cmp	r3, #7
 800c31a:	d105      	bne.n	800c328 <SX1276SetRxConfig+0x250>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b0b      	cmp	r3, #11
 800c320:	d008      	beq.n	800c334 <SX1276SetRxConfig+0x25c>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b0c      	cmp	r3, #12
 800c326:	d005      	beq.n	800c334 <SX1276SetRxConfig+0x25c>
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d114      	bne.n	800c358 <SX1276SetRxConfig+0x280>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b0c      	cmp	r3, #12
 800c332:	d111      	bne.n	800c358 <SX1276SetRxConfig+0x280>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800c334:	4b04      	ldr	r3, [pc, #16]	; (800c348 <SX1276SetRxConfig+0x270>)
 800c336:	2201      	movs	r2, #1
 800c338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800c33c:	e010      	b.n	800c360 <SX1276SetRxConfig+0x288>
 800c33e:	bf00      	nop
 800c340:	00000000 	.word	0x00000000
 800c344:	417e8480 	.word	0x417e8480
 800c348:	200013c4 	.word	0x200013c4
 800c34c:	3ff00000 	.word	0x3ff00000
 800c350:	40200000 	.word	0x40200000
 800c354:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800c358:	4b69      	ldr	r3, [pc, #420]	; (800c500 <SX1276SetRxConfig+0x428>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                        ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c360:	201d      	movs	r0, #29
 800c362:	f000 fb3f 	bl	800c9e4 <SX1276Read>
                        ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	011b      	lsls	r3, r3, #4
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4313      	orrs	r3, r2
 800c376:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c378:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                        ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c37c:	4313      	orrs	r3, r2
 800c37e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c380:	4619      	mov	r1, r3
 800c382:	201d      	movs	r0, #29
 800c384:	f000 fb1c 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800c388:	201e      	movs	r0, #30
 800c38a:	f000 fb2b 	bl	800c9e4 <SX1276Read>
 800c38e:	4603      	mov	r3, r0
                        RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800c390:	f003 0308 	and.w	r3, r3, #8
 800c394:	b2da      	uxtb	r2, r3
                        ( datarate << 4 ) | ( crcOn << 2 ) |
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	b2db      	uxtb	r3, r3
                        RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	b2da      	uxtb	r2, r3
                        ( datarate << 4 ) | ( crcOn << 2 ) |
 800c3a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	b2da      	uxtb	r2, r3
                        ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800c3ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3b0:	0a1b      	lsrs	r3, r3, #8
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	201e      	movs	r0, #30
 800c3c4:	f000 fafc 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c3c8:	2026      	movs	r0, #38	; 0x26
 800c3ca:	f000 fb0b 	bl	800c9e4 <SX1276Read>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	b25b      	sxtb	r3, r3
 800c3d2:	f023 0308 	bic.w	r3, r3, #8
 800c3d6:	b25a      	sxtb	r2, r3
                        ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c3d8:	4b49      	ldr	r3, [pc, #292]	; (800c500 <SX1276SetRxConfig+0x428>)
 800c3da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c3de:	00db      	lsls	r3, r3, #3
                        RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	2026      	movs	r0, #38	; 0x26
 800c3ec:	f000 fae8 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800c3f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	201f      	movs	r0, #31
 800c3f8:	f000 fae2 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c3fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fe:	0a1b      	lsrs	r3, r3, #8
 800c400:	b29b      	uxth	r3, r3
 800c402:	b2db      	uxtb	r3, r3
 800c404:	4619      	mov	r1, r3
 800c406:	2020      	movs	r0, #32
 800c408:	f000 fada 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c40c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	4619      	mov	r1, r3
 800c412:	2021      	movs	r0, #33	; 0x21
 800c414:	f000 fad4 	bl	800c9c0 <SX1276Write>
            if( fixLen == 1 )
 800c418:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d005      	beq.n	800c42c <SX1276SetRxConfig+0x354>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800c420:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c424:	4619      	mov	r1, r3
 800c426:	2022      	movs	r0, #34	; 0x22
 800c428:	f000 faca 	bl	800c9c0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c42c:	4b34      	ldr	r3, [pc, #208]	; (800c500 <SX1276SetRxConfig+0x428>)
 800c42e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c432:	2b00      	cmp	r3, #0
 800c434:	d011      	beq.n	800c45a <SX1276SetRxConfig+0x382>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800c436:	2044      	movs	r0, #68	; 0x44
 800c438:	f000 fad4 	bl	800c9e4 <SX1276Read>
 800c43c:	4603      	mov	r3, r0
 800c43e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c442:	b2db      	uxtb	r3, r3
 800c444:	4619      	mov	r1, r3
 800c446:	2044      	movs	r0, #68	; 0x44
 800c448:	f000 faba 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800c44c:	4b2c      	ldr	r3, [pc, #176]	; (800c500 <SX1276SetRxConfig+0x428>)
 800c44e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c452:	4619      	mov	r1, r3
 800c454:	2024      	movs	r0, #36	; 0x24
 800c456:	f000 fab3 	bl	800c9c0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b09      	cmp	r3, #9
 800c45e:	d10d      	bne.n	800c47c <SX1276SetRxConfig+0x3a4>
 800c460:	4b27      	ldr	r3, [pc, #156]	; (800c500 <SX1276SetRxConfig+0x428>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	4a27      	ldr	r2, [pc, #156]	; (800c504 <SX1276SetRxConfig+0x42c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d908      	bls.n	800c47c <SX1276SetRxConfig+0x3a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c46a:	2102      	movs	r1, #2
 800c46c:	2036      	movs	r0, #54	; 0x36
 800c46e:	f000 faa7 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800c472:	2164      	movs	r1, #100	; 0x64
 800c474:	203a      	movs	r0, #58	; 0x3a
 800c476:	f000 faa3 	bl	800c9c0 <SX1276Write>
 800c47a:	e00f      	b.n	800c49c <SX1276SetRxConfig+0x3c4>
            else if( bandwidth == 9 )
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b09      	cmp	r3, #9
 800c480:	d108      	bne.n	800c494 <SX1276SetRxConfig+0x3bc>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c482:	2102      	movs	r1, #2
 800c484:	2036      	movs	r0, #54	; 0x36
 800c486:	f000 fa9b 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800c48a:	217f      	movs	r1, #127	; 0x7f
 800c48c:	203a      	movs	r0, #58	; 0x3a
 800c48e:	f000 fa97 	bl	800c9c0 <SX1276Write>
 800c492:	e003      	b.n	800c49c <SX1276SetRxConfig+0x3c4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800c494:	2103      	movs	r1, #3
 800c496:	2036      	movs	r0, #54	; 0x36
 800c498:	f000 fa92 	bl	800c9c0 <SX1276Write>
            if( datarate == 6 )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b06      	cmp	r3, #6
 800c4a0:	d114      	bne.n	800c4cc <SX1276SetRxConfig+0x3f4>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c4a2:	2031      	movs	r0, #49	; 0x31
 800c4a4:	f000 fa9e 	bl	800c9e4 <SX1276Read>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	b25b      	sxtb	r3, r3
 800c4ac:	f023 0307 	bic.w	r3, r3, #7
 800c4b0:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c4b2:	f043 0305 	orr.w	r3, r3, #5
 800c4b6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	2031      	movs	r0, #49	; 0x31
 800c4be:	f000 fa7f 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c4c2:	210c      	movs	r1, #12
 800c4c4:	2037      	movs	r0, #55	; 0x37
 800c4c6:	f000 fa7b 	bl	800c9c0 <SX1276Write>
        break;
 800c4ca:	e013      	b.n	800c4f4 <SX1276SetRxConfig+0x41c>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c4cc:	2031      	movs	r0, #49	; 0x31
 800c4ce:	f000 fa89 	bl	800c9e4 <SX1276Read>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	f023 0307 	bic.w	r3, r3, #7
 800c4da:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c4dc:	f043 0303 	orr.w	r3, r3, #3
 800c4e0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	2031      	movs	r0, #49	; 0x31
 800c4e8:	f000 fa6a 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c4ec:	210a      	movs	r1, #10
 800c4ee:	2037      	movs	r0, #55	; 0x37
 800c4f0:	f000 fa66 	bl	800c9c0 <SX1276Write>
        break;
 800c4f4:	bf00      	nop
}
 800c4f6:	bf00      	nop
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c4fe:	bf00      	nop
 800c500:	200013c4 	.word	0x200013c4
 800c504:	1f4add40 	.word	0x1f4add40

0800c508 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60ba      	str	r2, [r7, #8]
 800c510:	607b      	str	r3, [r7, #4]
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
 800c516:	460b      	mov	r3, r1
 800c518:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fa11 	bl	800c944 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800c522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c526:	4618      	mov	r0, r3
 800c528:	f7ff fbd4 	bl	800bcd4 <SX1276SetRfTxPower>

    switch( modem )
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <SX1276SetTxConfig+0x32>
 800c532:	2b01      	cmp	r3, #1
 800c534:	f000 8099 	beq.w	800c66a <SX1276SetTxConfig+0x162>
                            RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800c538:	e181      	b.n	800c83e <SX1276SetTxConfig+0x336>
            SX1276.Settings.Fsk.Power = power;
 800c53a:	4ab5      	ldr	r2, [pc, #724]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
 800c53e:	7313      	strb	r3, [r2, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 800c540:	4ab3      	ldr	r2, [pc, #716]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6113      	str	r3, [r2, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c546:	4ab2      	ldr	r2, [pc, #712]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6153      	str	r3, [r2, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800c54c:	4ab0      	ldr	r2, [pc, #704]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	61d3      	str	r3, [r2, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c552:	4aaf      	ldr	r2, [pc, #700]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c556:	8413      	strh	r3, [r2, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800c558:	4aad      	ldr	r2, [pc, #692]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c55a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c55e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800c562:	4aab      	ldr	r2, [pc, #684]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c564:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c568:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800c56c:	4aa8      	ldr	r2, [pc, #672]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c56e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c572:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800c576:	4aa6      	ldr	r2, [pc, #664]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57a:	6293      	str	r3, [r2, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800c57c:	68b8      	ldr	r0, [r7, #8]
 800c57e:	f7f3 ffcb 	bl	8000518 <__aeabi_ui2d>
 800c582:	a39f      	add	r3, pc, #636	; (adr r3, 800c800 <SX1276SetTxConfig+0x2f8>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f4 f96a 	bl	8000860 <__aeabi_ddiv>
 800c58c:	4603      	mov	r3, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	4618      	mov	r0, r3
 800c592:	4621      	mov	r1, r4
 800c594:	f7f4 fb12 	bl	8000bbc <__aeabi_d2uiz>
 800c598:	4603      	mov	r3, r0
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	0a1b      	lsrs	r3, r3, #8
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	2004      	movs	r0, #4
 800c5a8:	f000 fa0a 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	2005      	movs	r0, #5
 800c5b4:	f000 fa04 	bl	800c9c0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800c5b8:	6a38      	ldr	r0, [r7, #32]
 800c5ba:	f7f3 ffad 	bl	8000518 <__aeabi_ui2d>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	a190      	add	r1, pc, #576	; (adr r1, 800c808 <SX1276SetTxConfig+0x300>)
 800c5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5cc:	f7f4 f948 	bl	8000860 <__aeabi_ddiv>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	f7f4 faf0 	bl	8000bbc <__aeabi_d2uiz>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	0a1b      	lsrs	r3, r3, #8
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	2002      	movs	r0, #2
 800c5ec:	f000 f9e8 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	2003      	movs	r0, #3
 800c5f8:	f000 f9e2 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800c5fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	b29b      	uxth	r3, r3
 800c602:	b2db      	uxtb	r3, r3
 800c604:	4619      	mov	r1, r3
 800c606:	2025      	movs	r0, #37	; 0x25
 800c608:	f000 f9da 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800c60c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	4619      	mov	r1, r3
 800c612:	2026      	movs	r0, #38	; 0x26
 800c614:	f000 f9d4 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_PACKETCONFIG1 ) &
 800c618:	2030      	movs	r0, #48	; 0x30
 800c61a:	f000 f9e3 	bl	800c9e4 <SX1276Read>
 800c61e:	4603      	mov	r3, r0
 800c620:	b25b      	sxtb	r3, r3
                            RF_PACKETCONFIG1_CRC_MASK &
 800c622:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800c626:	b25b      	sxtb	r3, r3
                            RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800c628:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	d001      	beq.n	800c634 <SX1276SetTxConfig+0x12c>
 800c630:	2200      	movs	r2, #0
 800c632:	e001      	b.n	800c638 <SX1276SetTxConfig+0x130>
 800c634:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800c638:	4313      	orrs	r3, r2
 800c63a:	b25a      	sxtb	r2, r3
                            ( crcOn << 4 ) );
 800c63c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c640:	011b      	lsls	r3, r3, #4
                            ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800c642:	b25b      	sxtb	r3, r3
 800c644:	4313      	orrs	r3, r2
 800c646:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	4619      	mov	r1, r3
 800c64c:	2030      	movs	r0, #48	; 0x30
 800c64e:	f000 f9b7 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800c652:	2031      	movs	r0, #49	; 0x31
 800c654:	f000 f9c6 	bl	800c9e4 <SX1276Read>
 800c658:	4603      	mov	r3, r0
 800c65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	4619      	mov	r1, r3
 800c662:	2031      	movs	r0, #49	; 0x31
 800c664:	f000 f9ac 	bl	800c9c0 <SX1276Write>
        break;
 800c668:	e0e9      	b.n	800c83e <SX1276SetTxConfig+0x336>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c66a:	4a69      	ldr	r2, [pc, #420]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6453      	str	r3, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800c670:	4a67      	ldr	r2, [pc, #412]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c672:	6a3b      	ldr	r3, [r7, #32]
 800c674:	6493      	str	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 800c676:	4a66      	ldr	r2, [pc, #408]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c67c:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800c680:	4a63      	ldr	r2, [pc, #396]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c684:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800c688:	4a61      	ldr	r2, [pc, #388]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c68a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c68e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800c692:	4a5f      	ldr	r2, [pc, #380]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c694:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c698:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800c69c:	4a5c      	ldr	r2, [pc, #368]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c69e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c6a2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800c6a6:	4a5a      	ldr	r2, [pc, #360]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c6a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6ac:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c6b0:	4a57      	ldr	r2, [pc, #348]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c6b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c6b6:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800c6ba:	4a55      	ldr	r2, [pc, #340]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6be:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	2b0c      	cmp	r3, #12
 800c6c4:	d902      	bls.n	800c6cc <SX1276SetTxConfig+0x1c4>
                datarate = 12;
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	623b      	str	r3, [r7, #32]
 800c6ca:	e004      	b.n	800c6d6 <SX1276SetTxConfig+0x1ce>
            else if( datarate < 6 )
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d801      	bhi.n	800c6d6 <SX1276SetTxConfig+0x1ce>
                datarate = 6;
 800c6d2:	2306      	movs	r3, #6
 800c6d4:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b07      	cmp	r3, #7
 800c6da:	d105      	bne.n	800c6e8 <SX1276SetTxConfig+0x1e0>
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	2b0b      	cmp	r3, #11
 800c6e0:	d008      	beq.n	800c6f4 <SX1276SetTxConfig+0x1ec>
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	2b0c      	cmp	r3, #12
 800c6e6:	d005      	beq.n	800c6f4 <SX1276SetTxConfig+0x1ec>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b08      	cmp	r3, #8
 800c6ec:	d107      	bne.n	800c6fe <SX1276SetTxConfig+0x1f6>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	2b0c      	cmp	r3, #12
 800c6f2:	d104      	bne.n	800c6fe <SX1276SetTxConfig+0x1f6>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800c6f4:	4b46      	ldr	r3, [pc, #280]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800c6fc:	e003      	b.n	800c706 <SX1276SetTxConfig+0x1fe>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800c6fe:	4b44      	ldr	r3, [pc, #272]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c700:	2200      	movs	r2, #0
 800c702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c706:	4b42      	ldr	r3, [pc, #264]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c708:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d011      	beq.n	800c734 <SX1276SetTxConfig+0x22c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800c710:	2044      	movs	r0, #68	; 0x44
 800c712:	f000 f967 	bl	800c9e4 <SX1276Read>
 800c716:	4603      	mov	r3, r0
 800c718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	4619      	mov	r1, r3
 800c720:	2044      	movs	r0, #68	; 0x44
 800c722:	f000 f94d 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800c726:	4b3a      	ldr	r3, [pc, #232]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c728:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c72c:	4619      	mov	r1, r3
 800c72e:	2024      	movs	r0, #36	; 0x24
 800c730:	f000 f946 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c734:	201d      	movs	r0, #29
 800c736:	f000 f955 	bl	800c9e4 <SX1276Read>
                            ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	b2da      	uxtb	r2, r3
 800c742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	4313      	orrs	r3, r2
 800c74c:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c74e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                            ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c752:	4313      	orrs	r3, r2
 800c754:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c756:	4619      	mov	r1, r3
 800c758:	201d      	movs	r0, #29
 800c75a:	f000 f931 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800c75e:	201e      	movs	r0, #30
 800c760:	f000 f940 	bl	800c9e4 <SX1276Read>
 800c764:	4603      	mov	r3, r0
                            RFLR_MODEMCONFIG2_SF_MASK &
 800c766:	f003 030b 	and.w	r3, r3, #11
 800c76a:	b2da      	uxtb	r2, r3
                            ( datarate << 4 ) | ( crcOn << 2 ) );
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	b2db      	uxtb	r3, r3
                            RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800c774:	4313      	orrs	r3, r2
 800c776:	b2da      	uxtb	r2, r3
                            ( datarate << 4 ) | ( crcOn << 2 ) );
 800c778:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c780:	4313      	orrs	r3, r2
 800c782:	b2db      	uxtb	r3, r3
 800c784:	4619      	mov	r1, r3
 800c786:	201e      	movs	r0, #30
 800c788:	f000 f91a 	bl	800c9c0 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c78c:	2026      	movs	r0, #38	; 0x26
 800c78e:	f000 f929 	bl	800c9e4 <SX1276Read>
 800c792:	4603      	mov	r3, r0
 800c794:	b25b      	sxtb	r3, r3
 800c796:	f023 0308 	bic.w	r3, r3, #8
 800c79a:	b25a      	sxtb	r2, r3
                            ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c79c:	4b1c      	ldr	r3, [pc, #112]	; (800c810 <SX1276SetTxConfig+0x308>)
 800c79e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c7a2:	00db      	lsls	r3, r3, #3
                            RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800c7a4:	b25b      	sxtb	r3, r3
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	2026      	movs	r0, #38	; 0x26
 800c7b0:	f000 f906 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800c7b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7b6:	0a1b      	lsrs	r3, r3, #8
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	4619      	mov	r1, r3
 800c7be:	2020      	movs	r0, #32
 800c7c0:	f000 f8fe 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800c7c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	2021      	movs	r0, #33	; 0x21
 800c7cc:	f000 f8f8 	bl	800c9c0 <SX1276Write>
            if( datarate == 6 )
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2b06      	cmp	r3, #6
 800c7d4:	d11e      	bne.n	800c814 <SX1276SetTxConfig+0x30c>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c7d6:	2031      	movs	r0, #49	; 0x31
 800c7d8:	f000 f904 	bl	800c9e4 <SX1276Read>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	b25b      	sxtb	r3, r3
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	b25b      	sxtb	r3, r3
                                RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c7e6:	f043 0305 	orr.w	r3, r3, #5
 800c7ea:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	2031      	movs	r0, #49	; 0x31
 800c7f2:	f000 f8e5 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c7f6:	210c      	movs	r1, #12
 800c7f8:	2037      	movs	r0, #55	; 0x37
 800c7fa:	f000 f8e1 	bl	800c9c0 <SX1276Write>
        break;
 800c7fe:	e01d      	b.n	800c83c <SX1276SetTxConfig+0x334>
 800c800:	00000000 	.word	0x00000000
 800c804:	404e8480 	.word	0x404e8480
 800c808:	00000000 	.word	0x00000000
 800c80c:	417e8480 	.word	0x417e8480
 800c810:	200013c4 	.word	0x200013c4
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c814:	2031      	movs	r0, #49	; 0x31
 800c816:	f000 f8e5 	bl	800c9e4 <SX1276Read>
 800c81a:	4603      	mov	r3, r0
 800c81c:	b25b      	sxtb	r3, r3
 800c81e:	f023 0307 	bic.w	r3, r3, #7
 800c822:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c824:	f043 0303 	orr.w	r3, r3, #3
 800c828:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	4619      	mov	r1, r3
 800c82e:	2031      	movs	r0, #49	; 0x31
 800c830:	f000 f8c6 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c834:	210a      	movs	r1, #10
 800c836:	2037      	movs	r0, #55	; 0x37
 800c838:	f000 f8c2 	bl	800c9c0 <SX1276Write>
        break;
 800c83c:	bf00      	nop
}
 800c83e:	bf00      	nop
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	bd90      	pop	{r4, r7, pc}
 800c846:	bf00      	nop

0800c848 <SX1276SetSleep>:
    }
    SX1276SetTx( txTimeout );
}

void SX1276SetSleep( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c84c:	2000      	movs	r0, #0
 800c84e:	f000 f83f 	bl	800c8d0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800c852:	4b02      	ldr	r3, [pc, #8]	; (800c85c <SX1276SetSleep+0x14>)
 800c854:	2200      	movs	r2, #0
 800c856:	711a      	strb	r2, [r3, #4]
}
 800c858:	bf00      	nop
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	200013c4 	.word	0x200013c4

0800c860 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0
	SX1276IoDeInit();
 800c864:	f7ff fa06 	bl	800bc74 <SX1276IoDeInit>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800c868:	2001      	movs	r0, #1
 800c86a:	f000 f831 	bl	800c8d0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800c86e:	4b02      	ldr	r3, [pc, #8]	; (800c878 <SX1276SetStby+0x18>)
 800c870:	2200      	movs	r2, #0
 800c872:	711a      	strb	r2, [r3, #4]
}
 800c874:	bf00      	nop
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200013c4 	.word	0x200013c4

0800c87c <SX1276Reset>:
    }
    return rssi;
}

void SX1276Reset( void )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 800c882:	1d3b      	adds	r3, r7, #4
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]
 800c888:	605a      	str	r2, [r3, #4]
 800c88a:	609a      	str	r2, [r3, #8]
 800c88c:	60da      	str	r2, [r3, #12]
 800c88e:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800c890:	2301      	movs	r3, #1
 800c892:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800c898:	2303      	movs	r3, #3
 800c89a:	613b      	str	r3, [r7, #16]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	461a      	mov	r2, r3
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8a6:	f000 feed 	bl	800d684 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8b2:	f000 ffa5 	bl	800d800 <HW_GPIO_Write>


    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60bb      	str	r3, [r7, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800c8ba:	1d3b      	adds	r3, r7, #4
 800c8bc:	461a      	mov	r2, r3
 800c8be:	2101      	movs	r1, #1
 800c8c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8c4:	f000 fede 	bl	800d684 <HW_GPIO_Init>

}
 800c8c8:	bf00      	nop
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800c8da:	79fb      	ldrb	r3, [r7, #7]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d114      	bne.n	800c90a <SX1276SetOpMode+0x3a>
    {
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c8e0:	2001      	movs	r0, #1
 800c8e2:	f000 f87f 	bl	800c9e4 <SX1276Read>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	b25b      	sxtb	r3, r3
 800c8ea:	f023 0307 	bic.w	r3, r3, #7
 800c8ee:	b25a      	sxtb	r2, r3
 800c8f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	b25b      	sxtb	r3, r3
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	2001      	movs	r0, #1
 800c8fe:	f000 f85f 	bl	800c9c0 <SX1276Write>

        SX1276SetAntSwLowPower( true );
 800c902:	2001      	movs	r0, #1
 800c904:	f7ff faa0 	bl	800be48 <SX1276SetAntSwLowPower>

        SX1276SetAntSw( opMode );

        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 800c908:	e017      	b.n	800c93a <SX1276SetOpMode+0x6a>
        SX1276SetAntSwLowPower( false );
 800c90a:	2000      	movs	r0, #0
 800c90c:	f7ff fa9c 	bl	800be48 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff fafa 	bl	800bf0c <SX1276SetAntSw>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c918:	2001      	movs	r0, #1
 800c91a:	f000 f863 	bl	800c9e4 <SX1276Read>
 800c91e:	4603      	mov	r3, r0
 800c920:	b25b      	sxtb	r3, r3
 800c922:	f023 0307 	bic.w	r3, r3, #7
 800c926:	b25a      	sxtb	r2, r3
 800c928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	b25b      	sxtb	r3, r3
 800c930:	b2db      	uxtb	r3, r3
 800c932:	4619      	mov	r1, r3
 800c934:	2001      	movs	r0, #1
 800c936:	f000 f843 	bl	800c9c0 <SX1276Write>
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	71fb      	strb	r3, [r7, #7]
    SX1276.Settings.Modem = modem;
 800c94e:	4a1b      	ldr	r2, [pc, #108]	; (800c9bc <SX1276SetModem+0x78>)
 800c950:	79fb      	ldrb	r3, [r7, #7]
 800c952:	7153      	strb	r3, [r2, #5]
    switch( SX1276.Settings.Modem )
 800c954:	4b19      	ldr	r3, [pc, #100]	; (800c9bc <SX1276SetModem+0x78>)
 800c956:	795b      	ldrb	r3, [r3, #5]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d015      	beq.n	800c988 <SX1276SetModem+0x44>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800c95c:	f7ff ff74 	bl	800c848 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800c960:	2001      	movs	r0, #1
 800c962:	f000 f83f 	bl	800c9e4 <SX1276Read>
 800c966:	4603      	mov	r3, r0
 800c968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	4619      	mov	r1, r3
 800c970:	2001      	movs	r0, #1
 800c972:	f000 f825 	bl	800c9c0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c976:	2100      	movs	r1, #0
 800c978:	2040      	movs	r0, #64	; 0x40
 800c97a:	f000 f821 	bl	800c9c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800c97e:	2130      	movs	r1, #48	; 0x30
 800c980:	2041      	movs	r0, #65	; 0x41
 800c982:	f000 f81d 	bl	800c9c0 <SX1276Write>
        break;
 800c986:	e015      	b.n	800c9b4 <SX1276SetModem+0x70>
    case MODEM_LORA:
        SX1276SetSleep( );
 800c988:	f7ff ff5e 	bl	800c848 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800c98c:	2001      	movs	r0, #1
 800c98e:	f000 f829 	bl	800c9e4 <SX1276Read>
 800c992:	4603      	mov	r3, r0
 800c994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	4619      	mov	r1, r3
 800c99c:	2001      	movs	r0, #1
 800c99e:	f000 f80f 	bl	800c9c0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	2040      	movs	r0, #64	; 0x40
 800c9a6:	f000 f80b 	bl	800c9c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	2041      	movs	r0, #65	; 0x41
 800c9ae:	f000 f807 	bl	800c9c0 <SX1276Write>
        break;
 800c9b2:	bf00      	nop
    }
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	200013c4 	.word	0x200013c4

0800c9c0 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	460a      	mov	r2, r1
 800c9ca:	80fb      	strh	r3, [r7, #6]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	717b      	strb	r3, [r7, #5]
    SX1276WriteBuffer( addr, &data, 1 );
 800c9d0:	1d79      	adds	r1, r7, #5
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 f816 	bl	800ca08 <SX1276WriteBuffer>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800c9ee:	f107 010f 	add.w	r1, r7, #15
 800c9f2:	88fb      	ldrh	r3, [r7, #6]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f838 	bl	800ca6c <SX1276ReadBuffer>
    return data;
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	6039      	str	r1, [r7, #0]
 800ca12:	80fb      	strh	r3, [r7, #6]
 800ca14:	4613      	mov	r3, r2
 800ca16:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2140      	movs	r1, #64	; 0x40
 800ca1c:	4812      	ldr	r0, [pc, #72]	; (800ca68 <SX1276WriteBuffer+0x60>)
 800ca1e:	f000 feef 	bl	800d800 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 800ca22:	88fb      	ldrh	r3, [r7, #6]
 800ca24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 ff6e 	bl	800d90c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]
 800ca34:	e00a      	b.n	800ca4c <SX1276WriteBuffer+0x44>
    {
        HW_SPI_InOut( buffer[i] );
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 ff63 	bl	800d90c <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	73fb      	strb	r3, [r7, #15]
 800ca4c:	7bfa      	ldrb	r2, [r7, #15]
 800ca4e:	797b      	ldrb	r3, [r7, #5]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d3f0      	bcc.n	800ca36 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800ca54:	2201      	movs	r2, #1
 800ca56:	2140      	movs	r1, #64	; 0x40
 800ca58:	4803      	ldr	r0, [pc, #12]	; (800ca68 <SX1276WriteBuffer+0x60>)
 800ca5a:	f000 fed1 	bl	800d800 <HW_GPIO_Write>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	48000400 	.word	0x48000400

0800ca6c <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	80fb      	strh	r3, [r7, #6]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2140      	movs	r1, #64	; 0x40
 800ca80:	4813      	ldr	r0, [pc, #76]	; (800cad0 <SX1276ReadBuffer+0x64>)
 800ca82:	f000 febd 	bl	800d800 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 800ca86:	88fb      	ldrh	r3, [r7, #6]
 800ca88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 ff3c 	bl	800d90c <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	e00c      	b.n	800cab4 <SX1276ReadBuffer+0x48>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	f000 ff36 	bl	800d90c <HW_SPI_InOut>
 800caa0:	4603      	mov	r3, r0
 800caa2:	4619      	mov	r1, r3
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	4413      	add	r3, r2
 800caaa:	b2ca      	uxtb	r2, r1
 800caac:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	3301      	adds	r3, #1
 800cab2:	73fb      	strb	r3, [r7, #15]
 800cab4:	7bfa      	ldrb	r2, [r7, #15]
 800cab6:	797b      	ldrb	r3, [r7, #5]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d3ee      	bcc.n	800ca9a <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800cabc:	2201      	movs	r2, #1
 800cabe:	2140      	movs	r1, #64	; 0x40
 800cac0:	4803      	ldr	r0, [pc, #12]	; (800cad0 <SX1276ReadBuffer+0x64>)
 800cac2:	f000 fe9d 	bl	800d800 <HW_GPIO_Write>
}
 800cac6:	bf00      	nop
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	48000400 	.word	0x48000400

0800cad4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	2000      	movs	r0, #0
 800cae8:	f7ff ff8e 	bl	800ca08 <SX1276WriteBuffer>
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	461a      	mov	r2, r3
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	2000      	movs	r0, #0
 800cb08:	f7ff ffb0 	bl	800ca6c <SX1276ReadBuffer>
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <SX1276OnDio1Irq>:
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}

void SX1276OnDio1Irq()
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800cb18:	4b5e      	ldr	r3, [pc, #376]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d002      	beq.n	800cb26 <SX1276OnDio1Irq+0x12>
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d074      	beq.n	800cc0e <SX1276OnDio1Irq+0xfa>
            default:
                break;
            }
            break;
        default:
            break;
 800cb24:	e0b3      	b.n	800cc8e <SX1276OnDio1Irq+0x17a>
            switch( SX1276.Settings.Modem )
 800cb26:	4b5b      	ldr	r3, [pc, #364]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb28:	795b      	ldrb	r3, [r3, #5]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <SX1276OnDio1Irq+0x20>
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d057      	beq.n	800cbe2 <SX1276OnDio1Irq+0xce>
                break;
 800cb32:	e06b      	b.n	800cc0c <SX1276OnDio1Irq+0xf8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800cb34:	4b57      	ldr	r3, [pc, #348]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb36:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d117      	bne.n	800cb6c <SX1276OnDio1Irq+0x58>
 800cb3c:	4b55      	ldr	r3, [pc, #340]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb3e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d113      	bne.n	800cb6c <SX1276OnDio1Irq+0x58>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800cb44:	4b53      	ldr	r3, [pc, #332]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cb4a:	f083 0301 	eor.w	r3, r3, #1
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <SX1276OnDio1Irq+0x4a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800cb54:	2101      	movs	r1, #1
 800cb56:	4850      	ldr	r0, [pc, #320]	; (800cc98 <SX1276OnDio1Irq+0x184>)
 800cb58:	f7ff ffcc 	bl	800caf4 <SX1276ReadFifo>
 800cb5c:	e006      	b.n	800cb6c <SX1276OnDio1Irq+0x58>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800cb5e:	2032      	movs	r0, #50	; 0x32
 800cb60:	f7ff ff40 	bl	800c9e4 <SX1276Read>
 800cb64:	4603      	mov	r3, r0
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	4b4a      	ldr	r3, [pc, #296]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb6a:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800cb6c:	4b49      	ldr	r3, [pc, #292]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb6e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b48      	ldr	r3, [pc, #288]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	4a46      	ldr	r2, [pc, #280]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb7a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	db1a      	blt.n	800cbb8 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800cb82:	4b44      	ldr	r3, [pc, #272]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb84:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb86:	461a      	mov	r2, r3
 800cb88:	4b44      	ldr	r3, [pc, #272]	; (800cc9c <SX1276OnDio1Irq+0x188>)
 800cb8a:	441a      	add	r2, r3
 800cb8c:	4b41      	ldr	r3, [pc, #260]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cb8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb92:	3b01      	subs	r3, #1
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	4619      	mov	r1, r3
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7ff ffab 	bl	800caf4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800cb9e:	4b3d      	ldr	r3, [pc, #244]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cba0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cba2:	4b3c      	ldr	r3, [pc, #240]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	4413      	add	r3, r2
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	4b38      	ldr	r3, [pc, #224]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbb4:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cbb6:	e029      	b.n	800cc0c <SX1276OnDio1Irq+0xf8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cbb8:	4b36      	ldr	r3, [pc, #216]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4b37      	ldr	r3, [pc, #220]	; (800cc9c <SX1276OnDio1Irq+0x188>)
 800cbc0:	18d0      	adds	r0, r2, r3
 800cbc2:	4b34      	ldr	r3, [pc, #208]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbc4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b32      	ldr	r3, [pc, #200]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	f7ff ff8e 	bl	800caf4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cbd8:	4b2e      	ldr	r3, [pc, #184]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbda:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800cbdc:	4b2d      	ldr	r3, [pc, #180]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbde:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cbe0:	e014      	b.n	800cc0c <SX1276OnDio1Irq+0xf8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800cbe2:	2180      	movs	r1, #128	; 0x80
 800cbe4:	2012      	movs	r0, #18
 800cbe6:	f7ff feeb 	bl	800c9c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800cbea:	4b2a      	ldr	r3, [pc, #168]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <SX1276OnDio1Irq+0x18c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d008      	beq.n	800cc0a <SX1276OnDio1Irq+0xf6>
 800cbf8:	4b29      	ldr	r3, [pc, #164]	; (800cca0 <SX1276OnDio1Irq+0x18c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d003      	beq.n	800cc0a <SX1276OnDio1Irq+0xf6>
                    RadioEvents->RxTimeout( );
 800cc02:	4b27      	ldr	r3, [pc, #156]	; (800cca0 <SX1276OnDio1Irq+0x18c>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	4798      	blx	r3
                break;
 800cc0a:	bf00      	nop
            break;
 800cc0c:	e03f      	b.n	800cc8e <SX1276OnDio1Irq+0x17a>
            switch( SX1276.Settings.Modem )
 800cc0e:	4b21      	ldr	r3, [pc, #132]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc10:	795b      	ldrb	r3, [r3, #5]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <SX1276OnDio1Irq+0x108>
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d037      	beq.n	800cc8a <SX1276OnDio1Irq+0x176>
                break;
 800cc1a:	e037      	b.n	800cc8c <SX1276OnDio1Irq+0x178>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800cc1c:	4b1d      	ldr	r3, [pc, #116]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cc20:	461a      	mov	r2, r3
 800cc22:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc2a:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	dd16      	ble.n	800cc60 <SX1276OnDio1Irq+0x14c>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800cc32:	4b18      	ldr	r3, [pc, #96]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc36:	461a      	mov	r2, r3
 800cc38:	4b18      	ldr	r3, [pc, #96]	; (800cc9c <SX1276OnDio1Irq+0x188>)
 800cc3a:	441a      	add	r2, r3
 800cc3c:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7ff ff45 	bl	800cad4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc4c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cc4e:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	4413      	add	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	4b0e      	ldr	r3, [pc, #56]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc5c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cc5e:	e015      	b.n	800cc8c <SX1276OnDio1Irq+0x178>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cc60:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc62:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc64:	461a      	mov	r2, r3
 800cc66:	4b0d      	ldr	r3, [pc, #52]	; (800cc9c <SX1276OnDio1Irq+0x188>)
 800cc68:	18d0      	adds	r0, r2, r3
 800cc6a:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc6c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	f7ff ff2a 	bl	800cad4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800cc80:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc82:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <SX1276OnDio1Irq+0x180>)
 800cc86:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cc88:	e000      	b.n	800cc8c <SX1276OnDio1Irq+0x178>
                break;
 800cc8a:	bf00      	nop
            break;
 800cc8c:	bf00      	nop
    }
}
 800cc8e:	bf00      	nop
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	200013c4 	.word	0x200013c4
 800cc98:	200013fe 	.word	0x200013fe
 800cc9c:	20000f54 	.word	0x20000f54
 800cca0:	2000036c 	.word	0x2000036c

0800cca4 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq()
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 800ccae:	4b56      	ldr	r3, [pc, #344]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800ccb0:	791b      	ldrb	r3, [r3, #4]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d002      	beq.n	800ccbc <SX1276OnDio2Irq+0x18>
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d078      	beq.n	800cdac <SX1276OnDio2Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 800ccba:	e0a1      	b.n	800ce00 <SX1276OnDio2Irq+0x15c>
            switch( SX1276.Settings.Modem )
 800ccbc:	4b52      	ldr	r3, [pc, #328]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800ccbe:	795b      	ldrb	r3, [r3, #5]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <SX1276OnDio2Irq+0x26>
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d04e      	beq.n	800cd66 <SX1276OnDio2Irq+0xc2>
                break;
 800ccc8:	e06f      	b.n	800cdaa <SX1276OnDio2Irq+0x106>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800ccca:	4b4f      	ldr	r3, [pc, #316]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800ccd2:	4b4d      	ldr	r3, [pc, #308]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800ccd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d163      	bne.n	800cda4 <SX1276OnDio2Irq+0x100>
 800ccdc:	4b4a      	ldr	r3, [pc, #296]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800ccde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d15e      	bne.n	800cda4 <SX1276OnDio2Irq+0x100>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800cce6:	4b48      	ldr	r3, [pc, #288]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800ccee:	2011      	movs	r0, #17
 800ccf0:	f7ff fe78 	bl	800c9e4 <SX1276Read>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	085b      	lsrs	r3, r3, #1
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	425b      	negs	r3, r3
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	b25a      	sxtb	r2, r3
 800cd00:	4b41      	ldr	r3, [pc, #260]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cd02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800cd06:	201b      	movs	r0, #27
 800cd08:	f7ff fe6c 	bl	800c9e4 <SX1276Read>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	021c      	lsls	r4, r3, #8
                                ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800cd10:	201c      	movs	r0, #28
 800cd12:	f7ff fe67 	bl	800c9e4 <SX1276Read>
 800cd16:	4603      	mov	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800cd18:	4323      	orrs	r3, r4
 800cd1a:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	60bb      	str	r3, [r7, #8]
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	607b      	str	r3, [r7, #4]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	f643 5209 	movw	r2, #15625	; 0x3d09
 800cd32:	fb02 f203 	mul.w	r2, r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f643 5109 	movw	r1, #15625	; 0x3d09
 800cd3c:	fb01 f303 	mul.w	r3, r1, r3
 800cd40:	3380      	adds	r3, #128	; 0x80
 800cd42:	0a1b      	lsrs	r3, r3, #8
 800cd44:	4413      	add	r3, r2
 800cd46:	461a      	mov	r2, r3
 800cd48:	4b2f      	ldr	r3, [pc, #188]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cd4a:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800cd4c:	200c      	movs	r0, #12
 800cd4e:	f7ff fe49 	bl	800c9e4 <SX1276Read>
 800cd52:	4603      	mov	r3, r0
 800cd54:	095b      	lsrs	r3, r3, #5
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	f003 0307 	and.w	r3, r3, #7
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b2a      	ldr	r3, [pc, #168]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cd60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                break;
 800cd64:	e01e      	b.n	800cda4 <SX1276OnDio2Irq+0x100>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cd66:	4b28      	ldr	r3, [pc, #160]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cd68:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01b      	beq.n	800cda8 <SX1276OnDio2Irq+0x104>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800cd70:	2102      	movs	r1, #2
 800cd72:	2012      	movs	r0, #18
 800cd74:	f7ff fe24 	bl	800c9c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800cd78:	4b24      	ldr	r3, [pc, #144]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d013      	beq.n	800cda8 <SX1276OnDio2Irq+0x104>
 800cd80:	4b22      	ldr	r3, [pc, #136]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00e      	beq.n	800cda8 <SX1276OnDio2Irq+0x104>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800cd8a:	4b20      	ldr	r3, [pc, #128]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	695c      	ldr	r4, [r3, #20]
 800cd90:	201c      	movs	r0, #28
 800cd92:	f7ff fe27 	bl	800c9e4 <SX1276Read>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	4618      	mov	r0, r3
 800cda0:	47a0      	blx	r4
                break;
 800cda2:	e001      	b.n	800cda8 <SX1276OnDio2Irq+0x104>
                break;
 800cda4:	bf00      	nop
 800cda6:	e02b      	b.n	800ce00 <SX1276OnDio2Irq+0x15c>
                break;
 800cda8:	bf00      	nop
            break;
 800cdaa:	e029      	b.n	800ce00 <SX1276OnDio2Irq+0x15c>
            switch( SX1276.Settings.Modem )
 800cdac:	4b16      	ldr	r3, [pc, #88]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cdae:	795b      	ldrb	r3, [r3, #5]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d021      	beq.n	800cdf8 <SX1276OnDio2Irq+0x154>
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d000      	beq.n	800cdba <SX1276OnDio2Irq+0x116>
                break;
 800cdb8:	e021      	b.n	800cdfe <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cdba:	4b13      	ldr	r3, [pc, #76]	; (800ce08 <SX1276OnDio2Irq+0x164>)
 800cdbc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d01b      	beq.n	800cdfc <SX1276OnDio2Irq+0x158>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800cdc4:	2102      	movs	r1, #2
 800cdc6:	2012      	movs	r0, #18
 800cdc8:	f7ff fdfa 	bl	800c9c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800cdcc:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d013      	beq.n	800cdfc <SX1276OnDio2Irq+0x158>
 800cdd4:	4b0d      	ldr	r3, [pc, #52]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00e      	beq.n	800cdfc <SX1276OnDio2Irq+0x158>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800cdde:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <SX1276OnDio2Irq+0x168>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	695c      	ldr	r4, [r3, #20]
 800cde4:	201c      	movs	r0, #28
 800cde6:	f7ff fdfd 	bl	800c9e4 <SX1276Read>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	47a0      	blx	r4
                break;
 800cdf6:	e001      	b.n	800cdfc <SX1276OnDio2Irq+0x158>
                break;
 800cdf8:	bf00      	nop
 800cdfa:	e000      	b.n	800cdfe <SX1276OnDio2Irq+0x15a>
                break;
 800cdfc:	bf00      	nop
            break;
 800cdfe:	bf00      	nop
    }
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd90      	pop	{r4, r7, pc}
 800ce08:	200013c4 	.word	0x200013c4
 800ce0c:	2000036c 	.word	0x2000036c

0800ce10 <SX1276OnDio4Irq>:
//         break;
//     }
// }

void SX1276OnDio4Irq()
{
 800ce10:	b480      	push	{r7}
 800ce12:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800ce14:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <SX1276OnDio4Irq+0x38>)
 800ce16:	795b      	ldrb	r3, [r3, #5]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <SX1276OnDio4Irq+0x12>
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d00a      	beq.n	800ce36 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800ce20:	e00c      	b.n	800ce3c <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800ce22:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <SX1276OnDio4Irq+0x38>)
 800ce24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800ce2c:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <SX1276OnDio4Irq+0x38>)
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        break;
 800ce34:	e001      	b.n	800ce3a <SX1276OnDio4Irq+0x2a>
        break;
 800ce36:	bf00      	nop
 800ce38:	e000      	b.n	800ce3c <SX1276OnDio4Irq+0x2c>
        break;
 800ce3a:	bf00      	nop
    }
}
 800ce3c:	bf00      	nop
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	200013c4 	.word	0x200013c4

0800ce4c <SX1276WriteFIFO>:
}


/*sx1276 functions---------------------------------------------------------------------------*/
void SX1276WriteFIFO( uint8_t *buffer, uint8_t size )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
    switch( SX1276.Settings.Modem )
 800ce58:	4b4a      	ldr	r3, [pc, #296]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ce5a:	795b      	ldrb	r3, [r3, #5]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <SX1276WriteFIFO+0x1a>
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d041      	beq.n	800cee8 <SX1276WriteFIFO+0x9c>
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
        }
        break;
    }
}
 800ce64:	e08a      	b.n	800cf7c <SX1276WriteFIFO+0x130>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ce66:	4b47      	ldr	r3, [pc, #284]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	4b44      	ldr	r3, [pc, #272]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ce72:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800ce74:	4b43      	ldr	r3, [pc, #268]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ce76:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ce7a:	f083 0301 	eor.w	r3, r3, #1
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d005      	beq.n	800ce90 <SX1276WriteFIFO+0x44>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800ce84:	1cfb      	adds	r3, r7, #3
 800ce86:	2101      	movs	r1, #1
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fe23 	bl	800cad4 <SX1276WriteFifo>
 800ce8e:	e004      	b.n	800ce9a <SX1276WriteFIFO+0x4e>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800ce90:	78fb      	ldrb	r3, [r7, #3]
 800ce92:	4619      	mov	r1, r3
 800ce94:	2032      	movs	r0, #50	; 0x32
 800ce96:	f7ff fd93 	bl	800c9c0 <SX1276Write>
            if( ( size > 0 ) && ( size <= 64 ) )
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d007      	beq.n	800ceb0 <SX1276WriteFIFO+0x64>
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d804      	bhi.n	800ceb0 <SX1276WriteFIFO+0x64>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800cea6:	78fa      	ldrb	r2, [r7, #3]
 800cea8:	4b36      	ldr	r3, [pc, #216]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ceaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ceae:	e009      	b.n	800cec4 <SX1276WriteFIFO+0x78>
                memcpy( RxTxBuffer, buffer, size );
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	6879      	ldr	r1, [r7, #4]
 800ceb6:	4834      	ldr	r0, [pc, #208]	; (800cf88 <SX1276WriteFIFO+0x13c>)
 800ceb8:	f014 fb5c 	bl	8021574 <memcpy>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800cebc:	4b31      	ldr	r3, [pc, #196]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800cebe:	2220      	movs	r2, #32
 800cec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800cec4:	4b2f      	ldr	r3, [pc, #188]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800cec6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fe01 	bl	800cad4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ced2:	4b2c      	ldr	r3, [pc, #176]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ced4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ced6:	4b2b      	ldr	r3, [pc, #172]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ced8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4413      	add	r3, r2
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	4b28      	ldr	r3, [pc, #160]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800cee4:	879a      	strh	r2, [r3, #60]	; 0x3c
        break;
 800cee6:	e049      	b.n	800cf7c <SX1276WriteFIFO+0x130>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800cee8:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800ceea:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00f      	beq.n	800cf12 <SX1276WriteFIFO+0xc6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800cef2:	2033      	movs	r0, #51	; 0x33
 800cef4:	f7ff fd76 	bl	800c9e4 <SX1276Read>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	2033      	movs	r0, #51	; 0x33
 800cf04:	f7ff fd5c 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800cf08:	2119      	movs	r1, #25
 800cf0a:	203b      	movs	r0, #59	; 0x3b
 800cf0c:	f7ff fd58 	bl	800c9c0 <SX1276Write>
 800cf10:	e013      	b.n	800cf3a <SX1276WriteFIFO+0xee>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800cf12:	2033      	movs	r0, #51	; 0x33
 800cf14:	f7ff fd66 	bl	800c9e4 <SX1276Read>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800cf20:	b25b      	sxtb	r3, r3
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	b25b      	sxtb	r3, r3
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	2033      	movs	r0, #51	; 0x33
 800cf2e:	f7ff fd47 	bl	800c9c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800cf32:	211d      	movs	r1, #29
 800cf34:	203b      	movs	r0, #59	; 0x3b
 800cf36:	f7ff fd43 	bl	800c9c0 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800cf3a:	78fa      	ldrb	r2, [r7, #3]
 800cf3c:	4b11      	ldr	r3, [pc, #68]	; (800cf84 <SX1276WriteFIFO+0x138>)
 800cf3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800cf42:	78fb      	ldrb	r3, [r7, #3]
 800cf44:	4619      	mov	r1, r3
 800cf46:	2022      	movs	r0, #34	; 0x22
 800cf48:	f7ff fd3a 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	200e      	movs	r0, #14
 800cf50:	f7ff fd36 	bl	800c9c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800cf54:	2100      	movs	r1, #0
 800cf56:	200d      	movs	r0, #13
 800cf58:	f7ff fd32 	bl	800c9c0 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	f7ff fd41 	bl	800c9e4 <SX1276Read>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <SX1276WriteFIFO+0x124>
                SX1276SetStby( );
 800cf6c:	f7ff fc78 	bl	800c860 <SX1276SetStby>
            SX1276WriteFifo( buffer, size );
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff fdad 	bl	800cad4 <SX1276WriteFifo>
        break;
 800cf7a:	bf00      	nop
}
 800cf7c:	bf00      	nop
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	200013c4 	.word	0x200013c4
 800cf88:	20000f54 	.word	0x20000f54

0800cf8c <SX1276GetPacketTime>:
    SX1276Write( REG_LR_MODEMCONFIG2, ( SX1276Read( REG_LR_MODEMCONFIG2 ) & RFLR_MODEMCONFIG2_SF_MASK) |
                ( datarate << 4 ) );
}

uint32_t SX1276GetPacketTime(uint8_t sf, uint8_t bandwidth, uint8_t cr, uint8_t header, uint8_t preamble_len, uint8_t pktLen)
{
 800cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8e:	b08d      	sub	sp, #52	; 0x34
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4604      	mov	r4, r0
 800cf94:	4608      	mov	r0, r1
 800cf96:	4611      	mov	r1, r2
 800cf98:	461a      	mov	r2, r3
 800cf9a:	4623      	mov	r3, r4
 800cf9c:	71fb      	strb	r3, [r7, #7]
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	71bb      	strb	r3, [r7, #6]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	717b      	strb	r3, [r7, #5]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	713b      	strb	r3, [r7, #4]
    uint32_t bw = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t Crc_on, FixLen, LowDatarateOptimize;
    uint32_t tPreamble = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
    if (header) /* if is for calculate the explict header */
 800cfb2:	793b      	ldrb	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00b      	beq.n	800cfd0 <SX1276GetPacketTime+0x44>
    {
        Crc_on = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        FixLen = 1;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        cr = 4;
 800cfc4:	2304      	movs	r3, #4
 800cfc6:	717b      	strb	r3, [r7, #5]
        pktLen = 2;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800cfce:	e005      	b.n	800cfdc <SX1276GetPacketTime+0x50>
    }
    else
    {
        Crc_on = 1;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        FixLen = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
    // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
    switch( bandwidth )
 800cfdc:	79bb      	ldrb	r3, [r7, #6]
 800cfde:	2b08      	cmp	r3, #8
 800cfe0:	d006      	beq.n	800cff0 <SX1276GetPacketTime+0x64>
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	d007      	beq.n	800cff6 <SX1276GetPacketTime+0x6a>
 800cfe6:	2b07      	cmp	r3, #7
 800cfe8:	d108      	bne.n	800cffc <SX1276GetPacketTime+0x70>
    {
    case 7: // 125 kHz
        bw = 125000;
 800cfea:	4b58      	ldr	r3, [pc, #352]	; (800d14c <SX1276GetPacketTime+0x1c0>)
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfee:	e005      	b.n	800cffc <SX1276GetPacketTime+0x70>
    case 8: // 250 kHz
        bw = 250000;
 800cff0:	4b57      	ldr	r3, [pc, #348]	; (800d150 <SX1276GetPacketTime+0x1c4>)
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cff4:	e002      	b.n	800cffc <SX1276GetPacketTime+0x70>
    case 9: // 500 kHz
        bw = 500000;
 800cff6:	4b57      	ldr	r3, [pc, #348]	; (800d154 <SX1276GetPacketTime+0x1c8>)
 800cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cffa:	bf00      	nop
    }
    if( ( ( bandwidth == 7 ) && ( ( sf == 11 ) || ( sf == 12 ) ) ) ||
 800cffc:	79bb      	ldrb	r3, [r7, #6]
 800cffe:	2b07      	cmp	r3, #7
 800d000:	d105      	bne.n	800d00e <SX1276GetPacketTime+0x82>
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b0b      	cmp	r3, #11
 800d006:	d008      	beq.n	800d01a <SX1276GetPacketTime+0x8e>
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	2b0c      	cmp	r3, #12
 800d00c:	d005      	beq.n	800d01a <SX1276GetPacketTime+0x8e>
 800d00e:	79bb      	ldrb	r3, [r7, #6]
 800d010:	2b08      	cmp	r3, #8
 800d012:	d106      	bne.n	800d022 <SX1276GetPacketTime+0x96>
    ( ( bandwidth == 8 ) && ( sf == 12 ) ) )
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b0c      	cmp	r3, #12
 800d018:	d103      	bne.n	800d022 <SX1276GetPacketTime+0x96>
    {
        LowDatarateOptimize = 0x01;
 800d01a:	2301      	movs	r3, #1
 800d01c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d020:	e002      	b.n	800d028 <SX1276GetPacketTime+0x9c>
    }
    else
    {
        LowDatarateOptimize = 0x00;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }

    uint32_t rs = (1e3 * bw) / ( 1 << sf );
 800d028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02a:	f7f3 fa75 	bl	8000518 <__aeabi_ui2d>
 800d02e:	f04f 0200 	mov.w	r2, #0
 800d032:	4b49      	ldr	r3, [pc, #292]	; (800d158 <SX1276GetPacketTime+0x1cc>)
 800d034:	f7f3 faea 	bl	800060c <__aeabi_dmul>
 800d038:	4603      	mov	r3, r0
 800d03a:	460c      	mov	r4, r1
 800d03c:	4625      	mov	r5, r4
 800d03e:	461c      	mov	r4, r3
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	2201      	movs	r2, #1
 800d044:	fa02 f303 	lsl.w	r3, r2, r3
 800d048:	4618      	mov	r0, r3
 800d04a:	f7f3 fa75 	bl	8000538 <__aeabi_i2d>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4620      	mov	r0, r4
 800d054:	4629      	mov	r1, r5
 800d056:	f7f3 fc03 	bl	8000860 <__aeabi_ddiv>
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	4618      	mov	r0, r3
 800d060:	4621      	mov	r1, r4
 800d062:	f7f3 fdab 	bl	8000bbc <__aeabi_d2uiz>
 800d066:	4603      	mov	r3, r0
 800d068:	623b      	str	r3, [r7, #32]
    uint32_t ts = (uint32_t)1e9 / rs; /* Symbol time : time for one symbol (us) */
 800d06a:	4a3c      	ldr	r2, [pc, #240]	; (800d15c <SX1276GetPacketTime+0x1d0>)
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d072:	61fb      	str	r3, [r7, #28]
    uint32_t tmp = (uint32_t)(ceil( (int32_t)( 8 * pktLen - 4 * sf + 28 + 16 * Crc_on - ( FixLen ? 20 : 0 ) ) / (double)( 4 * (sf - ( ( LowDatarateOptimize > 0 ) ? 2 : 0 ))) ) * ( cr + 4 ));
 800d074:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d078:	005a      	lsls	r2, r3, #1
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	1dda      	adds	r2, r3, #7
 800d080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	009a      	lsls	r2, r3, #2
 800d08a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <SX1276GetPacketTime+0x10a>
 800d092:	2314      	movs	r3, #20
 800d094:	e000      	b.n	800d098 <SX1276GetPacketTime+0x10c>
 800d096:	2300      	movs	r3, #0
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7f3 fa4c 	bl	8000538 <__aeabi_i2d>
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	79fa      	ldrb	r2, [r7, #7]
 800d0a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d001      	beq.n	800d0b2 <SX1276GetPacketTime+0x126>
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e000      	b.n	800d0b4 <SX1276GetPacketTime+0x128>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7f3 fa3d 	bl	8000538 <__aeabi_i2d>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	f7f3 fbcb 	bl	8000860 <__aeabi_ddiv>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	ec44 3b17 	vmov	d7, r3, r4
 800d0d2:	eeb0 0a47 	vmov.f32	s0, s14
 800d0d6:	eef0 0a67 	vmov.f32	s1, s15
 800d0da:	f016 fe9d 	bl	8023e18 <ceil>
 800d0de:	ec56 5b10 	vmov	r5, r6, d0
 800d0e2:	797b      	ldrb	r3, [r7, #5]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f3 fa26 	bl	8000538 <__aeabi_i2d>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	4623      	mov	r3, r4
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	f7f3 fa88 	bl	800060c <__aeabi_dmul>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	4618      	mov	r0, r3
 800d102:	4621      	mov	r1, r4
 800d104:	f7f3 fd5a 	bl	8000bbc <__aeabi_d2uiz>
 800d108:	4603      	mov	r3, r0
 800d10a:	61bb      	str	r3, [r7, #24]
    if (preamble_len)
 800d10c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00a      	beq.n	800d12a <SX1276GetPacketTime+0x19e>
        tPreamble = (preamble_len + 4) * ts + ts / 4;
 800d114:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d118:	3304      	adds	r3, #4
 800d11a:	461a      	mov	r2, r3
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	fb03 f202 	mul.w	r2, r3, r2
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	089b      	lsrs	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	3308      	adds	r3, #8
 800d12e:	617b      	str	r3, [r7, #20]
    uint32_t tPayload = nPayload * ts;
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	69fa      	ldr	r2, [r7, #28]
 800d134:	fb02 f303 	mul.w	r3, r2, r3
 800d138:	613b      	str	r3, [r7, #16]
    uint32_t tOnAir = tPreamble + tPayload;
 800d13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	4413      	add	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]

    return tOnAir;
 800d142:	68fb      	ldr	r3, [r7, #12]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3734      	adds	r7, #52	; 0x34
 800d148:	46bd      	mov	sp, r7
 800d14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d14c:	0001e848 	.word	0x0001e848
 800d150:	0003d090 	.word	0x0003d090
 800d154:	0007a120 	.word	0x0007a120
 800d158:	408f4000 	.word	0x408f4000
 800d15c:	3b9aca00 	.word	0x3b9aca00

0800d160 <SX1276GetSymbolTime>:

uint32_t SX1276GetSymbolTime(uint8_t sf, uint8_t bandwidth)
{
 800d160:	b480      	push	{r7}
 800d162:	b087      	sub	sp, #28
 800d164:	af00      	add	r7, sp, #0
 800d166:	4603      	mov	r3, r0
 800d168:	460a      	mov	r2, r1
 800d16a:	71fb      	strb	r3, [r7, #7]
 800d16c:	4613      	mov	r3, r2
 800d16e:	71bb      	strb	r3, [r7, #6]
    uint32_t bw = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	617b      	str	r3, [r7, #20]
    // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
    switch( bandwidth )
 800d174:	79bb      	ldrb	r3, [r7, #6]
 800d176:	2b08      	cmp	r3, #8
 800d178:	d006      	beq.n	800d188 <SX1276GetSymbolTime+0x28>
 800d17a:	2b09      	cmp	r3, #9
 800d17c:	d007      	beq.n	800d18e <SX1276GetSymbolTime+0x2e>
 800d17e:	2b07      	cmp	r3, #7
 800d180:	d108      	bne.n	800d194 <SX1276GetSymbolTime+0x34>
    {
    case 7: // 125 kHz
        bw = 125000;
 800d182:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <SX1276GetSymbolTime+0x58>)
 800d184:	617b      	str	r3, [r7, #20]
        break;
 800d186:	e005      	b.n	800d194 <SX1276GetSymbolTime+0x34>
    case 8: // 250 kHz
        bw = 250000;
 800d188:	4b0c      	ldr	r3, [pc, #48]	; (800d1bc <SX1276GetSymbolTime+0x5c>)
 800d18a:	617b      	str	r3, [r7, #20]
        break;
 800d18c:	e002      	b.n	800d194 <SX1276GetSymbolTime+0x34>
    case 9: // 500 kHz
        bw = 500000;
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <SX1276GetSymbolTime+0x60>)
 800d190:	617b      	str	r3, [r7, #20]
        break;
 800d192:	bf00      	nop
    }
    uint32_t rs = bw / ( 1 << sf );
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	fa22 f303 	lsr.w	r3, r2, r3
 800d19c:	613b      	str	r3, [r7, #16]
    uint32_t ts = (uint32_t)1e6 / rs; /* Symbol time : time for one symbol (us) */
 800d19e:	4a09      	ldr	r2, [pc, #36]	; (800d1c4 <SX1276GetSymbolTime+0x64>)
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a6:	60fb      	str	r3, [r7, #12]
    return ts;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	371c      	adds	r7, #28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	0001e848 	.word	0x0001e848
 800d1bc:	0003d090 	.word	0x0003d090
 800d1c0:	0007a120 	.word	0x0007a120
 800d1c4:	000f4240 	.word	0x000f4240

0800d1c8 <SX1276GetRawTemp>:

uint8_t SX1276GetRawTemp()
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
    int8_t temp = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	75fb      	strb	r3, [r7, #23]

    uint8_t previousOpMode = SX1276Read( REG_OPMODE );
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	f7ff fc06 	bl	800c9e4 <SX1276Read>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	75bb      	strb	r3, [r7, #22]

    if ((previousOpMode & RFLR_OPMODE_LONGRANGEMODE_ON) == RFLR_OPMODE_LONGRANGEMODE_ON)
 800d1dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	da03      	bge.n	800d1ec <SX1276GetRawTemp+0x24>
    {
        SX1276Write( REG_OPMODE, RFLR_OPMODE_SLEEP );
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	f7ff fbea 	bl	800c9c0 <SX1276Write>
    }

    SX1276Write( REG_OPMODE, RFLR_OPMODE_STANDBY );
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	f7ff fbe6 	bl	800c9c0 <SX1276Write>

    SX1276Write( REG_OPMODE, RF_OPMODE_SYNTHESIZER_RX );
 800d1f4:	2104      	movs	r1, #4
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	f7ff fbe2 	bl	800c9c0 <SX1276Write>
    uint8_t RegImageCal = SX1276Read( REG_IMAGECAL);
 800d1fc:	203b      	movs	r0, #59	; 0x3b
 800d1fe:	f7ff fbf1 	bl	800c9e4 <SX1276Read>
 800d202:	4603      	mov	r3, r0
 800d204:	757b      	strb	r3, [r7, #21]
    RegImageCal = (RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK) | RF_IMAGECAL_TEMPMONITOR_ON;
 800d206:	7d7b      	ldrb	r3, [r7, #21]
 800d208:	f023 0301 	bic.w	r3, r3, #1
 800d20c:	757b      	strb	r3, [r7, #21]
    SX1276Write( REG_IMAGECAL, RegImageCal );
 800d20e:	7d7b      	ldrb	r3, [r7, #21]
 800d210:	4619      	mov	r1, r3
 800d212:	203b      	movs	r0, #59	; 0x3b
 800d214:	f7ff fbd4 	bl	800c9c0 <SX1276Write>
 800d218:	4b2b      	ldr	r3, [pc, #172]	; (800d2c8 <SX1276GetRawTemp+0x100>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    // Delay 150 us
    Gpi_Fast_Tick_Native deadline = gpi_tick_fast_native() + GPI_TICK_US_TO_FAST(150);
 800d21e:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d222:	613b      	str	r3, [r7, #16]
    while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 800d224:	bf00      	nop
 800d226:	4b28      	ldr	r3, [pc, #160]	; (800d2c8 <SX1276GetRawTemp+0x100>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22c:	60bb      	str	r3, [r7, #8]
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	607b      	str	r3, [r7, #4]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	60bb      	str	r3, [r7, #8]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	db06      	blt.n	800d24e <SX1276GetRawTemp+0x86>
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	bf14      	ite	ne
 800d246:	2301      	movne	r3, #1
 800d248:	2300      	moveq	r3, #0
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	e001      	b.n	800d252 <SX1276GetRawTemp+0x8a>
 800d24e:	f04f 33ff 	mov.w	r3, #4294967295
 800d252:	2b00      	cmp	r3, #0
 800d254:	dbe7      	blt.n	800d226 <SX1276GetRawTemp+0x5e>

    RegImageCal = SX1276Read( REG_IMAGECAL);
 800d256:	203b      	movs	r0, #59	; 0x3b
 800d258:	f7ff fbc4 	bl	800c9e4 <SX1276Read>
 800d25c:	4603      	mov	r3, r0
 800d25e:	757b      	strb	r3, [r7, #21]
    RegImageCal = (RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK) | RF_IMAGECAL_TEMPMONITOR_OFF;
 800d260:	7d7b      	ldrb	r3, [r7, #21]
 800d262:	f043 0301 	orr.w	r3, r3, #1
 800d266:	757b      	strb	r3, [r7, #21]
    SX1276Write( REG_IMAGECAL, RegImageCal );
 800d268:	7d7b      	ldrb	r3, [r7, #21]
 800d26a:	4619      	mov	r1, r3
 800d26c:	203b      	movs	r0, #59	; 0x3b
 800d26e:	f7ff fba7 	bl	800c9c0 <SX1276Write>

    SX1276Write( REG_OPMODE, RFLR_OPMODE_STANDBY );
 800d272:	2101      	movs	r1, #1
 800d274:	2001      	movs	r0, #1
 800d276:	f7ff fba3 	bl	800c9c0 <SX1276Write>

    uint8_t RegTemp = SX1276Read( REG_TEMP);
 800d27a:	203c      	movs	r0, #60	; 0x3c
 800d27c:	f7ff fbb2 	bl	800c9e4 <SX1276Read>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]

    if ((RegTemp & 0x80) == 0x80)
 800d284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	da04      	bge.n	800d296 <SX1276GetRawTemp+0xce>
        temp = 255 - RegTemp;
 800d28c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d290:	43db      	mvns	r3, r3
 800d292:	75fb      	strb	r3, [r7, #23]
 800d294:	e005      	b.n	800d2a2 <SX1276GetRawTemp+0xda>
    else
    {
        temp = RegTemp;
 800d296:	7bfb      	ldrb	r3, [r7, #15]
 800d298:	75fb      	strb	r3, [r7, #23]
        temp *= (-1);
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	425b      	negs	r3, r3
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	75fb      	strb	r3, [r7, #23]
    }

    if ((previousOpMode & RFLR_OPMODE_LONGRANGEMODE_ON) == RFLR_OPMODE_LONGRANGEMODE_ON)
 800d2a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	da03      	bge.n	800d2b2 <SX1276GetRawTemp+0xea>
    {
        SX1276Write( REG_OPMODE, RFLR_OPMODE_SLEEP );
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	f7ff fb87 	bl	800c9c0 <SX1276Write>
    }

    SX1276Write( REG_OPMODE, previousOpMode );
 800d2b2:	7dbb      	ldrb	r3, [r7, #22]
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	f7ff fb82 	bl	800c9c0 <SX1276Write>
    // return temp;
    return RegTemp;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	200012c8 	.word	0x200012c8

0800d2cc <gpi_radio_init>:
//**************************************************************************************************
//***** Global Functions ***************************************************************************

/*sx1276-arch functions---------------------------------------------------------------------------*/
void gpi_radio_init()
{
 800d2cc:	b5b0      	push	{r4, r5, r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af0a      	add	r7, sp, #40	; 0x28
    SX1276IoInit();
 800d2d2:	f7fe fc71 	bl	800bbb8 <SX1276IoInit>
    spi_init();
 800d2d6:	f000 fadb 	bl	800d890 <spi_init>
    SX1276Init();
 800d2da:	f7fe fe31 	bl	800bf40 <SX1276Init>

    SX1276SetChannel(chirp_config.lora_freq);
 800d2de:	4b2d      	ldr	r3, [pc, #180]	; (800d394 <gpi_radio_init+0xc8>)
 800d2e0:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fe8d 	bl	800c004 <SX1276SetChannel>

#if defined( USE_MODEM_LORA )

    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d2ea:	4b2a      	ldr	r3, [pc, #168]	; (800d394 <gpi_radio_init+0xc8>)
 800d2ec:	f993 0048 	ldrsb.w	r0, [r3, #72]	; 0x48
 800d2f0:	4b28      	ldr	r3, [pc, #160]	; (800d394 <gpi_radio_init+0xc8>)
 800d2f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2f6:	461d      	mov	r5, r3
                    chirp_config.lora_sf, chirp_config.lora_cr,
 800d2f8:	4b26      	ldr	r3, [pc, #152]	; (800d394 <gpi_radio_init+0xc8>)
 800d2fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d2fe:	461c      	mov	r4, r3
 800d300:	4b24      	ldr	r3, [pc, #144]	; (800d394 <gpi_radio_init+0xc8>)
 800d302:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
                    chirp_config.lora_plen, LORA_FIX_LENGTH_PAYLOAD_ON,
 800d306:	4a23      	ldr	r2, [pc, #140]	; (800d394 <gpi_radio_init+0xc8>)
 800d308:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d30c:	b292      	uxth	r2, r2
 800d30e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800d312:	9108      	str	r1, [sp, #32]
 800d314:	2100      	movs	r1, #0
 800d316:	9107      	str	r1, [sp, #28]
 800d318:	2100      	movs	r1, #0
 800d31a:	9106      	str	r1, [sp, #24]
 800d31c:	2100      	movs	r1, #0
 800d31e:	9105      	str	r1, [sp, #20]
 800d320:	2101      	movs	r1, #1
 800d322:	9104      	str	r1, [sp, #16]
 800d324:	2100      	movs	r1, #0
 800d326:	9103      	str	r1, [sp, #12]
 800d328:	9202      	str	r2, [sp, #8]
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	9400      	str	r4, [sp, #0]
 800d32e:	462b      	mov	r3, r5
 800d330:	2200      	movs	r2, #0
 800d332:	4601      	mov	r1, r0
 800d334:	2001      	movs	r0, #1
 800d336:	f7ff f8e7 	bl	800c508 <SX1276SetTxConfig>
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE );

    SX1276SetRxConfig( MODEM_LORA, chirp_config.lora_bw, chirp_config.lora_sf,
 800d33a:	4b16      	ldr	r3, [pc, #88]	; (800d394 <gpi_radio_init+0xc8>)
 800d33c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d340:	4618      	mov	r0, r3
 800d342:	4b14      	ldr	r3, [pc, #80]	; (800d394 <gpi_radio_init+0xc8>)
 800d344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d348:	461c      	mov	r4, r3
 800d34a:	4b12      	ldr	r3, [pc, #72]	; (800d394 <gpi_radio_init+0xc8>)
 800d34c:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
                    chirp_config.lora_cr, 0, chirp_config.lora_plen,
 800d350:	4b10      	ldr	r3, [pc, #64]	; (800d394 <gpi_radio_init+0xc8>)
 800d352:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    SX1276SetRxConfig( MODEM_LORA, chirp_config.lora_bw, chirp_config.lora_sf,
 800d356:	b29b      	uxth	r3, r3
 800d358:	2201      	movs	r2, #1
 800d35a:	9209      	str	r2, [sp, #36]	; 0x24
 800d35c:	2200      	movs	r2, #0
 800d35e:	9208      	str	r2, [sp, #32]
 800d360:	2200      	movs	r2, #0
 800d362:	9207      	str	r2, [sp, #28]
 800d364:	2200      	movs	r2, #0
 800d366:	9206      	str	r2, [sp, #24]
 800d368:	2201      	movs	r2, #1
 800d36a:	9205      	str	r2, [sp, #20]
 800d36c:	2200      	movs	r2, #0
 800d36e:	9204      	str	r2, [sp, #16]
 800d370:	2200      	movs	r2, #0
 800d372:	9203      	str	r2, [sp, #12]
 800d374:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d378:	9202      	str	r2, [sp, #8]
 800d37a:	9301      	str	r3, [sp, #4]
 800d37c:	2300      	movs	r3, #0
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	460b      	mov	r3, r1
 800d382:	4622      	mov	r2, r4
 800d384:	4601      	mov	r1, r0
 800d386:	2001      	movs	r0, #1
 800d388:	f7fe fea6 	bl	800c0d8 <SX1276SetRxConfig>
#elif defined( USE_MODEM_FSK )
    #error "Please define FSK parameters."
#else
    #error "Please define a frequency band in the compiler options."
#endif
}
 800d38c:	bf00      	nop
 800d38e:	46bd      	mov	sp, r7
 800d390:	bdb0      	pop	{r4, r5, r7, pc}
 800d392:	bf00      	nop
 800d394:	20001430 	.word	0x20001430

0800d398 <gpi_read_rssi>:
    SX1276.Settings.Fsk.Power = power;
#endif
}

RadioLoRaPacketHandler_t gpi_read_rssi(uint8_t rxdone)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70fb      	strb	r3, [r7, #3]
    RadioLoRaPacketHandler_t read_value;

    // Returns SNR value [dB] rounded to the nearest integer value
    read_value.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d3a4:	2019      	movs	r0, #25
 800d3a6:	f7ff fb1d 	bl	800c9e4 <SX1276Read>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	b25b      	sxtb	r3, r3
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	109b      	asrs	r3, r3, #2
 800d3b2:	b25b      	sxtb	r3, r3
 800d3b4:	723b      	strb	r3, [r7, #8]
    int16_t rssi;

    if (rxdone)
 800d3b6:	78fb      	ldrb	r3, [r7, #3]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d050      	beq.n	800d45e <gpi_read_rssi+0xc6>
    {
        rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d3bc:	201a      	movs	r0, #26
 800d3be:	f7ff fb11 	bl	800c9e4 <SX1276Read>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	81fb      	strh	r3, [r7, #14]

        if( read_value.SnrValue < 0 )
 800d3c6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	da28      	bge.n	800d420 <gpi_read_rssi+0x88>
        {
            if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d3ce:	4b34      	ldr	r3, [pc, #208]	; (800d4a0 <gpi_read_rssi+0x108>)
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	4a34      	ldr	r2, [pc, #208]	; (800d4a4 <gpi_read_rssi+0x10c>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d911      	bls.n	800d3fc <gpi_read_rssi+0x64>
            {
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d3d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d3dc:	111b      	asrs	r3, r3, #4
 800d3de:	b21b      	sxth	r3, r3
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	89fb      	ldrh	r3, [r7, #14]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	b29a      	uxth	r2, r3
                                                                read_value.SnrValue;
 800d3e8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d3ec:	b29b      	uxth	r3, r3
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d3ee:	4413      	add	r3, r2
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	3b9d      	subs	r3, #157	; 0x9d
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	b21b      	sxth	r3, r3
 800d3f8:	817b      	strh	r3, [r7, #10]
 800d3fa:	e045      	b.n	800d488 <gpi_read_rssi+0xf0>
            }
            else
            {
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d3fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d400:	111b      	asrs	r3, r3, #4
 800d402:	b21b      	sxth	r3, r3
 800d404:	b29a      	uxth	r2, r3
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	4413      	add	r3, r2
 800d40a:	b29a      	uxth	r2, r3
                                                                read_value.SnrValue;
 800d40c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d410:	b29b      	uxth	r3, r3
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d412:	4413      	add	r3, r2
 800d414:	b29b      	uxth	r3, r3
 800d416:	3ba4      	subs	r3, #164	; 0xa4
 800d418:	b29b      	uxth	r3, r3
 800d41a:	b21b      	sxth	r3, r3
 800d41c:	817b      	strh	r3, [r7, #10]
 800d41e:	e033      	b.n	800d488 <gpi_read_rssi+0xf0>
            }
        }
        else
        {
            if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d420:	4b1f      	ldr	r3, [pc, #124]	; (800d4a0 <gpi_read_rssi+0x108>)
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	4a1f      	ldr	r2, [pc, #124]	; (800d4a4 <gpi_read_rssi+0x10c>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d90c      	bls.n	800d444 <gpi_read_rssi+0xac>
            {
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d42a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d42e:	111b      	asrs	r3, r3, #4
 800d430:	b21b      	sxth	r3, r3
 800d432:	b29a      	uxth	r2, r3
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	4413      	add	r3, r2
 800d438:	b29b      	uxth	r3, r3
 800d43a:	3b9d      	subs	r3, #157	; 0x9d
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	b21b      	sxth	r3, r3
 800d440:	817b      	strh	r3, [r7, #10]
 800d442:	e021      	b.n	800d488 <gpi_read_rssi+0xf0>
            }
            else
            {
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d448:	111b      	asrs	r3, r3, #4
 800d44a:	b21b      	sxth	r3, r3
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	89fb      	ldrh	r3, [r7, #14]
 800d450:	4413      	add	r3, r2
 800d452:	b29b      	uxth	r3, r3
 800d454:	3ba4      	subs	r3, #164	; 0xa4
 800d456:	b29b      	uxth	r3, r3
 800d458:	b21b      	sxth	r3, r3
 800d45a:	817b      	strh	r3, [r7, #10]
 800d45c:	e014      	b.n	800d488 <gpi_read_rssi+0xf0>
            }
        }
    }
    else
    {
        rssi = SX1276Read( REG_LR_RSSIVALUE );
 800d45e:	201b      	movs	r0, #27
 800d460:	f7ff fac0 	bl	800c9e4 <SX1276Read>
 800d464:	4603      	mov	r3, r0
 800d466:	81fb      	strh	r3, [r7, #14]

        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d468:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <gpi_read_rssi+0x108>)
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	4a0d      	ldr	r2, [pc, #52]	; (800d4a4 <gpi_read_rssi+0x10c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d905      	bls.n	800d47e <gpi_read_rssi+0xe6>
        {
            read_value.RssiValue = RSSI_OFFSET_HF + rssi;
 800d472:	89fb      	ldrh	r3, [r7, #14]
 800d474:	3b9d      	subs	r3, #157	; 0x9d
 800d476:	b29b      	uxth	r3, r3
 800d478:	b21b      	sxth	r3, r3
 800d47a:	817b      	strh	r3, [r7, #10]
 800d47c:	e004      	b.n	800d488 <gpi_read_rssi+0xf0>
        }
        else
        {
            read_value.RssiValue = RSSI_OFFSET_LF + rssi;
 800d47e:	89fb      	ldrh	r3, [r7, #14]
 800d480:	3ba4      	subs	r3, #164	; 0xa4
 800d482:	b29b      	uxth	r3, r3
 800d484:	b21b      	sxth	r3, r3
 800d486:	817b      	strh	r3, [r7, #10]
        }
    }

    return read_value;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	461a      	mov	r2, r3
 800d48c:	f107 0308 	add.w	r3, r7, #8
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	6010      	str	r0, [r2, #0]
 800d494:	889b      	ldrh	r3, [r3, #4]
 800d496:	8093      	strh	r3, [r2, #4]
}
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	200013c4 	.word	0x200013c4
 800d4a4:	1f4add40 	.word	0x1f4add40

0800d4a8 <MX_GPIO_Init>:
#include "hw_gpio.h"
/*---------------------------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4ae:	4b55      	ldr	r3, [pc, #340]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b2:	4a54      	ldr	r2, [pc, #336]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4b4:	f043 0304 	orr.w	r3, r3, #4
 800d4b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ba:	4b52      	ldr	r3, [pc, #328]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4be:	f003 0304 	and.w	r3, r3, #4
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d4c6:	4b4f      	ldr	r3, [pc, #316]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ca:	4a4e      	ldr	r2, [pc, #312]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4d2:	4b4c      	ldr	r3, [pc, #304]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4da:	60fb      	str	r3, [r7, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4de:	4b49      	ldr	r3, [pc, #292]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e2:	4a48      	ldr	r2, [pc, #288]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4e4:	f043 0301 	orr.w	r3, r3, #1
 800d4e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ea:	4b46      	ldr	r3, [pc, #280]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	60bb      	str	r3, [r7, #8]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4f6:	4b43      	ldr	r3, [pc, #268]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4fa:	4a42      	ldr	r2, [pc, #264]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d4fc:	f043 0302 	orr.w	r3, r3, #2
 800d500:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d502:	4b40      	ldr	r3, [pc, #256]	; (800d604 <MX_GPIO_Init+0x15c>)
 800d504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	607b      	str	r3, [r7, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]

  // ---------------config all gpio as reset---------------
  /* except PA14 (SWCLK) and PA13 (SWDIO) */
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 800d50e:	2200      	movs	r2, #0
 800d510:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d518:	f7f5 ffd4 	bl	80034c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d51c:	2301      	movs	r3, #1
 800d51e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d520:	2300      	movs	r3, #0
 800d522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d524:	2300      	movs	r3, #0
 800d526:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOA, 0x9FFF, &GPIO_InitStruct );
 800d528:	f107 0314 	add.w	r3, r7, #20
 800d52c:	461a      	mov	r2, r3
 800d52e:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d536:	f000 f8a5 	bl	800d684 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 800d53a:	2200      	movs	r2, #0
 800d53c:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d544:	f7f5 ffbe 	bl	80034c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 800d548:	2200      	movs	r2, #0
 800d54a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d54e:	482e      	ldr	r0, [pc, #184]	; (800d608 <MX_GPIO_Init+0x160>)
 800d550:	f7f5 ffb8 	bl	80034c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d554:	2301      	movs	r3, #1
 800d556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d558:	2300      	movs	r3, #0
 800d55a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d55c:	2300      	movs	r3, #0
 800d55e:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOB, 0xffff, &GPIO_InitStruct );
 800d560:	f107 0314 	add.w	r3, r7, #20
 800d564:	461a      	mov	r2, r3
 800d566:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d56a:	4827      	ldr	r0, [pc, #156]	; (800d608 <MX_GPIO_Init+0x160>)
 800d56c:	f000 f88a 	bl	800d684 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 800d570:	2200      	movs	r2, #0
 800d572:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d576:	4824      	ldr	r0, [pc, #144]	; (800d608 <MX_GPIO_Init+0x160>)
 800d578:	f7f5 ffa4 	bl	80034c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 800d57c:	2200      	movs	r2, #0
 800d57e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d582:	4822      	ldr	r0, [pc, #136]	; (800d60c <MX_GPIO_Init+0x164>)
 800d584:	f7f5 ff9e 	bl	80034c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d588:	2301      	movs	r3, #1
 800d58a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d590:	2300      	movs	r3, #0
 800d592:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOC, 0xffff, &GPIO_InitStruct );
 800d594:	f107 0314 	add.w	r3, r7, #20
 800d598:	461a      	mov	r2, r3
 800d59a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d59e:	481b      	ldr	r0, [pc, #108]	; (800d60c <MX_GPIO_Init+0x164>)
 800d5a0:	f000 f870 	bl	800d684 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5aa:	4818      	ldr	r0, [pc, #96]	; (800d60c <MX_GPIO_Init+0x164>)
 800d5ac:	f7f5 ff8a 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure LED pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, GPIO_PIN_RESET);
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f641 5148 	movw	r1, #7496	; 0x1d48
 800d5b6:	4815      	ldr	r0, [pc, #84]	; (800d60c <MX_GPIO_Init+0x164>)
 800d5b8:	f7f5 ff84 	bl	80034c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, &GPIO_InitStruct );
 800d5c8:	f107 0314 	add.w	r3, r7, #20
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	f641 5148 	movw	r1, #7496	; 0x1d48
 800d5d2:	480e      	ldr	r0, [pc, #56]	; (800d60c <MX_GPIO_Init+0x164>)
 800d5d4:	f000 f856 	bl	800d684 <HW_GPIO_Init>

  // TODO: no need to config?
  /*Configure RADIO_DIO_3_PIN pin Output Level */
  HAL_GPIO_WritePin(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, GPIO_PIN_RESET);
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2110      	movs	r1, #16
 800d5dc:	480a      	ldr	r0, [pc, #40]	; (800d608 <MX_GPIO_Init+0x160>)
 800d5de:	f7f5 ff71 	bl	80034c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &GPIO_InitStruct );
 800d5ee:	f107 0314 	add.w	r3, r7, #20
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	2110      	movs	r1, #16
 800d5f6:	4804      	ldr	r0, [pc, #16]	; (800d608 <MX_GPIO_Init+0x160>)
 800d5f8:	f000 f844 	bl	800d684 <HW_GPIO_Init>
}
 800d5fc:	bf00      	nop
 800d5fe:	3728      	adds	r7, #40	; 0x28
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	40021000 	.word	0x40021000
 800d608:	48000400 	.word	0x48000400
 800d60c:	48000800 	.word	0x48000800

0800d610 <MSP_GetIRQn>:

static GpioIrqHandler *GpioIrq[16] = { NULL };

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	80fb      	strh	r3, [r7, #6]
  switch( GPIO_Pin )
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	2b10      	cmp	r3, #16
 800d61e:	d025      	beq.n	800d66c <MSP_GetIRQn+0x5c>
 800d620:	2b10      	cmp	r3, #16
 800d622:	dc0b      	bgt.n	800d63c <MSP_GetIRQn+0x2c>
 800d624:	2b02      	cmp	r3, #2
 800d626:	d01b      	beq.n	800d660 <MSP_GetIRQn+0x50>
 800d628:	2b02      	cmp	r3, #2
 800d62a:	dc02      	bgt.n	800d632 <MSP_GetIRQn+0x22>
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d015      	beq.n	800d65c <MSP_GetIRQn+0x4c>
 800d630:	e020      	b.n	800d674 <MSP_GetIRQn+0x64>
 800d632:	2b04      	cmp	r3, #4
 800d634:	d016      	beq.n	800d664 <MSP_GetIRQn+0x54>
 800d636:	2b08      	cmp	r3, #8
 800d638:	d016      	beq.n	800d668 <MSP_GetIRQn+0x58>
 800d63a:	e01b      	b.n	800d674 <MSP_GetIRQn+0x64>
 800d63c:	2b80      	cmp	r3, #128	; 0x80
 800d63e:	d017      	beq.n	800d670 <MSP_GetIRQn+0x60>
 800d640:	2b80      	cmp	r3, #128	; 0x80
 800d642:	dc04      	bgt.n	800d64e <MSP_GetIRQn+0x3e>
 800d644:	2b20      	cmp	r3, #32
 800d646:	d013      	beq.n	800d670 <MSP_GetIRQn+0x60>
 800d648:	2b40      	cmp	r3, #64	; 0x40
 800d64a:	d011      	beq.n	800d670 <MSP_GetIRQn+0x60>
 800d64c:	e012      	b.n	800d674 <MSP_GetIRQn+0x64>
 800d64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d652:	d00d      	beq.n	800d670 <MSP_GetIRQn+0x60>
 800d654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d658:	d00a      	beq.n	800d670 <MSP_GetIRQn+0x60>
 800d65a:	e00b      	b.n	800d674 <MSP_GetIRQn+0x64>
  {
    case GPIO_PIN_0:  return EXTI0_IRQn;
 800d65c:	2306      	movs	r3, #6
 800d65e:	e00a      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_1:  return EXTI1_IRQn;
 800d660:	2307      	movs	r3, #7
 800d662:	e008      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_2:  return EXTI2_IRQn;
 800d664:	2308      	movs	r3, #8
 800d666:	e006      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_3:  return EXTI3_IRQn;
 800d668:	2309      	movs	r3, #9
 800d66a:	e004      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_4:  return EXTI4_IRQn;
 800d66c:	230a      	movs	r3, #10
 800d66e:	e002      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_5:
    case GPIO_PIN_6:
    case GPIO_PIN_7:
    case GPIO_PIN_8:
    case GPIO_PIN_9:  return EXTI9_5_IRQn;
 800d670:	2317      	movs	r3, #23
 800d672:	e000      	b.n	800d676 <MSP_GetIRQn+0x66>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
	default: return EXTI15_10_IRQn;
 800d674:	2328      	movs	r3, #40	; 0x28
  }
}
 800d676:	4618      	mov	r0, r3
 800d678:	370c      	adds	r7, #12
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
	...

0800d684 <HW_GPIO_Init>:

void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	; 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	460b      	mov	r3, r1
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	817b      	strh	r3, [r7, #10]
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	4a2d      	ldr	r2, [pc, #180]	; (800d74c <HW_GPIO_Init+0xc8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d01a      	beq.n	800d6d0 <HW_GPIO_Init+0x4c>
 800d69a:	4a2c      	ldr	r2, [pc, #176]	; (800d74c <HW_GPIO_Init+0xc8>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d803      	bhi.n	800d6a8 <HW_GPIO_Init+0x24>
 800d6a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d6a4:	d007      	beq.n	800d6b6 <HW_GPIO_Init+0x32>
 800d6a6:	e03a      	b.n	800d71e <HW_GPIO_Init+0x9a>
 800d6a8:	4a29      	ldr	r2, [pc, #164]	; (800d750 <HW_GPIO_Init+0xcc>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d01d      	beq.n	800d6ea <HW_GPIO_Init+0x66>
 800d6ae:	4a29      	ldr	r2, [pc, #164]	; (800d754 <HW_GPIO_Init+0xd0>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d027      	beq.n	800d704 <HW_GPIO_Init+0x80>
 800d6b4:	e033      	b.n	800d71e <HW_GPIO_Init+0x9a>
 800d6b6:	4b28      	ldr	r3, [pc, #160]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ba:	4a27      	ldr	r2, [pc, #156]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6bc:	f043 0301 	orr.w	r3, r3, #1
 800d6c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d6c2:	4b25      	ldr	r3, [pc, #148]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	e032      	b.n	800d736 <HW_GPIO_Init+0xb2>
 800d6d0:	4b21      	ldr	r3, [pc, #132]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6d4:	4a20      	ldr	r2, [pc, #128]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6d6:	f043 0302 	orr.w	r3, r3, #2
 800d6da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d6dc:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6e0:	f003 0302 	and.w	r3, r3, #2
 800d6e4:	623b      	str	r3, [r7, #32]
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	e025      	b.n	800d736 <HW_GPIO_Init+0xb2>
 800d6ea:	4b1b      	ldr	r3, [pc, #108]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ee:	4a1a      	ldr	r2, [pc, #104]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6f0:	f043 0304 	orr.w	r3, r3, #4
 800d6f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6fa:	f003 0304 	and.w	r3, r3, #4
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	e018      	b.n	800d736 <HW_GPIO_Init+0xb2>
 800d704:	4b14      	ldr	r3, [pc, #80]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d708:	4a13      	ldr	r2, [pc, #76]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d70a:	f043 0308 	orr.w	r3, r3, #8
 800d70e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d710:	4b11      	ldr	r3, [pc, #68]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d714:	f003 0308 	and.w	r3, r3, #8
 800d718:	61bb      	str	r3, [r7, #24]
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	e00b      	b.n	800d736 <HW_GPIO_Init+0xb2>
 800d71e:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d722:	4a0d      	ldr	r2, [pc, #52]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d72a:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <HW_GPIO_Init+0xd4>)
 800d72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 800d736:	897a      	ldrh	r2, [r7, #10]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f7f5 fc1c 	bl	8002f7c <HAL_GPIO_Init>
}
 800d744:	bf00      	nop
 800d746:	3728      	adds	r7, #40	; 0x28
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	48000400 	.word	0x48000400
 800d750:	48000800 	.word	0x48000800
 800d754:	48000c00 	.word	0x48000c00
 800d758:	40021000 	.word	0x40021000

0800d75c <HW_GPIO_SetIrq>:

void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio, GpioIrqHandler *irqHandler )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	607a      	str	r2, [r7, #4]
 800d766:	603b      	str	r3, [r7, #0]
 800d768:	460b      	mov	r3, r1
 800d76a:	817b      	strh	r3, [r7, #10]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800d76c:	897b      	ldrh	r3, [r7, #10]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f858 	bl	800d824 <HW_GPIO_GetBitPos>
 800d774:	4603      	mov	r3, r0
 800d776:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d017      	beq.n	800d7ae <HW_GPIO_SetIrq+0x52>
  {
    GpioIrq[ BitPos ] = irqHandler;
 800d77e:	4910      	ldr	r1, [pc, #64]	; (800d7c0 <HW_GPIO_SetIrq+0x64>)
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800d788:	897b      	ldrh	r3, [r7, #10]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff ff40 	bl	800d610 <MSP_GetIRQn>
 800d790:	4603      	mov	r3, r0
 800d792:	74fb      	strb	r3, [r7, #19]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 800d794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d798:	2200      	movs	r2, #0
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7f4 fa84 	bl	8001caa <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 800d7a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f4 fa9b 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 800d7ac:	e004      	b.n	800d7b8 <HW_GPIO_SetIrq+0x5c>
    GpioIrq[ BitPos ] = NULL;
 800d7ae:	4a04      	ldr	r2, [pc, #16]	; (800d7c0 <HW_GPIO_SetIrq+0x64>)
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800d7b8:	bf00      	nop
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20000374 	.word	0x20000374

0800d7c4 <HW_GPIO_IrqHandler>:

void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	80fb      	strh	r3, [r7, #6]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 f827 	bl	800d824 <HW_GPIO_GetBitPos>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	60fb      	str	r3, [r7, #12]

  if ( GpioIrq[ BitPos ]  != NULL)
 800d7da:	4a08      	ldr	r2, [pc, #32]	; (800d7fc <HW_GPIO_IrqHandler+0x38>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d005      	beq.n	800d7f2 <HW_GPIO_IrqHandler+0x2e>
  {
    GpioIrq[ BitPos ] ( NULL );
 800d7e6:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <HW_GPIO_IrqHandler+0x38>)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	4798      	blx	r3
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000374 	.word	0x20000374

0800d800 <HW_GPIO_Write>:

void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	460b      	mov	r3, r1
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	b2da      	uxtb	r2, r3
 800d812:	897b      	ldrh	r3, [r7, #10]
 800d814:	4619      	mov	r1, r3
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7f5 fe54 	bl	80034c4 <HAL_GPIO_WritePin>
}
 800d81c:	bf00      	nop
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <HW_GPIO_GetBitPos>:
{
  return HAL_GPIO_ReadPin( GPIOx, GPIO_Pin);
}

uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 800d82e:	2300      	movs	r3, #0
 800d830:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <HW_GPIO_GetBitPos+0x20>
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	f043 0308 	orr.w	r3, r3, #8
 800d842:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800d844:	88fa      	ldrh	r2, [r7, #6]
 800d846:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800d84a:	4013      	ands	r3, r2
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <HW_GPIO_GetBitPos+0x34>
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	f043 0304 	orr.w	r3, r3, #4
 800d856:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800d858:	88fa      	ldrh	r2, [r7, #6]
 800d85a:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 800d85e:	4013      	ands	r3, r2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <HW_GPIO_GetBitPos+0x48>
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	f043 0302 	orr.w	r3, r3, #2
 800d86a:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 800d86c:	88fa      	ldrh	r2, [r7, #6]
 800d86e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <HW_GPIO_GetBitPos+0x5c>
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	f043 0301 	orr.w	r3, r3, #1
 800d87e:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 800d880:	7bfb      	ldrb	r3, [r7, #15]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
	...

0800d890 <spi_init>:
#include "spi.h"
/*---------------------------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
/*---------------------------------------------------------------------------*/
void spi_init(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 800d894:	4b19      	ldr	r3, [pc, #100]	; (800d8fc <spi_init+0x6c>)
 800d896:	4a1a      	ldr	r2, [pc, #104]	; (800d900 <spi_init+0x70>)
 800d898:	601a      	str	r2, [r3, #0]

//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
    hspi1.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800d89a:	481a      	ldr	r0, [pc, #104]	; (800d904 <spi_init+0x74>)
 800d89c:	f000 f84c 	bl	800d938 <SpiFrequency>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	4b16      	ldr	r3, [pc, #88]	; (800d8fc <spi_init+0x6c>)
 800d8a4:	61da      	str	r2, [r3, #28]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d8a6:	4b15      	ldr	r3, [pc, #84]	; (800d8fc <spi_init+0x6c>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800d8ac:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <spi_init+0x6c>)
 800d8ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d8b2:	605a      	str	r2, [r3, #4]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d8b4:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <spi_init+0x6c>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d8ba:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <spi_init+0x6c>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	615a      	str	r2, [r3, #20]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d8c0:	4b0e      	ldr	r3, [pc, #56]	; (800d8fc <spi_init+0x6c>)
 800d8c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d8c6:	60da      	str	r2, [r3, #12]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <spi_init+0x6c>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d8ce:	4b0b      	ldr	r3, [pc, #44]	; (800d8fc <spi_init+0x6c>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	621a      	str	r2, [r3, #32]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800d8d4:	4b09      	ldr	r3, [pc, #36]	; (800d8fc <spi_init+0x6c>)
 800d8d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8da:	619a      	str	r2, [r3, #24]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <spi_init+0x6c>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	625a      	str	r2, [r3, #36]	; 0x24

//  hspi1.Init.CRCPolynomial = 7;
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d8e2:	4806      	ldr	r0, [pc, #24]	; (800d8fc <spi_init+0x6c>)
 800d8e4:	f7f9 fccb 	bl	800727e <HAL_SPI_Init>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <spi_init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800d8ee:	211c      	movs	r1, #28
 800d8f0:	4805      	ldr	r0, [pc, #20]	; (800d908 <spi_init+0x78>)
 800d8f2:	f7f3 fce7 	bl	80012c4 <_Error_Handler>
  }

}
 800d8f6:	bf00      	nop
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20001264 	.word	0x20001264
 800d900:	40013000 	.word	0x40013000
 800d904:	00989680 	.word	0x00989680
 800d908:	08026ac0 	.word	0x08026ac0

0800d90c <HW_SPI_InOut>:

uint16_t HW_SPI_InOut( uint16_t txData )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af02      	add	r7, sp, #8
 800d912:	4603      	mov	r3, r0
 800d914:	80fb      	strh	r3, [r7, #6]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi1, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 800d916:	f107 020e 	add.w	r2, r7, #14
 800d91a:	1db9      	adds	r1, r7, #6
 800d91c:	f04f 33ff 	mov.w	r3, #4294967295
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	2301      	movs	r3, #1
 800d924:	4803      	ldr	r0, [pc, #12]	; (800d934 <HW_SPI_InOut+0x28>)
 800d926:	f7f9 fd34 	bl	8007392 <HAL_SPI_TransmitReceive>

  return rxData;
 800d92a:	89fb      	ldrh	r3, [r7, #14]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	20001264 	.word	0x20001264

0800d938 <SpiFrequency>:

uint32_t SpiFrequency( uint32_t hz )
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 800d940:	2300      	movs	r3, #0
 800d942:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 800d944:	4b1a      	ldr	r3, [pc, #104]	; (800d9b0 <SpiFrequency+0x78>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while( SysClkTmp > hz)
 800d94a:	e008      	b.n	800d95e <SpiFrequency+0x26>
  {
    divisor++;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	3301      	adds	r3, #1
 800d950:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b06      	cmp	r3, #6
 800d95c:	d804      	bhi.n	800d968 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d8f2      	bhi.n	800d94c <SpiFrequency+0x14>
 800d966:	e000      	b.n	800d96a <SpiFrequency+0x32>
      break;
 800d968:	bf00      	nop
  }

  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <SpiFrequency+0x40>
 800d974:	2200      	movs	r2, #0
 800d976:	e000      	b.n	800d97a <SpiFrequency+0x42>
 800d978:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )|
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b00      	cmp	r3, #0
 800d982:	d101      	bne.n	800d988 <SpiFrequency+0x50>
 800d984:	2300      	movs	r3, #0
 800d986:	e000      	b.n	800d98a <SpiFrequency+0x52>
 800d988:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800d98a:	4313      	orrs	r3, r2
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	f002 0201 	and.w	r2, r2, #1
 800d992:	2a00      	cmp	r2, #0
 800d994:	d101      	bne.n	800d99a <SpiFrequency+0x62>
 800d996:	2200      	movs	r2, #0
 800d998:	e000      	b.n	800d99c <SpiFrequency+0x64>
 800d99a:	2208      	movs	r2, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800d99c:	4313      	orrs	r3, r2
 800d99e:	60fb      	str	r3, [r7, #12]

  return baudRate;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	371c      	adds	r7, #28
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20000068 	.word	0x20000068

0800d9b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b0b8      	sub	sp, #224	; 0xe0
 800d9b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability*/
  HAL_PWR_EnableBkUpAccess();
 800d9ba:	f7f7 fd7b 	bl	80054b4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800d9be:	4b4a      	ldr	r3, [pc, #296]	; (800dae8 <SystemClock_Config+0x134>)
 800d9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9c4:	4a48      	ldr	r2, [pc, #288]	; (800dae8 <SystemClock_Config+0x134>)
 800d9c6:	f023 0318 	bic.w	r3, r3, #24
 800d9ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_LSI;
 800d9ce:	230e      	movs	r3, #14
 800d9d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d9da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800d9e2:	2310      	movs	r3, #16
 800d9e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d9ee:	2302      	movs	r3, #2
 800d9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800da00:	230a      	movs	r3, #10
 800da02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800da06:	2307      	movs	r3, #7
 800da08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800da0c:	2302      	movs	r3, #2
 800da0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800da12:	2302      	movs	r3, #2
 800da14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800da18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7f7 fde9 	bl	80055f4 <HAL_RCC_OscConfig>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d003      	beq.n	800da30 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800da28:	218c      	movs	r1, #140	; 0x8c
 800da2a:	4830      	ldr	r0, [pc, #192]	; (800daec <SystemClock_Config+0x138>)
 800da2c:	f7f3 fc4a 	bl	80012c4 <_Error_Handler>
  }

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800da30:	230f      	movs	r3, #15
 800da32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800da36:	2303      	movs	r3, #3
 800da38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800da3c:	2300      	movs	r3, #0
 800da3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800da42:	2300      	movs	r3, #0
 800da44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800da48:	2300      	movs	r3, #0
 800da4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800da4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800da52:	2104      	movs	r1, #4
 800da54:	4618      	mov	r0, r3
 800da56:	f7f8 f933 	bl	8005cc0 <HAL_RCC_ClockConfig>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800da60:	219a      	movs	r1, #154	; 0x9a
 800da62:	4822      	ldr	r0, [pc, #136]	; (800daec <SystemClock_Config+0x138>)
 800da64:	f7f3 fc2e 	bl	80012c4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800da68:	4b21      	ldr	r3, [pc, #132]	; (800daf0 <SystemClock_Config+0x13c>)
 800da6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800da6c:	2300      	movs	r3, #0
 800da6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800da70:	2300      	movs	r3, #0
 800da72:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800da74:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800da78:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800da7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800da82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da86:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800da88:	2302      	movs	r3, #2
 800da8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800da8c:	2301      	movs	r3, #1
 800da8e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800da90:	2308      	movs	r3, #8
 800da92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800da94:	2307      	movs	r3, #7
 800da96:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800da98:	2302      	movs	r3, #2
 800da9a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800da9c:	2304      	movs	r3, #4
 800da9e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800daa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800daa4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800daa6:	463b      	mov	r3, r7
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f8 fb29 	bl	8006100 <HAL_RCCEx_PeriphCLKConfig>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d003      	beq.n	800dabc <SystemClock_Config+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dab4:	21ac      	movs	r1, #172	; 0xac
 800dab6:	480d      	ldr	r0, [pc, #52]	; (800daec <SystemClock_Config+0x138>)
 800dab8:	f7f3 fc04 	bl	80012c4 <_Error_Handler>
  }

  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800dabc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dac0:	f7f7 fd16 	bl	80054f0 <HAL_PWREx_ControlVoltageScaling>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <SystemClock_Config+0x11e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800daca:	21b3      	movs	r1, #179	; 0xb3
 800dacc:	4807      	ldr	r0, [pc, #28]	; (800daec <SystemClock_Config+0x138>)
 800dace:	f7f3 fbf9 	bl	80012c4 <_Error_Handler>
  }

  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800dad2:	4b08      	ldr	r3, [pc, #32]	; (800daf4 <SystemClock_Config+0x140>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a07      	ldr	r2, [pc, #28]	; (800daf4 <SystemClock_Config+0x140>)
 800dad8:	f023 0302 	bic.w	r3, r3, #2
 800dadc:	6013      	str	r3, [r2, #0]
}
 800dade:	bf00      	nop
 800dae0:	37e0      	adds	r7, #224	; 0xe0
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	40021000 	.word	0x40021000
 800daec:	08026ae4 	.word	0x08026ae4
 800daf0:	00024206 	.word	0x00024206
 800daf4:	e000e010 	.word	0xe000e010

0800daf8 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08e      	sub	sp, #56	; 0x38
 800dafc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800dafe:	4b31      	ldr	r3, [pc, #196]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800db04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 800db06:	4b2f      	ldr	r3, [pc, #188]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db08:	2204      	movs	r2, #4
 800db0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db0c:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db0e:	2200      	movs	r2, #0
 800db10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800db12:	4b2c      	ldr	r3, [pc, #176]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db14:	f04f 32ff 	mov.w	r2, #4294967295
 800db18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db1a:	4b2a      	ldr	r3, [pc, #168]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db20:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db22:	2200      	movs	r2, #0
 800db24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800db26:	4827      	ldr	r0, [pc, #156]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db28:	f7f9 ff4d 	bl	80079c6 <HAL_TIM_Base_Init>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db32:	21c8      	movs	r1, #200	; 0xc8
 800db34:	4824      	ldr	r0, [pc, #144]	; (800dbc8 <MX_TIM2_Init+0xd0>)
 800db36:	f7f3 fbc5 	bl	80012c4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800db40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db44:	4619      	mov	r1, r3
 800db46:	481f      	ldr	r0, [pc, #124]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db48:	f7fa f8e8 	bl	8007d1c <HAL_TIM_ConfigClockSource>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db52:	21ce      	movs	r1, #206	; 0xce
 800db54:	481c      	ldr	r0, [pc, #112]	; (800dbc8 <MX_TIM2_Init+0xd0>)
 800db56:	f7f3 fbb5 	bl	80012c4 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800db5a:	481a      	ldr	r0, [pc, #104]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db5c:	f7f9 ff8a 	bl	8007a74 <HAL_TIM_OC_Init>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d003      	beq.n	800db6e <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db66:	21d3      	movs	r1, #211	; 0xd3
 800db68:	4817      	ldr	r0, [pc, #92]	; (800dbc8 <MX_TIM2_Init+0xd0>)
 800db6a:	f7f3 fbab 	bl	80012c4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db6e:	2300      	movs	r3, #0
 800db70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800db72:	2300      	movs	r3, #0
 800db74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800db76:	f107 031c 	add.w	r3, r7, #28
 800db7a:	4619      	mov	r1, r3
 800db7c:	4811      	ldr	r0, [pc, #68]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800db7e:	f7fa fdc9 	bl	8008714 <HAL_TIMEx_MasterConfigSynchronization>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <MX_TIM2_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db88:	21da      	movs	r1, #218	; 0xda
 800db8a:	480f      	ldr	r0, [pc, #60]	; (800dbc8 <MX_TIM2_Init+0xd0>)
 800db8c:	f7f3 fb9a 	bl	80012c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800db90:	2300      	movs	r3, #0
 800db92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0xFFFFFFFF;
 800db94:	f04f 33ff 	mov.w	r3, #4294967295
 800db98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db9e:	2300      	movs	r3, #0
 800dba0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dba2:	463b      	mov	r3, r7
 800dba4:	2200      	movs	r2, #0
 800dba6:	4619      	mov	r1, r3
 800dba8:	4806      	ldr	r0, [pc, #24]	; (800dbc4 <MX_TIM2_Init+0xcc>)
 800dbaa:	f7fa f839 	bl	8007c20 <HAL_TIM_OC_ConfigChannel>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d003      	beq.n	800dbbc <MX_TIM2_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dbb4:	21e3      	movs	r1, #227	; 0xe3
 800dbb6:	4804      	ldr	r0, [pc, #16]	; (800dbc8 <MX_TIM2_Init+0xd0>)
 800dbb8:	f7f3 fb84 	bl	80012c4 <_Error_Handler>
  }

}
 800dbbc:	bf00      	nop
 800dbbe:	3738      	adds	r7, #56	; 0x38
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	200012c8 	.word	0x200012c8
 800dbc8:	08026ae4 	.word	0x08026ae4

0800dbcc <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b088      	sub	sp, #32
 800dbd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 800dbd2:	4b26      	ldr	r3, [pc, #152]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbd4:	4a26      	ldr	r2, [pc, #152]	; (800dc70 <MX_TIM5_Init+0xa4>)
 800dbd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 800dbd8:	4b24      	ldr	r3, [pc, #144]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbda:	2204      	movs	r2, #4
 800dbdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbde:	4b23      	ldr	r3, [pc, #140]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = GPI_FAST_CLOCK_RATE * DOG_PERIOD;
 800dbe4:	4b21      	ldr	r3, [pc, #132]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbe6:	4a23      	ldr	r2, [pc, #140]	; (800dc74 <MX_TIM5_Init+0xa8>)
 800dbe8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dbea:	4b20      	ldr	r3, [pc, #128]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dbf0:	4b1e      	ldr	r3, [pc, #120]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dbf6:	481d      	ldr	r0, [pc, #116]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dbf8:	f7f9 fee5 	bl	80079c6 <HAL_TIM_Base_Init>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <MX_TIM5_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc02:	21f5      	movs	r1, #245	; 0xf5
 800dc04:	481c      	ldr	r0, [pc, #112]	; (800dc78 <MX_TIM5_Init+0xac>)
 800dc06:	f7f3 fb5d 	bl	80012c4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dc10:	f107 0310 	add.w	r3, r7, #16
 800dc14:	4619      	mov	r1, r3
 800dc16:	4815      	ldr	r0, [pc, #84]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dc18:	f7fa f880 	bl	8007d1c <HAL_TIM_ConfigClockSource>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <MX_TIM5_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc22:	21fb      	movs	r1, #251	; 0xfb
 800dc24:	4814      	ldr	r0, [pc, #80]	; (800dc78 <MX_TIM5_Init+0xac>)
 800dc26:	f7f3 fb4d 	bl	80012c4 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800dc2a:	4810      	ldr	r0, [pc, #64]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dc2c:	f7f9 ff22 	bl	8007a74 <HAL_TIM_OC_Init>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <MX_TIM5_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc36:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc3a:	480f      	ldr	r0, [pc, #60]	; (800dc78 <MX_TIM5_Init+0xac>)
 800dc3c:	f7f3 fb42 	bl	80012c4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc40:	2300      	movs	r3, #0
 800dc42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dc48:	1d3b      	adds	r3, r7, #4
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4807      	ldr	r0, [pc, #28]	; (800dc6c <MX_TIM5_Init+0xa0>)
 800dc4e:	f7fa fd61 	bl	8008714 <HAL_TIMEx_MasterConfigSynchronization>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d004      	beq.n	800dc62 <MX_TIM5_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc58:	f240 1107 	movw	r1, #263	; 0x107
 800dc5c:	4806      	ldr	r0, [pc, #24]	; (800dc78 <MX_TIM5_Init+0xac>)
 800dc5e:	f7f3 fb31 	bl	80012c4 <_Error_Handler>
  }
}
 800dc62:	bf00      	nop
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	20001140 	.word	0x20001140
 800dc70:	40000c00 	.word	0x40000c00
 800dc74:	1312d000 	.word	0x1312d000
 800dc78:	08026ae4 	.word	0x08026ae4

0800dc7c <MX_LPTIM1_Init>:

void MX_LPTIM1_Init(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800dc80:	4b14      	ldr	r3, [pc, #80]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dc82:	4a15      	ldr	r2, [pc, #84]	; (800dcd8 <MX_LPTIM1_Init+0x5c>)
 800dc84:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800dc86:	4b13      	ldr	r3, [pc, #76]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800dc8c:	4b11      	ldr	r3, [pc, #68]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800dc92:	4b10      	ldr	r3, [pc, #64]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dc94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc98:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800dc9a:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800dca0:	4b0c      	ldr	r3, [pc, #48]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800dca6:	4b0b      	ldr	r3, [pc, #44]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800dcac:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800dcb2:	4b08      	ldr	r3, [pc, #32]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800dcb8:	4806      	ldr	r0, [pc, #24]	; (800dcd4 <MX_LPTIM1_Init+0x58>)
 800dcba:	f7f7 fb71 	bl	80053a0 <HAL_LPTIM_Init>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d004      	beq.n	800dcce <MX_LPTIM1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dcc4:	f240 1119 	movw	r1, #281	; 0x119
 800dcc8:	4804      	ldr	r0, [pc, #16]	; (800dcdc <MX_LPTIM1_Init+0x60>)
 800dcca:	f7f3 fafb 	bl	80012c4 <_Error_Handler>
  }

}
 800dcce:	bf00      	nop
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	200011e4 	.word	0x200011e4
 800dcd8:	40007c00 	.word	0x40007c00
 800dcdc:	08026ae4 	.word	0x08026ae4

0800dce0 <HAL_LPTIM_Start>:

void HAL_LPTIM_Start(LPTIM_HandleTypeDef *hlptim){
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2202      	movs	r2, #2
 800dcec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68da      	ldr	r2, [r3, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dcfe:	60da      	str	r2, [r3, #12]

  __HAL_LPTIM_ENABLE(hlptim);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0201 	orr.w	r2, r2, #1
 800dd0e:	611a      	str	r2, [r3, #16]

	__HAL_LPTIM_AUTORELOAD_SET(hlptim, 65535);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd18:	619a      	str	r2, [r3, #24]

  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	691a      	ldr	r2, [r3, #16]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f042 0204 	orr.w	r2, r2, #4
 800dd28:	611a      	str	r2, [r3, #16]

  hlptim->State= HAL_LPTIM_STATE_READY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800dd32:	bf00      	nop
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
	...

0800dd40 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800dd44:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd46:	4a16      	ldr	r2, [pc, #88]	; (800dda0 <MX_USART2_UART_Init+0x60>)
 800dd48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800dd4a:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dd50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dd52:	4b12      	ldr	r3, [pc, #72]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dd58:	4b10      	ldr	r3, [pc, #64]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dd64:	4b0d      	ldr	r3, [pc, #52]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd66:	220c      	movs	r2, #12
 800dd68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd6a:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dd76:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd7c:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dd82:	4806      	ldr	r0, [pc, #24]	; (800dd9c <MX_USART2_UART_Init+0x5c>)
 800dd84:	f7fa fd22 	bl	80087cc <HAL_UART_Init>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dd8e:	f240 113b 	movw	r1, #315	; 0x13b
 800dd92:	4804      	ldr	r0, [pc, #16]	; (800dda4 <MX_USART2_UART_Init+0x64>)
 800dd94:	f7f3 fa96 	bl	80012c4 <_Error_Handler>
  }
}
 800dd98:	bf00      	nop
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	2000134c 	.word	0x2000134c
 800dda0:	40004400 	.word	0x40004400
 800dda4:	08026ae4 	.word	0x08026ae4

0800dda8 <_read>:

int _read (int fd, char *pBuffer, int size)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	e011      	b.n	800ddde <_read+0x36>
    {
      while((USART2->ISR&0X40)==0);
 800ddba:	bf00      	nop
 800ddbc:	4b0d      	ldr	r3, [pc, #52]	; (800ddf4 <_read+0x4c>)
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d0f9      	beq.n	800ddbc <_read+0x14>
      pBuffer[i] = USART2->RDR;
 800ddc8:	4b0a      	ldr	r3, [pc, #40]	; (800ddf4 <_read+0x4c>)
 800ddca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddcc:	b299      	uxth	r1, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	b2ca      	uxtb	r2, r1
 800ddd6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	3301      	adds	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	dbe9      	blt.n	800ddba <_read+0x12>
    }
    return size;
 800dde6:	687b      	ldr	r3, [r7, #4]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	371c      	adds	r7, #28
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	40004400 	.word	0x40004400

0800ddf8 <_write>:

int _write (int fd, char *pBuffer, int size)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800de04:	2300      	movs	r3, #0
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e010      	b.n	800de2c <_write+0x34>
    {
      while((USART2->ISR&0X40)==0);
 800de0a:	bf00      	nop
 800de0c:	4b0d      	ldr	r3, [pc, #52]	; (800de44 <_write+0x4c>)
 800de0e:	69db      	ldr	r3, [r3, #28]
 800de10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de14:	2b00      	cmp	r3, #0
 800de16:	d0f9      	beq.n	800de0c <_write+0x14>
      USART2->TDR = (uint8_t) pBuffer[i];
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	4413      	add	r3, r2
 800de1e:	781a      	ldrb	r2, [r3, #0]
 800de20:	4b08      	ldr	r3, [pc, #32]	; (800de44 <_write+0x4c>)
 800de22:	b292      	uxth	r2, r2
 800de24:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < size; i++)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	3301      	adds	r3, #1
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	dbea      	blt.n	800de0a <_write+0x12>
    }
    return size;
 800de34:	687b      	ldr	r3, [r7, #4]
}
 800de36:	4618      	mov	r0, r3
 800de38:	371c      	adds	r7, #28
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	40004400 	.word	0x40004400

0800de48 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800de4c:	4b19      	ldr	r3, [pc, #100]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de4e:	4a1a      	ldr	r2, [pc, #104]	; (800deb8 <MX_USART3_UART_Init+0x70>)
 800de50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800de52:	4b18      	ldr	r3, [pc, #96]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800de58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800de5a:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800de60:	4b14      	ldr	r3, [pc, #80]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de62:	2200      	movs	r2, #0
 800de64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800de66:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de68:	2200      	movs	r2, #0
 800de6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800de6c:	4b11      	ldr	r3, [pc, #68]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de6e:	220c      	movs	r2, #12
 800de70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de74:	2200      	movs	r2, #0
 800de76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800de78:	4b0e      	ldr	r3, [pc, #56]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	61da      	str	r2, [r3, #28]
  // huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de7e:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de80:	2200      	movs	r2, #0
 800de82:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_DeInit(&huart3) != HAL_OK)
 800de84:	480b      	ldr	r0, [pc, #44]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de86:	f7fa fcf2 	bl	800886e <HAL_UART_DeInit>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d004      	beq.n	800de9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800de90:	f240 1163 	movw	r1, #355	; 0x163
 800de94:	4809      	ldr	r0, [pc, #36]	; (800debc <MX_USART3_UART_Init+0x74>)
 800de96:	f7f3 fa15 	bl	80012c4 <_Error_Handler>
  }
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800de9a:	4806      	ldr	r0, [pc, #24]	; (800deb4 <MX_USART3_UART_Init+0x6c>)
 800de9c:	f7fa fc96 	bl	80087cc <HAL_UART_Init>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d004      	beq.n	800deb0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800dea6:	f240 1167 	movw	r1, #359	; 0x167
 800deaa:	4804      	ldr	r0, [pc, #16]	; (800debc <MX_USART3_UART_Init+0x74>)
 800deac:	f7f3 fa0a 	bl	80012c4 <_Error_Handler>
  }
}
 800deb0:	bf00      	nop
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	20001058 	.word	0x20001058
 800deb8:	40004800 	.word	0x40004800
 800debc:	08026ae4 	.word	0x08026ae4

0800dec0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  if (huart == &huart2)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a09      	ldr	r2, [pc, #36]	; (800def0 <HAL_UART_RxCpltCallback+0x30>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d104      	bne.n	800deda <HAL_UART_RxCpltCallback+0x1a>
    uart_read_data(1, 0);
 800ded0:	2100      	movs	r1, #0
 800ded2:	2001      	movs	r0, #1
 800ded4:	f004 fcf2 	bl	80128bc <uart_read_data>
  #if GPS_DATA
  else if (huart == &huart3)
    GPS_Uart_Irq();
  #endif
}
 800ded8:	e005      	b.n	800dee6 <HAL_UART_RxCpltCallback+0x26>
  else if (huart == &huart3)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a05      	ldr	r2, [pc, #20]	; (800def4 <HAL_UART_RxCpltCallback+0x34>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d101      	bne.n	800dee6 <HAL_UART_RxCpltCallback+0x26>
    GPS_Uart_Irq();
 800dee2:	f7fc f887 	bl	8009ff4 <GPS_Uart_Irq>
}
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	2000134c 	.word	0x2000134c
 800def4:	20001058 	.word	0x20001058

0800def8 <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 800defc:	4b1a      	ldr	r3, [pc, #104]	; (800df68 <MX_RTC_Init+0x70>)
 800defe:	4a1b      	ldr	r2, [pc, #108]	; (800df6c <MX_RTC_Init+0x74>)
 800df00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800df02:	4b19      	ldr	r3, [pc, #100]	; (800df68 <MX_RTC_Init+0x70>)
 800df04:	2200      	movs	r2, #0
 800df06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800df08:	4b17      	ldr	r3, [pc, #92]	; (800df68 <MX_RTC_Init+0x70>)
 800df0a:	227f      	movs	r2, #127	; 0x7f
 800df0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800df0e:	4b16      	ldr	r3, [pc, #88]	; (800df68 <MX_RTC_Init+0x70>)
 800df10:	22ff      	movs	r2, #255	; 0xff
 800df12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800df14:	4b14      	ldr	r3, [pc, #80]	; (800df68 <MX_RTC_Init+0x70>)
 800df16:	2200      	movs	r2, #0
 800df18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800df1a:	4b13      	ldr	r3, [pc, #76]	; (800df68 <MX_RTC_Init+0x70>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800df20:	4b11      	ldr	r3, [pc, #68]	; (800df68 <MX_RTC_Init+0x70>)
 800df22:	2200      	movs	r2, #0
 800df24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800df26:	4b10      	ldr	r3, [pc, #64]	; (800df68 <MX_RTC_Init+0x70>)
 800df28:	2200      	movs	r2, #0
 800df2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800df2c:	480e      	ldr	r0, [pc, #56]	; (800df68 <MX_RTC_Init+0x70>)
 800df2e:	f7f8 fd99 	bl	8006a64 <HAL_RTC_Init>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d004      	beq.n	800df42 <MX_RTC_Init+0x4a>
  {
    Error_Handler();
 800df38:	f240 1181 	movw	r1, #385	; 0x181
 800df3c:	480c      	ldr	r0, [pc, #48]	; (800df70 <MX_RTC_Init+0x78>)
 800df3e:	f7f3 f9c1 	bl	80012c4 <_Error_Handler>
  }
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800df42:	4b09      	ldr	r3, [pc, #36]	; (800df68 <MX_RTC_Init+0x70>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	22ca      	movs	r2, #202	; 0xca
 800df48:	625a      	str	r2, [r3, #36]	; 0x24
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <MX_RTC_Init+0x70>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2253      	movs	r2, #83	; 0x53
 800df50:	625a      	str	r2, [r3, #36]	; 0x24
  // disable RTC wakeup
  CLEAR_BIT(hrtc.Instance->CR, RTC_CR_WUTE);
 800df52:	4b05      	ldr	r3, [pc, #20]	; (800df68 <MX_RTC_Init+0x70>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	689a      	ldr	r2, [r3, #8]
 800df58:	4b03      	ldr	r3, [pc, #12]	; (800df68 <MX_RTC_Init+0x70>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df60:	609a      	str	r2, [r3, #8]
}
 800df62:	bf00      	nop
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20001240 	.word	0x20001240
 800df6c:	40002800 	.word	0x40002800
 800df70:	08026ae4 	.word	0x08026ae4

0800df74 <MX_CRC_Init>:

#if MX_FLASH_FILE

static void MX_CRC_Init(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
  /* CRC configured */
  CrcHandle.Instance = CRC;
 800df78:	4b14      	ldr	r3, [pc, #80]	; (800dfcc <MX_CRC_Init+0x58>)
 800df7a:	4a15      	ldr	r2, [pc, #84]	; (800dfd0 <MX_CRC_Init+0x5c>)
 800df7c:	601a      	str	r2, [r3, #0]

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 800df7e:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <MX_CRC_Init+0x58>)
 800df80:	2201      	movs	r2, #1
 800df82:	711a      	strb	r2, [r3, #4]
  CrcHandle.Init.GeneratingPolynomial    = 0x1021;
 800df84:	4b11      	ldr	r3, [pc, #68]	; (800dfcc <MX_CRC_Init+0x58>)
 800df86:	f241 0221 	movw	r2, #4129	; 0x1021
 800df8a:	609a      	str	r2, [r3, #8]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 800df8c:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <MX_CRC_Init+0x58>)
 800df8e:	2208      	movs	r2, #8
 800df90:	60da      	str	r2, [r3, #12]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
 800df92:	4b0e      	ldr	r3, [pc, #56]	; (800dfcc <MX_CRC_Init+0x58>)
 800df94:	2201      	movs	r2, #1
 800df96:	715a      	strb	r2, [r3, #5]
  CrcHandle.Init.InitValue               = 0;
 800df98:	4b0c      	ldr	r3, [pc, #48]	; (800dfcc <MX_CRC_Init+0x58>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	611a      	str	r2, [r3, #16]

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 800df9e:	4b0b      	ldr	r3, [pc, #44]	; (800dfcc <MX_CRC_Init+0x58>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	615a      	str	r2, [r3, #20]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800dfa4:	4b09      	ldr	r3, [pc, #36]	; (800dfcc <MX_CRC_Init+0x58>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	619a      	str	r2, [r3, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 800dfaa:	4b08      	ldr	r3, [pc, #32]	; (800dfcc <MX_CRC_Init+0x58>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	621a      	str	r2, [r3, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 800dfb0:	4806      	ldr	r0, [pc, #24]	; (800dfcc <MX_CRC_Init+0x58>)
 800dfb2:	f7f3 fecb 	bl	8001d4c <HAL_CRC_Init>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <MX_CRC_Init+0x52>
  {
    /* Initialization Error */
    _Error_Handler(__FILE__, __LINE__);
 800dfbc:	f240 11a5 	movw	r1, #421	; 0x1a5
 800dfc0:	4804      	ldr	r0, [pc, #16]	; (800dfd4 <MX_CRC_Init+0x60>)
 800dfc2:	f7f3 f97f 	bl	80012c4 <_Error_Handler>
  }
}
 800dfc6:	bf00      	nop
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	2000121c 	.word	0x2000121c
 800dfd0:	40023000 	.word	0x40023000
 800dfd4:	08026ae4 	.word	0x08026ae4

0800dfd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800dfdc:	4b19      	ldr	r3, [pc, #100]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dfde:	4a1a      	ldr	r2, [pc, #104]	; (800e048 <MX_I2C2_Init+0x70>)
 800dfe0:	601a      	str	r2, [r3, #0]
  // I2C speed frequency 100 KHz; Rise time 100 ns; Fall time 100 ns; Coefficient of digital filter 0;
  hi2c2.Init.Timing = 0x10D19CE4;
 800dfe2:	4b18      	ldr	r3, [pc, #96]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dfe4:	4a19      	ldr	r2, [pc, #100]	; (800e04c <MX_I2C2_Init+0x74>)
 800dfe6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800dfe8:	4b16      	ldr	r3, [pc, #88]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dfee:	4b15      	ldr	r3, [pc, #84]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dff4:	4b13      	ldr	r3, [pc, #76]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800dffa:	4b12      	ldr	r3, [pc, #72]	; (800e044 <MX_I2C2_Init+0x6c>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e000:	4b10      	ldr	r3, [pc, #64]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e002:	2200      	movs	r2, #0
 800e004:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e006:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e008:	2200      	movs	r2, #0
 800e00a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e00e:	2200      	movs	r2, #0
 800e010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800e012:	480c      	ldr	r0, [pc, #48]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e014:	f7f5 fa86 	bl	8003524 <HAL_I2C_Init>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d000      	beq.n	800e020 <MX_I2C2_Init+0x48>
  {
    while(1);
 800e01e:	e7fe      	b.n	800e01e <MX_I2C2_Init+0x46>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e020:	2100      	movs	r1, #0
 800e022:	4808      	ldr	r0, [pc, #32]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e024:	f7f7 f8cf 	bl	80051c6 <HAL_I2CEx_ConfigAnalogFilter>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d000      	beq.n	800e030 <MX_I2C2_Init+0x58>
  {
    while(1);
 800e02e:	e7fe      	b.n	800e02e <MX_I2C2_Init+0x56>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800e030:	2100      	movs	r1, #0
 800e032:	4804      	ldr	r0, [pc, #16]	; (800e044 <MX_I2C2_Init+0x6c>)
 800e034:	f7f7 f912 	bl	800525c <HAL_I2CEx_ConfigDigitalFilter>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d000      	beq.n	800e040 <MX_I2C2_Init+0x68>
  {
    while(1);
 800e03e:	e7fe      	b.n	800e03e <MX_I2C2_Init+0x66>
  }
}
 800e040:	bf00      	nop
 800e042:	bd80      	pop	{r7, pc}
 800e044:	200010e0 	.word	0x200010e0
 800e048:	40005800 	.word	0x40005800
 800e04c:	10d19ce4 	.word	0x10d19ce4

0800e050 <MX_IWDG_Init>:

/* IWDG init function */
static void MX_IWDG_Init(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	af00      	add	r7, sp, #0
  hiwdg.Instance = IWDG;
 800e054:	4b0d      	ldr	r3, [pc, #52]	; (800e08c <MX_IWDG_Init+0x3c>)
 800e056:	4a0e      	ldr	r2, [pc, #56]	; (800e090 <MX_IWDG_Init+0x40>)
 800e058:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800e05a:	4b0c      	ldr	r3, [pc, #48]	; (800e08c <MX_IWDG_Init+0x3c>)
 800e05c:	2206      	movs	r2, #6
 800e05e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800e060:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <MX_IWDG_Init+0x3c>)
 800e062:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e066:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800e068:	4b08      	ldr	r3, [pc, #32]	; (800e08c <MX_IWDG_Init+0x3c>)
 800e06a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e06e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e070:	4806      	ldr	r0, [pc, #24]	; (800e08c <MX_IWDG_Init+0x3c>)
 800e072:	f7f7 f93f 	bl	80052f4 <HAL_IWDG_Init>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d004      	beq.n	800e086 <MX_IWDG_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e07c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e080:	4804      	ldr	r0, [pc, #16]	; (800e094 <MX_IWDG_Init+0x44>)
 800e082:	f7f3 f91f 	bl	80012c4 <_Error_Handler>
  }

}
 800e086:	bf00      	nop
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	200010d0 	.word	0x200010d0
 800e090:	40003000 	.word	0x40003000
 800e094:	08026ae4 	.word	0x08026ae4

0800e098 <gpi_platform_init>:
  /* USER CODE END ADC1_Init 2 */

}

void gpi_platform_init(void)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
    ASSERT_CT(GPI_ARCH_IS_OS(NONE));
    SystemClock_Config();
 800e09c:	f7ff fc8a 	bl	800d9b4 <SystemClock_Config>
    MX_GPIO_Init();
 800e0a0:	f7ff fa02 	bl	800d4a8 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800e0a4:	f7ff fe4c 	bl	800dd40 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 800e0a8:	f7ff fece 	bl	800de48 <MX_USART3_UART_Init>
    #if MX_FLASH_FILE
      MX_CRC_Init();
 800e0ac:	f7ff ff62 	bl	800df74 <MX_CRC_Init>
    #endif
    MX_RTC_Init();
 800e0b0:	f7ff ff22 	bl	800def8 <MX_RTC_Init>
    MX_I2C2_Init();
 800e0b4:	f7ff ff90 	bl	800dfd8 <MX_I2C2_Init>

    MX_TIM2_Init();
 800e0b8:	f7ff fd1e 	bl	800daf8 <MX_TIM2_Init>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4810      	ldr	r0, [pc, #64]	; (800e100 <gpi_platform_init+0x68>)
 800e0c0:	f7f9 fd0e 	bl	8007ae0 <HAL_TIM_OC_Start_IT>
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <gpi_platform_init+0x68>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	4b0d      	ldr	r3, [pc, #52]	; (800e100 <gpi_platform_init+0x68>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f022 0202 	bic.w	r2, r2, #2
 800e0d2:	60da      	str	r2, [r3, #12]

    MX_TIM5_Init();
 800e0d4:	f7ff fd7a 	bl	800dbcc <MX_TIM5_Init>
    // HAL_TIM_Base_Start(&htim5);
    HAL_TIM_Base_Start(&htim5);
 800e0d8:	480a      	ldr	r0, [pc, #40]	; (800e104 <gpi_platform_init+0x6c>)
 800e0da:	f7f9 fc9f 	bl	8007a1c <HAL_TIM_Base_Start>
    __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 800e0de:	4b09      	ldr	r3, [pc, #36]	; (800e104 <gpi_platform_init+0x6c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68da      	ldr	r2, [r3, #12]
 800e0e4:	4b07      	ldr	r3, [pc, #28]	; (800e104 <gpi_platform_init+0x6c>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f022 0201 	bic.w	r2, r2, #1
 800e0ec:	60da      	str	r2, [r3, #12]

		MX_LPTIM1_Init();
 800e0ee:	f7ff fdc5 	bl	800dc7c <MX_LPTIM1_Init>
		HAL_LPTIM_Start(&hlptim1);
 800e0f2:	4805      	ldr	r0, [pc, #20]	; (800e108 <gpi_platform_init+0x70>)
 800e0f4:	f7ff fdf4 	bl	800dce0 <HAL_LPTIM_Start>
    MX_IWDG_Init();
 800e0f8:	f7ff ffaa 	bl	800e050 <MX_IWDG_Init>
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	200012c8 	.word	0x200012c8
 800e104:	20001140 	.word	0x20001140
 800e108:	200011e4 	.word	0x200011e4

0800e10c <gpi_sleep>:

void gpi_sleep()
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e112:	b672      	cpsid	i
	  gpi_int_disable();

    // mark that CPU comes from power-down
    // this flag can be evaluated by the application
    // NOTE: to be meaningful, the first ISR taken after power-up should clear it
    gpi_wakeup_event = 1;
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <gpi_sleep+0x34>)
 800e116:	2201      	movs	r2, #1
 800e118:	601a      	str	r2, [r3, #0]

    /* Clear SLEEPDEEP bit of Cortex System Control Register */
		CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e11a:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <gpi_sleep+0x38>)
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	4a09      	ldr	r2, [pc, #36]	; (800e144 <gpi_sleep+0x38>)
 800e120:	f023 0304 	bic.w	r3, r3, #4
 800e124:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800e126:	bf30      	wfi
 800e128:	2300      	movs	r3, #0
 800e12a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f383 8810 	msr	PRIMASK, r3
  	// sleep...

    // restore standard behavior
    // NOTE: PRIMASK = 0 reenables interrupts. In consequence, pending IRQ(s) will be taken.
    __set_PRIMASK(0);
}
 800e132:	bf00      	nop
 800e134:	370c      	adds	r7, #12
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	200003b4 	.word	0x200003b4
 800e144:	e000ed00 	.word	0xe000ed00

0800e148 <gpi_watchdog_periodic>:

void gpi_watchdog_periodic()
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	af00      	add	r7, sp, #0
  /* This function is called periodically to restart the watchdog
     timer. */
	HAL_IWDG_Refresh(&hiwdg);
 800e14c:	4802      	ldr	r0, [pc, #8]	; (800e158 <gpi_watchdog_periodic+0x10>)
 800e14e:	f7f7 f917 	bl	8005380 <HAL_IWDG_Refresh>
}
 800e152:	bf00      	nop
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	200010d0 	.word	0x200010d0

0800e15c <energest_init>:
unsigned char energest_current_mode[ENERGEST_TYPE_MAX];

/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
    int i;
    for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
 800e162:	2300      	movs	r3, #0
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	e014      	b.n	800e192 <energest_init+0x36>
    energest_total_time[i].current = energest_current_time[i] = 0;
 800e168:	4a0e      	ldr	r2, [pc, #56]	; (800e1a4 <energest_init+0x48>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2100      	movs	r1, #0
 800e16e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e172:	4a0c      	ldr	r2, [pc, #48]	; (800e1a4 <energest_init+0x48>)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e17a:	490b      	ldr	r1, [pc, #44]	; (800e1a8 <energest_init+0x4c>)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    energest_current_mode[i] = 0;
 800e182:	4a0a      	ldr	r2, [pc, #40]	; (800e1ac <energest_init+0x50>)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4413      	add	r3, r2
 800e188:	2200      	movs	r2, #0
 800e18a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3301      	adds	r3, #1
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b10      	cmp	r3, #16
 800e196:	dde7      	ble.n	800e168 <energest_init+0xc>
    #ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
    for(i = 0; i < ENERGEST_CONF_LEVELDEVICE_LEVELS; ++i) {
    energest_leveldevice_current_leveltime[i].current = 0;
    }
    #endif
}
 800e198:	bf00      	nop
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr
 800e1a4:	20001308 	.word	0x20001308
 800e1a8:	20000f10 	.word	0x20000f10
 800e1ac:	2000112c 	.word	0x2000112c

0800e1b0 <energest_type_time>:
/*---------------------------------------------------------------------------*/
unsigned long
energest_type_time(int type)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
    /* Note: does not support ENERGEST_CONF_LEVELDEVICE_LEVELS! */
    #ifndef ENERGEST_CONF_LEVELDEVICE_LEVELS
    if(energest_current_mode[type]) {
 800e1b8:	4a13      	ldr	r2, [pc, #76]	; (800e208 <energest_type_time+0x58>)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d017      	beq.n	800e1f4 <energest_type_time+0x44>
 800e1c4:	4b11      	ldr	r3, [pc, #68]	; (800e20c <energest_type_time+0x5c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    Gpi_Fast_Tick_Native now = gpi_tick_fast_native();
 800e1ca:	60fb      	str	r3, [r7, #12]
    energest_total_time[type].current += (Gpi_Fast_Tick_Native)
 800e1cc:	4a10      	ldr	r2, [pc, #64]	; (800e210 <energest_type_time+0x60>)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        (now - energest_current_time[type]);
 800e1d4:	490f      	ldr	r1, [pc, #60]	; (800e214 <energest_type_time+0x64>)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e1dc:	68f9      	ldr	r1, [r7, #12]
 800e1de:	1acb      	subs	r3, r1, r3
    energest_total_time[type].current += (Gpi_Fast_Tick_Native)
 800e1e0:	441a      	add	r2, r3
 800e1e2:	490b      	ldr	r1, [pc, #44]	; (800e210 <energest_type_time+0x60>)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    energest_current_time[type] = now;
 800e1ea:	490a      	ldr	r1, [pc, #40]	; (800e214 <energest_type_time+0x64>)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    #endif /* ENERGEST_CONF_LEVELDEVICE_LEVELS */
    return energest_total_time[type].current;
 800e1f4:	4a06      	ldr	r2, [pc, #24]	; (800e210 <energest_type_time+0x60>)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr
 800e208:	2000112c 	.word	0x2000112c
 800e20c:	200012c8 	.word	0x200012c8
 800e210:	20000f10 	.word	0x20000f10
 800e214:	20001308 	.word	0x20001308

0800e218 <energest_type_set>:
    #endif
}
/*---------------------------------------------------------------------------*/
void
energest_type_set(int type, unsigned long val)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
    energest_total_time[type].current = val;
 800e222:	4905      	ldr	r1, [pc, #20]	; (800e238 <energest_type_set+0x20>)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	20000f10 	.word	0x20000f10

0800e23c <memxor_block_straight>:

//**************************************************************************************************

// straight version for cases where size is small
void memxor_block_straight(void *dest, /*const*/ void *src[], unsigned int size, int num_src)
{
 800e23c:	b4f0      	push	{r4, r5, r6, r7}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
		""
		"str		%0, [%[d], %[i]]	\n"
		"subs		%[i], #4			\n"
		"bge		1b					\n"
		: "=&r"(tmp1), "=&r"(tmp2), "=&r"(tmp3), [d] "+&r"(dest)
		: [i] "r"((size - 1) & ~3u), [s] "r"(src), [n] "r"(96 - 12 * num_src)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	f023 0203 	bic.w	r2, r3, #3
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	460b      	mov	r3, r1
 800e256:	0089      	lsls	r1, r1, #2
 800e258:	1a5b      	subs	r3, r3, r1
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	f103 0060 	add.w	r0, r3, #96	; 0x60
	__asm__ volatile
 800e260:	68b9      	ldr	r1, [r7, #8]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	589c      	ldr	r4, [r3, r2]
 800e266:	460d      	mov	r5, r1
 800e268:	4487      	add	pc, r0
 800e26a:	bf00      	nop
 800e26c:	f855 6b04 	ldr.w	r6, [r5], #4
 800e270:	f856 6002 	ldr.w	r6, [r6, r2]
 800e274:	ea84 0406 	eor.w	r4, r4, r6
 800e278:	f855 6b04 	ldr.w	r6, [r5], #4
 800e27c:	f856 6002 	ldr.w	r6, [r6, r2]
 800e280:	ea84 0406 	eor.w	r4, r4, r6
 800e284:	f855 6b04 	ldr.w	r6, [r5], #4
 800e288:	f856 6002 	ldr.w	r6, [r6, r2]
 800e28c:	ea84 0406 	eor.w	r4, r4, r6
 800e290:	f855 6b04 	ldr.w	r6, [r5], #4
 800e294:	f856 6002 	ldr.w	r6, [r6, r2]
 800e298:	ea84 0406 	eor.w	r4, r4, r6
 800e29c:	f855 6b04 	ldr.w	r6, [r5], #4
 800e2a0:	f856 6002 	ldr.w	r6, [r6, r2]
 800e2a4:	ea84 0406 	eor.w	r4, r4, r6
 800e2a8:	f855 6b04 	ldr.w	r6, [r5], #4
 800e2ac:	f856 6002 	ldr.w	r6, [r6, r2]
 800e2b0:	ea84 0406 	eor.w	r4, r4, r6
 800e2b4:	f855 6b04 	ldr.w	r6, [r5], #4
 800e2b8:	f856 6002 	ldr.w	r6, [r6, r2]
 800e2bc:	ea84 0406 	eor.w	r4, r4, r6
 800e2c0:	f855 6b04 	ldr.w	r6, [r5], #4
 800e2c4:	f856 6002 	ldr.w	r6, [r6, r2]
 800e2c8:	ea84 0406 	eor.w	r4, r4, r6
 800e2cc:	509c      	str	r4, [r3, r2]
 800e2ce:	3a04      	subs	r2, #4
 800e2d0:	dac8      	bge.n	800e264 <memxor_block_straight+0x28>
 800e2d2:	60fb      	str	r3, [r7, #12]
		: "cc", "memory"
	);

	ASSERT_CT(MEMXOR_BLOCKSIZE == 8, inconsistent_code);
}
 800e2d4:	bf00      	nop
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bcf0      	pop	{r4, r5, r6, r7}
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop

0800e2e0 <NVIC_SystemReset>:
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e2e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <NVIC_SystemReset+0x20>)
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e2f0:	4903      	ldr	r1, [pc, #12]	; (800e300 <NVIC_SystemReset+0x20>)
 800e2f2:	4b04      	ldr	r3, [pc, #16]	; (800e304 <NVIC_SystemReset+0x24>)
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	60cb      	str	r3, [r1, #12]
 800e2f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800e2fc:	bf00      	nop
    __NOP();
 800e2fe:	e7fd      	b.n	800e2fc <NVIC_SystemReset+0x1c>
 800e300:	e000ed00 	.word	0xe000ed00
 800e304:	05fa0004 	.word	0x05fa0004

0800e308 <mx_get_leading_index>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

int_fast16_t mx_get_leading_index(const uint8_t *pcv)
{
 800e308:	b490      	push	{r4, r7}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
	const uint32_t	*p = (const uint32_t*)pcv;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	617b      	str	r3, [r7, #20]
	int_fast16_t	i;

	for (i = 0; i < chirp_config.coding_vector.len * 32; i += 32, p++)
 800e314:	2300      	movs	r3, #0
 800e316:	613b      	str	r3, [r7, #16]
 800e318:	e027      	b.n	800e36a <mx_get_leading_index+0x62>
	{
		if (*p)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d01d      	beq.n	800e35e <mx_get_leading_index+0x56>
		{
			i += gpi_get_lsb(*p);
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	60bb      	str	r3, [r7, #8]
		asm
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	bf0e      	itee	eq
 800e332:	3b01      	subeq	r3, #1
 800e334:	fa93 f3a3 	rbitne	r3, r3
 800e338:	fab3 f383 	clzne	r3, r3
 800e33c:	461c      	mov	r4, r3
	return y;
 800e33e:	4622      	mov	r2, r4
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	4413      	add	r3, r2
 800e344:	613b      	str	r3, [r7, #16]

			// ATTENTION: unused coding vector bits may be non-zero
			return (i < chirp_config.mx_generation_size) ? i : -1;
 800e346:	4b0f      	ldr	r3, [pc, #60]	; (800e384 <mx_get_leading_index+0x7c>)
 800e348:	885b      	ldrh	r3, [r3, #2]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	461a      	mov	r2, r3
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	4293      	cmp	r3, r2
 800e352:	da01      	bge.n	800e358 <mx_get_leading_index+0x50>
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	e010      	b.n	800e37a <mx_get_leading_index+0x72>
 800e358:	f04f 33ff 	mov.w	r3, #4294967295
 800e35c:	e00d      	b.n	800e37a <mx_get_leading_index+0x72>
	for (i = 0; i < chirp_config.coding_vector.len * 32; i += 32, p++)
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	3320      	adds	r3, #32
 800e362:	613b      	str	r3, [r7, #16]
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	3304      	adds	r3, #4
 800e368:	617b      	str	r3, [r7, #20]
 800e36a:	4b06      	ldr	r3, [pc, #24]	; (800e384 <mx_get_leading_index+0x7c>)
 800e36c:	79db      	ldrb	r3, [r3, #7]
 800e36e:	015b      	lsls	r3, r3, #5
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	429a      	cmp	r2, r3
 800e374:	dbd1      	blt.n	800e31a <mx_get_leading_index+0x12>
        }
	}

	return -1;
 800e376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bc90      	pop	{r4, r7}
 800e382:	4770      	bx	lr
 800e384:	20001430 	.word	0x20001430

0800e388 <unwrap_chunk>:

void unwrap_chunk(uint8_t *p)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
// 	ASSERT_CT(
// 		offsetof(Packet, payload) ==
// 			offsetof(Packet, coding_vector) +
// 			sizeof_member(Packet, coding_vector),
// 		inconsistent_alignment);
	assert_reset((
 800e390:	4b30      	ldr	r3, [pc, #192]	; (800e454 <unwrap_chunk+0xcc>)
 800e392:	7a1b      	ldrb	r3, [r3, #8]
 800e394:	461a      	mov	r2, r3
 800e396:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <unwrap_chunk+0xcc>)
 800e398:	799b      	ldrb	r3, [r3, #6]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4b2d      	ldr	r3, [pc, #180]	; (800e454 <unwrap_chunk+0xcc>)
 800e39e:	79db      	ldrb	r3, [r3, #7]
 800e3a0:	440b      	add	r3, r1
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d00d      	beq.n	800e3c2 <unwrap_chunk+0x3a>
 800e3a6:	4b2b      	ldr	r3, [pc, #172]	; (800e454 <unwrap_chunk+0xcc>)
 800e3a8:	7a1b      	ldrb	r3, [r3, #8]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	4b29      	ldr	r3, [pc, #164]	; (800e454 <unwrap_chunk+0xcc>)
 800e3ae:	799b      	ldrb	r3, [r3, #6]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4b28      	ldr	r3, [pc, #160]	; (800e454 <unwrap_chunk+0xcc>)
 800e3b4:	79db      	ldrb	r3, [r3, #7]
 800e3b6:	440b      	add	r3, r1
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d002      	beq.n	800e3c2 <unwrap_chunk+0x3a>
  __ASM volatile ("cpsid f" : : : "memory");
 800e3bc:	b671      	cpsid	f
 800e3be:	f7ff ff8f 	bl	800e2e0 <NVIC_SystemReset>
		inconsistent_alignment);
	// ASSERT_CT(
	// 	offsetof(Matrix_Row, payload_8) ==
	// 		offsetof(Matrix_Row, coding_vector_8) + sizeof_member(Matrix_Row, coding_vector_8),
	// 	inconsisten_alignment);
	assert_reset((chirp_config.matrix_payload_8.pos == chirp_config.matrix_coding_vector_8.pos + chirp_config.matrix_coding_vector_8.len));
 800e3c2:	4b24      	ldr	r3, [pc, #144]	; (800e454 <unwrap_chunk+0xcc>)
 800e3c4:	7e9b      	ldrb	r3, [r3, #26]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	4b22      	ldr	r3, [pc, #136]	; (800e454 <unwrap_chunk+0xcc>)
 800e3ca:	7e1b      	ldrb	r3, [r3, #24]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4b21      	ldr	r3, [pc, #132]	; (800e454 <unwrap_chunk+0xcc>)
 800e3d0:	7e5b      	ldrb	r3, [r3, #25]
 800e3d2:	440b      	add	r3, r1
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d00d      	beq.n	800e3f4 <unwrap_chunk+0x6c>
 800e3d8:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <unwrap_chunk+0xcc>)
 800e3da:	7e9b      	ldrb	r3, [r3, #26]
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4b1d      	ldr	r3, [pc, #116]	; (800e454 <unwrap_chunk+0xcc>)
 800e3e0:	7e1b      	ldrb	r3, [r3, #24]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4b1b      	ldr	r3, [pc, #108]	; (800e454 <unwrap_chunk+0xcc>)
 800e3e6:	7e5b      	ldrb	r3, [r3, #25]
 800e3e8:	440b      	add	r3, r1
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d002      	beq.n	800e3f4 <unwrap_chunk+0x6c>
 800e3ee:	b671      	cpsid	f
 800e3f0:	f7ff ff76 	bl	800e2e0 <NVIC_SystemReset>

	/* NOTE: condition gets resolved at compile time */
	if (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos != offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t))
 800e3f4:	4b17      	ldr	r3, [pc, #92]	; (800e454 <unwrap_chunk+0xcc>)
 800e3f6:	7e9b      	ldrb	r3, [r3, #26]
 800e3f8:	1d1a      	adds	r2, r3, #4
 800e3fa:	4b16      	ldr	r3, [pc, #88]	; (800e454 <unwrap_chunk+0xcc>)
 800e3fc:	7f9b      	ldrb	r3, [r3, #30]
 800e3fe:	3301      	adds	r3, #1
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	429a      	cmp	r2, r3
 800e404:	d022      	beq.n	800e44c <unwrap_chunk+0xc4>
	{
		/* #pragma GCC diagnostic push
		#pragma GCC diagnostic ignored "-Warray-bounds" */

		uint8_t			*s = p + chirp_config.matrix_coding_vector_8.len;
 800e406:	4b13      	ldr	r3, [pc, #76]	; (800e454 <unwrap_chunk+0xcc>)
 800e408:	7e5b      	ldrb	r3, [r3, #25]
 800e40a:	461a      	mov	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4413      	add	r3, r2
 800e410:	617b      	str	r3, [r7, #20]
		uint8_t			*d = s + chirp_config.matrix_payload_8.len;
 800e412:	4b10      	ldr	r3, [pc, #64]	; (800e454 <unwrap_chunk+0xcc>)
 800e414:	7edb      	ldrb	r3, [r3, #27]
 800e416:	461a      	mov	r2, r3
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	4413      	add	r3, r2
 800e41c:	613b      	str	r3, [r7, #16]
		unsigned int	i;

		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e41e:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <unwrap_chunk+0xcc>)
 800e420:	7f9b      	ldrb	r3, [r3, #30]
 800e422:	3301      	adds	r3, #1
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4a0b      	ldr	r2, [pc, #44]	; (800e454 <unwrap_chunk+0xcc>)
 800e428:	7e92      	ldrb	r2, [r2, #26]
 800e42a:	1a9b      	subs	r3, r3, r2
 800e42c:	3b04      	subs	r3, #4
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	e007      	b.n	800e442 <unwrap_chunk+0xba>
			*d++ = *s++;
 800e432:	697a      	ldr	r2, [r7, #20]
 800e434:	1c53      	adds	r3, r2, #1
 800e436:	617b      	str	r3, [r7, #20]
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	1c59      	adds	r1, r3, #1
 800e43c:	6139      	str	r1, [r7, #16]
 800e43e:	7812      	ldrb	r2, [r2, #0]
 800e440:	701a      	strb	r2, [r3, #0]
		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	1e5a      	subs	r2, r3, #1
 800e446:	60fa      	str	r2, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1f2      	bne.n	800e432 <unwrap_chunk+0xaa>

		/* #pragma GCC diagnostic pop */
    }
}
 800e44c:	bf00      	nop
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20001430 	.word	0x20001430

0800e458 <unwrap_row>:

//**************************************************************************************************

void unwrap_row(unsigned int i)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
	unwrap_chunk(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 800e460:	4a08      	ldr	r2, [pc, #32]	; (800e484 <unwrap_row+0x2c>)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3316      	adds	r3, #22
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	4a06      	ldr	r2, [pc, #24]	; (800e488 <unwrap_row+0x30>)
 800e46e:	7e12      	ldrb	r2, [r2, #24]
 800e470:	4413      	add	r3, r2
 800e472:	3304      	adds	r3, #4
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff ff87 	bl	800e388 <unwrap_chunk>
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	200014f0 	.word	0x200014f0
 800e488:	20001430 	.word	0x20001430

0800e48c <wrap_chunk>:

//**************************************************************************************************

void wrap_chunk(uint8_t *p)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b087      	sub	sp, #28
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
	// NOTE: condition gets resolved at compile time
	if (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos != offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t))
 800e494:	4b18      	ldr	r3, [pc, #96]	; (800e4f8 <wrap_chunk+0x6c>)
 800e496:	7e9b      	ldrb	r3, [r3, #26]
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	4b17      	ldr	r3, [pc, #92]	; (800e4f8 <wrap_chunk+0x6c>)
 800e49c:	7f9b      	ldrb	r3, [r3, #30]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d022      	beq.n	800e4ec <wrap_chunk+0x60>
	{
//		#pragma GCC diagnostic push
//		#pragma GCC diagnostic ignored "-Warray-bounds"

		uint8_t			*d = p + chirp_config.matrix_coding_vector_8.len;
 800e4a6:	4b14      	ldr	r3, [pc, #80]	; (800e4f8 <wrap_chunk+0x6c>)
 800e4a8:	7e5b      	ldrb	r3, [r3, #25]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	617b      	str	r3, [r7, #20]
		uint8_t			*s = d + chirp_config.matrix_payload_8.len;
 800e4b2:	4b11      	ldr	r3, [pc, #68]	; (800e4f8 <wrap_chunk+0x6c>)
 800e4b4:	7edb      	ldrb	r3, [r3, #27]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	613b      	str	r3, [r7, #16]
		unsigned int	i;

		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e4be:	4b0e      	ldr	r3, [pc, #56]	; (800e4f8 <wrap_chunk+0x6c>)
 800e4c0:	7f9b      	ldrb	r3, [r3, #30]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4a0c      	ldr	r2, [pc, #48]	; (800e4f8 <wrap_chunk+0x6c>)
 800e4c8:	7e92      	ldrb	r2, [r2, #26]
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	3b04      	subs	r3, #4
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	e007      	b.n	800e4e2 <wrap_chunk+0x56>
			*d++ = *s++;
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	1c53      	adds	r3, r2, #1
 800e4d6:	613b      	str	r3, [r7, #16]
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	1c59      	adds	r1, r3, #1
 800e4dc:	6179      	str	r1, [r7, #20]
 800e4de:	7812      	ldrb	r2, [r2, #0]
 800e4e0:	701a      	strb	r2, [r3, #0]
		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	1e5a      	subs	r2, r3, #1
 800e4e6:	60fa      	str	r2, [r7, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1f2      	bne.n	800e4d2 <wrap_chunk+0x46>

//		#pragma GCC diagnostic pop
    }
}
 800e4ec:	bf00      	nop
 800e4ee:	371c      	adds	r7, #28
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	20001430 	.word	0x20001430

0800e4fc <NVIC_ClearPendingIRQ>:
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800e506:	79fb      	ldrb	r3, [r7, #7]
 800e508:	f003 021f 	and.w	r2, r3, #31
 800e50c:	4907      	ldr	r1, [pc, #28]	; (800e52c <NVIC_ClearPendingIRQ+0x30>)
 800e50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e512:	095b      	lsrs	r3, r3, #5
 800e514:	2001      	movs	r0, #1
 800e516:	fa00 f202 	lsl.w	r2, r0, r2
 800e51a:	3360      	adds	r3, #96	; 0x60
 800e51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	e000e100 	.word	0xe000e100

0800e530 <NVIC_SystemReset>:
{
 800e530:	b480      	push	{r7}
 800e532:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e534:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e538:	4b05      	ldr	r3, [pc, #20]	; (800e550 <NVIC_SystemReset+0x20>)
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e540:	4903      	ldr	r1, [pc, #12]	; (800e550 <NVIC_SystemReset+0x20>)
 800e542:	4b04      	ldr	r3, [pc, #16]	; (800e554 <NVIC_SystemReset+0x24>)
 800e544:	4313      	orrs	r3, r2
 800e546:	60cb      	str	r3, [r1, #12]
 800e548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800e54c:	bf00      	nop
    __NOP();
 800e54e:	e7fd      	b.n	800e54c <NVIC_SystemReset+0x1c>
 800e550:	e000ed00 	.word	0xe000ed00
 800e554:	05fa0004 	.word	0x05fa0004

0800e558 <mixer_transport_initiate_radio>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static void mixer_transport_initiate_radio()
{
 800e558:	b590      	push	{r4, r7, lr}
 800e55a:	b097      	sub	sp, #92	; 0x5c
 800e55c:	af02      	add	r7, sp, #8
	uint32_t symbol_bandwidth = ( chirp_config.lora_bw > 8) ? 500000 : ( ( chirp_config.lora_bw - 6) * 125000 );
 800e55e:	4b06      	ldr	r3, [pc, #24]	; (800e578 <mixer_transport_initiate_radio+0x20>)
 800e560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e564:	2b08      	cmp	r3, #8
 800e566:	d80b      	bhi.n	800e580 <mixer_transport_initiate_radio+0x28>
 800e568:	4b03      	ldr	r3, [pc, #12]	; (800e578 <mixer_transport_initiate_radio+0x20>)
 800e56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e56e:	3b06      	subs	r3, #6
 800e570:	4a02      	ldr	r2, [pc, #8]	; (800e57c <mixer_transport_initiate_radio+0x24>)
 800e572:	fb02 f303 	mul.w	r3, r2, r3
 800e576:	e004      	b.n	800e582 <mixer_transport_initiate_radio+0x2a>
 800e578:	20001430 	.word	0x20001430
 800e57c:	0001e848 	.word	0x0001e848
 800e580:	4bb5      	ldr	r3, [pc, #724]	; (800e858 <mixer_transport_initiate_radio+0x300>)
 800e582:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t symbol_rate = ( ( symbol_bandwidth ) / ( 1 << chirp_config.lora_sf ) );
 800e584:	4bb5      	ldr	r3, [pc, #724]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e58a:	461a      	mov	r2, r3
 800e58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58e:	40d3      	lsrs	r3, r2
 800e590:	64bb      	str	r3, [r7, #72]	; 0x48

	uint32_t symbol_time = (uint32_t)1e6 / symbol_rate;
 800e592:	4ab3      	ldr	r2, [pc, #716]	; (800e860 <mixer_transport_initiate_radio+0x308>)
 800e594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e596:	fbb2 f3f3 	udiv	r3, r2, r3
 800e59a:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t payload_air_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 0, chirp_config.lora_plen, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 800e59c:	4baf      	ldr	r3, [pc, #700]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e59e:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e5a2:	4bae      	ldr	r3, [pc, #696]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e5a4:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e5a8:	4bac      	ldr	r3, [pc, #688]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e5aa:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e5ae:	4bab      	ldr	r3, [pc, #684]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e5b0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e5b4:	4aa9      	ldr	r2, [pc, #676]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e5b6:	8a52      	ldrh	r2, [r2, #18]
 800e5b8:	b292      	uxth	r2, r2
 800e5ba:	b2d2      	uxtb	r2, r2
 800e5bc:	3202      	adds	r2, #2
 800e5be:	b2d2      	uxtb	r2, r2
 800e5c0:	9201      	str	r2, [sp, #4]
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	f7fe fce0 	bl	800cf8c <SX1276GetPacketTime>
 800e5cc:	6438      	str	r0, [r7, #64]	; 0x40
	uint32_t drift_tolerance = MIN(2500, MAX((chirp_config.mx_slot_length + 999) / 1000, 1));
 800e5ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800e5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5d4:	4ba1      	ldr	r3, [pc, #644]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e5dc:	4aa1      	ldr	r2, [pc, #644]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e5de:	fba2 2303 	umull	r2, r3, r2, r3
 800e5e2:	099b      	lsrs	r3, r3, #6
 800e5e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	bf38      	it	cc
 800e5f2:	4613      	movcc	r3, r2
 800e5f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e5f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	bf28      	it	cs
 800e5fe:	4613      	movcs	r3, r2
 800e600:	62fb      	str	r3, [r7, #44]	; 0x2c

	radio.header_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 1, chirp_config.lora_plen, 2);
 800e602:	4b96      	ldr	r3, [pc, #600]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e604:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e608:	4b94      	ldr	r3, [pc, #592]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e60a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e60e:	4b93      	ldr	r3, [pc, #588]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e610:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e614:	4b91      	ldr	r3, [pc, #580]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e616:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e61a:	2202      	movs	r2, #2
 800e61c:	9201      	str	r2, [sp, #4]
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	2301      	movs	r3, #1
 800e622:	4622      	mov	r2, r4
 800e624:	f7fe fcb2 	bl	800cf8c <SX1276GetPacketTime>
 800e628:	4602      	mov	r2, r0
 800e62a:	4b8f      	ldr	r3, [pc, #572]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e62c:	601a      	str	r2, [r3, #0]

	radio.after_header_time = payload_air_time - radio.header_time;
 800e62e:	4b8e      	ldr	r3, [pc, #568]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	4a8c      	ldr	r2, [pc, #560]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e638:	6053      	str	r3, [r2, #4]

	radio.max_propagation_delay = GPI_TICK_US_TO_HYBRID(2);
 800e63a:	4b8b      	ldr	r3, [pc, #556]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e63c:	2220      	movs	r2, #32
 800e63e:	609a      	str	r2, [r3, #8]

	radio.packet_air_time = GPI_TICK_US_TO_HYBRID2(payload_air_time);
 800e640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e642:	4a8a      	ldr	r2, [pc, #552]	; (800e86c <mixer_transport_initiate_radio+0x314>)
 800e644:	fba2 2303 	umull	r2, r3, r2, r3
 800e648:	0c9b      	lsrs	r3, r3, #18
 800e64a:	4a89      	ldr	r2, [pc, #548]	; (800e870 <mixer_transport_initiate_radio+0x318>)
 800e64c:	fb02 f103 	mul.w	r1, r2, r3
 800e650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e652:	4a84      	ldr	r2, [pc, #528]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e654:	fba2 2303 	umull	r2, r3, r2, r3
 800e658:	099a      	lsrs	r2, r3, #6
 800e65a:	4b82      	ldr	r3, [pc, #520]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e65c:	fba3 0302 	umull	r0, r3, r3, r2
 800e660:	099b      	lsrs	r3, r3, #6
 800e662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e666:	fb00 f303 	mul.w	r3, r0, r3
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e670:	fb02 f303 	mul.w	r3, r2, r3
 800e674:	4419      	add	r1, r3
 800e676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e678:	4b7a      	ldr	r3, [pc, #488]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e67a:	fba3 0302 	umull	r0, r3, r3, r2
 800e67e:	099b      	lsrs	r3, r3, #6
 800e680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e684:	fb00 f303 	mul.w	r3, r0, r3
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	011b      	lsls	r3, r3, #4
 800e68c:	440b      	add	r3, r1
 800e68e:	4a76      	ldr	r2, [pc, #472]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e690:	60d3      	str	r3, [r2, #12]
	radio.rx_to_grid_offset = (0 + GPI_TICK_US_TO_HYBRID(37));
 800e692:	4b75      	ldr	r3, [pc, #468]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e694:	f44f 7214 	mov.w	r2, #592	; 0x250
 800e698:	611a      	str	r2, [r3, #16]
	radio.tx_to_grid_offset = (0 + GPI_TICK_US_TO_HYBRID(130));
 800e69a:	4b73      	ldr	r3, [pc, #460]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e69c:	f44f 6202 	mov.w	r2, #2080	; 0x820
 800e6a0:	615a      	str	r2, [r3, #20]

	radio.rx_window_increment = 2 * drift_tolerance;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	005b      	lsls	r3, r3, #1
 800e6a6:	4a70      	ldr	r2, [pc, #448]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e6a8:	6193      	str	r3, [r2, #24]

	#if (!MX_LBT_ACCESS)
		radio.rx_window_max = MIN(0x7FFFFFFF, MIN(15 * radio.rx_window_increment, (chirp_config.mx_slot_length - radio.packet_air_time - radio.rx_to_grid_offset) / 2));
	#else
		radio.rx_window_max = MIN(0x7FFFFFFF, MIN(15 * radio.rx_window_increment, (GPI_TICK_US_TO_HYBRID(symbol_time)) / 2));
 800e6aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e6ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6b0:	4b6d      	ldr	r3, [pc, #436]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e6b2:	699a      	ldr	r2, [r3, #24]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	1a9b      	subs	r3, r3, r2
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6be:	011b      	lsls	r3, r3, #4
 800e6c0:	085b      	lsrs	r3, r3, #1
 800e6c2:	623b      	str	r3, [r7, #32]
 800e6c4:	6a3a      	ldr	r2, [r7, #32]
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	bf28      	it	cs
 800e6cc:	4613      	movcs	r3, r2
 800e6ce:	61fb      	str	r3, [r7, #28]
 800e6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	bf28      	it	cs
 800e6d8:	4613      	movcs	r3, r2
 800e6da:	4a63      	ldr	r2, [pc, #396]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e6dc:	61d3      	str	r3, [r2, #28]
	#endif

	radio.rx_window_min = MIN(radio.rx_window_max / 2, MAX(2 * radio.rx_window_increment, GPI_TICK_US_TO_HYBRID(1)));
 800e6de:	4b62      	ldr	r3, [pc, #392]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e6e0:	69db      	ldr	r3, [r3, #28]
 800e6e2:	085b      	lsrs	r3, r3, #1
 800e6e4:	61bb      	str	r3, [r7, #24]
 800e6e6:	4b60      	ldr	r3, [pc, #384]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	2310      	movs	r3, #16
 800e6f0:	613b      	str	r3, [r7, #16]
 800e6f2:	693a      	ldr	r2, [r7, #16]
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	bf38      	it	cc
 800e6fa:	4613      	movcc	r3, r2
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	68fa      	ldr	r2, [r7, #12]
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	4293      	cmp	r3, r2
 800e704:	bf28      	it	cs
 800e706:	4613      	movcs	r3, r2
 800e708:	4a57      	ldr	r2, [pc, #348]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e70a:	6213      	str	r3, [r2, #32]

	radio.grid_drift_filter_div = 4;
 800e70c:	4b56      	ldr	r3, [pc, #344]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e70e:	2204      	movs	r2, #4
 800e710:	625a      	str	r2, [r3, #36]	; 0x24
	radio.grid_tick_update_div = 2;
 800e712:	4b55      	ldr	r3, [pc, #340]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e714:	2202      	movs	r2, #2
 800e716:	629a      	str	r2, [r3, #40]	; 0x28
	radio.grid_drift_max = MIN(3 * drift_tolerance * radio.grid_tick_update_div * radio.grid_drift_filter_div, 0x7FFFFF);
 800e718:	4b53      	ldr	r3, [pc, #332]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71c:	461a      	mov	r2, r3
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	fb03 f302 	mul.w	r3, r3, r2
 800e724:	4a50      	ldr	r2, [pc, #320]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e726:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e728:	fb02 f203 	mul.w	r2, r2, r3
 800e72c:	4613      	mov	r3, r2
 800e72e:	005b      	lsls	r3, r3, #1
 800e730:	4413      	add	r3, r2
 800e732:	60bb      	str	r3, [r7, #8]
 800e734:	4b4f      	ldr	r3, [pc, #316]	; (800e874 <mixer_transport_initiate_radio+0x31c>)
 800e736:	607b      	str	r3, [r7, #4]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	4293      	cmp	r3, r2
 800e73e:	bf28      	it	cs
 800e740:	4613      	movcs	r3, r2
 800e742:	4a49      	ldr	r2, [pc, #292]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e744:	62d3      	str	r3, [r2, #44]	; 0x2c

	radio.tx_offset_filter_div = 2;
 800e746:	4b48      	ldr	r3, [pc, #288]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e748:	2202      	movs	r2, #2
 800e74a:	631a      	str	r2, [r3, #48]	; 0x30
	radio.tx_offset_max = (2 * radio.max_propagation_delay + GPI_TICK_US_TO_HYBRID(2));
 800e74c:	4b46      	ldr	r3, [pc, #280]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	3310      	adds	r3, #16
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	4a44      	ldr	r2, [pc, #272]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e756:	6353      	str	r3, [r2, #52]	; 0x34

	radio.isr_latency_buffer = 122;
 800e758:	4b43      	ldr	r3, [pc, #268]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e75a:	227a      	movs	r2, #122	; 0x7a
 800e75c:	639a      	str	r2, [r3, #56]	; 0x38
	radio.isr_latency_slow = 4 * HYBRID_SLOW_RATIO;
 800e75e:	4b42      	ldr	r3, [pc, #264]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e760:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 800e764:	63da      	str	r2, [r3, #60]	; 0x3c

	radio.grid_drift_offset = GPI_TICK_US_TO_HYBRID2(5 * symbol_time);
 800e766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e768:	4613      	mov	r3, r2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	4a3f      	ldr	r2, [pc, #252]	; (800e86c <mixer_transport_initiate_radio+0x314>)
 800e770:	fba2 2303 	umull	r2, r3, r2, r3
 800e774:	0c9b      	lsrs	r3, r3, #18
 800e776:	4a3e      	ldr	r2, [pc, #248]	; (800e870 <mixer_transport_initiate_radio+0x318>)
 800e778:	fb02 f103 	mul.w	r1, r2, r3
 800e77c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e77e:	4613      	mov	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	4a37      	ldr	r2, [pc, #220]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e786:	fba2 2303 	umull	r2, r3, r2, r3
 800e78a:	099a      	lsrs	r2, r3, #6
 800e78c:	4b35      	ldr	r3, [pc, #212]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e78e:	fba3 0302 	umull	r0, r3, r3, r2
 800e792:	099b      	lsrs	r3, r3, #6
 800e794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e798:	fb00 f303 	mul.w	r3, r0, r3
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e7a2:	fb02 f303 	mul.w	r3, r2, r3
 800e7a6:	4419      	add	r1, r3
 800e7a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	441a      	add	r2, r3
 800e7b0:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e7b2:	fba3 0302 	umull	r0, r3, r3, r2
 800e7b6:	099b      	lsrs	r3, r3, #6
 800e7b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e7bc:	fb00 f303 	mul.w	r3, r0, r3
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	440b      	add	r3, r1
 800e7c6:	4a28      	ldr	r2, [pc, #160]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e7c8:	6413      	str	r3, [r2, #64]	; 0x40

	radio.max_tb_interval = GPI_TICK_US_TO_HYBRID(2000);
 800e7ca:	4b27      	ldr	r3, [pc, #156]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e7cc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800e7d0:	645a      	str	r2, [r3, #68]	; 0x44

	#if MX_HEADER_CHECK
	uint32_t after_header_us = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 0, chirp_config.lora_plen, HASH_HEADER) - radio.header_time + 2 * symbol_time;
 800e7d2:	4b22      	ldr	r3, [pc, #136]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e7d4:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e7d8:	4b20      	ldr	r3, [pc, #128]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e7da:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e7de:	4b1f      	ldr	r3, [pc, #124]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e7e0:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e7e4:	4b1d      	ldr	r3, [pc, #116]	; (800e85c <mixer_transport_initiate_radio+0x304>)
 800e7e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e7ea:	2204      	movs	r2, #4
 800e7ec:	9201      	str	r2, [sp, #4]
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4622      	mov	r2, r4
 800e7f4:	f7fe fbca 	bl	800cf8c <SX1276GetPacketTime>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <mixer_transport_initiate_radio+0x310>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	1ad2      	subs	r2, r2, r3
 800e800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	4413      	add	r3, r2
 800e806:	603b      	str	r3, [r7, #0]

	radio.after_header_hybrid = GPI_TICK_US_TO_HYBRID2(after_header_us);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	4a18      	ldr	r2, [pc, #96]	; (800e86c <mixer_transport_initiate_radio+0x314>)
 800e80c:	fba2 2303 	umull	r2, r3, r2, r3
 800e810:	0c9b      	lsrs	r3, r3, #18
 800e812:	4a17      	ldr	r2, [pc, #92]	; (800e870 <mixer_transport_initiate_radio+0x318>)
 800e814:	fb02 f103 	mul.w	r1, r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	4a12      	ldr	r2, [pc, #72]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e81c:	fba2 2303 	umull	r2, r3, r2, r3
 800e820:	099a      	lsrs	r2, r3, #6
 800e822:	4b10      	ldr	r3, [pc, #64]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e824:	fba3 0302 	umull	r0, r3, r3, r2
 800e828:	099b      	lsrs	r3, r3, #6
 800e82a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e82e:	fb00 f303 	mul.w	r3, r0, r3
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e838:	fb02 f303 	mul.w	r3, r2, r3
 800e83c:	4419      	add	r1, r3
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <mixer_transport_initiate_radio+0x30c>)
 800e842:	fba3 0302 	umull	r0, r3, r3, r2
 800e846:	099b      	lsrs	r3, r3, #6
 800e848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e84c:	fb00 f303 	mul.w	r3, r0, r3
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	011b      	lsls	r3, r3, #4
 800e854:	440b      	add	r3, r1
 800e856:	e00f      	b.n	800e878 <mixer_transport_initiate_radio+0x320>
 800e858:	0007a120 	.word	0x0007a120
 800e85c:	20001430 	.word	0x20001430
 800e860:	000f4240 	.word	0x000f4240
 800e864:	10624dd3 	.word	0x10624dd3
 800e868:	200003c4 	.word	0x200003c4
 800e86c:	431bde83 	.word	0x431bde83
 800e870:	00f42400 	.word	0x00f42400
 800e874:	007fffff 	.word	0x007fffff
 800e878:	4a0f      	ldr	r2, [pc, #60]	; (800e8b8 <mixer_transport_initiate_radio+0x360>)
 800e87a:	6493      	str	r3, [r2, #72]	; 0x48
	#endif

	#if MX_LBT_ACCESS
		s.lbt_sensitivity_in_dbm = 3 * (chirp_config.lora_bw - 7) - 81;
 800e87c:	4b0f      	ldr	r3, [pc, #60]	; (800e8bc <mixer_transport_initiate_radio+0x364>)
 800e87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e882:	3b07      	subs	r3, #7
 800e884:	b29b      	uxth	r3, r3
 800e886:	461a      	mov	r2, r3
 800e888:	0052      	lsls	r2, r2, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	3b51      	subs	r3, #81	; 0x51
 800e890:	b29b      	uxth	r3, r3
 800e892:	b21a      	sxth	r2, r3
 800e894:	4b0a      	ldr	r3, [pc, #40]	; (800e8c0 <mixer_transport_initiate_radio+0x368>)
 800e896:	875a      	strh	r2, [r3, #58]	; 0x3a
		s.lbt_rx_on = 0;
 800e898:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <mixer_transport_initiate_radio+0x368>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		s.lbt_tx_on = CCA_NONE;
 800e8a0:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <mixer_transport_initiate_radio+0x368>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		s.lbt_channel_seq_no = 0;
 800e8a8:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <mixer_transport_initiate_radio+0x368>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	#endif
}
 800e8b0:	bf00      	nop
 800e8b2:	3754      	adds	r7, #84	; 0x54
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd90      	pop	{r4, r7, pc}
 800e8b8:	200003c4 	.word	0x200003c4
 800e8bc:	20001430 	.word	0x20001430
 800e8c0:	20000410 	.word	0x20000410

0800e8c4 <trigger_main_timer>:

//**************************************************************************************************

// trigger grid/timeout timer (immediately)
static inline void trigger_main_timer(int use_int_lock)
{
 800e8c4:	b490      	push	{r4, r7}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
	register int	ie;

	if (use_int_lock)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d007      	beq.n	800e8e2 <trigger_main_timer+0x1e>
	__ASM volatile
 800e8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d6:	b672      	cpsid	i
 800e8d8:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 800e8da:	f3bf 8f5f 	dmb	sy
	return ie;
 800e8de:	4623      	mov	r3, r4
		ie = gpi_int_lock();
 800e8e0:	461c      	mov	r4, r3

	MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + 10;
 800e8e2:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <trigger_main_timer+0x4c>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8e8:	4b09      	ldr	r3, [pc, #36]	; (800e910 <trigger_main_timer+0x4c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	320a      	adds	r2, #10
 800e8ee:	635a      	str	r2, [r3, #52]	; 0x34

	if (use_int_lock)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d007      	beq.n	800e906 <trigger_main_timer+0x42>
 800e8f6:	60fc      	str	r4, [r7, #12]
 800e8f8:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	f383 8810 	msr	PRIMASK, r3
		gpi_int_unlock(ie);

}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bc90      	pop	{r4, r7}
 800e90e:	4770      	bx	lr
 800e910:	200012c8 	.word	0x200012c8

0800e914 <unmask_main_timer>:
		gpi_int_unlock(ie);
}
//**************************************************************************************************

static inline void unmask_main_timer(int clear_pending)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
	if (clear_pending)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d002      	beq.n	800e928 <unmask_main_timer+0x14>
	{
		NVIC_ClearPendingIRQ(MAIN_TIMER_IRQ);
 800e922:	201c      	movs	r0, #28
 800e924:	f7ff fdea 	bl	800e4fc <NVIC_ClearPendingIRQ>
    }

    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800e928:	4b05      	ldr	r3, [pc, #20]	; (800e940 <unmask_main_timer+0x2c>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68da      	ldr	r2, [r3, #12]
 800e92e:	4b04      	ldr	r3, [pc, #16]	; (800e940 <unmask_main_timer+0x2c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f042 0202 	orr.w	r2, r2, #2
 800e936:	60da      	str	r2, [r3, #12]
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	200012c8 	.word	0x200012c8

0800e944 <mask_main_timer>:

static inline void mask_main_timer()
{
 800e944:	b480      	push	{r7}
 800e946:	af00      	add	r7, sp, #0
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800e948:	4b06      	ldr	r3, [pc, #24]	; (800e964 <mask_main_timer+0x20>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	68da      	ldr	r2, [r3, #12]
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <mask_main_timer+0x20>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f022 0202 	bic.w	r2, r2, #2
 800e956:	60da      	str	r2, [r3, #12]
}
 800e958:	bf00      	nop
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	200012c8 	.word	0x200012c8

0800e968 <unmask_slow_timer>:
//**************************************************************************************************

static inline void unmask_slow_timer(int clear_pending)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	if (clear_pending)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <unmask_slow_timer+0x14>
	{
		NVIC_ClearPendingIRQ(LP_TIMER_IRQ);
 800e976:	2041      	movs	r0, #65	; 0x41
 800e978:	f7ff fdc0 	bl	800e4fc <NVIC_ClearPendingIRQ>
    }

    __HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 800e97c:	4b05      	ldr	r3, [pc, #20]	; (800e994 <unmask_slow_timer+0x2c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	4b04      	ldr	r3, [pc, #16]	; (800e994 <unmask_slow_timer+0x2c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f042 0201 	orr.w	r2, r2, #1
 800e98a:	609a      	str	r2, [r3, #8]
}
 800e98c:	bf00      	nop
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	200011e4 	.word	0x200011e4

0800e998 <mask_slow_timer>:

static inline void mask_slow_timer()
{
 800e998:	b480      	push	{r7}
 800e99a:	af00      	add	r7, sp, #0
    __HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <mask_slow_timer+0x20>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	689a      	ldr	r2, [r3, #8]
 800e9a2:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <mask_slow_timer+0x20>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f022 0201 	bic.w	r2, r2, #1
 800e9aa:	609a      	str	r2, [r3, #8]
}
 800e9ac:	bf00      	nop
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	200011e4 	.word	0x200011e4

0800e9bc <write_tx_fifo>:
}

//**************************************************************************************************

static uint8_t write_tx_fifo(uint8_t *buffer, uint8_t *p2, uint8_t size)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	71fb      	strb	r3, [r7, #7]
    uint8_t 		i, tmp_data;
	uint8_t			or_data = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	75bb      	strb	r3, [r7, #22]

	if(p2 == NULL)
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d121      	bne.n	800ea18 <write_tx_fifo+0x5c>
	{
		or_data = 1;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75bb      	strb	r3, [r7, #22]

		//NSS = 0;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2140      	movs	r1, #64	; 0x40
 800e9dc:	4829      	ldr	r0, [pc, #164]	; (800ea84 <write_tx_fifo+0xc8>)
 800e9de:	f7fe ff0f 	bl	800d800 <HW_GPIO_Write>

		HW_SPI_InOut( REG_LR_FIFO | 0x80 );
 800e9e2:	2080      	movs	r0, #128	; 0x80
 800e9e4:	f7fe ff92 	bl	800d90c <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	75fb      	strb	r3, [r7, #23]
 800e9ec:	e00a      	b.n	800ea04 <write_tx_fifo+0x48>
		{
			HW_SPI_InOut( buffer[i] );
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fe ff87 	bl	800d90c <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	3301      	adds	r3, #1
 800ea02:	75fb      	strb	r3, [r7, #23]
 800ea04:	7dfa      	ldrb	r2, [r7, #23]
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d3f0      	bcc.n	800e9ee <write_tx_fifo+0x32>
		}

		//NSS = 1;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	2140      	movs	r1, #64	; 0x40
 800ea10:	481c      	ldr	r0, [pc, #112]	; (800ea84 <write_tx_fifo+0xc8>)
 800ea12:	f7fe fef5 	bl	800d800 <HW_GPIO_Write>
 800ea16:	e02f      	b.n	800ea78 <write_tx_fifo+0xbc>
	}
	else
	{
		//NSS = 0;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2140      	movs	r1, #64	; 0x40
 800ea1c:	4819      	ldr	r0, [pc, #100]	; (800ea84 <write_tx_fifo+0xc8>)
 800ea1e:	f7fe feef 	bl	800d800 <HW_GPIO_Write>

		HW_SPI_InOut( REG_LR_FIFO | 0x80 );
 800ea22:	2080      	movs	r0, #128	; 0x80
 800ea24:	f7fe ff72 	bl	800d90c <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800ea28:	2300      	movs	r3, #0
 800ea2a:	75fb      	strb	r3, [r7, #23]
 800ea2c:	e01b      	b.n	800ea66 <write_tx_fifo+0xaa>
		{
			tmp_data = ( buffer[i] ^ p2[i] );
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	4413      	add	r3, r2
 800ea34:	781a      	ldrb	r2, [r3, #0]
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	68b9      	ldr	r1, [r7, #8]
 800ea3a:	440b      	add	r3, r1
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	4053      	eors	r3, r2
 800ea40:	757b      	strb	r3, [r7, #21]
			HW_SPI_InOut( tmp_data );
 800ea42:	7d7b      	ldrb	r3, [r7, #21]
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe ff60 	bl	800d90c <HW_SPI_InOut>
			or_data = (tmp_data)? ++or_data: or_data;
 800ea4c:	7d7b      	ldrb	r3, [r7, #21]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d004      	beq.n	800ea5c <write_tx_fifo+0xa0>
 800ea52:	7dbb      	ldrb	r3, [r7, #22]
 800ea54:	3301      	adds	r3, #1
 800ea56:	75bb      	strb	r3, [r7, #22]
 800ea58:	7dbb      	ldrb	r3, [r7, #22]
 800ea5a:	e000      	b.n	800ea5e <write_tx_fifo+0xa2>
 800ea5c:	7dbb      	ldrb	r3, [r7, #22]
 800ea5e:	75bb      	strb	r3, [r7, #22]
		for( i = 0; i < size; i++ )
 800ea60:	7dfb      	ldrb	r3, [r7, #23]
 800ea62:	3301      	adds	r3, #1
 800ea64:	75fb      	strb	r3, [r7, #23]
 800ea66:	7dfa      	ldrb	r2, [r7, #23]
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d3df      	bcc.n	800ea2e <write_tx_fifo+0x72>
		}

		//NSS = 1;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800ea6e:	2201      	movs	r2, #1
 800ea70:	2140      	movs	r1, #64	; 0x40
 800ea72:	4804      	ldr	r0, [pc, #16]	; (800ea84 <write_tx_fifo+0xc8>)
 800ea74:	f7fe fec4 	bl	800d800 <HW_GPIO_Write>
	}

	return or_data;
 800ea78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	48000400 	.word	0x48000400

0800ea88 <start_grid_timer>:

//**************************************************************************************************

static void start_grid_timer()
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
	Gpi_Hybrid_Reference	r;
	Gpi_Hybrid_Tick			d;
	r = gpi_tick_hybrid_reference();
 800ea8e:	1d3b      	adds	r3, r7, #4
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fd f825 	bl	800bae0 <gpi_tick_hybrid_reference>

	d = s.next_trigger_tick - r.hybrid_tick;
 800ea96:	4b44      	ldr	r3, [pc, #272]	; (800eba8 <start_grid_timer+0x120>)
 800ea98:	689a      	ldr	r2, [r3, #8]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	60fb      	str	r3, [r7, #12]
	s.hybrid_trigger = s.next_trigger_tick;
 800eaa0:	4b41      	ldr	r3, [pc, #260]	; (800eba8 <start_grid_timer+0x120>)
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	4a40      	ldr	r2, [pc, #256]	; (800eba8 <start_grid_timer+0x120>)
 800eaa6:	6113      	str	r3, [r2, #16]

	s.slow_trigger = s.next_trigger_tick;
 800eaa8:	4b3f      	ldr	r3, [pc, #252]	; (800eba8 <start_grid_timer+0x120>)
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	4a3e      	ldr	r2, [pc, #248]	; (800eba8 <start_grid_timer+0x120>)
 800eaae:	60d3      	str	r3, [r2, #12]

	mask_main_timer();
 800eab0:	f7ff ff48 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800eab4:	4b3d      	ldr	r3, [pc, #244]	; (800ebac <start_grid_timer+0x124>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f06f 0202 	mvn.w	r2, #2
 800eabc:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 800eabe:	f7ff ff6b 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800eac2:	4b3b      	ldr	r3, [pc, #236]	; (800ebb0 <start_grid_timer+0x128>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2201      	movs	r2, #1
 800eac8:	605a      	str	r2, [r3, #4]
	// if we are late
	s.grid_timer_flag = 0;
 800eaca:	4b37      	ldr	r3, [pc, #220]	; (800eba8 <start_grid_timer+0x120>)
 800eacc:	2200      	movs	r2, #0
 800eace:	751a      	strb	r2, [r3, #20]
	// note: signed comparison is important
	if ((int32_t)(d) < (int32_t)(GPI_TICK_US_TO_HYBRID(1000000 / GPI_SLOW_CLOCK_RATE + 50) + GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer)))
 800ead0:	4b38      	ldr	r3, [pc, #224]	; (800ebb4 <start_grid_timer+0x12c>)
 800ead2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead4:	3350      	adds	r3, #80	; 0x50
 800ead6:	011b      	lsls	r3, r3, #4
 800ead8:	461a      	mov	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	429a      	cmp	r2, r3
 800eade:	dd0e      	ble.n	800eafe <start_grid_timer+0x76>
	{
		// trigger grid timer immediately
		// NOTE: capture register is updated implicitly
		trigger_main_timer(0);
 800eae0:	2000      	movs	r0, #0
 800eae2:	f7ff feef 	bl	800e8c4 <trigger_main_timer>
		unmask_main_timer(0);
 800eae6:	2000      	movs	r0, #0
 800eae8:	f7ff ff14 	bl	800e914 <unmask_main_timer>

		#if MX_VERBOSE_STATISTICS
			mx.stat_counter.num_grid_late++;
 800eaec:	4b32      	ldr	r3, [pc, #200]	; (800ebb8 <start_grid_timer+0x130>)
 800eaee:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	4b30      	ldr	r3, [pc, #192]	; (800ebb8 <start_grid_timer+0x130>)
 800eaf8:	f8a3 2890 	strh.w	r2, [r3, #2192]	; 0x890
 800eafc:	e044      	b.n	800eb88 <start_grid_timer+0x100>
		#endif
    }
	else if (d <= radio.max_tb_interval)
 800eafe:	4b2d      	ldr	r3, [pc, #180]	; (800ebb4 <start_grid_timer+0x12c>)
 800eb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d80d      	bhi.n	800eb24 <start_grid_timer+0x9c>
	{
		MAIN_TIMER_CC_REG = r.fast_capture + d * FAST_HYBRID_RATIO - GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	18d1      	adds	r1, r2, r3
 800eb0e:	4b29      	ldr	r3, [pc, #164]	; (800ebb4 <start_grid_timer+0x12c>)
 800eb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb12:	011a      	lsls	r2, r3, #4
 800eb14:	4b25      	ldr	r3, [pc, #148]	; (800ebac <start_grid_timer+0x124>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	1a8a      	subs	r2, r1, r2
 800eb1a:	635a      	str	r2, [r3, #52]	; 0x34
		unmask_main_timer(0);
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	f7ff fef9 	bl	800e914 <unmask_main_timer>
 800eb22:	e031      	b.n	800eb88 <start_grid_timer+0x100>
	}
	// else if trigger tick is in reach for fast timer
	else
	{
		ASSERT_CT(HYBRID_SLOW_RATIO <= 0x10000);
		if (d > 0xF000ul * HYBRID_SLOW_RATIO)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4a25      	ldr	r2, [pc, #148]	; (800ebbc <start_grid_timer+0x134>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d906      	bls.n	800eb3a <start_grid_timer+0xb2>
			d = r.hybrid_tick + 0xE000ul * HYBRID_SLOW_RATIO;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f103 73d5 	add.w	r3, r3, #27918336	; 0x1aa0000
 800eb32:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800eb36:	60fb      	str	r3, [r7, #12]
 800eb38:	e006      	b.n	800eb48 <start_grid_timer+0xc0>
		else d = s.next_trigger_tick - radio.max_tb_interval / 2;
 800eb3a:	4b1b      	ldr	r3, [pc, #108]	; (800eba8 <start_grid_timer+0x120>)
 800eb3c:	689a      	ldr	r2, [r3, #8]
 800eb3e:	4b1d      	ldr	r3, [pc, #116]	; (800ebb4 <start_grid_timer+0x12c>)
 800eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb42:	085b      	lsrs	r3, r3, #1
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	60fb      	str	r3, [r7, #12]
		__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800eb48:	4b19      	ldr	r3, [pc, #100]	; (800ebb0 <start_grid_timer+0x128>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	605a      	str	r2, [r3, #4]
		LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800eb50:	4b17      	ldr	r3, [pc, #92]	; (800ebb0 <start_grid_timer+0x128>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	69d9      	ldr	r1, [r3, #28]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	4a18      	ldr	r2, [pc, #96]	; (800ebc0 <start_grid_timer+0x138>)
 800eb5e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb62:	09da      	lsrs	r2, r3, #7
 800eb64:	4b12      	ldr	r3, [pc, #72]	; (800ebb0 <start_grid_timer+0x128>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	440a      	add	r2, r1
 800eb6a:	615a      	str	r2, [r3, #20]
		while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800eb6c:	bf00      	nop
 800eb6e:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <start_grid_timer+0x128>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f003 0308 	and.w	r3, r3, #8
 800eb78:	2b08      	cmp	r3, #8
 800eb7a:	d1f8      	bne.n	800eb6e <start_grid_timer+0xe6>

		s.grid_timer_flag = 1;
 800eb7c:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <start_grid_timer+0x120>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	751a      	strb	r2, [r3, #20]
		unmask_slow_timer(1);
 800eb82:	2001      	movs	r0, #1
 800eb84:	f7ff fef0 	bl	800e968 <unmask_slow_timer>
    }

	// else if trigger tick is far away
	s.slot_state = (RESYNC == s.slot_state) ? RESYNC : IDLE;
 800eb88:	4b07      	ldr	r3, [pc, #28]	; (800eba8 <start_grid_timer+0x120>)
 800eb8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <start_grid_timer+0x10e>
 800eb92:	2200      	movs	r2, #0
 800eb94:	e000      	b.n	800eb98 <start_grid_timer+0x110>
 800eb96:	220c      	movs	r2, #12
 800eb98:	4b03      	ldr	r3, [pc, #12]	; (800eba8 <start_grid_timer+0x120>)
 800eb9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800eb9e:	bf00      	nop
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000410 	.word	0x20000410
 800ebac:	200012c8 	.word	0x200012c8
 800ebb0:	200011e4 	.word	0x200011e4
 800ebb4:	200003c4 	.word	0x200003c4
 800ebb8:	200014f0 	.word	0x200014f0
 800ebbc:	01c98000 	.word	0x01c98000
 800ebc0:	4325c53f 	.word	0x4325c53f

0800ebc4 <mixer_dio0_isr>:
	unmask_main_timer(0);
}

//**************************************************************************************************
#define USE_MODEM_LORA
void LED_ISR(mixer_dio0_isr, LED_DIO0_ISR)
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4b14      	ldr	r3, [pc, #80]	; (800ec1c <mixer_dio0_isr+0x58>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d008      	beq.n	800ebe4 <mixer_dio0_isr+0x20>
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <mixer_dio0_isr+0x5c>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	4a12      	ldr	r2, [pc, #72]	; (800ec24 <mixer_dio0_isr+0x60>)
 800ebda:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800ebde:	4b0f      	ldr	r3, [pc, #60]	; (800ec1c <mixer_dio0_isr+0x58>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	601a      	str	r2, [r3, #0]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	603b      	str	r3, [r7, #0]
}

static ALWAYS_INLINE void gpi_led_toggle(int mask)
{
	if (mask)
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d005      	beq.n	800ebfa <mixer_dio0_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800ebee:	4b0e      	ldr	r3, [pc, #56]	; (800ec28 <mixer_dio0_isr+0x64>)
 800ebf0:	695a      	ldr	r2, [r3, #20]
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	490c      	ldr	r1, [pc, #48]	; (800ec28 <mixer_dio0_isr+0x64>)
 800ebf6:	4053      	eors	r3, r2
 800ebf8:	614b      	str	r3, [r1, #20]
 800ebfa:	f000 f817 	bl	800ec2c <mixer_dio0_isr_>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	607b      	str	r3, [r7, #4]
	if (mask)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d005      	beq.n	800ec14 <mixer_dio0_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800ec08:	4b07      	ldr	r3, [pc, #28]	; (800ec28 <mixer_dio0_isr+0x64>)
 800ec0a:	695a      	ldr	r2, [r3, #20]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4906      	ldr	r1, [pc, #24]	; (800ec28 <mixer_dio0_isr+0x64>)
 800ec10:	4053      	eors	r3, r2
 800ec12:	614b      	str	r3, [r1, #20]
 800ec14:	bf00      	nop
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	200003b4 	.word	0x200003b4
 800ec20:	200012c8 	.word	0x200012c8
 800ec24:	200014f0 	.word	0x200014f0
 800ec28:	48000800 	.word	0x48000800

0800ec2c <mixer_dio0_isr_>:
{
 800ec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec2e:	b0b1      	sub	sp, #196	; 0xc4
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	4b42      	ldr	r3, [pc, #264]	; (800ed3c <mixer_dio0_isr_+0x110>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800ec38:	4a41      	ldr	r2, [pc, #260]	; (800ed40 <mixer_dio0_isr_+0x114>)
 800ec3a:	6013      	str	r3, [r2, #0]
 800ec3c:	4b41      	ldr	r3, [pc, #260]	; (800ed44 <mixer_dio0_isr_+0x118>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	701a      	strb	r2, [r3, #0]
#endif
#if defined( USE_MODEM_LORA )
	Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800ec42:	f107 031c 	add.w	r3, r7, #28
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fc ff4a 	bl	800bae0 <gpi_tick_hybrid_reference>

	Gpi_Hybrid_Tick dio0_event_tick_slow = r.hybrid_tick;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    // if Rx
	// NOTE: s.slot_state = RX_RUNNING or RESYNC
	if (TX_RUNNING != s.slot_state)
 800ec52:	4b3d      	ldr	r3, [pc, #244]	; (800ed48 <mixer_dio0_isr_+0x11c>)
 800ec54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec58:	2b0c      	cmp	r3, #12
 800ec5a:	f000 84d5 	beq.w	800f608 <mixer_dio0_isr_+0x9dc>
	{
		// Clear Irq
		SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800ec5e:	2140      	movs	r1, #64	; 0x40
 800ec60:	2012      	movs	r0, #18
 800ec62:	f7fd fead 	bl	800c9c0 <SX1276Write>
 800ec66:	2300      	movs	r3, #0
 800ec68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (mask)
 800ec6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d003      	beq.n	800ec7c <mixer_dio0_isr_+0x50>
		LED_GPIO_Port->BRR = mask;
 800ec74:	4a35      	ldr	r2, [pc, #212]	; (800ed4c <mixer_dio0_isr_+0x120>)
 800ec76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec7a:	6293      	str	r3, [r2, #40]	; 0x28
		// situation at this point: Rx done, radio entering DISABLED state
		gpi_led_off(LED_RX);

		// stop timeout timer
		// -> not needed because this is done implicitely below
		mask_main_timer();
 800ec7c:	f7ff fe62 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800ec80:	4b2e      	ldr	r3, [pc, #184]	; (800ed3c <mixer_dio0_isr_+0x110>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f06f 0202 	mvn.w	r2, #2
 800ec88:	611a      	str	r2, [r3, #16]
		mask_slow_timer();
 800ec8a:	f7ff fe85 	bl	800e998 <mask_slow_timer>
		__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800ec8e:	4b30      	ldr	r3, [pc, #192]	; (800ed50 <mixer_dio0_isr_+0x124>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2201      	movs	r2, #1
 800ec94:	605a      	str	r2, [r3, #4]
 800ec96:	4b29      	ldr	r3, [pc, #164]	; (800ed3c <mixer_dio0_isr_+0x110>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

		#if MX_VERBOSE_STATISTICS
		{
			mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800ec9c:	4b2a      	ldr	r3, [pc, #168]	; (800ed48 <mixer_dio0_isr_+0x11c>)
 800ec9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca0:	1ad2      	subs	r2, r2, r3
 800eca2:	4b2c      	ldr	r3, [pc, #176]	; (800ed54 <mixer_dio0_isr_+0x128>)
 800eca4:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800eca8:	4413      	add	r3, r2
 800ecaa:	4a2a      	ldr	r2, [pc, #168]	; (800ed54 <mixer_dio0_isr_+0x128>)
 800ecac:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
			s.radio_start_timestamp = 0;
 800ecb0:	4b25      	ldr	r3, [pc, #148]	; (800ed48 <mixer_dio0_isr_+0x11c>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800ecb6:	4b23      	ldr	r3, [pc, #140]	; (800ed44 <mixer_dio0_isr_+0x118>)
 800ecb8:	7bdb      	ldrb	r3, [r3, #15]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00d      	beq.n	800ecda <mixer_dio0_isr_+0xae>
 800ecbe:	4b1f      	ldr	r3, [pc, #124]	; (800ed3c <mixer_dio0_isr_+0x110>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecc4:	4b1e      	ldr	r3, [pc, #120]	; (800ed40 <mixer_dio0_isr_+0x114>)
 800ecc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	4b23      	ldr	r3, [pc, #140]	; (800ed58 <mixer_dio0_isr_+0x12c>)
 800eccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecce:	4413      	add	r3, r2
 800ecd0:	4a21      	ldr	r2, [pc, #132]	; (800ed58 <mixer_dio0_isr_+0x12c>)
 800ecd2:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ecd4:	4b1b      	ldr	r3, [pc, #108]	; (800ed44 <mixer_dio0_isr_+0x118>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	73da      	strb	r2, [r3, #15]
		#endif

		// if LEN or CRC not ok: regard packet as invisible
		volatile uint8_t packet_len = (uint8_t)SX1276Read( REG_LR_RXNBBYTES );
 800ecda:	2013      	movs	r0, #19
 800ecdc:	f7fd fe82 	bl	800c9e4 <SX1276Read>
 800ece0:	4603      	mov	r3, r0
 800ece2:	76fb      	strb	r3, [r7, #27]
		volatile uint8_t irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800ece4:	2012      	movs	r0, #18
 800ece6:	f7fd fe7d 	bl	800c9e4 <SX1276Read>
 800ecea:	4603      	mov	r3, r0
 800ecec:	76bb      	strb	r3, [r7, #26]
		if( ( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR ) || ( packet_len != chirp_config.phy_payload_size + HASH_TAIL_CODE )
 800ecee:	7ebb      	ldrb	r3, [r7, #26]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	f003 0320 	and.w	r3, r3, #32
 800ecf6:	2b20      	cmp	r3, #32
 800ecf8:	d008      	beq.n	800ed0c <mixer_dio0_isr_+0xe0>
 800ecfa:	7efb      	ldrb	r3, [r7, #27]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	461a      	mov	r2, r3
 800ed00:	4b16      	ldr	r3, [pc, #88]	; (800ed5c <mixer_dio0_isr_+0x130>)
 800ed02:	8a5b      	ldrh	r3, [r3, #18]
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	3302      	adds	r3, #2
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d029      	beq.n	800ed60 <mixer_dio0_isr_+0x134>
		)
		{
			SX1276Write(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR);
 800ed0c:	2120      	movs	r1, #32
 800ed0e:	2012      	movs	r0, #18
 800ed10:	f7fd fe56 	bl	800c9c0 <SX1276Write>

			GPI_TRACE_MSG_FAST(TRACE_INFO, "broken packet received, LEN: %d, CRC:error", (int)(packet_len));
 800ed14:	bf00      	nop

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_broken++;
 800ed16:	4b0f      	ldr	r3, [pc, #60]	; (800ed54 <mixer_dio0_isr_+0x128>)
 800ed18:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	; 0x880
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	4b0c      	ldr	r3, [pc, #48]	; (800ed54 <mixer_dio0_isr_+0x128>)
 800ed22:	f8a3 2880 	strh.w	r2, [r3, #2176]	; 0x880
			#endif
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800ed26:	2000      	movs	r0, #0
 800ed28:	f7fd fdd2 	bl	800c8d0 <SX1276SetOpMode>

			// trigger timeout timer (immediately) -> do error handling there
			// NOTE: don't need to unmask timer here because it already is
			trigger_main_timer(0);
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	f7ff fdc9 	bl	800e8c4 <trigger_main_timer>
			unmask_main_timer(1);
 800ed32:	2001      	movs	r0, #1
 800ed34:	f7ff fdee 	bl	800e914 <unmask_main_timer>
 800ed38:	f000 bcac 	b.w	800f694 <mixer_dio0_isr_+0xa68>
 800ed3c:	200012c8 	.word	0x200012c8
 800ed40:	20001308 	.word	0x20001308
 800ed44:	2000112c 	.word	0x2000112c
 800ed48:	20000410 	.word	0x20000410
 800ed4c:	48000800 	.word	0x48000800
 800ed50:	200011e4 	.word	0x200011e4
 800ed54:	200014f0 	.word	0x200014f0
 800ed58:	20000f10 	.word	0x20000f10
 800ed5c:	20001430 	.word	0x20001430
        }
		// if packet ok: process packet
		else
		{
 800ed60:	466b      	mov	r3, sp
 800ed62:	461e      	mov	r6, r3
			if (chirp_config.primitive == FLOODING)
 800ed64:	4bc5      	ldr	r3, [pc, #788]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ed66:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d102      	bne.n	800ed74 <mixer_dio0_isr_+0x148>
			{
				PRINTF_CHIRP("ok\n");
 800ed6e:	48c4      	ldr	r0, [pc, #784]	; (800f080 <mixer_dio0_isr_+0x454>)
 800ed70:	f013 faa0 	bl	80222b4 <puts>
			}

			uint8_t RxPacketBuffer[packet_len];
 800ed74:	7efb      	ldrb	r3, [r7, #27]
 800ed76:	b2d8      	uxtb	r0, r3
 800ed78:	4603      	mov	r3, r0
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ed80:	b2c1      	uxtb	r1, r0
 800ed82:	f04f 0200 	mov.w	r2, #0
 800ed86:	f04f 0300 	mov.w	r3, #0
 800ed8a:	f04f 0400 	mov.w	r4, #0
 800ed8e:	00d4      	lsls	r4, r2, #3
 800ed90:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ed94:	00cb      	lsls	r3, r1, #3
 800ed96:	b2c1      	uxtb	r1, r0
 800ed98:	f04f 0200 	mov.w	r2, #0
 800ed9c:	f04f 0300 	mov.w	r3, #0
 800eda0:	f04f 0400 	mov.w	r4, #0
 800eda4:	00d4      	lsls	r4, r2, #3
 800eda6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800edaa:	00cb      	lsls	r3, r1, #3
 800edac:	4603      	mov	r3, r0
 800edae:	3307      	adds	r3, #7
 800edb0:	08db      	lsrs	r3, r3, #3
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	ebad 0d03 	sub.w	sp, sp, r3
 800edb8:	466b      	mov	r3, sp
 800edba:	3300      	adds	r3, #0
 800edbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			memset( RxPacketBuffer, 0, ( size_t )packet_len );
 800edc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800edc4:	7efa      	ldrb	r2, [r7, #27]
 800edc6:	b2d2      	uxtb	r2, r2
 800edc8:	2100      	movs	r1, #0
 800edca:	4618      	mov	r0, r3
 800edcc:	f012 fbdd 	bl	802158a <memset>
			// read rx packet from start address (in data buffer) of last packet received
			SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800edd0:	2010      	movs	r0, #16
 800edd2:	f7fd fe07 	bl	800c9e4 <SX1276Read>
 800edd6:	4603      	mov	r3, r0
 800edd8:	4619      	mov	r1, r3
 800edda:	200d      	movs	r0, #13
 800eddc:	f7fd fdf0 	bl	800c9c0 <SX1276Write>
			SX1276ReadFifo( RxPacketBuffer, packet_len );
 800ede0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ede4:	7efa      	ldrb	r2, [r7, #27]
 800ede6:	b2d2      	uxtb	r2, r2
 800ede8:	4611      	mov	r1, r2
 800edea:	4618      	mov	r0, r3
 800edec:	f7fd fe82 	bl	800caf4 <SX1276ReadFifo>
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800edf0:	2000      	movs	r0, #0
 800edf2:	f7fd fd6d 	bl	800c8d0 <SX1276SetOpMode>

			uint16_t code_tail_hash_rx = Chirp_RSHash((uint8_t *)RxPacketBuffer, chirp_config.phy_payload_size);
 800edf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800edfa:	4ba0      	ldr	r3, [pc, #640]	; (800f07c <mixer_dio0_isr_+0x450>)
 800edfc:	8a5b      	ldrh	r3, [r3, #18]
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	4619      	mov	r1, r3
 800ee02:	4610      	mov	r0, r2
 800ee04:	f00f fff6 	bl	801edf4 <Chirp_RSHash>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			uint16_t hash_code_rx = RxPacketBuffer[packet_len - 2] << 8 | RxPacketBuffer[packet_len - 1];
 800ee0e:	7efb      	ldrb	r3, [r7, #27]
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	3b02      	subs	r3, #2
 800ee14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ee18:	5cd3      	ldrb	r3, [r2, r3]
 800ee1a:	021b      	lsls	r3, r3, #8
 800ee1c:	b21a      	sxth	r2, r3
 800ee1e:	7efb      	ldrb	r3, [r7, #27]
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	3b01      	subs	r3, #1
 800ee24:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800ee28:	5ccb      	ldrb	r3, [r1, r3]
 800ee2a:	b21b      	sxth	r3, r3
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	b21b      	sxth	r3, r3
 800ee30:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if ((hash_code_rx == code_tail_hash_rx) && (hash_code_rx))
 800ee34:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800ee38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	f040 83ce 	bne.w	800f5de <mixer_dio0_isr_+0x9b2>
 800ee42:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f000 83c9 	beq.w	800f5de <mixer_dio0_isr_+0x9b2>
			{
				// allocate rx queue destination slot
				Packet	*packet;

				gpi_memcpy_dma_aligned(&(mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)]->phy_payload_begin), RxPacketBuffer, chirp_config.phy_payload_size);
 800ee4c:	4b8d      	ldr	r3, [pc, #564]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee50:	f003 0303 	and.w	r3, r3, #3
 800ee54:	4a8b      	ldr	r2, [pc, #556]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee62:	4a86      	ldr	r2, [pc, #536]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ee64:	8a52      	ldrh	r2, [r2, #18]
 800ee66:	b292      	uxth	r2, r2
 800ee68:	66f9      	str	r1, [r7, #108]	; 0x6c
 800ee6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee6c:	667a      	str	r2, [r7, #100]	; 0x64
	__builtin_memcpy(dest, src, size);
}

static ALWAYS_INLINE void gpi_memcpy_dma_aligned(void *dest, const void *src, size_t size)
{
	__builtin_memcpy(dest, src, size);
 800ee6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee72:	4610      	mov	r0, r2
 800ee74:	4619      	mov	r1, r3
 800ee76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee78:	461a      	mov	r2, r3
 800ee7a:	f012 fb7b 	bl	8021574 <memcpy>
				packet = mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)];
 800ee7e:	4b81      	ldr	r3, [pc, #516]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee82:	f003 0303 	and.w	r3, r3, #3
 800ee86:	4a7f      	ldr	r2, [pc, #508]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					#if INFO_VECTOR_QUEUE
					gpi_memcpy_dma_inline((uint8_t *)&(mx.code_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.code_queue)]->vector[0]), (uint8_t *)(RxPacketBuffer + offsetof(Packet, packet_chunk) + chirp_config.coding_vector.pos), chirp_config.coding_vector.len);
 800ee92:	4b7c      	ldr	r3, [pc, #496]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee96:	f003 0303 	and.w	r3, r3, #3
 800ee9a:	4a7a      	ldr	r2, [pc, #488]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ee9c:	3304      	adds	r3, #4
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	4619      	mov	r1, r3
 800eea6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eeaa:	4b74      	ldr	r3, [pc, #464]	; (800f07c <mixer_dio0_isr_+0x450>)
 800eeac:	799b      	ldrb	r3, [r3, #6]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4a72      	ldr	r2, [pc, #456]	; (800f07c <mixer_dio0_isr_+0x450>)
 800eeb4:	79d2      	ldrb	r2, [r2, #7]
 800eeb6:	67b9      	str	r1, [r7, #120]	; 0x78
 800eeb8:	677b      	str	r3, [r7, #116]	; 0x74
 800eeba:	673a      	str	r2, [r7, #112]	; 0x70
	__builtin_memcpy(dest, src, size);
}

static ALWAYS_INLINE void gpi_memcpy_dma_inline(void *dest, const void *src, size_t size)
{
	__builtin_memcpy(dest, src, size);
 800eebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eec0:	4610      	mov	r0, r2
 800eec2:	4619      	mov	r1, r3
 800eec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec6:	461a      	mov	r2, r3
 800eec8:	f012 fb54 	bl	8021574 <memcpy>
					gpi_memcpy_dma_inline((uint8_t *)&(mx.info_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.info_queue)]->vector[0]), (uint8_t *)(RxPacketBuffer + offsetof(Packet, packet_chunk) + chirp_config.info_vector.pos), chirp_config.info_vector.len);
 800eecc:	4b6d      	ldr	r3, [pc, #436]	; (800f084 <mixer_dio0_isr_+0x458>)
 800eece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed0:	f003 0303 	and.w	r3, r3, #3
 800eed4:	4a6b      	ldr	r2, [pc, #428]	; (800f084 <mixer_dio0_isr_+0x458>)
 800eed6:	3308      	adds	r3, #8
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	4619      	mov	r1, r3
 800eee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eee4:	4b65      	ldr	r3, [pc, #404]	; (800f07c <mixer_dio0_isr_+0x450>)
 800eee6:	7a9b      	ldrb	r3, [r3, #10]
 800eee8:	3308      	adds	r3, #8
 800eeea:	4413      	add	r3, r2
 800eeec:	4a63      	ldr	r2, [pc, #396]	; (800f07c <mixer_dio0_isr_+0x450>)
 800eeee:	7ad2      	ldrb	r2, [r2, #11]
 800eef0:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800eef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eef8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800eefa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800eefe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef02:	4610      	mov	r0, r2
 800ef04:	4619      	mov	r1, r3
 800ef06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef08:	461a      	mov	r2, r3
 800ef0a:	f012 fb33 	bl	8021574 <memcpy>

				if (chirp_config.primitive == FLOODING)
 800ef0e:	4b5b      	ldr	r3, [pc, #364]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ef10:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d121      	bne.n	800ef5c <mixer_dio0_isr_+0x330>
				{
					chirp_config.glossy_task = packet->flags.all;
 800ef18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef1c:	79da      	ldrb	r2, [r3, #7]
 800ef1e:	4b57      	ldr	r3, [pc, #348]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ef20:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
					gpi_memcpy_dma_inline((uint8_t *)(mx.tx_packet->packet_chunk), (uint8_t *)&(mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)]->phy_payload_begin), chirp_config.phy_payload_size - LORADISC_HEADER_LEN);
 800ef24:	4b57      	ldr	r3, [pc, #348]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	f103 0208 	add.w	r2, r3, #8
 800ef2c:	4b55      	ldr	r3, [pc, #340]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ef2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef30:	f003 0303 	and.w	r3, r3, #3
 800ef34:	4953      	ldr	r1, [pc, #332]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	440b      	add	r3, r1
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4b4f      	ldr	r3, [pc, #316]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ef40:	8a5b      	ldrh	r3, [r3, #18]
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	3b08      	subs	r3, #8
 800ef46:	663a      	str	r2, [r7, #96]	; 0x60
 800ef48:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ef4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef50:	4610      	mov	r0, r2
 800ef52:	4619      	mov	r1, r3
 800ef54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef56:	461a      	mov	r2, r3
 800ef58:	f012 fb0c 	bl	8021574 <memcpy>
					gpi_memcpy_dma_inline(mx.code_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.code_queue)].vector, (uint8_t *)(RxPacketBuffer + offsetof(Packet, coding_vector)), sizeof_member(Packet, coding_vector));
					gpi_memcpy_dma_inline(mx.info_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.info_queue)].vector, (uint8_t *)(RxPacketBuffer + offsetof(Packet, info_vector)), sizeof_member(Packet, info_vector));
					#endif
				#endif

				PROFILE_ISR("radio ISR process Rx packet begin");
 800ef5c:	bf00      	nop

				int	strobe_resync = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

				GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "CRC ok");
 800ef64:	bf00      	nop

				#if MX_VERBOSE_STATISTICS
					mx.stat_counter.num_rx_success++;
 800ef66:	4b47      	ldr	r3, [pc, #284]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ef68:	f8b3 387e 	ldrh.w	r3, [r3, #2174]	; 0x87e
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	4b44      	ldr	r3, [pc, #272]	; (800f084 <mixer_dio0_isr_+0x458>)
 800ef72:	f8a3 287e 	strh.w	r2, [r3, #2174]	; 0x87e
				// update slot timing control values
				{
					// Gpi_Hybrid_Tick	event_tick;
					// Gpi_Hybrid_Tick event_tick = dio0_event_tick_slow;
					/* see "Longshot", ipsn 2019 */
					uint32_t rx_processing_time[6] = {682, 1372, 2850, 5970, 12800, 27000};
 800ef76:	4b44      	ldr	r3, [pc, #272]	; (800f088 <mixer_dio0_isr_+0x45c>)
 800ef78:	463c      	mov	r4, r7
 800ef7a:	461d      	mov	r5, r3
 800ef7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef80:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef84:	e884 0003 	stmia.w	r4, {r0, r1}
					Gpi_Hybrid_Tick event_tick = dio0_event_tick_slow - GPI_TICK_US_TO_HYBRID2(rx_processing_time[chirp_config.lora_sf - 7]);
 800ef88:	4b3c      	ldr	r3, [pc, #240]	; (800f07c <mixer_dio0_isr_+0x450>)
 800ef8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef8e:	3b07      	subs	r3, #7
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800ef96:	4413      	add	r3, r2
 800ef98:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800ef9c:	4a3b      	ldr	r2, [pc, #236]	; (800f08c <mixer_dio0_isr_+0x460>)
 800ef9e:	fba2 2303 	umull	r2, r3, r2, r3
 800efa2:	0c9b      	lsrs	r3, r3, #18
 800efa4:	4a3a      	ldr	r2, [pc, #232]	; (800f090 <mixer_dio0_isr_+0x464>)
 800efa6:	fb02 f103 	mul.w	r1, r2, r3
 800efaa:	4b34      	ldr	r3, [pc, #208]	; (800f07c <mixer_dio0_isr_+0x450>)
 800efac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efb0:	3b07      	subs	r3, #7
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800efb8:	4413      	add	r3, r2
 800efba:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800efbe:	4a35      	ldr	r2, [pc, #212]	; (800f094 <mixer_dio0_isr_+0x468>)
 800efc0:	fba2 2303 	umull	r2, r3, r2, r3
 800efc4:	099a      	lsrs	r2, r3, #6
 800efc6:	4b33      	ldr	r3, [pc, #204]	; (800f094 <mixer_dio0_isr_+0x468>)
 800efc8:	fba3 0302 	umull	r0, r3, r3, r2
 800efcc:	099b      	lsrs	r3, r3, #6
 800efce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800efd2:	fb00 f303 	mul.w	r3, r0, r3
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800efdc:	fb02 f303 	mul.w	r3, r2, r3
 800efe0:	4419      	add	r1, r3
 800efe2:	4b26      	ldr	r3, [pc, #152]	; (800f07c <mixer_dio0_isr_+0x450>)
 800efe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efe8:	3b07      	subs	r3, #7
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800eff0:	4413      	add	r3, r2
 800eff2:	f853 2cc0 	ldr.w	r2, [r3, #-192]
 800eff6:	4b27      	ldr	r3, [pc, #156]	; (800f094 <mixer_dio0_isr_+0x468>)
 800eff8:	fba3 0302 	umull	r0, r3, r3, r2
 800effc:	099b      	lsrs	r3, r3, #6
 800effe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f002:	fb00 f303 	mul.w	r3, r0, r3
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	011b      	lsls	r3, r3, #4
 800f00a:	440b      	add	r3, r1
 800f00c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

					ASSERT_CT(sizeof(Gpi_Slow_Tick_Native) >= sizeof(uint16_t));

					// if RESYNC requested: realign slot grid based on capture value
					if (RESYNC == s.slot_state)
 800f016:	4b20      	ldr	r3, [pc, #128]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d168      	bne.n	800f0f2 <mixer_dio0_isr_+0x4c6>
					{
						#if MX_LBT_ACCESS
							event_tick -= GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 800f020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f024:	f5a3 331c 	sub.w	r3, r3, #159744	; 0x27000
 800f028:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f02c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#endif

						s.next_grid_tick = event_tick - radio.packet_air_time + chirp_config.mx_slot_length;
 800f030:	4b1a      	ldr	r3, [pc, #104]	; (800f09c <mixer_dio0_isr_+0x470>)
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f038:	1ad2      	subs	r2, r2, r3
 800f03a:	4b10      	ldr	r3, [pc, #64]	; (800f07c <mixer_dio0_isr_+0x450>)
 800f03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f03e:	4413      	add	r3, r2
 800f040:	4a15      	ldr	r2, [pc, #84]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f042:	6053      	str	r3, [r2, #4]

						s.grid_drift = 0;
 800f044:	4b14      	ldr	r3, [pc, #80]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f046:	2200      	movs	r2, #0
 800f048:	619a      	str	r2, [r3, #24]
						s.grid_drift_cumulative = 0;
 800f04a:	4b13      	ldr	r3, [pc, #76]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	61da      	str	r2, [r3, #28]
						s.tx_trigger_offset = radio.tx_to_grid_offset;
 800f050:	4b12      	ldr	r3, [pc, #72]	; (800f09c <mixer_dio0_isr_+0x470>)
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	4a10      	ldr	r2, [pc, #64]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f056:	6253      	str	r3, [r2, #36]	; 0x24

						// don't set Rx window to tight after resync because we don't have
						// any information on grid drift yet
						// TODO:
						s.rx_trigger_offset = radio.rx_to_grid_offset + radio.rx_window_max / 2;
 800f058:	4b10      	ldr	r3, [pc, #64]	; (800f09c <mixer_dio0_isr_+0x470>)
 800f05a:	691a      	ldr	r2, [r3, #16]
 800f05c:	4b0f      	ldr	r3, [pc, #60]	; (800f09c <mixer_dio0_isr_+0x470>)
 800f05e:	69db      	ldr	r3, [r3, #28]
 800f060:	085b      	lsrs	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	4a0c      	ldr	r2, [pc, #48]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f066:	6213      	str	r3, [r2, #32]

						s.slot_state = RX_RUNNING;
 800f068:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <mixer_dio0_isr_+0x46c>)
 800f06a:	2210      	movs	r2, #16
 800f06c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

						mx.slot_number = packet->slot_number;
 800f070:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f074:	889b      	ldrh	r3, [r3, #4]
 800f076:	b29a      	uxth	r2, r3
 800f078:	e012      	b.n	800f0a0 <mixer_dio0_isr_+0x474>
 800f07a:	bf00      	nop
 800f07c:	20001430 	.word	0x20001430
 800f080:	080253e8 	.word	0x080253e8
 800f084:	200014f0 	.word	0x200014f0
 800f088:	080253ec 	.word	0x080253ec
 800f08c:	431bde83 	.word	0x431bde83
 800f090:	00f42400 	.word	0x00f42400
 800f094:	10624dd3 	.word	0x10624dd3
 800f098:	20000410 	.word	0x20000410
 800f09c:	200003c4 	.word	0x200003c4
 800f0a0:	4bb8      	ldr	r3, [pc, #736]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f0a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						GPI_TRACE_MSG_FAST(TRACE_INFO, "(re)synchronized to slot %u", mx.slot_number);
 800f0a6:	bf00      	nop
						if (chirp_config.primitive == FLOODING)
 800f0a8:	4bb7      	ldr	r3, [pc, #732]	; (800f388 <mixer_dio0_isr_+0x75c>)
 800f0aa:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	f040 818a 	bne.w	800f3c8 <mixer_dio0_isr_+0x79c>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	gpi_atomic_set(&(mx.events), BV(event));
 800f0ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0be:	2201      	movs	r2, #1
 800f0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c4:	4aaf      	ldr	r2, [pc, #700]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f0c6:	653a      	str	r2, [r7, #80]	; 0x50
 800f0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("dmb 0xF":::"memory");
 800f0d2:	f3bf 8f5f 	dmb	sy
		register int	tmp1, tmp2;

		REORDER_BARRIER();
		__DMB();

		__asm__
 800f0d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0dc:	e851 0f00 	ldrex	r0, [r1]
 800f0e0:	ea40 0003 	orr.w	r0, r0, r3
 800f0e4:	e841 0300 	strex	r3, r0, [r1]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1f7      	bne.n	800f0dc <mixer_dio0_isr_+0x4b0>
 800f0ec:	f3bf 8f5f 	dmb	sy

/// @brief make function always inline (incl. debug builds with optimization disabled)
#define ALWAYS_INLINE					inline __attribute__((always_inline))

/// @brief general re-order barrier
static ALWAYS_INLINE void REORDER_BARRIER()	{__asm volatile ("" : : : "memory"); }
 800f0f0:	e16a      	b.n	800f3c8 <mixer_dio0_isr_+0x79c>
					}
					// else use phase-lock control loop to track grid
					else
					{
						#if MX_LBT_ACCESS
							event_tick -= GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US + s.lbt_channel_seq_no * chirp_config.lbt_detect_duration_us);
 800f0f2:	4ba6      	ldr	r3, [pc, #664]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f0f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4ba3      	ldr	r3, [pc, #652]	; (800f388 <mixer_dio0_isr_+0x75c>)
 800f0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0fe:	fb03 f302 	mul.w	r3, r3, r2
 800f102:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f106:	3310      	adds	r3, #16
 800f108:	4aa1      	ldr	r2, [pc, #644]	; (800f390 <mixer_dio0_isr_+0x764>)
 800f10a:	fba2 2303 	umull	r2, r3, r2, r3
 800f10e:	0c9b      	lsrs	r3, r3, #18
 800f110:	4aa0      	ldr	r2, [pc, #640]	; (800f394 <mixer_dio0_isr_+0x768>)
 800f112:	fb02 f103 	mul.w	r1, r2, r3
 800f116:	4b9d      	ldr	r3, [pc, #628]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f11c:	461a      	mov	r2, r3
 800f11e:	4b9a      	ldr	r3, [pc, #616]	; (800f388 <mixer_dio0_isr_+0x75c>)
 800f120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f122:	fb03 f302 	mul.w	r3, r3, r2
 800f126:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f12a:	3310      	adds	r3, #16
 800f12c:	4a9a      	ldr	r2, [pc, #616]	; (800f398 <mixer_dio0_isr_+0x76c>)
 800f12e:	fba2 2303 	umull	r2, r3, r2, r3
 800f132:	099a      	lsrs	r2, r3, #6
 800f134:	4b98      	ldr	r3, [pc, #608]	; (800f398 <mixer_dio0_isr_+0x76c>)
 800f136:	fba3 0302 	umull	r0, r3, r3, r2
 800f13a:	099b      	lsrs	r3, r3, #6
 800f13c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f140:	fb00 f303 	mul.w	r3, r0, r3
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800f14a:	fb02 f303 	mul.w	r3, r2, r3
 800f14e:	4419      	add	r1, r3
 800f150:	4b8e      	ldr	r3, [pc, #568]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f156:	461a      	mov	r2, r3
 800f158:	4b8b      	ldr	r3, [pc, #556]	; (800f388 <mixer_dio0_isr_+0x75c>)
 800f15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f15c:	fb03 f302 	mul.w	r3, r3, r2
 800f160:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f164:	3310      	adds	r3, #16
 800f166:	4a8c      	ldr	r2, [pc, #560]	; (800f398 <mixer_dio0_isr_+0x76c>)
 800f168:	fba2 0203 	umull	r0, r2, r2, r3
 800f16c:	0992      	lsrs	r2, r2, #6
 800f16e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f172:	fb00 f202 	mul.w	r2, r0, r2
 800f176:	1a9a      	subs	r2, r3, r2
 800f178:	0113      	lsls	r3, r2, #4
 800f17a:	440b      	add	r3, r1
 800f17c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
							s.lbt_channel_seq_no = 0;
 800f186:	4b81      	ldr	r3, [pc, #516]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						#endif

						int32_t	gd;

						if (mx.slot_number != packet->slot_number)
 800f18e:	4b7d      	ldr	r3, [pc, #500]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f190:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800f194:	b29a      	uxth	r2, r3
 800f196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f19a:	889b      	ldrh	r3, [r3, #4]
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d00f      	beq.n	800f1c2 <mixer_dio0_isr_+0x596>
						{
							#if MX_VERBOSE_STATISTICS
								mx.stat_counter.num_rx_slot_mismatch++;
 800f1a2:	4b78      	ldr	r3, [pc, #480]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f1a4:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	4b75      	ldr	r3, [pc, #468]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f1ae:	f8a3 2892 	strh.w	r2, [r3, #2194]	; 0x892
							#endif
							GPI_TRACE_MSG_FAST(TRACE_WARNING, "!!! slot_number mismatch: expected: %u, received: %u !!!",
 800f1b2:	bf00      	nop
								mx.slot_number, packet->slot_number);

							mx.slot_number = packet->slot_number;
 800f1b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f1b8:	889b      	ldrh	r3, [r3, #4]
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	4b71      	ldr	r3, [pc, #452]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f1be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						// update grid drift and next grid tick
						// NOTE: s.grid_drift uses fix point format with ld(GRID_DRIFT_FILTER_DIV) fractional digits

						// compute SFD event deviation
						// NOTE: result is bounded by Rx window size
						event_tick -= s.event_tick_nominal;
 800f1c2:	4b72      	ldr	r3, [pc, #456]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

						// keep Rx window in this range (with some margin)
						// TODO:
						s.rx_trigger_offset = radio.rx_window_min;
 800f1d0:	4b72      	ldr	r3, [pc, #456]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f1d2:	6a1b      	ldr	r3, [r3, #32]
 800f1d4:	4a6d      	ldr	r2, [pc, #436]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f1d6:	6213      	str	r3, [r2, #32]
						gd = (uint32_t)MAX(ABS(s.grid_drift / radio.grid_drift_filter_div), ABS((int32_t)event_tick));
 800f1d8:	4b6c      	ldr	r3, [pc, #432]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f1da:	699a      	ldr	r2, [r3, #24]
 800f1dc:	4b6f      	ldr	r3, [pc, #444]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e0:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f1e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfb8      	it	lt
 800f1f0:	425b      	neglt	r3, r3
 800f1f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f1fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f1fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f202:	2b00      	cmp	r3, #0
 800f204:	bfb8      	it	lt
 800f206:	425b      	neglt	r3, r3
 800f208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f20c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f214:	4293      	cmp	r3, r2
 800f216:	bfb8      	it	lt
 800f218:	4613      	movlt	r3, r2
 800f21a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if (s.rx_trigger_offset < (uint32_t)gd + radio.rx_window_increment)
 800f21e:	4b5b      	ldr	r3, [pc, #364]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f220:	6a1a      	ldr	r2, [r3, #32]
 800f222:	4b5e      	ldr	r3, [pc, #376]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f224:	6999      	ldr	r1, [r3, #24]
 800f226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f22a:	440b      	add	r3, r1
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d206      	bcs.n	800f23e <mixer_dio0_isr_+0x612>
							s.rx_trigger_offset = (uint32_t)gd + radio.rx_window_increment;
 800f230:	4b5a      	ldr	r3, [pc, #360]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f232:	699a      	ldr	r2, [r3, #24]
 800f234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f238:	4413      	add	r3, r2
 800f23a:	4a54      	ldr	r2, [pc, #336]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f23c:	6213      	str	r3, [r2, #32]
						s.rx_trigger_offset += radio.rx_to_grid_offset;
 800f23e:	4b53      	ldr	r3, [pc, #332]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f240:	6a1a      	ldr	r2, [r3, #32]
 800f242:	4b56      	ldr	r3, [pc, #344]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	4413      	add	r3, r2
 800f248:	4a50      	ldr	r2, [pc, #320]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f24a:	6213      	str	r3, [r2, #32]

						// restore nominal grid tick (i.e. remove previously added control value)
						// TODO:
						s.next_grid_tick -= s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 800f24c:	4b4f      	ldr	r3, [pc, #316]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	4a4e      	ldr	r2, [pc, #312]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f252:	6991      	ldr	r1, [r2, #24]
 800f254:	4a51      	ldr	r2, [pc, #324]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f258:	4850      	ldr	r0, [pc, #320]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f25a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f25c:	fb00 f202 	mul.w	r2, r0, r2
 800f260:	fb91 f2f2 	sdiv	r2, r1, r2
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	4a49      	ldr	r2, [pc, #292]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f268:	6053      	str	r3, [r2, #4]

						// update grid drift:
						// new = 1/c * measurement + (c-1)/c * old = old - 1/c * old + 1/c * measurement
						// + GRID_DRIFT_FILTER_DIV / 2 leads to rounding
						s.grid_drift -= (s.grid_drift + radio.grid_drift_filter_div / 2) / radio.grid_drift_filter_div;
 800f26a:	4b48      	ldr	r3, [pc, #288]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	4b47      	ldr	r3, [pc, #284]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f270:	6999      	ldr	r1, [r3, #24]
 800f272:	4b4a      	ldr	r3, [pc, #296]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f276:	0fd8      	lsrs	r0, r3, #31
 800f278:	4403      	add	r3, r0
 800f27a:	105b      	asrs	r3, r3, #1
 800f27c:	4419      	add	r1, r3
 800f27e:	4b47      	ldr	r3, [pc, #284]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f282:	fb91 f3f3 	sdiv	r3, r1, r3
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	4a40      	ldr	r2, [pc, #256]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f28a:	6193      	str	r3, [r2, #24]
						gd = s.grid_drift;
 800f28c:	4b3f      	ldr	r3, [pc, #252]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f28e:	699b      	ldr	r3, [r3, #24]
 800f290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						gd += (int32_t)event_tick;
 800f294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f29c:	4413      	add	r3, r2
 800f29e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						s.grid_drift = gd;
 800f2a2:	4a3a      	ldr	r2, [pc, #232]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f2a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f2a8:	6193      	str	r3, [r2, #24]

						// if drift exceeds limit: start RESYNC
						// NOTE: saturation could also help since obviously we are still able to receive
						// something (at the moment). Nevertheless it seems that we are in a critical
						// situation, so resync appears adequate as well.
						if (ABS(gd) > 500 * radio.grid_drift_max)
 800f2aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f2ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f2b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bfb8      	it	lt
 800f2ba:	425b      	neglt	r3, r3
 800f2bc:	4619      	mov	r1, r3
 800f2be:	4b37      	ldr	r3, [pc, #220]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f2c6:	fb02 f303 	mul.w	r3, r2, r3
 800f2ca:	4299      	cmp	r1, r3
 800f2cc:	d914      	bls.n	800f2f8 <mixer_dio0_isr_+0x6cc>
						{
							#if MX_VERBOSE_STATISTICS
								mx.stat_counter.num_grid_drift_overflow++;
 800f2ce:	4b2d      	ldr	r3, [pc, #180]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f2d0:	f8b3 387a 	ldrh.w	r3, [r3, #2170]	; 0x87a
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	4b2a      	ldr	r3, [pc, #168]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f2da:	f8a3 287a 	strh.w	r2, [r3, #2170]	; 0x87a
								mx.stat_counter.num_resync++;
 800f2de:	4b29      	ldr	r3, [pc, #164]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f2e0:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	4b26      	ldr	r3, [pc, #152]	; (800f384 <mixer_dio0_isr_+0x758>)
 800f2ea:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
							#endif
							GPI_TRACE_MSG_FAST(TRACE_INFO, "grid drift overflow: %d > %d -> enter RESYNC",
 800f2ee:	bf00      	nop
								ABS(gd), radio.grid_drift_max);

							strobe_resync = 1;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f2f6:	e067      	b.n	800f3c8 <mixer_dio0_isr_+0x79c>
						else
						{
							// update grid tick
							// NOTE: this realizes the proportional term of a PID controller
							// TODO:
							s.next_grid_tick += s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 800f2f8:	4b24      	ldr	r3, [pc, #144]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	4a23      	ldr	r2, [pc, #140]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f2fe:	6991      	ldr	r1, [r2, #24]
 800f300:	4a26      	ldr	r2, [pc, #152]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f302:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f304:	4825      	ldr	r0, [pc, #148]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f306:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f308:	fb00 f202 	mul.w	r2, r0, r2
 800f30c:	fb91 f2f2 	sdiv	r2, r1, r2
 800f310:	4413      	add	r3, r2
 800f312:	4a1e      	ldr	r2, [pc, #120]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f314:	6053      	str	r3, [r2, #4]

							// keep cumulative grid drift
							// NOTE: this is the base for the integral component of a PID controller
							gd = s.grid_drift_cumulative;
 800f316:	4b1d      	ldr	r3, [pc, #116]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							gd += s.grid_drift;
 800f31e:	4b1b      	ldr	r3, [pc, #108]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f326:	4413      	add	r3, r2
 800f328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							if (gd > 0x7FFF)
 800f32c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f334:	db04      	blt.n	800f340 <mixer_dio0_isr_+0x714>
								gd = 0x7FFF;
 800f336:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f33a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f33e:	e007      	b.n	800f350 <mixer_dio0_isr_+0x724>
							else if (gd < -0x8000l)
 800f340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f344:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f348:	da02      	bge.n	800f350 <mixer_dio0_isr_+0x724>
								gd = -0x8000l;
 800f34a:	4b15      	ldr	r3, [pc, #84]	; (800f3a0 <mixer_dio0_isr_+0x774>)
 800f34c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							s.grid_drift_cumulative = gd;
 800f350:	4a0e      	ldr	r2, [pc, #56]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f356:	61d3      	str	r3, [r2, #28]

							// update tx trigger offset
							// NOTE: this realizes the integral term of a PID controller in an indirect way
							// (through a loopback with potentially high uncertainty on its reaction)
							// TODO:
							s.tx_trigger_offset = s.grid_drift_cumulative / (radio.grid_drift_filter_div * radio.tx_offset_filter_div);
 800f358:	4b0c      	ldr	r3, [pc, #48]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f35a:	69da      	ldr	r2, [r3, #28]
 800f35c:	4b0f      	ldr	r3, [pc, #60]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f360:	490e      	ldr	r1, [pc, #56]	; (800f39c <mixer_dio0_isr_+0x770>)
 800f362:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800f364:	fb01 f303 	mul.w	r3, r1, r3
 800f368:	fb92 f3f3 	sdiv	r3, r2, r3
 800f36c:	461a      	mov	r2, r3
 800f36e:	4b07      	ldr	r3, [pc, #28]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f370:	625a      	str	r2, [r3, #36]	; 0x24

							if ((int32_t)s.tx_trigger_offset < 0)
 800f372:	4b06      	ldr	r3, [pc, #24]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f376:	2b00      	cmp	r3, #0
 800f378:	da14      	bge.n	800f3a4 <mixer_dio0_isr_+0x778>
								s.tx_trigger_offset = 0;
 800f37a:	4b04      	ldr	r3, [pc, #16]	; (800f38c <mixer_dio0_isr_+0x760>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	625a      	str	r2, [r3, #36]	; 0x24
 800f380:	e01a      	b.n	800f3b8 <mixer_dio0_isr_+0x78c>
 800f382:	bf00      	nop
 800f384:	200014f0 	.word	0x200014f0
 800f388:	20001430 	.word	0x20001430
 800f38c:	20000410 	.word	0x20000410
 800f390:	431bde83 	.word	0x431bde83
 800f394:	00f42400 	.word	0x00f42400
 800f398:	10624dd3 	.word	0x10624dd3
 800f39c:	200003c4 	.word	0x200003c4
 800f3a0:	ffff8000 	.word	0xffff8000
							else if (s.tx_trigger_offset > radio.tx_offset_max)
 800f3a4:	4b92      	ldr	r3, [pc, #584]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f3a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3a8:	4b92      	ldr	r3, [pc, #584]	; (800f5f4 <mixer_dio0_isr_+0x9c8>)
 800f3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d903      	bls.n	800f3b8 <mixer_dio0_isr_+0x78c>
								s.tx_trigger_offset = radio.tx_offset_max;
 800f3b0:	4b90      	ldr	r3, [pc, #576]	; (800f5f4 <mixer_dio0_isr_+0x9c8>)
 800f3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b4:	4a8e      	ldr	r2, [pc, #568]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f3b6:	6253      	str	r3, [r2, #36]	; 0x24
							s.tx_trigger_offset += radio.tx_to_grid_offset;
 800f3b8:	4b8d      	ldr	r3, [pc, #564]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f3ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3bc:	4b8d      	ldr	r3, [pc, #564]	; (800f5f4 <mixer_dio0_isr_+0x9c8>)
 800f3be:	695b      	ldr	r3, [r3, #20]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	4a8b      	ldr	r2, [pc, #556]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f3c4:	6253      	str	r3, [r2, #36]	; 0x24

							GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "grid_drift_cum: %d, tx_offset: %u",
 800f3c6:	bf00      	nop
					}


					// special handling during start-up phase, see tx decision for details
					#if (MX_COORDINATED_TX && !MX_BENCHMARK_NO_COORDINATED_STARTUP)
						if (!strobe_resync && (mx.slot_number < chirp_config.mx_generation_size) && packet->flags.has_next_payload)
 800f3c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d123      	bne.n	800f418 <mixer_dio0_isr_+0x7ec>
 800f3d0:	4b89      	ldr	r3, [pc, #548]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f3d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	4b88      	ldr	r3, [pc, #544]	; (800f5fc <mixer_dio0_isr_+0x9d0>)
 800f3da:	885b      	ldrh	r3, [r3, #2]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d21a      	bcs.n	800f418 <mixer_dio0_isr_+0x7ec>
 800f3e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3e6:	79db      	ldrb	r3, [r3, #7]
 800f3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d012      	beq.n	800f418 <mixer_dio0_isr_+0x7ec>
							// ATTENTION: don't rely on mx.tx_sideload or mx.tx_reserve at this point
							// (mx.tx_sideload may change between here and next trigger tick, mx.tx_reserve
							// may point to an incosistent row since it is not guarded w.r.t. ISR level).
							// Instead, there is a very high probability that mx.tx_packet is ready since
							// we did not TX in current slot (otherwise we wouldn't be here).
							if (((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS) && (STOP != s.next_slot_task))
 800f3f2:	4b81      	ldr	r3, [pc, #516]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f6:	4a81      	ldr	r2, [pc, #516]	; (800f5fc <mixer_dio0_isr_+0x9d0>)
 800f3f8:	7b92      	ldrb	r2, [r2, #14]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	7a1b      	ldrb	r3, [r3, #8]
 800f3fe:	b25b      	sxtb	r3, r3
 800f400:	2b00      	cmp	r3, #0
 800f402:	da09      	bge.n	800f418 <mixer_dio0_isr_+0x7ec>
 800f404:	4b7a      	ldr	r3, [pc, #488]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f406:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d004      	beq.n	800f418 <mixer_dio0_isr_+0x7ec>
							{
								GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "tx decision: has_next_payload set");
 800f40e:	bf00      	nop
								s.next_slot_task = TX;
 800f410:	4b77      	ldr	r3, [pc, #476]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f412:	2201      	movs	r2, #1
 800f414:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
							}
						}
					#endif

					s.next_trigger_tick = s.next_grid_tick -
 800f418:	4b75      	ldr	r3, [pc, #468]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f41a:	685a      	ldr	r2, [r3, #4]
						((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 800f41c:	4b74      	ldr	r3, [pc, #464]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f41e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f422:	2b01      	cmp	r3, #1
 800f424:	d102      	bne.n	800f42c <mixer_dio0_isr_+0x800>
 800f426:	4b72      	ldr	r3, [pc, #456]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42a:	e001      	b.n	800f430 <mixer_dio0_isr_+0x804>
 800f42c:	4b70      	ldr	r3, [pc, #448]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f42e:	6a1b      	ldr	r3, [r3, #32]
					s.next_trigger_tick = s.next_grid_tick -
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	4a6f      	ldr	r2, [pc, #444]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f434:	6093      	str	r3, [r2, #8]

					GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "next_grid: %lu, grid_drift: %+d (%+dus)",
 800f436:	bf00      	nop
					);
				}


				// check potential queue overflow, if ok: keep packet
				if (mx.rx_queue_num_writing - mx.rx_queue_num_read < NUM_ELEMENTS(mx.rx_queue))
 800f438:	4b6f      	ldr	r3, [pc, #444]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f43a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f43c:	4b6e      	ldr	r3, [pc, #440]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	2b03      	cmp	r3, #3
 800f444:	d83b      	bhi.n	800f4be <mixer_dio0_isr_+0x892>
				{
					mx.rx_queue_num_written++;
 800f446:	4b6c      	ldr	r3, [pc, #432]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f44a:	3301      	adds	r3, #1
 800f44c:	4a6a      	ldr	r2, [pc, #424]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f44e:	6393      	str	r3, [r2, #56]	; 0x38

					// use packet as next Tx sideload (-> fast tx update)
					if (chirp_config.mx_generation_size != mx.rank)
 800f450:	4b6a      	ldr	r3, [pc, #424]	; (800f5fc <mixer_dio0_isr_+0x9d0>)
 800f452:	885b      	ldrh	r3, [r3, #2]
 800f454:	b29a      	uxth	r2, r3
 800f456:	4b68      	ldr	r3, [pc, #416]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f458:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d007      	beq.n	800f470 <mixer_dio0_isr_+0x844>
					{
						mx.tx_sideload = &(packet->packet_chunk[chirp_config.coding_vector.pos]);
 800f460:	4b66      	ldr	r3, [pc, #408]	; (800f5fc <mixer_dio0_isr_+0x9d0>)
 800f462:	799b      	ldrb	r3, [r3, #6]
 800f464:	3308      	adds	r3, #8
 800f466:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f46a:	4413      	add	r3, r2
 800f46c:	4a62      	ldr	r2, [pc, #392]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f46e:	6453      	str	r3, [r2, #68]	; 0x44
 800f470:	2304      	movs	r3, #4
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	gpi_atomic_set(&(mx.events), BV(event));
 800f476:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f47a:	2201      	movs	r2, #1
 800f47c:	fa02 f303 	lsl.w	r3, r2, r3
 800f480:	4a5d      	ldr	r2, [pc, #372]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f482:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f484:	63bb      	str	r3, [r7, #56]	; 0x38
 800f486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f488:	637b      	str	r3, [r7, #52]	; 0x34
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	633b      	str	r3, [r7, #48]	; 0x30
 800f48e:	f3bf 8f5f 	dmb	sy
 800f492:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f498:	e851 0f00 	ldrex	r0, [r1]
 800f49c:	ea40 0003 	orr.w	r0, r0, r3
 800f4a0:	e841 0300 	strex	r3, r0, [r1]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1f7      	bne.n	800f498 <mixer_dio0_isr_+0x86c>
 800f4a8:	f3bf 8f5f 	dmb	sy
					}

					set_event(RX_READY);

					#if MX_VERBOSE_STATISTICS
						mx.stat_counter.num_received++;
 800f4ac:	4b52      	ldr	r3, [pc, #328]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4ae:	f8b3 3876 	ldrh.w	r3, [r3, #2166]	; 0x876
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	4b50      	ldr	r3, [pc, #320]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4b8:	f8a3 2876 	strh.w	r2, [r3, #2166]	; 0x876
 800f4bc:	e019      	b.n	800f4f2 <mixer_dio0_isr_+0x8c6>
					#endif
				}
				#if MX_VERBOSE_STATISTICS
				else
				{
					GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx queue overflow, NW: %u, NR: %u", mx.rx_queue_num_writing, mx.rx_queue_num_read);
 800f4be:	bf00      	nop

					if (mx.rank < chirp_config.mx_generation_size)
 800f4c0:	4b4d      	ldr	r3, [pc, #308]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4c2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800f4c6:	4b4d      	ldr	r3, [pc, #308]	; (800f5fc <mixer_dio0_isr_+0x9d0>)
 800f4c8:	885b      	ldrh	r3, [r3, #2]
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d208      	bcs.n	800f4e2 <mixer_dio0_isr_+0x8b6>
					{
						mx.stat_counter.num_rx_queue_overflow++;
 800f4d0:	4b49      	ldr	r3, [pc, #292]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4d2:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	4b47      	ldr	r3, [pc, #284]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4dc:	f8a3 2894 	strh.w	r2, [r3, #2196]	; 0x894
 800f4e0:	e007      	b.n	800f4f2 <mixer_dio0_isr_+0x8c6>
					}
					else mx.stat_counter.num_rx_queue_overflow_full_rank++;
 800f4e2:	4b45      	ldr	r3, [pc, #276]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4e4:	f8b3 3896 	ldrh.w	r3, [r3, #2198]	; 0x896
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	4b42      	ldr	r3, [pc, #264]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4ee:	f8a3 2896 	strh.w	r2, [r3, #2198]	; 0x896
				}
				#endif
				ASSERT_CT(NUM_ELEMENTS(mx.rx_queue) >= 2, single_entry_rx_queue_will_not_work);

				// start RESYNC if requested
				if (strobe_resync)
 800f4f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d06d      	beq.n	800f5d6 <mixer_dio0_isr_+0x9aa>
				{
					#if MX_VERBOSE_STATISTICS
						mx.stat_counter.num_resync++;
 800f4fa:	4b3f      	ldr	r3, [pc, #252]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f4fc:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800f500:	3301      	adds	r3, #1
 800f502:	b29a      	uxth	r2, r3
 800f504:	4b3c      	ldr	r3, [pc, #240]	; (800f5f8 <mixer_dio0_isr_+0x9cc>)
 800f506:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
 800f50a:	2300      	movs	r3, #0
 800f50c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (2 == mode)
 800f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f510:	2b02      	cmp	r3, #2
 800f512:	d108      	bne.n	800f526 <mixer_dio0_isr_+0x8fa>
		s.slot_state = IDLE;
 800f514:	4b36      	ldr	r3, [pc, #216]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f516:	220c      	movs	r2, #12
 800f518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 800f51c:	4b34      	ldr	r3, [pc, #208]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f524:	e01d      	b.n	800f562 <mixer_dio0_isr_+0x936>
	else if (1 == mode)
 800f526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d108      	bne.n	800f53e <mixer_dio0_isr_+0x912>
		s.slot_state = RESYNC;
 800f52c:	4b30      	ldr	r3, [pc, #192]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800f534:	4b2e      	ldr	r3, [pc, #184]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f53c:	e011      	b.n	800f562 <mixer_dio0_isr_+0x936>
	else if (STOP == s.next_slot_task)
 800f53e:	4b2c      	ldr	r3, [pc, #176]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f544:	2b02      	cmp	r3, #2
 800f546:	d104      	bne.n	800f552 <mixer_dio0_isr_+0x926>
		s.slot_state = IDLE;
 800f548:	4b29      	ldr	r3, [pc, #164]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f54a:	220c      	movs	r2, #12
 800f54c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f550:	e007      	b.n	800f562 <mixer_dio0_isr_+0x936>
		s.slot_state = RESYNC;
 800f552:	4b27      	ldr	r3, [pc, #156]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f554:	2200      	movs	r2, #0
 800f556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800f55a:	4b25      	ldr	r3, [pc, #148]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 800f562:	f7ff f9ef 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f566:	4b26      	ldr	r3, [pc, #152]	; (800f600 <mixer_dio0_isr_+0x9d4>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f06f 0202 	mvn.w	r2, #2
 800f56e:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 800f570:	f7ff fa12 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f574:	4b23      	ldr	r3, [pc, #140]	; (800f604 <mixer_dio0_isr_+0x9d8>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2201      	movs	r2, #1
 800f57a:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 800f57c:	2001      	movs	r0, #1
 800f57e:	f7ff f9a1 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	2b00      	cmp	r3, #0
 800f586:	d022      	beq.n	800f5ce <mixer_dio0_isr_+0x9a2>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 800f588:	4b1d      	ldr	r3, [pc, #116]	; (800f600 <mixer_dio0_isr_+0x9d4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fc faf0 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 800f594:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800f596:	4b17      	ldr	r3, [pc, #92]	; (800f5f4 <mixer_dio0_isr_+0x9c8>)
 800f598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59a:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 800f59c:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 800f59e:	4b15      	ldr	r3, [pc, #84]	; (800f5f4 <mixer_dio0_isr_+0x9c8>)
 800f5a0:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 800f5a8:	4a11      	ldr	r2, [pc, #68]	; (800f5f0 <mixer_dio0_isr_+0x9c4>)
 800f5aa:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 800f5ac:	f7ff f9ca 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f5b0:	4b13      	ldr	r3, [pc, #76]	; (800f600 <mixer_dio0_isr_+0x9d4>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f06f 0202 	mvn.w	r2, #2
 800f5b8:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 800f5ba:	4b11      	ldr	r3, [pc, #68]	; (800f600 <mixer_dio0_isr_+0x9d4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <mixer_dio0_isr_+0x9d4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800f5c8:	635a      	str	r2, [r3, #52]	; 0x34
 800f5ca:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	f7ff f9a0 	bl	800e914 <unmask_main_timer>
				else
				{
					start_grid_timer();
				}

				PROFILE_ISR("radio ISR process Rx packet end");
 800f5d4:	e001      	b.n	800f5da <mixer_dio0_isr_+0x9ae>
					start_grid_timer();
 800f5d6:	f7ff fa57 	bl	800ea88 <start_grid_timer>
				PROFILE_ISR("radio ISR process Rx packet end");
 800f5da:	bf00      	nop
			{
 800f5dc:	e005      	b.n	800f5ea <mixer_dio0_isr_+0x9be>
			}
			else
			{
				// trigger timeout timer (immediately) -> do error handling there
				// NOTE: don't need to unmask timer here because it already is
				trigger_main_timer(0);
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f7ff f970 	bl	800e8c4 <trigger_main_timer>
				unmask_main_timer(1);
 800f5e4:	2001      	movs	r0, #1
 800f5e6:	f7ff f995 	bl	800e914 <unmask_main_timer>
 800f5ea:	46b5      	mov	sp, r6
			lbt_update_channel((uint32_t)gpi_tick_hybrid_to_us(s.tx_on_time), s.tx_now_channel);
		#endif
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx done");
	}

	PROFILE_ISR("radio ISR return");
 800f5ec:	e052      	b.n	800f694 <mixer_dio0_isr_+0xa68>
 800f5ee:	bf00      	nop
 800f5f0:	20000410 	.word	0x20000410
 800f5f4:	200003c4 	.word	0x200003c4
 800f5f8:	200014f0 	.word	0x200014f0
 800f5fc:	20001430 	.word	0x20001430
 800f600:	200012c8 	.word	0x200012c8
 800f604:	200011e4 	.word	0x200011e4
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800f608:	2108      	movs	r1, #8
 800f60a:	2012      	movs	r0, #18
 800f60c:	f7fd f9d8 	bl	800c9c0 <SX1276Write>
		SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800f610:	2000      	movs	r0, #0
 800f612:	f7fd f95d 	bl	800c8d0 <SX1276SetOpMode>
 800f616:	2300      	movs	r3, #0
 800f618:	62bb      	str	r3, [r7, #40]	; 0x28
	if (mask)
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <mixer_dio0_isr_+0x9fa>
		LED_GPIO_Port->BRR = mask;
 800f620:	4a28      	ldr	r2, [pc, #160]	; (800f6c4 <mixer_dio0_isr_+0xa98>)
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	6293      	str	r3, [r2, #40]	; 0x28
 800f626:	4b28      	ldr	r3, [pc, #160]	; (800f6c8 <mixer_dio0_isr_+0xa9c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800f62c:	4b27      	ldr	r3, [pc, #156]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f630:	1ad2      	subs	r2, r2, r3
 800f632:	4b27      	ldr	r3, [pc, #156]	; (800f6d0 <mixer_dio0_isr_+0xaa4>)
 800f634:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800f638:	4413      	add	r3, r2
 800f63a:	4a25      	ldr	r2, [pc, #148]	; (800f6d0 <mixer_dio0_isr_+0xaa4>)
 800f63c:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
			s.radio_start_timestamp = 0;
 800f640:	4b22      	ldr	r3, [pc, #136]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f642:	2200      	movs	r2, #0
 800f644:	635a      	str	r2, [r3, #52]	; 0x34
			ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 800f646:	4b23      	ldr	r3, [pc, #140]	; (800f6d4 <mixer_dio0_isr_+0xaa8>)
 800f648:	7b9b      	ldrb	r3, [r3, #14]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00d      	beq.n	800f66a <mixer_dio0_isr_+0xa3e>
 800f64e:	4b1e      	ldr	r3, [pc, #120]	; (800f6c8 <mixer_dio0_isr_+0xa9c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f654:	4b20      	ldr	r3, [pc, #128]	; (800f6d8 <mixer_dio0_isr_+0xaac>)
 800f656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f658:	1ad2      	subs	r2, r2, r3
 800f65a:	4b20      	ldr	r3, [pc, #128]	; (800f6dc <mixer_dio0_isr_+0xab0>)
 800f65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65e:	4413      	add	r3, r2
 800f660:	4a1e      	ldr	r2, [pc, #120]	; (800f6dc <mixer_dio0_isr_+0xab0>)
 800f662:	6393      	str	r3, [r2, #56]	; 0x38
 800f664:	4b1b      	ldr	r3, [pc, #108]	; (800f6d4 <mixer_dio0_isr_+0xaa8>)
 800f666:	2200      	movs	r2, #0
 800f668:	739a      	strb	r2, [r3, #14]
 800f66a:	4b17      	ldr	r3, [pc, #92]	; (800f6c8 <mixer_dio0_isr_+0xa9c>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			s.tx_on_time = gpi_tick_fast_native() - s.tx_on_time;
 800f670:	4b16      	ldr	r3, [pc, #88]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f674:	1ad3      	subs	r3, r2, r3
 800f676:	4a15      	ldr	r2, [pc, #84]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f678:	6453      	str	r3, [r2, #68]	; 0x44
			lbt_update_channel((uint32_t)gpi_tick_hybrid_to_us(s.tx_on_time), s.tx_now_channel);
 800f67a:	4b14      	ldr	r3, [pc, #80]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67e:	627b      	str	r3, [r7, #36]	; 0x24
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	091a      	lsrs	r2, r3, #4
 800f684:	4b11      	ldr	r3, [pc, #68]	; (800f6cc <mixer_dio0_isr_+0xaa0>)
 800f686:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f68a:	4619      	mov	r1, r3
 800f68c:	4610      	mov	r0, r2
 800f68e:	f7fa ffaf 	bl	800a5f0 <lbt_update_channel>
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx done");
 800f692:	bf00      	nop
	PROFILE_ISR("radio ISR return");
 800f694:	bf00      	nop

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800f696:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <mixer_dio0_isr_+0xaa8>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00e      	beq.n	800f6bc <mixer_dio0_isr_+0xa90>
	return htim2.Instance->CNT;
 800f69e:	4b0a      	ldr	r3, [pc, #40]	; (800f6c8 <mixer_dio0_isr_+0xa9c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6a4:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <mixer_dio0_isr_+0xaac>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	1ad2      	subs	r2, r2, r3
 800f6aa:	4b0c      	ldr	r3, [pc, #48]	; (800f6dc <mixer_dio0_isr_+0xab0>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	4a0a      	ldr	r2, [pc, #40]	; (800f6dc <mixer_dio0_isr_+0xab0>)
 800f6b2:	6013      	str	r3, [r2, #0]
 800f6b4:	4b07      	ldr	r3, [pc, #28]	; (800f6d4 <mixer_dio0_isr_+0xaa8>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_RETURN_FAST();
 800f6ba:	bf00      	nop
 800f6bc:	bf00      	nop

#elif defined( USE_MODEM_FSK )
    #error "Please define FSK parameters."
#endif
}
 800f6be:	37c4      	adds	r7, #196	; 0xc4
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6c4:	48000800 	.word	0x48000800
 800f6c8:	200012c8 	.word	0x200012c8
 800f6cc:	20000410 	.word	0x20000410
 800f6d0:	200014f0 	.word	0x200014f0
 800f6d4:	2000112c 	.word	0x2000112c
 800f6d8:	20001308 	.word	0x20001308
 800f6dc:	20000f10 	.word	0x20000f10

0800f6e0 <mixer_dio3_isr>:


void LED_ISR(mixer_dio3_isr, LED_DIO3_ISR)
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4b14      	ldr	r3, [pc, #80]	; (800f738 <mixer_dio3_isr+0x58>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d008      	beq.n	800f700 <mixer_dio3_isr+0x20>
 800f6ee:	4b13      	ldr	r3, [pc, #76]	; (800f73c <mixer_dio3_isr+0x5c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f4:	4a12      	ldr	r2, [pc, #72]	; (800f740 <mixer_dio3_isr+0x60>)
 800f6f6:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800f6fa:	4b0f      	ldr	r3, [pc, #60]	; (800f738 <mixer_dio3_isr+0x58>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	601a      	str	r2, [r3, #0]
 800f700:	2300      	movs	r3, #0
 800f702:	603b      	str	r3, [r7, #0]
	if (mask)
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d005      	beq.n	800f716 <mixer_dio3_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800f70a:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <mixer_dio3_isr+0x64>)
 800f70c:	695a      	ldr	r2, [r3, #20]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	490c      	ldr	r1, [pc, #48]	; (800f744 <mixer_dio3_isr+0x64>)
 800f712:	4053      	eors	r3, r2
 800f714:	614b      	str	r3, [r1, #20]
 800f716:	f000 f817 	bl	800f748 <mixer_dio3_isr_>
 800f71a:	2300      	movs	r3, #0
 800f71c:	607b      	str	r3, [r7, #4]
	if (mask)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d005      	beq.n	800f730 <mixer_dio3_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800f724:	4b07      	ldr	r3, [pc, #28]	; (800f744 <mixer_dio3_isr+0x64>)
 800f726:	695a      	ldr	r2, [r3, #20]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	4906      	ldr	r1, [pc, #24]	; (800f744 <mixer_dio3_isr+0x64>)
 800f72c:	4053      	eors	r3, r2
 800f72e:	614b      	str	r3, [r1, #20]
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	200003b4 	.word	0x200003b4
 800f73c:	200012c8 	.word	0x200012c8
 800f740:	200014f0 	.word	0x200014f0
 800f744:	48000800 	.word	0x48000800

0800f748 <mixer_dio3_isr_>:
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4b36      	ldr	r3, [pc, #216]	; (800f828 <mixer_dio3_isr_+0xe0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800f754:	4a35      	ldr	r2, [pc, #212]	; (800f82c <mixer_dio3_isr_+0xe4>)
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	4b35      	ldr	r3, [pc, #212]	; (800f830 <mixer_dio3_isr_+0xe8>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	701a      	strb	r2, [r3, #0]
	// TODO:
	// if (Dio3Irq)
	{
		#if defined( USE_MODEM_LORA )

			mask_main_timer();
 800f75e:	f7ff f8f1 	bl	800e944 <mask_main_timer>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f762:	4b31      	ldr	r3, [pc, #196]	; (800f828 <mixer_dio3_isr_+0xe0>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f06f 0202 	mvn.w	r2, #2
 800f76a:	611a      	str	r2, [r3, #16]
			mask_slow_timer();
 800f76c:	f7ff f914 	bl	800e998 <mask_slow_timer>
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f770:	4b30      	ldr	r3, [pc, #192]	; (800f834 <mixer_dio3_isr_+0xec>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2201      	movs	r2, #1
 800f776:	605a      	str	r2, [r3, #4]

			// if Rx
			// NOTE: s.slot_state = RX_RUNNING or RESYNC
			if (TX_RUNNING != s.slot_state)
 800f778:	4b2f      	ldr	r3, [pc, #188]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f77a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f77e:	2b0c      	cmp	r3, #12
 800f780:	d04c      	beq.n	800f81c <mixer_dio3_isr_+0xd4>
			{
				// Clear Irq
				SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_VALIDHEADER );
 800f782:	2110      	movs	r1, #16
 800f784:	2012      	movs	r0, #18
 800f786:	f7fd f91b 	bl	800c9c0 <SX1276Write>
				// if frame detected
				GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "header detected");
 800f78a:	bf00      	nop

				// REG_LR_RXNBBYTES cannot be read before a valid packet is received, so we do not check the payload length here
				{
					// MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(PAYLOAD_TIME);
					Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800f78c:	463b      	mov	r3, r7
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fc f9a6 	bl	800bae0 <gpi_tick_hybrid_reference>
					// s.slow_trigger = r.hybrid_tick + GPI_TICK_US_TO_HYBRID2(AFTER_HEADER_TIME);
					s.slow_trigger = r.hybrid_tick + radio.packet_air_time;
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	4b29      	ldr	r3, [pc, #164]	; (800f83c <mixer_dio3_isr_+0xf4>)
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	4413      	add	r3, r2
 800f79c:	4a26      	ldr	r2, [pc, #152]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f79e:	60d3      	str	r3, [r2, #12]
					MAIN_TIMER_CC_REG = r.fast_capture + (s.slow_trigger - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800f7a0:	6879      	ldr	r1, [r7, #4]
 800f7a2:	4b25      	ldr	r3, [pc, #148]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	1ad2      	subs	r2, r2, r3
 800f7aa:	4b1f      	ldr	r3, [pc, #124]	; (800f828 <mixer_dio3_isr_+0xe0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	440a      	add	r2, r1
 800f7b0:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800f7b2:	4b20      	ldr	r3, [pc, #128]	; (800f834 <mixer_dio3_isr_+0xec>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2208      	movs	r2, #8
 800f7b8:	605a      	str	r2, [r3, #4]
					LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 5 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 800f7ba:	4b1e      	ldr	r3, [pc, #120]	; (800f834 <mixer_dio3_isr_+0xec>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	69d9      	ldr	r1, [r3, #28]
 800f7c0:	4b1e      	ldr	r3, [pc, #120]	; (800f83c <mixer_dio3_isr_+0xf4>)
 800f7c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	4a1d      	ldr	r2, [pc, #116]	; (800f840 <mixer_dio3_isr_+0xf8>)
 800f7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d0:	09da      	lsrs	r2, r3, #7
 800f7d2:	4b18      	ldr	r3, [pc, #96]	; (800f834 <mixer_dio3_isr_+0xec>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	440a      	add	r2, r1
 800f7d8:	615a      	str	r2, [r3, #20]
					while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800f7da:	bf00      	nop
 800f7dc:	4b15      	ldr	r3, [pc, #84]	; (800f834 <mixer_dio3_isr_+0xec>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f003 0308 	and.w	r3, r3, #8
 800f7e6:	2b08      	cmp	r3, #8
 800f7e8:	d1f8      	bne.n	800f7dc <mixer_dio3_isr_+0x94>

					s.grid_timer_flag = 0;
 800f7ea:	4b13      	ldr	r3, [pc, #76]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	751a      	strb	r2, [r3, #20]

					#if MX_HEADER_CHECK
					if (RESYNC != s.slot_state)
 800f7f0:	4b11      	ldr	r3, [pc, #68]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f7f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00a      	beq.n	800f810 <mixer_dio3_isr_+0xc8>
					{
						s.valid_header = 1;
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <mixer_dio3_isr_+0xf0>)
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						MAIN_TIMER_CC_REG = r.fast_capture + radio.after_header_hybrid * FAST_HYBRID_RATIO;
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	4b0d      	ldr	r3, [pc, #52]	; (800f83c <mixer_dio3_isr_+0xf4>)
 800f806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f808:	4b07      	ldr	r3, [pc, #28]	; (800f828 <mixer_dio3_isr_+0xe0>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	440a      	add	r2, r1
 800f80e:	635a      	str	r2, [r3, #52]	; 0x34
					}
					#endif
				}
				unmask_main_timer(1);
 800f810:	2001      	movs	r0, #1
 800f812:	f7ff f87f 	bl	800e914 <unmask_main_timer>
				unmask_slow_timer(1);
 800f816:	2001      	movs	r0, #1
 800f818:	f7ff f8a6 	bl	800e968 <unmask_slow_timer>
			}

			PROFILE_ISR("radio ISR return");
 800f81c:	bf00      	nop
			GPI_TRACE_RETURN_FAST();
 800f81e:	bf00      	nop
	// 	Dio3Irq = 1;

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
#endif
}
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	200012c8 	.word	0x200012c8
 800f82c:	20001308 	.word	0x20001308
 800f830:	2000112c 	.word	0x2000112c
 800f834:	200011e4 	.word	0x200011e4
 800f838:	20000410 	.word	0x20000410
 800f83c:	200003c4 	.word	0x200003c4
 800f840:	4325c53f 	.word	0x4325c53f

0800f844 <LPTIM1_IRQHandler>:

//**************************************************************************************************
// helper ISR for grid timer, see start_grid_timer() for details
void LED_ISR(LP_TIMER_ISR_NAME, GPI_LED_5)
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4b14      	ldr	r3, [pc, #80]	; (800f89c <LPTIM1_IRQHandler+0x58>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d008      	beq.n	800f864 <LPTIM1_IRQHandler+0x20>
 800f852:	4b13      	ldr	r3, [pc, #76]	; (800f8a0 <LPTIM1_IRQHandler+0x5c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f858:	4a12      	ldr	r2, [pc, #72]	; (800f8a4 <LPTIM1_IRQHandler+0x60>)
 800f85a:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <LPTIM1_IRQHandler+0x58>)
 800f860:	2200      	movs	r2, #0
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	2300      	movs	r3, #0
 800f866:	603b      	str	r3, [r7, #0]
	if (mask)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d005      	beq.n	800f87a <LPTIM1_IRQHandler+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800f86e:	4b0e      	ldr	r3, [pc, #56]	; (800f8a8 <LPTIM1_IRQHandler+0x64>)
 800f870:	695a      	ldr	r2, [r3, #20]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	490c      	ldr	r1, [pc, #48]	; (800f8a8 <LPTIM1_IRQHandler+0x64>)
 800f876:	4053      	eors	r3, r2
 800f878:	614b      	str	r3, [r1, #20]
 800f87a:	f000 f817 	bl	800f8ac <LP_TIMER_ISR_NAME_>
 800f87e:	2300      	movs	r3, #0
 800f880:	607b      	str	r3, [r7, #4]
	if (mask)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d005      	beq.n	800f894 <LPTIM1_IRQHandler+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800f888:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <LPTIM1_IRQHandler+0x64>)
 800f88a:	695a      	ldr	r2, [r3, #20]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4906      	ldr	r1, [pc, #24]	; (800f8a8 <LPTIM1_IRQHandler+0x64>)
 800f890:	4053      	eors	r3, r2
 800f892:	614b      	str	r3, [r1, #20]
 800f894:	bf00      	nop
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	200003b4 	.word	0x200003b4
 800f8a0:	200012c8 	.word	0x200012c8
 800f8a4:	200014f0 	.word	0x200014f0
 800f8a8:	48000800 	.word	0x48000800

0800f8ac <LP_TIMER_ISR_NAME_>:
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
	// start_grid_timer();
	mask_slow_timer();
 800f8b2:	f7ff f871 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f8b6:	4b34      	ldr	r3, [pc, #208]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	605a      	str	r2, [r3, #4]
	if (s.grid_timer_flag)
 800f8be:	4b33      	ldr	r3, [pc, #204]	; (800f98c <LP_TIMER_ISR_NAME_+0xe0>)
 800f8c0:	7d1b      	ldrb	r3, [r3, #20]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d002      	beq.n	800f8cc <LP_TIMER_ISR_NAME_+0x20>
	{
		start_grid_timer();
 800f8c6:	f7ff f8df 	bl	800ea88 <start_grid_timer>
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
			unmask_slow_timer(0);
		}
	}
}
 800f8ca:	e059      	b.n	800f980 <LP_TIMER_ISR_NAME_+0xd4>
		r = gpi_tick_hybrid_reference();
 800f8cc:	1d3b      	adds	r3, r7, #4
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fc f906 	bl	800bae0 <gpi_tick_hybrid_reference>
		d = s.slow_trigger - r.hybrid_tick;
 800f8d4:	4b2d      	ldr	r3, [pc, #180]	; (800f98c <LP_TIMER_ISR_NAME_+0xe0>)
 800f8d6:	68da      	ldr	r2, [r3, #12]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	60fb      	str	r3, [r7, #12]
		if (d > 0xF000ul * HYBRID_SLOW_RATIO)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	4a2b      	ldr	r2, [pc, #172]	; (800f990 <LP_TIMER_ISR_NAME_+0xe4>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d923      	bls.n	800f92e <LP_TIMER_ISR_NAME_+0x82>
			d = r.hybrid_tick + 0xE000ul * HYBRID_SLOW_RATIO;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f103 73d5 	add.w	r3, r3, #27918336	; 0x1aa0000
 800f8ec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f8f0:	60fb      	str	r3, [r7, #12]
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800f8f2:	4b25      	ldr	r3, [pc, #148]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2208      	movs	r2, #8
 800f8f8:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800f8fa:	4b23      	ldr	r3, [pc, #140]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	69d9      	ldr	r1, [r3, #28]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	4a23      	ldr	r2, [pc, #140]	; (800f994 <LP_TIMER_ISR_NAME_+0xe8>)
 800f908:	fba2 2303 	umull	r2, r3, r2, r3
 800f90c:	09da      	lsrs	r2, r3, #7
 800f90e:	4b1e      	ldr	r3, [pc, #120]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	440a      	add	r2, r1
 800f914:	615a      	str	r2, [r3, #20]
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800f916:	bf00      	nop
 800f918:	4b1b      	ldr	r3, [pc, #108]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f003 0308 	and.w	r3, r3, #8
 800f922:	2b08      	cmp	r3, #8
 800f924:	d1f8      	bne.n	800f918 <LP_TIMER_ISR_NAME_+0x6c>
			unmask_slow_timer(0);
 800f926:	2000      	movs	r0, #0
 800f928:	f7ff f81e 	bl	800e968 <unmask_slow_timer>
}
 800f92c:	e028      	b.n	800f980 <LP_TIMER_ISR_NAME_+0xd4>
		else if (d > radio.max_tb_interval)
 800f92e:	4b1a      	ldr	r3, [pc, #104]	; (800f998 <LP_TIMER_ISR_NAME_+0xec>)
 800f930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	429a      	cmp	r2, r3
 800f936:	d923      	bls.n	800f980 <LP_TIMER_ISR_NAME_+0xd4>
			d = s.slow_trigger - radio.max_tb_interval / 2;
 800f938:	4b14      	ldr	r3, [pc, #80]	; (800f98c <LP_TIMER_ISR_NAME_+0xe0>)
 800f93a:	68da      	ldr	r2, [r3, #12]
 800f93c:	4b16      	ldr	r3, [pc, #88]	; (800f998 <LP_TIMER_ISR_NAME_+0xec>)
 800f93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f940:	085b      	lsrs	r3, r3, #1
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	60fb      	str	r3, [r7, #12]
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800f946:	4b10      	ldr	r3, [pc, #64]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2208      	movs	r2, #8
 800f94c:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800f94e:	4b0e      	ldr	r3, [pc, #56]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69d9      	ldr	r1, [r3, #28]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	4a0e      	ldr	r2, [pc, #56]	; (800f994 <LP_TIMER_ISR_NAME_+0xe8>)
 800f95c:	fba2 2303 	umull	r2, r3, r2, r3
 800f960:	09da      	lsrs	r2, r3, #7
 800f962:	4b09      	ldr	r3, [pc, #36]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	440a      	add	r2, r1
 800f968:	615a      	str	r2, [r3, #20]
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800f96a:	bf00      	nop
 800f96c:	4b06      	ldr	r3, [pc, #24]	; (800f988 <LP_TIMER_ISR_NAME_+0xdc>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f003 0308 	and.w	r3, r3, #8
 800f976:	2b08      	cmp	r3, #8
 800f978:	d1f8      	bne.n	800f96c <LP_TIMER_ISR_NAME_+0xc0>
			unmask_slow_timer(0);
 800f97a:	2000      	movs	r0, #0
 800f97c:	f7fe fff4 	bl	800e968 <unmask_slow_timer>
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	200011e4 	.word	0x200011e4
 800f98c:	20000410 	.word	0x20000410
 800f990:	01c98000 	.word	0x01c98000
 800f994:	4325c53f 	.word	0x4325c53f
 800f998:	200003c4 	.word	0x200003c4

0800f99c <mixer_main_timer_isr>:
	// 	case RESYNC:			timeout_isr(); grid_timer_isr();	break;
	// 	case RX_RUNNING:		timeout_isr();						break;
	// 	case TX_RUNNING, IDLE:	grid_timer_isr();					break;
	// 	default:				undefined behavior
	// }
	__asm__ volatile
 800f99c:	4806      	ldr	r0, [pc, #24]	; (800f9b8 <mixer_main_timer_isr+0x1c>)
 800f99e:	7800      	ldrb	r0, [r0, #0]
 800f9a0:	4487      	add	pc, r0
 800f9a2:	bf00      	nop
 800f9a4:	f84d ed04 	str.w	lr, [sp, #-4]!
 800f9a8:	f000 f80a 	bl	800f9c0 <timeout_isr>
 800f9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b0:	f000 bb5e 	b.w	8010070 <grid_timer_isr>
 800f9b4:	f000 b804 	b.w	800f9c0 <timeout_isr>
 800f9b8:	20000440 	.word	0x20000440
		"b.w	timeout_isr			\n"		// 16: timeout (don't return to here)
		"1:							\n"
		".word	%c0					\n"
		: : "i"(&s.slot_state)
	);
}
 800f9bc:	bf00      	nop
 800f9be:	bf00      	nop

0800f9c0 <timeout_isr>:

//**************************************************************************************************

// timeout ISR
// triggered if there was no successful packet transfer in a specific time interval
void LED_ISR(timeout_isr, LED_TIMEOUT_ISR)
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4b14      	ldr	r3, [pc, #80]	; (800fa18 <timeout_isr+0x58>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d008      	beq.n	800f9e0 <timeout_isr+0x20>
 800f9ce:	4b13      	ldr	r3, [pc, #76]	; (800fa1c <timeout_isr+0x5c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d4:	4a12      	ldr	r2, [pc, #72]	; (800fa20 <timeout_isr+0x60>)
 800f9d6:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800f9da:	4b0f      	ldr	r3, [pc, #60]	; (800fa18 <timeout_isr+0x58>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	601a      	str	r2, [r3, #0]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	603b      	str	r3, [r7, #0]
	if (mask)
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d005      	beq.n	800f9f6 <timeout_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800f9ea:	4b0e      	ldr	r3, [pc, #56]	; (800fa24 <timeout_isr+0x64>)
 800f9ec:	695a      	ldr	r2, [r3, #20]
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	490c      	ldr	r1, [pc, #48]	; (800fa24 <timeout_isr+0x64>)
 800f9f2:	4053      	eors	r3, r2
 800f9f4:	614b      	str	r3, [r1, #20]
 800f9f6:	f000 f817 	bl	800fa28 <timeout_isr_>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	607b      	str	r3, [r7, #4]
	if (mask)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d005      	beq.n	800fa10 <timeout_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800fa04:	4b07      	ldr	r3, [pc, #28]	; (800fa24 <timeout_isr+0x64>)
 800fa06:	695a      	ldr	r2, [r3, #20]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4906      	ldr	r1, [pc, #24]	; (800fa24 <timeout_isr+0x64>)
 800fa0c:	4053      	eors	r3, r2
 800fa0e:	614b      	str	r3, [r1, #20]
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	200003b4 	.word	0x200003b4
 800fa1c:	200012c8 	.word	0x200012c8
 800fa20:	200014f0 	.word	0x200014f0
 800fa24:	48000800 	.word	0x48000800

0800fa28 <timeout_isr_>:
{
 800fa28:	b590      	push	{r4, r7, lr}
 800fa2a:	b08d      	sub	sp, #52	; 0x34
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	4b97      	ldr	r3, [pc, #604]	; (800fc8c <timeout_isr_+0x264>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800fa34:	4a96      	ldr	r2, [pc, #600]	; (800fc90 <timeout_isr_+0x268>)
 800fa36:	6013      	str	r3, [r2, #0]
 800fa38:	4b96      	ldr	r3, [pc, #600]	; (800fc94 <timeout_isr_+0x26c>)
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_FUNCTION_FAST();
 800fa3e:	bf00      	nop
	PROFILE_ISR("timeout ISR entry");
 800fa40:	bf00      	nop

	mask_main_timer();
 800fa42:	f7fe ff7f 	bl	800e944 <mask_main_timer>

	//clear IRQ
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800fa46:	4b91      	ldr	r3, [pc, #580]	; (800fc8c <timeout_isr_+0x264>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f06f 0202 	mvn.w	r2, #2
 800fa4e:	611a      	str	r2, [r3, #16]

	mask_slow_timer();
 800fa50:	f7fe ffa2 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800fa54:	4b90      	ldr	r3, [pc, #576]	; (800fc98 <timeout_isr_+0x270>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	605a      	str	r2, [r3, #4]

	#if MX_LBT_ACCESS
	if (s.lbt_rx_on)
 800fa5c:	4b8f      	ldr	r3, [pc, #572]	; (800fc9c <timeout_isr_+0x274>)
 800fa5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f000 815c 	beq.w	800fd20 <timeout_isr_+0x2f8>
	{
		/* Bit 0: Signal Detected, see SX1276/77/78/79 - 137 MHz to 1020 MHz, Rev. 5, Page 46 */
		if (SX1276Read( REG_LR_MODEMSTAT ) & RFLR_MODEMSTAT_MODEM_STATUS_SIGNAL_MASK)
 800fa68:	2018      	movs	r0, #24
 800fa6a:	f7fc ffbb 	bl	800c9e4 <SX1276Read>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	f003 0301 	and.w	r3, r3, #1
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d04f      	beq.n	800fb18 <timeout_isr_+0xf0>
		{
			s.lbt_rx_on = 0;
 800fa78:	4b88      	ldr	r3, [pc, #544]	; (800fc9c <timeout_isr_+0x274>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* waiting for a valid header time */
			MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(radio.header_time) + 4 * radio.grid_drift_offset * FAST_HYBRID_RATIO;
 800fa80:	4b82      	ldr	r3, [pc, #520]	; (800fc8c <timeout_isr_+0x264>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fa86:	4b86      	ldr	r3, [pc, #536]	; (800fca0 <timeout_isr_+0x278>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a86      	ldr	r2, [pc, #536]	; (800fca4 <timeout_isr_+0x27c>)
 800fa8c:	fba2 2303 	umull	r2, r3, r2, r3
 800fa90:	0c9b      	lsrs	r3, r3, #18
 800fa92:	4a85      	ldr	r2, [pc, #532]	; (800fca8 <timeout_isr_+0x280>)
 800fa94:	fb02 f003 	mul.w	r0, r2, r3
 800fa98:	4b81      	ldr	r3, [pc, #516]	; (800fca0 <timeout_isr_+0x278>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a83      	ldr	r2, [pc, #524]	; (800fcac <timeout_isr_+0x284>)
 800fa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800faa2:	099a      	lsrs	r2, r3, #6
 800faa4:	4b81      	ldr	r3, [pc, #516]	; (800fcac <timeout_isr_+0x284>)
 800faa6:	fba3 4302 	umull	r4, r3, r3, r2
 800faaa:	099b      	lsrs	r3, r3, #6
 800faac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fab0:	fb04 f303 	mul.w	r3, r4, r3
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800faba:	fb02 f303 	mul.w	r3, r2, r3
 800fabe:	4418      	add	r0, r3
 800fac0:	4b77      	ldr	r3, [pc, #476]	; (800fca0 <timeout_isr_+0x278>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	4b79      	ldr	r3, [pc, #484]	; (800fcac <timeout_isr_+0x284>)
 800fac6:	fba3 4302 	umull	r4, r3, r3, r2
 800faca:	099b      	lsrs	r3, r3, #6
 800facc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fad0:	fb04 f303 	mul.w	r3, r4, r3
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	011b      	lsls	r3, r3, #4
 800fad8:	4403      	add	r3, r0
 800fada:	4419      	add	r1, r3
 800fadc:	4b70      	ldr	r3, [pc, #448]	; (800fca0 <timeout_isr_+0x278>)
 800fade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae0:	009a      	lsls	r2, r3, #2
 800fae2:	4b6a      	ldr	r3, [pc, #424]	; (800fc8c <timeout_isr_+0x264>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	440a      	add	r2, r1
 800fae8:	635a      	str	r2, [r3, #52]	; 0x34
			unmask_main_timer(1);
 800faea:	2001      	movs	r0, #1
 800faec:	f7fe ff12 	bl	800e914 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800faf0:	4b68      	ldr	r3, [pc, #416]	; (800fc94 <timeout_isr_+0x26c>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 82a3 	beq.w	8010040 <timeout_isr_+0x618>
 800fafa:	4b64      	ldr	r3, [pc, #400]	; (800fc8c <timeout_isr_+0x264>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb00:	4b63      	ldr	r3, [pc, #396]	; (800fc90 <timeout_isr_+0x268>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	1ad2      	subs	r2, r2, r3
 800fb06:	4b6a      	ldr	r3, [pc, #424]	; (800fcb0 <timeout_isr_+0x288>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	4a68      	ldr	r2, [pc, #416]	; (800fcb0 <timeout_isr_+0x288>)
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	4b60      	ldr	r3, [pc, #384]	; (800fc94 <timeout_isr_+0x26c>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
#endif
			GPI_TRACE_RETURN_FAST();
 800fb16:	e293      	b.n	8010040 <timeout_isr_+0x618>
		}
		else
		{
			s.lbt_channel_seq_no ++;
 800fb18:	4b60      	ldr	r3, [pc, #384]	; (800fc9c <timeout_isr_+0x274>)
 800fb1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb1e:	3301      	adds	r3, #1
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	4b5e      	ldr	r3, [pc, #376]	; (800fc9c <timeout_isr_+0x274>)
 800fb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			SX1276SetOpMode(RFLR_OPMODE_SLEEP);
 800fb28:	2000      	movs	r0, #0
 800fb2a:	f7fc fed1 	bl	800c8d0 <SX1276SetOpMode>
			if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 800fb2e:	4b5b      	ldr	r3, [pc, #364]	; (800fc9c <timeout_isr_+0x274>)
 800fb30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	f200 80c3 	bhi.w	800fcc0 <timeout_isr_+0x298>
			{
				Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800fb3a:	f107 030c 	add.w	r3, r7, #12
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fb ffce 	bl	800bae0 <gpi_tick_hybrid_reference>
				/* hop to another channel, random seed is related to round seq, slot number and channel seq */
				uint8_t now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 800fb44:	4b5b      	ldr	r3, [pc, #364]	; (800fcb4 <timeout_isr_+0x28c>)
 800fb46:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 800fb4a:	4b5a      	ldr	r3, [pc, #360]	; (800fcb4 <timeout_isr_+0x28c>)
 800fb4c:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 800fb50:	4b59      	ldr	r3, [pc, #356]	; (800fcb8 <timeout_isr_+0x290>)
 800fb52:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	4b56      	ldr	r3, [pc, #344]	; (800fcb4 <timeout_isr_+0x28c>)
 800fb5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	4413      	add	r3, r2
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	4b4d      	ldr	r3, [pc, #308]	; (800fc9c <timeout_isr_+0x274>)
 800fb66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	4b50      	ldr	r3, [pc, #320]	; (800fcb4 <timeout_isr_+0x28c>)
 800fb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb74:	f7fa fc72 	bl	800a45c <lbt_pesudo_channel>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				SX1276SetChannel(chirp_config.lora_freq + now_channel * CHANNEL_STEP);
 800fb7e:	4b4d      	ldr	r3, [pc, #308]	; (800fcb4 <timeout_isr_+0x28c>)
 800fb80:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800fb84:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fb88:	494c      	ldr	r1, [pc, #304]	; (800fcbc <timeout_isr_+0x294>)
 800fb8a:	fb01 f202 	mul.w	r2, r1, r2
 800fb8e:	4413      	add	r3, r2
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fc fa37 	bl	800c004 <SX1276SetChannel>
				SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800fb96:	2005      	movs	r0, #5
 800fb98:	f7fc fe9a 	bl	800c8d0 <SX1276SetOpMode>
				/* waiting for a valid header time */
				Gpi_Hybrid_Tick t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset + GPI_TICK_US_TO_FAST2(chirp_config.lbt_detect_duration_us * (s.lbt_channel_seq_no + 1) - radio.isr_latency_buffer + LBT_DELAY_IN_US);
 800fb9c:	4b3f      	ldr	r3, [pc, #252]	; (800fc9c <timeout_isr_+0x274>)
 800fb9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fba0:	4b3e      	ldr	r3, [pc, #248]	; (800fc9c <timeout_isr_+0x274>)
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	441a      	add	r2, r3
 800fba6:	4b3e      	ldr	r3, [pc, #248]	; (800fca0 <timeout_isr_+0x278>)
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	1ad1      	subs	r1, r2, r3
 800fbac:	4b41      	ldr	r3, [pc, #260]	; (800fcb4 <timeout_isr_+0x28c>)
 800fbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbb0:	4a3a      	ldr	r2, [pc, #232]	; (800fc9c <timeout_isr_+0x274>)
 800fbb2:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fbb6:	3201      	adds	r2, #1
 800fbb8:	fb02 f203 	mul.w	r2, r2, r3
 800fbbc:	4b38      	ldr	r3, [pc, #224]	; (800fca0 <timeout_isr_+0x278>)
 800fbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fbc6:	3310      	adds	r3, #16
 800fbc8:	4a36      	ldr	r2, [pc, #216]	; (800fca4 <timeout_isr_+0x27c>)
 800fbca:	fba2 2303 	umull	r2, r3, r2, r3
 800fbce:	0c9b      	lsrs	r3, r3, #18
 800fbd0:	4a35      	ldr	r2, [pc, #212]	; (800fca8 <timeout_isr_+0x280>)
 800fbd2:	fb02 f003 	mul.w	r0, r2, r3
 800fbd6:	4b37      	ldr	r3, [pc, #220]	; (800fcb4 <timeout_isr_+0x28c>)
 800fbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbda:	4a30      	ldr	r2, [pc, #192]	; (800fc9c <timeout_isr_+0x274>)
 800fbdc:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fbe0:	3201      	adds	r2, #1
 800fbe2:	fb02 f203 	mul.w	r2, r2, r3
 800fbe6:	4b2e      	ldr	r3, [pc, #184]	; (800fca0 <timeout_isr_+0x278>)
 800fbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fbf0:	3310      	adds	r3, #16
 800fbf2:	4a2e      	ldr	r2, [pc, #184]	; (800fcac <timeout_isr_+0x284>)
 800fbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf8:	099a      	lsrs	r2, r3, #6
 800fbfa:	4b2c      	ldr	r3, [pc, #176]	; (800fcac <timeout_isr_+0x284>)
 800fbfc:	fba3 4302 	umull	r4, r3, r3, r2
 800fc00:	099b      	lsrs	r3, r3, #6
 800fc02:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fc06:	fb04 f303 	mul.w	r3, r4, r3
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800fc10:	fb02 f303 	mul.w	r3, r2, r3
 800fc14:	4418      	add	r0, r3
 800fc16:	4b27      	ldr	r3, [pc, #156]	; (800fcb4 <timeout_isr_+0x28c>)
 800fc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc1a:	4a20      	ldr	r2, [pc, #128]	; (800fc9c <timeout_isr_+0x274>)
 800fc1c:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fc20:	3201      	adds	r2, #1
 800fc22:	fb02 f203 	mul.w	r2, r2, r3
 800fc26:	4b1e      	ldr	r3, [pc, #120]	; (800fca0 <timeout_isr_+0x278>)
 800fc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fc30:	3310      	adds	r3, #16
 800fc32:	4a1e      	ldr	r2, [pc, #120]	; (800fcac <timeout_isr_+0x284>)
 800fc34:	fba2 4203 	umull	r4, r2, r2, r3
 800fc38:	0992      	lsrs	r2, r2, #6
 800fc3a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fc3e:	fb04 f202 	mul.w	r2, r4, r2
 800fc42:	1a9a      	subs	r2, r3, r2
 800fc44:	0113      	lsls	r3, r2, #4
 800fc46:	4403      	add	r3, r0
 800fc48:	440b      	add	r3, r1
 800fc4a:	62bb      	str	r3, [r7, #40]	; 0x28
				MAIN_TIMER_CC_REG = r.fast_capture + (t - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800fc4c:	6939      	ldr	r1, [r7, #16]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc52:	1ad2      	subs	r2, r2, r3
 800fc54:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <timeout_isr_+0x264>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	440a      	add	r2, r1
 800fc5a:	635a      	str	r2, [r3, #52]	; 0x34

				unmask_main_timer(1);
 800fc5c:	2001      	movs	r0, #1
 800fc5e:	f7fe fe59 	bl	800e914 <unmask_main_timer>
#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800fc62:	4b0c      	ldr	r3, [pc, #48]	; (800fc94 <timeout_isr_+0x26c>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f000 81ec 	beq.w	8010044 <timeout_isr_+0x61c>
 800fc6c:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <timeout_isr_+0x264>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc72:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <timeout_isr_+0x268>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	1ad2      	subs	r2, r2, r3
 800fc78:	4b0d      	ldr	r3, [pc, #52]	; (800fcb0 <timeout_isr_+0x288>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	4a0c      	ldr	r2, [pc, #48]	; (800fcb0 <timeout_isr_+0x288>)
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <timeout_isr_+0x26c>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	701a      	strb	r2, [r3, #0]
#endif
				GPI_TRACE_RETURN_FAST();
 800fc88:	bf00      	nop
 800fc8a:	e1db      	b.n	8010044 <timeout_isr_+0x61c>
 800fc8c:	200012c8 	.word	0x200012c8
 800fc90:	20001308 	.word	0x20001308
 800fc94:	2000112c 	.word	0x2000112c
 800fc98:	200011e4 	.word	0x200011e4
 800fc9c:	20000410 	.word	0x20000410
 800fca0:	200003c4 	.word	0x200003c4
 800fca4:	431bde83 	.word	0x431bde83
 800fca8:	00f42400 	.word	0x00f42400
 800fcac:	10624dd3 	.word	0x10624dd3
 800fcb0:	20000f10 	.word	0x20000f10
 800fcb4:	20001430 	.word	0x20001430
 800fcb8:	200014f0 	.word	0x200014f0
 800fcbc:	00030d40 	.word	0x00030d40
			}
			else
			{
				s.lbt_rx_on = 0;
 800fcc0:	4b9e      	ldr	r3, [pc, #632]	; (800ff3c <timeout_isr_+0x514>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				s.lbt_channel_seq_no = 0;
 800fcc8:	4b9c      	ldr	r3, [pc, #624]	; (800ff3c <timeout_isr_+0x514>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	623b      	str	r3, [r7, #32]
	if (mask)
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <timeout_isr_+0x2b8>
		LED_GPIO_Port->BRR = mask;
 800fcda:	4a99      	ldr	r2, [pc, #612]	; (800ff40 <timeout_isr_+0x518>)
 800fcdc:	6a3b      	ldr	r3, [r7, #32]
 800fcde:	6293      	str	r3, [r2, #40]	; 0x28
				gpi_led_off(LED_RX);
				#if ENERGEST_CONF_ON
					ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800fce0:	4b98      	ldr	r3, [pc, #608]	; (800ff44 <timeout_isr_+0x51c>)
 800fce2:	7bdb      	ldrb	r3, [r3, #15]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00d      	beq.n	800fd04 <timeout_isr_+0x2dc>
 800fce8:	4b97      	ldr	r3, [pc, #604]	; (800ff48 <timeout_isr_+0x520>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcee:	4b97      	ldr	r3, [pc, #604]	; (800ff4c <timeout_isr_+0x524>)
 800fcf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcf2:	1ad2      	subs	r2, r2, r3
 800fcf4:	4b96      	ldr	r3, [pc, #600]	; (800ff50 <timeout_isr_+0x528>)
 800fcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcf8:	4413      	add	r3, r2
 800fcfa:	4a95      	ldr	r2, [pc, #596]	; (800ff50 <timeout_isr_+0x528>)
 800fcfc:	63d3      	str	r3, [r2, #60]	; 0x3c
 800fcfe:	4b91      	ldr	r3, [pc, #580]	; (800ff44 <timeout_isr_+0x51c>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	73da      	strb	r2, [r3, #15]
				#endif
				/* no packets in this slot */
				SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 800fd04:	4b93      	ldr	r3, [pc, #588]	; (800ff54 <timeout_isr_+0x52c>)
 800fd06:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800fd0a:	4a92      	ldr	r2, [pc, #584]	; (800ff54 <timeout_isr_+0x52c>)
 800fd0c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800fd10:	4611      	mov	r1, r2
 800fd12:	4a91      	ldr	r2, [pc, #580]	; (800ff58 <timeout_isr_+0x530>)
 800fd14:	fb02 f201 	mul.w	r2, r2, r1
 800fd18:	4413      	add	r3, r2
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fc f972 	bl	800c004 <SX1276SetChannel>
		}
	}
	#endif

	#if MX_HEADER_CHECK
	if (s.valid_header)
 800fd20:	4b86      	ldr	r3, [pc, #536]	; (800ff3c <timeout_isr_+0x514>)
 800fd22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 8087 	beq.w	800fe3a <timeout_isr_+0x412>
	{
		s.valid_header = 0;
 800fd2c:	4b83      	ldr	r3, [pc, #524]	; (800ff3c <timeout_isr_+0x514>)
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memset( APP_HEADER_FIFO, 0, HASH_HEADER );
 800fd34:	2204      	movs	r2, #4
 800fd36:	2100      	movs	r1, #0
 800fd38:	4888      	ldr	r0, [pc, #544]	; (800ff5c <timeout_isr_+0x534>)
 800fd3a:	f011 fc26 	bl	802158a <memset>
		SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ));
 800fd3e:	2010      	movs	r0, #16
 800fd40:	f7fc fe50 	bl	800c9e4 <SX1276Read>
 800fd44:	4603      	mov	r3, r0
 800fd46:	4619      	mov	r1, r3
 800fd48:	200d      	movs	r0, #13
 800fd4a:	f7fc fe39 	bl	800c9c0 <SX1276Write>
		SX1276ReadFifo( APP_HEADER_FIFO, HASH_HEADER );
 800fd4e:	2104      	movs	r1, #4
 800fd50:	4882      	ldr	r0, [pc, #520]	; (800ff5c <timeout_isr_+0x534>)
 800fd52:	f7fc fecf 	bl	800caf4 <SX1276ReadFifo>
		uint32_t app_header = APP_HEADER_FIFO[3] << 24 | APP_HEADER_FIFO[2] << 16 | APP_HEADER_FIFO[1] << 8 | APP_HEADER_FIFO[0];
 800fd56:	4b81      	ldr	r3, [pc, #516]	; (800ff5c <timeout_isr_+0x534>)
 800fd58:	78db      	ldrb	r3, [r3, #3]
 800fd5a:	061a      	lsls	r2, r3, #24
 800fd5c:	4b7f      	ldr	r3, [pc, #508]	; (800ff5c <timeout_isr_+0x534>)
 800fd5e:	789b      	ldrb	r3, [r3, #2]
 800fd60:	041b      	lsls	r3, r3, #16
 800fd62:	431a      	orrs	r2, r3
 800fd64:	4b7d      	ldr	r3, [pc, #500]	; (800ff5c <timeout_isr_+0x534>)
 800fd66:	785b      	ldrb	r3, [r3, #1]
 800fd68:	021b      	lsls	r3, r3, #8
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	4a7b      	ldr	r2, [pc, #492]	; (800ff5c <timeout_isr_+0x534>)
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	4313      	orrs	r3, r2
 800fd72:	627b      	str	r3, [r7, #36]	; 0x24
		if (app_header == chirp_config.packet_hash)
 800fd74:	4b77      	ldr	r3, [pc, #476]	; (800ff54 <timeout_isr_+0x52c>)
 800fd76:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 800fd7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d151      	bne.n	800fe24 <timeout_isr_+0x3fc>
		{
			Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800fd80:	1d3b      	adds	r3, r7, #4
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fb feac 	bl	800bae0 <gpi_tick_hybrid_reference>
			s.slow_trigger = r.hybrid_tick + radio.packet_air_time;
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4b75      	ldr	r3, [pc, #468]	; (800ff60 <timeout_isr_+0x538>)
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	4a6a      	ldr	r2, [pc, #424]	; (800ff3c <timeout_isr_+0x514>)
 800fd92:	60d3      	str	r3, [r2, #12]
			MAIN_TIMER_CC_REG = r.fast_capture + (s.slow_trigger - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800fd94:	68b9      	ldr	r1, [r7, #8]
 800fd96:	4b69      	ldr	r3, [pc, #420]	; (800ff3c <timeout_isr_+0x514>)
 800fd98:	68da      	ldr	r2, [r3, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	1ad2      	subs	r2, r2, r3
 800fd9e:	4b6a      	ldr	r3, [pc, #424]	; (800ff48 <timeout_isr_+0x520>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	440a      	add	r2, r1
 800fda4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800fda6:	4b6f      	ldr	r3, [pc, #444]	; (800ff64 <timeout_isr_+0x53c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2208      	movs	r2, #8
 800fdac:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 5 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 800fdae:	4b6d      	ldr	r3, [pc, #436]	; (800ff64 <timeout_isr_+0x53c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	69d9      	ldr	r1, [r3, #28]
 800fdb4:	4b6a      	ldr	r3, [pc, #424]	; (800ff60 <timeout_isr_+0x538>)
 800fdb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdb8:	4613      	mov	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	4a6a      	ldr	r2, [pc, #424]	; (800ff68 <timeout_isr_+0x540>)
 800fdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc4:	09da      	lsrs	r2, r3, #7
 800fdc6:	4b67      	ldr	r3, [pc, #412]	; (800ff64 <timeout_isr_+0x53c>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	440a      	add	r2, r1
 800fdcc:	615a      	str	r2, [r3, #20]
			s.grid_timer_flag = 0;
 800fdce:	4b5b      	ldr	r3, [pc, #364]	; (800ff3c <timeout_isr_+0x514>)
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	751a      	strb	r2, [r3, #20]
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800fdd4:	4b5c      	ldr	r3, [pc, #368]	; (800ff48 <timeout_isr_+0x520>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f06f 0202 	mvn.w	r2, #2
 800fddc:	611a      	str	r2, [r3, #16]

			unmask_main_timer(1);
 800fdde:	2001      	movs	r0, #1
 800fde0:	f7fe fd98 	bl	800e914 <unmask_main_timer>
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800fde4:	bf00      	nop
 800fde6:	4b5f      	ldr	r3, [pc, #380]	; (800ff64 <timeout_isr_+0x53c>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b08      	cmp	r3, #8
 800fdf2:	d1f8      	bne.n	800fde6 <timeout_isr_+0x3be>
			unmask_slow_timer(1);
 800fdf4:	2001      	movs	r0, #1
 800fdf6:	f7fe fdb7 	bl	800e968 <unmask_slow_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800fdfa:	4b52      	ldr	r3, [pc, #328]	; (800ff44 <timeout_isr_+0x51c>)
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 8122 	beq.w	8010048 <timeout_isr_+0x620>
 800fe04:	4b50      	ldr	r3, [pc, #320]	; (800ff48 <timeout_isr_+0x520>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe0a:	4b50      	ldr	r3, [pc, #320]	; (800ff4c <timeout_isr_+0x524>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	1ad2      	subs	r2, r2, r3
 800fe10:	4b4f      	ldr	r3, [pc, #316]	; (800ff50 <timeout_isr_+0x528>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4413      	add	r3, r2
 800fe16:	4a4e      	ldr	r2, [pc, #312]	; (800ff50 <timeout_isr_+0x528>)
 800fe18:	6013      	str	r3, [r2, #0]
 800fe1a:	4b4a      	ldr	r3, [pc, #296]	; (800ff44 <timeout_isr_+0x51c>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	701a      	strb	r2, [r3, #0]
#endif
			GPI_TRACE_RETURN_FAST();
 800fe20:	bf00      	nop
 800fe22:	e111      	b.n	8010048 <timeout_isr_+0x620>
		}
		else
		{
			// turn radio off
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800fe24:	2000      	movs	r0, #0
 800fe26:	f7fc fd53 	bl	800c8d0 <SX1276SetOpMode>
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	61fb      	str	r3, [r7, #28]
	if (mask)
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <timeout_isr_+0x412>
		LED_GPIO_Port->BRR = mask;
 800fe34:	4a42      	ldr	r2, [pc, #264]	; (800ff40 <timeout_isr_+0x518>)
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	6293      	str	r3, [r2, #40]	; 0x28
	}
	#endif
	// NOTE: being here implies that Rx is active (state = RESYNC or RX_RUNNING)
	// mask interrupts (radio)
	// NOTE: stopping timeout timer is not needed since this is done implicitely below
	SX1276Write( REG_LR_IRQFLAGSMASK, 0xFF );
 800fe3a:	21ff      	movs	r1, #255	; 0xff
 800fe3c:	2011      	movs	r0, #17
 800fe3e:	f7fc fdbf 	bl	800c9c0 <SX1276Write>

	// turn radio off
	SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800fe42:	2000      	movs	r0, #0
 800fe44:	f7fc fd44 	bl	800c8d0 <SX1276SetOpMode>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	61bb      	str	r3, [r7, #24]
	if (mask)
 800fe4c:	69bb      	ldr	r3, [r7, #24]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <timeout_isr_+0x430>
		LED_GPIO_Port->BRR = mask;
 800fe52:	4a3b      	ldr	r2, [pc, #236]	; (800ff40 <timeout_isr_+0x518>)
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	6293      	str	r3, [r2, #40]	; 0x28
	gpi_led_off(LED_RX | LED_TX);

	#if MX_VERBOSE_STATISTICS
	if (s.radio_start_timestamp & 1)
 800fe58:	4b38      	ldr	r3, [pc, #224]	; (800ff3c <timeout_isr_+0x514>)
 800fe5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe5c:	f003 0301 	and.w	r3, r3, #1
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00f      	beq.n	800fe84 <timeout_isr_+0x45c>
 800fe64:	4b38      	ldr	r3, [pc, #224]	; (800ff48 <timeout_isr_+0x520>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	{
		mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800fe6a:	4b34      	ldr	r3, [pc, #208]	; (800ff3c <timeout_isr_+0x514>)
 800fe6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe6e:	1ad2      	subs	r2, r2, r3
 800fe70:	4b3e      	ldr	r3, [pc, #248]	; (800ff6c <timeout_isr_+0x544>)
 800fe72:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800fe76:	4413      	add	r3, r2
 800fe78:	4a3c      	ldr	r2, [pc, #240]	; (800ff6c <timeout_isr_+0x544>)
 800fe7a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
		s.radio_start_timestamp = 0;
 800fe7e:	4b2f      	ldr	r3, [pc, #188]	; (800ff3c <timeout_isr_+0x514>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	635a      	str	r2, [r3, #52]	; 0x34
	}
	#endif

	#if ENERGEST_CONF_ON
		ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800fe84:	4b2f      	ldr	r3, [pc, #188]	; (800ff44 <timeout_isr_+0x51c>)
 800fe86:	7bdb      	ldrb	r3, [r3, #15]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00d      	beq.n	800fea8 <timeout_isr_+0x480>
 800fe8c:	4b2e      	ldr	r3, [pc, #184]	; (800ff48 <timeout_isr_+0x520>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe92:	4b2e      	ldr	r3, [pc, #184]	; (800ff4c <timeout_isr_+0x524>)
 800fe94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <timeout_isr_+0x528>)
 800fe9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe9c:	4413      	add	r3, r2
 800fe9e:	4a2c      	ldr	r2, [pc, #176]	; (800ff50 <timeout_isr_+0x528>)
 800fea0:	63d3      	str	r3, [r2, #60]	; 0x3c
 800fea2:	4b28      	ldr	r3, [pc, #160]	; (800ff44 <timeout_isr_+0x51c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	73da      	strb	r2, [r3, #15]
	#endif

	if (s.slot_state != RESYNC)
 800fea8:	4b24      	ldr	r3, [pc, #144]	; (800ff3c <timeout_isr_+0x514>)
 800feaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80b1 	beq.w	8010016 <timeout_isr_+0x5ee>

		// if Rx window exceeds limit: start RESYNC
		// NOTE: we start RESYNC immediately (instead of saturating) because we probably lost
		// synchronization and hence do not expect to receive something anymore
		// if (s.rx_trigger_offset > RX_TO_GRID_OFFSET + RX_WINDOW_MAX)
		if (s.rx_trigger_offset > radio.rx_to_grid_offset + 10 * radio.rx_window_max)
 800feb4:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <timeout_isr_+0x514>)
 800feb6:	6a19      	ldr	r1, [r3, #32]
 800feb8:	4b29      	ldr	r3, [pc, #164]	; (800ff60 <timeout_isr_+0x538>)
 800feba:	6918      	ldr	r0, [r3, #16]
 800febc:	4b28      	ldr	r3, [pc, #160]	; (800ff60 <timeout_isr_+0x538>)
 800febe:	69da      	ldr	r2, [r3, #28]
 800fec0:	4613      	mov	r3, r2
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	4413      	add	r3, r2
 800fec6:	005b      	lsls	r3, r3, #1
 800fec8:	4403      	add	r3, r0
 800feca:	4299      	cmp	r1, r3
 800fecc:	f240 8092 	bls.w	800fff4 <timeout_isr_+0x5cc>
		{
			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_window_overflow++;
 800fed0:	4b26      	ldr	r3, [pc, #152]	; (800ff6c <timeout_isr_+0x544>)
 800fed2:	f8b3 387c 	ldrh.w	r3, [r3, #2172]	; 0x87c
 800fed6:	3301      	adds	r3, #1
 800fed8:	b29a      	uxth	r2, r3
 800feda:	4b24      	ldr	r3, [pc, #144]	; (800ff6c <timeout_isr_+0x544>)
 800fedc:	f8a3 287c 	strh.w	r2, [r3, #2172]	; 0x87c
				mx.stat_counter.num_resync++;
 800fee0:	4b22      	ldr	r3, [pc, #136]	; (800ff6c <timeout_isr_+0x544>)
 800fee2:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800fee6:	3301      	adds	r3, #1
 800fee8:	b29a      	uxth	r2, r3
 800feea:	4b20      	ldr	r3, [pc, #128]	; (800ff6c <timeout_isr_+0x544>)
 800feec:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
			#endif
			GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx window overflow: %u > %u -> enter RESYNC",
 800fef0:	bf00      	nop
 800fef2:	2300      	movs	r3, #0
 800fef4:	617b      	str	r3, [r7, #20]
	if (2 == mode)
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d108      	bne.n	800ff0e <timeout_isr_+0x4e6>
		s.slot_state = IDLE;
 800fefc:	4b0f      	ldr	r3, [pc, #60]	; (800ff3c <timeout_isr_+0x514>)
 800fefe:	220c      	movs	r2, #12
 800ff00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 800ff04:	4b0d      	ldr	r3, [pc, #52]	; (800ff3c <timeout_isr_+0x514>)
 800ff06:	2201      	movs	r2, #1
 800ff08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ff0c:	e038      	b.n	800ff80 <timeout_isr_+0x558>
	else if (1 == mode)
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d108      	bne.n	800ff26 <timeout_isr_+0x4fe>
		s.slot_state = RESYNC;
 800ff14:	4b09      	ldr	r3, [pc, #36]	; (800ff3c <timeout_isr_+0x514>)
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800ff1c:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <timeout_isr_+0x514>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ff24:	e02c      	b.n	800ff80 <timeout_isr_+0x558>
	else if (STOP == s.next_slot_task)
 800ff26:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <timeout_isr_+0x514>)
 800ff28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	d11f      	bne.n	800ff70 <timeout_isr_+0x548>
		s.slot_state = IDLE;
 800ff30:	4b02      	ldr	r3, [pc, #8]	; (800ff3c <timeout_isr_+0x514>)
 800ff32:	220c      	movs	r2, #12
 800ff34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff38:	e022      	b.n	800ff80 <timeout_isr_+0x558>
 800ff3a:	bf00      	nop
 800ff3c:	20000410 	.word	0x20000410
 800ff40:	48000800 	.word	0x48000800
 800ff44:	2000112c 	.word	0x2000112c
 800ff48:	200012c8 	.word	0x200012c8
 800ff4c:	20001308 	.word	0x20001308
 800ff50:	20000f10 	.word	0x20000f10
 800ff54:	20001430 	.word	0x20001430
 800ff58:	00030d40 	.word	0x00030d40
 800ff5c:	2000045c 	.word	0x2000045c
 800ff60:	200003c4 	.word	0x200003c4
 800ff64:	200011e4 	.word	0x200011e4
 800ff68:	4325c53f 	.word	0x4325c53f
 800ff6c:	200014f0 	.word	0x200014f0
		s.slot_state = RESYNC;
 800ff70:	4b38      	ldr	r3, [pc, #224]	; (8010054 <timeout_isr_+0x62c>)
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800ff78:	4b36      	ldr	r3, [pc, #216]	; (8010054 <timeout_isr_+0x62c>)
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 800ff80:	f7fe fce0 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800ff84:	4b34      	ldr	r3, [pc, #208]	; (8010058 <timeout_isr_+0x630>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f06f 0202 	mvn.w	r2, #2
 800ff8c:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 800ff8e:	f7fe fd03 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800ff92:	4b32      	ldr	r3, [pc, #200]	; (801005c <timeout_isr_+0x634>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2201      	movs	r2, #1
 800ff98:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 800ff9a:	2001      	movs	r0, #1
 800ff9c:	f7fe fc92 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d022      	beq.n	800ffec <timeout_isr_+0x5c4>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 800ffa6:	4b2c      	ldr	r3, [pc, #176]	; (8010058 <timeout_isr_+0x630>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fb fde1 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 800ffb2:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800ffb4:	4b2a      	ldr	r3, [pc, #168]	; (8010060 <timeout_isr_+0x638>)
 800ffb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb8:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 800ffba:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 800ffbc:	4b28      	ldr	r3, [pc, #160]	; (8010060 <timeout_isr_+0x638>)
 800ffbe:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 800ffc6:	4a23      	ldr	r2, [pc, #140]	; (8010054 <timeout_isr_+0x62c>)
 800ffc8:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 800ffca:	f7fe fcbb 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800ffce:	4b22      	ldr	r3, [pc, #136]	; (8010058 <timeout_isr_+0x630>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f06f 0202 	mvn.w	r2, #2
 800ffd6:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 800ffd8:	4b1f      	ldr	r3, [pc, #124]	; (8010058 <timeout_isr_+0x630>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffde:	4b1e      	ldr	r3, [pc, #120]	; (8010058 <timeout_isr_+0x630>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800ffe6:	635a      	str	r2, [r3, #52]	; 0x34
 800ffe8:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 800ffec:	2000      	movs	r0, #0
 800ffee:	f7fe fc91 	bl	800e914 <unmask_main_timer>
			// (more precisely: if RESYNC was active before entering current function)
			start_grid_timer();
		}
	}

	PROFILE_ISR("timeout ISR return");
 800fff2:	e010      	b.n	8010016 <timeout_isr_+0x5ee>
			s.next_trigger_tick = s.next_grid_tick -
 800fff4:	4b17      	ldr	r3, [pc, #92]	; (8010054 <timeout_isr_+0x62c>)
 800fff6:	685a      	ldr	r2, [r3, #4]
				((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 800fff8:	4b16      	ldr	r3, [pc, #88]	; (8010054 <timeout_isr_+0x62c>)
 800fffa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d102      	bne.n	8010008 <timeout_isr_+0x5e0>
 8010002:	4b14      	ldr	r3, [pc, #80]	; (8010054 <timeout_isr_+0x62c>)
 8010004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010006:	e001      	b.n	801000c <timeout_isr_+0x5e4>
 8010008:	4b12      	ldr	r3, [pc, #72]	; (8010054 <timeout_isr_+0x62c>)
 801000a:	6a1b      	ldr	r3, [r3, #32]
			s.next_trigger_tick = s.next_grid_tick -
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	4a11      	ldr	r2, [pc, #68]	; (8010054 <timeout_isr_+0x62c>)
 8010010:	6093      	str	r3, [r2, #8]
			start_grid_timer();
 8010012:	f7fe fd39 	bl	800ea88 <start_grid_timer>
	PROFILE_ISR("timeout ISR return");
 8010016:	bf00      	nop
#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8010018:	4b12      	ldr	r3, [pc, #72]	; (8010064 <timeout_isr_+0x63c>)
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d015      	beq.n	801004c <timeout_isr_+0x624>
 8010020:	4b0d      	ldr	r3, [pc, #52]	; (8010058 <timeout_isr_+0x630>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010026:	4b10      	ldr	r3, [pc, #64]	; (8010068 <timeout_isr_+0x640>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	1ad2      	subs	r2, r2, r3
 801002c:	4b0f      	ldr	r3, [pc, #60]	; (801006c <timeout_isr_+0x644>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4413      	add	r3, r2
 8010032:	4a0e      	ldr	r2, [pc, #56]	; (801006c <timeout_isr_+0x644>)
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	4b0b      	ldr	r3, [pc, #44]	; (8010064 <timeout_isr_+0x63c>)
 8010038:	2200      	movs	r2, #0
 801003a:	701a      	strb	r2, [r3, #0]
#endif
	GPI_TRACE_RETURN_FAST();
 801003c:	bf00      	nop
 801003e:	e005      	b.n	801004c <timeout_isr_+0x624>
			GPI_TRACE_RETURN_FAST();
 8010040:	bf00      	nop
 8010042:	e004      	b.n	801004e <timeout_isr_+0x626>
				GPI_TRACE_RETURN_FAST();
 8010044:	bf00      	nop
 8010046:	e002      	b.n	801004e <timeout_isr_+0x626>
			GPI_TRACE_RETURN_FAST();
 8010048:	bf00      	nop
 801004a:	e000      	b.n	801004e <timeout_isr_+0x626>
	GPI_TRACE_RETURN_FAST();
 801004c:	bf00      	nop
}
 801004e:	3734      	adds	r7, #52	; 0x34
 8010050:	46bd      	mov	sp, r7
 8010052:	bd90      	pop	{r4, r7, pc}
 8010054:	20000410 	.word	0x20000410
 8010058:	200012c8 	.word	0x200012c8
 801005c:	200011e4 	.word	0x200011e4
 8010060:	200003c4 	.word	0x200003c4
 8010064:	2000112c 	.word	0x2000112c
 8010068:	20001308 	.word	0x20001308
 801006c:	20000f10 	.word	0x20000f10

08010070 <grid_timer_isr>:

//**************************************************************************************************

// grid timer ISR
// this is one of the central transport layer routines
void LED_ISR(grid_timer_isr, LED_GRID_TIMER_ISR)
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	4b14      	ldr	r3, [pc, #80]	; (80100c8 <grid_timer_isr+0x58>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d008      	beq.n	8010090 <grid_timer_isr+0x20>
 801007e:	4b13      	ldr	r3, [pc, #76]	; (80100cc <grid_timer_isr+0x5c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	4a12      	ldr	r2, [pc, #72]	; (80100d0 <grid_timer_isr+0x60>)
 8010086:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 801008a:	4b0f      	ldr	r3, [pc, #60]	; (80100c8 <grid_timer_isr+0x58>)
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
 8010090:	2300      	movs	r3, #0
 8010092:	603b      	str	r3, [r7, #0]
	if (mask)
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d005      	beq.n	80100a6 <grid_timer_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 801009a:	4b0e      	ldr	r3, [pc, #56]	; (80100d4 <grid_timer_isr+0x64>)
 801009c:	695a      	ldr	r2, [r3, #20]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	490c      	ldr	r1, [pc, #48]	; (80100d4 <grid_timer_isr+0x64>)
 80100a2:	4053      	eors	r3, r2
 80100a4:	614b      	str	r3, [r1, #20]
 80100a6:	f000 f817 	bl	80100d8 <grid_timer_isr_>
 80100aa:	2300      	movs	r3, #0
 80100ac:	607b      	str	r3, [r7, #4]
	if (mask)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d005      	beq.n	80100c0 <grid_timer_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 80100b4:	4b07      	ldr	r3, [pc, #28]	; (80100d4 <grid_timer_isr+0x64>)
 80100b6:	695a      	ldr	r2, [r3, #20]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4906      	ldr	r1, [pc, #24]	; (80100d4 <grid_timer_isr+0x64>)
 80100bc:	4053      	eors	r3, r2
 80100be:	614b      	str	r3, [r1, #20]
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	200003b4 	.word	0x200003b4
 80100cc:	200012c8 	.word	0x200012c8
 80100d0:	200014f0 	.word	0x200014f0
 80100d4:	48000800 	.word	0x48000800

080100d8 <grid_timer_isr_>:
{
 80100d8:	b5b0      	push	{r4, r5, r7, lr}
 80100da:	b0c6      	sub	sp, #280	; 0x118
 80100dc:	af00      	add	r7, sp, #0
 80100de:	4bb4      	ldr	r3, [pc, #720]	; (80103b0 <grid_timer_isr_+0x2d8>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 80100e4:	4ab3      	ldr	r2, [pc, #716]	; (80103b4 <grid_timer_isr_+0x2dc>)
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	4bb3      	ldr	r3, [pc, #716]	; (80103b8 <grid_timer_isr_+0x2e0>)
 80100ea:	2201      	movs	r2, #1
 80100ec:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_FUNCTION_FAST();
 80100ee:	bf00      	nop
	PROFILE_ISR("grid timer ISR entry");
 80100f0:	bf00      	nop
	mask_main_timer();
 80100f2:	f7fe fc27 	bl	800e944 <mask_main_timer>

	//clear IRQ
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80100f6:	4bae      	ldr	r3, [pc, #696]	; (80103b0 <grid_timer_isr_+0x2d8>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f06f 0202 	mvn.w	r2, #2
 80100fe:	611a      	str	r2, [r3, #16]

	mask_slow_timer();
 8010100:	f7fe fc4a 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8010104:	4bad      	ldr	r3, [pc, #692]	; (80103bc <grid_timer_isr_+0x2e4>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2201      	movs	r2, #1
 801010a:	605a      	str	r2, [r3, #4]

	// if STOP requested: stop
	if (STOP == s.next_slot_task)
 801010c:	4bac      	ldr	r3, [pc, #688]	; (80103c0 <grid_timer_isr_+0x2e8>)
 801010e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010112:	2b02      	cmp	r3, #2
 8010114:	d130      	bne.n	8010178 <grid_timer_isr_+0xa0>
	{
		#if MX_VERBOSE_STATISTICS
			mx.stat_counter.slot_off = mx.slot_number;	// the old one (viewpoint: turn off after last processing)
 8010116:	4bab      	ldr	r3, [pc, #684]	; (80103c4 <grid_timer_isr_+0x2ec>)
 8010118:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801011c:	b29a      	uxth	r2, r3
 801011e:	4ba9      	ldr	r3, [pc, #676]	; (80103c4 <grid_timer_isr_+0x2ec>)
 8010120:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
 8010124:	2300      	movs	r3, #0
 8010126:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	gpi_atomic_set(&(mx.events), BV(event));
 801012a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801012e:	2201      	movs	r2, #1
 8010130:	fa02 f303 	lsl.w	r3, r2, r3
 8010134:	4aa3      	ldr	r2, [pc, #652]	; (80103c4 <grid_timer_isr_+0x2ec>)
 8010136:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801013a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801013e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801014a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801014e:	f3bf 8f5f 	dmb	sy
 8010152:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8010156:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801015a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801015e:	e851 0f00 	ldrex	r0, [r1]
 8010162:	ea40 0003 	orr.w	r0, r0, r3
 8010166:	e841 0300 	strex	r3, r0, [r1]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1f7      	bne.n	801015e <grid_timer_isr_+0x86>
 801016e:	f3bf 8f5f 	dmb	sy
		#endif
		set_event(STOPPED);
		GPI_TRACE_MSG_FAST(TRACE_INFO, "transport layer stopped");
 8010172:	bf00      	nop

		GPI_TRACE_RETURN_FAST();
 8010174:	f001 ba3d 	b.w	80115f2 <grid_timer_isr_+0x151a>
    }

	// if Rx
	if ((RESYNC == s.slot_state) || (RX == s.next_slot_task))
 8010178:	4b91      	ldr	r3, [pc, #580]	; (80103c0 <grid_timer_isr_+0x2e8>)
 801017a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801017e:	2b00      	cmp	r3, #0
 8010180:	d005      	beq.n	801018e <grid_timer_isr_+0xb6>
 8010182:	4b8f      	ldr	r3, [pc, #572]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010184:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010188:	2b00      	cmp	r3, #0
 801018a:	f040 8200 	bne.w	801058e <grid_timer_isr_+0x4b6>
	{
		PROFILE_ISR("grid timer ISR start Rx begin");
 801018e:	bf00      	nop

		Gpi_Hybrid_Reference	r;
		Gpi_Fast_Tick_Native 	trigger_tick;
		// Gpi_Slow_Tick_Native	trigger_tick_slow;
		int_fast8_t				late = 1;
 8010190:	2301      	movs	r3, #1
 8010192:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

		// compute exact trigger time
		// trigger_tick = gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) + GPI_TICK_US_TO_FAST(ISR_LATENCY_BUFFER);
		// trigger_tick = s.next_grid_tick;
		// trigger_tick = s.hybrid_trigger;
		trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 8010196:	4b86      	ldr	r3, [pc, #536]	; (80103b0 <grid_timer_isr_+0x2d8>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801019c:	4b8a      	ldr	r3, [pc, #552]	; (80103c8 <grid_timer_isr_+0x2f0>)
 801019e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a0:	011b      	lsls	r3, r3, #4
 80101a2:	4413      	add	r3, r2
 80101a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		// 	trigger_tick = MAIN_TIMER_CNT_REG;

		// trigger_tick_slow = LP_TIMER_CMP_REG + (Gpi_Slow_Tick_Native)((Gpi_Fast_Tick_Native)(ISR_LATENCY_SLOW) / (Gpi_Fast_Tick_Native)HYBRID_SLOW_RATIO);

		// rx begin
		assert_reset((chirp_config.lora_bw >= 7)&&(chirp_config.lora_bw <= 9));
 80101a8:	4b88      	ldr	r3, [pc, #544]	; (80103cc <grid_timer_isr_+0x2f4>)
 80101aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101ae:	2b06      	cmp	r3, #6
 80101b0:	d904      	bls.n	80101bc <grid_timer_isr_+0xe4>
 80101b2:	4b86      	ldr	r3, [pc, #536]	; (80103cc <grid_timer_isr_+0x2f4>)
 80101b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101b8:	2b09      	cmp	r3, #9
 80101ba:	d90c      	bls.n	80101d6 <grid_timer_isr_+0xfe>
 80101bc:	4b83      	ldr	r3, [pc, #524]	; (80103cc <grid_timer_isr_+0x2f4>)
 80101be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101c2:	2b06      	cmp	r3, #6
 80101c4:	d907      	bls.n	80101d6 <grid_timer_isr_+0xfe>
 80101c6:	4b81      	ldr	r3, [pc, #516]	; (80103cc <grid_timer_isr_+0x2f4>)
 80101c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101cc:	2b09      	cmp	r3, #9
 80101ce:	d902      	bls.n	80101d6 <grid_timer_isr_+0xfe>
  __ASM volatile ("cpsid f" : : : "memory");
 80101d0:	b671      	cpsid	f
 80101d2:	f7fe f9ad 	bl	800e530 <NVIC_SystemReset>

		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80101d6:	2033      	movs	r0, #51	; 0x33
 80101d8:	f7fc fc04 	bl	800c9e4 <SX1276Read>
 80101dc:	4603      	mov	r3, r0
 80101de:	b25b      	sxtb	r3, r3
 80101e0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80101e4:	b25b      	sxtb	r3, r3
 80101e6:	f043 0301 	orr.w	r3, r3, #1
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	4619      	mov	r1, r3
 80101f0:	2033      	movs	r0, #51	; 0x33
 80101f2:	f7fc fbe5 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80101f6:	211d      	movs	r1, #29
 80101f8:	203b      	movs	r0, #59	; 0x3b
 80101fa:	f7fc fbe1 	bl	800c9c0 <SX1276Write>

		SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80101fe:	2031      	movs	r0, #49	; 0x31
 8010200:	f7fc fbf0 	bl	800c9e4 <SX1276Read>
 8010204:	4603      	mov	r3, r0
 8010206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801020a:	b2db      	uxtb	r3, r3
 801020c:	4619      	mov	r1, r3
 801020e:	2031      	movs	r0, #49	; 0x31
 8010210:	f7fc fbd6 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8010214:	2100      	movs	r1, #0
 8010216:	2030      	movs	r0, #48	; 0x30
 8010218:	f7fc fbd2 	bl	800c9c0 <SX1276Write>
		if(chirp_config.lora_bw != 9)
 801021c:	4b6b      	ldr	r3, [pc, #428]	; (80103cc <grid_timer_isr_+0x2f4>)
 801021e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010222:	2b09      	cmp	r3, #9
 8010224:	d004      	beq.n	8010230 <grid_timer_isr_+0x158>
		{
			SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8010226:	2140      	movs	r1, #64	; 0x40
 8010228:	202f      	movs	r0, #47	; 0x2f
 801022a:	f7fc fbc9 	bl	800c9c0 <SX1276Write>
 801022e:	e00a      	b.n	8010246 <grid_timer_isr_+0x16e>
		}
		else
		{
			SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8010230:	2031      	movs	r0, #49	; 0x31
 8010232:	f7fc fbd7 	bl	800c9e4 <SX1276Read>
 8010236:	4603      	mov	r3, r0
 8010238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801023c:	b2db      	uxtb	r3, r3
 801023e:	4619      	mov	r1, r3
 8010240:	2031      	movs	r0, #49	; 0x31
 8010242:	f7fc fbbd 	bl	800c9c0 <SX1276Write>
		}

		if (RESYNC != s.slot_state)
 8010246:	4b5e      	ldr	r3, [pc, #376]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801024c:	2b00      	cmp	r3, #0
 801024e:	d047      	beq.n	80102e0 <grid_timer_isr_+0x208>
		{
			#if MX_LBT_ACCESS
			trigger_tick += GPI_TICK_US_TO_FAST2(LBT_DELAY_IN_US);
 8010250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010254:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801025c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			#endif
			// wait until trigger time has been reached
			PROFILE_ISR();
 8010260:	bf00      	nop

			// while (gpi_tick_compare_slow_native(gpi_tick_slow_native(), trigger_tick_slow) < 0)
			// while (gpi_tick_compare_hybrid(gpi_tick_hybrid(), trigger_tick) <= 0)
			while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0)
 8010262:	e002      	b.n	801026a <grid_timer_isr_+0x192>
				late = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801026a:	4b51      	ldr	r3, [pc, #324]	; (80103b0 <grid_timer_isr_+0x2d8>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801027c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801028a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801028e:	2b00      	cmp	r3, #0
 8010290:	db07      	blt.n	80102a2 <grid_timer_isr_+0x1ca>
 8010292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010296:	2b00      	cmp	r3, #0
 8010298:	bf14      	ite	ne
 801029a:	2301      	movne	r3, #1
 801029c:	2300      	moveq	r3, #0
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	e001      	b.n	80102a6 <grid_timer_isr_+0x1ce>
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
			while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0)
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	dddc      	ble.n	8010264 <grid_timer_isr_+0x18c>

			PROFILE_ISR();
 80102aa:	bf00      	nop

			// set radio in rx mode
			SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80102ac:	2005      	movs	r0, #5
 80102ae:	f7fc fb0f 	bl	800c8d0 <SX1276SetOpMode>
 80102b2:	2300      	movs	r3, #0
 80102b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (mask)
 80102b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d003      	beq.n	80102c8 <grid_timer_isr_+0x1f0>
		LED_GPIO_Port->BSRR = mask;
 80102c0:	4a43      	ldr	r2, [pc, #268]	; (80103d0 <grid_timer_isr_+0x2f8>)
 80102c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80102c6:	6193      	str	r3, [r2, #24]
			gpi_led_on(LED_RX);

			#if MX_VERBOSE_STATISTICS
				if (late)
 80102c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d007      	beq.n	80102e0 <grid_timer_isr_+0x208>
					mx.stat_counter.num_rx_late++;
 80102d0:	4b3c      	ldr	r3, [pc, #240]	; (80103c4 <grid_timer_isr_+0x2ec>)
 80102d2:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
 80102d6:	3301      	adds	r3, #1
 80102d8:	b29a      	uxth	r2, r3
 80102da:	4b3a      	ldr	r3, [pc, #232]	; (80103c4 <grid_timer_isr_+0x2ec>)
 80102dc:	f8a3 2888 	strh.w	r2, [r3, #2184]	; 0x888
			#endif
		}

		// during RESYNC or if we are late: start manually (immediately)
		if (late)
 80102e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d012      	beq.n	801030e <grid_timer_isr_+0x236>
		{
			// set radio in rx mode
			// while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0);
			SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80102e8:	2005      	movs	r0, #5
 80102ea:	f7fc faf1 	bl	800c8d0 <SX1276SetOpMode>
 80102ee:	2300      	movs	r3, #0
 80102f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (mask)
 80102f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d003      	beq.n	8010304 <grid_timer_isr_+0x22c>
		LED_GPIO_Port->BSRR = mask;
 80102fc:	4a34      	ldr	r2, [pc, #208]	; (80103d0 <grid_timer_isr_+0x2f8>)
 80102fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010302:	6193      	str	r3, [r2, #24]
 8010304:	4b2a      	ldr	r3, [pc, #168]	; (80103b0 <grid_timer_isr_+0x2d8>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			gpi_led_on(LED_RX);
			#if MX_VERBOSE_STATISTICS
				trigger_tick = gpi_tick_fast_native();
 801030a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			#endif
        }

		#if MX_VERBOSE_STATISTICS
			s.radio_start_timestamp = trigger_tick | 1;
 801030e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010312:	f043 0301 	orr.w	r3, r3, #1
 8010316:	4a2a      	ldr	r2, [pc, #168]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010318:	6353      	str	r3, [r2, #52]	; 0x34
 801031a:	4b25      	ldr	r3, [pc, #148]	; (80103b0 <grid_timer_isr_+0x2d8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 8010320:	4a24      	ldr	r2, [pc, #144]	; (80103b4 <grid_timer_isr_+0x2dc>)
 8010322:	63d3      	str	r3, [r2, #60]	; 0x3c
 8010324:	4b24      	ldr	r3, [pc, #144]	; (80103b8 <grid_timer_isr_+0x2e0>)
 8010326:	2201      	movs	r2, #1
 8010328:	73da      	strb	r2, [r3, #15]
		#endif

		// unmask IRQs
		// enable RxDone, PayloadCrcError and ValidHeader interrupt
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801032a:	218f      	movs	r1, #143	; 0x8f
 801032c:	2011      	movs	r0, #17
 801032e:	f7fc fb47 	bl	800c9c0 <SX1276Write>
											RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );

		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK &
 8010332:	2040      	movs	r0, #64	; 0x40
 8010334:	f7fc fb56 	bl	800c9e4 <SX1276Read>
 8010338:	4603      	mov	r3, r0
 801033a:	b25b      	sxtb	r3, r3
		RFLR_DIOMAPPING1_DIO3_MASK) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO3_01);
 801033c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8010340:	b25b      	sxtb	r3, r3
 8010342:	f043 0301 	orr.w	r3, r3, #1
 8010346:	b25b      	sxtb	r3, r3
		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK &
 8010348:	b2db      	uxtb	r3, r3
 801034a:	4619      	mov	r1, r3
 801034c:	2040      	movs	r0, #64	; 0x40
 801034e:	f7fc fb37 	bl	800c9c0 <SX1276Write>

		#if MX_HEADER_CHECK
			s.valid_header = 0;
 8010352:	4b1b      	ldr	r3, [pc, #108]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		#endif

		// allocate rx queue destination slot
        SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801035a:	2100      	movs	r1, #0
 801035c:	200f      	movs	r0, #15
 801035e:	f7fc fb2f 	bl	800c9c0 <SX1276Write>
		// SX1276Write( REG_LR_FIFOADDRPTR, 0 );

		mx.rx_queue_num_writing = mx.rx_queue_num_written + 1;
 8010362:	4b18      	ldr	r3, [pc, #96]	; (80103c4 <grid_timer_isr_+0x2ec>)
 8010364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010366:	3301      	adds	r3, #1
 8010368:	4a16      	ldr	r2, [pc, #88]	; (80103c4 <grid_timer_isr_+0x2ec>)
 801036a:	6353      	str	r3, [r2, #52]	; 0x34
		s.event_tick_nominal = s.next_grid_tick + radio.packet_air_time;
 801036c:	4b14      	ldr	r3, [pc, #80]	; (80103c0 <grid_timer_isr_+0x2e8>)
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	4b15      	ldr	r3, [pc, #84]	; (80103c8 <grid_timer_isr_+0x2f0>)
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	4413      	add	r3, r2
 8010376:	4a12      	ldr	r2, [pc, #72]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010378:	6013      	str	r3, [r2, #0]

		r = gpi_tick_hybrid_reference();
 801037a:	f107 031c 	add.w	r3, r7, #28
 801037e:	4618      	mov	r0, r3
 8010380:	f7fb fbae 	bl	800bae0 <gpi_tick_hybrid_reference>

		// if RESYNC: restart grid timer (-> potentially long interval)
		// NOTE: timeout timer is called implicitly while RESYNC
		if (s.slot_state == RESYNC)
 8010384:	4b0e      	ldr	r3, [pc, #56]	; (80103c0 <grid_timer_isr_+0x2e8>)
 8010386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801038a:	2b00      	cmp	r3, #0
 801038c:	d122      	bne.n	80103d4 <grid_timer_isr_+0x2fc>
			// ATTENTION: don't do s.next_grid_tick += MX_SLOT_LENGTH_RESYNC because grid timer is also
			// triggered by frames from interferers (Rx -> SFD -> ... (broken/invalid) -> timeout
			// -> grid timer) and hence current time might be far away from s.next_grid_tick. With
			// s.next_grid_tick += MX_SLOT_LENGTH_RESYNC, s.next_grid_tick could end up in the far
			// future if it gets incremented frequently.
			s.next_grid_tick = r.hybrid_tick + ((chirp_config.mx_slot_length * 5) / 2);
 801038e:	69f9      	ldr	r1, [r7, #28]
 8010390:	4b0e      	ldr	r3, [pc, #56]	; (80103cc <grid_timer_isr_+0x2f4>)
 8010392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010394:	4613      	mov	r3, r2
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4413      	add	r3, r2
 801039a:	085b      	lsrs	r3, r3, #1
 801039c:	440b      	add	r3, r1
 801039e:	4a08      	ldr	r2, [pc, #32]	; (80103c0 <grid_timer_isr_+0x2e8>)
 80103a0:	6053      	str	r3, [r2, #4]
			s.next_trigger_tick = s.next_grid_tick;
 80103a2:	4b07      	ldr	r3, [pc, #28]	; (80103c0 <grid_timer_isr_+0x2e8>)
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	4a06      	ldr	r2, [pc, #24]	; (80103c0 <grid_timer_isr_+0x2e8>)
 80103a8:	6093      	str	r3, [r2, #8]
			start_grid_timer();
 80103aa:	f7fe fb6d 	bl	800ea88 <start_grid_timer>
			s.slot_state = RX_RUNNING;

			GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "timeout: %lu", (long)gpi_tick_hybrid_to_us(t));
		}

		PROFILE_ISR("grid timer ISR start Rx end");
 80103ae:	e0ea      	b.n	8010586 <grid_timer_isr_+0x4ae>
 80103b0:	200012c8 	.word	0x200012c8
 80103b4:	20001308 	.word	0x20001308
 80103b8:	2000112c 	.word	0x2000112c
 80103bc:	200011e4 	.word	0x200011e4
 80103c0:	20000410 	.word	0x20000410
 80103c4:	200014f0 	.word	0x200014f0
 80103c8:	200003c4 	.word	0x200003c4
 80103cc:	20001430 	.word	0x20001430
 80103d0:	48000800 	.word	0x48000800
				s.lbt_rx_on = 1;
 80103d4:	4baa      	ldr	r3, [pc, #680]	; (8010680 <grid_timer_isr_+0x5a8>)
 80103d6:	2201      	movs	r2, #1
 80103d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				s.lbt_channel_seq_no = 0;
 80103dc:	4ba8      	ldr	r3, [pc, #672]	; (8010680 <grid_timer_isr_+0x5a8>)
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				SX1276Write( REG_LR_MODEMSTAT, SX1276Read( REG_LR_MODEMSTAT ) & ~ RFLR_MODEMSTAT_MODEM_STATUS_SIGNAL_MASK);
 80103e4:	2018      	movs	r0, #24
 80103e6:	f7fc fafd 	bl	800c9e4 <SX1276Read>
 80103ea:	4603      	mov	r3, r0
 80103ec:	f023 0301 	bic.w	r3, r3, #1
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	4619      	mov	r1, r3
 80103f4:	2018      	movs	r0, #24
 80103f6:	f7fc fae3 	bl	800c9c0 <SX1276Write>
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 80103fa:	4ba1      	ldr	r3, [pc, #644]	; (8010680 <grid_timer_isr_+0x5a8>)
 80103fc:	685a      	ldr	r2, [r3, #4]
 80103fe:	4ba0      	ldr	r3, [pc, #640]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010400:	6a1b      	ldr	r3, [r3, #32]
 8010402:	441a      	add	r2, r3
 8010404:	4b9f      	ldr	r3, [pc, #636]	; (8010684 <grid_timer_isr_+0x5ac>)
 8010406:	691b      	ldr	r3, [r3, #16]
 8010408:	1ad1      	subs	r1, r2, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us) * CHANNEL_ALTER + 4 * radio.grid_drift_offset + GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 801040a:	4b9f      	ldr	r3, [pc, #636]	; (8010688 <grid_timer_isr_+0x5b0>)
 801040c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801040e:	4a9f      	ldr	r2, [pc, #636]	; (801068c <grid_timer_isr_+0x5b4>)
 8010410:	fba2 2303 	umull	r2, r3, r2, r3
 8010414:	0c9b      	lsrs	r3, r3, #18
 8010416:	4a9e      	ldr	r2, [pc, #632]	; (8010690 <grid_timer_isr_+0x5b8>)
 8010418:	fb02 f003 	mul.w	r0, r2, r3
 801041c:	4b9a      	ldr	r3, [pc, #616]	; (8010688 <grid_timer_isr_+0x5b0>)
 801041e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010420:	4a9c      	ldr	r2, [pc, #624]	; (8010694 <grid_timer_isr_+0x5bc>)
 8010422:	fba2 2303 	umull	r2, r3, r2, r3
 8010426:	099a      	lsrs	r2, r3, #6
 8010428:	4b9a      	ldr	r3, [pc, #616]	; (8010694 <grid_timer_isr_+0x5bc>)
 801042a:	fba3 4302 	umull	r4, r3, r3, r2
 801042e:	099b      	lsrs	r3, r3, #6
 8010430:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010434:	fb04 f303 	mul.w	r3, r4, r3
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 801043e:	fb02 f303 	mul.w	r3, r2, r3
 8010442:	4418      	add	r0, r3
 8010444:	4b90      	ldr	r3, [pc, #576]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010448:	4b92      	ldr	r3, [pc, #584]	; (8010694 <grid_timer_isr_+0x5bc>)
 801044a:	fba3 4302 	umull	r4, r3, r3, r2
 801044e:	099b      	lsrs	r3, r3, #6
 8010450:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010454:	fb04 f303 	mul.w	r3, r4, r3
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	015b      	lsls	r3, r3, #5
 801045c:	4403      	add	r3, r0
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 801045e:	18ca      	adds	r2, r1, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us) * CHANNEL_ALTER + 4 * radio.grid_drift_offset + GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 8010460:	4b88      	ldr	r3, [pc, #544]	; (8010684 <grid_timer_isr_+0x5ac>)
 8010462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4413      	add	r3, r2
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 8010468:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801046c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			s.slow_trigger = t;
 8010474:	4a82      	ldr	r2, [pc, #520]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801047a:	60d3      	str	r3, [r2, #12]
				s.next_grid_tick_last = s.next_grid_tick;
 801047c:	4b80      	ldr	r3, [pc, #512]	; (8010680 <grid_timer_isr_+0x5a8>)
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	4a7f      	ldr	r2, [pc, #508]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010482:	6413      	str	r3, [r2, #64]	; 0x40
				t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset +
 8010484:	4b7e      	ldr	r3, [pc, #504]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010488:	4b7d      	ldr	r3, [pc, #500]	; (8010680 <grid_timer_isr_+0x5a8>)
 801048a:	6a1b      	ldr	r3, [r3, #32]
 801048c:	441a      	add	r2, r3
 801048e:	4b7d      	ldr	r3, [pc, #500]	; (8010684 <grid_timer_isr_+0x5ac>)
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	1ad1      	subs	r1, r2, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us - radio.isr_latency_buffer + LBT_DELAY_IN_US);
 8010494:	4b7c      	ldr	r3, [pc, #496]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010498:	4b7a      	ldr	r3, [pc, #488]	; (8010684 <grid_timer_isr_+0x5ac>)
 801049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80104a2:	3310      	adds	r3, #16
 80104a4:	4a79      	ldr	r2, [pc, #484]	; (801068c <grid_timer_isr_+0x5b4>)
 80104a6:	fba2 2303 	umull	r2, r3, r2, r3
 80104aa:	0c9b      	lsrs	r3, r3, #18
 80104ac:	4a7a      	ldr	r2, [pc, #488]	; (8010698 <grid_timer_isr_+0x5c0>)
 80104ae:	fb02 f003 	mul.w	r0, r2, r3
 80104b2:	4b75      	ldr	r3, [pc, #468]	; (8010688 <grid_timer_isr_+0x5b0>)
 80104b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80104b6:	4b73      	ldr	r3, [pc, #460]	; (8010684 <grid_timer_isr_+0x5ac>)
 80104b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80104c0:	3310      	adds	r3, #16
 80104c2:	4a74      	ldr	r2, [pc, #464]	; (8010694 <grid_timer_isr_+0x5bc>)
 80104c4:	fba2 2303 	umull	r2, r3, r2, r3
 80104c8:	099a      	lsrs	r2, r3, #6
 80104ca:	4b72      	ldr	r3, [pc, #456]	; (8010694 <grid_timer_isr_+0x5bc>)
 80104cc:	fba3 4302 	umull	r4, r3, r3, r2
 80104d0:	099b      	lsrs	r3, r3, #6
 80104d2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80104d6:	fb04 f303 	mul.w	r3, r4, r3
 80104da:	1ad3      	subs	r3, r2, r3
 80104dc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80104e0:	fb02 f303 	mul.w	r3, r2, r3
 80104e4:	4418      	add	r0, r3
 80104e6:	4b68      	ldr	r3, [pc, #416]	; (8010688 <grid_timer_isr_+0x5b0>)
 80104e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80104ea:	4b66      	ldr	r3, [pc, #408]	; (8010684 <grid_timer_isr_+0x5ac>)
 80104ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80104f4:	3310      	adds	r3, #16
 80104f6:	4a67      	ldr	r2, [pc, #412]	; (8010694 <grid_timer_isr_+0x5bc>)
 80104f8:	fba2 4203 	umull	r4, r2, r2, r3
 80104fc:	0992      	lsrs	r2, r2, #6
 80104fe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010502:	fb04 f202 	mul.w	r2, r4, r2
 8010506:	1a9a      	subs	r2, r3, r2
 8010508:	0113      	lsls	r3, r2, #4
 801050a:	4403      	add	r3, r0
				t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset +
 801050c:	440b      	add	r3, r1
 801050e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			MAIN_TIMER_CC_REG = r.fast_capture + (t - r.hybrid_tick) * FAST_HYBRID_RATIO;
 8010512:	6a39      	ldr	r1, [r7, #32]
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801051a:	1ad2      	subs	r2, r2, r3
 801051c:	4b5f      	ldr	r3, [pc, #380]	; (801069c <grid_timer_isr_+0x5c4>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	440a      	add	r2, r1
 8010522:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 8010524:	4b5e      	ldr	r3, [pc, #376]	; (80106a0 <grid_timer_isr_+0x5c8>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2208      	movs	r2, #8
 801052a:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 10 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 801052c:	4b5c      	ldr	r3, [pc, #368]	; (80106a0 <grid_timer_isr_+0x5c8>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	69d9      	ldr	r1, [r3, #28]
 8010532:	4b54      	ldr	r3, [pc, #336]	; (8010684 <grid_timer_isr_+0x5ac>)
 8010534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010536:	4613      	mov	r3, r2
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	461a      	mov	r2, r3
 8010540:	4b58      	ldr	r3, [pc, #352]	; (80106a4 <grid_timer_isr_+0x5cc>)
 8010542:	fba3 2302 	umull	r2, r3, r3, r2
 8010546:	09da      	lsrs	r2, r3, #7
 8010548:	4b55      	ldr	r3, [pc, #340]	; (80106a0 <grid_timer_isr_+0x5c8>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	440a      	add	r2, r1
 801054e:	615a      	str	r2, [r3, #20]
			s.grid_timer_flag = 0;
 8010550:	4b4b      	ldr	r3, [pc, #300]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010552:	2200      	movs	r2, #0
 8010554:	751a      	strb	r2, [r3, #20]
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8010556:	4b51      	ldr	r3, [pc, #324]	; (801069c <grid_timer_isr_+0x5c4>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f06f 0202 	mvn.w	r2, #2
 801055e:	611a      	str	r2, [r3, #16]
			unmask_main_timer(1);
 8010560:	2001      	movs	r0, #1
 8010562:	f7fe f9d7 	bl	800e914 <unmask_main_timer>
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 8010566:	bf00      	nop
 8010568:	4b4d      	ldr	r3, [pc, #308]	; (80106a0 <grid_timer_isr_+0x5c8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f003 0308 	and.w	r3, r3, #8
 8010572:	2b08      	cmp	r3, #8
 8010574:	d1f8      	bne.n	8010568 <grid_timer_isr_+0x490>
			unmask_slow_timer(1);
 8010576:	2001      	movs	r0, #1
 8010578:	f7fe f9f6 	bl	800e968 <unmask_slow_timer>
			s.slot_state = RX_RUNNING;
 801057c:	4b40      	ldr	r3, [pc, #256]	; (8010680 <grid_timer_isr_+0x5a8>)
 801057e:	2210      	movs	r2, #16
 8010580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "timeout: %lu", (long)gpi_tick_hybrid_to_us(t));
 8010584:	bf00      	nop
		PROFILE_ISR("grid timer ISR start Rx end");
 8010586:	bf00      	nop
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx started");
 8010588:	bf00      	nop
	{
 801058a:	f000 bf85 	b.w	8011498 <grid_timer_isr_+0x13c0>
	}

	// if Tx
	else
	{
		PROFILE_ISR("grid timer ISR start Tx begin");
 801058e:	bf00      	nop

		assert_reset(!(chirp_config.packet_len % sizeof(uint_fast_t)));
 8010590:	4b3d      	ldr	r3, [pc, #244]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010592:	8adb      	ldrh	r3, [r3, #22]
 8010594:	b29b      	uxth	r3, r3
 8010596:	f003 0303 	and.w	r3, r3, #3
 801059a:	b29b      	uxth	r3, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00a      	beq.n	80105b6 <grid_timer_isr_+0x4de>
 80105a0:	4b39      	ldr	r3, [pc, #228]	; (8010688 <grid_timer_isr_+0x5b0>)
 80105a2:	8adb      	ldrh	r3, [r3, #22]
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	f003 0303 	and.w	r3, r3, #3
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d002      	beq.n	80105b6 <grid_timer_isr_+0x4de>
 80105b0:	b671      	cpsid	f
 80105b2:	f7fd ffbd 	bl	800e530 <NVIC_SystemReset>
		ASSERT_CT(!((uintptr_t)&s.tx_fifo % sizeof(uint_fast_t)), alignment_issue);

		Gpi_Fast_Tick_Native 	trigger_tick;
		// Gpi_Slow_Tick_Native	trigger_tick_slow;
		int_fast8_t				late = 1;
 80105b6:	2301      	movs	r3, #1
 80105b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			uint32_t			 t_ps_us;
			RadioLoRaPacketHandler_t read_value;

			lbt_cca_:

			if (s.lbt_tx_on == CCA_NONE)
 80105bc:	4b30      	ldr	r3, [pc, #192]	; (8010680 <grid_timer_isr_+0x5a8>)
 80105be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f040 81ac 	bne.w	8010920 <grid_timer_isr_+0x848>
			{
				t_ps_us = (mixer_rand() % LBT_CCA_STEP_NUM) * LBT_CCA_STEP;
 80105c8:	f008 f8e2 	bl	8018790 <mixer_rand>
 80105cc:	4603      	mov	r3, r0
 80105ce:	461a      	mov	r2, r3
 80105d0:	4b35      	ldr	r3, [pc, #212]	; (80106a8 <grid_timer_isr_+0x5d0>)
 80105d2:	fba3 1302 	umull	r1, r3, r3, r2
 80105d6:	08d9      	lsrs	r1, r3, #3
 80105d8:	460b      	mov	r3, r1
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	440b      	add	r3, r1
 80105de:	005b      	lsls	r3, r3, #1
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	461a      	mov	r2, r3
 80105e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80105ea:	fb03 f302 	mul.w	r3, r3, r2
 80105ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				if (!s.lbt_channel_seq_no)
 80105f2:	4b23      	ldr	r3, [pc, #140]	; (8010680 <grid_timer_isr_+0x5a8>)
 80105f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d15d      	bne.n	80106b8 <grid_timer_isr_+0x5e0>
				{
					s.next_grid_tick_last = s.next_grid_tick;
 80105fc:	4b20      	ldr	r3, [pc, #128]	; (8010680 <grid_timer_isr_+0x5a8>)
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4a1f      	ldr	r2, [pc, #124]	; (8010680 <grid_timer_isr_+0x5a8>)
 8010602:	6413      	str	r3, [r2, #64]	; 0x40
					s.tx_now_channel = chirp_config.lbt_channel_primary;
 8010604:	4b20      	ldr	r3, [pc, #128]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010606:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 801060a:	4b1d      	ldr	r3, [pc, #116]	; (8010680 <grid_timer_isr_+0x5a8>)
 801060c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

					SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 8010610:	4b1d      	ldr	r3, [pc, #116]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010612:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8010616:	4a1c      	ldr	r2, [pc, #112]	; (8010688 <grid_timer_isr_+0x5b0>)
 8010618:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801061c:	4611      	mov	r1, r2
 801061e:	4a23      	ldr	r2, [pc, #140]	; (80106ac <grid_timer_isr_+0x5d4>)
 8010620:	fb02 f201 	mul.w	r2, r2, r1
 8010624:	4413      	add	r3, r2
 8010626:	4618      	mov	r0, r3
 8010628:	f7fb fcec 	bl	800c004 <SX1276SetChannel>

					t_ps_us = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 8010632:	4b1a      	ldr	r3, [pc, #104]	; (801069c <grid_timer_isr_+0x5c4>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010638:	4b12      	ldr	r3, [pc, #72]	; (8010684 <grid_timer_isr_+0x5ac>)
 801063a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801063c:	011b      	lsls	r3, r3, #4
 801063e:	4413      	add	r3, r2
 8010640:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
					PROFILE_ISR();
 8010644:	bf00      	nop
					while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0);
 8010646:	bf00      	nop
 8010648:	4b14      	ldr	r3, [pc, #80]	; (801069c <grid_timer_isr_+0x5c4>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801065a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801065e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010662:	1ad3      	subs	r3, r2, r3
 8010664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801066c:	2b00      	cmp	r3, #0
 801066e:	db1f      	blt.n	80106b0 <grid_timer_isr_+0x5d8>
 8010670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010674:	2b00      	cmp	r3, #0
 8010676:	bf14      	ite	ne
 8010678:	2301      	movne	r3, #1
 801067a:	2300      	moveq	r3, #0
 801067c:	b2db      	uxtb	r3, r3
 801067e:	e019      	b.n	80106b4 <grid_timer_isr_+0x5dc>
 8010680:	20000410 	.word	0x20000410
 8010684:	200003c4 	.word	0x200003c4
 8010688:	20001430 	.word	0x20001430
 801068c:	431bde83 	.word	0x431bde83
 8010690:	01e84800 	.word	0x01e84800
 8010694:	10624dd3 	.word	0x10624dd3
 8010698:	00f42400 	.word	0x00f42400
 801069c:	200012c8 	.word	0x200012c8
 80106a0:	200011e4 	.word	0x200011e4
 80106a4:	4325c53f 	.word	0x4325c53f
 80106a8:	cccccccd 	.word	0xcccccccd
 80106ac:	00030d40 	.word	0x00030d40
 80106b0:	f04f 33ff 	mov.w	r3, #4294967295
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dbc7      	blt.n	8010648 <grid_timer_isr_+0x570>
				}

				/* channel is full, skip that channel */
				if (!(lbt_update_channel(0, s.tx_now_channel) & (1 << s.tx_now_channel)))
 80106b8:	4b8c      	ldr	r3, [pc, #560]	; (80108ec <grid_timer_isr_+0x814>)
 80106ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80106be:	4619      	mov	r1, r3
 80106c0:	2000      	movs	r0, #0
 80106c2:	f7f9 ff95 	bl	800a5f0 <lbt_update_channel>
 80106c6:	4602      	mov	r2, r0
 80106c8:	4b88      	ldr	r3, [pc, #544]	; (80108ec <grid_timer_isr_+0x814>)
 80106ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80106ce:	4619      	mov	r1, r3
 80106d0:	2301      	movs	r3, #1
 80106d2:	408b      	lsls	r3, r1
 80106d4:	4013      	ands	r3, r2
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f040 8093 	bne.w	8010802 <grid_timer_isr_+0x72a>
				{
					s.lbt_channel_seq_no ++;
 80106dc:	4b83      	ldr	r3, [pc, #524]	; (80108ec <grid_timer_isr_+0x814>)
 80106de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106e2:	3301      	adds	r3, #1
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	4b81      	ldr	r3, [pc, #516]	; (80108ec <grid_timer_isr_+0x814>)
 80106e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

					s.tx_now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + 1 + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 80106ec:	4b80      	ldr	r3, [pc, #512]	; (80108f0 <grid_timer_isr_+0x818>)
 80106ee:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 80106f2:	4b7f      	ldr	r3, [pc, #508]	; (80108f0 <grid_timer_isr_+0x818>)
 80106f4:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 80106f8:	4b7e      	ldr	r3, [pc, #504]	; (80108f4 <grid_timer_isr_+0x81c>)
 80106fa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80106fe:	b29a      	uxth	r2, r3
 8010700:	4b7b      	ldr	r3, [pc, #492]	; (80108f0 <grid_timer_isr_+0x818>)
 8010702:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8010706:	b29b      	uxth	r3, r3
 8010708:	4413      	add	r3, r2
 801070a:	b29a      	uxth	r2, r3
 801070c:	4b77      	ldr	r3, [pc, #476]	; (80108ec <grid_timer_isr_+0x814>)
 801070e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010712:	b29b      	uxth	r3, r3
 8010714:	4413      	add	r3, r2
 8010716:	b29b      	uxth	r3, r3
 8010718:	3301      	adds	r3, #1
 801071a:	b29a      	uxth	r2, r3
 801071c:	4b74      	ldr	r3, [pc, #464]	; (80108f0 <grid_timer_isr_+0x818>)
 801071e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010720:	f7f9 fe9c 	bl	800a45c <lbt_pesudo_channel>
 8010724:	4603      	mov	r3, r0
 8010726:	461a      	mov	r2, r3
 8010728:	4b70      	ldr	r3, [pc, #448]	; (80108ec <grid_timer_isr_+0x814>)
 801072a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
					SX1276SetChannel(chirp_config.lora_freq + s.tx_now_channel * CHANNEL_STEP);
 801072e:	4b70      	ldr	r3, [pc, #448]	; (80108f0 <grid_timer_isr_+0x818>)
 8010730:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8010734:	4a6d      	ldr	r2, [pc, #436]	; (80108ec <grid_timer_isr_+0x814>)
 8010736:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801073a:	4611      	mov	r1, r2
 801073c:	4a6e      	ldr	r2, [pc, #440]	; (80108f8 <grid_timer_isr_+0x820>)
 801073e:	fb02 f201 	mul.w	r2, r2, r1
 8010742:	4413      	add	r3, r2
 8010744:	4618      	mov	r0, r3
 8010746:	f7fb fc5d 	bl	800c004 <SX1276SetChannel>

					if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 801074a:	4b68      	ldr	r3, [pc, #416]	; (80108ec <grid_timer_isr_+0x814>)
 801074c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010750:	2b01      	cmp	r3, #1
 8010752:	f200 856b 	bhi.w	801122c <grid_timer_isr_+0x1154>
					{
						s.lbt_tx_on = CCA_NONE;
 8010756:	4b65      	ldr	r3, [pc, #404]	; (80108ec <grid_timer_isr_+0x814>)
 8010758:	2200      	movs	r2, #0
 801075a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(chirp_config.lbt_detect_duration_us - radio.isr_latency_buffer);
 801075e:	4b67      	ldr	r3, [pc, #412]	; (80108fc <grid_timer_isr_+0x824>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010764:	4b62      	ldr	r3, [pc, #392]	; (80108f0 <grid_timer_isr_+0x818>)
 8010766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010768:	4b65      	ldr	r3, [pc, #404]	; (8010900 <grid_timer_isr_+0x828>)
 801076a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	4a65      	ldr	r2, [pc, #404]	; (8010904 <grid_timer_isr_+0x82c>)
 8010770:	fba2 2303 	umull	r2, r3, r2, r3
 8010774:	0c9b      	lsrs	r3, r3, #18
 8010776:	4a64      	ldr	r2, [pc, #400]	; (8010908 <grid_timer_isr_+0x830>)
 8010778:	fb02 f003 	mul.w	r0, r2, r3
 801077c:	4b5c      	ldr	r3, [pc, #368]	; (80108f0 <grid_timer_isr_+0x818>)
 801077e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010780:	4b5f      	ldr	r3, [pc, #380]	; (8010900 <grid_timer_isr_+0x828>)
 8010782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	4a61      	ldr	r2, [pc, #388]	; (801090c <grid_timer_isr_+0x834>)
 8010788:	fba2 2303 	umull	r2, r3, r2, r3
 801078c:	099a      	lsrs	r2, r3, #6
 801078e:	4b5f      	ldr	r3, [pc, #380]	; (801090c <grid_timer_isr_+0x834>)
 8010790:	fba3 4302 	umull	r4, r3, r3, r2
 8010794:	099b      	lsrs	r3, r3, #6
 8010796:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801079a:	fb04 f303 	mul.w	r3, r4, r3
 801079e:	1ad3      	subs	r3, r2, r3
 80107a0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80107a4:	fb02 f303 	mul.w	r3, r2, r3
 80107a8:	4418      	add	r0, r3
 80107aa:	4b51      	ldr	r3, [pc, #324]	; (80108f0 <grid_timer_isr_+0x818>)
 80107ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80107ae:	4b54      	ldr	r3, [pc, #336]	; (8010900 <grid_timer_isr_+0x828>)
 80107b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b2:	1ad2      	subs	r2, r2, r3
 80107b4:	4b55      	ldr	r3, [pc, #340]	; (801090c <grid_timer_isr_+0x834>)
 80107b6:	fba3 4302 	umull	r4, r3, r3, r2
 80107ba:	099b      	lsrs	r3, r3, #6
 80107bc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80107c0:	fb04 f303 	mul.w	r3, r4, r3
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	011b      	lsls	r3, r3, #4
 80107c8:	18c2      	adds	r2, r0, r3
 80107ca:	4b4c      	ldr	r3, [pc, #304]	; (80108fc <grid_timer_isr_+0x824>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	440a      	add	r2, r1
 80107d0:	635a      	str	r2, [r3, #52]	; 0x34
						unmask_main_timer(1);
 80107d2:	2001      	movs	r0, #1
 80107d4:	f7fe f89e 	bl	800e914 <unmask_main_timer>

						#if	ENERGEST_CONF_ON
						ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 80107d8:	4b4d      	ldr	r3, [pc, #308]	; (8010910 <grid_timer_isr_+0x838>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 86ef 	beq.w	80115c0 <grid_timer_isr_+0x14e8>
 80107e2:	4b46      	ldr	r3, [pc, #280]	; (80108fc <grid_timer_isr_+0x824>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107e8:	4b4a      	ldr	r3, [pc, #296]	; (8010914 <grid_timer_isr_+0x83c>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	1ad2      	subs	r2, r2, r3
 80107ee:	4b4a      	ldr	r3, [pc, #296]	; (8010918 <grid_timer_isr_+0x840>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4413      	add	r3, r2
 80107f4:	4a48      	ldr	r2, [pc, #288]	; (8010918 <grid_timer_isr_+0x840>)
 80107f6:	6013      	str	r3, [r2, #0]
 80107f8:	4b45      	ldr	r3, [pc, #276]	; (8010910 <grid_timer_isr_+0x838>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
						#endif
						GPI_TRACE_RETURN_FAST();
 80107fe:	f000 bedf 	b.w	80115c0 <grid_timer_isr_+0x14e8>
					{
						goto tx_failed_;
					}
				}

				SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8010802:	2005      	movs	r0, #5
 8010804:	f7fc f864 	bl	800c8d0 <SX1276SetOpMode>
 8010808:	2300      	movs	r3, #0
 801080a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (mask)
 801080e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010812:	2b00      	cmp	r3, #0
 8010814:	d003      	beq.n	801081e <grid_timer_isr_+0x746>
		LED_GPIO_Port->BSRR = mask;
 8010816:	4a41      	ldr	r2, [pc, #260]	; (801091c <grid_timer_isr_+0x844>)
 8010818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801081c:	6193      	str	r3, [r2, #24]
 801081e:	4b37      	ldr	r3, [pc, #220]	; (80108fc <grid_timer_isr_+0x824>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				gpi_led_on(LED_RX);

				#if ENERGEST_CONF_ON
					ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 8010824:	4a3b      	ldr	r2, [pc, #236]	; (8010914 <grid_timer_isr_+0x83c>)
 8010826:	63d3      	str	r3, [r2, #60]	; 0x3c
 8010828:	4b39      	ldr	r3, [pc, #228]	; (8010910 <grid_timer_isr_+0x838>)
 801082a:	2201      	movs	r2, #1
 801082c:	73da      	strb	r2, [r3, #15]
				#endif

				s.lbt_tx_on = CCA_ON;
 801082e:	4b2f      	ldr	r3, [pc, #188]	; (80108ec <grid_timer_isr_+0x814>)
 8010830:	2201      	movs	r2, #1
 8010832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(LBT_CCA_TIME + t_ps_us - radio.isr_latency_buffer);
 8010836:	4b31      	ldr	r3, [pc, #196]	; (80108fc <grid_timer_isr_+0x824>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801083c:	4b30      	ldr	r3, [pc, #192]	; (8010900 <grid_timer_isr_+0x828>)
 801083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010840:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801084a:	3308      	adds	r3, #8
 801084c:	4a2d      	ldr	r2, [pc, #180]	; (8010904 <grid_timer_isr_+0x82c>)
 801084e:	fba2 2303 	umull	r2, r3, r2, r3
 8010852:	0c9b      	lsrs	r3, r3, #18
 8010854:	4a2c      	ldr	r2, [pc, #176]	; (8010908 <grid_timer_isr_+0x830>)
 8010856:	fb02 f003 	mul.w	r0, r2, r3
 801085a:	4b29      	ldr	r3, [pc, #164]	; (8010900 <grid_timer_isr_+0x828>)
 801085c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801085e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010868:	3308      	adds	r3, #8
 801086a:	4a28      	ldr	r2, [pc, #160]	; (801090c <grid_timer_isr_+0x834>)
 801086c:	fba2 2303 	umull	r2, r3, r2, r3
 8010870:	099a      	lsrs	r2, r3, #6
 8010872:	4b26      	ldr	r3, [pc, #152]	; (801090c <grid_timer_isr_+0x834>)
 8010874:	fba3 4302 	umull	r4, r3, r3, r2
 8010878:	099b      	lsrs	r3, r3, #6
 801087a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801087e:	fb04 f303 	mul.w	r3, r4, r3
 8010882:	1ad3      	subs	r3, r2, r3
 8010884:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8010888:	fb02 f303 	mul.w	r3, r2, r3
 801088c:	4418      	add	r0, r3
 801088e:	4b1c      	ldr	r3, [pc, #112]	; (8010900 <grid_timer_isr_+0x828>)
 8010890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010892:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801089c:	3308      	adds	r3, #8
 801089e:	4a1b      	ldr	r2, [pc, #108]	; (801090c <grid_timer_isr_+0x834>)
 80108a0:	fba2 4203 	umull	r4, r2, r2, r3
 80108a4:	0992      	lsrs	r2, r2, #6
 80108a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80108aa:	fb04 f202 	mul.w	r2, r4, r2
 80108ae:	1a9a      	subs	r2, r3, r2
 80108b0:	0113      	lsls	r3, r2, #4
 80108b2:	18c2      	adds	r2, r0, r3
 80108b4:	4b11      	ldr	r3, [pc, #68]	; (80108fc <grid_timer_isr_+0x824>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	440a      	add	r2, r1
 80108ba:	635a      	str	r2, [r3, #52]	; 0x34

				unmask_main_timer(1);
 80108bc:	2001      	movs	r0, #1
 80108be:	f7fe f829 	bl	800e914 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 80108c2:	4b13      	ldr	r3, [pc, #76]	; (8010910 <grid_timer_isr_+0x838>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f000 867c 	beq.w	80115c4 <grid_timer_isr_+0x14ec>
 80108cc:	4b0b      	ldr	r3, [pc, #44]	; (80108fc <grid_timer_isr_+0x824>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108d2:	4b10      	ldr	r3, [pc, #64]	; (8010914 <grid_timer_isr_+0x83c>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	1ad2      	subs	r2, r2, r3
 80108d8:	4b0f      	ldr	r3, [pc, #60]	; (8010918 <grid_timer_isr_+0x840>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4413      	add	r3, r2
 80108de:	4a0e      	ldr	r2, [pc, #56]	; (8010918 <grid_timer_isr_+0x840>)
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	4b0b      	ldr	r3, [pc, #44]	; (8010910 <grid_timer_isr_+0x838>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	701a      	strb	r2, [r3, #0]
#endif
				GPI_TRACE_RETURN_FAST();
 80108e8:	f000 be6c 	b.w	80115c4 <grid_timer_isr_+0x14ec>
 80108ec:	20000410 	.word	0x20000410
 80108f0:	20001430 	.word	0x20001430
 80108f4:	200014f0 	.word	0x200014f0
 80108f8:	00030d40 	.word	0x00030d40
 80108fc:	200012c8 	.word	0x200012c8
 8010900:	200003c4 	.word	0x200003c4
 8010904:	431bde83 	.word	0x431bde83
 8010908:	00f42400 	.word	0x00f42400
 801090c:	10624dd3 	.word	0x10624dd3
 8010910:	2000112c 	.word	0x2000112c
 8010914:	20001308 	.word	0x20001308
 8010918:	20000f10 	.word	0x20000f10
 801091c:	48000800 	.word	0x48000800
			}
			else if (s.lbt_tx_on == CCA_ON)
 8010920:	4b87      	ldr	r3, [pc, #540]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010926:	2b01      	cmp	r3, #1
 8010928:	f040 81db 	bne.w	8010ce2 <grid_timer_isr_+0xc0a>
			{
				s.lbt_tx_on = CCA_NONE;
 801092c:	4b84      	ldr	r3, [pc, #528]	; (8010b40 <grid_timer_isr_+0xa68>)
 801092e:	2200      	movs	r2, #0
 8010930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 8010934:	2000      	movs	r0, #0
 8010936:	f7fb ffcb 	bl	800c8d0 <SX1276SetOpMode>
 801093a:	2300      	movs	r3, #0
 801093c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (mask)
 8010940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010944:	2b00      	cmp	r3, #0
 8010946:	d003      	beq.n	8010950 <grid_timer_isr_+0x878>
		LED_GPIO_Port->BRR = mask;
 8010948:	4a7e      	ldr	r2, [pc, #504]	; (8010b44 <grid_timer_isr_+0xa6c>)
 801094a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801094e:	6293      	str	r3, [r2, #40]	; 0x28
				gpi_led_off(LED_RX);
				#if ENERGEST_CONF_ON
					ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 8010950:	4b7d      	ldr	r3, [pc, #500]	; (8010b48 <grid_timer_isr_+0xa70>)
 8010952:	7bdb      	ldrb	r3, [r3, #15]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00d      	beq.n	8010974 <grid_timer_isr_+0x89c>
 8010958:	4b7c      	ldr	r3, [pc, #496]	; (8010b4c <grid_timer_isr_+0xa74>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801095e:	4b7c      	ldr	r3, [pc, #496]	; (8010b50 <grid_timer_isr_+0xa78>)
 8010960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010962:	1ad2      	subs	r2, r2, r3
 8010964:	4b7b      	ldr	r3, [pc, #492]	; (8010b54 <grid_timer_isr_+0xa7c>)
 8010966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010968:	4413      	add	r3, r2
 801096a:	4a7a      	ldr	r2, [pc, #488]	; (8010b54 <grid_timer_isr_+0xa7c>)
 801096c:	63d3      	str	r3, [r2, #60]	; 0x3c
 801096e:	4b76      	ldr	r3, [pc, #472]	; (8010b48 <grid_timer_isr_+0xa70>)
 8010970:	2200      	movs	r2, #0
 8010972:	73da      	strb	r2, [r3, #15]
				#endif
				s.lbt_channel_seq_no ++;
 8010974:	4b72      	ldr	r3, [pc, #456]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801097a:	3301      	adds	r3, #1
 801097c:	b2da      	uxtb	r2, r3
 801097e:	4b70      	ldr	r3, [pc, #448]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				read_value = gpi_read_rssi(0);
 8010984:	f107 030c 	add.w	r3, r7, #12
 8010988:	2100      	movs	r1, #0
 801098a:	4618      	mov	r0, r3
 801098c:	f7fc fd04 	bl	800d398 <gpi_read_rssi>
				if (read_value.RssiValue > s.lbt_sensitivity_in_dbm)
 8010990:	f107 030c 	add.w	r3, r7, #12
 8010994:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010998:	4b69      	ldr	r3, [pc, #420]	; (8010b40 <grid_timer_isr_+0xa68>)
 801099a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 801099e:	429a      	cmp	r2, r3
 80109a0:	f340 80e8 	ble.w	8010b74 <grid_timer_isr_+0xa9c>
				{
					if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 80109a4:	4b66      	ldr	r3, [pc, #408]	; (8010b40 <grid_timer_isr_+0xa68>)
 80109a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	f200 8444 	bhi.w	8011238 <grid_timer_isr_+0x1160>
					{
						s.tx_now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + 1 + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 80109b0:	4b69      	ldr	r3, [pc, #420]	; (8010b58 <grid_timer_isr_+0xa80>)
 80109b2:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 80109b6:	4b68      	ldr	r3, [pc, #416]	; (8010b58 <grid_timer_isr_+0xa80>)
 80109b8:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 80109bc:	4b67      	ldr	r3, [pc, #412]	; (8010b5c <grid_timer_isr_+0xa84>)
 80109be:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	4b64      	ldr	r3, [pc, #400]	; (8010b58 <grid_timer_isr_+0xa80>)
 80109c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	4413      	add	r3, r2
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	4b5b      	ldr	r3, [pc, #364]	; (8010b40 <grid_timer_isr_+0xa68>)
 80109d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	4413      	add	r3, r2
 80109da:	b29b      	uxth	r3, r3
 80109dc:	3301      	adds	r3, #1
 80109de:	b29a      	uxth	r2, r3
 80109e0:	4b5d      	ldr	r3, [pc, #372]	; (8010b58 <grid_timer_isr_+0xa80>)
 80109e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109e4:	f7f9 fd3a 	bl	800a45c <lbt_pesudo_channel>
 80109e8:	4603      	mov	r3, r0
 80109ea:	461a      	mov	r2, r3
 80109ec:	4b54      	ldr	r3, [pc, #336]	; (8010b40 <grid_timer_isr_+0xa68>)
 80109ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

						SX1276SetChannel(chirp_config.lora_freq + s.tx_now_channel * CHANNEL_STEP);
 80109f2:	4b59      	ldr	r3, [pc, #356]	; (8010b58 <grid_timer_isr_+0xa80>)
 80109f4:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80109f8:	4a51      	ldr	r2, [pc, #324]	; (8010b40 <grid_timer_isr_+0xa68>)
 80109fa:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80109fe:	4611      	mov	r1, r2
 8010a00:	4a57      	ldr	r2, [pc, #348]	; (8010b60 <grid_timer_isr_+0xa88>)
 8010a02:	fb02 f201 	mul.w	r2, r2, r1
 8010a06:	4413      	add	r3, r2
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fb fafb 	bl	800c004 <SX1276SetChannel>

						t_lbt = s.next_grid_tick_last + s.tx_trigger_offset - radio.tx_to_grid_offset + GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us * s.lbt_channel_seq_no - radio.isr_latency_buffer);
 8010a0e:	4b4c      	ldr	r3, [pc, #304]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a12:	4b4b      	ldr	r3, [pc, #300]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a16:	441a      	add	r2, r3
 8010a18:	4b52      	ldr	r3, [pc, #328]	; (8010b64 <grid_timer_isr_+0xa8c>)
 8010a1a:	695b      	ldr	r3, [r3, #20]
 8010a1c:	1ad1      	subs	r1, r2, r3
 8010a1e:	4b4e      	ldr	r3, [pc, #312]	; (8010b58 <grid_timer_isr_+0xa80>)
 8010a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a22:	4a47      	ldr	r2, [pc, #284]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010a24:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010a28:	fb02 f203 	mul.w	r2, r2, r3
 8010a2c:	4b4d      	ldr	r3, [pc, #308]	; (8010b64 <grid_timer_isr_+0xa8c>)
 8010a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	4a4d      	ldr	r2, [pc, #308]	; (8010b68 <grid_timer_isr_+0xa90>)
 8010a34:	fba2 2303 	umull	r2, r3, r2, r3
 8010a38:	0c9b      	lsrs	r3, r3, #18
 8010a3a:	4a4c      	ldr	r2, [pc, #304]	; (8010b6c <grid_timer_isr_+0xa94>)
 8010a3c:	fb02 f003 	mul.w	r0, r2, r3
 8010a40:	4b45      	ldr	r3, [pc, #276]	; (8010b58 <grid_timer_isr_+0xa80>)
 8010a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a44:	4a3e      	ldr	r2, [pc, #248]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010a46:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010a4a:	fb02 f203 	mul.w	r2, r2, r3
 8010a4e:	4b45      	ldr	r3, [pc, #276]	; (8010b64 <grid_timer_isr_+0xa8c>)
 8010a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	4a46      	ldr	r2, [pc, #280]	; (8010b70 <grid_timer_isr_+0xa98>)
 8010a56:	fba2 2303 	umull	r2, r3, r2, r3
 8010a5a:	099a      	lsrs	r2, r3, #6
 8010a5c:	4b44      	ldr	r3, [pc, #272]	; (8010b70 <grid_timer_isr_+0xa98>)
 8010a5e:	fba3 4302 	umull	r4, r3, r3, r2
 8010a62:	099b      	lsrs	r3, r3, #6
 8010a64:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010a68:	fb04 f303 	mul.w	r3, r4, r3
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8010a72:	fb02 f303 	mul.w	r3, r2, r3
 8010a76:	4418      	add	r0, r3
 8010a78:	4b37      	ldr	r3, [pc, #220]	; (8010b58 <grid_timer_isr_+0xa80>)
 8010a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a7c:	4a30      	ldr	r2, [pc, #192]	; (8010b40 <grid_timer_isr_+0xa68>)
 8010a7e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010a82:	fb02 f203 	mul.w	r2, r2, r3
 8010a86:	4b37      	ldr	r3, [pc, #220]	; (8010b64 <grid_timer_isr_+0xa8c>)
 8010a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a8a:	1ad2      	subs	r2, r2, r3
 8010a8c:	4b38      	ldr	r3, [pc, #224]	; (8010b70 <grid_timer_isr_+0xa98>)
 8010a8e:	fba3 4302 	umull	r4, r3, r3, r2
 8010a92:	099b      	lsrs	r3, r3, #6
 8010a94:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010a98:	fb04 f303 	mul.w	r3, r4, r3
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	011b      	lsls	r3, r3, #4
 8010aa0:	4403      	add	r3, r0
 8010aa2:	440b      	add	r3, r1
 8010aa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
						r_lbt = gpi_tick_hybrid_reference();
 8010aa8:	f107 0314 	add.w	r3, r7, #20
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fb f817 	bl	800bae0 <gpi_tick_hybrid_reference>

						MAIN_TIMER_CC_REG = r_lbt.fast_capture + (t_lbt - r_lbt.hybrid_tick) * FAST_HYBRID_RATIO;
 8010ab2:	f107 0314 	add.w	r3, r7, #20
 8010ab6:	6859      	ldr	r1, [r3, #4]
 8010ab8:	f107 0314 	add.w	r3, r7, #20
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010ac2:	1ad2      	subs	r2, r2, r3
 8010ac4:	4b21      	ldr	r3, [pc, #132]	; (8010b4c <grid_timer_isr_+0xa74>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	440a      	add	r2, r1
 8010aca:	635a      	str	r2, [r3, #52]	; 0x34

						if (gpi_tick_compare_fast_native(MAIN_TIMER_CC_REG, MAIN_TIMER_CNT_REG) <= 0)
 8010acc:	4b1f      	ldr	r3, [pc, #124]	; (8010b4c <grid_timer_isr_+0xa74>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ad2:	4b1e      	ldr	r3, [pc, #120]	; (8010b4c <grid_timer_isr_+0xa74>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010ae0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	db07      	blt.n	8010b06 <grid_timer_isr_+0xa2e>
 8010af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	bf14      	ite	ne
 8010afe:	2301      	movne	r3, #1
 8010b00:	2300      	moveq	r3, #0
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	e001      	b.n	8010b0a <grid_timer_isr_+0xa32>
 8010b06:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	dc00      	bgt.n	8010b10 <grid_timer_isr_+0xa38>
						{
							goto lbt_cca_;
 8010b0e:	e555      	b.n	80105bc <grid_timer_isr_+0x4e4>
						}

						unmask_main_timer(1);
 8010b10:	2001      	movs	r0, #1
 8010b12:	f7fd feff 	bl	800e914 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8010b16:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <grid_timer_isr_+0xa70>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f000 8554 	beq.w	80115c8 <grid_timer_isr_+0x14f0>
 8010b20:	4b0a      	ldr	r3, [pc, #40]	; (8010b4c <grid_timer_isr_+0xa74>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b26:	4b0a      	ldr	r3, [pc, #40]	; (8010b50 <grid_timer_isr_+0xa78>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	1ad2      	subs	r2, r2, r3
 8010b2c:	4b09      	ldr	r3, [pc, #36]	; (8010b54 <grid_timer_isr_+0xa7c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4413      	add	r3, r2
 8010b32:	4a08      	ldr	r2, [pc, #32]	; (8010b54 <grid_timer_isr_+0xa7c>)
 8010b34:	6013      	str	r3, [r2, #0]
 8010b36:	4b04      	ldr	r3, [pc, #16]	; (8010b48 <grid_timer_isr_+0xa70>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	701a      	strb	r2, [r3, #0]
#endif
						GPI_TRACE_RETURN_FAST();
 8010b3c:	f000 bd44 	b.w	80115c8 <grid_timer_isr_+0x14f0>
 8010b40:	20000410 	.word	0x20000410
 8010b44:	48000800 	.word	0x48000800
 8010b48:	2000112c 	.word	0x2000112c
 8010b4c:	200012c8 	.word	0x200012c8
 8010b50:	20001308 	.word	0x20001308
 8010b54:	20000f10 	.word	0x20000f10
 8010b58:	20001430 	.word	0x20001430
 8010b5c:	200014f0 	.word	0x200014f0
 8010b60:	00030d40 	.word	0x00030d40
 8010b64:	200003c4 	.word	0x200003c4
 8010b68:	431bde83 	.word	0x431bde83
 8010b6c:	00f42400 	.word	0x00f42400
 8010b70:	10624dd3 	.word	0x10624dd3
						goto tx_failed_;
					}
				}
				else
				{
					s.lbt_tx_on = CCA_DONE;
 8010b74:	4b70      	ldr	r3, [pc, #448]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010b76:	2202      	movs	r2, #2
 8010b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					t_lbt = s.next_grid_tick_last + s.tx_trigger_offset - radio.tx_to_grid_offset + GPI_TICK_US_TO_HYBRID2((s.lbt_channel_seq_no - 1) * chirp_config.lbt_detect_duration_us + LBT_DELAY_IN_US - radio.isr_latency_buffer);
 8010b7c:	4b6e      	ldr	r3, [pc, #440]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b80:	4b6d      	ldr	r3, [pc, #436]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b84:	441a      	add	r2, r3
 8010b86:	4b6d      	ldr	r3, [pc, #436]	; (8010d3c <grid_timer_isr_+0xc64>)
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	1ad1      	subs	r1, r2, r3
 8010b8c:	4b6a      	ldr	r3, [pc, #424]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b92:	3b01      	subs	r3, #1
 8010b94:	461a      	mov	r2, r3
 8010b96:	4b6a      	ldr	r3, [pc, #424]	; (8010d40 <grid_timer_isr_+0xc68>)
 8010b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b9a:	fb03 f202 	mul.w	r2, r3, r2
 8010b9e:	4b67      	ldr	r3, [pc, #412]	; (8010d3c <grid_timer_isr_+0xc64>)
 8010ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010ba8:	3310      	adds	r3, #16
 8010baa:	4a66      	ldr	r2, [pc, #408]	; (8010d44 <grid_timer_isr_+0xc6c>)
 8010bac:	fba2 2303 	umull	r2, r3, r2, r3
 8010bb0:	0c9b      	lsrs	r3, r3, #18
 8010bb2:	4a65      	ldr	r2, [pc, #404]	; (8010d48 <grid_timer_isr_+0xc70>)
 8010bb4:	fb02 f003 	mul.w	r0, r2, r3
 8010bb8:	4b5f      	ldr	r3, [pc, #380]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	4b5f      	ldr	r3, [pc, #380]	; (8010d40 <grid_timer_isr_+0xc68>)
 8010bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bc6:	fb03 f202 	mul.w	r2, r3, r2
 8010bca:	4b5c      	ldr	r3, [pc, #368]	; (8010d3c <grid_timer_isr_+0xc64>)
 8010bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010bd4:	3310      	adds	r3, #16
 8010bd6:	4a5d      	ldr	r2, [pc, #372]	; (8010d4c <grid_timer_isr_+0xc74>)
 8010bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8010bdc:	099a      	lsrs	r2, r3, #6
 8010bde:	4b5b      	ldr	r3, [pc, #364]	; (8010d4c <grid_timer_isr_+0xc74>)
 8010be0:	fba3 4302 	umull	r4, r3, r3, r2
 8010be4:	099b      	lsrs	r3, r3, #6
 8010be6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010bea:	fb04 f303 	mul.w	r3, r4, r3
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8010bf4:	fb02 f303 	mul.w	r3, r2, r3
 8010bf8:	4418      	add	r0, r3
 8010bfa:	4b4f      	ldr	r3, [pc, #316]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c00:	3b01      	subs	r3, #1
 8010c02:	461a      	mov	r2, r3
 8010c04:	4b4e      	ldr	r3, [pc, #312]	; (8010d40 <grid_timer_isr_+0xc68>)
 8010c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c08:	fb03 f202 	mul.w	r2, r3, r2
 8010c0c:	4b4b      	ldr	r3, [pc, #300]	; (8010d3c <grid_timer_isr_+0xc64>)
 8010c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010c16:	3310      	adds	r3, #16
 8010c18:	4a4c      	ldr	r2, [pc, #304]	; (8010d4c <grid_timer_isr_+0xc74>)
 8010c1a:	fba2 4203 	umull	r4, r2, r2, r3
 8010c1e:	0992      	lsrs	r2, r2, #6
 8010c20:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010c24:	fb04 f202 	mul.w	r2, r4, r2
 8010c28:	1a9a      	subs	r2, r3, r2
 8010c2a:	0113      	lsls	r3, r2, #4
 8010c2c:	4403      	add	r3, r0
 8010c2e:	440b      	add	r3, r1
 8010c30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					s.lbt_channel_seq_no = 0;
 8010c34:	4b40      	ldr	r3, [pc, #256]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					r_lbt = gpi_tick_hybrid_reference();
 8010c3c:	f107 0414 	add.w	r4, r7, #20
 8010c40:	463b      	mov	r3, r7
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fa ff4c 	bl	800bae0 <gpi_tick_hybrid_reference>
 8010c48:	463a      	mov	r2, r7
 8010c4a:	4623      	mov	r3, r4
 8010c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c50:	e883 0003 	stmia.w	r3, {r0, r1}

					MAIN_TIMER_CC_REG = r_lbt.fast_capture + (t_lbt - r_lbt.hybrid_tick) * FAST_HYBRID_RATIO;
 8010c54:	f107 0314 	add.w	r3, r7, #20
 8010c58:	6859      	ldr	r1, [r3, #4]
 8010c5a:	f107 0314 	add.w	r3, r7, #20
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010c64:	1ad2      	subs	r2, r2, r3
 8010c66:	4b3a      	ldr	r3, [pc, #232]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	440a      	add	r2, r1
 8010c6c:	635a      	str	r2, [r3, #52]	; 0x34

					if (gpi_tick_compare_fast_native(MAIN_TIMER_CC_REG, MAIN_TIMER_CNT_REG) > 0)
 8010c6e:	4b38      	ldr	r3, [pc, #224]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c74:	4b36      	ldr	r3, [pc, #216]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c8a:	1ad3      	subs	r3, r2, r3
 8010c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	db07      	blt.n	8010ca8 <grid_timer_isr_+0xbd0>
 8010c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	bf14      	ite	ne
 8010ca0:	2301      	movne	r3, #1
 8010ca2:	2300      	moveq	r3, #0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	e001      	b.n	8010cac <grid_timer_isr_+0xbd4>
 8010ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	dd20      	ble.n	8010cf2 <grid_timer_isr_+0xc1a>
					{
						unmask_main_timer(1);
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	f7fd fe2f 	bl	800e914 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8010cb6:	4b27      	ldr	r3, [pc, #156]	; (8010d54 <grid_timer_isr_+0xc7c>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8486 	beq.w	80115cc <grid_timer_isr_+0x14f4>
 8010cc0:	4b23      	ldr	r3, [pc, #140]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc6:	4b24      	ldr	r3, [pc, #144]	; (8010d58 <grid_timer_isr_+0xc80>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	1ad2      	subs	r2, r2, r3
 8010ccc:	4b23      	ldr	r3, [pc, #140]	; (8010d5c <grid_timer_isr_+0xc84>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	4a22      	ldr	r2, [pc, #136]	; (8010d5c <grid_timer_isr_+0xc84>)
 8010cd4:	6013      	str	r3, [r2, #0]
 8010cd6:	4b1f      	ldr	r3, [pc, #124]	; (8010d54 <grid_timer_isr_+0xc7c>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	701a      	strb	r2, [r3, #0]
#endif
						GPI_TRACE_RETURN_FAST();
 8010cdc:	bf00      	nop
 8010cde:	f000 bc75 	b.w	80115cc <grid_timer_isr_+0x14f4>
					}
				}
			}
			else
			{
				s.lbt_tx_on = CCA_NONE;
 8010ce2:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 8010cea:	4b13      	ldr	r3, [pc, #76]	; (8010d38 <grid_timer_isr_+0xc60>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		// trigger_tick_slow = LP_TIMER_CMP_REG + (Gpi_Slow_Tick_Native)((Gpi_Fast_Tick_Native)(ISR_LATENCY_SLOW) / (Gpi_Fast_Tick_Native)HYBRID_SLOW_RATIO);

		// trigger_tick = gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) + GPI_TICK_US_TO_FAST(ISR_LATENCY_BUFFER);
		// trigger_tick = s.next_grid_tick;
		// trigger_tick = s.hybrid_trigger;
		trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 8010cf2:	4b17      	ldr	r3, [pc, #92]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cf8:	4b10      	ldr	r3, [pc, #64]	; (8010d3c <grid_timer_isr_+0xc64>)
 8010cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfc:	011b      	lsls	r3, r3, #4
 8010cfe:	4413      	add	r3, r2
 8010d00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

		// wait until trigger time has been reached
		PROFILE_ISR();
 8010d04:	bf00      	nop

		// while (gpi_tick_compare_slow_native(gpi_tick_slow_native(), trigger_tick_slow) < 0)
		// while (gpi_tick_compare_hybrid(gpi_tick_hybrid(), trigger_tick) <= 0)
		while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0)
 8010d06:	e002      	b.n	8010d0e <grid_timer_isr_+0xc36>
			late = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010d0e:	4b10      	ldr	r3, [pc, #64]	; (8010d50 <grid_timer_isr_+0xc78>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8010d1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d20:	1ad3      	subs	r3, r2, r3
 8010d22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	db1a      	blt.n	8010d60 <grid_timer_isr_+0xc88>
 8010d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	bf14      	ite	ne
 8010d30:	2301      	movne	r3, #1
 8010d32:	2300      	moveq	r3, #0
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	e015      	b.n	8010d64 <grid_timer_isr_+0xc8c>
 8010d38:	20000410 	.word	0x20000410
 8010d3c:	200003c4 	.word	0x200003c4
 8010d40:	20001430 	.word	0x20001430
 8010d44:	431bde83 	.word	0x431bde83
 8010d48:	00f42400 	.word	0x00f42400
 8010d4c:	10624dd3 	.word	0x10624dd3
 8010d50:	200012c8 	.word	0x200012c8
 8010d54:	2000112c 	.word	0x2000112c
 8010d58:	20001308 	.word	0x20001308
 8010d5c:	20000f10 	.word	0x20000f10
 8010d60:	f04f 33ff 	mov.w	r3, #4294967295
		while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0)
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	dbcf      	blt.n	8010d08 <grid_timer_isr_+0xc30>
		PROFILE_ISR();
 8010d68:	bf00      	nop

		SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 8010d6a:	2003      	movs	r0, #3
 8010d6c:	f7fb fdb0 	bl	800c8d0 <SX1276SetOpMode>

		// if we are late: start manually (immediately)
		if (late)
 8010d70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d004      	beq.n	8010d82 <grid_timer_isr_+0xcaa>
 8010d78:	4b73      	ldr	r3, [pc, #460]	; (8010f48 <grid_timer_isr_+0xe70>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		{
			// SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );

			#if MX_VERBOSE_STATISTICS
				trigger_tick = gpi_tick_fast_native();
 8010d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			#endif
        }

		// init FIFO
		SX1276Write( REG_LR_PAYLOADLENGTH, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8010d82:	4b72      	ldr	r3, [pc, #456]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010d84:	8a5b      	ldrh	r3, [r3, #18]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	4619      	mov	r1, r3
 8010d90:	2022      	movs	r0, #34	; 0x22
 8010d92:	f7fb fe15 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8010d96:	2033      	movs	r0, #51	; 0x33
 8010d98:	f7fb fe24 	bl	800c9e4 <SX1276Read>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	b25b      	sxtb	r3, r3
 8010da0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8010da4:	b25b      	sxtb	r3, r3
 8010da6:	f043 0301 	orr.w	r3, r3, #1
 8010daa:	b25b      	sxtb	r3, r3
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	4619      	mov	r1, r3
 8010db0:	2033      	movs	r0, #51	; 0x33
 8010db2:	f7fb fe05 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8010db6:	211d      	movs	r1, #29
 8010db8:	203b      	movs	r0, #59	; 0x3b
 8010dba:	f7fb fe01 	bl	800c9c0 <SX1276Write>
		// Full buffer used for Tx
		SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	200e      	movs	r0, #14
 8010dc2:	f7fb fdfd 	bl	800c9c0 <SX1276Write>
		SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	200d      	movs	r0, #13
 8010dca:	f7fb fdf9 	bl	800c9c0 <SX1276Write>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	677b      	str	r3, [r7, #116]	; 0x74
	if (mask)
 8010dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d002      	beq.n	8010dde <grid_timer_isr_+0xd06>
		LED_GPIO_Port->BSRR = mask;
 8010dd8:	4a5d      	ldr	r2, [pc, #372]	; (8010f50 <grid_timer_isr_+0xe78>)
 8010dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ddc:	6193      	str	r3, [r2, #24]

		gpi_led_on(LED_TX);
		#if MX_VERBOSE_STATISTICS
			s.radio_start_timestamp = trigger_tick | 1;
 8010dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010de2:	f043 0301 	orr.w	r3, r3, #1
 8010de6:	4a5b      	ldr	r2, [pc, #364]	; (8010f54 <grid_timer_isr_+0xe7c>)
 8010de8:	6353      	str	r3, [r2, #52]	; 0x34
			if (late)
 8010dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d007      	beq.n	8010e02 <grid_timer_isr_+0xd2a>
				mx.stat_counter.num_tx_late++;
 8010df2:	4b59      	ldr	r3, [pc, #356]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010df4:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
 8010df8:	3301      	adds	r3, #1
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	4b56      	ldr	r3, [pc, #344]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010dfe:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
 8010e02:	4b51      	ldr	r3, [pc, #324]	; (8010f48 <grid_timer_isr_+0xe70>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
 8010e08:	4a54      	ldr	r2, [pc, #336]	; (8010f5c <grid_timer_isr_+0xe84>)
 8010e0a:	6393      	str	r3, [r2, #56]	; 0x38
 8010e0c:	4b54      	ldr	r3, [pc, #336]	; (8010f60 <grid_timer_isr_+0xe88>)
 8010e0e:	2201      	movs	r2, #1
 8010e10:	739a      	strb	r2, [r3, #14]
 8010e12:	4b4d      	ldr	r3, [pc, #308]	; (8010f48 <grid_timer_isr_+0xe70>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if MX_LBT_ACCESS
			s.tx_on_time = gpi_tick_fast_native();
 8010e18:	4a4e      	ldr	r2, [pc, #312]	; (8010f54 <grid_timer_isr_+0xe7c>)
 8010e1a:	6453      	str	r3, [r2, #68]	; 0x44
		#endif

		// finalize header
		{
			mx.tx_packet->app_header = chirp_config.packet_hash;
 8010e1c:	4b4e      	ldr	r3, [pc, #312]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e20:	4a4a      	ldr	r2, [pc, #296]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010e22:	f8d2 2052 	ldr.w	r2, [r2, #82]	; 0x52
 8010e26:	601a      	str	r2, [r3, #0]
			uint16_t slot_number = mx.slot_number + 1;
 8010e28:	4b4b      	ldr	r3, [pc, #300]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e2a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	3301      	adds	r3, #1
 8010e32:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2

			mx.tx_packet->slot_number = slot_number;
 8010e36:	4b48      	ldr	r3, [pc, #288]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3a:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8010e3e:	809a      	strh	r2, [r3, #4]
			mx.tx_packet->flags.all = 0;
 8010e40:	4b45      	ldr	r3, [pc, #276]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e44:	2200      	movs	r2, #0
 8010e46:	71da      	strb	r2, [r3, #7]

			if ((slot_number < chirp_config.mx_generation_size) && (0 == mx.matrix[slot_number]->birth_slot))
 8010e48:	4b40      	ldr	r3, [pc, #256]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010e4a:	885b      	ldrh	r3, [r3, #2]
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d20f      	bcs.n	8010e76 <grid_timer_isr_+0xd9e>
 8010e56:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8010e5a:	4a3f      	ldr	r2, [pc, #252]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e5c:	3316      	adds	r3, #22
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4413      	add	r3, r2
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d105      	bne.n	8010e76 <grid_timer_isr_+0xd9e>
			{
				mx.tx_packet->flags.has_next_payload = 1;
 8010e6a:	4b3b      	ldr	r3, [pc, #236]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e6e:	79d3      	ldrb	r3, [r2, #7]
 8010e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e74:	71d3      	strb	r3, [r2, #7]
			}

			if (chirp_config.mx_generation_size == mx.rank)
 8010e76:	4b35      	ldr	r3, [pc, #212]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010e78:	885b      	ldrh	r3, [r3, #2]
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	4b36      	ldr	r3, [pc, #216]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e7e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d106      	bne.n	8010e94 <grid_timer_isr_+0xdbc>
			{
				mx.tx_packet->flags.is_full_rank = 1;
 8010e86:	4b34      	ldr	r3, [pc, #208]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e8a:	79d3      	ldrb	r3, [r2, #7]
 8010e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e90:	71d3      	strb	r3, [r2, #7]
 8010e92:	e073      	b.n	8010f7c <grid_timer_isr_+0xea4>
					}
				#endif
            }

			#if MX_REQUEST
			else if (slot_number >= chirp_config.mx_generation_size)
 8010e94:	4b2d      	ldr	r3, [pc, #180]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010e96:	885b      	ldrh	r3, [r3, #2]
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d36c      	bcc.n	8010f7c <grid_timer_isr_+0xea4>

				// f(x) = 2 ^ (-x) (scaled)
				// -> could be computed directly, but the (small) LUT is the faster variant
				static const uint8_t LUT2[] = {0x3f, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};

				uint8_t  	x = LUT1[MIN(chirp_config.mx_generation_size - mx.rank, NUM_ELEMENTS(LUT1) - 1)];
 8010ea2:	4b2a      	ldr	r3, [pc, #168]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010ea4:	885b      	ldrh	r3, [r3, #2]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4b2b      	ldr	r3, [pc, #172]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010eac:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8010eb0:	1ad3      	subs	r3, r2, r3
 8010eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010eb6:	2324      	movs	r3, #36	; 0x24
 8010eb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010ebc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	bf28      	it	cs
 8010ec8:	4613      	movcs	r3, r2
 8010eca:	4a26      	ldr	r2, [pc, #152]	; (8010f64 <grid_timer_isr_+0xe8c>)
 8010ecc:	5cd3      	ldrb	r3, [r2, r3]
 8010ece:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				uint16_t 	age = slot_number - mx.recent_innovative_slot;
 8010ed2:	4b21      	ldr	r3, [pc, #132]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010ed4:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8010ed8:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8010edc:	1ad3      	subs	r3, r2, r3
 8010ede:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

				uint8_t	 	rand = mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_RAND;		// prepared on thread level
 8010ee2:	4b1d      	ldr	r3, [pc, #116]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee6:	4a19      	ldr	r2, [pc, #100]	; (8010f4c <grid_timer_isr_+0xe74>)
 8010ee8:	7b92      	ldrb	r2, [r2, #14]
 8010eea:	4413      	add	r3, r2
 8010eec:	7a1b      	ldrb	r3, [r3, #8]
 8010eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ef2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

			#if MX_COORDINATED_TX
				if ((age >= x) || (0 == mx_present_head->mx_num_nodes))
 8010ef6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d204      	bcs.n	8010f0e <grid_timer_isr_+0xe36>
 8010f04:	4b18      	ldr	r3, [pc, #96]	; (8010f68 <grid_timer_isr_+0xe90>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	885b      	ldrh	r3, [r3, #2]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d136      	bne.n	8010f7c <grid_timer_isr_+0xea4>
			#else
				if ((age >= x))
			#endif
				{
					if (rand < LUT2[MIN(mx.request->my_column_pending, NUM_ELEMENTS(LUT2) - 1)])
 8010f0e:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010f10:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8010f14:	8a1b      	ldrh	r3, [r3, #16]
 8010f16:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 8010f1a:	2306      	movs	r3, #6
 8010f1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010f20:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8010f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	bf28      	it	cs
 8010f2c:	4613      	movcs	r3, r2
 8010f2e:	4a0f      	ldr	r2, [pc, #60]	; (8010f6c <grid_timer_isr_+0xe94>)
 8010f30:	5cd3      	ldrb	r3, [r2, r3]
 8010f32:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d21a      	bcs.n	8010f70 <grid_timer_isr_+0xe98>
					{
						mx.tx_packet->flags.request_row = 1;
 8010f3a:	4b07      	ldr	r3, [pc, #28]	; (8010f58 <grid_timer_isr_+0xe80>)
 8010f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f3e:	79d3      	ldrb	r3, [r2, #7]
 8010f40:	f043 0302 	orr.w	r3, r3, #2
 8010f44:	71d3      	strb	r3, [r2, #7]
 8010f46:	e019      	b.n	8010f7c <grid_timer_isr_+0xea4>
 8010f48:	200012c8 	.word	0x200012c8
 8010f4c:	20001430 	.word	0x20001430
 8010f50:	48000800 	.word	0x48000800
 8010f54:	20000410 	.word	0x20000410
 8010f58:	200014f0 	.word	0x200014f0
 8010f5c:	20001308 	.word	0x20001308
 8010f60:	2000112c 	.word	0x2000112c
 8010f64:	08026b0c 	.word	0x08026b0c
 8010f68:	20000cc4 	.word	0x20000cc4
 8010f6c:	08026b34 	.word	0x08026b34
					}
					else
					{
						mx.tx_packet->flags.request_column = 1;
 8010f70:	4baf      	ldr	r3, [pc, #700]	; (8011230 <grid_timer_isr_+0x1158>)
 8010f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f74:	79d3      	ldrb	r3, [r2, #7]
 8010f76:	f043 0301 	orr.w	r3, r3, #1
 8010f7a:	71d3      	strb	r3, [r2, #7]
					}
                }
            }
			#endif

			if (chirp_config.primitive == FLOODING)
 8010f7c:	4bad      	ldr	r3, [pc, #692]	; (8011234 <grid_timer_isr_+0x115c>)
 8010f7e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d105      	bne.n	8010f92 <grid_timer_isr_+0xeba>
				mx.tx_packet->flags.all = chirp_config.glossy_task;
 8010f86:	4baa      	ldr	r3, [pc, #680]	; (8011230 <grid_timer_isr_+0x1158>)
 8010f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f8a:	4aaa      	ldr	r2, [pc, #680]	; (8011234 <grid_timer_isr_+0x115c>)
 8010f8c:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
 8010f90:	71da      	strb	r2, [r3, #7]

			write_tx_fifo(&(mx.tx_packet->phy_payload_begin),
 8010f92:	4ba7      	ldr	r3, [pc, #668]	; (8011230 <grid_timer_isr_+0x1158>)
 8010f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f96:	4618      	mov	r0, r3
			NULL, offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.coding_vector.pos);
 8010f98:	4ba6      	ldr	r3, [pc, #664]	; (8011234 <grid_timer_isr_+0x115c>)
 8010f9a:	799b      	ldrb	r3, [r3, #6]
			write_tx_fifo(&(mx.tx_packet->phy_payload_begin),
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	f7fd fd0a 	bl	800e9bc <write_tx_fifo>
		}

		if (chirp_config.primitive != FLOODING)
 8010fa8:	4ba2      	ldr	r3, [pc, #648]	; (8011234 <grid_timer_isr_+0x115c>)
 8010faa:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	f000 80e9 	beq.w	8011186 <grid_timer_isr_+0x10ae>
		// write coding vector and payload
		{
			assert_reset((chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len));
 8010fb4:	4b9f      	ldr	r3, [pc, #636]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fb6:	7a1b      	ldrb	r3, [r3, #8]
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4b9e      	ldr	r3, [pc, #632]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fbc:	799b      	ldrb	r3, [r3, #6]
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	4b9c      	ldr	r3, [pc, #624]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fc2:	79db      	ldrb	r3, [r3, #7]
 8010fc4:	440b      	add	r3, r1
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d00d      	beq.n	8010fe6 <grid_timer_isr_+0xf0e>
 8010fca:	4b9a      	ldr	r3, [pc, #616]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fcc:	7a1b      	ldrb	r3, [r3, #8]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	4b98      	ldr	r3, [pc, #608]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fd2:	799b      	ldrb	r3, [r3, #6]
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	4b97      	ldr	r3, [pc, #604]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fd8:	79db      	ldrb	r3, [r3, #7]
 8010fda:	440b      	add	r3, r1
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d002      	beq.n	8010fe6 <grid_timer_isr_+0xf0e>
 8010fe0:	b671      	cpsid	f
 8010fe2:	f7fd faa5 	bl	800e530 <NVIC_SystemReset>

			const unsigned int	CHUNK_SIZE = chirp_config.coding_vector.len + chirp_config.payload.len;
 8010fe6:	4b93      	ldr	r3, [pc, #588]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fe8:	79db      	ldrb	r3, [r3, #7]
 8010fea:	461a      	mov	r2, r3
 8010fec:	4b91      	ldr	r3, [pc, #580]	; (8011234 <grid_timer_isr_+0x115c>)
 8010fee:	7a5b      	ldrb	r3, [r3, #9]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

			p = &(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]);
 8010ff6:	4b8e      	ldr	r3, [pc, #568]	; (8011230 <grid_timer_isr_+0x1158>)
 8010ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ffa:	4b8e      	ldr	r3, [pc, #568]	; (8011234 <grid_timer_isr_+0x115c>)
 8010ffc:	799b      	ldrb	r3, [r3, #6]
 8010ffe:	3308      	adds	r3, #8
 8011000:	4413      	add	r3, r2
 8011002:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

			// NOTE: we cast const away which is a bit dirty. We need this only to restore
			// sideload's packed version which is such a negligible change that we prefer
			// mx.tx_sideload to appear as const.
			uint8_t	*ps = (uint8_t*)mx.tx_sideload;
 8011006:	4b8a      	ldr	r3, [pc, #552]	; (8011230 <grid_timer_isr_+0x1158>)
 8011008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801100a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

			#if MX_REQUEST

				int16_t help_index = mx.request->help_index;
 801100e:	4b88      	ldr	r3, [pc, #544]	; (8011230 <grid_timer_isr_+0x1158>)
 8011010:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011014:	895b      	ldrh	r3, [r3, #10]
 8011016:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
				if (help_index > 0)
 801101a:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 801101e:	2b00      	cmp	r3, #0
 8011020:	dd36      	ble.n	8011090 <grid_timer_isr_+0xfb8>
				{
					help_index--;
 8011022:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011026:	b29b      	uxth	r3, r3
 8011028:	3b01      	subs	r3, #1
 801102a:	b29b      	uxth	r3, r3
 801102c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
					if (
						(!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))||!(((uint_fast_t*)p)[help_index / (sizeof(uint_fast_t) * 8)] & mx.request->help_bitmask))
 8011030:	4b7f      	ldr	r3, [pc, #508]	; (8011230 <grid_timer_isr_+0x1158>)
 8011032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011034:	4a7f      	ldr	r2, [pc, #508]	; (8011234 <grid_timer_isr_+0x115c>)
 8011036:	7b92      	ldrb	r2, [r2, #14]
 8011038:	4413      	add	r3, r2
 801103a:	7a1b      	ldrb	r3, [r3, #8]
 801103c:	b25b      	sxtb	r3, r3
					if (
 801103e:	2b00      	cmp	r3, #0
 8011040:	da0e      	bge.n	8011060 <grid_timer_isr_+0xf88>
						(!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))||!(((uint_fast_t*)p)[help_index / (sizeof(uint_fast_t) * 8)] & mx.request->help_bitmask))
 8011042:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011046:	095b      	lsrs	r3, r3, #5
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801104e:	4413      	add	r3, r2
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	4b77      	ldr	r3, [pc, #476]	; (8011230 <grid_timer_isr_+0x1158>)
 8011054:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	4013      	ands	r3, r2
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10c      	bne.n	801107a <grid_timer_isr_+0xfa2>
						{
						ps = &(mx.matrix[help_index]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 8011060:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011064:	4a72      	ldr	r2, [pc, #456]	; (8011230 <grid_timer_isr_+0x1158>)
 8011066:	3316      	adds	r3, #22
 8011068:	009b      	lsls	r3, r3, #2
 801106a:	4413      	add	r3, r2
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	4a71      	ldr	r2, [pc, #452]	; (8011234 <grid_timer_isr_+0x115c>)
 8011070:	7e12      	ldrb	r2, [r2, #24]
 8011072:	4413      	add	r3, r2
 8011074:	3304      	adds	r3, #4
 8011076:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						}
					mx.request->last_update_slot = mx.slot_number + 1;
 801107a:	4b6d      	ldr	r3, [pc, #436]	; (8011230 <grid_timer_isr_+0x1158>)
 801107c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011080:	b29a      	uxth	r2, r3
 8011082:	4b6b      	ldr	r3, [pc, #428]	; (8011230 <grid_timer_isr_+0x1158>)
 8011084:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011088:	3201      	adds	r2, #1
 801108a:	b292      	uxth	r2, r2
 801108c:	811a      	strh	r2, [r3, #8]
 801108e:	e01f      	b.n	80110d0 <grid_timer_isr_+0xff8>
				}
				else if (help_index < 0)
 8011090:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011094:	2b00      	cmp	r3, #0
 8011096:	da1b      	bge.n	80110d0 <grid_timer_isr_+0xff8>
				{
					help_index = -help_index - 1;
 8011098:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801109c:	43db      	mvns	r3, r3
 801109e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
					// NOTE: we don't have to check the packet because if there is one ready, then it
					// has been specifically build in response to the pending request. if the packet
					// is not ready, it is right to do the sideload anyway.
					// if (!mx.tx_packet.is_ready || (help_index < mx_get_leading_index(p)))
					{
						ps = &(mx.matrix[help_index]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 80110a2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80110a6:	4a62      	ldr	r2, [pc, #392]	; (8011230 <grid_timer_isr_+0x1158>)
 80110a8:	3316      	adds	r3, #22
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	4413      	add	r3, r2
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	4a60      	ldr	r2, [pc, #384]	; (8011234 <grid_timer_isr_+0x115c>)
 80110b2:	7e12      	ldrb	r2, [r2, #24]
 80110b4:	4413      	add	r3, r2
 80110b6:	3304      	adds	r3, #4
 80110b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

						mx.request->last_update_slot = mx.slot_number + 1;
 80110bc:	4b5c      	ldr	r3, [pc, #368]	; (8011230 <grid_timer_isr_+0x1158>)
 80110be:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	4b5a      	ldr	r3, [pc, #360]	; (8011230 <grid_timer_isr_+0x1158>)
 80110c6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80110ca:	3201      	adds	r2, #1
 80110cc:	b292      	uxth	r2, r2
 80110ce:	811a      	strh	r2, [r3, #8]
			// NOTE: if it points to rx queue, the format is still packed
			// NOTE: we could also do this when we set mx.tx_sideload (i.e. at a less time critical
			// point), but it is very easy to forget about that. Hence we do it here to avoid
			// programming mistakes.
			// NOTE: the outer condition is resolved at compile time
			if (chirp_config.matrix_payload_8.pos != chirp_config.matrix_payload_8.pos * sizeof(uint_fast_t))
 80110d0:	4b58      	ldr	r3, [pc, #352]	; (8011234 <grid_timer_isr_+0x115c>)
 80110d2:	7e9b      	ldrb	r3, [r3, #26]
 80110d4:	461a      	mov	r2, r3
 80110d6:	4b57      	ldr	r3, [pc, #348]	; (8011234 <grid_timer_isr_+0x115c>)
 80110d8:	7e9b      	ldrb	r3, [r3, #26]
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	429a      	cmp	r2, r3
 80110de:	d015      	beq.n	801110c <grid_timer_isr_+0x1034>
			{
				if ((uintptr_t)ps - (uintptr_t)&(mx.matrix[0]->birth_slot) < chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)))
 80110e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80110e4:	4a52      	ldr	r2, [pc, #328]	; (8011230 <grid_timer_isr_+0x1158>)
 80110e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80110e8:	1a9a      	subs	r2, r3, r2
 80110ea:	4b52      	ldr	r3, [pc, #328]	; (8011234 <grid_timer_isr_+0x115c>)
 80110ec:	885b      	ldrh	r3, [r3, #2]
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	4619      	mov	r1, r3
 80110f2:	4b50      	ldr	r3, [pc, #320]	; (8011234 <grid_timer_isr_+0x115c>)
 80110f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	3301      	adds	r3, #1
 80110fa:	fb03 f301 	mul.w	r3, r3, r1
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	429a      	cmp	r2, r3
 8011102:	d203      	bcs.n	801110c <grid_timer_isr_+0x1034>
				{
					wrap_chunk(ps);
 8011104:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8011108:	f7fd f9c0 	bl	800e48c <wrap_chunk>
				}
            }

			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 801110c:	4b48      	ldr	r3, [pc, #288]	; (8011230 <grid_timer_isr_+0x1158>)
 801110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011110:	4a48      	ldr	r2, [pc, #288]	; (8011234 <grid_timer_isr_+0x115c>)
 8011112:	7b92      	ldrb	r2, [r2, #14]
 8011114:	4413      	add	r3, r2
 8011116:	7a1b      	ldrb	r3, [r3, #8]
 8011118:	b25b      	sxtb	r3, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	db23      	blt.n	8011166 <grid_timer_isr_+0x108e>
			{
				assert_reset((NULL != ps));
 801111e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <grid_timer_isr_+0x105c>
 8011126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801112a:	2b00      	cmp	r3, #0
 801112c:	d102      	bne.n	8011134 <grid_timer_isr_+0x105c>
 801112e:	b671      	cpsid	f
 8011130:	f7fd f9fe 	bl	800e530 <NVIC_SystemReset>

				write_tx_fifo(ps, NULL, CHUNK_SIZE);
 8011134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011138:	b2db      	uxtb	r3, r3
 801113a:	461a      	mov	r2, r3
 801113c:	2100      	movs	r1, #0
 801113e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8011142:	f7fd fc3b 	bl	800e9bc <write_tx_fifo>

				#if MX_VERBOSE_PACKETS || MX_REQUEST
					// mark the packet as broken since it could be possible that we interrupt
					// prepare_tx_packet() right now, hence writing data may damage the packet
					mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_VALID_MASK;
 8011146:	4b3a      	ldr	r3, [pc, #232]	; (8011230 <grid_timer_isr_+0x1158>)
 8011148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114a:	4a3a      	ldr	r2, [pc, #232]	; (8011234 <grid_timer_isr_+0x115c>)
 801114c:	7b92      	ldrb	r2, [r2, #14]
 801114e:	4413      	add	r3, r2
 8011150:	7a1a      	ldrb	r2, [r3, #8]
 8011152:	4b37      	ldr	r3, [pc, #220]	; (8011230 <grid_timer_isr_+0x1158>)
 8011154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011156:	4937      	ldr	r1, [pc, #220]	; (8011234 <grid_timer_isr_+0x115c>)
 8011158:	7b89      	ldrb	r1, [r1, #14]
 801115a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801115e:	b2d2      	uxtb	r2, r2
 8011160:	440b      	add	r3, r1
 8011162:	721a      	strb	r2, [r3, #8]
 8011164:	e00f      	b.n	8011186 <grid_timer_isr_+0x10ae>
				// (2) test if zero, (3) write payload only if test is non-zero. However, we
				// write the full chunk at once to gain better performance in the typical case
				// (that is non-zero coding vector). Processing the full chunk at once not only
				// saves the second call, it also keeps the alignment(!). We expect that this way
				// is more efficient with relatively moderate packet sizes as in IEEE 802.15.4.
				if (!write_tx_fifo(p, ps, CHUNK_SIZE))
 8011166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801116a:	b2db      	uxtb	r3, r3
 801116c:	461a      	mov	r2, r3
 801116e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8011172:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8011176:	f7fd fc21 	bl	800e9bc <write_tx_fifo>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d102      	bne.n	8011186 <grid_timer_isr_+0x10ae>
					p = NULL;
 8011180:	2300      	movs	r3, #0
 8011182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			}
		}

		if (chirp_config.primitive != FLOODING)
 8011186:	4b2b      	ldr	r3, [pc, #172]	; (8011234 <grid_timer_isr_+0x115c>)
 8011188:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801118c:	2b01      	cmp	r3, #1
 801118e:	d043      	beq.n	8011218 <grid_timer_isr_+0x1140>
		{
			// write info vector
			if (NULL != p)
 8011190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011194:	2b00      	cmp	r3, #0
 8011196:	d03f      	beq.n	8011218 <grid_timer_isr_+0x1140>
			{
				#if MX_REQUEST || MX_SMART_SHUTDOWN_MAP

					assert_reset((chirp_config.info_vector.pos == chirp_config.payload.pos + chirp_config.payload.len));
 8011198:	4b26      	ldr	r3, [pc, #152]	; (8011234 <grid_timer_isr_+0x115c>)
 801119a:	7a9b      	ldrb	r3, [r3, #10]
 801119c:	461a      	mov	r2, r3
 801119e:	4b25      	ldr	r3, [pc, #148]	; (8011234 <grid_timer_isr_+0x115c>)
 80111a0:	7a1b      	ldrb	r3, [r3, #8]
 80111a2:	4619      	mov	r1, r3
 80111a4:	4b23      	ldr	r3, [pc, #140]	; (8011234 <grid_timer_isr_+0x115c>)
 80111a6:	7a5b      	ldrb	r3, [r3, #9]
 80111a8:	440b      	add	r3, r1
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d00d      	beq.n	80111ca <grid_timer_isr_+0x10f2>
 80111ae:	4b21      	ldr	r3, [pc, #132]	; (8011234 <grid_timer_isr_+0x115c>)
 80111b0:	7a9b      	ldrb	r3, [r3, #10]
 80111b2:	461a      	mov	r2, r3
 80111b4:	4b1f      	ldr	r3, [pc, #124]	; (8011234 <grid_timer_isr_+0x115c>)
 80111b6:	7a1b      	ldrb	r3, [r3, #8]
 80111b8:	4619      	mov	r1, r3
 80111ba:	4b1e      	ldr	r3, [pc, #120]	; (8011234 <grid_timer_isr_+0x115c>)
 80111bc:	7a5b      	ldrb	r3, [r3, #9]
 80111be:	440b      	add	r3, r1
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d002      	beq.n	80111ca <grid_timer_isr_+0x10f2>
 80111c4:	b671      	cpsid	f
 80111c6:	f7fd f9b3 	bl	800e530 <NVIC_SystemReset>
							ps = &(mx.request->mask[chirp_config.my_column_mask.pos]);
						else ps = &(mx.request->mask[chirp_config.my_row_mask.pos]);
					#elif MX_SMART_SHUTDOWN_MAP
						ps = (uint8_t *)&(mx.full_rank_map->map_hash[chirp_config.hash.pos + 0]);
					#elif MX_REQUEST
						if (mx.tx_packet->flags.request_column)
 80111ca:	4b19      	ldr	r3, [pc, #100]	; (8011230 <grid_timer_isr_+0x1158>)
 80111cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ce:	79db      	ldrb	r3, [r3, #7]
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00b      	beq.n	80111f2 <grid_timer_isr_+0x111a>
							ps = &(mx.request->mask[chirp_config.my_column_mask.pos]);
 80111da:	4b15      	ldr	r3, [pc, #84]	; (8011230 <grid_timer_isr_+0x1158>)
 80111dc:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80111e0:	4b14      	ldr	r3, [pc, #80]	; (8011234 <grid_timer_isr_+0x115c>)
 80111e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80111e6:	3306      	adds	r3, #6
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4413      	add	r3, r2
 80111ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80111f0:	e00a      	b.n	8011208 <grid_timer_isr_+0x1130>
						else ps = &(mx.request->mask[chirp_config.my_row_mask.pos]);
 80111f2:	4b0f      	ldr	r3, [pc, #60]	; (8011230 <grid_timer_isr_+0x1158>)
 80111f4:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80111f8:	4b0e      	ldr	r3, [pc, #56]	; (8011234 <grid_timer_isr_+0x115c>)
 80111fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111fe:	3306      	adds	r3, #6
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	4413      	add	r3, r2
 8011204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
					#else
						#error inconsistent code
					#endif

					write_tx_fifo(ps, NULL, chirp_config.info_vector.len);
 8011208:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <grid_timer_isr_+0x115c>)
 801120a:	7adb      	ldrb	r3, [r3, #11]
 801120c:	461a      	mov	r2, r3
 801120e:	2100      	movs	r1, #0
 8011210:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011214:	f7fd fbd2 	bl	800e9bc <write_tx_fifo>
				#endif
			}
		}
		// if zero packet: abort transmission
		if ((NULL == p) && (chirp_config.primitive != FLOODING))
 8011218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801121c:	2b00      	cmp	r3, #0
 801121e:	d16d      	bne.n	80112fc <grid_timer_isr_+0x1224>
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <grid_timer_isr_+0x115c>)
 8011222:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011226:	2b01      	cmp	r3, #1
 8011228:	d068      	beq.n	80112fc <grid_timer_isr_+0x1224>
		{
			#if MX_LBT_ACCESS
				tx_failed_:
 801122a:	e006      	b.n	801123a <grid_timer_isr_+0x1162>
						goto tx_failed_;
 801122c:	bf00      	nop
 801122e:	e004      	b.n	801123a <grid_timer_isr_+0x1162>
 8011230:	200014f0 	.word	0x200014f0
 8011234:	20001430 	.word	0x20001430
						goto tx_failed_;
 8011238:	bf00      	nop
				s.lbt_tx_on = CCA_NONE;
 801123a:	4b29      	ldr	r3, [pc, #164]	; (80112e0 <grid_timer_isr_+0x1208>)
 801123c:	2200      	movs	r2, #0
 801123e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 8011242:	4b27      	ldr	r3, [pc, #156]	; (80112e0 <grid_timer_isr_+0x1208>)
 8011244:	2200      	movs	r2, #0
 8011246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			#endif

			// turn radio off
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 801124a:	2000      	movs	r0, #0
 801124c:	f7fb fb40 	bl	800c8d0 <SX1276SetOpMode>
 8011250:	2300      	movs	r3, #0
 8011252:	673b      	str	r3, [r7, #112]	; 0x70
	if (mask)
 8011254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011256:	2b00      	cmp	r3, #0
 8011258:	d002      	beq.n	8011260 <grid_timer_isr_+0x1188>
		LED_GPIO_Port->BRR = mask;
 801125a:	4a22      	ldr	r2, [pc, #136]	; (80112e4 <grid_timer_isr_+0x120c>)
 801125c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801125e:	6293      	str	r3, [r2, #40]	; 0x28
 8011260:	4b21      	ldr	r3, [pc, #132]	; (80112e8 <grid_timer_isr_+0x1210>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	6a5a      	ldr	r2, [r3, #36]	; 0x24

			gpi_led_off(LED_TX);

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 8011266:	4b1e      	ldr	r3, [pc, #120]	; (80112e0 <grid_timer_isr_+0x1208>)
 8011268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801126a:	1ad2      	subs	r2, r2, r3
 801126c:	4b1f      	ldr	r3, [pc, #124]	; (80112ec <grid_timer_isr_+0x1214>)
 801126e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8011272:	4413      	add	r3, r2
 8011274:	4a1d      	ldr	r2, [pc, #116]	; (80112ec <grid_timer_isr_+0x1214>)
 8011276:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
				s.radio_start_timestamp = 0;
 801127a:	4b19      	ldr	r3, [pc, #100]	; (80112e0 <grid_timer_isr_+0x1208>)
 801127c:	2200      	movs	r2, #0
 801127e:	635a      	str	r2, [r3, #52]	; 0x34
				mx.stat_counter.num_tx_zero_packet++;
 8011280:	4b1a      	ldr	r3, [pc, #104]	; (80112ec <grid_timer_isr_+0x1214>)
 8011282:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
 8011286:	3301      	adds	r3, #1
 8011288:	b29a      	uxth	r2, r3
 801128a:	4b18      	ldr	r3, [pc, #96]	; (80112ec <grid_timer_isr_+0x1214>)
 801128c:	f8a3 288c 	strh.w	r2, [r3, #2188]	; 0x88c
			#endif

			#if ENERGEST_CONF_ON
				ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 8011290:	4b17      	ldr	r3, [pc, #92]	; (80112f0 <grid_timer_isr_+0x1218>)
 8011292:	7b9b      	ldrb	r3, [r3, #14]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00d      	beq.n	80112b4 <grid_timer_isr_+0x11dc>
 8011298:	4b13      	ldr	r3, [pc, #76]	; (80112e8 <grid_timer_isr_+0x1210>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801129e:	4b15      	ldr	r3, [pc, #84]	; (80112f4 <grid_timer_isr_+0x121c>)
 80112a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a2:	1ad2      	subs	r2, r2, r3
 80112a4:	4b14      	ldr	r3, [pc, #80]	; (80112f8 <grid_timer_isr_+0x1220>)
 80112a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a8:	4413      	add	r3, r2
 80112aa:	4a13      	ldr	r2, [pc, #76]	; (80112f8 <grid_timer_isr_+0x1220>)
 80112ac:	6393      	str	r3, [r2, #56]	; 0x38
 80112ae:	4b10      	ldr	r3, [pc, #64]	; (80112f0 <grid_timer_isr_+0x1218>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	739a      	strb	r2, [r3, #14]
 80112b4:	4b0c      	ldr	r3, [pc, #48]	; (80112e8 <grid_timer_isr_+0x1210>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			#endif

			#if MX_LBT_ACCESS
				s.tx_on_time = gpi_tick_fast_native() - s.tx_on_time;
 80112ba:	4b09      	ldr	r3, [pc, #36]	; (80112e0 <grid_timer_isr_+0x1208>)
 80112bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	4a07      	ldr	r2, [pc, #28]	; (80112e0 <grid_timer_isr_+0x1208>)
 80112c2:	6453      	str	r3, [r2, #68]	; 0x44
				lbt_update_channel((uint32_t)gpi_tick_hybrid_to_us(s.tx_on_time), s.tx_now_channel);
 80112c4:	4b06      	ldr	r3, [pc, #24]	; (80112e0 <grid_timer_isr_+0x1208>)
 80112c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c8:	66fb      	str	r3, [r7, #108]	; 0x6c
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 80112ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112cc:	091a      	lsrs	r2, r3, #4
 80112ce:	4b04      	ldr	r3, [pc, #16]	; (80112e0 <grid_timer_isr_+0x1208>)
 80112d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112d4:	4619      	mov	r1, r3
 80112d6:	4610      	mov	r0, r2
 80112d8:	f7f9 f98a 	bl	800a5f0 <lbt_update_channel>
			#endif

			GPI_TRACE_MSG_FAST(TRACE_INFO, "sideload produced zero-packet -> Tx aborted");
 80112dc:	bf00      	nop
		if ((NULL == p) && (chirp_config.primitive != FLOODING))
 80112de:	e0c0      	b.n	8011462 <grid_timer_isr_+0x138a>
 80112e0:	20000410 	.word	0x20000410
 80112e4:	48000800 	.word	0x48000800
 80112e8:	200012c8 	.word	0x200012c8
 80112ec:	200014f0 	.word	0x200014f0
 80112f0:	2000112c 	.word	0x2000112c
 80112f4:	20001308 	.word	0x20001308
 80112f8:	20000f10 	.word	0x20000f10
        }

		else
		{
 80112fc:	466b      	mov	r3, sp
 80112fe:	461d      	mov	r5, r3
			// update mx.tx_packet to enable evaluation on processing layer
			// NOTE: not all fields are needed for MX_REQUEST,
			// particularly payload could be dropped (e.g. if time is critical)
			// TODO:
			uint8_t Buffer2[chirp_config.phy_payload_size];
 8011300:	4bb3      	ldr	r3, [pc, #716]	; (80115d0 <grid_timer_isr_+0x14f8>)
 8011302:	8a5b      	ldrh	r3, [r3, #18]
 8011304:	b298      	uxth	r0, r3
 8011306:	4603      	mov	r3, r0
 8011308:	3b01      	subs	r3, #1
 801130a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801130e:	b281      	uxth	r1, r0
 8011310:	f04f 0200 	mov.w	r2, #0
 8011314:	f04f 0300 	mov.w	r3, #0
 8011318:	f04f 0400 	mov.w	r4, #0
 801131c:	00d4      	lsls	r4, r2, #3
 801131e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011322:	00cb      	lsls	r3, r1, #3
 8011324:	b281      	uxth	r1, r0
 8011326:	f04f 0200 	mov.w	r2, #0
 801132a:	f04f 0300 	mov.w	r3, #0
 801132e:	f04f 0400 	mov.w	r4, #0
 8011332:	00d4      	lsls	r4, r2, #3
 8011334:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011338:	00cb      	lsls	r3, r1, #3
 801133a:	4603      	mov	r3, r0
 801133c:	3307      	adds	r3, #7
 801133e:	08db      	lsrs	r3, r3, #3
 8011340:	00db      	lsls	r3, r3, #3
 8011342:	ebad 0d03 	sub.w	sp, sp, r3
 8011346:	466b      	mov	r3, sp
 8011348:	3300      	adds	r3, #0
 801134a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

			SX1276Write( REG_LR_FIFOADDRPTR, 0);
 801134e:	2100      	movs	r1, #0
 8011350:	200d      	movs	r0, #13
 8011352:	f7fb fb35 	bl	800c9c0 <SX1276Write>
			SX1276ReadBuffer( 0, Buffer2, chirp_config.phy_payload_size );
 8011356:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801135a:	4b9d      	ldr	r3, [pc, #628]	; (80115d0 <grid_timer_isr_+0x14f8>)
 801135c:	8a5b      	ldrh	r3, [r3, #18]
 801135e:	b29b      	uxth	r3, r3
 8011360:	b2db      	uxtb	r3, r3
 8011362:	461a      	mov	r2, r3
 8011364:	2000      	movs	r0, #0
 8011366:	f7fb fb81 	bl	800ca6c <SX1276ReadBuffer>
			SX1276Write( REG_LR_FIFOADDRPTR, 0);
 801136a:	2100      	movs	r1, #0
 801136c:	200d      	movs	r0, #13
 801136e:	f7fb fb27 	bl	800c9c0 <SX1276Write>

			uint16_t code_tail_hash_tx = Chirp_RSHash((uint8_t *)Buffer2, chirp_config.phy_payload_size);
 8011372:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011376:	4b96      	ldr	r3, [pc, #600]	; (80115d0 <grid_timer_isr_+0x14f8>)
 8011378:	8a5b      	ldrh	r3, [r3, #18]
 801137a:	b29b      	uxth	r3, r3
 801137c:	4619      	mov	r1, r3
 801137e:	4610      	mov	r0, r2
 8011380:	f00d fd38 	bl	801edf4 <Chirp_RSHash>
 8011384:	4603      	mov	r3, r0
 8011386:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
			uint8_t hash_code_tx[2];
			hash_code_tx[0] = code_tail_hash_tx >> 8;
 801138a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801138e:	0a1b      	lsrs	r3, r3, #8
 8011390:	b29b      	uxth	r3, r3
 8011392:	b2da      	uxtb	r2, r3
 8011394:	f107 0308 	add.w	r3, r7, #8
 8011398:	701a      	strb	r2, [r3, #0]
			hash_code_tx[1] = code_tail_hash_tx;
 801139a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	f107 0308 	add.w	r3, r7, #8
 80113a4:	705a      	strb	r2, [r3, #1]
			SX1276Write( REG_LR_FIFOADDRPTR, chirp_config.phy_payload_size );
 80113a6:	4b8a      	ldr	r3, [pc, #552]	; (80115d0 <grid_timer_isr_+0x14f8>)
 80113a8:	8a5b      	ldrh	r3, [r3, #18]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	4619      	mov	r1, r3
 80113b0:	200d      	movs	r0, #13
 80113b2:	f7fb fb05 	bl	800c9c0 <SX1276Write>
			write_tx_fifo(hash_code_tx, NULL, HASH_TAIL_CODE);
 80113b6:	f107 0308 	add.w	r3, r7, #8
 80113ba:	2202      	movs	r2, #2
 80113bc:	2100      	movs	r1, #0
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fd fafc 	bl	800e9bc <write_tx_fifo>

			// unmask IRQ
			SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80113c4:	21f7      	movs	r1, #247	; 0xf7
 80113c6:	2011      	movs	r0, #17
 80113c8:	f7fb fafa 	bl	800c9c0 <SX1276Write>
												RFLR_IRQFLAGS_CADDONE |
												RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
												RFLR_IRQFLAGS_CADDETECTED );

			// DIO0=TxDone
			SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80113cc:	2040      	movs	r0, #64	; 0x40
 80113ce:	f7fb fb09 	bl	800c9e4 <SX1276Read>
 80113d2:	4603      	mov	r3, r0
 80113d4:	b25b      	sxtb	r3, r3
 80113d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113da:	b25b      	sxtb	r3, r3
 80113dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113e0:	b25b      	sxtb	r3, r3
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	4619      	mov	r1, r3
 80113e6:	2040      	movs	r0, #64	; 0x40
 80113e8:	f7fb faea 	bl	800c9c0 <SX1276Write>

			gpi_memcpy_dma_aligned(&(mx.tx_packet->phy_payload_begin), Buffer2, chirp_config.phy_payload_size);
 80113ec:	4b79      	ldr	r3, [pc, #484]	; (80115d4 <grid_timer_isr_+0x14fc>)
 80113ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f0:	4619      	mov	r1, r3
 80113f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80113f6:	4a76      	ldr	r2, [pc, #472]	; (80115d0 <grid_timer_isr_+0x14f8>)
 80113f8:	8a52      	ldrh	r2, [r2, #18]
 80113fa:	b292      	uxth	r2, r2
 80113fc:	6579      	str	r1, [r7, #84]	; 0x54
 80113fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011400:	64fa      	str	r2, [r7, #76]	; 0x4c
	__builtin_memcpy(dest, src, size);
 8011402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011406:	4610      	mov	r0, r2
 8011408:	4619      	mov	r1, r3
 801140a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801140c:	461a      	mov	r2, r3
 801140e:	f010 f8b1 	bl	8021574 <memcpy>
 8011412:	2302      	movs	r3, #2
 8011414:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	gpi_atomic_set(&(mx.events), BV(event));
 8011418:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801141c:	2201      	movs	r2, #1
 801141e:	fa02 f303 	lsl.w	r3, r2, r3
 8011422:	4a6c      	ldr	r2, [pc, #432]	; (80115d4 <grid_timer_isr_+0x14fc>)
 8011424:	667a      	str	r2, [r7, #100]	; 0x64
 8011426:	663b      	str	r3, [r7, #96]	; 0x60
 8011428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801142a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801142c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801142e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dmb 0xF":::"memory");
 8011430:	f3bf 8f5f 	dmb	sy
 8011434:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801143a:	e851 0f00 	ldrex	r0, [r1]
 801143e:	ea40 0003 	orr.w	r0, r0, r3
 8011442:	e841 0300 	strex	r3, r0, [r1]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1f7      	bne.n	801143a <grid_timer_isr_+0x1362>
 801144a:	f3bf 8f5f 	dmb	sy

			set_event(TX_READY);

			mx.stat_counter.num_sent++;
 801144e:	4b61      	ldr	r3, [pc, #388]	; (80115d4 <grid_timer_isr_+0x14fc>)
 8011450:	f8b3 3874 	ldrh.w	r3, [r3, #2164]	; 0x874
 8011454:	3301      	adds	r3, #1
 8011456:	b29a      	uxth	r2, r3
 8011458:	4b5e      	ldr	r3, [pc, #376]	; (80115d4 <grid_timer_isr_+0x14fc>)
 801145a:	f8a3 2874 	strh.w	r2, [r3, #2164]	; 0x874

			GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx started");
 801145e:	bf00      	nop
 8011460:	46ad      	mov	sp, r5

        }

		s.slot_state = TX_RUNNING;
 8011462:	4b5d      	ldr	r3, [pc, #372]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011464:	220c      	movs	r2, #12
 8011466:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 801146a:	4b5a      	ldr	r3, [pc, #360]	; (80115d4 <grid_timer_isr_+0x14fc>)
 801146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146e:	4a58      	ldr	r2, [pc, #352]	; (80115d0 <grid_timer_isr_+0x14f8>)
 8011470:	7b92      	ldrb	r2, [r2, #14]
 8011472:	4413      	add	r3, r2
 8011474:	7a1a      	ldrb	r2, [r3, #8]
 8011476:	4b57      	ldr	r3, [pc, #348]	; (80115d4 <grid_timer_isr_+0x14fc>)
 8011478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801147a:	4955      	ldr	r1, [pc, #340]	; (80115d0 <grid_timer_isr_+0x14f8>)
 801147c:	7b89      	ldrb	r1, [r1, #14]
 801147e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011482:	b2d2      	uxtb	r2, r2
 8011484:	440b      	add	r3, r1
 8011486:	721a      	strb	r2, [r3, #8]
		mx.tx_sideload = NULL;
 8011488:	4b52      	ldr	r3, [pc, #328]	; (80115d4 <grid_timer_isr_+0x14fc>)
 801148a:	2200      	movs	r2, #0
 801148c:	645a      	str	r2, [r3, #68]	; 0x44
		s.next_slot_task = RX;
 801148e:	4b52      	ldr	r3, [pc, #328]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011490:	2200      	movs	r2, #0
 8011492:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		PROFILE_ISR("grid timer ISR start Tx end");
 8011496:	bf00      	nop
	}

	if (RESYNC != s.slot_state)
 8011498:	4b4f      	ldr	r3, [pc, #316]	; (80115d8 <grid_timer_isr_+0x1500>)
 801149a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d05a      	beq.n	8011558 <grid_timer_isr_+0x1480>
	{
		mx.slot_number++;
 80114a2:	4b4c      	ldr	r3, [pc, #304]	; (80115d4 <grid_timer_isr_+0x14fc>)
 80114a4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	3301      	adds	r3, #1
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	4b49      	ldr	r3, [pc, #292]	; (80115d4 <grid_timer_isr_+0x14fc>)
 80114b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80114b4:	2301      	movs	r3, #1
 80114b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	gpi_atomic_set(&(mx.events), BV(event));
 80114ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80114be:	2201      	movs	r2, #1
 80114c0:	fa02 f303 	lsl.w	r3, r2, r3
 80114c4:	4a43      	ldr	r2, [pc, #268]	; (80115d4 <grid_timer_isr_+0x14fc>)
 80114c6:	647a      	str	r2, [r7, #68]	; 0x44
 80114c8:	643b      	str	r3, [r7, #64]	; 0x40
 80114ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80114d2:	f3bf 8f5f 	dmb	sy
 80114d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80114dc:	e851 0f00 	ldrex	r0, [r1]
 80114e0:	ea40 0003 	orr.w	r0, r0, r3
 80114e4:	e841 0300 	strex	r3, r0, [r1]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d1f7      	bne.n	80114dc <grid_timer_isr_+0x1404>
 80114ec:	f3bf 8f5f 	dmb	sy
		set_event(SLOT_UPDATE);

		s.next_grid_tick += chirp_config.mx_slot_length + s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 80114f0:	4b39      	ldr	r3, [pc, #228]	; (80115d8 <grid_timer_isr_+0x1500>)
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	4b36      	ldr	r3, [pc, #216]	; (80115d0 <grid_timer_isr_+0x14f8>)
 80114f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114f8:	4937      	ldr	r1, [pc, #220]	; (80115d8 <grid_timer_isr_+0x1500>)
 80114fa:	6988      	ldr	r0, [r1, #24]
 80114fc:	4937      	ldr	r1, [pc, #220]	; (80115dc <grid_timer_isr_+0x1504>)
 80114fe:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8011500:	4c36      	ldr	r4, [pc, #216]	; (80115dc <grid_timer_isr_+0x1504>)
 8011502:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8011504:	fb04 f101 	mul.w	r1, r4, r1
 8011508:	fb90 f1f1 	sdiv	r1, r0, r1
 801150c:	440b      	add	r3, r1
 801150e:	4413      	add	r3, r2
 8011510:	4a31      	ldr	r2, [pc, #196]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011512:	6053      	str	r3, [r2, #4]

		s.hybrid_trigger = s.next_grid_tick;
 8011514:	4b30      	ldr	r3, [pc, #192]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	4a2f      	ldr	r2, [pc, #188]	; (80115d8 <grid_timer_isr_+0x1500>)
 801151a:	6113      	str	r3, [r2, #16]

		s.next_trigger_tick = s.next_grid_tick -
 801151c:	4b2e      	ldr	r3, [pc, #184]	; (80115d8 <grid_timer_isr_+0x1500>)
 801151e:	685a      	ldr	r2, [r3, #4]
			((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 8011520:	4b2d      	ldr	r3, [pc, #180]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011526:	2b01      	cmp	r3, #1
 8011528:	d102      	bne.n	8011530 <grid_timer_isr_+0x1458>
 801152a:	4b2b      	ldr	r3, [pc, #172]	; (80115d8 <grid_timer_isr_+0x1500>)
 801152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152e:	e001      	b.n	8011534 <grid_timer_isr_+0x145c>
 8011530:	4b29      	ldr	r3, [pc, #164]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011532:	6a1b      	ldr	r3, [r3, #32]
		s.next_trigger_tick = s.next_grid_tick -
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	4a28      	ldr	r2, [pc, #160]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011538:	6093      	str	r3, [r2, #8]

		if (TX_RUNNING == s.slot_state)
 801153a:	4b27      	ldr	r3, [pc, #156]	; (80115d8 <grid_timer_isr_+0x1500>)
 801153c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011540:	2b0c      	cmp	r3, #12
 8011542:	d109      	bne.n	8011558 <grid_timer_isr_+0x1480>
		{

			#if MX_LBT_ACCESS
				s.lbt_tx_on = CCA_NONE;
 8011544:	4b24      	ldr	r3, [pc, #144]	; (80115d8 <grid_timer_isr_+0x1500>)
 8011546:	2200      	movs	r2, #0
 8011548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 801154c:	4b22      	ldr	r3, [pc, #136]	; (80115d8 <grid_timer_isr_+0x1500>)
 801154e:	2200      	movs	r2, #0
 8011550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			#endif

			start_grid_timer();
 8011554:	f7fd fa98 	bl	800ea88 <start_grid_timer>
		}
	}

	GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "slot_state: %d, next_grid: %lu, rx_offset: %u",
 8011558:	bf00      	nop
 801155a:	2303      	movs	r3, #3
 801155c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	gpi_atomic_set(&(mx.events), BV(event));
 8011560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011564:	2201      	movs	r2, #1
 8011566:	fa02 f303 	lsl.w	r3, r2, r3
 801156a:	4a1a      	ldr	r2, [pc, #104]	; (80115d4 <grid_timer_isr_+0x14fc>)
 801156c:	633a      	str	r2, [r7, #48]	; 0x30
 801156e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011572:	62bb      	str	r3, [r7, #40]	; 0x28
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	627b      	str	r3, [r7, #36]	; 0x24
 8011578:	f3bf 8f5f 	dmb	sy
 801157c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011582:	e851 0f00 	ldrex	r0, [r1]
 8011586:	ea40 0003 	orr.w	r0, r0, r3
 801158a:	e841 0300 	strex	r3, r0, [r1]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f7      	bne.n	8011582 <grid_timer_isr_+0x14aa>
 8011592:	f3bf 8f5f 	dmb	sy
	// set general purpose trigger event
	// compared to SLOT_UPDATE, TRIGGER_TICK is generated also during RESYNC periods (once
	// in a while). It can be used for maintenance tasks that are less time critical.
	set_event(TRIGGER_TICK);

	PROFILE_ISR("grid timer ISR return");
 8011596:	bf00      	nop

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8011598:	4b11      	ldr	r3, [pc, #68]	; (80115e0 <grid_timer_isr_+0x1508>)
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d027      	beq.n	80115f0 <grid_timer_isr_+0x1518>
	return htim2.Instance->CNT;
 80115a0:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <grid_timer_isr_+0x150c>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115a6:	4b10      	ldr	r3, [pc, #64]	; (80115e8 <grid_timer_isr_+0x1510>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	4b0f      	ldr	r3, [pc, #60]	; (80115ec <grid_timer_isr_+0x1514>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	4413      	add	r3, r2
 80115b2:	4a0e      	ldr	r2, [pc, #56]	; (80115ec <grid_timer_isr_+0x1514>)
 80115b4:	6013      	str	r3, [r2, #0]
 80115b6:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <grid_timer_isr_+0x1508>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_RETURN_FAST();
 80115bc:	bf00      	nop
 80115be:	e017      	b.n	80115f0 <grid_timer_isr_+0x1518>
						GPI_TRACE_RETURN_FAST();
 80115c0:	bf00      	nop
 80115c2:	e016      	b.n	80115f2 <grid_timer_isr_+0x151a>
				GPI_TRACE_RETURN_FAST();
 80115c4:	bf00      	nop
 80115c6:	e014      	b.n	80115f2 <grid_timer_isr_+0x151a>
						GPI_TRACE_RETURN_FAST();
 80115c8:	bf00      	nop
 80115ca:	e012      	b.n	80115f2 <grid_timer_isr_+0x151a>
						GPI_TRACE_RETURN_FAST();
 80115cc:	bf00      	nop
 80115ce:	e010      	b.n	80115f2 <grid_timer_isr_+0x151a>
 80115d0:	20001430 	.word	0x20001430
 80115d4:	200014f0 	.word	0x200014f0
 80115d8:	20000410 	.word	0x20000410
 80115dc:	200003c4 	.word	0x200003c4
 80115e0:	2000112c 	.word	0x2000112c
 80115e4:	200012c8 	.word	0x200012c8
 80115e8:	20001308 	.word	0x20001308
 80115ec:	20000f10 	.word	0x20000f10
	GPI_TRACE_RETURN_FAST();
 80115f0:	bf00      	nop
}
 80115f2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bdb0      	pop	{r4, r5, r7, pc}
 80115fa:	bf00      	nop

080115fc <mixer_transport_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_transport_init()
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8011600:	bf00      	nop

	mixer_transport_initiate_radio();
 8011602:	f7fc ffa9 	bl	800e558 <mixer_transport_initiate_radio>

	#undef PRINT

#endif

	GPI_TRACE_RETURN();
 8011606:	bf00      	nop
}
 8011608:	bd80      	pop	{r7, pc}
	...

0801160c <mixer_transport_arm_initiator>:

//**************************************************************************************************

void mixer_transport_arm_initiator()
{
 801160c:	b480      	push	{r7}
 801160e:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8011610:	bf00      	nop

	s.grid_drift			= 0;
 8011612:	4b0b      	ldr	r3, [pc, #44]	; (8011640 <mixer_transport_arm_initiator+0x34>)
 8011614:	2200      	movs	r2, #0
 8011616:	619a      	str	r2, [r3, #24]
	s.grid_drift_cumulative = 0;
 8011618:	4b09      	ldr	r3, [pc, #36]	; (8011640 <mixer_transport_arm_initiator+0x34>)
 801161a:	2200      	movs	r2, #0
 801161c:	61da      	str	r2, [r3, #28]
	s.tx_trigger_offset 	= radio.tx_to_grid_offset;
 801161e:	4b09      	ldr	r3, [pc, #36]	; (8011644 <mixer_transport_arm_initiator+0x38>)
 8011620:	695b      	ldr	r3, [r3, #20]
 8011622:	4a07      	ldr	r2, [pc, #28]	; (8011640 <mixer_transport_arm_initiator+0x34>)
 8011624:	6253      	str	r3, [r2, #36]	; 0x24
	s.rx_trigger_offset 	= radio.rx_to_grid_offset + radio.rx_window_max / 2;
 8011626:	4b07      	ldr	r3, [pc, #28]	; (8011644 <mixer_transport_arm_initiator+0x38>)
 8011628:	691a      	ldr	r2, [r3, #16]
 801162a:	4b06      	ldr	r3, [pc, #24]	; (8011644 <mixer_transport_arm_initiator+0x38>)
 801162c:	69db      	ldr	r3, [r3, #28]
 801162e:	085b      	lsrs	r3, r3, #1
 8011630:	4413      	add	r3, r2
 8011632:	4a03      	ldr	r2, [pc, #12]	; (8011640 <mixer_transport_arm_initiator+0x34>)
 8011634:	6213      	str	r3, [r2, #32]


	GPI_TRACE_RETURN();
 8011636:	bf00      	nop
}
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	20000410 	.word	0x20000410
 8011644:	200003c4 	.word	0x200003c4

08011648 <mixer_transport_start>:

//**************************************************************************************************

void mixer_transport_start()
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION_FAST();
 801164e:	bf00      	nop

	GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "start grid timer");
 8011650:	bf00      	nop
	if (chirp_config.primitive != FLOODING)
 8011652:	4bad      	ldr	r3, [pc, #692]	; (8011908 <mixer_transport_start+0x2c0>)
 8011654:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011658:	2b01      	cmp	r3, #1
 801165a:	f000 80d0 	beq.w	80117fe <mixer_transport_start+0x1b6>
	{
	if (mx.tx_sideload)		// if initiator
 801165e:	4bab      	ldr	r3, [pc, #684]	; (801190c <mixer_transport_start+0x2c4>)
 8011660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011662:	2b00      	cmp	r3, #0
 8011664:	d065      	beq.n	8011732 <mixer_transport_start+0xea>
 8011666:	2302      	movs	r3, #2
 8011668:	60fb      	str	r3, [r7, #12]
	if (2 == mode)
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d108      	bne.n	8011682 <mixer_transport_start+0x3a>
		s.slot_state = IDLE;
 8011670:	4ba7      	ldr	r3, [pc, #668]	; (8011910 <mixer_transport_start+0x2c8>)
 8011672:	220c      	movs	r2, #12
 8011674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 8011678:	4ba5      	ldr	r3, [pc, #660]	; (8011910 <mixer_transport_start+0x2c8>)
 801167a:	2201      	movs	r2, #1
 801167c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011680:	e01d      	b.n	80116be <mixer_transport_start+0x76>
	else if (1 == mode)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d108      	bne.n	801169a <mixer_transport_start+0x52>
		s.slot_state = RESYNC;
 8011688:	4ba1      	ldr	r3, [pc, #644]	; (8011910 <mixer_transport_start+0x2c8>)
 801168a:	2200      	movs	r2, #0
 801168c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011690:	4b9f      	ldr	r3, [pc, #636]	; (8011910 <mixer_transport_start+0x2c8>)
 8011692:	2200      	movs	r2, #0
 8011694:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011698:	e011      	b.n	80116be <mixer_transport_start+0x76>
	else if (STOP == s.next_slot_task)
 801169a:	4b9d      	ldr	r3, [pc, #628]	; (8011910 <mixer_transport_start+0x2c8>)
 801169c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116a0:	2b02      	cmp	r3, #2
 80116a2:	d104      	bne.n	80116ae <mixer_transport_start+0x66>
		s.slot_state = IDLE;
 80116a4:	4b9a      	ldr	r3, [pc, #616]	; (8011910 <mixer_transport_start+0x2c8>)
 80116a6:	220c      	movs	r2, #12
 80116a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80116ac:	e007      	b.n	80116be <mixer_transport_start+0x76>
		s.slot_state = RESYNC;
 80116ae:	4b98      	ldr	r3, [pc, #608]	; (8011910 <mixer_transport_start+0x2c8>)
 80116b0:	2200      	movs	r2, #0
 80116b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 80116b6:	4b96      	ldr	r3, [pc, #600]	; (8011910 <mixer_transport_start+0x2c8>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 80116be:	f7fd f941 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80116c2:	4b94      	ldr	r3, [pc, #592]	; (8011914 <mixer_transport_start+0x2cc>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f06f 0202 	mvn.w	r2, #2
 80116ca:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 80116cc:	f7fd f964 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 80116d0:	4b91      	ldr	r3, [pc, #580]	; (8011918 <mixer_transport_start+0x2d0>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2201      	movs	r2, #1
 80116d6:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 80116d8:	2001      	movs	r0, #1
 80116da:	f7fd f8f3 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d022      	beq.n	801172a <mixer_transport_start+0xe2>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 80116e4:	4b8b      	ldr	r3, [pc, #556]	; (8011914 <mixer_transport_start+0x2cc>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fa fa42 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 80116f0:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 80116f2:	4b8a      	ldr	r3, [pc, #552]	; (801191c <mixer_transport_start+0x2d4>)
 80116f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116f6:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 80116f8:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 80116fa:	4b88      	ldr	r3, [pc, #544]	; (801191c <mixer_transport_start+0x2d4>)
 80116fc:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 80116fe:	4413      	add	r3, r2
 8011700:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 8011704:	4a82      	ldr	r2, [pc, #520]	; (8011910 <mixer_transport_start+0x2c8>)
 8011706:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 8011708:	f7fd f91c 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801170c:	4b81      	ldr	r3, [pc, #516]	; (8011914 <mixer_transport_start+0x2cc>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f06f 0202 	mvn.w	r2, #2
 8011714:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 8011716:	4b7f      	ldr	r3, [pc, #508]	; (8011914 <mixer_transport_start+0x2cc>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801171c:	4b7d      	ldr	r3, [pc, #500]	; (8011914 <mixer_transport_start+0x2cc>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8011724:	635a      	str	r2, [r3, #52]	; 0x34
 8011726:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 801172a:	2000      	movs	r0, #0
 801172c:	f7fd f8f2 	bl	800e914 <unmask_main_timer>
		if (!node_id_allocate)		// if initiator
			enter_resync(2);
		else
			enter_resync(1);
	}
	GPI_TRACE_RETURN_FAST();
 8011730:	e144      	b.n	80119bc <mixer_transport_start+0x374>
 8011732:	2301      	movs	r3, #1
 8011734:	60bb      	str	r3, [r7, #8]
	if (2 == mode)
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b02      	cmp	r3, #2
 801173a:	d108      	bne.n	801174e <mixer_transport_start+0x106>
		s.slot_state = IDLE;
 801173c:	4b74      	ldr	r3, [pc, #464]	; (8011910 <mixer_transport_start+0x2c8>)
 801173e:	220c      	movs	r2, #12
 8011740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 8011744:	4b72      	ldr	r3, [pc, #456]	; (8011910 <mixer_transport_start+0x2c8>)
 8011746:	2201      	movs	r2, #1
 8011748:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801174c:	e01d      	b.n	801178a <mixer_transport_start+0x142>
	else if (1 == mode)
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d108      	bne.n	8011766 <mixer_transport_start+0x11e>
		s.slot_state = RESYNC;
 8011754:	4b6e      	ldr	r3, [pc, #440]	; (8011910 <mixer_transport_start+0x2c8>)
 8011756:	2200      	movs	r2, #0
 8011758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 801175c:	4b6c      	ldr	r3, [pc, #432]	; (8011910 <mixer_transport_start+0x2c8>)
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011764:	e011      	b.n	801178a <mixer_transport_start+0x142>
	else if (STOP == s.next_slot_task)
 8011766:	4b6a      	ldr	r3, [pc, #424]	; (8011910 <mixer_transport_start+0x2c8>)
 8011768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801176c:	2b02      	cmp	r3, #2
 801176e:	d104      	bne.n	801177a <mixer_transport_start+0x132>
		s.slot_state = IDLE;
 8011770:	4b67      	ldr	r3, [pc, #412]	; (8011910 <mixer_transport_start+0x2c8>)
 8011772:	220c      	movs	r2, #12
 8011774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011778:	e007      	b.n	801178a <mixer_transport_start+0x142>
		s.slot_state = RESYNC;
 801177a:	4b65      	ldr	r3, [pc, #404]	; (8011910 <mixer_transport_start+0x2c8>)
 801177c:	2200      	movs	r2, #0
 801177e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011782:	4b63      	ldr	r3, [pc, #396]	; (8011910 <mixer_transport_start+0x2c8>)
 8011784:	2200      	movs	r2, #0
 8011786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 801178a:	f7fd f8db 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801178e:	4b61      	ldr	r3, [pc, #388]	; (8011914 <mixer_transport_start+0x2cc>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f06f 0202 	mvn.w	r2, #2
 8011796:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8011798:	f7fd f8fe 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 801179c:	4b5e      	ldr	r3, [pc, #376]	; (8011918 <mixer_transport_start+0x2d0>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2201      	movs	r2, #1
 80117a2:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 80117a4:	2001      	movs	r0, #1
 80117a6:	f7fd f88d 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d022      	beq.n	80117f6 <mixer_transport_start+0x1ae>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 80117b0:	4b58      	ldr	r3, [pc, #352]	; (8011914 <mixer_transport_start+0x2cc>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fa f9dc 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 80117bc:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 80117be:	4b57      	ldr	r3, [pc, #348]	; (801191c <mixer_transport_start+0x2d4>)
 80117c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117c2:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 80117c4:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 80117c6:	4b55      	ldr	r3, [pc, #340]	; (801191c <mixer_transport_start+0x2d4>)
 80117c8:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 80117ca:	4413      	add	r3, r2
 80117cc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 80117d0:	4a4f      	ldr	r2, [pc, #316]	; (8011910 <mixer_transport_start+0x2c8>)
 80117d2:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 80117d4:	f7fd f8b6 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80117d8:	4b4e      	ldr	r3, [pc, #312]	; (8011914 <mixer_transport_start+0x2cc>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f06f 0202 	mvn.w	r2, #2
 80117e0:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 80117e2:	4b4c      	ldr	r3, [pc, #304]	; (8011914 <mixer_transport_start+0x2cc>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117e8:	4b4a      	ldr	r3, [pc, #296]	; (8011914 <mixer_transport_start+0x2cc>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80117f0:	635a      	str	r2, [r3, #52]	; 0x34
 80117f2:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 80117f6:	2000      	movs	r0, #0
 80117f8:	f7fd f88c 	bl	800e914 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 80117fc:	e0de      	b.n	80119bc <mixer_transport_start+0x374>
		if (!node_id_allocate)		// if initiator
 80117fe:	4b48      	ldr	r3, [pc, #288]	; (8011920 <mixer_transport_start+0x2d8>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d165      	bne.n	80118d2 <mixer_transport_start+0x28a>
 8011806:	2302      	movs	r3, #2
 8011808:	607b      	str	r3, [r7, #4]
	if (2 == mode)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b02      	cmp	r3, #2
 801180e:	d108      	bne.n	8011822 <mixer_transport_start+0x1da>
		s.slot_state = IDLE;
 8011810:	4b3f      	ldr	r3, [pc, #252]	; (8011910 <mixer_transport_start+0x2c8>)
 8011812:	220c      	movs	r2, #12
 8011814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 8011818:	4b3d      	ldr	r3, [pc, #244]	; (8011910 <mixer_transport_start+0x2c8>)
 801181a:	2201      	movs	r2, #1
 801181c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011820:	e01d      	b.n	801185e <mixer_transport_start+0x216>
	else if (1 == mode)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2b01      	cmp	r3, #1
 8011826:	d108      	bne.n	801183a <mixer_transport_start+0x1f2>
		s.slot_state = RESYNC;
 8011828:	4b39      	ldr	r3, [pc, #228]	; (8011910 <mixer_transport_start+0x2c8>)
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011830:	4b37      	ldr	r3, [pc, #220]	; (8011910 <mixer_transport_start+0x2c8>)
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011838:	e011      	b.n	801185e <mixer_transport_start+0x216>
	else if (STOP == s.next_slot_task)
 801183a:	4b35      	ldr	r3, [pc, #212]	; (8011910 <mixer_transport_start+0x2c8>)
 801183c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011840:	2b02      	cmp	r3, #2
 8011842:	d104      	bne.n	801184e <mixer_transport_start+0x206>
		s.slot_state = IDLE;
 8011844:	4b32      	ldr	r3, [pc, #200]	; (8011910 <mixer_transport_start+0x2c8>)
 8011846:	220c      	movs	r2, #12
 8011848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801184c:	e007      	b.n	801185e <mixer_transport_start+0x216>
		s.slot_state = RESYNC;
 801184e:	4b30      	ldr	r3, [pc, #192]	; (8011910 <mixer_transport_start+0x2c8>)
 8011850:	2200      	movs	r2, #0
 8011852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011856:	4b2e      	ldr	r3, [pc, #184]	; (8011910 <mixer_transport_start+0x2c8>)
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 801185e:	f7fd f871 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011862:	4b2c      	ldr	r3, [pc, #176]	; (8011914 <mixer_transport_start+0x2cc>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f06f 0202 	mvn.w	r2, #2
 801186a:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 801186c:	f7fd f894 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8011870:	4b29      	ldr	r3, [pc, #164]	; (8011918 <mixer_transport_start+0x2d0>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2201      	movs	r2, #1
 8011876:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8011878:	2001      	movs	r0, #1
 801187a:	f7fd f823 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d022      	beq.n	80118ca <mixer_transport_start+0x282>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 8011884:	4b23      	ldr	r3, [pc, #140]	; (8011914 <mixer_transport_start+0x2cc>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801188a:	4618      	mov	r0, r3
 801188c:	f7fa f972 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 8011890:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011892:	4b22      	ldr	r3, [pc, #136]	; (801191c <mixer_transport_start+0x2d4>)
 8011894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011896:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8011898:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 801189a:	4b20      	ldr	r3, [pc, #128]	; (801191c <mixer_transport_start+0x2d4>)
 801189c:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 801189e:	4413      	add	r3, r2
 80118a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 80118a4:	4a1a      	ldr	r2, [pc, #104]	; (8011910 <mixer_transport_start+0x2c8>)
 80118a6:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 80118a8:	f7fd f84c 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80118ac:	4b19      	ldr	r3, [pc, #100]	; (8011914 <mixer_transport_start+0x2cc>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f06f 0202 	mvn.w	r2, #2
 80118b4:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 80118b6:	4b17      	ldr	r3, [pc, #92]	; (8011914 <mixer_transport_start+0x2cc>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118bc:	4b15      	ldr	r3, [pc, #84]	; (8011914 <mixer_transport_start+0x2cc>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80118c4:	635a      	str	r2, [r3, #52]	; 0x34
 80118c6:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 80118ca:	2000      	movs	r0, #0
 80118cc:	f7fd f822 	bl	800e914 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 80118d0:	e074      	b.n	80119bc <mixer_transport_start+0x374>
 80118d2:	2301      	movs	r3, #1
 80118d4:	603b      	str	r3, [r7, #0]
	if (2 == mode)
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d108      	bne.n	80118ee <mixer_transport_start+0x2a6>
		s.slot_state = IDLE;
 80118dc:	4b0c      	ldr	r3, [pc, #48]	; (8011910 <mixer_transport_start+0x2c8>)
 80118de:	220c      	movs	r2, #12
 80118e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 80118e4:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <mixer_transport_start+0x2c8>)
 80118e6:	2201      	movs	r2, #1
 80118e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80118ec:	e02c      	b.n	8011948 <mixer_transport_start+0x300>
	else if (1 == mode)
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d117      	bne.n	8011924 <mixer_transport_start+0x2dc>
		s.slot_state = RESYNC;
 80118f4:	4b06      	ldr	r3, [pc, #24]	; (8011910 <mixer_transport_start+0x2c8>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 80118fc:	4b04      	ldr	r3, [pc, #16]	; (8011910 <mixer_transport_start+0x2c8>)
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011904:	e020      	b.n	8011948 <mixer_transport_start+0x300>
 8011906:	bf00      	nop
 8011908:	20001430 	.word	0x20001430
 801190c:	200014f0 	.word	0x200014f0
 8011910:	20000410 	.word	0x20000410
 8011914:	200012c8 	.word	0x200012c8
 8011918:	200011e4 	.word	0x200011e4
 801191c:	200003c4 	.word	0x200003c4
 8011920:	20000cc1 	.word	0x20000cc1
	else if (STOP == s.next_slot_task)
 8011924:	4b27      	ldr	r3, [pc, #156]	; (80119c4 <mixer_transport_start+0x37c>)
 8011926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801192a:	2b02      	cmp	r3, #2
 801192c:	d104      	bne.n	8011938 <mixer_transport_start+0x2f0>
		s.slot_state = IDLE;
 801192e:	4b25      	ldr	r3, [pc, #148]	; (80119c4 <mixer_transport_start+0x37c>)
 8011930:	220c      	movs	r2, #12
 8011932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011936:	e007      	b.n	8011948 <mixer_transport_start+0x300>
		s.slot_state = RESYNC;
 8011938:	4b22      	ldr	r3, [pc, #136]	; (80119c4 <mixer_transport_start+0x37c>)
 801193a:	2200      	movs	r2, #0
 801193c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011940:	4b20      	ldr	r3, [pc, #128]	; (80119c4 <mixer_transport_start+0x37c>)
 8011942:	2200      	movs	r2, #0
 8011944:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 8011948:	f7fc fffc 	bl	800e944 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801194c:	4b1e      	ldr	r3, [pc, #120]	; (80119c8 <mixer_transport_start+0x380>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f06f 0202 	mvn.w	r2, #2
 8011954:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8011956:	f7fd f81f 	bl	800e998 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 801195a:	4b1c      	ldr	r3, [pc, #112]	; (80119cc <mixer_transport_start+0x384>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2201      	movs	r2, #1
 8011960:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8011962:	2001      	movs	r0, #1
 8011964:	f7fc ffae 	bl	800e8c4 <trigger_main_timer>
	if (0 != mode)
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d022      	beq.n	80119b4 <mixer_transport_start+0x36c>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 801196e:	4b16      	ldr	r3, [pc, #88]	; (80119c8 <mixer_transport_start+0x380>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011974:	4618      	mov	r0, r3
 8011976:	f7fa f8fd 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 801197a:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 801197c:	4b14      	ldr	r3, [pc, #80]	; (80119d0 <mixer_transport_start+0x388>)
 801197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011980:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8011982:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 8011984:	4b12      	ldr	r3, [pc, #72]	; (80119d0 <mixer_transport_start+0x388>)
 8011986:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011988:	4413      	add	r3, r2
 801198a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 801198e:	4a0d      	ldr	r2, [pc, #52]	; (80119c4 <mixer_transport_start+0x37c>)
 8011990:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 8011992:	f7fc ffd7 	bl	800e944 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011996:	4b0c      	ldr	r3, [pc, #48]	; (80119c8 <mixer_transport_start+0x380>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f06f 0202 	mvn.w	r2, #2
 801199e:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 80119a0:	4b09      	ldr	r3, [pc, #36]	; (80119c8 <mixer_transport_start+0x380>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119a6:	4b08      	ldr	r3, [pc, #32]	; (80119c8 <mixer_transport_start+0x380>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80119ae:	635a      	str	r2, [r3, #52]	; 0x34
 80119b0:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 80119b4:	2000      	movs	r0, #0
 80119b6:	f7fc ffad 	bl	800e914 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 80119ba:	bf00      	nop
}
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20000410 	.word	0x20000410
 80119c8:	200012c8 	.word	0x200012c8
 80119cc:	200011e4 	.word	0x200011e4
 80119d0:	200003c4 	.word	0x200003c4

080119d4 <mixer_transport_set_next_slot_task>:

//**************************************************************************************************

int mixer_transport_set_next_slot_task(Slot_Activity next_task)
{
 80119d4:	b590      	push	{r4, r7, lr}
 80119d6:	b08f      	sub	sp, #60	; 0x3c
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION_FAST();
 80119de:	bf00      	nop
	// if next_task == RX: done
	// NOTE: it is the automatic standard selection at the beginning of each slot (with the
	// exception of RESYNC), so we can save the effort. Besides that, DMA ISR is allowed to
	// select TX during start-up phase -> don't overwrite that.
	if (RX != next_task)
 80119e0:	79fb      	ldrb	r3, [r7, #7]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 8083 	beq.w	8011aee <mixer_transport_set_next_slot_task+0x11a>
		// - the activity-to-grid offset, which is dependent on the selected task
		// - the ISR_LATENCY_BUFFER
		// - the execution time needed for the code block within the gpi_int_lock range below
		// Additionally, hybrid_tick returned by gpi_tick_hybrid_reference() may lie up to one
		// slow tick -- i.e. 1000000 / GPI_SLOW_CLOCK_RATE microseconds -- in the past.
		r = gpi_tick_hybrid_reference();
 80119e8:	f107 030c 	add.w	r3, r7, #12
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fa f877 	bl	800bae0 <gpi_tick_hybrid_reference>
		r.hybrid_tick = s.next_trigger_tick - r.hybrid_tick;
 80119f2:	4b42      	ldr	r3, [pc, #264]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 80119f4:	689a      	ldr	r2, [r3, #8]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	60fb      	str	r3, [r7, #12]
		r.hybrid_tick -=
			MAX(radio.tx_offset_max, radio.rx_to_grid_offset + radio.rx_window_max) +
 80119fc:	4b40      	ldr	r3, [pc, #256]	; (8011b00 <mixer_transport_set_next_slot_task+0x12c>)
 80119fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a00:	637b      	str	r3, [r7, #52]	; 0x34
 8011a02:	4b3f      	ldr	r3, [pc, #252]	; (8011b00 <mixer_transport_set_next_slot_task+0x12c>)
 8011a04:	691a      	ldr	r2, [r3, #16]
 8011a06:	4b3e      	ldr	r3, [pc, #248]	; (8011b00 <mixer_transport_set_next_slot_task+0x12c>)
 8011a08:	69db      	ldr	r3, [r3, #28]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8011a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a12:	429a      	cmp	r2, r3
 8011a14:	bf38      	it	cc
 8011a16:	461a      	movcc	r2, r3
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011a18:	4b39      	ldr	r3, [pc, #228]	; (8011b00 <mixer_transport_set_next_slot_task+0x12c>)
 8011a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a1c:	011b      	lsls	r3, r3, #4
			MAX(radio.tx_offset_max, radio.rx_to_grid_offset + radio.rx_window_max) +
 8011a1e:	4413      	add	r3, r2
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011a20:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
		r.hybrid_tick -=
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	60fb      	str	r3, [r7, #12]
			GPI_TICK_US_TO_HYBRID(1000000 / GPI_SLOW_CLOCK_RATE + 30);
		r.hybrid_tick *= FAST_HYBRID_RATIO;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	60fb      	str	r3, [r7, #12]
		if (r.hybrid_tick > GPI_TICK_FAST_MAX / 2)
			r.fast_capture += GPI_TICK_FAST_MAX / 2;
		else r.fast_capture += r.hybrid_tick;
 8011a2e:	693a      	ldr	r2, [r7, #16]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	4413      	add	r3, r2
 8011a34:	613b      	str	r3, [r7, #16]
	__ASM volatile
 8011a36:	f3ef 8310 	mrs	r3, PRIMASK
 8011a3a:	b672      	cpsid	i
 8011a3c:	461c      	mov	r4, r3
 8011a3e:	f3bf 8f5f 	dmb	sy
	return ie;
 8011a42:	4623      	mov	r3, r4

		int ie = gpi_int_lock();
 8011a44:	62fb      	str	r3, [r7, #44]	; 0x2c
		REORDER_BARRIER();

		if ((RESYNC != s.slot_state) || (STOP == next_task))
 8011a46:	4b2d      	ldr	r3, [pc, #180]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d102      	bne.n	8011a56 <mixer_transport_set_next_slot_task+0x82>
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d142      	bne.n	8011adc <mixer_transport_set_next_slot_task+0x108>
 8011a56:	4b2b      	ldr	r3, [pc, #172]	; (8011b04 <mixer_transport_set_next_slot_task+0x130>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		{
			if (gpi_tick_compare_fast_native(gpi_tick_fast_native(), r.fast_capture) >= 0)
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8011a60:	627b      	str	r3, [r7, #36]	; 0x24
 8011a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	db06      	blt.n	8011a7e <mixer_transport_set_next_slot_task+0xaa>
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	bf14      	ite	ne
 8011a76:	2301      	movne	r3, #1
 8011a78:	2300      	moveq	r3, #0
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	e001      	b.n	8011a82 <mixer_transport_set_next_slot_task+0xae>
 8011a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	db02      	blt.n	8011a8c <mixer_transport_set_next_slot_task+0xb8>
				next_task = -1;
 8011a86:	23ff      	movs	r3, #255	; 0xff
 8011a88:	71fb      	strb	r3, [r7, #7]
 8011a8a:	e027      	b.n	8011adc <mixer_transport_set_next_slot_task+0x108>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	623b      	str	r3, [r7, #32]
	if (mask)
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d005      	beq.n	8011aa2 <mixer_transport_set_next_slot_task+0xce>
		LED_GPIO_Port->ODR ^= mask;
 8011a96:	4b1c      	ldr	r3, [pc, #112]	; (8011b08 <mixer_transport_set_next_slot_task+0x134>)
 8011a98:	695a      	ldr	r2, [r3, #20]
 8011a9a:	6a3b      	ldr	r3, [r7, #32]
 8011a9c:	491a      	ldr	r1, [pc, #104]	; (8011b08 <mixer_transport_set_next_slot_task+0x134>)
 8011a9e:	4053      	eors	r3, r2
 8011aa0:	614b      	str	r3, [r1, #20]
			{
				// NOTE: next_task == TX or STOP at this point

				gpi_led_toggle(LED_UPDATE_TASK);

				s.next_slot_task = next_task;
 8011aa2:	4a16      	ldr	r2, [pc, #88]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011aa4:	79fb      	ldrb	r3, [r7, #7]
 8011aa6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
				s.next_trigger_tick = s.next_grid_tick - s.tx_trigger_offset;	// also ok for STOP
 8011aaa:	4b14      	ldr	r3, [pc, #80]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011aac:	685a      	ldr	r2, [r3, #4]
 8011aae:	4b13      	ldr	r3, [pc, #76]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	4a11      	ldr	r2, [pc, #68]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011ab6:	6093      	str	r3, [r2, #8]

				// if IDLE or RESYNC (RESYNC only if next_task == STOP)
				if (RX_RUNNING != s.slot_state)
 8011ab8:	4b10      	ldr	r3, [pc, #64]	; (8011afc <mixer_transport_set_next_slot_task+0x128>)
 8011aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011abe:	2b10      	cmp	r3, #16
 8011ac0:	d001      	beq.n	8011ac6 <mixer_transport_set_next_slot_task+0xf2>
					start_grid_timer();
 8011ac2:	f7fc ffe1 	bl	800ea88 <start_grid_timer>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	61fb      	str	r3, [r7, #28]
	if (mask)
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d005      	beq.n	8011adc <mixer_transport_set_next_slot_task+0x108>
		LED_GPIO_Port->ODR ^= mask;
 8011ad0:	4b0d      	ldr	r3, [pc, #52]	; (8011b08 <mixer_transport_set_next_slot_task+0x134>)
 8011ad2:	695a      	ldr	r2, [r3, #20]
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	490c      	ldr	r1, [pc, #48]	; (8011b08 <mixer_transport_set_next_slot_task+0x134>)
 8011ad8:	4053      	eors	r3, r2
 8011ada:	614b      	str	r3, [r1, #20]
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	61bb      	str	r3, [r7, #24]
 8011ae0:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	f383 8810 	msr	PRIMASK, r3
		GPI_TRACE_MSG(TRACE_WARNING, "!!! WARNING: rx/tx decision was late -> check program, should not happen !!!");
		GPI_TRACE_RETURN(0);
    }
	else
	{
		GPI_TRACE_MSG(TRACE_INFO, "next slot task: %s", (next_task == TX) ? "TX" : ((next_task == RX) ? "RX" : "STOP"));
 8011aee:	bf00      	nop
		GPI_TRACE_RETURN(1);
 8011af0:	2301      	movs	r3, #1
    }
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	373c      	adds	r7, #60	; 0x3c
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd90      	pop	{r4, r7, pc}
 8011afa:	bf00      	nop
 8011afc:	20000410 	.word	0x20000410
 8011b00:	200003c4 	.word	0x200003c4
 8011b04:	200012c8 	.word	0x200012c8
 8011b08:	48000800 	.word	0x48000800

08011b0c <NVIC_SystemReset>:
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011b10:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011b14:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <NVIC_SystemReset+0x20>)
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011b1c:	4903      	ldr	r1, [pc, #12]	; (8011b2c <NVIC_SystemReset+0x20>)
 8011b1e:	4b04      	ldr	r3, [pc, #16]	; (8011b30 <NVIC_SystemReset+0x24>)
 8011b20:	4313      	orrs	r3, r2
 8011b22:	60cb      	str	r3, [r1, #12]
 8011b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8011b28:	bf00      	nop
    __NOP();
 8011b2a:	e7fd      	b.n	8011b28 <NVIC_SystemReset+0x1c>
 8011b2c:	e000ed00 	.word	0xe000ed00
 8011b30:	05fa0004 	.word	0x05fa0004

08011b34 <mixer_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_init(uint8_t node_id)
{
 8011b34:	b590      	push	{r4, r7, lr}
 8011b36:	b085      	sub	sp, #20
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION();
 8011b3e:	bf00      	nop

	// set the state to mixer for config the isr functions
	chirp_isr.state = ISR_MIXER;
 8011b40:	4b8c      	ldr	r3, [pc, #560]	; (8011d74 <mixer_init+0x240>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	701a      	strb	r2, [r3, #0]

	assert_reset((node_id < chirp_config.mx_num_nodes));
 8011b46:	79fb      	ldrb	r3, [r7, #7]
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	4b8b      	ldr	r3, [pc, #556]	; (8011d78 <mixer_init+0x244>)
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d309      	bcc.n	8011b68 <mixer_init+0x34>
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	4b87      	ldr	r3, [pc, #540]	; (8011d78 <mixer_init+0x244>)
 8011b5a:	881b      	ldrh	r3, [r3, #0]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d302      	bcc.n	8011b68 <mixer_init+0x34>
  __ASM volatile ("cpsid f" : : : "memory");
 8011b62:	b671      	cpsid	f
 8011b64:	f7ff ffd2 	bl	8011b0c <NVIC_SystemReset>

	// in case NDEBUG is set
	if (node_id >= chirp_config.mx_num_nodes)
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	4b82      	ldr	r3, [pc, #520]	; (8011d78 <mixer_init+0x244>)
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	429a      	cmp	r2, r3
 8011b74:	f080 8267 	bcs.w	8012046 <mixer_init+0x512>

	#undef PRINT

#endif

    chirp_config.update_slot = 0;
 8011b78:	4b7f      	ldr	r3, [pc, #508]	; (8011d78 <mixer_init+0x244>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	mx.rx_queue[0] = (Packet *)malloc((sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])) * (chirp_config.packet_len));
 8011b80:	4b7d      	ldr	r3, [pc, #500]	; (8011d78 <mixer_init+0x244>)
 8011b82:	8adb      	ldrh	r3, [r3, #22]
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f00f fce3 	bl	8021554 <malloc>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	461a      	mov	r2, r3
 8011b92:	4b7a      	ldr	r3, [pc, #488]	; (8011d7c <mixer_init+0x248>)
 8011b94:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])); i++)
 8011b96:	2301      	movs	r3, #1
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	e012      	b.n	8011bc2 <mixer_init+0x8e>
		mx.rx_queue[i] = (Packet *)&(mx.rx_queue[i-1]->packet_chunk[chirp_config.packet_chunk_len]);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	3b01      	subs	r3, #1
 8011ba0:	4a76      	ldr	r2, [pc, #472]	; (8011d7c <mixer_init+0x248>)
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	685a      	ldr	r2, [r3, #4]
 8011ba8:	4b73      	ldr	r3, [pc, #460]	; (8011d78 <mixer_init+0x244>)
 8011baa:	8a9b      	ldrh	r3, [r3, #20]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	3308      	adds	r3, #8
 8011bb0:	441a      	add	r2, r3
 8011bb2:	4972      	ldr	r1, [pc, #456]	; (8011d7c <mixer_init+0x248>)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	009b      	lsls	r3, r3, #2
 8011bb8:	440b      	add	r3, r1
 8011bba:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])); i++)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	60fb      	str	r3, [r7, #12]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b03      	cmp	r3, #3
 8011bc6:	d9e9      	bls.n	8011b9c <mixer_init+0x68>
	memset(mx.rx_queue[0], 0, (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])) * (chirp_config.packet_len));
 8011bc8:	4b6c      	ldr	r3, [pc, #432]	; (8011d7c <mixer_init+0x248>)
 8011bca:	6858      	ldr	r0, [r3, #4]
 8011bcc:	4b6a      	ldr	r3, [pc, #424]	; (8011d78 <mixer_init+0x244>)
 8011bce:	8adb      	ldrh	r3, [r3, #22]
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	f00f fcd7 	bl	802158a <memset>

	if (chirp_config.primitive != FLOODING)
 8011bdc:	4b66      	ldr	r3, [pc, #408]	; (8011d78 <mixer_init+0x244>)
 8011bde:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d057      	beq.n	8011c96 <mixer_init+0x162>
	{
	#if INFO_VECTOR_QUEUE
	mx.code_queue[0] = (Packet_info_vector *)malloc((sizeof(mx.code_queue) / sizeof(mx.code_queue[0])) * (chirp_config.coding_vector.len));
 8011be6:	4b64      	ldr	r3, [pc, #400]	; (8011d78 <mixer_init+0x244>)
 8011be8:	79db      	ldrb	r3, [r3, #7]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	4618      	mov	r0, r3
 8011bee:	f00f fcb1 	bl	8021554 <malloc>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b61      	ldr	r3, [pc, #388]	; (8011d7c <mixer_init+0x248>)
 8011bf8:	615a      	str	r2, [r3, #20]
	for (i = 1; i < (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])); i++)
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	60fb      	str	r3, [r7, #12]
 8011bfe:	e012      	b.n	8011c26 <mixer_init+0xf2>
		mx.code_queue[i] = (Packet_info_vector *)&(mx.code_queue[i-1]->vector[chirp_config.coding_vector.len]);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	4a5d      	ldr	r2, [pc, #372]	; (8011d7c <mixer_init+0x248>)
 8011c06:	3304      	adds	r3, #4
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	4a5a      	ldr	r2, [pc, #360]	; (8011d78 <mixer_init+0x244>)
 8011c10:	79d2      	ldrb	r2, [r2, #7]
 8011c12:	441a      	add	r2, r3
 8011c14:	4959      	ldr	r1, [pc, #356]	; (8011d7c <mixer_init+0x248>)
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	440b      	add	r3, r1
 8011c1e:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])); i++)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	3301      	adds	r3, #1
 8011c24:	60fb      	str	r3, [r7, #12]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b03      	cmp	r3, #3
 8011c2a:	d9e9      	bls.n	8011c00 <mixer_init+0xcc>
	memset(mx.code_queue[0], 0, (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])) * (chirp_config.coding_vector.len));
 8011c2c:	4b53      	ldr	r3, [pc, #332]	; (8011d7c <mixer_init+0x248>)
 8011c2e:	6958      	ldr	r0, [r3, #20]
 8011c30:	4b51      	ldr	r3, [pc, #324]	; (8011d78 <mixer_init+0x244>)
 8011c32:	79db      	ldrb	r3, [r3, #7]
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	461a      	mov	r2, r3
 8011c38:	2100      	movs	r1, #0
 8011c3a:	f00f fca6 	bl	802158a <memset>

	mx.info_queue[0] = (Packet_info_vector *)malloc((sizeof(mx.info_queue) / sizeof(mx.info_queue[0])) * (chirp_config.info_vector.len));
 8011c3e:	4b4e      	ldr	r3, [pc, #312]	; (8011d78 <mixer_init+0x244>)
 8011c40:	7adb      	ldrb	r3, [r3, #11]
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4618      	mov	r0, r3
 8011c46:	f00f fc85 	bl	8021554 <malloc>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	4b4b      	ldr	r3, [pc, #300]	; (8011d7c <mixer_init+0x248>)
 8011c50:	625a      	str	r2, [r3, #36]	; 0x24
	for (i = 1; i < (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])); i++)
 8011c52:	2301      	movs	r3, #1
 8011c54:	60fb      	str	r3, [r7, #12]
 8011c56:	e012      	b.n	8011c7e <mixer_init+0x14a>
		mx.info_queue[i] = (Packet_info_vector *)&(mx.info_queue[i-1]->vector[chirp_config.info_vector.len]);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	4a47      	ldr	r2, [pc, #284]	; (8011d7c <mixer_init+0x248>)
 8011c5e:	3308      	adds	r3, #8
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	4413      	add	r3, r2
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	4a44      	ldr	r2, [pc, #272]	; (8011d78 <mixer_init+0x244>)
 8011c68:	7ad2      	ldrb	r2, [r2, #11]
 8011c6a:	441a      	add	r2, r3
 8011c6c:	4943      	ldr	r1, [pc, #268]	; (8011d7c <mixer_init+0x248>)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	3308      	adds	r3, #8
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	440b      	add	r3, r1
 8011c76:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])); i++)
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	60fb      	str	r3, [r7, #12]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2b03      	cmp	r3, #3
 8011c82:	d9e9      	bls.n	8011c58 <mixer_init+0x124>
	memset(mx.info_queue[0], 0, (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])) * (chirp_config.info_vector.len));
 8011c84:	4b3d      	ldr	r3, [pc, #244]	; (8011d7c <mixer_init+0x248>)
 8011c86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c88:	4b3b      	ldr	r3, [pc, #236]	; (8011d78 <mixer_init+0x244>)
 8011c8a:	7adb      	ldrb	r3, [r3, #11]
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	461a      	mov	r2, r3
 8011c90:	2100      	movs	r1, #0
 8011c92:	f00f fc7a 	bl	802158a <memset>
	#endif
	}

	mx.tx_packet = (Packet *)malloc(chirp_config.packet_len);
 8011c96:	4b38      	ldr	r3, [pc, #224]	; (8011d78 <mixer_init+0x244>)
 8011c98:	8adb      	ldrh	r3, [r3, #22]
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f00f fc59 	bl	8021554 <malloc>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4b35      	ldr	r3, [pc, #212]	; (8011d7c <mixer_init+0x248>)
 8011ca8:	641a      	str	r2, [r3, #64]	; 0x40
	memset(mx.tx_packet, 0, chirp_config.packet_len);
 8011caa:	4b34      	ldr	r3, [pc, #208]	; (8011d7c <mixer_init+0x248>)
 8011cac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011cae:	4b32      	ldr	r3, [pc, #200]	; (8011d78 <mixer_init+0x244>)
 8011cb0:	8adb      	ldrh	r3, [r3, #22]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	f00f fc67 	bl	802158a <memset>

	if (chirp_config.primitive != FLOODING)
 8011cbc:	4b2e      	ldr	r3, [pc, #184]	; (8011d78 <mixer_init+0x244>)
 8011cbe:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d042      	beq.n	8011d4c <mixer_init+0x218>
	{
	mx.matrix[0] = (Matrix_Row *)malloc(chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8011cc6:	4b2c      	ldr	r3, [pc, #176]	; (8011d78 <mixer_init+0x244>)
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4b2a      	ldr	r3, [pc, #168]	; (8011d78 <mixer_init+0x244>)
 8011cd0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	fb03 f302 	mul.w	r3, r3, r2
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f00f fc39 	bl	8021554 <malloc>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	4b25      	ldr	r3, [pc, #148]	; (8011d7c <mixer_init+0x248>)
 8011ce8:	65da      	str	r2, [r3, #92]	; 0x5c
	for (i = 1; i < chirp_config.mx_generation_size; i++)
 8011cea:	2301      	movs	r3, #1
 8011cec:	60fb      	str	r3, [r7, #12]
 8011cee:	e015      	b.n	8011d1c <mixer_init+0x1e8>
		mx.matrix[i] = (Matrix_Row *)&(mx.matrix[i-1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	4a21      	ldr	r2, [pc, #132]	; (8011d7c <mixer_init+0x248>)
 8011cf6:	3316      	adds	r3, #22
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	4b1e      	ldr	r3, [pc, #120]	; (8011d78 <mixer_init+0x244>)
 8011d00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	009b      	lsls	r3, r3, #2
 8011d06:	4413      	add	r3, r2
 8011d08:	1d1a      	adds	r2, r3, #4
 8011d0a:	491c      	ldr	r1, [pc, #112]	; (8011d7c <mixer_init+0x248>)
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	3316      	adds	r3, #22
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	440b      	add	r3, r1
 8011d14:	605a      	str	r2, [r3, #4]
	for (i = 1; i < chirp_config.mx_generation_size; i++)
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	60fb      	str	r3, [r7, #12]
 8011d1c:	4b16      	ldr	r3, [pc, #88]	; (8011d78 <mixer_init+0x244>)
 8011d1e:	885b      	ldrh	r3, [r3, #2]
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	461a      	mov	r2, r3
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d3e2      	bcc.n	8011cf0 <mixer_init+0x1bc>
	memset(mx.matrix[0], 0, chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8011d2a:	4b14      	ldr	r3, [pc, #80]	; (8011d7c <mixer_init+0x248>)
 8011d2c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8011d2e:	4b12      	ldr	r3, [pc, #72]	; (8011d78 <mixer_init+0x244>)
 8011d30:	885b      	ldrh	r3, [r3, #2]
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	461a      	mov	r2, r3
 8011d36:	4b10      	ldr	r3, [pc, #64]	; (8011d78 <mixer_init+0x244>)
 8011d38:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	fb03 f302 	mul.w	r3, r3, r2
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	461a      	mov	r2, r3
 8011d46:	2100      	movs	r1, #0
 8011d48:	f00f fc1f 	bl	802158a <memset>
	}

	mx.history[0] = (Node *)malloc((chirp_config.mx_num_nodes + 3) * (chirp_config.history_len_8));
 8011d4c:	4b0a      	ldr	r3, [pc, #40]	; (8011d78 <mixer_init+0x244>)
 8011d4e:	881b      	ldrh	r3, [r3, #0]
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	3303      	adds	r3, #3
 8011d54:	4a08      	ldr	r2, [pc, #32]	; (8011d78 <mixer_init+0x244>)
 8011d56:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8011d58:	b292      	uxth	r2, r2
 8011d5a:	fb02 f303 	mul.w	r3, r2, r3
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f00f fbf8 	bl	8021554 <malloc>
 8011d64:	4603      	mov	r3, r0
 8011d66:	461a      	mov	r2, r3
 8011d68:	4b04      	ldr	r3, [pc, #16]	; (8011d7c <mixer_init+0x248>)
 8011d6a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
	for (i = 1; i < chirp_config.mx_num_nodes + 3; i++)
 8011d6e:	2301      	movs	r3, #1
 8011d70:	60fb      	str	r3, [r7, #12]
 8011d72:	e01a      	b.n	8011daa <mixer_init+0x276>
 8011d74:	20000cfc 	.word	0x20000cfc
 8011d78:	20001430 	.word	0x20001430
 8011d7c:	200014f0 	.word	0x200014f0
		mx.history[i] = (Node *)&(mx.history[i-1]->row_map_chunk[chirp_config.matrix_coding_vector.len]);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	3b01      	subs	r3, #1
 8011d84:	4ab2      	ldr	r2, [pc, #712]	; (8012050 <mixer_init+0x51c>)
 8011d86:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011d8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011d8e:	4bb1      	ldr	r3, [pc, #708]	; (8012054 <mixer_init+0x520>)
 8011d90:	7f5b      	ldrb	r3, [r3, #29]
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	1d1a      	adds	r2, r3, #4
 8011d98:	49ad      	ldr	r1, [pc, #692]	; (8012050 <mixer_init+0x51c>)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 1; i < chirp_config.mx_num_nodes + 3; i++)
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	3301      	adds	r3, #1
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	4baa      	ldr	r3, [pc, #680]	; (8012054 <mixer_init+0x520>)
 8011dac:	881b      	ldrh	r3, [r3, #0]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	3303      	adds	r3, #3
 8011db2:	461a      	mov	r2, r3
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d3e2      	bcc.n	8011d80 <mixer_init+0x24c>
	memset(mx.history[0], 0, (chirp_config.mx_num_nodes + 3) * (chirp_config.history_len_8));
 8011dba:	4ba5      	ldr	r3, [pc, #660]	; (8012050 <mixer_init+0x51c>)
 8011dbc:	f8d3 0468 	ldr.w	r0, [r3, #1128]	; 0x468
 8011dc0:	4ba4      	ldr	r3, [pc, #656]	; (8012054 <mixer_init+0x520>)
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	3303      	adds	r3, #3
 8011dc8:	4aa2      	ldr	r2, [pc, #648]	; (8012054 <mixer_init+0x520>)
 8011dca:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8011dcc:	b292      	uxth	r2, r2
 8011dce:	fb02 f303 	mul.w	r3, r2, r3
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	f00f fbd8 	bl	802158a <memset>

	mx_absent_head = mx.history[chirp_config.mx_num_nodes + 3 - 3];
 8011dda:	4b9e      	ldr	r3, [pc, #632]	; (8012054 <mixer_init+0x520>)
 8011ddc:	881b      	ldrh	r3, [r3, #0]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	4a9b      	ldr	r2, [pc, #620]	; (8012050 <mixer_init+0x51c>)
 8011de2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011dea:	4a9b      	ldr	r2, [pc, #620]	; (8012058 <mixer_init+0x524>)
 8011dec:	6013      	str	r3, [r2, #0]
	mx_present_head = mx.history[chirp_config.mx_num_nodes + 3 - 2];
 8011dee:	4b99      	ldr	r3, [pc, #612]	; (8012054 <mixer_init+0x520>)
 8011df0:	881b      	ldrh	r3, [r3, #0]
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	3301      	adds	r3, #1
 8011df6:	4a96      	ldr	r2, [pc, #600]	; (8012050 <mixer_init+0x51c>)
 8011df8:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e00:	4a96      	ldr	r2, [pc, #600]	; (801205c <mixer_init+0x528>)
 8011e02:	6013      	str	r3, [r2, #0]
	mx_finished_head = mx.history[chirp_config.mx_num_nodes + 3 - 1];
 8011e04:	4b93      	ldr	r3, [pc, #588]	; (8012054 <mixer_init+0x520>)
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	3302      	adds	r3, #2
 8011e0c:	4a90      	ldr	r2, [pc, #576]	; (8012050 <mixer_init+0x51c>)
 8011e0e:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e16:	4a92      	ldr	r2, [pc, #584]	; (8012060 <mixer_init+0x52c>)
 8011e18:	6013      	str	r3, [r2, #0]
	#if MX_SMART_SHUTDOWN
	mx.full_rank_map = (Full_Rank_Map *)malloc(chirp_config.map.len + chirp_config.hash.len);
	#endif

	mx.request = (Request_Data *)malloc(offsetof(Request_Data, mask) + 6 * chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8011e1a:	4b8e      	ldr	r3, [pc, #568]	; (8012054 <mixer_init+0x520>)
 8011e1c:	7f5b      	ldrb	r3, [r3, #29]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	4613      	mov	r3, r2
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	4413      	add	r3, r2
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	3318      	adds	r3, #24
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f00f fb92 	bl	8021554 <malloc>
 8011e30:	4603      	mov	r3, r0
 8011e32:	461a      	mov	r2, r3
 8011e34:	4b86      	ldr	r3, [pc, #536]	; (8012050 <mixer_init+0x51c>)
 8011e36:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

	mixer_transport_init();
 8011e3a:	f7ff fbdf 	bl	80115fc <mixer_transport_init>

	mx.rx_queue_num_writing = 0;
 8011e3e:	4b84      	ldr	r3, [pc, #528]	; (8012050 <mixer_init+0x51c>)
 8011e40:	2200      	movs	r2, #0
 8011e42:	635a      	str	r2, [r3, #52]	; 0x34
	mx.rx_queue_num_written = 0;
 8011e44:	4b82      	ldr	r3, [pc, #520]	; (8012050 <mixer_init+0x51c>)
 8011e46:	2200      	movs	r2, #0
 8011e48:	639a      	str	r2, [r3, #56]	; 0x38
	mx.rx_queue_num_read = 0;
 8011e4a:	4b81      	ldr	r3, [pc, #516]	; (8012050 <mixer_init+0x51c>)
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	63da      	str	r2, [r3, #60]	; 0x3c

	mx.tx_packet->sender_id = node_id;
 8011e50:	4b7f      	ldr	r3, [pc, #508]	; (8012050 <mixer_init+0x51c>)
 8011e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e54:	79fa      	ldrb	r2, [r7, #7]
 8011e56:	719a      	strb	r2, [r3, #6]
	mx.tx_packet->flags.all = 0;
 8011e58:	4b7d      	ldr	r3, [pc, #500]	; (8012050 <mixer_init+0x51c>)
 8011e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	71da      	strb	r2, [r3, #7]

	mx.tx_reserve = NULL;
 8011e60:	4b7b      	ldr	r3, [pc, #492]	; (8012050 <mixer_init+0x51c>)
 8011e62:	2200      	movs	r2, #0
 8011e64:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < chirp_config.mx_generation_size; i++)
 8011e66:	2300      	movs	r3, #0
 8011e68:	60fb      	str	r3, [r7, #12]
 8011e6a:	e00b      	b.n	8011e84 <mixer_init+0x350>
		mx.matrix[i]->birth_slot = UINT16_MAX;
 8011e6c:	4a78      	ldr	r2, [pc, #480]	; (8012050 <mixer_init+0x51c>)
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	3316      	adds	r3, #22
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e7c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < chirp_config.mx_generation_size; i++)
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	3301      	adds	r3, #1
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	4b73      	ldr	r3, [pc, #460]	; (8012054 <mixer_init+0x520>)
 8011e86:	885b      	ldrh	r3, [r3, #2]
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d3ec      	bcc.n	8011e6c <mixer_init+0x338>

	mx.rank = 0;
 8011e92:	4b6f      	ldr	r3, [pc, #444]	; (8012050 <mixer_init+0x51c>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458

	mx.next_own_row = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 8011e9a:	4b6e      	ldr	r3, [pc, #440]	; (8012054 <mixer_init+0x520>)
 8011e9c:	885b      	ldrh	r3, [r3, #2]
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	4a6b      	ldr	r2, [pc, #428]	; (8012050 <mixer_init+0x51c>)
 8011ea4:	3316      	adds	r3, #22
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	4413      	add	r3, r2
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	4b69      	ldr	r3, [pc, #420]	; (8012054 <mixer_init+0x520>)
 8011eae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	4413      	add	r3, r2
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	4a65      	ldr	r2, [pc, #404]	; (8012050 <mixer_init+0x51c>)
 8011eba:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	mx.recent_innovative_slot = 0;
 8011ebe:	4b64      	ldr	r3, [pc, #400]	; (8012050 <mixer_init+0x51c>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464

	mx.events = 0;
 8011ec6:	4b62      	ldr	r3, [pc, #392]	; (8012050 <mixer_init+0x51c>)
 8011ec8:	2200      	movs	r2, #0
 8011eca:	601a      	str	r2, [r3, #0]

	memset(&mx.stat_counter, 0, sizeof(mx.stat_counter));
 8011ecc:	2234      	movs	r2, #52	; 0x34
 8011ece:	2100      	movs	r1, #0
 8011ed0:	4864      	ldr	r0, [pc, #400]	; (8012064 <mixer_init+0x530>)
 8011ed2:	f00f fb5a 	bl	802158a <memset>

	for (i = 0; i < NUM_ELEMENTS(pt_data); ++i)
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	60fb      	str	r3, [r7, #12]
 8011eda:	e007      	b.n	8011eec <mixer_init+0x3b8>
		PT_INIT(&pt_data[i]);
 8011edc:	4a62      	ldr	r2, [pc, #392]	; (8012068 <mixer_init+0x534>)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < NUM_ELEMENTS(pt_data); ++i)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d9f4      	bls.n	8011edc <mixer_init+0x3a8>

	#if MX_REQUEST
		memset(mx.request, 0, offsetof(Request_Data, mask) + 6 * chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8011ef2:	4b57      	ldr	r3, [pc, #348]	; (8012050 <mixer_init+0x51c>)
 8011ef4:	f8d3 0870 	ldr.w	r0, [r3, #2160]	; 0x870
 8011ef8:	4b56      	ldr	r3, [pc, #344]	; (8012054 <mixer_init+0x520>)
 8011efa:	7f5b      	ldrb	r3, [r3, #29]
 8011efc:	461a      	mov	r2, r3
 8011efe:	4613      	mov	r3, r2
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	4413      	add	r3, r2
 8011f04:	00db      	lsls	r3, r3, #3
 8011f06:	3318      	adds	r3, #24
 8011f08:	461a      	mov	r2, r3
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	f00f fb3d 	bl	802158a <memset>
		memset(&(mx.request->mask[chirp_config.my_row_mask.pos]), -1, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8011f10:	4b4f      	ldr	r3, [pc, #316]	; (8012050 <mixer_init+0x51c>)
 8011f12:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8011f16:	4b4f      	ldr	r3, [pc, #316]	; (8012054 <mixer_init+0x520>)
 8011f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f1c:	3306      	adds	r3, #6
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	18d0      	adds	r0, r2, r3
 8011f22:	4b4c      	ldr	r3, [pc, #304]	; (8012054 <mixer_init+0x520>)
 8011f24:	7f5b      	ldrb	r3, [r3, #29]
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	461a      	mov	r2, r3
 8011f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8011f2e:	f00f fb2c 	bl	802158a <memset>
		memset(&(mx.request->mask[chirp_config.my_column_mask.pos]), -1, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8011f32:	4b47      	ldr	r3, [pc, #284]	; (8012050 <mixer_init+0x51c>)
 8011f34:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8011f38:	4b46      	ldr	r3, [pc, #280]	; (8012054 <mixer_init+0x520>)
 8011f3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011f3e:	3306      	adds	r3, #6
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	18d0      	adds	r0, r2, r3
 8011f44:	4b43      	ldr	r3, [pc, #268]	; (8012054 <mixer_init+0x520>)
 8011f46:	7f5b      	ldrb	r3, [r3, #29]
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8011f50:	f00f fb1b 	bl	802158a <memset>

		// ATTENTION: signed is important
		int_fast_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 8011f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f58:	60bb      	str	r3, [r7, #8]
		for (i = chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t) * 8; i-- > chirp_config.mx_generation_size;)
 8011f5a:	4b3e      	ldr	r3, [pc, #248]	; (8012054 <mixer_init+0x520>)
 8011f5c:	7f5b      	ldrb	r3, [r3, #29]
 8011f5e:	015b      	lsls	r3, r3, #5
 8011f60:	60fb      	str	r3, [r7, #12]
 8011f62:	e002      	b.n	8011f6a <mixer_init+0x436>
			mask >>= 1;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	105b      	asrs	r3, r3, #1
 8011f68:	60bb      	str	r3, [r7, #8]
		for (i = chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t) * 8; i-- > chirp_config.mx_generation_size;)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	1e5a      	subs	r2, r3, #1
 8011f6e:	60fa      	str	r2, [r7, #12]
 8011f70:	4a38      	ldr	r2, [pc, #224]	; (8012054 <mixer_init+0x520>)
 8011f72:	8852      	ldrh	r2, [r2, #2]
 8011f74:	b292      	uxth	r2, r2
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d8f4      	bhi.n	8011f64 <mixer_init+0x430>
		mx.request->padding_mask = ~(mask << 1);
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	43da      	mvns	r2, r3
 8011f80:	4b33      	ldr	r3, [pc, #204]	; (8012050 <mixer_init+0x51c>)
 8011f82:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011f86:	615a      	str	r2, [r3, #20]
		GPI_TRACE_MSG(TRACE_VERBOSE, "request padding mask: %0*x",
 8011f88:	bf00      	nop
			sizeof(uint_fast_t) * 2, mx.request->padding_mask);

		i = chirp_config.matrix_coding_vector.len - 1;
 8011f8a:	4b32      	ldr	r3, [pc, #200]	; (8012054 <mixer_init+0x520>)
 8011f8c:	7f5b      	ldrb	r3, [r3, #29]
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	60fb      	str	r3, [r7, #12]
		mx.request->mask[chirp_config.my_row_mask.pos + i] &= mx.request->padding_mask;
 8011f92:	4b2f      	ldr	r3, [pc, #188]	; (8012050 <mixer_init+0x51c>)
 8011f94:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011f98:	4a2e      	ldr	r2, [pc, #184]	; (8012054 <mixer_init+0x520>)
 8011f9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	440a      	add	r2, r1
 8011fa4:	3206      	adds	r2, #6
 8011fa6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011faa:	4b29      	ldr	r3, [pc, #164]	; (8012050 <mixer_init+0x51c>)
 8011fac:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011fb0:	6959      	ldr	r1, [r3, #20]
 8011fb2:	4b27      	ldr	r3, [pc, #156]	; (8012050 <mixer_init+0x51c>)
 8011fb4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011fb8:	4a26      	ldr	r2, [pc, #152]	; (8012054 <mixer_init+0x520>)
 8011fba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8011fbe:	4614      	mov	r4, r2
 8011fc0:	68fa      	ldr	r2, [r7, #12]
 8011fc2:	4422      	add	r2, r4
 8011fc4:	4001      	ands	r1, r0
 8011fc6:	3206      	adds	r2, #6
 8011fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mx.request->mask[chirp_config.my_column_mask.pos + i] &= mx.request->padding_mask;
 8011fcc:	4b20      	ldr	r3, [pc, #128]	; (8012050 <mixer_init+0x51c>)
 8011fce:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011fd2:	4a20      	ldr	r2, [pc, #128]	; (8012054 <mixer_init+0x520>)
 8011fd4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011fd8:	4611      	mov	r1, r2
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	440a      	add	r2, r1
 8011fde:	3206      	adds	r2, #6
 8011fe0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011fe4:	4b1a      	ldr	r3, [pc, #104]	; (8012050 <mixer_init+0x51c>)
 8011fe6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011fea:	6959      	ldr	r1, [r3, #20]
 8011fec:	4b18      	ldr	r3, [pc, #96]	; (8012050 <mixer_init+0x51c>)
 8011fee:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011ff2:	4a18      	ldr	r2, [pc, #96]	; (8012054 <mixer_init+0x520>)
 8011ff4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011ff8:	4614      	mov	r4, r2
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	4422      	add	r2, r4
 8011ffe:	4001      	ands	r1, r0
 8012000:	3206      	adds	r2, #6
 8012002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	#endif

	#if MX_COORDINATED_TX
		mx_init_history();
 8012006:	f003 fd41 	bl	8015a8c <mx_init_history>
	#endif

	mx.rx_queue_num_read = mx.rx_queue_num_written;
 801200a:	4b11      	ldr	r3, [pc, #68]	; (8012050 <mixer_init+0x51c>)
 801200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801200e:	4a10      	ldr	r2, [pc, #64]	; (8012050 <mixer_init+0x51c>)
 8012010:	63d3      	str	r3, [r2, #60]	; 0x3c

	mx.slot_number = 0;
 8012012:	4b0f      	ldr	r3, [pc, #60]	; (8012050 <mixer_init+0x51c>)
 8012014:	2200      	movs	r2, #0
 8012016:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 801201a:	4b0d      	ldr	r3, [pc, #52]	; (8012050 <mixer_init+0x51c>)
 801201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801201e:	4a0d      	ldr	r2, [pc, #52]	; (8012054 <mixer_init+0x520>)
 8012020:	7b92      	ldrb	r2, [r2, #14]
 8012022:	4413      	add	r3, r2
 8012024:	7a1a      	ldrb	r2, [r3, #8]
 8012026:	4b0a      	ldr	r3, [pc, #40]	; (8012050 <mixer_init+0x51c>)
 8012028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801202a:	490a      	ldr	r1, [pc, #40]	; (8012054 <mixer_init+0x520>)
 801202c:	7b89      	ldrb	r1, [r1, #14]
 801202e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012032:	b2d2      	uxtb	r2, r2
 8012034:	440b      	add	r3, r1
 8012036:	721a      	strb	r2, [r3, #8]

	mx.tx_sideload = NULL;
 8012038:	4b05      	ldr	r3, [pc, #20]	; (8012050 <mixer_init+0x51c>)
 801203a:	2200      	movs	r2, #0
 801203c:	645a      	str	r2, [r3, #68]	; 0x44
		#endif
	#endif

	#if ENERGEST_CONF_ON
		// Initialize Energest values.
		energest_init();
 801203e:	f7fc f88d 	bl	800e15c <energest_init>
	#endif

	GPI_TRACE_RETURN();
 8012042:	bf00      	nop
 8012044:	e000      	b.n	8012048 <mixer_init+0x514>
		GPI_TRACE_RETURN();
 8012046:	bf00      	nop
}
 8012048:	3714      	adds	r7, #20
 801204a:	46bd      	mov	sp, r7
 801204c:	bd90      	pop	{r4, r7, pc}
 801204e:	bf00      	nop
 8012050:	200014f0 	.word	0x200014f0
 8012054:	20001430 	.word	0x20001430
 8012058:	20000ce4 	.word	0x20000ce4
 801205c:	20000cc4 	.word	0x20000cc4
 8012060:	20000ce0 	.word	0x20000ce0
 8012064:	20001d64 	.word	0x20001d64
 8012068:	20001e28 	.word	0x20001e28

0801206c <mixer_write>:

//**************************************************************************************************

size_t mixer_write(unsigned int i, const void *msg, size_t size)
{
 801206c:	b590      	push	{r4, r7, lr}
 801206e:	b08d      	sub	sp, #52	; 0x34
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
	GPI_TRACE_FUNCTION();
 8012078:	bf00      	nop

	assert_reset((i < chirp_config.mx_generation_size));
 801207a:	4b9b      	ldr	r3, [pc, #620]	; (80122e8 <mixer_write+0x27c>)
 801207c:	885b      	ldrh	r3, [r3, #2]
 801207e:	b29b      	uxth	r3, r3
 8012080:	461a      	mov	r2, r3
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	4293      	cmp	r3, r2
 8012086:	d309      	bcc.n	801209c <mixer_write+0x30>
 8012088:	4b97      	ldr	r3, [pc, #604]	; (80122e8 <mixer_write+0x27c>)
 801208a:	885b      	ldrh	r3, [r3, #2]
 801208c:	b29b      	uxth	r3, r3
 801208e:	461a      	mov	r2, r3
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	4293      	cmp	r3, r2
 8012094:	d302      	bcc.n	801209c <mixer_write+0x30>
 8012096:	b671      	cpsid	f
 8012098:	f7ff fd38 	bl	8011b0c <NVIC_SystemReset>

	// in case NDEBUG is set
	if (i >= chirp_config.mx_generation_size)
 801209c:	4b92      	ldr	r3, [pc, #584]	; (80122e8 <mixer_write+0x27c>)
 801209e:	885b      	ldrh	r3, [r3, #2]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	461a      	mov	r2, r3
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d301      	bcc.n	80120ae <mixer_write+0x42>
		GPI_TRACE_RETURN(0);
 80120aa:	2300      	movs	r3, #0
 80120ac:	e117      	b.n	80122de <mixer_write+0x272>

	size = MIN(size, chirp_config.matrix_payload_8.len);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120b2:	4b8d      	ldr	r3, [pc, #564]	; (80122e8 <mixer_write+0x27c>)
 80120b4:	7edb      	ldrb	r3, [r3, #27]
 80120b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80120ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80120be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c0:	4293      	cmp	r3, r2
 80120c2:	bf28      	it	cs
 80120c4:	4613      	movcs	r3, r2
 80120c6:	607b      	str	r3, [r7, #4]

	gpi_memcpy_dma(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]), msg, size);
 80120c8:	4a88      	ldr	r2, [pc, #544]	; (80122ec <mixer_write+0x280>)
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	3316      	adds	r3, #22
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	4413      	add	r3, r2
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	4a84      	ldr	r2, [pc, #528]	; (80122e8 <mixer_write+0x27c>)
 80120d6:	7e92      	ldrb	r2, [r2, #26]
 80120d8:	4413      	add	r3, r2
 80120da:	3304      	adds	r3, #4
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	61bb      	str	r3, [r7, #24]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	617b      	str	r3, [r7, #20]
	__builtin_memcpy(dest, src, size);
 80120e6:	69fa      	ldr	r2, [r7, #28]
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	4610      	mov	r0, r2
 80120ec:	4619      	mov	r1, r3
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	461a      	mov	r2, r3
 80120f2:	f00f fa3f 	bl	8021574 <memcpy>

	uint32_t payload_hash = Chirp_RSHash((uint8_t *)&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]), chirp_config.matrix_payload_8.len - 2);
 80120f6:	4a7d      	ldr	r2, [pc, #500]	; (80122ec <mixer_write+0x280>)
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	3316      	adds	r3, #22
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	4413      	add	r3, r2
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	4a79      	ldr	r2, [pc, #484]	; (80122e8 <mixer_write+0x27c>)
 8012104:	7e92      	ldrb	r2, [r2, #26]
 8012106:	4413      	add	r3, r2
 8012108:	1d1a      	adds	r2, r3, #4
 801210a:	4b77      	ldr	r3, [pc, #476]	; (80122e8 <mixer_write+0x27c>)
 801210c:	7edb      	ldrb	r3, [r3, #27]
 801210e:	3b02      	subs	r3, #2
 8012110:	4619      	mov	r1, r3
 8012112:	4610      	mov	r0, r2
 8012114:	f00c fe6e 	bl	801edf4 <Chirp_RSHash>
 8012118:	4603      	mov	r3, r0
 801211a:	627b      	str	r3, [r7, #36]	; 0x24
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos + chirp_config.mx_payload_size - 2] = payload_hash >> 8;
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211e:	0a19      	lsrs	r1, r3, #8
 8012120:	4a72      	ldr	r2, [pc, #456]	; (80122ec <mixer_write+0x280>)
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	3316      	adds	r3, #22
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	4b6e      	ldr	r3, [pc, #440]	; (80122e8 <mixer_write+0x27c>)
 801212e:	7e9b      	ldrb	r3, [r3, #26]
 8012130:	4618      	mov	r0, r3
 8012132:	4b6d      	ldr	r3, [pc, #436]	; (80122e8 <mixer_write+0x27c>)
 8012134:	889b      	ldrh	r3, [r3, #4]
 8012136:	b29b      	uxth	r3, r3
 8012138:	4403      	add	r3, r0
 801213a:	3b02      	subs	r3, #2
 801213c:	b2c9      	uxtb	r1, r1
 801213e:	4413      	add	r3, r2
 8012140:	460a      	mov	r2, r1
 8012142:	711a      	strb	r2, [r3, #4]
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos + chirp_config.mx_payload_size - 1] = payload_hash;
 8012144:	4a69      	ldr	r2, [pc, #420]	; (80122ec <mixer_write+0x280>)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3316      	adds	r3, #22
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	4413      	add	r3, r2
 801214e:	685a      	ldr	r2, [r3, #4]
 8012150:	4b65      	ldr	r3, [pc, #404]	; (80122e8 <mixer_write+0x27c>)
 8012152:	7e9b      	ldrb	r3, [r3, #26]
 8012154:	4619      	mov	r1, r3
 8012156:	4b64      	ldr	r3, [pc, #400]	; (80122e8 <mixer_write+0x27c>)
 8012158:	889b      	ldrh	r3, [r3, #4]
 801215a:	b29b      	uxth	r3, r3
 801215c:	440b      	add	r3, r1
 801215e:	3b01      	subs	r3, #1
 8012160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012162:	b2c9      	uxtb	r1, r1
 8012164:	4413      	add	r3, r2
 8012166:	460a      	mov	r2, r1
 8012168:	711a      	strb	r2, [r3, #4]

	unwrap_row(i);
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f7fc f974 	bl	800e458 <unwrap_row>

	memset(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), 0, sizeof(uint_fast_t) * chirp_config.matrix_coding_vector.len);
 8012170:	4a5e      	ldr	r2, [pc, #376]	; (80122ec <mixer_write+0x280>)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	3316      	adds	r3, #22
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	4413      	add	r3, r2
 801217a:	685a      	ldr	r2, [r3, #4]
 801217c:	4b5a      	ldr	r3, [pc, #360]	; (80122e8 <mixer_write+0x27c>)
 801217e:	7f1b      	ldrb	r3, [r3, #28]
 8012180:	009b      	lsls	r3, r3, #2
 8012182:	4413      	add	r3, r2
 8012184:	1d18      	adds	r0, r3, #4
 8012186:	4b58      	ldr	r3, [pc, #352]	; (80122e8 <mixer_write+0x27c>)
 8012188:	7f5b      	ldrb	r3, [r3, #29]
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	461a      	mov	r2, r3
 801218e:	2100      	movs	r1, #0
 8012190:	f00f f9fb 	bl	802158a <memset>
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] |= 1 << (i % 8);
 8012194:	4a55      	ldr	r2, [pc, #340]	; (80122ec <mixer_write+0x280>)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3316      	adds	r3, #22
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	4413      	add	r3, r2
 801219e:	6859      	ldr	r1, [r3, #4]
 80121a0:	4b51      	ldr	r3, [pc, #324]	; (80122e8 <mixer_write+0x27c>)
 80121a2:	7e1b      	ldrb	r3, [r3, #24]
 80121a4:	4618      	mov	r0, r3
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	08da      	lsrs	r2, r3, #3
 80121aa:	1813      	adds	r3, r2, r0
 80121ac:	440b      	add	r3, r1
 80121ae:	791b      	ldrb	r3, [r3, #4]
 80121b0:	b259      	sxtb	r1, r3
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f003 0307 	and.w	r3, r3, #7
 80121b8:	2001      	movs	r0, #1
 80121ba:	fa00 f303 	lsl.w	r3, r0, r3
 80121be:	b25b      	sxtb	r3, r3
 80121c0:	430b      	orrs	r3, r1
 80121c2:	b258      	sxtb	r0, r3
 80121c4:	4949      	ldr	r1, [pc, #292]	; (80122ec <mixer_write+0x280>)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	3316      	adds	r3, #22
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	440b      	add	r3, r1
 80121ce:	6859      	ldr	r1, [r3, #4]
 80121d0:	4b45      	ldr	r3, [pc, #276]	; (80122e8 <mixer_write+0x27c>)
 80121d2:	7e1b      	ldrb	r3, [r3, #24]
 80121d4:	4413      	add	r3, r2
 80121d6:	b2c2      	uxtb	r2, r0
 80121d8:	440b      	add	r3, r1
 80121da:	711a      	strb	r2, [r3, #4]
	mx.matrix[i]->birth_slot = 0;
 80121dc:	4a43      	ldr	r2, [pc, #268]	; (80122ec <mixer_write+0x280>)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	3316      	adds	r3, #22
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	4413      	add	r3, r2
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	801a      	strh	r2, [r3, #0]

	mx.rank++;
 80121ec:	4b3f      	ldr	r3, [pc, #252]	; (80122ec <mixer_write+0x280>)
 80121ee:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80121f2:	3301      	adds	r3, #1
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	4b3d      	ldr	r3, [pc, #244]	; (80122ec <mixer_write+0x280>)
 80121f8:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458

	if (NULL == mx.tx_reserve)
 80121fc:	4b3b      	ldr	r3, [pc, #236]	; (80122ec <mixer_write+0x280>)
 80121fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012200:	2b00      	cmp	r3, #0
 8012202:	d107      	bne.n	8012214 <mixer_write+0x1a8>
	{
		mx.tx_reserve = &(mx.matrix[i]->birth_slot);
 8012204:	4a39      	ldr	r2, [pc, #228]	; (80122ec <mixer_write+0x280>)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	3316      	adds	r3, #22
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	4413      	add	r3, r2
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4a36      	ldr	r2, [pc, #216]	; (80122ec <mixer_write+0x280>)
 8012212:	6493      	str	r3, [r2, #72]	; 0x48
	}

	if (mx.next_own_row > &(mx.matrix[i]->birth_slot))
 8012214:	4b35      	ldr	r3, [pc, #212]	; (80122ec <mixer_write+0x280>)
 8012216:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 801221a:	4934      	ldr	r1, [pc, #208]	; (80122ec <mixer_write+0x280>)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	3316      	adds	r3, #22
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	440b      	add	r3, r1
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	429a      	cmp	r2, r3
 8012228:	d908      	bls.n	801223c <mixer_write+0x1d0>
		mx.next_own_row = &(mx.matrix[i]->birth_slot);
 801222a:	4a30      	ldr	r2, [pc, #192]	; (80122ec <mixer_write+0x280>)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3316      	adds	r3, #22
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	4413      	add	r3, r2
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	4a2d      	ldr	r2, [pc, #180]	; (80122ec <mixer_write+0x280>)
 8012238:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	#if MX_REQUEST
		const unsigned int BITS_PER_WORD = sizeof(uint_fast_t) * 8;
 801223c:	2320      	movs	r3, #32
 801223e:	623b      	str	r3, [r7, #32]
		mx.request->mask[chirp_config.my_row_mask.pos + i / BITS_PER_WORD] &= ~(1 << (i % BITS_PER_WORD));
 8012240:	4b2a      	ldr	r3, [pc, #168]	; (80122ec <mixer_write+0x280>)
 8012242:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8012246:	4b28      	ldr	r3, [pc, #160]	; (80122e8 <mixer_write+0x27c>)
 8012248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801224c:	4618      	mov	r0, r3
 801224e:	68f9      	ldr	r1, [r7, #12]
 8012250:	6a3b      	ldr	r3, [r7, #32]
 8012252:	fbb1 f3f3 	udiv	r3, r1, r3
 8012256:	1819      	adds	r1, r3, r0
 8012258:	3106      	adds	r1, #6
 801225a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	6a38      	ldr	r0, [r7, #32]
 8012262:	fbb2 f0f0 	udiv	r0, r2, r0
 8012266:	6a3c      	ldr	r4, [r7, #32]
 8012268:	fb04 f000 	mul.w	r0, r4, r0
 801226c:	1a12      	subs	r2, r2, r0
 801226e:	2001      	movs	r0, #1
 8012270:	fa00 f202 	lsl.w	r2, r0, r2
 8012274:	43d2      	mvns	r2, r2
 8012276:	4614      	mov	r4, r2
 8012278:	4a1c      	ldr	r2, [pc, #112]	; (80122ec <mixer_write+0x280>)
 801227a:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 801227e:	481a      	ldr	r0, [pc, #104]	; (80122e8 <mixer_write+0x27c>)
 8012280:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8012284:	4403      	add	r3, r0
 8012286:	4021      	ands	r1, r4
 8012288:	3306      	adds	r3, #6
 801228a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		mx.request->mask[chirp_config.my_column_mask.pos + i / BITS_PER_WORD] &= ~(1 << (i % BITS_PER_WORD));
 801228e:	4b17      	ldr	r3, [pc, #92]	; (80122ec <mixer_write+0x280>)
 8012290:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8012294:	4b14      	ldr	r3, [pc, #80]	; (80122e8 <mixer_write+0x27c>)
 8012296:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801229a:	4618      	mov	r0, r3
 801229c:	68f9      	ldr	r1, [r7, #12]
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80122a4:	1819      	adds	r1, r3, r0
 80122a6:	3106      	adds	r1, #6
 80122a8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80122ac:	68fa      	ldr	r2, [r7, #12]
 80122ae:	6a38      	ldr	r0, [r7, #32]
 80122b0:	fbb2 f0f0 	udiv	r0, r2, r0
 80122b4:	6a3c      	ldr	r4, [r7, #32]
 80122b6:	fb04 f000 	mul.w	r0, r4, r0
 80122ba:	1a12      	subs	r2, r2, r0
 80122bc:	2001      	movs	r0, #1
 80122be:	fa00 f202 	lsl.w	r2, r0, r2
 80122c2:	43d2      	mvns	r2, r2
 80122c4:	4614      	mov	r4, r2
 80122c6:	4a09      	ldr	r2, [pc, #36]	; (80122ec <mixer_write+0x280>)
 80122c8:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 80122cc:	4806      	ldr	r0, [pc, #24]	; (80122e8 <mixer_write+0x27c>)
 80122ce:	f890 0036 	ldrb.w	r0, [r0, #54]	; 0x36
 80122d2:	4403      	add	r3, r0
 80122d4:	4021      	ands	r1, r4
 80122d6:	3306      	adds	r3, #6
 80122d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	#endif

	GPI_TRACE_RETURN(size);
 80122dc:	687b      	ldr	r3, [r7, #4]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3734      	adds	r7, #52	; 0x34
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd90      	pop	{r4, r7, pc}
 80122e6:	bf00      	nop
 80122e8:	20001430 	.word	0x20001430
 80122ec:	200014f0 	.word	0x200014f0

080122f0 <mixer_arm>:

//**************************************************************************************************

void mixer_arm(Mixer_Start_Mode mode)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	4603      	mov	r3, r0
 80122f8:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION();
 80122fa:	bf00      	nop
	if (chirp_config.primitive != FLOODING)
 80122fc:	4b51      	ldr	r3, [pc, #324]	; (8012444 <mixer_arm+0x154>)
 80122fe:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012302:	2b01      	cmp	r3, #1
 8012304:	f000 809b 	beq.w	801243e <mixer_arm+0x14e>
	{
	// mark an empty row (used by rx processing)
	mx.empty_row = NULL;
 8012308:	4b4f      	ldr	r3, [pc, #316]	; (8012448 <mixer_arm+0x158>)
 801230a:	2200      	movs	r2, #0
 801230c:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	if (mx.rank < chirp_config.mx_generation_size)
 8012310:	4b4d      	ldr	r3, [pc, #308]	; (8012448 <mixer_arm+0x158>)
 8012312:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8012316:	4b4b      	ldr	r3, [pc, #300]	; (8012444 <mixer_arm+0x154>)
 8012318:	885b      	ldrh	r3, [r3, #2]
 801231a:	b29b      	uxth	r3, r3
 801231c:	429a      	cmp	r2, r3
 801231e:	d226      	bcs.n	801236e <mixer_arm+0x7e>
	{
		Matrix_Row *p = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 8012320:	4b48      	ldr	r3, [pc, #288]	; (8012444 <mixer_arm+0x154>)
 8012322:	885b      	ldrh	r3, [r3, #2]
 8012324:	b29b      	uxth	r3, r3
 8012326:	3b01      	subs	r3, #1
 8012328:	4a47      	ldr	r2, [pc, #284]	; (8012448 <mixer_arm+0x158>)
 801232a:	3316      	adds	r3, #22
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	4b44      	ldr	r3, [pc, #272]	; (8012444 <mixer_arm+0x154>)
 8012334:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012336:	b29b      	uxth	r3, r3
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	4413      	add	r3, r2
 801233c:	3304      	adds	r3, #4
 801233e:	60fb      	str	r3, [r7, #12]
		while (p > 0)
 8012340:	e012      	b.n	8012368 <mixer_arm+0x78>
		{
			p -= chirp_config.matrix_size_32;
 8012342:	4b40      	ldr	r3, [pc, #256]	; (8012444 <mixer_arm+0x154>)
 8012344:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012346:	b29b      	uxth	r3, r3
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	425b      	negs	r3, r3
 801234c:	68fa      	ldr	r2, [r7, #12]
 801234e:	4413      	add	r3, r2
 8012350:	60fb      	str	r3, [r7, #12]
			if (UINT16_MAX == p->birth_slot)
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801235a:	4293      	cmp	r3, r2
 801235c:	d104      	bne.n	8012368 <mixer_arm+0x78>
			{
				mx.empty_row = p;
 801235e:	4a3a      	ldr	r2, [pc, #232]	; (8012448 <mixer_arm+0x158>)
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
				break;
 8012366:	e002      	b.n	801236e <mixer_arm+0x7e>
		while (p > 0)
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d1e9      	bne.n	8012342 <mixer_arm+0x52>
			}
		}
	}

	// if initiator: arm TX (instead of RESYNC)
	if (mode & MX_ARM_INITIATOR)
 801236e:	79fb      	ldrb	r3, [r7, #7]
 8012370:	f003 0301 	and.w	r3, r3, #1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d048      	beq.n	801240a <mixer_arm+0x11a>
	{
		assert_reset((NULL != mx.tx_reserve));
 8012378:	4b33      	ldr	r3, [pc, #204]	; (8012448 <mixer_arm+0x158>)
 801237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801237c:	2b00      	cmp	r3, #0
 801237e:	d106      	bne.n	801238e <mixer_arm+0x9e>
 8012380:	4b31      	ldr	r3, [pc, #196]	; (8012448 <mixer_arm+0x158>)
 8012382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012384:	2b00      	cmp	r3, #0
 8012386:	d102      	bne.n	801238e <mixer_arm+0x9e>
 8012388:	b671      	cpsid	f
 801238a:	f7ff fbbf 	bl	8011b0c <NVIC_SystemReset>

		mx.tx_sideload = &(mx.next_own_row->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 801238e:	4b2e      	ldr	r3, [pc, #184]	; (8012448 <mixer_arm+0x158>)
 8012390:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8012394:	4a2b      	ldr	r2, [pc, #172]	; (8012444 <mixer_arm+0x154>)
 8012396:	7e12      	ldrb	r2, [r2, #24]
 8012398:	4413      	add	r3, r2
 801239a:	3304      	adds	r3, #4
 801239c:	4a2a      	ldr	r2, [pc, #168]	; (8012448 <mixer_arm+0x158>)
 801239e:	6453      	str	r3, [r2, #68]	; 0x44

		mx.next_own_row += chirp_config.matrix_size_32;
 80123a0:	4b29      	ldr	r3, [pc, #164]	; (8012448 <mixer_arm+0x158>)
 80123a2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80123a6:	4b27      	ldr	r3, [pc, #156]	; (8012444 <mixer_arm+0x154>)
 80123a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	4a25      	ldr	r2, [pc, #148]	; (8012448 <mixer_arm+0x158>)
 80123b2:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 80123b6:	e010      	b.n	80123da <mixer_arm+0xea>
		{
			if (0 == mx.next_own_row->birth_slot)
 80123b8:	4b23      	ldr	r3, [pc, #140]	; (8012448 <mixer_arm+0x158>)
 80123ba:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d01f      	beq.n	8012404 <mixer_arm+0x114>
				break;

			mx.next_own_row += chirp_config.matrix_size_32;
 80123c4:	4b20      	ldr	r3, [pc, #128]	; (8012448 <mixer_arm+0x158>)
 80123c6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80123ca:	4b1e      	ldr	r3, [pc, #120]	; (8012444 <mixer_arm+0x154>)
 80123cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	4413      	add	r3, r2
 80123d4:	4a1c      	ldr	r2, [pc, #112]	; (8012448 <mixer_arm+0x158>)
 80123d6:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 80123da:	4b1b      	ldr	r3, [pc, #108]	; (8012448 <mixer_arm+0x158>)
 80123dc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80123e0:	4b18      	ldr	r3, [pc, #96]	; (8012444 <mixer_arm+0x154>)
 80123e2:	885b      	ldrh	r3, [r3, #2]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4917      	ldr	r1, [pc, #92]	; (8012448 <mixer_arm+0x158>)
 80123ea:	3316      	adds	r3, #22
 80123ec:	009b      	lsls	r3, r3, #2
 80123ee:	440b      	add	r3, r1
 80123f0:	6859      	ldr	r1, [r3, #4]
 80123f2:	4b14      	ldr	r3, [pc, #80]	; (8012444 <mixer_arm+0x154>)
 80123f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	440b      	add	r3, r1
 80123fc:	3304      	adds	r3, #4
 80123fe:	429a      	cmp	r2, r3
 8012400:	d3da      	bcc.n	80123b8 <mixer_arm+0xc8>
 8012402:	e000      	b.n	8012406 <mixer_arm+0x116>
				break;
 8012404:	bf00      	nop
		}

		mixer_transport_arm_initiator();
 8012406:	f7ff f901 	bl	801160c <mixer_transport_arm_initiator>
	}

	// launch threads
	// NOTE: this gives all threads the opportunity to init thread-local data
	(void) PT_SCHEDULE(mixer_maintenance());
 801240a:	bf00      	nop
 801240c:	f006 f838 	bl	8018480 <mixer_maintenance>
 8012410:	4603      	mov	r3, r0
 8012412:	2b01      	cmp	r3, #1
	(void) PT_SCHEDULE(mixer_update_slot());
 8012414:	bf00      	nop
 8012416:	f004 f907 	bl	8016628 <mixer_update_slot>
 801241a:	4603      	mov	r3, r0
 801241c:	2b01      	cmp	r3, #1
	(void) PT_SCHEDULE(mixer_process_rx_data());
 801241e:	bf00      	nop
 8012420:	f004 ff38 	bl	8017294 <mixer_process_rx_data>
 8012424:	4603      	mov	r3, r0
 8012426:	2b01      	cmp	r3, #1

	// if sync round: don't update deadline before first packet reception
	// ATTENTION: the way of doing that here is a bit crude. It is associated to the
	// maintenance thread; look there for details.
	if (mode & MX_ARM_INFINITE_SCAN)
 8012428:	79fb      	ldrb	r3, [r7, #7]
 801242a:	f003 0302 	and.w	r3, r3, #2
 801242e:	2b00      	cmp	r3, #0
 8012430:	d004      	beq.n	801243c <mixer_arm+0x14c>
		mx.round_deadline_update_slot = 0;
 8012432:	4b05      	ldr	r3, [pc, #20]	; (8012448 <mixer_arm+0x158>)
 8012434:	2200      	movs	r2, #0
 8012436:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	GPI_TRACE_RETURN();
 801243a:	bf00      	nop
 801243c:	bf00      	nop
	}
}
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}
 8012444:	20001430 	.word	0x20001430
 8012448:	200014f0 	.word	0x200014f0

0801244c <mixer_start>:

//**************************************************************************************************

Gpi_Fast_Tick_Extended mixer_start()
{
 801244c:	b590      	push	{r4, r7, lr}
 801244e:	b089      	sub	sp, #36	; 0x24
 8012450:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION_FAST();
 8012452:	bf00      	nop

	mixer_transport_start();
 8012454:	f7ff f8f8 	bl	8011648 <mixer_transport_start>

	unsigned int event_mask = BV(SLOT_UPDATE) | BV(TRIGGER_TICK);
 8012458:	230a      	movs	r3, #10
 801245a:	61fb      	str	r3, [r7, #28]

	while (event_mask)
 801245c:	e0bd      	b.n	80125da <mixer_start+0x18e>
	{
		// isolate highest priority pending event
		unsigned int event = mx.events & event_mask;
 801245e:	4b9a      	ldr	r3, [pc, #616]	; (80126c8 <mixer_start+0x27c>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	69fa      	ldr	r2, [r7, #28]
 8012464:	4013      	ands	r3, r2
 8012466:	60fb      	str	r3, [r7, #12]
		event &= -event;	// mask LSB
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	425b      	negs	r3, r3
 801246c:	68fa      	ldr	r2, [r7, #12]
 801246e:	4013      	ands	r3, r2
 8012470:	60fb      	str	r3, [r7, #12]

		switch (event)
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b02      	cmp	r3, #2
 8012476:	d00a      	beq.n	801248e <mixer_start+0x42>
 8012478:	2b08      	cmp	r3, #8
 801247a:	d017      	beq.n	80124ac <mixer_start+0x60>
					event_mask = BV(STOPPED);
				break;

			default:
			{
				GPI_TRACE_FLUSH();
 801247c:	bf00      	nop

				if (PT_WAITING == PT_SCHEDULE_STATE(mixer_process_rx_data()))
 801247e:	bf00      	nop
 8012480:	f004 ff08 	bl	8017294 <mixer_process_rx_data>
 8012484:	4603      	mov	r3, r0
 8012486:	2b00      	cmp	r3, #0
 8012488:	f040 80a7 	bne.w	80125da <mixer_start+0x18e>
 801248c:	e01d      	b.n	80124ca <mixer_start+0x7e>
				if (!PT_SCHEDULE(mixer_update_slot()))
 801248e:	bf00      	nop
 8012490:	f004 f8ca 	bl	8016628 <mixer_update_slot>
 8012494:	4603      	mov	r3, r0
 8012496:	2b01      	cmp	r3, #1
 8012498:	bf94      	ite	ls
 801249a:	2301      	movls	r3, #1
 801249c:	2300      	movhi	r3, #0
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f040 809a 	bne.w	80125da <mixer_start+0x18e>
					event_mask = BV(STOPPED);
 80124a6:	2301      	movs	r3, #1
 80124a8:	61fb      	str	r3, [r7, #28]
				break;
 80124aa:	e096      	b.n	80125da <mixer_start+0x18e>
				if (!PT_SCHEDULE(mixer_maintenance()))
 80124ac:	bf00      	nop
 80124ae:	f005 ffe7 	bl	8018480 <mixer_maintenance>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	bf94      	ite	ls
 80124b8:	2301      	movls	r3, #1
 80124ba:	2300      	movhi	r3, #0
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f040 808b 	bne.w	80125da <mixer_start+0x18e>
					event_mask = BV(STOPPED);
 80124c4:	2301      	movs	r3, #1
 80124c6:	61fb      	str	r3, [r7, #28]
				break;
 80124c8:	e087      	b.n	80125da <mixer_start+0x18e>
				{
					// after graceful stop has been performed
					if (BV(STOPPED) == event)
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d110      	bne.n	80124f2 <mixer_start+0xa6>
					{
						GPI_TRACE_MSG(TRACE_INFO, "interrupts stopped");
 80124d0:	bf00      	nop
						// if deadline reached: set mx.slot_number to last slot
						// NOTE: Since the deadline has been reached, we know that we are there.
						// If we wouldn't update mx.slot_number then it would be possible that
						// some of the stat_counters (slot_off...) get wrong values if node was
						// in RESYNC when stopping.
						if (mx.events & BV(DEADLINE_REACHED))
 80124d2:	4b7d      	ldr	r3, [pc, #500]	; (80126c8 <mixer_start+0x27c>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f003 0320 	and.w	r3, r3, #32
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <mixer_start+0xa0>
						{
							mx.slot_number = chirp_config.mx_round_length;
 80124de:	4b7b      	ldr	r3, [pc, #492]	; (80126cc <mixer_start+0x280>)
 80124e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	4b78      	ldr	r3, [pc, #480]	; (80126c8 <mixer_start+0x27c>)
 80124e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						}

						// exit loop
						event_mask = 0;
 80124ec:	2300      	movs	r3, #0
 80124ee:	61fb      	str	r3, [r7, #28]
						break;
 80124f0:	e073      	b.n	80125da <mixer_start+0x18e>
  __ASM volatile ("cpsid i" : : : "memory");
 80124f2:	b672      	cpsid	i
                    }

					// enter low-power mode
					gpi_int_disable();
					if (!(mx.events & event_mask))
 80124f4:	4b74      	ldr	r3, [pc, #464]	; (80126c8 <mixer_start+0x27c>)
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	4013      	ands	r3, r2
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d16b      	bne.n	80125d8 <mixer_start+0x18c>
							ASSERT_CT(IS_POWER_OF_2(FAST_HYBRID_RATIO), FAST_HYBRID_ratio_must_be_power_of_2);

							#if (GPI_TRACE_MODE & GPI_TRACE_MODE_TRACE)
								const int USE_NATIVE = 0;
							#else
								const int USE_NATIVE =
 8012500:	2301      	movs	r3, #1
 8012502:	60bb      	str	r3, [r7, #8]
									(Gpi_Fast_Tick_Native)GPI_TICK_FAST_MAX);
							#endif

							Gpi_Hybrid_Tick	time;

							if (USE_NATIVE)
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d004      	beq.n	8012514 <mixer_start+0xc8>
 801250a:	4b71      	ldr	r3, [pc, #452]	; (80126d0 <mixer_start+0x284>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
								time = gpi_tick_fast_native();
 8012510:	61bb      	str	r3, [r7, #24]
 8012512:	e002      	b.n	801251a <mixer_start+0xce>
							else time = gpi_tick_hybrid();
 8012514:	f7f9 fad6 	bl	800bac4 <gpi_tick_hybrid>
 8012518:	61b8      	str	r0, [r7, #24]
						#endif

						#if ENERGEST_CONF_ON
							static unsigned long irq_energest = 0;
							/* Re-enable interrupts and go to sleep atomically. */
							ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801251a:	4b6e      	ldr	r3, [pc, #440]	; (80126d4 <mixer_start+0x288>)
 801251c:	79db      	ldrb	r3, [r3, #7]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00d      	beq.n	801253e <mixer_start+0xf2>
 8012522:	4b6b      	ldr	r3, [pc, #428]	; (80126d0 <mixer_start+0x284>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012528:	4b6b      	ldr	r3, [pc, #428]	; (80126d8 <mixer_start+0x28c>)
 801252a:	69db      	ldr	r3, [r3, #28]
 801252c:	1ad2      	subs	r2, r2, r3
 801252e:	4b6b      	ldr	r3, [pc, #428]	; (80126dc <mixer_start+0x290>)
 8012530:	69db      	ldr	r3, [r3, #28]
 8012532:	4413      	add	r3, r2
 8012534:	4a69      	ldr	r2, [pc, #420]	; (80126dc <mixer_start+0x290>)
 8012536:	61d3      	str	r3, [r2, #28]
 8012538:	4b66      	ldr	r3, [pc, #408]	; (80126d4 <mixer_start+0x288>)
 801253a:	2200      	movs	r2, #0
 801253c:	71da      	strb	r2, [r3, #7]
 801253e:	4b64      	ldr	r3, [pc, #400]	; (80126d0 <mixer_start+0x284>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
							ENERGEST_ON(ENERGEST_TYPE_LPM);
 8012544:	4a64      	ldr	r2, [pc, #400]	; (80126d8 <mixer_start+0x28c>)
 8012546:	6213      	str	r3, [r2, #32]
 8012548:	4b62      	ldr	r3, [pc, #392]	; (80126d4 <mixer_start+0x288>)
 801254a:	2201      	movs	r2, #1
 801254c:	721a      	strb	r2, [r3, #8]
							/* We only want to measure the processing done in IRQs when we
							are asleep, so we discard the processing time done when we
							were awake. */
							energest_type_set(ENERGEST_TYPE_IRQ, irq_energest);
 801254e:	4b64      	ldr	r3, [pc, #400]	; (80126e0 <mixer_start+0x294>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4619      	mov	r1, r3
 8012554:	2000      	movs	r0, #0
 8012556:	f7fb fe5f 	bl	800e218 <energest_type_set>
						#endif

						// enter sleep mode
						// NOTE: reenables interrupts (they serve as wake-up events)
						gpi_sleep();
 801255a:	f7fb fdd7 	bl	800e10c <gpi_sleep>
						#if MX_VERBOSE_STATISTICS
							// ATTENTION: time up to here includes execution time of one or more ISRs.
							// To support low-power time measurements, every (relevant) ISR stores
							// the wake-up timestamp on ISR entry (in case it is a wake-up event).
							// This is what we use here.
							if (USE_NATIVE)
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d006      	beq.n	8012572 <mixer_start+0x126>
								time = (Gpi_Fast_Tick_Native)(mx.wake_up_timestamp - time) / FAST_HYBRID_RATIO;
 8012564:	4b58      	ldr	r3, [pc, #352]	; (80126c8 <mixer_start+0x27c>)
 8012566:	f8d3 28a8 	ldr.w	r2, [r3, #2216]	; 0x8a8
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	61bb      	str	r3, [r7, #24]
 8012570:	e009      	b.n	8012586 <mixer_start+0x13a>
							else time = gpi_tick_fast_to_hybrid(mx.wake_up_timestamp) - time;
 8012572:	4b55      	ldr	r3, [pc, #340]	; (80126c8 <mixer_start+0x27c>)
 8012574:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	; 0x8a8
 8012578:	4618      	mov	r0, r3
 801257a:	f7f9 fafb 	bl	800bb74 <gpi_tick_fast_to_hybrid>
 801257e:	4602      	mov	r2, r0
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	1ad3      	subs	r3, r2, r3
 8012584:	61bb      	str	r3, [r7, #24]
							mx.stat_counter.low_power_time += time;
 8012586:	4b50      	ldr	r3, [pc, #320]	; (80126c8 <mixer_start+0x27c>)
 8012588:	f8d3 28a4 	ldr.w	r2, [r3, #2212]	; 0x8a4
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	4413      	add	r3, r2
 8012590:	4a4d      	ldr	r2, [pc, #308]	; (80126c8 <mixer_start+0x27c>)
 8012592:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
						#endif

						#if ENERGEST_CONF_ON
							irq_energest = energest_type_time(ENERGEST_TYPE_IRQ);
 8012596:	2000      	movs	r0, #0
 8012598:	f7fb fe0a 	bl	800e1b0 <energest_type_time>
 801259c:	4602      	mov	r2, r0
 801259e:	4b50      	ldr	r3, [pc, #320]	; (80126e0 <mixer_start+0x294>)
 80125a0:	601a      	str	r2, [r3, #0]
							ENERGEST_OFF(ENERGEST_TYPE_LPM);
 80125a2:	4b4c      	ldr	r3, [pc, #304]	; (80126d4 <mixer_start+0x288>)
 80125a4:	7a1b      	ldrb	r3, [r3, #8]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d00d      	beq.n	80125c6 <mixer_start+0x17a>
 80125aa:	4b49      	ldr	r3, [pc, #292]	; (80126d0 <mixer_start+0x284>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125b0:	4b49      	ldr	r3, [pc, #292]	; (80126d8 <mixer_start+0x28c>)
 80125b2:	6a1b      	ldr	r3, [r3, #32]
 80125b4:	1ad2      	subs	r2, r2, r3
 80125b6:	4b49      	ldr	r3, [pc, #292]	; (80126dc <mixer_start+0x290>)
 80125b8:	6a1b      	ldr	r3, [r3, #32]
 80125ba:	4413      	add	r3, r2
 80125bc:	4a47      	ldr	r2, [pc, #284]	; (80126dc <mixer_start+0x290>)
 80125be:	6213      	str	r3, [r2, #32]
 80125c0:	4b44      	ldr	r3, [pc, #272]	; (80126d4 <mixer_start+0x288>)
 80125c2:	2200      	movs	r2, #0
 80125c4:	721a      	strb	r2, [r3, #8]
 80125c6:	4b42      	ldr	r3, [pc, #264]	; (80126d0 <mixer_start+0x284>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
							ENERGEST_ON(ENERGEST_TYPE_CPU);
 80125cc:	4a42      	ldr	r2, [pc, #264]	; (80126d8 <mixer_start+0x28c>)
 80125ce:	61d3      	str	r3, [r2, #28]
 80125d0:	4b40      	ldr	r3, [pc, #256]	; (80126d4 <mixer_start+0x288>)
 80125d2:	2201      	movs	r2, #1
 80125d4:	71da      	strb	r2, [r3, #7]
 80125d6:	e000      	b.n	80125da <mixer_start+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 80125d8:	b662      	cpsie	i
	while (event_mask)
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f47f af3e 	bne.w	801245e <mixer_start+0x12>
			}
		}
	}

	// try to solve (if not done already)
	if (mx.rank < chirp_config.mx_generation_size)
 80125e2:	4b39      	ldr	r3, [pc, #228]	; (80126c8 <mixer_start+0x27c>)
 80125e4:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80125e8:	4b38      	ldr	r3, [pc, #224]	; (80126cc <mixer_start+0x280>)
 80125ea:	885b      	ldrh	r3, [r3, #2]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d211      	bcs.n	8012616 <mixer_start+0x1ca>
	{
		Pt_Context *pt = &pt_data[0];
 80125f2:	4b3c      	ldr	r3, [pc, #240]	; (80126e4 <mixer_start+0x298>)
 80125f4:	617b      	str	r3, [r7, #20]
		PT_INIT(pt);
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	2200      	movs	r2, #0
 80125fa:	801a      	strh	r2, [r3, #0]
		while (PT_SCHEDULE(mixer_decode(pt)));
 80125fc:	bf00      	nop
 80125fe:	bf00      	nop
 8012600:	6978      	ldr	r0, [r7, #20]
 8012602:	f005 fc1f 	bl	8017e44 <mixer_decode>
 8012606:	4603      	mov	r3, r0
 8012608:	2b01      	cmp	r3, #1
 801260a:	bf94      	ite	ls
 801260c:	2301      	movls	r3, #1
 801260e:	2300      	movhi	r3, #0
 8012610:	b2db      	uxtb	r3, r3
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1f3      	bne.n	80125fe <mixer_start+0x1b2>

	// #endif

	#if ENERGEST_CONF_ON

	unsigned long avg_energy1 = ((((unsigned long)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN) + energest_type_time(ENERGEST_TYPE_TRANSMIT)))) / (unsigned long)(chirp_config.mx_period_time_s));
 8012616:	200f      	movs	r0, #15
 8012618:	f7fb fdca 	bl	800e1b0 <energest_type_time>
 801261c:	4604      	mov	r4, r0
 801261e:	200e      	movs	r0, #14
 8012620:	f7fb fdc6 	bl	800e1b0 <energest_type_time>
 8012624:	4603      	mov	r3, r0
 8012626:	4423      	add	r3, r4
 8012628:	607b      	str	r3, [r7, #4]
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	091b      	lsrs	r3, r3, #4
 801262e:	4a27      	ldr	r2, [pc, #156]	; (80126cc <mixer_start+0x280>)
 8012630:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8012634:	b292      	uxth	r2, r2
 8012636:	fbb3 f3f2 	udiv	r3, r3, r2
 801263a:	613b      	str	r3, [r7, #16]

	printf("E 1:%lu.%03lu \n", avg_energy1 / 1000, avg_energy1 % 1000);
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	4a2a      	ldr	r2, [pc, #168]	; (80126e8 <mixer_start+0x29c>)
 8012640:	fba2 2303 	umull	r2, r3, r2, r3
 8012644:	0998      	lsrs	r0, r3, #6
 8012646:	693a      	ldr	r2, [r7, #16]
 8012648:	4b27      	ldr	r3, [pc, #156]	; (80126e8 <mixer_start+0x29c>)
 801264a:	fba3 1302 	umull	r1, r3, r3, r2
 801264e:	099b      	lsrs	r3, r3, #6
 8012650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012654:	fb01 f303 	mul.w	r3, r1, r3
 8012658:	1ad3      	subs	r3, r2, r3
 801265a:	461a      	mov	r2, r3
 801265c:	4601      	mov	r1, r0
 801265e:	4823      	ldr	r0, [pc, #140]	; (80126ec <mixer_start+0x2a0>)
 8012660:	f00f fda0 	bl	80221a4 <iprintf>

	#endif

	free(mx.rx_queue[0]);
 8012664:	4b18      	ldr	r3, [pc, #96]	; (80126c8 <mixer_start+0x27c>)
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f00e ff7b 	bl	8021564 <free>
	if (chirp_config.primitive != FLOODING)
 801266e:	4b17      	ldr	r3, [pc, #92]	; (80126cc <mixer_start+0x280>)
 8012670:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012674:	2b01      	cmp	r3, #1
 8012676:	d009      	beq.n	801268c <mixer_start+0x240>
	{
		#if INFO_VECTOR_QUEUE
		free(mx.code_queue[0]);
 8012678:	4b13      	ldr	r3, [pc, #76]	; (80126c8 <mixer_start+0x27c>)
 801267a:	695b      	ldr	r3, [r3, #20]
 801267c:	4618      	mov	r0, r3
 801267e:	f00e ff71 	bl	8021564 <free>
		free(mx.info_queue[0]);
 8012682:	4b11      	ldr	r3, [pc, #68]	; (80126c8 <mixer_start+0x27c>)
 8012684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012686:	4618      	mov	r0, r3
 8012688:	f00e ff6c 	bl	8021564 <free>
		#endif
	}
	free(mx.tx_packet);
 801268c:	4b0e      	ldr	r3, [pc, #56]	; (80126c8 <mixer_start+0x27c>)
 801268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012690:	4618      	mov	r0, r3
 8012692:	f00e ff67 	bl	8021564 <free>
	free(mx.history[0]);
 8012696:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <mixer_start+0x27c>)
 8012698:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 801269c:	4618      	mov	r0, r3
 801269e:	f00e ff61 	bl	8021564 <free>
	#if MX_SMART_SHUTDOWN
		free(mx.full_rank_map);
	#endif
	if (chirp_config.primitive == FLOODING)
 80126a2:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <mixer_start+0x280>)
 80126a4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80126a8:	2b01      	cmp	r3, #1
 80126aa:	d105      	bne.n	80126b8 <mixer_start+0x26c>
		free(mx.request);
 80126ac:	4b06      	ldr	r3, [pc, #24]	; (80126c8 <mixer_start+0x27c>)
 80126ae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80126b2:	4618      	mov	r0, r3
 80126b4:	f00e ff56 	bl	8021564 <free>

	GPI_TRACE_RETURN(mx.round_deadline);
 80126b8:	4b03      	ldr	r3, [pc, #12]	; (80126c8 <mixer_start+0x27c>)
 80126ba:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
}
 80126be:	4618      	mov	r0, r3
 80126c0:	4621      	mov	r1, r4
 80126c2:	3724      	adds	r7, #36	; 0x24
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd90      	pop	{r4, r7, pc}
 80126c8:	200014f0 	.word	0x200014f0
 80126cc:	20001430 	.word	0x20001430
 80126d0:	200012c8 	.word	0x200012c8
 80126d4:	2000112c 	.word	0x2000112c
 80126d8:	20001308 	.word	0x20001308
 80126dc:	20000f10 	.word	0x20000f10
 80126e0:	20000460 	.word	0x20000460
 80126e4:	20001e28 	.word	0x20001e28
 80126e8:	10624dd3 	.word	0x10624dd3
 80126ec:	08025404 	.word	0x08025404

080126f0 <mixer_read>:

//**************************************************************************************************

void* mixer_read(unsigned int i)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
	GPI_TRACE_FUNCTION();
 80126f8:	bf00      	nop

	assert_reset((i < chirp_config.mx_generation_size));
 80126fa:	4b45      	ldr	r3, [pc, #276]	; (8012810 <mixer_read+0x120>)
 80126fc:	885b      	ldrh	r3, [r3, #2]
 80126fe:	b29b      	uxth	r3, r3
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4293      	cmp	r3, r2
 8012706:	d309      	bcc.n	801271c <mixer_read+0x2c>
 8012708:	4b41      	ldr	r3, [pc, #260]	; (8012810 <mixer_read+0x120>)
 801270a:	885b      	ldrh	r3, [r3, #2]
 801270c:	b29b      	uxth	r3, r3
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4293      	cmp	r3, r2
 8012714:	d302      	bcc.n	801271c <mixer_read+0x2c>
  __ASM volatile ("cpsid f" : : : "memory");
 8012716:	b671      	cpsid	f
 8012718:	f7ff f9f8 	bl	8011b0c <NVIC_SystemReset>

	// in case NDEBUG is set
	if (i >= chirp_config.mx_generation_size)
 801271c:	4b3c      	ldr	r3, [pc, #240]	; (8012810 <mixer_read+0x120>)
 801271e:	885b      	ldrh	r3, [r3, #2]
 8012720:	b29b      	uxth	r3, r3
 8012722:	461a      	mov	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4293      	cmp	r3, r2
 8012728:	d301      	bcc.n	801272e <mixer_read+0x3e>
		GPI_TRACE_RETURN((void*)NULL);
 801272a:	2300      	movs	r3, #0
 801272c:	e06b      	b.n	8012806 <mixer_read+0x116>

	if (UINT16_MAX == mx.matrix[i]->birth_slot)
 801272e:	4a39      	ldr	r2, [pc, #228]	; (8012814 <mixer_read+0x124>)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	3316      	adds	r3, #22
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	4413      	add	r3, r2
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012740:	4293      	cmp	r3, r2
 8012742:	d101      	bne.n	8012748 <mixer_read+0x58>
		GPI_TRACE_RETURN((void*)NULL);
 8012744:	2300      	movs	r3, #0
 8012746:	e05e      	b.n	8012806 <mixer_read+0x116>

	uint8_t m = 1 << (i % 8);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f003 0307 	and.w	r3, r3, #7
 801274e:	2201      	movs	r2, #1
 8012750:	fa02 f303 	lsl.w	r3, r2, r3
 8012754:	73fb      	strb	r3, [r7, #15]

	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] ^= m;
 8012756:	4a2f      	ldr	r2, [pc, #188]	; (8012814 <mixer_read+0x124>)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3316      	adds	r3, #22
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	4413      	add	r3, r2
 8012760:	6859      	ldr	r1, [r3, #4]
 8012762:	4b2b      	ldr	r3, [pc, #172]	; (8012810 <mixer_read+0x120>)
 8012764:	7e1b      	ldrb	r3, [r3, #24]
 8012766:	4618      	mov	r0, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	08da      	lsrs	r2, r3, #3
 801276c:	1813      	adds	r3, r2, r0
 801276e:	440b      	add	r3, r1
 8012770:	7918      	ldrb	r0, [r3, #4]
 8012772:	4928      	ldr	r1, [pc, #160]	; (8012814 <mixer_read+0x124>)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3316      	adds	r3, #22
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	440b      	add	r3, r1
 801277c:	6859      	ldr	r1, [r3, #4]
 801277e:	4b24      	ldr	r3, [pc, #144]	; (8012810 <mixer_read+0x120>)
 8012780:	7e1b      	ldrb	r3, [r3, #24]
 8012782:	4413      	add	r3, r2
 8012784:	7bfa      	ldrb	r2, [r7, #15]
 8012786:	4042      	eors	r2, r0
 8012788:	b2d2      	uxtb	r2, r2
 801278a:	440b      	add	r3, r1
 801278c:	711a      	strb	r2, [r3, #4]
	int_fast16_t k = mx_get_leading_index(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 801278e:	4a21      	ldr	r2, [pc, #132]	; (8012814 <mixer_read+0x124>)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	3316      	adds	r3, #22
 8012794:	009b      	lsls	r3, r3, #2
 8012796:	4413      	add	r3, r2
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	4a1d      	ldr	r2, [pc, #116]	; (8012810 <mixer_read+0x120>)
 801279c:	7e12      	ldrb	r2, [r2, #24]
 801279e:	4413      	add	r3, r2
 80127a0:	3304      	adds	r3, #4
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fb fdb0 	bl	800e308 <mx_get_leading_index>
 80127a8:	60b8      	str	r0, [r7, #8]
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] ^= m;
 80127aa:	4a1a      	ldr	r2, [pc, #104]	; (8012814 <mixer_read+0x124>)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	3316      	adds	r3, #22
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	4413      	add	r3, r2
 80127b4:	6859      	ldr	r1, [r3, #4]
 80127b6:	4b16      	ldr	r3, [pc, #88]	; (8012810 <mixer_read+0x120>)
 80127b8:	7e1b      	ldrb	r3, [r3, #24]
 80127ba:	4618      	mov	r0, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	08da      	lsrs	r2, r3, #3
 80127c0:	1813      	adds	r3, r2, r0
 80127c2:	440b      	add	r3, r1
 80127c4:	7918      	ldrb	r0, [r3, #4]
 80127c6:	4913      	ldr	r1, [pc, #76]	; (8012814 <mixer_read+0x124>)
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	3316      	adds	r3, #22
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	440b      	add	r3, r1
 80127d0:	6859      	ldr	r1, [r3, #4]
 80127d2:	4b0f      	ldr	r3, [pc, #60]	; (8012810 <mixer_read+0x120>)
 80127d4:	7e1b      	ldrb	r3, [r3, #24]
 80127d6:	4413      	add	r3, r2
 80127d8:	7bfa      	ldrb	r2, [r7, #15]
 80127da:	4042      	eors	r2, r0
 80127dc:	b2d2      	uxtb	r2, r2
 80127de:	440b      	add	r3, r1
 80127e0:	711a      	strb	r2, [r3, #4]

	if (k >= 0)
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	db01      	blt.n	80127ec <mixer_read+0xfc>
		GPI_TRACE_RETURN((void*)NULL);
 80127e8:	2300      	movs	r3, #0
 80127ea:	e00c      	b.n	8012806 <mixer_read+0x116>

	unwrap_row(i);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7fb fe33 	bl	800e458 <unwrap_row>

	GPI_TRACE_RETURN(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]));
 80127f2:	4a08      	ldr	r2, [pc, #32]	; (8012814 <mixer_read+0x124>)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	3316      	adds	r3, #22
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	4413      	add	r3, r2
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	4a04      	ldr	r2, [pc, #16]	; (8012810 <mixer_read+0x120>)
 8012800:	7e92      	ldrb	r2, [r2, #26]
 8012802:	4413      	add	r3, r2
 8012804:	3304      	adds	r3, #4
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	20001430 	.word	0x20001430
 8012814:	200014f0 	.word	0x200014f0

08012818 <NVIC_SystemReset>:
{
 8012818:	b480      	push	{r7}
 801281a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801281c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <NVIC_SystemReset+0x20>)
 8012822:	68db      	ldr	r3, [r3, #12]
 8012824:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012828:	4903      	ldr	r1, [pc, #12]	; (8012838 <NVIC_SystemReset+0x20>)
 801282a:	4b04      	ldr	r3, [pc, #16]	; (801283c <NVIC_SystemReset+0x24>)
 801282c:	4313      	orrs	r3, r2
 801282e:	60cb      	str	r3, [r1, #12]
 8012830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8012834:	bf00      	nop
    __NOP();
 8012836:	e7fd      	b.n	8012834 <NVIC_SystemReset+0x1c>
 8012838:	e000ed00 	.word	0xe000ed00
 801283c:	05fa0004 	.word	0x05fa0004

08012840 <PRINT_PACKET>:
#endif

//**************************************************************************************************
//***** Local Functions ****************************************************************************
void PRINT_PACKET(uint8_t *p, uint8_t len, uint8_t Packet)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	70fb      	strb	r3, [r7, #3]
 801284c:	4613      	mov	r3, r2
 801284e:	70bb      	strb	r3, [r7, #2]
    uint8_t i;
    if (Packet)
 8012850:	78bb      	ldrb	r3, [r7, #2]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d003      	beq.n	801285e <PRINT_PACKET+0x1e>
        PRINTF("r ");
 8012856:	4810      	ldr	r0, [pc, #64]	; (8012898 <PRINT_PACKET+0x58>)
 8012858:	f00f fca4 	bl	80221a4 <iprintf>
 801285c:	e002      	b.n	8012864 <PRINT_PACKET+0x24>
    else
        PRINTF("f ");
 801285e:	480f      	ldr	r0, [pc, #60]	; (801289c <PRINT_PACKET+0x5c>)
 8012860:	f00f fca0 	bl	80221a4 <iprintf>
    for (i = 0; i < len; i++)
 8012864:	2300      	movs	r3, #0
 8012866:	73fb      	strb	r3, [r7, #15]
 8012868:	e00a      	b.n	8012880 <PRINT_PACKET+0x40>
        PRINTF("%02x ", ((uint8_t *)p)[i]);
 801286a:	7bfb      	ldrb	r3, [r7, #15]
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	4413      	add	r3, r2
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	4619      	mov	r1, r3
 8012874:	480a      	ldr	r0, [pc, #40]	; (80128a0 <PRINT_PACKET+0x60>)
 8012876:	f00f fc95 	bl	80221a4 <iprintf>
    for (i = 0; i < len; i++)
 801287a:	7bfb      	ldrb	r3, [r7, #15]
 801287c:	3301      	adds	r3, #1
 801287e:	73fb      	strb	r3, [r7, #15]
 8012880:	7bfa      	ldrb	r2, [r7, #15]
 8012882:	78fb      	ldrb	r3, [r7, #3]
 8012884:	429a      	cmp	r2, r3
 8012886:	d3f0      	bcc.n	801286a <PRINT_PACKET+0x2a>
    PRINTF("\n");
 8012888:	200a      	movs	r0, #10
 801288a:	f00f fca3 	bl	80221d4 <putchar>
}
 801288e:	bf00      	nop
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	08025414 	.word	0x08025414
 801289c:	08025418 	.word	0x08025418
 80128a0:	0802541c 	.word	0x0802541c

080128a4 <clear_data>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void clear_data()
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	af00      	add	r7, sp, #0
    memset(data, 0, sizeof(data));
 80128a8:	2208      	movs	r2, #8
 80128aa:	2100      	movs	r1, #0
 80128ac:	4802      	ldr	r0, [pc, #8]	; (80128b8 <clear_data+0x14>)
 80128ae:	f00e fe6c 	bl	802158a <memset>
}
 80128b2:	bf00      	nop
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20000464 	.word	0x20000464

080128bc <uart_read_data>:

//**************************************************************************************************

void uart_read_data(uint8_t uart_isr_flag, uint8_t buffer_len)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	4603      	mov	r3, r0
 80128c4:	460a      	mov	r2, r1
 80128c6:	71fb      	strb	r3, [r7, #7]
 80128c8:	4613      	mov	r3, r2
 80128ca:	71bb      	strb	r3, [r7, #6]
    if (!uart_isr_flag)
 80128cc:	79fb      	ldrb	r3, [r7, #7]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d11f      	bne.n	8012912 <uart_read_data+0x56>
    {
        /* executed to open uart receive interrupt */
        __HAL_UART_DISABLE(&huart2);
 80128d2:	4b17      	ldr	r3, [pc, #92]	; (8012930 <uart_read_data+0x74>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	4b15      	ldr	r3, [pc, #84]	; (8012930 <uart_read_data+0x74>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f022 0201 	bic.w	r2, r2, #1
 80128e0:	601a      	str	r2, [r3, #0]
        __HAL_UART_ENABLE(&huart2);
 80128e2:	4b13      	ldr	r3, [pc, #76]	; (8012930 <uart_read_data+0x74>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	4b11      	ldr	r3, [pc, #68]	; (8012930 <uart_read_data+0x74>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f042 0201 	orr.w	r2, r2, #1
 80128f0:	601a      	str	r2, [r3, #0]
        memset(&uartRxBuffer, 0, sizeof(uartRxBuffer));
 80128f2:	2280      	movs	r2, #128	; 0x80
 80128f4:	2100      	movs	r1, #0
 80128f6:	480f      	ldr	r0, [pc, #60]	; (8012934 <uart_read_data+0x78>)
 80128f8:	f00e fe47 	bl	802158a <memset>
        HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBuffer, buffer_len);
 80128fc:	79bb      	ldrb	r3, [r7, #6]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	461a      	mov	r2, r3
 8012902:	490c      	ldr	r1, [pc, #48]	; (8012934 <uart_read_data+0x78>)
 8012904:	480a      	ldr	r0, [pc, #40]	; (8012930 <uart_read_data+0x74>)
 8012906:	f7f6 f93b 	bl	8008b80 <HAL_UART_Receive_IT>
        uart_read_done = 0;
 801290a:	4b0b      	ldr	r3, [pc, #44]	; (8012938 <uart_read_data+0x7c>)
 801290c:	2200      	movs	r2, #0
 801290e:	701a      	strb	r2, [r3, #0]
    {
        /* executed from uart interrupt */
        uart_read_done = 1;
        __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
    }
}
 8012910:	e00a      	b.n	8012928 <uart_read_data+0x6c>
        uart_read_done = 1;
 8012912:	4b09      	ldr	r3, [pc, #36]	; (8012938 <uart_read_data+0x7c>)
 8012914:	2201      	movs	r2, #1
 8012916:	701a      	strb	r2, [r3, #0]
        __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8012918:	4b05      	ldr	r3, [pc, #20]	; (8012930 <uart_read_data+0x74>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	4b04      	ldr	r3, [pc, #16]	; (8012930 <uart_read_data+0x74>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f022 0220 	bic.w	r2, r2, #32
 8012926:	601a      	str	r2, [r3, #0]
}
 8012928:	bf00      	nop
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}
 8012930:	2000134c 	.word	0x2000134c
 8012934:	20001da4 	.word	0x20001da4
 8012938:	200022d8 	.word	0x200022d8

0801293c <uart_read_command>:

//**************************************************************************************************

void uart_read_command(uint8_t *p, uint8_t rxbuffer_len)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	460b      	mov	r3, r1
 8012946:	70fb      	strb	r3, [r7, #3]
    memcpy((uint8_t *)p, (uint8_t *)uartRxBuffer, rxbuffer_len);
 8012948:	78fb      	ldrb	r3, [r7, #3]
 801294a:	461a      	mov	r2, r3
 801294c:	4903      	ldr	r1, [pc, #12]	; (801295c <uart_read_command+0x20>)
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f00e fe10 	bl	8021574 <memcpy>
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	20001da4 	.word	0x20001da4

08012960 <chirp_packet_config>:
 * @param mx_generation_size: number of packets (NUM_ELEMENTS(payload_distribution))
 * @param mx_payload_size: length of payload (MX_PAYLOAD_CONF_SIZE)
 * @return: None
 */
void chirp_packet_config(uint8_t mx_num_nodes, uint8_t mx_generation_size, uint8_t mx_payload_size, Disc_Primitive primitive)
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b085      	sub	sp, #20
 8012964:	af00      	add	r7, sp, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	4611      	mov	r1, r2
 801296c:	461a      	mov	r2, r3
 801296e:	4623      	mov	r3, r4
 8012970:	71fb      	strb	r3, [r7, #7]
 8012972:	4603      	mov	r3, r0
 8012974:	71bb      	strb	r3, [r7, #6]
 8012976:	460b      	mov	r3, r1
 8012978:	717b      	strb	r3, [r7, #5]
 801297a:	4613      	mov	r3, r2
 801297c:	713b      	strb	r3, [r7, #4]
    memset(&chirp_config, 0, offsetof(Chirp_Config, mx_slot_length_in_us));
 801297e:	2238      	movs	r2, #56	; 0x38
 8012980:	2100      	movs	r1, #0
 8012982:	48a2      	ldr	r0, [pc, #648]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012984:	f00e fe01 	bl	802158a <memset>
    chirp_config.primitive = primitive;
 8012988:	4aa0      	ldr	r2, [pc, #640]	; (8012c0c <chirp_packet_config+0x2ac>)
 801298a:	793b      	ldrb	r3, [r7, #4]
 801298c:	f882 30bd 	strb.w	r3, [r2, #189]	; 0xbd
    // chirp_config
    chirp_config.mx_num_nodes = mx_num_nodes;
 8012990:	79fb      	ldrb	r3, [r7, #7]
 8012992:	b29a      	uxth	r2, r3
 8012994:	4b9d      	ldr	r3, [pc, #628]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012996:	801a      	strh	r2, [r3, #0]
    chirp_config.mx_generation_size = mx_generation_size;
 8012998:	79bb      	ldrb	r3, [r7, #6]
 801299a:	b29a      	uxth	r2, r3
 801299c:	4b9b      	ldr	r3, [pc, #620]	; (8012c0c <chirp_packet_config+0x2ac>)
 801299e:	805a      	strh	r2, [r3, #2]
    chirp_config.mx_payload_size = mx_payload_size;
 80129a0:	797b      	ldrb	r3, [r7, #5]
 80129a2:	b29a      	uxth	r2, r3
 80129a4:	4b99      	ldr	r3, [pc, #612]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129a6:	809a      	strh	r2, [r3, #4]

    chirp_config.coding_vector.pos = 0;
 80129a8:	4b98      	ldr	r3, [pc, #608]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	719a      	strb	r2, [r3, #6]
    chirp_config.coding_vector.len = (chirp_config.mx_generation_size + 7) / 8;
 80129ae:	4b97      	ldr	r3, [pc, #604]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129b0:	885b      	ldrh	r3, [r3, #2]
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	3307      	adds	r3, #7
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	da00      	bge.n	80129bc <chirp_packet_config+0x5c>
 80129ba:	3307      	adds	r3, #7
 80129bc:	10db      	asrs	r3, r3, #3
 80129be:	b2da      	uxtb	r2, r3
 80129c0:	4b92      	ldr	r3, [pc, #584]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129c2:	71da      	strb	r2, [r3, #7]
    chirp_config.payload.pos = chirp_config.coding_vector.pos + chirp_config.coding_vector.len;
 80129c4:	4b91      	ldr	r3, [pc, #580]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129c6:	799a      	ldrb	r2, [r3, #6]
 80129c8:	4b90      	ldr	r3, [pc, #576]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129ca:	79db      	ldrb	r3, [r3, #7]
 80129cc:	4413      	add	r3, r2
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	4b8e      	ldr	r3, [pc, #568]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129d2:	721a      	strb	r2, [r3, #8]
    chirp_config.payload.len = chirp_config.mx_payload_size;
 80129d4:	4b8d      	ldr	r3, [pc, #564]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129d6:	889b      	ldrh	r3, [r3, #4]
 80129d8:	b29b      	uxth	r3, r3
 80129da:	b2da      	uxtb	r2, r3
 80129dc:	4b8b      	ldr	r3, [pc, #556]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129de:	725a      	strb	r2, [r3, #9]
    chirp_config.info_vector.pos = chirp_config.payload.pos + chirp_config.payload.len;
 80129e0:	4b8a      	ldr	r3, [pc, #552]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129e2:	7a1a      	ldrb	r2, [r3, #8]
 80129e4:	4b89      	ldr	r3, [pc, #548]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129e6:	7a5b      	ldrb	r3, [r3, #9]
 80129e8:	4413      	add	r3, r2
 80129ea:	b2da      	uxtb	r2, r3
 80129ec:	4b87      	ldr	r3, [pc, #540]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129ee:	729a      	strb	r2, [r3, #10]
    chirp_config.info_vector.len = (chirp_config.mx_generation_size + 7) / 8;
 80129f0:	4b86      	ldr	r3, [pc, #536]	; (8012c0c <chirp_packet_config+0x2ac>)
 80129f2:	885b      	ldrh	r3, [r3, #2]
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	3307      	adds	r3, #7
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	da00      	bge.n	80129fe <chirp_packet_config+0x9e>
 80129fc:	3307      	adds	r3, #7
 80129fe:	10db      	asrs	r3, r3, #3
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	4b82      	ldr	r3, [pc, #520]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a04:	72da      	strb	r2, [r3, #11]
    chirp_config._padding_2.pos = chirp_config.info_vector.pos + chirp_config.info_vector.len;
 8012a06:	4b81      	ldr	r3, [pc, #516]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a08:	7a9a      	ldrb	r2, [r3, #10]
 8012a0a:	4b80      	ldr	r3, [pc, #512]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a0c:	7adb      	ldrb	r3, [r3, #11]
 8012a0e:	4413      	add	r3, r2
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	4b7e      	ldr	r3, [pc, #504]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a14:	731a      	strb	r2, [r3, #12]
    chirp_config._padding_2.len = PADDING_MAX(0,
 8012a16:	4b7d      	ldr	r3, [pc, #500]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a18:	885b      	ldrh	r3, [r3, #2]
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	3307      	adds	r3, #7
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	da00      	bge.n	8012a24 <chirp_packet_config+0xc4>
 8012a22:	3307      	adds	r3, #7
 8012a24:	10db      	asrs	r3, r3, #3
 8012a26:	425b      	negs	r3, r3
 8012a28:	f003 0203 	and.w	r2, r3, #3
 8012a2c:	4b77      	ldr	r3, [pc, #476]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a2e:	889b      	ldrh	r3, [r3, #4]
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	425b      	negs	r3, r3
 8012a34:	f003 0303 	and.w	r3, r3, #3
 8012a38:	441a      	add	r2, r3
 8012a3a:	4b74      	ldr	r3, [pc, #464]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a3c:	885b      	ldrh	r3, [r3, #2]
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	3307      	adds	r3, #7
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	da00      	bge.n	8012a48 <chirp_packet_config+0xe8>
 8012a46:	3307      	adds	r3, #7
 8012a48:	10db      	asrs	r3, r3, #3
 8012a4a:	1ad3      	subs	r3, r2, r3
 8012a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	4b6e      	ldr	r3, [pc, #440]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a54:	735a      	strb	r2, [r3, #13]
                            + PADDING_SIZE(chirp_config.mx_payload_size)
            #if (MX_REQUEST || MX_SMART_SHUTDOWN_MAP)
                            - ((chirp_config.mx_generation_size + 7) / 8)
            #endif
                            );
    chirp_config.rand.pos = chirp_config._padding_2.pos + chirp_config._padding_2.len;
 8012a56:	4b6d      	ldr	r3, [pc, #436]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a58:	7b1a      	ldrb	r2, [r3, #12]
 8012a5a:	4b6c      	ldr	r3, [pc, #432]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a5c:	7b5b      	ldrb	r3, [r3, #13]
 8012a5e:	4413      	add	r3, r2
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	4b6a      	ldr	r3, [pc, #424]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a64:	739a      	strb	r2, [r3, #14]
    chirp_config.rand.len = 1;
 8012a66:	4b69      	ldr	r3, [pc, #420]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a68:	2201      	movs	r2, #1
 8012a6a:	73da      	strb	r2, [r3, #15]
    chirp_config._padding_3.pos = chirp_config.rand.pos + chirp_config.rand.len;
 8012a6c:	4b67      	ldr	r3, [pc, #412]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a6e:	7b9a      	ldrb	r2, [r3, #14]
 8012a70:	4b66      	ldr	r3, [pc, #408]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a72:	7bdb      	ldrb	r3, [r3, #15]
 8012a74:	4413      	add	r3, r2
 8012a76:	b2da      	uxtb	r2, r3
 8012a78:	4b64      	ldr	r3, [pc, #400]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a7a:	741a      	strb	r2, [r3, #16]
    chirp_config._padding_3.len = PADDING_SIZE(
 8012a7c:	4b63      	ldr	r3, [pc, #396]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a7e:	885b      	ldrh	r3, [r3, #2]
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	3307      	adds	r3, #7
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	da00      	bge.n	8012a8a <chirp_packet_config+0x12a>
 8012a88:	3307      	adds	r3, #7
 8012a8a:	10db      	asrs	r3, r3, #3
 8012a8c:	b2da      	uxtb	r2, r3
 8012a8e:	4b5f      	ldr	r3, [pc, #380]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a90:	889b      	ldrh	r3, [r3, #4]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	4413      	add	r3, r2
 8012a98:	b2da      	uxtb	r2, r3
 8012a9a:	4b5c      	ldr	r3, [pc, #368]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012a9c:	885b      	ldrh	r3, [r3, #2]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	3307      	adds	r3, #7
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	da00      	bge.n	8012aa8 <chirp_packet_config+0x148>
 8012aa6:	3307      	adds	r3, #7
 8012aa8:	10db      	asrs	r3, r3, #3
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	4413      	add	r3, r2
 8012aae:	b2da      	uxtb	r2, r3
 8012ab0:	4b56      	ldr	r3, [pc, #344]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012ab2:	885b      	ldrh	r3, [r3, #2]
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	3307      	adds	r3, #7
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	da00      	bge.n	8012abe <chirp_packet_config+0x15e>
 8012abc:	3307      	adds	r3, #7
 8012abe:	10db      	asrs	r3, r3, #3
 8012ac0:	425b      	negs	r3, r3
 8012ac2:	f003 0103 	and.w	r1, r3, #3
 8012ac6:	4b51      	ldr	r3, [pc, #324]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012ac8:	889b      	ldrh	r3, [r3, #4]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	425b      	negs	r3, r3
 8012ace:	f003 0303 	and.w	r3, r3, #3
 8012ad2:	4419      	add	r1, r3
 8012ad4:	4b4d      	ldr	r3, [pc, #308]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012ad6:	885b      	ldrh	r3, [r3, #2]
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	3307      	adds	r3, #7
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	da00      	bge.n	8012ae2 <chirp_packet_config+0x182>
 8012ae0:	3307      	adds	r3, #7
 8012ae2:	10db      	asrs	r3, r3, #3
 8012ae4:	1acb      	subs	r3, r1, r3
 8012ae6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	4413      	add	r3, r2
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	43db      	mvns	r3, r3
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	f003 0303 	and.w	r3, r3, #3
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	4b44      	ldr	r3, [pc, #272]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012afc:	745a      	strb	r2, [r3, #17]
                                    PADDING_SIZE((chirp_config.mx_generation_size + 7) / 8)
                                    + PADDING_SIZE(chirp_config.mx_payload_size)) +
    #endif
#endif
                                1);
    chirp_config.packet_chunk_len = chirp_config.coding_vector.len + chirp_config.payload.len + chirp_config.info_vector.len + chirp_config._padding_2.len + chirp_config.rand.len + chirp_config._padding_3.len;
 8012afe:	4b43      	ldr	r3, [pc, #268]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b00:	79db      	ldrb	r3, [r3, #7]
 8012b02:	b29a      	uxth	r2, r3
 8012b04:	4b41      	ldr	r3, [pc, #260]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b06:	7a5b      	ldrb	r3, [r3, #9]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	4413      	add	r3, r2
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	4b3f      	ldr	r3, [pc, #252]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b10:	7adb      	ldrb	r3, [r3, #11]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	4413      	add	r3, r2
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	4b3c      	ldr	r3, [pc, #240]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b1a:	7b5b      	ldrb	r3, [r3, #13]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	4413      	add	r3, r2
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	4b3a      	ldr	r3, [pc, #232]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b24:	7bdb      	ldrb	r3, [r3, #15]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	4413      	add	r3, r2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	4b37      	ldr	r3, [pc, #220]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b2e:	7c5b      	ldrb	r3, [r3, #17]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	4413      	add	r3, r2
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	4b35      	ldr	r3, [pc, #212]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b38:	829a      	strh	r2, [r3, #20]
    chirp_config.phy_payload_size = offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.coding_vector.len + chirp_config.payload.len + chirp_config.info_vector.len;
 8012b3a:	4b34      	ldr	r3, [pc, #208]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b3c:	79db      	ldrb	r3, [r3, #7]
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	4b32      	ldr	r3, [pc, #200]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b42:	7a5b      	ldrb	r3, [r3, #9]
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	4413      	add	r3, r2
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	4b30      	ldr	r3, [pc, #192]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b4c:	7adb      	ldrb	r3, [r3, #11]
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	4413      	add	r3, r2
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	3308      	adds	r3, #8
 8012b56:	b29a      	uxth	r2, r3
 8012b58:	4b2c      	ldr	r3, [pc, #176]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b5a:	825a      	strh	r2, [r3, #18]
    chirp_config.packet_len = offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.packet_chunk_len;
 8012b5c:	4b2b      	ldr	r3, [pc, #172]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b5e:	8a9b      	ldrh	r3, [r3, #20]
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	3308      	adds	r3, #8
 8012b64:	b29a      	uxth	r2, r3
 8012b66:	4b29      	ldr	r3, [pc, #164]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b68:	82da      	strh	r2, [r3, #22]
    assert_reset(!(chirp_config.packet_len % sizeof(uint_fast_t)));
 8012b6a:	4b28      	ldr	r3, [pc, #160]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b6c:	8adb      	ldrh	r3, [r3, #22]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	f003 0303 	and.w	r3, r3, #3
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00a      	beq.n	8012b90 <chirp_packet_config+0x230>
 8012b7a:	4b24      	ldr	r3, [pc, #144]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b7c:	8adb      	ldrh	r3, [r3, #22]
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	f003 0303 	and.w	r3, r3, #3
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d002      	beq.n	8012b90 <chirp_packet_config+0x230>
  __ASM volatile ("cpsid f" : : : "memory");
 8012b8a:	b671      	cpsid	f
 8012b8c:	f7ff fe44 	bl	8012818 <NVIC_SystemReset>

    chirp_config.matrix_coding_vector_8.pos = 0;
 8012b90:	4b1e      	ldr	r3, [pc, #120]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	761a      	strb	r2, [r3, #24]
    chirp_config.matrix_coding_vector_8.len = chirp_config.coding_vector.len;
 8012b96:	4b1d      	ldr	r3, [pc, #116]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b98:	79da      	ldrb	r2, [r3, #7]
 8012b9a:	4b1c      	ldr	r3, [pc, #112]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012b9c:	765a      	strb	r2, [r3, #25]
    chirp_config.matrix_payload_8.pos = chirp_config.matrix_coding_vector_8.pos + chirp_config.matrix_coding_vector_8.len;
 8012b9e:	4b1b      	ldr	r3, [pc, #108]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012ba0:	7e1a      	ldrb	r2, [r3, #24]
 8012ba2:	4b1a      	ldr	r3, [pc, #104]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012ba4:	7e5b      	ldrb	r3, [r3, #25]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	4b18      	ldr	r3, [pc, #96]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bac:	769a      	strb	r2, [r3, #26]
    chirp_config.matrix_payload_8.len = chirp_config.payload.len;
 8012bae:	4b17      	ldr	r3, [pc, #92]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bb0:	7a5a      	ldrb	r2, [r3, #9]
 8012bb2:	4b16      	ldr	r3, [pc, #88]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bb4:	76da      	strb	r2, [r3, #27]

    chirp_config.matrix_coding_vector.pos = 0;
 8012bb6:	4b15      	ldr	r3, [pc, #84]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bb8:	2200      	movs	r2, #0
 8012bba:	771a      	strb	r2, [r3, #28]
    chirp_config.matrix_coding_vector.len = (chirp_config.mx_generation_size + (sizeof(uint_fast_t) * 8) - 1) / (sizeof(uint_fast_t) * 8);
 8012bbc:	4b13      	ldr	r3, [pc, #76]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bbe:	885b      	ldrh	r3, [r3, #2]
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	331f      	adds	r3, #31
 8012bc4:	095b      	lsrs	r3, r3, #5
 8012bc6:	b2da      	uxtb	r2, r3
 8012bc8:	4b10      	ldr	r3, [pc, #64]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bca:	775a      	strb	r2, [r3, #29]
    chirp_config.matrix_payload.pos = chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len;
 8012bcc:	4b0f      	ldr	r3, [pc, #60]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bce:	7f1a      	ldrb	r2, [r3, #28]
 8012bd0:	4b0e      	ldr	r3, [pc, #56]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bd2:	7f5b      	ldrb	r3, [r3, #29]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	4b0c      	ldr	r3, [pc, #48]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bda:	779a      	strb	r2, [r3, #30]
    chirp_config.matrix_payload.len = (chirp_config.mx_payload_size + sizeof(uint_fast_t) - 1) / sizeof(uint_fast_t);
 8012bdc:	4b0b      	ldr	r3, [pc, #44]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bde:	889b      	ldrh	r3, [r3, #4]
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	3303      	adds	r3, #3
 8012be4:	089b      	lsrs	r3, r3, #2
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	4b08      	ldr	r3, [pc, #32]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bea:	77da      	strb	r2, [r3, #31]

    chirp_config.matrix_chunk_8_len = chirp_config.matrix_coding_vector_8.len + chirp_config.matrix_payload_8.len;
 8012bec:	4b07      	ldr	r3, [pc, #28]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bee:	7e5b      	ldrb	r3, [r3, #25]
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	4b06      	ldr	r3, [pc, #24]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bf4:	7edb      	ldrb	r3, [r3, #27]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	4413      	add	r3, r2
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	4b03      	ldr	r3, [pc, #12]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012bfe:	841a      	strh	r2, [r3, #32]
    chirp_config.matrix_chunk_32_len = chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len;
 8012c00:	4b02      	ldr	r3, [pc, #8]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012c02:	7f5b      	ldrb	r3, [r3, #29]
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	4b01      	ldr	r3, [pc, #4]	; (8012c0c <chirp_packet_config+0x2ac>)
 8012c08:	7fdb      	ldrb	r3, [r3, #31]
 8012c0a:	e001      	b.n	8012c10 <chirp_packet_config+0x2b0>
 8012c0c:	20001430 	.word	0x20001430
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	4413      	add	r3, r2
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	4b4e      	ldr	r3, [pc, #312]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c18:	845a      	strh	r2, [r3, #34]	; 0x22
    chirp_config.matrix_size_32 = chirp_config.matrix_chunk_32_len + 1;
 8012c1a:	4b4d      	ldr	r3, [pc, #308]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	3301      	adds	r3, #1
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	4b4a      	ldr	r3, [pc, #296]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c26:	849a      	strh	r2, [r3, #36]	; 0x24

    chirp_config.history_len_8 = offsetof(Node, row_map_chunk) + chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t);
 8012c28:	4b49      	ldr	r3, [pc, #292]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c2a:	7f5b      	ldrb	r3, [r3, #29]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	4b46      	ldr	r3, [pc, #280]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c36:	84da      	strh	r2, [r3, #38]	; 0x26

    uint8_t hash_factor = (((chirp_config.mx_num_nodes + 7) / 8 + chirp_config.info_vector.len - 1) / chirp_config.info_vector.len);
 8012c38:	4b45      	ldr	r3, [pc, #276]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	3307      	adds	r3, #7
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	da00      	bge.n	8012c46 <chirp_packet_config+0x2e6>
 8012c44:	3307      	adds	r3, #7
 8012c46:	10db      	asrs	r3, r3, #3
 8012c48:	461a      	mov	r2, r3
 8012c4a:	4b41      	ldr	r3, [pc, #260]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c4c:	7adb      	ldrb	r3, [r3, #11]
 8012c4e:	4413      	add	r3, r2
 8012c50:	3b01      	subs	r3, #1
 8012c52:	4a3f      	ldr	r2, [pc, #252]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c54:	7ad2      	ldrb	r2, [r2, #11]
 8012c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c5a:	73fb      	strb	r3, [r7, #15]
    chirp_config.map.pos = 0;
 8012c5c:	4b3c      	ldr	r3, [pc, #240]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    chirp_config.map.len = hash_factor * chirp_config.info_vector.len;
 8012c64:	4b3a      	ldr	r3, [pc, #232]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c66:	7adb      	ldrb	r3, [r3, #11]
 8012c68:	7bfa      	ldrb	r2, [r7, #15]
 8012c6a:	fb12 f303 	smulbb	r3, r2, r3
 8012c6e:	b2da      	uxtb	r2, r3
 8012c70:	4b37      	ldr	r3, [pc, #220]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    chirp_config.hash.pos = chirp_config.map.pos + chirp_config.map.len;
 8012c76:	4b36      	ldr	r3, [pc, #216]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c78:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8012c7c:	4b34      	ldr	r3, [pc, #208]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012c82:	4413      	add	r3, r2
 8012c84:	b2da      	uxtb	r2, r3
 8012c86:	4b32      	ldr	r3, [pc, #200]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    chirp_config.hash.len = chirp_config.info_vector.len;
 8012c8c:	4b30      	ldr	r3, [pc, #192]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c8e:	7ada      	ldrb	r2, [r3, #11]
 8012c90:	4b2f      	ldr	r3, [pc, #188]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    chirp_config.row_all_mask.pos = 0;
 8012c96:	4b2e      	ldr	r3, [pc, #184]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    chirp_config.row_all_mask.len = chirp_config.matrix_coding_vector.len;
 8012c9e:	4b2c      	ldr	r3, [pc, #176]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012ca0:	7f5a      	ldrb	r2, [r3, #29]
 8012ca2:	4b2b      	ldr	r3, [pc, #172]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012ca4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    chirp_config.row_any_mask.pos = chirp_config.row_all_mask.pos + chirp_config.row_all_mask.len;
 8012ca8:	4b29      	ldr	r3, [pc, #164]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012caa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012cae:	4b28      	ldr	r3, [pc, #160]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cb4:	4413      	add	r3, r2
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	4b25      	ldr	r3, [pc, #148]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    chirp_config.row_any_mask.len = chirp_config.matrix_coding_vector.len;
 8012cbe:	4b24      	ldr	r3, [pc, #144]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cc0:	7f5a      	ldrb	r2, [r3, #29]
 8012cc2:	4b23      	ldr	r3, [pc, #140]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    chirp_config.column_all_mask.pos = chirp_config.row_any_mask.pos + chirp_config.row_any_mask.len;
 8012cc8:	4b21      	ldr	r3, [pc, #132]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cca:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8012cce:	4b20      	ldr	r3, [pc, #128]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cd4:	4413      	add	r3, r2
 8012cd6:	b2da      	uxtb	r2, r3
 8012cd8:	4b1d      	ldr	r3, [pc, #116]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    chirp_config.column_all_mask.len = chirp_config.matrix_coding_vector.len;
 8012cde:	4b1c      	ldr	r3, [pc, #112]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012ce0:	7f5a      	ldrb	r2, [r3, #29]
 8012ce2:	4b1b      	ldr	r3, [pc, #108]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012ce4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    chirp_config.column_any_mask.pos = chirp_config.column_all_mask.pos + chirp_config.column_all_mask.len;
 8012ce8:	4b19      	ldr	r3, [pc, #100]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012cee:	4b18      	ldr	r3, [pc, #96]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012cf4:	4413      	add	r3, r2
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	4b15      	ldr	r3, [pc, #84]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012cfa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    chirp_config.column_any_mask.len = chirp_config.matrix_coding_vector.len;
 8012cfe:	4b14      	ldr	r3, [pc, #80]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d00:	7f5a      	ldrb	r2, [r3, #29]
 8012d02:	4b13      	ldr	r3, [pc, #76]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d04:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    chirp_config.my_row_mask.pos = chirp_config.column_any_mask.pos + chirp_config.column_any_mask.len;
 8012d08:	4b11      	ldr	r3, [pc, #68]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d0a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8012d0e:	4b10      	ldr	r3, [pc, #64]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d10:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012d14:	4413      	add	r3, r2
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	4b0d      	ldr	r3, [pc, #52]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    chirp_config.my_row_mask.len = chirp_config.matrix_coding_vector.len;
 8012d1e:	4b0c      	ldr	r3, [pc, #48]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d20:	7f5a      	ldrb	r2, [r3, #29]
 8012d22:	4b0b      	ldr	r3, [pc, #44]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    chirp_config.my_column_mask.pos = chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len;
 8012d28:	4b09      	ldr	r3, [pc, #36]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d2a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012d2e:	4b08      	ldr	r3, [pc, #32]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012d34:	4413      	add	r3, r2
 8012d36:	b2da      	uxtb	r2, r3
 8012d38:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    chirp_config.my_column_mask.len = chirp_config.matrix_coding_vector.len;
 8012d3e:	4b04      	ldr	r3, [pc, #16]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d40:	7f5a      	ldrb	r2, [r3, #29]
 8012d42:	4b03      	ldr	r3, [pc, #12]	; (8012d50 <chirp_packet_config+0x3f0>)
 8012d44:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8012d48:	bf00      	nop
 8012d4a:	3714      	adds	r7, #20
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd90      	pop	{r4, r7, pc}
 8012d50:	20001430 	.word	0x20001430

08012d54 <chirp_slot_config>:
/* slot length is mx_slot_length_in_us microseconds,
needed slot number is mx_round_length,
round is last for mx_period_time_us seconds */
void chirp_slot_config(uint32_t mx_slot_length_in_us, uint16_t mx_round_length, uint32_t period_time_us_plus)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	607a      	str	r2, [r7, #4]
 8012d60:	817b      	strh	r3, [r7, #10]
    uint32_t mx_period_time_us;
    memset(&chirp_config + offsetof(Chirp_Config, mx_slot_length_in_us), 0, offsetof(Chirp_Config, lora_sf) - offsetof(Chirp_Config, mx_slot_length_in_us));
 8012d62:	4b2d      	ldr	r3, [pc, #180]	; (8012e18 <chirp_slot_config+0xc4>)
 8012d64:	220c      	movs	r2, #12
 8012d66:	2100      	movs	r1, #0
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f00e fc0e 	bl	802158a <memset>
    chirp_config.mx_slot_length_in_us = mx_slot_length_in_us;
 8012d6e:	4a2b      	ldr	r2, [pc, #172]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	6393      	str	r3, [r2, #56]	; 0x38
    #if MX_LBT_ACCESS
    chirp_config.mx_slot_length_in_us += chirp_config.lbt_detect_duration_us * CHANNEL_ALTER;
 8012d74:	4b29      	ldr	r3, [pc, #164]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d78:	4b28      	ldr	r3, [pc, #160]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	4413      	add	r3, r2
 8012d80:	4a26      	ldr	r2, [pc, #152]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d82:	6393      	str	r3, [r2, #56]	; 0x38
    #endif
    chirp_config.mx_slot_length = GPI_TICK_US_TO_FAST2(chirp_config.mx_slot_length_in_us);
 8012d84:	4b25      	ldr	r3, [pc, #148]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d88:	4a25      	ldr	r2, [pc, #148]	; (8012e20 <chirp_slot_config+0xcc>)
 8012d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8012d8e:	0c9b      	lsrs	r3, r3, #18
 8012d90:	4a24      	ldr	r2, [pc, #144]	; (8012e24 <chirp_slot_config+0xd0>)
 8012d92:	fb02 f103 	mul.w	r1, r2, r3
 8012d96:	4b21      	ldr	r3, [pc, #132]	; (8012e1c <chirp_slot_config+0xc8>)
 8012d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d9a:	4a23      	ldr	r2, [pc, #140]	; (8012e28 <chirp_slot_config+0xd4>)
 8012d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8012da0:	099a      	lsrs	r2, r3, #6
 8012da2:	4b21      	ldr	r3, [pc, #132]	; (8012e28 <chirp_slot_config+0xd4>)
 8012da4:	fba3 0302 	umull	r0, r3, r3, r2
 8012da8:	099b      	lsrs	r3, r3, #6
 8012daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012dae:	fb00 f303 	mul.w	r3, r0, r3
 8012db2:	1ad3      	subs	r3, r2, r3
 8012db4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8012db8:	fb02 f303 	mul.w	r3, r2, r3
 8012dbc:	4419      	add	r1, r3
 8012dbe:	4b17      	ldr	r3, [pc, #92]	; (8012e1c <chirp_slot_config+0xc8>)
 8012dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dc2:	4b19      	ldr	r3, [pc, #100]	; (8012e28 <chirp_slot_config+0xd4>)
 8012dc4:	fba3 0302 	umull	r0, r3, r3, r2
 8012dc8:	099b      	lsrs	r3, r3, #6
 8012dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012dce:	fb00 f303 	mul.w	r3, r0, r3
 8012dd2:	1ad3      	subs	r3, r2, r3
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	440b      	add	r3, r1
 8012dd8:	4a10      	ldr	r2, [pc, #64]	; (8012e1c <chirp_slot_config+0xc8>)
 8012dda:	63d3      	str	r3, [r2, #60]	; 0x3c
    chirp_config.mx_round_length = mx_round_length;
 8012ddc:	4b0f      	ldr	r3, [pc, #60]	; (8012e1c <chirp_slot_config+0xc8>)
 8012dde:	897a      	ldrh	r2, [r7, #10]
 8012de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mx_period_time_us =  chirp_config.mx_slot_length_in_us * mx_round_length + period_time_us_plus;
 8012de4:	4b0d      	ldr	r3, [pc, #52]	; (8012e1c <chirp_slot_config+0xc8>)
 8012de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012de8:	897a      	ldrh	r2, [r7, #10]
 8012dea:	fb02 f303 	mul.w	r3, r2, r3
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4413      	add	r3, r2
 8012df2:	617b      	str	r3, [r7, #20]
    chirp_config.mx_period_time_s = (mx_period_time_us + 1000000 - 1) / 1000000;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8012dfa:	f203 233f 	addw	r3, r3, #575	; 0x23f
 8012dfe:	4a08      	ldr	r2, [pc, #32]	; (8012e20 <chirp_slot_config+0xcc>)
 8012e00:	fba2 2303 	umull	r2, r3, r2, r3
 8012e04:	0c9b      	lsrs	r3, r3, #18
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	4b04      	ldr	r3, [pc, #16]	; (8012e1c <chirp_slot_config+0xc8>)
 8012e0a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8012e0e:	bf00      	nop
 8012e10:	3718      	adds	r7, #24
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	20003dc0 	.word	0x20003dc0
 8012e1c:	20001430 	.word	0x20001430
 8012e20:	431bde83 	.word	0x431bde83
 8012e24:	00f42400 	.word	0x00f42400
 8012e28:	10624dd3 	.word	0x10624dd3

08012e2c <chirp_radio_config>:

void chirp_radio_config(uint8_t lora_spreading_factor, uint8_t lora_bandwidth, uint8_t lora_codingrate, uint8_t lora_preamble_length, int8_t tx_output_power, uint32_t lora_frequency)
{
 8012e2c:	b590      	push	{r4, r7, lr}
 8012e2e:	b085      	sub	sp, #20
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	4604      	mov	r4, r0
 8012e34:	4608      	mov	r0, r1
 8012e36:	4611      	mov	r1, r2
 8012e38:	461a      	mov	r2, r3
 8012e3a:	4623      	mov	r3, r4
 8012e3c:	71fb      	strb	r3, [r7, #7]
 8012e3e:	4603      	mov	r3, r0
 8012e40:	71bb      	strb	r3, [r7, #6]
 8012e42:	460b      	mov	r3, r1
 8012e44:	717b      	strb	r3, [r7, #5]
 8012e46:	4613      	mov	r3, r2
 8012e48:	713b      	strb	r3, [r7, #4]
    memset(&chirp_config + offsetof(Chirp_Config, lora_sf), 0, sizeof(chirp_config) - offsetof(Chirp_Config, lora_sf));
 8012e4a:	4b25      	ldr	r3, [pc, #148]	; (8012ee0 <chirp_radio_config+0xb4>)
 8012e4c:	227a      	movs	r2, #122	; 0x7a
 8012e4e:	2100      	movs	r1, #0
 8012e50:	4618      	mov	r0, r3
 8012e52:	f00e fb9a 	bl	802158a <memset>
    chirp_config.lora_sf = lora_spreading_factor;
 8012e56:	4a23      	ldr	r2, [pc, #140]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012e58:	79fb      	ldrb	r3, [r7, #7]
 8012e5a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
    chirp_config.lora_bw = lora_bandwidth;
 8012e5e:	4a21      	ldr	r2, [pc, #132]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012e60:	79bb      	ldrb	r3, [r7, #6]
 8012e62:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    chirp_config.lora_cr = lora_codingrate;
 8012e66:	4a1f      	ldr	r2, [pc, #124]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012e68:	797b      	ldrb	r3, [r7, #5]
 8012e6a:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    chirp_config.lora_plen = lora_preamble_length;
 8012e6e:	4a1d      	ldr	r2, [pc, #116]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012e70:	793b      	ldrb	r3, [r7, #4]
 8012e72:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
    chirp_config.lora_tx_pwr = tx_output_power;
 8012e76:	4a1b      	ldr	r2, [pc, #108]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e7c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    chirp_config.lora_freq = lora_frequency * 1e3; /* kHz -> Hz */
 8012e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e82:	f7ed fb49 	bl	8000518 <__aeabi_ui2d>
 8012e86:	f04f 0200 	mov.w	r2, #0
 8012e8a:	4b17      	ldr	r3, [pc, #92]	; (8012ee8 <chirp_radio_config+0xbc>)
 8012e8c:	f7ed fbbe 	bl	800060c <__aeabi_dmul>
 8012e90:	4603      	mov	r3, r0
 8012e92:	460c      	mov	r4, r1
 8012e94:	4618      	mov	r0, r3
 8012e96:	4621      	mov	r1, r4
 8012e98:	f7ed fe90 	bl	8000bbc <__aeabi_d2uiz>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	4b11      	ldr	r3, [pc, #68]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012ea0:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
    gpi_radio_init();
 8012ea4:	f7fa fa12 	bl	800d2cc <gpi_radio_init>
	#if MX_LBT_ACCESS
    uint32_t symbol_time_us = SX1276GetSymbolTime(chirp_config.lora_sf, chirp_config.lora_bw);
 8012ea8:	4b0e      	ldr	r3, [pc, #56]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012eaa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012eae:	4b0d      	ldr	r3, [pc, #52]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4610      	mov	r0, r2
 8012eb8:	f7fa f952 	bl	800d160 <SX1276GetSymbolTime>
 8012ebc:	60f8      	str	r0, [r7, #12]
    chirp_config.lbt_detect_duration_us = (6 * symbol_time_us >= LBT_DELAY_IN_US) ? 6 * symbol_time_us : LBT_DELAY_IN_US;
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	005b      	lsls	r3, r3, #1
 8012ec4:	4413      	add	r3, r2
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	461a      	mov	r2, r3
 8012eca:	f242 7310 	movw	r3, #10000	; 0x2710
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	bf38      	it	cc
 8012ed2:	4613      	movcc	r3, r2
 8012ed4:	4a03      	ldr	r2, [pc, #12]	; (8012ee4 <chirp_radio_config+0xb8>)
 8012ed6:	65d3      	str	r3, [r2, #92]	; 0x5c
    #endif
}
 8012ed8:	bf00      	nop
 8012eda:	3714      	adds	r7, #20
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd90      	pop	{r4, r7, pc}
 8012ee0:	200046a8 	.word	0x200046a8
 8012ee4:	20001430 	.word	0x20001430
 8012ee8:	408f4000 	.word	0x408f4000

08012eec <chirp_payload_distribution>:
 * @description: To allocate payload among nodes according to the type of mixer (dissemination / collection)
 * @param mx_task: MX_DISSEMINATE / MX_COLLECT
 * @return: None
 */
void chirp_payload_distribution(Mixer_Task mx_task)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    chirp_config.disem_copy = 0;
 8012ef6:	4b33      	ldr	r3, [pc, #204]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    if ((mx_task == MX_DISSEMINATE))
 8012efe:	79fb      	ldrb	r3, [r7, #7]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d11d      	bne.n	8012f40 <chirp_payload_distribution+0x54>
    {
        payload_distribution = (uint8_t *)malloc(chirp_config.mx_generation_size);
 8012f04:	4b2f      	ldr	r3, [pc, #188]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f06:	885b      	ldrh	r3, [r3, #2]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f00e fb22 	bl	8021554 <malloc>
 8012f10:	4603      	mov	r3, r0
 8012f12:	461a      	mov	r2, r3
 8012f14:	4b2c      	ldr	r3, [pc, #176]	; (8012fc8 <chirp_payload_distribution+0xdc>)
 8012f16:	601a      	str	r2, [r3, #0]
        /* Only the initiator has packets */
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8012f18:	2300      	movs	r3, #0
 8012f1a:	73fb      	strb	r3, [r7, #15]
 8012f1c:	e008      	b.n	8012f30 <chirp_payload_distribution+0x44>
            payload_distribution[i] = 0;
 8012f1e:	4b2a      	ldr	r3, [pc, #168]	; (8012fc8 <chirp_payload_distribution+0xdc>)
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	7bfb      	ldrb	r3, [r7, #15]
 8012f24:	4413      	add	r3, r2
 8012f26:	2200      	movs	r2, #0
 8012f28:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8012f2a:	7bfb      	ldrb	r3, [r7, #15]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	73fb      	strb	r3, [r7, #15]
 8012f30:	7bfb      	ldrb	r3, [r7, #15]
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	4b23      	ldr	r3, [pc, #140]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f36:	885b      	ldrh	r3, [r3, #2]
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d3ef      	bcc.n	8012f1e <chirp_payload_distribution+0x32>
            payload_distribution[i] = i;

        if ((mx_task == MX_ARRANGE) || (mx_task == CHIRP_START) || (mx_task == CHIRP_CONNECTIVITY))
            chirp_config.disem_copy = 1;
    }
}
 8012f3e:	e03c      	b.n	8012fba <chirp_payload_distribution+0xce>
        assert_reset((chirp_config.mx_num_nodes == chirp_config.mx_generation_size));
 8012f40:	4b20      	ldr	r3, [pc, #128]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	4b1f      	ldr	r3, [pc, #124]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f48:	885b      	ldrh	r3, [r3, #2]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d00a      	beq.n	8012f66 <chirp_payload_distribution+0x7a>
 8012f50:	4b1c      	ldr	r3, [pc, #112]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f52:	881b      	ldrh	r3, [r3, #0]
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	4b1b      	ldr	r3, [pc, #108]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f58:	885b      	ldrh	r3, [r3, #2]
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d002      	beq.n	8012f66 <chirp_payload_distribution+0x7a>
 8012f60:	b671      	cpsid	f
 8012f62:	f7ff fc59 	bl	8012818 <NVIC_SystemReset>
        payload_distribution = (uint8_t *)malloc(chirp_config.mx_num_nodes);
 8012f66:	4b17      	ldr	r3, [pc, #92]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f00e faf1 	bl	8021554 <malloc>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
 8012f76:	4b14      	ldr	r3, [pc, #80]	; (8012fc8 <chirp_payload_distribution+0xdc>)
 8012f78:	601a      	str	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	73fb      	strb	r3, [r7, #15]
 8012f7e:	e008      	b.n	8012f92 <chirp_payload_distribution+0xa6>
            payload_distribution[i] = i;
 8012f80:	4b11      	ldr	r3, [pc, #68]	; (8012fc8 <chirp_payload_distribution+0xdc>)
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	7bfb      	ldrb	r3, [r7, #15]
 8012f86:	4413      	add	r3, r2
 8012f88:	7bfa      	ldrb	r2, [r7, #15]
 8012f8a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8012f8c:	7bfb      	ldrb	r3, [r7, #15]
 8012f8e:	3301      	adds	r3, #1
 8012f90:	73fb      	strb	r3, [r7, #15]
 8012f92:	7bfb      	ldrb	r3, [r7, #15]
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	4b0b      	ldr	r3, [pc, #44]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012f98:	881b      	ldrh	r3, [r3, #0]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d3ef      	bcc.n	8012f80 <chirp_payload_distribution+0x94>
        if ((mx_task == MX_ARRANGE) || (mx_task == CHIRP_START) || (mx_task == CHIRP_CONNECTIVITY))
 8012fa0:	79fb      	ldrb	r3, [r7, #7]
 8012fa2:	2b06      	cmp	r3, #6
 8012fa4:	d005      	beq.n	8012fb2 <chirp_payload_distribution+0xc6>
 8012fa6:	79fb      	ldrb	r3, [r7, #7]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d002      	beq.n	8012fb2 <chirp_payload_distribution+0xc6>
 8012fac:	79fb      	ldrb	r3, [r7, #7]
 8012fae:	2b03      	cmp	r3, #3
 8012fb0:	d103      	bne.n	8012fba <chirp_payload_distribution+0xce>
            chirp_config.disem_copy = 1;
 8012fb2:	4b04      	ldr	r3, [pc, #16]	; (8012fc4 <chirp_payload_distribution+0xd8>)
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 8012fba:	bf00      	nop
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	20001430 	.word	0x20001430
 8012fc8:	20000cc8 	.word	0x20000cc8

08012fcc <chirp_write>:

void chirp_write(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 8012fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd0:	b098      	sub	sp, #96	; 0x60
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	6039      	str	r1, [r7, #0]
 8012fd8:	71fb      	strb	r3, [r7, #7]
 8012fda:	466b      	mov	r3, sp
 8012fdc:	4698      	mov	r8, r3
    PRINTF("chirp_write:%d, %d\n", node_id, chirp_outl->round_max);
 8012fde:	79f9      	ldrb	r1, [r7, #7]
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	461a      	mov	r2, r3
 8012fea:	48a9      	ldr	r0, [pc, #676]	; (8013290 <chirp_write+0x2c4>)
 8012fec:	f00f f8da 	bl	80221a4 <iprintf>

	uint8_t i;
    uint16_t k = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t flash_addr;

    if ((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d007      	beq.n	801300e <chirp_write+0x42>
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	2b02      	cmp	r3, #2
 8013004:	d003      	beq.n	801300e <chirp_write+0x42>
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	2b04      	cmp	r3, #4
 801300c:	d123      	bne.n	8013056 <chirp_write+0x8a>
    {
        assert_reset(!(chirp_outl->file_chunk_len % sizeof(uint64_t)));
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013012:	b29b      	uxth	r3, r3
 8013014:	f003 0307 	and.w	r3, r3, #7
 8013018:	b29b      	uxth	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d00a      	beq.n	8013034 <chirp_write+0x68>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013022:	b29b      	uxth	r3, r3
 8013024:	f003 0307 	and.w	r3, r3, #7
 8013028:	b29b      	uxth	r3, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	d002      	beq.n	8013034 <chirp_write+0x68>
 801302e:	b671      	cpsid	f
 8013030:	f7ff fbf2 	bl	8012818 <NVIC_SystemReset>
        assert_reset(!((chirp_outl->payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801303a:	f003 0307 	and.w	r3, r3, #7
 801303e:	2b00      	cmp	r3, #0
 8013040:	d009      	beq.n	8013056 <chirp_write+0x8a>
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013048:	f003 0307 	and.w	r3, r3, #7
 801304c:	2b00      	cmp	r3, #0
 801304e:	d002      	beq.n	8013056 <chirp_write+0x8a>
 8013050:	b671      	cpsid	f
 8013052:	f7ff fbe1 	bl	8012818 <NVIC_SystemReset>
    }
    /* file data is read from flash on the other bank */
    uint32_t flash_data[chirp_outl->file_chunk_len / sizeof(uint32_t)];
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801305a:	b29b      	uxth	r3, r3
 801305c:	089b      	lsrs	r3, r3, #2
 801305e:	b29b      	uxth	r3, r3
 8013060:	461d      	mov	r5, r3
 8013062:	462b      	mov	r3, r5
 8013064:	3b01      	subs	r3, #1
 8013066:	653b      	str	r3, [r7, #80]	; 0x50
 8013068:	4629      	mov	r1, r5
 801306a:	f04f 0200 	mov.w	r2, #0
 801306e:	f04f 0300 	mov.w	r3, #0
 8013072:	f04f 0400 	mov.w	r4, #0
 8013076:	0154      	lsls	r4, r2, #5
 8013078:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801307c:	014b      	lsls	r3, r1, #5
 801307e:	4629      	mov	r1, r5
 8013080:	f04f 0200 	mov.w	r2, #0
 8013084:	f04f 0300 	mov.w	r3, #0
 8013088:	f04f 0400 	mov.w	r4, #0
 801308c:	0154      	lsls	r4, r2, #5
 801308e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013092:	014b      	lsls	r3, r1, #5
 8013094:	00ab      	lsls	r3, r5, #2
 8013096:	3303      	adds	r3, #3
 8013098:	3307      	adds	r3, #7
 801309a:	08db      	lsrs	r3, r3, #3
 801309c:	00db      	lsls	r3, r3, #3
 801309e:	ebad 0d03 	sub.w	sp, sp, r3
 80130a2:	466b      	mov	r3, sp
 80130a4:	3303      	adds	r3, #3
 80130a6:	089b      	lsrs	r3, r3, #2
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t file_data[chirp_outl->payload_len];
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	f893 6039 	ldrb.w	r6, [r3, #57]	; 0x39
 80130b2:	4633      	mov	r3, r6
 80130b4:	3b01      	subs	r3, #1
 80130b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80130b8:	b2f1      	uxtb	r1, r6
 80130ba:	f04f 0200 	mov.w	r2, #0
 80130be:	f04f 0300 	mov.w	r3, #0
 80130c2:	f04f 0400 	mov.w	r4, #0
 80130c6:	00d4      	lsls	r4, r2, #3
 80130c8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80130cc:	00cb      	lsls	r3, r1, #3
 80130ce:	b2f1      	uxtb	r1, r6
 80130d0:	f04f 0200 	mov.w	r2, #0
 80130d4:	f04f 0300 	mov.w	r3, #0
 80130d8:	f04f 0400 	mov.w	r4, #0
 80130dc:	00d4      	lsls	r4, r2, #3
 80130de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80130e2:	00cb      	lsls	r3, r1, #3
 80130e4:	4633      	mov	r3, r6
 80130e6:	3307      	adds	r3, #7
 80130e8:	08db      	lsrs	r3, r3, #3
 80130ea:	00db      	lsls	r3, r3, #3
 80130ec:	ebad 0d03 	sub.w	sp, sp, r3
 80130f0:	466b      	mov	r3, sp
 80130f2:	3300      	adds	r3, #0
 80130f4:	647b      	str	r3, [r7, #68]	; 0x44
    memset(flash_data, 0, sizeof(flash_data));
 80130f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130f8:	00aa      	lsls	r2, r5, #2
 80130fa:	2100      	movs	r1, #0
 80130fc:	4618      	mov	r0, r3
 80130fe:	f00e fa44 	bl	802158a <memset>
    memset(file_data, 0, sizeof(file_data));
 8013102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013104:	4632      	mov	r2, r6
 8013106:	2100      	movs	r1, #0
 8013108:	4618      	mov	r0, r3
 801310a:	f00e fa3e 	bl	802158a <memset>
    memset(data, 0, DATA_HEADER_LENGTH);
 801310e:	2208      	movs	r2, #8
 8013110:	2100      	movs	r1, #0
 8013112:	4860      	ldr	r0, [pc, #384]	; (8013294 <chirp_write+0x2c8>)
 8013114:	f00e fa39 	bl	802158a <memset>

    /* MX_DISSEMINATE / MX_COLLECT / CHIRP_TOPO: read file data from flash */
    if (((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO)))
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	2b01      	cmp	r3, #1
 801311e:	d008      	beq.n	8013132 <chirp_write+0x166>
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2b02      	cmp	r3, #2
 8013126:	d004      	beq.n	8013132 <chirp_write+0x166>
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	2b04      	cmp	r3, #4
 801312e:	f040 80cc 	bne.w	80132ca <chirp_write+0x2fe>
    {
        memset(flash_data, 0, sizeof(flash_data));
 8013132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013134:	00aa      	lsls	r2, r5, #2
 8013136:	2100      	movs	r1, #0
 8013138:	4618      	mov	r0, r3
 801313a:	f00e fa26 	bl	802158a <memset>
        if ((chirp_outl->disem_file_index) && (chirp_outl->task == MX_DISSEMINATE))
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013144:	b29b      	uxth	r3, r3
 8013146:	2b00      	cmp	r3, #0
 8013148:	d057      	beq.n	80131fa <chirp_write+0x22e>
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	2b01      	cmp	r3, #1
 8013150:	d153      	bne.n	80131fa <chirp_write+0x22e>
        {
            if ((!chirp_outl->patch_update))
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013158:	2b00      	cmp	r3, #0
 801315a:	d110      	bne.n	801317e <chirp_write+0x1b2>
                flash_addr = FLASH_START_BANK2 + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013160:	b29b      	uxth	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801316a:	b29b      	uxth	r3, r3
 801316c:	3b01      	subs	r3, #1
 801316e:	fb03 f302 	mul.w	r3, r3, r2
 8013172:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8013176:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 801317a:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 801317c:	e082      	b.n	8013284 <chirp_write+0x2b8>
            else if ((chirp_outl->patch_update) && (!chirp_outl->patch_bank))
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013184:	2b00      	cmp	r3, #0
 8013186:	d018      	beq.n	80131ba <chirp_write+0x1ee>
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801318e:	2b00      	cmp	r3, #0
 8013190:	d113      	bne.n	80131ba <chirp_write+0x1ee>
                flash_addr = FLASH_START_BANK1 + chirp_outl->patch_page * FLASH_PAGE + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013198:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801319c:	02db      	lsls	r3, r3, #11
 801319e:	683a      	ldr	r2, [r7, #0]
 80131a0:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80131a2:	b292      	uxth	r2, r2
 80131a4:	4611      	mov	r1, r2
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80131ac:	b292      	uxth	r2, r2
 80131ae:	3a01      	subs	r2, #1
 80131b0:	fb02 f201 	mul.w	r2, r2, r1
 80131b4:	4413      	add	r3, r2
 80131b6:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 80131b8:	e064      	b.n	8013284 <chirp_write+0x2b8>
            else if ((chirp_outl->patch_update) && (chirp_outl->patch_bank))
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d05f      	beq.n	8013284 <chirp_write+0x2b8>
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d05a      	beq.n	8013284 <chirp_write+0x2b8>
                flash_addr = FLASH_START_BANK2 + chirp_outl->patch_page * FLASH_PAGE + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80131d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80131d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131dc:	02db      	lsls	r3, r3, #11
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80131e2:	b292      	uxth	r2, r2
 80131e4:	4611      	mov	r1, r2
 80131e6:	683a      	ldr	r2, [r7, #0]
 80131e8:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80131ec:	b292      	uxth	r2, r2
 80131ee:	3a01      	subs	r2, #1
 80131f0:	fb02 f201 	mul.w	r2, r2, r1
 80131f4:	4413      	add	r3, r2
 80131f6:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 80131f8:	e044      	b.n	8013284 <chirp_write+0x2b8>
        }
        else if (((chirp_outl->round > chirp_outl->round_setup) && (chirp_outl->round <= chirp_outl->round_max)))
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013200:	b29a      	uxth	r2, r3
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	795b      	ldrb	r3, [r3, #5]
 8013206:	b29b      	uxth	r3, r3
 8013208:	429a      	cmp	r2, r3
 801320a:	d93c      	bls.n	8013286 <chirp_write+0x2ba>
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013212:	b29a      	uxth	r2, r3
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801321a:	b29b      	uxth	r3, r3
 801321c:	429a      	cmp	r2, r3
 801321e:	d832      	bhi.n	8013286 <chirp_write+0x2ba>
        {
            if (chirp_outl->task == MX_COLLECT)
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	2b02      	cmp	r3, #2
 8013226:	d114      	bne.n	8013252 <chirp_write+0x286>
                flash_addr = chirp_outl->collect_addr_start + chirp_outl->file_chunk_len * (chirp_outl->round - chirp_outl->round_setup - 1);
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8013232:	b292      	uxth	r2, r2
 8013234:	4611      	mov	r1, r2
 8013236:	683a      	ldr	r2, [r7, #0]
 8013238:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 801323c:	b292      	uxth	r2, r2
 801323e:	4610      	mov	r0, r2
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	7952      	ldrb	r2, [r2, #5]
 8013244:	1a82      	subs	r2, r0, r2
 8013246:	3a01      	subs	r2, #1
 8013248:	fb02 f201 	mul.w	r2, r2, r1
 801324c:	4413      	add	r3, r2
 801324e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013250:	e019      	b.n	8013286 <chirp_write+0x2ba>
            else if (chirp_outl->task == CHIRP_TOPO)
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2b04      	cmp	r3, #4
 8013258:	d115      	bne.n	8013286 <chirp_write+0x2ba>
                flash_addr = TOPO_FLASH_ADDRESS + chirp_outl->file_chunk_len * (chirp_outl->round - chirp_outl->round_setup - 1);
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801325e:	b29b      	uxth	r3, r3
 8013260:	461a      	mov	r2, r3
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013268:	b29b      	uxth	r3, r3
 801326a:	4619      	mov	r1, r3
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	795b      	ldrb	r3, [r3, #5]
 8013270:	1acb      	subs	r3, r1, r3
 8013272:	3b01      	subs	r3, #1
 8013274:	fb03 f302 	mul.w	r3, r3, r2
 8013278:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801327c:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8013280:	65bb      	str	r3, [r7, #88]	; 0x58
 8013282:	e000      	b.n	8013286 <chirp_write+0x2ba>
            if ((!chirp_outl->patch_update))
 8013284:	bf00      	nop
        }

        uint16_t n;
        for (n = 0; n < chirp_outl->file_chunk_len / sizeof(uint32_t); n++)
 8013286:	2300      	movs	r3, #0
 8013288:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801328c:	e014      	b.n	80132b8 <chirp_write+0x2ec>
 801328e:	bf00      	nop
 8013290:	08025424 	.word	0x08025424
 8013294:	20000464 	.word	0x20000464
            flash_data[n] = *(__IO uint32_t*)(flash_addr + n * sizeof(uint32_t));
 8013298:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801329c:	009a      	lsls	r2, r3, #2
 801329e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80132a0:	4413      	add	r3, r2
 80132a2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80132a6:	6819      	ldr	r1, [r3, #0]
 80132a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (n = 0; n < chirp_outl->file_chunk_len / sizeof(uint32_t); n++)
 80132ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132b2:	3301      	adds	r3, #1
 80132b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80132bc:	b29b      	uxth	r3, r3
 80132be:	089b      	lsrs	r3, r3, #2
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d3e6      	bcc.n	8013298 <chirp_write+0x2cc>
    }

    /* All: config packet header including node_id, round No., current task, and proper content corresponded to task */
    data[0] = node_id;
 80132ca:	4a93      	ldr	r2, [pc, #588]	; (8013518 <chirp_write+0x54c>)
 80132cc:	79fb      	ldrb	r3, [r7, #7]
 80132ce:	7013      	strb	r3, [r2, #0]
    data[1] = chirp_outl->round >> 8;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	0a1b      	lsrs	r3, r3, #8
 80132da:	b29b      	uxth	r3, r3
 80132dc:	b2da      	uxtb	r2, r3
 80132de:	4b8e      	ldr	r3, [pc, #568]	; (8013518 <chirp_write+0x54c>)
 80132e0:	705a      	strb	r2, [r3, #1]
    data[2] = chirp_outl->round;
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	b2da      	uxtb	r2, r3
 80132ec:	4b8a      	ldr	r3, [pc, #552]	; (8013518 <chirp_write+0x54c>)
 80132ee:	709a      	strb	r2, [r3, #2]
    assert_reset(2 < ROUND_HEADER_LENGTH);
    /* write task index */
    data[DATA_HEADER_LENGTH - 1] = chirp_outl->task;
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	781a      	ldrb	r2, [r3, #0]
 80132f4:	4b88      	ldr	r3, [pc, #544]	; (8013518 <chirp_write+0x54c>)
 80132f6:	71da      	strb	r2, [r3, #7]
    k = ROUND_HEADER_LENGTH;
 80132f8:	2304      	movs	r3, #4
 80132fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    switch (chirp_outl->task)
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	2b06      	cmp	r3, #6
 8013304:	f200 83e0 	bhi.w	8013ac8 <chirp_write+0xafc>
 8013308:	a201      	add	r2, pc, #4	; (adr r2, 8013310 <chirp_write+0x344>)
 801330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801330e:	bf00      	nop
 8013310:	0801332d 	.word	0x0801332d
 8013314:	0801351d 	.word	0x0801351d
 8013318:	0801351d 	.word	0x0801351d
 801331c:	0801385d 	.word	0x0801385d
 8013320:	0801351d 	.word	0x0801351d
 8013324:	080138fb 	.word	0x080138fb
 8013328:	08013955 	.word	0x08013955
    {
        case CHIRP_START:
        {
            data[k++] = chirp_outl->round_max >> 8;
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013332:	b29b      	uxth	r3, r3
 8013334:	0a1b      	lsrs	r3, r3, #8
 8013336:	b299      	uxth	r1, r3
 8013338:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801333c:	1c5a      	adds	r2, r3, #1
 801333e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013342:	461a      	mov	r2, r3
 8013344:	b2c9      	uxtb	r1, r1
 8013346:	4b74      	ldr	r3, [pc, #464]	; (8013518 <chirp_write+0x54c>)
 8013348:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->round_max;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013350:	b299      	uxth	r1, r3
 8013352:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013356:	1c5a      	adds	r2, r3, #1
 8013358:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801335c:	461a      	mov	r2, r3
 801335e:	b2c9      	uxtb	r1, r1
 8013360:	4b6d      	ldr	r3, [pc, #436]	; (8013518 <chirp_write+0x54c>)
 8013362:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013366:	496c      	ldr	r1, [pc, #432]	; (8013518 <chirp_write+0x54c>)
 8013368:	461a      	mov	r2, r3
 801336a:	460b      	mov	r3, r1
 801336c:	cb03      	ldmia	r3!, {r0, r1}
 801336e:	6010      	str	r0, [r2, #0]
 8013370:	6051      	str	r1, [r2, #4]
            k = 0;
 8013372:	2300      	movs	r3, #0
 8013374:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_year >> 8;
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801337c:	b29b      	uxth	r3, r3
 801337e:	0a1b      	lsrs	r3, r3, #8
 8013380:	b29a      	uxth	r2, r3
 8013382:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013386:	1c59      	adds	r1, r3, #1
 8013388:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801338c:	3308      	adds	r3, #8
 801338e:	b2d1      	uxtb	r1, r2
 8013390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013392:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_year;
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013398:	b29a      	uxth	r2, r3
 801339a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801339e:	1c59      	adds	r1, r3, #1
 80133a0:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80133a4:	3308      	adds	r3, #8
 80133a6:	b2d1      	uxtb	r1, r2
 80133a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133aa:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_month;
 80133ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80133b6:	3308      	adds	r3, #8
 80133b8:	683a      	ldr	r2, [r7, #0]
 80133ba:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80133be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133c0:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_date;
 80133c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80133c6:	1c5a      	adds	r2, r3, #1
 80133c8:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80133cc:	3308      	adds	r3, #8
 80133ce:	683a      	ldr	r2, [r7, #0]
 80133d0:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 80133d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133d6:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_hour;
 80133d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80133dc:	1c5a      	adds	r2, r3, #1
 80133de:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80133e2:	3308      	adds	r3, #8
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80133ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133ec:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_min;
 80133ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80133f8:	3308      	adds	r3, #8
 80133fa:	683a      	ldr	r2, [r7, #0]
 80133fc:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8013400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013402:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_sec;
 8013404:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013408:	1c5a      	adds	r2, r3, #1
 801340a:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801340e:	3308      	adds	r3, #8
 8013410:	683a      	ldr	r2, [r7, #0]
 8013412:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 8013416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013418:	54d1      	strb	r1, [r2, r3]

            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_year >> 8;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 8013420:	b29b      	uxth	r3, r3
 8013422:	0a1b      	lsrs	r3, r3, #8
 8013424:	b29a      	uxth	r2, r3
 8013426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801342a:	1c59      	adds	r1, r3, #1
 801342c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013430:	3308      	adds	r3, #8
 8013432:	b2d1      	uxtb	r1, r2
 8013434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013436:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_year;
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801343e:	b29a      	uxth	r2, r3
 8013440:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013444:	1c59      	adds	r1, r3, #1
 8013446:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801344a:	3308      	adds	r3, #8
 801344c:	b2d1      	uxtb	r1, r2
 801344e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013450:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_month;
 8013452:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013456:	1c5a      	adds	r2, r3, #1
 8013458:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801345c:	3308      	adds	r3, #8
 801345e:	683a      	ldr	r2, [r7, #0]
 8013460:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8013464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013466:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_date;
 8013468:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801346c:	1c5a      	adds	r2, r3, #1
 801346e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013472:	3308      	adds	r3, #8
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 801347a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801347c:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_hour;
 801347e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013488:	3308      	adds	r3, #8
 801348a:	683a      	ldr	r2, [r7, #0]
 801348c:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8013490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013492:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_min;
 8013494:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013498:	1c5a      	adds	r2, r3, #1
 801349a:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801349e:	3308      	adds	r3, #8
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 80134a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134a8:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_sec;
 80134aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80134ae:	1c5a      	adds	r2, r3, #1
 80134b0:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80134b4:	3308      	adds	r3, #8
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
 80134bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134be:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->flash_protection;
 80134c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80134c4:	1c5a      	adds	r2, r3, #1
 80134c6:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80134ca:	3308      	adds	r3, #8
 80134cc:	683a      	ldr	r2, [r7, #0]
 80134ce:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 80134d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134d4:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->version_hash >> 8;
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134dc:	b29b      	uxth	r3, r3
 80134de:	0a1b      	lsrs	r3, r3, #8
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80134e6:	1c59      	adds	r1, r3, #1
 80134e8:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80134ec:	3308      	adds	r3, #8
 80134ee:	b2d1      	uxtb	r1, r2
 80134f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134f2:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->version_hash;
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013500:	1c59      	adds	r1, r3, #1
 8013502:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013506:	3308      	adds	r3, #8
 8013508:	b2d1      	uxtb	r1, r2
 801350a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801350c:	54d1      	strb	r1, [r2, r3]
            k = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 8013514:	e2db      	b.n	8013ace <chirp_write+0xb02>
 8013516:	bf00      	nop
 8013518:	20000464 	.word	0x20000464
        }
        case MX_DISSEMINATE:
        case MX_COLLECT:
        case CHIRP_TOPO:
        {
            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	799b      	ldrb	r3, [r3, #6]
 8013520:	2b01      	cmp	r3, #1
 8013522:	f040 811f 	bne.w	8013764 <chirp_write+0x798>
            {
                /* initiator in dissemination setup: file size, patch config, and old file size (if patch) */
                if ((chirp_outl->disem_file_index == 0) && (!node_id))
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801352c:	b29b      	uxth	r3, r3
 801352e:	2b00      	cmp	r3, #0
 8013530:	f040 80e5 	bne.w	80136fe <chirp_write+0x732>
 8013534:	79fb      	ldrb	r3, [r7, #7]
 8013536:	2b00      	cmp	r3, #0
 8013538:	f040 80e1 	bne.w	80136fe <chirp_write+0x732>
                {
                    data[k++] = chirp_outl->disem_file_index >> 8;
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013542:	b29b      	uxth	r3, r3
 8013544:	0a1b      	lsrs	r3, r3, #8
 8013546:	b299      	uxth	r1, r3
 8013548:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013552:	461a      	mov	r2, r3
 8013554:	b2c9      	uxtb	r1, r1
 8013556:	4bbe      	ldr	r3, [pc, #760]	; (8013850 <chirp_write+0x884>)
 8013558:	5499      	strb	r1, [r3, r2]
                    data[k++] = chirp_outl->disem_file_index;
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013560:	b299      	uxth	r1, r3
 8013562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013566:	1c5a      	adds	r2, r3, #1
 8013568:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801356c:	461a      	mov	r2, r3
 801356e:	b2c9      	uxtb	r1, r1
 8013570:	4bb7      	ldr	r3, [pc, #732]	; (8013850 <chirp_write+0x884>)
 8013572:	5499      	strb	r1, [r3, r2]
                    memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013576:	49b6      	ldr	r1, [pc, #728]	; (8013850 <chirp_write+0x884>)
 8013578:	461a      	mov	r2, r3
 801357a:	460b      	mov	r3, r1
 801357c:	cb03      	ldmia	r3!, {r0, r1}
 801357e:	6010      	str	r0, [r2, #0]
 8013580:	6051      	str	r1, [r2, #4]
                    k = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    if (chirp_outl->disem_flag)
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801358e:	2b00      	cmp	r3, #0
 8013590:	f000 815d 	beq.w	801384e <chirp_write+0x882>
                    {
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 24;
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013598:	0e1a      	lsrs	r2, r3, #24
 801359a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801359e:	1c59      	adds	r1, r3, #1
 80135a0:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135a4:	3308      	adds	r3, #8
 80135a6:	b2d1      	uxtb	r1, r2
 80135a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135aa:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 16;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135b0:	0c1a      	lsrs	r2, r3, #16
 80135b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135b6:	1c59      	adds	r1, r3, #1
 80135b8:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135bc:	3308      	adds	r3, #8
 80135be:	b2d1      	uxtb	r1, r2
 80135c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135c2:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 8;
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135c8:	0a1a      	lsrs	r2, r3, #8
 80135ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135ce:	1c59      	adds	r1, r3, #1
 80135d0:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135d4:	3308      	adds	r3, #8
 80135d6:	b2d1      	uxtb	r1, r2
 80135d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135da:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135e4:	1c59      	adds	r1, r3, #1
 80135e6:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135ea:	3308      	adds	r3, #8
 80135ec:	b2d1      	uxtb	r1, r2
 80135ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135f0:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->patch_update;
 80135f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135f6:	1c5a      	adds	r2, r3, #1
 80135f8:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80135fc:	3308      	adds	r3, #8
 80135fe:	683a      	ldr	r2, [r7, #0]
 8013600:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 8013604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013606:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->patch_bank;
 8013608:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801360c:	1c5a      	adds	r2, r3, #1
 801360e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013612:	3308      	adds	r3, #8
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	f892 1057 	ldrb.w	r1, [r2, #87]	; 0x57
 801361a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801361c:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->version_hash >> 8;
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013624:	b29b      	uxth	r3, r3
 8013626:	0a1b      	lsrs	r3, r3, #8
 8013628:	b29a      	uxth	r2, r3
 801362a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801362e:	1c59      	adds	r1, r3, #1
 8013630:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013634:	3308      	adds	r3, #8
 8013636:	b2d1      	uxtb	r1, r2
 8013638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801363a:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->version_hash;
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013642:	b29a      	uxth	r2, r3
 8013644:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013648:	1c59      	adds	r1, r3, #1
 801364a:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801364e:	3308      	adds	r3, #8
 8013650:	b2d1      	uxtb	r1, r2
 8013652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013654:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->file_compression;
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	f8d3 2052 	ldr.w	r2, [r3, #82]	; 0x52
 801365c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013660:	1c59      	adds	r1, r3, #1
 8013662:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013666:	3308      	adds	r3, #8
 8013668:	b2d1      	uxtb	r1, r2
 801366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801366c:	54d1      	strb	r1, [r2, r3]
                        /* k = 9 */
                        memcpy(&(file_data[DATA_HEADER_LENGTH + 9]), &(chirp_outl->firmware_md5[0]), 16);
 801366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013670:	f103 0011 	add.w	r0, r3, #17
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	3340      	adds	r3, #64	; 0x40
 8013678:	2210      	movs	r2, #16
 801367a:	4619      	mov	r1, r3
 801367c:	f00d ff7a 	bl	8021574 <memcpy>
                        /* k = 25 */
                        if (chirp_outl->patch_update)
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013686:	2b00      	cmp	r3, #0
 8013688:	d035      	beq.n	80136f6 <chirp_write+0x72a>
                        {
                            k = 28;
 801368a:	231c      	movs	r3, #28
 801368c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 24;
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 8013696:	0e1a      	lsrs	r2, r3, #24
 8013698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801369c:	1c59      	adds	r1, r3, #1
 801369e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80136a2:	3308      	adds	r3, #8
 80136a4:	b2d1      	uxtb	r1, r2
 80136a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136a8:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 16;
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 80136b0:	0c1a      	lsrs	r2, r3, #16
 80136b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136b6:	1c59      	adds	r1, r3, #1
 80136b8:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80136bc:	3308      	adds	r3, #8
 80136be:	b2d1      	uxtb	r1, r2
 80136c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136c2:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 8;
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 80136ca:	0a1a      	lsrs	r2, r3, #8
 80136cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136d0:	1c59      	adds	r1, r3, #1
 80136d2:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80136d6:	3308      	adds	r3, #8
 80136d8:	b2d1      	uxtb	r1, r2
 80136da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136dc:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size;
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	f8d3 2059 	ldr.w	r2, [r3, #89]	; 0x59
 80136e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136e8:	1c59      	adds	r1, r3, #1
 80136ea:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80136ee:	3308      	adds	r3, #8
 80136f0:	b2d1      	uxtb	r1, r2
 80136f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136f4:	54d1      	strb	r1, [r2, r3]
                            /* k = 32 */
                        }
                        k = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    if (chirp_outl->disem_flag)
 80136fc:	e0a7      	b.n	801384e <chirp_write+0x882>
                    }
                }
                /* if in dissemination / confirm session */
                else if (chirp_outl->disem_file_index)
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013704:	b29b      	uxth	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 81e0 	beq.w	8013acc <chirp_write+0xb00>
                {
                    /* in dissemination, only initiator sends packets */
                    if (chirp_outl->disem_flag)
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013712:	2b00      	cmp	r3, #0
 8013714:	d01c      	beq.n	8013750 <chirp_write+0x784>
                    {
                        data[k++] = chirp_outl->disem_file_index >> 8;
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801371c:	b29b      	uxth	r3, r3
 801371e:	0a1b      	lsrs	r3, r3, #8
 8013720:	b299      	uxth	r1, r3
 8013722:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013726:	1c5a      	adds	r2, r3, #1
 8013728:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801372c:	461a      	mov	r2, r3
 801372e:	b2c9      	uxtb	r1, r1
 8013730:	4b47      	ldr	r3, [pc, #284]	; (8013850 <chirp_write+0x884>)
 8013732:	5499      	strb	r1, [r3, r2]
                        data[k++] = chirp_outl->disem_file_index;
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801373a:	b299      	uxth	r1, r3
 801373c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013746:	461a      	mov	r2, r3
 8013748:	b2c9      	uxtb	r1, r1
 801374a:	4b41      	ldr	r3, [pc, #260]	; (8013850 <chirp_write+0x884>)
 801374c:	5499      	strb	r1, [r3, r2]
                    file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->collect_addr_end >> 16;
                    file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->collect_addr_end >> 8;
                    file_data[DATA_HEADER_LENGTH + 7] = chirp_outl->collect_addr_end;
                }
            }
            break;
 801374e:	e1bd      	b.n	8013acc <chirp_write+0xb00>
                        data[6] = chirp_outl->disem_flag_full_rank;
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8013756:	4b3e      	ldr	r3, [pc, #248]	; (8013850 <chirp_write+0x884>)
 8013758:	719a      	strb	r2, [r3, #6]
                        chirp_config.disem_copy = 0;
 801375a:	4b3e      	ldr	r3, [pc, #248]	; (8013854 <chirp_write+0x888>)
 801375c:	2200      	movs	r2, #0
 801375e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            break;
 8013762:	e1b3      	b.n	8013acc <chirp_write+0xb00>
            else if ((chirp_outl->arrange_task == MX_COLLECT) && (chirp_outl->round <= chirp_outl->round_setup))
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	799b      	ldrb	r3, [r3, #6]
 8013768:	2b02      	cmp	r3, #2
 801376a:	f040 81af 	bne.w	8013acc <chirp_write+0xb00>
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013774:	b29a      	uxth	r2, r3
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	795b      	ldrb	r3, [r3, #5]
 801377a:	b29b      	uxth	r3, r3
 801377c:	429a      	cmp	r2, r3
 801377e:	f200 81a5 	bhi.w	8013acc <chirp_write+0xb00>
                data[k++] = chirp_outl->round_max >> 8;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013788:	b29b      	uxth	r3, r3
 801378a:	0a1b      	lsrs	r3, r3, #8
 801378c:	b299      	uxth	r1, r3
 801378e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013792:	1c5a      	adds	r2, r3, #1
 8013794:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013798:	461a      	mov	r2, r3
 801379a:	b2c9      	uxtb	r1, r1
 801379c:	4b2c      	ldr	r3, [pc, #176]	; (8013850 <chirp_write+0x884>)
 801379e:	5499      	strb	r1, [r3, r2]
                data[k++] = chirp_outl->round_max;
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80137a6:	b299      	uxth	r1, r3
 80137a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80137b2:	461a      	mov	r2, r3
 80137b4:	b2c9      	uxtb	r1, r1
 80137b6:	4b26      	ldr	r3, [pc, #152]	; (8013850 <chirp_write+0x884>)
 80137b8:	5499      	strb	r1, [r3, r2]
                PRINTF("set99:%d\n", chirp_outl->round_max);
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	4619      	mov	r1, r3
 80137c4:	4824      	ldr	r0, [pc, #144]	; (8013858 <chirp_write+0x88c>)
 80137c6:	f00e fced 	bl	80221a4 <iprintf>
                memcpy(file_data, data, DATA_HEADER_LENGTH);
 80137ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137cc:	4920      	ldr	r1, [pc, #128]	; (8013850 <chirp_write+0x884>)
 80137ce:	461a      	mov	r2, r3
 80137d0:	460b      	mov	r3, r1
 80137d2:	cb03      	ldmia	r3!, {r0, r1}
 80137d4:	6010      	str	r0, [r2, #0]
 80137d6:	6051      	str	r1, [r2, #4]
                if (!node_id)
 80137d8:	79fb      	ldrb	r3, [r7, #7]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f040 8176 	bne.w	8013acc <chirp_write+0xb00>
                    file_data[DATA_HEADER_LENGTH + 0] = chirp_outl->collect_addr_start >> 24;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 80137e6:	0e1b      	lsrs	r3, r3, #24
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ec:	721a      	strb	r2, [r3, #8]
                    file_data[DATA_HEADER_LENGTH + 1] = chirp_outl->collect_addr_start >> 16;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 80137f4:	0c1b      	lsrs	r3, r3, #16
 80137f6:	b2da      	uxtb	r2, r3
 80137f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137fa:	725a      	strb	r2, [r3, #9]
                    file_data[DATA_HEADER_LENGTH + 2] = chirp_outl->collect_addr_start >> 8;
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013802:	0a1b      	lsrs	r3, r3, #8
 8013804:	b2da      	uxtb	r2, r3
 8013806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013808:	729a      	strb	r2, [r3, #10]
                    file_data[DATA_HEADER_LENGTH + 3] = chirp_outl->collect_addr_start;
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013810:	b2da      	uxtb	r2, r3
 8013812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013814:	72da      	strb	r2, [r3, #11]
                    file_data[DATA_HEADER_LENGTH + 4] = chirp_outl->collect_addr_end >> 24;
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801381c:	0e1b      	lsrs	r3, r3, #24
 801381e:	b2da      	uxtb	r2, r3
 8013820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013822:	731a      	strb	r2, [r3, #12]
                    file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->collect_addr_end >> 16;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801382a:	0c1b      	lsrs	r3, r3, #16
 801382c:	b2da      	uxtb	r2, r3
 801382e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013830:	735a      	strb	r2, [r3, #13]
                    file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->collect_addr_end >> 8;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013838:	0a1b      	lsrs	r3, r3, #8
 801383a:	b2da      	uxtb	r2, r3
 801383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801383e:	739a      	strb	r2, [r3, #14]
                    file_data[DATA_HEADER_LENGTH + 7] = chirp_outl->collect_addr_end;
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013846:	b2da      	uxtb	r2, r3
 8013848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801384a:	73da      	strb	r2, [r3, #15]
            break;
 801384c:	e13e      	b.n	8013acc <chirp_write+0xb00>
 801384e:	e13d      	b.n	8013acc <chirp_write+0xb00>
 8013850:	20000464 	.word	0x20000464
 8013854:	20001430 	.word	0x20001430
 8013858:	08025438 	.word	0x08025438
        }
        case CHIRP_CONNECTIVITY:
        {
            /* only initiator writes to the payload */
            data[k++] = chirp_outl->round_max >> 8;
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013862:	b29b      	uxth	r3, r3
 8013864:	0a1b      	lsrs	r3, r3, #8
 8013866:	b299      	uxth	r1, r3
 8013868:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013872:	461a      	mov	r2, r3
 8013874:	b2c9      	uxtb	r1, r1
 8013876:	4bba      	ldr	r3, [pc, #744]	; (8013b60 <chirp_write+0xb94>)
 8013878:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->round_max;
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013880:	b299      	uxth	r1, r3
 8013882:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013886:	1c5a      	adds	r2, r3, #1
 8013888:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801388c:	461a      	mov	r2, r3
 801388e:	b2c9      	uxtb	r1, r1
 8013890:	4bb3      	ldr	r3, [pc, #716]	; (8013b60 <chirp_write+0xb94>)
 8013892:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013896:	49b2      	ldr	r1, [pc, #712]	; (8013b60 <chirp_write+0xb94>)
 8013898:	461a      	mov	r2, r3
 801389a:	460b      	mov	r3, r1
 801389c:	cb03      	ldmia	r3!, {r0, r1}
 801389e:	6010      	str	r0, [r2, #0]
 80138a0:	6051      	str	r1, [r2, #4]
            file_data[DATA_HEADER_LENGTH] = chirp_outl->sf;
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80138a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138aa:	721a      	strb	r2, [r3, #8]
            file_data[DATA_HEADER_LENGTH + 1] = chirp_outl->freq >> 24;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 80138b2:	0e1b      	lsrs	r3, r3, #24
 80138b4:	b2da      	uxtb	r2, r3
 80138b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b8:	725a      	strb	r2, [r3, #9]
            file_data[DATA_HEADER_LENGTH + 2] = chirp_outl->freq >> 16;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 80138c0:	0c1b      	lsrs	r3, r3, #16
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138c6:	729a      	strb	r2, [r3, #10]
            file_data[DATA_HEADER_LENGTH + 3] = chirp_outl->freq >> 8;
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 80138ce:	0a1b      	lsrs	r3, r3, #8
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138d4:	72da      	strb	r2, [r3, #11]
            file_data[DATA_HEADER_LENGTH + 4] = chirp_outl->freq;
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 80138dc:	b2da      	uxtb	r2, r3
 80138de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e0:	731a      	strb	r2, [r3, #12]
            file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->tx_power;
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 80138e8:	b2da      	uxtb	r2, r3
 80138ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ec:	735a      	strb	r2, [r3, #13]
            file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->topo_payload_len;
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80138f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f6:	739a      	strb	r2, [r3, #14]
            break;
 80138f8:	e0e9      	b.n	8013ace <chirp_write+0xb02>
        }
        case CHIRP_VERSION:
        {
            data[k++] = VERSION_MAJOR;
 80138fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80138fe:	1c5a      	adds	r2, r3, #1
 8013900:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013904:	461a      	mov	r2, r3
 8013906:	4b97      	ldr	r3, [pc, #604]	; (8013b64 <chirp_write+0xb98>)
 8013908:	7819      	ldrb	r1, [r3, #0]
 801390a:	4b95      	ldr	r3, [pc, #596]	; (8013b60 <chirp_write+0xb94>)
 801390c:	5499      	strb	r1, [r3, r2]
            data[k++] = VERSION_NODE;
 801390e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013918:	461a      	mov	r2, r3
 801391a:	4b93      	ldr	r3, [pc, #588]	; (8013b68 <chirp_write+0xb9c>)
 801391c:	7819      	ldrb	r1, [r3, #0]
 801391e:	4b90      	ldr	r3, [pc, #576]	; (8013b60 <chirp_write+0xb94>)
 8013920:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013924:	498e      	ldr	r1, [pc, #568]	; (8013b60 <chirp_write+0xb94>)
 8013926:	461a      	mov	r2, r3
 8013928:	460b      	mov	r3, r1
 801392a:	cb03      	ldmia	r3!, {r0, r1}
 801392c:	6010      	str	r0, [r2, #0]
 801392e:	6051      	str	r1, [r2, #4]
            file_data[DATA_HEADER_LENGTH] = TOS_NODE_ID >> 16;
 8013930:	4b8e      	ldr	r3, [pc, #568]	; (8013b6c <chirp_write+0xba0>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	0c1b      	lsrs	r3, r3, #16
 8013936:	b2da      	uxtb	r2, r3
 8013938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801393a:	721a      	strb	r2, [r3, #8]
            file_data[DATA_HEADER_LENGTH + 1] = TOS_NODE_ID >> 8;
 801393c:	4b8b      	ldr	r3, [pc, #556]	; (8013b6c <chirp_write+0xba0>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	0a1b      	lsrs	r3, r3, #8
 8013942:	b2da      	uxtb	r2, r3
 8013944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013946:	725a      	strb	r2, [r3, #9]
            file_data[DATA_HEADER_LENGTH + 2] = TOS_NODE_ID;
 8013948:	4b88      	ldr	r3, [pc, #544]	; (8013b6c <chirp_write+0xba0>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	b2da      	uxtb	r2, r3
 801394e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013950:	729a      	strb	r2, [r3, #10]
            break;
 8013952:	e0bc      	b.n	8013ace <chirp_write+0xb02>
        }
        case MX_ARRANGE:
        {
            data[1] = chirp_outl->default_slot_num >> 8;
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801395a:	b29b      	uxth	r3, r3
 801395c:	0a1b      	lsrs	r3, r3, #8
 801395e:	b29b      	uxth	r3, r3
 8013960:	b2da      	uxtb	r2, r3
 8013962:	4b7f      	ldr	r3, [pc, #508]	; (8013b60 <chirp_write+0xb94>)
 8013964:	705a      	strb	r2, [r3, #1]
            data[2] = chirp_outl->default_slot_num;
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801396c:	b29b      	uxth	r3, r3
 801396e:	b2da      	uxtb	r2, r3
 8013970:	4b7b      	ldr	r3, [pc, #492]	; (8013b60 <chirp_write+0xb94>)
 8013972:	709a      	strb	r2, [r3, #2]
            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	799b      	ldrb	r3, [r3, #6]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d109      	bne.n	8013990 <chirp_write+0x9c4>
            {
                data[0] = chirp_outl->dissem_back_sf;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013982:	4b77      	ldr	r3, [pc, #476]	; (8013b60 <chirp_write+0xb94>)
 8013984:	701a      	strb	r2, [r3, #0]
                data[1] = chirp_outl->dissem_back_slot_num;
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801398c:	4b74      	ldr	r3, [pc, #464]	; (8013b60 <chirp_write+0xb94>)
 801398e:	705a      	strb	r2, [r3, #1]
            }
            data[k++] = chirp_outl->default_sf;
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8013996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801399a:	1c5a      	adds	r2, r3, #1
 801399c:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80139a0:	461a      	mov	r2, r3
 80139a2:	b2c9      	uxtb	r1, r1
 80139a4:	4b6e      	ldr	r3, [pc, #440]	; (8013b60 <chirp_write+0xb94>)
 80139a6:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->default_payload_len;
 80139a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80139ac:	1c5a      	adds	r2, r3, #1
 80139ae:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80139b2:	461a      	mov	r2, r3
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	7d99      	ldrb	r1, [r3, #22]
 80139b8:	4b69      	ldr	r3, [pc, #420]	; (8013b60 <chirp_write+0xb94>)
 80139ba:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->arrange_task;
 80139bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80139c0:	1c5a      	adds	r2, r3, #1
 80139c2:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80139c6:	461a      	mov	r2, r3
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	7999      	ldrb	r1, [r3, #6]
 80139cc:	4b64      	ldr	r3, [pc, #400]	; (8013b60 <chirp_write+0xb94>)
 80139ce:	5499      	strb	r1, [r3, r2]
            data[ROUND_HEADER_LENGTH - 1] = chirp_outl->default_generate_size;
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	7dda      	ldrb	r2, [r3, #23]
 80139d4:	4b62      	ldr	r3, [pc, #392]	; (8013b60 <chirp_write+0xb94>)
 80139d6:	70da      	strb	r2, [r3, #3]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 80139d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139da:	4961      	ldr	r1, [pc, #388]	; (8013b60 <chirp_write+0xb94>)
 80139dc:	461a      	mov	r2, r3
 80139de:	460b      	mov	r3, r1
 80139e0:	cb03      	ldmia	r3!, {r0, r1}
 80139e2:	6010      	str	r0, [r2, #0]
 80139e4:	6051      	str	r1, [r2, #4]
            k = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 24;
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	0e1a      	lsrs	r2, r3, #24
 80139f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80139f6:	1c59      	adds	r1, r3, #1
 80139f8:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80139fc:	3308      	adds	r3, #8
 80139fe:	b2d1      	uxtb	r1, r2
 8013a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a02:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 16;
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	699b      	ldr	r3, [r3, #24]
 8013a08:	0c1a      	lsrs	r2, r3, #16
 8013a0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a0e:	1c59      	adds	r1, r3, #1
 8013a10:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a14:	3308      	adds	r3, #8
 8013a16:	b2d1      	uxtb	r1, r2
 8013a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a1a:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 8;
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	699b      	ldr	r3, [r3, #24]
 8013a20:	0a1a      	lsrs	r2, r3, #8
 8013a22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a26:	1c59      	adds	r1, r3, #1
 8013a28:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a2c:	3308      	adds	r3, #8
 8013a2e:	b2d1      	uxtb	r1, r2
 8013a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a32:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0];
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	699a      	ldr	r2, [r3, #24]
 8013a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a3c:	1c59      	adds	r1, r3, #1
 8013a3e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a42:	3308      	adds	r3, #8
 8013a44:	b2d1      	uxtb	r1, r2
 8013a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a48:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->default_tp;
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	f993 2015 	ldrsb.w	r2, [r3, #21]
 8013a50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a54:	1c59      	adds	r1, r3, #1
 8013a56:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a5a:	3308      	adds	r3, #8
 8013a5c:	b2d1      	uxtb	r1, r2
 8013a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a60:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 24;
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	69db      	ldr	r3, [r3, #28]
 8013a66:	0e1a      	lsrs	r2, r3, #24
 8013a68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a6c:	1c59      	adds	r1, r3, #1
 8013a6e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a72:	3308      	adds	r3, #8
 8013a74:	b2d1      	uxtb	r1, r2
 8013a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a78:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 16;
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	69db      	ldr	r3, [r3, #28]
 8013a7e:	0c1a      	lsrs	r2, r3, #16
 8013a80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a84:	1c59      	adds	r1, r3, #1
 8013a86:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013a8a:	3308      	adds	r3, #8
 8013a8c:	b2d1      	uxtb	r1, r2
 8013a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a90:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 8;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	69db      	ldr	r3, [r3, #28]
 8013a96:	0a1a      	lsrs	r2, r3, #8
 8013a98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a9c:	1c59      	adds	r1, r3, #1
 8013a9e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013aa2:	3308      	adds	r3, #8
 8013aa4:	b2d1      	uxtb	r1, r2
 8013aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013aa8:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0];
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	69da      	ldr	r2, [r3, #28]
 8013aae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ab2:	1c59      	adds	r1, r3, #1
 8013ab4:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013ab8:	3308      	adds	r3, #8
 8013aba:	b2d1      	uxtb	r1, r2
 8013abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013abe:	54d1      	strb	r1, [r2, r3]
            k = 0;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 8013ac6:	e002      	b.n	8013ace <chirp_write+0xb02>
        }
        default:
            break;
 8013ac8:	bf00      	nop
 8013aca:	e000      	b.n	8013ace <chirp_write+0xb02>
            break;
 8013acc:	bf00      	nop
    }

    assert_reset((k <= DATA_HEADER_LENGTH));
 8013ace:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ad2:	2b08      	cmp	r3, #8
 8013ad4:	d906      	bls.n	8013ae4 <chirp_write+0xb18>
 8013ad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ada:	2b08      	cmp	r3, #8
 8013adc:	d902      	bls.n	8013ae4 <chirp_write+0xb18>
 8013ade:	b671      	cpsid	f
 8013ae0:	f7fe fe9a 	bl	8012818 <NVIC_SystemReset>

    for (i = 0; i < chirp_config.mx_generation_size; i++)
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8013aea:	e105      	b.n	8013cf8 <chirp_write+0xd2c>
    {
        if (payload_distribution[i] == node_id)
 8013aec:	4b20      	ldr	r3, [pc, #128]	; (8013b70 <chirp_write+0xba4>)
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013af4:	4413      	add	r3, r2
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	79fa      	ldrb	r2, [r7, #7]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	f040 80f2 	bne.w	8013ce4 <chirp_write+0xd18>
        {
            // data[ROUND_HEADER_LENGTH - 1] = i;
            // file_data[ROUND_HEADER_LENGTH - 1] = i;
            switch (chirp_outl->task)
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	2b06      	cmp	r3, #6
 8013b06:	f200 80ef 	bhi.w	8013ce8 <chirp_write+0xd1c>
 8013b0a:	a201      	add	r2, pc, #4	; (adr r2, 8013b10 <chirp_write+0xb44>)
 8013b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b10:	08013b2d 	.word	0x08013b2d
 8013b14:	08013b41 	.word	0x08013b41
 8013b18:	08013beb 	.word	0x08013beb
 8013b1c:	08013ca9 	.word	0x08013ca9
 8013b20:	08013beb 	.word	0x08013beb
 8013b24:	08013cbd 	.word	0x08013cbd
 8013b28:	08013cd1 	.word	0x08013cd1
            {
                case CHIRP_START:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013b2c:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013b30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b38:	461a      	mov	r2, r3
 8013b3a:	f7fe fa97 	bl	801206c <mixer_write>
                    break;
 8013b3e:	e0d6      	b.n	8013cee <chirp_write+0xd22>
                }
                case MX_DISSEMINATE:
                {
                    if (!chirp_outl->disem_file_index)
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d113      	bne.n	8013b74 <chirp_write+0xba8>
                        mixer_write(i, file_data, chirp_outl->payload_len);
 8013b4c:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b58:	461a      	mov	r2, r3
 8013b5a:	f7fe fa87 	bl	801206c <mixer_write>
                        if (chirp_outl->disem_flag)
                            gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data + i * (chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t), (chirp_outl->payload_len - DATA_HEADER_LENGTH));
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
                        // PRINT_PACKET(file_data + DATA_HEADER_LENGTH, sizeof(file_data) - 8, 0);
                    }
                    break;
 8013b5e:	e0c6      	b.n	8013cee <chirp_write+0xd22>
 8013b60:	20000464 	.word	0x20000464
 8013b64:	08026888 	.word	0x08026888
 8013b68:	08026889 	.word	0x08026889
 8013b6c:	20000000 	.word	0x20000000
 8013b70:	20000cc8 	.word	0x20000cc8
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
 8013b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b78:	4b67      	ldr	r3, [pc, #412]	; (8013d18 <chirp_write+0xd4c>)
 8013b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8013b7c:	2308      	movs	r3, #8
 8013b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8013b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b84:	4610      	mov	r0, r2
 8013b86:	4619      	mov	r1, r3
 8013b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	f00d fcf2 	bl	8021574 <memcpy>
                        if (chirp_outl->disem_flag)
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d01d      	beq.n	8013bd6 <chirp_write+0xc0a>
                            gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data + i * (chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t), (chirp_outl->payload_len - DATA_HEADER_LENGTH));
 8013b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b9c:	f103 0208 	add.w	r2, r3, #8
 8013ba0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013ba2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013ba6:	6838      	ldr	r0, [r7, #0]
 8013ba8:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8013bac:	3808      	subs	r0, #8
 8013bae:	fb00 f303 	mul.w	r3, r0, r3
 8013bb2:	f023 0303 	bic.w	r3, r3, #3
 8013bb6:	440b      	add	r3, r1
 8013bb8:	6839      	ldr	r1, [r7, #0]
 8013bba:	f891 1039 	ldrb.w	r1, [r1, #57]	; 0x39
 8013bbe:	3908      	subs	r1, #8
 8013bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013bc4:	6279      	str	r1, [r7, #36]	; 0x24
 8013bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	4610      	mov	r0, r2
 8013bcc:	4619      	mov	r1, r3
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f00d fccf 	bl	8021574 <memcpy>
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
 8013bd6:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013be2:	461a      	mov	r2, r3
 8013be4:	f7fe fa42 	bl	801206c <mixer_write>
                    break;
 8013be8:	e081      	b.n	8013cee <chirp_write+0xd22>
                }
                case MX_COLLECT:
                case CHIRP_TOPO:
                {
                    if (chirp_outl->round <= chirp_outl->round_setup)
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	795b      	ldrb	r3, [r3, #5]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d821      	bhi.n	8013c40 <chirp_write+0xc74>
                    {
                        if (chirp_outl->task == MX_COLLECT)
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	2b02      	cmp	r3, #2
 8013c02:	d109      	bne.n	8013c18 <chirp_write+0xc4c>
                            mixer_write(i, file_data, chirp_outl->payload_len);
 8013c04:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013c08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013c10:	461a      	mov	r2, r3
 8013c12:	f7fe fa2b 	bl	801206c <mixer_write>
                    {
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
                        gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data, (chirp_outl->payload_len - DATA_HEADER_LENGTH));
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
                    }
                    break;
 8013c16:	e069      	b.n	8013cec <chirp_write+0xd20>
                            mixer_write(i, data, MIN(sizeof(data), chirp_outl->payload_len));
 8013c18:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013c1c:	2308      	movs	r3, #8
 8013c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013c26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013c2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c30:	4293      	cmp	r3, r2
 8013c32:	bf28      	it	cs
 8013c34:	4613      	movcs	r3, r2
 8013c36:	461a      	mov	r2, r3
 8013c38:	4937      	ldr	r1, [pc, #220]	; (8013d18 <chirp_write+0xd4c>)
 8013c3a:	f7fe fa17 	bl	801206c <mixer_write>
                    break;
 8013c3e:	e055      	b.n	8013cec <chirp_write+0xd20>
                    else if (chirp_outl->round > chirp_outl->round_setup)
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	795b      	ldrb	r3, [r3, #5]
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d94c      	bls.n	8013cec <chirp_write+0xd20>
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
 8013c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c54:	617b      	str	r3, [r7, #20]
 8013c56:	4b30      	ldr	r3, [pc, #192]	; (8013d18 <chirp_write+0xd4c>)
 8013c58:	613b      	str	r3, [r7, #16]
 8013c5a:	2308      	movs	r3, #8
 8013c5c:	60fb      	str	r3, [r7, #12]
 8013c5e:	697a      	ldr	r2, [r7, #20]
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	4610      	mov	r0, r2
 8013c64:	4619      	mov	r1, r3
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	f00d fc83 	bl	8021574 <memcpy>
                        gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data, (chirp_outl->payload_len - DATA_HEADER_LENGTH));
 8013c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c70:	f103 0208 	add.w	r2, r3, #8
 8013c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c76:	6839      	ldr	r1, [r7, #0]
 8013c78:	f891 1039 	ldrb.w	r1, [r1, #57]	; 0x39
 8013c7c:	3908      	subs	r1, #8
 8013c7e:	623a      	str	r2, [r7, #32]
 8013c80:	61fb      	str	r3, [r7, #28]
 8013c82:	61b9      	str	r1, [r7, #24]
 8013c84:	6a3a      	ldr	r2, [r7, #32]
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	4610      	mov	r0, r2
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	f00d fc70 	bl	8021574 <memcpy>
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
 8013c94:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013c98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	f7fe f9e3 	bl	801206c <mixer_write>
                    break;
 8013ca6:	e021      	b.n	8013cec <chirp_write+0xd20>
                }
                case CHIRP_CONNECTIVITY:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013ca8:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013cac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	f7fe f9d9 	bl	801206c <mixer_write>
                    break;
 8013cba:	e018      	b.n	8013cee <chirp_write+0xd22>
                }
                case CHIRP_VERSION:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013cbc:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013cc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013cc8:	461a      	mov	r2, r3
 8013cca:	f7fe f9cf 	bl	801206c <mixer_write>
                    // mixer_write(i, data, MIN(sizeof(data), chirp_outl->payload_len));
                    break;
 8013cce:	e00e      	b.n	8013cee <chirp_write+0xd22>
                }
                case MX_ARRANGE:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013cd0:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013cd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013cdc:	461a      	mov	r2, r3
 8013cde:	f7fe f9c5 	bl	801206c <mixer_write>
                    break;
 8013ce2:	e004      	b.n	8013cee <chirp_write+0xd22>
                }
                default:
                    break;
            }
        }
 8013ce4:	bf00      	nop
 8013ce6:	e002      	b.n	8013cee <chirp_write+0xd22>
                    break;
 8013ce8:	bf00      	nop
 8013cea:	e000      	b.n	8013cee <chirp_write+0xd22>
                    break;
 8013cec:	bf00      	nop
    for (i = 0; i < chirp_config.mx_generation_size; i++)
 8013cee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8013cf8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013cfc:	b29a      	uxth	r2, r3
 8013cfe:	4b07      	ldr	r3, [pc, #28]	; (8013d1c <chirp_write+0xd50>)
 8013d00:	885b      	ldrh	r3, [r3, #2]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	429a      	cmp	r2, r3
 8013d06:	f4ff aef1 	bcc.w	8013aec <chirp_write+0xb20>
 8013d0a:	46c5      	mov	sp, r8
    }
}
 8013d0c:	bf00      	nop
 8013d0e:	3760      	adds	r7, #96	; 0x60
 8013d10:	46bd      	mov	sp, r7
 8013d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d16:	bf00      	nop
 8013d18:	20000464 	.word	0x20000464
 8013d1c:	20001430 	.word	0x20001430

08013d20 <chirp_recv>:

uint8_t chirp_recv(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 8013d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d24:	b0a5      	sub	sp, #148	; 0x94
 8013d26:	af0c      	add	r7, sp, #48	; 0x30
 8013d28:	4603      	mov	r3, r0
 8013d2a:	61b9      	str	r1, [r7, #24]
 8013d2c:	77fb      	strb	r3, [r7, #31]
 8013d2e:	466b      	mov	r3, sp
 8013d30:	4698      	mov	r8, r3
	unsigned int		i;
    uint8_t round_inc = 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    uint8_t round_hash = 0;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t k = 0;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t packet_correct = 0;
 8013d44:	2300      	movs	r3, #0
 8013d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint32_t mask_negative[chirp_config.my_column_mask.len];
 8013d4a:	4b9b      	ldr	r3, [pc, #620]	; (8013fb8 <chirp_recv+0x298>)
 8013d4c:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8013d50:	4603      	mov	r3, r0
 8013d52:	3b01      	subs	r3, #1
 8013d54:	657b      	str	r3, [r7, #84]	; 0x54
 8013d56:	b2c1      	uxtb	r1, r0
 8013d58:	f04f 0200 	mov.w	r2, #0
 8013d5c:	f04f 0300 	mov.w	r3, #0
 8013d60:	f04f 0400 	mov.w	r4, #0
 8013d64:	0154      	lsls	r4, r2, #5
 8013d66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013d6a:	014b      	lsls	r3, r1, #5
 8013d6c:	b2c1      	uxtb	r1, r0
 8013d6e:	f04f 0200 	mov.w	r2, #0
 8013d72:	f04f 0300 	mov.w	r3, #0
 8013d76:	f04f 0400 	mov.w	r4, #0
 8013d7a:	0154      	lsls	r4, r2, #5
 8013d7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013d80:	014b      	lsls	r3, r1, #5
 8013d82:	4603      	mov	r3, r0
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	3303      	adds	r3, #3
 8013d88:	3307      	adds	r3, #7
 8013d8a:	08db      	lsrs	r3, r3, #3
 8013d8c:	00db      	lsls	r3, r3, #3
 8013d8e:	ebad 0d03 	sub.w	sp, sp, r3
 8013d92:	ab0c      	add	r3, sp, #48	; 0x30
 8013d94:	3303      	adds	r3, #3
 8013d96:	089b      	lsrs	r3, r3, #2
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t firmware_bitmap_temp[DISSEM_BITMAP_32];
    uint16_t pending;
    if ((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	2b01      	cmp	r3, #1
 8013da2:	d007      	beq.n	8013db4 <chirp_recv+0x94>
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	2b02      	cmp	r3, #2
 8013daa:	d003      	beq.n	8013db4 <chirp_recv+0x94>
 8013dac:	69bb      	ldr	r3, [r7, #24]
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2b04      	cmp	r3, #4
 8013db2:	d11d      	bne.n	8013df0 <chirp_recv+0xd0>
    {
        assert_reset(!((chirp_outl->payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 8013db4:	69bb      	ldr	r3, [r7, #24]
 8013db6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013dba:	f003 0307 	and.w	r3, r3, #7
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d009      	beq.n	8013dd6 <chirp_recv+0xb6>
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013dc8:	f003 0307 	and.w	r3, r3, #7
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d002      	beq.n	8013dd6 <chirp_recv+0xb6>
 8013dd0:	b671      	cpsid	f
 8013dd2:	f7fe fd21 	bl	8012818 <NVIC_SystemReset>
        assert_reset((chirp_outl->payload_len > DATA_HEADER_LENGTH + 28));
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013ddc:	2b24      	cmp	r3, #36	; 0x24
 8013dde:	d807      	bhi.n	8013df0 <chirp_recv+0xd0>
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013de6:	2b24      	cmp	r3, #36	; 0x24
 8013de8:	d802      	bhi.n	8013df0 <chirp_recv+0xd0>
 8013dea:	b671      	cpsid	f
 8013dec:	f7fe fd14 	bl	8012818 <NVIC_SystemReset>
    }
    uint32_t file_data[(chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t)];
 8013df0:	69bb      	ldr	r3, [r7, #24]
 8013df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013df6:	3b08      	subs	r3, #8
 8013df8:	089d      	lsrs	r5, r3, #2
 8013dfa:	462b      	mov	r3, r5
 8013dfc:	3b01      	subs	r3, #1
 8013dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e00:	4629      	mov	r1, r5
 8013e02:	f04f 0200 	mov.w	r2, #0
 8013e06:	f04f 0300 	mov.w	r3, #0
 8013e0a:	f04f 0400 	mov.w	r4, #0
 8013e0e:	0154      	lsls	r4, r2, #5
 8013e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013e14:	014b      	lsls	r3, r1, #5
 8013e16:	4629      	mov	r1, r5
 8013e18:	f04f 0200 	mov.w	r2, #0
 8013e1c:	f04f 0300 	mov.w	r3, #0
 8013e20:	f04f 0400 	mov.w	r4, #0
 8013e24:	0154      	lsls	r4, r2, #5
 8013e26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013e2a:	014b      	lsls	r3, r1, #5
 8013e2c:	00ab      	lsls	r3, r5, #2
 8013e2e:	3303      	adds	r3, #3
 8013e30:	3307      	adds	r3, #7
 8013e32:	08db      	lsrs	r3, r3, #3
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	ebad 0d03 	sub.w	sp, sp, r3
 8013e3a:	ab0c      	add	r3, sp, #48	; 0x30
 8013e3c:	3303      	adds	r3, #3
 8013e3e:	089b      	lsrs	r3, r3, #2
 8013e40:	009b      	lsls	r3, r3, #2
 8013e42:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t task_data[chirp_outl->payload_len - DATA_HEADER_LENGTH];
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013e4a:	f1a3 0608 	sub.w	r6, r3, #8
 8013e4e:	1e73      	subs	r3, r6, #1
 8013e50:	647b      	str	r3, [r7, #68]	; 0x44
 8013e52:	4633      	mov	r3, r6
 8013e54:	4619      	mov	r1, r3
 8013e56:	f04f 0200 	mov.w	r2, #0
 8013e5a:	f04f 0300 	mov.w	r3, #0
 8013e5e:	f04f 0400 	mov.w	r4, #0
 8013e62:	00d4      	lsls	r4, r2, #3
 8013e64:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013e68:	00cb      	lsls	r3, r1, #3
 8013e6a:	4633      	mov	r3, r6
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	f04f 0200 	mov.w	r2, #0
 8013e72:	f04f 0300 	mov.w	r3, #0
 8013e76:	f04f 0400 	mov.w	r4, #0
 8013e7a:	00d4      	lsls	r4, r2, #3
 8013e7c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013e80:	00cb      	lsls	r3, r1, #3
 8013e82:	4633      	mov	r3, r6
 8013e84:	3307      	adds	r3, #7
 8013e86:	08db      	lsrs	r3, r3, #3
 8013e88:	00db      	lsls	r3, r3, #3
 8013e8a:	ebad 0d03 	sub.w	sp, sp, r3
 8013e8e:	ab0c      	add	r3, sp, #48	; 0x30
 8013e90:	3300      	adds	r3, #0
 8013e92:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t receive_payload[chirp_outl->payload_len];
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ea0:	b2c1      	uxtb	r1, r0
 8013ea2:	f04f 0200 	mov.w	r2, #0
 8013ea6:	f04f 0300 	mov.w	r3, #0
 8013eaa:	f04f 0400 	mov.w	r4, #0
 8013eae:	00d4      	lsls	r4, r2, #3
 8013eb0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013eb4:	00cb      	lsls	r3, r1, #3
 8013eb6:	b2c1      	uxtb	r1, r0
 8013eb8:	f04f 0200 	mov.w	r2, #0
 8013ebc:	f04f 0300 	mov.w	r3, #0
 8013ec0:	f04f 0400 	mov.w	r4, #0
 8013ec4:	00d4      	lsls	r4, r2, #3
 8013ec6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013eca:	00cb      	lsls	r3, r1, #3
 8013ecc:	4603      	mov	r3, r0
 8013ece:	3307      	adds	r3, #7
 8013ed0:	08db      	lsrs	r3, r3, #3
 8013ed2:	00db      	lsls	r3, r3, #3
 8013ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8013ed8:	ab0c      	add	r3, sp, #48	; 0x30
 8013eda:	3300      	adds	r3, #0
 8013edc:	63bb      	str	r3, [r7, #56]	; 0x38

    if (!node_id)
 8013ede:	7ffb      	ldrb	r3, [r7, #31]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d127      	bne.n	8013f34 <chirp_recv+0x214>
    {
        PRINTF("-----column_pending = %d-----\n", mx.request->my_column_pending);
 8013ee4:	4b35      	ldr	r3, [pc, #212]	; (8013fbc <chirp_recv+0x29c>)
 8013ee6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013eea:	8a1b      	ldrh	r3, [r3, #16]
 8013eec:	4619      	mov	r1, r3
 8013eee:	4834      	ldr	r0, [pc, #208]	; (8013fc0 <chirp_recv+0x2a0>)
 8013ef0:	f00e f958 	bl	80221a4 <iprintf>
        if ((chirp_outl->task == MX_COLLECT) && (chirp_outl->round > chirp_outl->round_setup))
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	d10c      	bne.n	8013f16 <chirp_recv+0x1f6>
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	795b      	ldrb	r3, [r3, #5]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d903      	bls.n	8013f16 <chirp_recv+0x1f6>
            PRINTF("output from initiator (collect):\n");
 8013f0e:	482d      	ldr	r0, [pc, #180]	; (8013fc4 <chirp_recv+0x2a4>)
 8013f10:	f00e f9d0 	bl	80222b4 <puts>
 8013f14:	e00e      	b.n	8013f34 <chirp_recv+0x214>
        else if (chirp_outl->task == CHIRP_TOPO)
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b04      	cmp	r3, #4
 8013f1c:	d103      	bne.n	8013f26 <chirp_recv+0x206>
            PRINTF("output from initiator (topology):\n");
 8013f1e:	482a      	ldr	r0, [pc, #168]	; (8013fc8 <chirp_recv+0x2a8>)
 8013f20:	f00e f9c8 	bl	80222b4 <puts>
 8013f24:	e006      	b.n	8013f34 <chirp_recv+0x214>
        else if (chirp_outl->task == CHIRP_VERSION)
 8013f26:	69bb      	ldr	r3, [r7, #24]
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	2b05      	cmp	r3, #5
 8013f2c:	d102      	bne.n	8013f34 <chirp_recv+0x214>
            PRINTF("output from initiator (version):\n");
 8013f2e:	4827      	ldr	r0, [pc, #156]	; (8013fcc <chirp_recv+0x2ac>)
 8013f30:	f00e f9c0 	bl	80222b4 <puts>
    }

    if  (chirp_outl->task == MX_DISSEMINATE)
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	f040 80dd 	bne.w	80140f8 <chirp_recv+0x3d8>
    {
        if ((!node_id) && (!chirp_outl->disem_flag))
 8013f3e:	7ffb      	ldrb	r3, [r7, #31]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d136      	bne.n	8013fb2 <chirp_recv+0x292>
 8013f44:	69bb      	ldr	r3, [r7, #24]
 8013f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d131      	bne.n	8013fb2 <chirp_recv+0x292>
        {
            memcpy((uint32_t *)&(firmware_bitmap_temp[0]), (uint32_t *)&(chirp_outl->firmware_bitmap[0]), DISSEM_BITMAP_32 * sizeof(uint32_t));
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	3318      	adds	r3, #24
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < chirp_config.my_column_mask.len; i++)
 8013f56:	2300      	movs	r3, #0
 8013f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f5a:	e013      	b.n	8013f84 <chirp_recv+0x264>
                mask_negative[i] = ~mx.request->mask[chirp_config.my_column_mask.pos + i];
 8013f5c:	4b17      	ldr	r3, [pc, #92]	; (8013fbc <chirp_recv+0x29c>)
 8013f5e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013f62:	4a15      	ldr	r2, [pc, #84]	; (8013fb8 <chirp_recv+0x298>)
 8013f64:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8013f68:	4611      	mov	r1, r2
 8013f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f6c:	440a      	add	r2, r1
 8013f6e:	3206      	adds	r2, #6
 8013f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f74:	43d9      	mvns	r1, r3
 8013f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (i = 0; i < chirp_config.my_column_mask.len; i++)
 8013f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f80:	3301      	adds	r3, #1
 8013f82:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f84:	4b0c      	ldr	r3, [pc, #48]	; (8013fb8 <chirp_recv+0x298>)
 8013f86:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d3e4      	bcc.n	8013f5c <chirp_recv+0x23c>
            pending = mx_request_clear((uint32_t *)&(firmware_bitmap_temp[0]), (uint_fast_t *)&(mask_negative[0]), DISSEM_BITMAP_32 * sizeof(uint32_t));
 8013f92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f98:	2204      	movs	r2, #4
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f004 fd28 	bl	80189f0 <mx_request_clear>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (pending == 0)
 8013fa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d103      	bne.n	8013fb2 <chirp_recv+0x292>
                chirp_config.full_column = 0;
 8013faa:	4b03      	ldr	r3, [pc, #12]	; (8013fb8 <chirp_recv+0x298>)
 8013fac:	2200      	movs	r2, #0
 8013fae:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        }

        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8013fb6:	e086      	b.n	80140c6 <chirp_recv+0x3a6>
 8013fb8:	20001430 	.word	0x20001430
 8013fbc:	200014f0 	.word	0x200014f0
 8013fc0:	08025444 	.word	0x08025444
 8013fc4:	08025464 	.word	0x08025464
 8013fc8:	08025488 	.word	0x08025488
 8013fcc:	080254ac 	.word	0x080254ac
        {
            void *p = mixer_read(i);
 8013fd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8013fd2:	f7fe fb8d 	bl	80126f0 <mixer_read>
 8013fd6:	6338      	str	r0, [r7, #48]	; 0x30
            if (NULL != p)
 8013fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d070      	beq.n	80140c0 <chirp_recv+0x3a0>
            {
                memcpy(receive_payload, p, chirp_config.matrix_payload_8.len);
 8013fde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013fe0:	4b83      	ldr	r3, [pc, #524]	; (80141f0 <chirp_recv+0x4d0>)
 8013fe2:	7edb      	ldrb	r3, [r3, #27]
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013fe8:	f00d fac4 	bl	8021574 <memcpy>
                calu_payload_hash = Chirp_RSHash((uint8_t *)receive_payload, chirp_config.matrix_payload_8.len - 2);
 8013fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fee:	4b80      	ldr	r3, [pc, #512]	; (80141f0 <chirp_recv+0x4d0>)
 8013ff0:	7edb      	ldrb	r3, [r3, #27]
 8013ff2:	3b02      	subs	r3, #2
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	4610      	mov	r0, r2
 8013ff8:	f00a fefc 	bl	801edf4 <Chirp_RSHash>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	4b7c      	ldr	r3, [pc, #496]	; (80141f4 <chirp_recv+0x4d4>)
 8014002:	801a      	strh	r2, [r3, #0]
                rece_hash = receive_payload[chirp_config.matrix_payload_8.len - 2] << 8 | receive_payload[chirp_config.matrix_payload_8.len - 1];
 8014004:	4b7a      	ldr	r3, [pc, #488]	; (80141f0 <chirp_recv+0x4d0>)
 8014006:	7edb      	ldrb	r3, [r3, #27]
 8014008:	3b02      	subs	r3, #2
 801400a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801400c:	5cd3      	ldrb	r3, [r2, r3]
 801400e:	021b      	lsls	r3, r3, #8
 8014010:	b21a      	sxth	r2, r3
 8014012:	4b77      	ldr	r3, [pc, #476]	; (80141f0 <chirp_recv+0x4d0>)
 8014014:	7edb      	ldrb	r3, [r3, #27]
 8014016:	3b01      	subs	r3, #1
 8014018:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801401a:	5ccb      	ldrb	r3, [r1, r3]
 801401c:	b21b      	sxth	r3, r3
 801401e:	4313      	orrs	r3, r2
 8014020:	b21b      	sxth	r3, r3
 8014022:	b29a      	uxth	r2, r3
 8014024:	4b74      	ldr	r3, [pc, #464]	; (80141f8 <chirp_recv+0x4d8>)
 8014026:	801a      	strh	r2, [r3, #0]
                PRINTF("rece_hash:%d, %x, %x, %d\n", i, rece_hash, (uint16_t)calu_payload_hash, chirp_config.matrix_payload_8.len);
 8014028:	4b73      	ldr	r3, [pc, #460]	; (80141f8 <chirp_recv+0x4d8>)
 801402a:	881b      	ldrh	r3, [r3, #0]
 801402c:	461a      	mov	r2, r3
 801402e:	4b71      	ldr	r3, [pc, #452]	; (80141f4 <chirp_recv+0x4d4>)
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	4619      	mov	r1, r3
 8014034:	4b6e      	ldr	r3, [pc, #440]	; (80141f0 <chirp_recv+0x4d0>)
 8014036:	7edb      	ldrb	r3, [r3, #27]
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	460b      	mov	r3, r1
 801403c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801403e:	486f      	ldr	r0, [pc, #444]	; (80141fc <chirp_recv+0x4dc>)
 8014040:	f00e f8b0 	bl	80221a4 <iprintf>
                if (((uint16_t)calu_payload_hash == rece_hash) && (rece_hash))
 8014044:	4b6b      	ldr	r3, [pc, #428]	; (80141f4 <chirp_recv+0x4d4>)
 8014046:	881a      	ldrh	r2, [r3, #0]
 8014048:	4b6b      	ldr	r3, [pc, #428]	; (80141f8 <chirp_recv+0x4d8>)
 801404a:	881b      	ldrh	r3, [r3, #0]
 801404c:	429a      	cmp	r2, r3
 801404e:	d137      	bne.n	80140c0 <chirp_recv+0x3a0>
 8014050:	4b69      	ldr	r3, [pc, #420]	; (80141f8 <chirp_recv+0x4d8>)
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d033      	beq.n	80140c0 <chirp_recv+0x3a0>
                {
                    rece_dissem_index = (receive_payload[ROUND_HEADER_LENGTH] << 8 | receive_payload[ROUND_HEADER_LENGTH + 1]);
 8014058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801405a:	791b      	ldrb	r3, [r3, #4]
 801405c:	021b      	lsls	r3, r3, #8
 801405e:	b21a      	sxth	r2, r3
 8014060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014062:	795b      	ldrb	r3, [r3, #5]
 8014064:	b21b      	sxth	r3, r3
 8014066:	4313      	orrs	r3, r2
 8014068:	b21b      	sxth	r3, r3
 801406a:	b29a      	uxth	r2, r3
 801406c:	4b64      	ldr	r3, [pc, #400]	; (8014200 <chirp_recv+0x4e0>)
 801406e:	801a      	strh	r2, [r3, #0]
                    if (rece_dissem_index >= chirp_outl->disem_file_max + 1)
 8014070:	4b63      	ldr	r3, [pc, #396]	; (8014200 <chirp_recv+0x4e0>)
 8014072:	881b      	ldrh	r3, [r3, #0]
 8014074:	461a      	mov	r2, r3
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801407c:	b29b      	uxth	r3, r3
 801407e:	3301      	adds	r3, #1
 8014080:	429a      	cmp	r2, r3
 8014082:	db08      	blt.n	8014096 <chirp_recv+0x376>
                        chirp_outl->disem_file_index++;
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801408a:	b29b      	uxth	r3, r3
 801408c:	3301      	adds	r3, #1
 801408e:	b29a      	uxth	r2, r3
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                    PRINTF("dissem_index:%d, %d\n", rece_dissem_index, chirp_outl->disem_file_index);
 8014096:	4b5a      	ldr	r3, [pc, #360]	; (8014200 <chirp_recv+0x4e0>)
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	4619      	mov	r1, r3
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	461a      	mov	r2, r3
 80140a6:	4857      	ldr	r0, [pc, #348]	; (8014204 <chirp_recv+0x4e4>)
 80140a8:	f00e f87c 	bl	80221a4 <iprintf>
                    round_hash++;
 80140ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80140b0:	3301      	adds	r3, #1
 80140b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                    PRINT_PACKET(p, DATA_HEADER_LENGTH, 1);
 80140b6:	2201      	movs	r2, #1
 80140b8:	2108      	movs	r1, #8
 80140ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140bc:	f7fe fbc0 	bl	8012840 <PRINT_PACKET>
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 80140c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80140c2:	3301      	adds	r3, #1
 80140c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80140c6:	4b4a      	ldr	r3, [pc, #296]	; (80141f0 <chirp_recv+0x4d0>)
 80140c8:	885b      	ldrh	r3, [r3, #2]
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	461a      	mov	r2, r3
 80140ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80140d0:	4293      	cmp	r3, r2
 80140d2:	f4ff af7d 	bcc.w	8013fd0 <chirp_recv+0x2b0>
                }
            }
        }

        if (round_hash == chirp_config.mx_generation_size)
 80140d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80140da:	b29a      	uxth	r2, r3
 80140dc:	4b44      	ldr	r3, [pc, #272]	; (80141f0 <chirp_recv+0x4d0>)
 80140de:	885b      	ldrh	r3, [r3, #2]
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d104      	bne.n	80140f0 <chirp_recv+0x3d0>
            chirp_config.full_rank = 1;
 80140e6:	4b42      	ldr	r3, [pc, #264]	; (80141f0 <chirp_recv+0x4d0>)
 80140e8:	2201      	movs	r2, #1
 80140ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80140ee:	e003      	b.n	80140f8 <chirp_recv+0x3d8>
        else
        {
            mx.stat_counter.slot_decoded = 0;
 80140f0:	4b45      	ldr	r3, [pc, #276]	; (8014208 <chirp_recv+0x4e8>)
 80140f2:	2200      	movs	r2, #0
 80140f4:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
        }
    }
	if (chirp_config.primitive != FLOODING)
 80140f8:	4b3d      	ldr	r3, [pc, #244]	; (80141f0 <chirp_recv+0x4d0>)
 80140fa:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d005      	beq.n	801410e <chirp_recv+0x3ee>
	{
        free(mx.request);
 8014102:	4b41      	ldr	r3, [pc, #260]	; (8014208 <chirp_recv+0x4e8>)
 8014104:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014108:	4618      	mov	r0, r3
 801410a:	f00d fa2b 	bl	8021564 <free>
    }

    if (((chirp_config.full_rank) && (chirp_outl->task == MX_DISSEMINATE)) || (chirp_outl->task != MX_DISSEMINATE))
 801410e:	4b38      	ldr	r3, [pc, #224]	; (80141f0 <chirp_recv+0x4d0>)
 8014110:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8014114:	2b00      	cmp	r3, #0
 8014116:	d003      	beq.n	8014120 <chirp_recv+0x400>
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	2b01      	cmp	r3, #1
 801411e:	d004      	beq.n	801412a <chirp_recv+0x40a>
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b01      	cmp	r3, #1
 8014126:	f000 84fa 	beq.w	8014b1e <chirp_recv+0xdfe>
    {
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 801412a:	2300      	movs	r3, #0
 801412c:	65bb      	str	r3, [r7, #88]	; 0x58
 801412e:	f000 bcee 	b.w	8014b0e <chirp_recv+0xdee>
        {
            void *p = mixer_read(i);
 8014132:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8014134:	f7fe fadc 	bl	80126f0 <mixer_read>
 8014138:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (NULL != p)
 801413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 84e3 	beq.w	8014b08 <chirp_recv+0xde8>
            {
                memcpy(data, p, sizeof(data));
 8014142:	4b32      	ldr	r3, [pc, #200]	; (801420c <chirp_recv+0x4ec>)
 8014144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014146:	6810      	ldr	r0, [r2, #0]
 8014148:	6851      	ldr	r1, [r2, #4]
 801414a:	c303      	stmia	r3!, {r0, r1}
                if (chirp_outl->task != MX_DISSEMINATE)
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b01      	cmp	r3, #1
 8014152:	d032      	beq.n	80141ba <chirp_recv+0x49a>
                {
                    memcpy(receive_payload, p, chirp_config.matrix_payload_8.len);
 8014154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014156:	4b26      	ldr	r3, [pc, #152]	; (80141f0 <chirp_recv+0x4d0>)
 8014158:	7edb      	ldrb	r3, [r3, #27]
 801415a:	461a      	mov	r2, r3
 801415c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801415e:	f00d fa09 	bl	8021574 <memcpy>
                    calu_payload_hash = Chirp_RSHash((uint8_t *)receive_payload, chirp_config.matrix_payload_8.len - 2);
 8014162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014164:	4b22      	ldr	r3, [pc, #136]	; (80141f0 <chirp_recv+0x4d0>)
 8014166:	7edb      	ldrb	r3, [r3, #27]
 8014168:	3b02      	subs	r3, #2
 801416a:	4619      	mov	r1, r3
 801416c:	4610      	mov	r0, r2
 801416e:	f00a fe41 	bl	801edf4 <Chirp_RSHash>
 8014172:	4603      	mov	r3, r0
 8014174:	b29a      	uxth	r2, r3
 8014176:	4b1f      	ldr	r3, [pc, #124]	; (80141f4 <chirp_recv+0x4d4>)
 8014178:	801a      	strh	r2, [r3, #0]
                    rece_hash = receive_payload[chirp_config.matrix_payload_8.len - 2] << 8 | receive_payload[chirp_config.matrix_payload_8.len - 1];
 801417a:	4b1d      	ldr	r3, [pc, #116]	; (80141f0 <chirp_recv+0x4d0>)
 801417c:	7edb      	ldrb	r3, [r3, #27]
 801417e:	3b02      	subs	r3, #2
 8014180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014182:	5cd3      	ldrb	r3, [r2, r3]
 8014184:	021b      	lsls	r3, r3, #8
 8014186:	b21a      	sxth	r2, r3
 8014188:	4b19      	ldr	r3, [pc, #100]	; (80141f0 <chirp_recv+0x4d0>)
 801418a:	7edb      	ldrb	r3, [r3, #27]
 801418c:	3b01      	subs	r3, #1
 801418e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014190:	5ccb      	ldrb	r3, [r1, r3]
 8014192:	b21b      	sxth	r3, r3
 8014194:	4313      	orrs	r3, r2
 8014196:	b21b      	sxth	r3, r3
 8014198:	b29a      	uxth	r2, r3
 801419a:	4b17      	ldr	r3, [pc, #92]	; (80141f8 <chirp_recv+0x4d8>)
 801419c:	801a      	strh	r2, [r3, #0]
                    PRINTF("rece_hash:%d, %x, %x, %d\n", i, rece_hash, (uint16_t)calu_payload_hash, chirp_config.matrix_payload_8.len);
 801419e:	4b16      	ldr	r3, [pc, #88]	; (80141f8 <chirp_recv+0x4d8>)
 80141a0:	881b      	ldrh	r3, [r3, #0]
 80141a2:	461a      	mov	r2, r3
 80141a4:	4b13      	ldr	r3, [pc, #76]	; (80141f4 <chirp_recv+0x4d4>)
 80141a6:	881b      	ldrh	r3, [r3, #0]
 80141a8:	4619      	mov	r1, r3
 80141aa:	4b11      	ldr	r3, [pc, #68]	; (80141f0 <chirp_recv+0x4d0>)
 80141ac:	7edb      	ldrb	r3, [r3, #27]
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	460b      	mov	r3, r1
 80141b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80141b4:	4811      	ldr	r0, [pc, #68]	; (80141fc <chirp_recv+0x4dc>)
 80141b6:	f00d fff5 	bl	80221a4 <iprintf>
                }
                // PRINT_PACKET(data, DATA_HEADER_LENGTH, 1);
                packet_correct = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if ((data[DATA_HEADER_LENGTH - 1] == chirp_outl->task))
 80141c0:	4b12      	ldr	r3, [pc, #72]	; (801420c <chirp_recv+0x4ec>)
 80141c2:	79da      	ldrb	r2, [r3, #7]
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d128      	bne.n	801421e <chirp_recv+0x4fe>
                {
                    if ((chirp_outl->task != MX_DISSEMINATE) && ((uint16_t)calu_payload_hash == rece_hash) && (rece_hash))
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d01d      	beq.n	8014210 <chirp_recv+0x4f0>
 80141d4:	4b07      	ldr	r3, [pc, #28]	; (80141f4 <chirp_recv+0x4d4>)
 80141d6:	881a      	ldrh	r2, [r3, #0]
 80141d8:	4b07      	ldr	r3, [pc, #28]	; (80141f8 <chirp_recv+0x4d8>)
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d117      	bne.n	8014210 <chirp_recv+0x4f0>
 80141e0:	4b05      	ldr	r3, [pc, #20]	; (80141f8 <chirp_recv+0x4d8>)
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d013      	beq.n	8014210 <chirp_recv+0x4f0>
                        packet_correct = 1;
 80141e8:	2301      	movs	r3, #1
 80141ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80141ee:	e016      	b.n	801421e <chirp_recv+0x4fe>
 80141f0:	20001430 	.word	0x20001430
 80141f4:	20001e26 	.word	0x20001e26
 80141f8:	20001da0 	.word	0x20001da0
 80141fc:	080254d0 	.word	0x080254d0
 8014200:	20000470 	.word	0x20000470
 8014204:	080254ec 	.word	0x080254ec
 8014208:	200014f0 	.word	0x200014f0
 801420c:	20000464 	.word	0x20000464
                    else if (chirp_outl->task == MX_DISSEMINATE)
 8014210:	69bb      	ldr	r3, [r7, #24]
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d102      	bne.n	801421e <chirp_recv+0x4fe>
                        packet_correct = 1;
 8014218:	2301      	movs	r3, #1
 801421a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                }
                if (packet_correct)
 801421e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 8470 	beq.w	8014b08 <chirp_recv+0xde8>
                {
                    /* print packet */
                    PRINT_PACKET(data, DATA_HEADER_LENGTH, 1);
 8014228:	2201      	movs	r2, #1
 801422a:	2108      	movs	r1, #8
 801422c:	4880      	ldr	r0, [pc, #512]	; (8014430 <chirp_recv+0x710>)
 801422e:	f7fe fb07 	bl	8012840 <PRINT_PACKET>
                    if (chirp_outl->task != MX_ARRANGE)
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	2b06      	cmp	r3, #6
 8014238:	d022      	beq.n	8014280 <chirp_recv+0x560>
                    {
                        /* check/adapt round number by message 0 (initiator) */
                        if ((0 == i) && (chirp_outl->payload_len >= 7))
 801423a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801423c:	2b00      	cmp	r3, #0
 801423e:	d11f      	bne.n	8014280 <chirp_recv+0x560>
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014246:	2b06      	cmp	r3, #6
 8014248:	d91a      	bls.n	8014280 <chirp_recv+0x560>
                        {
                            Generic32	r;
                            r.u8_ll = data[2];
 801424a:	4b79      	ldr	r3, [pc, #484]	; (8014430 <chirp_recv+0x710>)
 801424c:	789b      	ldrb	r3, [r3, #2]
 801424e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                            r.u8_lh = data[1];
 8014252:	4b77      	ldr	r3, [pc, #476]	; (8014430 <chirp_recv+0x710>)
 8014254:	785b      	ldrb	r3, [r3, #1]
 8014256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                            r.u8_hl = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                            r.u8_hh = 0;
 8014260:	2300      	movs	r3, #0
 8014262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            if (chirp_outl->round != r.u32)
 8014266:	69bb      	ldr	r3, [r7, #24]
 8014268:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801426c:	b29b      	uxth	r3, r3
 801426e:	461a      	mov	r2, r3
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	429a      	cmp	r2, r3
 8014274:	d004      	beq.n	8014280 <chirp_recv+0x560>
                                chirp_outl->round = r.u32;
 8014276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014278:	b29a      	uxth	r2, r3
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	f8a3 2001 	strh.w	r2, [r3, #1]
                        }
                    }
                    if (chirp_outl->task != MX_DISSEMINATE)
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d002      	beq.n	801428e <chirp_recv+0x56e>
                        k = ROUND_HEADER_LENGTH;
 8014288:	2304      	movs	r3, #4
 801428a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                    switch (chirp_outl->task)
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	2b06      	cmp	r3, #6
 8014294:	f200 8415 	bhi.w	8014ac2 <chirp_recv+0xda2>
 8014298:	a201      	add	r2, pc, #4	; (adr r2, 80142a0 <chirp_recv+0x580>)
 801429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801429e:	bf00      	nop
 80142a0:	080142bd 	.word	0x080142bd
 80142a4:	08014439 	.word	0x08014439
 80142a8:	080147f1 	.word	0x080147f1
 80142ac:	0801494b 	.word	0x0801494b
 80142b0:	080147f1 	.word	0x080147f1
 80142b4:	080149ad 	.word	0x080149ad
 80142b8:	080149d9 	.word	0x080149d9
                    {
                        case CHIRP_START:
                        {
                            if (node_id)
 80142bc:	7ffb      	ldrb	r3, [r7, #31]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f000 8401 	beq.w	8014ac6 <chirp_recv+0xda6>
                            {
                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 80142c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80142c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c8:	3308      	adds	r3, #8
 80142ca:	4632      	mov	r2, r6
 80142cc:	4619      	mov	r1, r3
 80142ce:	f00d f951 	bl	8021574 <memcpy>
                                chirp_outl->start_year = (task_data[0] << 8) | (task_data[1]);
 80142d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	021b      	lsls	r3, r3, #8
 80142d8:	b21a      	sxth	r2, r3
 80142da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142dc:	785b      	ldrb	r3, [r3, #1]
 80142de:	b21b      	sxth	r3, r3
 80142e0:	4313      	orrs	r3, r2
 80142e2:	b21b      	sxth	r3, r3
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	851a      	strh	r2, [r3, #40]	; 0x28
                                chirp_outl->start_month = task_data[2];
 80142ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142ec:	789a      	ldrb	r2, [r3, #2]
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                chirp_outl->start_date = task_data[3];
 80142f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f6:	78da      	ldrb	r2, [r3, #3]
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                chirp_outl->start_hour = task_data[4];
 80142fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014300:	791a      	ldrb	r2, [r3, #4]
 8014302:	69bb      	ldr	r3, [r7, #24]
 8014304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                                chirp_outl->start_min = task_data[5];
 8014308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801430a:	795a      	ldrb	r2, [r3, #5]
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                chirp_outl->start_sec = task_data[6];
 8014312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014314:	799a      	ldrb	r2, [r3, #6]
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                chirp_outl->end_year = (task_data[7] << 8) | (task_data[8]);
 801431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801431e:	79db      	ldrb	r3, [r3, #7]
 8014320:	021b      	lsls	r3, r3, #8
 8014322:	b21a      	sxth	r2, r3
 8014324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014326:	7a1b      	ldrb	r3, [r3, #8]
 8014328:	b21b      	sxth	r3, r3
 801432a:	4313      	orrs	r3, r2
 801432c:	b21b      	sxth	r3, r3
 801432e:	b29a      	uxth	r2, r3
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	f8a3 202f 	strh.w	r2, [r3, #47]	; 0x2f
                                chirp_outl->end_month = task_data[9];
 8014336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014338:	7a5a      	ldrb	r2, [r3, #9]
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                chirp_outl->end_date = task_data[10];
 8014340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014342:	7a9a      	ldrb	r2, [r3, #10]
 8014344:	69bb      	ldr	r3, [r7, #24]
 8014346:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                                chirp_outl->end_hour = task_data[11];
 801434a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801434c:	7ada      	ldrb	r2, [r3, #11]
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                chirp_outl->end_min = task_data[12];
 8014354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014356:	7b1a      	ldrb	r2, [r3, #12]
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                chirp_outl->end_sec = task_data[13];
 801435e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014360:	7b5a      	ldrb	r2, [r3, #13]
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                chirp_outl->flash_protection = task_data[14];
 8014368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801436a:	7b9a      	ldrb	r2, [r3, #14]
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                chirp_outl->version_hash = (task_data[15] << 8) | (task_data[16]);
 8014372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014374:	7bdb      	ldrb	r3, [r3, #15]
 8014376:	021b      	lsls	r3, r3, #8
 8014378:	b21a      	sxth	r2, r3
 801437a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801437c:	7c1b      	ldrb	r3, [r3, #16]
 801437e:	b21b      	sxth	r3, r3
 8014380:	4313      	orrs	r3, r2
 8014382:	b21b      	sxth	r3, r3
 8014384:	b29a      	uxth	r2, r3
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                                PRINTF("\t receive, START at %d-%d-%d, %d:%d:%d\n\tEnd at %d-%d-%d, %d:%d:%d\n, flash_protection:%d, v:%x\n", chirp_outl->start_year, chirp_outl->start_month, chirp_outl->start_date, chirp_outl->start_hour, chirp_outl->start_min, chirp_outl->start_sec, chirp_outl->end_year, chirp_outl->end_month, chirp_outl->end_date, chirp_outl->end_hour, chirp_outl->end_min, chirp_outl->end_sec, chirp_outl->flash_protection, chirp_outl->version_hash);
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014390:	b29b      	uxth	r3, r3
 8014392:	469c      	mov	ip, r3
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801439a:	469e      	mov	lr, r3
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80143a2:	4699      	mov	r9, r3
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143aa:	461c      	mov	r4, r3
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143b2:	617b      	str	r3, [r7, #20]
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80143ba:	613b      	str	r3, [r7, #16]
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	60fb      	str	r3, [r7, #12]
 80143c6:	69bb      	ldr	r3, [r7, #24]
 80143c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143cc:	60bb      	str	r3, [r7, #8]
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80143d4:	607b      	str	r3, [r7, #4]
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80143dc:	603b      	str	r3, [r7, #0]
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80143e4:	4618      	mov	r0, r3
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80143ec:	4619      	mov	r1, r3
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80143f4:	461a      	mov	r2, r3
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014400:	9209      	str	r2, [sp, #36]	; 0x24
 8014402:	9108      	str	r1, [sp, #32]
 8014404:	9007      	str	r0, [sp, #28]
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	9206      	str	r2, [sp, #24]
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	9205      	str	r2, [sp, #20]
 801440e:	68ba      	ldr	r2, [r7, #8]
 8014410:	9204      	str	r2, [sp, #16]
 8014412:	68fa      	ldr	r2, [r7, #12]
 8014414:	9203      	str	r2, [sp, #12]
 8014416:	693a      	ldr	r2, [r7, #16]
 8014418:	9202      	str	r2, [sp, #8]
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	9301      	str	r3, [sp, #4]
 801441e:	9400      	str	r4, [sp, #0]
 8014420:	464b      	mov	r3, r9
 8014422:	4672      	mov	r2, lr
 8014424:	4661      	mov	r1, ip
 8014426:	4803      	ldr	r0, [pc, #12]	; (8014434 <chirp_recv+0x714>)
 8014428:	f00d febc 	bl	80221a4 <iprintf>
                            }
                            break;
 801442c:	e34b      	b.n	8014ac6 <chirp_recv+0xda6>
 801442e:	bf00      	nop
 8014430:	20000464 	.word	0x20000464
 8014434:	08025504 	.word	0x08025504
                        }
                        case MX_DISSEMINATE:
                        {
                            /* MX_DISSEMINATE */
                            if (!chirp_outl->disem_file_index)
 8014438:	69bb      	ldr	r3, [r7, #24]
 801443a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801443e:	b29b      	uxth	r3, r3
 8014440:	2b00      	cmp	r3, #0
 8014442:	f040 8121 	bne.w	8014688 <chirp_recv+0x968>
                            {
                                if (node_id)
 8014446:	7ffb      	ldrb	r3, [r7, #31]
 8014448:	2b00      	cmp	r3, #0
 801444a:	f000 833e 	beq.w	8014aca <chirp_recv+0xdaa>
                                {
                                    /* compare / increase the index */
                                    if (chirp_outl->disem_file_index == (data[ROUND_HEADER_LENGTH] << 8 | data[ROUND_HEADER_LENGTH + 1]))
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014454:	b29b      	uxth	r3, r3
 8014456:	4619      	mov	r1, r3
 8014458:	4bb4      	ldr	r3, [pc, #720]	; (801472c <chirp_recv+0xa0c>)
 801445a:	791b      	ldrb	r3, [r3, #4]
 801445c:	021b      	lsls	r3, r3, #8
 801445e:	4ab3      	ldr	r2, [pc, #716]	; (801472c <chirp_recv+0xa0c>)
 8014460:	7952      	ldrb	r2, [r2, #5]
 8014462:	4313      	orrs	r3, r2
 8014464:	4299      	cmp	r1, r3
 8014466:	f040 8330 	bne.w	8014aca <chirp_recv+0xdaa>
                                    {
                                        if (i == 0)
 801446a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801446c:	2b00      	cmp	r3, #0
 801446e:	f040 80f1 	bne.w	8014654 <chirp_recv+0x934>
                                        {
                                            memcpy(&(chirp_outl->disem_file_memory[0]), (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(file_data));
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	f8d3 0065 	ldr.w	r0, [r3, #101]	; 0x65
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	3308      	adds	r3, #8
 801447c:	00aa      	lsls	r2, r5, #2
 801447e:	4619      	mov	r1, r3
 8014480:	f00d f878 	bl	8021574 <memcpy>

                                            memcpy(data, &(chirp_outl->disem_file_memory[0]), DATA_HEADER_LENGTH + 1);
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 801448a:	2209      	movs	r2, #9
 801448c:	4619      	mov	r1, r3
 801448e:	48a7      	ldr	r0, [pc, #668]	; (801472c <chirp_recv+0xa0c>)
 8014490:	f00d f870 	bl	8021574 <memcpy>
                                            chirp_outl->firmware_size = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);
 8014494:	4ba5      	ldr	r3, [pc, #660]	; (801472c <chirp_recv+0xa0c>)
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	061a      	lsls	r2, r3, #24
 801449a:	4ba4      	ldr	r3, [pc, #656]	; (801472c <chirp_recv+0xa0c>)
 801449c:	785b      	ldrb	r3, [r3, #1]
 801449e:	041b      	lsls	r3, r3, #16
 80144a0:	431a      	orrs	r2, r3
 80144a2:	4ba2      	ldr	r3, [pc, #648]	; (801472c <chirp_recv+0xa0c>)
 80144a4:	789b      	ldrb	r3, [r3, #2]
 80144a6:	021b      	lsls	r3, r3, #8
 80144a8:	4313      	orrs	r3, r2
 80144aa:	4aa0      	ldr	r2, [pc, #640]	; (801472c <chirp_recv+0xa0c>)
 80144ac:	78d2      	ldrb	r2, [r2, #3]
 80144ae:	4313      	orrs	r3, r2
 80144b0:	461a      	mov	r2, r3
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	63da      	str	r2, [r3, #60]	; 0x3c
                                            chirp_outl->patch_update = data[4];
 80144b6:	4b9d      	ldr	r3, [pc, #628]	; (801472c <chirp_recv+0xa0c>)
 80144b8:	791a      	ldrb	r2, [r3, #4]
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                                            chirp_outl->patch_bank = data[5];
 80144c0:	4b9a      	ldr	r3, [pc, #616]	; (801472c <chirp_recv+0xa0c>)
 80144c2:	795a      	ldrb	r2, [r3, #5]
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                            chirp_outl->disem_file_max = (chirp_outl->firmware_size + chirp_outl->file_chunk_len - 1) / chirp_outl->file_chunk_len  + 1;
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144ce:	69ba      	ldr	r2, [r7, #24]
 80144d0:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80144d2:	b292      	uxth	r2, r2
 80144d4:	4413      	add	r3, r2
 80144d6:	3b01      	subs	r3, #1
 80144d8:	69ba      	ldr	r2, [r7, #24]
 80144da:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80144dc:	b292      	uxth	r2, r2
 80144de:	fbb3 f3f2 	udiv	r3, r3, r2
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	3301      	adds	r3, #1
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                            chirp_outl->version_hash = (data[6] << 8) | (data[7]);
 80144ee:	4b8f      	ldr	r3, [pc, #572]	; (801472c <chirp_recv+0xa0c>)
 80144f0:	799b      	ldrb	r3, [r3, #6]
 80144f2:	021b      	lsls	r3, r3, #8
 80144f4:	b21a      	sxth	r2, r3
 80144f6:	4b8d      	ldr	r3, [pc, #564]	; (801472c <chirp_recv+0xa0c>)
 80144f8:	79db      	ldrb	r3, [r3, #7]
 80144fa:	b21b      	sxth	r3, r3
 80144fc:	4313      	orrs	r3, r2
 80144fe:	b21b      	sxth	r3, r3
 8014500:	b29a      	uxth	r2, r3
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                                            chirp_outl->file_compression = data[8];
 8014508:	4b88      	ldr	r3, [pc, #544]	; (801472c <chirp_recv+0xa0c>)
 801450a:	7a1b      	ldrb	r3, [r3, #8]
 801450c:	461a      	mov	r2, r3
 801450e:	69bb      	ldr	r3, [r7, #24]
 8014510:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
                                            PRINTF("version_hash:%x, %x, %x\n", chirp_outl->version_hash, data[6], data[7]);
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801451a:	b29b      	uxth	r3, r3
 801451c:	4619      	mov	r1, r3
 801451e:	4b83      	ldr	r3, [pc, #524]	; (801472c <chirp_recv+0xa0c>)
 8014520:	799b      	ldrb	r3, [r3, #6]
 8014522:	461a      	mov	r2, r3
 8014524:	4b81      	ldr	r3, [pc, #516]	; (801472c <chirp_recv+0xa0c>)
 8014526:	79db      	ldrb	r3, [r3, #7]
 8014528:	4881      	ldr	r0, [pc, #516]	; (8014730 <chirp_recv+0xa10>)
 801452a:	f00d fe3b 	bl	80221a4 <iprintf>
                                            PRINTF("MX_DISSEMINATE: %lu, %d, %d, %d, %lu\n", chirp_outl->firmware_size, chirp_outl->patch_update, chirp_outl->disem_file_max, chirp_outl->file_chunk_len, chirp_outl->file_compression);
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014538:	4618      	mov	r0, r3
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014540:	b29b      	uxth	r3, r3
 8014542:	461c      	mov	r4, r3
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014548:	b29b      	uxth	r3, r3
 801454a:	461a      	mov	r2, r3
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 8014552:	9301      	str	r3, [sp, #4]
 8014554:	9200      	str	r2, [sp, #0]
 8014556:	4623      	mov	r3, r4
 8014558:	4602      	mov	r2, r0
 801455a:	4876      	ldr	r0, [pc, #472]	; (8014734 <chirp_recv+0xa14>)
 801455c:	f00d fe22 	bl	80221a4 <iprintf>

                                            memcpy(&(chirp_outl->firmware_md5[0]), (uint8_t *)(p + 17), 16);
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014568:	3311      	adds	r3, #17
 801456a:	2210      	movs	r2, #16
 801456c:	4619      	mov	r1, r3
 801456e:	f00d f801 	bl	8021574 <memcpy>
                                            /* update whole firmware */
                                            if ((!chirp_outl->patch_update) && (i == 0))
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014578:	2b00      	cmp	r3, #0
 801457a:	d110      	bne.n	801459e <chirp_recv+0x87e>
 801457c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801457e:	2b00      	cmp	r3, #0
 8014580:	d10d      	bne.n	801459e <chirp_recv+0x87e>
                                            {
                                                menu_preSend(1);
 8014582:	2001      	movs	r0, #1
 8014584:	f008 fdd8 	bl	801d138 <menu_preSend>
                                                file_data[0] = chirp_outl->firmware_size;
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801458c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801458e:	601a      	str	r2, [r3, #0]
                                                // PRINTF("whole firmware_size:%lu\n", chirp_outl->firmware_size);
                                                FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)file_data, 2);
 8014590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014592:	2202      	movs	r2, #2
 8014594:	4619      	mov	r1, r3
 8014596:	4868      	ldr	r0, [pc, #416]	; (8014738 <chirp_recv+0xa18>)
 8014598:	f007 ffd4 	bl	801c544 <FLASH_If_Write>
                                            {
 801459c:	e05a      	b.n	8014654 <chirp_recv+0x934>
                                            }
                                            /* patch firmware */
                                            else if ((chirp_outl->patch_update) && (i == 0))
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d055      	beq.n	8014654 <chirp_recv+0x934>
 80145a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d152      	bne.n	8014654 <chirp_recv+0x934>
                                            {
                                                memcpy(data, &(chirp_outl->disem_file_memory[7]), 4);
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 80145b4:	331c      	adds	r3, #28
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	461a      	mov	r2, r3
 80145ba:	4b5c      	ldr	r3, [pc, #368]	; (801472c <chirp_recv+0xa0c>)
 80145bc:	601a      	str	r2, [r3, #0]
                                                k = 0;
 80145be:	2300      	movs	r3, #0
 80145c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

                                                chirp_outl->old_firmware_size = (data[k++] << 24) | (data[k++] << 16) | (data[k++] << 8) | (data[k++]);
 80145c4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80145c8:	1c5a      	adds	r2, r3, #1
 80145ca:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 80145ce:	461a      	mov	r2, r3
 80145d0:	4b56      	ldr	r3, [pc, #344]	; (801472c <chirp_recv+0xa0c>)
 80145d2:	5c9b      	ldrb	r3, [r3, r2]
 80145d4:	061a      	lsls	r2, r3, #24
 80145d6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80145da:	1c59      	adds	r1, r3, #1
 80145dc:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 80145e0:	4619      	mov	r1, r3
 80145e2:	4b52      	ldr	r3, [pc, #328]	; (801472c <chirp_recv+0xa0c>)
 80145e4:	5c5b      	ldrb	r3, [r3, r1]
 80145e6:	041b      	lsls	r3, r3, #16
 80145e8:	431a      	orrs	r2, r3
 80145ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80145ee:	1c59      	adds	r1, r3, #1
 80145f0:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 80145f4:	4619      	mov	r1, r3
 80145f6:	4b4d      	ldr	r3, [pc, #308]	; (801472c <chirp_recv+0xa0c>)
 80145f8:	5c5b      	ldrb	r3, [r3, r1]
 80145fa:	021b      	lsls	r3, r3, #8
 80145fc:	431a      	orrs	r2, r3
 80145fe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014602:	1c59      	adds	r1, r3, #1
 8014604:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 8014608:	4619      	mov	r1, r3
 801460a:	4b48      	ldr	r3, [pc, #288]	; (801472c <chirp_recv+0xa0c>)
 801460c:	5c5b      	ldrb	r3, [r3, r1]
 801460e:	4313      	orrs	r3, r2
 8014610:	461a      	mov	r2, r3
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	f8c3 2059 	str.w	r2, [r3, #89]	; 0x59
                                                k = 0;
 8014618:	2300      	movs	r3, #0
 801461a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                                                chirp_outl->patch_page = menu_pre_patch(chirp_outl->patch_bank, chirp_outl->old_firmware_size, chirp_outl->firmware_size);
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8014624:	4618      	mov	r0, r3
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014630:	461a      	mov	r2, r3
 8014632:	f008 ff49 	bl	801d4c8 <menu_pre_patch>
 8014636:	4603      	mov	r3, r0
 8014638:	b2da      	uxtb	r2, r3
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                                                PRINTF("patch:%lu, %d\n", chirp_outl->old_firmware_size, chirp_outl->patch_page);
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801464c:	461a      	mov	r2, r3
 801464e:	483b      	ldr	r0, [pc, #236]	; (801473c <chirp_recv+0xa1c>)
 8014650:	f00d fda8 	bl	80221a4 <iprintf>
                                            }
                                        }
                                        if (i == chirp_outl->generation_size - 1)
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801465a:	3b01      	subs	r3, #1
 801465c:	461a      	mov	r2, r3
 801465e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014660:	4293      	cmp	r3, r2
 8014662:	f040 8232 	bne.w	8014aca <chirp_recv+0xdaa>
                                        {
                                            chirp_outl->disem_file_index++;
 8014666:	69bb      	ldr	r3, [r7, #24]
 8014668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801466c:	b29b      	uxth	r3, r3
 801466e:	3301      	adds	r3, #1
 8014670:	b29a      	uxth	r2, r3
 8014672:	69bb      	ldr	r3, [r7, #24]
 8014674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                                            chirp_outl->disem_file_index_stay = 0;
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	2200      	movs	r2, #0
 801467c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8014680:	2200      	movs	r2, #0
 8014682:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                                            chirp_outl->disem_file_index_stay = 0;
                                        }
                                    }
                                }
                            }
                            break;
 8014686:	e220      	b.n	8014aca <chirp_recv+0xdaa>
                            else if (chirp_outl->disem_file_index)
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801468e:	b29b      	uxth	r3, r3
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 821a 	beq.w	8014aca <chirp_recv+0xdaa>
                                if (node_id)
 8014696:	7ffb      	ldrb	r3, [r7, #31]
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 8216 	beq.w	8014aca <chirp_recv+0xdaa>
                                    if (chirp_outl->disem_file_index == (data[ROUND_HEADER_LENGTH] << 8 | data[ROUND_HEADER_LENGTH + 1]))
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	4619      	mov	r1, r3
 80146a8:	4b20      	ldr	r3, [pc, #128]	; (801472c <chirp_recv+0xa0c>)
 80146aa:	791b      	ldrb	r3, [r3, #4]
 80146ac:	021b      	lsls	r3, r3, #8
 80146ae:	4a1f      	ldr	r2, [pc, #124]	; (801472c <chirp_recv+0xa0c>)
 80146b0:	7952      	ldrb	r2, [r2, #5]
 80146b2:	4313      	orrs	r3, r2
 80146b4:	4299      	cmp	r1, r3
 80146b6:	f040 8208 	bne.w	8014aca <chirp_recv+0xdaa>
                                        PRINTF("write\n");
 80146ba:	4821      	ldr	r0, [pc, #132]	; (8014740 <chirp_recv+0xa20>)
 80146bc:	f00d fdfa 	bl	80222b4 <puts>
                                        memcpy(&(chirp_outl->disem_file_memory[i * sizeof(file_data) / sizeof(uint32_t)]), (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(file_data));
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	f8d3 2065 	ldr.w	r2, [r3, #101]	; 0x65
 80146c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146c8:	fb03 f305 	mul.w	r3, r3, r5
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	18d0      	adds	r0, r2, r3
 80146d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d2:	3308      	adds	r3, #8
 80146d4:	00aa      	lsls	r2, r5, #2
 80146d6:	4619      	mov	r1, r3
 80146d8:	f00c ff4c 	bl	8021574 <memcpy>
                                        if (i == chirp_outl->generation_size - 1)
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80146e2:	3b01      	subs	r3, #1
 80146e4:	461a      	mov	r2, r3
 80146e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146e8:	4293      	cmp	r3, r2
 80146ea:	f040 81ee 	bne.w	8014aca <chirp_recv+0xdaa>
                                            if (!chirp_outl->patch_update)
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d125      	bne.n	8014744 <chirp_recv+0xa24>
                                                FLASH_If_Write(FLASH_START_BANK2 + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146fe:	b29b      	uxth	r3, r3
 8014700:	3b01      	subs	r3, #1
 8014702:	69ba      	ldr	r2, [r7, #24]
 8014704:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8014706:	b292      	uxth	r2, r2
 8014708:	fb02 f303 	mul.w	r3, r2, r3
 801470c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8014710:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8014714:	69ba      	ldr	r2, [r7, #24]
 8014716:	f8d2 1065 	ldr.w	r1, [r2, #101]	; 0x65
 801471a:	69ba      	ldr	r2, [r7, #24]
 801471c:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 801471e:	b292      	uxth	r2, r2
 8014720:	0892      	lsrs	r2, r2, #2
 8014722:	b292      	uxth	r2, r2
 8014724:	4618      	mov	r0, r3
 8014726:	f007 ff0d 	bl	801c544 <FLASH_If_Write>
 801472a:	e050      	b.n	80147ce <chirp_recv+0xaae>
 801472c:	20000464 	.word	0x20000464
 8014730:	08025564 	.word	0x08025564
 8014734:	08025580 	.word	0x08025580
 8014738:	080fe800 	.word	0x080fe800
 801473c:	080255a8 	.word	0x080255a8
 8014740:	080255b8 	.word	0x080255b8
                                            else if (chirp_outl->patch_update)
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801474a:	2b00      	cmp	r3, #0
 801474c:	d03f      	beq.n	80147ce <chirp_recv+0xaae>
                                                if (!chirp_outl->patch_bank)
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8014754:	2b00      	cmp	r3, #0
 8014756:	d11c      	bne.n	8014792 <chirp_recv+0xa72>
                                                    FLASH_If_Write(FLASH_START_BANK1 + chirp_outl->patch_page * FLASH_PAGE + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801475e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8014762:	02db      	lsls	r3, r3, #11
 8014764:	69ba      	ldr	r2, [r7, #24]
 8014766:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 801476a:	b292      	uxth	r2, r2
 801476c:	3a01      	subs	r2, #1
 801476e:	69b9      	ldr	r1, [r7, #24]
 8014770:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8014772:	b289      	uxth	r1, r1
 8014774:	fb01 f202 	mul.w	r2, r1, r2
 8014778:	1898      	adds	r0, r3, r2
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	f8d3 1065 	ldr.w	r1, [r3, #101]	; 0x65
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014784:	b29b      	uxth	r3, r3
 8014786:	089b      	lsrs	r3, r3, #2
 8014788:	b29b      	uxth	r3, r3
 801478a:	461a      	mov	r2, r3
 801478c:	f007 feda 	bl	801c544 <FLASH_If_Write>
 8014790:	e01d      	b.n	80147ce <chirp_recv+0xaae>
                                                    FLASH_If_Write(FLASH_START_BANK2 + chirp_outl->patch_page * FLASH_PAGE + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014798:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801479c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80147a0:	02db      	lsls	r3, r3, #11
 80147a2:	69ba      	ldr	r2, [r7, #24]
 80147a4:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80147a8:	b292      	uxth	r2, r2
 80147aa:	3a01      	subs	r2, #1
 80147ac:	69b9      	ldr	r1, [r7, #24]
 80147ae:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 80147b0:	b289      	uxth	r1, r1
 80147b2:	fb01 f202 	mul.w	r2, r1, r2
 80147b6:	1898      	adds	r0, r3, r2
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	f8d3 1065 	ldr.w	r1, [r3, #101]	; 0x65
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	089b      	lsrs	r3, r3, #2
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	461a      	mov	r2, r3
 80147ca:	f007 febb 	bl	801c544 <FLASH_If_Write>
                                            chirp_outl->disem_file_index++;
 80147ce:	69bb      	ldr	r3, [r7, #24]
 80147d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	3301      	adds	r3, #1
 80147d8:	b29a      	uxth	r2, r3
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                                            chirp_outl->disem_file_index_stay = 0;
 80147e0:	69bb      	ldr	r3, [r7, #24]
 80147e2:	2200      	movs	r2, #0
 80147e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80147e8:	2200      	movs	r2, #0
 80147ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                            break;
 80147ee:	e16c      	b.n	8014aca <chirp_recv+0xdaa>
                        }
                        case MX_COLLECT:
                        case CHIRP_TOPO:
                        {
                            /* reconfig chirp_outl (except the initiator) */
                            if (chirp_outl->round <= chirp_outl->round_setup)
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80147f6:	b29a      	uxth	r2, r3
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	795b      	ldrb	r3, [r3, #5]
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	429a      	cmp	r2, r3
 8014800:	d875      	bhi.n	80148ee <chirp_recv+0xbce>
                            {
                                /* MX_COLLECT */
                                /* only initiator indicates the file information */
                                if ((chirp_outl->task == MX_COLLECT) && (node_id) && (i == 0))
 8014802:	69bb      	ldr	r3, [r7, #24]
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2b02      	cmp	r3, #2
 8014808:	f040 8161 	bne.w	8014ace <chirp_recv+0xdae>
 801480c:	7ffb      	ldrb	r3, [r7, #31]
 801480e:	2b00      	cmp	r3, #0
 8014810:	f000 815d 	beq.w	8014ace <chirp_recv+0xdae>
 8014814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014816:	2b00      	cmp	r3, #0
 8014818:	f040 8159 	bne.w	8014ace <chirp_recv+0xdae>
                                {
                                    PRINTF("MX_COLLECT\n");
 801481c:	48ad      	ldr	r0, [pc, #692]	; (8014ad4 <chirp_recv+0xdb4>)
 801481e:	f00d fd49 	bl	80222b4 <puts>
                                    chirp_outl->round_max = (data[k++] << 8) | (data[k++]);
 8014822:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014826:	1c5a      	adds	r2, r3, #1
 8014828:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 801482c:	461a      	mov	r2, r3
 801482e:	4baa      	ldr	r3, [pc, #680]	; (8014ad8 <chirp_recv+0xdb8>)
 8014830:	5c9b      	ldrb	r3, [r3, r2]
 8014832:	021b      	lsls	r3, r3, #8
 8014834:	b21a      	sxth	r2, r3
 8014836:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801483a:	1c59      	adds	r1, r3, #1
 801483c:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 8014840:	4619      	mov	r1, r3
 8014842:	4ba5      	ldr	r3, [pc, #660]	; (8014ad8 <chirp_recv+0xdb8>)
 8014844:	5c5b      	ldrb	r3, [r3, r1]
 8014846:	b21b      	sxth	r3, r3
 8014848:	4313      	orrs	r3, r2
 801484a:	b21b      	sxth	r3, r3
 801484c:	b29a      	uxth	r2, r3
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	f8a3 2003 	strh.w	r2, [r3, #3]
                                    memcpy(data, p + DATA_HEADER_LENGTH, DATA_HEADER_LENGTH);
 8014854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014856:	f103 0208 	add.w	r2, r3, #8
 801485a:	4b9f      	ldr	r3, [pc, #636]	; (8014ad8 <chirp_recv+0xdb8>)
 801485c:	6810      	ldr	r0, [r2, #0]
 801485e:	6851      	ldr	r1, [r2, #4]
 8014860:	c303      	stmia	r3!, {r0, r1}
                                    PRINTF("col_max:%d\n", chirp_outl->round_max);
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014868:	b29b      	uxth	r3, r3
 801486a:	4619      	mov	r1, r3
 801486c:	489b      	ldr	r0, [pc, #620]	; (8014adc <chirp_recv+0xdbc>)
 801486e:	f00d fc99 	bl	80221a4 <iprintf>

                                    chirp_outl->collect_addr_start = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);
 8014872:	4b99      	ldr	r3, [pc, #612]	; (8014ad8 <chirp_recv+0xdb8>)
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	061a      	lsls	r2, r3, #24
 8014878:	4b97      	ldr	r3, [pc, #604]	; (8014ad8 <chirp_recv+0xdb8>)
 801487a:	785b      	ldrb	r3, [r3, #1]
 801487c:	041b      	lsls	r3, r3, #16
 801487e:	431a      	orrs	r2, r3
 8014880:	4b95      	ldr	r3, [pc, #596]	; (8014ad8 <chirp_recv+0xdb8>)
 8014882:	789b      	ldrb	r3, [r3, #2]
 8014884:	021b      	lsls	r3, r3, #8
 8014886:	4313      	orrs	r3, r2
 8014888:	4a93      	ldr	r2, [pc, #588]	; (8014ad8 <chirp_recv+0xdb8>)
 801488a:	78d2      	ldrb	r2, [r2, #3]
 801488c:	4313      	orrs	r3, r2
 801488e:	461a      	mov	r2, r3
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	f8c3 2069 	str.w	r2, [r3, #105]	; 0x69
                                    chirp_outl->collect_addr_end = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | (data[7]);
 8014896:	4b90      	ldr	r3, [pc, #576]	; (8014ad8 <chirp_recv+0xdb8>)
 8014898:	791b      	ldrb	r3, [r3, #4]
 801489a:	061a      	lsls	r2, r3, #24
 801489c:	4b8e      	ldr	r3, [pc, #568]	; (8014ad8 <chirp_recv+0xdb8>)
 801489e:	795b      	ldrb	r3, [r3, #5]
 80148a0:	041b      	lsls	r3, r3, #16
 80148a2:	431a      	orrs	r2, r3
 80148a4:	4b8c      	ldr	r3, [pc, #560]	; (8014ad8 <chirp_recv+0xdb8>)
 80148a6:	799b      	ldrb	r3, [r3, #6]
 80148a8:	021b      	lsls	r3, r3, #8
 80148aa:	4313      	orrs	r3, r2
 80148ac:	4a8a      	ldr	r2, [pc, #552]	; (8014ad8 <chirp_recv+0xdb8>)
 80148ae:	79d2      	ldrb	r2, [r2, #7]
 80148b0:	4313      	orrs	r3, r2
 80148b2:	461a      	mov	r2, r3
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	f8c3 206d 	str.w	r2, [r3, #109]	; 0x6d
                                    chirp_outl->collect_length = ((chirp_outl->collect_addr_end - chirp_outl->collect_addr_start + sizeof(uint64_t) - 1) / sizeof(uint64_t)) * sizeof(uint64_t);
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 80148c0:	69bb      	ldr	r3, [r7, #24]
 80148c2:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 80148c6:	1ad3      	subs	r3, r2, r3
 80148c8:	3307      	adds	r3, #7
 80148ca:	f023 0207 	bic.w	r2, r3, #7
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
                                    PRINTF("addr:%lu, %lu, %lu\n", chirp_outl->collect_addr_start, chirp_outl->collect_addr_end, chirp_outl->collect_length);
 80148d4:	69bb      	ldr	r3, [r7, #24]
 80148d6:	f8d3 1069 	ldr.w	r1, [r3, #105]	; 0x69
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 80148e0:	69bb      	ldr	r3, [r7, #24]
 80148e2:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 80148e6:	487e      	ldr	r0, [pc, #504]	; (8014ae0 <chirp_recv+0xdc0>)
 80148e8:	f00d fc5c 	bl	80221a4 <iprintf>
                                {
                                    memcpy(file_data, p + DATA_HEADER_LENGTH, sizeof(file_data));
                                    PRINT_PACKET(file_data, sizeof(file_data), 0);
                                }
                            }
                            break;
 80148ec:	e0ef      	b.n	8014ace <chirp_recv+0xdae>
                            else if ((chirp_outl->round > chirp_outl->round_setup) && (chirp_outl->round <= chirp_outl->round_max))
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	795b      	ldrb	r3, [r3, #5]
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	429a      	cmp	r2, r3
 80148fe:	f240 80e6 	bls.w	8014ace <chirp_recv+0xdae>
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014908:	b29a      	uxth	r2, r3
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014910:	b29b      	uxth	r3, r3
 8014912:	429a      	cmp	r2, r3
 8014914:	f200 80db 	bhi.w	8014ace <chirp_recv+0xdae>
                                if ((chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	2b02      	cmp	r3, #2
 801491e:	d004      	beq.n	801492a <chirp_recv+0xc0a>
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	2b04      	cmp	r3, #4
 8014926:	f040 80d2 	bne.w	8014ace <chirp_recv+0xdae>
                                    memcpy(file_data, p + DATA_HEADER_LENGTH, sizeof(file_data));
 801492a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492e:	3308      	adds	r3, #8
 8014930:	00aa      	lsls	r2, r5, #2
 8014932:	4619      	mov	r1, r3
 8014934:	f00c fe1e 	bl	8021574 <memcpy>
                                    PRINT_PACKET(file_data, sizeof(file_data), 0);
 8014938:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801493a:	b2eb      	uxtb	r3, r5
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	b2db      	uxtb	r3, r3
 8014940:	2200      	movs	r2, #0
 8014942:	4619      	mov	r1, r3
 8014944:	f7fd ff7c 	bl	8012840 <PRINT_PACKET>
                            break;
 8014948:	e0c1      	b.n	8014ace <chirp_recv+0xdae>
                        }
                        case CHIRP_CONNECTIVITY:
                        {
                            if (node_id)
 801494a:	7ffb      	ldrb	r3, [r7, #31]
 801494c:	2b00      	cmp	r3, #0
 801494e:	f000 80cd 	beq.w	8014aec <chirp_recv+0xdcc>
                            {
                                PRINTF("CHIRP_CONNECTIVITY\n");
 8014952:	4864      	ldr	r0, [pc, #400]	; (8014ae4 <chirp_recv+0xdc4>)
 8014954:	f00d fcae 	bl	80222b4 <puts>

                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 8014958:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495c:	3308      	adds	r3, #8
 801495e:	4632      	mov	r2, r6
 8014960:	4619      	mov	r1, r3
 8014962:	f00c fe07 	bl	8021574 <memcpy>
                                chirp_outl->sf = task_data[0];
 8014966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014968:	781a      	ldrb	r2, [r3, #0]
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                                chirp_outl->freq = (task_data[1] << 24) | (task_data[2] << 16) | (task_data[3] << 8) | (task_data[4]);
 8014970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014972:	785b      	ldrb	r3, [r3, #1]
 8014974:	061a      	lsls	r2, r3, #24
 8014976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014978:	789b      	ldrb	r3, [r3, #2]
 801497a:	041b      	lsls	r3, r3, #16
 801497c:	431a      	orrs	r2, r3
 801497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014980:	78db      	ldrb	r3, [r3, #3]
 8014982:	021b      	lsls	r3, r3, #8
 8014984:	4313      	orrs	r3, r2
 8014986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014988:	7912      	ldrb	r2, [r2, #4]
 801498a:	4313      	orrs	r3, r2
 801498c:	461a      	mov	r2, r3
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	f8c3 2076 	str.w	r2, [r3, #118]	; 0x76
                                chirp_outl->tx_power = task_data[5];
 8014994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014996:	795b      	ldrb	r3, [r3, #5]
 8014998:	b25a      	sxtb	r2, r3
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                                chirp_outl->topo_payload_len = task_data[6];
 80149a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149a2:	799a      	ldrb	r2, [r3, #6]
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                            }
                            break;
 80149aa:	e09f      	b.n	8014aec <chirp_recv+0xdcc>
                        }
                        case CHIRP_VERSION:
                        {
                            memcpy(data, p + DATA_HEADER_LENGTH, chirp_outl->payload_len - DATA_HEADER_LENGTH);
 80149ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ae:	f103 0108 	add.w	r1, r3, #8
 80149b2:	69bb      	ldr	r3, [r7, #24]
 80149b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80149b8:	3b08      	subs	r3, #8
 80149ba:	461a      	mov	r2, r3
 80149bc:	4846      	ldr	r0, [pc, #280]	; (8014ad8 <chirp_recv+0xdb8>)
 80149be:	f00c fdd9 	bl	8021574 <memcpy>
                            PRINT_PACKET(data, chirp_outl->payload_len - DATA_HEADER_LENGTH, 0);
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80149c8:	3b08      	subs	r3, #8
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	2200      	movs	r2, #0
 80149ce:	4619      	mov	r1, r3
 80149d0:	4841      	ldr	r0, [pc, #260]	; (8014ad8 <chirp_recv+0xdb8>)
 80149d2:	f7fd ff35 	bl	8012840 <PRINT_PACKET>
                            break;
 80149d6:	e08c      	b.n	8014af2 <chirp_recv+0xdd2>
                        }
                        case MX_ARRANGE:
                        {
                            PRINTF("MX_ARRANGE\n");
 80149d8:	4843      	ldr	r0, [pc, #268]	; (8014ae8 <chirp_recv+0xdc8>)
 80149da:	f00d fc6b 	bl	80222b4 <puts>
                            chirp_outl->arrange_task = data[6];
 80149de:	4b3e      	ldr	r3, [pc, #248]	; (8014ad8 <chirp_recv+0xdb8>)
 80149e0:	799a      	ldrb	r2, [r3, #6]
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	719a      	strb	r2, [r3, #6]
                            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	799b      	ldrb	r3, [r3, #6]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d110      	bne.n	8014a10 <chirp_recv+0xcf0>
                            {
                                chirp_outl->dissem_back_sf = data[0];
 80149ee:	4b3a      	ldr	r3, [pc, #232]	; (8014ad8 <chirp_recv+0xdb8>)
 80149f0:	781a      	ldrb	r2, [r3, #0]
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	f883 2020 	strb.w	r2, [r3, #32]
                                chirp_outl->dissem_back_slot_num = data[1];
 80149f8:	4b37      	ldr	r3, [pc, #220]	; (8014ad8 <chirp_recv+0xdb8>)
 80149fa:	785a      	ldrb	r2, [r3, #1]
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                                chirp_outl->default_slot_num = data[2];
 8014a02:	4b35      	ldr	r3, [pc, #212]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a04:	789b      	ldrb	r3, [r3, #2]
 8014a06:	b29a      	uxth	r2, r3
 8014a08:	69bb      	ldr	r3, [r7, #24]
 8014a0a:	f8a3 200b 	strh.w	r2, [r3, #11]
 8014a0e:	e00c      	b.n	8014a2a <chirp_recv+0xd0a>
                            }
                            else
                                chirp_outl->default_slot_num = data[1] << 8 | data[2];
 8014a10:	4b31      	ldr	r3, [pc, #196]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a12:	785b      	ldrb	r3, [r3, #1]
 8014a14:	021b      	lsls	r3, r3, #8
 8014a16:	b21a      	sxth	r2, r3
 8014a18:	4b2f      	ldr	r3, [pc, #188]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a1a:	789b      	ldrb	r3, [r3, #2]
 8014a1c:	b21b      	sxth	r3, r3
 8014a1e:	4313      	orrs	r3, r2
 8014a20:	b21b      	sxth	r3, r3
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	f8a3 200b 	strh.w	r2, [r3, #11]
                            /* reconfig chirp_outl (except the initiator) */
                            chirp_outl->default_sf = data[k++];
 8014a2a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014a34:	461a      	mov	r2, r3
 8014a36:	4b28      	ldr	r3, [pc, #160]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a38:	5c9b      	ldrb	r3, [r3, r2]
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	f8c3 200d 	str.w	r2, [r3, #13]
                            // chirp_outl->round_max = data[k++];
                            chirp_outl->default_payload_len = data[k++];
 8014a42:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014a46:	1c5a      	adds	r2, r3, #1
 8014a48:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	4b22      	ldr	r3, [pc, #136]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a50:	5c9a      	ldrb	r2, [r3, r2]
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	759a      	strb	r2, [r3, #22]
                            // chirp_outl->round_max = (data[k++] << 8) | (data[k++]);
                            // chirp_outl->arrange_task = data[k++];
                            chirp_outl->default_generate_size = data[ROUND_HEADER_LENGTH - 1];
 8014a56:	4b20      	ldr	r3, [pc, #128]	; (8014ad8 <chirp_recv+0xdb8>)
 8014a58:	78da      	ldrb	r2, [r3, #3]
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	75da      	strb	r2, [r3, #23]
                            if (node_id)
 8014a5e:	7ffb      	ldrb	r3, [r7, #31]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d045      	beq.n	8014af0 <chirp_recv+0xdd0>
                            {
                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 8014a64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a68:	3308      	adds	r3, #8
 8014a6a:	4632      	mov	r2, r6
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	f00c fd81 	bl	8021574 <memcpy>
                                chirp_outl->firmware_bitmap[0] = (task_data[0] << 24) | (task_data[1] << 16) | (task_data[2] << 8) | (task_data[3]);
 8014a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	061a      	lsls	r2, r3, #24
 8014a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a7a:	785b      	ldrb	r3, [r3, #1]
 8014a7c:	041b      	lsls	r3, r3, #16
 8014a7e:	431a      	orrs	r2, r3
 8014a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a82:	789b      	ldrb	r3, [r3, #2]
 8014a84:	021b      	lsls	r3, r3, #8
 8014a86:	4313      	orrs	r3, r2
 8014a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014a8a:	78d2      	ldrb	r2, [r2, #3]
 8014a8c:	4313      	orrs	r3, r2
 8014a8e:	461a      	mov	r2, r3
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	619a      	str	r2, [r3, #24]
                                chirp_outl->default_tp = task_data[4];
 8014a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a96:	791b      	ldrb	r3, [r3, #4]
 8014a98:	b25a      	sxtb	r2, r3
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	755a      	strb	r2, [r3, #21]
                                chirp_outl->task_bitmap[0] = (task_data[5] << 24) | (task_data[6] << 16) | (task_data[7] << 8) | (task_data[8]);
 8014a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aa0:	795b      	ldrb	r3, [r3, #5]
 8014aa2:	061a      	lsls	r2, r3, #24
 8014aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aa6:	799b      	ldrb	r3, [r3, #6]
 8014aa8:	041b      	lsls	r3, r3, #16
 8014aaa:	431a      	orrs	r2, r3
 8014aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aae:	79db      	ldrb	r3, [r3, #7]
 8014ab0:	021b      	lsls	r3, r3, #8
 8014ab2:	4313      	orrs	r3, r2
 8014ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014ab6:	7a12      	ldrb	r2, [r2, #8]
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	461a      	mov	r2, r3
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	61da      	str	r2, [r3, #28]
                            }
                            break;
 8014ac0:	e016      	b.n	8014af0 <chirp_recv+0xdd0>
                        }
                        default:
                            break;
 8014ac2:	bf00      	nop
 8014ac4:	e015      	b.n	8014af2 <chirp_recv+0xdd2>
                            break;
 8014ac6:	bf00      	nop
 8014ac8:	e013      	b.n	8014af2 <chirp_recv+0xdd2>
                            break;
 8014aca:	bf00      	nop
 8014acc:	e011      	b.n	8014af2 <chirp_recv+0xdd2>
                            break;
 8014ace:	bf00      	nop
 8014ad0:	e00f      	b.n	8014af2 <chirp_recv+0xdd2>
 8014ad2:	bf00      	nop
 8014ad4:	080255c0 	.word	0x080255c0
 8014ad8:	20000464 	.word	0x20000464
 8014adc:	080255cc 	.word	0x080255cc
 8014ae0:	080255d8 	.word	0x080255d8
 8014ae4:	080255ec 	.word	0x080255ec
 8014ae8:	08025600 	.word	0x08025600
                            break;
 8014aec:	bf00      	nop
 8014aee:	e000      	b.n	8014af2 <chirp_recv+0xdd2>
                            break;
 8014af0:	bf00      	nop
                    }
                    round_inc++;
 8014af2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014af6:	3301      	adds	r3, #1
 8014af8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                    PRINTF("roundinc %d\n", round_inc);
 8014afc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014b00:	4619      	mov	r1, r3
 8014b02:	4831      	ldr	r0, [pc, #196]	; (8014bc8 <chirp_recv+0xea8>)
 8014b04:	f00d fb4e 	bl	80221a4 <iprintf>
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8014b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b0a:	3301      	adds	r3, #1
 8014b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8014b0e:	4b2f      	ldr	r3, [pc, #188]	; (8014bcc <chirp_recv+0xeac>)
 8014b10:	885b      	ldrh	r3, [r3, #2]
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	461a      	mov	r2, r3
 8014b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	f4ff ab0a 	bcc.w	8014132 <chirp_recv+0x412>
                }
            }
        }
    }
	if (chirp_config.primitive != FLOODING)
 8014b1e:	4b2b      	ldr	r3, [pc, #172]	; (8014bcc <chirp_recv+0xeac>)
 8014b20:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d007      	beq.n	8014b38 <chirp_recv+0xe18>
    {
    free(mx.matrix[0]);
 8014b28:	4b29      	ldr	r3, [pc, #164]	; (8014bd0 <chirp_recv+0xeb0>)
 8014b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f00c fd19 	bl	8021564 <free>
    mx.matrix[0] = NULL;
 8014b32:	4b27      	ldr	r3, [pc, #156]	; (8014bd0 <chirp_recv+0xeb0>)
 8014b34:	2200      	movs	r2, #0
 8014b36:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* have received at least a packet */
    if (((chirp_outl->task == MX_COLLECT) ||(chirp_outl->task == CHIRP_TOPO) ||(chirp_outl->task == CHIRP_VERSION)))
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d007      	beq.n	8014b50 <chirp_recv+0xe30>
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	2b04      	cmp	r3, #4
 8014b46:	d003      	beq.n	8014b50 <chirp_recv+0xe30>
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b05      	cmp	r3, #5
 8014b4e:	d110      	bne.n	8014b72 <chirp_recv+0xe52>
    {
        if (round_inc > 1)
 8014b50:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d90a      	bls.n	8014b6e <chirp_recv+0xe4e>
        {
            chirp_outl->round++;
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	3301      	adds	r3, #1
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	f8a3 2001 	strh.w	r2, [r3, #1]
            return 1;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e026      	b.n	8014bbc <chirp_recv+0xe9c>
        }
        else
        {
            return 0;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	e024      	b.n	8014bbc <chirp_recv+0xe9c>
        }

    }
    else
    {
        if (chirp_outl->task == MX_DISSEMINATE)
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d110      	bne.n	8014b9c <chirp_recv+0xe7c>
        {
            if (round_hash)
 8014b7a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d00a      	beq.n	8014b98 <chirp_recv+0xe78>
            {
                chirp_outl->round++;
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	f8a3 2001 	strh.w	r2, [r3, #1]
                return 1;
 8014b94:	2301      	movs	r3, #1
 8014b96:	e011      	b.n	8014bbc <chirp_recv+0xe9c>
            }
            else
            {
                return 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	e00f      	b.n	8014bbc <chirp_recv+0xe9c>
            }
        }
        else
        {
            if (round_inc)
 8014b9c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00a      	beq.n	8014bba <chirp_recv+0xe9a>
            {
                chirp_outl->round++;
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	3301      	adds	r3, #1
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	f8a3 2001 	strh.w	r2, [r3, #1]
                return 1;
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	e000      	b.n	8014bbc <chirp_recv+0xe9c>
            }
            /* not received any packet */
            else
            {
                return 0;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	46c5      	mov	sp, r8
            }
        }
    }
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3764      	adds	r7, #100	; 0x64
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bc8:	0802560c 	.word	0x0802560c
 8014bcc:	20001430 	.word	0x20001430
 8014bd0:	200014f0 	.word	0x200014f0

08014bd4 <chirp_round>:

uint8_t chirp_round(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 8014bd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8014bd8:	b09c      	sub	sp, #112	; 0x70
 8014bda:	af02      	add	r7, sp, #8
 8014bdc:	4603      	mov	r3, r0
 8014bde:	6039      	str	r1, [r7, #0]
 8014be0:	71fb      	strb	r3, [r7, #7]
    gpi_watchdog_periodic();
 8014be2:	f7f9 fab1 	bl	800e148 <gpi_watchdog_periodic>
	// Gpi_Fast_Tick_Native deadline;
    Gpi_Fast_Tick_Extended deadline;
    Gpi_Fast_Tick_Native update_period = GPI_TICK_MS_TO_FAST2(((chirp_config.mx_period_time_s * 1000) / 1) - chirp_config.mx_round_length * (chirp_config.mx_slot_length_in_us / 1000));
 8014be6:	4bbc      	ldr	r3, [pc, #752]	; (8014ed8 <chirp_round+0x304>)
 8014be8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	461a      	mov	r2, r3
 8014bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014bf4:	fb03 f302 	mul.w	r3, r3, r2
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	4bb7      	ldr	r3, [pc, #732]	; (8014ed8 <chirp_round+0x304>)
 8014bfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	4618      	mov	r0, r3
 8014c04:	4bb4      	ldr	r3, [pc, #720]	; (8014ed8 <chirp_round+0x304>)
 8014c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c08:	4ab4      	ldr	r2, [pc, #720]	; (8014edc <chirp_round+0x308>)
 8014c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c0e:	099b      	lsrs	r3, r3, #6
 8014c10:	fb03 f300 	mul.w	r3, r3, r0
 8014c14:	1acb      	subs	r3, r1, r3
 8014c16:	4ab1      	ldr	r2, [pc, #708]	; (8014edc <chirp_round+0x308>)
 8014c18:	fba2 2303 	umull	r2, r3, r2, r3
 8014c1c:	099b      	lsrs	r3, r3, #6
 8014c1e:	4ab0      	ldr	r2, [pc, #704]	; (8014ee0 <chirp_round+0x30c>)
 8014c20:	fb02 f103 	mul.w	r1, r2, r3
 8014c24:	4bac      	ldr	r3, [pc, #688]	; (8014ed8 <chirp_round+0x304>)
 8014c26:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014c32:	fb03 f302 	mul.w	r3, r3, r2
 8014c36:	4618      	mov	r0, r3
 8014c38:	4ba7      	ldr	r3, [pc, #668]	; (8014ed8 <chirp_round+0x304>)
 8014c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	461c      	mov	r4, r3
 8014c42:	4ba5      	ldr	r3, [pc, #660]	; (8014ed8 <chirp_round+0x304>)
 8014c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c46:	4aa5      	ldr	r2, [pc, #660]	; (8014edc <chirp_round+0x308>)
 8014c48:	fba2 2303 	umull	r2, r3, r2, r3
 8014c4c:	099b      	lsrs	r3, r3, #6
 8014c4e:	fb03 f304 	mul.w	r3, r3, r4
 8014c52:	1ac2      	subs	r2, r0, r3
 8014c54:	4ba1      	ldr	r3, [pc, #644]	; (8014edc <chirp_round+0x308>)
 8014c56:	fba3 0302 	umull	r0, r3, r3, r2
 8014c5a:	099b      	lsrs	r3, r3, #6
 8014c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014c60:	fb00 f303 	mul.w	r3, r0, r3
 8014c64:	1ad3      	subs	r3, r2, r3
 8014c66:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8014c6a:	fb02 f303 	mul.w	r3, r2, r3
 8014c6e:	440b      	add	r3, r1
 8014c70:	65bb      	str	r3, [r7, #88]	; 0x58

    uint8_t failed_round = 0;
 8014c72:	2300      	movs	r3, #0
 8014c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    chirp_outl->round = 1;
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f042 0201 	orr.w	r2, r2, #1
 8014c80:	705a      	strb	r2, [r3, #1]
 8014c82:	2200      	movs	r2, #0
 8014c84:	709a      	strb	r2, [r3, #2]

    /* set current state as mixer */
	chirp_isr.state = ISR_MIXER;
 8014c86:	4b97      	ldr	r3, [pc, #604]	; (8014ee4 <chirp_round+0x310>)
 8014c88:	2200      	movs	r2, #0
 8014c8a:	701a      	strb	r2, [r3, #0]

	// deadline = gpi_tick_fast_native() + 2 * chirp_config.mx_slot_length;
	// deadline = gpi_tick_fast_native();
	deadline = gpi_tick_fast_extended();
 8014c8c:	f7f6 fee6 	bl	800ba5c <gpi_tick_fast_extended>
 8014c90:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    clear_data();
 8014c94:	f7fd fe06 	bl	80128a4 <clear_data>

    chirp_config.task = chirp_outl->task;
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	781a      	ldrb	r2, [r3, #0]
 8014c9c:	4b8e      	ldr	r3, [pc, #568]	; (8014ed8 <chirp_round+0x304>)
 8014c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	if (chirp_config.primitive != FLOODING)
 8014ca2:	4b8d      	ldr	r3, [pc, #564]	; (8014ed8 <chirp_round+0x304>)
 8014ca4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d011      	beq.n	8014cd0 <chirp_round+0xfc>
        chirp_config.packet_hash = DISC_HEADER;
 8014cac:	4b8a      	ldr	r3, [pc, #552]	; (8014ed8 <chirp_round+0x304>)
 8014cae:	2200      	movs	r2, #0
 8014cb0:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8014cb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8014cb8:	2200      	movs	r2, #0
 8014cba:	f042 0212 	orr.w	r2, r2, #18
 8014cbe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014cc8:	2200      	movs	r2, #0
 8014cca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8014cce:	e010      	b.n	8014cf2 <chirp_round+0x11e>
    else
        chirp_config.packet_hash = FLOODING_HEADER;
 8014cd0:	4b81      	ldr	r3, [pc, #516]	; (8014ed8 <chirp_round+0x304>)
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8014cd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8014cdc:	2200      	movs	r2, #0
 8014cde:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8014ce2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014cec:	2200      	movs	r2, #0
 8014cee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	while (1)
	{
        PRINTF("round:%d, %d\n", chirp_outl->round, chirp_outl->round_max);
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	461a      	mov	r2, r3
 8014d06:	4878      	ldr	r0, [pc, #480]	; (8014ee8 <chirp_round+0x314>)
 8014d08:	f00d fa4c 	bl	80221a4 <iprintf>

        gpi_radio_init();
 8014d0c:	f7f8 fade 	bl	800d2cc <gpi_radio_init>

        /* init mixer */
        mixer_init(node_id);
 8014d10:	79fb      	ldrb	r3, [r7, #7]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fc ff0e 	bl	8011b34 <mixer_init>
	return htim2.Instance->CNT;
 8014d18:	4b74      	ldr	r3, [pc, #464]	; (8014eec <chirp_round+0x318>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 8014d1e:	4a74      	ldr	r2, [pc, #464]	; (8014ef0 <chirp_round+0x31c>)
 8014d20:	61d3      	str	r3, [r2, #28]
 8014d22:	4b74      	ldr	r3, [pc, #464]	; (8014ef4 <chirp_round+0x320>)
 8014d24:	2201      	movs	r2, #1
 8014d26:	71da      	strb	r2, [r3, #7]
        #endif
        /* except these two task that all nodes need to upload data, others only initiator transmit data */
        if (chirp_config.primitive == DISSEMINATION)
 8014d28:	4b6b      	ldr	r3, [pc, #428]	; (8014ed8 <chirp_round+0x304>)
 8014d2a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d108      	bne.n	8014d44 <chirp_round+0x170>
        {
            if (!node_id)
 8014d32:	79fb      	ldrb	r3, [r7, #7]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10a      	bne.n	8014d4e <chirp_round+0x17a>
                chirp_write(node_id, chirp_outl);
 8014d38:	79fb      	ldrb	r3, [r7, #7]
 8014d3a:	6839      	ldr	r1, [r7, #0]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fe f945 	bl	8012fcc <chirp_write>
 8014d42:	e004      	b.n	8014d4e <chirp_round+0x17a>
        }
        else
            chirp_write(node_id, chirp_outl);
 8014d44:	79fb      	ldrb	r3, [r7, #7]
 8014d46:	6839      	ldr	r1, [r7, #0]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fe f93f 	bl	8012fcc <chirp_write>

		/* arm mixer, node 0 = initiator
		start first round with infinite scan
		-> nodes join next available round, does not require simultaneous boot-up */
        mixer_arm(((!node_id) ? MX_ARM_INITIATOR : 0) | ((1 == 0) ? MX_ARM_INFINITE_SCAN : 0));
 8014d4e:	79fb      	ldrb	r3, [r7, #7]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	bf0c      	ite	eq
 8014d54:	2301      	moveq	r3, #1
 8014d56:	2300      	movne	r3, #0
 8014d58:	b2db      	uxtb	r3, r3
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fd fac8 	bl	80122f0 <mixer_arm>

		/* delay initiator a bit
		-> increase probability that all nodes are ready when initiator starts the round
		-> avoid problems in view of limited deadline accuracy */
		if (!node_id)
 8014d60:	79fb      	ldrb	r3, [r7, #7]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d124      	bne.n	8014db0 <chirp_round+0x1dc>
        {
            /* because other nodes need time to erase pages */
            if ((chirp_outl->task == MX_DISSEMINATE) && (chirp_outl->round == 1))
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d113      	bne.n	8014d96 <chirp_round+0x1c2>
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d10d      	bne.n	8014d96 <chirp_round+0x1c2>
                // deadline += GPI_TICK_MS_TO_FAST2(8000);
                deadline += (Gpi_Fast_Tick_Extended)1 * chirp_config.mx_slot_length;
 8014d7a:	4b57      	ldr	r3, [pc, #348]	; (8014ed8 <chirp_round+0x304>)
 8014d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d7e:	469b      	mov	fp, r3
 8014d80:	f04f 0c00 	mov.w	ip, #0
 8014d84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8014d88:	eb1b 0301 	adds.w	r3, fp, r1
 8014d8c:	eb4c 0402 	adc.w	r4, ip, r2
 8014d90:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 8014d94:	e00c      	b.n	8014db0 <chirp_round+0x1dc>
            else
                deadline += (Gpi_Fast_Tick_Extended)1 * chirp_config.mx_slot_length;
 8014d96:	4b50      	ldr	r3, [pc, #320]	; (8014ed8 <chirp_round+0x304>)
 8014d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d9a:	469b      	mov	fp, r3
 8014d9c:	f04f 0c00 	mov.w	ip, #0
 8014da0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8014da4:	eb1b 0301 	adds.w	r3, fp, r1
 8014da8:	eb4c 0402 	adc.w	r4, ip, r2
 8014dac:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
        }

		/* start when deadline reached
		ATTENTION: don't delay after the polling loop (-> print before) */
		// while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
        deadline_dog = (chirp_config.mx_period_time_s + 60 - 1) / DOG_PERIOD + 60 / DOG_PERIOD;
 8014db0:	4b49      	ldr	r3, [pc, #292]	; (8014ed8 <chirp_round+0x304>)
 8014db2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	333b      	adds	r3, #59	; 0x3b
 8014dba:	4a4f      	ldr	r2, [pc, #316]	; (8014ef8 <chirp_round+0x324>)
 8014dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8014dc0:	10d2      	asrs	r2, r2, #3
 8014dc2:	17db      	asrs	r3, r3, #31
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	3303      	adds	r3, #3
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	4b4b      	ldr	r3, [pc, #300]	; (8014efc <chirp_round+0x328>)
 8014dce:	801a      	strh	r2, [r3, #0]
        count_dog = 0;
 8014dd0:	4b4b      	ldr	r3, [pc, #300]	; (8014f00 <chirp_round+0x32c>)
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	801a      	strh	r2, [r3, #0]
        PRINTF("dg:%d\n", deadline_dog);
 8014dd6:	4b49      	ldr	r3, [pc, #292]	; (8014efc <chirp_round+0x328>)
 8014dd8:	881b      	ldrh	r3, [r3, #0]
 8014dda:	4619      	mov	r1, r3
 8014ddc:	4849      	ldr	r0, [pc, #292]	; (8014f04 <chirp_round+0x330>)
 8014dde:	f00d f9e1 	bl	80221a4 <iprintf>
        #if MX_LBT_ACCESS
            lbt_check_time();
 8014de2:	f7f5 fc5f 	bl	800a6a4 <lbt_check_time>
            chirp_isr.state = ISR_MIXER;
 8014de6:	4b3f      	ldr	r3, [pc, #252]	; (8014ee4 <chirp_round+0x310>)
 8014de8:	2200      	movs	r2, #0
 8014dea:	701a      	strb	r2, [r3, #0]
            if (chirp_config.primitive != FLOODING)
 8014dec:	4b3a      	ldr	r3, [pc, #232]	; (8014ed8 <chirp_round+0x304>)
 8014dee:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d035      	beq.n	8014e62 <chirp_round+0x28e>
            {
            chirp_config.lbt_channel_primary = (chirp_config.lbt_channel_primary + 1) % LBT_CHANNEL_NUM;
 8014df6:	4b38      	ldr	r3, [pc, #224]	; (8014ed8 <chirp_round+0x304>)
 8014df8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014dfc:	1c5a      	adds	r2, r3, #1
 8014dfe:	4b3e      	ldr	r3, [pc, #248]	; (8014ef8 <chirp_round+0x324>)
 8014e00:	fb83 1302 	smull	r1, r3, r3, r2
 8014e04:	1099      	asrs	r1, r3, #2
 8014e06:	17d3      	asrs	r3, r2, #31
 8014e08:	1ac9      	subs	r1, r1, r3
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	009b      	lsls	r3, r3, #2
 8014e0e:	440b      	add	r3, r1
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	1ad1      	subs	r1, r2, r3
 8014e14:	b2ca      	uxtb	r2, r1
 8014e16:	4b30      	ldr	r3, [pc, #192]	; (8014ed8 <chirp_round+0x304>)
 8014e18:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            if ((!chirp_outl->disem_flag) && (chirp_outl->task == MX_DISSEMINATE) && (chirp_outl->round >= 2))
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d11d      	bne.n	8014e62 <chirp_round+0x28e>
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	2b01      	cmp	r3, #1
 8014e2c:	d119      	bne.n	8014e62 <chirp_round+0x28e>
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	2b01      	cmp	r3, #1
 8014e38:	d913      	bls.n	8014e62 <chirp_round+0x28e>
            {
                chirp_config.lbt_channel_primary = (chirp_config.lbt_channel_primary + LBT_CHANNEL_NUM - 1) % LBT_CHANNEL_NUM;
 8014e3a:	4b27      	ldr	r3, [pc, #156]	; (8014ed8 <chirp_round+0x304>)
 8014e3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014e40:	f103 0209 	add.w	r2, r3, #9
 8014e44:	4b2c      	ldr	r3, [pc, #176]	; (8014ef8 <chirp_round+0x324>)
 8014e46:	fb83 1302 	smull	r1, r3, r3, r2
 8014e4a:	1099      	asrs	r1, r3, #2
 8014e4c:	17d3      	asrs	r3, r2, #31
 8014e4e:	1ac9      	subs	r1, r1, r3
 8014e50:	460b      	mov	r3, r1
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	440b      	add	r3, r1
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	1ad1      	subs	r1, r2, r3
 8014e5a:	b2ca      	uxtb	r2, r1
 8014e5c:	4b1e      	ldr	r3, [pc, #120]	; (8014ed8 <chirp_round+0x304>)
 8014e5e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            }
            }
            SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 8014e62:	4b1d      	ldr	r3, [pc, #116]	; (8014ed8 <chirp_round+0x304>)
 8014e64:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8014e68:	4a1b      	ldr	r2, [pc, #108]	; (8014ed8 <chirp_round+0x304>)
 8014e6a:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8014e6e:	4611      	mov	r1, r2
 8014e70:	4a25      	ldr	r2, [pc, #148]	; (8014f08 <chirp_round+0x334>)
 8014e72:	fb02 f201 	mul.w	r2, r2, r1
 8014e76:	4413      	add	r3, r2
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7f7 f8c3 	bl	800c004 <SX1276SetChannel>
            PRINTF("-------lbt_channel_primary:%d\n", chirp_config.lbt_channel_primary);
 8014e7e:	4b16      	ldr	r3, [pc, #88]	; (8014ed8 <chirp_round+0x304>)
 8014e80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014e84:	4619      	mov	r1, r3
 8014e86:	4821      	ldr	r0, [pc, #132]	; (8014f0c <chirp_round+0x338>)
 8014e88:	f00d f98c 	bl	80221a4 <iprintf>
        #endif
		while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 8014e8c:	bf00      	nop
 8014e8e:	f7f6 fde5 	bl	800ba5c <gpi_tick_fast_extended>
 8014e92:	4603      	mov	r3, r0
 8014e94:	460c      	mov	r4, r1
 8014e96:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8014e9a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8014e9e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
_GPI_TICK_COMPARE_FUNCTION(fast_extended, 	Gpi_Fast_Tick_Extended)
 8014ea2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8014ea6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8014eaa:	1ac9      	subs	r1, r1, r3
 8014eac:	eb62 0204 	sbc.w	r2, r2, r4
 8014eb0:	468b      	mov	fp, r1
 8014eb2:	4694      	mov	ip, r2
 8014eb4:	e9c7 bc12 	strd	fp, ip, [r7, #72]	; 0x48
 8014eb8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f174 0300 	sbcs.w	r3, r4, #0
 8014ec2:	db25      	blt.n	8014f10 <chirp_round+0x33c>
 8014ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ec8:	4313      	orrs	r3, r2
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	bf14      	ite	ne
 8014ece:	2301      	movne	r3, #1
 8014ed0:	2300      	moveq	r3, #0
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	e01e      	b.n	8014f14 <chirp_round+0x340>
 8014ed6:	bf00      	nop
 8014ed8:	20001430 	.word	0x20001430
 8014edc:	10624dd3 	.word	0x10624dd3
 8014ee0:	00f42400 	.word	0x00f42400
 8014ee4:	20000cfc 	.word	0x20000cfc
 8014ee8:	0802561c 	.word	0x0802561c
 8014eec:	200012c8 	.word	0x200012c8
 8014ef0:	20001308 	.word	0x20001308
 8014ef4:	2000112c 	.word	0x2000112c
 8014ef8:	66666667 	.word	0x66666667
 8014efc:	2000046c 	.word	0x2000046c
 8014f00:	2000046e 	.word	0x2000046e
 8014f04:	0802562c 	.word	0x0802562c
 8014f08:	00030d40 	.word	0x00030d40
 8014f0c:	08025634 	.word	0x08025634
 8014f10:	f04f 33ff 	mov.w	r3, #4294967295
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	dbba      	blt.n	8014e8e <chirp_round+0x2ba>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8014f18:	4b8a      	ldr	r3, [pc, #552]	; (8015144 <chirp_round+0x570>)
 8014f1a:	79db      	ldrb	r3, [r3, #7]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d00d      	beq.n	8014f3c <chirp_round+0x368>
 8014f20:	4b89      	ldr	r3, [pc, #548]	; (8015148 <chirp_round+0x574>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f26:	4b89      	ldr	r3, [pc, #548]	; (801514c <chirp_round+0x578>)
 8014f28:	69db      	ldr	r3, [r3, #28]
 8014f2a:	1ad2      	subs	r2, r2, r3
 8014f2c:	4b88      	ldr	r3, [pc, #544]	; (8015150 <chirp_round+0x57c>)
 8014f2e:	69db      	ldr	r3, [r3, #28]
 8014f30:	4413      	add	r3, r2
 8014f32:	4a87      	ldr	r2, [pc, #540]	; (8015150 <chirp_round+0x57c>)
 8014f34:	61d3      	str	r3, [r2, #28]
 8014f36:	4b83      	ldr	r3, [pc, #524]	; (8015144 <chirp_round+0x570>)
 8014f38:	2200      	movs	r2, #0
 8014f3a:	71da      	strb	r2, [r3, #7]
        #endif
        /* used in mixer_write, and revalue before mixer round */
        chirp_config.full_rank = 0;
 8014f3c:	4b85      	ldr	r3, [pc, #532]	; (8015154 <chirp_round+0x580>)
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        chirp_config.full_column = UINT8_MAX;
 8014f44:	4b83      	ldr	r3, [pc, #524]	; (8015154 <chirp_round+0x580>)
 8014f46:	22ff      	movs	r2, #255	; 0xff
 8014f48:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        rece_dissem_index = UINT16_MAX;
 8014f4c:	4b82      	ldr	r3, [pc, #520]	; (8015158 <chirp_round+0x584>)
 8014f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f52:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8014f54:	4b81      	ldr	r3, [pc, #516]	; (801515c <chirp_round+0x588>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	68da      	ldr	r2, [r3, #12]
 8014f5a:	4b80      	ldr	r3, [pc, #512]	; (801515c <chirp_round+0x588>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f042 0201 	orr.w	r2, r2, #1
 8014f62:	60da      	str	r2, [r3, #12]

		deadline = mixer_start();
 8014f64:	f7fd fa72 	bl	801244c <mixer_start>
 8014f68:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

        __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 8014f6c:	4b7b      	ldr	r3, [pc, #492]	; (801515c <chirp_round+0x588>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	68da      	ldr	r2, [r3, #12]
 8014f72:	4b7a      	ldr	r3, [pc, #488]	; (801515c <chirp_round+0x588>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f022 0201 	bic.w	r2, r2, #1
 8014f7a:	60da      	str	r2, [r3, #12]

        if (chirp_config.primitive != FLOODING)
 8014f7c:	4b75      	ldr	r3, [pc, #468]	; (8015154 <chirp_round+0x580>)
 8014f7e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	f000 82e6 	beq.w	8015554 <chirp_round+0x980>
        {
        if (chirp_outl->task != MX_DISSEMINATE)
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d03f      	beq.n	8015010 <chirp_round+0x43c>
        {
            Stats_value(RX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN)));
 8014f90:	200f      	movs	r0, #15
 8014f92:	f7f9 f90d 	bl	800e1b0 <energest_type_time>
 8014f96:	4603      	mov	r3, r0
 8014f98:	63bb      	str	r3, [r7, #56]	; 0x38
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 8014f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9c:	091b      	lsrs	r3, r3, #4
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	2001      	movs	r0, #1
 8014fa2:	f7f5 fd67 	bl	800aa74 <Stats_value>
            Stats_value(TX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_TRANSMIT)));
 8014fa6:	200e      	movs	r0, #14
 8014fa8:	f7f9 f902 	bl	800e1b0 <energest_type_time>
 8014fac:	4603      	mov	r3, r0
 8014fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fb2:	091b      	lsrs	r3, r3, #4
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	2002      	movs	r0, #2
 8014fb8:	f7f5 fd5c 	bl	800aa74 <Stats_value>
            Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8014fbc:	2007      	movs	r0, #7
 8014fbe:	f7f9 f8f7 	bl	800e1b0 <energest_type_time>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	2007      	movs	r0, #7
 8014fc8:	f7f5 fda6 	bl	800ab18 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 8014fcc:	2008      	movs	r0, #8
 8014fce:	f7f9 f8ef 	bl	800e1b0 <energest_type_time>
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	200e      	movs	r0, #14
 8014fd6:	f7f9 f8eb 	bl	800e1b0 <energest_type_time>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	1ae4      	subs	r4, r4, r3
 8014fde:	200f      	movs	r0, #15
 8014fe0:	f7f9 f8e6 	bl	800e1b0 <energest_type_time>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	1ae3      	subs	r3, r4, r3
 8014fe8:	4619      	mov	r1, r3
 8014fea:	2008      	movs	r0, #8
 8014fec:	f7f5 fd94 	bl	800ab18 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8014ff0:	200e      	movs	r0, #14
 8014ff2:	f7f9 f8dd 	bl	800e1b0 <energest_type_time>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	200e      	movs	r0, #14
 8014ffc:	f7f5 fd8c 	bl	800ab18 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8015000:	200f      	movs	r0, #15
 8015002:	f7f9 f8d5 	bl	800e1b0 <energest_type_time>
 8015006:	4603      	mov	r3, r0
 8015008:	4619      	mov	r1, r3
 801500a:	200f      	movs	r0, #15
 801500c:	f7f5 fd84 	bl	800ab18 <Stats_value_debug>
        }

        if (!chirp_recv(node_id, chirp_outl))
 8015010:	79fb      	ldrb	r3, [r7, #7]
 8015012:	6839      	ldr	r1, [r7, #0]
 8015014:	4618      	mov	r0, r3
 8015016:	f7fe fe83 	bl	8013d20 <chirp_recv>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d15e      	bne.n	80150de <chirp_round+0x50a>
        {
            mx.stat_counter.slot_decoded = 0;
 8015020:	4b4f      	ldr	r3, [pc, #316]	; (8015160 <chirp_round+0x58c>)
 8015022:	2200      	movs	r2, #0
 8015024:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
            /* If in arrange state, none packet has been received, break loop */
            if (chirp_outl->task == MX_ARRANGE)
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	2b06      	cmp	r3, #6
 801502e:	d101      	bne.n	8015034 <chirp_round+0x460>
            {
                return 0;
 8015030:	2300      	movs	r3, #0
 8015032:	e349      	b.n	80156c8 <chirp_round+0xaf4>
            }
            else
            {
                failed_round++;
 8015034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015038:	3301      	adds	r3, #1
 801503a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                PRINTF("failed:%d\n", failed_round);
 801503e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015042:	4619      	mov	r1, r3
 8015044:	4847      	ldr	r0, [pc, #284]	; (8015164 <chirp_round+0x590>)
 8015046:	f00d f8ad 	bl	80221a4 <iprintf>
                if (chirp_outl->task == MX_DISSEMINATE)
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	2b01      	cmp	r3, #1
 8015050:	d12f      	bne.n	80150b2 <chirp_round+0x4de>
                {
                    if (failed_round >= 2)
 8015052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015056:	2b01      	cmp	r3, #1
 8015058:	d944      	bls.n	80150e4 <chirp_round+0x510>
                    {
                        Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 801505a:	4b41      	ldr	r3, [pc, #260]	; (8015160 <chirp_round+0x58c>)
 801505c:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 8015060:	4619      	mov	r1, r3
 8015062:	2000      	movs	r0, #0
 8015064:	f7f5 fd06 	bl	800aa74 <Stats_value>
                        Stats_to_Flash(chirp_outl->task);
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	4618      	mov	r0, r3
 801506e:	f7f5 fdcb 	bl	800ac08 <Stats_to_Flash>
                        if (((node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max)) || ((!node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 1)))
 8015072:	79fb      	ldrb	r3, [r7, #7]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d009      	beq.n	801508c <chirp_round+0x4b8>
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801507e:	b29a      	uxth	r2, r3
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015086:	b29b      	uxth	r3, r3
 8015088:	429a      	cmp	r2, r3
 801508a:	d20e      	bcs.n	80150aa <chirp_round+0x4d6>
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d10d      	bne.n	80150ae <chirp_round+0x4da>
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015098:	b29b      	uxth	r3, r3
 801509a:	461a      	mov	r2, r3
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	3301      	adds	r3, #1
 80150a6:	429a      	cmp	r2, r3
 80150a8:	db01      	blt.n	80150ae <chirp_round+0x4da>
                            return 1;
 80150aa:	2301      	movs	r3, #1
 80150ac:	e30c      	b.n	80156c8 <chirp_round+0xaf4>
                        else
                        {
                            return 0;
 80150ae:	2300      	movs	r3, #0
 80150b0:	e30a      	b.n	80156c8 <chirp_round+0xaf4>
                        }
                    }
                }
                else if ((failed_round >= 1) && (chirp_outl->task != MX_DISSEMINATE))
 80150b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d014      	beq.n	80150e4 <chirp_round+0x510>
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	2b01      	cmp	r3, #1
 80150c0:	d010      	beq.n	80150e4 <chirp_round+0x510>
                {
                    Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 80150c2:	4b27      	ldr	r3, [pc, #156]	; (8015160 <chirp_round+0x58c>)
 80150c4:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 80150c8:	4619      	mov	r1, r3
 80150ca:	2000      	movs	r0, #0
 80150cc:	f7f5 fcd2 	bl	800aa74 <Stats_value>
                    Stats_to_Flash(chirp_outl->task);
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7f5 fd97 	bl	800ac08 <Stats_to_Flash>
                    return 0;
 80150da:	2300      	movs	r3, #0
 80150dc:	e2f4      	b.n	80156c8 <chirp_round+0xaf4>
                }
            }
        }
        else
            failed_round = 0;
 80150de:	2300      	movs	r3, #0
 80150e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        if (chirp_outl->task != MX_DISSEMINATE)
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	2b01      	cmp	r3, #1
 80150ea:	d006      	beq.n	80150fa <chirp_round+0x526>
            Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 80150ec:	4b1c      	ldr	r3, [pc, #112]	; (8015160 <chirp_round+0x58c>)
 80150ee:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 80150f2:	4619      	mov	r1, r3
 80150f4:	2000      	movs	r0, #0
 80150f6:	f7f5 fcbd 	bl	800aa74 <Stats_value>

		while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 80150fa:	bf00      	nop
 80150fc:	f7f6 fcae 	bl	800ba5c <gpi_tick_fast_extended>
 8015100:	4603      	mov	r3, r0
 8015102:	460c      	mov	r4, r1
 8015104:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8015108:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801510c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8015110:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8015114:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015118:	1ac9      	subs	r1, r1, r3
 801511a:	eb62 0204 	sbc.w	r2, r2, r4
 801511e:	468b      	mov	fp, r1
 8015120:	4694      	mov	ip, r2
 8015122:	e9c7 bc0c 	strd	fp, ip, [r7, #48]	; 0x30
 8015126:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801512a:	2b00      	cmp	r3, #0
 801512c:	f174 0300 	sbcs.w	r3, r4, #0
 8015130:	db1a      	blt.n	8015168 <chirp_round+0x594>
 8015132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015136:	4313      	orrs	r3, r2
 8015138:	2b00      	cmp	r3, #0
 801513a:	bf14      	ite	ne
 801513c:	2301      	movne	r3, #1
 801513e:	2300      	moveq	r3, #0
 8015140:	b2db      	uxtb	r3, r3
 8015142:	e013      	b.n	801516c <chirp_round+0x598>
 8015144:	2000112c 	.word	0x2000112c
 8015148:	200012c8 	.word	0x200012c8
 801514c:	20001308 	.word	0x20001308
 8015150:	20000f10 	.word	0x20000f10
 8015154:	20001430 	.word	0x20001430
 8015158:	20000470 	.word	0x20000470
 801515c:	20001140 	.word	0x20001140
 8015160:	200014f0 	.word	0x200014f0
 8015164:	08025654 	.word	0x08025654
 8015168:	f04f 33ff 	mov.w	r3, #4294967295
 801516c:	2b00      	cmp	r3, #0
 801516e:	dbc5      	blt.n	80150fc <chirp_round+0x528>

        /* in dissemination, nodes have to send back the results, so switch the configuration between rounds */
        if (chirp_outl->task == MX_DISSEMINATE)
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	781b      	ldrb	r3, [r3, #0]
 8015174:	2b01      	cmp	r3, #1
 8015176:	f040 819f 	bne.w	80154b8 <chirp_round+0x8e4>
        {
                chirp_outl->disem_file_index_stay++;
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015180:	b29b      	uxth	r3, r3
 8015182:	3301      	adds	r3, #1
 8015184:	b29a      	uxth	r2, r3
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                PRINTF("disem_file_index_stay:%d\n", chirp_outl->disem_file_index_stay);
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015192:	b29b      	uxth	r3, r3
 8015194:	4619      	mov	r1, r3
 8015196:	4857      	ldr	r0, [pc, #348]	; (80152f4 <chirp_round+0x720>)
 8015198:	f00d f804 	bl	80221a4 <iprintf>
                //     {
                //         return 0;
                //     }
                // }
                /* dissemination session: disseminate files to all nodes */
                if (!chirp_outl->disem_flag)
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f040 80b2 	bne.w	801530c <chirp_round+0x738>
                {
                    Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 80151a8:	2007      	movs	r0, #7
 80151aa:	f7f9 f801 	bl	800e1b0 <energest_type_time>
 80151ae:	4603      	mov	r3, r0
 80151b0:	4619      	mov	r1, r3
 80151b2:	2007      	movs	r0, #7
 80151b4:	f7f5 fcb0 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 80151b8:	2008      	movs	r0, #8
 80151ba:	f7f8 fff9 	bl	800e1b0 <energest_type_time>
 80151be:	4604      	mov	r4, r0
 80151c0:	200e      	movs	r0, #14
 80151c2:	f7f8 fff5 	bl	800e1b0 <energest_type_time>
 80151c6:	4603      	mov	r3, r0
 80151c8:	1ae4      	subs	r4, r4, r3
 80151ca:	200f      	movs	r0, #15
 80151cc:	f7f8 fff0 	bl	800e1b0 <energest_type_time>
 80151d0:	4603      	mov	r3, r0
 80151d2:	1ae3      	subs	r3, r4, r3
 80151d4:	4619      	mov	r1, r3
 80151d6:	2008      	movs	r0, #8
 80151d8:	f7f5 fc9e 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 80151dc:	200e      	movs	r0, #14
 80151de:	f7f8 ffe7 	bl	800e1b0 <energest_type_time>
 80151e2:	4603      	mov	r3, r0
 80151e4:	4619      	mov	r1, r3
 80151e6:	200e      	movs	r0, #14
 80151e8:	f7f5 fc96 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 80151ec:	200f      	movs	r0, #15
 80151ee:	f7f8 ffdf 	bl	800e1b0 <energest_type_time>
 80151f2:	4603      	mov	r3, r0
 80151f4:	4619      	mov	r1, r3
 80151f6:	200f      	movs	r0, #15
 80151f8:	f7f5 fc8e 	bl	800ab18 <Stats_value_debug>
                    free(payload_distribution);
 80151fc:	4b3e      	ldr	r3, [pc, #248]	; (80152f8 <chirp_round+0x724>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	4618      	mov	r0, r3
 8015202:	f00c f9af 	bl	8021564 <free>
                    chirp_radio_config(chirp_outl->default_sf, 7, 1, 8, chirp_outl->default_tp, chirp_outl->default_freq);
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	f8d3 300d 	ldr.w	r3, [r3, #13]
 801520c:	b2d8      	uxtb	r0, r3
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015214:	683a      	ldr	r2, [r7, #0]
 8015216:	f8d2 2011 	ldr.w	r2, [r2, #17]
 801521a:	9201      	str	r2, [sp, #4]
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	2308      	movs	r3, #8
 8015220:	2201      	movs	r2, #1
 8015222:	2107      	movs	r1, #7
 8015224:	f7fd fe02 	bl	8012e2c <chirp_radio_config>
                    /* If now is confirm, the initiator collect all nodes information about whether they are full rank last round, if so, then send the next file chunk, file index++, else do not increase file index */
                    if ((!node_id) && (chirp_config.full_column == 0))
 8015228:	79fb      	ldrb	r3, [r7, #7]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d117      	bne.n	801525e <chirp_round+0x68a>
 801522e:	4b33      	ldr	r3, [pc, #204]	; (80152fc <chirp_round+0x728>)
 8015230:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8015234:	2b00      	cmp	r3, #0
 8015236:	d112      	bne.n	801525e <chirp_round+0x68a>
                    {
                        chirp_outl->disem_file_index++;
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801523e:	b29b      	uxth	r3, r3
 8015240:	3301      	adds	r3, #1
 8015242:	b29a      	uxth	r2, r3
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                        chirp_outl->disem_file_index_stay = 0;
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	2200      	movs	r2, #0
 801524e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8015252:	2200      	movs	r2, #0
 8015254:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                        PRINTF("full receive\n");
 8015258:	4829      	ldr	r0, [pc, #164]	; (8015300 <chirp_round+0x72c>)
 801525a:	f00d f82b 	bl	80222b4 <puts>
                    }
                    PRINTF("next: disem_flag: %d, %d\n", chirp_outl->disem_file_index, chirp_outl->disem_file_max);
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015264:	b29b      	uxth	r3, r3
 8015266:	4619      	mov	r1, r3
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801526e:	b29b      	uxth	r3, r3
 8015270:	461a      	mov	r2, r3
 8015272:	4824      	ldr	r0, [pc, #144]	; (8015304 <chirp_round+0x730>)
 8015274:	f00c ff96 	bl	80221a4 <iprintf>
                    chirp_packet_config(chirp_outl->num_nodes, chirp_outl->generation_size, chirp_outl->payload_len + HASH_TAIL, DISSEMINATION);
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801528a:	3302      	adds	r3, #2
 801528c:	b2da      	uxtb	r2, r3
 801528e:	2302      	movs	r3, #2
 8015290:	f7fd fb66 	bl	8012960 <chirp_packet_config>
                    chirp_outl->packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8015294:	4b19      	ldr	r3, [pc, #100]	; (80152fc <chirp_round+0x728>)
 8015296:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801529a:	4b18      	ldr	r3, [pc, #96]	; (80152fc <chirp_round+0x728>)
 801529c:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80152a0:	4b16      	ldr	r3, [pc, #88]	; (80152fc <chirp_round+0x728>)
 80152a2:	8a5b      	ldrh	r3, [r3, #18]
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	3302      	adds	r3, #2
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	9301      	str	r3, [sp, #4]
 80152ae:	2308      	movs	r3, #8
 80152b0:	9300      	str	r3, [sp, #0]
 80152b2:	2300      	movs	r3, #0
 80152b4:	2201      	movs	r2, #1
 80152b6:	f7f7 fe69 	bl	800cf8c <SX1276GetPacketTime>
 80152ba:	4602      	mov	r2, r0
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	f8c3 2007 	str.w	r2, [r3, #7]
                    chirp_slot_config(chirp_outl->packet_time + 100000, chirp_outl->default_slot_num, 2000000);
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80152c8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80152cc:	33a0      	adds	r3, #160	; 0xa0
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80152d4:	b291      	uxth	r1, r2
 80152d6:	4a0c      	ldr	r2, [pc, #48]	; (8015308 <chirp_round+0x734>)
 80152d8:	4618      	mov	r0, r3
 80152da:	f7fd fd3b 	bl	8012d54 <chirp_slot_config>
                    chirp_payload_distribution(chirp_outl->task);
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd fe02 	bl	8012eec <chirp_payload_distribution>
                    chirp_outl->disem_flag = 1;
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	2201      	movs	r2, #1
 80152ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80152f0:	e0e2      	b.n	80154b8 <chirp_round+0x8e4>
 80152f2:	bf00      	nop
 80152f4:	08025660 	.word	0x08025660
 80152f8:	20000cc8 	.word	0x20000cc8
 80152fc:	20001430 	.word	0x20001430
 8015300:	0802567c 	.word	0x0802567c
 8015304:	0802568c 	.word	0x0802568c
 8015308:	001e8480 	.word	0x001e8480
                }
                /* confirm session: collect all nodes condition (if full rank in last mixer round) */
                else
                {
                    Stats_value(RX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN)));
 801530c:	200f      	movs	r0, #15
 801530e:	f7f8 ff4f 	bl	800e1b0 <energest_type_time>
 8015312:	4603      	mov	r3, r0
 8015314:	61fb      	str	r3, [r7, #28]
 8015316:	69fb      	ldr	r3, [r7, #28]
 8015318:	091b      	lsrs	r3, r3, #4
 801531a:	4619      	mov	r1, r3
 801531c:	2001      	movs	r0, #1
 801531e:	f7f5 fba9 	bl	800aa74 <Stats_value>
                    Stats_value(TX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_TRANSMIT)));
 8015322:	200e      	movs	r0, #14
 8015324:	f7f8 ff44 	bl	800e1b0 <energest_type_time>
 8015328:	4603      	mov	r3, r0
 801532a:	623b      	str	r3, [r7, #32]
 801532c:	6a3b      	ldr	r3, [r7, #32]
 801532e:	091b      	lsrs	r3, r3, #4
 8015330:	4619      	mov	r1, r3
 8015332:	2002      	movs	r0, #2
 8015334:	f7f5 fb9e 	bl	800aa74 <Stats_value>
                    Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 8015338:	4bbc      	ldr	r3, [pc, #752]	; (801562c <chirp_round+0xa58>)
 801533a:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 801533e:	4619      	mov	r1, r3
 8015340:	2000      	movs	r0, #0
 8015342:	f7f5 fb97 	bl	800aa74 <Stats_value>

                    Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8015346:	2007      	movs	r0, #7
 8015348:	f7f8 ff32 	bl	800e1b0 <energest_type_time>
 801534c:	4603      	mov	r3, r0
 801534e:	4619      	mov	r1, r3
 8015350:	2007      	movs	r0, #7
 8015352:	f7f5 fbe1 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 8015356:	2008      	movs	r0, #8
 8015358:	f7f8 ff2a 	bl	800e1b0 <energest_type_time>
 801535c:	4604      	mov	r4, r0
 801535e:	200e      	movs	r0, #14
 8015360:	f7f8 ff26 	bl	800e1b0 <energest_type_time>
 8015364:	4603      	mov	r3, r0
 8015366:	1ae4      	subs	r4, r4, r3
 8015368:	200f      	movs	r0, #15
 801536a:	f7f8 ff21 	bl	800e1b0 <energest_type_time>
 801536e:	4603      	mov	r3, r0
 8015370:	1ae3      	subs	r3, r4, r3
 8015372:	4619      	mov	r1, r3
 8015374:	2008      	movs	r0, #8
 8015376:	f7f5 fbcf 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 801537a:	200e      	movs	r0, #14
 801537c:	f7f8 ff18 	bl	800e1b0 <energest_type_time>
 8015380:	4603      	mov	r3, r0
 8015382:	4619      	mov	r1, r3
 8015384:	200e      	movs	r0, #14
 8015386:	f7f5 fbc7 	bl	800ab18 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 801538a:	200f      	movs	r0, #15
 801538c:	f7f8 ff10 	bl	800e1b0 <energest_type_time>
 8015390:	4603      	mov	r3, r0
 8015392:	4619      	mov	r1, r3
 8015394:	200f      	movs	r0, #15
 8015396:	f7f5 fbbf 	bl	800ab18 <Stats_value_debug>
                    PRINTF("ENERGEST_TYPE_LPM:%lu\n", (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LPM)));
 801539a:	2008      	movs	r0, #8
 801539c:	f7f8 ff08 	bl	800e1b0 <energest_type_time>
 80153a0:	4603      	mov	r3, r0
 80153a2:	627b      	str	r3, [r7, #36]	; 0x24
 80153a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a6:	091b      	lsrs	r3, r3, #4
 80153a8:	4619      	mov	r1, r3
 80153aa:	48a1      	ldr	r0, [pc, #644]	; (8015630 <chirp_round+0xa5c>)
 80153ac:	f00c fefa 	bl	80221a4 <iprintf>

                    free(payload_distribution);
 80153b0:	4ba0      	ldr	r3, [pc, #640]	; (8015634 <chirp_round+0xa60>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f00c f8d5 	bl	8021564 <free>
                    if (chirp_outl->dissem_back_sf)
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d00d      	beq.n	80153e0 <chirp_round+0x80c>
                        chirp_radio_config(chirp_outl->dissem_back_sf, 7, 1, 8, 14, chirp_outl->default_freq);
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	f893 0020 	ldrb.w	r0, [r3, #32]
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80153d0:	9301      	str	r3, [sp, #4]
 80153d2:	230e      	movs	r3, #14
 80153d4:	9300      	str	r3, [sp, #0]
 80153d6:	2308      	movs	r3, #8
 80153d8:	2201      	movs	r2, #1
 80153da:	2107      	movs	r1, #7
 80153dc:	f7fd fd26 	bl	8012e2c <chirp_radio_config>
                    PRINTF("next: collect disem_flag: %d, %d\n", chirp_outl->disem_file_index, chirp_outl->disem_file_max);
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	4619      	mov	r1, r3
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	461a      	mov	r2, r3
 80153f4:	4890      	ldr	r0, [pc, #576]	; (8015638 <chirp_round+0xa64>)
 80153f6:	f00c fed5 	bl	80221a4 <iprintf>
                    // chirp_outl->payload_len = DATA_HEADER_LENGTH;
                    chirp_packet_config(chirp_outl->num_nodes, chirp_outl->num_nodes, DATA_HEADER_LENGTH + HASH_TAIL, COLLECTION);
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8015406:	2303      	movs	r3, #3
 8015408:	220a      	movs	r2, #10
 801540a:	f7fd faa9 	bl	8012960 <chirp_packet_config>
                    chirp_outl->packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801540e:	4b8b      	ldr	r3, [pc, #556]	; (801563c <chirp_round+0xa68>)
 8015410:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8015414:	4b89      	ldr	r3, [pc, #548]	; (801563c <chirp_round+0xa68>)
 8015416:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 801541a:	4b88      	ldr	r3, [pc, #544]	; (801563c <chirp_round+0xa68>)
 801541c:	8a5b      	ldrh	r3, [r3, #18]
 801541e:	b29b      	uxth	r3, r3
 8015420:	b2db      	uxtb	r3, r3
 8015422:	3302      	adds	r3, #2
 8015424:	b2db      	uxtb	r3, r3
 8015426:	9301      	str	r3, [sp, #4]
 8015428:	2308      	movs	r3, #8
 801542a:	9300      	str	r3, [sp, #0]
 801542c:	2300      	movs	r3, #0
 801542e:	2201      	movs	r2, #1
 8015430:	f7f7 fdac 	bl	800cf8c <SX1276GetPacketTime>
 8015434:	4602      	mov	r2, r0
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	f8c3 2007 	str.w	r2, [r3, #7]
                    if (chirp_outl->dissem_back_slot_num == 0)
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015442:	2b00      	cmp	r3, #0
 8015444:	d107      	bne.n	8015456 <chirp_round+0x882>
                        chirp_outl->dissem_back_slot_num = chirp_outl->num_nodes * 8;
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	b2da      	uxtb	r2, r3
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    chirp_slot_config(chirp_outl->packet_time + 100000, chirp_outl->dissem_back_slot_num, 1500000);
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801545c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8015460:	33a0      	adds	r3, #160	; 0xa0
 8015462:	683a      	ldr	r2, [r7, #0]
 8015464:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015468:	b291      	uxth	r1, r2
 801546a:	4a75      	ldr	r2, [pc, #468]	; (8015640 <chirp_round+0xa6c>)
 801546c:	4618      	mov	r0, r3
 801546e:	f7fd fc71 	bl	8012d54 <chirp_slot_config>
                    chirp_payload_distribution(MX_COLLECT);
 8015472:	2002      	movs	r0, #2
 8015474:	f7fd fd3a 	bl	8012eec <chirp_payload_distribution>
                    chirp_outl->disem_flag = 0;
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	2200      	movs	r2, #0
 801547c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                    /* in confirm, all nodes sends packets */
                    PRINTF("rece_dissem_index:%x\n", rece_dissem_index);
 8015480:	4b70      	ldr	r3, [pc, #448]	; (8015644 <chirp_round+0xa70>)
 8015482:	881b      	ldrh	r3, [r3, #0]
 8015484:	4619      	mov	r1, r3
 8015486:	4870      	ldr	r0, [pc, #448]	; (8015648 <chirp_round+0xa74>)
 8015488:	f00c fe8c 	bl	80221a4 <iprintf>

                    if (chirp_outl->disem_file_index > rece_dissem_index)
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015492:	b29a      	uxth	r2, r3
 8015494:	4b6b      	ldr	r3, [pc, #428]	; (8015644 <chirp_round+0xa70>)
 8015496:	881b      	ldrh	r3, [r3, #0]
 8015498:	429a      	cmp	r2, r3
 801549a:	d90d      	bls.n	80154b8 <chirp_round+0x8e4>
                    {
                        PRINTF("full disem_copy\n");
 801549c:	486b      	ldr	r0, [pc, #428]	; (801564c <chirp_round+0xa78>)
 801549e:	f00c ff09 	bl	80222b4 <puts>
                        chirp_config.disem_copy = 1;
 80154a2:	4b66      	ldr	r3, [pc, #408]	; (801563c <chirp_round+0xa68>)
 80154a4:	2201      	movs	r2, #1
 80154a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                        chirp_outl->disem_flag_full_rank = mx.stat_counter.slot_full_rank;
 80154aa:	4b60      	ldr	r3, [pc, #384]	; (801562c <chirp_round+0xa58>)
 80154ac:	f8b3 389a 	ldrh.w	r3, [r3, #2202]	; 0x89a
 80154b0:	b2da      	uxtb	r2, r3
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    }
                }
        }

        /* once the round num expired, quit loop */
        if ((chirp_outl->round > chirp_outl->round_max) && (chirp_outl->task != MX_DISSEMINATE))
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80154be:	b29a      	uxth	r2, r3
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d90a      	bls.n	80154e2 <chirp_round+0x90e>
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d006      	beq.n	80154e2 <chirp_round+0x90e>
        {
            Stats_to_Flash(chirp_outl->task);
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f5 fb95 	bl	800ac08 <Stats_to_Flash>
            return 1;
 80154de:	2301      	movs	r3, #1
 80154e0:	e0f2      	b.n	80156c8 <chirp_round+0xaf4>
        }
        /* in collection, break when file is done */
        else if ((chirp_outl->task == MX_DISSEMINATE) && (!chirp_outl->disem_flag))
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b01      	cmp	r3, #1
 80154e8:	d126      	bne.n	8015538 <chirp_round+0x964>
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d121      	bne.n	8015538 <chirp_round+0x964>
        {
            if ((node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 2))
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00d      	beq.n	8015516 <chirp_round+0x942>
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015500:	b29b      	uxth	r3, r3
 8015502:	461a      	mov	r2, r3
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801550a:	b29b      	uxth	r3, r3
 801550c:	3302      	adds	r3, #2
 801550e:	429a      	cmp	r2, r3
 8015510:	db01      	blt.n	8015516 <chirp_round+0x942>
                return 1;
 8015512:	2301      	movs	r3, #1
 8015514:	e0d8      	b.n	80156c8 <chirp_round+0xaf4>
            else if ((!node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 1))
 8015516:	79fb      	ldrb	r3, [r7, #7]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d10d      	bne.n	8015538 <chirp_round+0x964>
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015522:	b29b      	uxth	r3, r3
 8015524:	461a      	mov	r2, r3
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801552c:	b29b      	uxth	r3, r3
 801552e:	3301      	adds	r3, #1
 8015530:	429a      	cmp	r2, r3
 8015532:	db01      	blt.n	8015538 <chirp_round+0x964>
                return 1;
 8015534:	2301      	movs	r3, #1
 8015536:	e0c7      	b.n	80156c8 <chirp_round+0xaf4>
        }

        deadline += (Gpi_Fast_Tick_Extended)update_period;
 8015538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801553a:	469b      	mov	fp, r3
 801553c:	f04f 0c00 	mov.w	ip, #0
 8015540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8015544:	eb1b 0301 	adds.w	r3, fp, r1
 8015548:	eb4c 0402 	adc.w	r4, ip, r2
 801554c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 8015550:	f7ff bbcf 	b.w	8014cf2 <chirp_round+0x11e>
        }
        else
        {
            Gpi_Fast_Tick_Native resync_plus =  GPI_TICK_MS_TO_FAST2(((chirp_config.mx_slot_length_in_us * 5 / 2) * (chirp_config.mx_round_length / 2 - 1) / 1000) - chirp_config.mx_round_length * (chirp_config.mx_slot_length_in_us / 1000));
 8015554:	4b39      	ldr	r3, [pc, #228]	; (801563c <chirp_round+0xa68>)
 8015556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015558:	4613      	mov	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	4413      	add	r3, r2
 801555e:	085b      	lsrs	r3, r3, #1
 8015560:	4a36      	ldr	r2, [pc, #216]	; (801563c <chirp_round+0xa68>)
 8015562:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8015566:	b292      	uxth	r2, r2
 8015568:	0852      	lsrs	r2, r2, #1
 801556a:	b292      	uxth	r2, r2
 801556c:	3a01      	subs	r2, #1
 801556e:	fb02 f303 	mul.w	r3, r2, r3
 8015572:	4a37      	ldr	r2, [pc, #220]	; (8015650 <chirp_round+0xa7c>)
 8015574:	fba2 2303 	umull	r2, r3, r2, r3
 8015578:	099a      	lsrs	r2, r3, #6
 801557a:	4b30      	ldr	r3, [pc, #192]	; (801563c <chirp_round+0xa68>)
 801557c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8015580:	b29b      	uxth	r3, r3
 8015582:	4618      	mov	r0, r3
 8015584:	4b2d      	ldr	r3, [pc, #180]	; (801563c <chirp_round+0xa68>)
 8015586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015588:	4931      	ldr	r1, [pc, #196]	; (8015650 <chirp_round+0xa7c>)
 801558a:	fba1 1303 	umull	r1, r3, r1, r3
 801558e:	099b      	lsrs	r3, r3, #6
 8015590:	fb03 f300 	mul.w	r3, r3, r0
 8015594:	1ad3      	subs	r3, r2, r3
 8015596:	4a2e      	ldr	r2, [pc, #184]	; (8015650 <chirp_round+0xa7c>)
 8015598:	fba2 2303 	umull	r2, r3, r2, r3
 801559c:	099b      	lsrs	r3, r3, #6
 801559e:	4a2d      	ldr	r2, [pc, #180]	; (8015654 <chirp_round+0xa80>)
 80155a0:	fb02 f103 	mul.w	r1, r2, r3
 80155a4:	4b25      	ldr	r3, [pc, #148]	; (801563c <chirp_round+0xa68>)
 80155a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80155a8:	4613      	mov	r3, r2
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	4413      	add	r3, r2
 80155ae:	085b      	lsrs	r3, r3, #1
 80155b0:	4a22      	ldr	r2, [pc, #136]	; (801563c <chirp_round+0xa68>)
 80155b2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80155b6:	b292      	uxth	r2, r2
 80155b8:	0852      	lsrs	r2, r2, #1
 80155ba:	b292      	uxth	r2, r2
 80155bc:	3a01      	subs	r2, #1
 80155be:	fb02 f303 	mul.w	r3, r2, r3
 80155c2:	4a23      	ldr	r2, [pc, #140]	; (8015650 <chirp_round+0xa7c>)
 80155c4:	fba2 2303 	umull	r2, r3, r2, r3
 80155c8:	099a      	lsrs	r2, r3, #6
 80155ca:	4b1c      	ldr	r3, [pc, #112]	; (801563c <chirp_round+0xa68>)
 80155cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80155d0:	b29b      	uxth	r3, r3
 80155d2:	461c      	mov	r4, r3
 80155d4:	4b19      	ldr	r3, [pc, #100]	; (801563c <chirp_round+0xa68>)
 80155d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155d8:	481d      	ldr	r0, [pc, #116]	; (8015650 <chirp_round+0xa7c>)
 80155da:	fba0 0303 	umull	r0, r3, r0, r3
 80155de:	099b      	lsrs	r3, r3, #6
 80155e0:	fb03 f304 	mul.w	r3, r3, r4
 80155e4:	1ad2      	subs	r2, r2, r3
 80155e6:	4b1a      	ldr	r3, [pc, #104]	; (8015650 <chirp_round+0xa7c>)
 80155e8:	fba3 0302 	umull	r0, r3, r3, r2
 80155ec:	099b      	lsrs	r3, r3, #6
 80155ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80155f2:	fb00 f303 	mul.w	r3, r0, r3
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80155fc:	fb02 f303 	mul.w	r3, r2, r3
 8015600:	440b      	add	r3, r1
 8015602:	657b      	str	r3, [r7, #84]	; 0x54
            if (!chirp_config.glossy_task)
 8015604:	4b0d      	ldr	r3, [pc, #52]	; (801563c <chirp_round+0xa68>)
 8015606:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801560a:	2b00      	cmp	r3, #0
 801560c:	d124      	bne.n	8015658 <chirp_round+0xa84>
                deadline += (Gpi_Fast_Tick_Extended)(update_period - resync_plus);
 801560e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	469b      	mov	fp, r3
 8015616:	f04f 0c00 	mov.w	ip, #0
 801561a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801561e:	eb1b 0301 	adds.w	r3, fp, r1
 8015622:	eb4c 0402 	adc.w	r4, ip, r2
 8015626:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 801562a:	e021      	b.n	8015670 <chirp_round+0xa9c>
 801562c:	200014f0 	.word	0x200014f0
 8015630:	080256a8 	.word	0x080256a8
 8015634:	20000cc8 	.word	0x20000cc8
 8015638:	080256c0 	.word	0x080256c0
 801563c:	20001430 	.word	0x20001430
 8015640:	0016e360 	.word	0x0016e360
 8015644:	20000470 	.word	0x20000470
 8015648:	080256e4 	.word	0x080256e4
 801564c:	080256fc 	.word	0x080256fc
 8015650:	10624dd3 	.word	0x10624dd3
 8015654:	00f42400 	.word	0x00f42400
            else
                deadline += (Gpi_Fast_Tick_Extended)(update_period);
 8015658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801565a:	469b      	mov	fp, r3
 801565c:	f04f 0c00 	mov.w	ip, #0
 8015660:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8015664:	eb1b 0301 	adds.w	r3, fp, r1
 8015668:	eb4c 0402 	adc.w	r4, ip, r2
 801566c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
            while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 8015670:	bf00      	nop
 8015672:	f7f6 f9f3 	bl	800ba5c <gpi_tick_fast_extended>
 8015676:	4603      	mov	r3, r0
 8015678:	460c      	mov	r4, r1
 801567a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 801567e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8015682:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8015686:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801568a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801568e:	1ac9      	subs	r1, r1, r3
 8015690:	eb62 0204 	sbc.w	r2, r2, r4
 8015694:	468b      	mov	fp, r1
 8015696:	4694      	mov	ip, r2
 8015698:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 801569c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f174 0300 	sbcs.w	r3, r4, #0
 80156a6:	db08      	blt.n	80156ba <chirp_round+0xae6>
 80156a8:	693a      	ldr	r2, [r7, #16]
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	4313      	orrs	r3, r2
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	bf14      	ite	ne
 80156b2:	2301      	movne	r3, #1
 80156b4:	2300      	moveq	r3, #0
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	e001      	b.n	80156be <chirp_round+0xaea>
 80156ba:	f04f 33ff 	mov.w	r3, #4294967295
 80156be:	2b00      	cmp	r3, #0
 80156c0:	dbd7      	blt.n	8015672 <chirp_round+0xa9e>
            return chirp_config.glossy_task;
 80156c2:	4b04      	ldr	r3, [pc, #16]	; (80156d4 <chirp_round+0xb00>)
 80156c4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
        }
	}
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3768      	adds	r7, #104	; 0x68
 80156cc:	46bd      	mov	sp, r7
 80156ce:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80156d2:	bf00      	nop
 80156d4:	20001430 	.word	0x20001430

080156d8 <TIM5_IRQHandler>:

void DOG_TIMER_ISR_NAME(void)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	af00      	add	r7, sp, #0
    PRINTF("d:%d, %d\n", count_dog, deadline_dog);
 80156dc:	4b17      	ldr	r3, [pc, #92]	; (801573c <TIM5_IRQHandler+0x64>)
 80156de:	881b      	ldrh	r3, [r3, #0]
 80156e0:	4619      	mov	r1, r3
 80156e2:	4b17      	ldr	r3, [pc, #92]	; (8015740 <TIM5_IRQHandler+0x68>)
 80156e4:	881b      	ldrh	r3, [r3, #0]
 80156e6:	461a      	mov	r2, r3
 80156e8:	4816      	ldr	r0, [pc, #88]	; (8015744 <TIM5_IRQHandler+0x6c>)
 80156ea:	f00c fd5b 	bl	80221a4 <iprintf>
    count_dog++;
 80156ee:	4b13      	ldr	r3, [pc, #76]	; (801573c <TIM5_IRQHandler+0x64>)
 80156f0:	881b      	ldrh	r3, [r3, #0]
 80156f2:	3301      	adds	r3, #1
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	4b11      	ldr	r3, [pc, #68]	; (801573c <TIM5_IRQHandler+0x64>)
 80156f8:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 80156fa:	4b13      	ldr	r3, [pc, #76]	; (8015748 <TIM5_IRQHandler+0x70>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	f06f 0201 	mvn.w	r2, #1
 8015702:	611a      	str	r2, [r3, #16]
	__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 8015704:	4b10      	ldr	r3, [pc, #64]	; (8015748 <TIM5_IRQHandler+0x70>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	68da      	ldr	r2, [r3, #12]
 801570a:	4b0f      	ldr	r3, [pc, #60]	; (8015748 <TIM5_IRQHandler+0x70>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f022 0201 	bic.w	r2, r2, #1
 8015712:	60da      	str	r2, [r3, #12]
    if (count_dog > deadline_dog)
 8015714:	4b09      	ldr	r3, [pc, #36]	; (801573c <TIM5_IRQHandler+0x64>)
 8015716:	881a      	ldrh	r2, [r3, #0]
 8015718:	4b09      	ldr	r3, [pc, #36]	; (8015740 <TIM5_IRQHandler+0x68>)
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	429a      	cmp	r2, r3
 801571e:	d902      	bls.n	8015726 <TIM5_IRQHandler+0x4e>
 8015720:	b671      	cpsid	f
    {
        __disable_fault_irq();
        NVIC_SystemReset();
 8015722:	f7fd f879 	bl	8012818 <NVIC_SystemReset>
    }
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 8015726:	4b08      	ldr	r3, [pc, #32]	; (8015748 <TIM5_IRQHandler+0x70>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	68da      	ldr	r2, [r3, #12]
 801572c:	4b06      	ldr	r3, [pc, #24]	; (8015748 <TIM5_IRQHandler+0x70>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f042 0201 	orr.w	r2, r2, #1
 8015734:	60da      	str	r2, [r3, #12]
}
 8015736:	bf00      	nop
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	2000046e 	.word	0x2000046e
 8015740:	2000046c 	.word	0x2000046c
 8015744:	0802570c 	.word	0x0802570c
 8015748:	20001140 	.word	0x20001140

0801574c <NVIC_SystemReset>:
{
 801574c:	b480      	push	{r7}
 801574e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015750:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015754:	4b05      	ldr	r3, [pc, #20]	; (801576c <NVIC_SystemReset+0x20>)
 8015756:	68db      	ldr	r3, [r3, #12]
 8015758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801575c:	4903      	ldr	r1, [pc, #12]	; (801576c <NVIC_SystemReset+0x20>)
 801575e:	4b04      	ldr	r3, [pc, #16]	; (8015770 <NVIC_SystemReset+0x24>)
 8015760:	4313      	orrs	r3, r2
 8015762:	60cb      	str	r3, [r1, #12]
 8015764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8015768:	bf00      	nop
    __NOP();
 801576a:	e7fd      	b.n	8015768 <NVIC_SystemReset+0x1c>
 801576c:	e000ed00 	.word	0xe000ed00
 8015770:	05fa0004 	.word	0x05fa0004

08015774 <unlink_node>:
//**************************************************************************************************
//***** Local Functions ****************************************************************************

// remove node from list
static void unlink_node(uint16_t node_id)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	4603      	mov	r3, r0
 801577c:	80fb      	strh	r3, [r7, #6]
	assert_reset((node_id < chirp_config.mx_num_nodes));
 801577e:	4b30      	ldr	r3, [pc, #192]	; (8015840 <unlink_node+0xcc>)
 8015780:	881b      	ldrh	r3, [r3, #0]
 8015782:	b29b      	uxth	r3, r3
 8015784:	88fa      	ldrh	r2, [r7, #6]
 8015786:	429a      	cmp	r2, r3
 8015788:	d308      	bcc.n	801579c <unlink_node+0x28>
 801578a:	4b2d      	ldr	r3, [pc, #180]	; (8015840 <unlink_node+0xcc>)
 801578c:	881b      	ldrh	r3, [r3, #0]
 801578e:	b29b      	uxth	r3, r3
 8015790:	88fa      	ldrh	r2, [r7, #6]
 8015792:	429a      	cmp	r2, r3
 8015794:	d302      	bcc.n	801579c <unlink_node+0x28>
  __ASM volatile ("cpsid f" : : : "memory");
 8015796:	b671      	cpsid	f
 8015798:	f7ff ffd8 	bl	801574c <NVIC_SystemReset>

	Node *list_head = (Node *)mx.history[mx.history[node_id]->list_id + chirp_config.mx_num_nodes];
 801579c:	88fb      	ldrh	r3, [r7, #6]
 801579e:	4a29      	ldr	r2, [pc, #164]	; (8015844 <unlink_node+0xd0>)
 80157a0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80157a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157a8:	789b      	ldrb	r3, [r3, #2]
 80157aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80157ae:	b2db      	uxtb	r3, r3
 80157b0:	461a      	mov	r2, r3
 80157b2:	4b23      	ldr	r3, [pc, #140]	; (8015840 <unlink_node+0xcc>)
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	4413      	add	r3, r2
 80157ba:	4a22      	ldr	r2, [pc, #136]	; (8015844 <unlink_node+0xd0>)
 80157bc:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80157c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157c4:	60fb      	str	r3, [r7, #12]

	assert_reset((list_head->mx_num_nodes > 0));
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	885b      	ldrh	r3, [r3, #2]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d106      	bne.n	80157dc <unlink_node+0x68>
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	885b      	ldrh	r3, [r3, #2]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d102      	bne.n	80157dc <unlink_node+0x68>
 80157d6:	b671      	cpsid	f
 80157d8:	f7ff ffb8 	bl	801574c <NVIC_SystemReset>

	mx.history[mx.history[node_id]->prev]->next = mx.history[node_id]->next;
 80157dc:	88fb      	ldrh	r3, [r7, #6]
 80157de:	4a19      	ldr	r2, [pc, #100]	; (8015844 <unlink_node+0xd0>)
 80157e0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80157e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80157e8:	88fb      	ldrh	r3, [r7, #6]
 80157ea:	4916      	ldr	r1, [pc, #88]	; (8015844 <unlink_node+0xd0>)
 80157ec:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80157f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	4913      	ldr	r1, [pc, #76]	; (8015844 <unlink_node+0xd0>)
 80157f8:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80157fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015800:	7852      	ldrb	r2, [r2, #1]
 8015802:	705a      	strb	r2, [r3, #1]
	mx.history[mx.history[node_id]->next]->prev = mx.history[node_id]->prev;
 8015804:	88fb      	ldrh	r3, [r7, #6]
 8015806:	4a0f      	ldr	r2, [pc, #60]	; (8015844 <unlink_node+0xd0>)
 8015808:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 801580c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015810:	88fb      	ldrh	r3, [r7, #6]
 8015812:	490c      	ldr	r1, [pc, #48]	; (8015844 <unlink_node+0xd0>)
 8015814:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801581c:	785b      	ldrb	r3, [r3, #1]
 801581e:	4909      	ldr	r1, [pc, #36]	; (8015844 <unlink_node+0xd0>)
 8015820:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015828:	7812      	ldrb	r2, [r2, #0]
 801582a:	701a      	strb	r2, [r3, #0]

	--(list_head->mx_num_nodes);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	885b      	ldrh	r3, [r3, #2]
 8015830:	3b01      	subs	r3, #1
 8015832:	b29a      	uxth	r2, r3
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	805a      	strh	r2, [r3, #2]
}
 8015838:	bf00      	nop
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	20001430 	.word	0x20001430
 8015844:	200014f0 	.word	0x200014f0

08015848 <append_node>:

//**************************************************************************************************

// insert node at end of list
static void append_node(uint16_t node_id, Node *list_head)
{
 8015848:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801584c:	b086      	sub	sp, #24
 801584e:	af00      	add	r7, sp, #0
 8015850:	4603      	mov	r3, r0
 8015852:	6039      	str	r1, [r7, #0]
 8015854:	80fb      	strh	r3, [r7, #6]
	uint8_t	head_index;

	// ATTENTION: list_head is variable; so depending on sizeof(mx.history[0]), ARRAY_INDEX() may
	// generate an expensive division operation. To avoid that, we manually decide what to do.
	// NOTE: the condition checks get resolved at compile time
	if (IS_POWER_OF_2(chirp_config.history_len_8))
 8015856:	4b8b      	ldr	r3, [pc, #556]	; (8015a84 <append_node+0x23c>)
 8015858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801585a:	b29b      	uxth	r3, r3
 801585c:	2b00      	cmp	r3, #0
 801585e:	d029      	beq.n	80158b4 <append_node+0x6c>
 8015860:	4b88      	ldr	r3, [pc, #544]	; (8015a84 <append_node+0x23c>)
 8015862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015864:	b29b      	uxth	r3, r3
 8015866:	fa1f fb83 	uxth.w	fp, r3
 801586a:	f04f 0c00 	mov.w	ip, #0
 801586e:	4b85      	ldr	r3, [pc, #532]	; (8015a84 <append_node+0x23c>)
 8015870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015872:	b29b      	uxth	r3, r3
 8015874:	b29b      	uxth	r3, r3
 8015876:	f04f 0400 	mov.w	r4, #0
 801587a:	425b      	negs	r3, r3
 801587c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015880:	ea0b 0103 	and.w	r1, fp, r3
 8015884:	ea0c 0204 	and.w	r2, ip, r4
 8015888:	4b7e      	ldr	r3, [pc, #504]	; (8015a84 <append_node+0x23c>)
 801588a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801588c:	b29b      	uxth	r3, r3
 801588e:	b29b      	uxth	r3, r3
 8015890:	f04f 0400 	mov.w	r4, #0
 8015894:	42a2      	cmp	r2, r4
 8015896:	bf08      	it	eq
 8015898:	4299      	cmpeq	r1, r3
 801589a:	d10b      	bne.n	80158b4 <append_node+0x6c>
		head_index = ARRAY_INDEX_SIZE_ADD(list_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	4a7a      	ldr	r2, [pc, #488]	; (8015a88 <append_node+0x240>)
 80158a0:	f8d2 2468 	ldr.w	r2, [r2, #1128]	; 0x468
 80158a4:	1a9b      	subs	r3, r3, r2
 80158a6:	4a77      	ldr	r2, [pc, #476]	; (8015a84 <append_node+0x23c>)
 80158a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80158aa:	b292      	uxth	r2, r2
 80158ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80158b0:	75fb      	strb	r3, [r7, #23]
 80158b2:	e019      	b.n	80158e8 <append_node+0xa0>
	else if (chirp_config.history_len_8 < 0x100)
 80158b4:	4b73      	ldr	r3, [pc, #460]	; (8015a84 <append_node+0x23c>)
 80158b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	2bff      	cmp	r3, #255	; 0xff
 80158bc:	d814      	bhi.n	80158e8 <append_node+0xa0>
		head_index = gpi_divu_16x8((uintptr_t)list_head - (uintptr_t)&(mx.history[0]->prev), chirp_config.history_len_8, 1);
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	4a71      	ldr	r2, [pc, #452]	; (8015a88 <append_node+0x240>)
 80158c2:	f8d2 2468 	ldr.w	r2, [r2, #1128]	; 0x468
 80158c6:	1a9b      	subs	r3, r3, r2
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	4b6e      	ldr	r3, [pc, #440]	; (8015a84 <append_node+0x23c>)
 80158cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	82ba      	strh	r2, [r7, #20]
 80158d4:	74fb      	strb	r3, [r7, #19]
 80158d6:	2301      	movs	r3, #1
 80158d8:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE uint16_t gpi_divu_16x8(uint16_t x, uint8_t d, int accurate)
{
	register uint32_t	r;

	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 80158da:	8abb      	ldrh	r3, [r7, #20]
 80158dc:	7cfa      	ldrb	r2, [r7, #19]
 80158de:	fbb3 f3f2 	udiv	r3, r3, r2
 80158e2:	461c      	mov	r4, r3

	return r;
 80158e4:	b2a3      	uxth	r3, r4
 80158e6:	75fb      	strb	r3, [r7, #23]
//	else assert_reset(0, "inefficient program, see source code comments");
	assert_reset(IS_POWER_OF_2((chirp_config.history_len_8) || chirp_config.history_len_8 < 0x100));
 80158e8:	4b66      	ldr	r3, [pc, #408]	; (8015a84 <append_node+0x23c>)
 80158ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d104      	bne.n	80158fc <append_node+0xb4>
 80158f2:	4b64      	ldr	r3, [pc, #400]	; (8015a84 <append_node+0x23c>)
 80158f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	2bff      	cmp	r3, #255	; 0xff
 80158fa:	d838      	bhi.n	801596e <append_node+0x126>
 80158fc:	4b61      	ldr	r3, [pc, #388]	; (8015a84 <append_node+0x23c>)
 80158fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015900:	b29b      	uxth	r3, r3
 8015902:	2b00      	cmp	r3, #0
 8015904:	d104      	bne.n	8015910 <append_node+0xc8>
 8015906:	4b5f      	ldr	r3, [pc, #380]	; (8015a84 <append_node+0x23c>)
 8015908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801590a:	b29b      	uxth	r3, r3
 801590c:	2bff      	cmp	r3, #255	; 0xff
 801590e:	d801      	bhi.n	8015914 <append_node+0xcc>
 8015910:	2301      	movs	r3, #1
 8015912:	e000      	b.n	8015916 <append_node+0xce>
 8015914:	2300      	movs	r3, #0
 8015916:	469b      	mov	fp, r3
 8015918:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 801591c:	4b59      	ldr	r3, [pc, #356]	; (8015a84 <append_node+0x23c>)
 801591e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015920:	b29b      	uxth	r3, r3
 8015922:	2b00      	cmp	r3, #0
 8015924:	d104      	bne.n	8015930 <append_node+0xe8>
 8015926:	4b57      	ldr	r3, [pc, #348]	; (8015a84 <append_node+0x23c>)
 8015928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801592a:	b29b      	uxth	r3, r3
 801592c:	2bff      	cmp	r3, #255	; 0xff
 801592e:	d801      	bhi.n	8015934 <append_node+0xec>
 8015930:	2301      	movs	r3, #1
 8015932:	e000      	b.n	8015936 <append_node+0xee>
 8015934:	2300      	movs	r3, #0
 8015936:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801593a:	425b      	negs	r3, r3
 801593c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015940:	ea0b 0103 	and.w	r1, fp, r3
 8015944:	ea0c 0204 	and.w	r2, ip, r4
 8015948:	4b4e      	ldr	r3, [pc, #312]	; (8015a84 <append_node+0x23c>)
 801594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801594c:	b29b      	uxth	r3, r3
 801594e:	2b00      	cmp	r3, #0
 8015950:	d104      	bne.n	801595c <append_node+0x114>
 8015952:	4b4c      	ldr	r3, [pc, #304]	; (8015a84 <append_node+0x23c>)
 8015954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015956:	b29b      	uxth	r3, r3
 8015958:	2bff      	cmp	r3, #255	; 0xff
 801595a:	d801      	bhi.n	8015960 <append_node+0x118>
 801595c:	2301      	movs	r3, #1
 801595e:	e000      	b.n	8015962 <append_node+0x11a>
 8015960:	2300      	movs	r3, #0
 8015962:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8015966:	42a2      	cmp	r2, r4
 8015968:	bf08      	it	eq
 801596a:	4299      	cmpeq	r1, r3
 801596c:	d04a      	beq.n	8015a04 <append_node+0x1bc>
 801596e:	4b45      	ldr	r3, [pc, #276]	; (8015a84 <append_node+0x23c>)
 8015970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015972:	b29b      	uxth	r3, r3
 8015974:	2b00      	cmp	r3, #0
 8015976:	d104      	bne.n	8015982 <append_node+0x13a>
 8015978:	4b42      	ldr	r3, [pc, #264]	; (8015a84 <append_node+0x23c>)
 801597a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801597c:	b29b      	uxth	r3, r3
 801597e:	2bff      	cmp	r3, #255	; 0xff
 8015980:	d83a      	bhi.n	80159f8 <append_node+0x1b0>
 8015982:	4b40      	ldr	r3, [pc, #256]	; (8015a84 <append_node+0x23c>)
 8015984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015986:	b29b      	uxth	r3, r3
 8015988:	2b00      	cmp	r3, #0
 801598a:	d104      	bne.n	8015996 <append_node+0x14e>
 801598c:	4b3d      	ldr	r3, [pc, #244]	; (8015a84 <append_node+0x23c>)
 801598e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015990:	b29b      	uxth	r3, r3
 8015992:	2bff      	cmp	r3, #255	; 0xff
 8015994:	d801      	bhi.n	801599a <append_node+0x152>
 8015996:	2301      	movs	r3, #1
 8015998:	e000      	b.n	801599c <append_node+0x154>
 801599a:	2300      	movs	r3, #0
 801599c:	469b      	mov	fp, r3
 801599e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80159a2:	4b38      	ldr	r3, [pc, #224]	; (8015a84 <append_node+0x23c>)
 80159a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d104      	bne.n	80159b6 <append_node+0x16e>
 80159ac:	4b35      	ldr	r3, [pc, #212]	; (8015a84 <append_node+0x23c>)
 80159ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	2bff      	cmp	r3, #255	; 0xff
 80159b4:	d801      	bhi.n	80159ba <append_node+0x172>
 80159b6:	2301      	movs	r3, #1
 80159b8:	e000      	b.n	80159bc <append_node+0x174>
 80159ba:	2300      	movs	r3, #0
 80159bc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80159c0:	425b      	negs	r3, r3
 80159c2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80159c6:	ea0b 0103 	and.w	r1, fp, r3
 80159ca:	ea0c 0204 	and.w	r2, ip, r4
 80159ce:	4b2d      	ldr	r3, [pc, #180]	; (8015a84 <append_node+0x23c>)
 80159d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d104      	bne.n	80159e2 <append_node+0x19a>
 80159d8:	4b2a      	ldr	r3, [pc, #168]	; (8015a84 <append_node+0x23c>)
 80159da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80159dc:	b29b      	uxth	r3, r3
 80159de:	2bff      	cmp	r3, #255	; 0xff
 80159e0:	d801      	bhi.n	80159e6 <append_node+0x19e>
 80159e2:	2301      	movs	r3, #1
 80159e4:	e000      	b.n	80159e8 <append_node+0x1a0>
 80159e6:	2300      	movs	r3, #0
 80159e8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80159ec:	42a2      	cmp	r2, r4
 80159ee:	bf08      	it	eq
 80159f0:	4299      	cmpeq	r1, r3
 80159f2:	d101      	bne.n	80159f8 <append_node+0x1b0>
 80159f4:	2301      	movs	r3, #1
 80159f6:	e000      	b.n	80159fa <append_node+0x1b2>
 80159f8:	2300      	movs	r3, #0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d102      	bne.n	8015a04 <append_node+0x1bc>
 80159fe:	b671      	cpsid	f
 8015a00:	f7ff fea4 	bl	801574c <NVIC_SystemReset>

	// link node
	mx.history[node_id]->prev = list_head->prev;
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	4a20      	ldr	r2, [pc, #128]	; (8015a88 <append_node+0x240>)
 8015a08:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a10:	683a      	ldr	r2, [r7, #0]
 8015a12:	7812      	ldrb	r2, [r2, #0]
 8015a14:	701a      	strb	r2, [r3, #0]
	mx.history[node_id]->next = head_index;
 8015a16:	88fb      	ldrh	r3, [r7, #6]
 8015a18:	4a1b      	ldr	r2, [pc, #108]	; (8015a88 <append_node+0x240>)
 8015a1a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a22:	7dfa      	ldrb	r2, [r7, #23]
 8015a24:	705a      	strb	r2, [r3, #1]
	mx.history[list_head->prev]->next = node_id;
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	4a17      	ldr	r2, [pc, #92]	; (8015a88 <append_node+0x240>)
 8015a2c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a34:	88fa      	ldrh	r2, [r7, #6]
 8015a36:	b2d2      	uxtb	r2, r2
 8015a38:	705a      	strb	r2, [r3, #1]
	list_head->prev = node_id;
 8015a3a:	88fb      	ldrh	r3, [r7, #6]
 8015a3c:	b2da      	uxtb	r2, r3
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	701a      	strb	r2, [r3, #0]

	mx.history[node_id]->list_id = head_index - chirp_config.mx_num_nodes;
 8015a42:	4b10      	ldr	r3, [pc, #64]	; (8015a84 <append_node+0x23c>)
 8015a44:	881b      	ldrh	r3, [r3, #0]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	7dfa      	ldrb	r2, [r7, #23]
 8015a4c:	1ad3      	subs	r3, r2, r3
 8015a4e:	b2d9      	uxtb	r1, r3
 8015a50:	88fb      	ldrh	r3, [r7, #6]
 8015a52:	4a0d      	ldr	r2, [pc, #52]	; (8015a88 <append_node+0x240>)
 8015a54:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	f003 0303 	and.w	r3, r3, #3
 8015a62:	b2d9      	uxtb	r1, r3
 8015a64:	7893      	ldrb	r3, [r2, #2]
 8015a66:	f361 0301 	bfi	r3, r1, #0, #2
 8015a6a:	7093      	strb	r3, [r2, #2]

	++(list_head->mx_num_nodes);
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	885b      	ldrh	r3, [r3, #2]
 8015a70:	3301      	adds	r3, #1
 8015a72:	b29a      	uxth	r2, r3
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	805a      	strh	r2, [r3, #2]
}
 8015a78:	bf00      	nop
 8015a7a:	3718      	adds	r7, #24
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8015a82:	bf00      	nop
 8015a84:	20001430 	.word	0x20001430
 8015a88:	200014f0 	.word	0x200014f0

08015a8c <mx_init_history>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mx_init_history()
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0

	GPI_TRACE_FUNCTION();
 8015a92:	bf00      	nop
	uint16_t	i;

	// Initially all nodes are chained together in the absent list.

	for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8015a94:	2300      	movs	r3, #0
 8015a96:	80fb      	strh	r3, [r7, #6]
 8015a98:	e04f      	b.n	8015b3a <mx_init_history+0xae>
	{

		mx.history[i]->prev 		= i - 1;
 8015a9a:	88fb      	ldrh	r3, [r7, #6]
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	88fb      	ldrh	r3, [r7, #6]
 8015aa0:	496b      	ldr	r1, [pc, #428]	; (8015c50 <mx_init_history+0x1c4>)
 8015aa2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015aaa:	3a01      	subs	r2, #1
 8015aac:	b2d2      	uxtb	r2, r2
 8015aae:	701a      	strb	r2, [r3, #0]
		mx.history[i]->next 		= i + 1;
 8015ab0:	88fb      	ldrh	r3, [r7, #6]
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	88fb      	ldrh	r3, [r7, #6]
 8015ab6:	4966      	ldr	r1, [pc, #408]	; (8015c50 <mx_init_history+0x1c4>)
 8015ab8:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015abc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015ac0:	3201      	adds	r2, #1
 8015ac2:	b2d2      	uxtb	r2, r2
 8015ac4:	705a      	strb	r2, [r3, #1]
		mx.history[i]->value		= 0;
 8015ac6:	88fb      	ldrh	r3, [r7, #6]
 8015ac8:	4a61      	ldr	r2, [pc, #388]	; (8015c50 <mx_init_history+0x1c4>)
 8015aca:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	805a      	strh	r2, [r3, #2]
		mx.history[i]->list_id	= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8) - chirp_config.mx_num_nodes;
 8015ad6:	4b5f      	ldr	r3, [pc, #380]	; (8015c54 <mx_init_history+0x1c8>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	461a      	mov	r2, r3
 8015adc:	4b5c      	ldr	r3, [pc, #368]	; (8015c50 <mx_init_history+0x1c4>)
 8015ade:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015ae2:	1ad3      	subs	r3, r2, r3
 8015ae4:	4a5c      	ldr	r2, [pc, #368]	; (8015c58 <mx_init_history+0x1cc>)
 8015ae6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015ae8:	b292      	uxth	r2, r2
 8015aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8015aee:	b2da      	uxtb	r2, r3
 8015af0:	4b59      	ldr	r3, [pc, #356]	; (8015c58 <mx_init_history+0x1cc>)
 8015af2:	881b      	ldrh	r3, [r3, #0]
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	1ad3      	subs	r3, r2, r3
 8015afa:	b2d9      	uxtb	r1, r3
 8015afc:	88fb      	ldrh	r3, [r7, #6]
 8015afe:	4a54      	ldr	r2, [pc, #336]	; (8015c50 <mx_init_history+0x1c4>)
 8015b00:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015b08:	460b      	mov	r3, r1
 8015b0a:	f003 0303 	and.w	r3, r3, #3
 8015b0e:	b2d9      	uxtb	r1, r3
 8015b10:	7893      	ldrb	r3, [r2, #2]
 8015b12:	f361 0301 	bfi	r3, r1, #0, #2
 8015b16:	7093      	strb	r3, [r2, #2]

#if MX_REQUEST && (MX_REQUEST_HEURISTIC > 1)
		memset(&(mx.history[i]->row_map_chunk[0]), 0, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8015b18:	88fb      	ldrh	r3, [r7, #6]
 8015b1a:	4a4d      	ldr	r2, [pc, #308]	; (8015c50 <mx_init_history+0x1c4>)
 8015b1c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b24:	1d18      	adds	r0, r3, #4
 8015b26:	4b4c      	ldr	r3, [pc, #304]	; (8015c58 <mx_init_history+0x1cc>)
 8015b28:	7f5b      	ldrb	r3, [r3, #29]
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	2100      	movs	r1, #0
 8015b30:	f00b fd2b 	bl	802158a <memset>
	for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8015b34:	88fb      	ldrh	r3, [r7, #6]
 8015b36:	3301      	adds	r3, #1
 8015b38:	80fb      	strh	r3, [r7, #6]
 8015b3a:	4b47      	ldr	r3, [pc, #284]	; (8015c58 <mx_init_history+0x1cc>)
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	88fa      	ldrh	r2, [r7, #6]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d3a9      	bcc.n	8015a9a <mx_init_history+0xe>
#endif
	}

	mx.history[0]->prev			= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015b46:	4b43      	ldr	r3, [pc, #268]	; (8015c54 <mx_init_history+0x1c8>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	4b40      	ldr	r3, [pc, #256]	; (8015c50 <mx_init_history+0x1c4>)
 8015b4e:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	4a40      	ldr	r2, [pc, #256]	; (8015c58 <mx_init_history+0x1cc>)
 8015b56:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015b58:	b292      	uxth	r2, r2
 8015b5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8015b5e:	4b3c      	ldr	r3, [pc, #240]	; (8015c50 <mx_init_history+0x1c4>)
 8015b60:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015b64:	b2d2      	uxtb	r2, r2
 8015b66:	701a      	strb	r2, [r3, #0]
	mx.history[--i]->next 		= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015b68:	4b3a      	ldr	r3, [pc, #232]	; (8015c54 <mx_init_history+0x1c8>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	4b38      	ldr	r3, [pc, #224]	; (8015c50 <mx_init_history+0x1c4>)
 8015b70:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015b74:	1ad3      	subs	r3, r2, r3
 8015b76:	4a38      	ldr	r2, [pc, #224]	; (8015c58 <mx_init_history+0x1cc>)
 8015b78:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015b7a:	b292      	uxth	r2, r2
 8015b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b80:	88fb      	ldrh	r3, [r7, #6]
 8015b82:	3b01      	subs	r3, #1
 8015b84:	80fb      	strh	r3, [r7, #6]
 8015b86:	88fb      	ldrh	r3, [r7, #6]
 8015b88:	4a31      	ldr	r2, [pc, #196]	; (8015c50 <mx_init_history+0x1c4>)
 8015b8a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b92:	b2ca      	uxtb	r2, r1
 8015b94:	705a      	strb	r2, [r3, #1]

	mx_absent_head->next		= 0;
 8015b96:	4b2f      	ldr	r3, [pc, #188]	; (8015c54 <mx_init_history+0x1c8>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	705a      	strb	r2, [r3, #1]
	mx_absent_head->prev 		= i;
 8015b9e:	4b2d      	ldr	r3, [pc, #180]	; (8015c54 <mx_init_history+0x1c8>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	88fa      	ldrh	r2, [r7, #6]
 8015ba4:	b2d2      	uxtb	r2, r2
 8015ba6:	701a      	strb	r2, [r3, #0]
	mx_absent_head->mx_num_nodes 	= ++i;
 8015ba8:	88fb      	ldrh	r3, [r7, #6]
 8015baa:	3301      	adds	r3, #1
 8015bac:	80fb      	strh	r3, [r7, #6]
 8015bae:	4b29      	ldr	r3, [pc, #164]	; (8015c54 <mx_init_history+0x1c8>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	88fa      	ldrh	r2, [r7, #6]
 8015bb4:	805a      	strh	r2, [r3, #2]

	mx_present_head->next   	= ARRAY_INDEX_SIZE_ADD(mx_present_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015bb6:	4b29      	ldr	r3, [pc, #164]	; (8015c5c <mx_init_history+0x1d0>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	461a      	mov	r2, r3
 8015bbc:	4b24      	ldr	r3, [pc, #144]	; (8015c50 <mx_init_history+0x1c4>)
 8015bbe:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	4a24      	ldr	r2, [pc, #144]	; (8015c58 <mx_init_history+0x1cc>)
 8015bc6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015bc8:	b292      	uxth	r2, r2
 8015bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8015bce:	4b23      	ldr	r3, [pc, #140]	; (8015c5c <mx_init_history+0x1d0>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	b2d2      	uxtb	r2, r2
 8015bd4:	705a      	strb	r2, [r3, #1]
	mx_present_head->prev   	= ARRAY_INDEX_SIZE_ADD(mx_present_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015bd6:	4b21      	ldr	r3, [pc, #132]	; (8015c5c <mx_init_history+0x1d0>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	461a      	mov	r2, r3
 8015bdc:	4b1c      	ldr	r3, [pc, #112]	; (8015c50 <mx_init_history+0x1c4>)
 8015bde:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	4a1c      	ldr	r2, [pc, #112]	; (8015c58 <mx_init_history+0x1cc>)
 8015be6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015be8:	b292      	uxth	r2, r2
 8015bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8015bee:	4b1b      	ldr	r3, [pc, #108]	; (8015c5c <mx_init_history+0x1d0>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	b2d2      	uxtb	r2, r2
 8015bf4:	701a      	strb	r2, [r3, #0]
	mx_present_head->mx_num_nodes	= 0;
 8015bf6:	4b19      	ldr	r3, [pc, #100]	; (8015c5c <mx_init_history+0x1d0>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	805a      	strh	r2, [r3, #2]

	mx_finished_head->next  	= ARRAY_INDEX_SIZE_ADD(mx_finished_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015bfe:	4b18      	ldr	r3, [pc, #96]	; (8015c60 <mx_init_history+0x1d4>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	461a      	mov	r2, r3
 8015c04:	4b12      	ldr	r3, [pc, #72]	; (8015c50 <mx_init_history+0x1c4>)
 8015c06:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	4a12      	ldr	r2, [pc, #72]	; (8015c58 <mx_init_history+0x1cc>)
 8015c0e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015c10:	b292      	uxth	r2, r2
 8015c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8015c16:	4b12      	ldr	r3, [pc, #72]	; (8015c60 <mx_init_history+0x1d4>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	b2d2      	uxtb	r2, r2
 8015c1c:	705a      	strb	r2, [r3, #1]
	mx_finished_head->prev  	= ARRAY_INDEX_SIZE_ADD(mx_finished_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015c1e:	4b10      	ldr	r3, [pc, #64]	; (8015c60 <mx_init_history+0x1d4>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	461a      	mov	r2, r3
 8015c24:	4b0a      	ldr	r3, [pc, #40]	; (8015c50 <mx_init_history+0x1c4>)
 8015c26:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	4a0a      	ldr	r2, [pc, #40]	; (8015c58 <mx_init_history+0x1cc>)
 8015c2e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015c30:	b292      	uxth	r2, r2
 8015c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8015c36:	4b0a      	ldr	r3, [pc, #40]	; (8015c60 <mx_init_history+0x1d4>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	b2d2      	uxtb	r2, r2
 8015c3c:	701a      	strb	r2, [r3, #0]
	mx_finished_head->mx_num_nodes	= 0;
 8015c3e:	4b08      	ldr	r3, [pc, #32]	; (8015c60 <mx_init_history+0x1d4>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2200      	movs	r2, #0
 8015c44:	805a      	strh	r2, [r3, #2]

	GPI_TRACE_RETURN();
 8015c46:	bf00      	nop
}
 8015c48:	3708      	adds	r7, #8
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	200014f0 	.word	0x200014f0
 8015c54:	20000ce4 	.word	0x20000ce4
 8015c58:	20001430 	.word	0x20001430
 8015c5c:	20000cc4 	.word	0x20000cc4
 8015c60:	20000ce0 	.word	0x20000ce0

08015c64 <mx_update_history>:

//**************************************************************************************************

void mx_update_history(uint16_t node_id, Packet_Flags flags, uint16_t slot_number)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	7139      	strb	r1, [r7, #4]
 8015c6e:	80fb      	strh	r3, [r7, #6]
 8015c70:	4613      	mov	r3, r2
 8015c72:	807b      	strh	r3, [r7, #2]
	GPI_TRACE_FUNCTION();
 8015c74:	bf00      	nop

	mx.history[node_id]->last_slot_number = slot_number;
 8015c76:	88fb      	ldrh	r3, [r7, #6]
 8015c78:	4a16      	ldr	r2, [pc, #88]	; (8015cd4 <mx_update_history+0x70>)
 8015c7a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015c82:	887b      	ldrh	r3, [r7, #2]
 8015c84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c88:	b299      	uxth	r1, r3
 8015c8a:	8853      	ldrh	r3, [r2, #2]
 8015c8c:	f361 038f 	bfi	r3, r1, #2, #14
 8015c90:	8053      	strh	r3, [r2, #2]
		unlink_node(node_id);
		append_node(node_id, mx_absent_head);
	}
	else
#endif
	if (flags.is_full_rank)
 8015c92:	793b      	ldrb	r3, [r7, #4]
 8015c94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00b      	beq.n	8015cb6 <mx_update_history+0x52>
	{
		unlink_node(node_id);
 8015c9e:	88fb      	ldrh	r3, [r7, #6]
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ff fd67 	bl	8015774 <unlink_node>
		append_node(node_id, mx_finished_head);
 8015ca6:	4b0c      	ldr	r3, [pc, #48]	; (8015cd8 <mx_update_history+0x74>)
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	88fb      	ldrh	r3, [r7, #6]
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7ff fdca 	bl	8015848 <append_node>
	{
		unlink_node(node_id);
		append_node(node_id, mx_present_head);
    }

	GPI_TRACE_RETURN();
 8015cb4:	e00b      	b.n	8015cce <mx_update_history+0x6a>
		unlink_node(node_id);
 8015cb6:	88fb      	ldrh	r3, [r7, #6]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7ff fd5b 	bl	8015774 <unlink_node>
		append_node(node_id, mx_present_head);
 8015cbe:	4b07      	ldr	r3, [pc, #28]	; (8015cdc <mx_update_history+0x78>)
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	88fb      	ldrh	r3, [r7, #6]
 8015cc4:	4611      	mov	r1, r2
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7ff fdbe 	bl	8015848 <append_node>
	GPI_TRACE_RETURN();
 8015ccc:	bf00      	nop
}
 8015cce:	3708      	adds	r7, #8
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	200014f0 	.word	0x200014f0
 8015cd8:	20000ce0 	.word	0x20000ce0
 8015cdc:	20000cc4 	.word	0x20000cc4

08015ce0 <mx_purge_history>:

//**************************************************************************************************

void mx_purge_history()
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8015ce6:	bf00      	nop

	uint16_t	reference = mx.slot_number << 2;
 8015ce8:	4b40      	ldr	r3, [pc, #256]	; (8015dec <mx_purge_history+0x10c>)
 8015cea:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	009b      	lsls	r3, r3, #2
 8015cf2:	81fb      	strh	r3, [r7, #14]
	uint16_t 	node, age;

	// assert sizeof(list_id) == 2 bits
	// list_id is not used itself, but the shifts are optimized to produce efficient code
	// NOTE: this is a runtime assertion, but it is completely removed by optimization if valid
	const Node __attribute__((unused)) assert_node = {0, 0, {-1}};
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	703b      	strb	r3, [r7, #0]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	707b      	strb	r3, [r7, #1]
 8015cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d00:	807b      	strh	r3, [r7, #2]
	assert_msg(assert_node.list_id == 3, "inconsistent code for sizeof(list_id) != 2 bits");
 8015d02:	78bb      	ldrb	r3, [r7, #2]
 8015d04:	f003 0303 	and.w	r3, r3, #3
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	2b03      	cmp	r3, #3
 8015d0c:	d031      	beq.n	8015d72 <mx_purge_history+0x92>
 8015d0e:	4b38      	ldr	r3, [pc, #224]	; (8015df0 <mx_purge_history+0x110>)
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	4938      	ldr	r1, [pc, #224]	; (8015df4 <mx_purge_history+0x114>)
 8015d14:	22ea      	movs	r2, #234	; 0xea
 8015d16:	4618      	mov	r0, r3
 8015d18:	f00b fc04 	bl	8021524 <__assert>
	// i.e. descending by age (oldest entry comes first)

	// walk through present nodes
	while (mx_present_head->mx_num_nodes)
	{
		node = mx_present_head->next;
 8015d1c:	4b36      	ldr	r3, [pc, #216]	; (8015df8 <mx_purge_history+0x118>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	785b      	ldrb	r3, [r3, #1]
 8015d22:	81bb      	strh	r3, [r7, #12]

		age = reference - (mx.history[node]->last_slot_number << 2);
 8015d24:	89bb      	ldrh	r3, [r7, #12]
 8015d26:	4a31      	ldr	r2, [pc, #196]	; (8015dec <mx_purge_history+0x10c>)
 8015d28:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	009b      	lsls	r3, r3, #2
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	89fa      	ldrh	r2, [r7, #14]
 8015d3e:	1ad3      	subs	r3, r2, r3
 8015d40:	817b      	strh	r3, [r7, #10]

		uint16_t history_window = 3 * chirp_config.mx_num_nodes;
 8015d42:	4b2e      	ldr	r3, [pc, #184]	; (8015dfc <mx_purge_history+0x11c>)
 8015d44:	881b      	ldrh	r3, [r3, #0]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	461a      	mov	r2, r3
 8015d4a:	0052      	lsls	r2, r2, #1
 8015d4c:	4413      	add	r3, r2
 8015d4e:	813b      	strh	r3, [r7, #8]
		if (age <= (history_window << 2))
 8015d50:	897a      	ldrh	r2, [r7, #10]
 8015d52:	893b      	ldrh	r3, [r7, #8]
 8015d54:	009b      	lsls	r3, r3, #2
 8015d56:	429a      	cmp	r2, r3
 8015d58:	dd11      	ble.n	8015d7e <mx_purge_history+0x9e>
		{
			break;
		}

		GPI_TRACE_MSG(1, "purging node %u (present) from history (age = %u)", node, age >> 2);
 8015d5a:	bf00      	nop

		unlink_node(node);
 8015d5c:	89bb      	ldrh	r3, [r7, #12]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7ff fd08 	bl	8015774 <unlink_node>

		append_node(node, mx_absent_head);
 8015d64:	4b26      	ldr	r3, [pc, #152]	; (8015e00 <mx_purge_history+0x120>)
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	89bb      	ldrh	r3, [r7, #12]
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7ff fd6b 	bl	8015848 <append_node>
	while (mx_present_head->mx_num_nodes)
 8015d72:	4b21      	ldr	r3, [pc, #132]	; (8015df8 <mx_purge_history+0x118>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	885b      	ldrh	r3, [r3, #2]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1cf      	bne.n	8015d1c <mx_purge_history+0x3c>
 8015d7c:	e02b      	b.n	8015dd6 <mx_purge_history+0xf6>
			break;
 8015d7e:	bf00      	nop
	}

	// walk through finished nodes
	while (mx_finished_head->mx_num_nodes)
 8015d80:	e029      	b.n	8015dd6 <mx_purge_history+0xf6>
	{
		node = mx_finished_head->next;
 8015d82:	4b20      	ldr	r3, [pc, #128]	; (8015e04 <mx_purge_history+0x124>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	785b      	ldrb	r3, [r3, #1]
 8015d88:	81bb      	strh	r3, [r7, #12]

		age = reference - (mx.history[node]->last_slot_number << 2);
 8015d8a:	89bb      	ldrh	r3, [r7, #12]
 8015d8c:	4a17      	ldr	r2, [pc, #92]	; (8015dec <mx_purge_history+0x10c>)
 8015d8e:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d96:	885b      	ldrh	r3, [r3, #2]
 8015d98:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	009b      	lsls	r3, r3, #2
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	89fa      	ldrh	r2, [r7, #14]
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	817b      	strh	r3, [r7, #10]

		uint16_t history_window_finished = 1 * chirp_config.mx_num_nodes;
 8015da8:	4b14      	ldr	r3, [pc, #80]	; (8015dfc <mx_purge_history+0x11c>)
 8015daa:	781a      	ldrb	r2, [r3, #0]
 8015dac:	785b      	ldrb	r3, [r3, #1]
 8015dae:	021b      	lsls	r3, r3, #8
 8015db0:	4313      	orrs	r3, r2
 8015db2:	80fb      	strh	r3, [r7, #6]
		if (age <= (history_window_finished << 2))
 8015db4:	897a      	ldrh	r2, [r7, #10]
 8015db6:	88fb      	ldrh	r3, [r7, #6]
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	dd11      	ble.n	8015de2 <mx_purge_history+0x102>
			break;

		GPI_TRACE_MSG(1, "purging node %u (finished) from history (age = %u)", node, age >> 2);
 8015dbe:	bf00      	nop

		unlink_node(node);
 8015dc0:	89bb      	ldrh	r3, [r7, #12]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7ff fcd6 	bl	8015774 <unlink_node>
		append_node(node, mx_absent_head);
 8015dc8:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <mx_purge_history+0x120>)
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	89bb      	ldrh	r3, [r7, #12]
 8015dce:	4611      	mov	r1, r2
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7ff fd39 	bl	8015848 <append_node>
	while (mx_finished_head->mx_num_nodes)
 8015dd6:	4b0b      	ldr	r3, [pc, #44]	; (8015e04 <mx_purge_history+0x124>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	885b      	ldrh	r3, [r3, #2]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d1d0      	bne.n	8015d82 <mx_purge_history+0xa2>
	}

	GPI_TRACE_RETURN();
 8015de0:	e000      	b.n	8015de4 <mx_purge_history+0x104>
			break;
 8015de2:	bf00      	nop
	GPI_TRACE_RETURN();
 8015de4:	bf00      	nop
}
 8015de6:	3710      	adds	r7, #16
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	200014f0 	.word	0x200014f0
 8015df0:	200000a0 	.word	0x200000a0
 8015df4:	08025718 	.word	0x08025718
 8015df8:	20000cc4 	.word	0x20000cc4
 8015dfc:	20001430 	.word	0x20001430
 8015e00:	20000ce4 	.word	0x20000ce4
 8015e04:	20000ce0 	.word	0x20000ce0

08015e08 <NVIC_SystemReset>:
{
 8015e08:	b480      	push	{r7}
 8015e0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015e0c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015e10:	4b05      	ldr	r3, [pc, #20]	; (8015e28 <NVIC_SystemReset+0x20>)
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015e18:	4903      	ldr	r1, [pc, #12]	; (8015e28 <NVIC_SystemReset+0x20>)
 8015e1a:	4b04      	ldr	r3, [pc, #16]	; (8015e2c <NVIC_SystemReset+0x24>)
 8015e1c:	4313      	orrs	r3, r2
 8015e1e:	60cb      	str	r3, [r1, #12]
 8015e20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8015e24:	bf00      	nop
    __NOP();
 8015e26:	e7fd      	b.n	8015e24 <NVIC_SystemReset+0x1c>
 8015e28:	e000ed00 	.word	0xe000ed00
 8015e2c:	05fa0004 	.word	0x05fa0004

08015e30 <trace_packet>:

#if MX_VERBOSE_PACKETS
	#define TRACE_PACKET(p)		trace_packet(p)

static void trace_packet(const Packet *p)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b0d2      	sub	sp, #328	; 0x148
 8015e34:	af02      	add	r7, sp, #8
 8015e36:	1d3b      	adds	r3, r7, #4
 8015e38:	6018      	str	r0, [r3, #0]
	char msg[300];
	char *ps = msg;
 8015e3a:	f107 030c 	add.w	r3, r7, #12
 8015e3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	ASSERT_CT(2 == sizeof(p->slot_number), check_PRI_formats);
	ASSERT_CT(1 == sizeof(p->sender_id), check_PRI_formats);
	ASSERT_CT(1 == sizeof(p->flags), check_PRI_formats);

	#if !(GPI_ARCH_IS_BOARD(TMOTE_FLOCKLAB) || GPI_ARCH_IS_BOARD(TMOTE_INDRIYA))
		ps += sprintf(ps, "# ID:%u ", (int)mx.tx_packet->sender_id + 1);
 8015e42:	4b63      	ldr	r3, [pc, #396]	; (8015fd0 <trace_packet+0x1a0>)
 8015e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e46:	799b      	ldrb	r3, [r3, #6]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	4961      	ldr	r1, [pc, #388]	; (8015fd4 <trace_packet+0x1a4>)
 8015e4e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8015e52:	f00c fa9f 	bl	8022394 <siprintf>
 8015e56:	4603      	mov	r3, r0
 8015e58:	461a      	mov	r2, r3
 8015e5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015e5e:	4413      	add	r3, r2
 8015e60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// node id MSB marks vector bit order (for log parser):
	// 0: LSB first, big-endian
	// 1: LSB first, little-endian
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
		p->slot_number, (uint16_t)(p->sender_id |
 8015e64:	1d3b      	adds	r3, r7, #4
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	889b      	ldrh	r3, [r3, #4]
 8015e6a:	b29b      	uxth	r3, r3
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 8015e6c:	461a      	mov	r2, r3
		p->slot_number, (uint16_t)(p->sender_id |
 8015e6e:	1d3b      	adds	r3, r7, #4
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	799b      	ldrb	r3, [r3, #6]
 8015e74:	b21b      	sxth	r3, r3
 8015e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015e7e:	b21b      	sxth	r3, r3
 8015e80:	b29b      	uxth	r3, r3
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 8015e82:	4619      	mov	r1, r3
		#elif (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
			0
		#else
			#error unsupported architecture
		#endif
		), p->flags.all);
 8015e84:	1d3b      	adds	r3, r7, #4
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	79db      	ldrb	r3, [r3, #7]
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 8015e8a:	9300      	str	r3, [sp, #0]
 8015e8c:	460b      	mov	r3, r1
 8015e8e:	4952      	ldr	r1, [pc, #328]	; (8015fd8 <trace_packet+0x1a8>)
 8015e90:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8015e94:	f00c fa7e 	bl	8022394 <siprintf>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015ea0:	4413      	add	r3, r2
 8015ea2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	for (i = 0; i < chirp_config.coding_vector.len; i++)
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015eac:	e01b      	b.n	8015ee6 <trace_packet+0xb6>
#if MX_REQUEST || MX_SMART_SHUTDOWN_MAP
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.info_vector.pos + i]);
 8015eae:	4b4b      	ldr	r3, [pc, #300]	; (8015fdc <trace_packet+0x1ac>)
 8015eb0:	7a9b      	ldrb	r3, [r3, #10]
 8015eb2:	461a      	mov	r2, r3
 8015eb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015eb8:	4413      	add	r3, r2
 8015eba:	1d3a      	adds	r2, r7, #4
 8015ebc:	6812      	ldr	r2, [r2, #0]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	7a1b      	ldrb	r3, [r3, #8]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	4946      	ldr	r1, [pc, #280]	; (8015fe0 <trace_packet+0x1b0>)
 8015ec6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8015eca:	f00c fa63 	bl	8022394 <siprintf>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015ed6:	4413      	add	r3, r2
 8015ed8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < chirp_config.coding_vector.len; i++)
 8015edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015ee6:	4b3d      	ldr	r3, [pc, #244]	; (8015fdc <trace_packet+0x1ac>)
 8015ee8:	79db      	ldrb	r3, [r3, #7]
 8015eea:	461a      	mov	r2, r3
 8015eec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015ef0:	4293      	cmp	r3, r2
 8015ef2:	dbdc      	blt.n	8015eae <trace_packet+0x7e>
#else
		ps += sprintf(ps, "00");
#endif

	ps += sprintf(ps, " - ");
 8015ef4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015ef8:	4a3a      	ldr	r2, [pc, #232]	; (8015fe4 <trace_packet+0x1b4>)
 8015efa:	6810      	ldr	r0, [r2, #0]
 8015efc:	6018      	str	r0, [r3, #0]
 8015efe:	2303      	movs	r3, #3
 8015f00:	461a      	mov	r2, r3
 8015f02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f06:	4413      	add	r3, r2
 8015f08:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	for (i = 0; i < chirp_config.coding_vector.len; i++)
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015f12:	e01b      	b.n	8015f4c <trace_packet+0x11c>
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.coding_vector.pos + i]);
 8015f14:	4b31      	ldr	r3, [pc, #196]	; (8015fdc <trace_packet+0x1ac>)
 8015f16:	799b      	ldrb	r3, [r3, #6]
 8015f18:	461a      	mov	r2, r3
 8015f1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015f1e:	4413      	add	r3, r2
 8015f20:	1d3a      	adds	r2, r7, #4
 8015f22:	6812      	ldr	r2, [r2, #0]
 8015f24:	4413      	add	r3, r2
 8015f26:	7a1b      	ldrb	r3, [r3, #8]
 8015f28:	461a      	mov	r2, r3
 8015f2a:	492d      	ldr	r1, [pc, #180]	; (8015fe0 <trace_packet+0x1b0>)
 8015f2c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8015f30:	f00c fa30 	bl	8022394 <siprintf>
 8015f34:	4603      	mov	r3, r0
 8015f36:	461a      	mov	r2, r3
 8015f38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f3c:	4413      	add	r3, r2
 8015f3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < chirp_config.coding_vector.len; i++)
 8015f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015f46:	3301      	adds	r3, #1
 8015f48:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015f4c:	4b23      	ldr	r3, [pc, #140]	; (8015fdc <trace_packet+0x1ac>)
 8015f4e:	79db      	ldrb	r3, [r3, #7]
 8015f50:	461a      	mov	r2, r3
 8015f52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015f56:	4293      	cmp	r3, r2
 8015f58:	dbdc      	blt.n	8015f14 <trace_packet+0xe4>

	ps += sprintf(ps, " - ");
 8015f5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f5e:	4a21      	ldr	r2, [pc, #132]	; (8015fe4 <trace_packet+0x1b4>)
 8015f60:	6810      	ldr	r0, [r2, #0]
 8015f62:	6018      	str	r0, [r3, #0]
 8015f64:	2303      	movs	r3, #3
 8015f66:	461a      	mov	r2, r3
 8015f68:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f6c:	4413      	add	r3, r2
 8015f6e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// for (i = 0; i < sizeof(p->payload); i++)
	// 	ps += sprintf(ps, "%02" PRIx8, p->payload[i]);

	for (i = 0; i < 8; i++)
 8015f72:	2300      	movs	r3, #0
 8015f74:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015f78:	e01b      	b.n	8015fb2 <trace_packet+0x182>
	{
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.payload.pos + i]);
 8015f7a:	4b18      	ldr	r3, [pc, #96]	; (8015fdc <trace_packet+0x1ac>)
 8015f7c:	7a1b      	ldrb	r3, [r3, #8]
 8015f7e:	461a      	mov	r2, r3
 8015f80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015f84:	4413      	add	r3, r2
 8015f86:	1d3a      	adds	r2, r7, #4
 8015f88:	6812      	ldr	r2, [r2, #0]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	7a1b      	ldrb	r3, [r3, #8]
 8015f8e:	461a      	mov	r2, r3
 8015f90:	4913      	ldr	r1, [pc, #76]	; (8015fe0 <trace_packet+0x1b0>)
 8015f92:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8015f96:	f00c f9fd 	bl	8022394 <siprintf>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015fa2:	4413      	add	r3, r2
 8015fa4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < 8; i++)
 8015fa8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015fac:	3301      	adds	r3, #1
 8015fae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8015fb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015fb6:	2b07      	cmp	r3, #7
 8015fb8:	dddf      	ble.n	8015f7a <trace_packet+0x14a>
	}

	PRINTF_CHIRP("%s\n", msg);
 8015fba:	f107 030c 	add.w	r3, r7, #12
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f00c f978 	bl	80222b4 <puts>
}
 8015fc4:	bf00      	nop
 8015fc6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	200014f0 	.word	0x200014f0
 8015fd4:	08025784 	.word	0x08025784
 8015fd8:	08025790 	.word	0x08025790
 8015fdc:	20001430 	.word	0x20001430
 8015fe0:	080257ac 	.word	0x080257ac
 8015fe4:	080257b4 	.word	0x080257b4

08015fe8 <clear_event>:

//**************************************************************************************************
//**************************************************************************************************

static inline void clear_event(Event event)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b087      	sub	sp, #28
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	4603      	mov	r3, r0
 8015ff0:	71fb      	strb	r3, [r7, #7]
	gpi_atomic_clear(&mx.events, BV(event));
 8015ff2:	79fb      	ldrb	r3, [r7, #7]
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8015ffa:	4a0e      	ldr	r2, [pc, #56]	; (8016034 <clear_event+0x4c>)
 8015ffc:	617a      	str	r2, [r7, #20]
 8015ffe:	613b      	str	r3, [r7, #16]
static ALWAYS_INLINE void gpi_atomic_clear(volatile unsigned int *p, unsigned int mask)
{
	// if performance is extremely critical, one can copy the code from gpi_atomic_and()
	// and replace "and" by "bic" instead of manually inverting the mask as done here

	gpi_atomic_and(p, ~mask);
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	43db      	mvns	r3, r3
 8016004:	697a      	ldr	r2, [r7, #20]
 8016006:	60fa      	str	r2, [r7, #12]
 8016008:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 801600a:	f3bf 8f5f 	dmb	sy
		__asm__
 801600e:	68f9      	ldr	r1, [r7, #12]
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	e851 0f00 	ldrex	r0, [r1]
 8016018:	ea00 0003 	and.w	r0, r0, r3
 801601c:	e841 0300 	strex	r3, r0, [r1]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1f7      	bne.n	8016014 <clear_event+0x2c>
 8016024:	f3bf 8f5f 	dmb	sy
}
 8016028:	bf00      	nop
 801602a:	371c      	adds	r7, #28
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr
 8016034:	200014f0 	.word	0x200014f0

08016038 <prepare_tx_packet>:
#endif
//**************************************************************************************************
//***** Global Functions ***************************************************************************

static void prepare_tx_packet()
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b09c      	sub	sp, #112	; 0x70
 801603c:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 801603e:	bf00      	nop
	PROFILE("prepare_tx_packet() entry");
 8016040:	bf00      	nop

	const uint16_t	CHUNK_SIZE = chirp_config.coding_vector.len + chirp_config.payload.len;
 8016042:	4ba8      	ldr	r3, [pc, #672]	; (80162e4 <prepare_tx_packet+0x2ac>)
 8016044:	79db      	ldrb	r3, [r3, #7]
 8016046:	b29a      	uxth	r2, r3
 8016048:	4ba6      	ldr	r3, [pc, #664]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801604a:	7a5b      	ldrb	r3, [r3, #9]
 801604c:	b29b      	uxth	r3, r3
 801604e:	4413      	add	r3, r2
 8016050:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	Matrix_Row		*p;
	void			*pp[MEMXOR_BLOCKSIZE];
	int				pp_used = 0;
 8016054:	2300      	movs	r3, #0
 8016056:	66bb      	str	r3, [r7, #104]	; 0x68
	int_fast16_t	used = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	667b      	str	r3, [r7, #100]	; 0x64
	#if MX_REQUEST
		Matrix_Row	*help_row = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	663b      	str	r3, [r7, #96]	; 0x60
	#endif

	assert_msg(NULL != mx.tx_reserve, "Tx without data -> must not happen");
 8016060:	4ba1      	ldr	r3, [pc, #644]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016064:	2b00      	cmp	r3, #0
 8016066:	d107      	bne.n	8016078 <prepare_tx_packet+0x40>
 8016068:	4ba0      	ldr	r3, [pc, #640]	; (80162ec <prepare_tx_packet+0x2b4>)
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	49a0      	ldr	r1, [pc, #640]	; (80162f0 <prepare_tx_packet+0x2b8>)
 801606e:	f240 127b 	movw	r2, #379	; 0x17b
 8016072:	4618      	mov	r0, r3
 8016074:	f00b fa56 	bl	8021524 <__assert>

	// clear mx.tx_packet by adding itself to the xor list
	pp[pp_used++] = &(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]);
 8016078:	4b9b      	ldr	r3, [pc, #620]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801607a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801607c:	4b99      	ldr	r3, [pc, #612]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801607e:	799b      	ldrb	r3, [r3, #6]
 8016080:	4618      	mov	r0, r3
 8016082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016084:	1c5a      	adds	r2, r3, #1
 8016086:	66ba      	str	r2, [r7, #104]	; 0x68
 8016088:	f100 0208 	add.w	r2, r0, #8
 801608c:	440a      	add	r2, r1
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8016094:	440b      	add	r3, r1
 8016096:	f843 2c64 	str.w	r2, [r3, #-100]

#if !MX_BENCHMARK_NO_SYSTEMATIC_STARTUP

	if (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 801609a:	4b93      	ldr	r3, [pc, #588]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801609c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80160a0:	4b90      	ldr	r3, [pc, #576]	; (80162e4 <prepare_tx_packet+0x2ac>)
 80160a2:	885b      	ldrh	r3, [r3, #2]
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	3b01      	subs	r3, #1
 80160a8:	498f      	ldr	r1, [pc, #572]	; (80162e8 <prepare_tx_packet+0x2b0>)
 80160aa:	3316      	adds	r3, #22
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	440b      	add	r3, r1
 80160b0:	6859      	ldr	r1, [r3, #4]
 80160b2:	4b8c      	ldr	r3, [pc, #560]	; (80162e4 <prepare_tx_packet+0x2ac>)
 80160b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	009b      	lsls	r3, r3, #2
 80160ba:	440b      	add	r3, r1
 80160bc:	3304      	adds	r3, #4
 80160be:	429a      	cmp	r2, r3
 80160c0:	d252      	bcs.n	8016168 <prepare_tx_packet+0x130>
	{
		p = mx.next_own_row;
 80160c2:	4b89      	ldr	r3, [pc, #548]	; (80162e8 <prepare_tx_packet+0x2b0>)
 80160c4:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 80160c8:	66fb      	str	r3, [r7, #108]	; 0x6c

		// mark that we don't need the reserve
		used++;
 80160ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160cc:	3301      	adds	r3, #1
 80160ce:	667b      	str	r3, [r7, #100]	; 0x64

		// restore packed version (in place)
		wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 80160d0:	4b84      	ldr	r3, [pc, #528]	; (80162e4 <prepare_tx_packet+0x2ac>)
 80160d2:	7e1b      	ldrb	r3, [r3, #24]
 80160d4:	461a      	mov	r2, r3
 80160d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80160d8:	4413      	add	r3, r2
 80160da:	3304      	adds	r3, #4
 80160dc:	4618      	mov	r0, r3
 80160de:	f7f8 f9d5 	bl	800e48c <wrap_chunk>

		// add it to xor list
		pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 80160e2:	4b80      	ldr	r3, [pc, #512]	; (80162e4 <prepare_tx_packet+0x2ac>)
 80160e4:	7f1b      	ldrb	r3, [r3, #28]
 80160e6:	4619      	mov	r1, r3
 80160e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80160ea:	1c5a      	adds	r2, r3, #1
 80160ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80160ee:	008a      	lsls	r2, r1, #2
 80160f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80160f2:	440a      	add	r2, r1
 80160f4:	3204      	adds	r2, #4
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80160fc:	440b      	add	r3, r1
 80160fe:	f843 2c64 	str.w	r2, [r3, #-100]

		// look for next own row
		mx.next_own_row += chirp_config.matrix_size_32;
 8016102:	4b79      	ldr	r3, [pc, #484]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016104:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8016108:	4b76      	ldr	r3, [pc, #472]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801610a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801610c:	b29b      	uxth	r3, r3
 801610e:	009b      	lsls	r3, r3, #2
 8016110:	4413      	add	r3, r2
 8016112:	4a75      	ldr	r2, [pc, #468]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016114:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 8016118:	e010      	b.n	801613c <prepare_tx_packet+0x104>
		{
			if (0 == mx.next_own_row->birth_slot)
 801611a:	4b73      	ldr	r3, [pc, #460]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801611c:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d01f      	beq.n	8016166 <prepare_tx_packet+0x12e>
				break;
			mx.next_own_row += chirp_config.matrix_size_32;
 8016126:	4b70      	ldr	r3, [pc, #448]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016128:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 801612c:	4b6d      	ldr	r3, [pc, #436]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801612e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016130:	b29b      	uxth	r3, r3
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	4413      	add	r3, r2
 8016136:	4a6c      	ldr	r2, [pc, #432]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016138:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 801613c:	4b6a      	ldr	r3, [pc, #424]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801613e:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8016142:	4b68      	ldr	r3, [pc, #416]	; (80162e4 <prepare_tx_packet+0x2ac>)
 8016144:	885b      	ldrh	r3, [r3, #2]
 8016146:	b29b      	uxth	r3, r3
 8016148:	3b01      	subs	r3, #1
 801614a:	4967      	ldr	r1, [pc, #412]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801614c:	3316      	adds	r3, #22
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	440b      	add	r3, r1
 8016152:	6859      	ldr	r1, [r3, #4]
 8016154:	4b63      	ldr	r3, [pc, #396]	; (80162e4 <prepare_tx_packet+0x2ac>)
 8016156:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016158:	b29b      	uxth	r3, r3
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	440b      	add	r3, r1
 801615e:	3304      	adds	r3, #4
 8016160:	429a      	cmp	r2, r3
 8016162:	d3da      	bcc.n	801611a <prepare_tx_packet+0xe2>
 8016164:	e000      	b.n	8016168 <prepare_tx_packet+0x130>
				break;
 8016166:	bf00      	nop
		}
	}

#endif

	if (!used)
 8016168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801616a:	2b00      	cmp	r3, #0
 801616c:	f040 817f 	bne.w	801646e <prepare_tx_packet+0x436>
	{
		#if MX_REQUEST
			if (mx.request->help_index < 0)
 8016170:	4b5d      	ldr	r3, [pc, #372]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016172:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016176:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801617a:	2b00      	cmp	r3, #0
 801617c:	da0b      	bge.n	8016196 <prepare_tx_packet+0x15e>
			{
				help_row = (Matrix_Row *)&(mx.matrix[-mx.request->help_index - 1]->birth_slot);
 801617e:	4b5a      	ldr	r3, [pc, #360]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016180:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016184:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016188:	43db      	mvns	r3, r3
 801618a:	4a57      	ldr	r2, [pc, #348]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801618c:	3316      	adds	r3, #22
 801618e:	009b      	lsls	r3, r3, #2
 8016190:	4413      	add	r3, r2
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	663b      	str	r3, [r7, #96]	; 0x60
			}
		#endif

		// traverse matrix
		for (p = (Matrix_Row *)&(mx.matrix[0]->birth_slot); p < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]); p += chirp_config.matrix_size_32)
 8016196:	4b54      	ldr	r3, [pc, #336]	; (80162e8 <prepare_tx_packet+0x2b0>)
 8016198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801619a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801619c:	e154      	b.n	8016448 <prepare_tx_packet+0x410>
		{
			if (UINT16_MAX == p->birth_slot)
 801619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161a0:	881b      	ldrh	r3, [r3, #0]
 80161a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161a6:	4293      	cmp	r3, r2
 80161a8:	f000 8142 	beq.w	8016430 <prepare_tx_packet+0x3f8>
				continue;

			#if MX_REQUEST
				// if row request help index selected: skip all up to that row
				// NOTE: the help row itself will be automatically included by sideload
				if (p <= help_row)
 80161ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80161ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161b0:	429a      	cmp	r2, r3
 80161b2:	f240 813f 	bls.w	8016434 <prepare_tx_packet+0x3fc>
					continue;
			#endif

			PROFILE("prepare_tx_packet() mixer_rand() begin");
 80161b6:	bf00      	nop

			uint16_t r = mixer_rand();
 80161b8:	f002 faea 	bl	8018790 <mixer_rand>
 80161bc:	4603      	mov	r3, r0
 80161be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			PROFILE("prepare_tx_packet() mixer_rand() end");
 80161c2:	bf00      	nop

			// choose any available row as reserve, update from time to time
			// -> as reserve sideload and for the case that we select nothing by rolling the dice
			if (!(r & 7))
 80161c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80161c8:	f003 0307 	and.w	r3, r3, #7
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d102      	bne.n	80161d6 <prepare_tx_packet+0x19e>
				mx.tx_reserve = p;
 80161d0:	4a45      	ldr	r2, [pc, #276]	; (80162e8 <prepare_tx_packet+0x2b0>)
 80161d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161d4:	6493      	str	r3, [r2, #72]	; 0x48
			// include current row?
			{
				static const uint16_t LUT[] = MX_AGE_TO_INCLUDE_PROBABILITY;
				ASSERT_CT(sizeof(LUT) > 0, MX_AGE_TO_INCLUDE_PROBABILITY_is_invalid);

				if (!(r < LUT[MIN(mx.slot_number - p->birth_slot, NUM_ELEMENTS(LUT) - 1)]))
 80161d6:	4b44      	ldr	r3, [pc, #272]	; (80162e8 <prepare_tx_packet+0x2b0>)
 80161d8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80161dc:	b29b      	uxth	r3, r3
 80161de:	461a      	mov	r2, r3
 80161e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161e2:	881b      	ldrh	r3, [r3, #0]
 80161e4:	1ad3      	subs	r3, r2, r3
 80161e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80161e8:	2300      	movs	r3, #0
 80161ea:	657b      	str	r3, [r7, #84]	; 0x54
 80161ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80161ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161f0:	4293      	cmp	r3, r2
 80161f2:	bf28      	it	cs
 80161f4:	4613      	movcs	r3, r2
 80161f6:	4a3f      	ldr	r2, [pc, #252]	; (80162f4 <prepare_tx_packet+0x2bc>)
 80161f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80161fc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016200:	429a      	cmp	r2, r3
 8016202:	f080 8119 	bcs.w	8016438 <prepare_tx_packet+0x400>
					continue;
            }

			// mark that we don't need the reserve
			used++;
 8016206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016208:	3301      	adds	r3, #1
 801620a:	667b      	str	r3, [r7, #100]	; 0x64

			// restore packed version (in place)
			wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 801620c:	4b35      	ldr	r3, [pc, #212]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801620e:	7e1b      	ldrb	r3, [r3, #24]
 8016210:	461a      	mov	r2, r3
 8016212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016214:	4413      	add	r3, r2
 8016216:	3304      	adds	r3, #4
 8016218:	4618      	mov	r0, r3
 801621a:	f7f8 f937 	bl	800e48c <wrap_chunk>

			// add it to xor list, work through if needed
			pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 801621e:	4b31      	ldr	r3, [pc, #196]	; (80162e4 <prepare_tx_packet+0x2ac>)
 8016220:	7f1b      	ldrb	r3, [r3, #28]
 8016222:	4619      	mov	r1, r3
 8016224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016226:	1c5a      	adds	r2, r3, #1
 8016228:	66ba      	str	r2, [r7, #104]	; 0x68
 801622a:	008a      	lsls	r2, r1, #2
 801622c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801622e:	440a      	add	r2, r1
 8016230:	3204      	adds	r2, #4
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8016238:	440b      	add	r3, r1
 801623a:	f843 2c64 	str.w	r2, [r3, #-100]

			if(NUM_ELEMENTS(pp) == pp_used)
 801623e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016240:	2b08      	cmp	r3, #8
 8016242:	f040 80b3 	bne.w	80163ac <prepare_tx_packet+0x374>
			{
				PROFILE("prepare_tx_packet() memxor_block(full) begin");
 8016246:	bf00      	nop

				// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit better
				// code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
				memxor_block(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]), pp, CHUNK_SIZE, NUM_ELEMENTS(pp));
 8016248:	4b27      	ldr	r3, [pc, #156]	; (80162e8 <prepare_tx_packet+0x2b0>)
 801624a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801624c:	4b25      	ldr	r3, [pc, #148]	; (80162e4 <prepare_tx_packet+0x2ac>)
 801624e:	799b      	ldrb	r3, [r3, #6]
 8016250:	3308      	adds	r3, #8
 8016252:	441a      	add	r2, r3
 8016254:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8016258:	653a      	str	r2, [r7, #80]	; 0x50
 801625a:	f107 020c 	add.w	r2, r7, #12
 801625e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016260:	64bb      	str	r3, [r7, #72]	; 0x48
 8016262:	2308      	movs	r3, #8
 8016264:	647b      	str	r3, [r7, #68]	; 0x44
	union {
		uint16_t	*h;
		uint32_t	*w;
    }				ins;

	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 8016266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016268:	2b08      	cmp	r3, #8
 801626a:	dd05      	ble.n	8016278 <prepare_tx_packet+0x240>
 801626c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801626e:	2b08      	cmp	r3, #8
 8016270:	dd02      	ble.n	8016278 <prepare_tx_packet+0x240>
  __ASM volatile ("cpsid f" : : : "memory");
 8016272:	b671      	cpsid	f
 8016274:	f7ff fdc8 	bl	8015e08 <NVIC_SystemReset>

	if ((0 == num_src) || (0 == size))
 8016278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 8093 	beq.w	80163a6 <prepare_tx_packet+0x36e>
 8016280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016282:	2b00      	cmp	r3, #0
 8016284:	f000 808f 	beq.w	80163a6 <prepare_tx_packet+0x36e>
		return;

	// if size - i.e. number of needed loop iterations - is small, the overhead for adapting
	// the machine code exceeds the savings. Therefore we use a more straight-forward version
	// in these situations which is slower per iteration but comes with appropriate less overhead.
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8016288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801628a:	2b08      	cmp	r3, #8
 801628c:	d809      	bhi.n	80162a2 <prepare_tx_packet+0x26a>
 801628e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016290:	2b07      	cmp	r3, #7
 8016292:	dc06      	bgt.n	80162a2 <prepare_tx_packet+0x26a>
	{
		memxor_block_straight(dest, src, size, num_src);
 8016294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016298:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801629a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801629c:	f7f7 ffce 	bl	800e23c <memxor_block_straight>
 80162a0:	e081      	b.n	80163a6 <prepare_tx_packet+0x36e>
		return;
    }

	// adapt machine code to num_src
	if (num_src < MEMXOR_BLOCKSIZE)
 80162a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162a4:	2b07      	cmp	r3, #7
 80162a6:	dc55      	bgt.n	8016354 <prepare_tx_packet+0x31c>
	{
		// ATTENTION: &memxor_block_core LSB marks ARM Thumb mode,
		// so it must be cleared to get the real address
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 80162a8:	4b13      	ldr	r3, [pc, #76]	; (80162f8 <prepare_tx_packet+0x2c0>)
 80162aa:	f023 0301 	bic.w	r3, r3, #1
 80162ae:	607b      	str	r3, [r7, #4]
		// ins.h[1] = reglist;
		// ins.h[45] = reglist;
		// ins.h[3] = reglist & ~0x0010;

		// calculate loop entry point and move load instruction to the right place
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 80162b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162b2:	3301      	adds	r3, #1
 80162b4:	0fda      	lsrs	r2, r3, #31
 80162b6:	4413      	add	r3, r2
 80162b8:	105b      	asrs	r3, r3, #1
 80162ba:	009b      	lsls	r3, r3, #2
 80162bc:	f1c3 0312 	rsb	r3, r3, #18
 80162c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (num_src & 1)
 80162c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162c4:	f003 0301 	and.w	r3, r3, #1
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d017      	beq.n	80162fc <prepare_tx_packet+0x2c4>
		{
			loop_start += 2;
 80162cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162ce:	3302      	adds	r3, #2
 80162d0:	643b      	str	r3, [r7, #64]	; 0x40
			ins.w[loop_start + 1] = ins.w[2];
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	6879      	ldr	r1, [r7, #4]
 80162d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162d8:	3301      	adds	r3, #1
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	440b      	add	r3, r1
 80162de:	6892      	ldr	r2, [r2, #8]
 80162e0:	601a      	str	r2, [r3, #0]
 80162e2:	e012      	b.n	801630a <prepare_tx_packet+0x2d2>
 80162e4:	20001430 	.word	0x20001430
 80162e8:	200014f0 	.word	0x200014f0
 80162ec:	200000a8 	.word	0x200000a8
 80162f0:	080257b8 	.word	0x080257b8
 80162f4:	08026b3c 	.word	0x08026b3c
 80162f8:	20000005 	.word	0x20000005
        }
		else
			ins.w[loop_start] = ins.w[2];
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	6879      	ldr	r1, [r7, #4]
 8016300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016302:	009b      	lsls	r3, r3, #2
 8016304:	440b      	add	r3, r1
 8016306:	6892      	ldr	r2, [r2, #8]
 8016308:	601a      	str	r2, [r3, #0]

		// inject branch to loop entry point
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 801630a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801630c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016310:	3b03      	subs	r3, #3
 8016312:	b29b      	uxth	r3, r3
 8016314:	005b      	lsls	r3, r3, #1
 8016316:	b29b      	uxth	r3, r3
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	3208      	adds	r2, #8
 801631c:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8016320:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8016324:	b29b      	uxth	r3, r3
 8016326:	8013      	strh	r3, [r2, #0]

		// shorten loop
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8016328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801632a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801632e:	3b16      	subs	r3, #22
 8016330:	b29b      	uxth	r3, r3
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	b29a      	uxth	r2, r3
 8016336:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801633a:	4013      	ands	r3, r2
 801633c:	b299      	uxth	r1, r3
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8016344:	4ba4      	ldr	r3, [pc, #656]	; (80165d8 <prepare_tx_packet+0x5a0>)
 8016346:	430b      	orrs	r3, r1
 8016348:	b29b      	uxth	r3, r3
 801634a:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801634c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016350:	f3bf 8f6f 	isb	sy
		__DMB();
		__ISB();
	}

	// call core loop
	memxor_block_core(dest, src, size);
 8016354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016356:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016358:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801635a:	f00e fe45 	bl	8024fe8 <__memxor_block_core_veneer>

	// restore original machine code
	if (num_src < MEMXOR_BLOCKSIZE)
 801635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016360:	2b07      	cmp	r3, #7
 8016362:	dc20      	bgt.n	80163a6 <prepare_tx_packet+0x36e>
		// for the reason see comment above
		// ins.h[1] = 0x1ff0;
		// ins.h[45] = 0x1ff0;
		// ins.h[3] = 0x1fe0;

		if (num_src & 1)
 8016364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016366:	f003 0301 	and.w	r3, r3, #1
 801636a:	2b00      	cmp	r3, #0
 801636c:	d007      	beq.n	801637e <prepare_tx_packet+0x346>
			ins.w[loop_start + 1] = 0x0104ea81;
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016372:	3301      	adds	r3, #1
 8016374:	009b      	lsls	r3, r3, #2
 8016376:	4413      	add	r3, r2
 8016378:	4a98      	ldr	r2, [pc, #608]	; (80165dc <prepare_tx_packet+0x5a4>)
 801637a:	601a      	str	r2, [r3, #0]
 801637c:	e005      	b.n	801638a <prepare_tx_packet+0x352>
		else
			ins.w[loop_start] = 0x0103ea81;
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	4413      	add	r3, r2
 8016386:	4a96      	ldr	r2, [pc, #600]	; (80165e0 <prepare_tx_packet+0x5a8>)
 8016388:	601a      	str	r2, [r3, #0]

		ins.h[4] = 0xf8d0;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	3308      	adds	r3, #8
 801638e:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8016392:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	3356      	adds	r3, #86	; 0x56
 8016398:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801639c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801639e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80163a2:	f3bf 8f6f 	isb	sy

				pp_used = 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	66bb      	str	r3, [r7, #104]	; 0x68

				PROFILE("prepare_tx_packet() memxor_block(full) end");
 80163aa:	bf00      	nop
			}

			assert_reset(!((offsetof(Packet, packet_chunk) + chirp_config.coding_vector.pos) % sizeof(uint_fast_t)));
 80163ac:	4b8d      	ldr	r3, [pc, #564]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163ae:	799b      	ldrb	r3, [r3, #6]
 80163b0:	f003 0303 	and.w	r3, r3, #3
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d008      	beq.n	80163ca <prepare_tx_packet+0x392>
 80163b8:	4b8a      	ldr	r3, [pc, #552]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163ba:	799b      	ldrb	r3, [r3, #6]
 80163bc:	f003 0303 	and.w	r3, r3, #3
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d002      	beq.n	80163ca <prepare_tx_packet+0x392>
  __ASM volatile ("cpsid f" : : : "memory");
 80163c4:	b671      	cpsid	f
 80163c6:	f7ff fd1f 	bl	8015e08 <NVIC_SystemReset>

			assert_reset((chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len));
 80163ca:	4b86      	ldr	r3, [pc, #536]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163cc:	7a1b      	ldrb	r3, [r3, #8]
 80163ce:	461a      	mov	r2, r3
 80163d0:	4b84      	ldr	r3, [pc, #528]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163d2:	799b      	ldrb	r3, [r3, #6]
 80163d4:	4619      	mov	r1, r3
 80163d6:	4b83      	ldr	r3, [pc, #524]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163d8:	79db      	ldrb	r3, [r3, #7]
 80163da:	440b      	add	r3, r1
 80163dc:	429a      	cmp	r2, r3
 80163de:	d00d      	beq.n	80163fc <prepare_tx_packet+0x3c4>
 80163e0:	4b80      	ldr	r3, [pc, #512]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163e2:	7a1b      	ldrb	r3, [r3, #8]
 80163e4:	461a      	mov	r2, r3
 80163e6:	4b7f      	ldr	r3, [pc, #508]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163e8:	799b      	ldrb	r3, [r3, #6]
 80163ea:	4619      	mov	r1, r3
 80163ec:	4b7d      	ldr	r3, [pc, #500]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163ee:	79db      	ldrb	r3, [r3, #7]
 80163f0:	440b      	add	r3, r1
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d002      	beq.n	80163fc <prepare_tx_packet+0x3c4>
 80163f6:	b671      	cpsid	f
 80163f8:	f7ff fd06 	bl	8015e08 <NVIC_SystemReset>
			assert_reset((chirp_config.matrix_payload_8.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector_8.len));
 80163fc:	4b79      	ldr	r3, [pc, #484]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80163fe:	7e9b      	ldrb	r3, [r3, #26]
 8016400:	461a      	mov	r2, r3
 8016402:	4b78      	ldr	r3, [pc, #480]	; (80165e4 <prepare_tx_packet+0x5ac>)
 8016404:	7f1b      	ldrb	r3, [r3, #28]
 8016406:	4619      	mov	r1, r3
 8016408:	4b76      	ldr	r3, [pc, #472]	; (80165e4 <prepare_tx_packet+0x5ac>)
 801640a:	7e5b      	ldrb	r3, [r3, #25]
 801640c:	440b      	add	r3, r1
 801640e:	429a      	cmp	r2, r3
 8016410:	d013      	beq.n	801643a <prepare_tx_packet+0x402>
 8016412:	4b74      	ldr	r3, [pc, #464]	; (80165e4 <prepare_tx_packet+0x5ac>)
 8016414:	7e9b      	ldrb	r3, [r3, #26]
 8016416:	461a      	mov	r2, r3
 8016418:	4b72      	ldr	r3, [pc, #456]	; (80165e4 <prepare_tx_packet+0x5ac>)
 801641a:	7f1b      	ldrb	r3, [r3, #28]
 801641c:	4619      	mov	r1, r3
 801641e:	4b71      	ldr	r3, [pc, #452]	; (80165e4 <prepare_tx_packet+0x5ac>)
 8016420:	7e5b      	ldrb	r3, [r3, #25]
 8016422:	440b      	add	r3, r1
 8016424:	429a      	cmp	r2, r3
 8016426:	d008      	beq.n	801643a <prepare_tx_packet+0x402>
 8016428:	b671      	cpsid	f
 801642a:	f7ff fced 	bl	8015e08 <NVIC_SystemReset>
 801642e:	e004      	b.n	801643a <prepare_tx_packet+0x402>
				continue;
 8016430:	bf00      	nop
 8016432:	e002      	b.n	801643a <prepare_tx_packet+0x402>
					continue;
 8016434:	bf00      	nop
 8016436:	e000      	b.n	801643a <prepare_tx_packet+0x402>
					continue;
 8016438:	bf00      	nop
		for (p = (Matrix_Row *)&(mx.matrix[0]->birth_slot); p < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]); p += chirp_config.matrix_size_32)
 801643a:	4b6a      	ldr	r3, [pc, #424]	; (80165e4 <prepare_tx_packet+0x5ac>)
 801643c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801643e:	b29b      	uxth	r3, r3
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016444:	4413      	add	r3, r2
 8016446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016448:	4b66      	ldr	r3, [pc, #408]	; (80165e4 <prepare_tx_packet+0x5ac>)
 801644a:	885b      	ldrh	r3, [r3, #2]
 801644c:	b29b      	uxth	r3, r3
 801644e:	3b01      	subs	r3, #1
 8016450:	4a65      	ldr	r2, [pc, #404]	; (80165e8 <prepare_tx_packet+0x5b0>)
 8016452:	3316      	adds	r3, #22
 8016454:	009b      	lsls	r3, r3, #2
 8016456:	4413      	add	r3, r2
 8016458:	685a      	ldr	r2, [r3, #4]
 801645a:	4b62      	ldr	r3, [pc, #392]	; (80165e4 <prepare_tx_packet+0x5ac>)
 801645c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801645e:	b29b      	uxth	r3, r3
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	4413      	add	r3, r2
 8016464:	3304      	adds	r3, #4
 8016466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016468:	429a      	cmp	r2, r3
 801646a:	f4ff ae98 	bcc.w	801619e <prepare_tx_packet+0x166>
	// of high tx probability - a subsequent try to transmit. Since the request situation does not
	// change in this time, there is a good chance that we rebuild the same packet. If this happens,
	// the whole procedure starts again and again and does not end before mx.tx_reserve gets updated.
	// But this never happens if the requested row is the last one in the matrix.
	#if MX_REQUEST
		if (!used && !help_row)
 801646e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016470:	2b00      	cmp	r3, #0
 8016472:	d11e      	bne.n	80164b2 <prepare_tx_packet+0x47a>
 8016474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016476:	2b00      	cmp	r3, #0
 8016478:	d11b      	bne.n	80164b2 <prepare_tx_packet+0x47a>
		if (!used)
	#endif
	{
		// NOTE: we cast const away which is a bit dirty. We need this only to restore packed
		// version which is such a negligible change that we prefer mx.tx_reserve to appear as const.
		p = (Matrix_Row *)mx.tx_reserve;
 801647a:	4b5b      	ldr	r3, [pc, #364]	; (80165e8 <prepare_tx_packet+0x5b0>)
 801647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801647e:	66fb      	str	r3, [r7, #108]	; 0x6c

		// restore packed version (in place)
		wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 8016480:	4b58      	ldr	r3, [pc, #352]	; (80165e4 <prepare_tx_packet+0x5ac>)
 8016482:	7e1b      	ldrb	r3, [r3, #24]
 8016484:	461a      	mov	r2, r3
 8016486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016488:	4413      	add	r3, r2
 801648a:	3304      	adds	r3, #4
 801648c:	4618      	mov	r0, r3
 801648e:	f7f7 fffd 	bl	800e48c <wrap_chunk>

		// add it to xor list
		// NOTE: memcpy instead of memxor would also be possible here,
		// but the situation is not very time critical (xored nothing up to here)
		pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 8016492:	4b54      	ldr	r3, [pc, #336]	; (80165e4 <prepare_tx_packet+0x5ac>)
 8016494:	7f1b      	ldrb	r3, [r3, #28]
 8016496:	4619      	mov	r1, r3
 8016498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801649a:	1c5a      	adds	r2, r3, #1
 801649c:	66ba      	str	r2, [r7, #104]	; 0x68
 801649e:	008a      	lsls	r2, r1, #2
 80164a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80164a2:	440a      	add	r2, r1
 80164a4:	3204      	adds	r2, #4
 80164a6:	009b      	lsls	r3, r3, #2
 80164a8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80164ac:	440b      	add	r3, r1
 80164ae:	f843 2c64 	str.w	r2, [r3, #-100]
	}

	// work through the xor list
	if (pp_used)
 80164b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	f000 80af 	beq.w	8016618 <prepare_tx_packet+0x5e0>
	{
		memxor_block(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]), pp, CHUNK_SIZE, pp_used);
 80164ba:	4b4b      	ldr	r3, [pc, #300]	; (80165e8 <prepare_tx_packet+0x5b0>)
 80164bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80164be:	4b49      	ldr	r3, [pc, #292]	; (80165e4 <prepare_tx_packet+0x5ac>)
 80164c0:	799b      	ldrb	r3, [r3, #6]
 80164c2:	3308      	adds	r3, #8
 80164c4:	441a      	add	r2, r3
 80164c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80164ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 80164cc:	f107 020c 	add.w	r2, r7, #12
 80164d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80164d2:	637b      	str	r3, [r7, #52]	; 0x34
 80164d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164d6:	633b      	str	r3, [r7, #48]	; 0x30
	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 80164d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164da:	2b08      	cmp	r3, #8
 80164dc:	dd05      	ble.n	80164ea <prepare_tx_packet+0x4b2>
 80164de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e0:	2b08      	cmp	r3, #8
 80164e2:	dd02      	ble.n	80164ea <prepare_tx_packet+0x4b2>
 80164e4:	b671      	cpsid	f
 80164e6:	f7ff fc8f 	bl	8015e08 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 80164ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	f000 8093 	beq.w	8016618 <prepare_tx_packet+0x5e0>
 80164f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	f000 808f 	beq.w	8016618 <prepare_tx_packet+0x5e0>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 80164fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164fc:	2b08      	cmp	r3, #8
 80164fe:	d809      	bhi.n	8016514 <prepare_tx_packet+0x4dc>
 8016500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016502:	2b07      	cmp	r3, #7
 8016504:	dc06      	bgt.n	8016514 <prepare_tx_packet+0x4dc>
		memxor_block_straight(dest, src, size, num_src);
 8016506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801650a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801650c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801650e:	f7f7 fe95 	bl	800e23c <memxor_block_straight>
	}

	PROFILE("prepare_tx_packet() return");
 8016512:	e081      	b.n	8016618 <prepare_tx_packet+0x5e0>
	if (num_src < MEMXOR_BLOCKSIZE)
 8016514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016516:	2b07      	cmp	r3, #7
 8016518:	dc49      	bgt.n	80165ae <prepare_tx_packet+0x576>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 801651a:	4b34      	ldr	r3, [pc, #208]	; (80165ec <prepare_tx_packet+0x5b4>)
 801651c:	f023 0301 	bic.w	r3, r3, #1
 8016520:	60bb      	str	r3, [r7, #8]
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8016522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016524:	3301      	adds	r3, #1
 8016526:	0fda      	lsrs	r2, r3, #31
 8016528:	4413      	add	r3, r2
 801652a:	105b      	asrs	r3, r3, #1
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	f1c3 0312 	rsb	r3, r3, #18
 8016532:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (num_src & 1)
 8016534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016536:	f003 0301 	and.w	r3, r3, #1
 801653a:	2b00      	cmp	r3, #0
 801653c:	d00b      	beq.n	8016556 <prepare_tx_packet+0x51e>
			loop_start += 2;
 801653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016540:	3302      	adds	r3, #2
 8016542:	62fb      	str	r3, [r7, #44]	; 0x2c
			ins.w[loop_start + 1] = ins.w[2];
 8016544:	68ba      	ldr	r2, [r7, #8]
 8016546:	68b9      	ldr	r1, [r7, #8]
 8016548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654a:	3301      	adds	r3, #1
 801654c:	009b      	lsls	r3, r3, #2
 801654e:	440b      	add	r3, r1
 8016550:	6892      	ldr	r2, [r2, #8]
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	e006      	b.n	8016564 <prepare_tx_packet+0x52c>
			ins.w[loop_start] = ins.w[2];
 8016556:	68ba      	ldr	r2, [r7, #8]
 8016558:	68b9      	ldr	r1, [r7, #8]
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	009b      	lsls	r3, r3, #2
 801655e:	440b      	add	r3, r1
 8016560:	6892      	ldr	r2, [r2, #8]
 8016562:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801656a:	3b03      	subs	r3, #3
 801656c:	b29b      	uxth	r3, r3
 801656e:	005b      	lsls	r3, r3, #1
 8016570:	b29b      	uxth	r3, r3
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	3208      	adds	r2, #8
 8016576:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 801657a:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 801657e:	b29b      	uxth	r3, r3
 8016580:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8016582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016584:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016588:	3b16      	subs	r3, #22
 801658a:	b29b      	uxth	r3, r3
 801658c:	005b      	lsls	r3, r3, #1
 801658e:	b29a      	uxth	r2, r3
 8016590:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016594:	4013      	ands	r3, r2
 8016596:	b299      	uxth	r1, r3
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	f103 0256 	add.w	r2, r3, #86	; 0x56
 801659e:	4b0e      	ldr	r3, [pc, #56]	; (80165d8 <prepare_tx_packet+0x5a0>)
 80165a0:	430b      	orrs	r3, r1
 80165a2:	b29b      	uxth	r3, r3
 80165a4:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80165a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80165aa:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 80165ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80165b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80165b4:	f00e fd18 	bl	8024fe8 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 80165b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ba:	2b07      	cmp	r3, #7
 80165bc:	dc2c      	bgt.n	8016618 <prepare_tx_packet+0x5e0>
		if (num_src & 1)
 80165be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c0:	f003 0301 	and.w	r3, r3, #1
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d013      	beq.n	80165f0 <prepare_tx_packet+0x5b8>
			ins.w[loop_start + 1] = 0x0104ea81;
 80165c8:	68ba      	ldr	r2, [r7, #8]
 80165ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165cc:	3301      	adds	r3, #1
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	4a02      	ldr	r2, [pc, #8]	; (80165dc <prepare_tx_packet+0x5a4>)
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	e011      	b.n	80165fc <prepare_tx_packet+0x5c4>
 80165d8:	ffffa800 	.word	0xffffa800
 80165dc:	0104ea81 	.word	0x0104ea81
 80165e0:	0103ea81 	.word	0x0103ea81
 80165e4:	20001430 	.word	0x20001430
 80165e8:	200014f0 	.word	0x200014f0
 80165ec:	20000005 	.word	0x20000005
			ins.w[loop_start] = 0x0103ea81;
 80165f0:	68ba      	ldr	r2, [r7, #8]
 80165f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f4:	009b      	lsls	r3, r3, #2
 80165f6:	4413      	add	r3, r2
 80165f8:	4a0a      	ldr	r2, [pc, #40]	; (8016624 <prepare_tx_packet+0x5ec>)
 80165fa:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3308      	adds	r3, #8
 8016600:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8016604:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	3356      	adds	r3, #86	; 0x56
 801660a:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801660e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8016610:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016614:	f3bf 8f6f 	isb	sy
 8016618:	bf00      	nop

	TRACE_DUMP(1, "tx_packet:", &(mx.tx_packet->phy_payload_begin), chirp_config.phy_payload_size);
 801661a:	bf00      	nop

	GPI_TRACE_RETURN();
 801661c:	bf00      	nop
}
 801661e:	3770      	adds	r7, #112	; 0x70
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}
 8016624:	0103ea81 	.word	0x0103ea81

08016628 <mixer_update_slot>:

//**************************************************************************************************

PT_THREAD(mixer_update_slot())
{
 8016628:	b590      	push	{r4, r7, lr}
 801662a:	b0ad      	sub	sp, #180	; 0xb4
 801662c:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_update_slot;
 801662e:	4bac      	ldr	r3, [pc, #688]	; (80168e0 <mixer_update_slot+0x2b8>)
 8016630:	67fb      	str	r3, [r7, #124]	; 0x7c

	PT_BEGIN(pt);
 8016632:	2301      	movs	r3, #1
 8016634:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8016638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801663a:	881b      	ldrh	r3, [r3, #0]
 801663c:	f240 2227 	movw	r2, #551	; 0x227
 8016640:	4293      	cmp	r3, r2
 8016642:	d015      	beq.n	8016670 <mixer_update_slot+0x48>
 8016644:	f240 42eb 	movw	r2, #1259	; 0x4eb
 8016648:	4293      	cmp	r3, r2
 801664a:	f000 860f 	beq.w	801726c <mixer_update_slot+0xc44>
 801664e:	2b00      	cmp	r3, #0
 8016650:	f040 8614 	bne.w	801727c <mixer_update_slot+0xc54>
 8016654:	bf00      	nop
#endif

	// init variables at thread startup
	// NOTE: approach is useful because thread gets reinitialized (PT_INIT) on each mixer round
#if (MX_COORDINATED_TX || MX_REQUEST)
	rx_queue_num_read_2	= 0;
 8016656:	4ba3      	ldr	r3, [pc, #652]	; (80168e4 <mixer_update_slot+0x2bc>)
 8016658:	2200      	movs	r2, #0
 801665a:	601a      	str	r2, [r3, #0]
#endif
#if MX_COORDINATED_TX
	owner 			  = 0;
 801665c:	4ba2      	ldr	r3, [pc, #648]	; (80168e8 <mixer_update_slot+0x2c0>)
 801665e:	2200      	movs	r2, #0
 8016660:	801a      	strh	r2, [r3, #0]
	last_owner_update = 0;
 8016662:	4ba2      	ldr	r3, [pc, #648]	; (80168ec <mixer_update_slot+0x2c4>)
 8016664:	2200      	movs	r2, #0
 8016666:	801a      	strh	r2, [r3, #0]
#endif

	while (1)
	{
		PT_WAIT_UNTIL(pt, mx.events & BV(SLOT_UPDATE));
 8016668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801666a:	f240 2227 	movw	r2, #551	; 0x227
 801666e:	801a      	strh	r2, [r3, #0]
 8016670:	4b9f      	ldr	r3, [pc, #636]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	f003 0302 	and.w	r3, r3, #2
 8016678:	2b00      	cmp	r3, #0
 801667a:	d103      	bne.n	8016684 <mixer_update_slot+0x5c>
 801667c:	bf00      	nop
 801667e:	2300      	movs	r3, #0
 8016680:	f000 be04 	b.w	801728c <mixer_update_slot+0xc64>
		clear_event(SLOT_UPDATE);
 8016684:	2001      	movs	r0, #1
 8016686:	f7ff fcaf 	bl	8015fe8 <clear_event>
		if (chirp_config.primitive != FLOODING)
 801668a:	4b9a      	ldr	r3, [pc, #616]	; (80168f4 <mixer_update_slot+0x2cc>)
 801668c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016690:	2b01      	cmp	r3, #1
 8016692:	f000 85ca 	beq.w	801722a <mixer_update_slot+0xc02>
		{
		gpi_watchdog_periodic();
 8016696:	f7f7 fd57 	bl	800e148 <gpi_watchdog_periodic>
		#if MX_VERBOSE_PACKETS
			if (mx.events & BV(TX_READY))
 801669a:	4b95      	ldr	r3, [pc, #596]	; (80168f0 <mixer_update_slot+0x2c8>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	f003 0304 	and.w	r3, r3, #4
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d007      	beq.n	80166b6 <mixer_update_slot+0x8e>
			{
				PRINTF_CHIRP("Tx: ");
 80166a6:	4894      	ldr	r0, [pc, #592]	; (80168f8 <mixer_update_slot+0x2d0>)
 80166a8:	f00b fd7c 	bl	80221a4 <iprintf>

				TRACE_PACKET(&(mx.tx_packet->phy_payload_begin));
 80166ac:	4b90      	ldr	r3, [pc, #576]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7ff fbbd 	bl	8015e30 <trace_packet>

//TRACE_DUMP(1, "my_row_mask:", mx.request.my_row_mask, sizeof(mx.request.my_row_mask));
//TRACE_DUMP(1, "my_column_mask:", mx.request.my_column_mask, sizeof(mx.request.my_column_mask));

		Slot_Activity		next_task;
		uint16_t			p = 0;
 80166b6:	2300      	movs	r3, #0
 80166b8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

		#if MX_COORDINATED_TX
			Packet_Flags	flags = {0};
 80166bc:	2300      	movs	r3, #0
 80166be:	703b      	strb	r3, [r7, #0]

		// use local variable since mx.slot_number is volatile (and for performance)
		// NOTE: some pieces of code rely on the assumption that slot_number doesn't change
		// while the thread is active. Although this is true if system runs without overload,
		// we use a local variable to be absolutely safe.
		uint16_t	slot_number = mx.slot_number;
 80166c0:	4b8b      	ldr	r3, [pc, #556]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166c2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80166c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		GPI_TRACE_MSG_FAST(TRACE_INFO, "slot %" PRIu16, slot_number);
 80166ca:	bf00      	nop
		PROFILE("mixer_update_slot() begin");
 80166cc:	bf00      	nop
		// maintain request status
		#if MX_REQUEST
			if (slot_number - mx.request->last_update_slot > 3)
 80166ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80166d2:	4a87      	ldr	r2, [pc, #540]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166d4:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 80166d8:	8912      	ldrh	r2, [r2, #8]
 80166da:	1a9b      	subs	r3, r3, r2
 80166dc:	2b03      	cmp	r3, #3
 80166de:	dd0a      	ble.n	80166f6 <mixer_update_slot+0xce>
			{
				mx.request->row_any_pending = 0;
 80166e0:	4b83      	ldr	r3, [pc, #524]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166e2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80166e6:	2200      	movs	r2, #0
 80166e8:	601a      	str	r2, [r3, #0]
				mx.request->column_any_pending = 0;
 80166ea:	4b81      	ldr	r3, [pc, #516]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166ec:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80166f0:	2200      	movs	r2, #0
 80166f2:	605a      	str	r2, [r3, #4]
			else if (mx.events & BV(TX_READY))
			{
				mx_update_request(mx.tx_packet);
			}

			PROFILE("mixer_update_slot() update request status done");
 80166f4:	e00a      	b.n	801670c <mixer_update_slot+0xe4>
			else if (mx.events & BV(TX_READY))
 80166f6:	4b7e      	ldr	r3, [pc, #504]	; (80168f0 <mixer_update_slot+0x2c8>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f003 0304 	and.w	r3, r3, #4
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d004      	beq.n	801670c <mixer_update_slot+0xe4>
				mx_update_request(mx.tx_packet);
 8016702:	4b7b      	ldr	r3, [pc, #492]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016706:	4618      	mov	r0, r3
 8016708:	f002 f9b0 	bl	8018a6c <mx_update_request>
			PROFILE("mixer_update_slot() update request status done");
 801670c:	bf00      	nop
		#endif

		// read rx packet if available and update history
		#if (MX_COORDINATED_TX || MX_REQUEST)
			while (rx_queue_num_read_2 != mx.rx_queue_num_written)
 801670e:	e068      	b.n	80167e2 <mixer_update_slot+0x1ba>
			{
				PROFILE("mixer_update_slot() update history begin");
 8016710:	bf00      	nop

				Packet *p = mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)];
 8016712:	4b74      	ldr	r3, [pc, #464]	; (80168e4 <mixer_update_slot+0x2bc>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f003 0303 	and.w	r3, r3, #3
 801671a:	4a75      	ldr	r2, [pc, #468]	; (80168f0 <mixer_update_slot+0x2c8>)
 801671c:	009b      	lsls	r3, r3, #2
 801671e:	4413      	add	r3, r2
 8016720:	685b      	ldr	r3, [r3, #4]
 8016722:	657b      	str	r3, [r7, #84]	; 0x54

				uint8_t  		sender_id   = p->sender_id;
 8016724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016726:	799b      	ldrb	r3, [r3, #6]
 8016728:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				#if MX_COORDINATED_TX
					uint16_t	slot_number = p->slot_number;
 801672c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801672e:	791a      	ldrb	r2, [r3, #4]
 8016730:	795b      	ldrb	r3, [r3, #5]
 8016732:	021b      	lsls	r3, r3, #8
 8016734:	4313      	orrs	r3, r2
 8016736:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
								flags		= p->flags;
 801673a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801673c:	79db      	ldrb	r3, [r3, #7]
 801673e:	703b      	strb	r3, [r7, #0]
				#endif

				if (sender_id >= chirp_config.mx_num_nodes)
 8016740:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016744:	b29a      	uxth	r2, r3
 8016746:	4b6b      	ldr	r3, [pc, #428]	; (80168f4 <mixer_update_slot+0x2cc>)
 8016748:	881b      	ldrh	r3, [r3, #0]
 801674a:	b29b      	uxth	r3, r3
 801674c:	429a      	cmp	r2, r3
 801674e:	d305      	bcc.n	801675c <mixer_update_slot+0x134>
				{
					// don't do much here, it is handled in Rx processing
					rx_queue_num_read_2++;
 8016750:	4b64      	ldr	r3, [pc, #400]	; (80168e4 <mixer_update_slot+0x2bc>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	4a63      	ldr	r2, [pc, #396]	; (80168e4 <mixer_update_slot+0x2bc>)
 8016758:	6013      	str	r3, [r2, #0]
					continue;
 801675a:	e042      	b.n	80167e2 <mixer_update_slot+0x1ba>
				}

				#if INFO_VECTOR_QUEUE
					// TP TODO:
					// gpi_memcpy_dma_inline((uint8_t *)&(mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)]->packet_chunk[chirp_config.coding_vector.pos]), (uint8_t *)&(mx.code_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.info_queue)]->vector[0]), chirp_config.coding_vector.len);
					gpi_memcpy_dma_inline((uint8_t *)&(mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)]->packet_chunk[chirp_config.info_vector.pos]), (uint8_t *)&(mx.info_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.info_queue)]->vector[0]), chirp_config.info_vector.len);
 801675c:	4b61      	ldr	r3, [pc, #388]	; (80168e4 <mixer_update_slot+0x2bc>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f003 0303 	and.w	r3, r3, #3
 8016764:	4a62      	ldr	r2, [pc, #392]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016766:	009b      	lsls	r3, r3, #2
 8016768:	4413      	add	r3, r2
 801676a:	685a      	ldr	r2, [r3, #4]
 801676c:	4b61      	ldr	r3, [pc, #388]	; (80168f4 <mixer_update_slot+0x2cc>)
 801676e:	7a9b      	ldrb	r3, [r3, #10]
 8016770:	3308      	adds	r3, #8
 8016772:	441a      	add	r2, r3
 8016774:	4b5b      	ldr	r3, [pc, #364]	; (80168e4 <mixer_update_slot+0x2bc>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	f003 0303 	and.w	r3, r3, #3
 801677c:	495c      	ldr	r1, [pc, #368]	; (80168f0 <mixer_update_slot+0x2c8>)
 801677e:	3308      	adds	r3, #8
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	440b      	add	r3, r1
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	4619      	mov	r1, r3
 8016788:	4b5a      	ldr	r3, [pc, #360]	; (80168f4 <mixer_update_slot+0x2cc>)
 801678a:	7adb      	ldrb	r3, [r3, #11]
 801678c:	64fa      	str	r2, [r7, #76]	; 0x4c
 801678e:	64b9      	str	r1, [r7, #72]	; 0x48
 8016790:	647b      	str	r3, [r7, #68]	; 0x44
	__builtin_memcpy(dest, src, size);
 8016792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016796:	4610      	mov	r0, r2
 8016798:	4619      	mov	r1, r3
 801679a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801679c:	461a      	mov	r2, r3
 801679e:	f00a fee9 	bl	8021574 <memcpy>
				#endif

				#if MX_REQUEST
					mx_update_request(p);
 80167a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80167a4:	f002 f962 	bl	8018a6c <mx_update_request>

				// NOTE: since the current thread has higher priority than Rx packet processing,
				// we should never see an overflow here. Nevertheless we test it for safety. If
				// it would happen we would lose some history updates which is not very critical.
				// In addition request data may get hurt which again is not such critical.
				if (mx.rx_queue_num_writing - rx_queue_num_read_2 > NUM_ELEMENTS(mx.rx_queue))
 80167a8:	4b51      	ldr	r3, [pc, #324]	; (80168f0 <mixer_update_slot+0x2c8>)
 80167aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80167ac:	4b4d      	ldr	r3, [pc, #308]	; (80168e4 <mixer_update_slot+0x2bc>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	1ad3      	subs	r3, r2, r3
 80167b2:	2b04      	cmp	r3, #4
 80167b4:	d905      	bls.n	80167c2 <mixer_update_slot+0x19a>
				{
					GPI_TRACE_MSG(TRACE_WARNING, "WARNING: rx queue num_read_2 overflow -> check program, should not happen");
 80167b6:	bf00      	nop
					rx_queue_num_read_2 = mx.rx_queue_num_written;
 80167b8:	4b4d      	ldr	r3, [pc, #308]	; (80168f0 <mixer_update_slot+0x2c8>)
 80167ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167bc:	4a49      	ldr	r2, [pc, #292]	; (80168e4 <mixer_update_slot+0x2bc>)
 80167be:	6013      	str	r3, [r2, #0]
					continue;
 80167c0:	e00f      	b.n	80167e2 <mixer_update_slot+0x1ba>
				}
				else rx_queue_num_read_2++;
 80167c2:	4b48      	ldr	r3, [pc, #288]	; (80168e4 <mixer_update_slot+0x2bc>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	3301      	adds	r3, #1
 80167c8:	4a46      	ldr	r2, [pc, #280]	; (80168e4 <mixer_update_slot+0x2bc>)
 80167ca:	6013      	str	r3, [r2, #0]

				#if MX_COORDINATED_TX
					mx_update_history(sender_id, flags, slot_number);
 80167cc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80167d6:	7839      	ldrb	r1, [r7, #0]
 80167d8:	4618      	mov	r0, r3
 80167da:	f7ff fa43 	bl	8015c64 <mx_update_history>
					GPI_TRACE_MSG(TRACE_INFO, "node %u history update", sender_id);
 80167de:	bf00      	nop
				#endif

				PROFILE("mixer_update_slot() update history end");
 80167e0:	bf00      	nop
			while (rx_queue_num_read_2 != mx.rx_queue_num_written)
 80167e2:	4b43      	ldr	r3, [pc, #268]	; (80168f0 <mixer_update_slot+0x2c8>)
 80167e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80167e6:	4b3f      	ldr	r3, [pc, #252]	; (80168e4 <mixer_update_slot+0x2bc>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d190      	bne.n	8016710 <mixer_update_slot+0xe8>
			}

		#endif

		PROFILE("mixer_update_slot() tx decision begin");
 80167ee:	bf00      	nop

		// decide what to do in next slot
		do {
			// don't TX as long as we have no data (i.e. we are not initiated)
			if (mx.rank < 1)
 80167f0:	4b3f      	ldr	r3, [pc, #252]	; (80168f0 <mixer_update_slot+0x2c8>)
 80167f2:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	f000 8438 	beq.w	801706c <mixer_update_slot+0xa44>
					PT_EXIT(pt);
				}
			#endif

			#if MX_COORDINATED_TX
				uint16_t	density = 1 + mx_present_head->mx_num_nodes + mx_finished_head->mx_num_nodes;
 80167fc:	4b3f      	ldr	r3, [pc, #252]	; (80168fc <mixer_update_slot+0x2d4>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	885a      	ldrh	r2, [r3, #2]
 8016802:	4b3f      	ldr	r3, [pc, #252]	; (8016900 <mixer_update_slot+0x2d8>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	885b      	ldrh	r3, [r3, #2]
 8016808:	4413      	add	r3, r2
 801680a:	b29b      	uxth	r3, r3
 801680c:	3301      	adds	r3, #1
 801680e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
				assert_reset((density < 256));
 8016812:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016816:	2bff      	cmp	r3, #255	; 0xff
 8016818:	d906      	bls.n	8016828 <mixer_update_slot+0x200>
 801681a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801681e:	2bff      	cmp	r3, #255	; 0xff
 8016820:	d902      	bls.n	8016828 <mixer_update_slot+0x200>
  __ASM volatile ("cpsid f" : : : "memory");
 8016822:	b671      	cpsid	f
 8016824:	f7ff faf0 	bl	8015e08 <NVIC_SystemReset>
			#endif

			#if MX_REQUEST
				uint16_t __attribute__((unused)) relative_rank = 0;
 8016828:	2300      	movs	r3, #0
 801682a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			#endif
			int_fast8_t		is_helper = 0;
 801682e:	2300      	movs	r3, #0
 8016830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			assert_reset((chirp_config.mx_num_nodes < 256));
 8016834:	4b2f      	ldr	r3, [pc, #188]	; (80168f4 <mixer_update_slot+0x2cc>)
 8016836:	881b      	ldrh	r3, [r3, #0]
 8016838:	b29b      	uxth	r3, r3
 801683a:	2bff      	cmp	r3, #255	; 0xff
 801683c:	d907      	bls.n	801684e <mixer_update_slot+0x226>
 801683e:	4b2d      	ldr	r3, [pc, #180]	; (80168f4 <mixer_update_slot+0x2cc>)
 8016840:	881b      	ldrh	r3, [r3, #0]
 8016842:	b29b      	uxth	r3, r3
 8016844:	2bff      	cmp	r3, #255	; 0xff
 8016846:	d902      	bls.n	801684e <mixer_update_slot+0x226>
 8016848:	b671      	cpsid	f
 801684a:	f7ff fadd 	bl	8015e08 <NVIC_SystemReset>
					// don't process requests during startup phase
					// attention: during startup phase, it is possible that DMA ISR decides to TX
					// (in case of flags.hasNextPayload) if mx.tx_packet is ready. Therefore it is
					// important that mx.tx_packet doesn't get invalidated on thread level during this
					// phase. The condition avoids that this could happen in case of row requests.
					if (mx.slot_number > chirp_config.mx_generation_size)
 801684e:	4b28      	ldr	r3, [pc, #160]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016850:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8016854:	b29a      	uxth	r2, r3
 8016856:	4b27      	ldr	r3, [pc, #156]	; (80168f4 <mixer_update_slot+0x2cc>)
 8016858:	885b      	ldrh	r3, [r3, #2]
 801685a:	b29b      	uxth	r3, r3
 801685c:	429a      	cmp	r2, r3
 801685e:	f240 82c5 	bls.w	8016dec <mixer_update_slot+0x7c4>
				#endif
			{
				PROFILE("mixer_update_slot() tx decision request help 1");
 8016862:	bf00      	nop

				uint_fast_t		help_bitmask = 0;
 8016864:	2300      	movs	r3, #0
 8016866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				uint_fast_t		*pr;

				mx.request->help_index = 0;
 801686a:	4b21      	ldr	r3, [pc, #132]	; (80168f0 <mixer_update_slot+0x2c8>)
 801686c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016870:	2200      	movs	r2, #0
 8016872:	815a      	strh	r2, [r3, #10]

				// scan column requests
				// start with all_mask
				pr = (uint_fast_t *)&(mx.request->mask[chirp_config.column_all_mask.pos + 0]);
 8016874:	4b1e      	ldr	r3, [pc, #120]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016876:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801687a:	4b1e      	ldr	r3, [pc, #120]	; (80168f4 <mixer_update_slot+0x2cc>)
 801687c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016880:	3306      	adds	r3, #6
 8016882:	009b      	lsls	r3, r3, #2
 8016884:	4413      	add	r3, r2
 8016886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while (mx.request->column_any_pending)
 801688a:	e0cf      	b.n	8016a2c <mixer_update_slot+0x404>
				{
					is_helper = -1;
 801688c:	f04f 33ff 	mov.w	r3, #4294967295
 8016890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					uint_fast_t		*po = (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + 0]);
 8016894:	4b16      	ldr	r3, [pc, #88]	; (80168f0 <mixer_update_slot+0x2c8>)
 8016896:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801689a:	4b16      	ldr	r3, [pc, #88]	; (80168f4 <mixer_update_slot+0x2cc>)
 801689c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80168a0:	3306      	adds	r3, #6
 80168a2:	009b      	lsls	r3, r3, #2
 80168a4:	4413      	add	r3, r2
 80168a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					uint_fast_t		x;

					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 80168aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80168ae:	1d1a      	adds	r2, r3, #4
 80168b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80168ba:	e03b      	b.n	8016934 <mixer_update_slot+0x30c>
					{
						if (!x)
 80168bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d11f      	bne.n	8016904 <mixer_update_slot+0x2dc>
						{
							x = *pr++;		// ATTENTION: dirty in the sense of access violation
 80168c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80168c8:	1d1a      	adds	r2, r3, #4
 80168ca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							po++;
 80168d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80168d8:	3304      	adds	r3, #4
 80168da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							continue;
 80168de:	e029      	b.n	8016934 <mixer_update_slot+0x30c>
 80168e0:	20001e28 	.word	0x20001e28
 80168e4:	20000474 	.word	0x20000474
 80168e8:	20000478 	.word	0x20000478
 80168ec:	2000047a 	.word	0x2000047a
 80168f0:	200014f0 	.word	0x200014f0
 80168f4:	20001430 	.word	0x20001430
 80168f8:	080257d8 	.word	0x080257d8
 80168fc:	20000cc4 	.word	0x20000cc4
 8016900:	20000ce0 	.word	0x20000ce0
							#error __BYTE_ORDER__ is invalid
						#endif

						// isolate first set bit
						#if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
							help_bitmask = x & -x;			// isolate LSB
 8016904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016908:	425b      	negs	r3, r3
 801690a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801690e:	4013      	ands	r3, r2
 8016910:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#else
							#error TODO						// isolate MSB
						#endif

						// if we can help: exit loop
						if (!(*po & help_bitmask))
 8016914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801691e:	4013      	ands	r3, r2
 8016920:	2b00      	cmp	r3, #0
 8016922:	d01a      	beq.n	801695a <mixer_update_slot+0x332>
							break;

						// else clear bit in x
						x &= ~help_bitmask;
 8016924:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016928:	43db      	mvns	r3, r3
 801692a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801692e:	4013      	ands	r3, r2
 8016930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016934:	4bc2      	ldr	r3, [pc, #776]	; (8016c40 <mixer_update_slot+0x618>)
 8016936:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801693a:	4bc2      	ldr	r3, [pc, #776]	; (8016c44 <mixer_update_slot+0x61c>)
 801693c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016940:	4619      	mov	r1, r3
 8016942:	4bc0      	ldr	r3, [pc, #768]	; (8016c44 <mixer_update_slot+0x61c>)
 8016944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016948:	440b      	add	r3, r1
 801694a:	3306      	adds	r3, #6
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	4413      	add	r3, r2
 8016950:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016954:	429a      	cmp	r2, r3
 8016956:	d3b1      	bcc.n	80168bc <mixer_update_slot+0x294>
 8016958:	e000      	b.n	801695c <mixer_update_slot+0x334>
							break;
 801695a:	bf00      	nop
                    }

					// if we can help: continue below
					if (po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]))
 801695c:	4bb8      	ldr	r3, [pc, #736]	; (8016c40 <mixer_update_slot+0x618>)
 801695e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016962:	4bb8      	ldr	r3, [pc, #736]	; (8016c44 <mixer_update_slot+0x61c>)
 8016964:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016968:	4619      	mov	r1, r3
 801696a:	4bb6      	ldr	r3, [pc, #728]	; (8016c44 <mixer_update_slot+0x61c>)
 801696c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016970:	440b      	add	r3, r1
 8016972:	3306      	adds	r3, #6
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	4413      	add	r3, r2
 8016978:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801697c:	429a      	cmp	r2, r3
 801697e:	d232      	bcs.n	80169e6 <mixer_update_slot+0x3be>
					{
						// NOTE: help_bitmask has only one bit set,
						// so it doesn't matter if we use get_msb() or get_lsb()
						mx.request->help_index = 1 + ARRAY_INDEX_SIZE_ADD(po, &(mx.request->mask[chirp_config.my_row_mask.pos]), sizeof(uint_fast_t) * chirp_config.my_row_mask.len) * sizeof(uint_fast_t) * 8 + gpi_get_msb(help_bitmask);
 8016980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016984:	4aae      	ldr	r2, [pc, #696]	; (8016c40 <mixer_update_slot+0x618>)
 8016986:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 801698a:	4aae      	ldr	r2, [pc, #696]	; (8016c44 <mixer_update_slot+0x61c>)
 801698c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8016990:	3206      	adds	r2, #6
 8016992:	0092      	lsls	r2, r2, #2
 8016994:	440a      	add	r2, r1
 8016996:	1a9a      	subs	r2, r3, r2
 8016998:	4baa      	ldr	r3, [pc, #680]	; (8016c44 <mixer_update_slot+0x61c>)
 801699a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	015b      	lsls	r3, r3, #5
 80169a8:	b29a      	uxth	r2, r3
 80169aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169ae:	643b      	str	r3, [r7, #64]	; 0x40
	asm
 80169b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169b2:	fab3 f383 	clz	r3, r3
 80169b6:	f1c3 031f 	rsb	r3, r3, #31
 80169ba:	461c      	mov	r4, r3
	return y;
 80169bc:	4623      	mov	r3, r4
 80169be:	b29b      	uxth	r3, r3
 80169c0:	4413      	add	r3, r2
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	3301      	adds	r3, #1
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	4b9d      	ldr	r3, [pc, #628]	; (8016c40 <mixer_update_slot+0x618>)
 80169ca:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80169ce:	b212      	sxth	r2, r2
 80169d0:	815a      	strh	r2, [r3, #10]
						mx.request->help_bitmask = help_bitmask;
 80169d2:	4b9b      	ldr	r3, [pc, #620]	; (8016c40 <mixer_update_slot+0x618>)
 80169d4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80169d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80169dc:	60da      	str	r2, [r3, #12]

						is_helper = 1;
 80169de:	2301      	movs	r3, #1
 80169e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						break;
 80169e4:	e02b      	b.n	8016a3e <mixer_update_slot+0x416>
                    }

					// break after scanning any_mask
					// NOTE: -2 matches position of pr
					if (ARRAY_INDEX_SIZE_ADD(pr, &(mx.request->mask[chirp_config.column_any_mask.pos]), sizeof(uint_fast_t) * chirp_config.column_any_mask.len) - 2 < chirp_config.column_all_mask.len)
 80169e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80169ea:	4a95      	ldr	r2, [pc, #596]	; (8016c40 <mixer_update_slot+0x618>)
 80169ec:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 80169f0:	4a94      	ldr	r2, [pc, #592]	; (8016c44 <mixer_update_slot+0x61c>)
 80169f2:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80169f6:	3206      	adds	r2, #6
 80169f8:	0092      	lsls	r2, r2, #2
 80169fa:	440a      	add	r2, r1
 80169fc:	1a9a      	subs	r2, r3, r2
 80169fe:	4b91      	ldr	r3, [pc, #580]	; (8016c44 <mixer_update_slot+0x61c>)
 8016a00:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a0a:	3b02      	subs	r3, #2
 8016a0c:	4a8d      	ldr	r2, [pc, #564]	; (8016c44 <mixer_update_slot+0x61c>)
 8016a0e:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8016a12:	4293      	cmp	r3, r2
 8016a14:	d312      	bcc.n	8016a3c <mixer_update_slot+0x414>
						break;

					// scan any_mask (after scanning all_mask)
					pr = (uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos + 0]);
 8016a16:	4b8a      	ldr	r3, [pc, #552]	; (8016c40 <mixer_update_slot+0x618>)
 8016a18:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016a1c:	4b89      	ldr	r3, [pc, #548]	; (8016c44 <mixer_update_slot+0x61c>)
 8016a1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016a22:	3306      	adds	r3, #6
 8016a24:	009b      	lsls	r3, r3, #2
 8016a26:	4413      	add	r3, r2
 8016a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while (mx.request->column_any_pending)
 8016a2c:	4b84      	ldr	r3, [pc, #528]	; (8016c40 <mixer_update_slot+0x618>)
 8016a2e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	f47f af29 	bne.w	801688c <mixer_update_slot+0x264>
 8016a3a:	e000      	b.n	8016a3e <mixer_update_slot+0x416>
						break;
 8016a3c:	bf00      	nop
                }

				// scan row requests
				// start with all_mask
				pr = (uint_fast_t *)&(mx.request->mask[chirp_config.row_all_mask.pos + 0]);
 8016a3e:	4b80      	ldr	r3, [pc, #512]	; (8016c40 <mixer_update_slot+0x618>)
 8016a40:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016a44:	4b7f      	ldr	r3, [pc, #508]	; (8016c44 <mixer_update_slot+0x61c>)
 8016a46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016a4a:	3306      	adds	r3, #6
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	4413      	add	r3, r2
 8016a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while ((is_helper <= 0) && (mx.request->row_any_pending))
 8016a54:	e0e6      	b.n	8016c24 <mixer_update_slot+0x5fc>
				{
					is_helper = -1;
 8016a56:	f04f 33ff 	mov.w	r3, #4294967295
 8016a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					uint_fast_t		x;

					uint_fast_t		*po = (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + 0]);
 8016a5e:	4b78      	ldr	r3, [pc, #480]	; (8016c40 <mixer_update_slot+0x618>)
 8016a60:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016a64:	4b77      	ldr	r3, [pc, #476]	; (8016c44 <mixer_update_slot+0x61c>)
 8016a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016a6a:	3306      	adds	r3, #6
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	4413      	add	r3, r2
 8016a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016a78:	1d1a      	adds	r2, r3, #4
 8016a7a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016a84:	e029      	b.n	8016ada <mixer_update_slot+0x4b2>
					{
						if (!x)
 8016a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d10d      	bne.n	8016aaa <mixer_update_slot+0x482>
						{
							x = *pr++;		// ATTENTION: dirty in the sense of access violation
 8016a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016a92:	1d1a      	adds	r2, r3, #4
 8016a94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
							po++;
 8016a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016aa2:	3304      	adds	r3, #4
 8016aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							continue;
 8016aa8:	e017      	b.n	8016ada <mixer_update_slot+0x4b2>
							#error __BYTE_ORDER__ is invalid
						#endif

						// isolate first set bit
						#if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
							help_bitmask = x & -x;			// isolate LSB
 8016aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016aae:	425b      	negs	r3, r3
 8016ab0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016ab4:	4013      	ands	r3, r2
 8016ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#else
							#error TODO						// isolate MSB
						#endif

						// if we can help: exit loop
						if (!(*po & help_bitmask))
 8016aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d01a      	beq.n	8016b00 <mixer_update_slot+0x4d8>
							break;

						// else clear bit in x
						x &= ~help_bitmask;
 8016aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016ace:	43db      	mvns	r3, r3
 8016ad0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016ad4:	4013      	ands	r3, r2
 8016ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016ada:	4b59      	ldr	r3, [pc, #356]	; (8016c40 <mixer_update_slot+0x618>)
 8016adc:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016ae0:	4b58      	ldr	r3, [pc, #352]	; (8016c44 <mixer_update_slot+0x61c>)
 8016ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	4b56      	ldr	r3, [pc, #344]	; (8016c44 <mixer_update_slot+0x61c>)
 8016aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016aee:	440b      	add	r3, r1
 8016af0:	3306      	adds	r3, #6
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	4413      	add	r3, r2
 8016af6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d3c3      	bcc.n	8016a86 <mixer_update_slot+0x45e>
 8016afe:	e000      	b.n	8016b02 <mixer_update_slot+0x4da>
							break;
 8016b00:	bf00      	nop
                    }

					// if we can help: continue below
					if (po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]))
 8016b02:	4b4f      	ldr	r3, [pc, #316]	; (8016c40 <mixer_update_slot+0x618>)
 8016b04:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016b08:	4b4e      	ldr	r3, [pc, #312]	; (8016c44 <mixer_update_slot+0x61c>)
 8016b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b0e:	4619      	mov	r1, r3
 8016b10:	4b4c      	ldr	r3, [pc, #304]	; (8016c44 <mixer_update_slot+0x61c>)
 8016b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b16:	440b      	add	r3, r1
 8016b18:	3306      	adds	r3, #6
 8016b1a:	009b      	lsls	r3, r3, #2
 8016b1c:	4413      	add	r3, r2
 8016b1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d25b      	bcs.n	8016bde <mixer_update_slot+0x5b6>
					{
						// NOTE: help_bitmask has only one bit set,
						// so it doesn't matter if we use get_msb() or get_lsb()

						int16_t help_index = ARRAY_INDEX_SIZE_ADD(po, &(mx.request->mask[chirp_config.my_row_mask.pos]), sizeof(uint_fast_t) * chirp_config.my_row_mask.len) * sizeof(uint_fast_t) * 8 + gpi_get_msb(help_bitmask);
 8016b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b2a:	4a45      	ldr	r2, [pc, #276]	; (8016c40 <mixer_update_slot+0x618>)
 8016b2c:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016b30:	4a44      	ldr	r2, [pc, #272]	; (8016c44 <mixer_update_slot+0x61c>)
 8016b32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8016b36:	3206      	adds	r2, #6
 8016b38:	0092      	lsls	r2, r2, #2
 8016b3a:	440a      	add	r2, r1
 8016b3c:	1a9a      	subs	r2, r3, r2
 8016b3e:	4b41      	ldr	r3, [pc, #260]	; (8016c44 <mixer_update_slot+0x61c>)
 8016b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b44:	009b      	lsls	r3, r3, #2
 8016b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	015b      	lsls	r3, r3, #5
 8016b4e:	b29a      	uxth	r2, r3
 8016b50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016b54:	63fb      	str	r3, [r7, #60]	; 0x3c
	asm
 8016b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b58:	fab3 f383 	clz	r3, r3
 8016b5c:	f1c3 031f 	rsb	r3, r3, #31
 8016b60:	461c      	mov	r4, r3
	return y;
 8016b62:	4623      	mov	r3, r4
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	4413      	add	r3, r2
 8016b68:	b29b      	uxth	r3, r3
 8016b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						mx.request->help_index = -(1 + help_index);
 8016b6e:	4b34      	ldr	r3, [pc, #208]	; (8016c40 <mixer_update_slot+0x618>)
 8016b70:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016b74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016b78:	43d2      	mvns	r2, r2
 8016b7a:	b212      	sxth	r2, r2
 8016b7c:	815a      	strh	r2, [r3, #10]
						mx.request->help_bitmask = help_bitmask;
 8016b7e:	4b30      	ldr	r3, [pc, #192]	; (8016c40 <mixer_update_slot+0x618>)
 8016b80:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016b84:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016b88:	60da      	str	r2, [r3, #12]

						is_helper = 1;
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

						// invalidate tx packet if it is not able to help
						// NOTE: it is rebuild in this case
						// NOTE: a side effect of this is that the grid timer ISR doesn't
						// need to check the packet before sideloading the helper row
						if (((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 8016b90:	4b2b      	ldr	r3, [pc, #172]	; (8016c40 <mixer_update_slot+0x618>)
 8016b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b94:	4a2b      	ldr	r2, [pc, #172]	; (8016c44 <mixer_update_slot+0x61c>)
 8016b96:	7b92      	ldrb	r2, [r2, #14]
 8016b98:	4413      	add	r3, r2
 8016b9a:	7a1b      	ldrb	r3, [r3, #8]
 8016b9c:	b25b      	sxtb	r3, r3
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	da4c      	bge.n	8016c3c <mixer_update_slot+0x614>
						{
							if (mx_get_leading_index(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos])) <= help_index)
 8016ba2:	4b27      	ldr	r3, [pc, #156]	; (8016c40 <mixer_update_slot+0x618>)
 8016ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ba6:	4b27      	ldr	r3, [pc, #156]	; (8016c44 <mixer_update_slot+0x61c>)
 8016ba8:	799b      	ldrb	r3, [r3, #6]
 8016baa:	3308      	adds	r3, #8
 8016bac:	4413      	add	r3, r2
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7f7 fbaa 	bl	800e308 <mx_get_leading_index>
 8016bb4:	4602      	mov	r2, r0
 8016bb6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	dc3e      	bgt.n	8016c3c <mixer_update_slot+0x614>
							{
								mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 8016bbe:	4b20      	ldr	r3, [pc, #128]	; (8016c40 <mixer_update_slot+0x618>)
 8016bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bc2:	4a20      	ldr	r2, [pc, #128]	; (8016c44 <mixer_update_slot+0x61c>)
 8016bc4:	7b92      	ldrb	r2, [r2, #14]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	7a1a      	ldrb	r2, [r3, #8]
 8016bca:	4b1d      	ldr	r3, [pc, #116]	; (8016c40 <mixer_update_slot+0x618>)
 8016bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bce:	491d      	ldr	r1, [pc, #116]	; (8016c44 <mixer_update_slot+0x61c>)
 8016bd0:	7b89      	ldrb	r1, [r1, #14]
 8016bd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016bd6:	b2d2      	uxtb	r2, r2
 8016bd8:	440b      	add	r3, r1
 8016bda:	721a      	strb	r2, [r3, #8]
							}
                        }

						break;
 8016bdc:	e02e      	b.n	8016c3c <mixer_update_slot+0x614>
                    }

					// break after scanning any_mask
					// NOTE: -2 matches position of pr
					if (ARRAY_INDEX_SIZE_ADD(pr, &(mx.request->mask[chirp_config.row_any_mask.pos]), sizeof(uint_fast_t) * chirp_config.row_any_mask.len) - 2 < chirp_config.row_any_mask.len)
 8016bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016be2:	4a17      	ldr	r2, [pc, #92]	; (8016c40 <mixer_update_slot+0x618>)
 8016be4:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016be8:	4a16      	ldr	r2, [pc, #88]	; (8016c44 <mixer_update_slot+0x61c>)
 8016bea:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8016bee:	3206      	adds	r2, #6
 8016bf0:	0092      	lsls	r2, r2, #2
 8016bf2:	440a      	add	r2, r1
 8016bf4:	1a9a      	subs	r2, r3, r2
 8016bf6:	4b13      	ldr	r3, [pc, #76]	; (8016c44 <mixer_update_slot+0x61c>)
 8016bf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016bfc:	009b      	lsls	r3, r3, #2
 8016bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c02:	3b02      	subs	r3, #2
 8016c04:	4a0f      	ldr	r2, [pc, #60]	; (8016c44 <mixer_update_slot+0x61c>)
 8016c06:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d31c      	bcc.n	8016c48 <mixer_update_slot+0x620>
						break;

					// scan any_mask (after scanning all_mask)
					pr = &(mx.request->mask[chirp_config.row_any_mask.pos]);
 8016c0e:	4b0c      	ldr	r3, [pc, #48]	; (8016c40 <mixer_update_slot+0x618>)
 8016c10:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016c14:	4b0b      	ldr	r3, [pc, #44]	; (8016c44 <mixer_update_slot+0x61c>)
 8016c16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8016c1a:	3306      	adds	r3, #6
 8016c1c:	009b      	lsls	r3, r3, #2
 8016c1e:	4413      	add	r3, r2
 8016c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while ((is_helper <= 0) && (mx.request->row_any_pending))
 8016c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	dc0e      	bgt.n	8016c4a <mixer_update_slot+0x622>
 8016c2c:	4b04      	ldr	r3, [pc, #16]	; (8016c40 <mixer_update_slot+0x618>)
 8016c2e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	f47f af0e 	bne.w	8016a56 <mixer_update_slot+0x42e>
                }

				PROFILE("mixer_update_slot() tx decision request help 2");
 8016c3a:	e006      	b.n	8016c4a <mixer_update_slot+0x622>
						break;
 8016c3c:	bf00      	nop
 8016c3e:	e004      	b.n	8016c4a <mixer_update_slot+0x622>
 8016c40:	200014f0 	.word	0x200014f0
 8016c44:	20001430 	.word	0x20001430
						break;
 8016c48:	bf00      	nop
				PROFILE("mixer_update_slot() tx decision request help 2");
 8016c4a:	bf00      	nop

				if (is_helper != 0)
 8016c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	f000 80cb 	beq.w	8016dec <mixer_update_slot+0x7c4>
				{
					assert_reset((chirp_config.mx_num_nodes < 256));
 8016c56:	4bb7      	ldr	r3, [pc, #732]	; (8016f34 <mixer_update_slot+0x90c>)
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	2bff      	cmp	r3, #255	; 0xff
 8016c5e:	d907      	bls.n	8016c70 <mixer_update_slot+0x648>
 8016c60:	4bb4      	ldr	r3, [pc, #720]	; (8016f34 <mixer_update_slot+0x90c>)
 8016c62:	881b      	ldrh	r3, [r3, #0]
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	2bff      	cmp	r3, #255	; 0xff
 8016c68:	d902      	bls.n	8016c70 <mixer_update_slot+0x648>
 8016c6a:	b671      	cpsid	f
 8016c6c:	f7ff f8cc 	bl	8015e08 <NVIC_SystemReset>

					PROFILE("mixer_update_slot() tx decision request help 3");
 8016c70:	bf00      	nop

					// relative rank = rank / MX_GENERATION_SIZE,
					// stored in 0.16 signed fixed point format
					relative_rank = gpi_mulu_16x16(mx.rank, 0xffff / chirp_config.mx_generation_size);
 8016c72:	4bb1      	ldr	r3, [pc, #708]	; (8016f38 <mixer_update_slot+0x910>)
 8016c74:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8016c78:	4bae      	ldr	r3, [pc, #696]	; (8016f34 <mixer_update_slot+0x90c>)
 8016c7a:	885b      	ldrh	r3, [r3, #2]
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	4619      	mov	r1, r3
 8016c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c84:	fb93 f3f1 	sdiv	r3, r3, r1
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	877a      	strh	r2, [r7, #58]	; 0x3a
 8016c8c:	873b      	strh	r3, [r7, #56]	; 0x38
	return (uint32_t)a * (uint32_t)b;
 8016c8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c90:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016c92:	fb02 f303 	mul.w	r3, r2, r3
 8016c96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

					// n = number of potential helpers
					uint_fast8_t n = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

					// all full rank neighbors can help
					#if MX_COORDINATED_TX
						n += mx_finished_head->mx_num_nodes;
 8016ca0:	4ba6      	ldr	r3, [pc, #664]	; (8016f3c <mixer_update_slot+0x914>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	885b      	ldrh	r3, [r3, #2]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cac:	4413      	add	r3, r2
 8016cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						GPI_TRACE_MSG(TRACE_VERBOSE, "n_finished: %" PRIuFAST8, n);
 8016cb2:	bf00      	nop
					#endif

					// if I can help
					if (is_helper >= 0)
 8016cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	db41      	blt.n	8016d40 <mixer_update_slot+0x718>
					{
						// add me
						n++;
 8016cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cc0:	3301      	adds	r3, #1
 8016cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						GPI_TRACE_MSG(TRACE_VERBOSE, "+me: %" PRIuFAST8, n);
 8016cc6:	bf00      	nop
							n += 1;
						#elif MX_REQUEST_HEURISTIC == 1
							n += (UINT16_C(3) * mx_present_head->mx_num_nodes + 2) / 4;
						#elif MX_REQUEST_HEURISTIC == 2

							uint_fast16_t i = (ABS(mx.request->help_index) - 1) / (8 * sizeof(uint_fast_t));
 8016cc8:	4b9b      	ldr	r3, [pc, #620]	; (8016f38 <mixer_update_slot+0x910>)
 8016cca:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016cce:	895b      	ldrh	r3, [r3, #10]
 8016cd0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8016cd4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	bfb8      	it	lt
 8016cdc:	425b      	neglt	r3, r3
 8016cde:	3b01      	subs	r3, #1
 8016ce0:	095b      	lsrs	r3, r3, #5
 8016ce2:	673b      	str	r3, [r7, #112]	; 0x70

							GPI_TRACE_MSG(TRACE_VERBOSE, "i: %" PRIdFAST16", m: %" PRIxFAST, i, help_bitmask);
 8016ce4:	bf00      	nop

							Node *p;
							for (p = mx.history[mx_present_head->next]; p != mx_present_head; p = mx.history[p->next])
 8016ce6:	4b96      	ldr	r3, [pc, #600]	; (8016f40 <mixer_update_slot+0x918>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	785b      	ldrb	r3, [r3, #1]
 8016cec:	4a92      	ldr	r2, [pc, #584]	; (8016f38 <mixer_update_slot+0x910>)
 8016cee:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8016cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016cfa:	e01a      	b.n	8016d32 <mixer_update_slot+0x70a>
							{
								if (!(p->row_map_chunk[i] & help_bitmask))
 8016cfc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d02:	009b      	lsls	r3, r3, #2
 8016d04:	4413      	add	r3, r2
 8016d06:	685a      	ldr	r2, [r3, #4]
 8016d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016d0c:	4013      	ands	r3, r2
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d105      	bne.n	8016d1e <mixer_update_slot+0x6f6>
								{
									n++;
 8016d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d16:	3301      	adds	r3, #1
 8016d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
									GPI_TRACE_MSG(TRACE_VERBOSE, "+node %u: %" PRIuFAST8, (int)ARRAY_INDEX_SIZE_ADD(p, &(mx.history[0]->prev), chirp_config.history_len_8), n);
 8016d1c:	bf00      	nop
							for (p = mx.history[mx_present_head->next]; p != mx_present_head; p = mx.history[p->next])
 8016d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d22:	785b      	ldrb	r3, [r3, #1]
 8016d24:	4a84      	ldr	r2, [pc, #528]	; (8016f38 <mixer_update_slot+0x910>)
 8016d26:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8016d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016d32:	4b83      	ldr	r3, [pc, #524]	; (8016f40 <mixer_update_slot+0x918>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d1de      	bne.n	8016cfc <mixer_update_slot+0x6d4>
						// i.e., probably the majority considers the same index; and if I can(not)
						// help than probably they can(not). estimate the majority as 3/4 of us
						// (with rounding)
					}

					GPI_TRACE_MSG(TRACE_VERBOSE, "+heuristic: %" PRIuFAST8, n);
 8016d3e:	e00d      	b.n	8016d5c <mixer_update_slot+0x734>
							n += (mx_present_head->mx_num_nodes + 2) / 4;
 8016d40:	4b7f      	ldr	r3, [pc, #508]	; (8016f40 <mixer_update_slot+0x918>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	885b      	ldrh	r3, [r3, #2]
 8016d46:	3302      	adds	r3, #2
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	da00      	bge.n	8016d4e <mixer_update_slot+0x726>
 8016d4c:	3303      	adds	r3, #3
 8016d4e:	109b      	asrs	r3, r3, #2
 8016d50:	461a      	mov	r2, r3
 8016d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d56:	4413      	add	r3, r2
 8016d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					GPI_TRACE_MSG(TRACE_VERBOSE, "+heuristic: %" PRIuFAST8, n);
 8016d5c:	bf00      	nop

					if (is_helper > 0)
 8016d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	dd1c      	ble.n	8016da0 <mixer_update_slot+0x778>
					{
						// p = 1 / n
						if (n < 2)
 8016d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d6a:	2b01      	cmp	r3, #1
 8016d6c:	d804      	bhi.n	8016d78 <mixer_update_slot+0x750>
							p = UINT16_MAX;
 8016d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d72:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					// 0			1					0				1 / (d + 1), evtl. incl. aging
					// +			p+ * rr + (1 - rr)	p+ * rr			p+ = 1 / n
					// -			p- * rr + (1 - rr)	p- * rr			p- = (1 / e) / (d - n)
					// (rr = relative rank, d = density, n = number of helpers, e = Euler's number)

					PROFILE("mixer_update_slot() tx decision request help 4");
 8016d76:	e037      	b.n	8016de8 <mixer_update_slot+0x7c0>
						else p = gpi_divu_16x8(UINT16_MAX, n, 0);
 8016d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d7c:	b2db      	uxtb	r3, r3
 8016d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d82:	86fa      	strh	r2, [r7, #54]	; 0x36
 8016d84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8016d88:	2300      	movs	r3, #0
 8016d8a:	633b      	str	r3, [r7, #48]	; 0x30
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 8016d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016d8e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8016d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d96:	461c      	mov	r4, r3
	return r;
 8016d98:	b2a3      	uxth	r3, r4
 8016d9a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 8016d9e:	e023      	b.n	8016de8 <mixer_update_slot+0x7c0>
							if ((density - n) < 2)
 8016da0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8016da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d804      	bhi.n	8016db8 <mixer_update_slot+0x790>
								p = 24109;
 8016dae:	f645 632d 	movw	r3, #24109	; 0x5e2d
 8016db2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 8016db6:	e017      	b.n	8016de8 <mixer_update_slot+0x7c0>
							else p = gpi_divu_16x8(24109, density - n, 0);
 8016db8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016dbc:	b2da      	uxtb	r2, r3
 8016dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	1ad3      	subs	r3, r2, r3
 8016dc6:	b2db      	uxtb	r3, r3
 8016dc8:	f645 622d 	movw	r2, #24109	; 0x5e2d
 8016dcc:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8016dce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 8016dd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016dd8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8016ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8016de0:	461c      	mov	r4, r3
	return r;
 8016de2:	b2a3      	uxth	r3, r4
 8016de4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 8016de8:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "request: is_helper = %" PRIdFAST8", p = %" PRIu16
 8016dea:	bf00      	nop
						is_helper, p, relative_rank, n, mx.request->help_index);
				}
			}
			#endif

			PROFILE("mixer_update_slot() tx decision coord");
 8016dec:	bf00      	nop
				// NOTE: modulo/division is expensive -> do it more efficient:
				// Instead of dividing, we simply increment owner from slot to slot with manual
				// wrap-around. Some checks ensure that it also works if slot_number jumps (e.g.
				// because of resynchronization).

				uint16_t diff = slot_number - last_owner_update;
 8016dee:	4b55      	ldr	r3, [pc, #340]	; (8016f44 <mixer_update_slot+0x91c>)
 8016df0:	881b      	ldrh	r3, [r3, #0]
 8016df2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016df6:	1ad3      	subs	r3, r2, r3
 8016df8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

				// limit number of potential loop iterations
				if (diff >= 8 * chirp_config.mx_num_nodes)
 8016dfc:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8016e00:	4b4c      	ldr	r3, [pc, #304]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e02:	881b      	ldrh	r3, [r3, #0]
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	db15      	blt.n	8016e38 <mixer_update_slot+0x810>
					owner = (slot_number + 1 - 1) % chirp_config.mx_num_nodes;
 8016e0c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016e10:	4a48      	ldr	r2, [pc, #288]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e12:	8812      	ldrh	r2, [r2, #0]
 8016e14:	b292      	uxth	r2, r2
 8016e16:	fb93 f1f2 	sdiv	r1, r3, r2
 8016e1a:	fb02 f201 	mul.w	r2, r2, r1
 8016e1e:	1a9b      	subs	r3, r3, r2
 8016e20:	b29a      	uxth	r2, r3
 8016e22:	4b49      	ldr	r3, [pc, #292]	; (8016f48 <mixer_update_slot+0x920>)
 8016e24:	801a      	strh	r2, [r3, #0]
 8016e26:	e026      	b.n	8016e76 <mixer_update_slot+0x84e>
				else
				{
					// skip full wrap-around cycles
					while (diff >= chirp_config.mx_num_nodes)
						diff -= chirp_config.mx_num_nodes;
 8016e28:	4b42      	ldr	r3, [pc, #264]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e2a:	881b      	ldrh	r3, [r3, #0]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8016e32:	1ad3      	subs	r3, r2, r3
 8016e34:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
					while (diff >= chirp_config.mx_num_nodes)
 8016e38:	4b3e      	ldr	r3, [pc, #248]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	b29b      	uxth	r3, r3
 8016e3e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8016e42:	429a      	cmp	r2, r3
 8016e44:	d2f0      	bcs.n	8016e28 <mixer_update_slot+0x800>

					// update owner
					owner += diff;
 8016e46:	4b40      	ldr	r3, [pc, #256]	; (8016f48 <mixer_update_slot+0x920>)
 8016e48:	881a      	ldrh	r2, [r3, #0]
 8016e4a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8016e4e:	4413      	add	r3, r2
 8016e50:	b29a      	uxth	r2, r3
 8016e52:	4b3d      	ldr	r3, [pc, #244]	; (8016f48 <mixer_update_slot+0x920>)
 8016e54:	801a      	strh	r2, [r3, #0]
					if (owner >= chirp_config.mx_num_nodes)
 8016e56:	4b37      	ldr	r3, [pc, #220]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	4b3a      	ldr	r3, [pc, #232]	; (8016f48 <mixer_update_slot+0x920>)
 8016e5e:	881b      	ldrh	r3, [r3, #0]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d808      	bhi.n	8016e76 <mixer_update_slot+0x84e>
						owner -= chirp_config.mx_num_nodes;
 8016e64:	4b38      	ldr	r3, [pc, #224]	; (8016f48 <mixer_update_slot+0x920>)
 8016e66:	881a      	ldrh	r2, [r3, #0]
 8016e68:	4b32      	ldr	r3, [pc, #200]	; (8016f34 <mixer_update_slot+0x90c>)
 8016e6a:	881b      	ldrh	r3, [r3, #0]
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	b29a      	uxth	r2, r3
 8016e72:	4b35      	ldr	r3, [pc, #212]	; (8016f48 <mixer_update_slot+0x920>)
 8016e74:	801a      	strh	r2, [r3, #0]
                }

				last_owner_update = slot_number;
 8016e76:	4a33      	ldr	r2, [pc, #204]	; (8016f44 <mixer_update_slot+0x91c>)
 8016e78:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016e7c:	8013      	strh	r3, [r2, #0]

				GPI_TRACE_MSG(TRACE_VERBOSE, "owner of slot %" PRIu16 ": %" PRIu16, slot_number + 1, owner);
 8016e7e:	bf00      	nop

				// if my slot: TX
				if (owner == mx.tx_packet->sender_id)
 8016e80:	4b2d      	ldr	r3, [pc, #180]	; (8016f38 <mixer_update_slot+0x910>)
 8016e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e84:	799b      	ldrb	r3, [r3, #6]
 8016e86:	b29a      	uxth	r2, r3
 8016e88:	4b2f      	ldr	r3, [pc, #188]	; (8016f48 <mixer_update_slot+0x920>)
 8016e8a:	881b      	ldrh	r3, [r3, #0]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d11b      	bne.n	8016ec8 <mixer_update_slot+0x8a0>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: my slot");
 8016e90:	bf00      	nop

					#if MX_REQUEST
						// adapt tx probability if request pending
						// -> possibly place our slot at the disposal of other helpers
						// formula: p = p * rr + (1 - rr); p = 0.16, rr = 0.16
						if (is_helper < 0)
 8016e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	da11      	bge.n	8016ebe <mixer_update_slot+0x896>
 8016e9a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8016e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ea0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
	return (uint32_t)a * (uint32_t)b;
 8016ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ea8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016eaa:	fb02 f303 	mul.w	r3, r2, r3
							p = (gpi_mulu_16x16(p, relative_rank) >> 16) - relative_rank;
 8016eae:	0c1b      	lsrs	r3, r3, #16
 8016eb0:	b29a      	uxth	r2, r3
 8016eb2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016eb6:	1ad3      	subs	r3, r2, r3
 8016eb8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						else
					#endif

					p = UINT16_MAX;
					break;
 8016ebc:	e0d9      	b.n	8017072 <mixer_update_slot+0xa4a>
					p = UINT16_MAX;
 8016ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ec2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 8016ec6:	e0d4      	b.n	8017072 <mixer_update_slot+0xa4a>

			#endif

			// TX in last slot -> don't TX (except it is our slot)
			#if !MX_BENCHMARK_FULL_RANDOM_TX
			if (mx.events & BV(TX_READY))
 8016ec8:	4b1b      	ldr	r3, [pc, #108]	; (8016f38 <mixer_update_slot+0x910>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	f003 0304 	and.w	r3, r3, #4
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d00e      	beq.n	8016ef2 <mixer_update_slot+0x8ca>
			{
				// with one exception: if we did tx in slot 1 -- i.e. we are the initiator --
				// we also transmit in slot 2 because we know that no other node uses slot 2
				// (in best case they received the first packet in slot 1 and prepare their
				// first tx packet during slot 2)
				if (slot_number == 1)
 8016ed4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d105      	bne.n	8016ee8 <mixer_update_slot+0x8c0>
				{
					p = UINT16_MAX;
 8016edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ee0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: initiator in slot 2");
 8016ee4:	bf00      	nop
					break;
 8016ee6:	e0c4      	b.n	8017072 <mixer_update_slot+0xa4a>
				}

				p = 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: tx in previous slot");
 8016eee:	bf00      	nop
				break;
 8016ef0:	e0bf      	b.n	8017072 <mixer_update_slot+0xa4a>

			#if MX_COORDINATED_TX

				// during start-up phase
				#if !MX_BENCHMARK_NO_COORDINATED_STARTUP
				if (slot_number < chirp_config.mx_generation_size)
 8016ef2:	4b10      	ldr	r3, [pc, #64]	; (8016f34 <mixer_update_slot+0x90c>)
 8016ef4:	885b      	ldrh	r3, [r3, #2]
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d23f      	bcs.n	8016f80 <mixer_update_slot+0x958>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: start-up phase");
 8016f00:	bf00      	nop
					// }

					// if we are the owner of the next payload: TX
					// NOTE: in start-up phase, the slots are assigned to owners by node IDs
					// *and initial payloads* (i.e. slots can have two owners in this phase).
					if ((slot_number + 1 < chirp_config.mx_generation_size) && (0 == mx.matrix[slot_number + 1]->birth_slot))
 8016f02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016f06:	3301      	adds	r3, #1
 8016f08:	4a0a      	ldr	r2, [pc, #40]	; (8016f34 <mixer_update_slot+0x90c>)
 8016f0a:	8852      	ldrh	r2, [r2, #2]
 8016f0c:	b292      	uxth	r2, r2
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	da1c      	bge.n	8016f4c <mixer_update_slot+0x924>
 8016f12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016f16:	3301      	adds	r3, #1
 8016f18:	4a07      	ldr	r2, [pc, #28]	; (8016f38 <mixer_update_slot+0x910>)
 8016f1a:	3316      	adds	r3, #22
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	4413      	add	r3, r2
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	881b      	ldrh	r3, [r3, #0]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d111      	bne.n	8016f4c <mixer_update_slot+0x924>
					{
						GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: being start-up owner");
 8016f28:	bf00      	nop
						p = UINT16_MAX;
 8016f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f2e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						break;
 8016f32:	e09e      	b.n	8017072 <mixer_update_slot+0xa4a>
 8016f34:	20001430 	.word	0x20001430
 8016f38:	200014f0 	.word	0x200014f0
 8016f3c:	20000ce0 	.word	0x20000ce0
 8016f40:	20000cc4 	.word	0x20000cc4
 8016f44:	2000047a 	.word	0x2000047a
 8016f48:	20000478 	.word	0x20000478
                    }

					// TX with probability 1 / slot_number, approximated by the shift
					// and lower bounded by 1 / 16
					p = UINT16_MAX >> MIN(gpi_get_msb(slot_number) + 1, 4);
 8016f4c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016f50:	623b      	str	r3, [r7, #32]
	asm
 8016f52:	6a3b      	ldr	r3, [r7, #32]
 8016f54:	fab3 f383 	clz	r3, r3
 8016f58:	f1c3 031f 	rsb	r3, r3, #31
 8016f5c:	461c      	mov	r4, r3
	return y;
 8016f5e:	4623      	mov	r3, r4
 8016f60:	3301      	adds	r3, #1
 8016f62:	667b      	str	r3, [r7, #100]	; 0x64
 8016f64:	2304      	movs	r3, #4
 8016f66:	663b      	str	r3, [r7, #96]	; 0x60
 8016f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f6c:	4293      	cmp	r3, r2
 8016f6e:	bfa8      	it	ge
 8016f70:	4613      	movge	r3, r2
 8016f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f76:	fa42 f303 	asr.w	r3, r2, r3
 8016f7a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 8016f7e:	e078      	b.n	8017072 <mixer_update_slot+0xa4a>
                }
				#endif

				// foreign slot
				if (mx.history[owner]->list_id != ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8) - chirp_config.mx_num_nodes)
 8016f80:	4bb0      	ldr	r3, [pc, #704]	; (8017244 <mixer_update_slot+0xc1c>)
 8016f82:	881b      	ldrh	r3, [r3, #0]
 8016f84:	4ab0      	ldr	r2, [pc, #704]	; (8017248 <mixer_update_slot+0xc20>)
 8016f86:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8016f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f8e:	789b      	ldrb	r3, [r3, #2]
 8016f90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	4619      	mov	r1, r3
 8016f98:	4bac      	ldr	r3, [pc, #688]	; (801724c <mixer_update_slot+0xc24>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	4baa      	ldr	r3, [pc, #680]	; (8017248 <mixer_update_slot+0xc20>)
 8016fa0:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8016fa4:	1ad3      	subs	r3, r2, r3
 8016fa6:	4aaa      	ldr	r2, [pc, #680]	; (8017250 <mixer_update_slot+0xc28>)
 8016fa8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8016faa:	b292      	uxth	r2, r2
 8016fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8016fb0:	4aa7      	ldr	r2, [pc, #668]	; (8017250 <mixer_update_slot+0xc28>)
 8016fb2:	8812      	ldrh	r2, [r2, #0]
 8016fb4:	b292      	uxth	r2, r2
 8016fb6:	1a9b      	subs	r3, r3, r2
 8016fb8:	4299      	cmp	r1, r3
 8016fba:	d016      	beq.n	8016fea <mixer_update_slot+0x9c2>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "foreign slot");
 8016fbc:	bf00      	nop

					#if MX_REQUEST
						// adapt tx probability if request pending
						// -> possibly jump in as helper
						// formula: p = p * rr; p = 0.16, rr = 0.16
						if (is_helper != 0)
 8016fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d00d      	beq.n	8016fe2 <mixer_update_slot+0x9ba>
 8016fc6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8016fca:	83fb      	strh	r3, [r7, #30]
 8016fcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016fd0:	83bb      	strh	r3, [r7, #28]
	return (uint32_t)a * (uint32_t)b;
 8016fd2:	8bfb      	ldrh	r3, [r7, #30]
 8016fd4:	8bba      	ldrh	r2, [r7, #28]
 8016fd6:	fb02 f303 	mul.w	r3, r2, r3
							p = gpi_mulu_16x16(p, relative_rank) >> 16;
 8016fda:	0c1b      	lsrs	r3, r3, #16
 8016fdc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						else
					#endif

					p = 0;
					break;
 8016fe0:	e047      	b.n	8017072 <mixer_update_slot+0xa4a>
					p = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 8016fe8:	e043      	b.n	8017072 <mixer_update_slot+0xa4a>

			#endif

			// concurrent arbitration slot
			{
				GPI_TRACE_MSG(TRACE_VERBOSE, "concurrent slot");
 8016fea:	bf00      	nop

				// if request pending: p has been computed already
				if (is_helper != 0)
 8016fec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d13d      	bne.n	8017070 <mixer_update_slot+0xa48>
					break;

				static const uint8_t age_to_tx_LUT[] = MX_AGE_TO_TX_PROBABILITY;
				ASSERT_CT(sizeof(age_to_tx_LUT) > 0, MX_AGE_TO_TX_PROBABILITY_is_invalid);

				uint16_t age = slot_number - mx.recent_innovative_slot;
 8016ff4:	4b94      	ldr	r3, [pc, #592]	; (8017248 <mixer_update_slot+0xc20>)
 8016ff6:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8016ffa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016ffe:	1ad3      	subs	r3, r2, r3
 8017000:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				// formula to realize:
				// p = 1 / (d + 1) + d / (d + 1) * LUT[age]
				//   = A / B with A := 1 + d * LUT[age] and B := d + 1

				// compute A, store it in 8.8 fixed point format
				p = age_to_tx_LUT[MIN(age, NUM_ELEMENTS(age_to_tx_LUT) - 1)];
 8017004:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017008:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801700c:	2300      	movs	r3, #0
 801700e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017010:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8017014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017016:	4293      	cmp	r3, r2
 8017018:	bf28      	it	cs
 801701a:	4613      	movcs	r3, r2
 801701c:	4a8d      	ldr	r2, [pc, #564]	; (8017254 <mixer_update_slot+0xc2c>)
 801701e:	5cd3      	ldrb	r3, [r2, r3]
 8017020:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			#if !MX_COORDINATED_TX
				p <<= 8;
			#else
				p *= density;
 8017024:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8017028:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801702c:	fb12 f303 	smulbb	r3, r2, r3
 8017030:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				p += 0x100;
 8017034:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017038:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801703c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

				// compute A / B, store it in 0.16 fixed point format
				p = gpi_divu_16x8(p, density + 1, 0) << 8;
 8017040:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8017044:	b2db      	uxtb	r3, r3
 8017046:	3301      	adds	r3, #1
 8017048:	b2da      	uxtb	r2, r3
 801704a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801704e:	837b      	strh	r3, [r7, #26]
 8017050:	4613      	mov	r3, r2
 8017052:	767b      	strb	r3, [r7, #25]
 8017054:	2300      	movs	r3, #0
 8017056:	617b      	str	r3, [r7, #20]
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 8017058:	8b7b      	ldrh	r3, [r7, #26]
 801705a:	7e7a      	ldrb	r2, [r7, #25]
 801705c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017060:	461c      	mov	r4, r3
	return r;
 8017062:	b2a3      	uxth	r3, r4
 8017064:	021b      	lsls	r3, r3, #8
 8017066:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

				GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision age: %" PRIu16 ", density: %" PRIu16, age, density);
 801706a:	e002      	b.n	8017072 <mixer_update_slot+0xa4a>
				break;
 801706c:	bf00      	nop
 801706e:	e000      	b.n	8017072 <mixer_update_slot+0xa4a>
					break;
 8017070:	bf00      	nop
			#endif
            }

		} while (0);
		PROFILE("mixer_update_slot() tx decision p done");
 8017072:	bf00      	nop
		GPI_TRACE_MSG(TRACE_INFO, "tx decision p: %" PRIu16, p);
 8017074:	bf00      	nop

		next_task = RX;
 8017076:	2300      	movs	r3, #0
 8017078:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

		if (p && (mixer_rand() <= p))
 801707c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017080:	2b00      	cmp	r3, #0
 8017082:	d00a      	beq.n	801709a <mixer_update_slot+0xa72>
 8017084:	f001 fb84 	bl	8018790 <mixer_rand>
 8017088:	4603      	mov	r3, r0
 801708a:	461a      	mov	r2, r3
 801708c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017090:	4293      	cmp	r3, r2
 8017092:	d302      	bcc.n	801709a <mixer_update_slot+0xa72>
		{
			next_task = TX;
 8017094:	2301      	movs	r3, #1
 8017096:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		}

		clear_event(TX_READY);
 801709a:	2002      	movs	r0, #2
 801709c:	f7fe ffa4 	bl	8015fe8 <clear_event>

		PROFILE("mixer_update_slot() tx decision activate 1");
 80170a0:	bf00      	nop

		if (TX == next_task)
 80170a2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d125      	bne.n	80170f6 <mixer_update_slot+0xace>
		{
			// if TX and packet preparation pending: select short-term transmit data
			// in case there is not enough time to finish the full packet
			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 80170aa:	4b67      	ldr	r3, [pc, #412]	; (8017248 <mixer_update_slot+0xc20>)
 80170ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ae:	4a68      	ldr	r2, [pc, #416]	; (8017250 <mixer_update_slot+0xc28>)
 80170b0:	7b92      	ldrb	r2, [r2, #14]
 80170b2:	4413      	add	r3, r2
 80170b4:	7a1b      	ldrb	r3, [r3, #8]
 80170b6:	b25b      	sxtb	r3, r3
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	db1c      	blt.n	80170f6 <mixer_update_slot+0xace>
	__ASM volatile
 80170bc:	f3ef 8310 	mrs	r3, PRIMASK
 80170c0:	b672      	cpsid	i
 80170c2:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 80170c4:	f3bf 8f5f 	dmb	sy
	return ie;
 80170c8:	4623      	mov	r3, r4
			{
				int ie = gpi_int_lock();
 80170ca:	65fb      	str	r3, [r7, #92]	; 0x5c

				if (NULL == mx.tx_sideload)
 80170cc:	4b5e      	ldr	r3, [pc, #376]	; (8017248 <mixer_update_slot+0xc20>)
 80170ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d107      	bne.n	80170e4 <mixer_update_slot+0xabc>
				{
					mx.tx_sideload = (uint8_t *)&(mx.tx_reserve->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 80170d4:	4b5c      	ldr	r3, [pc, #368]	; (8017248 <mixer_update_slot+0xc20>)
 80170d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170d8:	4a5d      	ldr	r2, [pc, #372]	; (8017250 <mixer_update_slot+0xc28>)
 80170da:	7e12      	ldrb	r2, [r2, #24]
 80170dc:	4413      	add	r3, r2
 80170de:	3304      	adds	r3, #4
 80170e0:	4a59      	ldr	r2, [pc, #356]	; (8017248 <mixer_update_slot+0xc20>)
 80170e2:	6453      	str	r3, [r2, #68]	; 0x44
 80170e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170e6:	613b      	str	r3, [r7, #16]
 80170e8:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80170ec:	693b      	ldr	r3, [r7, #16]
 80170ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
			}
		}

		mixer_transport_set_next_slot_task(next_task);
 80170f6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7fa fc6a 	bl	80119d4 <mixer_transport_set_next_slot_task>

		PROFILE("mixer_update_slot() tx decision activate 2");
 8017100:	bf00      	nop
		// valid packet before leaving current thread if next task == TX. Therefore we don't rely
		// on TX_READY because that one is not signaled before our first transmission. Thereafter,
		// TX_READY and !is_ready are quiet equivalent - except for the fact that mx.tx_packet.is_ready
		// may also be reset during tx decision (to enforce assembly of a new packet in response to
		// request processing). Hence, checking is_ready is the right way here.
		if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS) && (mx.rank > 0))
 8017102:	4b51      	ldr	r3, [pc, #324]	; (8017248 <mixer_update_slot+0xc20>)
 8017104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017106:	4a52      	ldr	r2, [pc, #328]	; (8017250 <mixer_update_slot+0xc28>)
 8017108:	7b92      	ldrb	r2, [r2, #14]
 801710a:	4413      	add	r3, r2
 801710c:	7a1b      	ldrb	r3, [r3, #8]
 801710e:	b25b      	sxtb	r3, r3
 8017110:	2b00      	cmp	r3, #0
 8017112:	f2c0 8085 	blt.w	8017220 <mixer_update_slot+0xbf8>
 8017116:	4b4c      	ldr	r3, [pc, #304]	; (8017248 <mixer_update_slot+0xc20>)
 8017118:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 801711c:	2b00      	cmp	r3, #0
 801711e:	d07f      	beq.n	8017220 <mixer_update_slot+0xbf8>
		{
			PROFILE("mixer_update_slot() prepare tx packet begin");
 8017120:	bf00      	nop

			// is_valid is used to detect if the packet may have been hurt by the ISR while preparing it
			mx.tx_packet->packet_chunk[chirp_config.rand.pos] = (mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID_MASK) | (1 << PACKET_IS_VALID_POS);
 8017122:	4b49      	ldr	r3, [pc, #292]	; (8017248 <mixer_update_slot+0xc20>)
 8017124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017126:	4a4a      	ldr	r2, [pc, #296]	; (8017250 <mixer_update_slot+0xc28>)
 8017128:	7b92      	ldrb	r2, [r2, #14]
 801712a:	4413      	add	r3, r2
 801712c:	7a1a      	ldrb	r2, [r3, #8]
 801712e:	4b46      	ldr	r3, [pc, #280]	; (8017248 <mixer_update_slot+0xc20>)
 8017130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017132:	4947      	ldr	r1, [pc, #284]	; (8017250 <mixer_update_slot+0xc28>)
 8017134:	7b89      	ldrb	r1, [r1, #14]
 8017136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801713a:	b2d2      	uxtb	r2, r2
 801713c:	440b      	add	r3, r1
 801713e:	721a      	strb	r2, [r3, #8]

			REORDER_BARRIER();

			prepare_tx_packet();
 8017140:	f7fe ff7a 	bl	8016038 <prepare_tx_packet>

			REORDER_BARRIER();

			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID) >> PACKET_IS_VALID_POS))
 8017144:	4b40      	ldr	r3, [pc, #256]	; (8017248 <mixer_update_slot+0xc20>)
 8017146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017148:	4a41      	ldr	r2, [pc, #260]	; (8017250 <mixer_update_slot+0xc28>)
 801714a:	7b92      	ldrb	r2, [r2, #14]
 801714c:	4413      	add	r3, r2
 801714e:	7a1b      	ldrb	r3, [r3, #8]
 8017150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017154:	2b00      	cmp	r3, #0
 8017156:	d101      	bne.n	801715c <mixer_update_slot+0xb34>
				// if mx.tx_packet gets hurt by ISR, then we can not use it. On the other hand we
				// know that next_task TX has been done already, using the sideload (while we
				// prepared the packet, that is why we are here). So the packet is broken, but
				// we don't need it anymore.

				GPI_TRACE_MSG(TRACE_VERBOSE, "tx packet hurt by ISR -> dropped it");
 8017158:	bf00      	nop
				}

				gpi_int_unlock(ie);
            }

			PROFILE("mixer_update_slot() prepare tx packet end");
 801715a:	e060      	b.n	801721e <mixer_update_slot+0xbf6>
				mx.tx_packet->packet_chunk[chirp_config.rand.pos] = (mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_RAND_MASK) | (mixer_rand() & PACKET_RAND_MASK);
 801715c:	4b3a      	ldr	r3, [pc, #232]	; (8017248 <mixer_update_slot+0xc20>)
 801715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017160:	4a3b      	ldr	r2, [pc, #236]	; (8017250 <mixer_update_slot+0xc28>)
 8017162:	7b92      	ldrb	r2, [r2, #14]
 8017164:	4413      	add	r3, r2
 8017166:	7a1c      	ldrb	r4, [r3, #8]
 8017168:	f001 fb12 	bl	8018790 <mixer_rand>
 801716c:	4603      	mov	r3, r0
 801716e:	b2db      	uxtb	r3, r3
 8017170:	4323      	orrs	r3, r4
 8017172:	b2da      	uxtb	r2, r3
 8017174:	4b34      	ldr	r3, [pc, #208]	; (8017248 <mixer_update_slot+0xc20>)
 8017176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017178:	4935      	ldr	r1, [pc, #212]	; (8017250 <mixer_update_slot+0xc28>)
 801717a:	7b89      	ldrb	r1, [r1, #14]
 801717c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8017180:	b2d2      	uxtb	r2, r2
 8017182:	440b      	add	r3, r1
 8017184:	721a      	strb	r2, [r3, #8]
	__ASM volatile
 8017186:	f3ef 8310 	mrs	r3, PRIMASK
 801718a:	b672      	cpsid	i
 801718c:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 801718e:	f3bf 8f5f 	dmb	sy
	return ie;
 8017192:	4623      	mov	r3, r4
				int ie = gpi_int_lock();
 8017194:	65bb      	str	r3, [r7, #88]	; 0x58
				if ((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID) >> PACKET_IS_VALID_POS)
 8017196:	4b2c      	ldr	r3, [pc, #176]	; (8017248 <mixer_update_slot+0xc20>)
 8017198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801719a:	4a2d      	ldr	r2, [pc, #180]	; (8017250 <mixer_update_slot+0xc28>)
 801719c:	7b92      	ldrb	r2, [r2, #14]
 801719e:	4413      	add	r3, r2
 80171a0:	7a1b      	ldrb	r3, [r3, #8]
 80171a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d030      	beq.n	801720c <mixer_update_slot+0xbe4>
					mx.tx_packet->packet_chunk[chirp_config.rand.pos] |= PACKET_IS_READY;
 80171aa:	4b27      	ldr	r3, [pc, #156]	; (8017248 <mixer_update_slot+0xc20>)
 80171ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ae:	4a28      	ldr	r2, [pc, #160]	; (8017250 <mixer_update_slot+0xc28>)
 80171b0:	7b92      	ldrb	r2, [r2, #14]
 80171b2:	4413      	add	r3, r2
 80171b4:	7a1a      	ldrb	r2, [r3, #8]
 80171b6:	4b24      	ldr	r3, [pc, #144]	; (8017248 <mixer_update_slot+0xc20>)
 80171b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ba:	4925      	ldr	r1, [pc, #148]	; (8017250 <mixer_update_slot+0xc28>)
 80171bc:	7b89      	ldrb	r1, [r1, #14]
 80171be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80171c2:	b2d2      	uxtb	r2, r2
 80171c4:	440b      	add	r3, r1
 80171c6:	721a      	strb	r2, [r3, #8]
					if (((uintptr_t)mx.tx_sideload - (uintptr_t)&(mx.matrix[0]->birth_slot) < chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t))) && ((Matrix_Row *)(mx.tx_sideload - chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t)) != mx.empty_row))
 80171c8:	4b1f      	ldr	r3, [pc, #124]	; (8017248 <mixer_update_slot+0xc20>)
 80171ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171cc:	461a      	mov	r2, r3
 80171ce:	4b1e      	ldr	r3, [pc, #120]	; (8017248 <mixer_update_slot+0xc20>)
 80171d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80171d2:	1ad2      	subs	r2, r2, r3
 80171d4:	4b1e      	ldr	r3, [pc, #120]	; (8017250 <mixer_update_slot+0xc28>)
 80171d6:	885b      	ldrh	r3, [r3, #2]
 80171d8:	b29b      	uxth	r3, r3
 80171da:	4619      	mov	r1, r3
 80171dc:	4b1c      	ldr	r3, [pc, #112]	; (8017250 <mixer_update_slot+0xc28>)
 80171de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80171e0:	b29b      	uxth	r3, r3
 80171e2:	3301      	adds	r3, #1
 80171e4:	fb03 f301 	mul.w	r3, r3, r1
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d20e      	bcs.n	801720c <mixer_update_slot+0xbe4>
 80171ee:	4b16      	ldr	r3, [pc, #88]	; (8017248 <mixer_update_slot+0xc20>)
 80171f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80171f2:	4b17      	ldr	r3, [pc, #92]	; (8017250 <mixer_update_slot+0xc28>)
 80171f4:	7f5b      	ldrb	r3, [r3, #29]
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	425b      	negs	r3, r3
 80171fa:	441a      	add	r2, r3
 80171fc:	4b12      	ldr	r3, [pc, #72]	; (8017248 <mixer_update_slot+0xc20>)
 80171fe:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017202:	429a      	cmp	r2, r3
 8017204:	d002      	beq.n	801720c <mixer_update_slot+0xbe4>
							mx.tx_sideload = NULL;
 8017206:	4b10      	ldr	r3, [pc, #64]	; (8017248 <mixer_update_slot+0xc20>)
 8017208:	2200      	movs	r2, #0
 801720a:	645a      	str	r2, [r3, #68]	; 0x44
 801720c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801720e:	60bb      	str	r3, [r7, #8]
 8017210:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017214:	68bb      	ldr	r3, [r7, #8]
 8017216:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f383 8810 	msr	PRIMASK, r3
			PROFILE("mixer_update_slot() prepare tx packet end");
 801721e:	bf00      	nop
        }

		// maintain history
		#if MX_COORDINATED_TX
			mx_purge_history();
 8017220:	f7fe fd5e 	bl	8015ce0 <mx_purge_history>
				}
			}
			#endif
		#endif

		PROFILE("mixer_update_slot() end");
 8017224:	bf00      	nop
		PT_WAIT_UNTIL(pt, mx.events & BV(SLOT_UPDATE));
 8017226:	f7ff ba1f 	b.w	8016668 <mixer_update_slot+0x40>
    }
	else
	{
		if (mx.events & BV(TX_READY))
 801722a:	4b07      	ldr	r3, [pc, #28]	; (8017248 <mixer_update_slot+0xc20>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f003 0304 	and.w	r3, r3, #4
 8017232:	2b00      	cmp	r3, #0
 8017234:	d010      	beq.n	8017258 <mixer_update_slot+0xc30>
		{
			clear_event(TX_READY);
 8017236:	2002      	movs	r0, #2
 8017238:	f7fe fed6 	bl	8015fe8 <clear_event>
			mixer_transport_set_next_slot_task(RX);
 801723c:	2000      	movs	r0, #0
 801723e:	f7fa fbc9 	bl	80119d4 <mixer_transport_set_next_slot_task>
 8017242:	e00c      	b.n	801725e <mixer_update_slot+0xc36>
 8017244:	20000478 	.word	0x20000478
 8017248:	200014f0 	.word	0x200014f0
 801724c:	20000ce4 	.word	0x20000ce4
 8017250:	20001430 	.word	0x20001430
 8017254:	08026b40 	.word	0x08026b40
		}
		else
		{
			mixer_transport_set_next_slot_task(TX);
 8017258:	2001      	movs	r0, #1
 801725a:	f7fa fbbb 	bl	80119d4 <mixer_transport_set_next_slot_task>
		}
		PT_YIELD(pt);
 801725e:	2300      	movs	r3, #0
 8017260:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8017264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017266:	f240 42eb 	movw	r2, #1259	; 0x4eb
 801726a:	801a      	strh	r2, [r3, #0]
 801726c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8017270:	2b00      	cmp	r3, #0
 8017272:	f47f a9f9 	bne.w	8016668 <mixer_update_slot+0x40>
 8017276:	bf00      	nop
 8017278:	2301      	movs	r3, #1
 801727a:	e007      	b.n	801728c <mixer_update_slot+0xc64>
	}
	}
	PT_END(pt);
 801727c:	2300      	movs	r3, #0
 801727e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8017282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017284:	2200      	movs	r2, #0
 8017286:	801a      	strh	r2, [r3, #0]
 8017288:	bf00      	nop
 801728a:	2303      	movs	r3, #3
}
 801728c:	4618      	mov	r0, r3
 801728e:	37b4      	adds	r7, #180	; 0xb4
 8017290:	46bd      	mov	sp, r7
 8017292:	bd90      	pop	{r4, r7, pc}

08017294 <mixer_process_rx_data>:

//**************************************************************************************************

PT_THREAD(mixer_process_rx_data())
{
 8017294:	b590      	push	{r4, r7, lr}
 8017296:	b0b9      	sub	sp, #228	; 0xe4
 8017298:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_process_rx_data;
 801729a:	4bad      	ldr	r3, [pc, #692]	; (8017550 <mixer_process_rx_data+0x2bc>)
 801729c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	const unsigned int PAYLOAD_SHIFT =
		chirp_config.matrix_payload.pos * sizeof(uint_fast_t) - chirp_config.matrix_payload_8.pos;
 80172a0:	4bac      	ldr	r3, [pc, #688]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80172a2:	7f9b      	ldrb	r3, [r3, #30]
 80172a4:	009b      	lsls	r3, r3, #2
 80172a6:	4aab      	ldr	r2, [pc, #684]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80172a8:	7e92      	ldrb	r2, [r2, #26]
	const unsigned int PAYLOAD_SHIFT =
 80172aa:	1a9b      	subs	r3, r3, r2
 80172ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	// ATTENTION: ensure that PAYLOAD_SIZE is aligned because memxor_block() may rely on that
	// ATTENTION: don't use sizeof(mx.matrix[0].payload) because it might be too small due to
	// MX_BENCHMARK_PSEUDO_PAYLOAD
	const unsigned int PAYLOAD_SIZE =
		chirp_config.payload.len * sizeof(uint8_t) + PADDING_SIZE(chirp_config.payload.len * sizeof(uint8_t));
 80172b0:	4ba8      	ldr	r3, [pc, #672]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80172b2:	7a5b      	ldrb	r3, [r3, #9]
 80172b4:	461a      	mov	r2, r3
 80172b6:	4ba7      	ldr	r3, [pc, #668]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80172b8:	7a5b      	ldrb	r3, [r3, #9]
 80172ba:	425b      	negs	r3, r3
 80172bc:	f003 0303 	and.w	r3, r3, #3
	const unsigned int PAYLOAD_SIZE =
 80172c0:	4413      	add	r3, r2
 80172c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	PT_BEGIN(pt);
 80172c6:	2301      	movs	r3, #1
 80172c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80172cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80172d0:	881b      	ldrh	r3, [r3, #0]
 80172d2:	f240 624d 	movw	r2, #1613	; 0x64d
 80172d6:	4293      	cmp	r3, r2
 80172d8:	f000 8430 	beq.w	8017b3c <mixer_process_rx_data+0x8a8>
 80172dc:	f240 624d 	movw	r2, #1613	; 0x64d
 80172e0:	4293      	cmp	r3, r2
 80172e2:	dc0c      	bgt.n	80172fe <mixer_process_rx_data+0x6a>
 80172e4:	f240 5204 	movw	r2, #1284	; 0x504
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d01e      	beq.n	801732a <mixer_process_rx_data+0x96>
 80172ec:	f240 6242 	movw	r2, #1602	; 0x642
 80172f0:	4293      	cmp	r3, r2
 80172f2:	f000 840e 	beq.w	8017b12 <mixer_process_rx_data+0x87e>
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d011      	beq.n	801731e <mixer_process_rx_data+0x8a>
 80172fa:	f000 bd8a 	b.w	8017e12 <mixer_process_rx_data+0xb7e>
 80172fe:	f5b3 6fcf 	cmp.w	r3, #1656	; 0x678
 8017302:	f000 8563 	beq.w	8017dcc <mixer_process_rx_data+0xb38>
 8017306:	f240 627e 	movw	r2, #1662	; 0x67e
 801730a:	4293      	cmp	r3, r2
 801730c:	f000 8579 	beq.w	8017e02 <mixer_process_rx_data+0xb6e>
 8017310:	f240 6267 	movw	r2, #1639	; 0x667
 8017314:	4293      	cmp	r3, r2
 8017316:	f000 8533 	beq.w	8017d80 <mixer_process_rx_data+0xaec>
 801731a:	f000 bd7a 	b.w	8017e12 <mixer_process_rx_data+0xb7e>
 801731e:	bf00      	nop

	while (1)
	{
		PT_WAIT_UNTIL(pt, mx.events & BV(RX_READY));
 8017320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017324:	f240 5204 	movw	r2, #1284	; 0x504
 8017328:	801a      	strh	r2, [r3, #0]
 801732a:	4b8b      	ldr	r3, [pc, #556]	; (8017558 <mixer_process_rx_data+0x2c4>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	f003 0310 	and.w	r3, r3, #16
 8017332:	2b00      	cmp	r3, #0
 8017334:	d103      	bne.n	801733e <mixer_process_rx_data+0xaa>
 8017336:	bf00      	nop
 8017338:	2300      	movs	r3, #0
 801733a:	f000 bd73 	b.w	8017e24 <mixer_process_rx_data+0xb90>

		clear_event(RX_READY);
 801733e:	2004      	movs	r0, #4
 8017340:	f7fe fe52 	bl	8015fe8 <clear_event>
		if (chirp_config.primitive != FLOODING)
 8017344:	4b83      	ldr	r3, [pc, #524]	; (8017554 <mixer_process_rx_data+0x2c0>)
 8017346:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801734a:	2b01      	cmp	r3, #1
 801734c:	f000 854e 	beq.w	8017dec <mixer_process_rx_data+0xb58>
		{
		while (mx.rx_queue_num_read != mx.rx_queue_num_written)
 8017350:	f000 bd43 	b.w	8017dda <mixer_process_rx_data+0xb46>
		{
			PROFILE("mixer_process_rx_data() begin");
 8017354:	bf00      	nop
			static Packet	*p;
			void			*pp[MEMXOR_BLOCKSIZE];
			unsigned int	pp_used;
			int_fast16_t	i;

			p = mx.rx_queue[mx.rx_queue_num_read % NUM_ELEMENTS(mx.rx_queue)];
 8017356:	4b80      	ldr	r3, [pc, #512]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801735a:	f003 0303 	and.w	r3, r3, #3
 801735e:	4a7e      	ldr	r2, [pc, #504]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	4413      	add	r3, r2
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	4a7d      	ldr	r2, [pc, #500]	; (801755c <mixer_process_rx_data+0x2c8>)
 8017368:	6013      	str	r3, [r2, #0]

			if (p->sender_id >= chirp_config.mx_num_nodes)
 801736a:	4b7c      	ldr	r3, [pc, #496]	; (801755c <mixer_process_rx_data+0x2c8>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	799b      	ldrb	r3, [r3, #6]
 8017370:	b29a      	uxth	r2, r3
 8017372:	4b78      	ldr	r3, [pc, #480]	; (8017554 <mixer_process_rx_data+0x2c0>)
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	b29b      	uxth	r3, r3
 8017378:	429a      	cmp	r2, r3
 801737a:	d302      	bcc.n	8017382 <mixer_process_rx_data+0xee>
			{
				GPI_TRACE_MSG(TRACE_INFO, "Rx: invalid sender_id %u -> drop packet", p->sender_id);
 801737c:	bf00      	nop
				goto continue_;
 801737e:	f000 bd0f 	b.w	8017da0 <mixer_process_rx_data+0xb0c>
			}

			TRACE_DUMP(1, "Rx packet:", &(p->phy_payload_begin), chirp_config.phy_payload_size);
 8017382:	bf00      	nop

			PRINTF_CHIRP("Rx: ");
 8017384:	4876      	ldr	r0, [pc, #472]	; (8017560 <mixer_process_rx_data+0x2cc>)
 8017386:	f00a ff0d 	bl	80221a4 <iprintf>

			TRACE_PACKET(p);
 801738a:	4b74      	ldr	r3, [pc, #464]	; (801755c <mixer_process_rx_data+0x2c8>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	4618      	mov	r0, r3
 8017390:	f7fe fd4e 	bl	8015e30 <trace_packet>

			/* when receive a packet at first time */
			if ((!mx.rank) && (chirp_config.disem_copy))
 8017394:	4b70      	ldr	r3, [pc, #448]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017396:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 801739a:	2b00      	cmp	r3, #0
 801739c:	d128      	bne.n	80173f0 <mixer_process_rx_data+0x15c>
 801739e:	4b6d      	ldr	r3, [pc, #436]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173a0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d023      	beq.n	80173f0 <mixer_process_rx_data+0x15c>
			{
				mixer_write(node_id_allocate, &(p->packet_chunk[chirp_config.payload.pos]), chirp_config.mx_payload_size);
 80173a8:	4b6e      	ldr	r3, [pc, #440]	; (8017564 <mixer_process_rx_data+0x2d0>)
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	4618      	mov	r0, r3
 80173ae:	4b6b      	ldr	r3, [pc, #428]	; (801755c <mixer_process_rx_data+0x2c8>)
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	4b68      	ldr	r3, [pc, #416]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173b4:	7a1b      	ldrb	r3, [r3, #8]
 80173b6:	3308      	adds	r3, #8
 80173b8:	18d1      	adds	r1, r2, r3
 80173ba:	4b66      	ldr	r3, [pc, #408]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173bc:	889b      	ldrh	r3, [r3, #4]
 80173be:	b29b      	uxth	r3, r3
 80173c0:	461a      	mov	r2, r3
 80173c2:	f7fa fe53 	bl	801206c <mixer_write>
				if (node_id_allocate == chirp_config.mx_generation_size - 1)
 80173c6:	4b67      	ldr	r3, [pc, #412]	; (8017564 <mixer_process_rx_data+0x2d0>)
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	461a      	mov	r2, r3
 80173cc:	4b61      	ldr	r3, [pc, #388]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173ce:	885b      	ldrh	r3, [r3, #2]
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	3b01      	subs	r3, #1
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d10b      	bne.n	80173f0 <mixer_process_rx_data+0x15c>
					mx.empty_row -= chirp_config.matrix_size_32;
 80173d8:	4b5f      	ldr	r3, [pc, #380]	; (8017558 <mixer_process_rx_data+0x2c4>)
 80173da:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80173de:	4b5d      	ldr	r3, [pc, #372]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	425b      	negs	r3, r3
 80173e8:	4413      	add	r3, r2
 80173ea:	4a5b      	ldr	r2, [pc, #364]	; (8017558 <mixer_process_rx_data+0x2c4>)
 80173ec:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
					}
				}
			#endif

			// if we already have full rank: done
			if (mx.rank >= chirp_config.mx_generation_size)
 80173f0:	4b59      	ldr	r3, [pc, #356]	; (8017558 <mixer_process_rx_data+0x2c4>)
 80173f2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80173f6:	4b57      	ldr	r3, [pc, #348]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80173f8:	885b      	ldrh	r3, [r3, #2]
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	429a      	cmp	r2, r3
 80173fe:	f080 84cc 	bcs.w	8017d9a <mixer_process_rx_data+0xb06>
			{
				goto continue_;
			}

			PROFILE("mixer_process_rx_data() checkpoint 1");
 8017402:	bf00      	nop
			// is vacant, i.e. it may be filled with data without updating mx.tx_sideload afterwards
			// (e.g. in response to a missed CRC check). This is no problem as long as we never set
			// mx.tx_sideload back to an older queue entry than it is (if it points into the queue).
			// If we don't do that, then the ISR ensures that mx.tx_sideload never points to the
			// vacant slot.
			if (mx.tx_sideload == &(p->packet_chunk[chirp_config.coding_vector.pos]))
 8017404:	4b54      	ldr	r3, [pc, #336]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017408:	4b54      	ldr	r3, [pc, #336]	; (801755c <mixer_process_rx_data+0x2c8>)
 801740a:	6819      	ldr	r1, [r3, #0]
 801740c:	4b51      	ldr	r3, [pc, #324]	; (8017554 <mixer_process_rx_data+0x2c0>)
 801740e:	799b      	ldrb	r3, [r3, #6]
 8017410:	3308      	adds	r3, #8
 8017412:	440b      	add	r3, r1
 8017414:	429a      	cmp	r2, r3
 8017416:	d15a      	bne.n	80174ce <mixer_process_rx_data+0x23a>
				// full rank): copy the packet to this row and use it as sideload
				// NOTE: it is important that we don't simply invalidate mx.tx_sideload because
				// the case that it points to the current packet is standard (except for high load
				// situations). If we invalidate it, there is a significant probability that fast
				// tx update doesn't happen (only if rx processing finishes before next tx slot).
				if (NULL == mx.empty_row)
 8017418:	4b4f      	ldr	r3, [pc, #316]	; (8017558 <mixer_process_rx_data+0x2c4>)
 801741a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801741e:	2b00      	cmp	r3, #0
 8017420:	d103      	bne.n	801742a <mixer_process_rx_data+0x196>
					pr = NULL;
 8017422:	2300      	movs	r3, #0
 8017424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8017428:	e02c      	b.n	8017484 <mixer_process_rx_data+0x1f0>
				else
				{
					pr = (uint8_t *)&(mx.empty_row->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 801742a:	4b4b      	ldr	r3, [pc, #300]	; (8017558 <mixer_process_rx_data+0x2c4>)
 801742c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017430:	4a48      	ldr	r2, [pc, #288]	; (8017554 <mixer_process_rx_data+0x2c0>)
 8017432:	7e12      	ldrb	r2, [r2, #24]
 8017434:	4413      	add	r3, r2
 8017436:	3304      	adds	r3, #4
 8017438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					gpi_memcpy_dma_aligned(pr, &(p->packet_chunk[chirp_config.coding_vector.pos]),
 801743c:	4b47      	ldr	r3, [pc, #284]	; (801755c <mixer_process_rx_data+0x2c8>)
 801743e:	681a      	ldr	r2, [r3, #0]
 8017440:	4b44      	ldr	r3, [pc, #272]	; (8017554 <mixer_process_rx_data+0x2c0>)
 8017442:	799b      	ldrb	r3, [r3, #6]
 8017444:	3308      	adds	r3, #8
 8017446:	441a      	add	r2, r3
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t));
 8017448:	4b42      	ldr	r3, [pc, #264]	; (8017554 <mixer_process_rx_data+0x2c0>)
 801744a:	7f5b      	ldrb	r3, [r3, #29]
 801744c:	4619      	mov	r1, r3
 801744e:	4b41      	ldr	r3, [pc, #260]	; (8017554 <mixer_process_rx_data+0x2c0>)
 8017450:	7fdb      	ldrb	r3, [r3, #31]
 8017452:	440b      	add	r3, r1
					gpi_memcpy_dma_aligned(pr, &(p->packet_chunk[chirp_config.coding_vector.pos]),
 8017454:	009b      	lsls	r3, r3, #2
 8017456:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801745a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 801745e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8017462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	__builtin_memcpy(dest, src, size);
 8017466:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801746a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801746e:	4610      	mov	r0, r2
 8017470:	4619      	mov	r1, r3
 8017472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017476:	461a      	mov	r2, r3
 8017478:	f00a f87c 	bl	8021574 <memcpy>
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#else

					unwrap_chunk(pr);
 801747c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8017480:	f7f6 ff82 	bl	800e388 <unwrap_chunk>
	__ASM volatile
 8017484:	f3ef 8310 	mrs	r3, PRIMASK
 8017488:	b672      	cpsid	i
 801748a:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 801748c:	f3bf 8f5f 	dmb	sy
	return ie;
 8017490:	4623      	mov	r3, r4

					#endif
                }

				int ie = gpi_int_lock();
 8017492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

				if (mx.tx_sideload == &(p->packet_chunk[chirp_config.coding_vector.pos]))
 8017496:	4b30      	ldr	r3, [pc, #192]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801749a:	4b30      	ldr	r3, [pc, #192]	; (801755c <mixer_process_rx_data+0x2c8>)
 801749c:	6819      	ldr	r1, [r3, #0]
 801749e:	4b2d      	ldr	r3, [pc, #180]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80174a0:	799b      	ldrb	r3, [r3, #6]
 80174a2:	3308      	adds	r3, #8
 80174a4:	440b      	add	r3, r1
 80174a6:	429a      	cmp	r2, r3
 80174a8:	d103      	bne.n	80174b2 <mixer_process_rx_data+0x21e>
				{
					mx.tx_sideload = pr;
 80174aa:	4a2b      	ldr	r2, [pc, #172]	; (8017558 <mixer_process_rx_data+0x2c4>)
 80174ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80174b0:	6453      	str	r3, [r2, #68]	; 0x44
 80174b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80174b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80174ba:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80174be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80174c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80174ca:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
            }

			// align packet elements
			unwrap_chunk(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 80174ce:	4b23      	ldr	r3, [pc, #140]	; (801755c <mixer_process_rx_data+0x2c8>)
 80174d0:	681a      	ldr	r2, [r3, #0]
 80174d2:	4b20      	ldr	r3, [pc, #128]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80174d4:	799b      	ldrb	r3, [r3, #6]
 80174d6:	3308      	adds	r3, #8
 80174d8:	4413      	add	r3, r2
 80174da:	4618      	mov	r0, r3
 80174dc:	f7f6 ff54 	bl	800e388 <unwrap_chunk>

			PROFILE("mixer_process_rx_data() checkpoint 2");
 80174e0:	bf00      	nop

			// traverse matrix / coding vector
			pp_used = 0;
 80174e2:	2300      	movs	r3, #0
 80174e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			while (1)
			{
				PROFILE("mixer_process_rx_data() matrix iteration begin");
 80174e8:	bf00      	nop

				// get leading coefficient
				i = mx_get_leading_index(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 80174ea:	4b1c      	ldr	r3, [pc, #112]	; (801755c <mixer_process_rx_data+0x2c8>)
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	4b19      	ldr	r3, [pc, #100]	; (8017554 <mixer_process_rx_data+0x2c0>)
 80174f0:	799b      	ldrb	r3, [r3, #6]
 80174f2:	3308      	adds	r3, #8
 80174f4:	4413      	add	r3, r2
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7f6 ff06 	bl	800e308 <mx_get_leading_index>
 80174fc:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

				if (i < 0)
 8017500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017504:	2b00      	cmp	r3, #0
 8017506:	da2f      	bge.n	8017568 <mixer_process_rx_data+0x2d4>
	__ASM volatile
 8017508:	f3ef 8310 	mrs	r3, PRIMASK
 801750c:	b672      	cpsid	i
 801750e:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017510:	f3bf 8f5f 	dmb	sy
	return ie;
 8017514:	4623      	mov	r3, r4
				{
					// if this is the last received packed: invalidate mx.tx_sideload because the
					// packet was not innovative -> ensures that the prepared tx packet won't
					// get hurt
					{
						int ie = gpi_int_lock();
 8017516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

						if (mx.rx_queue_num_written - mx.rx_queue_num_read == 1)
 801751a:	4b0f      	ldr	r3, [pc, #60]	; (8017558 <mixer_process_rx_data+0x2c4>)
 801751c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801751e:	4b0e      	ldr	r3, [pc, #56]	; (8017558 <mixer_process_rx_data+0x2c4>)
 8017520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017522:	1ad3      	subs	r3, r2, r3
 8017524:	2b01      	cmp	r3, #1
 8017526:	d102      	bne.n	801752e <mixer_process_rx_data+0x29a>
							mx.tx_sideload = NULL;
 8017528:	4b0b      	ldr	r3, [pc, #44]	; (8017558 <mixer_process_rx_data+0x2c4>)
 801752a:	2200      	movs	r2, #0
 801752c:	645a      	str	r2, [r3, #68]	; 0x44
 801752e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017536:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 801753a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801753e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017546:	f383 8810 	msr	PRIMASK, r3

						gpi_int_unlock(ie);
					}

					break;
 801754a:	f000 bc29 	b.w	8017da0 <mixer_process_rx_data+0xb0c>
 801754e:	bf00      	nop
 8017550:	20001e2a 	.word	0x20001e2a
 8017554:	20001430 	.word	0x20001430
 8017558:	200014f0 	.word	0x200014f0
 801755c:	2000047c 	.word	0x2000047c
 8017560:	080257e0 	.word	0x080257e0
 8017564:	20000cc1 	.word	0x20000cc1
                }

				// if corresponding row is empty (i.e. packet is innovative): fill it, rank increase
				if (UINT16_MAX == mx.matrix[i]->birth_slot)
 8017568:	4a7a      	ldr	r2, [pc, #488]	; (8017754 <mixer_process_rx_data+0x4c0>)
 801756a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801756e:	3316      	adds	r3, #22
 8017570:	009b      	lsls	r3, r3, #2
 8017572:	4413      	add	r3, r2
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	881b      	ldrh	r3, [r3, #0]
 8017578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801757c:	4293      	cmp	r3, r2
 801757e:	f040 82f2 	bne.w	8017b66 <mixer_process_rx_data+0x8d2>
				{
					PROFILE("mixer_process_rx_data() new row begin");
 8017582:	bf00      	nop

					mx.matrix[i]->birth_slot = p->slot_number;
 8017584:	4b74      	ldr	r3, [pc, #464]	; (8017758 <mixer_process_rx_data+0x4c4>)
 8017586:	681a      	ldr	r2, [r3, #0]
 8017588:	4972      	ldr	r1, [pc, #456]	; (8017754 <mixer_process_rx_data+0x4c0>)
 801758a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801758e:	3316      	adds	r3, #22
 8017590:	009b      	lsls	r3, r3, #2
 8017592:	440b      	add	r3, r1
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	8892      	ldrh	r2, [r2, #4]
 8017598:	b292      	uxth	r2, r2
 801759a:	801a      	strh	r2, [r3, #0]

					mx.recent_innovative_slot = p->slot_number;
 801759c:	4b6e      	ldr	r3, [pc, #440]	; (8017758 <mixer_process_rx_data+0x4c4>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	889b      	ldrh	r3, [r3, #4]
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	4b6b      	ldr	r3, [pc, #428]	; (8017754 <mixer_process_rx_data+0x4c0>)
 80175a6:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464

					assert_reset((chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len));
 80175aa:	4b6c      	ldr	r3, [pc, #432]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175ac:	7a1b      	ldrb	r3, [r3, #8]
 80175ae:	461a      	mov	r2, r3
 80175b0:	4b6a      	ldr	r3, [pc, #424]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175b2:	799b      	ldrb	r3, [r3, #6]
 80175b4:	4619      	mov	r1, r3
 80175b6:	4b69      	ldr	r3, [pc, #420]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175b8:	79db      	ldrb	r3, [r3, #7]
 80175ba:	440b      	add	r3, r1
 80175bc:	429a      	cmp	r2, r3
 80175be:	d00d      	beq.n	80175dc <mixer_process_rx_data+0x348>
 80175c0:	4b66      	ldr	r3, [pc, #408]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175c2:	7a1b      	ldrb	r3, [r3, #8]
 80175c4:	461a      	mov	r2, r3
 80175c6:	4b65      	ldr	r3, [pc, #404]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175c8:	799b      	ldrb	r3, [r3, #6]
 80175ca:	4619      	mov	r1, r3
 80175cc:	4b63      	ldr	r3, [pc, #396]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175ce:	79db      	ldrb	r3, [r3, #7]
 80175d0:	440b      	add	r3, r1
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d002      	beq.n	80175dc <mixer_process_rx_data+0x348>
  __ASM volatile ("cpsid f" : : : "memory");
 80175d6:	b671      	cpsid	f
 80175d8:	f7fe fc16 	bl	8015e08 <NVIC_SystemReset>
					assert_reset((chirp_config.matrix_payload.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len));
 80175dc:	4b5f      	ldr	r3, [pc, #380]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175de:	7f9b      	ldrb	r3, [r3, #30]
 80175e0:	461a      	mov	r2, r3
 80175e2:	4b5e      	ldr	r3, [pc, #376]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175e4:	7f1b      	ldrb	r3, [r3, #28]
 80175e6:	4619      	mov	r1, r3
 80175e8:	4b5c      	ldr	r3, [pc, #368]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175ea:	7f5b      	ldrb	r3, [r3, #29]
 80175ec:	440b      	add	r3, r1
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d00d      	beq.n	801760e <mixer_process_rx_data+0x37a>
 80175f2:	4b5a      	ldr	r3, [pc, #360]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175f4:	7f9b      	ldrb	r3, [r3, #30]
 80175f6:	461a      	mov	r2, r3
 80175f8:	4b58      	ldr	r3, [pc, #352]	; (801775c <mixer_process_rx_data+0x4c8>)
 80175fa:	7f1b      	ldrb	r3, [r3, #28]
 80175fc:	4619      	mov	r1, r3
 80175fe:	4b57      	ldr	r3, [pc, #348]	; (801775c <mixer_process_rx_data+0x4c8>)
 8017600:	7f5b      	ldrb	r3, [r3, #29]
 8017602:	440b      	add	r3, r1
 8017604:	429a      	cmp	r2, r3
 8017606:	d002      	beq.n	801760e <mixer_process_rx_data+0x37a>
 8017608:	b671      	cpsid	f
 801760a:	f7fe fbfd 	bl	8015e08 <NVIC_SystemReset>

					if (pp_used)
 801760e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017612:	2b00      	cmp	r3, #0
 8017614:	f000 80be 	beq.w	8017794 <mixer_process_rx_data+0x500>
					{
						memxor_block(&(p->packet_chunk[chirp_config.payload.pos + PAYLOAD_SHIFT]), pp, PAYLOAD_SIZE, pp_used);
 8017618:	4b4f      	ldr	r3, [pc, #316]	; (8017758 <mixer_process_rx_data+0x4c4>)
 801761a:	681a      	ldr	r2, [r3, #0]
 801761c:	4b4f      	ldr	r3, [pc, #316]	; (801775c <mixer_process_rx_data+0x4c8>)
 801761e:	7a1b      	ldrb	r3, [r3, #8]
 8017620:	4619      	mov	r1, r3
 8017622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017626:	440b      	add	r3, r1
 8017628:	3308      	adds	r3, #8
 801762a:	441a      	add	r2, r3
 801762c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017630:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8017634:	1d3a      	adds	r2, r7, #4
 8017636:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801763a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801763e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017642:	67fb      	str	r3, [r7, #124]	; 0x7c
	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 8017644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017646:	2b08      	cmp	r3, #8
 8017648:	dd05      	ble.n	8017656 <mixer_process_rx_data+0x3c2>
 801764a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801764c:	2b08      	cmp	r3, #8
 801764e:	dd02      	ble.n	8017656 <mixer_process_rx_data+0x3c2>
 8017650:	b671      	cpsid	f
 8017652:	f7fe fbd9 	bl	8015e08 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8017656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017658:	2b00      	cmp	r3, #0
 801765a:	f000 809b 	beq.w	8017794 <mixer_process_rx_data+0x500>
 801765e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017662:	2b00      	cmp	r3, #0
 8017664:	f000 8096 	beq.w	8017794 <mixer_process_rx_data+0x500>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8017668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801766c:	2b08      	cmp	r3, #8
 801766e:	d80c      	bhi.n	801768a <mixer_process_rx_data+0x3f6>
 8017670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017672:	2b07      	cmp	r3, #7
 8017674:	dc09      	bgt.n	801768a <mixer_process_rx_data+0x3f6>
		memxor_block_straight(dest, src, size, num_src);
 8017676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017678:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801767c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8017680:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017684:	f7f6 fdda 	bl	800e23c <memxor_block_straight>
 8017688:	e084      	b.n	8017794 <mixer_process_rx_data+0x500>
	if (num_src < MEMXOR_BLOCKSIZE)
 801768a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801768c:	2b07      	cmp	r3, #7
 801768e:	dc49      	bgt.n	8017724 <mixer_process_rx_data+0x490>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8017690:	4b33      	ldr	r3, [pc, #204]	; (8017760 <mixer_process_rx_data+0x4cc>)
 8017692:	f023 0301 	bic.w	r3, r3, #1
 8017696:	62bb      	str	r3, [r7, #40]	; 0x28
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8017698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801769a:	3301      	adds	r3, #1
 801769c:	0fda      	lsrs	r2, r3, #31
 801769e:	4413      	add	r3, r2
 80176a0:	105b      	asrs	r3, r3, #1
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	f1c3 0312 	rsb	r3, r3, #18
 80176a8:	67bb      	str	r3, [r7, #120]	; 0x78
		if (num_src & 1)
 80176aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80176ac:	f003 0301 	and.w	r3, r3, #1
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d00b      	beq.n	80176cc <mixer_process_rx_data+0x438>
			loop_start += 2;
 80176b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176b6:	3302      	adds	r3, #2
 80176b8:	67bb      	str	r3, [r7, #120]	; 0x78
			ins.w[loop_start + 1] = ins.w[2];
 80176ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80176bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176c0:	3301      	adds	r3, #1
 80176c2:	009b      	lsls	r3, r3, #2
 80176c4:	440b      	add	r3, r1
 80176c6:	6892      	ldr	r2, [r2, #8]
 80176c8:	601a      	str	r2, [r3, #0]
 80176ca:	e006      	b.n	80176da <mixer_process_rx_data+0x446>
			ins.w[loop_start] = ins.w[2];
 80176cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80176ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80176d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176d2:	009b      	lsls	r3, r3, #2
 80176d4:	440b      	add	r3, r1
 80176d6:	6892      	ldr	r2, [r2, #8]
 80176d8:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80176da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80176e0:	3b03      	subs	r3, #3
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	005b      	lsls	r3, r3, #1
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80176ea:	3208      	adds	r2, #8
 80176ec:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80176f0:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 80176f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80176fe:	3b16      	subs	r3, #22
 8017700:	b29b      	uxth	r3, r3
 8017702:	005b      	lsls	r3, r3, #1
 8017704:	b29a      	uxth	r2, r3
 8017706:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801770a:	4013      	ands	r3, r2
 801770c:	b299      	uxth	r1, r3
 801770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017710:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8017714:	4b13      	ldr	r3, [pc, #76]	; (8017764 <mixer_process_rx_data+0x4d0>)
 8017716:	430b      	orrs	r3, r1
 8017718:	b29b      	uxth	r3, r3
 801771a:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801771c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017720:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8017724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017728:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801772c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017730:	f00d fc5a 	bl	8024fe8 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 8017734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017736:	2b07      	cmp	r3, #7
 8017738:	dc2c      	bgt.n	8017794 <mixer_process_rx_data+0x500>
		if (num_src & 1)
 801773a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801773c:	f003 0301 	and.w	r3, r3, #1
 8017740:	2b00      	cmp	r3, #0
 8017742:	d013      	beq.n	801776c <mixer_process_rx_data+0x4d8>
			ins.w[loop_start + 1] = 0x0104ea81;
 8017744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017748:	3301      	adds	r3, #1
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	4413      	add	r3, r2
 801774e:	4a06      	ldr	r2, [pc, #24]	; (8017768 <mixer_process_rx_data+0x4d4>)
 8017750:	601a      	str	r2, [r3, #0]
 8017752:	e011      	b.n	8017778 <mixer_process_rx_data+0x4e4>
 8017754:	200014f0 	.word	0x200014f0
 8017758:	2000047c 	.word	0x2000047c
 801775c:	20001430 	.word	0x20001430
 8017760:	20000005 	.word	0x20000005
 8017764:	ffffa800 	.word	0xffffa800
 8017768:	0104ea81 	.word	0x0104ea81
			ins.w[loop_start] = 0x0103ea81;
 801776c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801776e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	4413      	add	r3, r2
 8017774:	4a91      	ldr	r2, [pc, #580]	; (80179bc <mixer_process_rx_data+0x728>)
 8017776:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 8017778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801777a:	3308      	adds	r3, #8
 801777c:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8017780:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8017782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017784:	3356      	adds	r3, #86	; 0x56
 8017786:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801778a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801778c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017790:	f3bf 8f6f 	isb	sy
	__ASM volatile
 8017794:	f3ef 8310 	mrs	r3, PRIMASK
 8017798:	b672      	cpsid	i
 801779a:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 801779c:	f3bf 8f5f 	dmb	sy
	return ie;
 80177a0:	4623      	mov	r3, r4
					// NOTE: at this point the rx queue packet is valid (again) since processing
					// has been done (actually, the rx queue packet will be copied into the row)
					// NOTE: there is no problem if mx.tx_reserve points to current row here
					// because it is not used on ISR level
					{
						int ie = gpi_int_lock();
 80177a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					// TP TODO:
						if ((uintptr_t)mx.tx_sideload - (uintptr_t)mx.rx_queue[0] >= 4 * chirp_config.packet_len)
 80177a6:	4b86      	ldr	r3, [pc, #536]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80177a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177aa:	461a      	mov	r2, r3
 80177ac:	4b84      	ldr	r3, [pc, #528]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80177ae:	685b      	ldr	r3, [r3, #4]
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	4a84      	ldr	r2, [pc, #528]	; (80179c4 <mixer_process_rx_data+0x730>)
 80177b4:	8ad2      	ldrh	r2, [r2, #22]
 80177b6:	b292      	uxth	r2, r2
 80177b8:	0092      	lsls	r2, r2, #2
 80177ba:	4293      	cmp	r3, r2
 80177bc:	d307      	bcc.n	80177ce <mixer_process_rx_data+0x53a>
							mx.tx_sideload = &(p->packet_chunk[chirp_config.coding_vector.pos]);
 80177be:	4b82      	ldr	r3, [pc, #520]	; (80179c8 <mixer_process_rx_data+0x734>)
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	4b80      	ldr	r3, [pc, #512]	; (80179c4 <mixer_process_rx_data+0x730>)
 80177c4:	799b      	ldrb	r3, [r3, #6]
 80177c6:	3308      	adds	r3, #8
 80177c8:	4413      	add	r3, r2
 80177ca:	4a7d      	ldr	r2, [pc, #500]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80177cc:	6453      	str	r3, [r2, #68]	; 0x44
 80177ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80177d2:	677b      	str	r3, [r7, #116]	; 0x74
 80177d4:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80177d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177da:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80177de:	f383 8810 	msr	PRIMASK, r3
	__ASM volatile
 80177e2:	f3ef 8310 	mrs	r3, PRIMASK
 80177e6:	b672      	cpsid	i
 80177e8:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 80177ea:	f3bf 8f5f 	dmb	sy
	return ie;
 80177ee:	4623      	mov	r3, r4
					// for the case that assertions are inactive (i.e. NDEBUG).
					// NOTE: assert() sits within the condition body to keep time with interrupts
					// locked as short as possible in the normal case
					#if MX_REQUEST
					{
						int ie = gpi_int_lock();
 80177f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

						if (ABS(mx.request->help_index) - 1 == i)
 80177f4:	4b72      	ldr	r3, [pc, #456]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80177f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80177fa:	895b      	ldrh	r3, [r3, #10]
 80177fc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8017800:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8017804:	2b00      	cmp	r3, #0
 8017806:	bfb8      	it	lt
 8017808:	425b      	neglt	r3, r3
 801780a:	3b01      	subs	r3, #1
 801780c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017810:	429a      	cmp	r2, r3
 8017812:	d128      	bne.n	8017866 <mixer_process_rx_data+0x5d2>
						{
							{
								assert_reset((ABS(mx.request->help_index) - 1 != i));
 8017814:	4b6a      	ldr	r3, [pc, #424]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017816:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801781a:	895b      	ldrh	r3, [r3, #10]
 801781c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8017820:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8017824:	2b00      	cmp	r3, #0
 8017826:	bfb8      	it	lt
 8017828:	425b      	neglt	r3, r3
 801782a:	3b01      	subs	r3, #1
 801782c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017830:	429a      	cmp	r2, r3
 8017832:	d112      	bne.n	801785a <mixer_process_rx_data+0x5c6>
 8017834:	4b62      	ldr	r3, [pc, #392]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017836:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801783a:	895b      	ldrh	r3, [r3, #10]
 801783c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8017840:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8017844:	2b00      	cmp	r3, #0
 8017846:	bfb8      	it	lt
 8017848:	425b      	neglt	r3, r3
 801784a:	3b01      	subs	r3, #1
 801784c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017850:	429a      	cmp	r2, r3
 8017852:	d102      	bne.n	801785a <mixer_process_rx_data+0x5c6>
  __ASM volatile ("cpsid f" : : : "memory");
 8017854:	b671      	cpsid	f
 8017856:	f7fe fad7 	bl	8015e08 <NVIC_SystemReset>

								GPI_TRACE_MSG_FAST(TRACE_ERROR, "!!! request help index points to empty row -> check program, must not happen !!!");
 801785a:	bf00      	nop
							}
							mx.request->help_index = 0;
 801785c:	4b58      	ldr	r3, [pc, #352]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801785e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017862:	2200      	movs	r2, #0
 8017864:	815a      	strh	r2, [r3, #10]
 8017866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801786a:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("dmb 0xF":::"memory");
 801786c:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017872:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017876:	f383 8810 	msr	PRIMASK, r3

						gpi_int_unlock(ie);
					}
					#endif

					gpi_memcpy_dma_aligned(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]),
 801787a:	4a51      	ldr	r2, [pc, #324]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801787c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017880:	3316      	adds	r3, #22
 8017882:	009b      	lsls	r3, r3, #2
 8017884:	4413      	add	r3, r2
 8017886:	685a      	ldr	r2, [r3, #4]
 8017888:	4b4e      	ldr	r3, [pc, #312]	; (80179c4 <mixer_process_rx_data+0x730>)
 801788a:	7f1b      	ldrb	r3, [r3, #28]
 801788c:	009b      	lsls	r3, r3, #2
 801788e:	4413      	add	r3, r2
 8017890:	1d19      	adds	r1, r3, #4
 8017892:	4b4d      	ldr	r3, [pc, #308]	; (80179c8 <mixer_process_rx_data+0x734>)
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	4b4b      	ldr	r3, [pc, #300]	; (80179c4 <mixer_process_rx_data+0x730>)
 8017898:	799b      	ldrb	r3, [r3, #6]
 801789a:	3308      	adds	r3, #8
 801789c:	441a      	add	r2, r3
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t));
 801789e:	4b49      	ldr	r3, [pc, #292]	; (80179c4 <mixer_process_rx_data+0x730>)
 80178a0:	7f5b      	ldrb	r3, [r3, #29]
 80178a2:	4618      	mov	r0, r3
 80178a4:	4b47      	ldr	r3, [pc, #284]	; (80179c4 <mixer_process_rx_data+0x730>)
 80178a6:	7fdb      	ldrb	r3, [r3, #31]
 80178a8:	4403      	add	r3, r0
					gpi_memcpy_dma_aligned(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]),
 80178aa:	009b      	lsls	r3, r3, #2
 80178ac:	66f9      	str	r1, [r7, #108]	; 0x6c
 80178ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80178b0:	667b      	str	r3, [r7, #100]	; 0x64
 80178b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80178b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80178b6:	4610      	mov	r0, r2
 80178b8:	4619      	mov	r1, r3
 80178ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80178bc:	461a      	mov	r2, r3
 80178be:	f009 fe59 	bl	8021574 <memcpy>
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#endif

					mx.rank++;
 80178c2:	4b3f      	ldr	r3, [pc, #252]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178c4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80178c8:	3301      	adds	r3, #1
 80178ca:	b29a      	uxth	r2, r3
 80178cc:	4b3c      	ldr	r3, [pc, #240]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178ce:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
					// 2) it may be beneficial if it points to a quite new row
					#if 0	// activate only for special purposes like evaluating most stupid behavior
					if (NULL == mx.tx_reserve)
					#endif

					mx.tx_reserve = (Matrix_Row *)&(mx.matrix[i]->birth_slot);
 80178d2:	4a3b      	ldr	r2, [pc, #236]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80178d8:	3316      	adds	r3, #22
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	4413      	add	r3, r2
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	4a37      	ldr	r2, [pc, #220]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178e2:	6493      	str	r3, [r2, #72]	; 0x48

					// update mx.empty_row if needed
					// NOTE: mx.empty_row is kept static to avoid expensive search runs everytime
					// an empty row is needed. starting from its last position is much cheaper.
					if (mx.empty_row == (Matrix_Row *)&(mx.matrix[i]->birth_slot))
 80178e4:	4b36      	ldr	r3, [pc, #216]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178e6:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80178ea:	4935      	ldr	r1, [pc, #212]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80178ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80178f0:	3316      	adds	r3, #22
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	440b      	add	r3, r1
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d179      	bne.n	80179f0 <mixer_process_rx_data+0x75c>
					{
						if (chirp_config.mx_generation_size == mx.rank)
 80178fc:	4b31      	ldr	r3, [pc, #196]	; (80179c4 <mixer_process_rx_data+0x730>)
 80178fe:	885b      	ldrh	r3, [r3, #2]
 8017900:	b29a      	uxth	r2, r3
 8017902:	4b2f      	ldr	r3, [pc, #188]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017904:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017908:	429a      	cmp	r2, r3
 801790a:	d118      	bne.n	801793e <mixer_process_rx_data+0x6aa>
						{
							mx.empty_row = NULL;
 801790c:	4b2c      	ldr	r3, [pc, #176]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801790e:	2200      	movs	r2, #0
 8017910:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 8017914:	e06c      	b.n	80179f0 <mixer_process_rx_data+0x75c>
						}
						else
						{
							while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
							{
								mx.empty_row -= chirp_config.matrix_size_32;
 8017916:	4b2a      	ldr	r3, [pc, #168]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017918:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 801791c:	4b29      	ldr	r3, [pc, #164]	; (80179c4 <mixer_process_rx_data+0x730>)
 801791e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017920:	b29b      	uxth	r3, r3
 8017922:	009b      	lsls	r3, r3, #2
 8017924:	425b      	negs	r3, r3
 8017926:	4413      	add	r3, r2
 8017928:	4a25      	ldr	r2, [pc, #148]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801792a:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

								if (UINT16_MAX == mx.empty_row->birth_slot)
 801792e:	4b24      	ldr	r3, [pc, #144]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017930:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801793a:	4293      	cmp	r3, r2
 801793c:	d007      	beq.n	801794e <mixer_process_rx_data+0x6ba>
							while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 801793e:	4b20      	ldr	r3, [pc, #128]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017940:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017944:	4b1e      	ldr	r3, [pc, #120]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017948:	429a      	cmp	r2, r3
 801794a:	d8e4      	bhi.n	8017916 <mixer_process_rx_data+0x682>
 801794c:	e000      	b.n	8017950 <mixer_process_rx_data+0x6bc>
									break;
 801794e:	bf00      	nop
							}

							if (mx.empty_row < (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017950:	4b1b      	ldr	r3, [pc, #108]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017952:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017956:	4b1a      	ldr	r3, [pc, #104]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801795a:	429a      	cmp	r2, r3
 801795c:	d237      	bcs.n	80179ce <mixer_process_rx_data+0x73a>
							{
								mx.empty_row = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 801795e:	4b19      	ldr	r3, [pc, #100]	; (80179c4 <mixer_process_rx_data+0x730>)
 8017960:	885b      	ldrh	r3, [r3, #2]
 8017962:	b29b      	uxth	r3, r3
 8017964:	3b01      	subs	r3, #1
 8017966:	4a16      	ldr	r2, [pc, #88]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017968:	3316      	adds	r3, #22
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	4413      	add	r3, r2
 801796e:	685a      	ldr	r2, [r3, #4]
 8017970:	4b14      	ldr	r3, [pc, #80]	; (80179c4 <mixer_process_rx_data+0x730>)
 8017972:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017974:	b29b      	uxth	r3, r3
 8017976:	009b      	lsls	r3, r3, #2
 8017978:	4413      	add	r3, r2
 801797a:	3304      	adds	r3, #4
 801797c:	4a10      	ldr	r2, [pc, #64]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801797e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
								while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017982:	e013      	b.n	80179ac <mixer_process_rx_data+0x718>
								{
									mx.empty_row -= chirp_config.matrix_size_32;
 8017984:	4b0e      	ldr	r3, [pc, #56]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017986:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 801798a:	4b0e      	ldr	r3, [pc, #56]	; (80179c4 <mixer_process_rx_data+0x730>)
 801798c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801798e:	b29b      	uxth	r3, r3
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	425b      	negs	r3, r3
 8017994:	4413      	add	r3, r2
 8017996:	4a0a      	ldr	r2, [pc, #40]	; (80179c0 <mixer_process_rx_data+0x72c>)
 8017998:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

									if (UINT16_MAX == mx.empty_row->birth_slot)
 801799c:	4b08      	ldr	r3, [pc, #32]	; (80179c0 <mixer_process_rx_data+0x72c>)
 801799e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80179a2:	881b      	ldrh	r3, [r3, #0]
 80179a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179a8:	4293      	cmp	r3, r2
 80179aa:	d00f      	beq.n	80179cc <mixer_process_rx_data+0x738>
								while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 80179ac:	4b04      	ldr	r3, [pc, #16]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80179ae:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80179b2:	4b03      	ldr	r3, [pc, #12]	; (80179c0 <mixer_process_rx_data+0x72c>)
 80179b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d8e4      	bhi.n	8017984 <mixer_process_rx_data+0x6f0>
 80179ba:	e008      	b.n	80179ce <mixer_process_rx_data+0x73a>
 80179bc:	0103ea81 	.word	0x0103ea81
 80179c0:	200014f0 	.word	0x200014f0
 80179c4:	20001430 	.word	0x20001430
 80179c8:	2000047c 	.word	0x2000047c
										break;
 80179cc:	bf00      	nop
                                }
                            }

							assert_reset((mx.empty_row >= (Matrix_Row *)&(mx.matrix[0]->birth_slot)));
 80179ce:	4ba7      	ldr	r3, [pc, #668]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 80179d0:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80179d4:	4ba5      	ldr	r3, [pc, #660]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 80179d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179d8:	429a      	cmp	r2, r3
 80179da:	d209      	bcs.n	80179f0 <mixer_process_rx_data+0x75c>
 80179dc:	4ba3      	ldr	r3, [pc, #652]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 80179de:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80179e2:	4ba2      	ldr	r3, [pc, #648]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 80179e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d202      	bcs.n	80179f0 <mixer_process_rx_data+0x75c>
  __ASM volatile ("cpsid f" : : : "memory");
 80179ea:	b671      	cpsid	f
 80179ec:	f7fe fa0c 	bl	8015e08 <NVIC_SystemReset>
                        }
                    }

					// update request mask
					#if MX_REQUEST
						mx.request->mask[chirp_config.my_row_mask.pos + i / (sizeof(uint_fast_t) * 8)] &=
 80179f0:	4b9e      	ldr	r3, [pc, #632]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 80179f2:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80179f6:	4b9e      	ldr	r3, [pc, #632]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 80179f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80179fc:	4619      	mov	r1, r3
 80179fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a02:	095b      	lsrs	r3, r3, #5
 8017a04:	4419      	add	r1, r3
 8017a06:	3106      	adds	r1, #6
 8017a08:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
							~gpi_slu(1, (i % (sizeof(uint_fast_t) * 8)));
 8017a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017a10:	f002 021f 	and.w	r2, r2, #31
 8017a14:	2001      	movs	r0, #1
 8017a16:	fa00 f202 	lsl.w	r2, r0, r2
 8017a1a:	43d2      	mvns	r2, r2
 8017a1c:	4614      	mov	r4, r2
						mx.request->mask[chirp_config.my_row_mask.pos + i / (sizeof(uint_fast_t) * 8)] &=
 8017a1e:	4a93      	ldr	r2, [pc, #588]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a20:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 8017a24:	4892      	ldr	r0, [pc, #584]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a26:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8017a2a:	4403      	add	r3, r0
 8017a2c:	4021      	ands	r1, r4
 8017a2e:	3306      	adds	r3, #6
 8017a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						mx.request->my_column_pending =
							mx_request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.my_column_mask.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017a34:	4b8d      	ldr	r3, [pc, #564]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a36:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8017a3a:	4b8d      	ldr	r3, [pc, #564]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017a40:	3306      	adds	r3, #6
 8017a42:	009b      	lsls	r3, r3, #2
 8017a44:	18d0      	adds	r0, r2, r3
 8017a46:	4a89      	ldr	r2, [pc, #548]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a4c:	3316      	adds	r3, #22
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	4413      	add	r3, r2
 8017a52:	685a      	ldr	r2, [r3, #4]
 8017a54:	4b86      	ldr	r3, [pc, #536]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a56:	7f1b      	ldrb	r3, [r3, #28]
 8017a58:	009b      	lsls	r3, r3, #2
 8017a5a:	4413      	add	r3, r2
 8017a5c:	1d19      	adds	r1, r3, #4
 8017a5e:	4b84      	ldr	r3, [pc, #528]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a60:	7f5b      	ldrb	r3, [r3, #29]
 8017a62:	009a      	lsls	r2, r3, #2
						mx.request->my_column_pending =
 8017a64:	4b81      	ldr	r3, [pc, #516]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a66:	f8d3 4870 	ldr.w	r4, [r3, #2160]	; 0x870
							mx_request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.my_column_mask.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017a6a:	f000 ffc1 	bl	80189f0 <mx_request_clear>
 8017a6e:	4603      	mov	r3, r0
						mx.request->my_column_pending =
 8017a70:	8223      	strh	r3, [r4, #16]
						if (!mx.request->my_column_pending)
 8017a72:	4b7e      	ldr	r3, [pc, #504]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a74:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017a78:	8a1b      	ldrh	r3, [r3, #16]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d106      	bne.n	8017a8c <mixer_process_rx_data+0x7f8>
						{
							chirp_config.full_column = 0;
 8017a7e:	4b7c      	ldr	r3, [pc, #496]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a80:	2200      	movs	r2, #0
 8017a82:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
							PRINTF_CHIRP("-----column_pending = 0-----\n");
 8017a86:	487b      	ldr	r0, [pc, #492]	; (8017c74 <mixer_process_rx_data+0x9e0>)
 8017a88:	f00a fc14 	bl	80222b4 <puts>
						}

					#endif

					PROFILE("mixer_process_rx_data() new row done");
 8017a8c:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "new row %u, rank: %u", i, mx.rank);
 8017a8e:	bf00      	nop
					TRACE_MATRIX();
 8017a90:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "empty row: %d", (NULL == mx.empty_row) ? -1 :  ARRAY_INDEX_SIZE_ADD(mx.empty_row, &(mx.matrix[0]->birth_slot), (1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8017a92:	bf00      	nop

					// if we reached full rank with current packet: solve (decode)
					// NOTE: this may take some time. Although it would not be very critical if we
					// lose some packets meanwhile, we still yield to transmit something from time
					// to time.
					if (chirp_config.mx_generation_size == mx.rank)
 8017a94:	4b76      	ldr	r3, [pc, #472]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017a96:	885b      	ldrh	r3, [r3, #2]
 8017a98:	b29a      	uxth	r2, r3
 8017a9a:	4b74      	ldr	r3, [pc, #464]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017a9c:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	f040 817c 	bne.w	8017d9e <mixer_process_rx_data+0xb0a>
					{
						PRINTF_CHIRP("------------full_rank------------:%d\n", mx.slot_number);
 8017aa6:	4b71      	ldr	r3, [pc, #452]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017aa8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	4619      	mov	r1, r3
 8017ab0:	4871      	ldr	r0, [pc, #452]	; (8017c78 <mixer_process_rx_data+0x9e4>)
 8017ab2:	f00a fb77 	bl	80221a4 <iprintf>

						static Pt_Context	pt_decode;

						#if MX_VERBOSE_STATISTICS
							mx.stat_counter.slot_full_rank = p->slot_number;
 8017ab6:	4b71      	ldr	r3, [pc, #452]	; (8017c7c <mixer_process_rx_data+0x9e8>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	889b      	ldrh	r3, [r3, #4]
 8017abc:	b29a      	uxth	r2, r3
 8017abe:	4b6b      	ldr	r3, [pc, #428]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017ac0:	f8a3 289a 	strh.w	r2, [r3, #2202]	; 0x89a
	__ASM volatile
 8017ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8017ac8:	b672      	cpsid	i
 8017aca:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017acc:	f3bf 8f5f 	dmb	sy
	return ie;
 8017ad0:	4623      	mov	r3, r4
						// anymore after full rank has been reached. If we wouldn't change it here,
						// then it may point to an invalid entry after queue wrap-around.
						// NOTE: gpi_int_lock() is only needed if access to pointers is not atomic
						// (e.g. on 8 bit machines)
						REORDER_BARRIER();		// make sure that mx.rank is written back
						int ie = gpi_int_lock();
 8017ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						{
							if ((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY)>> PACKET_IS_READY_POS)
 8017ad6:	4b65      	ldr	r3, [pc, #404]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ada:	4a65      	ldr	r2, [pc, #404]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017adc:	7b92      	ldrb	r2, [r2, #14]
 8017ade:	4413      	add	r3, r2
 8017ae0:	7a1b      	ldrb	r3, [r3, #8]
 8017ae2:	b25b      	sxtb	r3, r3
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	da02      	bge.n	8017aee <mixer_process_rx_data+0x85a>
							{
								mx.tx_sideload = NULL;
 8017ae8:	4b60      	ldr	r3, [pc, #384]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017aea:	2200      	movs	r2, #0
 8017aec:	645a      	str	r2, [r3, #68]	; 0x44
 8017aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8017af4:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017afa:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017afe:	f383 8810 	msr	PRIMASK, r3
							}
						}
						gpi_int_unlock(ie);

						// yield because packet processing may already have taken some time
						PT_YIELD(pt);
 8017b02:	2300      	movs	r3, #0
 8017b04:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017b08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017b0c:	f240 6242 	movw	r2, #1602	; 0x642
 8017b10:	801a      	strh	r2, [r3, #0]
 8017b12:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d102      	bne.n	8017b20 <mixer_process_rx_data+0x88c>
 8017b1a:	bf00      	nop
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	e181      	b.n	8017e24 <mixer_process_rx_data+0xb90>

						PROFILE("mixer_process_rx_data() decode begin");
 8017b20:	bf00      	nop
						// start decode thread
						// ATTENTION: don't use PT_SPAWN() because it returns PT_WAITING if child
						// thread yields. Here, we have to make sure that we return PT_YIELDED in
						// this case.
						// PT_SPAWN(pt, &pt_decode, decode(&pt_decode));
						PT_INIT(&pt_decode);
 8017b22:	4b57      	ldr	r3, [pc, #348]	; (8017c80 <mixer_process_rx_data+0x9ec>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	801a      	strh	r2, [r3, #0]
						while (PT_SCHEDULE(mixer_decode(&pt_decode)))
 8017b28:	bf00      	nop
 8017b2a:	e00e      	b.n	8017b4a <mixer_process_rx_data+0x8b6>
							PT_YIELD(pt);
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017b32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017b36:	f240 624d 	movw	r2, #1613	; 0x64d
 8017b3a:	801a      	strh	r2, [r3, #0]
 8017b3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d102      	bne.n	8017b4a <mixer_process_rx_data+0x8b6>
 8017b44:	bf00      	nop
 8017b46:	2301      	movs	r3, #1
 8017b48:	e16c      	b.n	8017e24 <mixer_process_rx_data+0xb90>
						while (PT_SCHEDULE(mixer_decode(&pt_decode)))
 8017b4a:	bf00      	nop
 8017b4c:	484c      	ldr	r0, [pc, #304]	; (8017c80 <mixer_process_rx_data+0x9ec>)
 8017b4e:	f000 f979 	bl	8017e44 <mixer_decode>
 8017b52:	4603      	mov	r3, r0
 8017b54:	2b01      	cmp	r3, #1
 8017b56:	bf94      	ite	ls
 8017b58:	2301      	movls	r3, #1
 8017b5a:	2300      	movhi	r3, #0
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d1e4      	bne.n	8017b2c <mixer_process_rx_data+0x898>

						#if MX_SMART_SHUTDOWN_MAP
							update_full_rank_map(NULL);
						#endif

						PROFILE("mixer_process_rx_data() decode end");
 8017b62:	bf00      	nop
                    }

					break;
 8017b64:	e11b      	b.n	8017d9e <mixer_process_rx_data+0xb0a>
				}

				PROFILE("mixer_process_rx_data() matrix iteration checkpoint A");
 8017b66:	bf00      	nop

				// else substitute
				memxor(&(p->packet_chunk[chirp_config.coding_vector.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017b68:	4b44      	ldr	r3, [pc, #272]	; (8017c7c <mixer_process_rx_data+0x9e8>)
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	4b40      	ldr	r3, [pc, #256]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017b6e:	799b      	ldrb	r3, [r3, #6]
 8017b70:	3308      	adds	r3, #8
 8017b72:	18d1      	adds	r1, r2, r3
 8017b74:	4a3d      	ldr	r2, [pc, #244]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b7a:	3316      	adds	r3, #22
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	4413      	add	r3, r2
 8017b80:	685a      	ldr	r2, [r3, #4]
 8017b82:	4b3b      	ldr	r3, [pc, #236]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017b84:	7f1b      	ldrb	r3, [r3, #28]
 8017b86:	009b      	lsls	r3, r3, #2
 8017b88:	4413      	add	r3, r2
 8017b8a:	1d1a      	adds	r2, r3, #4
 8017b8c:	4b38      	ldr	r3, [pc, #224]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017b8e:	7f5b      	ldrb	r3, [r3, #29]
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	6539      	str	r1, [r7, #80]	; 0x50
 8017b94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017b96:	64bb      	str	r3, [r7, #72]	; 0x48
	if (0 == size)
 8017b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d018      	beq.n	8017bd0 <mixer_process_rx_data+0x93c>
	const unsigned int	*s = (const unsigned int*)src;
 8017b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ba0:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned int		*d = (unsigned int*)dest;
 8017ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ba4:	643b      	str	r3, [r7, #64]	; 0x40
	size = (size + sizeof(int) - 1) / sizeof(int);
 8017ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ba8:	3303      	adds	r3, #3
 8017baa:	089b      	lsrs	r3, r3, #2
 8017bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bae:	e00c      	b.n	8017bca <mixer_process_rx_data+0x936>
		*d++ ^= *s++;
 8017bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017bb2:	1d1a      	adds	r2, r3, #4
 8017bb4:	647a      	str	r2, [r7, #68]	; 0x44
 8017bb6:	6819      	ldr	r1, [r3, #0]
 8017bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bba:	1d1a      	adds	r2, r3, #4
 8017bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8017bbe:	681a      	ldr	r2, [r3, #0]
 8017bc0:	404a      	eors	r2, r1
 8017bc2:	601a      	str	r2, [r3, #0]
	for (; size != 0; --size)
 8017bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bc6:	3b01      	subs	r3, #1
 8017bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1ef      	bne.n	8017bb0 <mixer_process_rx_data+0x91c>

				pp[pp_used++] = &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_payload.pos]);
 8017bd0:	4a26      	ldr	r2, [pc, #152]	; (8017c6c <mixer_process_rx_data+0x9d8>)
 8017bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017bd6:	3316      	adds	r3, #22
 8017bd8:	009b      	lsls	r3, r3, #2
 8017bda:	4413      	add	r3, r2
 8017bdc:	6859      	ldr	r1, [r3, #4]
 8017bde:	4b24      	ldr	r3, [pc, #144]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017be0:	7f9b      	ldrb	r3, [r3, #30]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017be8:	1c5a      	adds	r2, r3, #1
 8017bea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8017bee:	0082      	lsls	r2, r0, #2
 8017bf0:	440a      	add	r2, r1
 8017bf2:	3204      	adds	r2, #4
 8017bf4:	009b      	lsls	r3, r3, #2
 8017bf6:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8017bfa:	440b      	add	r3, r1
 8017bfc:	f843 2cdc 	str.w	r2, [r3, #-220]

				if (NUM_ELEMENTS(pp) == pp_used)
 8017c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017c04:	2b08      	cmp	r3, #8
 8017c06:	f040 80c5 	bne.w	8017d94 <mixer_process_rx_data+0xb00>
				{
					// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit
					// better code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
					memxor_block(&(p->packet_chunk[chirp_config.payload.pos + PAYLOAD_SHIFT]), pp, PAYLOAD_SIZE, NUM_ELEMENTS(pp));
 8017c0a:	4b1c      	ldr	r3, [pc, #112]	; (8017c7c <mixer_process_rx_data+0x9e8>)
 8017c0c:	681a      	ldr	r2, [r3, #0]
 8017c0e:	4b18      	ldr	r3, [pc, #96]	; (8017c70 <mixer_process_rx_data+0x9dc>)
 8017c10:	7a1b      	ldrb	r3, [r3, #8]
 8017c12:	4619      	mov	r1, r3
 8017c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c18:	440b      	add	r3, r1
 8017c1a:	3308      	adds	r3, #8
 8017c1c:	4413      	add	r3, r2
 8017c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c20:	1d3b      	adds	r3, r7, #4
 8017c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8017c28:	637b      	str	r3, [r7, #52]	; 0x34
 8017c2a:	2308      	movs	r3, #8
 8017c2c:	633b      	str	r3, [r7, #48]	; 0x30
	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 8017c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c30:	2b08      	cmp	r3, #8
 8017c32:	dd05      	ble.n	8017c40 <mixer_process_rx_data+0x9ac>
 8017c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c36:	2b08      	cmp	r3, #8
 8017c38:	dd02      	ble.n	8017c40 <mixer_process_rx_data+0x9ac>
  __ASM volatile ("cpsid f" : : : "memory");
 8017c3a:	b671      	cpsid	f
 8017c3c:	f7fe f8e4 	bl	8015e08 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8017c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f000 8094 	beq.w	8017d70 <mixer_process_rx_data+0xadc>
 8017c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	f000 8090 	beq.w	8017d70 <mixer_process_rx_data+0xadc>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8017c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c52:	2b08      	cmp	r3, #8
 8017c54:	d816      	bhi.n	8017c84 <mixer_process_rx_data+0x9f0>
 8017c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c58:	2b07      	cmp	r3, #7
 8017c5a:	dc13      	bgt.n	8017c84 <mixer_process_rx_data+0x9f0>
		memxor_block_straight(dest, src, size, num_src);
 8017c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017c62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c64:	f7f6 faea 	bl	800e23c <memxor_block_straight>
 8017c68:	e082      	b.n	8017d70 <mixer_process_rx_data+0xadc>
 8017c6a:	bf00      	nop
 8017c6c:	200014f0 	.word	0x200014f0
 8017c70:	20001430 	.word	0x20001430
 8017c74:	080257e8 	.word	0x080257e8
 8017c78:	08025808 	.word	0x08025808
 8017c7c:	2000047c 	.word	0x2000047c
 8017c80:	20000480 	.word	0x20000480
	if (num_src < MEMXOR_BLOCKSIZE)
 8017c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c86:	2b07      	cmp	r3, #7
 8017c88:	dc49      	bgt.n	8017d1e <mixer_process_rx_data+0xa8a>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8017c8a:	4b68      	ldr	r3, [pc, #416]	; (8017e2c <mixer_process_rx_data+0xb98>)
 8017c8c:	f023 0301 	bic.w	r3, r3, #1
 8017c90:	627b      	str	r3, [r7, #36]	; 0x24
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8017c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c94:	3301      	adds	r3, #1
 8017c96:	0fda      	lsrs	r2, r3, #31
 8017c98:	4413      	add	r3, r2
 8017c9a:	105b      	asrs	r3, r3, #1
 8017c9c:	009b      	lsls	r3, r3, #2
 8017c9e:	f1c3 0312 	rsb	r3, r3, #18
 8017ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (num_src & 1)
 8017ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca6:	f003 0301 	and.w	r3, r3, #1
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d00b      	beq.n	8017cc6 <mixer_process_rx_data+0xa32>
			loop_start += 2;
 8017cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb0:	3302      	adds	r3, #2
 8017cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			ins.w[loop_start + 1] = ins.w[2];
 8017cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cba:	3301      	adds	r3, #1
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	440b      	add	r3, r1
 8017cc0:	6892      	ldr	r2, [r2, #8]
 8017cc2:	601a      	str	r2, [r3, #0]
 8017cc4:	e006      	b.n	8017cd4 <mixer_process_rx_data+0xa40>
			ins.w[loop_start] = ins.w[2];
 8017cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	440b      	add	r3, r1
 8017cd0:	6892      	ldr	r2, [r2, #8]
 8017cd2:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 8017cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017cda:	3b03      	subs	r3, #3
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	005b      	lsls	r3, r3, #1
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ce4:	3208      	adds	r2, #8
 8017ce6:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8017cea:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8017cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017cf8:	3b16      	subs	r3, #22
 8017cfa:	b29b      	uxth	r3, r3
 8017cfc:	005b      	lsls	r3, r3, #1
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8017d04:	4013      	ands	r3, r2
 8017d06:	b299      	uxth	r1, r3
 8017d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0a:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8017d0e:	4b48      	ldr	r3, [pc, #288]	; (8017e30 <mixer_process_rx_data+0xb9c>)
 8017d10:	430b      	orrs	r3, r1
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017d16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017d1a:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8017d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017d24:	f00d f960 	bl	8024fe8 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 8017d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2a:	2b07      	cmp	r3, #7
 8017d2c:	dc20      	bgt.n	8017d70 <mixer_process_rx_data+0xadc>
		if (num_src & 1)
 8017d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d30:	f003 0301 	and.w	r3, r3, #1
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d007      	beq.n	8017d48 <mixer_process_rx_data+0xab4>
			ins.w[loop_start + 1] = 0x0104ea81;
 8017d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3c:	3301      	adds	r3, #1
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	4413      	add	r3, r2
 8017d42:	4a3c      	ldr	r2, [pc, #240]	; (8017e34 <mixer_process_rx_data+0xba0>)
 8017d44:	601a      	str	r2, [r3, #0]
 8017d46:	e005      	b.n	8017d54 <mixer_process_rx_data+0xac0>
			ins.w[loop_start] = 0x0103ea81;
 8017d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4c:	009b      	lsls	r3, r3, #2
 8017d4e:	4413      	add	r3, r2
 8017d50:	4a39      	ldr	r2, [pc, #228]	; (8017e38 <mixer_process_rx_data+0xba4>)
 8017d52:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	3308      	adds	r3, #8
 8017d58:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8017d5c:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	3356      	adds	r3, #86	; 0x56
 8017d62:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 8017d66:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017d68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017d6c:	f3bf 8f6f 	isb	sy

					// yield after each block to keep thread-level response time small (enough)
					PT_YIELD(pt);
 8017d70:	2300      	movs	r3, #0
 8017d72:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017d76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017d7a:	f240 6267 	movw	r2, #1639	; 0x667
 8017d7e:	801a      	strh	r2, [r3, #0]
 8017d80:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d102      	bne.n	8017d8e <mixer_process_rx_data+0xafa>
 8017d88:	bf00      	nop
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	e04a      	b.n	8017e24 <mixer_process_rx_data+0xb90>

					pp_used = 0;
 8017d8e:	2300      	movs	r3, #0
 8017d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                }

				PROFILE("mixer_process_rx_data() matrix iteration end");
 8017d94:	bf00      	nop
				PROFILE("mixer_process_rx_data() matrix iteration begin");
 8017d96:	f7ff bba7 	b.w	80174e8 <mixer_process_rx_data+0x254>
				goto continue_;
 8017d9a:	bf00      	nop
 8017d9c:	e000      	b.n	8017da0 <mixer_process_rx_data+0xb0c>
					break;
 8017d9e:	bf00      	nop
			}

			continue_:

			mx.rx_queue_num_read++;
 8017da0:	4b26      	ldr	r3, [pc, #152]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017da4:	3301      	adds	r3, #1
 8017da6:	4a25      	ldr	r2, [pc, #148]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017da8:	63d3      	str	r3, [r2, #60]	; 0x3c

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_queue_processed++;
 8017daa:	4b24      	ldr	r3, [pc, #144]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017dac:	f8b3 3898 	ldrh.w	r3, [r3, #2200]	; 0x898
 8017db0:	3301      	adds	r3, #1
 8017db2:	b29a      	uxth	r2, r3
 8017db4:	4b21      	ldr	r3, [pc, #132]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017db6:	f8a3 2898 	strh.w	r2, [r3, #2200]	; 0x898
			#endif

			PROFILE("mixer_process_rx_data() end");
 8017dba:	bf00      	nop
			PT_YIELD(pt);
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017dc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017dc6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017dca:	801a      	strh	r2, [r3, #0]
 8017dcc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d102      	bne.n	8017dda <mixer_process_rx_data+0xb46>
 8017dd4:	bf00      	nop
 8017dd6:	2301      	movs	r3, #1
 8017dd8:	e024      	b.n	8017e24 <mixer_process_rx_data+0xb90>
		while (mx.rx_queue_num_read != mx.rx_queue_num_written)
 8017dda:	4b18      	ldr	r3, [pc, #96]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017dde:	4b17      	ldr	r3, [pc, #92]	; (8017e3c <mixer_process_rx_data+0xba8>)
 8017de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017de2:	429a      	cmp	r2, r3
 8017de4:	f47f aab6 	bne.w	8017354 <mixer_process_rx_data+0xc0>
		PT_WAIT_UNTIL(pt, mx.events & BV(RX_READY));
 8017de8:	f7ff ba9a 	b.w	8017320 <mixer_process_rx_data+0x8c>
		}
	}
	else
	{
		printf("rx\n");
 8017dec:	4814      	ldr	r0, [pc, #80]	; (8017e40 <mixer_process_rx_data+0xbac>)
 8017dee:	f00a fa61 	bl	80222b4 <puts>
		PT_YIELD(pt);
 8017df2:	2300      	movs	r3, #0
 8017df4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017dfc:	f240 627e 	movw	r2, #1662	; 0x67e
 8017e00:	801a      	strh	r2, [r3, #0]
 8017e02:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	f47f aa8a 	bne.w	8017320 <mixer_process_rx_data+0x8c>
 8017e0c:	bf00      	nop
 8017e0e:	2301      	movs	r3, #1
 8017e10:	e008      	b.n	8017e24 <mixer_process_rx_data+0xb90>
	}
	}
	PT_END(pt);
 8017e12:	2300      	movs	r3, #0
 8017e14:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	801a      	strh	r2, [r3, #0]
 8017e20:	bf00      	nop
 8017e22:	2303      	movs	r3, #3
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	37e4      	adds	r7, #228	; 0xe4
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd90      	pop	{r4, r7, pc}
 8017e2c:	20000005 	.word	0x20000005
 8017e30:	ffffa800 	.word	0xffffa800
 8017e34:	0104ea81 	.word	0x0104ea81
 8017e38:	0103ea81 	.word	0x0103ea81
 8017e3c:	200014f0 	.word	0x200014f0
 8017e40:	08025830 	.word	0x08025830

08017e44 <mixer_decode>:

//**************************************************************************************************

PT_THREAD(mixer_decode(Pt_Context *pt))
{
 8017e44:	b590      	push	{r4, r7, lr}
 8017e46:	b0a7      	sub	sp, #156	; 0x9c
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
	PT_BEGIN(pt);
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	881b      	ldrh	r3, [r3, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d005      	beq.n	8017e66 <mixer_decode+0x22>
 8017e5a:	f240 7215 	movw	r2, #1813	; 0x715
 8017e5e:	4293      	cmp	r3, r2
 8017e60:	f000 82e4 	beq.w	801842c <mixer_decode+0x5e8>
 8017e64:	e2fa      	b.n	801845c <mixer_decode+0x618>
 8017e66:	bf00      	nop

	static int_fast16_t		i;

	GPI_TRACE_MSG_FAST(TRACE_INFO, "start decoding...");
 8017e68:	bf00      	nop
	PROFILE("mixer_decode() entry");
 8017e6a:	bf00      	nop

	for (i = chirp_config.mx_generation_size; i-- > 0;)
 8017e6c:	4bac      	ldr	r3, [pc, #688]	; (8018120 <mixer_decode+0x2dc>)
 8017e6e:	885b      	ldrh	r3, [r3, #2]
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	461a      	mov	r2, r3
 8017e74:	4bab      	ldr	r3, [pc, #684]	; (8018124 <mixer_decode+0x2e0>)
 8017e76:	601a      	str	r2, [r3, #0]
 8017e78:	e2df      	b.n	801843a <mixer_decode+0x5f6>
	{
		const unsigned int	SZB = sizeof(uint_fast_t) * 8;
 8017e7a:	2320      	movs	r3, #32
 8017e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		uint_fast_t			k, m, *pcv;

		// check if row is empty
		// ATTENTION: this is needed if decode() called before reaching full rank
		// (e.g. at end of round)
		if (UINT16_MAX == mx.matrix[i]->birth_slot)
 8017e80:	4ba8      	ldr	r3, [pc, #672]	; (8018124 <mixer_decode+0x2e0>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4aa8      	ldr	r2, [pc, #672]	; (8018128 <mixer_decode+0x2e4>)
 8017e86:	3316      	adds	r3, #22
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	4413      	add	r3, r2
 8017e8c:	685b      	ldr	r3, [r3, #4]
 8017e8e:	881b      	ldrh	r3, [r3, #0]
 8017e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e94:	4293      	cmp	r3, r2
 8017e96:	d100      	bne.n	8017e9a <mixer_decode+0x56>
 8017e98:	e2cf      	b.n	801843a <mixer_decode+0x5f6>
		{
			continue;
		}

		PROFILE("mixer_decode() row begin");
 8017e9a:	bf00      	nop
		// inconsistent while solving. The same holds for s_request.help_index.
		// ATTENTION: we have to redo this check after every yield
		// NOTE: there is no problem if s_tx_reserve points into the matrix
		// because it is not used on ISR level
		{
			uint8_t	*p = &(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]);
 8017e9c:	4ba1      	ldr	r3, [pc, #644]	; (8018124 <mixer_decode+0x2e0>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	4aa1      	ldr	r2, [pc, #644]	; (8018128 <mixer_decode+0x2e4>)
 8017ea2:	3316      	adds	r3, #22
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	4a9d      	ldr	r2, [pc, #628]	; (8018120 <mixer_decode+0x2dc>)
 8017eac:	7e12      	ldrb	r2, [r2, #24]
 8017eae:	4413      	add	r3, r2
 8017eb0:	3304      	adds	r3, #4
 8017eb2:	67fb      	str	r3, [r7, #124]	; 0x7c

			COMPUTE_BARRIER(p);
 8017eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
	__ASM volatile
 8017eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8017eba:	b672      	cpsid	i
 8017ebc:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017ebe:	f3bf 8f5f 	dmb	sy
	return ie;
 8017ec2:	4623      	mov	r3, r4

			int ie = gpi_int_lock();
 8017ec4:	67bb      	str	r3, [r7, #120]	; 0x78

			if (mx.tx_sideload == p)
 8017ec6:	4b98      	ldr	r3, [pc, #608]	; (8018128 <mixer_decode+0x2e4>)
 8017ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017eca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d102      	bne.n	8017ed6 <mixer_decode+0x92>
			{
				mx.tx_sideload = NULL;
 8017ed0:	4b95      	ldr	r3, [pc, #596]	; (8018128 <mixer_decode+0x2e4>)
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	645a      	str	r2, [r3, #68]	; 0x44
 8017ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8017eda:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ee4:	f383 8810 	msr	PRIMASK, r3
	__ASM volatile
 8017ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8017eec:	b672      	cpsid	i
 8017eee:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017ef0:	f3bf 8f5f 	dmb	sy
	return ie;
 8017ef4:	4623      	mov	r3, r4
			}

			gpi_int_unlock(ie);

			#if MX_REQUEST
				ie = gpi_int_lock();
 8017ef6:	67bb      	str	r3, [r7, #120]	; 0x78

				if (ABS(mx.request->help_index) - 1 == i)
 8017ef8:	4b8b      	ldr	r3, [pc, #556]	; (8018128 <mixer_decode+0x2e4>)
 8017efa:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017efe:	895b      	ldrh	r3, [r3, #10]
 8017f00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8017f04:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	bfb8      	it	lt
 8017f0c:	425b      	neglt	r3, r3
 8017f0e:	1e5a      	subs	r2, r3, #1
 8017f10:	4b84      	ldr	r3, [pc, #528]	; (8018124 <mixer_decode+0x2e0>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d104      	bne.n	8017f22 <mixer_decode+0xde>
					mx.request->help_index = 0;
 8017f18:	4b83      	ldr	r3, [pc, #524]	; (8018128 <mixer_decode+0x2e4>)
 8017f1a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017f1e:	2200      	movs	r2, #0
 8017f20:	815a      	strh	r2, [r3, #10]
 8017f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8017f26:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017f2c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f30:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
			#endif
		}

		pp_used = 0;
 8017f34:	2300      	movs	r3, #0
 8017f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		k = i + 1;
 8017f3a:	4b7a      	ldr	r3, [pc, #488]	; (8018124 <mixer_decode+0x2e0>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	3301      	adds	r3, #1
 8017f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		pcv = &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + k / SZB]);
 8017f44:	4b77      	ldr	r3, [pc, #476]	; (8018124 <mixer_decode+0x2e0>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	4a77      	ldr	r2, [pc, #476]	; (8018128 <mixer_decode+0x2e4>)
 8017f4a:	3316      	adds	r3, #22
 8017f4c:	009b      	lsls	r3, r3, #2
 8017f4e:	4413      	add	r3, r2
 8017f50:	685a      	ldr	r2, [r3, #4]
 8017f52:	4b73      	ldr	r3, [pc, #460]	; (8018120 <mixer_decode+0x2dc>)
 8017f54:	7f1b      	ldrb	r3, [r3, #28]
 8017f56:	4618      	mov	r0, r3
 8017f58:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8017f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8017f64:	4403      	add	r3, r0
 8017f66:	009b      	lsls	r3, r3, #2
 8017f68:	4413      	add	r3, r2
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		m = *pcv++ & ((-1 << (SZB - 1)) >> ((SZB - 1) - (k % SZB)));
 8017f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017f74:	1d1a      	adds	r2, r3, #4
 8017f76:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017f80:	3b01      	subs	r3, #1
 8017f82:	f04f 31ff 	mov.w	r1, #4294967295
 8017f86:	4099      	lsls	r1, r3
 8017f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f8c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8017f90:	fbb3 f0f0 	udiv	r0, r3, r0
 8017f94:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8017f98:	fb04 f000 	mul.w	r0, r4, r0
 8017f9c:	1a1b      	subs	r3, r3, r0
 8017f9e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8017fa2:	1ac3      	subs	r3, r0, r3
 8017fa4:	3b01      	subs	r3, #1
 8017fa6:	fa41 f303 	asr.w	r3, r1, r3
 8017faa:	4013      	ands	r3, r2
 8017fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		k &= ~(SZB - 1);
 8017fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017fb4:	425b      	negs	r3, r3
 8017fb6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017fba:	4013      	ands	r3, r2
 8017fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		while (k < chirp_config.mx_generation_size)
 8017fc0:	e13e      	b.n	8018240 <mixer_decode+0x3fc>
		{
			if (!m)
 8017fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d10f      	bne.n	8017fea <mixer_decode+0x1a6>
			{
				m = *pcv++;
 8017fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017fce:	1d1a      	adds	r2, r3, #4
 8017fd0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				k += SZB;
 8017fda:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8017fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017fe2:	4413      	add	r3, r2
 8017fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				continue;
 8017fe8:	e12a      	b.n	8018240 <mixer_decode+0x3fc>
 8017fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017fee:	663b      	str	r3, [r7, #96]	; 0x60
 8017ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
		asm
 8017ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	bf0e      	itee	eq
 8017ffa:	3b01      	subeq	r3, #1
 8017ffc:	fa93 f3a3 	rbitne	r3, r3
 8018000:	fab3 f383 	clzne	r3, r3
 8018004:	461c      	mov	r4, r3
	return y;
 8018006:	4623      	mov	r3, r4
				// point behind the coding vector. This is not critical because
				// we don't use this value (hence we don't catch it in favor of
				// performance), but in the strict sense this is an access violation.
			}

			k += gpi_get_lsb(m);
 8018008:	461a      	mov	r2, r3
 801800a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801800e:	4413      	add	r3, r2
 8018010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			if (k >= chirp_config.mx_generation_size)
 8018014:	4b42      	ldr	r3, [pc, #264]	; (8018120 <mixer_decode+0x2dc>)
 8018016:	885b      	ldrh	r3, [r3, #2]
 8018018:	b29b      	uxth	r3, r3
 801801a:	461a      	mov	r2, r3
 801801c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018020:	4293      	cmp	r3, r2
 8018022:	f080 8117 	bcs.w	8018254 <mixer_decode+0x410>
			}

			// check if row to substitute is empty
			// ATTENTION: this is needed if decode() called before reaching full rank
			// (e.g. at end of round)
			if (UINT16_MAX != mx.matrix[k]->birth_slot)
 8018026:	4a40      	ldr	r2, [pc, #256]	; (8018128 <mixer_decode+0x2e4>)
 8018028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801802c:	3316      	adds	r3, #22
 801802e:	009b      	lsls	r3, r3, #2
 8018030:	4413      	add	r3, r2
 8018032:	685b      	ldr	r3, [r3, #4]
 8018034:	881b      	ldrh	r3, [r3, #0]
 8018036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801803a:	4293      	cmp	r3, r2
 801803c:	f000 80f0 	beq.w	8018220 <mixer_decode+0x3dc>
			{
				pp[pp_used++] = &(mx.matrix[k]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]);
 8018040:	4a39      	ldr	r2, [pc, #228]	; (8018128 <mixer_decode+0x2e4>)
 8018042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018046:	3316      	adds	r3, #22
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	4413      	add	r3, r2
 801804c:	6859      	ldr	r1, [r3, #4]
 801804e:	4b34      	ldr	r3, [pc, #208]	; (8018120 <mixer_decode+0x2dc>)
 8018050:	7f1b      	ldrb	r3, [r3, #28]
 8018052:	4618      	mov	r0, r3
 8018054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018058:	1c5a      	adds	r2, r3, #1
 801805a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801805e:	0082      	lsls	r2, r0, #2
 8018060:	440a      	add	r2, r1
 8018062:	3204      	adds	r2, #4
 8018064:	009b      	lsls	r3, r3, #2
 8018066:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801806a:	440b      	add	r3, r1
 801806c:	f843 2c8c 	str.w	r2, [r3, #-140]

				if (NUM_ELEMENTS(pp) == pp_used)
 8018070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018074:	2b08      	cmp	r3, #8
 8018076:	f040 80d3 	bne.w	8018220 <mixer_decode+0x3dc>
				{
					assert_reset((chirp_config.matrix_payload.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len));
 801807a:	4b29      	ldr	r3, [pc, #164]	; (8018120 <mixer_decode+0x2dc>)
 801807c:	7f9b      	ldrb	r3, [r3, #30]
 801807e:	461a      	mov	r2, r3
 8018080:	4b27      	ldr	r3, [pc, #156]	; (8018120 <mixer_decode+0x2dc>)
 8018082:	7f1b      	ldrb	r3, [r3, #28]
 8018084:	4619      	mov	r1, r3
 8018086:	4b26      	ldr	r3, [pc, #152]	; (8018120 <mixer_decode+0x2dc>)
 8018088:	7f5b      	ldrb	r3, [r3, #29]
 801808a:	440b      	add	r3, r1
 801808c:	429a      	cmp	r2, r3
 801808e:	d00d      	beq.n	80180ac <mixer_decode+0x268>
 8018090:	4b23      	ldr	r3, [pc, #140]	; (8018120 <mixer_decode+0x2dc>)
 8018092:	7f9b      	ldrb	r3, [r3, #30]
 8018094:	461a      	mov	r2, r3
 8018096:	4b22      	ldr	r3, [pc, #136]	; (8018120 <mixer_decode+0x2dc>)
 8018098:	7f1b      	ldrb	r3, [r3, #28]
 801809a:	4619      	mov	r1, r3
 801809c:	4b20      	ldr	r3, [pc, #128]	; (8018120 <mixer_decode+0x2dc>)
 801809e:	7f5b      	ldrb	r3, [r3, #29]
 80180a0:	440b      	add	r3, r1
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d002      	beq.n	80180ac <mixer_decode+0x268>
  __ASM volatile ("cpsid f" : : : "memory");
 80180a6:	b671      	cpsid	f
 80180a8:	f7fd feae 	bl	8015e08 <NVIC_SystemReset>

					PROFILE("mixer_decode() row memxor_block(full) begin");
 80180ac:	bf00      	nop

					// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit better
					// code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
					memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 80180ae:	4b1d      	ldr	r3, [pc, #116]	; (8018124 <mixer_decode+0x2e0>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	4a1d      	ldr	r2, [pc, #116]	; (8018128 <mixer_decode+0x2e4>)
 80180b4:	3316      	adds	r3, #22
 80180b6:	009b      	lsls	r3, r3, #2
 80180b8:	4413      	add	r3, r2
 80180ba:	685a      	ldr	r2, [r3, #4]
 80180bc:	4b18      	ldr	r3, [pc, #96]	; (8018120 <mixer_decode+0x2dc>)
 80180be:	7f1b      	ldrb	r3, [r3, #28]
 80180c0:	009b      	lsls	r3, r3, #2
 80180c2:	4413      	add	r3, r2
 80180c4:	1d1a      	adds	r2, r3, #4
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t), NUM_ELEMENTS(pp));
 80180c6:	4b16      	ldr	r3, [pc, #88]	; (8018120 <mixer_decode+0x2dc>)
 80180c8:	7f5b      	ldrb	r3, [r3, #29]
 80180ca:	4619      	mov	r1, r3
 80180cc:	4b14      	ldr	r3, [pc, #80]	; (8018120 <mixer_decode+0x2dc>)
 80180ce:	7fdb      	ldrb	r3, [r3, #31]
 80180d0:	440b      	add	r3, r1
					memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 80180d2:	009b      	lsls	r3, r3, #2
 80180d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80180d6:	f107 020c 	add.w	r2, r7, #12
 80180da:	657a      	str	r2, [r7, #84]	; 0x54
 80180dc:	653b      	str	r3, [r7, #80]	; 0x50
 80180de:	2308      	movs	r3, #8
 80180e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 80180e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180e4:	2b08      	cmp	r3, #8
 80180e6:	dd05      	ble.n	80180f4 <mixer_decode+0x2b0>
 80180e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180ea:	2b08      	cmp	r3, #8
 80180ec:	dd02      	ble.n	80180f4 <mixer_decode+0x2b0>
 80180ee:	b671      	cpsid	f
 80180f0:	f7fd fe8a 	bl	8015e08 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 80180f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	f000 808e 	beq.w	8018218 <mixer_decode+0x3d4>
 80180fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180fe:	2b00      	cmp	r3, #0
 8018100:	f000 808a 	beq.w	8018218 <mixer_decode+0x3d4>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8018104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018106:	2b08      	cmp	r3, #8
 8018108:	d810      	bhi.n	801812c <mixer_decode+0x2e8>
 801810a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801810c:	2b07      	cmp	r3, #7
 801810e:	dc0d      	bgt.n	801812c <mixer_decode+0x2e8>
		memxor_block_straight(dest, src, size, num_src);
 8018110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018116:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018118:	f7f6 f890 	bl	800e23c <memxor_block_straight>
 801811c:	e07c      	b.n	8018218 <mixer_decode+0x3d4>
 801811e:	bf00      	nop
 8018120:	20001430 	.word	0x20001430
 8018124:	20000484 	.word	0x20000484
 8018128:	200014f0 	.word	0x200014f0
	if (num_src < MEMXOR_BLOCKSIZE)
 801812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801812e:	2b07      	cmp	r3, #7
 8018130:	dc49      	bgt.n	80181c6 <mixer_decode+0x382>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8018132:	4ba9      	ldr	r3, [pc, #676]	; (80183d8 <mixer_decode+0x594>)
 8018134:	f023 0301 	bic.w	r3, r3, #1
 8018138:	62fb      	str	r3, [r7, #44]	; 0x2c
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 801813a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801813c:	3301      	adds	r3, #1
 801813e:	0fda      	lsrs	r2, r3, #31
 8018140:	4413      	add	r3, r2
 8018142:	105b      	asrs	r3, r3, #1
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	f1c3 0312 	rsb	r3, r3, #18
 801814a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (num_src & 1)
 801814c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801814e:	f003 0301 	and.w	r3, r3, #1
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00b      	beq.n	801816e <mixer_decode+0x32a>
			loop_start += 2;
 8018156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018158:	3302      	adds	r3, #2
 801815a:	64bb      	str	r3, [r7, #72]	; 0x48
			ins.w[loop_start + 1] = ins.w[2];
 801815c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801815e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018162:	3301      	adds	r3, #1
 8018164:	009b      	lsls	r3, r3, #2
 8018166:	440b      	add	r3, r1
 8018168:	6892      	ldr	r2, [r2, #8]
 801816a:	601a      	str	r2, [r3, #0]
 801816c:	e006      	b.n	801817c <mixer_decode+0x338>
			ins.w[loop_start] = ins.w[2];
 801816e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	440b      	add	r3, r1
 8018178:	6892      	ldr	r2, [r2, #8]
 801817a:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 801817c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801817e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018182:	3b03      	subs	r3, #3
 8018184:	b29b      	uxth	r3, r3
 8018186:	005b      	lsls	r3, r3, #1
 8018188:	b29b      	uxth	r3, r3
 801818a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801818c:	3208      	adds	r2, #8
 801818e:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8018192:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8018196:	b29b      	uxth	r3, r3
 8018198:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 801819a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801819c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80181a0:	3b16      	subs	r3, #22
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	005b      	lsls	r3, r3, #1
 80181a6:	b29a      	uxth	r2, r3
 80181a8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80181ac:	4013      	ands	r3, r2
 80181ae:	b299      	uxth	r1, r3
 80181b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b2:	f103 0256 	add.w	r2, r3, #86	; 0x56
 80181b6:	4b89      	ldr	r3, [pc, #548]	; (80183dc <mixer_decode+0x598>)
 80181b8:	430b      	orrs	r3, r1
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80181be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80181c2:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 80181c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80181ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80181cc:	f00c ff0c 	bl	8024fe8 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 80181d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80181d2:	2b07      	cmp	r3, #7
 80181d4:	dc20      	bgt.n	8018218 <mixer_decode+0x3d4>
		if (num_src & 1)
 80181d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80181d8:	f003 0301 	and.w	r3, r3, #1
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d007      	beq.n	80181f0 <mixer_decode+0x3ac>
			ins.w[loop_start + 1] = 0x0104ea81;
 80181e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181e4:	3301      	adds	r3, #1
 80181e6:	009b      	lsls	r3, r3, #2
 80181e8:	4413      	add	r3, r2
 80181ea:	4a7d      	ldr	r2, [pc, #500]	; (80183e0 <mixer_decode+0x59c>)
 80181ec:	601a      	str	r2, [r3, #0]
 80181ee:	e005      	b.n	80181fc <mixer_decode+0x3b8>
			ins.w[loop_start] = 0x0103ea81;
 80181f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181f4:	009b      	lsls	r3, r3, #2
 80181f6:	4413      	add	r3, r2
 80181f8:	4a7a      	ldr	r2, [pc, #488]	; (80183e4 <mixer_decode+0x5a0>)
 80181fa:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 80181fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fe:	3308      	adds	r3, #8
 8018200:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8018204:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8018206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018208:	3356      	adds	r3, #86	; 0x56
 801820a:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801820e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8018210:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018214:	f3bf 8f6f 	isb	sy
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#endif

					pp_used = 0;
 8018218:	2300      	movs	r3, #0
 801821a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

					PROFILE("mixer_decode() row memxor_block(full) end");
 801821e:	bf00      	nop
				}
			}

			k &= ~(SZB - 1);
 8018220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018224:	425b      	negs	r3, r3
 8018226:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801822a:	4013      	ands	r3, r2
 801822c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			m &= m - 1;
 8018230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018234:	3b01      	subs	r3, #1
 8018236:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801823a:	4013      	ands	r3, r2
 801823c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		while (k < chirp_config.mx_generation_size)
 8018240:	4b69      	ldr	r3, [pc, #420]	; (80183e8 <mixer_decode+0x5a4>)
 8018242:	885b      	ldrh	r3, [r3, #2]
 8018244:	b29b      	uxth	r3, r3
 8018246:	461a      	mov	r2, r3
 8018248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801824c:	4293      	cmp	r3, r2
 801824e:	f4ff aeb8 	bcc.w	8017fc2 <mixer_decode+0x17e>
 8018252:	e000      	b.n	8018256 <mixer_decode+0x412>
				break;
 8018254:	bf00      	nop
		}

		if (pp_used)
 8018256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801825a:	2b00      	cmp	r3, #0
 801825c:	f000 80de 	beq.w	801841c <mixer_decode+0x5d8>
		{
			assert_reset(chirp_config.matrix_payload.pos = chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len);
 8018260:	4b61      	ldr	r3, [pc, #388]	; (80183e8 <mixer_decode+0x5a4>)
 8018262:	7f1a      	ldrb	r2, [r3, #28]
 8018264:	4b60      	ldr	r3, [pc, #384]	; (80183e8 <mixer_decode+0x5a4>)
 8018266:	7f5b      	ldrb	r3, [r3, #29]
 8018268:	4413      	add	r3, r2
 801826a:	b2da      	uxtb	r2, r3
 801826c:	4b5e      	ldr	r3, [pc, #376]	; (80183e8 <mixer_decode+0x5a4>)
 801826e:	779a      	strb	r2, [r3, #30]
 8018270:	4b5d      	ldr	r3, [pc, #372]	; (80183e8 <mixer_decode+0x5a4>)
 8018272:	7f9b      	ldrb	r3, [r3, #30]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d114      	bne.n	80182a2 <mixer_decode+0x45e>
 8018278:	4b5b      	ldr	r3, [pc, #364]	; (80183e8 <mixer_decode+0x5a4>)
 801827a:	7f1b      	ldrb	r3, [r3, #28]
 801827c:	461a      	mov	r2, r3
 801827e:	4b5a      	ldr	r3, [pc, #360]	; (80183e8 <mixer_decode+0x5a4>)
 8018280:	7f5b      	ldrb	r3, [r3, #29]
 8018282:	4413      	add	r3, r2
 8018284:	2b00      	cmp	r3, #0
 8018286:	bf0c      	ite	eq
 8018288:	2301      	moveq	r3, #1
 801828a:	2300      	movne	r3, #0
 801828c:	b2db      	uxtb	r3, r3
 801828e:	461a      	mov	r2, r3
 8018290:	4b55      	ldr	r3, [pc, #340]	; (80183e8 <mixer_decode+0x5a4>)
 8018292:	779a      	strb	r2, [r3, #30]
 8018294:	4b54      	ldr	r3, [pc, #336]	; (80183e8 <mixer_decode+0x5a4>)
 8018296:	7f9b      	ldrb	r3, [r3, #30]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d002      	beq.n	80182a2 <mixer_decode+0x45e>
  __ASM volatile ("cpsid f" : : : "memory");
 801829c:	b671      	cpsid	f
 801829e:	f7fd fdb3 	bl	8015e08 <NVIC_SystemReset>

			memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 80182a2:	4b52      	ldr	r3, [pc, #328]	; (80183ec <mixer_decode+0x5a8>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a52      	ldr	r2, [pc, #328]	; (80183f0 <mixer_decode+0x5ac>)
 80182a8:	3316      	adds	r3, #22
 80182aa:	009b      	lsls	r3, r3, #2
 80182ac:	4413      	add	r3, r2
 80182ae:	685a      	ldr	r2, [r3, #4]
 80182b0:	4b4d      	ldr	r3, [pc, #308]	; (80183e8 <mixer_decode+0x5a4>)
 80182b2:	7f1b      	ldrb	r3, [r3, #28]
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	4413      	add	r3, r2
 80182b8:	1d19      	adds	r1, r3, #4
				(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t), pp_used);
 80182ba:	4b4b      	ldr	r3, [pc, #300]	; (80183e8 <mixer_decode+0x5a4>)
 80182bc:	7f5b      	ldrb	r3, [r3, #29]
 80182be:	461a      	mov	r2, r3
 80182c0:	4b49      	ldr	r3, [pc, #292]	; (80183e8 <mixer_decode+0x5a4>)
 80182c2:	7fdb      	ldrb	r3, [r3, #31]
 80182c4:	4413      	add	r3, r2
			memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 80182c6:	009a      	lsls	r2, r3, #2
 80182c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80182cc:	6479      	str	r1, [r7, #68]	; 0x44
 80182ce:	f107 010c 	add.w	r1, r7, #12
 80182d2:	6439      	str	r1, [r7, #64]	; 0x40
 80182d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80182d6:	63bb      	str	r3, [r7, #56]	; 0x38
	assert_reset((num_src <= MEMXOR_BLOCKSIZE));
 80182d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182da:	2b08      	cmp	r3, #8
 80182dc:	dd05      	ble.n	80182ea <mixer_decode+0x4a6>
 80182de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e0:	2b08      	cmp	r3, #8
 80182e2:	dd02      	ble.n	80182ea <mixer_decode+0x4a6>
 80182e4:	b671      	cpsid	f
 80182e6:	f7fd fd8f 	bl	8015e08 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 80182ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	f000 8095 	beq.w	801841c <mixer_decode+0x5d8>
 80182f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	f000 8091 	beq.w	801841c <mixer_decode+0x5d8>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 80182fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182fc:	2b08      	cmp	r3, #8
 80182fe:	d809      	bhi.n	8018314 <mixer_decode+0x4d0>
 8018300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018302:	2b07      	cmp	r3, #7
 8018304:	dc06      	bgt.n	8018314 <mixer_decode+0x4d0>
		memxor_block_straight(dest, src, size, num_src);
 8018306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801830a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801830c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801830e:	f7f5 ff95 	bl	800e23c <memxor_block_straight>
					#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
				#endif
			#endif
		}

		PROFILE("mixer_decode() row end");
 8018312:	e083      	b.n	801841c <mixer_decode+0x5d8>
	if (num_src < MEMXOR_BLOCKSIZE)
 8018314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018316:	2b07      	cmp	r3, #7
 8018318:	dc49      	bgt.n	80183ae <mixer_decode+0x56a>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 801831a:	4b2f      	ldr	r3, [pc, #188]	; (80183d8 <mixer_decode+0x594>)
 801831c:	f023 0301 	bic.w	r3, r3, #1
 8018320:	633b      	str	r3, [r7, #48]	; 0x30
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8018322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018324:	3301      	adds	r3, #1
 8018326:	0fda      	lsrs	r2, r3, #31
 8018328:	4413      	add	r3, r2
 801832a:	105b      	asrs	r3, r3, #1
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	f1c3 0312 	rsb	r3, r3, #18
 8018332:	637b      	str	r3, [r7, #52]	; 0x34
		if (num_src & 1)
 8018334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018336:	f003 0301 	and.w	r3, r3, #1
 801833a:	2b00      	cmp	r3, #0
 801833c:	d00b      	beq.n	8018356 <mixer_decode+0x512>
			loop_start += 2;
 801833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018340:	3302      	adds	r3, #2
 8018342:	637b      	str	r3, [r7, #52]	; 0x34
			ins.w[loop_start + 1] = ins.w[2];
 8018344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801834a:	3301      	adds	r3, #1
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	440b      	add	r3, r1
 8018350:	6892      	ldr	r2, [r2, #8]
 8018352:	601a      	str	r2, [r3, #0]
 8018354:	e006      	b.n	8018364 <mixer_decode+0x520>
			ins.w[loop_start] = ins.w[2];
 8018356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801835a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801835c:	009b      	lsls	r3, r3, #2
 801835e:	440b      	add	r3, r1
 8018360:	6892      	ldr	r2, [r2, #8]
 8018362:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 8018364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018366:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801836a:	3b03      	subs	r3, #3
 801836c:	b29b      	uxth	r3, r3
 801836e:	005b      	lsls	r3, r3, #1
 8018370:	b29b      	uxth	r3, r3
 8018372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018374:	3208      	adds	r2, #8
 8018376:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 801837a:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 801837e:	b29b      	uxth	r3, r3
 8018380:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8018382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018384:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018388:	3b16      	subs	r3, #22
 801838a:	b29b      	uxth	r3, r3
 801838c:	005b      	lsls	r3, r3, #1
 801838e:	b29a      	uxth	r2, r3
 8018390:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8018394:	4013      	ands	r3, r2
 8018396:	b299      	uxth	r1, r3
 8018398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839a:	f103 0256 	add.w	r2, r3, #86	; 0x56
 801839e:	4b0f      	ldr	r3, [pc, #60]	; (80183dc <mixer_decode+0x598>)
 80183a0:	430b      	orrs	r3, r1
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80183a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80183aa:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 80183ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80183b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80183b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80183b4:	f00c fe18 	bl	8024fe8 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 80183b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ba:	2b07      	cmp	r3, #7
 80183bc:	dc2e      	bgt.n	801841c <mixer_decode+0x5d8>
		if (num_src & 1)
 80183be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c0:	f003 0301 	and.w	r3, r3, #1
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d015      	beq.n	80183f4 <mixer_decode+0x5b0>
			ins.w[loop_start + 1] = 0x0104ea81;
 80183c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183cc:	3301      	adds	r3, #1
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	4413      	add	r3, r2
 80183d2:	4a03      	ldr	r2, [pc, #12]	; (80183e0 <mixer_decode+0x59c>)
 80183d4:	601a      	str	r2, [r3, #0]
 80183d6:	e013      	b.n	8018400 <mixer_decode+0x5bc>
 80183d8:	20000005 	.word	0x20000005
 80183dc:	ffffa800 	.word	0xffffa800
 80183e0:	0104ea81 	.word	0x0104ea81
 80183e4:	0103ea81 	.word	0x0103ea81
 80183e8:	20001430 	.word	0x20001430
 80183ec:	20000484 	.word	0x20000484
 80183f0:	200014f0 	.word	0x200014f0
			ins.w[loop_start] = 0x0103ea81;
 80183f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f8:	009b      	lsls	r3, r3, #2
 80183fa:	4413      	add	r3, r2
 80183fc:	4a1d      	ldr	r2, [pc, #116]	; (8018474 <mixer_decode+0x630>)
 80183fe:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 8018400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018402:	3308      	adds	r3, #8
 8018404:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8018408:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 801840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840c:	3356      	adds	r3, #86	; 0x56
 801840e:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 8018412:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8018414:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018418:	f3bf 8f6f 	isb	sy
 801841c:	bf00      	nop

		// yield after each row to keep thread-level response time small (enough)
		// ATTENTION: matrix has to be in a consistent state at this point
		PT_YIELD(pt);
 801841e:	2300      	movs	r3, #0
 8018420:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f240 7215 	movw	r2, #1813	; 0x715
 801842a:	801a      	strh	r2, [r3, #0]
 801842c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018430:	2b00      	cmp	r3, #0
 8018432:	d102      	bne.n	801843a <mixer_decode+0x5f6>
 8018434:	bf00      	nop
 8018436:	2301      	movs	r3, #1
 8018438:	e018      	b.n	801846c <mixer_decode+0x628>
	for (i = chirp_config.mx_generation_size; i-- > 0;)
 801843a:	4b0f      	ldr	r3, [pc, #60]	; (8018478 <mixer_decode+0x634>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	1e5a      	subs	r2, r3, #1
 8018440:	490d      	ldr	r1, [pc, #52]	; (8018478 <mixer_decode+0x634>)
 8018442:	600a      	str	r2, [r1, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	f73f ad18 	bgt.w	8017e7a <mixer_decode+0x36>
	}

	#if MX_VERBOSE_STATISTICS
		mx.stat_counter.slot_decoded = mx.slot_number;
 801844a:	4b0c      	ldr	r3, [pc, #48]	; (801847c <mixer_decode+0x638>)
 801844c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8018450:	b29a      	uxth	r2, r3
 8018452:	4b0a      	ldr	r3, [pc, #40]	; (801847c <mixer_decode+0x638>)
 8018454:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
	#endif

	GPI_TRACE_MSG(TRACE_INFO, "decoding done");
 8018458:	bf00      	nop

	TRACE_MATRIX();
 801845a:	bf00      	nop

	PT_END(pt);
 801845c:	2300      	movs	r3, #0
 801845e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	801a      	strh	r2, [r3, #0]
 8018468:	bf00      	nop
 801846a:	2303      	movs	r3, #3
}
 801846c:	4618      	mov	r0, r3
 801846e:	379c      	adds	r7, #156	; 0x9c
 8018470:	46bd      	mov	sp, r7
 8018472:	bd90      	pop	{r4, r7, pc}
 8018474:	0103ea81 	.word	0x0103ea81
 8018478:	20000484 	.word	0x20000484
 801847c:	200014f0 	.word	0x200014f0

08018480 <mixer_maintenance>:

//**************************************************************************************************

PT_THREAD(mixer_maintenance())
{
 8018480:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8018484:	b094      	sub	sp, #80	; 0x50
 8018486:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_maintenance;
 8018488:	4bad      	ldr	r3, [pc, #692]	; (8018740 <mixer_maintenance+0x2c0>)
 801848a:	64fb      	str	r3, [r7, #76]	; 0x4c

	PT_BEGIN(pt);
 801848c:	2301      	movs	r3, #1
 801848e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8018492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018494:	881b      	ldrh	r3, [r3, #0]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d004      	beq.n	80184a4 <mixer_maintenance+0x24>
 801849a:	f240 7234 	movw	r2, #1844	; 0x734
 801849e:	4293      	cmp	r3, r2
 80184a0:	d017      	beq.n	80184d2 <mixer_maintenance+0x52>
 80184a2:	e157      	b.n	8018754 <mixer_maintenance+0x2d4>
 80184a4:	bf00      	nop

	// init variables at thread startup
	// NOTE: approach is useful because thread gets reinitialized (-> PT_INIT) on each mixer round
	// mx.round_deadline = gpi_tick_fast_native() + (GPI_TICK_FAST_MAX / 2);
	mx.round_deadline = gpi_tick_fast_extended() + (GPI_TICK_FAST_MAX / 2);
 80184a6:	f7f3 fad9 	bl	800ba5c <gpi_tick_fast_extended>
 80184aa:	460a      	mov	r2, r1
 80184ac:	4601      	mov	r1, r0
 80184ae:	f111 33ff 	adds.w	r3, r1, #4294967295
 80184b2:	f162 4400 	sbc.w	r4, r2, #2147483648	; 0x80000000
 80184b6:	4aa3      	ldr	r2, [pc, #652]	; (8018744 <mixer_maintenance+0x2c4>)
 80184b8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

	mx.round_deadline_update_slot = UINT16_MAX;
 80184bc:	4ba1      	ldr	r3, [pc, #644]	; (8018744 <mixer_maintenance+0x2c4>)
 80184be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80184c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80184c6:	e000      	b.n	80184ca <mixer_maintenance+0x4a>

	while (1)
	{
 80184c8:	bf00      	nop
		PT_WAIT_UNTIL(pt, mx.events & BV(TRIGGER_TICK));
 80184ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80184cc:	f240 7234 	movw	r2, #1844	; 0x734
 80184d0:	801a      	strh	r2, [r3, #0]
 80184d2:	4b9c      	ldr	r3, [pc, #624]	; (8018744 <mixer_maintenance+0x2c4>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	f003 0308 	and.w	r3, r3, #8
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d102      	bne.n	80184e4 <mixer_maintenance+0x64>
 80184de:	bf00      	nop
 80184e0:	2300      	movs	r3, #0
 80184e2:	e13f      	b.n	8018764 <mixer_maintenance+0x2e4>

		clear_event(TRIGGER_TICK);
 80184e4:	2003      	movs	r0, #3
 80184e6:	f7fd fd7f 	bl	8015fe8 <clear_event>
		gpi_watchdog_periodic();
 80184ea:	f7f5 fe2d 	bl	800e148 <gpi_watchdog_periodic>

		// Gpi_Fast_Tick_Native now = gpi_tick_fast_native();
		Gpi_Fast_Tick_Extended now = gpi_tick_fast_extended();
 80184ee:	f7f3 fab5 	bl	800ba5c <gpi_tick_fast_extended>
 80184f2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

		chirp_config.update_slot++;
 80184f6:	4b94      	ldr	r3, [pc, #592]	; (8018748 <mixer_maintenance+0x2c8>)
 80184f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80184fc:	3301      	adds	r3, #1
 80184fe:	b2da      	uxtb	r2, r3
 8018500:	4b91      	ldr	r3, [pc, #580]	; (8018748 <mixer_maintenance+0x2c8>)
 8018502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        PRINTF_CHIRP("l:%llu\n", (mx.round_deadline - now) / 16000000);
 8018506:	4b8f      	ldr	r3, [pc, #572]	; (8018744 <mixer_maintenance+0x2c4>)
 8018508:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 801850c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018510:	1ac9      	subs	r1, r1, r3
 8018512:	eb62 0204 	sbc.w	r2, r2, r4
 8018516:	4608      	mov	r0, r1
 8018518:	4611      	mov	r1, r2
 801851a:	4a8c      	ldr	r2, [pc, #560]	; (801874c <mixer_maintenance+0x2cc>)
 801851c:	f04f 0300 	mov.w	r3, #0
 8018520:	f7e8 fbbc 	bl	8000c9c <__aeabi_uldivmod>
 8018524:	4603      	mov	r3, r0
 8018526:	460c      	mov	r4, r1
 8018528:	461a      	mov	r2, r3
 801852a:	4623      	mov	r3, r4
 801852c:	4888      	ldr	r0, [pc, #544]	; (8018750 <mixer_maintenance+0x2d0>)
 801852e:	f009 fe39 	bl	80221a4 <iprintf>

		// monitor round length
		// NOTE: we test once per slot, and STOP executes gracefully at the next slot boundary
		// (or both a bit relaxed during RESYNC). Hence, the timing (e.g. when in the slot is
		// "now"?) is not very critical here.
		if (((mx.slot_number >= chirp_config.mx_round_length) || (gpi_tick_compare_fast_extended(now, mx.round_deadline) >= 0)) || ((chirp_config.task == MX_ARRANGE) && (!mx.rank) && (chirp_config.update_slot >= 6)))
 8018532:	4b84      	ldr	r3, [pc, #528]	; (8018744 <mixer_maintenance+0x2c4>)
 8018534:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8018538:	b29a      	uxth	r2, r3
 801853a:	4b83      	ldr	r3, [pc, #524]	; (8018748 <mixer_maintenance+0x2c8>)
 801853c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018540:	b29b      	uxth	r3, r3
 8018542:	429a      	cmp	r2, r3
 8018544:	d235      	bcs.n	80185b2 <mixer_maintenance+0x132>
 8018546:	4b7f      	ldr	r3, [pc, #508]	; (8018744 <mixer_maintenance+0x2c4>)
 8018548:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 801854c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8018550:	e9c7 120e 	strd	r1, r2, [r7, #56]	; 0x38
 8018554:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8018558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801855c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8018560:	1ac9      	subs	r1, r1, r3
 8018562:	eb62 0204 	sbc.w	r2, r2, r4
 8018566:	468b      	mov	fp, r1
 8018568:	4694      	mov	ip, r2
 801856a:	e9c7 bc0e 	strd	fp, ip, [r7, #56]	; 0x38
 801856e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8018572:	2b00      	cmp	r3, #0
 8018574:	f174 0300 	sbcs.w	r3, r4, #0
 8018578:	db08      	blt.n	801858c <mixer_maintenance+0x10c>
 801857a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801857e:	4313      	orrs	r3, r2
 8018580:	2b00      	cmp	r3, #0
 8018582:	bf14      	ite	ne
 8018584:	2301      	movne	r3, #1
 8018586:	2300      	moveq	r3, #0
 8018588:	b2db      	uxtb	r3, r3
 801858a:	e001      	b.n	8018590 <mixer_maintenance+0x110>
 801858c:	f04f 33ff 	mov.w	r3, #4294967295
 8018590:	2b00      	cmp	r3, #0
 8018592:	da0e      	bge.n	80185b2 <mixer_maintenance+0x132>
 8018594:	4b6c      	ldr	r3, [pc, #432]	; (8018748 <mixer_maintenance+0x2c8>)
 8018596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801859a:	2b06      	cmp	r3, #6
 801859c:	d15f      	bne.n	801865e <mixer_maintenance+0x1de>
 801859e:	4b69      	ldr	r3, [pc, #420]	; (8018744 <mixer_maintenance+0x2c4>)
 80185a0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d15a      	bne.n	801865e <mixer_maintenance+0x1de>
 80185a8:	4b67      	ldr	r3, [pc, #412]	; (8018748 <mixer_maintenance+0x2c8>)
 80185aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80185ae:	2b05      	cmp	r3, #5
 80185b0:	d955      	bls.n	801865e <mixer_maintenance+0x1de>
		{
			mx.slot_number = chirp_config.mx_round_length;
 80185b2:	4b65      	ldr	r3, [pc, #404]	; (8018748 <mixer_maintenance+0x2c8>)
 80185b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	4b62      	ldr	r3, [pc, #392]	; (8018744 <mixer_maintenance+0x2c4>)
 80185bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			mx.round_deadline_update_slot = mx.slot_number;
 80185c0:	4b60      	ldr	r3, [pc, #384]	; (8018744 <mixer_maintenance+0x2c4>)
 80185c2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	4b5e      	ldr	r3, [pc, #376]	; (8018744 <mixer_maintenance+0x2c4>)
 80185ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			mx.round_deadline = now +
				gpi_mulu_32x16to64((Gpi_Fast_Tick_Native)chirp_config.mx_slot_length, (typeof(mx.slot_number))chirp_config.mx_round_length - mx.slot_number);
 80185ce:	4b5e      	ldr	r3, [pc, #376]	; (8018748 <mixer_maintenance+0x2c8>)
 80185d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185d2:	4a5d      	ldr	r2, [pc, #372]	; (8018748 <mixer_maintenance+0x2c8>)
 80185d4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80185d8:	b291      	uxth	r1, r2
 80185da:	4a5a      	ldr	r2, [pc, #360]	; (8018744 <mixer_maintenance+0x2c4>)
 80185dc:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80185e0:	b292      	uxth	r2, r2
 80185e2:	1a8a      	subs	r2, r1, r2
 80185e4:	b292      	uxth	r2, r2
 80185e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80185e8:	4613      	mov	r3, r2
 80185ea:	857b      	strh	r3, [r7, #42]	; 0x2a
	return gpi_mulu_32x32to64(a, b);
 80185ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185f0:	627a      	str	r2, [r7, #36]	; 0x24
 80185f2:	623b      	str	r3, [r7, #32]
	asm
 80185f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f6:	6a3a      	ldr	r2, [r7, #32]
 80185f8:	fba3 2302 	umull	r2, r3, r3, r2
 80185fc:	4690      	mov	r8, r2
 80185fe:	4699      	mov	r9, r3
	return result.u64;
 8018600:	4641      	mov	r1, r8
 8018602:	464a      	mov	r2, r9
			mx.round_deadline = now +
 8018604:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018608:	185d      	adds	r5, r3, r1
 801860a:	eb44 0602 	adc.w	r6, r4, r2
 801860e:	4a4d      	ldr	r2, [pc, #308]	; (8018744 <mixer_maintenance+0x2c4>)
 8018610:	e9c2 5614 	strd	r5, r6, [r2, #80]	; 0x50

			GPI_TRACE_MSG(TRACE_INFO, "max. round length reached -> STOP initiated");
 8018614:	bf00      	nop
 8018616:	4b4b      	ldr	r3, [pc, #300]	; (8018744 <mixer_maintenance+0x2c4>)
 8018618:	61fb      	str	r3, [r7, #28]
 801861a:	2320      	movs	r3, #32
 801861c:	61bb      	str	r3, [r7, #24]
 801861e:	69fb      	ldr	r3, [r7, #28]
 8018620:	617b      	str	r3, [r7, #20]
 8018622:	69bb      	ldr	r3, [r7, #24]
 8018624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 8018626:	f3bf 8f5f 	dmb	sy
		__asm__
 801862a:	6979      	ldr	r1, [r7, #20]
 801862c:	693b      	ldr	r3, [r7, #16]
 801862e:	697a      	ldr	r2, [r7, #20]
 8018630:	e851 0f00 	ldrex	r0, [r1]
 8018634:	ea40 0003 	orr.w	r0, r0, r3
 8018638:	e841 0300 	strex	r3, r0, [r1]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d1f7      	bne.n	8018630 <mixer_maintenance+0x1b0>
 8018640:	f3bf 8f5f 	dmb	sy

			gpi_atomic_set(&mx.events, BV(DEADLINE_REACHED));

			while (!mixer_transport_set_next_slot_task(STOP));
 8018644:	bf00      	nop
 8018646:	2002      	movs	r0, #2
 8018648:	f7f9 f9c4 	bl	80119d4 <mixer_transport_set_next_slot_task>
 801864c:	4603      	mov	r3, r0
 801864e:	2b00      	cmp	r3, #0
 8018650:	d0f9      	beq.n	8018646 <mixer_maintenance+0x1c6>
			PT_EXIT(pt);
 8018652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018654:	2200      	movs	r2, #0
 8018656:	801a      	strh	r2, [r3, #0]
 8018658:	bf00      	nop
 801865a:	2302      	movs	r3, #2
 801865c:	e082      	b.n	8018764 <mixer_maintenance+0x2e4>
		}
		else if (mx.round_deadline_update_slot != mx.slot_number)
 801865e:	4b39      	ldr	r3, [pc, #228]	; (8018744 <mixer_maintenance+0x2c4>)
 8018660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8018664:	4b37      	ldr	r3, [pc, #220]	; (8018744 <mixer_maintenance+0x2c4>)
 8018666:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801866a:	b29b      	uxth	r3, r3
 801866c:	429a      	cmp	r2, r3
 801866e:	f43f af2b 	beq.w	80184c8 <mixer_maintenance+0x48>
		{
			// ATTENTION: updating round deadline only on slot_number updates is important
			// for right behaviour during RESYNC phases
			assert_reset(((GPI_TICK_FAST_MAX / 2) / chirp_config.mx_slot_length >= chirp_config.mx_round_length));
 8018672:	4b35      	ldr	r3, [pc, #212]	; (8018748 <mixer_maintenance+0x2c8>)
 8018674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018676:	f04f 0400 	mov.w	r4, #0
 801867a:	461a      	mov	r2, r3
 801867c:	4623      	mov	r3, r4
 801867e:	f04f 30ff 	mov.w	r0, #4294967295
 8018682:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018686:	f7e8 fb09 	bl	8000c9c <__aeabi_uldivmod>
 801868a:	4603      	mov	r3, r0
 801868c:	460c      	mov	r4, r1
 801868e:	4619      	mov	r1, r3
 8018690:	4622      	mov	r2, r4
 8018692:	4b2d      	ldr	r3, [pc, #180]	; (8018748 <mixer_maintenance+0x2c8>)
 8018694:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018698:	b29b      	uxth	r3, r3
 801869a:	b29b      	uxth	r3, r3
 801869c:	f04f 0400 	mov.w	r4, #0
 80186a0:	42a2      	cmp	r2, r4
 80186a2:	bf08      	it	eq
 80186a4:	4299      	cmpeq	r1, r3
 80186a6:	d21d      	bcs.n	80186e4 <mixer_maintenance+0x264>
 80186a8:	4b27      	ldr	r3, [pc, #156]	; (8018748 <mixer_maintenance+0x2c8>)
 80186aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186ac:	f04f 0400 	mov.w	r4, #0
 80186b0:	461a      	mov	r2, r3
 80186b2:	4623      	mov	r3, r4
 80186b4:	f04f 30ff 	mov.w	r0, #4294967295
 80186b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80186bc:	f7e8 faee 	bl	8000c9c <__aeabi_uldivmod>
 80186c0:	4603      	mov	r3, r0
 80186c2:	460c      	mov	r4, r1
 80186c4:	4619      	mov	r1, r3
 80186c6:	4622      	mov	r2, r4
 80186c8:	4b1f      	ldr	r3, [pc, #124]	; (8018748 <mixer_maintenance+0x2c8>)
 80186ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	f04f 0400 	mov.w	r4, #0
 80186d6:	42a2      	cmp	r2, r4
 80186d8:	bf08      	it	eq
 80186da:	4299      	cmpeq	r1, r3
 80186dc:	d202      	bcs.n	80186e4 <mixer_maintenance+0x264>
  __ASM volatile ("cpsid f" : : : "memory");
 80186de:	b671      	cpsid	f
 80186e0:	f7fd fb92 	bl	8015e08 <NVIC_SystemReset>

			mx.round_deadline_update_slot = mx.slot_number;
 80186e4:	4b17      	ldr	r3, [pc, #92]	; (8018744 <mixer_maintenance+0x2c4>)
 80186e6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80186ea:	b29a      	uxth	r2, r3
 80186ec:	4b15      	ldr	r3, [pc, #84]	; (8018744 <mixer_maintenance+0x2c4>)
 80186ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			mx.round_deadline = now +
				gpi_mulu_32x16to64((Gpi_Fast_Tick_Native)chirp_config.mx_slot_length, (typeof(mx.slot_number))chirp_config.mx_round_length - mx.slot_number);
 80186f2:	4b15      	ldr	r3, [pc, #84]	; (8018748 <mixer_maintenance+0x2c8>)
 80186f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186f6:	4a14      	ldr	r2, [pc, #80]	; (8018748 <mixer_maintenance+0x2c8>)
 80186f8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80186fc:	b291      	uxth	r1, r2
 80186fe:	4a11      	ldr	r2, [pc, #68]	; (8018744 <mixer_maintenance+0x2c4>)
 8018700:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8018704:	b292      	uxth	r2, r2
 8018706:	1a8a      	subs	r2, r1, r2
 8018708:	b292      	uxth	r2, r2
 801870a:	60fb      	str	r3, [r7, #12]
 801870c:	4613      	mov	r3, r2
 801870e:	817b      	strh	r3, [r7, #10]
	return gpi_mulu_32x32to64(a, b);
 8018710:	897b      	ldrh	r3, [r7, #10]
 8018712:	68fa      	ldr	r2, [r7, #12]
 8018714:	607a      	str	r2, [r7, #4]
 8018716:	603b      	str	r3, [r7, #0]
	asm
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	683a      	ldr	r2, [r7, #0]
 801871c:	fba3 2302 	umull	r2, r3, r3, r2
 8018720:	4615      	mov	r5, r2
 8018722:	461e      	mov	r6, r3
	return result.u64;
 8018724:	4629      	mov	r1, r5
 8018726:	4632      	mov	r2, r6
			mx.round_deadline = now +
 8018728:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801872c:	eb13 0b01 	adds.w	fp, r3, r1
 8018730:	eb44 0c02 	adc.w	ip, r4, r2
 8018734:	4a03      	ldr	r2, [pc, #12]	; (8018744 <mixer_maintenance+0x2c4>)
 8018736:	e9c2 bc14 	strd	fp, ip, [r2, #80]	; 0x50

			GPI_TRACE_MSG(TRACE_INFO, "round deadline: %lu (%luus from now)",
 801873a:	bf00      	nop
	{
 801873c:	e6c4      	b.n	80184c8 <mixer_maintenance+0x48>
 801873e:	bf00      	nop
 8018740:	20001e2c 	.word	0x20001e2c
 8018744:	200014f0 	.word	0x200014f0
 8018748:	20001430 	.word	0x20001430
 801874c:	00f42400 	.word	0x00f42400
 8018750:	08025834 	.word	0x08025834
				PRINTF_CHIRP("profile %u %s %4" PRIu16 ": %" PRIu32 "\n", s_snapshot_index, module_name, line, timestamp);
			}
		#endif
	}

	PT_END(pt);
 8018754:	2300      	movs	r3, #0
 8018756:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801875c:	2200      	movs	r2, #0
 801875e:	801a      	strh	r2, [r3, #0]
 8018760:	bf00      	nop
 8018762:	2303      	movs	r3, #3
}
 8018764:	4618      	mov	r0, r3
 8018766:	3750      	adds	r7, #80	; 0x50
 8018768:	46bd      	mov	sp, r7
 801876a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 801876e:	bf00      	nop

08018770 <mixer_rand_seed>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_rand_seed(uint32_t seed)
{
 8018770:	b480      	push	{r7}
 8018772:	b083      	sub	sp, #12
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
	rand_state = seed;
 8018778:	4a04      	ldr	r2, [pc, #16]	; (801878c <mixer_rand_seed+0x1c>)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6013      	str	r3, [r2, #0]
}
 801877e:	bf00      	nop
 8018780:	370c      	adds	r7, #12
 8018782:	46bd      	mov	sp, r7
 8018784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018788:	4770      	bx	lr
 801878a:	bf00      	nop
 801878c:	200000b0 	.word	0x200000b0

08018790 <mixer_rand>:

//**************************************************************************************************

// RNG (XorShift)
uint16_t mixer_rand()
{
 8018790:	b480      	push	{r7}
 8018792:	af00      	add	r7, sp, #0
			if (!(++i & 1))
				return rand_state >> 16;

		#endif

		rand_state ^= rand_state << 2;
 8018794:	4b0f      	ldr	r3, [pc, #60]	; (80187d4 <mixer_rand+0x44>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	009a      	lsls	r2, r3, #2
 801879a:	4b0e      	ldr	r3, [pc, #56]	; (80187d4 <mixer_rand+0x44>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	4053      	eors	r3, r2
 80187a0:	4a0c      	ldr	r2, [pc, #48]	; (80187d4 <mixer_rand+0x44>)
 80187a2:	6013      	str	r3, [r2, #0]
		rand_state ^= rand_state >> 15;
 80187a4:	4b0b      	ldr	r3, [pc, #44]	; (80187d4 <mixer_rand+0x44>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	0bda      	lsrs	r2, r3, #15
 80187aa:	4b0a      	ldr	r3, [pc, #40]	; (80187d4 <mixer_rand+0x44>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	4053      	eors	r3, r2
 80187b0:	4a08      	ldr	r2, [pc, #32]	; (80187d4 <mixer_rand+0x44>)
 80187b2:	6013      	str	r3, [r2, #0]
		rand_state ^= rand_state << 17;
 80187b4:	4b07      	ldr	r3, [pc, #28]	; (80187d4 <mixer_rand+0x44>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	045a      	lsls	r2, r3, #17
 80187ba:	4b06      	ldr	r3, [pc, #24]	; (80187d4 <mixer_rand+0x44>)
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	4053      	eors	r3, r2
 80187c0:	4a04      	ldr	r2, [pc, #16]	; (80187d4 <mixer_rand+0x44>)
 80187c2:	6013      	str	r3, [r2, #0]

	#endif

	return rand_state;
 80187c4:	4b03      	ldr	r3, [pc, #12]	; (80187d4 <mixer_rand+0x44>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	b29b      	uxth	r3, r3
}
 80187ca:	4618      	mov	r0, r3
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr
 80187d4:	200000b0 	.word	0x200000b0

080187d8 <request_or>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static inline void request_or(uint_fast_t *dest, const uint8_t *src, unsigned int size)
{
 80187d8:	b480      	push	{r7}
 80187da:	b087      	sub	sp, #28
 80187dc:	af00      	add	r7, sp, #0
 80187de:	60f8      	str	r0, [r7, #12]
 80187e0:	60b9      	str	r1, [r7, #8]
 80187e2:	607a      	str	r2, [r7, #4]
	// NOTE: process 8-bit-wise because src may be unaligned

	uint8_t	*pd = (uint8_t*)dest;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	617b      	str	r3, [r7, #20]

	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 80187e8:	e00a      	b.n	8018800 <request_or+0x28>
		*pd++ |= *src++;
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	1c5a      	adds	r2, r3, #1
 80187ee:	60ba      	str	r2, [r7, #8]
 80187f0:	7819      	ldrb	r1, [r3, #0]
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	1c5a      	adds	r2, r3, #1
 80187f6:	617a      	str	r2, [r7, #20]
 80187f8:	781a      	ldrb	r2, [r3, #0]
 80187fa:	430a      	orrs	r2, r1
 80187fc:	b2d2      	uxtb	r2, r2
 80187fe:	701a      	strb	r2, [r3, #0]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	f023 0303 	bic.w	r3, r3, #3
 8018806:	68fa      	ldr	r2, [r7, #12]
 8018808:	4413      	add	r3, r2
 801880a:	697a      	ldr	r2, [r7, #20]
 801880c:	429a      	cmp	r2, r3
 801880e:	d3ec      	bcc.n	80187ea <request_or+0x12>
}
 8018810:	bf00      	nop
 8018812:	371c      	adds	r7, #28
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr

0801881c <request_and>:

//**************************************************************************************************

static inline void request_and(uint_fast_t *dest, const void *src, unsigned int size)
{
 801881c:	b480      	push	{r7}
 801881e:	b087      	sub	sp, #28
 8018820:	af00      	add	r7, sp, #0
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	607a      	str	r2, [r7, #4]
	// NOTE: process 8-bit-wise because src may be unaligned

	uint8_t			*pd = (uint8_t*)dest;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	617b      	str	r3, [r7, #20]
	const uint8_t	*ps = (const uint8_t*)src;
 801882c:	68bb      	ldr	r3, [r7, #8]
 801882e:	613b      	str	r3, [r7, #16]

	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018830:	e00a      	b.n	8018848 <request_and+0x2c>
		*pd++ &= *ps++;
 8018832:	693b      	ldr	r3, [r7, #16]
 8018834:	1c5a      	adds	r2, r3, #1
 8018836:	613a      	str	r2, [r7, #16]
 8018838:	7819      	ldrb	r1, [r3, #0]
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	1c5a      	adds	r2, r3, #1
 801883e:	617a      	str	r2, [r7, #20]
 8018840:	781a      	ldrb	r2, [r3, #0]
 8018842:	400a      	ands	r2, r1
 8018844:	b2d2      	uxtb	r2, r2
 8018846:	701a      	strb	r2, [r3, #0]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	f023 0303 	bic.w	r3, r3, #3
 801884e:	68fa      	ldr	r2, [r7, #12]
 8018850:	4413      	add	r3, r2
 8018852:	697a      	ldr	r2, [r7, #20]
 8018854:	429a      	cmp	r2, r3
 8018856:	d3ec      	bcc.n	8018832 <request_and+0x16>
}
 8018858:	bf00      	nop
 801885a:	371c      	adds	r7, #28
 801885c:	46bd      	mov	sp, r7
 801885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018862:	4770      	bx	lr

08018864 <update_request_marker>:
	return c;
}

//**************************************************************************************************
static void update_request_marker(Request_Flag flag, const Packet *p)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b08c      	sub	sp, #48	; 0x30
 8018868:	af00      	add	r7, sp, #0
 801886a:	4603      	mov	r3, r0
 801886c:	6039      	str	r1, [r7, #0]
 801886e:	71fb      	strb	r3, [r7, #7]
	PROFILE("update_request_marker() begin");
 8018870:	bf00      	nop

	uint_fast_t *any_mask, *all_mask;
	uint_fast16_t *any_pending;
	if (flag == Request_row)
 8018872:	79fb      	ldrb	r3, [r7, #7]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d118      	bne.n	80188aa <update_request_marker+0x46>
	{
		any_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.row_any_mask.pos + 0]);
 8018878:	4b5b      	ldr	r3, [pc, #364]	; (80189e8 <update_request_marker+0x184>)
 801887a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801887e:	4b5b      	ldr	r3, [pc, #364]	; (80189ec <update_request_marker+0x188>)
 8018880:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8018884:	3306      	adds	r3, #6
 8018886:	009b      	lsls	r3, r3, #2
 8018888:	4413      	add	r3, r2
 801888a:	62fb      	str	r3, [r7, #44]	; 0x2c
		all_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.row_all_mask.pos + 0]);
 801888c:	4b56      	ldr	r3, [pc, #344]	; (80189e8 <update_request_marker+0x184>)
 801888e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018892:	4b56      	ldr	r3, [pc, #344]	; (80189ec <update_request_marker+0x188>)
 8018894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018898:	3306      	adds	r3, #6
 801889a:	009b      	lsls	r3, r3, #2
 801889c:	4413      	add	r3, r2
 801889e:	62bb      	str	r3, [r7, #40]	; 0x28
		any_pending = (uint_fast16_t *)&(mx.request->row_any_pending);
 80188a0:	4b51      	ldr	r3, [pc, #324]	; (80189e8 <update_request_marker+0x184>)
 80188a2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80188a6:	627b      	str	r3, [r7, #36]	; 0x24
 80188a8:	e01b      	b.n	80188e2 <update_request_marker+0x7e>
	}
	else if(flag == Request_column)
 80188aa:	79fb      	ldrb	r3, [r7, #7]
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	d118      	bne.n	80188e2 <update_request_marker+0x7e>
	{
		any_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos + 0]);
 80188b0:	4b4d      	ldr	r3, [pc, #308]	; (80189e8 <update_request_marker+0x184>)
 80188b2:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80188b6:	4b4d      	ldr	r3, [pc, #308]	; (80189ec <update_request_marker+0x188>)
 80188b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80188bc:	3306      	adds	r3, #6
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	4413      	add	r3, r2
 80188c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		all_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.column_all_mask.pos + 0]);
 80188c4:	4b48      	ldr	r3, [pc, #288]	; (80189e8 <update_request_marker+0x184>)
 80188c6:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80188ca:	4b48      	ldr	r3, [pc, #288]	; (80189ec <update_request_marker+0x188>)
 80188cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188d0:	3306      	adds	r3, #6
 80188d2:	009b      	lsls	r3, r3, #2
 80188d4:	4413      	add	r3, r2
 80188d6:	62bb      	str	r3, [r7, #40]	; 0x28
		any_pending = (uint_fast16_t *)&(mx.request->column_any_pending);
 80188d8:	4b43      	ldr	r3, [pc, #268]	; (80189e8 <update_request_marker+0x184>)
 80188da:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80188de:	3304      	adds	r3, #4
 80188e0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (!(*any_pending))
 80188e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d12b      	bne.n	8018942 <update_request_marker+0xde>
	{
		gpi_memcpy_dma_inline(any_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 80188ea:	4b40      	ldr	r3, [pc, #256]	; (80189ec <update_request_marker+0x188>)
 80188ec:	7a9b      	ldrb	r3, [r3, #10]
 80188ee:	3308      	adds	r3, #8
 80188f0:	683a      	ldr	r2, [r7, #0]
 80188f2:	441a      	add	r2, r3
 80188f4:	4b3d      	ldr	r3, [pc, #244]	; (80189ec <update_request_marker+0x188>)
 80188f6:	7f5b      	ldrb	r3, [r3, #29]
 80188f8:	009b      	lsls	r3, r3, #2
 80188fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188fc:	6179      	str	r1, [r7, #20]
 80188fe:	613a      	str	r2, [r7, #16]
 8018900:	60fb      	str	r3, [r7, #12]
	__builtin_memcpy(dest, src, size);
 8018902:	697a      	ldr	r2, [r7, #20]
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	4610      	mov	r0, r2
 8018908:	4619      	mov	r1, r3
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	461a      	mov	r2, r3
 801890e:	f008 fe31 	bl	8021574 <memcpy>
		gpi_memcpy_dma_inline(all_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018912:	4b36      	ldr	r3, [pc, #216]	; (80189ec <update_request_marker+0x188>)
 8018914:	7a9b      	ldrb	r3, [r3, #10]
 8018916:	3308      	adds	r3, #8
 8018918:	683a      	ldr	r2, [r7, #0]
 801891a:	441a      	add	r2, r3
 801891c:	4b33      	ldr	r3, [pc, #204]	; (80189ec <update_request_marker+0x188>)
 801891e:	7f5b      	ldrb	r3, [r3, #29]
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018924:	6239      	str	r1, [r7, #32]
 8018926:	61fa      	str	r2, [r7, #28]
 8018928:	61bb      	str	r3, [r7, #24]
 801892a:	6a3a      	ldr	r2, [r7, #32]
 801892c:	69fb      	ldr	r3, [r7, #28]
 801892e:	4610      	mov	r0, r2
 8018930:	4619      	mov	r1, r3
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	461a      	mov	r2, r3
 8018936:	f008 fe1d 	bl	8021574 <memcpy>

		*any_pending = 1;	// temporary, will be updated together with following coding vector snoop
 801893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801893c:	2201      	movs	r2, #1
 801893e:	601a      	str	r2, [r3, #0]
 8018940:	e017      	b.n	8018972 <update_request_marker+0x10e>
	}
	else
	{
		request_or (any_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018942:	4b2a      	ldr	r3, [pc, #168]	; (80189ec <update_request_marker+0x188>)
 8018944:	7a9b      	ldrb	r3, [r3, #10]
 8018946:	3308      	adds	r3, #8
 8018948:	683a      	ldr	r2, [r7, #0]
 801894a:	18d1      	adds	r1, r2, r3
 801894c:	4b27      	ldr	r3, [pc, #156]	; (80189ec <update_request_marker+0x188>)
 801894e:	7f5b      	ldrb	r3, [r3, #29]
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	461a      	mov	r2, r3
 8018954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018956:	f7ff ff3f 	bl	80187d8 <request_or>
		request_and(all_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 801895a:	4b24      	ldr	r3, [pc, #144]	; (80189ec <update_request_marker+0x188>)
 801895c:	7a9b      	ldrb	r3, [r3, #10]
 801895e:	3308      	adds	r3, #8
 8018960:	683a      	ldr	r2, [r7, #0]
 8018962:	18d1      	adds	r1, r2, r3
 8018964:	4b21      	ldr	r3, [pc, #132]	; (80189ec <update_request_marker+0x188>)
 8018966:	7f5b      	ldrb	r3, [r3, #29]
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	461a      	mov	r2, r3
 801896c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801896e:	f7ff ff55 	bl	801881c <request_and>
	}

	any_mask[chirp_config.matrix_coding_vector.len - 1] &= mx.request->padding_mask;
 8018972:	4b1e      	ldr	r3, [pc, #120]	; (80189ec <update_request_marker+0x188>)
 8018974:	7f5b      	ldrb	r3, [r3, #29]
 8018976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801897a:	3b01      	subs	r3, #1
 801897c:	009b      	lsls	r3, r3, #2
 801897e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018980:	4413      	add	r3, r2
 8018982:	6819      	ldr	r1, [r3, #0]
 8018984:	4b18      	ldr	r3, [pc, #96]	; (80189e8 <update_request_marker+0x184>)
 8018986:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801898a:	695a      	ldr	r2, [r3, #20]
 801898c:	4b17      	ldr	r3, [pc, #92]	; (80189ec <update_request_marker+0x188>)
 801898e:	7f5b      	ldrb	r3, [r3, #29]
 8018990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018994:	3b01      	subs	r3, #1
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801899a:	4403      	add	r3, r0
 801899c:	400a      	ands	r2, r1
 801899e:	601a      	str	r2, [r3, #0]
	all_mask[chirp_config.matrix_coding_vector.len - 1] &= mx.request->padding_mask;
 80189a0:	4b12      	ldr	r3, [pc, #72]	; (80189ec <update_request_marker+0x188>)
 80189a2:	7f5b      	ldrb	r3, [r3, #29]
 80189a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80189a8:	3b01      	subs	r3, #1
 80189aa:	009b      	lsls	r3, r3, #2
 80189ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189ae:	4413      	add	r3, r2
 80189b0:	6819      	ldr	r1, [r3, #0]
 80189b2:	4b0d      	ldr	r3, [pc, #52]	; (80189e8 <update_request_marker+0x184>)
 80189b4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80189b8:	695a      	ldr	r2, [r3, #20]
 80189ba:	4b0c      	ldr	r3, [pc, #48]	; (80189ec <update_request_marker+0x188>)
 80189bc:	7f5b      	ldrb	r3, [r3, #29]
 80189be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80189c2:	3b01      	subs	r3, #1
 80189c4:	009b      	lsls	r3, r3, #2
 80189c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189c8:	4403      	add	r3, r0
 80189ca:	400a      	ands	r2, r1
 80189cc:	601a      	str	r2, [r3, #0]

	mx.request->last_update_slot = p->slot_number;
 80189ce:	4b06      	ldr	r3, [pc, #24]	; (80189e8 <update_request_marker+0x184>)
 80189d0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	8892      	ldrh	r2, [r2, #4]
 80189d8:	b292      	uxth	r2, r2
 80189da:	811a      	strh	r2, [r3, #8]

	PROFILE("update_request_marker() end");
 80189dc:	bf00      	nop
}
 80189de:	bf00      	nop
 80189e0:	3730      	adds	r7, #48	; 0x30
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}
 80189e6:	bf00      	nop
 80189e8:	200014f0 	.word	0x200014f0
 80189ec:	20001430 	.word	0x20001430

080189f0 <mx_request_clear>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

uint16_t mx_request_clear(uint_fast_t *dest, const void *src, unsigned int size)
{
 80189f0:	b480      	push	{r7}
 80189f2:	b08b      	sub	sp, #44	; 0x2c
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	60f8      	str	r0, [r7, #12]
 80189f8:	60b9      	str	r1, [r7, #8]
 80189fa:	607a      	str	r2, [r7, #4]
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	627b      	str	r3, [r7, #36]	; 0x24
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	623b      	str	r3, [r7, #32]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	61fb      	str	r3, [r7, #28]
	uint8_t			*pd = (uint8_t*)dest;
 8018a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0a:	61bb      	str	r3, [r7, #24]
	const uint8_t	*ps = (const uint8_t*)src;
 8018a0c:	6a3b      	ldr	r3, [r7, #32]
 8018a0e:	617b      	str	r3, [r7, #20]
	uint16_t		 c = 0;
 8018a10:	2300      	movs	r3, #0
 8018a12:	827b      	strh	r3, [r7, #18]
 8018a14:	e019      	b.n	8018a4a <mx_request_clear+0x5a>
		*pd &= ~(*ps++);
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	1c5a      	adds	r2, r3, #1
 8018a1a:	617a      	str	r2, [r7, #20]
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	43d9      	mvns	r1, r3
 8018a20:	69bb      	ldr	r3, [r7, #24]
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	b25a      	sxtb	r2, r3
 8018a26:	b24b      	sxtb	r3, r1
 8018a28:	4013      	ands	r3, r2
 8018a2a:	b25b      	sxtb	r3, r3
 8018a2c:	b2da      	uxtb	r2, r3
 8018a2e:	69bb      	ldr	r3, [r7, #24]
 8018a30:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 8018a32:	69bb      	ldr	r3, [r7, #24]
 8018a34:	1c5a      	adds	r2, r3, #1
 8018a36:	61ba      	str	r2, [r7, #24]
 8018a38:	781b      	ldrb	r3, [r3, #0]
 8018a3a:	747b      	strb	r3, [r7, #17]
	return gpi_popcnt_lut[x];
 8018a3c:	7c7b      	ldrb	r3, [r7, #17]
 8018a3e:	4a0a      	ldr	r2, [pc, #40]	; (8018a68 <mx_request_clear+0x78>)
 8018a40:	5cd3      	ldrb	r3, [r2, r3]
 8018a42:	b29a      	uxth	r2, r3
 8018a44:	8a7b      	ldrh	r3, [r7, #18]
 8018a46:	4413      	add	r3, r2
 8018a48:	827b      	strh	r3, [r7, #18]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	f023 0303 	bic.w	r3, r3, #3
 8018a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a52:	4413      	add	r3, r2
 8018a54:	69ba      	ldr	r2, [r7, #24]
 8018a56:	429a      	cmp	r2, r3
 8018a58:	d3dd      	bcc.n	8018a16 <mx_request_clear+0x26>
	return c;
 8018a5a:	8a7b      	ldrh	r3, [r7, #18]
	return request_clear(dest, src, size);
}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	372c      	adds	r7, #44	; 0x2c
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr
 8018a68:	080268e0 	.word	0x080268e0

08018a6c <mx_update_request>:

//**************************************************************************************************

void mx_update_request(const Packet *p)
{
 8018a6c:	b590      	push	{r4, r7, lr}
 8018a6e:	b097      	sub	sp, #92	; 0x5c
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
	GPI_TRACE_FUNCTION();
 8018a74:	bf00      	nop
	PROFILE("mx_update_request() begin");
 8018a76:	bf00      	nop

	if (p != mx.tx_packet)
 8018a78:	4b5d      	ldr	r3, [pc, #372]	; (8018bf0 <mx_update_request+0x184>)
 8018a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a7c:	687a      	ldr	r2, [r7, #4]
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d04c      	beq.n	8018b1c <mx_update_request+0xb0>
	{
		if (p->flags.request_column)
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	79db      	ldrb	r3, [r3, #7]
 8018a86:	f003 0301 	and.w	r3, r3, #1
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d004      	beq.n	8018a9a <mx_update_request+0x2e>
			update_request_marker(Request_column, p);
 8018a90:	6879      	ldr	r1, [r7, #4]
 8018a92:	2001      	movs	r0, #1
 8018a94:	f7ff fee6 	bl	8018864 <update_request_marker>
 8018a98:	e00a      	b.n	8018ab0 <mx_update_request+0x44>
		else if (p->flags.request_row)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	79db      	ldrb	r3, [r3, #7]
 8018a9e:	f003 0302 	and.w	r3, r3, #2
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d003      	beq.n	8018ab0 <mx_update_request+0x44>
			update_request_marker(Request_row, p);
 8018aa8:	6879      	ldr	r1, [r7, #4]
 8018aaa:	2000      	movs	r0, #0
 8018aac:	f7ff feda 	bl	8018864 <update_request_marker>

		#if MX_REQUEST_HEURISTIC > 1
			if (!(p->flags.request_column || p->flags.is_full_rank))
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	79db      	ldrb	r3, [r3, #7]
 8018ab4:	f003 0301 	and.w	r3, r3, #1
 8018ab8:	b2db      	uxtb	r3, r3
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d12e      	bne.n	8018b1c <mx_update_request+0xb0>
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	79db      	ldrb	r3, [r3, #7]
 8018ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d127      	bne.n	8018b1c <mx_update_request+0xb0>
				// reasonable), the content of p can change while we are working on it. It would hurt the
				// request information, which is a significant, but not fatal, error. In contrast, we have
				// to make absolutely sure that there are no side effects to memory outside of the request
				// information. This could happen at the following memcpy() if we don't handle sender_id in
				// a save way.
				uint8_t sender_id = p->sender_id;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	799b      	ldrb	r3, [r3, #6]
 8018ad0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				if (sender_id >= chirp_config.mx_num_nodes)
 8018ad4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018ad8:	b29a      	uxth	r2, r3
 8018ada:	4b46      	ldr	r3, [pc, #280]	; (8018bf4 <mx_update_request+0x188>)
 8018adc:	881b      	ldrh	r3, [r3, #0]
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	f080 8148 	bcs.w	8018d76 <mx_update_request+0x30a>
				{
					return;
				}

				gpi_memcpy_dma_inline(&(mx.history[sender_id]->row_map_chunk[0]), &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018ae6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018aea:	4a41      	ldr	r2, [pc, #260]	; (8018bf0 <mx_update_request+0x184>)
 8018aec:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8018af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018af4:	1d19      	adds	r1, r3, #4
 8018af6:	4b3f      	ldr	r3, [pc, #252]	; (8018bf4 <mx_update_request+0x188>)
 8018af8:	7a9b      	ldrb	r3, [r3, #10]
 8018afa:	3308      	adds	r3, #8
 8018afc:	687a      	ldr	r2, [r7, #4]
 8018afe:	441a      	add	r2, r3
 8018b00:	4b3c      	ldr	r3, [pc, #240]	; (8018bf4 <mx_update_request+0x188>)
 8018b02:	7f5b      	ldrb	r3, [r3, #29]
 8018b04:	009b      	lsls	r3, r3, #2
 8018b06:	6479      	str	r1, [r7, #68]	; 0x44
 8018b08:	643a      	str	r2, [r7, #64]	; 0x40
 8018b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b10:	4610      	mov	r0, r2
 8018b12:	4619      	mov	r1, r3
 8018b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b16:	461a      	mov	r2, r3
 8018b18:	f008 fd2c 	bl	8021574 <memcpy>
		#endif
	}

	// snoop coding vector and update any_pending data

	if (mx.request->column_any_pending)
 8018b1c:	4b34      	ldr	r3, [pc, #208]	; (8018bf0 <mx_update_request+0x184>)
 8018b1e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	f000 809b 	beq.w	8018c60 <mx_update_request+0x1f4>
	{
		uint_fast16_t last = mx.request->column_any_pending;
 8018b2a:	4b31      	ldr	r3, [pc, #196]	; (8018bf0 <mx_update_request+0x184>)
 8018b2c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	64fb      	str	r3, [r7, #76]	; 0x4c

		mx.request->column_any_pending =
			request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018b34:	4b2e      	ldr	r3, [pc, #184]	; (8018bf0 <mx_update_request+0x184>)
 8018b36:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018b3a:	4b2e      	ldr	r3, [pc, #184]	; (8018bf4 <mx_update_request+0x188>)
 8018b3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018b40:	3306      	adds	r3, #6
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	18d1      	adds	r1, r2, r3
 8018b46:	4b2b      	ldr	r3, [pc, #172]	; (8018bf4 <mx_update_request+0x188>)
 8018b48:	799b      	ldrb	r3, [r3, #6]
 8018b4a:	3308      	adds	r3, #8
 8018b4c:	687a      	ldr	r2, [r7, #4]
 8018b4e:	441a      	add	r2, r3
 8018b50:	4b28      	ldr	r3, [pc, #160]	; (8018bf4 <mx_update_request+0x188>)
 8018b52:	7f5b      	ldrb	r3, [r3, #29]
 8018b54:	009b      	lsls	r3, r3, #2
 8018b56:	6239      	str	r1, [r7, #32]
 8018b58:	61fa      	str	r2, [r7, #28]
 8018b5a:	61bb      	str	r3, [r7, #24]
	uint8_t			*pd = (uint8_t*)dest;
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	617b      	str	r3, [r7, #20]
	const uint8_t	*ps = (const uint8_t*)src;
 8018b60:	69fb      	ldr	r3, [r7, #28]
 8018b62:	613b      	str	r3, [r7, #16]
	uint16_t		 c = 0;
 8018b64:	2300      	movs	r3, #0
 8018b66:	81fb      	strh	r3, [r7, #14]
 8018b68:	e019      	b.n	8018b9e <mx_update_request+0x132>
		*pd &= ~(*ps++);
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	1c5a      	adds	r2, r3, #1
 8018b6e:	613a      	str	r2, [r7, #16]
 8018b70:	781b      	ldrb	r3, [r3, #0]
 8018b72:	43d9      	mvns	r1, r3
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	781b      	ldrb	r3, [r3, #0]
 8018b78:	b25a      	sxtb	r2, r3
 8018b7a:	b24b      	sxtb	r3, r1
 8018b7c:	4013      	ands	r3, r2
 8018b7e:	b25b      	sxtb	r3, r3
 8018b80:	b2da      	uxtb	r2, r3
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	1c5a      	adds	r2, r3, #1
 8018b8a:	617a      	str	r2, [r7, #20]
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	737b      	strb	r3, [r7, #13]
 8018b90:	7b7b      	ldrb	r3, [r7, #13]
 8018b92:	4a19      	ldr	r2, [pc, #100]	; (8018bf8 <mx_update_request+0x18c>)
 8018b94:	5cd3      	ldrb	r3, [r2, r3]
 8018b96:	b29a      	uxth	r2, r3
 8018b98:	89fb      	ldrh	r3, [r7, #14]
 8018b9a:	4413      	add	r3, r2
 8018b9c:	81fb      	strh	r3, [r7, #14]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018b9e:	69bb      	ldr	r3, [r7, #24]
 8018ba0:	f023 0303 	bic.w	r3, r3, #3
 8018ba4:	6a3a      	ldr	r2, [r7, #32]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	697a      	ldr	r2, [r7, #20]
 8018baa:	429a      	cmp	r2, r3
 8018bac:	d3dd      	bcc.n	8018b6a <mx_update_request+0xfe>
	return c;
 8018bae:	89fa      	ldrh	r2, [r7, #14]
		mx.request->column_any_pending =
 8018bb0:	4b0f      	ldr	r3, [pc, #60]	; (8018bf0 <mx_update_request+0x184>)
 8018bb2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018bb6:	605a      	str	r2, [r3, #4]
		request_clear(&(mx.request->mask[chirp_config.column_all_mask.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018bb8:	4b0d      	ldr	r3, [pc, #52]	; (8018bf0 <mx_update_request+0x184>)
 8018bba:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018bbe:	4b0d      	ldr	r3, [pc, #52]	; (8018bf4 <mx_update_request+0x188>)
 8018bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018bc4:	3306      	adds	r3, #6
 8018bc6:	009b      	lsls	r3, r3, #2
 8018bc8:	18d1      	adds	r1, r2, r3
 8018bca:	4b0a      	ldr	r3, [pc, #40]	; (8018bf4 <mx_update_request+0x188>)
 8018bcc:	799b      	ldrb	r3, [r3, #6]
 8018bce:	3308      	adds	r3, #8
 8018bd0:	687a      	ldr	r2, [r7, #4]
 8018bd2:	441a      	add	r2, r3
 8018bd4:	4b07      	ldr	r3, [pc, #28]	; (8018bf4 <mx_update_request+0x188>)
 8018bd6:	7f5b      	ldrb	r3, [r3, #29]
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8018bdc:	637a      	str	r2, [r7, #52]	; 0x34
 8018bde:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t			*pd = (uint8_t*)dest;
 8018be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t	*ps = (const uint8_t*)src;
 8018be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018be6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t		 c = 0;
 8018be8:	2300      	movs	r3, #0
 8018bea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018bec:	e022      	b.n	8018c34 <mx_update_request+0x1c8>
 8018bee:	bf00      	nop
 8018bf0:	200014f0 	.word	0x200014f0
 8018bf4:	20001430 	.word	0x20001430
 8018bf8:	080268e0 	.word	0x080268e0
		*pd &= ~(*ps++);
 8018bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bfe:	1c5a      	adds	r2, r3, #1
 8018c00:	62ba      	str	r2, [r7, #40]	; 0x28
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	43d9      	mvns	r1, r3
 8018c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c08:	781b      	ldrb	r3, [r3, #0]
 8018c0a:	b25a      	sxtb	r2, r3
 8018c0c:	b24b      	sxtb	r3, r1
 8018c0e:	4013      	ands	r3, r2
 8018c10:	b25b      	sxtb	r3, r3
 8018c12:	b2da      	uxtb	r2, r3
 8018c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c16:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 8018c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c1a:	1c5a      	adds	r2, r3, #1
 8018c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018c24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018c28:	4a55      	ldr	r2, [pc, #340]	; (8018d80 <mx_update_request+0x314>)
 8018c2a:	5cd3      	ldrb	r3, [r2, r3]
 8018c2c:	b29a      	uxth	r2, r3
 8018c2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018c30:	4413      	add	r3, r2
 8018c32:	84fb      	strh	r3, [r7, #38]	; 0x26
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c36:	f023 0303 	bic.w	r3, r3, #3
 8018c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018c3c:	4413      	add	r3, r2
 8018c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d3db      	bcc.n	8018bfc <mx_update_request+0x190>

		if (mx.request->column_any_pending != last)
 8018c44:	4b4f      	ldr	r3, [pc, #316]	; (8018d84 <mx_update_request+0x318>)
 8018c46:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018c4a:	685b      	ldr	r3, [r3, #4]
 8018c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	d006      	beq.n	8018c60 <mx_update_request+0x1f4>
			mx.request->last_update_slot = p->slot_number;
 8018c52:	4b4c      	ldr	r3, [pc, #304]	; (8018d84 <mx_update_request+0x318>)
 8018c54:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018c58:	687a      	ldr	r2, [r7, #4]
 8018c5a:	8892      	ldrh	r2, [r2, #4]
 8018c5c:	b292      	uxth	r2, r2
 8018c5e:	811a      	strh	r2, [r3, #8]
	}

	if (mx.request->row_any_pending)
 8018c60:	4b48      	ldr	r3, [pc, #288]	; (8018d84 <mx_update_request+0x318>)
 8018c62:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d07f      	beq.n	8018d6c <mx_update_request+0x300>
	{
		int_fast16_t i = mx_get_leading_index(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 8018c6c:	4b46      	ldr	r3, [pc, #280]	; (8018d88 <mx_update_request+0x31c>)
 8018c6e:	799b      	ldrb	r3, [r3, #6]
 8018c70:	3308      	adds	r3, #8
 8018c72:	687a      	ldr	r2, [r7, #4]
 8018c74:	4413      	add	r3, r2
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7f5 fb46 	bl	800e308 <mx_get_leading_index>
 8018c7c:	6578      	str	r0, [r7, #84]	; 0x54
		if (i >= 0)
 8018c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	db50      	blt.n	8018d26 <mx_update_request+0x2ba>
		{
			uint_fast_t m = gpi_slu(1, i);
 8018c84:	2201      	movs	r2, #1
 8018c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c88:	fa02 f303 	lsl.w	r3, r2, r3
 8018c8c:	64bb      	str	r3, [r7, #72]	; 0x48

			if (mx.request->mask[chirp_config.row_any_mask.pos + i / (sizeof(m) * 8)] & m)
 8018c8e:	4b3d      	ldr	r3, [pc, #244]	; (8018d84 <mx_update_request+0x318>)
 8018c90:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018c94:	4a3c      	ldr	r2, [pc, #240]	; (8018d88 <mx_update_request+0x31c>)
 8018c96:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8018c9a:	4611      	mov	r1, r2
 8018c9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018c9e:	0952      	lsrs	r2, r2, #5
 8018ca0:	440a      	add	r2, r1
 8018ca2:	3206      	adds	r2, #6
 8018ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018caa:	4013      	ands	r3, r2
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d03a      	beq.n	8018d26 <mx_update_request+0x2ba>
			{
				mx.request->mask[chirp_config.row_any_mask.pos + i / (sizeof(m) * 8)] &= ~m;
 8018cb0:	4b34      	ldr	r3, [pc, #208]	; (8018d84 <mx_update_request+0x318>)
 8018cb2:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018cb6:	4b34      	ldr	r3, [pc, #208]	; (8018d88 <mx_update_request+0x31c>)
 8018cb8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8018cbc:	4619      	mov	r1, r3
 8018cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cc0:	095b      	lsrs	r3, r3, #5
 8018cc2:	4419      	add	r1, r3
 8018cc4:	3106      	adds	r1, #6
 8018cc6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8018cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018ccc:	43d1      	mvns	r1, r2
 8018cce:	4a2d      	ldr	r2, [pc, #180]	; (8018d84 <mx_update_request+0x318>)
 8018cd0:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 8018cd4:	4c2c      	ldr	r4, [pc, #176]	; (8018d88 <mx_update_request+0x31c>)
 8018cd6:	f894 402e 	ldrb.w	r4, [r4, #46]	; 0x2e
 8018cda:	4423      	add	r3, r4
 8018cdc:	4001      	ands	r1, r0
 8018cde:	3306      	adds	r3, #6
 8018ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				mx.request->mask[chirp_config.row_all_mask.pos + i / (sizeof(m) * 8)] &= ~m;
 8018ce4:	4b27      	ldr	r3, [pc, #156]	; (8018d84 <mx_update_request+0x318>)
 8018ce6:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018cea:	4b27      	ldr	r3, [pc, #156]	; (8018d88 <mx_update_request+0x31c>)
 8018cec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018cf0:	4619      	mov	r1, r3
 8018cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cf4:	095b      	lsrs	r3, r3, #5
 8018cf6:	4419      	add	r1, r3
 8018cf8:	3106      	adds	r1, #6
 8018cfa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8018cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018d00:	43d1      	mvns	r1, r2
 8018d02:	4a20      	ldr	r2, [pc, #128]	; (8018d84 <mx_update_request+0x318>)
 8018d04:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 8018d08:	4c1f      	ldr	r4, [pc, #124]	; (8018d88 <mx_update_request+0x31c>)
 8018d0a:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
 8018d0e:	4423      	add	r3, r4
 8018d10:	4001      	ands	r1, r0
 8018d12:	3306      	adds	r3, #6
 8018d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				mx.request->last_update_slot = p->slot_number;
 8018d18:	4b1a      	ldr	r3, [pc, #104]	; (8018d84 <mx_update_request+0x318>)
 8018d1a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	8892      	ldrh	r2, [r2, #4]
 8018d22:	b292      	uxth	r2, r2
 8018d24:	811a      	strh	r2, [r3, #8]
            }
        }

		mx.request->row_any_pending = 0;
 8018d26:	4b17      	ldr	r3, [pc, #92]	; (8018d84 <mx_update_request+0x318>)
 8018d28:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	601a      	str	r2, [r3, #0]
		for (i = chirp_config.matrix_coding_vector.len; i-- > 0;)
 8018d30:	4b15      	ldr	r3, [pc, #84]	; (8018d88 <mx_update_request+0x31c>)
 8018d32:	7f5b      	ldrb	r3, [r3, #29]
 8018d34:	657b      	str	r3, [r7, #84]	; 0x54
 8018d36:	e014      	b.n	8018d62 <mx_update_request+0x2f6>
		{
			if (mx.request->mask[chirp_config.row_any_mask.pos + i])
 8018d38:	4b12      	ldr	r3, [pc, #72]	; (8018d84 <mx_update_request+0x318>)
 8018d3a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018d3e:	4a12      	ldr	r2, [pc, #72]	; (8018d88 <mx_update_request+0x31c>)
 8018d40:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8018d44:	4611      	mov	r1, r2
 8018d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018d48:	440a      	add	r2, r1
 8018d4a:	3206      	adds	r2, #6
 8018d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d006      	beq.n	8018d62 <mx_update_request+0x2f6>
			{
				mx.request->row_any_pending = 1;
 8018d54:	4b0b      	ldr	r3, [pc, #44]	; (8018d84 <mx_update_request+0x318>)
 8018d56:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	601a      	str	r2, [r3, #0]
				break;
 8018d5e:	bf00      	nop
            }
        }
	}

	PROFILE("mx_update_request() end");
 8018d60:	e004      	b.n	8018d6c <mx_update_request+0x300>
		for (i = chirp_config.matrix_coding_vector.len; i-- > 0;)
 8018d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d64:	1e5a      	subs	r2, r3, #1
 8018d66:	657a      	str	r2, [r7, #84]	; 0x54
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	dce5      	bgt.n	8018d38 <mx_update_request+0x2cc>
	PROFILE("mx_update_request() end");
 8018d6c:	bf00      	nop

	TRACE_DUMP(1, "any_row_mask:", &(mx.request->mask[chirp_config.row_any_mask.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018d6e:	bf00      	nop
	TRACE_DUMP(1, "any_column_mask:", &(mx.request->mask[chirp_config.column_any_mask.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018d70:	bf00      	nop

	GPI_TRACE_RETURN();
 8018d72:	bf00      	nop
 8018d74:	e000      	b.n	8018d78 <mx_update_request+0x30c>
					return;
 8018d76:	bf00      	nop
}
 8018d78:	375c      	adds	r7, #92	; 0x5c
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd90      	pop	{r4, r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	080268e0 	.word	0x080268e0
 8018d84:	200014f0 	.word	0x200014f0
 8018d88:	20001430 	.word	0x20001430

08018d8c <NVIC_SystemReset>:
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8018d90:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8018d94:	4b05      	ldr	r3, [pc, #20]	; (8018dac <NVIC_SystemReset+0x20>)
 8018d96:	68db      	ldr	r3, [r3, #12]
 8018d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8018d9c:	4903      	ldr	r1, [pc, #12]	; (8018dac <NVIC_SystemReset+0x20>)
 8018d9e:	4b04      	ldr	r3, [pc, #16]	; (8018db0 <NVIC_SystemReset+0x24>)
 8018da0:	4313      	orrs	r3, r2
 8018da2:	60cb      	str	r3, [r1, #12]
 8018da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8018da8:	bf00      	nop
    __NOP();
 8018daa:	e7fd      	b.n	8018da8 <NVIC_SystemReset+0x1c>
 8018dac:	e000ed00 	.word	0xe000ed00
 8018db0:	05fa0004 	.word	0x05fa0004

08018db4 <BCD2DEC>:
  * @brief  Convert a BCD to a DEC
  * @param  temp: The BCD to be converted
  * @retval The converted DEC
  */
uint8_t BCD2DEC(uint8_t temp)
{
 8018db4:	b480      	push	{r7}
 8018db6:	b083      	sub	sp, #12
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	4603      	mov	r3, r0
 8018dbc:	71fb      	strb	r3, [r7, #7]
  return (temp - 6 * (temp >> 4));
 8018dbe:	79fb      	ldrb	r3, [r7, #7]
 8018dc0:	091b      	lsrs	r3, r3, #4
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	461a      	mov	r2, r3
 8018dc6:	009b      	lsls	r3, r3, #2
 8018dc8:	1ad3      	subs	r3, r2, r3
 8018dca:	005b      	lsls	r3, r3, #1
 8018dcc:	b2da      	uxtb	r2, r3
 8018dce:	79fb      	ldrb	r3, [r7, #7]
 8018dd0:	4413      	add	r3, r2
 8018dd2:	b2db      	uxtb	r3, r3
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	370c      	adds	r7, #12
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dde:	4770      	bx	lr

08018de0 <DEC2BCD>:
  * @brief  Convert a DEC to a BCD
  * @param  temp: The DEC to be converted
  * @retval The converted BCD
  */
uint8_t DEC2BCD(uint8_t temp)
{
 8018de0:	b480      	push	{r7}
 8018de2:	b083      	sub	sp, #12
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	4603      	mov	r3, r0
 8018de8:	71fb      	strb	r3, [r7, #7]
  return (temp + 6 * (temp / 10));
 8018dea:	79fb      	ldrb	r3, [r7, #7]
 8018dec:	4a09      	ldr	r2, [pc, #36]	; (8018e14 <DEC2BCD+0x34>)
 8018dee:	fba2 2303 	umull	r2, r3, r2, r3
 8018df2:	08db      	lsrs	r3, r3, #3
 8018df4:	b2db      	uxtb	r3, r3
 8018df6:	461a      	mov	r2, r3
 8018df8:	0052      	lsls	r2, r2, #1
 8018dfa:	4413      	add	r3, r2
 8018dfc:	005b      	lsls	r3, r3, #1
 8018dfe:	b2da      	uxtb	r2, r3
 8018e00:	79fb      	ldrb	r3, [r7, #7]
 8018e02:	4413      	add	r3, r2
 8018e04:	b2db      	uxtb	r3, r3
}
 8018e06:	4618      	mov	r0, r3
 8018e08:	370c      	adds	r7, #12
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e10:	4770      	bx	lr
 8018e12:	bf00      	nop
 8018e14:	cccccccd 	.word	0xcccccccd

08018e18 <DS3231_ModifyTime>:
  * @param  second: 00–59
  * @retval None
  */
void DS3231_ModifyTime(uint8_t year, uint8_t month, uint8_t date,
                       uint8_t day, uint8_t hour, uint8_t mintue, uint8_t second)
{
 8018e18:	b590      	push	{r4, r7, lr}
 8018e1a:	b089      	sub	sp, #36	; 0x24
 8018e1c:	af04      	add	r7, sp, #16
 8018e1e:	4604      	mov	r4, r0
 8018e20:	4608      	mov	r0, r1
 8018e22:	4611      	mov	r1, r2
 8018e24:	461a      	mov	r2, r3
 8018e26:	4623      	mov	r3, r4
 8018e28:	71fb      	strb	r3, [r7, #7]
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	71bb      	strb	r3, [r7, #6]
 8018e2e:	460b      	mov	r3, r1
 8018e30:	717b      	strb	r3, [r7, #5]
 8018e32:	4613      	mov	r3, r2
 8018e34:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t DS3231_Databuff[DS3231_TIME_LENGTH];
  uint8_t i;
  DS3231_Databuff[DS3231_memaddr.year] = year;
 8018e36:	2306      	movs	r3, #6
 8018e38:	f107 0210 	add.w	r2, r7, #16
 8018e3c:	4413      	add	r3, r2
 8018e3e:	79fa      	ldrb	r2, [r7, #7]
 8018e40:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.month] = month;
 8018e44:	2305      	movs	r3, #5
 8018e46:	f107 0210 	add.w	r2, r7, #16
 8018e4a:	4413      	add	r3, r2
 8018e4c:	79ba      	ldrb	r2, [r7, #6]
 8018e4e:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.date] = date;
 8018e52:	2304      	movs	r3, #4
 8018e54:	f107 0210 	add.w	r2, r7, #16
 8018e58:	4413      	add	r3, r2
 8018e5a:	797a      	ldrb	r2, [r7, #5]
 8018e5c:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.day] = day;
 8018e60:	2303      	movs	r3, #3
 8018e62:	f107 0210 	add.w	r2, r7, #16
 8018e66:	4413      	add	r3, r2
 8018e68:	793a      	ldrb	r2, [r7, #4]
 8018e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.hour] = hour; //default modem is 24 hour
 8018e6e:	2302      	movs	r3, #2
 8018e70:	f107 0210 	add.w	r2, r7, #16
 8018e74:	4413      	add	r3, r2
 8018e76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018e7a:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.min] = mintue;
 8018e7e:	2301      	movs	r3, #1
 8018e80:	f107 0210 	add.w	r2, r7, #16
 8018e84:	4413      	add	r3, r2
 8018e86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8018e8a:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.sec] = second;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	f107 0210 	add.w	r2, r7, #16
 8018e94:	4413      	add	r3, r2
 8018e96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e9a:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	73fb      	strb	r3, [r7, #15]
 8018ea2:	e010      	b.n	8018ec6 <DS3231_ModifyTime+0xae>
    DS3231_Buff[i] = DEC2BCD(DS3231_Databuff[i]);
 8018ea4:	7bfb      	ldrb	r3, [r7, #15]
 8018ea6:	f107 0210 	add.w	r2, r7, #16
 8018eaa:	4413      	add	r3, r2
 8018eac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8018eb0:	7bfc      	ldrb	r4, [r7, #15]
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7ff ff94 	bl	8018de0 <DEC2BCD>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	461a      	mov	r2, r3
 8018ebc:	4b0d      	ldr	r3, [pc, #52]	; (8018ef4 <DS3231_ModifyTime+0xdc>)
 8018ebe:	551a      	strb	r2, [r3, r4]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 8018ec0:	7bfb      	ldrb	r3, [r7, #15]
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	73fb      	strb	r3, [r7, #15]
 8018ec6:	7bfb      	ldrb	r3, [r7, #15]
 8018ec8:	2b06      	cmp	r3, #6
 8018eca:	d9eb      	bls.n	8018ea4 <DS3231_ModifyTime+0x8c>
  while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, 0, I2C_MEMADD_SIZE_8BIT, DS3231_Buff, DS3231_TIME_LENGTH, 0x01) != HAL_OK)
 8018ecc:	bf00      	nop
 8018ece:	2301      	movs	r3, #1
 8018ed0:	9302      	str	r3, [sp, #8]
 8018ed2:	2307      	movs	r3, #7
 8018ed4:	9301      	str	r3, [sp, #4]
 8018ed6:	4b07      	ldr	r3, [pc, #28]	; (8018ef4 <DS3231_ModifyTime+0xdc>)
 8018ed8:	9300      	str	r3, [sp, #0]
 8018eda:	2301      	movs	r3, #1
 8018edc:	2200      	movs	r2, #0
 8018ede:	21d0      	movs	r1, #208	; 0xd0
 8018ee0:	4805      	ldr	r0, [pc, #20]	; (8018ef8 <DS3231_ModifyTime+0xe0>)
 8018ee2:	f7ea fbb3 	bl	800364c <HAL_I2C_Mem_Write>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1f0      	bne.n	8018ece <DS3231_ModifyTime+0xb6>
    ;
  #endif
}
 8018eec:	bf00      	nop
 8018eee:	3714      	adds	r7, #20
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd90      	pop	{r4, r7, pc}
 8018ef4:	20001e30 	.word	0x20001e30
 8018ef8:	200010e0 	.word	0x200010e0

08018efc <DS3231_GetTime>:
  * @brief  Give a command to get RTC time
  * @param  None
  * @retval None
  */
void DS3231_GetTime(void)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b082      	sub	sp, #8
 8018f00:	af02      	add	r7, sp, #8
  DS3231.flag = 0;
 8018f02:	4b08      	ldr	r3, [pc, #32]	; (8018f24 <DS3231_GetTime+0x28>)
 8018f04:	2200      	movs	r2, #0
 8018f06:	741a      	strb	r2, [r3, #16]
  HAL_I2C_Mem_Read_IT(&hi2c2, DS3231_ADD, 0, I2C_MEMADD_SIZE_8BIT, DS3231_Buff, DS3231_REG_LENGTH);
 8018f08:	2313      	movs	r3, #19
 8018f0a:	9301      	str	r3, [sp, #4]
 8018f0c:	4b06      	ldr	r3, [pc, #24]	; (8018f28 <DS3231_GetTime+0x2c>)
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	2301      	movs	r3, #1
 8018f12:	2200      	movs	r2, #0
 8018f14:	21d0      	movs	r1, #208	; 0xd0
 8018f16:	4805      	ldr	r0, [pc, #20]	; (8018f2c <DS3231_GetTime+0x30>)
 8018f18:	f7ea fdc2 	bl	8003aa0 <HAL_I2C_Mem_Read_IT>
}
 8018f1c:	bf00      	nop
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	20001e44 	.word	0x20001e44
 8018f28:	20001e30 	.word	0x20001e30
 8018f2c:	200010e0 	.word	0x200010e0

08018f30 <DS3231_ShowTime>:

Chirp_Time DS3231_ShowTime()
{
 8018f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f32:	b09d      	sub	sp, #116	; 0x74
 8018f34:	af06      	add	r7, sp, #24
 8018f36:	6078      	str	r0, [r7, #4]
  char buffer[50], buff[20];
  Chirp_Time RTC_Time;
  memset(&RTC_Time, 0, sizeof(RTC_Time));
 8018f38:	f107 0308 	add.w	r3, r7, #8
 8018f3c:	2208      	movs	r2, #8
 8018f3e:	2100      	movs	r1, #0
 8018f40:	4618      	mov	r0, r3
 8018f42:	f008 fb22 	bl	802158a <memset>
  uint16_t count = 0;
 8018f46:	2300      	movs	r3, #0
 8018f48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  while (DS3231.flag == 0)
 8018f4c:	e013      	b.n	8018f76 <DS3231_ShowTime+0x46>
  {
    count++;
 8018f4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018f52:	3301      	adds	r3, #1
 8018f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    assert_reset((count < 0xFFFF));
 8018f58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f60:	4293      	cmp	r3, r2
 8018f62:	d108      	bne.n	8018f76 <DS3231_ShowTime+0x46>
 8018f64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	d102      	bne.n	8018f76 <DS3231_ShowTime+0x46>
  __ASM volatile ("cpsid f" : : : "memory");
 8018f70:	b671      	cpsid	f
 8018f72:	f7ff ff0b 	bl	8018d8c <NVIC_SystemReset>
  while (DS3231.flag == 0)
 8018f76:	4b54      	ldr	r3, [pc, #336]	; (80190c8 <DS3231_ShowTime+0x198>)
 8018f78:	7c1b      	ldrb	r3, [r3, #16]
 8018f7a:	b2db      	uxtb	r3, r3
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d0e6      	beq.n	8018f4e <DS3231_ShowTime+0x1e>
  }
  DS3231.flag = 0;
 8018f80:	4b51      	ldr	r3, [pc, #324]	; (80190c8 <DS3231_ShowTime+0x198>)
 8018f82:	2200      	movs	r2, #0
 8018f84:	741a      	strb	r2, [r3, #16]
  switch (DS3231.Day)
 8018f86:	4b50      	ldr	r3, [pc, #320]	; (80190c8 <DS3231_ShowTime+0x198>)
 8018f88:	789b      	ldrb	r3, [r3, #2]
 8018f8a:	3b01      	subs	r3, #1
 8018f8c:	2b06      	cmp	r3, #6
 8018f8e:	d852      	bhi.n	8019036 <DS3231_ShowTime+0x106>
 8018f90:	a201      	add	r2, pc, #4	; (adr r2, 8018f98 <DS3231_ShowTime+0x68>)
 8018f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f96:	bf00      	nop
 8018f98:	08018fb5 	.word	0x08018fb5
 8018f9c:	08018fcd 	.word	0x08018fcd
 8018fa0:	08018fdd 	.word	0x08018fdd
 8018fa4:	08018feb 	.word	0x08018feb
 8018fa8:	08018ff9 	.word	0x08018ff9
 8018fac:	08019011 	.word	0x08019011
 8018fb0:	0801901f 	.word	0x0801901f
  {
  case 1:
    sprintf(buff, "MONDAY");
 8018fb4:	f107 0310 	add.w	r3, r7, #16
 8018fb8:	4a44      	ldr	r2, [pc, #272]	; (80190cc <DS3231_ShowTime+0x19c>)
 8018fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fbe:	6018      	str	r0, [r3, #0]
 8018fc0:	3304      	adds	r3, #4
 8018fc2:	8019      	strh	r1, [r3, #0]
 8018fc4:	3302      	adds	r3, #2
 8018fc6:	0c0a      	lsrs	r2, r1, #16
 8018fc8:	701a      	strb	r2, [r3, #0]
    break;
 8018fca:	e034      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 2:
    sprintf(buff, "TUESDAY");
 8018fcc:	f107 0310 	add.w	r3, r7, #16
 8018fd0:	4a3f      	ldr	r2, [pc, #252]	; (80190d0 <DS3231_ShowTime+0x1a0>)
 8018fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fd6:	e883 0003 	stmia.w	r3, {r0, r1}
    break;
 8018fda:	e02c      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 3:
    sprintf(buff, "WEDNESDAY");
 8018fdc:	f107 0310 	add.w	r3, r7, #16
 8018fe0:	4a3c      	ldr	r2, [pc, #240]	; (80190d4 <DS3231_ShowTime+0x1a4>)
 8018fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8018fe4:	c303      	stmia	r3!, {r0, r1}
 8018fe6:	801a      	strh	r2, [r3, #0]
    break;
 8018fe8:	e025      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 4:
    sprintf(buff, "THURSDAY");
 8018fea:	f107 0310 	add.w	r3, r7, #16
 8018fee:	4a3a      	ldr	r2, [pc, #232]	; (80190d8 <DS3231_ShowTime+0x1a8>)
 8018ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ff2:	c303      	stmia	r3!, {r0, r1}
 8018ff4:	701a      	strb	r2, [r3, #0]
    break;
 8018ff6:	e01e      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 5:
    sprintf(buff, "FRIDAY");
 8018ff8:	f107 0310 	add.w	r3, r7, #16
 8018ffc:	4a37      	ldr	r2, [pc, #220]	; (80190dc <DS3231_ShowTime+0x1ac>)
 8018ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019002:	6018      	str	r0, [r3, #0]
 8019004:	3304      	adds	r3, #4
 8019006:	8019      	strh	r1, [r3, #0]
 8019008:	3302      	adds	r3, #2
 801900a:	0c0a      	lsrs	r2, r1, #16
 801900c:	701a      	strb	r2, [r3, #0]
    break;
 801900e:	e012      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 6:
    sprintf(buff, "SATURDAY");
 8019010:	f107 0310 	add.w	r3, r7, #16
 8019014:	4a32      	ldr	r2, [pc, #200]	; (80190e0 <DS3231_ShowTime+0x1b0>)
 8019016:	ca07      	ldmia	r2, {r0, r1, r2}
 8019018:	c303      	stmia	r3!, {r0, r1}
 801901a:	701a      	strb	r2, [r3, #0]
    break;
 801901c:	e00b      	b.n	8019036 <DS3231_ShowTime+0x106>
  case 7:
    sprintf(buff, "SUNDAY");
 801901e:	f107 0310 	add.w	r3, r7, #16
 8019022:	4a30      	ldr	r2, [pc, #192]	; (80190e4 <DS3231_ShowTime+0x1b4>)
 8019024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019028:	6018      	str	r0, [r3, #0]
 801902a:	3304      	adds	r3, #4
 801902c:	8019      	strh	r1, [r3, #0]
 801902e:	3302      	adds	r3, #2
 8019030:	0c0a      	lsrs	r2, r1, #16
 8019032:	701a      	strb	r2, [r3, #0]
    break;
 8019034:	bf00      	nop
  }
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019036:	4b24      	ldr	r3, [pc, #144]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 801903e:	4b22      	ldr	r3, [pc, #136]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019040:	785b      	ldrb	r3, [r3, #1]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019042:	461e      	mov	r6, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019044:	4b20      	ldr	r3, [pc, #128]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019046:	78db      	ldrb	r3, [r3, #3]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019048:	4619      	mov	r1, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 801904a:	4b1f      	ldr	r3, [pc, #124]	; (80190c8 <DS3231_ShowTime+0x198>)
 801904c:	791b      	ldrb	r3, [r3, #4]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 801904e:	461c      	mov	r4, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019050:	4b1d      	ldr	r3, [pc, #116]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019052:	795b      	ldrb	r3, [r3, #5]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019054:	461d      	mov	r5, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019056:	4b1c      	ldr	r3, [pc, #112]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019058:	799b      	ldrb	r3, [r3, #6]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 801905a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801905e:	9304      	str	r3, [sp, #16]
 8019060:	9503      	str	r5, [sp, #12]
 8019062:	9402      	str	r4, [sp, #8]
 8019064:	f107 0310 	add.w	r3, r7, #16
 8019068:	9301      	str	r3, [sp, #4]
 801906a:	9100      	str	r1, [sp, #0]
 801906c:	4633      	mov	r3, r6
 801906e:	491e      	ldr	r1, [pc, #120]	; (80190e8 <DS3231_ShowTime+0x1b8>)
 8019070:	f009 f990 	bl	8022394 <siprintf>
  printf("%s", buffer);
 8019074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019078:	4619      	mov	r1, r3
 801907a:	481c      	ldr	r0, [pc, #112]	; (80190ec <DS3231_ShowTime+0x1bc>)
 801907c:	f009 f892 	bl	80221a4 <iprintf>
  RTC_Time.chirp_year = 2000 + DS3231.Year;
 8019080:	4b11      	ldr	r3, [pc, #68]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	b29b      	uxth	r3, r3
 8019086:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801908a:	b29b      	uxth	r3, r3
 801908c:	813b      	strh	r3, [r7, #8]
  RTC_Time.chirp_month = DS3231.Month;
 801908e:	4b0e      	ldr	r3, [pc, #56]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019090:	785b      	ldrb	r3, [r3, #1]
 8019092:	72bb      	strb	r3, [r7, #10]
  RTC_Time.chirp_date = DS3231.Date;
 8019094:	4b0c      	ldr	r3, [pc, #48]	; (80190c8 <DS3231_ShowTime+0x198>)
 8019096:	78db      	ldrb	r3, [r3, #3]
 8019098:	72fb      	strb	r3, [r7, #11]
  RTC_Time.chirp_day = DS3231.Day;
 801909a:	4b0b      	ldr	r3, [pc, #44]	; (80190c8 <DS3231_ShowTime+0x198>)
 801909c:	789b      	ldrb	r3, [r3, #2]
 801909e:	733b      	strb	r3, [r7, #12]
  RTC_Time.chirp_hour = DS3231.Hour;
 80190a0:	4b09      	ldr	r3, [pc, #36]	; (80190c8 <DS3231_ShowTime+0x198>)
 80190a2:	791b      	ldrb	r3, [r3, #4]
 80190a4:	737b      	strb	r3, [r7, #13]
  RTC_Time.chirp_min = DS3231.Minute;
 80190a6:	4b08      	ldr	r3, [pc, #32]	; (80190c8 <DS3231_ShowTime+0x198>)
 80190a8:	795b      	ldrb	r3, [r3, #5]
 80190aa:	73bb      	strb	r3, [r7, #14]
  RTC_Time.chirp_sec = DS3231.Second;
 80190ac:	4b06      	ldr	r3, [pc, #24]	; (80190c8 <DS3231_ShowTime+0x198>)
 80190ae:	799b      	ldrb	r3, [r3, #6]
 80190b0:	73fb      	strb	r3, [r7, #15]
  return RTC_Time;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	461a      	mov	r2, r3
 80190b6:	f107 0308 	add.w	r3, r7, #8
 80190ba:	cb03      	ldmia	r3!, {r0, r1}
 80190bc:	6010      	str	r0, [r2, #0]
 80190be:	6051      	str	r1, [r2, #4]
}
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	375c      	adds	r7, #92	; 0x5c
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190c8:	20001e44 	.word	0x20001e44
 80190cc:	08025878 	.word	0x08025878
 80190d0:	08025880 	.word	0x08025880
 80190d4:	08025888 	.word	0x08025888
 80190d8:	08025894 	.word	0x08025894
 80190dc:	080258a0 	.word	0x080258a0
 80190e0:	080258a8 	.word	0x080258a8
 80190e4:	080258b4 	.word	0x080258b4
 80190e8:	080258bc 	.word	0x080258bc
 80190ec:	080258e0 	.word	0x080258e0

080190f0 <DS3231_ClearAlarm1_Time>:

void DS3231_ClearAlarm1_Time()
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b086      	sub	sp, #24
 80190f4:	af04      	add	r7, sp, #16
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 80190f6:	2300      	movs	r3, #0
 80190f8:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0;
 80190fa:	2300      	movs	r3, #0
 80190fc:	71bb      	strb	r3, [r7, #6]
  while (!alarm_flag)
 80190fe:	e060      	b.n	80191c2 <DS3231_ClearAlarm1_Time+0xd2>
  {
    count++;
 8019100:	79bb      	ldrb	r3, [r7, #6]
 8019102:	3301      	adds	r3, #1
 8019104:	71bb      	strb	r3, [r7, #6]
    assert_reset((count < 10));
 8019106:	79bb      	ldrb	r3, [r7, #6]
 8019108:	2b09      	cmp	r3, #9
 801910a:	d905      	bls.n	8019118 <DS3231_ClearAlarm1_Time+0x28>
 801910c:	79bb      	ldrb	r3, [r7, #6]
 801910e:	2b09      	cmp	r3, #9
 8019110:	d902      	bls.n	8019118 <DS3231_ClearAlarm1_Time+0x28>
 8019112:	b671      	cpsid	f
 8019114:	f7ff fe3a 	bl	8018d8c <NVIC_SystemReset>
    printf("clear alarm\n");
 8019118:	482d      	ldr	r0, [pc, #180]	; (80191d0 <DS3231_ClearAlarm1_Time+0xe0>)
 801911a:	f009 f8cb 	bl	80222b4 <puts>
    /* read control and status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 801911e:	bf00      	nop
 8019120:	230e      	movs	r3, #14
 8019122:	b29a      	uxth	r2, r3
 8019124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019128:	9302      	str	r3, [sp, #8]
 801912a:	2302      	movs	r3, #2
 801912c:	9301      	str	r3, [sp, #4]
 801912e:	4b29      	ldr	r3, [pc, #164]	; (80191d4 <DS3231_ClearAlarm1_Time+0xe4>)
 8019130:	9300      	str	r3, [sp, #0]
 8019132:	2301      	movs	r3, #1
 8019134:	21d0      	movs	r1, #208	; 0xd0
 8019136:	4828      	ldr	r0, [pc, #160]	; (80191d8 <DS3231_ClearAlarm1_Time+0xe8>)
 8019138:	f7ea fb9a 	bl	8003870 <HAL_I2C_Mem_Read>
 801913c:	4603      	mov	r3, r0
 801913e:	2b00      	cmp	r3, #0
 8019140:	d1ee      	bne.n	8019120 <DS3231_ClearAlarm1_Time+0x30>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Control &= 0xFC;
 8019142:	4b26      	ldr	r3, [pc, #152]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 8019144:	7a5b      	ldrb	r3, [r3, #9]
 8019146:	f023 0303 	bic.w	r3, r3, #3
 801914a:	b2da      	uxtb	r2, r3
 801914c:	4b23      	ldr	r3, [pc, #140]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 801914e:	725a      	strb	r2, [r3, #9]
    DS3231.Status &= 0xFC;
 8019150:	4b22      	ldr	r3, [pc, #136]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 8019152:	7a9b      	ldrb	r3, [r3, #10]
 8019154:	f023 0303 	bic.w	r3, r3, #3
 8019158:	b2da      	uxtb	r2, r3
 801915a:	4b20      	ldr	r3, [pc, #128]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 801915c:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 801915e:	bf00      	nop
 8019160:	230e      	movs	r3, #14
 8019162:	b29a      	uxth	r2, r3
 8019164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019168:	9302      	str	r3, [sp, #8]
 801916a:	2302      	movs	r3, #2
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	4b19      	ldr	r3, [pc, #100]	; (80191d4 <DS3231_ClearAlarm1_Time+0xe4>)
 8019170:	9300      	str	r3, [sp, #0]
 8019172:	2301      	movs	r3, #1
 8019174:	21d0      	movs	r1, #208	; 0xd0
 8019176:	4818      	ldr	r0, [pc, #96]	; (80191d8 <DS3231_ClearAlarm1_Time+0xe8>)
 8019178:	f7ea fa68 	bl	800364c <HAL_I2C_Mem_Write>
 801917c:	4603      	mov	r3, r0
 801917e:	2b00      	cmp	r3, #0
 8019180:	d1ee      	bne.n	8019160 <DS3231_ClearAlarm1_Time+0x70>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm Status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019182:	bf00      	nop
 8019184:	230e      	movs	r3, #14
 8019186:	b29a      	uxth	r2, r3
 8019188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801918c:	9302      	str	r3, [sp, #8]
 801918e:	2302      	movs	r3, #2
 8019190:	9301      	str	r3, [sp, #4]
 8019192:	4b10      	ldr	r3, [pc, #64]	; (80191d4 <DS3231_ClearAlarm1_Time+0xe4>)
 8019194:	9300      	str	r3, [sp, #0]
 8019196:	2301      	movs	r3, #1
 8019198:	21d0      	movs	r1, #208	; 0xd0
 801919a:	480f      	ldr	r0, [pc, #60]	; (80191d8 <DS3231_ClearAlarm1_Time+0xe8>)
 801919c:	f7ea fb68 	bl	8003870 <HAL_I2C_Mem_Read>
 80191a0:	4603      	mov	r3, r0
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d1ee      	bne.n	8019184 <DS3231_ClearAlarm1_Time+0x94>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((!(DS3231.Control & 0x03)) && (!(DS3231.Status & 0x03)))
 80191a6:	4b0d      	ldr	r3, [pc, #52]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 80191a8:	7a5b      	ldrb	r3, [r3, #9]
 80191aa:	f003 0303 	and.w	r3, r3, #3
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d107      	bne.n	80191c2 <DS3231_ClearAlarm1_Time+0xd2>
 80191b2:	4b0a      	ldr	r3, [pc, #40]	; (80191dc <DS3231_ClearAlarm1_Time+0xec>)
 80191b4:	7a9b      	ldrb	r3, [r3, #10]
 80191b6:	f003 0303 	and.w	r3, r3, #3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d101      	bne.n	80191c2 <DS3231_ClearAlarm1_Time+0xd2>
      alarm_flag = 1;
 80191be:	2301      	movs	r3, #1
 80191c0:	71fb      	strb	r3, [r7, #7]
  while (!alarm_flag)
 80191c2:	79fb      	ldrb	r3, [r7, #7]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d09b      	beq.n	8019100 <DS3231_ClearAlarm1_Time+0x10>
  }
  #endif
}
 80191c8:	bf00      	nop
 80191ca:	3708      	adds	r7, #8
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd80      	pop	{r7, pc}
 80191d0:	080258e4 	.word	0x080258e4
 80191d4:	20001e4d 	.word	0x20001e4d
 80191d8:	200010e0 	.word	0x200010e0
 80191dc:	20001e44 	.word	0x20001e44

080191e0 <DS3231_SetAlarm1_Time>:
  * @param  mintue: 00–59
  * @param  second: 00–59
  * @retval None
  */
void DS3231_SetAlarm1_Time(uint8_t date, uint8_t hour, uint8_t mintue, uint8_t second)
{
 80191e0:	b590      	push	{r4, r7, lr}
 80191e2:	b089      	sub	sp, #36	; 0x24
 80191e4:	af04      	add	r7, sp, #16
 80191e6:	4604      	mov	r4, r0
 80191e8:	4608      	mov	r0, r1
 80191ea:	4611      	mov	r1, r2
 80191ec:	461a      	mov	r2, r3
 80191ee:	4623      	mov	r3, r4
 80191f0:	71fb      	strb	r3, [r7, #7]
 80191f2:	4603      	mov	r3, r0
 80191f4:	71bb      	strb	r3, [r7, #6]
 80191f6:	460b      	mov	r3, r1
 80191f8:	717b      	strb	r3, [r7, #5]
 80191fa:	4613      	mov	r3, r2
 80191fc:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 80191fe:	2300      	movs	r3, #0
 8019200:	73fb      	strb	r3, [r7, #15]
  uint8_t count = 0;
 8019202:	2300      	movs	r3, #0
 8019204:	73bb      	strb	r3, [r7, #14]
  while (!alarm_flag)
 8019206:	e094      	b.n	8019332 <DS3231_SetAlarm1_Time+0x152>
  {
    count++;
 8019208:	7bbb      	ldrb	r3, [r7, #14]
 801920a:	3301      	adds	r3, #1
 801920c:	73bb      	strb	r3, [r7, #14]
    assert_reset((count < 10));
 801920e:	7bbb      	ldrb	r3, [r7, #14]
 8019210:	2b09      	cmp	r3, #9
 8019212:	d905      	bls.n	8019220 <DS3231_SetAlarm1_Time+0x40>
 8019214:	7bbb      	ldrb	r3, [r7, #14]
 8019216:	2b09      	cmp	r3, #9
 8019218:	d902      	bls.n	8019220 <DS3231_SetAlarm1_Time+0x40>
 801921a:	b671      	cpsid	f
 801921c:	f7ff fdb6 	bl	8018d8c <NVIC_SystemReset>
    printf("set alarm\n");
 8019220:	486c      	ldr	r0, [pc, #432]	; (80193d4 <DS3231_SetAlarm1_Time+0x1f4>)
 8019222:	f009 f847 	bl	80222b4 <puts>
    /* write alarm time */
    DS3231_Buff[DS3231_memaddr.alarm1_dydt] = DEC2BCD(date);
 8019226:	230a      	movs	r3, #10
 8019228:	461c      	mov	r4, r3
 801922a:	79fb      	ldrb	r3, [r7, #7]
 801922c:	4618      	mov	r0, r3
 801922e:	f7ff fdd7 	bl	8018de0 <DEC2BCD>
 8019232:	4603      	mov	r3, r0
 8019234:	461a      	mov	r2, r3
 8019236:	4b68      	ldr	r3, [pc, #416]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 8019238:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_hour] = DEC2BCD(hour);
 801923a:	2309      	movs	r3, #9
 801923c:	461c      	mov	r4, r3
 801923e:	79bb      	ldrb	r3, [r7, #6]
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff fdcd 	bl	8018de0 <DEC2BCD>
 8019246:	4603      	mov	r3, r0
 8019248:	461a      	mov	r2, r3
 801924a:	4b63      	ldr	r3, [pc, #396]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 801924c:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_min] = DEC2BCD(mintue);
 801924e:	2308      	movs	r3, #8
 8019250:	461c      	mov	r4, r3
 8019252:	797b      	ldrb	r3, [r7, #5]
 8019254:	4618      	mov	r0, r3
 8019256:	f7ff fdc3 	bl	8018de0 <DEC2BCD>
 801925a:	4603      	mov	r3, r0
 801925c:	461a      	mov	r2, r3
 801925e:	4b5e      	ldr	r3, [pc, #376]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 8019260:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_sec] = DEC2BCD(second);
 8019262:	2307      	movs	r3, #7
 8019264:	461c      	mov	r4, r3
 8019266:	793b      	ldrb	r3, [r7, #4]
 8019268:	4618      	mov	r0, r3
 801926a:	f7ff fdb9 	bl	8018de0 <DEC2BCD>
 801926e:	4603      	mov	r3, r0
 8019270:	461a      	mov	r2, r3
 8019272:	4b59      	ldr	r3, [pc, #356]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 8019274:	551a      	strb	r2, [r3, r4]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 8019276:	bf00      	nop
 8019278:	2307      	movs	r3, #7
 801927a:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK)
 801927c:	2307      	movs	r3, #7
 801927e:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 8019280:	4b55      	ldr	r3, [pc, #340]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 8019282:	4413      	add	r3, r2
 8019284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019288:	9202      	str	r2, [sp, #8]
 801928a:	2204      	movs	r2, #4
 801928c:	9201      	str	r2, [sp, #4]
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	2301      	movs	r3, #1
 8019292:	460a      	mov	r2, r1
 8019294:	21d0      	movs	r1, #208	; 0xd0
 8019296:	4851      	ldr	r0, [pc, #324]	; (80193dc <DS3231_SetAlarm1_Time+0x1fc>)
 8019298:	f7ea f9d8 	bl	800364c <HAL_I2C_Mem_Write>
 801929c:	4603      	mov	r3, r0
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d1ea      	bne.n	8019278 <DS3231_SetAlarm1_Time+0x98>
      ;
    /* read alarm time */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80192a2:	bf00      	nop
 80192a4:	2307      	movs	r3, #7
 80192a6:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK);
 80192a8:	2307      	movs	r3, #7
 80192aa:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80192ac:	4b4a      	ldr	r3, [pc, #296]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 80192ae:	4413      	add	r3, r2
 80192b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192b4:	9202      	str	r2, [sp, #8]
 80192b6:	2204      	movs	r2, #4
 80192b8:	9201      	str	r2, [sp, #4]
 80192ba:	9300      	str	r3, [sp, #0]
 80192bc:	2301      	movs	r3, #1
 80192be:	460a      	mov	r2, r1
 80192c0:	21d0      	movs	r1, #208	; 0xd0
 80192c2:	4846      	ldr	r0, [pc, #280]	; (80193dc <DS3231_SetAlarm1_Time+0x1fc>)
 80192c4:	f7ea fad4 	bl	8003870 <HAL_I2C_Mem_Read>
 80192c8:	4603      	mov	r3, r0
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d1ea      	bne.n	80192a4 <DS3231_SetAlarm1_Time+0xc4>
    /* if alarm time set right, flag as 1 */
    if ((BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_dydt]) == date) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_hour]) == hour) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_min]) == mintue) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_sec]) == second))
 80192ce:	230a      	movs	r3, #10
 80192d0:	461a      	mov	r2, r3
 80192d2:	4b41      	ldr	r3, [pc, #260]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 80192d4:	5c9b      	ldrb	r3, [r3, r2]
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7ff fd6c 	bl	8018db4 <BCD2DEC>
 80192dc:	4603      	mov	r3, r0
 80192de:	461a      	mov	r2, r3
 80192e0:	79fb      	ldrb	r3, [r7, #7]
 80192e2:	4293      	cmp	r3, r2
 80192e4:	d125      	bne.n	8019332 <DS3231_SetAlarm1_Time+0x152>
 80192e6:	2309      	movs	r3, #9
 80192e8:	461a      	mov	r2, r3
 80192ea:	4b3b      	ldr	r3, [pc, #236]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 80192ec:	5c9b      	ldrb	r3, [r3, r2]
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ff fd60 	bl	8018db4 <BCD2DEC>
 80192f4:	4603      	mov	r3, r0
 80192f6:	461a      	mov	r2, r3
 80192f8:	79bb      	ldrb	r3, [r7, #6]
 80192fa:	4293      	cmp	r3, r2
 80192fc:	d119      	bne.n	8019332 <DS3231_SetAlarm1_Time+0x152>
 80192fe:	2308      	movs	r3, #8
 8019300:	461a      	mov	r2, r3
 8019302:	4b35      	ldr	r3, [pc, #212]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 8019304:	5c9b      	ldrb	r3, [r3, r2]
 8019306:	4618      	mov	r0, r3
 8019308:	f7ff fd54 	bl	8018db4 <BCD2DEC>
 801930c:	4603      	mov	r3, r0
 801930e:	461a      	mov	r2, r3
 8019310:	797b      	ldrb	r3, [r7, #5]
 8019312:	4293      	cmp	r3, r2
 8019314:	d10d      	bne.n	8019332 <DS3231_SetAlarm1_Time+0x152>
 8019316:	2307      	movs	r3, #7
 8019318:	461a      	mov	r2, r3
 801931a:	4b2f      	ldr	r3, [pc, #188]	; (80193d8 <DS3231_SetAlarm1_Time+0x1f8>)
 801931c:	5c9b      	ldrb	r3, [r3, r2]
 801931e:	4618      	mov	r0, r3
 8019320:	f7ff fd48 	bl	8018db4 <BCD2DEC>
 8019324:	4603      	mov	r3, r0
 8019326:	461a      	mov	r2, r3
 8019328:	793b      	ldrb	r3, [r7, #4]
 801932a:	4293      	cmp	r3, r2
 801932c:	d101      	bne.n	8019332 <DS3231_SetAlarm1_Time+0x152>
      alarm_flag = 1;
 801932e:	2301      	movs	r3, #1
 8019330:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 8019332:	7bfb      	ldrb	r3, [r7, #15]
 8019334:	2b00      	cmp	r3, #0
 8019336:	f43f af67 	beq.w	8019208 <DS3231_SetAlarm1_Time+0x28>
  }
  alarm_flag = 0;
 801933a:	2300      	movs	r3, #0
 801933c:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 801933e:	e042      	b.n	80193c6 <DS3231_SetAlarm1_Time+0x1e6>
  {
    printf("Enable alarm\n");
 8019340:	4827      	ldr	r0, [pc, #156]	; (80193e0 <DS3231_SetAlarm1_Time+0x200>)
 8019342:	f008 ffb7 	bl	80222b4 <puts>
    // Enable the A1IE and INTCN in Control (0Eh)
    DS3231.Control |= 0x05;
 8019346:	4b27      	ldr	r3, [pc, #156]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 8019348:	7a5b      	ldrb	r3, [r3, #9]
 801934a:	f043 0305 	orr.w	r3, r3, #5
 801934e:	b2da      	uxtb	r2, r3
 8019350:	4b24      	ldr	r3, [pc, #144]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 8019352:	725a      	strb	r2, [r3, #9]
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Status &= 0xFC;
 8019354:	4b23      	ldr	r3, [pc, #140]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 8019356:	7a9b      	ldrb	r3, [r3, #10]
 8019358:	f023 0303 	bic.w	r3, r3, #3
 801935c:	b2da      	uxtb	r2, r3
 801935e:	4b21      	ldr	r3, [pc, #132]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 8019360:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019362:	bf00      	nop
 8019364:	230e      	movs	r3, #14
 8019366:	b29a      	uxth	r2, r3
 8019368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801936c:	9302      	str	r3, [sp, #8]
 801936e:	2302      	movs	r3, #2
 8019370:	9301      	str	r3, [sp, #4]
 8019372:	4b1d      	ldr	r3, [pc, #116]	; (80193e8 <DS3231_SetAlarm1_Time+0x208>)
 8019374:	9300      	str	r3, [sp, #0]
 8019376:	2301      	movs	r3, #1
 8019378:	21d0      	movs	r1, #208	; 0xd0
 801937a:	4818      	ldr	r0, [pc, #96]	; (80193dc <DS3231_SetAlarm1_Time+0x1fc>)
 801937c:	f7ea f966 	bl	800364c <HAL_I2C_Mem_Write>
 8019380:	4603      	mov	r3, r0
 8019382:	2b00      	cmp	r3, #0
 8019384:	d1ee      	bne.n	8019364 <DS3231_SetAlarm1_Time+0x184>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm enable */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019386:	bf00      	nop
 8019388:	230e      	movs	r3, #14
 801938a:	b29a      	uxth	r2, r3
 801938c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019390:	9302      	str	r3, [sp, #8]
 8019392:	2302      	movs	r3, #2
 8019394:	9301      	str	r3, [sp, #4]
 8019396:	4b14      	ldr	r3, [pc, #80]	; (80193e8 <DS3231_SetAlarm1_Time+0x208>)
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	2301      	movs	r3, #1
 801939c:	21d0      	movs	r1, #208	; 0xd0
 801939e:	480f      	ldr	r0, [pc, #60]	; (80193dc <DS3231_SetAlarm1_Time+0x1fc>)
 80193a0:	f7ea fa66 	bl	8003870 <HAL_I2C_Mem_Read>
 80193a4:	4603      	mov	r3, r0
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d1ee      	bne.n	8019388 <DS3231_SetAlarm1_Time+0x1a8>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((DS3231.Control & 0x05) && (!(DS3231.Status & 0x03)))
 80193aa:	4b0e      	ldr	r3, [pc, #56]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 80193ac:	7a5b      	ldrb	r3, [r3, #9]
 80193ae:	f003 0305 	and.w	r3, r3, #5
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d007      	beq.n	80193c6 <DS3231_SetAlarm1_Time+0x1e6>
 80193b6:	4b0b      	ldr	r3, [pc, #44]	; (80193e4 <DS3231_SetAlarm1_Time+0x204>)
 80193b8:	7a9b      	ldrb	r3, [r3, #10]
 80193ba:	f003 0303 	and.w	r3, r3, #3
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d101      	bne.n	80193c6 <DS3231_SetAlarm1_Time+0x1e6>
      alarm_flag = 1;
 80193c2:	2301      	movs	r3, #1
 80193c4:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 80193c6:	7bfb      	ldrb	r3, [r7, #15]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d0b9      	beq.n	8019340 <DS3231_SetAlarm1_Time+0x160>
  }
  #endif
}
 80193cc:	bf00      	nop
 80193ce:	3714      	adds	r7, #20
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd90      	pop	{r4, r7, pc}
 80193d4:	080258f0 	.word	0x080258f0
 80193d8:	20001e30 	.word	0x20001e30
 80193dc:	200010e0 	.word	0x200010e0
 80193e0:	080258fc 	.word	0x080258fc
 80193e4:	20001e44 	.word	0x20001e44
 80193e8:	20001e4d 	.word	0x20001e4d

080193ec <HAL_I2C_MemRxCpltCallback>:
  * @brief  IRQ callback of received I2C via HAL_I2C_Mem_Read_IT
  * @param  hi2c
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c2.Instance)
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681a      	ldr	r2, [r3, #0]
 80193f8:	4b31      	ldr	r3, [pc, #196]	; (80194c0 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d15b      	bne.n	80194b8 <HAL_I2C_MemRxCpltCallback+0xcc>
  {
    DS3231.flag = 1;
 8019400:	4b30      	ldr	r3, [pc, #192]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019402:	2201      	movs	r2, #1
 8019404:	741a      	strb	r2, [r3, #16]
    DS3231.Second = BCD2DEC(DS3231_Buff[DS3231_memaddr.sec]);
 8019406:	2300      	movs	r3, #0
 8019408:	461a      	mov	r2, r3
 801940a:	4b2f      	ldr	r3, [pc, #188]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 801940c:	5c9b      	ldrb	r3, [r3, r2]
 801940e:	4618      	mov	r0, r3
 8019410:	f7ff fcd0 	bl	8018db4 <BCD2DEC>
 8019414:	4603      	mov	r3, r0
 8019416:	461a      	mov	r2, r3
 8019418:	4b2a      	ldr	r3, [pc, #168]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 801941a:	719a      	strb	r2, [r3, #6]
    DS3231.Minute = BCD2DEC(DS3231_Buff[DS3231_memaddr.min]);
 801941c:	2301      	movs	r3, #1
 801941e:	461a      	mov	r2, r3
 8019420:	4b29      	ldr	r3, [pc, #164]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019422:	5c9b      	ldrb	r3, [r3, r2]
 8019424:	4618      	mov	r0, r3
 8019426:	f7ff fcc5 	bl	8018db4 <BCD2DEC>
 801942a:	4603      	mov	r3, r0
 801942c:	461a      	mov	r2, r3
 801942e:	4b25      	ldr	r3, [pc, #148]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019430:	715a      	strb	r2, [r3, #5]
    DS3231.Hour = BCD2DEC(DS3231_Buff[DS3231_memaddr.hour]);
 8019432:	2302      	movs	r3, #2
 8019434:	461a      	mov	r2, r3
 8019436:	4b24      	ldr	r3, [pc, #144]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019438:	5c9b      	ldrb	r3, [r3, r2]
 801943a:	4618      	mov	r0, r3
 801943c:	f7ff fcba 	bl	8018db4 <BCD2DEC>
 8019440:	4603      	mov	r3, r0
 8019442:	461a      	mov	r2, r3
 8019444:	4b1f      	ldr	r3, [pc, #124]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019446:	711a      	strb	r2, [r3, #4]
    DS3231.Day = BCD2DEC(DS3231_Buff[DS3231_memaddr.day]);
 8019448:	2303      	movs	r3, #3
 801944a:	461a      	mov	r2, r3
 801944c:	4b1e      	ldr	r3, [pc, #120]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 801944e:	5c9b      	ldrb	r3, [r3, r2]
 8019450:	4618      	mov	r0, r3
 8019452:	f7ff fcaf 	bl	8018db4 <BCD2DEC>
 8019456:	4603      	mov	r3, r0
 8019458:	461a      	mov	r2, r3
 801945a:	4b1a      	ldr	r3, [pc, #104]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 801945c:	709a      	strb	r2, [r3, #2]
    DS3231.Date = BCD2DEC(DS3231_Buff[DS3231_memaddr.date]);
 801945e:	2304      	movs	r3, #4
 8019460:	461a      	mov	r2, r3
 8019462:	4b19      	ldr	r3, [pc, #100]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019464:	5c9b      	ldrb	r3, [r3, r2]
 8019466:	4618      	mov	r0, r3
 8019468:	f7ff fca4 	bl	8018db4 <BCD2DEC>
 801946c:	4603      	mov	r3, r0
 801946e:	461a      	mov	r2, r3
 8019470:	4b14      	ldr	r3, [pc, #80]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019472:	70da      	strb	r2, [r3, #3]
    DS3231.Month = BCD2DEC(DS3231_Buff[DS3231_memaddr.month]);
 8019474:	2305      	movs	r3, #5
 8019476:	461a      	mov	r2, r3
 8019478:	4b13      	ldr	r3, [pc, #76]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 801947a:	5c9b      	ldrb	r3, [r3, r2]
 801947c:	4618      	mov	r0, r3
 801947e:	f7ff fc99 	bl	8018db4 <BCD2DEC>
 8019482:	4603      	mov	r3, r0
 8019484:	461a      	mov	r2, r3
 8019486:	4b0f      	ldr	r3, [pc, #60]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019488:	705a      	strb	r2, [r3, #1]
    DS3231.Year = BCD2DEC(DS3231_Buff[DS3231_memaddr.year]);
 801948a:	2306      	movs	r3, #6
 801948c:	461a      	mov	r2, r3
 801948e:	4b0e      	ldr	r3, [pc, #56]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019490:	5c9b      	ldrb	r3, [r3, r2]
 8019492:	4618      	mov	r0, r3
 8019494:	f7ff fc8e 	bl	8018db4 <BCD2DEC>
 8019498:	4603      	mov	r3, r0
 801949a:	461a      	mov	r2, r3
 801949c:	4b09      	ldr	r3, [pc, #36]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 801949e:	701a      	strb	r2, [r3, #0]
    DS3231.Control = DS3231_Buff[DS3231_memaddr.control];
 80194a0:	230e      	movs	r3, #14
 80194a2:	461a      	mov	r2, r3
 80194a4:	4b08      	ldr	r3, [pc, #32]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 80194a6:	5c9a      	ldrb	r2, [r3, r2]
 80194a8:	4b06      	ldr	r3, [pc, #24]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 80194aa:	725a      	strb	r2, [r3, #9]
    DS3231.Status = DS3231_Buff[DS3231_memaddr.status];
 80194ac:	230f      	movs	r3, #15
 80194ae:	461a      	mov	r2, r3
 80194b0:	4b05      	ldr	r3, [pc, #20]	; (80194c8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 80194b2:	5c9a      	ldrb	r2, [r3, r2]
 80194b4:	4b03      	ldr	r3, [pc, #12]	; (80194c4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 80194b6:	729a      	strb	r2, [r3, #10]
  }
}
 80194b8:	bf00      	nop
 80194ba:	3708      	adds	r7, #8
 80194bc:	46bd      	mov	sp, r7
 80194be:	bd80      	pop	{r7, pc}
 80194c0:	200010e0 	.word	0x200010e0
 80194c4:	20001e44 	.word	0x20001e44
 80194c8:	20001e30 	.word	0x20001e30

080194cc <HAL_I2C_MemTxCpltCallback>:
  * @brief  IRQ callback of transmitted I2C via HAL_I2C_Mem_Write_IT
  * @param  hi2c
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c2.Instance)
  {
  }
}
 80194d4:	bf00      	nop
 80194d6:	370c      	adds	r7, #12
 80194d8:	46bd      	mov	sp, r7
 80194da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194de:	4770      	bx	lr

080194e0 <NVIC_SystemReset>:
{
 80194e0:	b480      	push	{r7}
 80194e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80194e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80194e8:	4b05      	ldr	r3, [pc, #20]	; (8019500 <NVIC_SystemReset+0x20>)
 80194ea:	68db      	ldr	r3, [r3, #12]
 80194ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80194f0:	4903      	ldr	r1, [pc, #12]	; (8019500 <NVIC_SystemReset+0x20>)
 80194f2:	4b04      	ldr	r3, [pc, #16]	; (8019504 <NVIC_SystemReset+0x24>)
 80194f4:	4313      	orrs	r3, r2
 80194f6:	60cb      	str	r3, [r1, #12]
 80194f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80194fc:	bf00      	nop
    __NOP();
 80194fe:	e7fd      	b.n	80194fc <NVIC_SystemReset+0x1c>
 8019500:	e000ed00 	.word	0xe000ed00
 8019504:	05fa0004 	.word	0x05fa0004

08019508 <jp_fread>:
};

/**
 * Read a buffer off the stream
 */
static size_t jp_fread(janpatch_ctx *ctx, void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 8019508:	b590      	push	{r4, r7, lr}
 801950a:	b087      	sub	sp, #28
 801950c:	af00      	add	r7, sp, #0
 801950e:	60f8      	str	r0, [r7, #12]
 8019510:	60b9      	str	r1, [r7, #8]
 8019512:	607a      	str	r2, [r7, #4]
 8019514:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801951a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801951c:	6910      	ldr	r0, [r2, #16]
 801951e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019520:	6951      	ldr	r1, [r2, #20]
 8019522:	2200      	movs	r2, #0
 8019524:	4798      	blx	r3

    size_t bytes_read = ctx->fread(ptr, size, count, buffer->stream);
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952c:	691b      	ldr	r3, [r3, #16]
 801952e:	683a      	ldr	r2, [r7, #0]
 8019530:	6879      	ldr	r1, [r7, #4]
 8019532:	68b8      	ldr	r0, [r7, #8]
 8019534:	47a0      	blx	r4
 8019536:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_read;
 8019538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953a:	695b      	ldr	r3, [r3, #20]
 801953c:	461a      	mov	r2, r3
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	4413      	add	r3, r2
 8019542:	461a      	mov	r2, r3
 8019544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019546:	615a      	str	r2, [r3, #20]

    return bytes_read;
 8019548:	697b      	ldr	r3, [r7, #20]
}
 801954a:	4618      	mov	r0, r3
 801954c:	371c      	adds	r7, #28
 801954e:	46bd      	mov	sp, r7
 8019550:	bd90      	pop	{r4, r7, pc}

08019552 <jp_fwrite>:

/**
 * Write a buffer to the stream
 */
static size_t jp_fwrite(janpatch_ctx *ctx, const void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 8019552:	b590      	push	{r4, r7, lr}
 8019554:	b087      	sub	sp, #28
 8019556:	af00      	add	r7, sp, #0
 8019558:	60f8      	str	r0, [r7, #12]
 801955a:	60b9      	str	r1, [r7, #8]
 801955c:	607a      	str	r2, [r7, #4]
 801955e:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019566:	6910      	ldr	r0, [r2, #16]
 8019568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801956a:	6951      	ldr	r1, [r2, #20]
 801956c:	2200      	movs	r2, #0
 801956e:	4798      	blx	r3

    size_t bytes_written = ctx->fwrite(ptr, size, count, buffer->stream);
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019576:	691b      	ldr	r3, [r3, #16]
 8019578:	683a      	ldr	r2, [r7, #0]
 801957a:	6879      	ldr	r1, [r7, #4]
 801957c:	68b8      	ldr	r0, [r7, #8]
 801957e:	47a0      	blx	r4
 8019580:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_written;
 8019582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019584:	695b      	ldr	r3, [r3, #20]
 8019586:	461a      	mov	r2, r3
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	4413      	add	r3, r2
 801958c:	461a      	mov	r2, r3
 801958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019590:	615a      	str	r2, [r3, #20]

    return bytes_written;
 8019592:	697b      	ldr	r3, [r7, #20]
}
 8019594:	4618      	mov	r0, r3
 8019596:	371c      	adds	r7, #28
 8019598:	46bd      	mov	sp, r7
 801959a:	bd90      	pop	{r4, r7, pc}

0801959c <jp_fseek>:

/**
 * Set position of the stream
 */
static int jp_fseek(janpatch_buffer *buffer, long int offset, int origin) {
 801959c:	b580      	push	{r7, lr}
 801959e:	b084      	sub	sp, #16
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET) {
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d103      	bne.n	80195b6 <jp_fseek+0x1a>
        buffer->position = offset;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	68ba      	ldr	r2, [r7, #8]
 80195b2:	615a      	str	r2, [r3, #20]
 80195b4:	e010      	b.n	80195d8 <jp_fseek+0x3c>
    }
    else if (origin == SEEK_CUR) {
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2b01      	cmp	r3, #1
 80195ba:	d106      	bne.n	80195ca <jp_fseek+0x2e>
        buffer->position += offset;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	695a      	ldr	r2, [r3, #20]
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	441a      	add	r2, r3
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	615a      	str	r2, [r3, #20]
 80195c8:	e006      	b.n	80195d8 <jp_fseek+0x3c>
    }
    else {
        JANPATCH_ERROR("Origin %d not supported in jp_fseek (only SEEK_CUR,SEEK_SET)\n", origin);
 80195ca:	6879      	ldr	r1, [r7, #4]
 80195cc:	4805      	ldr	r0, [pc, #20]	; (80195e4 <jp_fseek+0x48>)
 80195ce:	f008 fde9 	bl	80221a4 <iprintf>
        return -1;
 80195d2:	f04f 33ff 	mov.w	r3, #4294967295
 80195d6:	e000      	b.n	80195da <jp_fseek+0x3e>
    }
    return 0;
 80195d8:	2300      	movs	r3, #0
}
 80195da:	4618      	mov	r0, r3
 80195dc:	3710      	adds	r7, #16
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	0802590c 	.word	0x0802590c

080195e8 <jp_getc>:


/**
 * Get a character from the stream
 */
static int jp_getc(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b088      	sub	sp, #32
 80195ec:	af02      	add	r7, sp, #8
 80195ee:	6078      	str	r0, [r7, #4]
 80195f0:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 80195f2:	683b      	ldr	r3, [r7, #0]
 80195f4:	695b      	ldr	r3, [r3, #20]
 80195f6:	617b      	str	r3, [r7, #20]
    if (position < 0) return -1;
 80195f8:	697b      	ldr	r3, [r7, #20]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	da02      	bge.n	8019604 <jp_getc+0x1c>
 80195fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019602:	e044      	b.n	801968e <jp_getc+0xa6>

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 8019604:	697a      	ldr	r2, [r7, #20]
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	fbb2 f3f3 	udiv	r3, r2, r3
 801960e:	613b      	str	r3, [r7, #16]

    if (page != buffer->current_page) {
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	689b      	ldr	r3, [r3, #8]
 8019614:	693a      	ldr	r2, [r7, #16]
 8019616:	429a      	cmp	r2, r3
 8019618:	d01a      	beq.n	8019650 <jp_getc+0x68>
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	693a      	ldr	r2, [r7, #16]
 8019620:	fb02 f303 	mul.w	r3, r2, r3
 8019624:	2200      	movs	r2, #0
 8019626:	4619      	mov	r1, r3
 8019628:	6838      	ldr	r0, [r7, #0]
 801962a:	f7ff ffb7 	bl	801959c <jp_fseek>
        buffer->current_page_size = jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	6819      	ldr	r1, [r3, #0]
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	685a      	ldr	r2, [r3, #4]
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	9300      	str	r3, [sp, #0]
 801963a:	4613      	mov	r3, r2
 801963c:	2201      	movs	r2, #1
 801963e:	6878      	ldr	r0, [r7, #4]
 8019640:	f7ff ff62 	bl	8019508 <jp_fread>
 8019644:	4602      	mov	r2, r0
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	693a      	ldr	r2, [r7, #16]
 801964e:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	683a      	ldr	r2, [r7, #0]
 8019654:	6852      	ldr	r2, [r2, #4]
 8019656:	fbb3 f1f2 	udiv	r1, r3, r2
 801965a:	fb02 f201 	mul.w	r2, r2, r1
 801965e:	1a9b      	subs	r3, r3, r2
 8019660:	60fb      	str	r3, [r7, #12]

    if ((size_t)position_in_page >= buffer->current_page_size) {
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	68da      	ldr	r2, [r3, #12]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	429a      	cmp	r2, r3
 801966a:	d802      	bhi.n	8019672 <jp_getc+0x8a>
        return EOF;
 801966c:	f04f 33ff 	mov.w	r3, #4294967295
 8019670:	e00d      	b.n	801968e <jp_getc+0xa6>
    }

    unsigned char b = buffer->buffer[position_in_page];
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	681a      	ldr	r2, [r3, #0]
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	4413      	add	r3, r2
 801967a:	781b      	ldrb	r3, [r3, #0]
 801967c:	72fb      	strb	r3, [r7, #11]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	3301      	adds	r3, #1
 8019682:	2200      	movs	r2, #0
 8019684:	4619      	mov	r1, r3
 8019686:	6838      	ldr	r0, [r7, #0]
 8019688:	f7ff ff88 	bl	801959c <jp_fseek>
    return b;
 801968c:	7afb      	ldrb	r3, [r7, #11]
}
 801968e:	4618      	mov	r0, r3
 8019690:	3718      	adds	r7, #24
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}

08019696 <jp_putc>:

/**
 * Write a character to a stream
 */
static int jp_putc(int c, janpatch_ctx* ctx, janpatch_buffer* buffer) {
 8019696:	b580      	push	{r7, lr}
 8019698:	b08a      	sub	sp, #40	; 0x28
 801969a:	af02      	add	r7, sp, #8
 801969c:	60f8      	str	r0, [r7, #12]
 801969e:	60b9      	str	r1, [r7, #8]
 80196a0:	607a      	str	r2, [r7, #4]
    long position = buffer->position;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	695b      	ldr	r3, [r3, #20]
 80196a6:	61fb      	str	r3, [r7, #28]
    if (position < 0) {
 80196a8:	69fb      	ldr	r3, [r7, #28]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	da02      	bge.n	80196b4 <jp_putc+0x1e>
        return -1;
 80196ae:	f04f 33ff 	mov.w	r3, #4294967295
 80196b2:	e06a      	b.n	801978a <jp_putc+0xf4>
    }

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 80196b4:	69fa      	ldr	r2, [r7, #28]
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80196be:	61bb      	str	r3, [r7, #24]

    if (page != buffer->current_page) {
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	689b      	ldr	r3, [r3, #8]
 80196c4:	69ba      	ldr	r2, [r7, #24]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	d047      	beq.n	801975a <jp_putc+0xc4>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	689b      	ldr	r3, [r3, #8]
 80196ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196d2:	d026      	beq.n	8019722 <jp_putc+0x8c>

            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	689b      	ldr	r3, [r3, #8]
 80196d8:	687a      	ldr	r2, [r7, #4]
 80196da:	6852      	ldr	r2, [r2, #4]
 80196dc:	fb02 f303 	mul.w	r3, r2, r3
 80196e0:	2200      	movs	r2, #0
 80196e2:	4619      	mov	r1, r3
 80196e4:	6878      	ldr	r0, [r7, #4]
 80196e6:	f7ff ff59 	bl	801959c <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6819      	ldr	r1, [r3, #0]
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	68da      	ldr	r2, [r3, #12]
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	9300      	str	r3, [sp, #0]
 80196f6:	4613      	mov	r3, r2
 80196f8:	2201      	movs	r2, #1
 80196fa:	68b8      	ldr	r0, [r7, #8]
 80196fc:	f7ff ff29 	bl	8019552 <jp_fwrite>

            if (ctx->progress) {
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019704:	2b00      	cmp	r3, #0
 8019706:	d00c      	beq.n	8019722 <jp_putc+0x8c>
                ctx->progress(position * 100 / ctx->max_file_size);
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801970c:	69fa      	ldr	r2, [r7, #28]
 801970e:	2164      	movs	r1, #100	; 0x64
 8019710:	fb01 f102 	mul.w	r1, r1, r2
 8019714:	68ba      	ldr	r2, [r7, #8]
 8019716:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019718:	fb91 f2f2 	sdiv	r2, r1, r2
 801971c:	b2d2      	uxtb	r2, r2
 801971e:	4610      	mov	r0, r2
 8019720:	4798      	blx	r3
            }
        }

        // and read the next page...
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	685b      	ldr	r3, [r3, #4]
 8019726:	69ba      	ldr	r2, [r7, #24]
 8019728:	fb02 f303 	mul.w	r3, r2, r3
 801972c:	2200      	movs	r2, #0
 801972e:	4619      	mov	r1, r3
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f7ff ff33 	bl	801959c <jp_fseek>
        jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6819      	ldr	r1, [r3, #0]
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	685a      	ldr	r2, [r3, #4]
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	9300      	str	r3, [sp, #0]
 8019742:	4613      	mov	r3, r2
 8019744:	2201      	movs	r2, #1
 8019746:	68b8      	ldr	r0, [r7, #8]
 8019748:	f7ff fede 	bl	8019508 <jp_fread>
        buffer->current_page_size = buffer->size;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	685a      	ldr	r2, [r3, #4]
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	69ba      	ldr	r2, [r7, #24]
 8019758:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 801975a:	69fb      	ldr	r3, [r7, #28]
 801975c:	687a      	ldr	r2, [r7, #4]
 801975e:	6852      	ldr	r2, [r2, #4]
 8019760:	fbb3 f1f2 	udiv	r1, r3, r2
 8019764:	fb02 f201 	mul.w	r2, r2, r1
 8019768:	1a9b      	subs	r3, r3, r2
 801976a:	617b      	str	r3, [r7, #20]

    buffer->buffer[position_in_page] = (unsigned char)c;
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	4413      	add	r3, r2
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	b2d2      	uxtb	r2, r2
 8019778:	701a      	strb	r2, [r3, #0]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	3301      	adds	r3, #1
 801977e:	2200      	movs	r2, #0
 8019780:	4619      	mov	r1, r3
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f7ff ff0a 	bl	801959c <jp_fseek>

    return 0;
 8019788:	2300      	movs	r3, #0
}
 801978a:	4618      	mov	r0, r3
 801978c:	3720      	adds	r7, #32
 801978e:	46bd      	mov	sp, r7
 8019790:	bd80      	pop	{r7, pc}

08019792 <jp_final_flush>:

static uint32_t jp_final_flush(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 8019792:	b580      	push	{r7, lr}
 8019794:	b088      	sub	sp, #32
 8019796:	af02      	add	r7, sp, #8
 8019798:	6078      	str	r0, [r7, #4]
 801979a:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	695b      	ldr	r3, [r3, #20]
 80197a0:	617b      	str	r3, [r7, #20]
    int position_in_page = position % buffer->size;
 80197a2:	697b      	ldr	r3, [r7, #20]
 80197a4:	683a      	ldr	r2, [r7, #0]
 80197a6:	6852      	ldr	r2, [r2, #4]
 80197a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80197ac:	fb02 f201 	mul.w	r2, r2, r1
 80197b0:	1a9b      	subs	r3, r3, r2
 80197b2:	613b      	str	r3, [r7, #16]

    uint32_t page = ((unsigned long)position) / buffer->size;
 80197b4:	697a      	ldr	r2, [r7, #20]
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	685b      	ldr	r3, [r3, #4]
 80197ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80197be:	60fb      	str	r3, [r7, #12]

    // if the page has changed we also need to flush the previous page
    // this can happen when the last operation (e.g. jp_putc) has just crossed page boundary
    if (page != buffer->current_page) {
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	689b      	ldr	r3, [r3, #8]
 80197c4:	68fa      	ldr	r2, [r7, #12]
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d01a      	beq.n	8019800 <jp_final_flush+0x6e>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	689b      	ldr	r3, [r3, #8]
 80197ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197d2:	d015      	beq.n	8019800 <jp_final_flush+0x6e>
            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 80197d4:	683b      	ldr	r3, [r7, #0]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	683a      	ldr	r2, [r7, #0]
 80197da:	6852      	ldr	r2, [r2, #4]
 80197dc:	fb02 f303 	mul.w	r3, r2, r3
 80197e0:	2200      	movs	r2, #0
 80197e2:	4619      	mov	r1, r3
 80197e4:	6838      	ldr	r0, [r7, #0]
 80197e6:	f7ff fed9 	bl	801959c <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	6819      	ldr	r1, [r3, #0]
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	68da      	ldr	r2, [r3, #12]
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	9300      	str	r3, [sp, #0]
 80197f6:	4613      	mov	r3, r2
 80197f8:	2201      	movs	r2, #1
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7ff fea9 	bl	8019552 <jp_fwrite>
        }
    }

    // flush the new page buffer
    jp_fseek(buffer, page * buffer->size, SEEK_SET);
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	685b      	ldr	r3, [r3, #4]
 8019804:	68fa      	ldr	r2, [r7, #12]
 8019806:	fb02 f303 	mul.w	r3, r2, r3
 801980a:	2200      	movs	r2, #0
 801980c:	4619      	mov	r1, r3
 801980e:	6838      	ldr	r0, [r7, #0]
 8019810:	f7ff fec4 	bl	801959c <jp_fseek>
    uint32_t last_size = jp_fwrite(ctx, buffer->buffer, 1, position_in_page, buffer);
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	6819      	ldr	r1, [r3, #0]
 8019818:	693a      	ldr	r2, [r7, #16]
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	9300      	str	r3, [sp, #0]
 801981e:	4613      	mov	r3, r2
 8019820:	2201      	movs	r2, #1
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f7ff fe95 	bl	8019552 <jp_fwrite>
 8019828:	60b8      	str	r0, [r7, #8]

    if (ctx->progress) {
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801982e:	2b00      	cmp	r3, #0
 8019830:	d003      	beq.n	801983a <jp_final_flush+0xa8>
        ctx->progress(100);
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019836:	2064      	movs	r0, #100	; 0x64
 8019838:	4798      	blx	r3
    }
    return last_size;
 801983a:	68bb      	ldr	r3, [r7, #8]
}
 801983c:	4618      	mov	r0, r3
 801983e:	3718      	adds	r7, #24
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <process_mod>:

static void process_mod(janpatch_ctx *ctx, janpatch_buffer *source, janpatch_buffer *patch, janpatch_buffer *target, bool up_source_stream) {
 8019844:	b580      	push	{r7, lr}
 8019846:	b086      	sub	sp, #24
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	607a      	str	r2, [r7, #4]
 8019850:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 8019852:	2300      	movs	r3, #0
 8019854:	617b      	str	r3, [r7, #20]
    while (1) {
        cnt++;
 8019856:	697b      	ldr	r3, [r7, #20]
 8019858:	3301      	adds	r3, #1
 801985a:	617b      	str	r3, [r7, #20]
        int m = jp_getc(ctx, patch);
 801985c:	6879      	ldr	r1, [r7, #4]
 801985e:	68f8      	ldr	r0, [r7, #12]
 8019860:	f7ff fec2 	bl	80195e8 <jp_getc>
 8019864:	6138      	str	r0, [r7, #16]
        if (m == -1) {
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801986c:	d106      	bne.n	801987c <process_mod+0x38>
            // End of file stream... rewind 1 character and return, this will yield back to janpatch main function, which will exit
            jp_fseek(source, -1, SEEK_CUR);
 801986e:	2201      	movs	r2, #1
 8019870:	f04f 31ff 	mov.w	r1, #4294967295
 8019874:	68b8      	ldr	r0, [r7, #8]
 8019876:	f7ff fe91 	bl	801959c <jp_fseek>
            return;
 801987a:	e056      	b.n	801992a <process_mod+0xe6>
        }
        // JANPATCH_DEBUG("%02x ", m);
        // so... if it's *NOT* an ESC character, just write it to the target stream
        if (m != JANPATCH_OPERATION_ESC) {
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	2ba7      	cmp	r3, #167	; 0xa7
 8019880:	d00e      	beq.n	80198a0 <process_mod+0x5c>
            // JANPATCH_DEBUG("NOT ESC\n");
            jp_putc(m, ctx, target);
 8019882:	683a      	ldr	r2, [r7, #0]
 8019884:	68f9      	ldr	r1, [r7, #12]
 8019886:	6938      	ldr	r0, [r7, #16]
 8019888:	f7ff ff05 	bl	8019696 <jp_putc>
            if (up_source_stream) {
 801988c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d048      	beq.n	8019926 <process_mod+0xe2>
                jp_fseek(source, 1, SEEK_CUR); // and up source
 8019894:	2201      	movs	r2, #1
 8019896:	2101      	movs	r1, #1
 8019898:	68b8      	ldr	r0, [r7, #8]
 801989a:	f7ff fe7f 	bl	801959c <jp_fseek>
            }
            continue;
 801989e:	e042      	b.n	8019926 <process_mod+0xe2>
        }

        // read the next character to see what we should do
        m = jp_getc(ctx, patch);
 80198a0:	6879      	ldr	r1, [r7, #4]
 80198a2:	68f8      	ldr	r0, [r7, #12]
 80198a4:	f7ff fea0 	bl	80195e8 <jp_getc>
 80198a8:	6138      	str	r0, [r7, #16]
        // JANPATCH_DEBUG("%02x ", m);

        if (m == -1) {
 80198aa:	693b      	ldr	r3, [r7, #16]
 80198ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b0:	d106      	bne.n	80198c0 <process_mod+0x7c>
            // End of file stream... rewind 1 character and return, this will yield back to janpatch main function, which will exit
            jp_fseek(source, -1, SEEK_CUR);
 80198b2:	2201      	movs	r2, #1
 80198b4:	f04f 31ff 	mov.w	r1, #4294967295
 80198b8:	68b8      	ldr	r0, [r7, #8]
 80198ba:	f7ff fe6f 	bl	801959c <jp_fseek>
            return;
 80198be:	e034      	b.n	801992a <process_mod+0xe6>
        }

        // if the character after this is *not* an operator (except ESC)
        if (m == JANPATCH_OPERATION_ESC) {
 80198c0:	693b      	ldr	r3, [r7, #16]
 80198c2:	2ba7      	cmp	r3, #167	; 0xa7
 80198c4:	d10e      	bne.n	80198e4 <process_mod+0xa0>
            // JANPATCH_DEBUG("ESC, NEXT CHAR ALSO ESC\n");
            jp_putc(m, ctx, target);
 80198c6:	683a      	ldr	r2, [r7, #0]
 80198c8:	68f9      	ldr	r1, [r7, #12]
 80198ca:	6938      	ldr	r0, [r7, #16]
 80198cc:	f7ff fee3 	bl	8019696 <jp_putc>
            if (up_source_stream) {
 80198d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d0be      	beq.n	8019856 <process_mod+0x12>
                jp_fseek(source, 1, SEEK_CUR);
 80198d8:	2201      	movs	r2, #1
 80198da:	2101      	movs	r1, #1
 80198dc:	68b8      	ldr	r0, [r7, #8]
 80198de:	f7ff fe5d 	bl	801959c <jp_fseek>
 80198e2:	e7b8      	b.n	8019856 <process_mod+0x12>
            }
        }
        else if (m >= 0xA2 && m <= 0xA6) { // character after this is an operator? Then roll back two characters and exit
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	2ba1      	cmp	r3, #161	; 0xa1
 80198e8:	dd09      	ble.n	80198fe <process_mod+0xba>
 80198ea:	693b      	ldr	r3, [r7, #16]
 80198ec:	2ba6      	cmp	r3, #166	; 0xa6
 80198ee:	dc06      	bgt.n	80198fe <process_mod+0xba>
            // JANPATCH_DEBUG("ESC, THEN OPERATOR\n");
            jp_fseek(patch, -2, SEEK_CUR);
 80198f0:	2201      	movs	r2, #1
 80198f2:	f06f 0101 	mvn.w	r1, #1
 80198f6:	6878      	ldr	r0, [r7, #4]
 80198f8:	f7ff fe50 	bl	801959c <jp_fseek>
            break;
 80198fc:	e015      	b.n	801992a <process_mod+0xe6>
        }
        else { // else... write both the ESC and m
            // JANPATCH_DEBUG("ESC, BUT NO OPERATOR\n");
            jp_putc(JANPATCH_OPERATION_ESC, ctx, target);
 80198fe:	683a      	ldr	r2, [r7, #0]
 8019900:	68f9      	ldr	r1, [r7, #12]
 8019902:	20a7      	movs	r0, #167	; 0xa7
 8019904:	f7ff fec7 	bl	8019696 <jp_putc>
            jp_putc(m, ctx, target);
 8019908:	683a      	ldr	r2, [r7, #0]
 801990a:	68f9      	ldr	r1, [r7, #12]
 801990c:	6938      	ldr	r0, [r7, #16]
 801990e:	f7ff fec2 	bl	8019696 <jp_putc>
            if (up_source_stream) {
 8019912:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d09d      	beq.n	8019856 <process_mod+0x12>
                jp_fseek(source, 2, SEEK_CUR); // up source by 2
 801991a:	2201      	movs	r2, #1
 801991c:	2102      	movs	r1, #2
 801991e:	68b8      	ldr	r0, [r7, #8]
 8019920:	f7ff fe3c 	bl	801959c <jp_fseek>
 8019924:	e797      	b.n	8019856 <process_mod+0x12>
            continue;
 8019926:	bf00      	nop
    while (1) {
 8019928:	e795      	b.n	8019856 <process_mod+0x12>
            }
        }
    }
}
 801992a:	3718      	adds	r7, #24
 801992c:	46bd      	mov	sp, r7
 801992e:	bd80      	pop	{r7, pc}

08019930 <find_length>:

static int find_length(janpatch_ctx *ctx, janpatch_buffer *buffer) {
 8019930:	b590      	push	{r4, r7, lr}
 8019932:	b08b      	sub	sp, #44	; 0x2c
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
 8019938:	6039      	str	r1, [r7, #0]
    * If byte[0] is between 1..251 => use byte[0] + 1
    * If byte[0] is 252 => use ???
    * If byte[0] is 253 => use (byte[1] << 8) + byte[2]
    * If byte[0] is 254 => use (byte[1] << 16) + (byte[2] << 8) + byte[3] (NOT VERIFIED)
    */
    uint8_t l = jp_getc(ctx, buffer);
 801993a:	6839      	ldr	r1, [r7, #0]
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	f7ff fe53 	bl	80195e8 <jp_getc>
 8019942:	4603      	mov	r3, r0
 8019944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (l <= 251) {
 8019948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801994c:	2bfb      	cmp	r3, #251	; 0xfb
 801994e:	d803      	bhi.n	8019958 <find_length+0x28>
        return l + 1;
 8019950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019954:	3301      	adds	r3, #1
 8019956:	e050      	b.n	80199fa <find_length+0xca>
    }
    else if (l == 252) {
 8019958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801995c:	2bfc      	cmp	r3, #252	; 0xfc
 801995e:	d109      	bne.n	8019974 <find_length+0x44>
        return l + jp_getc(ctx, buffer) + 1;
 8019960:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8019964:	6839      	ldr	r1, [r7, #0]
 8019966:	6878      	ldr	r0, [r7, #4]
 8019968:	f7ff fe3e 	bl	80195e8 <jp_getc>
 801996c:	4603      	mov	r3, r0
 801996e:	4423      	add	r3, r4
 8019970:	3301      	adds	r3, #1
 8019972:	e042      	b.n	80199fa <find_length+0xca>
    }
    else if (l == 253) {
 8019974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019978:	2bfd      	cmp	r3, #253	; 0xfd
 801997a:	d10f      	bne.n	801999c <find_length+0x6c>
        int lh = (jp_getc(ctx, buffer) << 8), ll = jp_getc(ctx, buffer);
 801997c:	6839      	ldr	r1, [r7, #0]
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f7ff fe32 	bl	80195e8 <jp_getc>
 8019984:	4603      	mov	r3, r0
 8019986:	021b      	lsls	r3, r3, #8
 8019988:	613b      	str	r3, [r7, #16]
 801998a:	6839      	ldr	r1, [r7, #0]
 801998c:	6878      	ldr	r0, [r7, #4]
 801998e:	f7ff fe2b 	bl	80195e8 <jp_getc>
 8019992:	60f8      	str	r0, [r7, #12]
        return lh + ll;
 8019994:	693a      	ldr	r2, [r7, #16]
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	4413      	add	r3, r2
 801999a:	e02e      	b.n	80199fa <find_length+0xca>
        // return (jp_getc(ctx, buffer) << 8) + jp_getc(ctx, buffer);
    }
    else if (l == 254) {
 801999c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199a0:	2bfe      	cmp	r3, #254	; 0xfe
 80199a2:	d121      	bne.n	80199e8 <find_length+0xb8>
        int hh = (jp_getc(ctx, buffer) << 24), hl = (jp_getc(ctx, buffer) << 16),
 80199a4:	6839      	ldr	r1, [r7, #0]
 80199a6:	6878      	ldr	r0, [r7, #4]
 80199a8:	f7ff fe1e 	bl	80195e8 <jp_getc>
 80199ac:	4603      	mov	r3, r0
 80199ae:	061b      	lsls	r3, r3, #24
 80199b0:	623b      	str	r3, [r7, #32]
 80199b2:	6839      	ldr	r1, [r7, #0]
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7ff fe17 	bl	80195e8 <jp_getc>
 80199ba:	4603      	mov	r3, r0
 80199bc:	041b      	lsls	r3, r3, #16
 80199be:	61fb      	str	r3, [r7, #28]
            lh = (jp_getc(ctx, buffer) << 8), ll = jp_getc(ctx, buffer);
 80199c0:	6839      	ldr	r1, [r7, #0]
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f7ff fe10 	bl	80195e8 <jp_getc>
 80199c8:	4603      	mov	r3, r0
 80199ca:	021b      	lsls	r3, r3, #8
 80199cc:	61bb      	str	r3, [r7, #24]
 80199ce:	6839      	ldr	r1, [r7, #0]
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	f7ff fe09 	bl	80195e8 <jp_getc>
 80199d6:	6178      	str	r0, [r7, #20]
        return hh + hl + lh + ll;
 80199d8:	6a3a      	ldr	r2, [r7, #32]
 80199da:	69fb      	ldr	r3, [r7, #28]
 80199dc:	441a      	add	r2, r3
 80199de:	69bb      	ldr	r3, [r7, #24]
 80199e0:	441a      	add	r2, r3
 80199e2:	697b      	ldr	r3, [r7, #20]
 80199e4:	4413      	add	r3, r2
 80199e6:	e008      	b.n	80199fa <find_length+0xca>
        // return (jp_getc(ctx, buffer) << 24) + (jp_getc(ctx, buffer) << 16) + (jp_getc(ctx, buffer) << 8) + (jp_getc(ctx, buffer));
    }
    else {
        JANPATCH_ERROR("EQL followed by unexpected byte %02x %02x\n", JANPATCH_OPERATION_EQL, l);
 80199e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199ec:	461a      	mov	r2, r3
 80199ee:	21a3      	movs	r1, #163	; 0xa3
 80199f0:	4804      	ldr	r0, [pc, #16]	; (8019a04 <find_length+0xd4>)
 80199f2:	f008 fbd7 	bl	80221a4 <iprintf>
        return -1;
 80199f6:	f04f 33ff 	mov.w	r3, #4294967295
    }

    // it's fine if we get over the end of the stream here, will be caught by the next function
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	372c      	adds	r7, #44	; 0x2c
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd90      	pop	{r4, r7, pc}
 8019a02:	bf00      	nop
 8019a04:	0802594c 	.word	0x0802594c

08019a08 <janpatch>:

static int janpatch(janpatch_ctx ctx, JANPATCH_STREAM *source, JANPATCH_STREAM *patch, JANPATCH_STREAM *target) {
 8019a08:	b084      	sub	sp, #16
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b088      	sub	sp, #32
 8019a0e:	af02      	add	r7, sp, #8
 8019a10:	f107 0c20 	add.w	ip, r7, #32
 8019a14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    ctx.source_buffer.current_page = 0xffffffff;
 8019a18:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.patch_buffer.current_page = 0xffffffff;
 8019a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019a22:	643b      	str	r3, [r7, #64]	; 0x40
    ctx.target_buffer.current_page = 0xffffffff;
 8019a24:	f04f 33ff 	mov.w	r3, #4294967295
 8019a28:	65bb      	str	r3, [r7, #88]	; 0x58

    ctx.source_buffer.position = 0;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	637b      	str	r3, [r7, #52]	; 0x34
    ctx.patch_buffer.position = 0;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	64fb      	str	r3, [r7, #76]	; 0x4c
    ctx.target_buffer.position = 0;
 8019a32:	2300      	movs	r3, #0
 8019a34:	667b      	str	r3, [r7, #100]	; 0x64

    ctx.source_buffer.stream = source;
 8019a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019a38:	633b      	str	r3, [r7, #48]	; 0x30
    ctx.patch_buffer.stream = patch;
 8019a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019a3e:	64bb      	str	r3, [r7, #72]	; 0x48
    ctx.target_buffer.stream = target;
 8019a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019a44:	663b      	str	r3, [r7, #96]	; 0x60

    // look at the size of the source file...
    if (ctx.progress != NULL) {
 8019a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d020      	beq.n	8019a8e <janpatch+0x86>
        ctx.max_file_size = source->file_size;
 8019a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019a4e:	68db      	ldr	r3, [r3, #12]
 8019a50:	67bb      	str	r3, [r7, #120]	; 0x78
        JANPATCH_DEBUG("Source file page is %ld\n", source->file_size);
 8019a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019a54:	68db      	ldr	r3, [r3, #12]
 8019a56:	4619      	mov	r1, r3
 8019a58:	489a      	ldr	r0, [pc, #616]	; (8019cc4 <janpatch+0x2bc>)
 8019a5a:	f008 fba3 	bl	80221a4 <iprintf>
        ctx.fseek(source, 0, SEEK_SET);
 8019a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a60:	2200      	movs	r2, #0
 8019a62:	2100      	movs	r1, #0
 8019a64:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8019a66:	4798      	blx	r3

        // and at the size of the patch file
        ctx.max_file_size += patch->file_size;
 8019a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019a6a:	461a      	mov	r2, r3
 8019a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019a70:	68db      	ldr	r3, [r3, #12]
 8019a72:	4413      	add	r3, r2
 8019a74:	67bb      	str	r3, [r7, #120]	; 0x78
        JANPATCH_DEBUG("Now max file page is %ld\n", ctx.max_file_size);
 8019a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019a78:	4619      	mov	r1, r3
 8019a7a:	4893      	ldr	r0, [pc, #588]	; (8019cc8 <janpatch+0x2c0>)
 8019a7c:	f008 fb92 	bl	80221a4 <iprintf>
        ctx.fseek(patch, 0, SEEK_SET);
 8019a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a82:	2200      	movs	r2, #0
 8019a84:	2100      	movs	r1, #0
 8019a86:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8019a8a:	4798      	blx	r3
 8019a8c:	e0f1      	b.n	8019c72 <janpatch+0x26a>
    }
    else {
        ctx.progress = NULL;
 8019a8e:	2300      	movs	r3, #0
 8019a90:	677b      	str	r3, [r7, #116]	; 0x74
    }

    int c;
    while ((c = jp_getc(&ctx, &ctx.patch_buffer)) != EOF) {
 8019a92:	e0ee      	b.n	8019c72 <janpatch+0x26a>
        if (c == JANPATCH_OPERATION_ESC) {
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	2ba7      	cmp	r3, #167	; 0xa7
 8019a98:	f040 80df 	bne.w	8019c5a <janpatch+0x252>
            switch ((c = jp_getc(&ctx, &ctx.patch_buffer))) {
 8019a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019aa0:	4619      	mov	r1, r3
 8019aa2:	f107 0020 	add.w	r0, r7, #32
 8019aa6:	f7ff fd9f 	bl	80195e8 <jp_getc>
 8019aaa:	6138      	str	r0, [r7, #16]
 8019aac:	693b      	ldr	r3, [r7, #16]
 8019aae:	2ba3      	cmp	r3, #163	; 0xa3
 8019ab0:	d010      	beq.n	8019ad4 <janpatch+0xcc>
 8019ab2:	2ba3      	cmp	r3, #163	; 0xa3
 8019ab4:	dc06      	bgt.n	8019ac4 <janpatch+0xbc>
 8019ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aba:	f000 80ba 	beq.w	8019c32 <janpatch+0x22a>
 8019abe:	2ba2      	cmp	r3, #162	; 0xa2
 8019ac0:	d06f      	beq.n	8019ba2 <janpatch+0x19a>
 8019ac2:	e0be      	b.n	8019c42 <janpatch+0x23a>
 8019ac4:	2ba5      	cmp	r3, #165	; 0xa5
 8019ac6:	d05b      	beq.n	8019b80 <janpatch+0x178>
 8019ac8:	2ba5      	cmp	r3, #165	; 0xa5
 8019aca:	f2c0 8090 	blt.w	8019bee <janpatch+0x1e6>
 8019ace:	2ba6      	cmp	r3, #166	; 0xa6
 8019ad0:	d045      	beq.n	8019b5e <janpatch+0x156>
 8019ad2:	e0b6      	b.n	8019c42 <janpatch+0x23a>
                case JANPATCH_OPERATION_EQL: {
                    int length = find_length(&ctx, &ctx.patch_buffer);
 8019ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019ad8:	4619      	mov	r1, r3
 8019ada:	f107 0020 	add.w	r0, r7, #32
 8019ade:	f7ff ff27 	bl	8019930 <find_length>
 8019ae2:	60b8      	str	r0, [r7, #8]
                    if (length == -1) {
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aea:	d10a      	bne.n	8019b02 <janpatch+0xfa>
                        JANPATCH_ERROR("EQL length invalid\n");
 8019aec:	4877      	ldr	r0, [pc, #476]	; (8019ccc <janpatch+0x2c4>)
 8019aee:	f008 fbe1 	bl	80222b4 <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019af2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019af8:	4875      	ldr	r0, [pc, #468]	; (8019cd0 <janpatch+0x2c8>)
 8019afa:	f008 fb53 	bl	80221a4 <iprintf>
                        return 1;
 8019afe:	2301      	movs	r3, #1
 8019b00:	e0d9      	b.n	8019cb6 <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("EQL: %d bytes\n", length);
 8019b02:	68b9      	ldr	r1, [r7, #8]
 8019b04:	4873      	ldr	r0, [pc, #460]	; (8019cd4 <janpatch+0x2cc>)
 8019b06:	f008 fb4d 	bl	80221a4 <iprintf>

                    for (int ix = 0; ix < length; ix++) {
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	617b      	str	r3, [r7, #20]
 8019b0e:	e021      	b.n	8019b54 <janpatch+0x14c>
                        int r = jp_getc(&ctx, &ctx.source_buffer);
 8019b10:	f107 0120 	add.w	r1, r7, #32
 8019b14:	f107 0020 	add.w	r0, r7, #32
 8019b18:	f7ff fd66 	bl	80195e8 <jp_getc>
 8019b1c:	6078      	str	r0, [r7, #4]
                        if (r < -1) {
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b24:	da0b      	bge.n	8019b3e <janpatch+0x136>
                            JANPATCH_ERROR("fread returned %d, but expected character\n", r);
 8019b26:	6879      	ldr	r1, [r7, #4]
 8019b28:	486b      	ldr	r0, [pc, #428]	; (8019cd8 <janpatch+0x2d0>)
 8019b2a:	f008 fb3b 	bl	80221a4 <iprintf>
                            JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019b2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019b34:	4866      	ldr	r0, [pc, #408]	; (8019cd0 <janpatch+0x2c8>)
 8019b36:	f008 fb35 	bl	80221a4 <iprintf>
                            return 1;
 8019b3a:	2301      	movs	r3, #1
 8019b3c:	e0bb      	b.n	8019cb6 <janpatch+0x2ae>
                        }

                        jp_putc(r, &ctx, &ctx.target_buffer);
 8019b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019b42:	461a      	mov	r2, r3
 8019b44:	f107 0120 	add.w	r1, r7, #32
 8019b48:	6878      	ldr	r0, [r7, #4]
 8019b4a:	f7ff fda4 	bl	8019696 <jp_putc>
                    for (int ix = 0; ix < length; ix++) {
 8019b4e:	697b      	ldr	r3, [r7, #20]
 8019b50:	3301      	adds	r3, #1
 8019b52:	617b      	str	r3, [r7, #20]
 8019b54:	697a      	ldr	r2, [r7, #20]
 8019b56:	68bb      	ldr	r3, [r7, #8]
 8019b58:	429a      	cmp	r2, r3
 8019b5a:	dbd9      	blt.n	8019b10 <janpatch+0x108>
                    }

                    break;
 8019b5c:	e089      	b.n	8019c72 <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_MOD: {
                    JANPATCH_DEBUG("MOD: ");
 8019b5e:	485f      	ldr	r0, [pc, #380]	; (8019cdc <janpatch+0x2d4>)
 8019b60:	f008 fb20 	bl	80221a4 <iprintf>

                    // MOD means to modify the next series of bytes
                    // so just write everything (until the next ESC sequence) to the target JANPATCH_STREAM
                    // but also up the position in the source JANPATCH_STREAM every time
                    process_mod(&ctx, &ctx.source_buffer, &ctx.patch_buffer, &ctx.target_buffer, true);
 8019b64:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8019b68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019b6c:	2301      	movs	r3, #1
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	460b      	mov	r3, r1
 8019b72:	f107 0120 	add.w	r1, r7, #32
 8019b76:	f107 0020 	add.w	r0, r7, #32
 8019b7a:	f7ff fe63 	bl	8019844 <process_mod>
                    break;
 8019b7e:	e078      	b.n	8019c72 <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_INS: {
                    JANPATCH_DEBUG("INS: ");
 8019b80:	4857      	ldr	r0, [pc, #348]	; (8019ce0 <janpatch+0x2d8>)
 8019b82:	f008 fb0f 	bl	80221a4 <iprintf>
                    // INS inserts the sequence in the new JANPATCH_STREAM, but does not up the position of the source JANPATCH_STREAM
                    // so just write everything (until the next ESC sequence) to the target JANPATCH_STREAM

                    process_mod(&ctx, &ctx.source_buffer, &ctx.patch_buffer, &ctx.target_buffer, false);
 8019b86:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8019b8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019b8e:	2300      	movs	r3, #0
 8019b90:	9300      	str	r3, [sp, #0]
 8019b92:	460b      	mov	r3, r1
 8019b94:	f107 0120 	add.w	r1, r7, #32
 8019b98:	f107 0020 	add.w	r0, r7, #32
 8019b9c:	f7ff fe52 	bl	8019844 <process_mod>
                    break;
 8019ba0:	e067      	b.n	8019c72 <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_BKT: {
                    // BKT = backtrace, seek back in source JANPATCH_STREAM with X bytes...
                    int length = find_length(&ctx, &ctx.patch_buffer);
 8019ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019ba6:	4619      	mov	r1, r3
 8019ba8:	f107 0020 	add.w	r0, r7, #32
 8019bac:	f7ff fec0 	bl	8019930 <find_length>
 8019bb0:	6038      	str	r0, [r7, #0]
                    if (length == -1) {
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bb8:	d10a      	bne.n	8019bd0 <janpatch+0x1c8>
                        JANPATCH_ERROR("BKT length invalid\n");
 8019bba:	484a      	ldr	r0, [pc, #296]	; (8019ce4 <janpatch+0x2dc>)
 8019bbc:	f008 fb7a 	bl	80222b4 <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019bc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019bc6:	4842      	ldr	r0, [pc, #264]	; (8019cd0 <janpatch+0x2c8>)
 8019bc8:	f008 faec 	bl	80221a4 <iprintf>
                        return 1;
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e072      	b.n	8019cb6 <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("BKT: %d bytes\n", -length);
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	425b      	negs	r3, r3
 8019bd4:	4619      	mov	r1, r3
 8019bd6:	4844      	ldr	r0, [pc, #272]	; (8019ce8 <janpatch+0x2e0>)
 8019bd8:	f008 fae4 	bl	80221a4 <iprintf>

                    jp_fseek(&ctx.source_buffer, -length, SEEK_CUR);
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	425b      	negs	r3, r3
 8019be0:	2201      	movs	r2, #1
 8019be2:	4619      	mov	r1, r3
 8019be4:	f107 0020 	add.w	r0, r7, #32
 8019be8:	f7ff fcd8 	bl	801959c <jp_fseek>

                    break;
 8019bec:	e041      	b.n	8019c72 <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_DEL: {
                    // DEL deletes bytes, so up the source stream with X bytes
                    int length = find_length(&ctx, &ctx.patch_buffer);
 8019bee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019bf2:	4619      	mov	r1, r3
 8019bf4:	f107 0020 	add.w	r0, r7, #32
 8019bf8:	f7ff fe9a 	bl	8019930 <find_length>
 8019bfc:	60f8      	str	r0, [r7, #12]
                    if (length == -1) {
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c04:	d10a      	bne.n	8019c1c <janpatch+0x214>
                        JANPATCH_ERROR("DEL length invalid\n");
 8019c06:	4839      	ldr	r0, [pc, #228]	; (8019cec <janpatch+0x2e4>)
 8019c08:	f008 fb54 	bl	80222b4 <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c12:	482f      	ldr	r0, [pc, #188]	; (8019cd0 <janpatch+0x2c8>)
 8019c14:	f008 fac6 	bl	80221a4 <iprintf>
                        return 1;
 8019c18:	2301      	movs	r3, #1
 8019c1a:	e04c      	b.n	8019cb6 <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("DEL: %d bytes\n", length);
 8019c1c:	68f9      	ldr	r1, [r7, #12]
 8019c1e:	4834      	ldr	r0, [pc, #208]	; (8019cf0 <janpatch+0x2e8>)
 8019c20:	f008 fac0 	bl	80221a4 <iprintf>

                    jp_fseek(&ctx.source_buffer, length, SEEK_CUR);
 8019c24:	2201      	movs	r2, #1
 8019c26:	68f9      	ldr	r1, [r7, #12]
 8019c28:	f107 0020 	add.w	r0, r7, #32
 8019c2c:	f7ff fcb6 	bl	801959c <jp_fseek>
                    break;
 8019c30:	e01f      	b.n	8019c72 <janpatch+0x26a>
                }
                case -1: {
                    // End of file stream... rewind 1 character and break, this will yield back to main loop
                    jp_fseek(&ctx.source_buffer, -1, SEEK_CUR);
 8019c32:	2201      	movs	r2, #1
 8019c34:	f04f 31ff 	mov.w	r1, #4294967295
 8019c38:	f107 0020 	add.w	r0, r7, #32
 8019c3c:	f7ff fcae 	bl	801959c <jp_fseek>
                    break;
 8019c40:	e017      	b.n	8019c72 <janpatch+0x26a>
                }
                default: {
                    JANPATCH_ERROR("Unsupported operator %02x\n", c);
 8019c42:	6939      	ldr	r1, [r7, #16]
 8019c44:	482b      	ldr	r0, [pc, #172]	; (8019cf4 <janpatch+0x2ec>)
 8019c46:	f008 faad 	bl	80221a4 <iprintf>
                    JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019c4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c50:	481f      	ldr	r0, [pc, #124]	; (8019cd0 <janpatch+0x2c8>)
 8019c52:	f008 faa7 	bl	80221a4 <iprintf>
                    return 1;
 8019c56:	2301      	movs	r3, #1
 8019c58:	e02d      	b.n	8019cb6 <janpatch+0x2ae>
                }
            }
        }
        else {
            JANPATCH_ERROR("Expected ESC but got %02x\n", c);
 8019c5a:	6939      	ldr	r1, [r7, #16]
 8019c5c:	4826      	ldr	r0, [pc, #152]	; (8019cf8 <janpatch+0x2f0>)
 8019c5e:	f008 faa1 	bl	80221a4 <iprintf>
            JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019c62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c68:	4819      	ldr	r0, [pc, #100]	; (8019cd0 <janpatch+0x2c8>)
 8019c6a:	f008 fa9b 	bl	80221a4 <iprintf>

            return 1;
 8019c6e:	2301      	movs	r3, #1
 8019c70:	e021      	b.n	8019cb6 <janpatch+0x2ae>
    while ((c = jp_getc(&ctx, &ctx.patch_buffer)) != EOF) {
 8019c72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c76:	4619      	mov	r1, r3
 8019c78:	f107 0020 	add.w	r0, r7, #32
 8019c7c:	f7ff fcb4 	bl	80195e8 <jp_getc>
 8019c80:	6138      	str	r0, [r7, #16]
 8019c82:	693b      	ldr	r3, [r7, #16]
 8019c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c88:	f47f af04 	bne.w	8019a94 <janpatch+0x8c>
        }
    }

    target->file_size = jp_final_flush(&ctx, &ctx.target_buffer) + (ctx.target_buffer.stream->now_page - ctx.target_buffer.stream->origin_page) * ctx.target_buffer.size;
 8019c8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019c90:	4619      	mov	r1, r3
 8019c92:	f107 0020 	add.w	r0, r7, #32
 8019c96:	f7ff fd7c 	bl	8019792 <jp_final_flush>
 8019c9a:	4601      	mov	r1, r0
 8019c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019c9e:	689a      	ldr	r2, [r3, #8]
 8019ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	1ad3      	subs	r3, r2, r3
 8019ca6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ca8:	fb02 f303 	mul.w	r3, r2, r3
 8019cac:	18ca      	adds	r2, r1, r3
 8019cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019cb2:	60da      	str	r2, [r3, #12]

    return 0;
 8019cb4:	2300      	movs	r3, #0
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3718      	adds	r7, #24
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019cc0:	b004      	add	sp, #16
 8019cc2:	4770      	bx	lr
 8019cc4:	08025978 	.word	0x08025978
 8019cc8:	08025994 	.word	0x08025994
 8019ccc:	080259b0 	.word	0x080259b0
 8019cd0:	080259c4 	.word	0x080259c4
 8019cd4:	080259f4 	.word	0x080259f4
 8019cd8:	08025a04 	.word	0x08025a04
 8019cdc:	08025a30 	.word	0x08025a30
 8019ce0:	08025a38 	.word	0x08025a38
 8019ce4:	08025a40 	.word	0x08025a40
 8019ce8:	08025a54 	.word	0x08025a54
 8019cec:	08025a64 	.word	0x08025a64
 8019cf0:	08025a78 	.word	0x08025a78
 8019cf4:	08025a88 	.word	0x08025a88
 8019cf8:	08025aa4 	.word	0x08025aa4

08019cfc <Bank1_WRP>:
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */

uint32_t Bank1_WRP(uint32_t strtA_offset, uint32_t endA_offset)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b08e      	sub	sp, #56	; 0x38
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
 8019d04:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_FLASH_PAGE(strtA_offset));
	assert_param(IS_FLASH_PAGE(endA_offset));
	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 8019d06:	f7e8 fafd 	bl	8002304 <HAL_FLASH_Unlock>
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 8019d10:	f7e8 fb2a 	bl	8002368 <HAL_FLASH_OB_Unlock>
 8019d14:	4603      	mov	r3, r0
 8019d16:	461a      	mov	r2, r3
 8019d18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019d1c:	4313      	orrs	r3, r2
 8019d1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 8019d22:	23aa      	movs	r3, #170	; 0xaa
 8019d24:	61fb      	str	r3, [r7, #28]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8019d26:	2301      	movs	r3, #1
 8019d28:	60fb      	str	r3, [r7, #12]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPEndOffset = endA_offset;
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	61bb      	str	r3, [r7, #24]
	OptionsBytesStruct1.WRPStartOffset = strtA_offset;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	617b      	str	r3, [r7, #20]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8019d36:	f107 030c 	add.w	r3, r7, #12
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	f7e8 fc90 	bl	8002660 <HAL_FLASHEx_OBProgram>
 8019d40:	4603      	mov	r3, r0
 8019d42:	461a      	mov	r2, r3
 8019d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019d48:	4313      	orrs	r3, r2
 8019d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 8019d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d101      	bne.n	8019d5a <Bank1_WRP+0x5e>
 8019d56:	2300      	movs	r3, #0
 8019d58:	e000      	b.n	8019d5c <Bank1_WRP+0x60>
 8019d5a:	2307      	movs	r3, #7
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	3738      	adds	r7, #56	; 0x38
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}

08019d64 <Bank1_nWRP>:
  * @brief  Reset the FLASH_WRP1xR status of daemon flash area.
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */
uint32_t Bank1_nWRP( void )
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b08c      	sub	sp, #48	; 0x30
 8019d68:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;
	HAL_StatusTypeDef retr;

	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 8019d6a:	f7e8 facb 	bl	8002304 <HAL_FLASH_Unlock>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 8019d74:	f7e8 faf8 	bl	8002368 <HAL_FLASH_OB_Unlock>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	461a      	mov	r2, r3
 8019d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d80:	4313      	orrs	r3, r2
 8019d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 8019d86:	23aa      	movs	r3, #170	; 0xaa
 8019d88:	617b      	str	r3, [r7, #20]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8019d8a:	2301      	movs	r3, #1
 8019d8c:	607b      	str	r3, [r7, #4]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8019d8e:	2300      	movs	r3, #0
 8019d90:	60bb      	str	r3, [r7, #8]
	OptionsBytesStruct1.WRPEndOffset = 0x00;
 8019d92:	2300      	movs	r3, #0
 8019d94:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8019d96:	23ff      	movs	r3, #255	; 0xff
 8019d98:	60fb      	str	r3, [r7, #12]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8019d9a:	1d3b      	adds	r3, r7, #4
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7e8 fc5f 	bl	8002660 <HAL_FLASHEx_OBProgram>
 8019da2:	4603      	mov	r3, r0
 8019da4:	461a      	mov	r2, r3
 8019da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019daa:	4313      	orrs	r3, r2
 8019dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAB;
 8019db0:	2301      	movs	r3, #1
 8019db2:	60bb      	str	r3, [r7, #8]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8019db4:	1d3b      	adds	r3, r7, #4
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7e8 fc52 	bl	8002660 <HAL_FLASHEx_OBProgram>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	461a      	mov	r2, r3
 8019dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019dc4:	4313      	orrs	r3, r2
 8019dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 8019dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d101      	bne.n	8019dd6 <Bank1_nWRP+0x72>
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	e000      	b.n	8019dd8 <Bank1_nWRP+0x74>
 8019dd6:	2307      	movs	r3, #7
}
 8019dd8:	4618      	mov	r0, r3
 8019dda:	3730      	adds	r7, #48	; 0x30
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <Bank_WRT_Check>:
 * @description: Read the flag in flash to check if the bank is under write protected, if under WRT, clear the corresponding option bytes and reset the bank to make it effective.
 * @param None
 * @return: None
 */
void Bank_WRT_Check( void )
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b08a      	sub	sp, #40	; 0x28
 8019de4:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8019de6:	f7e8 fa8d 	bl	8002304 <HAL_FLASH_Unlock>

	/* Unlock the Options Bytes *************************************************/
	HAL_FLASH_OB_Unlock();
 8019dea:	f7e8 fabd 	bl	8002368 <HAL_FLASH_OB_Unlock>

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8019dee:	2300      	movs	r3, #0
 8019df0:	607b      	str	r3, [r7, #4]
	HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct1);
 8019df2:	463b      	mov	r3, r7
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7e8 fca1 	bl	800273c <HAL_FLASHEx_OBGetConfig>
	if((OptionsBytesStruct1.WRPStartOffset == 0) && (OptionsBytesStruct1.WRPEndOffset == 0xff))
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d109      	bne.n	8019e14 <Bank_WRT_Check+0x34>
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	2bff      	cmp	r3, #255	; 0xff
 8019e04:	d106      	bne.n	8019e14 <Bank_WRT_Check+0x34>
	{
        /* Boot come back from FUT in Bank 2, need to unlock the write protection of flash */
		if (Bank1_nWRP() == HAL_OK)
 8019e06:	f7ff ffad 	bl	8019d64 <Bank1_nWRP>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d101      	bne.n	8019e14 <Bank_WRT_Check+0x34>
			HAL_FLASH_OB_Launch();
 8019e10:	f7e8 fac6 	bl	80023a0 <HAL_FLASH_OB_Launch>
	}
}
 8019e14:	bf00      	nop
 8019e16:	3728      	adds	r7, #40	; 0x28
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}

08019e1c <the_fseek>:

int the_fseek(Flash_FILE *file, long int offset, int origin)
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b085      	sub	sp, #20
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	60f8      	str	r0, [r7, #12]
 8019e24:	60b9      	str	r1, [r7, #8]
 8019e26:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d107      	bne.n	8019e3e <the_fseek+0x22>
    {
        file->now_page = file->origin_page + offset / FLASH_PAGE;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	685a      	ldr	r2, [r3, #4]
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	0adb      	lsrs	r3, r3, #11
 8019e36:	441a      	add	r2, r3
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	609a      	str	r2, [r3, #8]
 8019e3c:	e00d      	b.n	8019e5a <the_fseek+0x3e>
    }
    else if (origin == SEEK_CUR)
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2b01      	cmp	r3, #1
 8019e42:	d107      	bne.n	8019e54 <the_fseek+0x38>
    {
        file->now_page += offset / FLASH_PAGE;
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	689a      	ldr	r2, [r3, #8]
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	0adb      	lsrs	r3, r3, #11
 8019e4c:	441a      	add	r2, r3
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	609a      	str	r2, [r3, #8]
 8019e52:	e002      	b.n	8019e5a <the_fseek+0x3e>
    }
    else
    {
        return -1;
 8019e54:	f04f 33ff 	mov.w	r3, #4294967295
 8019e58:	e000      	b.n	8019e5c <the_fseek+0x40>
    }
    return 0;
 8019e5a:	2300      	movs	r3, #0
}
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	3714      	adds	r7, #20
 8019e60:	46bd      	mov	sp, r7
 8019e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e66:	4770      	bx	lr

08019e68 <the_fwrite>:

size_t the_fwrite(const void *ptr, size_t size, size_t count, Flash_FILE *file)
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b088      	sub	sp, #32
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	60f8      	str	r0, [r7, #12]
 8019e70:	60b9      	str	r1, [r7, #8]
 8019e72:	607a      	str	r2, [r7, #4]
 8019e74:	603b      	str	r3, [r7, #0]
    // uint32_t BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
    uint8_t bank_active = 0;
 8019e76:	2300      	movs	r3, #0
 8019e78:	77fb      	strb	r3, [r7, #31]
    /* self update or another bank */
    if (!(file->bank))
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d102      	bne.n	8019e88 <the_fwrite+0x20>
        bank_active = 1;
 8019e82:	2301      	movs	r3, #1
 8019e84:	77fb      	strb	r3, [r7, #31]
 8019e86:	e001      	b.n	8019e8c <the_fwrite+0x24>
    else
        bank_active = 0;
 8019e88:	2300      	movs	r3, #0
 8019e8a:	77fb      	strb	r3, [r7, #31]

    FLASH_If_Erase_Pages(bank_active, file->now_page);
 8019e8c:	7ffa      	ldrb	r2, [r7, #31]
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	689b      	ldr	r3, [r3, #8]
 8019e92:	4619      	mov	r1, r3
 8019e94:	4610      	mov	r0, r2
 8019e96:	f002 fad1 	bl	801c43c <FLASH_If_Erase_Pages>
    uint32_t flash_bank_address = (bank_active == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2;
 8019e9a:	7ffb      	ldrb	r3, [r7, #31]
 8019e9c:	2b01      	cmp	r3, #1
 8019e9e:	d102      	bne.n	8019ea6 <the_fwrite+0x3e>
 8019ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019ea4:	e000      	b.n	8019ea8 <the_fwrite+0x40>
 8019ea6:	4b10      	ldr	r3, [pc, #64]	; (8019ee8 <the_fwrite+0x80>)
 8019ea8:	61bb      	str	r3, [r7, #24]
    /* The flash write below is in the double-word form, so we need to ensure the count is multiple of sizeof(uint64_t) */
    /* restore current count */
    size_t temp_count = count;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	617b      	str	r3, [r7, #20]
    if (count % 8)
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f003 0307 	and.w	r3, r3, #7
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d004      	beq.n	8019ec2 <the_fwrite+0x5a>
        count += 8 - (count % 8);
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	f023 0307 	bic.w	r3, r3, #7
 8019ebe:	3308      	adds	r3, #8
 8019ec0:	607b      	str	r3, [r7, #4]
    FLASH_If_Write(flash_bank_address + file->now_page * FLASH_PAGE, (uint32_t *)ptr, count / sizeof(uint32_t));
 8019ec2:	683b      	ldr	r3, [r7, #0]
 8019ec4:	689b      	ldr	r3, [r3, #8]
 8019ec6:	02da      	lsls	r2, r3, #11
 8019ec8:	69bb      	ldr	r3, [r7, #24]
 8019eca:	18d0      	adds	r0, r2, r3
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	089b      	lsrs	r3, r3, #2
 8019ed0:	461a      	mov	r2, r3
 8019ed2:	68f9      	ldr	r1, [r7, #12]
 8019ed4:	f002 fb36 	bl	801c544 <FLASH_If_Write>
    count = temp_count;
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	607b      	str	r3, [r7, #4]
    return count;
 8019edc:	687b      	ldr	r3, [r7, #4]
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	3720      	adds	r7, #32
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	08080000 	.word	0x08080000

08019eec <the_fread>:

size_t the_fread(void *ptr, size_t size, size_t count, Flash_FILE *file)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b088      	sub	sp, #32
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	60b9      	str	r1, [r7, #8]
 8019ef6:	607a      	str	r2, [r7, #4]
 8019ef8:	603b      	str	r3, [r7, #0]
    uint8_t bank_active = 0;
 8019efa:	2300      	movs	r3, #0
 8019efc:	77fb      	strb	r3, [r7, #31]
    /* self update or another bank */
    if (!(file->bank))
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d102      	bne.n	8019f0c <the_fread+0x20>
        bank_active = 1;
 8019f06:	2301      	movs	r3, #1
 8019f08:	77fb      	strb	r3, [r7, #31]
 8019f0a:	e001      	b.n	8019f10 <the_fread+0x24>
    else
        bank_active = 0;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	77fb      	strb	r3, [r7, #31]

    uint32_t flash_bank_address = (bank_active == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2;
 8019f10:	7ffb      	ldrb	r3, [r7, #31]
 8019f12:	2b01      	cmp	r3, #1
 8019f14:	d102      	bne.n	8019f1c <the_fread+0x30>
 8019f16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019f1a:	e000      	b.n	8019f1e <the_fread+0x32>
 8019f1c:	4b12      	ldr	r3, [pc, #72]	; (8019f68 <the_fread+0x7c>)
 8019f1e:	61bb      	str	r3, [r7, #24]

    memcpy((uint32_t *)ptr, (uint32_t *)(flash_bank_address + file->now_page * FLASH_PAGE), count);
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	689b      	ldr	r3, [r3, #8]
 8019f24:	02da      	lsls	r2, r3, #11
 8019f26:	69bb      	ldr	r3, [r7, #24]
 8019f28:	4413      	add	r3, r2
 8019f2a:	687a      	ldr	r2, [r7, #4]
 8019f2c:	4619      	mov	r1, r3
 8019f2e:	68f8      	ldr	r0, [r7, #12]
 8019f30:	f007 fb20 	bl	8021574 <memcpy>
    uint32_t left_count = file->file_size - (file->now_page - file->origin_page) * FLASH_PAGE;
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	68da      	ldr	r2, [r3, #12]
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	6899      	ldr	r1, [r3, #8]
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	685b      	ldr	r3, [r3, #4]
 8019f40:	1acb      	subs	r3, r1, r3
 8019f42:	02db      	lsls	r3, r3, #11
 8019f44:	1ad3      	subs	r3, r2, r3
 8019f46:	617b      	str	r3, [r7, #20]
    // Ensure the real useful bytes are no larger than left bytes
    if ((count > left_count) && (file->file_size))
 8019f48:	687a      	ldr	r2, [r7, #4]
 8019f4a:	697b      	ldr	r3, [r7, #20]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	d905      	bls.n	8019f5c <the_fread+0x70>
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	68db      	ldr	r3, [r3, #12]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d001      	beq.n	8019f5c <the_fread+0x70>
        count = left_count;
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	607b      	str	r3, [r7, #4]
    return count;
 8019f5c:	687b      	ldr	r3, [r7, #4]
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	3720      	adds	r7, #32
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
 8019f66:	bf00      	nop
 8019f68:	08080000 	.word	0x08080000

08019f6c <progress>:

static void progress(uint8_t percentage)
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	4603      	mov	r3, r0
 8019f74:	71fb      	strb	r3, [r7, #7]
    printf("Patch progress: %d%%\n", percentage);
 8019f76:	79fb      	ldrb	r3, [r7, #7]
 8019f78:	4619      	mov	r1, r3
 8019f7a:	4803      	ldr	r0, [pc, #12]	; (8019f88 <progress+0x1c>)
 8019f7c:	f008 f912 	bl	80221a4 <iprintf>
}
 8019f80:	bf00      	nop
 8019f82:	3708      	adds	r7, #8
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	08025ac0 	.word	0x08025ac0

08019f8c <Filepatch>:

Flash_FILE Filepatch(uint8_t originalBank, uint32_t originalPage, uint32_t originalSize, uint8_t patchBank, uint32_t patchPage, uint32_t patchSize, uint8_t newBank, uint32_t newPage)
{
 8019f8c:	b590      	push	{r4, r7, lr}
 8019f8e:	b0bf      	sub	sp, #252	; 0xfc
 8019f90:	af16      	add	r7, sp, #88	; 0x58
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	607a      	str	r2, [r7, #4]
 8019f96:	603b      	str	r3, [r7, #0]
 8019f98:	460b      	mov	r3, r1
 8019f9a:	72fb      	strb	r3, [r7, #11]
    janpatch_ctx ctx = {
 8019f9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019fa0:	225c      	movs	r2, #92	; 0x5c
 8019fa2:	2100      	movs	r1, #0
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f007 faf0 	bl	802158a <memset>
        // fread/fwrite buffers for every file, minimum size is 1 byte
        // when you run on an embedded system with block size flash, set it to the size of a block for best performance
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 8019faa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019fae:	f007 fad1 	bl	8021554 <malloc>
 8019fb2:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 8019fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8019fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019fba:	647b      	str	r3, [r7, #68]	; 0x44
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 8019fbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019fc0:	f007 fac8 	bl	8021554 <malloc>
 8019fc4:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 8019fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8019fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 8019fce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019fd2:	f007 fabf 	bl	8021554 <malloc>
 8019fd6:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 8019fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8019fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019fde:	677b      	str	r3, [r7, #116]	; 0x74
 8019fe0:	4b3e      	ldr	r3, [pc, #248]	; (801a0dc <Filepatch+0x150>)
 8019fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019fe6:	4b3e      	ldr	r3, [pc, #248]	; (801a0e0 <Filepatch+0x154>)
 8019fe8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019fec:	4b3d      	ldr	r3, [pc, #244]	; (801a0e4 <Filepatch+0x158>)
 8019fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019ff2:	4b3d      	ldr	r3, [pc, #244]	; (801a0e8 <Filepatch+0x15c>)
 8019ff4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        &the_fread,
        &the_fwrite,
        &the_fseek,
        &progress};

    Flash_FILE originalFile = {originalBank, originalPage, 0, originalSize};
 8019ff8:	7afb      	ldrb	r3, [r7, #11]
 8019ffa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	637b      	str	r3, [r7, #52]	; 0x34
 801a002:	2300      	movs	r3, #0
 801a004:	63bb      	str	r3, [r7, #56]	; 0x38
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	63fb      	str	r3, [r7, #60]	; 0x3c
    Flash_FILE patchFile = {patchBank, patchPage, 0, patchSize};
 801a00a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a00e:	f887 3020 	strb.w	r3, [r7, #32]
 801a012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a016:	627b      	str	r3, [r7, #36]	; 0x24
 801a018:	2300      	movs	r3, #0
 801a01a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a01c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a020:	62fb      	str	r3, [r7, #44]	; 0x2c
    Flash_FILE newFile = {newBank, newPage};
 801a022:	f107 0310 	add.w	r3, r7, #16
 801a026:	2200      	movs	r2, #0
 801a028:	601a      	str	r2, [r3, #0]
 801a02a:	605a      	str	r2, [r3, #4]
 801a02c:	609a      	str	r2, [r3, #8]
 801a02e:	60da      	str	r2, [r3, #12]
 801a030:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 801a034:	743b      	strb	r3, [r7, #16]
 801a036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a03a:	617b      	str	r3, [r7, #20]

    printf("originalSize:%lu, %lu\n", originalSize, patchSize);
 801a03c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a040:	6839      	ldr	r1, [r7, #0]
 801a042:	482a      	ldr	r0, [pc, #168]	; (801a0ec <Filepatch+0x160>)
 801a044:	f008 f8ae 	bl	80221a4 <iprintf>

    int jpr = janpatch(ctx, &originalFile, &patchFile, &newFile);
 801a048:	f107 0310 	add.w	r3, r7, #16
 801a04c:	9315      	str	r3, [sp, #84]	; 0x54
 801a04e:	f107 0320 	add.w	r3, r7, #32
 801a052:	9314      	str	r3, [sp, #80]	; 0x50
 801a054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a058:	9313      	str	r3, [sp, #76]	; 0x4c
 801a05a:	4668      	mov	r0, sp
 801a05c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a060:	224c      	movs	r2, #76	; 0x4c
 801a062:	4619      	mov	r1, r3
 801a064:	f007 fa86 	bl	8021574 <memcpy>
 801a068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a06c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a06e:	f7ff fccb 	bl	8019a08 <janpatch>
 801a072:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    free(ctx.source_buffer.buffer);
 801a076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a078:	4618      	mov	r0, r3
 801a07a:	f007 fa73 	bl	8021564 <free>
    free(ctx.patch_buffer.buffer);
 801a07e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a080:	4618      	mov	r0, r3
 801a082:	f007 fa6f 	bl	8021564 <free>
    free(ctx.target_buffer.buffer);
 801a086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a088:	4618      	mov	r0, r3
 801a08a:	f007 fa6b 	bl	8021564 <free>

    printf("size:%lu, %u, %lu, %lu, %u, %lu, %u, %lu\n", newFile.file_size, originalBank, originalPage, originalSize, patchBank, patchSize, newBank, newPage);
 801a08e:	69f8      	ldr	r0, [r7, #28]
 801a090:	7afc      	ldrb	r4, [r7, #11]
 801a092:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a096:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 801a09a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801a09e:	9104      	str	r1, [sp, #16]
 801a0a0:	9203      	str	r2, [sp, #12]
 801a0a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a0a6:	9202      	str	r2, [sp, #8]
 801a0a8:	9301      	str	r3, [sp, #4]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	9300      	str	r3, [sp, #0]
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	4622      	mov	r2, r4
 801a0b2:	4601      	mov	r1, r0
 801a0b4:	480e      	ldr	r0, [pc, #56]	; (801a0f0 <Filepatch+0x164>)
 801a0b6:	f008 f875 	bl	80221a4 <iprintf>

    /* Patch failed, set file size as 0 */
    if (jpr)
 801a0ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d001      	beq.n	801a0c6 <Filepatch+0x13a>
        newFile.file_size = 0;
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	61fb      	str	r3, [r7, #28]
    return newFile;
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	461c      	mov	r4, r3
 801a0ca:	f107 0310 	add.w	r3, r7, #16
 801a0ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a0d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801a0d4:	68f8      	ldr	r0, [r7, #12]
 801a0d6:	37a4      	adds	r7, #164	; 0xa4
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bd90      	pop	{r4, r7, pc}
 801a0dc:	08019eed 	.word	0x08019eed
 801a0e0:	08019e69 	.word	0x08019e69
 801a0e4:	08019e1d 	.word	0x08019e1d
 801a0e8:	08019f6d 	.word	0x08019f6d
 801a0ec:	08025ad8 	.word	0x08025ad8
 801a0f0:	08025af0 	.word	0x08025af0

0801a0f4 <FirmwareUpgrade>:

bool FirmwareUpgrade(uint8_t patch_update, uint8_t originalBank, uint32_t originalPage, uint32_t originalSize, uint8_t patchBank, uint32_t patchPage, uint32_t patchSize, uint8_t *md5_code, uint8_t file_compression)
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b09a      	sub	sp, #104	; 0x68
 801a0f8:	af06      	add	r7, sp, #24
 801a0fa:	60ba      	str	r2, [r7, #8]
 801a0fc:	607b      	str	r3, [r7, #4]
 801a0fe:	4603      	mov	r3, r0
 801a100:	73fb      	strb	r3, [r7, #15]
 801a102:	460b      	mov	r3, r1
 801a104:	73bb      	strb	r3, [r7, #14]
    printf("FirmwareUpgrade:%u, %u, %lu, %lu, %u, %lu, %lu, %u\n", patch_update, originalBank, originalPage, originalSize, patchBank, patchPage, patchSize, file_compression);
 801a106:	7bf9      	ldrb	r1, [r7, #15]
 801a108:	7bb8      	ldrb	r0, [r7, #14]
 801a10a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a10e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801a112:	9204      	str	r2, [sp, #16]
 801a114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a116:	9203      	str	r2, [sp, #12]
 801a118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a11a:	9202      	str	r2, [sp, #8]
 801a11c:	9301      	str	r3, [sp, #4]
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	9300      	str	r3, [sp, #0]
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	4602      	mov	r2, r0
 801a126:	48b2      	ldr	r0, [pc, #712]	; (801a3f0 <FirmwareUpgrade+0x2fc>)
 801a128:	f008 f83c 	bl	80221a4 <iprintf>
    uint8_t i;
    if(file_compression)
 801a12c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a130:	2b00      	cmp	r3, #0
 801a132:	f000 8090 	beq.w	801a256 <FirmwareUpgrade+0x162>
        patch daemon: decode file behind patch and move it to the patch location;
        patch FUT: decode file behind patch and move it to the patch location;
        encode for whole firmware:
        decode file behind encode file and move it to the encode location; */
        Flash_FILE encode_file, decode_file;
        encode_file.bank = patch_update?originalBank:1;
 801a136:	7bfb      	ldrb	r3, [r7, #15]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d001      	beq.n	801a140 <FirmwareUpgrade+0x4c>
 801a13c:	7bbb      	ldrb	r3, [r7, #14]
 801a13e:	e000      	b.n	801a142 <FirmwareUpgrade+0x4e>
 801a140:	2301      	movs	r3, #1
 801a142:	f887 3020 	strb.w	r3, [r7, #32]
        encode_file.origin_page = patch_update?patchPage:0;
 801a146:	7bfb      	ldrb	r3, [r7, #15]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d001      	beq.n	801a150 <FirmwareUpgrade+0x5c>
 801a14c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a14e:	e000      	b.n	801a152 <FirmwareUpgrade+0x5e>
 801a150:	2300      	movs	r3, #0
 801a152:	627b      	str	r3, [r7, #36]	; 0x24
        encode_file.file_size = patchSize;
 801a154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a156:	62fb      	str	r3, [r7, #44]	; 0x2c
        decode_file.bank = encode_file.bank;
 801a158:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a15c:	743b      	strb	r3, [r7, #16]
        decode_file.origin_page = encode_file.origin_page + (patchSize + FLASH_PAGE - 1) / FLASH_PAGE;
 801a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a162:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a166:	0adb      	lsrs	r3, r3, #11
 801a168:	4413      	add	r3, r2
 801a16a:	617b      	str	r3, [r7, #20]
        decode_file.file_size = LZSS_decode(&encode_file, &decode_file);
 801a16c:	f107 0210 	add.w	r2, r7, #16
 801a170:	f107 0320 	add.w	r3, r7, #32
 801a174:	4611      	mov	r1, r2
 801a176:	4618      	mov	r0, r3
 801a178:	f000 fbb6 	bl	801a8e8 <LZSS_decode>
 801a17c:	4603      	mov	r3, r0
 801a17e:	61fb      	str	r3, [r7, #28]
        PRINTF("LZSS_decode:%lu\n", decode_file.file_size);
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	4619      	mov	r1, r3
 801a184:	489b      	ldr	r0, [pc, #620]	; (801a3f4 <FirmwareUpgrade+0x300>)
 801a186:	f008 f80d 	bl	80221a4 <iprintf>
        if(!decode_file.file_size)
 801a18a:	69fb      	ldr	r3, [r7, #28]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d101      	bne.n	801a194 <FirmwareUpgrade+0xa0>
            return false;
 801a190:	2300      	movs	r3, #0
 801a192:	e1bb      	b.n	801a50c <FirmwareUpgrade+0x418>
        else
        {
            uint8_t flash_erase_bank = decode_file.bank?0:1;
 801a194:	7c3b      	ldrb	r3, [r7, #16]
 801a196:	2b00      	cmp	r3, #0
 801a198:	bf0c      	ite	eq
 801a19a:	2301      	moveq	r3, #1
 801a19c:	2300      	movne	r3, #0
 801a19e:	b2db      	uxtb	r3, r3
 801a1a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            uint32_t flash_copy_addr = decode_file.bank?FLASH_START_BANK2:FLASH_START_BANK1;
 801a1a4:	7c3b      	ldrb	r3, [r7, #16]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d001      	beq.n	801a1ae <FirmwareUpgrade+0xba>
 801a1aa:	4b93      	ldr	r3, [pc, #588]	; (801a3f8 <FirmwareUpgrade+0x304>)
 801a1ac:	e001      	b.n	801a1b2 <FirmwareUpgrade+0xbe>
 801a1ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a1b2:	64bb      	str	r3, [r7, #72]	; 0x48
            /* Move the decode file to encode file */
            for (i = 0; i < (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a1ba:	e020      	b.n	801a1fe <FirmwareUpgrade+0x10a>
            {
                FLASH_If_Erase_Pages(flash_erase_bank, encode_file.origin_page + i);
 801a1bc:	f897 004d 	ldrb.w	r0, [r7, #77]	; 0x4d
 801a1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a1c6:	4413      	add	r3, r2
 801a1c8:	4619      	mov	r1, r3
 801a1ca:	f002 f937 	bl	801c43c <FLASH_If_Erase_Pages>
                Flash_Bank_Copy_Bank(flash_copy_addr + (decode_file.origin_page + i) * FLASH_PAGE, flash_copy_addr + (encode_file.origin_page + i) * FLASH_PAGE, FLASH_PAGE, 0);
 801a1ce:	697a      	ldr	r2, [r7, #20]
 801a1d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a1d4:	4413      	add	r3, r2
 801a1d6:	02da      	lsls	r2, r3, #11
 801a1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1da:	18d0      	adds	r0, r2, r3
 801a1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a1e2:	4413      	add	r3, r2
 801a1e4:	02da      	lsls	r2, r3, #11
 801a1e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1e8:	18d1      	adds	r1, r2, r3
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a1f0:	f002 fed2 	bl	801cf98 <Flash_Bank_Copy_Bank>
            for (i = 0; i < (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a1f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a1f8:	3301      	adds	r3, #1
 801a1fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a1fe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a202:	69fb      	ldr	r3, [r7, #28]
 801a204:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a208:	0adb      	lsrs	r3, r3, #11
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d3d6      	bcc.n	801a1bc <FirmwareUpgrade+0xc8>
            }
            /* Erase page to the end of decode file */
            for (i = encode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < decode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a210:	b2da      	uxtb	r2, r3
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a218:	0adb      	lsrs	r3, r3, #11
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	4413      	add	r3, r2
 801a21e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a222:	e00c      	b.n	801a23e <FirmwareUpgrade+0x14a>
                FLASH_If_Erase_Pages(flash_erase_bank, i);
 801a224:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801a228:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a22c:	4611      	mov	r1, r2
 801a22e:	4618      	mov	r0, r3
 801a230:	f002 f904 	bl	801c43c <FLASH_If_Erase_Pages>
            for (i = encode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < decode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a234:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a238:	3301      	adds	r3, #1
 801a23a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a23e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a242:	6979      	ldr	r1, [r7, #20]
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a24a:	0adb      	lsrs	r3, r3, #11
 801a24c:	440b      	add	r3, r1
 801a24e:	429a      	cmp	r2, r3
 801a250:	d3e8      	bcc.n	801a224 <FirmwareUpgrade+0x130>

            patchSize = decode_file.file_size;
 801a252:	69fb      	ldr	r3, [r7, #28]
 801a254:	663b      	str	r3, [r7, #96]	; 0x60
    When patching daemon firmware, source file (page 0) and patch file (decided by the size of source file) are located at BANK1, new file (page 0) at BANK2;
    When patching FUT, source file (page 0) and patch file (decided by the size of source file) are located at BANK2, new file (decided by the size of source file and patch file) at BANK2;
    */

    /* 0. The whole process must in bank 1 */
    assert(!READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE));
 801a256:	4b69      	ldr	r3, [pc, #420]	; (801a3fc <FirmwareUpgrade+0x308>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d005      	beq.n	801a26e <FirmwareUpgrade+0x17a>
 801a262:	4b67      	ldr	r3, [pc, #412]	; (801a400 <FirmwareUpgrade+0x30c>)
 801a264:	4a67      	ldr	r2, [pc, #412]	; (801a404 <FirmwareUpgrade+0x310>)
 801a266:	21f7      	movs	r1, #247	; 0xf7
 801a268:	4867      	ldr	r0, [pc, #412]	; (801a408 <FirmwareUpgrade+0x314>)
 801a26a:	f007 f93d 	bl	80214e8 <__assert_func>
    Flash_FILE newFile;
    uint8_t newPage;
    if (patch_update)
 801a26e:	7bfb      	ldrb	r3, [r7, #15]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d078      	beq.n	801a366 <FirmwareUpgrade+0x272>
    {
        /* 1. config patch */
        /*The generated new file must located in bank 2, otherwise it may harm the daemon file */
        uint8_t newBank = 1;
 801a274:	2301      	movs	r3, #1
 801a276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        /* Original file and patch file are in the same bank, original files (daemon or FUT) are in the first page by default, patch file must after the original file */
        assert_reset((originalBank == patchBank) && (originalPage == 0) && (patchPage >= (originalSize + FLASH_PAGE - 1) / FLASH_PAGE));
 801a27a:	7bba      	ldrb	r2, [r7, #14]
 801a27c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a280:	429a      	cmp	r2, r3
 801a282:	d109      	bne.n	801a298 <FirmwareUpgrade+0x1a4>
 801a284:	68bb      	ldr	r3, [r7, #8]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d106      	bne.n	801a298 <FirmwareUpgrade+0x1a4>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a290:	0adb      	lsrs	r3, r3, #11
 801a292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a294:	429a      	cmp	r2, r3
 801a296:	d211      	bcs.n	801a2bc <FirmwareUpgrade+0x1c8>
 801a298:	7bba      	ldrb	r2, [r7, #14]
 801a29a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d10c      	bne.n	801a2bc <FirmwareUpgrade+0x1c8>
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d109      	bne.n	801a2bc <FirmwareUpgrade+0x1c8>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a2ae:	0adb      	lsrs	r3, r3, #11
 801a2b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d202      	bcs.n	801a2bc <FirmwareUpgrade+0x1c8>
  __ASM volatile ("cpsid f" : : : "memory");
 801a2b6:	b671      	cpsid	f
 801a2b8:	f7ff f912 	bl	80194e0 <NVIC_SystemReset>
        /* If original file is in bank 1, we patch the daemon, then we generating new file in bank 2 page 0, otherwise in bank 2 page after patch */
        if (!originalBank)
 801a2bc:	7bbb      	ldrb	r3, [r7, #14]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d103      	bne.n	801a2ca <FirmwareUpgrade+0x1d6>
            newPage = 0;
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801a2c8:	e009      	b.n	801a2de <FirmwareUpgrade+0x1ea>
        else
            newPage = patchPage + (patchSize + FLASH_PAGE - 1) / FLASH_PAGE;
 801a2ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a2cc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a2d0:	0adb      	lsrs	r3, r3, #11
 801a2d2:	b2da      	uxtb	r2, r3
 801a2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2d6:	b2db      	uxtb	r3, r3
 801a2d8:	4413      	add	r3, r2
 801a2da:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        newFile = Filepatch(originalBank, originalPage, originalSize, patchBank, patchPage, patchSize, newBank, newPage);
 801a2de:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801a2e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a2e6:	7bb9      	ldrb	r1, [r7, #14]
 801a2e8:	9304      	str	r3, [sp, #16]
 801a2ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a2ee:	9303      	str	r3, [sp, #12]
 801a2f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a2f2:	9302      	str	r3, [sp, #8]
 801a2f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a2f6:	9301      	str	r3, [sp, #4]
 801a2f8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a2fc:	9300      	str	r3, [sp, #0]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	68ba      	ldr	r2, [r7, #8]
 801a302:	f7ff fe43 	bl	8019f8c <Filepatch>

        /* 2. check patch result */
        if (newFile.file_size)
 801a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d006      	beq.n	801a31a <FirmwareUpgrade+0x226>
            PRINTF("Patch success!:%lu, %lu, %lu\n", newFile.file_size, newFile.origin_page, newFile.now_page);
 801a30c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a312:	483e      	ldr	r0, [pc, #248]	; (801a40c <FirmwareUpgrade+0x318>)
 801a314:	f007 ff46 	bl	80221a4 <iprintf>
 801a318:	e02e      	b.n	801a378 <FirmwareUpgrade+0x284>
        else
        {
            PRINTF("Patch failed!\n");
 801a31a:	483d      	ldr	r0, [pc, #244]	; (801a410 <FirmwareUpgrade+0x31c>)
 801a31c:	f007 ffca 	bl	80222b4 <puts>
            /* If new file is daemon, erase the whole bank 2, else, erase patch file and new file in bank 2 */
            if (!originalBank)
 801a320:	7bbb      	ldrb	r3, [r7, #14]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d103      	bne.n	801a32e <FirmwareUpgrade+0x23a>
                FLASH_If_Erase(0);
 801a326:	2000      	movs	r0, #0
 801a328:	f002 f816 	bl	801c358 <FLASH_If_Erase>
 801a32c:	e019      	b.n	801a362 <FirmwareUpgrade+0x26e>
            else
            {
                for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a32e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a334:	e00a      	b.n	801a34c <FirmwareUpgrade+0x258>
                {
                    FLASH_If_Erase_Pages(0, i);
 801a336:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a33a:	4619      	mov	r1, r3
 801a33c:	2000      	movs	r0, #0
 801a33e:	f002 f87d 	bl	801c43c <FLASH_If_Erase_Pages>
                for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a342:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a346:	3301      	adds	r3, #1
 801a348:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a34c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a350:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801a354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a356:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a35a:	0adb      	lsrs	r3, r3, #11
 801a35c:	440b      	add	r3, r1
 801a35e:	429a      	cmp	r2, r3
 801a360:	d3e9      	bcc.n	801a336 <FirmwareUpgrade+0x242>
                }
            }
            return false;
 801a362:	2300      	movs	r3, #0
 801a364:	e0d2      	b.n	801a50c <FirmwareUpgrade+0x418>
        }
    }
    else
    {
        newFile.bank = 1;
 801a366:	2301      	movs	r3, #1
 801a368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        newFile.file_size = patchSize;
 801a36c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a36e:	643b      	str	r3, [r7, #64]	; 0x40
        newFile.now_page = 0;
 801a370:	2300      	movs	r3, #0
 801a372:	63fb      	str	r3, [r7, #60]	; 0x3c
        newFile.origin_page = 0;
 801a374:	2300      	movs	r3, #0
 801a376:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* 3. check file integrity */
    PRINTF("Md5 check: %lu\n", newFile.file_size);
 801a378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a37a:	4619      	mov	r1, r3
 801a37c:	4825      	ldr	r0, [pc, #148]	; (801a414 <FirmwareUpgrade+0x320>)
 801a37e:	f007 ff11 	bl	80221a4 <iprintf>
    for (i = 0; i < 16; i++)
 801a382:	2300      	movs	r3, #0
 801a384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a388:	e00d      	b.n	801a3a6 <FirmwareUpgrade+0x2b2>
    {
        PRINTF("%02X", md5_code[i]);
 801a38a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a38e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a390:	4413      	add	r3, r2
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	4619      	mov	r1, r3
 801a396:	4820      	ldr	r0, [pc, #128]	; (801a418 <FirmwareUpgrade+0x324>)
 801a398:	f007 ff04 	bl	80221a4 <iprintf>
    for (i = 0; i < 16; i++)
 801a39c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a3a0:	3301      	adds	r3, #1
 801a3a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a3a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a3aa:	2b0f      	cmp	r3, #15
 801a3ac:	d9ed      	bls.n	801a38a <FirmwareUpgrade+0x296>
    }
    PRINTF("\n");
 801a3ae:	200a      	movs	r0, #10
 801a3b0:	f007 ff10 	bl	80221d4 <putchar>

    if (!MD5_File(newFile, md5_code))
 801a3b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3b6:	9300      	str	r3, [sp, #0]
 801a3b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a3bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a3be:	f001 ff65 	bl	801c28c <MD5_File>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	f083 0301 	eor.w	r3, r3, #1
 801a3c8:	b2db      	uxtb	r3, r3
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d040      	beq.n	801a450 <FirmwareUpgrade+0x35c>
    {
        PRINTF("md5 error\n");
 801a3ce:	4813      	ldr	r0, [pc, #76]	; (801a41c <FirmwareUpgrade+0x328>)
 801a3d0:	f007 ff70 	bl	80222b4 <puts>
        patching:
        If new file is daemon, erase the whole bank 2, else, erase patch file and new file in bank 2
        no patching:
        erase the whole bank 2
        */
        if ((!originalBank)||(!patch_update))
 801a3d4:	7bbb      	ldrb	r3, [r7, #14]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d002      	beq.n	801a3e0 <FirmwareUpgrade+0x2ec>
 801a3da:	7bfb      	ldrb	r3, [r7, #15]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d103      	bne.n	801a3e8 <FirmwareUpgrade+0x2f4>
            FLASH_If_Erase(0);
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	f001 ffb9 	bl	801c358 <FLASH_If_Erase>
 801a3e6:	e031      	b.n	801a44c <FirmwareUpgrade+0x358>
        else
        {
            for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a3ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a3ee:	e022      	b.n	801a436 <FirmwareUpgrade+0x342>
 801a3f0:	08025b1c 	.word	0x08025b1c
 801a3f4:	08025b50 	.word	0x08025b50
 801a3f8:	08080000 	.word	0x08080000
 801a3fc:	40010000 	.word	0x40010000
 801a400:	08025b64 	.word	0x08025b64
 801a404:	08026b44 	.word	0x08026b44
 801a408:	08025b98 	.word	0x08025b98
 801a40c:	08025bbc 	.word	0x08025bbc
 801a410:	08025bdc 	.word	0x08025bdc
 801a414:	08025bec 	.word	0x08025bec
 801a418:	08025bfc 	.word	0x08025bfc
 801a41c:	08025c04 	.word	0x08025c04
            {
                FLASH_If_Erase_Pages(0, i);
 801a420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a424:	4619      	mov	r1, r3
 801a426:	2000      	movs	r0, #0
 801a428:	f002 f808 	bl	801c43c <FLASH_If_Erase_Pages>
            for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a42c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a430:	3301      	adds	r3, #1
 801a432:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a436:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a43a:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801a43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a440:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a444:	0adb      	lsrs	r3, r3, #11
 801a446:	440b      	add	r3, r1
 801a448:	429a      	cmp	r2, r3
 801a44a:	d3e9      	bcc.n	801a420 <FirmwareUpgrade+0x32c>
            }
        }
        return false;
 801a44c:	2300      	movs	r3, #0
 801a44e:	e05d      	b.n	801a50c <FirmwareUpgrade+0x418>
    }
    else
    {
        /* if patching, move the new file */
        if ((originalBank)&&(patch_update))
 801a450:	7bbb      	ldrb	r3, [r7, #14]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d04c      	beq.n	801a4f0 <FirmwareUpgrade+0x3fc>
 801a456:	7bfb      	ldrb	r3, [r7, #15]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d049      	beq.n	801a4f0 <FirmwareUpgrade+0x3fc>
        {
            /* Move the FUT new firmware to page 0 */
            for (i = 0; i < (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a45c:	2300      	movs	r3, #0
 801a45e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a462:	e020      	b.n	801a4a6 <FirmwareUpgrade+0x3b2>
            {
                FLASH_If_Erase_Pages(0, i);
 801a464:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a468:	4619      	mov	r1, r3
 801a46a:	2000      	movs	r0, #0
 801a46c:	f001 ffe6 	bl	801c43c <FLASH_If_Erase_Pages>
                Flash_Bank_Copy_Bank(FLASH_START_BANK2 + (newPage + i) * FLASH_PAGE, FLASH_START_BANK2 + i * FLASH_PAGE, FLASH_PAGE, 0);
 801a470:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801a474:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a478:	4413      	add	r3, r2
 801a47a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a47e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a482:	02d8      	lsls	r0, r3, #11
 801a484:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a488:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a48c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a490:	02d9      	lsls	r1, r3, #11
 801a492:	2300      	movs	r3, #0
 801a494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a498:	f002 fd7e 	bl	801cf98 <Flash_Bank_Copy_Bank>
            for (i = 0; i < (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a49c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a4a0:	3301      	adds	r3, #1
 801a4a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a4a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a4b0:	0adb      	lsrs	r3, r3, #11
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	d3d6      	bcc.n	801a464 <FirmwareUpgrade+0x370>
            }
            /* Erase page to the end of new FUT */
            for (i = (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4b8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a4bc:	0adb      	lsrs	r3, r3, #11
 801a4be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a4c2:	e00a      	b.n	801a4da <FirmwareUpgrade+0x3e6>
                FLASH_If_Erase_Pages(0, i);
 801a4c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a4c8:	4619      	mov	r1, r3
 801a4ca:	2000      	movs	r0, #0
 801a4cc:	f001 ffb6 	bl	801c43c <FLASH_If_Erase_Pages>
            for (i = (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a4d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a4d4:	3301      	adds	r3, #1
 801a4d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a4da:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a4de:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801a4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4e4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a4e8:	0adb      	lsrs	r3, r3, #11
 801a4ea:	440b      	add	r3, r1
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d3e9      	bcc.n	801a4c4 <FirmwareUpgrade+0x3d0>
        }
    }

    /* 4. Write the size of firmware to bank 2 */
    uint32_t firmware_size_buffer[1];
    firmware_size_buffer[0] = newFile.file_size;
 801a4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4f2:	633b      	str	r3, [r7, #48]	; 0x30
    FLASH_If_Erase_Pages(0, FIRMWARE_PAGE);
 801a4f4:	21fd      	movs	r1, #253	; 0xfd
 801a4f6:	2000      	movs	r0, #0
 801a4f8:	f001 ffa0 	bl	801c43c <FLASH_If_Erase_Pages>
    FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size_buffer, 2);
 801a4fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a500:	2202      	movs	r2, #2
 801a502:	4619      	mov	r1, r3
 801a504:	4803      	ldr	r0, [pc, #12]	; (801a514 <FirmwareUpgrade+0x420>)
 801a506:	f002 f81d 	bl	801c544 <FLASH_If_Write>
    return true;
 801a50a:	2301      	movs	r3, #1
}
 801a50c:	4618      	mov	r0, r3
 801a50e:	3750      	adds	r7, #80	; 0x50
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}
 801a514:	080fe800 	.word	0x080fe800

0801a518 <jp_fread>:
};

/**
 * Read a buffer off the stream
 */
static size_t jp_fread(janpatch_ctx *ctx, void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 801a518:	b590      	push	{r4, r7, lr}
 801a51a:	b087      	sub	sp, #28
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	60f8      	str	r0, [r7, #12]
 801a520:	60b9      	str	r1, [r7, #8]
 801a522:	607a      	str	r2, [r7, #4]
 801a524:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a52c:	6910      	ldr	r0, [r2, #16]
 801a52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a530:	6951      	ldr	r1, [r2, #20]
 801a532:	2200      	movs	r2, #0
 801a534:	4798      	blx	r3

    size_t bytes_read = ctx->fread(ptr, size, count, buffer->stream);
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a53c:	691b      	ldr	r3, [r3, #16]
 801a53e:	683a      	ldr	r2, [r7, #0]
 801a540:	6879      	ldr	r1, [r7, #4]
 801a542:	68b8      	ldr	r0, [r7, #8]
 801a544:	47a0      	blx	r4
 801a546:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_read;
 801a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a54a:	695b      	ldr	r3, [r3, #20]
 801a54c:	461a      	mov	r2, r3
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	4413      	add	r3, r2
 801a552:	461a      	mov	r2, r3
 801a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a556:	615a      	str	r2, [r3, #20]

    return bytes_read;
 801a558:	697b      	ldr	r3, [r7, #20]
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	371c      	adds	r7, #28
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd90      	pop	{r4, r7, pc}

0801a562 <jp_fwrite>:

/**
 * Write a buffer to the stream
 */
static size_t jp_fwrite(janpatch_ctx *ctx, const void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 801a562:	b590      	push	{r4, r7, lr}
 801a564:	b087      	sub	sp, #28
 801a566:	af00      	add	r7, sp, #0
 801a568:	60f8      	str	r0, [r7, #12]
 801a56a:	60b9      	str	r1, [r7, #8]
 801a56c:	607a      	str	r2, [r7, #4]
 801a56e:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a576:	6910      	ldr	r0, [r2, #16]
 801a578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a57a:	6951      	ldr	r1, [r2, #20]
 801a57c:	2200      	movs	r2, #0
 801a57e:	4798      	blx	r3

    size_t bytes_written = ctx->fwrite(ptr, size, count, buffer->stream);
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a586:	691b      	ldr	r3, [r3, #16]
 801a588:	683a      	ldr	r2, [r7, #0]
 801a58a:	6879      	ldr	r1, [r7, #4]
 801a58c:	68b8      	ldr	r0, [r7, #8]
 801a58e:	47a0      	blx	r4
 801a590:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_written;
 801a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a594:	695b      	ldr	r3, [r3, #20]
 801a596:	461a      	mov	r2, r3
 801a598:	697b      	ldr	r3, [r7, #20]
 801a59a:	4413      	add	r3, r2
 801a59c:	461a      	mov	r2, r3
 801a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5a0:	615a      	str	r2, [r3, #20]

    return bytes_written;
 801a5a2:	697b      	ldr	r3, [r7, #20]
}
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	371c      	adds	r7, #28
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bd90      	pop	{r4, r7, pc}

0801a5ac <jp_fseek>:

/**
 * Set position of the stream
 */
static int jp_fseek(janpatch_buffer *buffer, long int offset, int origin) {
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b084      	sub	sp, #16
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET) {
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d103      	bne.n	801a5c6 <jp_fseek+0x1a>
        buffer->position = offset;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	68ba      	ldr	r2, [r7, #8]
 801a5c2:	615a      	str	r2, [r3, #20]
 801a5c4:	e010      	b.n	801a5e8 <jp_fseek+0x3c>
    }
    else if (origin == SEEK_CUR) {
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	2b01      	cmp	r3, #1
 801a5ca:	d106      	bne.n	801a5da <jp_fseek+0x2e>
        buffer->position += offset;
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	695a      	ldr	r2, [r3, #20]
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	441a      	add	r2, r3
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	615a      	str	r2, [r3, #20]
 801a5d8:	e006      	b.n	801a5e8 <jp_fseek+0x3c>
    }
    else {
        JANPATCH_ERROR("Origin %d not supported in jp_fseek (only SEEK_CUR,SEEK_SET)\n", origin);
 801a5da:	6879      	ldr	r1, [r7, #4]
 801a5dc:	4805      	ldr	r0, [pc, #20]	; (801a5f4 <jp_fseek+0x48>)
 801a5de:	f007 fde1 	bl	80221a4 <iprintf>
        return -1;
 801a5e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e6:	e000      	b.n	801a5ea <jp_fseek+0x3e>
    }
    return 0;
 801a5e8:	2300      	movs	r3, #0
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	3710      	adds	r7, #16
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd80      	pop	{r7, pc}
 801a5f2:	bf00      	nop
 801a5f4:	08025c10 	.word	0x08025c10

0801a5f8 <jp_getc>:


/**
 * Get a character from the stream
 */
static int jp_getc(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b088      	sub	sp, #32
 801a5fc:	af02      	add	r7, sp, #8
 801a5fe:	6078      	str	r0, [r7, #4]
 801a600:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	695b      	ldr	r3, [r3, #20]
 801a606:	617b      	str	r3, [r7, #20]
    if (position < 0) return -1;
 801a608:	697b      	ldr	r3, [r7, #20]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	da02      	bge.n	801a614 <jp_getc+0x1c>
 801a60e:	f04f 33ff 	mov.w	r3, #4294967295
 801a612:	e044      	b.n	801a69e <jp_getc+0xa6>

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 801a614:	697a      	ldr	r2, [r7, #20]
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	685b      	ldr	r3, [r3, #4]
 801a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a61e:	613b      	str	r3, [r7, #16]

    if (page != buffer->current_page) {
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	689b      	ldr	r3, [r3, #8]
 801a624:	693a      	ldr	r2, [r7, #16]
 801a626:	429a      	cmp	r2, r3
 801a628:	d01a      	beq.n	801a660 <jp_getc+0x68>
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	685b      	ldr	r3, [r3, #4]
 801a62e:	693a      	ldr	r2, [r7, #16]
 801a630:	fb02 f303 	mul.w	r3, r2, r3
 801a634:	2200      	movs	r2, #0
 801a636:	4619      	mov	r1, r3
 801a638:	6838      	ldr	r0, [r7, #0]
 801a63a:	f7ff ffb7 	bl	801a5ac <jp_fseek>
        buffer->current_page_size = jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	6819      	ldr	r1, [r3, #0]
 801a642:	683b      	ldr	r3, [r7, #0]
 801a644:	685a      	ldr	r2, [r3, #4]
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	9300      	str	r3, [sp, #0]
 801a64a:	4613      	mov	r3, r2
 801a64c:	2201      	movs	r2, #1
 801a64e:	6878      	ldr	r0, [r7, #4]
 801a650:	f7ff ff62 	bl	801a518 <jp_fread>
 801a654:	4602      	mov	r2, r0
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 801a65a:	683b      	ldr	r3, [r7, #0]
 801a65c:	693a      	ldr	r2, [r7, #16]
 801a65e:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 801a660:	697b      	ldr	r3, [r7, #20]
 801a662:	683a      	ldr	r2, [r7, #0]
 801a664:	6852      	ldr	r2, [r2, #4]
 801a666:	fbb3 f1f2 	udiv	r1, r3, r2
 801a66a:	fb02 f201 	mul.w	r2, r2, r1
 801a66e:	1a9b      	subs	r3, r3, r2
 801a670:	60fb      	str	r3, [r7, #12]

    if ((size_t)position_in_page >= buffer->current_page_size) {
 801a672:	683b      	ldr	r3, [r7, #0]
 801a674:	68da      	ldr	r2, [r3, #12]
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	429a      	cmp	r2, r3
 801a67a:	d802      	bhi.n	801a682 <jp_getc+0x8a>
        return EOF;
 801a67c:	f04f 33ff 	mov.w	r3, #4294967295
 801a680:	e00d      	b.n	801a69e <jp_getc+0xa6>
    }

    unsigned char b = buffer->buffer[position_in_page];
 801a682:	683b      	ldr	r3, [r7, #0]
 801a684:	681a      	ldr	r2, [r3, #0]
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	4413      	add	r3, r2
 801a68a:	781b      	ldrb	r3, [r3, #0]
 801a68c:	72fb      	strb	r3, [r7, #11]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801a68e:	697b      	ldr	r3, [r7, #20]
 801a690:	3301      	adds	r3, #1
 801a692:	2200      	movs	r2, #0
 801a694:	4619      	mov	r1, r3
 801a696:	6838      	ldr	r0, [r7, #0]
 801a698:	f7ff ff88 	bl	801a5ac <jp_fseek>
    return b;
 801a69c:	7afb      	ldrb	r3, [r7, #11]
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3718      	adds	r7, #24
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}

0801a6a6 <jp_putc>:

/**
 * Write a character to a stream
 */
static int jp_putc(int c, janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801a6a6:	b580      	push	{r7, lr}
 801a6a8:	b08a      	sub	sp, #40	; 0x28
 801a6aa:	af02      	add	r7, sp, #8
 801a6ac:	60f8      	str	r0, [r7, #12]
 801a6ae:	60b9      	str	r1, [r7, #8]
 801a6b0:	607a      	str	r2, [r7, #4]
    long position = buffer->position;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	695b      	ldr	r3, [r3, #20]
 801a6b6:	61fb      	str	r3, [r7, #28]
    if (position < 0) {
 801a6b8:	69fb      	ldr	r3, [r7, #28]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	da02      	bge.n	801a6c4 <jp_putc+0x1e>
        return -1;
 801a6be:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c2:	e06a      	b.n	801a79a <jp_putc+0xf4>
    }

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 801a6c4:	69fa      	ldr	r2, [r7, #28]
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	685b      	ldr	r3, [r3, #4]
 801a6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6ce:	61bb      	str	r3, [r7, #24]

    if (page != buffer->current_page) {
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	689b      	ldr	r3, [r3, #8]
 801a6d4:	69ba      	ldr	r2, [r7, #24]
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	d047      	beq.n	801a76a <jp_putc+0xc4>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	689b      	ldr	r3, [r3, #8]
 801a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6e2:	d026      	beq.n	801a732 <jp_putc+0x8c>

            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	689b      	ldr	r3, [r3, #8]
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	6852      	ldr	r2, [r2, #4]
 801a6ec:	fb02 f303 	mul.w	r3, r2, r3
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	4619      	mov	r1, r3
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f7ff ff59 	bl	801a5ac <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6819      	ldr	r1, [r3, #0]
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	68da      	ldr	r2, [r3, #12]
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	9300      	str	r3, [sp, #0]
 801a706:	4613      	mov	r3, r2
 801a708:	2201      	movs	r2, #1
 801a70a:	68b8      	ldr	r0, [r7, #8]
 801a70c:	f7ff ff29 	bl	801a562 <jp_fwrite>

            if (ctx->progress) {
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a714:	2b00      	cmp	r3, #0
 801a716:	d00c      	beq.n	801a732 <jp_putc+0x8c>
                ctx->progress(position * 100 / ctx->max_file_size);
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a71c:	69fa      	ldr	r2, [r7, #28]
 801a71e:	2164      	movs	r1, #100	; 0x64
 801a720:	fb01 f102 	mul.w	r1, r1, r2
 801a724:	68ba      	ldr	r2, [r7, #8]
 801a726:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801a728:	fb91 f2f2 	sdiv	r2, r1, r2
 801a72c:	b2d2      	uxtb	r2, r2
 801a72e:	4610      	mov	r0, r2
 801a730:	4798      	blx	r3
            }
        }

        // and read the next page...
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	685b      	ldr	r3, [r3, #4]
 801a736:	69ba      	ldr	r2, [r7, #24]
 801a738:	fb02 f303 	mul.w	r3, r2, r3
 801a73c:	2200      	movs	r2, #0
 801a73e:	4619      	mov	r1, r3
 801a740:	6878      	ldr	r0, [r7, #4]
 801a742:	f7ff ff33 	bl	801a5ac <jp_fseek>
        jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	6819      	ldr	r1, [r3, #0]
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	685a      	ldr	r2, [r3, #4]
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	9300      	str	r3, [sp, #0]
 801a752:	4613      	mov	r3, r2
 801a754:	2201      	movs	r2, #1
 801a756:	68b8      	ldr	r0, [r7, #8]
 801a758:	f7ff fede 	bl	801a518 <jp_fread>
        buffer->current_page_size = buffer->size;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	685a      	ldr	r2, [r3, #4]
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	69ba      	ldr	r2, [r7, #24]
 801a768:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 801a76a:	69fb      	ldr	r3, [r7, #28]
 801a76c:	687a      	ldr	r2, [r7, #4]
 801a76e:	6852      	ldr	r2, [r2, #4]
 801a770:	fbb3 f1f2 	udiv	r1, r3, r2
 801a774:	fb02 f201 	mul.w	r2, r2, r1
 801a778:	1a9b      	subs	r3, r3, r2
 801a77a:	617b      	str	r3, [r7, #20]

    buffer->buffer[position_in_page] = (unsigned char)c;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	4413      	add	r3, r2
 801a784:	68fa      	ldr	r2, [r7, #12]
 801a786:	b2d2      	uxtb	r2, r2
 801a788:	701a      	strb	r2, [r3, #0]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801a78a:	69fb      	ldr	r3, [r7, #28]
 801a78c:	3301      	adds	r3, #1
 801a78e:	2200      	movs	r2, #0
 801a790:	4619      	mov	r1, r3
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7ff ff0a 	bl	801a5ac <jp_fseek>

    return 0;
 801a798:	2300      	movs	r3, #0
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	3720      	adds	r7, #32
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}

0801a7a2 <jp_final_flush>:

static uint32_t jp_final_flush(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801a7a2:	b580      	push	{r7, lr}
 801a7a4:	b088      	sub	sp, #32
 801a7a6:	af02      	add	r7, sp, #8
 801a7a8:	6078      	str	r0, [r7, #4]
 801a7aa:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 801a7ac:	683b      	ldr	r3, [r7, #0]
 801a7ae:	695b      	ldr	r3, [r3, #20]
 801a7b0:	617b      	str	r3, [r7, #20]
    int position_in_page = position % buffer->size;
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	683a      	ldr	r2, [r7, #0]
 801a7b6:	6852      	ldr	r2, [r2, #4]
 801a7b8:	fbb3 f1f2 	udiv	r1, r3, r2
 801a7bc:	fb02 f201 	mul.w	r2, r2, r1
 801a7c0:	1a9b      	subs	r3, r3, r2
 801a7c2:	613b      	str	r3, [r7, #16]

    uint32_t page = ((unsigned long)position) / buffer->size;
 801a7c4:	697a      	ldr	r2, [r7, #20]
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801a7ce:	60fb      	str	r3, [r7, #12]

    // if the page has changed we also need to flush the previous page
    // this can happen when the last operation (e.g. jp_putc) has just crossed page boundary
    if (page != buffer->current_page) {
 801a7d0:	683b      	ldr	r3, [r7, #0]
 801a7d2:	689b      	ldr	r3, [r3, #8]
 801a7d4:	68fa      	ldr	r2, [r7, #12]
 801a7d6:	429a      	cmp	r2, r3
 801a7d8:	d01a      	beq.n	801a810 <jp_final_flush+0x6e>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	689b      	ldr	r3, [r3, #8]
 801a7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7e2:	d015      	beq.n	801a810 <jp_final_flush+0x6e>
            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 801a7e4:	683b      	ldr	r3, [r7, #0]
 801a7e6:	689b      	ldr	r3, [r3, #8]
 801a7e8:	683a      	ldr	r2, [r7, #0]
 801a7ea:	6852      	ldr	r2, [r2, #4]
 801a7ec:	fb02 f303 	mul.w	r3, r2, r3
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	4619      	mov	r1, r3
 801a7f4:	6838      	ldr	r0, [r7, #0]
 801a7f6:	f7ff fed9 	bl	801a5ac <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	6819      	ldr	r1, [r3, #0]
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	68da      	ldr	r2, [r3, #12]
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	9300      	str	r3, [sp, #0]
 801a806:	4613      	mov	r3, r2
 801a808:	2201      	movs	r2, #1
 801a80a:	6878      	ldr	r0, [r7, #4]
 801a80c:	f7ff fea9 	bl	801a562 <jp_fwrite>
        }
    }

    // flush the new page buffer
    jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	685b      	ldr	r3, [r3, #4]
 801a814:	68fa      	ldr	r2, [r7, #12]
 801a816:	fb02 f303 	mul.w	r3, r2, r3
 801a81a:	2200      	movs	r2, #0
 801a81c:	4619      	mov	r1, r3
 801a81e:	6838      	ldr	r0, [r7, #0]
 801a820:	f7ff fec4 	bl	801a5ac <jp_fseek>
    uint32_t last_size = jp_fwrite(ctx, buffer->buffer, 1, position_in_page, buffer);
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	6819      	ldr	r1, [r3, #0]
 801a828:	693a      	ldr	r2, [r7, #16]
 801a82a:	683b      	ldr	r3, [r7, #0]
 801a82c:	9300      	str	r3, [sp, #0]
 801a82e:	4613      	mov	r3, r2
 801a830:	2201      	movs	r2, #1
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	f7ff fe95 	bl	801a562 <jp_fwrite>
 801a838:	60b8      	str	r0, [r7, #8]

    if (ctx->progress) {
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d003      	beq.n	801a84a <jp_final_flush+0xa8>
        ctx->progress(100);
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a846:	2064      	movs	r0, #100	; 0x64
 801a848:	4798      	blx	r3
    }
    return last_size;
 801a84a:	68bb      	ldr	r3, [r7, #8]
}
 801a84c:	4618      	mov	r0, r3
 801a84e:	3718      	adds	r7, #24
 801a850:	46bd      	mov	sp, r7
 801a852:	bd80      	pop	{r7, pc}

0801a854 <process_fread>:
		}
	}
	return FALSE;
}

static int process_fread(janpatch_ctx *ctx, janpatch_buffer *source, size_t count, uint8_t *buffer) {
 801a854:	b580      	push	{r7, lr}
 801a856:	b086      	sub	sp, #24
 801a858:	af00      	add	r7, sp, #0
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	607a      	str	r2, [r7, #4]
 801a860:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 801a862:	2300      	movs	r3, #0
 801a864:	617b      	str	r3, [r7, #20]
    while (1) {
        int m = jp_getc(ctx, source);
 801a866:	68b9      	ldr	r1, [r7, #8]
 801a868:	68f8      	ldr	r0, [r7, #12]
 801a86a:	f7ff fec5 	bl	801a5f8 <jp_getc>
 801a86e:	6138      	str	r0, [r7, #16]
			// printf("m:%lu, %d, %d, %d\n", m, (unsigned char)m, cnt, count);
        if (m == -1) {
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a876:	d00d      	beq.n	801a894 <process_fread+0x40>
            // jp_fseek(source, -1, SEEK_CUR);
            break;
        }
        else
        {
            buffer[cnt] = (unsigned char)m;
 801a878:	683a      	ldr	r2, [r7, #0]
 801a87a:	697b      	ldr	r3, [r7, #20]
 801a87c:	4413      	add	r3, r2
 801a87e:	693a      	ldr	r2, [r7, #16]
 801a880:	b2d2      	uxtb	r2, r2
 801a882:	701a      	strb	r2, [r3, #0]
        }
        cnt++;
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	3301      	adds	r3, #1
 801a888:	617b      	str	r3, [r7, #20]
        if (cnt >= count)
 801a88a:	697a      	ldr	r2, [r7, #20]
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	429a      	cmp	r2, r3
 801a890:	d202      	bcs.n	801a898 <process_fread+0x44>
    while (1) {
 801a892:	e7e8      	b.n	801a866 <process_fread+0x12>
            break;
 801a894:	bf00      	nop
 801a896:	e000      	b.n	801a89a <process_fread+0x46>
            break;
 801a898:	bf00      	nop
    }
    return cnt;
 801a89a:	697b      	ldr	r3, [r7, #20]
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3718      	adds	r7, #24
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}

0801a8a4 <process_fwrite>:

static int process_fwrite(janpatch_ctx *ctx, janpatch_buffer *target, size_t count, uint8_t *buffer) {
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b086      	sub	sp, #24
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	607a      	str	r2, [r7, #4]
 801a8b0:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	617b      	str	r3, [r7, #20]
    while (1) {
        uint8_t m = buffer[cnt];
 801a8b6:	683a      	ldr	r2, [r7, #0]
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	4413      	add	r3, r2
 801a8bc:	781b      	ldrb	r3, [r3, #0]
 801a8be:	74fb      	strb	r3, [r7, #19]
        jp_putc(m, ctx, target);
 801a8c0:	7cfb      	ldrb	r3, [r7, #19]
 801a8c2:	68ba      	ldr	r2, [r7, #8]
 801a8c4:	68f9      	ldr	r1, [r7, #12]
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	f7ff feed 	bl	801a6a6 <jp_putc>
        cnt++;
 801a8cc:	697b      	ldr	r3, [r7, #20]
 801a8ce:	3301      	adds	r3, #1
 801a8d0:	617b      	str	r3, [r7, #20]
        if (cnt >= count)
 801a8d2:	697a      	ldr	r2, [r7, #20]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	d200      	bcs.n	801a8dc <process_fwrite+0x38>
    while (1) {
 801a8da:	e7ec      	b.n	801a8b6 <process_fwrite+0x12>
            break;
 801a8dc:	bf00      	nop
    }
    return cnt;
 801a8de:	697b      	ldr	r3, [r7, #20]
}
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	3718      	adds	r7, #24
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}

0801a8e8 <LZSS_decode>:

	return (ctx.target_buffer.stream->file_size);
}

uint32_t LZSS_decode(Flash_FILE *pbReadFileName, Flash_FILE *pbWriteFileName)
{
 801a8e8:	b590      	push	{r4, r7, lr}
 801a8ea:	b0a3      	sub	sp, #140	; 0x8c
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	6039      	str	r1, [r7, #0]
    janpatch_ctx ctx = {
 801a8f2:	f107 030c 	add.w	r3, r7, #12
 801a8f6:	225c      	movs	r2, #92	; 0x5c
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f006 fe45 	bl	802158a <memset>
        // fread/fwrite buffers for every file, minimum size is 1 byte
        // when you run on an embedded system with block size flash, set it to the size of a block for best performance
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a900:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a904:	f006 fe26 	bl	8021554 <malloc>
 801a908:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a90a:	60fb      	str	r3, [r7, #12]
 801a90c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a910:	613b      	str	r3, [r7, #16]
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a912:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a916:	f006 fe1d 	bl	8021554 <malloc>
 801a91a:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a91c:	627b      	str	r3, [r7, #36]	; 0x24
 801a91e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a922:	62bb      	str	r3, [r7, #40]	; 0x28
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a924:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a928:	f006 fe14 	bl	8021554 <malloc>
 801a92c:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a934:	643b      	str	r3, [r7, #64]	; 0x40
 801a936:	4bbe      	ldr	r3, [pc, #760]	; (801ac30 <LZSS_decode+0x348>)
 801a938:	657b      	str	r3, [r7, #84]	; 0x54
 801a93a:	4bbe      	ldr	r3, [pc, #760]	; (801ac34 <LZSS_decode+0x34c>)
 801a93c:	65bb      	str	r3, [r7, #88]	; 0x58
 801a93e:	4bbe      	ldr	r3, [pc, #760]	; (801ac38 <LZSS_decode+0x350>)
 801a940:	65fb      	str	r3, [r7, #92]	; 0x5c
        &the_fread,
        &the_fwrite,
        &the_fseek,
		NULL};

    ctx.source_buffer.current_page = 0xffffffff;
 801a942:	f04f 33ff 	mov.w	r3, #4294967295
 801a946:	617b      	str	r3, [r7, #20]
    ctx.patch_buffer.current_page = 0xffffffff;
 801a948:	f04f 33ff 	mov.w	r3, #4294967295
 801a94c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.target_buffer.current_page = 0xffffffff;
 801a94e:	f04f 33ff 	mov.w	r3, #4294967295
 801a952:	647b      	str	r3, [r7, #68]	; 0x44

    ctx.source_buffer.position = 0;
 801a954:	2300      	movs	r3, #0
 801a956:	623b      	str	r3, [r7, #32]
    ctx.patch_buffer.position = 0;
 801a958:	2300      	movs	r3, #0
 801a95a:	63bb      	str	r3, [r7, #56]	; 0x38
    ctx.target_buffer.position = 0;
 801a95c:	2300      	movs	r3, #0
 801a95e:	653b      	str	r3, [r7, #80]	; 0x50

    ctx.source_buffer.stream = pbReadFileName;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	61fb      	str	r3, [r7, #28]
    // ctx.patch_buffer.stream = patch;
    ctx.target_buffer.stream = pbWriteFileName;
 801a964:	683b      	ldr	r3, [r7, #0]
 801a966:	64fb      	str	r3, [r7, #76]	; 0x4c

	bThreshold = 2;
 801a968:	4bb4      	ldr	r3, [pc, #720]	; (801ac3c <LZSS_decode+0x354>)
 801a96a:	2202      	movs	r2, #2
 801a96c:	701a      	strb	r2, [r3, #0]
	bPreBufSizeBits = 7;
 801a96e:	4bb4      	ldr	r3, [pc, #720]	; (801ac40 <LZSS_decode+0x358>)
 801a970:	2207      	movs	r2, #7
 801a972:	701a      	strb	r2, [r3, #0]
	bWindowBufSizeBits = 16 - bPreBufSizeBits;
 801a974:	4bb2      	ldr	r3, [pc, #712]	; (801ac40 <LZSS_decode+0x358>)
 801a976:	781b      	ldrb	r3, [r3, #0]
 801a978:	f1c3 0310 	rsb	r3, r3, #16
 801a97c:	b2da      	uxtb	r2, r3
 801a97e:	4bb1      	ldr	r3, [pc, #708]	; (801ac44 <LZSS_decode+0x35c>)
 801a980:	701a      	strb	r2, [r3, #0]
	wPreBufSize = ((WORD)1 << bPreBufSizeBits) - 1 + bThreshold;
 801a982:	4baf      	ldr	r3, [pc, #700]	; (801ac40 <LZSS_decode+0x358>)
 801a984:	781b      	ldrb	r3, [r3, #0]
 801a986:	461a      	mov	r2, r3
 801a988:	2301      	movs	r3, #1
 801a98a:	4093      	lsls	r3, r2
 801a98c:	b29a      	uxth	r2, r3
 801a98e:	4bab      	ldr	r3, [pc, #684]	; (801ac3c <LZSS_decode+0x354>)
 801a990:	781b      	ldrb	r3, [r3, #0]
 801a992:	b29b      	uxth	r3, r3
 801a994:	4413      	add	r3, r2
 801a996:	b29b      	uxth	r3, r3
 801a998:	3b01      	subs	r3, #1
 801a99a:	b29a      	uxth	r2, r3
 801a99c:	4baa      	ldr	r3, [pc, #680]	; (801ac48 <LZSS_decode+0x360>)
 801a99e:	801a      	strh	r2, [r3, #0]
	wWindowBufSize = ((WORD)1 << bWindowBufSizeBits) - 1 + bThreshold;
 801a9a0:	4ba8      	ldr	r3, [pc, #672]	; (801ac44 <LZSS_decode+0x35c>)
 801a9a2:	781b      	ldrb	r3, [r3, #0]
 801a9a4:	461a      	mov	r2, r3
 801a9a6:	2301      	movs	r3, #1
 801a9a8:	4093      	lsls	r3, r2
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	4ba3      	ldr	r3, [pc, #652]	; (801ac3c <LZSS_decode+0x354>)
 801a9ae:	781b      	ldrb	r3, [r3, #0]
 801a9b0:	b29b      	uxth	r3, r3
 801a9b2:	4413      	add	r3, r2
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	3b01      	subs	r3, #1
 801a9b8:	b29a      	uxth	r2, r3
 801a9ba:	4ba4      	ldr	r3, [pc, #656]	; (801ac4c <LZSS_decode+0x364>)
 801a9bc:	801a      	strh	r2, [r3, #0]

	WORD i, j;
	BYTE bItemNum;
	BYTE bFlag;
	WORD wStart;
	WORD wMatchStringCnt = 0;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	WORD wWindowBufCnt = 0;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	Flash_FILE *pfRead = pbReadFileName;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	67fb      	str	r3, [r7, #124]	; 0x7c
	Flash_FILE *pfWrite = pbWriteFileName;
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	67bb      	str	r3, [r7, #120]	; 0x78

    BYTE *bPreBuf = (BYTE *)malloc(1024);
 801a9d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801a9d6:	f006 fdbd 	bl	8021554 <malloc>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	677b      	str	r3, [r7, #116]	; 0x74
    BYTE *bWindowBuf = (BYTE *)malloc(4196);
 801a9de:	f241 0064 	movw	r0, #4196	; 0x1064
 801a9e2:	f006 fdb7 	bl	8021554 <malloc>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	673b      	str	r3, [r7, #112]	; 0x70
    BYTE *bMatchString = (BYTE *)malloc(1024);
 801a9ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801a9ee:	f006 fdb1 	bl	8021554 <malloc>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (0 != process_fread(&ctx, &ctx.source_buffer, 1, &bFlag))  //先读一个标记字节以确定接下来怎么解压数据
 801a9f6:	e0d3      	b.n	801aba0 <LZSS_decode+0x2b8>
	{
		for (bItemNum = 0; bItemNum < 8; bItemNum++)  //8个项目为一组进行解压
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 801a9fe:	e0ca      	b.n	801ab96 <LZSS_decode+0x2ae>
		{
			//从标记字节的最高位开始解析，0代表原始数据，1代表(下标，匹配数)解析
			if (0 == (bFlag & ((BYTE)1 << (7 - bItemNum))))
 801aa00:	7afb      	ldrb	r3, [r7, #11]
 801aa02:	461a      	mov	r2, r3
 801aa04:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801aa08:	f1c3 0307 	rsb	r3, r3, #7
 801aa0c:	fa42 f303 	asr.w	r3, r2, r3
 801aa10:	f003 0301 	and.w	r3, r3, #1
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d11d      	bne.n	801aa54 <LZSS_decode+0x16c>
			{
				if (process_fread(&ctx, &ctx.source_buffer, 1, bPreBuf) < 1)
 801aa18:	f107 010c 	add.w	r1, r7, #12
 801aa1c:	f107 000c 	add.w	r0, r7, #12
 801aa20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa22:	2201      	movs	r2, #1
 801aa24:	f7ff ff16 	bl	801a854 <process_fread>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	f340 80c6 	ble.w	801abbc <LZSS_decode+0x2d4>
				{
					goto LZSS_decode_out_;
				}
                process_fwrite(&ctx, &ctx.target_buffer, 1, bPreBuf);
 801aa30:	f107 030c 	add.w	r3, r7, #12
 801aa34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801aa38:	f107 000c 	add.w	r0, r7, #12
 801aa3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f7ff ff30 	bl	801a8a4 <process_fwrite>

				bMatchString[0] = bPreBuf[0];
 801aa44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa46:	781a      	ldrb	r2, [r3, #0]
 801aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801aa4a:	701a      	strb	r2, [r3, #0]
				wMatchStringCnt = 1;
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 801aa52:	e04f      	b.n	801aaf4 <LZSS_decode+0x20c>
			}
			else
			{
				if (process_fread(&ctx, &ctx.source_buffer, 2, bPreBuf) < 2)
 801aa54:	f107 010c 	add.w	r1, r7, #12
 801aa58:	f107 000c 	add.w	r0, r7, #12
 801aa5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa5e:	2202      	movs	r2, #2
 801aa60:	f7ff fef8 	bl	801a854 <process_fread>
 801aa64:	4603      	mov	r3, r0
 801aa66:	2b01      	cmp	r3, #1
 801aa68:	f340 80aa 	ble.w	801abc0 <LZSS_decode+0x2d8>
				{
					goto LZSS_decode_out_;
				}
				//取出高位的滑动窗口匹配串下标
				wStart = ((WORD)bPreBuf[0] | ((WORD)bPreBuf[1] << 8)) / ((WORD)1 << bPreBufSizeBits);
 801aa6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa6e:	781b      	ldrb	r3, [r3, #0]
 801aa70:	461a      	mov	r2, r3
 801aa72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa74:	3301      	adds	r3, #1
 801aa76:	781b      	ldrb	r3, [r3, #0]
 801aa78:	021b      	lsls	r3, r3, #8
 801aa7a:	431a      	orrs	r2, r3
 801aa7c:	4b70      	ldr	r3, [pc, #448]	; (801ac40 <LZSS_decode+0x358>)
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	4619      	mov	r1, r3
 801aa82:	2301      	movs	r3, #1
 801aa84:	408b      	lsls	r3, r1
 801aa86:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa8a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				//取出低位的匹配长度
				wMatchStringCnt = ((WORD)bPreBuf[0] | ((WORD)bPreBuf[1] << 8)) % ((WORD)1 << bPreBufSizeBits) + bThreshold;
 801aa8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa90:	781b      	ldrb	r3, [r3, #0]
 801aa92:	461a      	mov	r2, r3
 801aa94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aa96:	3301      	adds	r3, #1
 801aa98:	781b      	ldrb	r3, [r3, #0]
 801aa9a:	021b      	lsls	r3, r3, #8
 801aa9c:	4313      	orrs	r3, r2
 801aa9e:	4a68      	ldr	r2, [pc, #416]	; (801ac40 <LZSS_decode+0x358>)
 801aaa0:	7812      	ldrb	r2, [r2, #0]
 801aaa2:	4611      	mov	r1, r2
 801aaa4:	2201      	movs	r2, #1
 801aaa6:	408a      	lsls	r2, r1
 801aaa8:	fb93 f1f2 	sdiv	r1, r3, r2
 801aaac:	fb02 f201 	mul.w	r2, r2, r1
 801aab0:	1a9b      	subs	r3, r3, r2
 801aab2:	b29a      	uxth	r2, r3
 801aab4:	4b61      	ldr	r3, [pc, #388]	; (801ac3c <LZSS_decode+0x354>)
 801aab6:	781b      	ldrb	r3, [r3, #0]
 801aab8:	b29b      	uxth	r3, r3
 801aaba:	4413      	add	r3, r2
 801aabc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				//将解压出的数据写入文件
                process_fwrite(&ctx, &ctx.target_buffer, wMatchStringCnt, &bWindowBuf[wStart]);
 801aac0:	f8b7 4082 	ldrh.w	r4, [r7, #130]	; 0x82
 801aac4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801aac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801aaca:	441a      	add	r2, r3
 801aacc:	f107 030c 	add.w	r3, r7, #12
 801aad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801aad4:	f107 000c 	add.w	r0, r7, #12
 801aad8:	4613      	mov	r3, r2
 801aada:	4622      	mov	r2, r4
 801aadc:	f7ff fee2 	bl	801a8a4 <process_fwrite>
				memcpy(bMatchString, &bWindowBuf[wStart], wMatchStringCnt);
 801aae0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801aae4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801aae6:	4413      	add	r3, r2
 801aae8:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801aaec:	4619      	mov	r1, r3
 801aaee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801aaf0:	f006 fd40 	bl	8021574 <memcpy>
			}
			//如果滑动窗口将要溢出，先提前把前面的部分数据移出窗口
			if ((wWindowBufCnt + wMatchStringCnt) > wWindowBufSize)
 801aaf4:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801aaf8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801aafc:	4413      	add	r3, r2
 801aafe:	4a53      	ldr	r2, [pc, #332]	; (801ac4c <LZSS_decode+0x364>)
 801ab00:	8812      	ldrh	r2, [r2, #0]
 801ab02:	4293      	cmp	r3, r2
 801ab04:	dd31      	ble.n	801ab6a <LZSS_decode+0x282>
			{
				j = (wWindowBufCnt + wMatchStringCnt) - wWindowBufSize;
 801ab06:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801ab0a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801ab0e:	4413      	add	r3, r2
 801ab10:	b29a      	uxth	r2, r3
 801ab12:	4b4e      	ldr	r3, [pc, #312]	; (801ac4c <LZSS_decode+0x364>)
 801ab14:	881b      	ldrh	r3, [r3, #0]
 801ab16:	1ad3      	subs	r3, r2, r3
 801ab18:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				for (i = 0; i < wWindowBufCnt - j; i++)
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801ab22:	e012      	b.n	801ab4a <LZSS_decode+0x262>
				{
					bWindowBuf[i] = bWindowBuf[i + j];
 801ab24:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801ab28:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ab2c:	4413      	add	r3, r2
 801ab2e:	461a      	mov	r2, r3
 801ab30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ab32:	441a      	add	r2, r3
 801ab34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801ab38:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801ab3a:	440b      	add	r3, r1
 801ab3c:	7812      	ldrb	r2, [r2, #0]
 801ab3e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < wWindowBufCnt - j; i++)
 801ab40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801ab44:	3301      	adds	r3, #1
 801ab46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801ab4a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801ab4e:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801ab52:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ab56:	1acb      	subs	r3, r1, r3
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	dbe3      	blt.n	801ab24 <LZSS_decode+0x23c>
				}
				wWindowBufCnt -= j;
 801ab5c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801ab60:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801ab64:	1ad3      	subs	r3, r2, r3
 801ab66:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			}

			//将解压处的数据同步写入到滑动窗口
			memcpy(&bWindowBuf[wWindowBufCnt], bMatchString, wMatchStringCnt);
 801ab6a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 801ab6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ab70:	4413      	add	r3, r2
 801ab72:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801ab76:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801ab78:	4618      	mov	r0, r3
 801ab7a:	f006 fcfb 	bl	8021574 <memcpy>
			wWindowBufCnt += wMatchStringCnt;
 801ab7e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801ab82:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801ab86:	4413      	add	r3, r2
 801ab88:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		for (bItemNum = 0; bItemNum < 8; bItemNum++)  //8个项目为一组进行解压
 801ab8c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801ab90:	3301      	adds	r3, #1
 801ab92:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 801ab96:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801ab9a:	2b07      	cmp	r3, #7
 801ab9c:	f67f af30 	bls.w	801aa00 <LZSS_decode+0x118>
	while (0 != process_fread(&ctx, &ctx.source_buffer, 1, &bFlag))  //先读一个标记字节以确定接下来怎么解压数据
 801aba0:	f107 030b 	add.w	r3, r7, #11
 801aba4:	f107 010c 	add.w	r1, r7, #12
 801aba8:	f107 000c 	add.w	r0, r7, #12
 801abac:	2201      	movs	r2, #1
 801abae:	f7ff fe51 	bl	801a854 <process_fread>
 801abb2:	4603      	mov	r3, r0
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	f47f af1f 	bne.w	801a9f8 <LZSS_decode+0x110>
			// printf("3wMatchStringCnt:%lu, %lu, %lu\n", wMatchStringCnt, wWindowBufCnt, wWindowBufSize);
		}
	}

LZSS_decode_out_:
 801abba:	e002      	b.n	801abc2 <LZSS_decode+0x2da>
					goto LZSS_decode_out_;
 801abbc:	bf00      	nop
 801abbe:	e000      	b.n	801abc2 <LZSS_decode+0x2da>
					goto LZSS_decode_out_;
 801abc0:	bf00      	nop
    ctx.target_buffer.stream->file_size = jp_final_flush(&ctx, &ctx.target_buffer) + (ctx.target_buffer.stream->now_page - ctx.target_buffer.stream->origin_page) * ctx.target_buffer.size;
 801abc2:	f107 030c 	add.w	r3, r7, #12
 801abc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801abca:	f107 030c 	add.w	r3, r7, #12
 801abce:	4611      	mov	r1, r2
 801abd0:	4618      	mov	r0, r3
 801abd2:	f7ff fde6 	bl	801a7a2 <jp_final_flush>
 801abd6:	4601      	mov	r1, r0
 801abd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abda:	689a      	ldr	r2, [r3, #8]
 801abdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	1ad3      	subs	r3, r2, r3
 801abe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801abe4:	fb02 f203 	mul.w	r2, r2, r3
 801abe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abea:	440a      	add	r2, r1
 801abec:	60da      	str	r2, [r3, #12]
    printf("target:%lu\n", ctx.target_buffer.stream->file_size);
 801abee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801abf0:	68db      	ldr	r3, [r3, #12]
 801abf2:	4619      	mov	r1, r3
 801abf4:	4816      	ldr	r0, [pc, #88]	; (801ac50 <LZSS_decode+0x368>)
 801abf6:	f007 fad5 	bl	80221a4 <iprintf>

    free(bPreBuf);
 801abfa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801abfc:	f006 fcb2 	bl	8021564 <free>
    free(bWindowBuf);
 801ac00:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801ac02:	f006 fcaf 	bl	8021564 <free>
    free(bMatchString);
 801ac06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ac08:	f006 fcac 	bl	8021564 <free>

    free(ctx.source_buffer.buffer);
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f006 fca8 	bl	8021564 <free>
    free(ctx.patch_buffer.buffer);
 801ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac16:	4618      	mov	r0, r3
 801ac18:	f006 fca4 	bl	8021564 <free>
    free(ctx.target_buffer.buffer);
 801ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f006 fca0 	bl	8021564 <free>

	return (ctx.target_buffer.stream->file_size);
 801ac24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ac26:	68db      	ldr	r3, [r3, #12]
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	378c      	adds	r7, #140	; 0x8c
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd90      	pop	{r4, r7, pc}
 801ac30:	08019eed 	.word	0x08019eed
 801ac34:	08019e69 	.word	0x08019e69
 801ac38:	08019e1d 	.word	0x08019e1d
 801ac3c:	20001e58 	.word	0x20001e58
 801ac40:	20001e59 	.word	0x20001e59
 801ac44:	20001e5c 	.word	0x20001e5c
 801ac48:	20001e60 	.word	0x20001e60
 801ac4c:	20001e5e 	.word	0x20001e5e
 801ac50:	08025dc4 	.word	0x08025dc4

0801ac54 <MD5Init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void MD5Init(MD5_CTX *context)
{
 801ac54:	b480      	push	{r7}
 801ac56:	b083      	sub	sp, #12
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
	context->count[0] = 0;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2200      	movs	r2, #0
 801ac60:	601a      	str	r2, [r3, #0]
	context->count[1] = 0;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	2200      	movs	r2, #0
 801ac66:	605a      	str	r2, [r3, #4]
	context->state[0] = 0x67452301;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	4a08      	ldr	r2, [pc, #32]	; (801ac8c <MD5Init+0x38>)
 801ac6c:	609a      	str	r2, [r3, #8]
	context->state[1] = 0xEFCDAB89;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	4a07      	ldr	r2, [pc, #28]	; (801ac90 <MD5Init+0x3c>)
 801ac72:	60da      	str	r2, [r3, #12]
	context->state[2] = 0x98BADCFE;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	4a07      	ldr	r2, [pc, #28]	; (801ac94 <MD5Init+0x40>)
 801ac78:	611a      	str	r2, [r3, #16]
	context->state[3] = 0x10325476;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	4a06      	ldr	r2, [pc, #24]	; (801ac98 <MD5Init+0x44>)
 801ac7e:	615a      	str	r2, [r3, #20]
}
 801ac80:	bf00      	nop
 801ac82:	370c      	adds	r7, #12
 801ac84:	46bd      	mov	sp, r7
 801ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8a:	4770      	bx	lr
 801ac8c:	67452301 	.word	0x67452301
 801ac90:	efcdab89 	.word	0xefcdab89
 801ac94:	98badcfe 	.word	0x98badcfe
 801ac98:	10325476 	.word	0x10325476

0801ac9c <MD5Update>:

void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputlen)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b088      	sub	sp, #32
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	60f8      	str	r0, [r7, #12]
 801aca4:	60b9      	str	r1, [r7, #8]
 801aca6:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801aca8:	2300      	movs	r3, #0
 801acaa:	61fb      	str	r3, [r7, #28]
	unsigned int index = 0;
 801acac:	2300      	movs	r3, #0
 801acae:	61bb      	str	r3, [r7, #24]
	unsigned int partlen = 0;
 801acb0:	2300      	movs	r3, #0
 801acb2:	617b      	str	r3, [r7, #20]

	index = (context->count[0] >> 3) & 0x3F;
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	08db      	lsrs	r3, r3, #3
 801acba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801acbe:	61bb      	str	r3, [r7, #24]
	partlen = 64 - index;
 801acc0:	69bb      	ldr	r3, [r7, #24]
 801acc2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801acc6:	617b      	str	r3, [r7, #20]
	context->count[0] += inputlen << 3;
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681a      	ldr	r2, [r3, #0]
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	00db      	lsls	r3, r3, #3
 801acd0:	441a      	add	r2, r3
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	601a      	str	r2, [r3, #0]

	if(context->count[0] < (inputlen << 3))
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	681a      	ldr	r2, [r3, #0]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	00db      	lsls	r3, r3, #3
 801acde:	429a      	cmp	r2, r3
 801ace0:	d204      	bcs.n	801acec <MD5Update+0x50>
		context->count[1]++;
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	685b      	ldr	r3, [r3, #4]
 801ace6:	1c5a      	adds	r2, r3, #1
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	605a      	str	r2, [r3, #4]
	context->count[1] += inputlen >> 29;
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	685a      	ldr	r2, [r3, #4]
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	0f5b      	lsrs	r3, r3, #29
 801acf4:	441a      	add	r2, r3
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	605a      	str	r2, [r3, #4]

	if(inputlen >= partlen)
 801acfa:	687a      	ldr	r2, [r7, #4]
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	429a      	cmp	r2, r3
 801ad00:	d328      	bcc.n	801ad54 <MD5Update+0xb8>
	{
		memcpy(&context->buffer[index], input,partlen);
 801ad02:	69bb      	ldr	r3, [r7, #24]
 801ad04:	3318      	adds	r3, #24
 801ad06:	68fa      	ldr	r2, [r7, #12]
 801ad08:	4413      	add	r3, r2
 801ad0a:	697a      	ldr	r2, [r7, #20]
 801ad0c:	68b9      	ldr	r1, [r7, #8]
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f006 fc30 	bl	8021574 <memcpy>
		MD5Transform(context->state, context->buffer);
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	f103 0208 	add.w	r2, r3, #8
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	3318      	adds	r3, #24
 801ad1e:	4619      	mov	r1, r3
 801ad20:	4610      	mov	r0, r2
 801ad22:	f000 f8eb 	bl	801aefc <MD5Transform>

		for(i = partlen; i+64 <= inputlen; i+=64)
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	61fb      	str	r3, [r7, #28]
 801ad2a:	e00b      	b.n	801ad44 <MD5Update+0xa8>
			MD5Transform(context->state, &input[i]);
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	f103 0008 	add.w	r0, r3, #8
 801ad32:	68ba      	ldr	r2, [r7, #8]
 801ad34:	69fb      	ldr	r3, [r7, #28]
 801ad36:	4413      	add	r3, r2
 801ad38:	4619      	mov	r1, r3
 801ad3a:	f000 f8df 	bl	801aefc <MD5Transform>
		for(i = partlen; i+64 <= inputlen; i+=64)
 801ad3e:	69fb      	ldr	r3, [r7, #28]
 801ad40:	3340      	adds	r3, #64	; 0x40
 801ad42:	61fb      	str	r3, [r7, #28]
 801ad44:	69fb      	ldr	r3, [r7, #28]
 801ad46:	3340      	adds	r3, #64	; 0x40
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d2ee      	bcs.n	801ad2c <MD5Update+0x90>

		index = 0;
 801ad4e:	2300      	movs	r3, #0
 801ad50:	61bb      	str	r3, [r7, #24]
 801ad52:	e001      	b.n	801ad58 <MD5Update+0xbc>
	}
	else
	{
		i = 0;
 801ad54:	2300      	movs	r3, #0
 801ad56:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&context->buffer[index], &input[i], inputlen-i);
 801ad58:	69bb      	ldr	r3, [r7, #24]
 801ad5a:	3318      	adds	r3, #24
 801ad5c:	68fa      	ldr	r2, [r7, #12]
 801ad5e:	18d0      	adds	r0, r2, r3
 801ad60:	68ba      	ldr	r2, [r7, #8]
 801ad62:	69fb      	ldr	r3, [r7, #28]
 801ad64:	18d1      	adds	r1, r2, r3
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	69fb      	ldr	r3, [r7, #28]
 801ad6a:	1ad3      	subs	r3, r2, r3
 801ad6c:	461a      	mov	r2, r3
 801ad6e:	f006 fc01 	bl	8021574 <memcpy>
}
 801ad72:	bf00      	nop
 801ad74:	3720      	adds	r7, #32
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
	...

0801ad7c <MD5Final>:

void MD5Final(MD5_CTX *context, unsigned char digest[16])
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b086      	sub	sp, #24
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
 801ad84:	6039      	str	r1, [r7, #0]
	unsigned int index = 0,padlen = 0;
 801ad86:	2300      	movs	r3, #0
 801ad88:	617b      	str	r3, [r7, #20]
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	613b      	str	r3, [r7, #16]
	unsigned char bits[8];

	index = (context->count[0] >> 3) & 0x3F;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	08db      	lsrs	r3, r3, #3
 801ad94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ad98:	617b      	str	r3, [r7, #20]
	padlen = (index < 56)?(56-index):(120-index);
 801ad9a:	697b      	ldr	r3, [r7, #20]
 801ad9c:	2b37      	cmp	r3, #55	; 0x37
 801ad9e:	d803      	bhi.n	801ada8 <MD5Final+0x2c>
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801ada6:	e002      	b.n	801adae <MD5Final+0x32>
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 801adae:	613b      	str	r3, [r7, #16]
	MD5Encode(bits, context->count, 8);
 801adb0:	6879      	ldr	r1, [r7, #4]
 801adb2:	f107 0308 	add.w	r3, r7, #8
 801adb6:	2208      	movs	r2, #8
 801adb8:	4618      	mov	r0, r3
 801adba:	f000 f819 	bl	801adf0 <MD5Encode>
	MD5Update(context, PADDING, padlen);
 801adbe:	693a      	ldr	r2, [r7, #16]
 801adc0:	490a      	ldr	r1, [pc, #40]	; (801adec <MD5Final+0x70>)
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f7ff ff6a 	bl	801ac9c <MD5Update>
	MD5Update(context, bits, 8);
 801adc8:	f107 0308 	add.w	r3, r7, #8
 801adcc:	2208      	movs	r2, #8
 801adce:	4619      	mov	r1, r3
 801add0:	6878      	ldr	r0, [r7, #4]
 801add2:	f7ff ff63 	bl	801ac9c <MD5Update>
	MD5Encode(digest, context->state, 16);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	3308      	adds	r3, #8
 801adda:	2210      	movs	r2, #16
 801addc:	4619      	mov	r1, r3
 801adde:	6838      	ldr	r0, [r7, #0]
 801ade0:	f000 f806 	bl	801adf0 <MD5Encode>
}
 801ade4:	bf00      	nop
 801ade6:	3718      	adds	r7, #24
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}
 801adec:	200000b4 	.word	0x200000b4

0801adf0 <MD5Encode>:

void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)
{
 801adf0:	b480      	push	{r7}
 801adf2:	b087      	sub	sp, #28
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	60f8      	str	r0, [r7, #12]
 801adf8:	60b9      	str	r1, [r7, #8]
 801adfa:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801adfc:	2300      	movs	r3, #0
 801adfe:	617b      	str	r3, [r7, #20]
	unsigned int j = 0;
 801ae00:	2300      	movs	r3, #0
 801ae02:	613b      	str	r3, [r7, #16]

	while(j < len)
 801ae04:	e033      	b.n	801ae6e <MD5Encode+0x7e>
	{
		output[j] = input[i] & 0xFF;
 801ae06:	697b      	ldr	r3, [r7, #20]
 801ae08:	009b      	lsls	r3, r3, #2
 801ae0a:	68ba      	ldr	r2, [r7, #8]
 801ae0c:	4413      	add	r3, r2
 801ae0e:	6819      	ldr	r1, [r3, #0]
 801ae10:	68fa      	ldr	r2, [r7, #12]
 801ae12:	693b      	ldr	r3, [r7, #16]
 801ae14:	4413      	add	r3, r2
 801ae16:	b2ca      	uxtb	r2, r1
 801ae18:	701a      	strb	r2, [r3, #0]
		output[j+1] = (input[i] >> 8) & 0xFF;
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	009b      	lsls	r3, r3, #2
 801ae1e:	68ba      	ldr	r2, [r7, #8]
 801ae20:	4413      	add	r3, r2
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	0a19      	lsrs	r1, r3, #8
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	3301      	adds	r3, #1
 801ae2a:	68fa      	ldr	r2, [r7, #12]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	b2ca      	uxtb	r2, r1
 801ae30:	701a      	strb	r2, [r3, #0]
		output[j+2] = (input[i] >> 16) & 0xFF;
 801ae32:	697b      	ldr	r3, [r7, #20]
 801ae34:	009b      	lsls	r3, r3, #2
 801ae36:	68ba      	ldr	r2, [r7, #8]
 801ae38:	4413      	add	r3, r2
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	0c19      	lsrs	r1, r3, #16
 801ae3e:	693b      	ldr	r3, [r7, #16]
 801ae40:	3302      	adds	r3, #2
 801ae42:	68fa      	ldr	r2, [r7, #12]
 801ae44:	4413      	add	r3, r2
 801ae46:	b2ca      	uxtb	r2, r1
 801ae48:	701a      	strb	r2, [r3, #0]
		output[j+3] = (input[i] >> 24) & 0xFF;
 801ae4a:	697b      	ldr	r3, [r7, #20]
 801ae4c:	009b      	lsls	r3, r3, #2
 801ae4e:	68ba      	ldr	r2, [r7, #8]
 801ae50:	4413      	add	r3, r2
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	0e19      	lsrs	r1, r3, #24
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	3303      	adds	r3, #3
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	4413      	add	r3, r2
 801ae5e:	b2ca      	uxtb	r2, r1
 801ae60:	701a      	strb	r2, [r3, #0]
		i++;
 801ae62:	697b      	ldr	r3, [r7, #20]
 801ae64:	3301      	adds	r3, #1
 801ae66:	617b      	str	r3, [r7, #20]
		j += 4;
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	3304      	adds	r3, #4
 801ae6c:	613b      	str	r3, [r7, #16]
	while(j < len)
 801ae6e:	693a      	ldr	r2, [r7, #16]
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	429a      	cmp	r2, r3
 801ae74:	d3c7      	bcc.n	801ae06 <MD5Encode+0x16>
	}
}
 801ae76:	bf00      	nop
 801ae78:	371c      	adds	r7, #28
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae80:	4770      	bx	lr

0801ae82 <MD5Decode>:

void MD5Decode(unsigned int *output, unsigned char *input, unsigned int len)
{
 801ae82:	b480      	push	{r7}
 801ae84:	b087      	sub	sp, #28
 801ae86:	af00      	add	r7, sp, #0
 801ae88:	60f8      	str	r0, [r7, #12]
 801ae8a:	60b9      	str	r1, [r7, #8]
 801ae8c:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	617b      	str	r3, [r7, #20]
	unsigned int j = 0;
 801ae92:	2300      	movs	r3, #0
 801ae94:	613b      	str	r3, [r7, #16]

	while(j < len)
 801ae96:	e027      	b.n	801aee8 <MD5Decode+0x66>
	{
		output[i] = (input[j]) |
 801ae98:	68ba      	ldr	r2, [r7, #8]
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	4413      	add	r3, r2
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	4619      	mov	r1, r3
			(input[j+1] << 8) |
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	3301      	adds	r3, #1
 801aea6:	68ba      	ldr	r2, [r7, #8]
 801aea8:	4413      	add	r3, r2
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	021b      	lsls	r3, r3, #8
		output[i] = (input[j]) |
 801aeae:	ea41 0203 	orr.w	r2, r1, r3
			(input[j+2] << 16) |
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	3302      	adds	r3, #2
 801aeb6:	68b9      	ldr	r1, [r7, #8]
 801aeb8:	440b      	add	r3, r1
 801aeba:	781b      	ldrb	r3, [r3, #0]
 801aebc:	041b      	lsls	r3, r3, #16
			(input[j+1] << 8) |
 801aebe:	431a      	orrs	r2, r3
			(input[j+3] << 24);
 801aec0:	693b      	ldr	r3, [r7, #16]
 801aec2:	3303      	adds	r3, #3
 801aec4:	68b9      	ldr	r1, [r7, #8]
 801aec6:	440b      	add	r3, r1
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	061b      	lsls	r3, r3, #24
			(input[j+2] << 16) |
 801aecc:	ea42 0103 	orr.w	r1, r2, r3
		output[i] = (input[j]) |
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	009b      	lsls	r3, r3, #2
 801aed4:	68fa      	ldr	r2, [r7, #12]
 801aed6:	4413      	add	r3, r2
			(input[j+2] << 16) |
 801aed8:	460a      	mov	r2, r1
		output[i] = (input[j]) |
 801aeda:	601a      	str	r2, [r3, #0]
		i++;
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	3301      	adds	r3, #1
 801aee0:	617b      	str	r3, [r7, #20]
		j += 4;
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	3304      	adds	r3, #4
 801aee6:	613b      	str	r3, [r7, #16]
	while(j < len)
 801aee8:	693a      	ldr	r2, [r7, #16]
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d3d3      	bcc.n	801ae98 <MD5Decode+0x16>
	}
}
 801aef0:	bf00      	nop
 801aef2:	371c      	adds	r7, #28
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr

0801aefc <MD5Transform>:

void MD5Transform(unsigned int state[4], unsigned char block[64])
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b0c6      	sub	sp, #280	; 0x118
 801af00:	af00      	add	r7, sp, #0
 801af02:	1d3b      	adds	r3, r7, #4
 801af04:	6018      	str	r0, [r3, #0]
 801af06:	463b      	mov	r3, r7
 801af08:	6019      	str	r1, [r3, #0]
	unsigned int a = state[0];
 801af0a:	1d3b      	adds	r3, r7, #4
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int b = state[1];
 801af14:	1d3b      	adds	r3, r7, #4
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	unsigned int c = state[2];
 801af1e:	1d3b      	adds	r3, r7, #4
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	689b      	ldr	r3, [r3, #8]
 801af24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	unsigned int d = state[3];
 801af28:	1d3b      	adds	r3, r7, #4
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	68db      	ldr	r3, [r3, #12]
 801af2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	unsigned int x[64];

	MD5Decode(x,block,64);
 801af32:	463b      	mov	r3, r7
 801af34:	f107 0008 	add.w	r0, r7, #8
 801af38:	2240      	movs	r2, #64	; 0x40
 801af3a:	6819      	ldr	r1, [r3, #0]
 801af3c:	f7ff ffa1 	bl	801ae82 <MD5Decode>

    FF(a, b, c, d, x[0], 7, 0xd76aa478);   /* 1 */
 801af40:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801af44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801af48:	401a      	ands	r2, r3
 801af4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801af4e:	43d9      	mvns	r1, r3
 801af50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801af54:	400b      	ands	r3, r1
 801af56:	431a      	orrs	r2, r3
 801af58:	f107 0308 	add.w	r3, r7, #8
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	441a      	add	r2, r3
 801af60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801af64:	441a      	add	r2, r3
 801af66:	4bf1      	ldr	r3, [pc, #964]	; (801b32c <MD5Transform+0x430>)
 801af68:	4413      	add	r3, r2
 801af6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801af6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801af72:	ea4f 6373 	mov.w	r3, r3, ror #25
 801af76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801af7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801af7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801af82:	4413      	add	r3, r2
 801af84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[1], 12, 0xe8c7b756);  /* 2 */
 801af88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801af8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801af90:	401a      	ands	r2, r3
 801af92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801af96:	43d9      	mvns	r1, r3
 801af98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801af9c:	400b      	ands	r3, r1
 801af9e:	431a      	orrs	r2, r3
 801afa0:	f107 0308 	add.w	r3, r7, #8
 801afa4:	685b      	ldr	r3, [r3, #4]
 801afa6:	441a      	add	r2, r3
 801afa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801afac:	441a      	add	r2, r3
 801afae:	4be0      	ldr	r3, [pc, #896]	; (801b330 <MD5Transform+0x434>)
 801afb0:	4413      	add	r3, r2
 801afb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801afb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801afba:	ea4f 5333 	mov.w	r3, r3, ror #20
 801afbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801afc2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801afc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801afca:	4413      	add	r3, r2
 801afcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[2], 17, 0x242070db);  /* 3 */
 801afd0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801afd8:	401a      	ands	r2, r3
 801afda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801afde:	43d9      	mvns	r1, r3
 801afe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801afe4:	400b      	ands	r3, r1
 801afe6:	431a      	orrs	r2, r3
 801afe8:	f107 0308 	add.w	r3, r7, #8
 801afec:	689b      	ldr	r3, [r3, #8]
 801afee:	441a      	add	r2, r3
 801aff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801aff4:	441a      	add	r2, r3
 801aff6:	4bcf      	ldr	r3, [pc, #828]	; (801b334 <MD5Transform+0x438>)
 801aff8:	4413      	add	r3, r2
 801affa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801affe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b002:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b00a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b00e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b012:	4413      	add	r3, r2
 801b014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[3], 22, 0xc1bdceee);  /* 4 */
 801b018:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b01c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b020:	401a      	ands	r2, r3
 801b022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b026:	43d9      	mvns	r1, r3
 801b028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b02c:	400b      	ands	r3, r1
 801b02e:	431a      	orrs	r2, r3
 801b030:	f107 0308 	add.w	r3, r7, #8
 801b034:	68db      	ldr	r3, [r3, #12]
 801b036:	441a      	add	r2, r3
 801b038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b03c:	441a      	add	r2, r3
 801b03e:	4bbe      	ldr	r3, [pc, #760]	; (801b338 <MD5Transform+0x43c>)
 801b040:	4413      	add	r3, r2
 801b042:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b046:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b04a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b04e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b052:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b05a:	4413      	add	r3, r2
 801b05c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[4], 7, 0xf57c0faf);   /* 5 */
 801b060:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b068:	401a      	ands	r2, r3
 801b06a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b06e:	43d9      	mvns	r1, r3
 801b070:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b074:	400b      	ands	r3, r1
 801b076:	431a      	orrs	r2, r3
 801b078:	f107 0308 	add.w	r3, r7, #8
 801b07c:	691b      	ldr	r3, [r3, #16]
 801b07e:	441a      	add	r2, r3
 801b080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b084:	441a      	add	r2, r3
 801b086:	4bad      	ldr	r3, [pc, #692]	; (801b33c <MD5Transform+0x440>)
 801b088:	4413      	add	r3, r2
 801b08a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b092:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b09a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b09e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b0a2:	4413      	add	r3, r2
 801b0a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[5], 12, 0x4787c62a);  /* 6 */
 801b0a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b0ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b0b0:	401a      	ands	r2, r3
 801b0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b0b6:	43d9      	mvns	r1, r3
 801b0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b0bc:	400b      	ands	r3, r1
 801b0be:	431a      	orrs	r2, r3
 801b0c0:	f107 0308 	add.w	r3, r7, #8
 801b0c4:	695b      	ldr	r3, [r3, #20]
 801b0c6:	441a      	add	r2, r3
 801b0c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b0cc:	441a      	add	r2, r3
 801b0ce:	4b9c      	ldr	r3, [pc, #624]	; (801b340 <MD5Transform+0x444>)
 801b0d0:	4413      	add	r3, r2
 801b0d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b0d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b0da:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b0de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b0e2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b0ea:	4413      	add	r3, r2
 801b0ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[6], 17, 0xa8304613);  /* 7 */
 801b0f0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b0f8:	401a      	ands	r2, r3
 801b0fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b0fe:	43d9      	mvns	r1, r3
 801b100:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b104:	400b      	ands	r3, r1
 801b106:	431a      	orrs	r2, r3
 801b108:	f107 0308 	add.w	r3, r7, #8
 801b10c:	699b      	ldr	r3, [r3, #24]
 801b10e:	441a      	add	r2, r3
 801b110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b114:	441a      	add	r2, r3
 801b116:	4b8b      	ldr	r3, [pc, #556]	; (801b344 <MD5Transform+0x448>)
 801b118:	4413      	add	r3, r2
 801b11a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b122:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b126:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b12a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b12e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b132:	4413      	add	r3, r2
 801b134:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[7], 22, 0xfd469501);  /* 8 */
 801b138:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b13c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b140:	401a      	ands	r2, r3
 801b142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b146:	43d9      	mvns	r1, r3
 801b148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b14c:	400b      	ands	r3, r1
 801b14e:	431a      	orrs	r2, r3
 801b150:	f107 0308 	add.w	r3, r7, #8
 801b154:	69db      	ldr	r3, [r3, #28]
 801b156:	441a      	add	r2, r3
 801b158:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b15c:	441a      	add	r2, r3
 801b15e:	4b7a      	ldr	r3, [pc, #488]	; (801b348 <MD5Transform+0x44c>)
 801b160:	4413      	add	r3, r2
 801b162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b16a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b16e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b172:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b17a:	4413      	add	r3, r2
 801b17c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[8], 7, 0x698098d8);   /* 9 */
 801b180:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b188:	401a      	ands	r2, r3
 801b18a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b18e:	43d9      	mvns	r1, r3
 801b190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b194:	400b      	ands	r3, r1
 801b196:	431a      	orrs	r2, r3
 801b198:	f107 0308 	add.w	r3, r7, #8
 801b19c:	6a1b      	ldr	r3, [r3, #32]
 801b19e:	441a      	add	r2, r3
 801b1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b1a4:	441a      	add	r2, r3
 801b1a6:	4b69      	ldr	r3, [pc, #420]	; (801b34c <MD5Transform+0x450>)
 801b1a8:	4413      	add	r3, r2
 801b1aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b1b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b1b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b1ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b1be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b1c2:	4413      	add	r3, r2
 801b1c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[9], 12, 0x8b44f7af);  /* 10 */
 801b1c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b1cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b1d0:	401a      	ands	r2, r3
 801b1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b1d6:	43d9      	mvns	r1, r3
 801b1d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b1dc:	400b      	ands	r3, r1
 801b1de:	431a      	orrs	r2, r3
 801b1e0:	f107 0308 	add.w	r3, r7, #8
 801b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1e6:	441a      	add	r2, r3
 801b1e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b1ec:	441a      	add	r2, r3
 801b1ee:	4b58      	ldr	r3, [pc, #352]	; (801b350 <MD5Transform+0x454>)
 801b1f0:	4413      	add	r3, r2
 801b1f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b1f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b1fa:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b1fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b202:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b20a:	4413      	add	r3, r2
 801b20c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[10], 17, 0xffff5bb1); /* 11 */
 801b210:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b218:	401a      	ands	r2, r3
 801b21a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b21e:	43d9      	mvns	r1, r3
 801b220:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b224:	400b      	ands	r3, r1
 801b226:	431a      	orrs	r2, r3
 801b228:	f107 0308 	add.w	r3, r7, #8
 801b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b22e:	441a      	add	r2, r3
 801b230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b234:	4413      	add	r3, r2
 801b236:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 801b23a:	3b4f      	subs	r3, #79	; 0x4f
 801b23c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b244:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b248:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b24c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b250:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b254:	4413      	add	r3, r2
 801b256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[11], 22, 0x895cd7be); /* 12 */
 801b25a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b25e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b262:	401a      	ands	r2, r3
 801b264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b268:	43d9      	mvns	r1, r3
 801b26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b26e:	400b      	ands	r3, r1
 801b270:	431a      	orrs	r2, r3
 801b272:	f107 0308 	add.w	r3, r7, #8
 801b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b278:	441a      	add	r2, r3
 801b27a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b27e:	441a      	add	r2, r3
 801b280:	4b34      	ldr	r3, [pc, #208]	; (801b354 <MD5Transform+0x458>)
 801b282:	4413      	add	r3, r2
 801b284:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b288:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b28c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b290:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b294:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b29c:	4413      	add	r3, r2
 801b29e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[12], 7, 0x6b901122);  /* 13 */
 801b2a2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b2aa:	401a      	ands	r2, r3
 801b2ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b2b0:	43d9      	mvns	r1, r3
 801b2b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b2b6:	400b      	ands	r3, r1
 801b2b8:	431a      	orrs	r2, r3
 801b2ba:	f107 0308 	add.w	r3, r7, #8
 801b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2c0:	441a      	add	r2, r3
 801b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b2c6:	441a      	add	r2, r3
 801b2c8:	4b23      	ldr	r3, [pc, #140]	; (801b358 <MD5Transform+0x45c>)
 801b2ca:	4413      	add	r3, r2
 801b2cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b2d4:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b2d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b2dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b2e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b2e4:	4413      	add	r3, r2
 801b2e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[13], 12, 0xfd987193); /* 14 */
 801b2ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b2ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b2f2:	401a      	ands	r2, r3
 801b2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b2f8:	43d9      	mvns	r1, r3
 801b2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b2fe:	400b      	ands	r3, r1
 801b300:	431a      	orrs	r2, r3
 801b302:	f107 0308 	add.w	r3, r7, #8
 801b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b308:	441a      	add	r2, r3
 801b30a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b30e:	441a      	add	r2, r3
 801b310:	4b12      	ldr	r3, [pc, #72]	; (801b35c <MD5Transform+0x460>)
 801b312:	4413      	add	r3, r2
 801b314:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b318:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b31c:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b320:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b324:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b328:	e01a      	b.n	801b360 <MD5Transform+0x464>
 801b32a:	bf00      	nop
 801b32c:	d76aa478 	.word	0xd76aa478
 801b330:	e8c7b756 	.word	0xe8c7b756
 801b334:	242070db 	.word	0x242070db
 801b338:	c1bdceee 	.word	0xc1bdceee
 801b33c:	f57c0faf 	.word	0xf57c0faf
 801b340:	4787c62a 	.word	0x4787c62a
 801b344:	a8304613 	.word	0xa8304613
 801b348:	fd469501 	.word	0xfd469501
 801b34c:	698098d8 	.word	0x698098d8
 801b350:	8b44f7af 	.word	0x8b44f7af
 801b354:	895cd7be 	.word	0x895cd7be
 801b358:	6b901122 	.word	0x6b901122
 801b35c:	fd987193 	.word	0xfd987193
 801b360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b364:	4413      	add	r3, r2
 801b366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[14], 17, 0xa679438e); /* 15 */
 801b36a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b372:	401a      	ands	r2, r3
 801b374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b378:	43d9      	mvns	r1, r3
 801b37a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b37e:	400b      	ands	r3, r1
 801b380:	431a      	orrs	r2, r3
 801b382:	f107 0308 	add.w	r3, r7, #8
 801b386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b388:	441a      	add	r2, r3
 801b38a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b38e:	441a      	add	r2, r3
 801b390:	4bf0      	ldr	r3, [pc, #960]	; (801b754 <MD5Transform+0x858>)
 801b392:	4413      	add	r3, r2
 801b394:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b39c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b3a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b3a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b3a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b3ac:	4413      	add	r3, r2
 801b3ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[15], 22, 0x49b40821); /* 16 */
 801b3b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b3b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b3ba:	401a      	ands	r2, r3
 801b3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3c0:	43d9      	mvns	r1, r3
 801b3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b3c6:	400b      	ands	r3, r1
 801b3c8:	431a      	orrs	r2, r3
 801b3ca:	f107 0308 	add.w	r3, r7, #8
 801b3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3d0:	441a      	add	r2, r3
 801b3d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b3d6:	441a      	add	r2, r3
 801b3d8:	4bdf      	ldr	r3, [pc, #892]	; (801b758 <MD5Transform+0x85c>)
 801b3da:	4413      	add	r3, r2
 801b3dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b3e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b3e4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b3e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b3ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b3f4:	4413      	add	r3, r2
 801b3f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 2 */
    GG(a, b, c, d, x[1], 5, 0xf61e2562);   /* 17 */
 801b3fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b3fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b402:	401a      	ands	r2, r3
 801b404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b408:	43d9      	mvns	r1, r3
 801b40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b40e:	400b      	ands	r3, r1
 801b410:	431a      	orrs	r2, r3
 801b412:	f107 0308 	add.w	r3, r7, #8
 801b416:	685b      	ldr	r3, [r3, #4]
 801b418:	441a      	add	r2, r3
 801b41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b41e:	441a      	add	r2, r3
 801b420:	4bce      	ldr	r3, [pc, #824]	; (801b75c <MD5Transform+0x860>)
 801b422:	4413      	add	r3, r2
 801b424:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b42c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b434:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b438:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b43c:	4413      	add	r3, r2
 801b43e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[6], 9, 0xc040b340);   /* 18 */
 801b442:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b44a:	401a      	ands	r2, r3
 801b44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b450:	43d9      	mvns	r1, r3
 801b452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b456:	400b      	ands	r3, r1
 801b458:	431a      	orrs	r2, r3
 801b45a:	f107 0308 	add.w	r3, r7, #8
 801b45e:	699b      	ldr	r3, [r3, #24]
 801b460:	441a      	add	r2, r3
 801b462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b466:	441a      	add	r2, r3
 801b468:	4bbd      	ldr	r3, [pc, #756]	; (801b760 <MD5Transform+0x864>)
 801b46a:	4413      	add	r3, r2
 801b46c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b474:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b47c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b484:	4413      	add	r3, r2
 801b486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[11], 14, 0x265e5a51); /* 19 */
 801b48a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b48e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b492:	401a      	ands	r2, r3
 801b494:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b498:	43d9      	mvns	r1, r3
 801b49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b49e:	400b      	ands	r3, r1
 801b4a0:	431a      	orrs	r2, r3
 801b4a2:	f107 0308 	add.w	r3, r7, #8
 801b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4a8:	441a      	add	r2, r3
 801b4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b4ae:	441a      	add	r2, r3
 801b4b0:	4bac      	ldr	r3, [pc, #688]	; (801b764 <MD5Transform+0x868>)
 801b4b2:	4413      	add	r3, r2
 801b4b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b4bc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b4c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b4c4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b4c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b4cc:	4413      	add	r3, r2
 801b4ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[0], 20, 0xe9b6c7aa);  /* 20 */
 801b4d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b4da:	401a      	ands	r2, r3
 801b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b4e0:	43d9      	mvns	r1, r3
 801b4e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b4e6:	400b      	ands	r3, r1
 801b4e8:	431a      	orrs	r2, r3
 801b4ea:	f107 0308 	add.w	r3, r7, #8
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	441a      	add	r2, r3
 801b4f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b4f6:	441a      	add	r2, r3
 801b4f8:	4b9b      	ldr	r3, [pc, #620]	; (801b768 <MD5Transform+0x86c>)
 801b4fa:	4413      	add	r3, r2
 801b4fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b500:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b504:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b508:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b50c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b514:	4413      	add	r3, r2
 801b516:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[5], 5, 0xd62f105d);   /* 21 */
 801b51a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b51e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b522:	401a      	ands	r2, r3
 801b524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b528:	43d9      	mvns	r1, r3
 801b52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b52e:	400b      	ands	r3, r1
 801b530:	431a      	orrs	r2, r3
 801b532:	f107 0308 	add.w	r3, r7, #8
 801b536:	695b      	ldr	r3, [r3, #20]
 801b538:	441a      	add	r2, r3
 801b53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b53e:	441a      	add	r2, r3
 801b540:	4b8a      	ldr	r3, [pc, #552]	; (801b76c <MD5Transform+0x870>)
 801b542:	4413      	add	r3, r2
 801b544:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b54c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b550:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b554:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b558:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b55c:	4413      	add	r3, r2
 801b55e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[10], 9, 0x2441453);   /* 22 */
 801b562:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b56a:	401a      	ands	r2, r3
 801b56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b570:	43d9      	mvns	r1, r3
 801b572:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b576:	400b      	ands	r3, r1
 801b578:	431a      	orrs	r2, r3
 801b57a:	f107 0308 	add.w	r3, r7, #8
 801b57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b580:	441a      	add	r2, r3
 801b582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b586:	441a      	add	r2, r3
 801b588:	4b79      	ldr	r3, [pc, #484]	; (801b770 <MD5Transform+0x874>)
 801b58a:	4413      	add	r3, r2
 801b58c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b594:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b598:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b59c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5a4:	4413      	add	r3, r2
 801b5a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[15], 14, 0xd8a1e681); /* 23 */
 801b5aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b5ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b5b2:	401a      	ands	r2, r3
 801b5b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b5b8:	43d9      	mvns	r1, r3
 801b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5be:	400b      	ands	r3, r1
 801b5c0:	431a      	orrs	r2, r3
 801b5c2:	f107 0308 	add.w	r3, r7, #8
 801b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5c8:	441a      	add	r2, r3
 801b5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5ce:	441a      	add	r2, r3
 801b5d0:	4b68      	ldr	r3, [pc, #416]	; (801b774 <MD5Transform+0x878>)
 801b5d2:	4413      	add	r3, r2
 801b5d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5dc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b5e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b5e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b5e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b5ec:	4413      	add	r3, r2
 801b5ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[4], 20, 0xe7d3fbc8);  /* 24 */
 801b5f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5fa:	401a      	ands	r2, r3
 801b5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b600:	43d9      	mvns	r1, r3
 801b602:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b606:	400b      	ands	r3, r1
 801b608:	431a      	orrs	r2, r3
 801b60a:	f107 0308 	add.w	r3, r7, #8
 801b60e:	691b      	ldr	r3, [r3, #16]
 801b610:	441a      	add	r2, r3
 801b612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b616:	441a      	add	r2, r3
 801b618:	4b57      	ldr	r3, [pc, #348]	; (801b778 <MD5Transform+0x87c>)
 801b61a:	4413      	add	r3, r2
 801b61c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b620:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b624:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b628:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b62c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b634:	4413      	add	r3, r2
 801b636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[9], 5, 0x21e1cde6);   /* 25 */
 801b63a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b63e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b642:	401a      	ands	r2, r3
 801b644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b648:	43d9      	mvns	r1, r3
 801b64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b64e:	400b      	ands	r3, r1
 801b650:	431a      	orrs	r2, r3
 801b652:	f107 0308 	add.w	r3, r7, #8
 801b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b658:	441a      	add	r2, r3
 801b65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b65e:	441a      	add	r2, r3
 801b660:	4b46      	ldr	r3, [pc, #280]	; (801b77c <MD5Transform+0x880>)
 801b662:	4413      	add	r3, r2
 801b664:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b66c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b670:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b674:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b678:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b67c:	4413      	add	r3, r2
 801b67e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[14], 9, 0xc33707d6);  /* 26 */
 801b682:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b68a:	401a      	ands	r2, r3
 801b68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b690:	43d9      	mvns	r1, r3
 801b692:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b696:	400b      	ands	r3, r1
 801b698:	431a      	orrs	r2, r3
 801b69a:	f107 0308 	add.w	r3, r7, #8
 801b69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6a0:	441a      	add	r2, r3
 801b6a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b6a6:	441a      	add	r2, r3
 801b6a8:	4b35      	ldr	r3, [pc, #212]	; (801b780 <MD5Transform+0x884>)
 801b6aa:	4413      	add	r3, r2
 801b6ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b6b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b6b4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b6b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b6bc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b6c4:	4413      	add	r3, r2
 801b6c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[3], 14, 0xf4d50d87);  /* 27 */
 801b6ca:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b6ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b6d2:	401a      	ands	r2, r3
 801b6d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b6d8:	43d9      	mvns	r1, r3
 801b6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b6de:	400b      	ands	r3, r1
 801b6e0:	431a      	orrs	r2, r3
 801b6e2:	f107 0308 	add.w	r3, r7, #8
 801b6e6:	68db      	ldr	r3, [r3, #12]
 801b6e8:	441a      	add	r2, r3
 801b6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6ee:	441a      	add	r2, r3
 801b6f0:	4b24      	ldr	r3, [pc, #144]	; (801b784 <MD5Transform+0x888>)
 801b6f2:	4413      	add	r3, r2
 801b6f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6fc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b700:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b704:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b70c:	4413      	add	r3, r2
 801b70e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[8], 20, 0x455a14ed);  /* 28 */
 801b712:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b71a:	401a      	ands	r2, r3
 801b71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b720:	43d9      	mvns	r1, r3
 801b722:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b726:	400b      	ands	r3, r1
 801b728:	431a      	orrs	r2, r3
 801b72a:	f107 0308 	add.w	r3, r7, #8
 801b72e:	6a1b      	ldr	r3, [r3, #32]
 801b730:	441a      	add	r2, r3
 801b732:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b736:	441a      	add	r2, r3
 801b738:	4b13      	ldr	r3, [pc, #76]	; (801b788 <MD5Transform+0x88c>)
 801b73a:	4413      	add	r3, r2
 801b73c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b740:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b744:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b748:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b74c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b750:	e01c      	b.n	801b78c <MD5Transform+0x890>
 801b752:	bf00      	nop
 801b754:	a679438e 	.word	0xa679438e
 801b758:	49b40821 	.word	0x49b40821
 801b75c:	f61e2562 	.word	0xf61e2562
 801b760:	c040b340 	.word	0xc040b340
 801b764:	265e5a51 	.word	0x265e5a51
 801b768:	e9b6c7aa 	.word	0xe9b6c7aa
 801b76c:	d62f105d 	.word	0xd62f105d
 801b770:	02441453 	.word	0x02441453
 801b774:	d8a1e681 	.word	0xd8a1e681
 801b778:	e7d3fbc8 	.word	0xe7d3fbc8
 801b77c:	21e1cde6 	.word	0x21e1cde6
 801b780:	c33707d6 	.word	0xc33707d6
 801b784:	f4d50d87 	.word	0xf4d50d87
 801b788:	455a14ed 	.word	0x455a14ed
 801b78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b790:	4413      	add	r3, r2
 801b792:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[13], 5, 0xa9e3e905);  /* 29 */
 801b796:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b79a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b79e:	401a      	ands	r2, r3
 801b7a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b7a4:	43d9      	mvns	r1, r3
 801b7a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7aa:	400b      	ands	r3, r1
 801b7ac:	431a      	orrs	r2, r3
 801b7ae:	f107 0308 	add.w	r3, r7, #8
 801b7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7b4:	441a      	add	r2, r3
 801b7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b7ba:	441a      	add	r2, r3
 801b7bc:	4bef      	ldr	r3, [pc, #956]	; (801bb7c <MD5Transform+0xc80>)
 801b7be:	4413      	add	r3, r2
 801b7c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b7c8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b7cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b7d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b7d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b7d8:	4413      	add	r3, r2
 801b7da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[2], 9, 0xfcefa3f8);   /* 30 */
 801b7de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b7e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7e6:	401a      	ands	r2, r3
 801b7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7ec:	43d9      	mvns	r1, r3
 801b7ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b7f2:	400b      	ands	r3, r1
 801b7f4:	431a      	orrs	r2, r3
 801b7f6:	f107 0308 	add.w	r3, r7, #8
 801b7fa:	689b      	ldr	r3, [r3, #8]
 801b7fc:	441a      	add	r2, r3
 801b7fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b802:	441a      	add	r2, r3
 801b804:	4bde      	ldr	r3, [pc, #888]	; (801bb80 <MD5Transform+0xc84>)
 801b806:	4413      	add	r3, r2
 801b808:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b80c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b810:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b814:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b818:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b820:	4413      	add	r3, r2
 801b822:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[7], 14, 0x676f02d9);  /* 31 */
 801b826:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b82a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b82e:	401a      	ands	r2, r3
 801b830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b834:	43d9      	mvns	r1, r3
 801b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b83a:	400b      	ands	r3, r1
 801b83c:	431a      	orrs	r2, r3
 801b83e:	f107 0308 	add.w	r3, r7, #8
 801b842:	69db      	ldr	r3, [r3, #28]
 801b844:	441a      	add	r2, r3
 801b846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b84a:	441a      	add	r2, r3
 801b84c:	4bcd      	ldr	r3, [pc, #820]	; (801bb84 <MD5Transform+0xc88>)
 801b84e:	4413      	add	r3, r2
 801b850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b858:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b85c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b860:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b868:	4413      	add	r3, r2
 801b86a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[12], 20, 0x8d2a4c8a); /* 32 */
 801b86e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b876:	401a      	ands	r2, r3
 801b878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b87c:	43d9      	mvns	r1, r3
 801b87e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b882:	400b      	ands	r3, r1
 801b884:	431a      	orrs	r2, r3
 801b886:	f107 0308 	add.w	r3, r7, #8
 801b88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b88c:	441a      	add	r2, r3
 801b88e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b892:	441a      	add	r2, r3
 801b894:	4bbc      	ldr	r3, [pc, #752]	; (801bb88 <MD5Transform+0xc8c>)
 801b896:	4413      	add	r3, r2
 801b898:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b89c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b8a0:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b8a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b8a8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8b0:	4413      	add	r3, r2
 801b8b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 3 */
    HH(a, b, c, d, x[5], 4, 0xfffa3942);   /* 33 */
 801b8b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8be:	405a      	eors	r2, r3
 801b8c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b8c4:	405a      	eors	r2, r3
 801b8c6:	f107 0308 	add.w	r3, r7, #8
 801b8ca:	695b      	ldr	r3, [r3, #20]
 801b8cc:	441a      	add	r2, r3
 801b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8d2:	4413      	add	r3, r2
 801b8d4:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 801b8d8:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 801b8dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8e4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b8e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b8ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b8f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b8f4:	4413      	add	r3, r2
 801b8f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[8], 11, 0x8771f681);  /* 34 */
 801b8fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b8fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b902:	405a      	eors	r2, r3
 801b904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b908:	405a      	eors	r2, r3
 801b90a:	f107 0308 	add.w	r3, r7, #8
 801b90e:	6a1b      	ldr	r3, [r3, #32]
 801b910:	441a      	add	r2, r3
 801b912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b916:	441a      	add	r2, r3
 801b918:	4b9c      	ldr	r3, [pc, #624]	; (801bb8c <MD5Transform+0xc90>)
 801b91a:	4413      	add	r3, r2
 801b91c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b924:	ea4f 5373 	mov.w	r3, r3, ror #21
 801b928:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b92c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b934:	4413      	add	r3, r2
 801b936:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[11], 16, 0x6d9d6122); /* 35 */
 801b93a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b942:	405a      	eors	r2, r3
 801b944:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b948:	405a      	eors	r2, r3
 801b94a:	f107 0308 	add.w	r3, r7, #8
 801b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b950:	441a      	add	r2, r3
 801b952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b956:	441a      	add	r2, r3
 801b958:	4b8d      	ldr	r3, [pc, #564]	; (801bb90 <MD5Transform+0xc94>)
 801b95a:	4413      	add	r3, r2
 801b95c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b964:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b96c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b970:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b974:	4413      	add	r3, r2
 801b976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[14], 23, 0xfde5380c); /* 36 */
 801b97a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b97e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b982:	405a      	eors	r2, r3
 801b984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b988:	405a      	eors	r2, r3
 801b98a:	f107 0308 	add.w	r3, r7, #8
 801b98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b990:	441a      	add	r2, r3
 801b992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b996:	441a      	add	r2, r3
 801b998:	4b7e      	ldr	r3, [pc, #504]	; (801bb94 <MD5Transform+0xc98>)
 801b99a:	4413      	add	r3, r2
 801b99c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b9a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b9a4:	ea4f 2373 	mov.w	r3, r3, ror #9
 801b9a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b9ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9b4:	4413      	add	r3, r2
 801b9b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[1], 4, 0xa4beea44);   /* 37 */
 801b9ba:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9c2:	405a      	eors	r2, r3
 801b9c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b9c8:	405a      	eors	r2, r3
 801b9ca:	f107 0308 	add.w	r3, r7, #8
 801b9ce:	685b      	ldr	r3, [r3, #4]
 801b9d0:	441a      	add	r2, r3
 801b9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9d6:	441a      	add	r2, r3
 801b9d8:	4b6f      	ldr	r3, [pc, #444]	; (801bb98 <MD5Transform+0xc9c>)
 801b9da:	4413      	add	r3, r2
 801b9dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9e4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801b9e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b9ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b9f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b9f4:	4413      	add	r3, r2
 801b9f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[4], 11, 0x4bdecfa9);  /* 38 */
 801b9fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b9fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba02:	405a      	eors	r2, r3
 801ba04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ba08:	405a      	eors	r2, r3
 801ba0a:	f107 0308 	add.w	r3, r7, #8
 801ba0e:	691b      	ldr	r3, [r3, #16]
 801ba10:	441a      	add	r2, r3
 801ba12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba16:	441a      	add	r2, r3
 801ba18:	4b60      	ldr	r3, [pc, #384]	; (801bb9c <MD5Transform+0xca0>)
 801ba1a:	4413      	add	r3, r2
 801ba1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801ba20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba24:	ea4f 5373 	mov.w	r3, r3, ror #21
 801ba28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801ba2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801ba30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba34:	4413      	add	r3, r2
 801ba36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[7], 16, 0xf6bb4b60);  /* 39 */
 801ba3a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801ba3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba42:	405a      	eors	r2, r3
 801ba44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba48:	405a      	eors	r2, r3
 801ba4a:	f107 0308 	add.w	r3, r7, #8
 801ba4e:	69db      	ldr	r3, [r3, #28]
 801ba50:	441a      	add	r2, r3
 801ba52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ba56:	441a      	add	r2, r3
 801ba58:	4b51      	ldr	r3, [pc, #324]	; (801bba0 <MD5Transform+0xca4>)
 801ba5a:	4413      	add	r3, r2
 801ba5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ba64:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ba68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801ba6c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801ba70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba74:	4413      	add	r3, r2
 801ba76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[10], 23, 0xbebfbc70); /* 40 */
 801ba7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801ba7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba82:	405a      	eors	r2, r3
 801ba84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba88:	405a      	eors	r2, r3
 801ba8a:	f107 0308 	add.w	r3, r7, #8
 801ba8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba90:	441a      	add	r2, r3
 801ba92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba96:	441a      	add	r2, r3
 801ba98:	4b42      	ldr	r3, [pc, #264]	; (801bba4 <MD5Transform+0xca8>)
 801ba9a:	4413      	add	r3, r2
 801ba9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801baa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801baa4:	ea4f 2373 	mov.w	r3, r3, ror #9
 801baa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801baac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bab4:	4413      	add	r3, r2
 801bab6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[13], 4, 0x289b7ec6);  /* 41 */
 801baba:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801babe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bac2:	405a      	eors	r2, r3
 801bac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bac8:	405a      	eors	r2, r3
 801baca:	f107 0308 	add.w	r3, r7, #8
 801bace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bad0:	441a      	add	r2, r3
 801bad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bad6:	441a      	add	r2, r3
 801bad8:	4b33      	ldr	r3, [pc, #204]	; (801bba8 <MD5Transform+0xcac>)
 801bada:	4413      	add	r3, r2
 801badc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bae4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bae8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801baec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801baf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801baf4:	4413      	add	r3, r2
 801baf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[0], 11, 0xeaa127fa);  /* 42 */
 801bafa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bafe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bb02:	405a      	eors	r2, r3
 801bb04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb08:	405a      	eors	r2, r3
 801bb0a:	f107 0308 	add.w	r3, r7, #8
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	441a      	add	r2, r3
 801bb12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb16:	441a      	add	r2, r3
 801bb18:	4b24      	ldr	r3, [pc, #144]	; (801bbac <MD5Transform+0xcb0>)
 801bb1a:	4413      	add	r3, r2
 801bb1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bb20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb24:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bb28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bb2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb34:	4413      	add	r3, r2
 801bb36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[3], 16, 0xd4ef3085);  /* 43 */
 801bb3a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb42:	405a      	eors	r2, r3
 801bb44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bb48:	405a      	eors	r2, r3
 801bb4a:	f107 0308 	add.w	r3, r7, #8
 801bb4e:	68db      	ldr	r3, [r3, #12]
 801bb50:	441a      	add	r2, r3
 801bb52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb56:	441a      	add	r2, r3
 801bb58:	4b15      	ldr	r3, [pc, #84]	; (801bbb0 <MD5Transform+0xcb4>)
 801bb5a:	4413      	add	r3, r2
 801bb5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bb60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb64:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bb68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bb6c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bb70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb74:	4413      	add	r3, r2
 801bb76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bb7a:	e01b      	b.n	801bbb4 <MD5Transform+0xcb8>
 801bb7c:	a9e3e905 	.word	0xa9e3e905
 801bb80:	fcefa3f8 	.word	0xfcefa3f8
 801bb84:	676f02d9 	.word	0x676f02d9
 801bb88:	8d2a4c8a 	.word	0x8d2a4c8a
 801bb8c:	8771f681 	.word	0x8771f681
 801bb90:	6d9d6122 	.word	0x6d9d6122
 801bb94:	fde5380c 	.word	0xfde5380c
 801bb98:	a4beea44 	.word	0xa4beea44
 801bb9c:	4bdecfa9 	.word	0x4bdecfa9
 801bba0:	f6bb4b60 	.word	0xf6bb4b60
 801bba4:	bebfbc70 	.word	0xbebfbc70
 801bba8:	289b7ec6 	.word	0x289b7ec6
 801bbac:	eaa127fa 	.word	0xeaa127fa
 801bbb0:	d4ef3085 	.word	0xd4ef3085
    HH(b, c, d, a, x[6], 23, 0x4881d05);   /* 44 */
 801bbb4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bbb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bbbc:	405a      	eors	r2, r3
 801bbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbc2:	405a      	eors	r2, r3
 801bbc4:	f107 0308 	add.w	r3, r7, #8
 801bbc8:	699b      	ldr	r3, [r3, #24]
 801bbca:	441a      	add	r2, r3
 801bbcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bbd0:	441a      	add	r2, r3
 801bbd2:	4bf0      	ldr	r3, [pc, #960]	; (801bf94 <MD5Transform+0x1098>)
 801bbd4:	4413      	add	r3, r2
 801bbd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bbda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bbde:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bbe2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bbe6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bbea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bbee:	4413      	add	r3, r2
 801bbf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[9], 4, 0xd9d4d039);   /* 45 */
 801bbf4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bbf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bbfc:	405a      	eors	r2, r3
 801bbfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bc02:	405a      	eors	r2, r3
 801bc04:	f107 0308 	add.w	r3, r7, #8
 801bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc0a:	441a      	add	r2, r3
 801bc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc10:	441a      	add	r2, r3
 801bc12:	4be1      	ldr	r3, [pc, #900]	; (801bf98 <MD5Transform+0x109c>)
 801bc14:	4413      	add	r3, r2
 801bc16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc1e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bc22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bc26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bc2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc2e:	4413      	add	r3, r2
 801bc30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[12], 11, 0xe6db99e5); /* 46 */
 801bc34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bc38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc3c:	405a      	eors	r2, r3
 801bc3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bc42:	405a      	eors	r2, r3
 801bc44:	f107 0308 	add.w	r3, r7, #8
 801bc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc4a:	441a      	add	r2, r3
 801bc4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bc50:	441a      	add	r2, r3
 801bc52:	4bd2      	ldr	r3, [pc, #840]	; (801bf9c <MD5Transform+0x10a0>)
 801bc54:	4413      	add	r3, r2
 801bc56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bc5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bc5e:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bc62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bc66:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc6e:	4413      	add	r3, r2
 801bc70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[15], 16, 0x1fa27cf8); /* 47 */
 801bc74:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bc78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc7c:	405a      	eors	r2, r3
 801bc7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc82:	405a      	eors	r2, r3
 801bc84:	f107 0308 	add.w	r3, r7, #8
 801bc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc8a:	441a      	add	r2, r3
 801bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bc90:	441a      	add	r2, r3
 801bc92:	4bc3      	ldr	r3, [pc, #780]	; (801bfa0 <MD5Transform+0x10a4>)
 801bc94:	4413      	add	r3, r2
 801bc96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bc9e:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bca2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bca6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bcaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bcae:	4413      	add	r3, r2
 801bcb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[2], 23, 0xc4ac5665);  /* 48 */
 801bcb4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bcb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bcbc:	405a      	eors	r2, r3
 801bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bcc2:	405a      	eors	r2, r3
 801bcc4:	f107 0308 	add.w	r3, r7, #8
 801bcc8:	689b      	ldr	r3, [r3, #8]
 801bcca:	441a      	add	r2, r3
 801bccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bcd0:	441a      	add	r2, r3
 801bcd2:	4bb4      	ldr	r3, [pc, #720]	; (801bfa4 <MD5Transform+0x10a8>)
 801bcd4:	4413      	add	r3, r2
 801bcd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bcda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bcde:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bce2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bce6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bcea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bcee:	4413      	add	r3, r2
 801bcf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 4 */
    II(a, b, c, d, x[0], 6, 0xf4292244);   /* 49 */
 801bcf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bcf8:	43da      	mvns	r2, r3
 801bcfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bcfe:	431a      	orrs	r2, r3
 801bd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd04:	405a      	eors	r2, r3
 801bd06:	f107 0308 	add.w	r3, r7, #8
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	441a      	add	r2, r3
 801bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd12:	441a      	add	r2, r3
 801bd14:	4ba4      	ldr	r3, [pc, #656]	; (801bfa8 <MD5Transform+0x10ac>)
 801bd16:	4413      	add	r3, r2
 801bd18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd20:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bd24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bd28:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bd2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd30:	4413      	add	r3, r2
 801bd32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[7], 10, 0x432aff97);  /* 50 */
 801bd36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd3a:	43da      	mvns	r2, r3
 801bd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd40:	431a      	orrs	r2, r3
 801bd42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd46:	405a      	eors	r2, r3
 801bd48:	f107 0308 	add.w	r3, r7, #8
 801bd4c:	69db      	ldr	r3, [r3, #28]
 801bd4e:	441a      	add	r2, r3
 801bd50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bd54:	441a      	add	r2, r3
 801bd56:	4b95      	ldr	r3, [pc, #596]	; (801bfac <MD5Transform+0x10b0>)
 801bd58:	4413      	add	r3, r2
 801bd5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bd5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bd62:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bd66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bd6a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd72:	4413      	add	r3, r2
 801bd74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[14], 15, 0xab9423a7); /* 51 */
 801bd78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd7c:	43da      	mvns	r2, r3
 801bd7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bd82:	431a      	orrs	r2, r3
 801bd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd88:	405a      	eors	r2, r3
 801bd8a:	f107 0308 	add.w	r3, r7, #8
 801bd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd90:	441a      	add	r2, r3
 801bd92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd96:	441a      	add	r2, r3
 801bd98:	4b85      	ldr	r3, [pc, #532]	; (801bfb0 <MD5Transform+0x10b4>)
 801bd9a:	4413      	add	r3, r2
 801bd9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bda0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bda4:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bda8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bdac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bdb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bdb4:	4413      	add	r3, r2
 801bdb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[5], 21, 0xfc93a039);  /* 52 */
 801bdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bdbe:	43da      	mvns	r2, r3
 801bdc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdc4:	431a      	orrs	r2, r3
 801bdc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bdca:	405a      	eors	r2, r3
 801bdcc:	f107 0308 	add.w	r3, r7, #8
 801bdd0:	695b      	ldr	r3, [r3, #20]
 801bdd2:	441a      	add	r2, r3
 801bdd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bdd8:	441a      	add	r2, r3
 801bdda:	4b76      	ldr	r3, [pc, #472]	; (801bfb4 <MD5Transform+0x10b8>)
 801bddc:	4413      	add	r3, r2
 801bdde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bde2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bde6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bdea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bdee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdf6:	4413      	add	r3, r2
 801bdf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[12], 6, 0x655b59c3);  /* 53 */
 801bdfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be00:	43da      	mvns	r2, r3
 801be02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be06:	431a      	orrs	r2, r3
 801be08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be0c:	405a      	eors	r2, r3
 801be0e:	f107 0308 	add.w	r3, r7, #8
 801be12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be14:	441a      	add	r2, r3
 801be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be1a:	441a      	add	r2, r3
 801be1c:	4b66      	ldr	r3, [pc, #408]	; (801bfb8 <MD5Transform+0x10bc>)
 801be1e:	4413      	add	r3, r2
 801be20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801be24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be28:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801be2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801be30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801be34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be38:	4413      	add	r3, r2
 801be3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[3], 10, 0x8f0ccc92);  /* 54 */
 801be3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be42:	43da      	mvns	r2, r3
 801be44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be48:	431a      	orrs	r2, r3
 801be4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be4e:	405a      	eors	r2, r3
 801be50:	f107 0308 	add.w	r3, r7, #8
 801be54:	68db      	ldr	r3, [r3, #12]
 801be56:	441a      	add	r2, r3
 801be58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be5c:	441a      	add	r2, r3
 801be5e:	4b57      	ldr	r3, [pc, #348]	; (801bfbc <MD5Transform+0x10c0>)
 801be60:	4413      	add	r3, r2
 801be62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801be66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be6a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801be6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801be72:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be7a:	4413      	add	r3, r2
 801be7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[10], 15, 0xffeff47d); /* 55 */
 801be80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be84:	43da      	mvns	r2, r3
 801be86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be8a:	431a      	orrs	r2, r3
 801be8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be90:	405a      	eors	r2, r3
 801be92:	f107 0308 	add.w	r3, r7, #8
 801be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be98:	441a      	add	r2, r3
 801be9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be9e:	4413      	add	r3, r2
 801bea0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bea4:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 801bea8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801beac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801beb0:	ea4f 4373 	mov.w	r3, r3, ror #17
 801beb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801beb8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bec0:	4413      	add	r3, r2
 801bec2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[1], 21, 0x85845dd1);  /* 56 */
 801bec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801beca:	43da      	mvns	r2, r3
 801becc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bed0:	431a      	orrs	r2, r3
 801bed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bed6:	405a      	eors	r2, r3
 801bed8:	f107 0308 	add.w	r3, r7, #8
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	441a      	add	r2, r3
 801bee0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bee4:	441a      	add	r2, r3
 801bee6:	4b36      	ldr	r3, [pc, #216]	; (801bfc0 <MD5Transform+0x10c4>)
 801bee8:	4413      	add	r3, r2
 801beea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801beee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bef2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bef6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801befa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801befe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf02:	4413      	add	r3, r2
 801bf04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[8], 6, 0x6fa87e4f);   /* 57 */
 801bf08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf0c:	43da      	mvns	r2, r3
 801bf0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf12:	431a      	orrs	r2, r3
 801bf14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf18:	405a      	eors	r2, r3
 801bf1a:	f107 0308 	add.w	r3, r7, #8
 801bf1e:	6a1b      	ldr	r3, [r3, #32]
 801bf20:	441a      	add	r2, r3
 801bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf26:	441a      	add	r2, r3
 801bf28:	4b26      	ldr	r3, [pc, #152]	; (801bfc4 <MD5Transform+0x10c8>)
 801bf2a:	4413      	add	r3, r2
 801bf2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bf30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf34:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bf38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bf3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bf40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf44:	4413      	add	r3, r2
 801bf46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[15], 10, 0xfe2ce6e0); /* 58 */
 801bf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf4e:	43da      	mvns	r2, r3
 801bf50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf54:	431a      	orrs	r2, r3
 801bf56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf5a:	405a      	eors	r2, r3
 801bf5c:	f107 0308 	add.w	r3, r7, #8
 801bf60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf62:	441a      	add	r2, r3
 801bf64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf68:	441a      	add	r2, r3
 801bf6a:	4b17      	ldr	r3, [pc, #92]	; (801bfc8 <MD5Transform+0x10cc>)
 801bf6c:	4413      	add	r3, r2
 801bf6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bf72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf76:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bf7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bf7e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bf82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf86:	4413      	add	r3, r2
 801bf88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[6], 15, 0xa3014314);  /* 59 */
 801bf8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf90:	43da      	mvns	r2, r3
 801bf92:	e01b      	b.n	801bfcc <MD5Transform+0x10d0>
 801bf94:	04881d05 	.word	0x04881d05
 801bf98:	d9d4d039 	.word	0xd9d4d039
 801bf9c:	e6db99e5 	.word	0xe6db99e5
 801bfa0:	1fa27cf8 	.word	0x1fa27cf8
 801bfa4:	c4ac5665 	.word	0xc4ac5665
 801bfa8:	f4292244 	.word	0xf4292244
 801bfac:	432aff97 	.word	0x432aff97
 801bfb0:	ab9423a7 	.word	0xab9423a7
 801bfb4:	fc93a039 	.word	0xfc93a039
 801bfb8:	655b59c3 	.word	0x655b59c3
 801bfbc:	8f0ccc92 	.word	0x8f0ccc92
 801bfc0:	85845dd1 	.word	0x85845dd1
 801bfc4:	6fa87e4f 	.word	0x6fa87e4f
 801bfc8:	fe2ce6e0 	.word	0xfe2ce6e0
 801bfcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bfd0:	431a      	orrs	r2, r3
 801bfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bfd6:	405a      	eors	r2, r3
 801bfd8:	f107 0308 	add.w	r3, r7, #8
 801bfdc:	699b      	ldr	r3, [r3, #24]
 801bfde:	441a      	add	r2, r3
 801bfe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bfe4:	441a      	add	r2, r3
 801bfe6:	4b72      	ldr	r3, [pc, #456]	; (801c1b0 <MD5Transform+0x12b4>)
 801bfe8:	4413      	add	r3, r2
 801bfea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bfee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bff2:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bffa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bffe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c002:	4413      	add	r3, r2
 801c004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[13], 21, 0x4e0811a1); /* 60 */
 801c008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c00c:	43da      	mvns	r2, r3
 801c00e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c012:	431a      	orrs	r2, r3
 801c014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c018:	405a      	eors	r2, r3
 801c01a:	f107 0308 	add.w	r3, r7, #8
 801c01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c020:	441a      	add	r2, r3
 801c022:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c026:	441a      	add	r2, r3
 801c028:	4b62      	ldr	r3, [pc, #392]	; (801c1b4 <MD5Transform+0x12b8>)
 801c02a:	4413      	add	r3, r2
 801c02c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c030:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c034:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c038:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c03c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c044:	4413      	add	r3, r2
 801c046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[4], 6, 0xf7537e82);   /* 61 */
 801c04a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c04e:	43da      	mvns	r2, r3
 801c050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c054:	431a      	orrs	r2, r3
 801c056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c05a:	405a      	eors	r2, r3
 801c05c:	f107 0308 	add.w	r3, r7, #8
 801c060:	691b      	ldr	r3, [r3, #16]
 801c062:	441a      	add	r2, r3
 801c064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c068:	441a      	add	r2, r3
 801c06a:	4b53      	ldr	r3, [pc, #332]	; (801c1b8 <MD5Transform+0x12bc>)
 801c06c:	4413      	add	r3, r2
 801c06e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c076:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c07a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c07e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c082:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c086:	4413      	add	r3, r2
 801c088:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[11], 10, 0xbd3af235); /* 62 */
 801c08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c090:	43da      	mvns	r2, r3
 801c092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c096:	431a      	orrs	r2, r3
 801c098:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c09c:	405a      	eors	r2, r3
 801c09e:	f107 0308 	add.w	r3, r7, #8
 801c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0a4:	441a      	add	r2, r3
 801c0a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c0aa:	441a      	add	r2, r3
 801c0ac:	4b43      	ldr	r3, [pc, #268]	; (801c1bc <MD5Transform+0x12c0>)
 801c0ae:	4413      	add	r3, r2
 801c0b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c0b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c0b8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c0bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c0c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c0c8:	4413      	add	r3, r2
 801c0ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[2], 15, 0x2ad7d2bb);  /* 63 */
 801c0ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c0d2:	43da      	mvns	r2, r3
 801c0d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c0d8:	431a      	orrs	r2, r3
 801c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c0de:	405a      	eors	r2, r3
 801c0e0:	f107 0308 	add.w	r3, r7, #8
 801c0e4:	689b      	ldr	r3, [r3, #8]
 801c0e6:	441a      	add	r2, r3
 801c0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c0ec:	441a      	add	r2, r3
 801c0ee:	4b34      	ldr	r3, [pc, #208]	; (801c1c0 <MD5Transform+0x12c4>)
 801c0f0:	4413      	add	r3, r2
 801c0f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c0f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c0fa:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c0fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c102:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c106:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c10a:	4413      	add	r3, r2
 801c10c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[9], 21, 0xeb86d391);  /* 64 */
 801c110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c114:	43da      	mvns	r2, r3
 801c116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c11a:	431a      	orrs	r2, r3
 801c11c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c120:	405a      	eors	r2, r3
 801c122:	f107 0308 	add.w	r3, r7, #8
 801c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c128:	441a      	add	r2, r3
 801c12a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c12e:	441a      	add	r2, r3
 801c130:	4b24      	ldr	r3, [pc, #144]	; (801c1c4 <MD5Transform+0x12c8>)
 801c132:	4413      	add	r3, r2
 801c134:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c138:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c13c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c140:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c144:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c14c:	4413      	add	r3, r2
 801c14e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    state[0] += a;
 801c152:	1d3b      	adds	r3, r7, #4
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	681a      	ldr	r2, [r3, #0]
 801c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c15c:	441a      	add	r2, r3
 801c15e:	1d3b      	adds	r3, r7, #4
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	601a      	str	r2, [r3, #0]
    state[1] += b;
 801c164:	1d3b      	adds	r3, r7, #4
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	3304      	adds	r3, #4
 801c16a:	6819      	ldr	r1, [r3, #0]
 801c16c:	1d3b      	adds	r3, r7, #4
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	3304      	adds	r3, #4
 801c172:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c176:	440a      	add	r2, r1
 801c178:	601a      	str	r2, [r3, #0]
    state[2] += c;
 801c17a:	1d3b      	adds	r3, r7, #4
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	3308      	adds	r3, #8
 801c180:	6819      	ldr	r1, [r3, #0]
 801c182:	1d3b      	adds	r3, r7, #4
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	3308      	adds	r3, #8
 801c188:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c18c:	440a      	add	r2, r1
 801c18e:	601a      	str	r2, [r3, #0]
    state[3] += d;
 801c190:	1d3b      	adds	r3, r7, #4
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	330c      	adds	r3, #12
 801c196:	6819      	ldr	r1, [r3, #0]
 801c198:	1d3b      	adds	r3, r7, #4
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	330c      	adds	r3, #12
 801c19e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c1a2:	440a      	add	r2, r1
 801c1a4:	601a      	str	r2, [r3, #0]
}
 801c1a6:	bf00      	nop
 801c1a8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bd80      	pop	{r7, pc}
 801c1b0:	a3014314 	.word	0xa3014314
 801c1b4:	4e0811a1 	.word	0x4e0811a1
 801c1b8:	f7537e82 	.word	0xf7537e82
 801c1bc:	bd3af235 	.word	0xbd3af235
 801c1c0:	2ad7d2bb 	.word	0x2ad7d2bb
 801c1c4:	eb86d391 	.word	0xeb86d391

0801c1c8 <MD5_File_Compute>:
 * @param  file_path
 * @param  md5_str
 * @return 0: ok, -1: fail
 */
int MD5_File_Compute(Flash_FILE *file, uint8_t *md5_value)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b09a      	sub	sp, #104	; 0x68
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
 801c1d0:	6039      	str	r1, [r7, #0]
	size_t ret;
	uint8_t *data;
    data = (uint8_t *)malloc(FLASH_PAGE);
 801c1d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801c1d6:	f005 f9bd 	bl	8021554 <malloc>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	667b      	str	r3, [r7, #100]	; 0x64
	MD5_CTX md5;

	// init md5
	MD5Init(&md5);
 801c1de:	f107 0308 	add.w	r3, r7, #8
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	f7fe fd36 	bl	801ac54 <MD5Init>
	return htim2.Instance->CNT;
 801c1e8:	4b24      	ldr	r3, [pc, #144]	; (801c27c <MD5_File_Compute+0xb4>)
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	#if ENERGEST_CONF_ON
		ENERGEST_ON(ENERGEST_TYPE_FLASH_VERIFY);
 801c1ee:	4a24      	ldr	r2, [pc, #144]	; (801c280 <MD5_File_Compute+0xb8>)
 801c1f0:	6353      	str	r3, [r2, #52]	; 0x34
 801c1f2:	4b24      	ldr	r3, [pc, #144]	; (801c284 <MD5_File_Compute+0xbc>)
 801c1f4:	2201      	movs	r2, #1
 801c1f6:	735a      	strb	r2, [r3, #13]
	#endif
	the_fseek(file, 0, SEEK_SET);
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	2100      	movs	r1, #0
 801c1fc:	6878      	ldr	r0, [r7, #4]
 801c1fe:	f7fd fe0d 	bl	8019e1c <the_fseek>
	while (1)
	{
		ret = the_fread(data, 1, FLASH_PAGE, file);
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c208:	2101      	movs	r1, #1
 801c20a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801c20c:	f7fd fe6e 	bl	8019eec <the_fread>
 801c210:	6638      	str	r0, [r7, #96]	; 0x60
        the_fseek(file, FLASH_PAGE, SEEK_CUR);
 801c212:	2201      	movs	r2, #1
 801c214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7fd fdff 	bl	8019e1c <the_fseek>

		MD5Update(&md5, data, ret);
 801c21e:	f107 0308 	add.w	r3, r7, #8
 801c222:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c224:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801c226:	4618      	mov	r0, r3
 801c228:	f7fe fd38 	bl	801ac9c <MD5Update>

		if (0 == ret || ret < FLASH_PAGE)
 801c22c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d003      	beq.n	801c23a <MD5_File_Compute+0x72>
 801c232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c238:	d2e3      	bcs.n	801c202 <MD5_File_Compute+0x3a>
		{
			free(data);
 801c23a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801c23c:	f005 f992 	bl	8021564 <free>
			break;
 801c240:	bf00      	nop
		}
	}

	MD5Final(&md5, md5_value);
 801c242:	f107 0308 	add.w	r3, r7, #8
 801c246:	6839      	ldr	r1, [r7, #0]
 801c248:	4618      	mov	r0, r3
 801c24a:	f7fe fd97 	bl	801ad7c <MD5Final>
	#if ENERGEST_CONF_ON
		ENERGEST_OFF(ENERGEST_TYPE_FLASH_VERIFY);
 801c24e:	4b0d      	ldr	r3, [pc, #52]	; (801c284 <MD5_File_Compute+0xbc>)
 801c250:	7b5b      	ldrb	r3, [r3, #13]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d00d      	beq.n	801c272 <MD5_File_Compute+0xaa>
 801c256:	4b09      	ldr	r3, [pc, #36]	; (801c27c <MD5_File_Compute+0xb4>)
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c25c:	4b08      	ldr	r3, [pc, #32]	; (801c280 <MD5_File_Compute+0xb8>)
 801c25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c260:	1ad2      	subs	r2, r2, r3
 801c262:	4b09      	ldr	r3, [pc, #36]	; (801c288 <MD5_File_Compute+0xc0>)
 801c264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c266:	4413      	add	r3, r2
 801c268:	4a07      	ldr	r2, [pc, #28]	; (801c288 <MD5_File_Compute+0xc0>)
 801c26a:	6353      	str	r3, [r2, #52]	; 0x34
 801c26c:	4b05      	ldr	r3, [pc, #20]	; (801c284 <MD5_File_Compute+0xbc>)
 801c26e:	2200      	movs	r2, #0
 801c270:	735a      	strb	r2, [r3, #13]
	#endif
	return 0;
 801c272:	2300      	movs	r3, #0
}
 801c274:	4618      	mov	r0, r3
 801c276:	3768      	adds	r7, #104	; 0x68
 801c278:	46bd      	mov	sp, r7
 801c27a:	bd80      	pop	{r7, pc}
 801c27c:	200012c8 	.word	0x200012c8
 801c280:	20001308 	.word	0x20001308
 801c284:	2000112c 	.word	0x2000112c
 801c288:	20000f10 	.word	0x20000f10

0801c28c <MD5_File>:

bool MD5_File(Flash_FILE md5File, uint8_t *md5_check)
{
 801c28c:	b590      	push	{r4, r7, lr}
 801c28e:	b08b      	sub	sp, #44	; 0x2c
 801c290:	af00      	add	r7, sp, #0
 801c292:	463c      	mov	r4, r7
 801c294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int ret;
    PRINTF_CHIRP("MD5 File size:%lu\n", md5File.file_size);
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	4619      	mov	r1, r3
 801c29c:	4829      	ldr	r0, [pc, #164]	; (801c344 <MD5_File+0xb8>)
 801c29e:	f005 ff81 	bl	80221a4 <iprintf>
	uint8_t md5_value[MD5_SIZE];

	// test file md5
	ret = MD5_File_Compute(&md5File, md5_value);
 801c2a2:	f107 0210 	add.w	r2, r7, #16
 801c2a6:	463b      	mov	r3, r7
 801c2a8:	4611      	mov	r1, r2
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	f7ff ff8c 	bl	801c1c8 <MD5_File_Compute>
 801c2b0:	6238      	str	r0, [r7, #32]
	if (0 == ret)
 801c2b2:	6a3b      	ldr	r3, [r7, #32]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d11d      	bne.n	801c2f4 <MD5_File+0x68>
	{
		PRINTF_CHIRP("MD5 value:\n");
 801c2b8:	4823      	ldr	r0, [pc, #140]	; (801c348 <MD5_File+0xbc>)
 801c2ba:	f005 fffb 	bl	80222b4 <puts>
		for(uint8_t i = 0; i < MD5_SIZE; i++)
 801c2be:	2300      	movs	r3, #0
 801c2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c2c4:	e00f      	b.n	801c2e6 <MD5_File+0x5a>
			PRINTF_CHIRP("%02X", md5_value[i]);
 801c2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c2ce:	4413      	add	r3, r2
 801c2d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801c2d4:	4619      	mov	r1, r3
 801c2d6:	481d      	ldr	r0, [pc, #116]	; (801c34c <MD5_File+0xc0>)
 801c2d8:	f005 ff64 	bl	80221a4 <iprintf>
		for(uint8_t i = 0; i < MD5_SIZE; i++)
 801c2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2e0:	3301      	adds	r3, #1
 801c2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c2ea:	2b0f      	cmp	r3, #15
 801c2ec:	d9eb      	bls.n	801c2c6 <MD5_File+0x3a>
		PRINTF_CHIRP("\n");
 801c2ee:	200a      	movs	r0, #10
 801c2f0:	f005 ff70 	bl	80221d4 <putchar>
	}

	for (uint8_t i = 0; i < MD5_SIZE; i++)
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c2fa:	e017      	b.n	801c32c <MD5_File+0xa0>
	{
		if (md5_check[i] != md5_value[i])
 801c2fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c302:	4413      	add	r3, r2
 801c304:	781a      	ldrb	r2, [r3, #0]
 801c306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c30a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801c30e:	440b      	add	r3, r1
 801c310:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801c314:	429a      	cmp	r2, r3
 801c316:	d004      	beq.n	801c322 <MD5_File+0x96>
		{
			PRINTF_CHIRP("MD5 check wrong\n");
 801c318:	480d      	ldr	r0, [pc, #52]	; (801c350 <MD5_File+0xc4>)
 801c31a:	f005 ffcb 	bl	80222b4 <puts>
			return false;
 801c31e:	2300      	movs	r3, #0
 801c320:	e00c      	b.n	801c33c <MD5_File+0xb0>
	for (uint8_t i = 0; i < MD5_SIZE; i++)
 801c322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c326:	3301      	adds	r3, #1
 801c328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c32c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c330:	2b0f      	cmp	r3, #15
 801c332:	d9e3      	bls.n	801c2fc <MD5_File+0x70>
		}
	}
	PRINTF_CHIRP("MD5 check right\n");
 801c334:	4807      	ldr	r0, [pc, #28]	; (801c354 <MD5_File+0xc8>)
 801c336:	f005 ffbd 	bl	80222b4 <puts>
	return true;
 801c33a:	2301      	movs	r3, #1
}
 801c33c:	4618      	mov	r0, r3
 801c33e:	372c      	adds	r7, #44	; 0x2c
 801c340:	46bd      	mov	sp, r7
 801c342:	bd90      	pop	{r4, r7, pc}
 801c344:	08025f84 	.word	0x08025f84
 801c348:	08025f98 	.word	0x08025f98
 801c34c:	08025fa4 	.word	0x08025fa4
 801c350:	08025fac 	.word	0x08025fac
 801c354:	08025fbc 	.word	0x08025fbc

0801c358 <FLASH_If_Erase>:
  * @param  bank_active: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t bank_active)
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b08a      	sub	sp, #40	; 0x28
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	6078      	str	r0, [r7, #4]
  gpi_watchdog_periodic();
 801c360:	f7f1 fef2 	bl	800e148 <gpi_watchdog_periodic>
  uint32_t bank_to_erase, error = 0;
 801c364:	2300      	movs	r3, #0
 801c366:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 801c368:	2300      	movs	r3, #0
 801c36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (bank_active == 0)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d102      	bne.n	801c37a <FLASH_If_Erase+0x22>
  {
    bank_to_erase = FLASH_BANK_2;
 801c374:	2302      	movs	r3, #2
 801c376:	627b      	str	r3, [r7, #36]	; 0x24
 801c378:	e001      	b.n	801c37e <FLASH_If_Erase+0x26>
  }
  else
  {
    bank_to_erase = FLASH_BANK_1;
 801c37a:	2301      	movs	r3, #1
 801c37c:	627b      	str	r3, [r7, #36]	; 0x24
 801c37e:	4b2b      	ldr	r3, [pc, #172]	; (801c42c <FLASH_If_Erase+0xd4>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
  #if ENERGEST_CONF_ON
    ENERGEST_ON(ENERGEST_TYPE_FLASH_ERASE);
 801c384:	4a2a      	ldr	r2, [pc, #168]	; (801c430 <FLASH_If_Erase+0xd8>)
 801c386:	6313      	str	r3, [r2, #48]	; 0x30
 801c388:	4b2a      	ldr	r3, [pc, #168]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c38a:	2201      	movs	r2, #1
 801c38c:	731a      	strb	r2, [r3, #12]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801c38e:	4b29      	ldr	r3, [pc, #164]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c390:	79db      	ldrb	r3, [r3, #7]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d00d      	beq.n	801c3b2 <FLASH_If_Erase+0x5a>
 801c396:	4b25      	ldr	r3, [pc, #148]	; (801c42c <FLASH_If_Erase+0xd4>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c39c:	4b24      	ldr	r3, [pc, #144]	; (801c430 <FLASH_If_Erase+0xd8>)
 801c39e:	69db      	ldr	r3, [r3, #28]
 801c3a0:	1ad2      	subs	r2, r2, r3
 801c3a2:	4b25      	ldr	r3, [pc, #148]	; (801c438 <FLASH_If_Erase+0xe0>)
 801c3a4:	69db      	ldr	r3, [r3, #28]
 801c3a6:	4413      	add	r3, r2
 801c3a8:	4a23      	ldr	r2, [pc, #140]	; (801c438 <FLASH_If_Erase+0xe0>)
 801c3aa:	61d3      	str	r3, [r2, #28]
 801c3ac:	4b21      	ldr	r3, [pc, #132]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801c3b2:	f7e5 ffa7 	bl	8002304 <HAL_FLASH_Unlock>

  pEraseInit.Banks = bank_to_erase;
 801c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3b8:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = 255;
 801c3ba:	23ff      	movs	r3, #255	; 0xff
 801c3bc:	61bb      	str	r3, [r7, #24]
  pEraseInit.Page = 0;
 801c3be:	2300      	movs	r3, #0
 801c3c0:	617b      	str	r3, [r7, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 801c3c2:	2301      	movs	r3, #1
 801c3c4:	60fb      	str	r3, [r7, #12]

  status = HAL_FLASHEx_Erase(&pEraseInit, &error);
 801c3c6:	f107 021c 	add.w	r2, r7, #28
 801c3ca:	f107 030c 	add.w	r3, r7, #12
 801c3ce:	4611      	mov	r1, r2
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7e6 f8a3 	bl	800251c <HAL_FLASHEx_Erase>
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801c3dc:	f7e5 ffb4 	bl	8002348 <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    ENERGEST_OFF(ENERGEST_TYPE_FLASH_ERASE);
 801c3e0:	4b14      	ldr	r3, [pc, #80]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c3e2:	7b1b      	ldrb	r3, [r3, #12]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d00d      	beq.n	801c404 <FLASH_If_Erase+0xac>
 801c3e8:	4b10      	ldr	r3, [pc, #64]	; (801c42c <FLASH_If_Erase+0xd4>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c3ee:	4b10      	ldr	r3, [pc, #64]	; (801c430 <FLASH_If_Erase+0xd8>)
 801c3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3f2:	1ad2      	subs	r2, r2, r3
 801c3f4:	4b10      	ldr	r3, [pc, #64]	; (801c438 <FLASH_If_Erase+0xe0>)
 801c3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3f8:	4413      	add	r3, r2
 801c3fa:	4a0f      	ldr	r2, [pc, #60]	; (801c438 <FLASH_If_Erase+0xe0>)
 801c3fc:	6313      	str	r3, [r2, #48]	; 0x30
 801c3fe:	4b0d      	ldr	r3, [pc, #52]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c400:	2200      	movs	r2, #0
 801c402:	731a      	strb	r2, [r3, #12]
 801c404:	4b09      	ldr	r3, [pc, #36]	; (801c42c <FLASH_If_Erase+0xd4>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801c40a:	4a09      	ldr	r2, [pc, #36]	; (801c430 <FLASH_If_Erase+0xd8>)
 801c40c:	61d3      	str	r3, [r2, #28]
 801c40e:	4b09      	ldr	r3, [pc, #36]	; (801c434 <FLASH_If_Erase+0xdc>)
 801c410:	2201      	movs	r2, #1
 801c412:	71da      	strb	r2, [r3, #7]
  #endif
  if (status != HAL_OK)
 801c414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d001      	beq.n	801c420 <FLASH_If_Erase+0xc8>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 801c41c:	2301      	movs	r3, #1
 801c41e:	e000      	b.n	801c422 <FLASH_If_Erase+0xca>
  }

  return FLASHIF_OK;
 801c420:	2300      	movs	r3, #0
}
 801c422:	4618      	mov	r0, r3
 801c424:	3728      	adds	r7, #40	; 0x28
 801c426:	46bd      	mov	sp, r7
 801c428:	bd80      	pop	{r7, pc}
 801c42a:	bf00      	nop
 801c42c:	200012c8 	.word	0x200012c8
 801c430:	20001308 	.word	0x20001308
 801c434:	2000112c 	.word	0x2000112c
 801c438:	20000f10 	.word	0x20000f10

0801c43c <FLASH_If_Erase_Pages>:

//**************************************************************************************************

uint32_t FLASH_If_Erase_Pages(uint32_t bank_active, uint32_t page)
{
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b08a      	sub	sp, #40	; 0x28
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
 801c444:	6039      	str	r1, [r7, #0]
  gpi_watchdog_periodic();
 801c446:	f7f1 fe7f 	bl	800e148 <gpi_watchdog_periodic>
  uint32_t bank_to_erase, error = 0;
 801c44a:	2300      	movs	r3, #0
 801c44c:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 801c44e:	2300      	movs	r3, #0
 801c450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (bank_active == 0)
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d102      	bne.n	801c460 <FLASH_If_Erase_Pages+0x24>
  {
    bank_to_erase = FLASH_BANK_2;
 801c45a:	2302      	movs	r3, #2
 801c45c:	627b      	str	r3, [r7, #36]	; 0x24
 801c45e:	e001      	b.n	801c464 <FLASH_If_Erase_Pages+0x28>
  }
  else
  {
    bank_to_erase = FLASH_BANK_1;
 801c460:	2301      	movs	r3, #1
 801c462:	627b      	str	r3, [r7, #36]	; 0x24
 801c464:	4b2a      	ldr	r3, [pc, #168]	; (801c510 <FLASH_If_Erase_Pages+0xd4>)
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }

  #if ENERGEST_CONF_ON
    ENERGEST_ON(ENERGEST_TYPE_FLASH_ERASE);
 801c46a:	4a2a      	ldr	r2, [pc, #168]	; (801c514 <FLASH_If_Erase_Pages+0xd8>)
 801c46c:	6313      	str	r3, [r2, #48]	; 0x30
 801c46e:	4b2a      	ldr	r3, [pc, #168]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c470:	2201      	movs	r2, #1
 801c472:	731a      	strb	r2, [r3, #12]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801c474:	4b28      	ldr	r3, [pc, #160]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c476:	79db      	ldrb	r3, [r3, #7]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d00d      	beq.n	801c498 <FLASH_If_Erase_Pages+0x5c>
 801c47c:	4b24      	ldr	r3, [pc, #144]	; (801c510 <FLASH_If_Erase_Pages+0xd4>)
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c482:	4b24      	ldr	r3, [pc, #144]	; (801c514 <FLASH_If_Erase_Pages+0xd8>)
 801c484:	69db      	ldr	r3, [r3, #28]
 801c486:	1ad2      	subs	r2, r2, r3
 801c488:	4b24      	ldr	r3, [pc, #144]	; (801c51c <FLASH_If_Erase_Pages+0xe0>)
 801c48a:	69db      	ldr	r3, [r3, #28]
 801c48c:	4413      	add	r3, r2
 801c48e:	4a23      	ldr	r2, [pc, #140]	; (801c51c <FLASH_If_Erase_Pages+0xe0>)
 801c490:	61d3      	str	r3, [r2, #28]
 801c492:	4b21      	ldr	r3, [pc, #132]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c494:	2200      	movs	r2, #0
 801c496:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801c498:	f7e5 ff34 	bl	8002304 <HAL_FLASH_Unlock>

  pEraseInit.Banks = bank_to_erase;
 801c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c49e:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = 1;
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	61bb      	str	r3, [r7, #24]
  pEraseInit.Page = page;
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	617b      	str	r3, [r7, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	60fb      	str	r3, [r7, #12]

  status = HAL_FLASHEx_Erase(&pEraseInit, &error);
 801c4ac:	f107 021c 	add.w	r2, r7, #28
 801c4b0:	f107 030c 	add.w	r3, r7, #12
 801c4b4:	4611      	mov	r1, r2
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	f7e6 f830 	bl	800251c <HAL_FLASHEx_Erase>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801c4c2:	f7e5 ff41 	bl	8002348 <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    ENERGEST_OFF(ENERGEST_TYPE_FLASH_ERASE);
 801c4c6:	4b14      	ldr	r3, [pc, #80]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c4c8:	7b1b      	ldrb	r3, [r3, #12]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d00d      	beq.n	801c4ea <FLASH_If_Erase_Pages+0xae>
 801c4ce:	4b10      	ldr	r3, [pc, #64]	; (801c510 <FLASH_If_Erase_Pages+0xd4>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c4d4:	4b0f      	ldr	r3, [pc, #60]	; (801c514 <FLASH_If_Erase_Pages+0xd8>)
 801c4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4d8:	1ad2      	subs	r2, r2, r3
 801c4da:	4b10      	ldr	r3, [pc, #64]	; (801c51c <FLASH_If_Erase_Pages+0xe0>)
 801c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4de:	4413      	add	r3, r2
 801c4e0:	4a0e      	ldr	r2, [pc, #56]	; (801c51c <FLASH_If_Erase_Pages+0xe0>)
 801c4e2:	6313      	str	r3, [r2, #48]	; 0x30
 801c4e4:	4b0c      	ldr	r3, [pc, #48]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	731a      	strb	r2, [r3, #12]
 801c4ea:	4b09      	ldr	r3, [pc, #36]	; (801c510 <FLASH_If_Erase_Pages+0xd4>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801c4f0:	4a08      	ldr	r2, [pc, #32]	; (801c514 <FLASH_If_Erase_Pages+0xd8>)
 801c4f2:	61d3      	str	r3, [r2, #28]
 801c4f4:	4b08      	ldr	r3, [pc, #32]	; (801c518 <FLASH_If_Erase_Pages+0xdc>)
 801c4f6:	2201      	movs	r2, #1
 801c4f8:	71da      	strb	r2, [r3, #7]
  #endif
  if (status != HAL_OK)
 801c4fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d001      	beq.n	801c506 <FLASH_If_Erase_Pages+0xca>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 801c502:	2301      	movs	r3, #1
 801c504:	e000      	b.n	801c508 <FLASH_If_Erase_Pages+0xcc>
  }

  return FLASHIF_OK;
 801c506:	2300      	movs	r3, #0
}
 801c508:	4618      	mov	r0, r3
 801c50a:	3728      	adds	r7, #40	; 0x28
 801c50c:	46bd      	mov	sp, r7
 801c50e:	bd80      	pop	{r7, pc}
 801c510:	200012c8 	.word	0x200012c8
 801c514:	20001308 	.word	0x20001308
 801c518:	2000112c 	.word	0x2000112c
 801c51c:	20000f10 	.word	0x20000f10

0801c520 <FLASH_If_Check_old>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK: user flash area successfully erased
  *         other: error occurred
  */
uint32_t FLASH_If_Check_old(uint32_t start)
{
 801c520:	b480      	push	{r7}
 801c522:	b083      	sub	sp, #12
 801c524:	af00      	add	r7, sp, #0
 801c526:	6078      	str	r0, [r7, #4]
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASHIF_EMPTY;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	0e1b      	lsrs	r3, r3, #24
 801c52e:	2b20      	cmp	r3, #32
 801c530:	d001      	beq.n	801c536 <FLASH_If_Check_old+0x16>
 801c532:	2306      	movs	r3, #6
 801c534:	e000      	b.n	801c538 <FLASH_If_Check_old+0x18>

  return FLASHIF_OK;
 801c536:	2300      	movs	r3, #0
}
 801c538:	4618      	mov	r0, r3
 801c53a:	370c      	adds	r7, #12
 801c53c:	46bd      	mov	sp, r7
 801c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c542:	4770      	bx	lr

0801c544 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 801c544:	b590      	push	{r4, r7, lr}
 801c546:	b087      	sub	sp, #28
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
  gpi_watchdog_periodic();
 801c550:	f7f1 fdfa 	bl	800e148 <gpi_watchdog_periodic>
  uint32_t status = FLASHIF_OK;
 801c554:	2300      	movs	r3, #0
 801c556:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 801c558:	2300      	movs	r3, #0
 801c55a:	613b      	str	r3, [r7, #16]

  #if ENERGEST_CONF_ON
    if (destination >= FLASH_START_BANK2)
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	4a4a      	ldr	r2, [pc, #296]	; (801c688 <FLASH_If_Write+0x144>)
 801c560:	4293      	cmp	r3, r2
 801c562:	d908      	bls.n	801c576 <FLASH_If_Write+0x32>
 801c564:	4b49      	ldr	r3, [pc, #292]	; (801c68c <FLASH_If_Write+0x148>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE_BANK2);
 801c56a:	4a49      	ldr	r2, [pc, #292]	; (801c690 <FLASH_If_Write+0x14c>)
 801c56c:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c56e:	4b49      	ldr	r3, [pc, #292]	; (801c694 <FLASH_If_Write+0x150>)
 801c570:	2201      	movs	r2, #1
 801c572:	72da      	strb	r2, [r3, #11]
 801c574:	e007      	b.n	801c586 <FLASH_If_Write+0x42>
 801c576:	4b45      	ldr	r3, [pc, #276]	; (801c68c <FLASH_If_Write+0x148>)
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    else
      ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE_BANK1);
 801c57c:	4a44      	ldr	r2, [pc, #272]	; (801c690 <FLASH_If_Write+0x14c>)
 801c57e:	6293      	str	r3, [r2, #40]	; 0x28
 801c580:	4b44      	ldr	r3, [pc, #272]	; (801c694 <FLASH_If_Write+0x150>)
 801c582:	2201      	movs	r2, #1
 801c584:	729a      	strb	r2, [r3, #10]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801c586:	4b43      	ldr	r3, [pc, #268]	; (801c694 <FLASH_If_Write+0x150>)
 801c588:	79db      	ldrb	r3, [r3, #7]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d00d      	beq.n	801c5aa <FLASH_If_Write+0x66>
 801c58e:	4b3f      	ldr	r3, [pc, #252]	; (801c68c <FLASH_If_Write+0x148>)
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c594:	4b3e      	ldr	r3, [pc, #248]	; (801c690 <FLASH_If_Write+0x14c>)
 801c596:	69db      	ldr	r3, [r3, #28]
 801c598:	1ad2      	subs	r2, r2, r3
 801c59a:	4b3f      	ldr	r3, [pc, #252]	; (801c698 <FLASH_If_Write+0x154>)
 801c59c:	69db      	ldr	r3, [r3, #28]
 801c59e:	4413      	add	r3, r2
 801c5a0:	4a3d      	ldr	r2, [pc, #244]	; (801c698 <FLASH_If_Write+0x154>)
 801c5a2:	61d3      	str	r3, [r2, #28]
 801c5a4:	4b3b      	ldr	r3, [pc, #236]	; (801c694 <FLASH_If_Write+0x150>)
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801c5aa:	f7e5 feab 	bl	8002304 <HAL_FLASH_Unlock>

  /* DataLength must be a multiple of 64 bit */
  for (i = 0; (i < length / 2) && (destination <= (USER_FLASH_END_ADDRESS - 8)); i++)
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	613b      	str	r3, [r7, #16]
 801c5b2:	e028      	b.n	801c606 <FLASH_If_Write+0xc2>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source + 2*i))) == HAL_OK)
 801c5b4:	693b      	ldr	r3, [r7, #16]
 801c5b6:	00db      	lsls	r3, r3, #3
 801c5b8:	68ba      	ldr	r2, [r7, #8]
 801c5ba:	4413      	add	r3, r2
 801c5bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c5c0:	461a      	mov	r2, r3
 801c5c2:	4623      	mov	r3, r4
 801c5c4:	68f9      	ldr	r1, [r7, #12]
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	f7e5 fe30 	bl	800222c <HAL_FLASH_Program>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d113      	bne.n	801c5fa <FLASH_If_Write+0xb6>
    {
      /* Check the written value */
      if (*(uint64_t*)destination != *(uint64_t *)(p_source + 2*i))
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	00db      	lsls	r3, r3, #3
 801c5dc:	68b8      	ldr	r0, [r7, #8]
 801c5de:	4403      	add	r3, r0
 801c5e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c5e4:	42a2      	cmp	r2, r4
 801c5e6:	bf08      	it	eq
 801c5e8:	4299      	cmpeq	r1, r3
 801c5ea:	d002      	beq.n	801c5f2 <FLASH_If_Write+0xae>
      {
        /* Flash content doesn't match SRAM content */
        status = FLASHIF_WRITINGCTRL_ERROR;
 801c5ec:	2302      	movs	r3, #2
 801c5ee:	617b      	str	r3, [r7, #20]
        break;
 801c5f0:	e012      	b.n	801c618 <FLASH_If_Write+0xd4>
      }
      /* Increment FLASH destination address */
      destination += 8;
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	3308      	adds	r3, #8
 801c5f6:	60fb      	str	r3, [r7, #12]
 801c5f8:	e002      	b.n	801c600 <FLASH_If_Write+0xbc>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      status = FLASHIF_WRITING_ERROR;
 801c5fa:	2303      	movs	r3, #3
 801c5fc:	617b      	str	r3, [r7, #20]
      break;
 801c5fe:	e00b      	b.n	801c618 <FLASH_If_Write+0xd4>
  for (i = 0; (i < length / 2) && (destination <= (USER_FLASH_END_ADDRESS - 8)); i++)
 801c600:	693b      	ldr	r3, [r7, #16]
 801c602:	3301      	adds	r3, #1
 801c604:	613b      	str	r3, [r7, #16]
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	085b      	lsrs	r3, r3, #1
 801c60a:	693a      	ldr	r2, [r7, #16]
 801c60c:	429a      	cmp	r2, r3
 801c60e:	d203      	bcs.n	801c618 <FLASH_If_Write+0xd4>
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	4a22      	ldr	r2, [pc, #136]	; (801c69c <FLASH_If_Write+0x158>)
 801c614:	4293      	cmp	r3, r2
 801c616:	d9cd      	bls.n	801c5b4 <FLASH_If_Write+0x70>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801c618:	f7e5 fe96 	bl	8002348 <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    if (destination >= FLASH_START_BANK2)
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	4a1a      	ldr	r2, [pc, #104]	; (801c688 <FLASH_If_Write+0x144>)
 801c620:	4293      	cmp	r3, r2
 801c622:	d912      	bls.n	801c64a <FLASH_If_Write+0x106>
    {
      ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE_BANK2);
 801c624:	4b1b      	ldr	r3, [pc, #108]	; (801c694 <FLASH_If_Write+0x150>)
 801c626:	7adb      	ldrb	r3, [r3, #11]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d020      	beq.n	801c66e <FLASH_If_Write+0x12a>
 801c62c:	4b17      	ldr	r3, [pc, #92]	; (801c68c <FLASH_If_Write+0x148>)
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c632:	4b17      	ldr	r3, [pc, #92]	; (801c690 <FLASH_If_Write+0x14c>)
 801c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c636:	1ad2      	subs	r2, r2, r3
 801c638:	4b17      	ldr	r3, [pc, #92]	; (801c698 <FLASH_If_Write+0x154>)
 801c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c63c:	4413      	add	r3, r2
 801c63e:	4a16      	ldr	r2, [pc, #88]	; (801c698 <FLASH_If_Write+0x154>)
 801c640:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c642:	4b14      	ldr	r3, [pc, #80]	; (801c694 <FLASH_If_Write+0x150>)
 801c644:	2200      	movs	r2, #0
 801c646:	72da      	strb	r2, [r3, #11]
 801c648:	e011      	b.n	801c66e <FLASH_If_Write+0x12a>
    }
    else
      ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE_BANK1);
 801c64a:	4b12      	ldr	r3, [pc, #72]	; (801c694 <FLASH_If_Write+0x150>)
 801c64c:	7a9b      	ldrb	r3, [r3, #10]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d00d      	beq.n	801c66e <FLASH_If_Write+0x12a>
 801c652:	4b0e      	ldr	r3, [pc, #56]	; (801c68c <FLASH_If_Write+0x148>)
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c658:	4b0d      	ldr	r3, [pc, #52]	; (801c690 <FLASH_If_Write+0x14c>)
 801c65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c65c:	1ad2      	subs	r2, r2, r3
 801c65e:	4b0e      	ldr	r3, [pc, #56]	; (801c698 <FLASH_If_Write+0x154>)
 801c660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c662:	4413      	add	r3, r2
 801c664:	4a0c      	ldr	r2, [pc, #48]	; (801c698 <FLASH_If_Write+0x154>)
 801c666:	6293      	str	r3, [r2, #40]	; 0x28
 801c668:	4b0a      	ldr	r3, [pc, #40]	; (801c694 <FLASH_If_Write+0x150>)
 801c66a:	2200      	movs	r2, #0
 801c66c:	729a      	strb	r2, [r3, #10]
 801c66e:	4b07      	ldr	r3, [pc, #28]	; (801c68c <FLASH_If_Write+0x148>)
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801c674:	4a06      	ldr	r2, [pc, #24]	; (801c690 <FLASH_If_Write+0x14c>)
 801c676:	61d3      	str	r3, [r2, #28]
 801c678:	4b06      	ldr	r3, [pc, #24]	; (801c694 <FLASH_If_Write+0x150>)
 801c67a:	2201      	movs	r2, #1
 801c67c:	71da      	strb	r2, [r3, #7]
  #endif
  return status;
 801c67e:	697b      	ldr	r3, [r7, #20]
}
 801c680:	4618      	mov	r0, r3
 801c682:	371c      	adds	r7, #28
 801c684:	46bd      	mov	sp, r7
 801c686:	bd90      	pop	{r4, r7, pc}
 801c688:	0807ffff 	.word	0x0807ffff
 801c68c:	200012c8 	.word	0x200012c8
 801c690:	20001308 	.word	0x20001308
 801c694:	2000112c 	.word	0x2000112c
 801c698:	20000f10 	.word	0x20000f10
 801c69c:	080ffff8 	.word	0x080ffff8

0801c6a0 <LL_FLASH_IsActiveFlag_BSY>:
  FLASH_CHK_OK = 0,
  FLASH_CHK_EMPTY
};

__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_BSY(FLASH_TypeDef *FLASHx)
{
 801c6a0:	b480      	push	{r7}
 801c6a2:	b083      	sub	sp, #12
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(FLASHx->SR, FLASH_SR_BSY) == (FLASH_SR_BSY));
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	691b      	ldr	r3, [r3, #16]
 801c6ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c6b4:	bf0c      	ite	eq
 801c6b6:	2301      	moveq	r3, #1
 801c6b8:	2300      	movne	r3, #0
 801c6ba:	b2db      	uxtb	r3, r3
}
 801c6bc:	4618      	mov	r0, r3
 801c6be:	370c      	adds	r7, #12
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c6:	4770      	bx	lr

0801c6c8 <LL_FLASH_SET_OBL_Launch>:
  /* Set the OBL_Launch bit to launch the option byte loading */
__STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
{
 801c6c8:	b480      	push	{r7}
 801c6ca:	b083      	sub	sp, #12
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	695b      	ldr	r3, [r3, #20]
 801c6d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	615a      	str	r2, [r3, #20]
}
 801c6dc:	bf00      	nop
 801c6de:	370c      	adds	r7, #12
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e6:	4770      	bx	lr

0801c6e8 <LL_FLASH_Lock>:
__STATIC_INLINE void LL_FLASH_Lock(FLASH_TypeDef *FLASHx)
{
 801c6e8:	b480      	push	{r7}
 801c6ea:	b083      	sub	sp, #12
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_LOCK);
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	695b      	ldr	r3, [r3, #20]
 801c6f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	615a      	str	r2, [r3, #20]
}
 801c6fc:	bf00      	nop
 801c6fe:	370c      	adds	r7, #12
 801c700:	46bd      	mov	sp, r7
 801c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c706:	4770      	bx	lr

0801c708 <LL_FLASH_LockState>:
/*read flash's states of lock or unlock*/
__STATIC_INLINE uint32_t LL_FLASH_LockState(FLASH_TypeDef *FLASHx)
{
 801c708:	b480      	push	{r7}
 801c70a:	b083      	sub	sp, #12
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
	return READ_BIT(FLASHx->CR,FLASH_CR_LOCK);
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	695b      	ldr	r3, [r3, #20]
 801c714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 801c718:	4618      	mov	r0, r3
 801c71a:	370c      	adds	r7, #12
 801c71c:	46bd      	mov	sp, r7
 801c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c722:	4770      	bx	lr

0801c724 <LL_FLASh_SetKey>:
/*set key for flash*/
__STATIC_INLINE void LL_FLASh_SetKey(FLASH_TypeDef *FLASHx,uint32_t key)
{
 801c724:	b480      	push	{r7}
 801c726:	b083      	sub	sp, #12
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	6039      	str	r1, [r7, #0]
	WRITE_REG(FLASHx->KEYR,key);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	683a      	ldr	r2, [r7, #0]
 801c732:	609a      	str	r2, [r3, #8]
}
 801c734:	bf00      	nop
 801c736:	370c      	adds	r7, #12
 801c738:	46bd      	mov	sp, r7
 801c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c73e:	4770      	bx	lr

0801c740 <LL_FLASH_EnableProgram>:

/*EnableProgram*/
__STATIC_INLINE void LL_FLASH_EnableProgram(FLASH_TypeDef *FLASHx)
{
 801c740:	b480      	push	{r7}
 801c742:	b083      	sub	sp, #12
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR,FLASH_CR_PG);
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	695b      	ldr	r3, [r3, #20]
 801c74c:	f043 0201 	orr.w	r2, r3, #1
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	615a      	str	r2, [r3, #20]
}
 801c754:	bf00      	nop
 801c756:	370c      	adds	r7, #12
 801c758:	46bd      	mov	sp, r7
 801c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75e:	4770      	bx	lr

0801c760 <LL_FLASH_DisenableProgram>:
/*DisenableProgram*/
__STATIC_INLINE void LL_FLASH_DisenableProgram(FLASH_TypeDef *FLASHx)
{
 801c760:	b480      	push	{r7}
 801c762:	b083      	sub	sp, #12
 801c764:	af00      	add	r7, sp, #0
 801c766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(FLASHx->CR,FLASH_CR_PG);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	695b      	ldr	r3, [r3, #20]
 801c76c:	f023 0201 	bic.w	r2, r3, #1
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	615a      	str	r2, [r3, #20]
}
 801c774:	bf00      	nop
 801c776:	370c      	adds	r7, #12
 801c778:	46bd      	mov	sp, r7
 801c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c77e:	4770      	bx	lr

0801c780 <LL_FLASH_PageErase>:
uint8_t LL_Flash_Unlock(void);
uint32_t FLASH_If_Check(uint32_t start);
uint8_t LL_FLASH_OB_Unlock(void);

uint8_t LL_FLASH_PageErase(uint16_t PageNumber)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b084      	sub	sp, #16
 801c784:	af00      	add	r7, sp, #0
 801c786:	4603      	mov	r3, r0
 801c788:	80fb      	strh	r3, [r7, #6]
	uint32_t BankActive;
	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801c78a:	4b29      	ldr	r3, [pc, #164]	; (801c830 <LL_FLASH_PageErase+0xb0>)
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c792:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 801c794:	f000 f968 	bl	801ca68 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 801c798:	bf00      	nop
 801c79a:	4826      	ldr	r0, [pc, #152]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c79c:	f7ff ff80 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d1f9      	bne.n	801c79a <LL_FLASH_PageErase+0x1a>
	{
	}
	if(PageNumber>200)
 801c7a6:	88fb      	ldrh	r3, [r7, #6]
 801c7a8:	2bc8      	cmp	r3, #200	; 0xc8
 801c7aa:	d93b      	bls.n	801c824 <LL_FLASH_PageErase+0xa4>
	{
		SET_BIT(FLASH->CR, FLASH_CR_PER);        //enable flash earse
 801c7ac:	4b21      	ldr	r3, [pc, #132]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7ae:	695b      	ldr	r3, [r3, #20]
 801c7b0:	4a20      	ldr	r2, [pc, #128]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7b2:	f043 0302 	orr.w	r3, r3, #2
 801c7b6:	6153      	str	r3, [r2, #20]
		if(BankActive == 0)                      //bank1 is active
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d106      	bne.n	801c7cc <LL_FLASH_PageErase+0x4c>
		{
			CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);   //earse bank1
 801c7be:	4b1d      	ldr	r3, [pc, #116]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7c0:	695b      	ldr	r3, [r3, #20]
 801c7c2:	4a1c      	ldr	r2, [pc, #112]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c7c8:	6153      	str	r3, [r2, #20]
 801c7ca:	e005      	b.n	801c7d8 <LL_FLASH_PageErase+0x58>
		}
		else                                     //bank2 is active
		{
			SET_BIT(FLASH->CR, FLASH_CR_BKER);     //earse bank2
 801c7cc:	4b19      	ldr	r3, [pc, #100]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7ce:	695b      	ldr	r3, [r3, #20]
 801c7d0:	4a18      	ldr	r2, [pc, #96]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c7d6:	6153      	str	r3, [r2, #20]
		}
	  SET_BIT(FLASH->CR, (PageNumber << 3));   //set page to earse
 801c7d8:	4b16      	ldr	r3, [pc, #88]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7da:	695b      	ldr	r3, [r3, #20]
 801c7dc:	88fa      	ldrh	r2, [r7, #6]
 801c7de:	00d2      	lsls	r2, r2, #3
 801c7e0:	4611      	mov	r1, r2
 801c7e2:	4a14      	ldr	r2, [pc, #80]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7e4:	430b      	orrs	r3, r1
 801c7e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);       //start earsing...
 801c7e8:	4b12      	ldr	r3, [pc, #72]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7ea:	695b      	ldr	r3, [r3, #20]
 801c7ec:	4a11      	ldr	r2, [pc, #68]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c7f2:	6153      	str	r3, [r2, #20]
		while (LL_FLASH_IsActiveFlag_BSY(FLASH)) //wait for flash operation complete
 801c7f4:	bf00      	nop
 801c7f6:	480f      	ldr	r0, [pc, #60]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c7f8:	f7ff ff52 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c7fc:	4603      	mov	r3, r0
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d1f9      	bne.n	801c7f6 <LL_FLASH_PageErase+0x76>
	  {
	  }
		CLEAR_BIT(FLASH->CR, FLASH_CR_PNB);      //clear page to earse
 801c802:	4b0c      	ldr	r3, [pc, #48]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c804:	695b      	ldr	r3, [r3, #20]
 801c806:	4a0b      	ldr	r2, [pc, #44]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c80c:	6153      	str	r3, [r2, #20]
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);      //disable flash earse
 801c80e:	4b09      	ldr	r3, [pc, #36]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c810:	695b      	ldr	r3, [r3, #20]
 801c812:	4a08      	ldr	r2, [pc, #32]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c814:	f023 0302 	bic.w	r3, r3, #2
 801c818:	6153      	str	r3, [r2, #20]
	else
	{
		return LL_ERROR;
	}

	LL_FLASH_Lock(FLASH);
 801c81a:	4806      	ldr	r0, [pc, #24]	; (801c834 <LL_FLASH_PageErase+0xb4>)
 801c81c:	f7ff ff64 	bl	801c6e8 <LL_FLASH_Lock>
	return LL_OK;
 801c820:	2300      	movs	r3, #0
 801c822:	e000      	b.n	801c826 <LL_FLASH_PageErase+0xa6>
		return LL_ERROR;
 801c824:	2301      	movs	r3, #1
}
 801c826:	4618      	mov	r0, r3
 801c828:	3710      	adds	r7, #16
 801c82a:	46bd      	mov	sp, r7
 801c82c:	bd80      	pop	{r7, pc}
 801c82e:	bf00      	nop
 801c830:	40010000 	.word	0x40010000
 801c834:	40022000 	.word	0x40022000

0801c838 <LL_FLASH_Program64>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint8_t LL_FLASH_Program64(uint32_t faddr,uint32_t* pData)
{
 801c838:	b580      	push	{r7, lr}
 801c83a:	b084      	sub	sp, #16
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	6078      	str	r0, [r7, #4]
 801c840:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 801c842:	2300      	movs	r3, #0
 801c844:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 801c846:	f000 f90f 	bl	801ca68 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801c84a:	bf00      	nop
 801c84c:	4818      	ldr	r0, [pc, #96]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c84e:	f7ff ff27 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c852:	4603      	mov	r3, r0
 801c854:	2b00      	cmp	r3, #0
 801c856:	d1f9      	bne.n	801c84c <LL_FLASH_Program64+0x14>
	{
	}
	LL_FLASH_EnableProgram(FLASH);              //flash program enable
 801c858:	4815      	ldr	r0, [pc, #84]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c85a:	f7ff ff71 	bl	801c740 <LL_FLASH_EnableProgram>
	/* Program the double word */
  *(__IO uint32_t*)faddr = *pData;            //program 4 bytes, little endian
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	683a      	ldr	r2, [r7, #0]
 801c862:	6812      	ldr	r2, [r2, #0]
 801c864:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(faddr+4) = *(pData+1);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	3304      	adds	r3, #4
 801c86a:	461a      	mov	r2, r3
 801c86c:	683b      	ldr	r3, [r7, #0]
 801c86e:	685b      	ldr	r3, [r3, #4]
 801c870:	6013      	str	r3, [r2, #0]

	prog_bit = FLASH_CR_PG;
 801c872:	2301      	movs	r3, #1
 801c874:	60fb      	str	r3, [r7, #12]
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801c876:	bf00      	nop
 801c878:	480d      	ldr	r0, [pc, #52]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c87a:	f7ff ff11 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c87e:	4603      	mov	r3, r0
 801c880:	2b00      	cmp	r3, #0
 801c882:	d1f9      	bne.n	801c878 <LL_FLASH_Program64+0x40>
	{
	}
	if(prog_bit!=0)
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d006      	beq.n	801c898 <LL_FLASH_Program64+0x60>
	{
		CLEAR_BIT(FLASH->CR,prog_bit);
 801c88a:	4b09      	ldr	r3, [pc, #36]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c88c:	695a      	ldr	r2, [r3, #20]
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	43db      	mvns	r3, r3
 801c892:	4907      	ldr	r1, [pc, #28]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c894:	4013      	ands	r3, r2
 801c896:	614b      	str	r3, [r1, #20]
	}
	LL_FLASH_DisenableProgram(FLASH);
 801c898:	4805      	ldr	r0, [pc, #20]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c89a:	f7ff ff61 	bl	801c760 <LL_FLASH_DisenableProgram>
	LL_FLASH_Lock(FLASH);
 801c89e:	4804      	ldr	r0, [pc, #16]	; (801c8b0 <LL_FLASH_Program64+0x78>)
 801c8a0:	f7ff ff22 	bl	801c6e8 <LL_FLASH_Lock>
	return LL_OK;
 801c8a4:	2300      	movs	r3, #0
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3710      	adds	r7, #16
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	40022000 	.word	0x40022000

0801c8b4 <LL_FLASH_Program64s>:

uint8_t LL_FLASH_Program64s(uint32_t destination, uint32_t* pData,uint16_t DataLen)
{
 801c8b4:	b590      	push	{r4, r7, lr}
 801c8b6:	b087      	sub	sp, #28
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	60f8      	str	r0, [r7, #12]
 801c8bc:	60b9      	str	r1, [r7, #8]
 801c8be:	4613      	mov	r3, r2
 801c8c0:	80fb      	strh	r3, [r7, #6]
	uint32_t prog_bit = 0;
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	613b      	str	r3, [r7, #16]
	uint16_t i = 0;
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	82fb      	strh	r3, [r7, #22]
	LL_Flash_Unlock();
 801c8ca:	f000 f8cd 	bl	801ca68 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))       //wait for flash operation complete
 801c8ce:	bf00      	nop
 801c8d0:	482c      	ldr	r0, [pc, #176]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c8d2:	f7ff fee5 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d1f9      	bne.n	801c8d0 <LL_FLASH_Program64s+0x1c>
  {
	}
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 801c8dc:	2300      	movs	r3, #0
 801c8de:	82fb      	strh	r3, [r7, #22]
 801c8e0:	e03e      	b.n	801c960 <LL_FLASH_Program64s+0xac>
	{
		LL_FLASH_EnableProgram(FLASH);              //flash program enable
 801c8e2:	4828      	ldr	r0, [pc, #160]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c8e4:	f7ff ff2c 	bl	801c740 <LL_FLASH_EnableProgram>
		while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801c8e8:	bf00      	nop
 801c8ea:	4826      	ldr	r0, [pc, #152]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c8ec:	f7ff fed8 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d1f9      	bne.n	801c8ea <LL_FLASH_Program64s+0x36>
	  {
	  }
	  /* Program the double word */
    *(__IO uint32_t*)(destination) = *(pData+2*i);            //program 4 bytes, little endian
 801c8f6:	8afb      	ldrh	r3, [r7, #22]
 801c8f8:	00db      	lsls	r3, r3, #3
 801c8fa:	461a      	mov	r2, r3
 801c8fc:	68bb      	ldr	r3, [r7, #8]
 801c8fe:	441a      	add	r2, r3
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	6812      	ldr	r2, [r2, #0]
 801c904:	601a      	str	r2, [r3, #0]
    *(__IO uint32_t*)(destination+4) = *(pData+2*i+1);
 801c906:	8afb      	ldrh	r3, [r7, #22]
 801c908:	00db      	lsls	r3, r3, #3
 801c90a:	3304      	adds	r3, #4
 801c90c:	68ba      	ldr	r2, [r7, #8]
 801c90e:	4413      	add	r3, r2
 801c910:	68fa      	ldr	r2, [r7, #12]
 801c912:	3204      	adds	r2, #4
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	6013      	str	r3, [r2, #0]
		if(*(uint64_t*)destination==*(uint64_t*)(pData+2*i))
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801c91e:	8afb      	ldrh	r3, [r7, #22]
 801c920:	00db      	lsls	r3, r3, #3
 801c922:	4618      	mov	r0, r3
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	4403      	add	r3, r0
 801c928:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c92c:	42a2      	cmp	r2, r4
 801c92e:	bf08      	it	eq
 801c930:	4299      	cmpeq	r1, r3
 801c932:	d10c      	bne.n	801c94e <LL_FLASH_Program64s+0x9a>
		{
			destination += 8;
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	3308      	adds	r3, #8
 801c938:	60fb      	str	r3, [r7, #12]
		  prog_bit = FLASH_CR_PG;
 801c93a:	2301      	movs	r3, #1
 801c93c:	613b      	str	r3, [r7, #16]
			CLEAR_BIT(FLASH->CR,prog_bit);
 801c93e:	4b11      	ldr	r3, [pc, #68]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c940:	695a      	ldr	r2, [r3, #20]
 801c942:	693b      	ldr	r3, [r7, #16]
 801c944:	43db      	mvns	r3, r3
 801c946:	490f      	ldr	r1, [pc, #60]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c948:	4013      	ands	r3, r2
 801c94a:	614b      	str	r3, [r1, #20]
 801c94c:	e002      	b.n	801c954 <LL_FLASH_Program64s+0xa0>
		}
		else
		  i = i-1;
 801c94e:	8afb      	ldrh	r3, [r7, #22]
 801c950:	3b01      	subs	r3, #1
 801c952:	82fb      	strh	r3, [r7, #22]
		LL_FLASH_DisenableProgram(FLASH);
 801c954:	480b      	ldr	r0, [pc, #44]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c956:	f7ff ff03 	bl	801c760 <LL_FLASH_DisenableProgram>
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 801c95a:	8afb      	ldrh	r3, [r7, #22]
 801c95c:	3301      	adds	r3, #1
 801c95e:	82fb      	strh	r3, [r7, #22]
 801c960:	88fb      	ldrh	r3, [r7, #6]
 801c962:	085b      	lsrs	r3, r3, #1
 801c964:	b29b      	uxth	r3, r3
 801c966:	8afa      	ldrh	r2, [r7, #22]
 801c968:	429a      	cmp	r2, r3
 801c96a:	d203      	bcs.n	801c974 <LL_FLASH_Program64s+0xc0>
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	4a06      	ldr	r2, [pc, #24]	; (801c988 <LL_FLASH_Program64s+0xd4>)
 801c970:	4293      	cmp	r3, r2
 801c972:	d9b6      	bls.n	801c8e2 <LL_FLASH_Program64s+0x2e>
	}
	LL_FLASH_Lock(FLASH);
 801c974:	4803      	ldr	r0, [pc, #12]	; (801c984 <LL_FLASH_Program64s+0xd0>)
 801c976:	f7ff feb7 	bl	801c6e8 <LL_FLASH_Lock>
	return LL_OK;
 801c97a:	2300      	movs	r3, #0
}
 801c97c:	4618      	mov	r0, r3
 801c97e:	371c      	adds	r7, #28
 801c980:	46bd      	mov	sp, r7
 801c982:	bd90      	pop	{r4, r7, pc}
 801c984:	40022000 	.word	0x40022000
 801c988:	0807fff8 	.word	0x0807fff8

0801c98c <STMFLASH_Read32>:

uint32_t STMFLASH_Read32( uint32_t faddr )
{
 801c98c:	b480      	push	{r7}
 801c98e:	b083      	sub	sp, #12
 801c990:	af00      	add	r7, sp, #0
 801c992:	6078      	str	r0, [r7, #4]
  return *(__IO uint32_t*)faddr;
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	681b      	ldr	r3, [r3, #0]
}
 801c998:	4618      	mov	r0, r3
 801c99a:	370c      	adds	r7, #12
 801c99c:	46bd      	mov	sp, r7
 801c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a2:	4770      	bx	lr

0801c9a4 <STMFLASH_BankSwitch>:

uint8_t STMFLASH_BankSwitch(void)
{
 801c9a4:	b580      	push	{r7, lr}
 801c9a6:	b082      	sub	sp, #8
 801c9a8:	af00      	add	r7, sp, #0
	uint8_t result;
	uint32_t BankActive = 0;
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	603b      	str	r3, [r7, #0]

	LL_FLASH_Lock(FLASH);
 801c9ae:	482c      	ldr	r0, [pc, #176]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801c9b0:	f7ff fe9a 	bl	801c6e8 <LL_FLASH_Lock>
	/* Clear OPTVERR bit set on virgin samples */
	if((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { SET_BIT(FLASH->ECCR, ((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }

  if((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { WRITE_REG(FLASH->SR, ((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }
 801c9b4:	4b2a      	ldr	r3, [pc, #168]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801c9b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c9ba:	611a      	str	r2, [r3, #16]

	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801c9bc:	4b29      	ldr	r3, [pc, #164]	; (801ca64 <STMFLASH_BankSwitch+0xc0>)
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9c4:	603b      	str	r3, [r7, #0]
  result = LL_Flash_Unlock();
 801c9c6:	f000 f84f 	bl	801ca68 <LL_Flash_Unlock>
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	71fb      	strb	r3, [r7, #7]

	if( result == LL_OK)
 801c9ce:	79fb      	ldrb	r3, [r7, #7]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d140      	bne.n	801ca56 <STMFLASH_BankSwitch+0xb2>
	{
		  result = LL_FLASH_OB_Unlock();
 801c9d4:	f000 f868 	bl	801caa8 <LL_FLASH_OB_Unlock>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	71fb      	strb	r3, [r7, #7]
		  if((READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == RESET))
 801c9dc:	4b20      	ldr	r3, [pc, #128]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801c9de:	695b      	ldr	r3, [r3, #20]
 801c9e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d116      	bne.n	801ca16 <STMFLASH_BankSwitch+0x72>
			{
				  while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801c9e8:	bf00      	nop
 801c9ea:	481d      	ldr	r0, [pc, #116]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801c9ec:	f7ff fe58 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d1f9      	bne.n	801c9ea <STMFLASH_BankSwitch+0x46>
					{
					}
					/* When no firmware at bank2, board is working at bank1 with BFB2 flag set. So BFB2 flag should be clear by checking bank (when FUT is at bank 1)instead of BFB2. */
					if (BankActive != 0)
 801c9f6:	683b      	ldr	r3, [r7, #0]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d006      	beq.n	801ca0a <STMFLASH_BankSwitch+0x66>
					{
						CLEAR_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 801c9fc:	4b18      	ldr	r3, [pc, #96]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801c9fe:	6a1b      	ldr	r3, [r3, #32]
 801ca00:	4a17      	ldr	r2, [pc, #92]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ca06:	6213      	str	r3, [r2, #32]
 801ca08:	e005      	b.n	801ca16 <STMFLASH_BankSwitch+0x72>
					}
					else
					{
						SET_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 801ca0a:	4b15      	ldr	r3, [pc, #84]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca0c:	6a1b      	ldr	r3, [r3, #32]
 801ca0e:	4a14      	ldr	r2, [pc, #80]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ca14:	6213      	str	r3, [r2, #32]
					}
			}
			/* Set OPTSTRT Bit */
			SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 801ca16:	4b12      	ldr	r3, [pc, #72]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca18:	695b      	ldr	r3, [r3, #20]
 801ca1a:	4a11      	ldr	r2, [pc, #68]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ca20:	6153      	str	r3, [r2, #20]
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801ca22:	bf00      	nop
 801ca24:	480e      	ldr	r0, [pc, #56]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca26:	f7ff fe3b 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d1f9      	bne.n	801ca24 <STMFLASH_BankSwitch+0x80>
			{
			}
			/* If the option byte program operation is completed, disable the OPTSTRT Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 801ca30:	4b0b      	ldr	r3, [pc, #44]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca32:	695b      	ldr	r3, [r3, #20]
 801ca34:	4a0a      	ldr	r2, [pc, #40]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca36:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ca3a:	6153      	str	r3, [r2, #20]

			/* Set the bit to force the option byte reloading */
			if (result == LL_OK)
 801ca3c:	79fb      	ldrb	r3, [r7, #7]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d102      	bne.n	801ca48 <STMFLASH_BankSwitch+0xa4>
			{
				LL_FLASH_SET_OBL_Launch(FLASH);
 801ca42:	4807      	ldr	r0, [pc, #28]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca44:	f7ff fe40 	bl	801c6c8 <LL_FLASH_SET_OBL_Launch>
			}
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801ca48:	bf00      	nop
 801ca4a:	4805      	ldr	r0, [pc, #20]	; (801ca60 <STMFLASH_BankSwitch+0xbc>)
 801ca4c:	f7ff fe28 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801ca50:	4603      	mov	r3, r0
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d1f9      	bne.n	801ca4a <STMFLASH_BankSwitch+0xa6>
			{
			}
	}
	return result;
 801ca56:	79fb      	ldrb	r3, [r7, #7]
}
 801ca58:	4618      	mov	r0, r3
 801ca5a:	3708      	adds	r7, #8
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}
 801ca60:	40022000 	.word	0x40022000
 801ca64:	40010000 	.word	0x40010000

0801ca68 <LL_Flash_Unlock>:

uint8_t LL_Flash_Unlock(void)
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	af00      	add	r7, sp, #0
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 801ca6c:	bf00      	nop
 801ca6e:	480b      	ldr	r0, [pc, #44]	; (801ca9c <LL_Flash_Unlock+0x34>)
 801ca70:	f7ff fe16 	bl	801c6a0 <LL_FLASH_IsActiveFlag_BSY>
 801ca74:	4603      	mov	r3, r0
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d1f9      	bne.n	801ca6e <LL_Flash_Unlock+0x6>
	{
	}
	if (LL_FLASH_LockState(FLASH)!=0)
 801ca7a:	4808      	ldr	r0, [pc, #32]	; (801ca9c <LL_Flash_Unlock+0x34>)
 801ca7c:	f7ff fe44 	bl	801c708 <LL_FLASH_LockState>
 801ca80:	4603      	mov	r3, r0
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d007      	beq.n	801ca96 <LL_Flash_Unlock+0x2e>
	{
		LL_FLASh_SetKey(FLASH,FLASH_KEY1);
 801ca86:	4906      	ldr	r1, [pc, #24]	; (801caa0 <LL_Flash_Unlock+0x38>)
 801ca88:	4804      	ldr	r0, [pc, #16]	; (801ca9c <LL_Flash_Unlock+0x34>)
 801ca8a:	f7ff fe4b 	bl	801c724 <LL_FLASh_SetKey>
		LL_FLASh_SetKey(FLASH,FLASH_KEY2);
 801ca8e:	4905      	ldr	r1, [pc, #20]	; (801caa4 <LL_Flash_Unlock+0x3c>)
 801ca90:	4802      	ldr	r0, [pc, #8]	; (801ca9c <LL_Flash_Unlock+0x34>)
 801ca92:	f7ff fe47 	bl	801c724 <LL_FLASh_SetKey>
	}
	return LL_OK;
 801ca96:	2300      	movs	r3, #0
}
 801ca98:	4618      	mov	r0, r3
 801ca9a:	bd80      	pop	{r7, pc}
 801ca9c:	40022000 	.word	0x40022000
 801caa0:	45670123 	.word	0x45670123
 801caa4:	cdef89ab 	.word	0xcdef89ab

0801caa8 <LL_FLASH_OB_Unlock>:
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASH_CHK_EMPTY;
  return FLASH_CHK_OK;
}
uint8_t LL_FLASH_OB_Unlock(void)
{
 801caa8:	b480      	push	{r7}
 801caaa:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != RESET)
 801caac:	4b09      	ldr	r3, [pc, #36]	; (801cad4 <LL_FLASH_OB_Unlock+0x2c>)
 801caae:	695b      	ldr	r3, [r3, #20]
 801cab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d007      	beq.n	801cac8 <LL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);//allow programming
 801cab8:	4b06      	ldr	r3, [pc, #24]	; (801cad4 <LL_FLASH_OB_Unlock+0x2c>)
 801caba:	4a07      	ldr	r2, [pc, #28]	; (801cad8 <LL_FLASH_OB_Unlock+0x30>)
 801cabc:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);//allow erasing
 801cabe:	4b05      	ldr	r3, [pc, #20]	; (801cad4 <LL_FLASH_OB_Unlock+0x2c>)
 801cac0:	4a06      	ldr	r2, [pc, #24]	; (801cadc <LL_FLASH_OB_Unlock+0x34>)
 801cac2:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return LL_ERROR;
  }
  return LL_OK;
 801cac4:	2300      	movs	r3, #0
 801cac6:	e000      	b.n	801caca <LL_FLASH_OB_Unlock+0x22>
    return LL_ERROR;
 801cac8:	2301      	movs	r3, #1
}
 801caca:	4618      	mov	r0, r3
 801cacc:	46bd      	mov	sp, r7
 801cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad2:	4770      	bx	lr
 801cad4:	40022000 	.word	0x40022000
 801cad8:	08192a3b 	.word	0x08192a3b
 801cadc:	4c5d6e7f 	.word	0x4c5d6e7f

0801cae0 <NVIC_SystemReset>:
{
 801cae0:	b480      	push	{r7}
 801cae2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801cae4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801cae8:	4b05      	ldr	r3, [pc, #20]	; (801cb00 <NVIC_SystemReset+0x20>)
 801caea:	68db      	ldr	r3, [r3, #12]
 801caec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801caf0:	4903      	ldr	r1, [pc, #12]	; (801cb00 <NVIC_SystemReset+0x20>)
 801caf2:	4b04      	ldr	r3, [pc, #16]	; (801cb04 <NVIC_SystemReset+0x24>)
 801caf4:	4313      	orrs	r3, r2
 801caf6:	60cb      	str	r3, [r1, #12]
 801caf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801cafc:	bf00      	nop
    __NOP();
 801cafe:	e7fd      	b.n	801cafc <NVIC_SystemReset+0x1c>
 801cb00:	e000ed00 	.word	0xe000ed00
 801cb04:	05fa0004 	.word	0x05fa0004

0801cb08 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
static void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 801cb08:	b480      	push	{r7}
 801cb0a:	b087      	sub	sp, #28
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
 801cb10:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 801cb12:	4b25      	ldr	r3, [pc, #148]	; (801cba8 <Int2Str+0xa0>)
 801cb14:	613b      	str	r3, [r7, #16]
 801cb16:	2300      	movs	r3, #0
 801cb18:	60fb      	str	r3, [r7, #12]
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 801cb1e:	2300      	movs	r3, #0
 801cb20:	617b      	str	r3, [r7, #20]
 801cb22:	e038      	b.n	801cb96 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 801cb24:	683a      	ldr	r2, [r7, #0]
 801cb26:	693b      	ldr	r3, [r7, #16]
 801cb28:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb2c:	b2da      	uxtb	r2, r3
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	1c59      	adds	r1, r3, #1
 801cb32:	60f9      	str	r1, [r7, #12]
 801cb34:	6879      	ldr	r1, [r7, #4]
 801cb36:	440b      	add	r3, r1
 801cb38:	3230      	adds	r2, #48	; 0x30
 801cb3a:	b2d2      	uxtb	r2, r2
 801cb3c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	693a      	ldr	r2, [r7, #16]
 801cb42:	fbb3 f2f2 	udiv	r2, r3, r2
 801cb46:	6939      	ldr	r1, [r7, #16]
 801cb48:	fb01 f202 	mul.w	r2, r1, r2
 801cb4c:	1a9b      	subs	r3, r3, r2
 801cb4e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 801cb50:	693b      	ldr	r3, [r7, #16]
 801cb52:	4a16      	ldr	r2, [pc, #88]	; (801cbac <Int2Str+0xa4>)
 801cb54:	fba2 2303 	umull	r2, r3, r2, r3
 801cb58:	08db      	lsrs	r3, r3, #3
 801cb5a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	3b01      	subs	r3, #1
 801cb60:	687a      	ldr	r2, [r7, #4]
 801cb62:	4413      	add	r3, r2
 801cb64:	781b      	ldrb	r3, [r3, #0]
 801cb66:	2b30      	cmp	r3, #48	; 0x30
 801cb68:	bf0c      	ite	eq
 801cb6a:	2301      	moveq	r3, #1
 801cb6c:	2300      	movne	r3, #0
 801cb6e:	b2da      	uxtb	r2, r3
 801cb70:	68bb      	ldr	r3, [r7, #8]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	bf0c      	ite	eq
 801cb76:	2301      	moveq	r3, #1
 801cb78:	2300      	movne	r3, #0
 801cb7a:	b2db      	uxtb	r3, r3
 801cb7c:	4013      	ands	r3, r2
 801cb7e:	b2db      	uxtb	r3, r3
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d002      	beq.n	801cb8a <Int2Str+0x82>
    {
      pos = 0;
 801cb84:	2300      	movs	r3, #0
 801cb86:	60fb      	str	r3, [r7, #12]
 801cb88:	e002      	b.n	801cb90 <Int2Str+0x88>
    }
    else
    {
      status++;
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	3301      	adds	r3, #1
 801cb8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	3301      	adds	r3, #1
 801cb94:	617b      	str	r3, [r7, #20]
 801cb96:	697b      	ldr	r3, [r7, #20]
 801cb98:	2b09      	cmp	r3, #9
 801cb9a:	d9c3      	bls.n	801cb24 <Int2Str+0x1c>
    }
  }
}
 801cb9c:	bf00      	nop
 801cb9e:	371c      	adds	r7, #28
 801cba0:	46bd      	mov	sp, r7
 801cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba6:	4770      	bx	lr
 801cba8:	3b9aca00 	.word	0x3b9aca00
 801cbac:	cccccccd 	.word	0xcccccccd

0801cbb0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
static uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 801cbb0:	b480      	push	{r7}
 801cbb2:	b087      	sub	sp, #28
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
 801cbb8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 801cbba:	2300      	movs	r3, #0
 801cbbc:	617b      	str	r3, [r7, #20]
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	781b      	ldrb	r3, [r3, #0]
 801cbca:	2b30      	cmp	r3, #48	; 0x30
 801cbcc:	f040 80d7 	bne.w	801cd7e <Str2Int+0x1ce>
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	3301      	adds	r3, #1
 801cbd4:	781b      	ldrb	r3, [r3, #0]
 801cbd6:	2b78      	cmp	r3, #120	; 0x78
 801cbd8:	d005      	beq.n	801cbe6 <Str2Int+0x36>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	3301      	adds	r3, #1
 801cbde:	781b      	ldrb	r3, [r3, #0]
 801cbe0:	2b58      	cmp	r3, #88	; 0x58
 801cbe2:	f040 80cc 	bne.w	801cd7e <Str2Int+0x1ce>
  {
    i = 2;
 801cbe6:	2302      	movs	r3, #2
 801cbe8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 801cbea:	e057      	b.n	801cc9c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 801cbec:	687a      	ldr	r2, [r7, #4]
 801cbee:	697b      	ldr	r3, [r7, #20]
 801cbf0:	4413      	add	r3, r2
 801cbf2:	781b      	ldrb	r3, [r3, #0]
 801cbf4:	2b40      	cmp	r3, #64	; 0x40
 801cbf6:	d905      	bls.n	801cc04 <Str2Int+0x54>
 801cbf8:	687a      	ldr	r2, [r7, #4]
 801cbfa:	697b      	ldr	r3, [r7, #20]
 801cbfc:	4413      	add	r3, r2
 801cbfe:	781b      	ldrb	r3, [r3, #0]
 801cc00:	2b46      	cmp	r3, #70	; 0x46
 801cc02:	d917      	bls.n	801cc34 <Str2Int+0x84>
 801cc04:	687a      	ldr	r2, [r7, #4]
 801cc06:	697b      	ldr	r3, [r7, #20]
 801cc08:	4413      	add	r3, r2
 801cc0a:	781b      	ldrb	r3, [r3, #0]
 801cc0c:	2b60      	cmp	r3, #96	; 0x60
 801cc0e:	d905      	bls.n	801cc1c <Str2Int+0x6c>
 801cc10:	687a      	ldr	r2, [r7, #4]
 801cc12:	697b      	ldr	r3, [r7, #20]
 801cc14:	4413      	add	r3, r2
 801cc16:	781b      	ldrb	r3, [r3, #0]
 801cc18:	2b66      	cmp	r3, #102	; 0x66
 801cc1a:	d90b      	bls.n	801cc34 <Str2Int+0x84>
 801cc1c:	687a      	ldr	r2, [r7, #4]
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	4413      	add	r3, r2
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	2b2f      	cmp	r3, #47	; 0x2f
 801cc26:	d936      	bls.n	801cc96 <Str2Int+0xe6>
 801cc28:	687a      	ldr	r2, [r7, #4]
 801cc2a:	697b      	ldr	r3, [r7, #20]
 801cc2c:	4413      	add	r3, r2
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	2b39      	cmp	r3, #57	; 0x39
 801cc32:	d830      	bhi.n	801cc96 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	011b      	lsls	r3, r3, #4
 801cc38:	6879      	ldr	r1, [r7, #4]
 801cc3a:	697a      	ldr	r2, [r7, #20]
 801cc3c:	440a      	add	r2, r1
 801cc3e:	7812      	ldrb	r2, [r2, #0]
 801cc40:	2a2f      	cmp	r2, #47	; 0x2f
 801cc42:	d90b      	bls.n	801cc5c <Str2Int+0xac>
 801cc44:	6879      	ldr	r1, [r7, #4]
 801cc46:	697a      	ldr	r2, [r7, #20]
 801cc48:	440a      	add	r2, r1
 801cc4a:	7812      	ldrb	r2, [r2, #0]
 801cc4c:	2a39      	cmp	r2, #57	; 0x39
 801cc4e:	d805      	bhi.n	801cc5c <Str2Int+0xac>
 801cc50:	6879      	ldr	r1, [r7, #4]
 801cc52:	697a      	ldr	r2, [r7, #20]
 801cc54:	440a      	add	r2, r1
 801cc56:	7812      	ldrb	r2, [r2, #0]
 801cc58:	3a30      	subs	r2, #48	; 0x30
 801cc5a:	e016      	b.n	801cc8a <Str2Int+0xda>
 801cc5c:	6879      	ldr	r1, [r7, #4]
 801cc5e:	697a      	ldr	r2, [r7, #20]
 801cc60:	440a      	add	r2, r1
 801cc62:	7812      	ldrb	r2, [r2, #0]
 801cc64:	2a40      	cmp	r2, #64	; 0x40
 801cc66:	d90b      	bls.n	801cc80 <Str2Int+0xd0>
 801cc68:	6879      	ldr	r1, [r7, #4]
 801cc6a:	697a      	ldr	r2, [r7, #20]
 801cc6c:	440a      	add	r2, r1
 801cc6e:	7812      	ldrb	r2, [r2, #0]
 801cc70:	2a46      	cmp	r2, #70	; 0x46
 801cc72:	d805      	bhi.n	801cc80 <Str2Int+0xd0>
 801cc74:	6879      	ldr	r1, [r7, #4]
 801cc76:	697a      	ldr	r2, [r7, #20]
 801cc78:	440a      	add	r2, r1
 801cc7a:	7812      	ldrb	r2, [r2, #0]
 801cc7c:	3a37      	subs	r2, #55	; 0x37
 801cc7e:	e004      	b.n	801cc8a <Str2Int+0xda>
 801cc80:	6879      	ldr	r1, [r7, #4]
 801cc82:	697a      	ldr	r2, [r7, #20]
 801cc84:	440a      	add	r2, r1
 801cc86:	7812      	ldrb	r2, [r2, #0]
 801cc88:	3a57      	subs	r2, #87	; 0x57
 801cc8a:	4413      	add	r3, r2
 801cc8c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 801cc8e:	697b      	ldr	r3, [r7, #20]
 801cc90:	3301      	adds	r3, #1
 801cc92:	617b      	str	r3, [r7, #20]
 801cc94:	e002      	b.n	801cc9c <Str2Int+0xec>
        res = 0;
 801cc96:	2300      	movs	r3, #0
 801cc98:	613b      	str	r3, [r7, #16]
        break;
 801cc9a:	e008      	b.n	801ccae <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 801cc9c:	697b      	ldr	r3, [r7, #20]
 801cc9e:	2b0a      	cmp	r3, #10
 801cca0:	d805      	bhi.n	801ccae <Str2Int+0xfe>
 801cca2:	687a      	ldr	r2, [r7, #4]
 801cca4:	697b      	ldr	r3, [r7, #20]
 801cca6:	4413      	add	r3, r2
 801cca8:	781b      	ldrb	r3, [r3, #0]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d19e      	bne.n	801cbec <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 801ccae:	687a      	ldr	r2, [r7, #4]
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	4413      	add	r3, r2
 801ccb4:	781b      	ldrb	r3, [r3, #0]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d167      	bne.n	801cd8a <Str2Int+0x1da>
    {
      *p_intnum = val;
 801ccba:	683b      	ldr	r3, [r7, #0]
 801ccbc:	68fa      	ldr	r2, [r7, #12]
 801ccbe:	601a      	str	r2, [r3, #0]
      res = 1;
 801ccc0:	2301      	movs	r3, #1
 801ccc2:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 801ccc4:	e061      	b.n	801cd8a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 801ccc6:	687a      	ldr	r2, [r7, #4]
 801ccc8:	697b      	ldr	r3, [r7, #20]
 801ccca:	4413      	add	r3, r2
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d105      	bne.n	801ccde <Str2Int+0x12e>
      {
        *p_intnum = val;
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	68fa      	ldr	r2, [r7, #12]
 801ccd6:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 801ccd8:	2301      	movs	r3, #1
 801ccda:	613b      	str	r3, [r7, #16]
 801ccdc:	e04c      	b.n	801cd78 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 801ccde:	687a      	ldr	r2, [r7, #4]
 801cce0:	697b      	ldr	r3, [r7, #20]
 801cce2:	4413      	add	r3, r2
 801cce4:	781b      	ldrb	r3, [r3, #0]
 801cce6:	2b6b      	cmp	r3, #107	; 0x6b
 801cce8:	d005      	beq.n	801ccf6 <Str2Int+0x146>
 801ccea:	687a      	ldr	r2, [r7, #4]
 801ccec:	697b      	ldr	r3, [r7, #20]
 801ccee:	4413      	add	r3, r2
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	2b4b      	cmp	r3, #75	; 0x4b
 801ccf4:	d10b      	bne.n	801cd0e <Str2Int+0x15e>
 801ccf6:	697b      	ldr	r3, [r7, #20]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d008      	beq.n	801cd0e <Str2Int+0x15e>
      {
        val = val << 10;
 801ccfc:	68fb      	ldr	r3, [r7, #12]
 801ccfe:	029b      	lsls	r3, r3, #10
 801cd00:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	68fa      	ldr	r2, [r7, #12]
 801cd06:	601a      	str	r2, [r3, #0]
        res = 1;
 801cd08:	2301      	movs	r3, #1
 801cd0a:	613b      	str	r3, [r7, #16]
 801cd0c:	e034      	b.n	801cd78 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 801cd0e:	687a      	ldr	r2, [r7, #4]
 801cd10:	697b      	ldr	r3, [r7, #20]
 801cd12:	4413      	add	r3, r2
 801cd14:	781b      	ldrb	r3, [r3, #0]
 801cd16:	2b6d      	cmp	r3, #109	; 0x6d
 801cd18:	d005      	beq.n	801cd26 <Str2Int+0x176>
 801cd1a:	687a      	ldr	r2, [r7, #4]
 801cd1c:	697b      	ldr	r3, [r7, #20]
 801cd1e:	4413      	add	r3, r2
 801cd20:	781b      	ldrb	r3, [r3, #0]
 801cd22:	2b4d      	cmp	r3, #77	; 0x4d
 801cd24:	d10b      	bne.n	801cd3e <Str2Int+0x18e>
 801cd26:	697b      	ldr	r3, [r7, #20]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d008      	beq.n	801cd3e <Str2Int+0x18e>
      {
        val = val << 20;
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	051b      	lsls	r3, r3, #20
 801cd30:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	68fa      	ldr	r2, [r7, #12]
 801cd36:	601a      	str	r2, [r3, #0]
        res = 1;
 801cd38:	2301      	movs	r3, #1
 801cd3a:	613b      	str	r3, [r7, #16]
 801cd3c:	e01c      	b.n	801cd78 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	697b      	ldr	r3, [r7, #20]
 801cd42:	4413      	add	r3, r2
 801cd44:	781b      	ldrb	r3, [r3, #0]
 801cd46:	2b2f      	cmp	r3, #47	; 0x2f
 801cd48:	d913      	bls.n	801cd72 <Str2Int+0x1c2>
 801cd4a:	687a      	ldr	r2, [r7, #4]
 801cd4c:	697b      	ldr	r3, [r7, #20]
 801cd4e:	4413      	add	r3, r2
 801cd50:	781b      	ldrb	r3, [r3, #0]
 801cd52:	2b39      	cmp	r3, #57	; 0x39
 801cd54:	d80d      	bhi.n	801cd72 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 801cd56:	68fa      	ldr	r2, [r7, #12]
 801cd58:	4613      	mov	r3, r2
 801cd5a:	009b      	lsls	r3, r3, #2
 801cd5c:	4413      	add	r3, r2
 801cd5e:	005b      	lsls	r3, r3, #1
 801cd60:	4619      	mov	r1, r3
 801cd62:	687a      	ldr	r2, [r7, #4]
 801cd64:	697b      	ldr	r3, [r7, #20]
 801cd66:	4413      	add	r3, r2
 801cd68:	781b      	ldrb	r3, [r3, #0]
 801cd6a:	440b      	add	r3, r1
 801cd6c:	3b30      	subs	r3, #48	; 0x30
 801cd6e:	60fb      	str	r3, [r7, #12]
 801cd70:	e002      	b.n	801cd78 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 801cd72:	2300      	movs	r3, #0
 801cd74:	613b      	str	r3, [r7, #16]
        break;
 801cd76:	e008      	b.n	801cd8a <Str2Int+0x1da>
      }
      i++;
 801cd78:	697b      	ldr	r3, [r7, #20]
 801cd7a:	3301      	adds	r3, #1
 801cd7c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 801cd7e:	697b      	ldr	r3, [r7, #20]
 801cd80:	2b0a      	cmp	r3, #10
 801cd82:	d802      	bhi.n	801cd8a <Str2Int+0x1da>
 801cd84:	693b      	ldr	r3, [r7, #16]
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	d19d      	bne.n	801ccc6 <Str2Int+0x116>
    }
  }

  return res;
 801cd8a:	693b      	ldr	r3, [r7, #16]
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	371c      	adds	r7, #28
 801cd90:	46bd      	mov	sp, r7
 801cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd96:	4770      	bx	lr

0801cd98 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
static void Serial_PutString(uint8_t *p_string)
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b084      	sub	sp, #16
 801cd9c:	af00      	add	r7, sp, #0
 801cd9e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 801cda0:	2300      	movs	r3, #0
 801cda2:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 801cda4:	e002      	b.n	801cdac <Serial_PutString+0x14>
  {
    length++;
 801cda6:	89fb      	ldrh	r3, [r7, #14]
 801cda8:	3301      	adds	r3, #1
 801cdaa:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 801cdac:	89fb      	ldrh	r3, [r7, #14]
 801cdae:	687a      	ldr	r2, [r7, #4]
 801cdb0:	4413      	add	r3, r2
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d1f6      	bne.n	801cda6 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UART_Handle, p_string, length, TX_TIMEOUT);
 801cdb8:	89fa      	ldrh	r2, [r7, #14]
 801cdba:	2364      	movs	r3, #100	; 0x64
 801cdbc:	6879      	ldr	r1, [r7, #4]
 801cdbe:	4803      	ldr	r0, [pc, #12]	; (801cdcc <Serial_PutString+0x34>)
 801cdc0:	f7eb fd8d 	bl	80088de <HAL_UART_Transmit>
}
 801cdc4:	bf00      	nop
 801cdc6:	3710      	adds	r7, #16
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	2000134c 	.word	0x2000134c

0801cdd0 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
static HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b082      	sub	sp, #8
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UART_Handle.gState == HAL_UART_STATE_TIMEOUT )
 801cdda:	4b0a      	ldr	r3, [pc, #40]	; (801ce04 <Serial_PutByte+0x34>)
 801cddc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	2ba0      	cmp	r3, #160	; 0xa0
 801cde4:	d103      	bne.n	801cdee <Serial_PutByte+0x1e>
  {
    UART_Handle.gState = HAL_UART_STATE_READY;
 801cde6:	4b07      	ldr	r3, [pc, #28]	; (801ce04 <Serial_PutByte+0x34>)
 801cde8:	2220      	movs	r2, #32
 801cdea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }
  return HAL_UART_Transmit(&UART_Handle, &param, 1, TX_TIMEOUT);
 801cdee:	1df9      	adds	r1, r7, #7
 801cdf0:	2364      	movs	r3, #100	; 0x64
 801cdf2:	2201      	movs	r2, #1
 801cdf4:	4803      	ldr	r0, [pc, #12]	; (801ce04 <Serial_PutByte+0x34>)
 801cdf6:	f7eb fd72 	bl	80088de <HAL_UART_Transmit>
 801cdfa:	4603      	mov	r3, r0
}
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	3708      	adds	r7, #8
 801ce00:	46bd      	mov	sp, r7
 801ce02:	bd80      	pop	{r7, pc}
 801ce04:	2000134c 	.word	0x2000134c

0801ce08 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b088      	sub	sp, #32
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	60f8      	str	r0, [r7, #12]
 801ce10:	60b9      	str	r1, [r7, #8]
 801ce12:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 801ce14:	2300      	movs	r3, #0
 801ce16:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 801ce18:	68bb      	ldr	r3, [r7, #8]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UART_Handle, &char1, 1, timeout);
 801ce1e:	f107 0113 	add.w	r1, r7, #19
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2201      	movs	r2, #1
 801ce26:	4847      	ldr	r0, [pc, #284]	; (801cf44 <ReceivePacket+0x13c>)
 801ce28:	f7eb fde6 	bl	80089f8 <HAL_UART_Receive>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	76fb      	strb	r3, [r7, #27]
  while (UART_Handle.RxState == HAL_UART_STATE_BUSY_RX);
 801ce30:	bf00      	nop
 801ce32:	4b44      	ldr	r3, [pc, #272]	; (801cf44 <ReceivePacket+0x13c>)
 801ce34:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801ce38:	b2db      	uxtb	r3, r3
 801ce3a:	2b22      	cmp	r3, #34	; 0x22
 801ce3c:	d0f9      	beq.n	801ce32 <ReceivePacket+0x2a>

  if (status == HAL_OK)
 801ce3e:	7efb      	ldrb	r3, [r7, #27]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d177      	bne.n	801cf34 <ReceivePacket+0x12c>
  {
    switch (char1)
 801ce44:	7cfb      	ldrb	r3, [r7, #19]
 801ce46:	2b04      	cmp	r3, #4
 801ce48:	d02d      	beq.n	801cea6 <ReceivePacket+0x9e>
 801ce4a:	2b04      	cmp	r3, #4
 801ce4c:	dc04      	bgt.n	801ce58 <ReceivePacket+0x50>
 801ce4e:	2b01      	cmp	r3, #1
 801ce50:	d009      	beq.n	801ce66 <ReceivePacket+0x5e>
 801ce52:	2b02      	cmp	r3, #2
 801ce54:	d00a      	beq.n	801ce6c <ReceivePacket+0x64>
 801ce56:	e023      	b.n	801cea0 <ReceivePacket+0x98>
 801ce58:	2b41      	cmp	r3, #65	; 0x41
 801ce5a:	d01e      	beq.n	801ce9a <ReceivePacket+0x92>
 801ce5c:	2b61      	cmp	r3, #97	; 0x61
 801ce5e:	d01c      	beq.n	801ce9a <ReceivePacket+0x92>
 801ce60:	2b18      	cmp	r3, #24
 801ce62:	d007      	beq.n	801ce74 <ReceivePacket+0x6c>
 801ce64:	e01c      	b.n	801cea0 <ReceivePacket+0x98>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 801ce66:	2380      	movs	r3, #128	; 0x80
 801ce68:	61fb      	str	r3, [r7, #28]
        break;
 801ce6a:	e01d      	b.n	801cea8 <ReceivePacket+0xa0>
      case STX:
        packet_size = PACKET_1K_SIZE;
 801ce6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce70:	61fb      	str	r3, [r7, #28]
        break;
 801ce72:	e019      	b.n	801cea8 <ReceivePacket+0xa0>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UART_Handle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 801ce74:	f107 0113 	add.w	r1, r7, #19
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	4831      	ldr	r0, [pc, #196]	; (801cf44 <ReceivePacket+0x13c>)
 801ce7e:	f7eb fdbb 	bl	80089f8 <HAL_UART_Receive>
 801ce82:	4603      	mov	r3, r0
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d105      	bne.n	801ce94 <ReceivePacket+0x8c>
 801ce88:	7cfb      	ldrb	r3, [r7, #19]
 801ce8a:	2b18      	cmp	r3, #24
 801ce8c:	d102      	bne.n	801ce94 <ReceivePacket+0x8c>
        {
          packet_size = 2;
 801ce8e:	2302      	movs	r3, #2
 801ce90:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 801ce92:	e009      	b.n	801cea8 <ReceivePacket+0xa0>
          status = HAL_ERROR;
 801ce94:	2301      	movs	r3, #1
 801ce96:	76fb      	strb	r3, [r7, #27]
        break;
 801ce98:	e006      	b.n	801cea8 <ReceivePacket+0xa0>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 801ce9a:	2302      	movs	r3, #2
 801ce9c:	76fb      	strb	r3, [r7, #27]
        break;
 801ce9e:	e003      	b.n	801cea8 <ReceivePacket+0xa0>
      default:
        status = HAL_ERROR;
 801cea0:	2301      	movs	r3, #1
 801cea2:	76fb      	strb	r3, [r7, #27]
        break;
 801cea4:	e000      	b.n	801cea8 <ReceivePacket+0xa0>
        break;
 801cea6:	bf00      	nop
    }
    *p_data = char1;
 801cea8:	7cfa      	ldrb	r2, [r7, #19]
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )//data frame
 801ceae:	69fb      	ldr	r3, [r7, #28]
 801ceb0:	2b7f      	cmp	r3, #127	; 0x7f
 801ceb2:	d93f      	bls.n	801cf34 <ReceivePacket+0x12c>
    {
      status = HAL_UART_Receive(&UART_Handle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	1c99      	adds	r1, r3, #2
 801ceb8:	69fb      	ldr	r3, [r7, #28]
 801ceba:	b29b      	uxth	r3, r3
 801cebc:	3304      	adds	r3, #4
 801cebe:	b29a      	uxth	r2, r3
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	4820      	ldr	r0, [pc, #128]	; (801cf44 <ReceivePacket+0x13c>)
 801cec4:	f7eb fd98 	bl	80089f8 <HAL_UART_Receive>
 801cec8:	4603      	mov	r3, r0
 801ceca:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 801cecc:	7efb      	ldrb	r3, [r7, #27]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d12e      	bne.n	801cf30 <ReceivePacket+0x128>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	3302      	adds	r3, #2
 801ced6:	781a      	ldrb	r2, [r3, #0]
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	3303      	adds	r3, #3
 801cedc:	781b      	ldrb	r3, [r3, #0]
 801cede:	43db      	mvns	r3, r3
 801cee0:	b2db      	uxtb	r3, r3
 801cee2:	429a      	cmp	r2, r3
 801cee4:	d004      	beq.n	801cef0 <ReceivePacket+0xe8>
        {
          packet_size = 0;
 801cee6:	2300      	movs	r3, #0
 801cee8:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 801ceea:	2301      	movs	r3, #1
 801ceec:	76fb      	strb	r3, [r7, #27]
 801ceee:	e021      	b.n	801cf34 <ReceivePacket+0x12c>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 801cef0:	69fb      	ldr	r3, [r7, #28]
 801cef2:	3304      	adds	r3, #4
 801cef4:	68fa      	ldr	r2, [r7, #12]
 801cef6:	4413      	add	r3, r2
 801cef8:	781b      	ldrb	r3, [r3, #0]
 801cefa:	021b      	lsls	r3, r3, #8
 801cefc:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 801cefe:	69fb      	ldr	r3, [r7, #28]
 801cf00:	3305      	adds	r3, #5
 801cf02:	68fa      	ldr	r2, [r7, #12]
 801cf04:	4413      	add	r3, r2
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	461a      	mov	r2, r3
 801cf0a:	697b      	ldr	r3, [r7, #20]
 801cf0c:	4413      	add	r3, r2
 801cf0e:	617b      	str	r3, [r7, #20]

          if (HAL_CRC_Calculate(&CRC_Handle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	3304      	adds	r3, #4
 801cf14:	69fa      	ldr	r2, [r7, #28]
 801cf16:	4619      	mov	r1, r3
 801cf18:	480b      	ldr	r0, [pc, #44]	; (801cf48 <ReceivePacket+0x140>)
 801cf1a:	f7e4 ff7b 	bl	8001e14 <HAL_CRC_Calculate>
 801cf1e:	4602      	mov	r2, r0
 801cf20:	697b      	ldr	r3, [r7, #20]
 801cf22:	4293      	cmp	r3, r2
 801cf24:	d006      	beq.n	801cf34 <ReceivePacket+0x12c>
          {
            packet_size = 0;
 801cf26:	2300      	movs	r3, #0
 801cf28:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 801cf2a:	2301      	movs	r3, #1
 801cf2c:	76fb      	strb	r3, [r7, #27]
 801cf2e:	e001      	b.n	801cf34 <ReceivePacket+0x12c>
          }
        }
      }
      else
      {
        packet_size = 0;
 801cf30:	2300      	movs	r3, #0
 801cf32:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 801cf34:	68bb      	ldr	r3, [r7, #8]
 801cf36:	69fa      	ldr	r2, [r7, #28]
 801cf38:	601a      	str	r2, [r3, #0]
  return status;
 801cf3a:	7efb      	ldrb	r3, [r7, #27]
}
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	3720      	adds	r7, #32
 801cf40:	46bd      	mov	sp, r7
 801cf42:	bd80      	pop	{r7, pc}
 801cf44:	2000134c 	.word	0x2000134c
 801cf48:	2000121c 	.word	0x2000121c

0801cf4c <CheckOtherBank>:
 * @description: verify if the file is STM32 boot file (begin with 0x20)
 * @param
 * @return: state of the verification
 */
static uint32_t CheckOtherBank( void )
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b082      	sub	sp, #8
 801cf50:	af00      	add	r7, sp, #0
  uint32_t result;
  result = FLASH_If_Check_old((BankActive == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2);
 801cf52:	4b0d      	ldr	r3, [pc, #52]	; (801cf88 <CheckOtherBank+0x3c>)
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	2b01      	cmp	r3, #1
 801cf58:	d102      	bne.n	801cf60 <CheckOtherBank+0x14>
 801cf5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801cf5e:	e000      	b.n	801cf62 <CheckOtherBank+0x16>
 801cf60:	4b0a      	ldr	r3, [pc, #40]	; (801cf8c <CheckOtherBank+0x40>)
 801cf62:	4618      	mov	r0, r3
 801cf64:	f7ff fadc 	bl	801c520 <FLASH_If_Check_old>
 801cf68:	6078      	str	r0, [r7, #4]
  if (result == FLASHIF_OK)
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d103      	bne.n	801cf78 <CheckOtherBank+0x2c>
    Serial_PutString((uint8_t *)"Success!\r\n\n");
 801cf70:	4807      	ldr	r0, [pc, #28]	; (801cf90 <CheckOtherBank+0x44>)
 801cf72:	f7ff ff11 	bl	801cd98 <Serial_PutString>
 801cf76:	e002      	b.n	801cf7e <CheckOtherBank+0x32>
  else
    Serial_PutString((uint8_t *)"Failure!\r\n\n");
 801cf78:	4806      	ldr	r0, [pc, #24]	; (801cf94 <CheckOtherBank+0x48>)
 801cf7a:	f7ff ff0d 	bl	801cd98 <Serial_PutString>
  return result;
 801cf7e:	687b      	ldr	r3, [r7, #4]
}
 801cf80:	4618      	mov	r0, r3
 801cf82:	3708      	adds	r7, #8
 801cf84:	46bd      	mov	sp, r7
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	20000488 	.word	0x20000488
 801cf8c:	08080000 	.word	0x08080000
 801cf90:	08026180 	.word	0x08026180
 801cf94:	0802618c 	.word	0x0802618c

0801cf98 <Flash_Bank_Copy_Bank>:
  * @brief  Copy firmware to another bank
  * @param  None
  * @retval None
  */
void Flash_Bank_Copy_Bank(uint32_t FLASH_SRC, uint32_t FLASH_DEST, uint32_t firmware_size, uint8_t bank)
{
 801cf98:	b590      	push	{r4, r7, lr}
 801cf9a:	b0c9      	sub	sp, #292	; 0x124
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	f107 040c 	add.w	r4, r7, #12
 801cfa2:	6020      	str	r0, [r4, #0]
 801cfa4:	f107 0008 	add.w	r0, r7, #8
 801cfa8:	6001      	str	r1, [r0, #0]
 801cfaa:	1d39      	adds	r1, r7, #4
 801cfac:	600a      	str	r2, [r1, #0]
 801cfae:	461a      	mov	r2, r3
 801cfb0:	1cfb      	adds	r3, r7, #3
 801cfb2:	701a      	strb	r2, [r3, #0]
  uint32_t n, round;
  // uint32_t FLASH_SRC, FLASH_DEST, FIRMWARE_SIZE;
  uint32_t firmware_file_buffer[64];

  /* erase another bank */
  if (bank)
 801cfb4:	1cfb      	adds	r3, r7, #3
 801cfb6:	781b      	ldrb	r3, [r3, #0]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d002      	beq.n	801cfc2 <Flash_Bank_Copy_Bank+0x2a>
    menu_preSend(1);
 801cfbc:	2001      	movs	r0, #1
 801cfbe:	f000 f8bb 	bl	801d138 <menu_preSend>
  // else
  //   menu_preSend(0);

  round = (firmware_size + sizeof(firmware_file_buffer) - 1) / sizeof(firmware_file_buffer);
 801cfc2:	1d3b      	adds	r3, r7, #4
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	33ff      	adds	r3, #255	; 0xff
 801cfc8:	0a1b      	lsrs	r3, r3, #8
 801cfca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  PRINTF("copy round:%lu, %lu\n", round, firmware_size);
 801cfce:	1d3b      	adds	r3, r7, #4
 801cfd0:	681a      	ldr	r2, [r3, #0]
 801cfd2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801cfd6:	482a      	ldr	r0, [pc, #168]	; (801d080 <Flash_Bank_Copy_Bank+0xe8>)
 801cfd8:	f005 f8e4 	bl	80221a4 <iprintf>
  for (n = round; n > 0; n--)
 801cfdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801cfe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801cfe4:	e02f      	b.n	801d046 <Flash_Bank_Copy_Bank+0xae>
  {
    PRINTF("%lu, ", (n - 1));
 801cfe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cfea:	3b01      	subs	r3, #1
 801cfec:	4619      	mov	r1, r3
 801cfee:	4825      	ldr	r0, [pc, #148]	; (801d084 <Flash_Bank_Copy_Bank+0xec>)
 801cff0:	f005 f8d8 	bl	80221a4 <iprintf>
    memcpy(firmware_file_buffer, (__IO uint32_t*)(FLASH_SRC + (n - 1) * sizeof(firmware_file_buffer)), sizeof(firmware_file_buffer));
 801cff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cff8:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
 801cffc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801d000:	021a      	lsls	r2, r3, #8
 801d002:	f107 030c 	add.w	r3, r7, #12
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	4413      	add	r3, r2
 801d00a:	4619      	mov	r1, r3
 801d00c:	f107 0318 	add.w	r3, r7, #24
 801d010:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d014:	4618      	mov	r0, r3
 801d016:	f004 faad 	bl	8021574 <memcpy>

    FLASH_If_Write(FLASH_DEST + (n - 1) * sizeof(firmware_file_buffer), (uint32_t *)(firmware_file_buffer), sizeof(firmware_file_buffer) / sizeof(uint32_t));
 801d01a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d01e:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
 801d022:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801d026:	021a      	lsls	r2, r3, #8
 801d028:	f107 0308 	add.w	r3, r7, #8
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	4413      	add	r3, r2
 801d030:	f107 0118 	add.w	r1, r7, #24
 801d034:	2240      	movs	r2, #64	; 0x40
 801d036:	4618      	mov	r0, r3
 801d038:	f7ff fa84 	bl	801c544 <FLASH_If_Write>
  for (n = round; n > 0; n--)
 801d03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d040:	3b01      	subs	r3, #1
 801d042:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801d046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d1cb      	bne.n	801cfe6 <Flash_Bank_Copy_Bank+0x4e>
  }
  PRINTF("\n");
 801d04e:	200a      	movs	r0, #10
 801d050:	f005 f8c0 	bl	80221d4 <putchar>

  if (bank)
 801d054:	1cfb      	adds	r3, r7, #3
 801d056:	781b      	ldrb	r3, [r3, #0]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d00b      	beq.n	801d074 <Flash_Bank_Copy_Bank+0xdc>
  {
    uint32_t firmware_size_buffer[1];
    firmware_size_buffer[0] = firmware_size;
 801d05c:	f107 0314 	add.w	r3, r7, #20
 801d060:	1d3a      	adds	r2, r7, #4
 801d062:	6812      	ldr	r2, [r2, #0]
 801d064:	601a      	str	r2, [r3, #0]
    FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size_buffer, 2);
 801d066:	f107 0314 	add.w	r3, r7, #20
 801d06a:	2202      	movs	r2, #2
 801d06c:	4619      	mov	r1, r3
 801d06e:	4806      	ldr	r0, [pc, #24]	; (801d088 <Flash_Bank_Copy_Bank+0xf0>)
 801d070:	f7ff fa68 	bl	801c544 <FLASH_If_Write>
  }
}
 801d074:	bf00      	nop
 801d076:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bd90      	pop	{r4, r7, pc}
 801d07e:	bf00      	nop
 801d080:	08026198 	.word	0x08026198
 801d084:	080261b0 	.word	0x080261b0
 801d088:	080fe800 	.word	0x080fe800

0801d08c <menu_bank>:
  * @brief  Indicate current bank
  * @param  None
  * @retval None
  */
void menu_bank(void)
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b084      	sub	sp, #16
 801d090:	af00      	add	r7, sp, #0
  /* Test from which bank the program runs */
  BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801d092:	4b1e      	ldr	r3, [pc, #120]	; (801d10c <menu_bank+0x80>)
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d09a:	4a1d      	ldr	r2, [pc, #116]	; (801d110 <menu_bank+0x84>)
 801d09c:	6013      	str	r3, [r2, #0]

  Serial_PutString((uint8_t *)"\r\n========__DATE__ __TIME__ = " __DATE__ " " __TIME__ " ============\r\n\n");
 801d09e:	481d      	ldr	r0, [pc, #116]	; (801d114 <menu_bank+0x88>)
 801d0a0:	f7ff fe7a 	bl	801cd98 <Serial_PutString>
  printf("\r\n========version: %x-%x ========\r\n\n", VERSION_MAJOR, VERSION_NODE);
 801d0a4:	4b1c      	ldr	r3, [pc, #112]	; (801d118 <menu_bank+0x8c>)
 801d0a6:	781b      	ldrb	r3, [r3, #0]
 801d0a8:	4619      	mov	r1, r3
 801d0aa:	4b1c      	ldr	r3, [pc, #112]	; (801d11c <menu_bank+0x90>)
 801d0ac:	781b      	ldrb	r3, [r3, #0]
 801d0ae:	461a      	mov	r2, r3
 801d0b0:	481b      	ldr	r0, [pc, #108]	; (801d120 <menu_bank+0x94>)
 801d0b2:	f005 f877 	bl	80221a4 <iprintf>
	if (BankActive == 0)
 801d0b6:	4b16      	ldr	r3, [pc, #88]	; (801d110 <menu_bank+0x84>)
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d103      	bne.n	801d0c6 <menu_bank+0x3a>
  {
    Serial_PutString((uint8_t *)"\tSystem running from STM32L476 *Bank 1*  \r\n\n");
 801d0be:	4819      	ldr	r0, [pc, #100]	; (801d124 <menu_bank+0x98>)
 801d0c0:	f7ff fe6a 	bl	801cd98 <Serial_PutString>

  // if ( OBConfig.USERConfig & OB_BFB2_ENABLE ) /* BANK2 active for boot */
  //   Serial_PutString((uint8_t *)"\tSystem ROM bank selection active  \r\n\n");
  // else
  //   Serial_PutString((uint8_t *)"\tSystem ROM bank selection deactivated \r\n\n");
}
 801d0c4:	e01e      	b.n	801d104 <menu_bank+0x78>
    Serial_PutString((uint8_t *)"\tSystem running from STM32L476 *Bank 2*  \r\n\n");
 801d0c6:	4818      	ldr	r0, [pc, #96]	; (801d128 <menu_bank+0x9c>)
 801d0c8:	f7ff fe66 	bl	801cd98 <Serial_PutString>
    uint32_t firmware_size = *(__IO uint32_t*)(FIRMWARE_FLASH_ADDRESS_1);
 801d0cc:	4b17      	ldr	r3, [pc, #92]	; (801d12c <menu_bank+0xa0>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	60fb      	str	r3, [r7, #12]
    PRINTF("firmware_size:%lu\n", firmware_size);
 801d0d2:	68f9      	ldr	r1, [r7, #12]
 801d0d4:	4816      	ldr	r0, [pc, #88]	; (801d130 <menu_bank+0xa4>)
 801d0d6:	f005 f865 	bl	80221a4 <iprintf>
    if ((firmware_size < 0x100000) && (firmware_size))
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d0e0:	d209      	bcs.n	801d0f6 <menu_bank+0x6a>
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d006      	beq.n	801d0f6 <menu_bank+0x6a>
      Flash_Bank_Copy_Bank(FLASH_START_BANK1, FLASH_START_BANK2, firmware_size, 1);
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	68fa      	ldr	r2, [r7, #12]
 801d0ec:	4911      	ldr	r1, [pc, #68]	; (801d134 <menu_bank+0xa8>)
 801d0ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801d0f2:	f7ff ff51 	bl	801cf98 <Flash_Bank_Copy_Bank>
    DS3231_GetTime();
 801d0f6:	f7fb ff01 	bl	8018efc <DS3231_GetTime>
    DS3231_ShowTime();
 801d0fa:	463b      	mov	r3, r7
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7fb ff17 	bl	8018f30 <DS3231_ShowTime>
    while(1);
 801d102:	e7fe      	b.n	801d102 <menu_bank+0x76>
}
 801d104:	3710      	adds	r7, #16
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	40010000 	.word	0x40010000
 801d110:	20000488 	.word	0x20000488
 801d114:	080261b8 	.word	0x080261b8
 801d118:	08026888 	.word	0x08026888
 801d11c:	08026889 	.word	0x08026889
 801d120:	080261fc 	.word	0x080261fc
 801d124:	08026224 	.word	0x08026224
 801d128:	08026254 	.word	0x08026254
 801d12c:	0807e800 	.word	0x0807e800
 801d130:	08026284 	.word	0x08026284
 801d134:	08080000 	.word	0x08080000

0801d138 <menu_preSend>:
  * @brief  Erase the Flash bank and clear the protection
  * @param  None
  * @retval None
  */
void menu_preSend(uint8_t bank)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b082      	sub	sp, #8
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	4603      	mov	r3, r0
 801d140:	71fb      	strb	r3, [r7, #7]
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UART_Handle);
 801d142:	4b12      	ldr	r3, [pc, #72]	; (801d18c <menu_preSend+0x54>)
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	8b1b      	ldrh	r3, [r3, #24]
 801d148:	b29a      	uxth	r2, r3
 801d14a:	4b10      	ldr	r3, [pc, #64]	; (801d18c <menu_preSend+0x54>)
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	f042 0208 	orr.w	r2, r2, #8
 801d152:	b292      	uxth	r2, r2
 801d154:	831a      	strh	r2, [r3, #24]
 801d156:	4b0d      	ldr	r3, [pc, #52]	; (801d18c <menu_preSend+0x54>)
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	8b1b      	ldrh	r3, [r3, #24]
 801d15c:	b29a      	uxth	r2, r3
 801d15e:	4b0b      	ldr	r3, [pc, #44]	; (801d18c <menu_preSend+0x54>)
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	f042 0210 	orr.w	r2, r2, #16
 801d166:	b292      	uxth	r2, r2
 801d168:	831a      	strh	r2, [r3, #24]
  __HAL_UART_CLEAR_IT(&UART_Handle, UART_CLEAR_OREF);
 801d16a:	4b08      	ldr	r3, [pc, #32]	; (801d18c <menu_preSend+0x54>)
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	2208      	movs	r2, #8
 801d170:	621a      	str	r2, [r3, #32]
  if (bank)
 801d172:	79fb      	ldrb	r3, [r7, #7]
 801d174:	2b00      	cmp	r3, #0
 801d176:	d004      	beq.n	801d182 <menu_preSend+0x4a>
    FLASH_If_Erase(BankActive);
 801d178:	4b05      	ldr	r3, [pc, #20]	; (801d190 <menu_preSend+0x58>)
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ff f8eb 	bl	801c358 <FLASH_If_Erase>
}
 801d182:	bf00      	nop
 801d184:	3708      	adds	r7, #8
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	2000134c 	.word	0x2000134c
 801d190:	20000488 	.word	0x20000488

0801d194 <menu_serialDownload>:
  * @brief  Download a file via serial port. Should be used after menu_preSend.
  * @param  offset_page: The download offset page of the flash (0-255)
  * @retval size: The file size
  */
uint32_t menu_serialDownload(uint32_t offset_page, uint8_t bank_update)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b088      	sub	sp, #32
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
 801d19c:	460b      	mov	r3, r1
 801d19e:	70fb      	strb	r3, [r7, #3]
  gpi_watchdog_periodic();
 801d1a0:	f7f0 ffd2 	bl	800e148 <gpi_watchdog_periodic>
  uint8_t number[11] = {0};
 801d1a4:	f107 0310 	add.w	r3, r7, #16
 801d1a8:	2200      	movs	r2, #0
 801d1aa:	601a      	str	r2, [r3, #0]
 801d1ac:	605a      	str	r2, [r3, #4]
 801d1ae:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	60fb      	str	r3, [r7, #12]
  COM_StatusTypeDef result;

  uint32_t bank_active;

  /* if update bank1 ("0"), set bank_active as "1" to write file to FLASH_START_BANK1 */
  if (!bank_update)
 801d1b6:	78fb      	ldrb	r3, [r7, #3]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d102      	bne.n	801d1c2 <menu_serialDownload+0x2e>
    bank_active = 1;
 801d1bc:	2301      	movs	r3, #1
 801d1be:	61fb      	str	r3, [r7, #28]
 801d1c0:	e001      	b.n	801d1c6 <menu_serialDownload+0x32>
  else
    bank_active = 0;
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	61fb      	str	r3, [r7, #28]

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 801d1c6:	481a      	ldr	r0, [pc, #104]	; (801d230 <menu_serialDownload+0x9c>)
 801d1c8:	f7ff fde6 	bl	801cd98 <Serial_PutString>
  result = COM_ABORT;
 801d1cc:	2302      	movs	r3, #2
 801d1ce:	76fb      	strb	r3, [r7, #27]
  do
  {
    result = menu_ymodem_receive( &size, bank_active, FLASH_PAGE * offset_page);
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	02da      	lsls	r2, r3, #11
 801d1d4:	f107 030c 	add.w	r3, r7, #12
 801d1d8:	69f9      	ldr	r1, [r7, #28]
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f000 f834 	bl	801d248 <menu_ymodem_receive>
 801d1e0:	4603      	mov	r3, r0
 801d1e2:	76fb      	strb	r3, [r7, #27]
  } while (result != COM_OK);
 801d1e4:	7efb      	ldrb	r3, [r7, #27]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d1f2      	bne.n	801d1d0 <menu_serialDownload+0x3c>
  // result = menu_ymodem_receive( &size, bank_active, FLASH_PAGE * offset_page);
  if (result == COM_OK)
 801d1ea:	7efb      	ldrb	r3, [r7, #27]
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d11a      	bne.n	801d226 <menu_serialDownload+0x92>
  {
    /* Reporting */
    Serial_PutString((uint8_t *) "\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 801d1f0:	4810      	ldr	r0, [pc, #64]	; (801d234 <menu_serialDownload+0xa0>)
 801d1f2:	f7ff fdd1 	bl	801cd98 <Serial_PutString>
    Serial_PutString(aFileName);
 801d1f6:	4810      	ldr	r0, [pc, #64]	; (801d238 <menu_serialDownload+0xa4>)
 801d1f8:	f7ff fdce 	bl	801cd98 <Serial_PutString>
    Int2Str(number, size);
 801d1fc:	68fa      	ldr	r2, [r7, #12]
 801d1fe:	f107 0310 	add.w	r3, r7, #16
 801d202:	4611      	mov	r1, r2
 801d204:	4618      	mov	r0, r3
 801d206:	f7ff fc7f 	bl	801cb08 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 801d20a:	480c      	ldr	r0, [pc, #48]	; (801d23c <menu_serialDownload+0xa8>)
 801d20c:	f7ff fdc4 	bl	801cd98 <Serial_PutString>
    Serial_PutString(number);
 801d210:	f107 0310 	add.w	r3, r7, #16
 801d214:	4618      	mov	r0, r3
 801d216:	f7ff fdbf 	bl	801cd98 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 801d21a:	4809      	ldr	r0, [pc, #36]	; (801d240 <menu_serialDownload+0xac>)
 801d21c:	f7ff fdbc 	bl	801cd98 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 801d220:	4808      	ldr	r0, [pc, #32]	; (801d244 <menu_serialDownload+0xb0>)
 801d222:	f7ff fdb9 	bl	801cd98 <Serial_PutString>
  //   Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
  // else if (result == COM_ABORT)
  //   Serial_PutString((uint8_t *)"\n\rAborted by user.\n\r");
  // else
  //   Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  return size;
 801d226:	68fb      	ldr	r3, [r7, #12]
}
 801d228:	4618      	mov	r0, r3
 801d22a:	3720      	adds	r7, #32
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}
 801d230:	08026298 	.word	0x08026298
 801d234:	080262d4 	.word	0x080262d4
 801d238:	20002298 	.word	0x20002298
 801d23c:	08026328 	.word	0x08026328
 801d240:	08026334 	.word	0x08026334
 801d244:	08026340 	.word	0x08026340

0801d248 <menu_ymodem_receive>:
  * @param  bank The actual active bank
  * @param  offset The offset of the flash
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef menu_ymodem_receive( uint32_t *p_size, uint32_t bank, uint32_t offset)
{
 801d248:	b580      	push	{r7, lr}
 801d24a:	b094      	sub	sp, #80	; 0x50
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	60f8      	str	r0, [r7, #12]
 801d250:	60b9      	str	r1, [r7, #8]
 801d252:	607a      	str	r2, [r7, #4]
  gpi_watchdog_periodic();
 801d254:	f7f0 ff78 	bl	800e148 <gpi_watchdog_periodic>
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 801d258:	2300      	movs	r3, #0
 801d25a:	64bb      	str	r3, [r7, #72]	; 0x48
 801d25c:	2300      	movs	r3, #0
 801d25e:	643b      	str	r3, [r7, #64]	; 0x40
 801d260:	2300      	movs	r3, #0
 801d262:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 801d264:	2300      	movs	r3, #0
 801d266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801d26a:	4b92      	ldr	r3, [pc, #584]	; (801d4b4 <menu_ymodem_receive+0x26c>)
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	4a91      	ldr	r2, [pc, #580]	; (801d4b4 <menu_ymodem_receive+0x26c>)
 801d270:	f043 0302 	orr.w	r3, r3, #2
 801d274:	6013      	str	r3, [r2, #0]

  /* Initialize flashdestination variable */
  if (bank == 1 )
 801d276:	68bb      	ldr	r3, [r7, #8]
 801d278:	2b01      	cmp	r3, #1
 801d27a:	d104      	bne.n	801d286 <menu_ymodem_receive+0x3e>
  {
    flashdestination = FLASH_START_BANK1 + offset;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801d282:	63bb      	str	r3, [r7, #56]	; 0x38
 801d284:	e102      	b.n	801d48c <menu_ymodem_receive+0x244>
  }
  else
  {
    flashdestination = FLASH_START_BANK2 + offset;
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801d28c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 801d290:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  while ((session_done == 0) && (result == COM_OK))
 801d292:	e0fb      	b.n	801d48c <menu_ymodem_receive+0x244>
  {
    packets_received = 0;
 801d294:	2300      	movs	r3, #0
 801d296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    file_done = 0;
 801d29a:	2300      	movs	r3, #0
 801d29c:	647b      	str	r3, [r7, #68]	; 0x44
    while ((file_done == 0) && (result == COM_OK))
 801d29e:	e0ed      	b.n	801d47c <menu_ymodem_receive+0x234>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 801d2a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d2a8:	4619      	mov	r1, r3
 801d2aa:	4883      	ldr	r0, [pc, #524]	; (801d4b8 <menu_ymodem_receive+0x270>)
 801d2ac:	f7ff fdac 	bl	801ce08 <ReceivePacket>
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d003      	beq.n	801d2be <menu_ymodem_receive+0x76>
 801d2b6:	2b02      	cmp	r3, #2
 801d2b8:	f000 80bf 	beq.w	801d43a <menu_ymodem_receive+0x1f2>
 801d2bc:	e0c7      	b.n	801d44e <menu_ymodem_receive+0x206>
      {
        case HAL_OK:
          errors = 0;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	643b      	str	r3, [r7, #64]	; 0x40
          switch (packet_length)
 801d2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d008      	beq.n	801d2da <menu_ymodem_receive+0x92>
 801d2c8:	2b02      	cmp	r3, #2
 801d2ca:	d10c      	bne.n	801d2e6 <menu_ymodem_receive+0x9e>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 801d2cc:	2006      	movs	r0, #6
 801d2ce:	f7ff fd7f 	bl	801cdd0 <Serial_PutByte>
              result = COM_ABORT;
 801d2d2:	2302      	movs	r3, #2
 801d2d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
              break;
 801d2d8:	e0ae      	b.n	801d438 <menu_ymodem_receive+0x1f0>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 801d2da:	2006      	movs	r0, #6
 801d2dc:	f7ff fd78 	bl	801cdd0 <Serial_PutByte>
              file_done = 1;
 801d2e0:	2301      	movs	r3, #1
 801d2e2:	647b      	str	r3, [r7, #68]	; 0x44
              break;
 801d2e4:	e0a8      	b.n	801d438 <menu_ymodem_receive+0x1f0>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 801d2e6:	4b74      	ldr	r3, [pc, #464]	; (801d4b8 <menu_ymodem_receive+0x270>)
 801d2e8:	789b      	ldrb	r3, [r3, #2]
 801d2ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801d2ee:	429a      	cmp	r2, r3
 801d2f0:	d003      	beq.n	801d2fa <menu_ymodem_receive+0xb2>
              {
                Serial_PutByte(NAK);
 801d2f2:	2015      	movs	r0, #21
 801d2f4:	f7ff fd6c 	bl	801cdd0 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 801d2f8:	e09d      	b.n	801d436 <menu_ymodem_receive+0x1ee>
                if (packets_received == 0)
 801d2fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d175      	bne.n	801d3ee <menu_ymodem_receive+0x1a6>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 801d302:	4b6d      	ldr	r3, [pc, #436]	; (801d4b8 <menu_ymodem_receive+0x270>)
 801d304:	791b      	ldrb	r3, [r3, #4]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d069      	beq.n	801d3de <menu_ymodem_receive+0x196>
                    i = 0;
 801d30a:	2300      	movs	r3, #0
 801d30c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 801d30e:	4b6b      	ldr	r3, [pc, #428]	; (801d4bc <menu_ymodem_receive+0x274>)
 801d310:	637b      	str	r3, [r7, #52]	; 0x34
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 801d312:	e008      	b.n	801d326 <menu_ymodem_receive+0xde>
                      aFileName[i++] = *file_ptr++;
 801d314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d316:	1c53      	adds	r3, r2, #1
 801d318:	637b      	str	r3, [r7, #52]	; 0x34
 801d31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d31c:	1c59      	adds	r1, r3, #1
 801d31e:	64f9      	str	r1, [r7, #76]	; 0x4c
 801d320:	7811      	ldrb	r1, [r2, #0]
 801d322:	4a67      	ldr	r2, [pc, #412]	; (801d4c0 <menu_ymodem_receive+0x278>)
 801d324:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 801d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d328:	781b      	ldrb	r3, [r3, #0]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d002      	beq.n	801d334 <menu_ymodem_receive+0xec>
 801d32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d330:	2b3f      	cmp	r3, #63	; 0x3f
 801d332:	d9ef      	bls.n	801d314 <menu_ymodem_receive+0xcc>
                    aFileName[i++] = '\0';
 801d334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d336:	1c5a      	adds	r2, r3, #1
 801d338:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d33a:	4a61      	ldr	r2, [pc, #388]	; (801d4c0 <menu_ymodem_receive+0x278>)
 801d33c:	2100      	movs	r1, #0
 801d33e:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 801d340:	2300      	movs	r3, #0
 801d342:	64fb      	str	r3, [r7, #76]	; 0x4c
                    file_ptr ++;
 801d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d346:	3301      	adds	r3, #1
 801d348:	637b      	str	r3, [r7, #52]	; 0x34
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 801d34a:	e00b      	b.n	801d364 <menu_ymodem_receive+0x11c>
                      file_size[i++] = *file_ptr++;
 801d34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d34e:	1c53      	adds	r3, r2, #1
 801d350:	637b      	str	r3, [r7, #52]	; 0x34
 801d352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d354:	1c59      	adds	r1, r3, #1
 801d356:	64f9      	str	r1, [r7, #76]	; 0x4c
 801d358:	7812      	ldrb	r2, [r2, #0]
 801d35a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801d35e:	440b      	add	r3, r1
 801d360:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 801d364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d366:	781b      	ldrb	r3, [r3, #0]
 801d368:	2b20      	cmp	r3, #32
 801d36a:	d002      	beq.n	801d372 <menu_ymodem_receive+0x12a>
 801d36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d36e:	2b0f      	cmp	r3, #15
 801d370:	d9ec      	bls.n	801d34c <menu_ymodem_receive+0x104>
                    file_size[i++] = '\0';
 801d372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d374:	1c5a      	adds	r2, r3, #1
 801d376:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d378:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d37c:	4413      	add	r3, r2
 801d37e:	2200      	movs	r2, #0
 801d380:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 801d384:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d388:	f107 0314 	add.w	r3, r7, #20
 801d38c:	4611      	mov	r1, r2
 801d38e:	4618      	mov	r0, r3
 801d390:	f7ff fc0e 	bl	801cbb0 <Str2Int>
                    *p_size = filesize;
 801d394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	601a      	str	r2, [r3, #0]
                    if (*p_size > (FLASH_START_BANK2 - FLASH_START_BANK1))
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801d3a2:	d915      	bls.n	801d3d0 <menu_ymodem_receive+0x188>
                      tmp = CA;
 801d3a4:	2318      	movs	r3, #24
 801d3a6:	74fb      	strb	r3, [r7, #19]
                      HAL_UART_Transmit(&UART_Handle, &tmp, 1, NAK_TIMEOUT);
 801d3a8:	f107 0113 	add.w	r1, r7, #19
 801d3ac:	f242 7310 	movw	r3, #10000	; 0x2710
 801d3b0:	2201      	movs	r2, #1
 801d3b2:	4844      	ldr	r0, [pc, #272]	; (801d4c4 <menu_ymodem_receive+0x27c>)
 801d3b4:	f7eb fa93 	bl	80088de <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UART_Handle, &tmp, 1, NAK_TIMEOUT);
 801d3b8:	f107 0113 	add.w	r1, r7, #19
 801d3bc:	f242 7310 	movw	r3, #10000	; 0x2710
 801d3c0:	2201      	movs	r2, #1
 801d3c2:	4840      	ldr	r0, [pc, #256]	; (801d4c4 <menu_ymodem_receive+0x27c>)
 801d3c4:	f7eb fa8b 	bl	80088de <HAL_UART_Transmit>
                      result = COM_LIMIT;
 801d3c8:	2305      	movs	r3, #5
 801d3ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801d3ce:	e02b      	b.n	801d428 <menu_ymodem_receive+0x1e0>
                      Serial_PutByte(ACK);
 801d3d0:	2006      	movs	r0, #6
 801d3d2:	f7ff fcfd 	bl	801cdd0 <Serial_PutByte>
                      Serial_PutByte(CRC16);
 801d3d6:	2043      	movs	r0, #67	; 0x43
 801d3d8:	f7ff fcfa 	bl	801cdd0 <Serial_PutByte>
 801d3dc:	e024      	b.n	801d428 <menu_ymodem_receive+0x1e0>
                    Serial_PutByte(ACK);
 801d3de:	2006      	movs	r0, #6
 801d3e0:	f7ff fcf6 	bl	801cdd0 <Serial_PutByte>
                    file_done = 1;
 801d3e4:	2301      	movs	r3, #1
 801d3e6:	647b      	str	r3, [r7, #68]	; 0x44
                    session_done = 1;
 801d3e8:	2301      	movs	r3, #1
 801d3ea:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 801d3ec:	e024      	b.n	801d438 <menu_ymodem_receive+0x1f0>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 801d3ee:	4b33      	ldr	r3, [pc, #204]	; (801d4bc <menu_ymodem_receive+0x274>)
 801d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length / 4) == FLASHIF_OK)
 801d3f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3f6:	089b      	lsrs	r3, r3, #2
 801d3f8:	461a      	mov	r2, r3
 801d3fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d3fc:	f7ff f8a2 	bl	801c544 <FLASH_If_Write>
 801d400:	4603      	mov	r3, r0
 801d402:	2b00      	cmp	r3, #0
 801d404:	d107      	bne.n	801d416 <menu_ymodem_receive+0x1ce>
                    flashdestination += packet_length;
 801d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d40a:	4413      	add	r3, r2
 801d40c:	63bb      	str	r3, [r7, #56]	; 0x38
                    Serial_PutByte(ACK);
 801d40e:	2006      	movs	r0, #6
 801d410:	f7ff fcde 	bl	801cdd0 <Serial_PutByte>
 801d414:	e008      	b.n	801d428 <menu_ymodem_receive+0x1e0>
                    Serial_PutByte(CA);
 801d416:	2018      	movs	r0, #24
 801d418:	f7ff fcda 	bl	801cdd0 <Serial_PutByte>
                    Serial_PutByte(CA);
 801d41c:	2018      	movs	r0, #24
 801d41e:	f7ff fcd7 	bl	801cdd0 <Serial_PutByte>
                    result = COM_DATA;
 801d422:	2304      	movs	r3, #4
 801d424:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                packets_received ++;
 801d428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d42c:	3301      	adds	r3, #1
 801d42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                session_begin = 1;
 801d432:	2301      	movs	r3, #1
 801d434:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 801d436:	bf00      	nop
          }
          break;
 801d438:	e020      	b.n	801d47c <menu_ymodem_receive+0x234>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 801d43a:	2018      	movs	r0, #24
 801d43c:	f7ff fcc8 	bl	801cdd0 <Serial_PutByte>
          Serial_PutByte(CA);
 801d440:	2018      	movs	r0, #24
 801d442:	f7ff fcc5 	bl	801cdd0 <Serial_PutByte>
          result = COM_ABORT;
 801d446:	2302      	movs	r3, #2
 801d448:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
          break;
 801d44c:	e016      	b.n	801d47c <menu_ymodem_receive+0x234>
        default:
          if (session_begin > 0)
 801d44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d450:	2b00      	cmp	r3, #0
 801d452:	d002      	beq.n	801d45a <menu_ymodem_receive+0x212>
          {
            errors ++;
 801d454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d456:	3301      	adds	r3, #1
 801d458:	643b      	str	r3, [r7, #64]	; 0x40
          }
          if (errors > MAX_ERRORS)
 801d45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d45c:	2b0a      	cmp	r3, #10
 801d45e:	d909      	bls.n	801d474 <menu_ymodem_receive+0x22c>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 801d460:	2018      	movs	r0, #24
 801d462:	f7ff fcb5 	bl	801cdd0 <Serial_PutByte>
            Serial_PutByte(CA);
 801d466:	2018      	movs	r0, #24
 801d468:	f7ff fcb2 	bl	801cdd0 <Serial_PutByte>
            result = COM_ABORT;
 801d46c:	2302      	movs	r3, #2
 801d46e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801d472:	e002      	b.n	801d47a <menu_ymodem_receive+0x232>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 801d474:	2043      	movs	r0, #67	; 0x43
 801d476:	f7ff fcab 	bl	801cdd0 <Serial_PutByte>
          }
          break;
 801d47a:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 801d47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d104      	bne.n	801d48c <menu_ymodem_receive+0x244>
 801d482:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801d486:	2b00      	cmp	r3, #0
 801d488:	f43f af0a 	beq.w	801d2a0 <menu_ymodem_receive+0x58>
  while ((session_done == 0) && (result == COM_OK))
 801d48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d104      	bne.n	801d49c <menu_ymodem_receive+0x254>
 801d492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801d496:	2b00      	cmp	r3, #0
 801d498:	f43f aefc 	beq.w	801d294 <menu_ymodem_receive+0x4c>
      }
    }
  }
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801d49c:	4b05      	ldr	r3, [pc, #20]	; (801d4b4 <menu_ymodem_receive+0x26c>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	4a04      	ldr	r2, [pc, #16]	; (801d4b4 <menu_ymodem_receive+0x26c>)
 801d4a2:	f023 0302 	bic.w	r3, r3, #2
 801d4a6:	6013      	str	r3, [r2, #0]

  return result;
 801d4a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	3750      	adds	r7, #80	; 0x50
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	bd80      	pop	{r7, pc}
 801d4b4:	e000e010 	.word	0xe000e010
 801d4b8:	20001e68 	.word	0x20001e68
 801d4bc:	20001e6c 	.word	0x20001e6c
 801d4c0:	20002298 	.word	0x20002298
 801d4c4:	2000134c 	.word	0x2000134c

0801d4c8 <menu_pre_patch>:

//**************************************************************************************************

uint8_t menu_pre_patch(uint8_t patch_bank, uint32_t old_firmware_size, uint32_t patch_firmware_size)
{
 801d4c8:	b580      	push	{r7, lr}
 801d4ca:	b086      	sub	sp, #24
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	4603      	mov	r3, r0
 801d4d0:	60b9      	str	r1, [r7, #8]
 801d4d2:	607a      	str	r2, [r7, #4]
 801d4d4:	73fb      	strb	r3, [r7, #15]
  /* Prepare for download files */
  menu_preSend(0);
 801d4d6:	2000      	movs	r0, #0
 801d4d8:	f7ff fe2e 	bl	801d138 <menu_preSend>

  /* chose the place to write patch file */
  uint8_t patch_page = (old_firmware_size + FLASH_PAGE - 1) / FLASH_PAGE + 5;
 801d4dc:	68bb      	ldr	r3, [r7, #8]
 801d4de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801d4e2:	0adb      	lsrs	r3, r3, #11
 801d4e4:	b2db      	uxtb	r3, r3
 801d4e6:	3305      	adds	r3, #5
 801d4e8:	75bb      	strb	r3, [r7, #22]
  uint8_t patch_used_page = (patch_firmware_size + FLASH_PAGE - 1) / FLASH_PAGE;
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801d4f0:	0adb      	lsrs	r3, r3, #11
 801d4f2:	757b      	strb	r3, [r7, #21]

  /* erase flash pages that may be used */
  uint8_t i;

  if (!patch_bank)
 801d4f4:	7bfb      	ldrb	r3, [r7, #15]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d111      	bne.n	801d51e <menu_pre_patch+0x56>
  {
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801d4fa:	7dbb      	ldrb	r3, [r7, #22]
 801d4fc:	75fb      	strb	r3, [r7, #23]
 801d4fe:	e007      	b.n	801d510 <menu_pre_patch+0x48>
      FLASH_If_Erase_Pages(1, i);
 801d500:	7dfb      	ldrb	r3, [r7, #23]
 801d502:	4619      	mov	r1, r3
 801d504:	2001      	movs	r0, #1
 801d506:	f7fe ff99 	bl	801c43c <FLASH_If_Erase_Pages>
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801d50a:	7dfb      	ldrb	r3, [r7, #23]
 801d50c:	3301      	adds	r3, #1
 801d50e:	75fb      	strb	r3, [r7, #23]
 801d510:	7dfa      	ldrb	r2, [r7, #23]
 801d512:	7db9      	ldrb	r1, [r7, #22]
 801d514:	7d7b      	ldrb	r3, [r7, #21]
 801d516:	440b      	add	r3, r1
 801d518:	429a      	cmp	r2, r3
 801d51a:	dbf1      	blt.n	801d500 <menu_pre_patch+0x38>
 801d51c:	e010      	b.n	801d540 <menu_pre_patch+0x78>
  }
  else
  {
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801d51e:	7dbb      	ldrb	r3, [r7, #22]
 801d520:	75fb      	strb	r3, [r7, #23]
 801d522:	e007      	b.n	801d534 <menu_pre_patch+0x6c>
      FLASH_If_Erase_Pages(0, i);
 801d524:	7dfb      	ldrb	r3, [r7, #23]
 801d526:	4619      	mov	r1, r3
 801d528:	2000      	movs	r0, #0
 801d52a:	f7fe ff87 	bl	801c43c <FLASH_If_Erase_Pages>
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801d52e:	7dfb      	ldrb	r3, [r7, #23]
 801d530:	3301      	adds	r3, #1
 801d532:	75fb      	strb	r3, [r7, #23]
 801d534:	7dfa      	ldrb	r2, [r7, #23]
 801d536:	7db9      	ldrb	r1, [r7, #22]
 801d538:	7d7b      	ldrb	r3, [r7, #21]
 801d53a:	440b      	add	r3, r1
 801d53c:	429a      	cmp	r2, r3
 801d53e:	dbf1      	blt.n	801d524 <menu_pre_patch+0x5c>
  }

  return patch_page;
 801d540:	7dbb      	ldrb	r3, [r7, #22]
}
 801d542:	4618      	mov	r0, r3
 801d544:	3718      	adds	r7, #24
 801d546:	46bd      	mov	sp, r7
 801d548:	bd80      	pop	{r7, pc}

0801d54a <menu_initiator_read_file>:
 * @description: read file through Ymodem and set the file at the other bank 0 page
 * @param
 * @return: size of the downloaded file
 */
uint32_t menu_initiator_read_file(void)
{
 801d54a:	b580      	push	{r7, lr}
 801d54c:	b082      	sub	sp, #8
 801d54e:	af00      	add	r7, sp, #0
  /* initiator needs to erase bank2 */
  /* erase bank2 */
  FLASH_If_Erase(0);
 801d550:	2000      	movs	r0, #0
 801d552:	f7fe ff01 	bl	801c358 <FLASH_If_Erase>
  /* write file to bank2 */
  uint32_t size = menu_serialDownload(0, 1);
 801d556:	2101      	movs	r1, #1
 801d558:	2000      	movs	r0, #0
 801d55a:	f7ff fe1b 	bl	801d194 <menu_serialDownload>
 801d55e:	6078      	str	r0, [r7, #4]
  CheckOtherBank();
 801d560:	f7ff fcf4 	bl	801cf4c <CheckOtherBank>
  return size;
 801d564:	687b      	ldr	r3, [r7, #4]
}
 801d566:	4618      	mov	r0, r3
 801d568:	3708      	adds	r7, #8
 801d56a:	46bd      	mov	sp, r7
 801d56c:	bd80      	pop	{r7, pc}
	...

0801d570 <menu_wait_task>:
 * @description: To chose the task according through serial input
 * @param
 * @return: None
 */
uint8_t menu_wait_task(Chirp_Outl *chirp_outl)
{
 801d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d572:	b099      	sub	sp, #100	; 0x64
 801d574:	af06      	add	r7, sp, #24
 801d576:	6078      	str	r0, [r7, #4]
  uint8_t default_generate_size;
  int8_t default_tp;
  uint16_t default_slot_num;
  uint8_t dissem_back_sf;
  uint8_t dissem_back_slot_num;
  uint8_t task_wait = 0;
 801d578:	2300      	movs	r3, #0
 801d57a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  uint8_t task[28 + DISSEM_BITMAP_32 * 8 + DISSEM_BITMAP_32 * 8 + 1];
  PRINTF("\nTask list:\n%d: CHIRP_START\n%d: MX_DISSEMINATE\n%d: MX_COLLECT\n%d: CHIRP_CONNECTIVITY\n%d: CHIRP_TOPO\n%d: CHIRP_VERSION\n", CHIRP_START, MX_DISSEMINATE, MX_COLLECT, CHIRP_CONNECTIVITY, CHIRP_TOPO, CHIRP_VERSION);
 801d57e:	2305      	movs	r3, #5
 801d580:	9302      	str	r3, [sp, #8]
 801d582:	2304      	movs	r3, #4
 801d584:	9301      	str	r3, [sp, #4]
 801d586:	2303      	movs	r3, #3
 801d588:	9300      	str	r3, [sp, #0]
 801d58a:	2302      	movs	r3, #2
 801d58c:	2201      	movs	r2, #1
 801d58e:	2100      	movs	r1, #0
 801d590:	48c7      	ldr	r0, [pc, #796]	; (801d8b0 <menu_wait_task+0x340>)
 801d592:	f004 fe07 	bl	80221a4 <iprintf>

  HAL_StatusTypeDef status;

  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801d596:	4bc7      	ldr	r3, [pc, #796]	; (801d8b4 <menu_wait_task+0x344>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	4ac6      	ldr	r2, [pc, #792]	; (801d8b4 <menu_wait_task+0x344>)
 801d59c:	f043 0302 	orr.w	r3, r3, #2
 801d5a0:	6013      	str	r3, [r2, #0]
  do
  {
    status = HAL_TIMEOUT;
 801d5a2:	2303      	movs	r3, #3
 801d5a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    while(status != HAL_OK)
 801d5a8:	e040      	b.n	801d62c <menu_wait_task+0xbc>
    {
      gpi_watchdog_periodic();
 801d5aa:	f7f0 fdcd 	bl	800e148 <gpi_watchdog_periodic>
      /* initiator sleep for 60 s after 1 seconds not receiving any task */
      task_wait++;
 801d5ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d5b2:	3301      	adds	r3, #1
 801d5b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if (task_wait > 1)
 801d5b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d5bc:	2b01      	cmp	r3, #1
 801d5be:	d920      	bls.n	801d602 <menu_wait_task+0x92>
      {
        __HAL_UART_DISABLE(&huart2);
 801d5c0:	4bbd      	ldr	r3, [pc, #756]	; (801d8b8 <menu_wait_task+0x348>)
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	681a      	ldr	r2, [r3, #0]
 801d5c6:	4bbc      	ldr	r3, [pc, #752]	; (801d8b8 <menu_wait_task+0x348>)
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	f022 0201 	bic.w	r2, r2, #1
 801d5ce:	601a      	str	r2, [r3, #0]
        SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801d5d0:	4bb8      	ldr	r3, [pc, #736]	; (801d8b4 <menu_wait_task+0x344>)
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	4ab7      	ldr	r2, [pc, #732]	; (801d8b4 <menu_wait_task+0x344>)
 801d5d6:	f023 0302 	bic.w	r3, r3, #2
 801d5da:	6013      	str	r3, [r2, #0]
        task_wait = 0;
 801d5dc:	2300      	movs	r3, #0
 801d5de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801d5e2:	4bb4      	ldr	r3, [pc, #720]	; (801d8b4 <menu_wait_task+0x344>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	4ab3      	ldr	r2, [pc, #716]	; (801d8b4 <menu_wait_task+0x344>)
 801d5e8:	f043 0302 	orr.w	r3, r3, #2
 801d5ec:	6013      	str	r3, [r2, #0]
        __HAL_UART_ENABLE(&huart2);
 801d5ee:	4bb2      	ldr	r3, [pc, #712]	; (801d8b8 <menu_wait_task+0x348>)
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	681a      	ldr	r2, [r3, #0]
 801d5f4:	4bb0      	ldr	r3, [pc, #704]	; (801d8b8 <menu_wait_task+0x348>)
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	f042 0201 	orr.w	r2, r2, #1
 801d5fc:	601a      	str	r2, [r3, #0]
        return 0;
 801d5fe:	2300      	movs	r3, #0
 801d600:	e23b      	b.n	801da7a <menu_wait_task+0x50a>
      }
      PRINTF("Input initiator task:\n");
 801d602:	48ae      	ldr	r0, [pc, #696]	; (801d8bc <menu_wait_task+0x34c>)
 801d604:	f004 fe56 	bl	80222b4 <puts>
      // 0,07,100
      status = HAL_UART_Receive(&UART_Handle, &task, sizeof(task), DOWNLOAD_TIMEOUT);
 801d608:	f107 010c 	add.w	r1, r7, #12
 801d60c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d610:	222d      	movs	r2, #45	; 0x2d
 801d612:	48a9      	ldr	r0, [pc, #676]	; (801d8b8 <menu_wait_task+0x348>)
 801d614:	f7eb f9f0 	bl	80089f8 <HAL_UART_Receive>
 801d618:	4603      	mov	r3, r0
 801d61a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      while (UART_Handle.RxState == HAL_UART_STATE_BUSY_RX);
 801d61e:	bf00      	nop
 801d620:	4ba5      	ldr	r3, [pc, #660]	; (801d8b8 <menu_wait_task+0x348>)
 801d622:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801d626:	b2db      	uxtb	r3, r3
 801d628:	2b22      	cmp	r3, #34	; 0x22
 801d62a:	d0f9      	beq.n	801d620 <menu_wait_task+0xb0>
    while(status != HAL_OK)
 801d62c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801d630:	2b00      	cmp	r3, #0
 801d632:	d1ba      	bne.n	801d5aa <menu_wait_task+0x3a>
    }
    mx_task = task[0] - '0';
 801d634:	7b3b      	ldrb	r3, [r7, #12]
 801d636:	3b30      	subs	r3, #48	; 0x30
 801d638:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    default_sf = (task[2] - '0') * 10 + task[3] - '0';
 801d63c:	7bbb      	ldrb	r3, [r7, #14]
 801d63e:	461a      	mov	r2, r3
 801d640:	0092      	lsls	r2, r2, #2
 801d642:	4413      	add	r3, r2
 801d644:	005b      	lsls	r3, r3, #1
 801d646:	b2da      	uxtb	r2, r3
 801d648:	7bfb      	ldrb	r3, [r7, #15]
 801d64a:	4413      	add	r3, r2
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	3b10      	subs	r3, #16
 801d650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    default_payload_len = (task[5] - '0') * 100 + (task[6] - '0') * 10 + task[7] - '0';
 801d654:	7c7b      	ldrb	r3, [r7, #17]
 801d656:	461a      	mov	r2, r3
 801d658:	0092      	lsls	r2, r2, #2
 801d65a:	4413      	add	r3, r2
 801d65c:	461a      	mov	r2, r3
 801d65e:	0091      	lsls	r1, r2, #2
 801d660:	461a      	mov	r2, r3
 801d662:	460b      	mov	r3, r1
 801d664:	4413      	add	r3, r2
 801d666:	009b      	lsls	r3, r3, #2
 801d668:	b2da      	uxtb	r2, r3
 801d66a:	7cbb      	ldrb	r3, [r7, #18]
 801d66c:	4619      	mov	r1, r3
 801d66e:	0089      	lsls	r1, r1, #2
 801d670:	440b      	add	r3, r1
 801d672:	005b      	lsls	r3, r3, #1
 801d674:	b2db      	uxtb	r3, r3
 801d676:	4413      	add	r3, r2
 801d678:	b2da      	uxtb	r2, r3
 801d67a:	7cfb      	ldrb	r3, [r7, #19]
 801d67c:	4413      	add	r3, r2
 801d67e:	b2db      	uxtb	r3, r3
 801d680:	3330      	adds	r3, #48	; 0x30
 801d682:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    default_generate_size = (task[9] - '0') * 100 + (task[10] - '0') * 10 + task[11] - '0';
 801d686:	7d7b      	ldrb	r3, [r7, #21]
 801d688:	461a      	mov	r2, r3
 801d68a:	0092      	lsls	r2, r2, #2
 801d68c:	4413      	add	r3, r2
 801d68e:	461a      	mov	r2, r3
 801d690:	0091      	lsls	r1, r2, #2
 801d692:	461a      	mov	r2, r3
 801d694:	460b      	mov	r3, r1
 801d696:	4413      	add	r3, r2
 801d698:	009b      	lsls	r3, r3, #2
 801d69a:	b2da      	uxtb	r2, r3
 801d69c:	7dbb      	ldrb	r3, [r7, #22]
 801d69e:	4619      	mov	r1, r3
 801d6a0:	0089      	lsls	r1, r1, #2
 801d6a2:	440b      	add	r3, r1
 801d6a4:	005b      	lsls	r3, r3, #1
 801d6a6:	b2db      	uxtb	r3, r3
 801d6a8:	4413      	add	r3, r2
 801d6aa:	b2da      	uxtb	r2, r3
 801d6ac:	7dfb      	ldrb	r3, [r7, #23]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	b2db      	uxtb	r3, r3
 801d6b2:	3330      	adds	r3, #48	; 0x30
 801d6b4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    default_slot_num = (task[13] - '0') * 1000 + (task[14] - '0') * 100 + (task[15] - '0') * 10 + (task[16] - '0');
 801d6b8:	7e7b      	ldrb	r3, [r7, #25]
 801d6ba:	3b30      	subs	r3, #48	; 0x30
 801d6bc:	b29b      	uxth	r3, r3
 801d6be:	461a      	mov	r2, r3
 801d6c0:	0152      	lsls	r2, r2, #5
 801d6c2:	1ad2      	subs	r2, r2, r3
 801d6c4:	0092      	lsls	r2, r2, #2
 801d6c6:	4413      	add	r3, r2
 801d6c8:	00db      	lsls	r3, r3, #3
 801d6ca:	b29a      	uxth	r2, r3
 801d6cc:	7ebb      	ldrb	r3, [r7, #26]
 801d6ce:	3b30      	subs	r3, #48	; 0x30
 801d6d0:	b29b      	uxth	r3, r3
 801d6d2:	4619      	mov	r1, r3
 801d6d4:	0089      	lsls	r1, r1, #2
 801d6d6:	440b      	add	r3, r1
 801d6d8:	4619      	mov	r1, r3
 801d6da:	0088      	lsls	r0, r1, #2
 801d6dc:	4619      	mov	r1, r3
 801d6de:	4603      	mov	r3, r0
 801d6e0:	440b      	add	r3, r1
 801d6e2:	009b      	lsls	r3, r3, #2
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	4413      	add	r3, r2
 801d6e8:	b29a      	uxth	r2, r3
 801d6ea:	7efb      	ldrb	r3, [r7, #27]
 801d6ec:	3b30      	subs	r3, #48	; 0x30
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	4619      	mov	r1, r3
 801d6f2:	0089      	lsls	r1, r1, #2
 801d6f4:	440b      	add	r3, r1
 801d6f6:	005b      	lsls	r3, r3, #1
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	4413      	add	r3, r2
 801d6fc:	b29a      	uxth	r2, r3
 801d6fe:	7f3b      	ldrb	r3, [r7, #28]
 801d700:	b29b      	uxth	r3, r3
 801d702:	4413      	add	r3, r2
 801d704:	b29b      	uxth	r3, r3
 801d706:	3b30      	subs	r3, #48	; 0x30
 801d708:	87fb      	strh	r3, [r7, #62]	; 0x3e
    dissem_back_sf = (task[18] - '0') * 10 + task[19] - '0';
 801d70a:	7fbb      	ldrb	r3, [r7, #30]
 801d70c:	461a      	mov	r2, r3
 801d70e:	0092      	lsls	r2, r2, #2
 801d710:	4413      	add	r3, r2
 801d712:	005b      	lsls	r3, r3, #1
 801d714:	b2da      	uxtb	r2, r3
 801d716:	7ffb      	ldrb	r3, [r7, #31]
 801d718:	4413      	add	r3, r2
 801d71a:	b2db      	uxtb	r3, r3
 801d71c:	3b10      	subs	r3, #16
 801d71e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    dissem_back_slot_num = (task[21] - '0') * 100 + (task[22] - '0') * 10 + task[23] - '0';
 801d722:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d726:	461a      	mov	r2, r3
 801d728:	0092      	lsls	r2, r2, #2
 801d72a:	4413      	add	r3, r2
 801d72c:	461a      	mov	r2, r3
 801d72e:	0091      	lsls	r1, r2, #2
 801d730:	461a      	mov	r2, r3
 801d732:	460b      	mov	r3, r1
 801d734:	4413      	add	r3, r2
 801d736:	009b      	lsls	r3, r3, #2
 801d738:	b2da      	uxtb	r2, r3
 801d73a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d73e:	4619      	mov	r1, r3
 801d740:	0089      	lsls	r1, r1, #2
 801d742:	440b      	add	r3, r1
 801d744:	005b      	lsls	r3, r3, #1
 801d746:	b2db      	uxtb	r3, r3
 801d748:	4413      	add	r3, r2
 801d74a:	b2da      	uxtb	r2, r3
 801d74c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d750:	4413      	add	r3, r2
 801d752:	b2db      	uxtb	r3, r3
 801d754:	3330      	adds	r3, #48	; 0x30
 801d756:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    default_tp = (task[25] - '0') * 10 + (task[26] - '0');
 801d75a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801d75e:	3b30      	subs	r3, #48	; 0x30
 801d760:	b2db      	uxtb	r3, r3
 801d762:	461a      	mov	r2, r3
 801d764:	0092      	lsls	r2, r2, #2
 801d766:	4413      	add	r3, r2
 801d768:	005b      	lsls	r3, r3, #1
 801d76a:	b2da      	uxtb	r2, r3
 801d76c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d770:	4413      	add	r3, r2
 801d772:	b2db      	uxtb	r3, r3
 801d774:	3b30      	subs	r3, #48	; 0x30
 801d776:	b2db      	uxtb	r3, r3
 801d778:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t i, data;
    memset((uint32_t *)&(chirp_outl->firmware_bitmap[0]), 0, DISSEM_BITMAP_32 * sizeof(uint32_t));
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	3318      	adds	r3, #24
 801d780:	2204      	movs	r2, #4
 801d782:	2100      	movs	r1, #0
 801d784:	4618      	mov	r0, r3
 801d786:	f003 ff00 	bl	802158a <memset>
    memset((uint32_t *)&(chirp_outl->task_bitmap[0]), 0, DISSEM_BITMAP_32 * sizeof(uint32_t));
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	331c      	adds	r3, #28
 801d78e:	2204      	movs	r2, #4
 801d790:	2100      	movs	r1, #0
 801d792:	4618      	mov	r0, r3
 801d794:	f003 fef9 	bl	802158a <memset>
    for (i = 28; i < 28 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801d798:	231c      	movs	r3, #28
 801d79a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801d79e:	e062      	b.n	801d866 <menu_wait_task+0x2f6>
    {
      data = task[i];
 801d7a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d7a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d7a8:	4413      	add	r3, r2
 801d7aa:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801d7ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      if ((data >= '0') && (data <= '9'))
 801d7b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d7b6:	2b2f      	cmp	r3, #47	; 0x2f
 801d7b8:	d909      	bls.n	801d7ce <menu_wait_task+0x25e>
 801d7ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d7be:	2b39      	cmp	r3, #57	; 0x39
 801d7c0:	d805      	bhi.n	801d7ce <menu_wait_task+0x25e>
        data = data - '0';
 801d7c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d7c6:	3b30      	subs	r3, #48	; 0x30
 801d7c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801d7cc:	e004      	b.n	801d7d8 <menu_wait_task+0x268>
      else
        data = 10 + data - 'A';
 801d7ce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d7d2:	3b37      	subs	r3, #55	; 0x37
 801d7d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      chirp_outl->firmware_bitmap[(i - 28) / 8] += data * pow(0x10, sizeof(uint32_t) * 2 - 1 - ((i - 28) % (sizeof(uint32_t) * 2)));
 801d7d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f7e2 feab 	bl	8000538 <__aeabi_i2d>
 801d7e2:	4604      	mov	r4, r0
 801d7e4:	460d      	mov	r5, r1
 801d7e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d7ea:	3b1c      	subs	r3, #28
 801d7ec:	43db      	mvns	r3, r3
 801d7ee:	f003 0307 	and.w	r3, r3, #7
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7e2 fe90 	bl	8000518 <__aeabi_ui2d>
 801d7f8:	4602      	mov	r2, r0
 801d7fa:	460b      	mov	r3, r1
 801d7fc:	ec43 2b11 	vmov	d1, r2, r3
 801d800:	ed9f 0b29 	vldr	d0, [pc, #164]	; 801d8a8 <menu_wait_task+0x338>
 801d804:	f006 fb88 	bl	8023f18 <pow>
 801d808:	ec53 2b10 	vmov	r2, r3, d0
 801d80c:	4620      	mov	r0, r4
 801d80e:	4629      	mov	r1, r5
 801d810:	f7e2 fefc 	bl	800060c <__aeabi_dmul>
 801d814:	4603      	mov	r3, r0
 801d816:	460c      	mov	r4, r1
 801d818:	461d      	mov	r5, r3
 801d81a:	4626      	mov	r6, r4
 801d81c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d820:	3b1c      	subs	r3, #28
 801d822:	2b00      	cmp	r3, #0
 801d824:	da00      	bge.n	801d828 <menu_wait_task+0x2b8>
 801d826:	3307      	adds	r3, #7
 801d828:	10db      	asrs	r3, r3, #3
 801d82a:	461c      	mov	r4, r3
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	1da2      	adds	r2, r4, #6
 801d830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d834:	4618      	mov	r0, r3
 801d836:	f7e2 fe6f 	bl	8000518 <__aeabi_ui2d>
 801d83a:	4602      	mov	r2, r0
 801d83c:	460b      	mov	r3, r1
 801d83e:	4628      	mov	r0, r5
 801d840:	4631      	mov	r1, r6
 801d842:	f7e2 fd2d 	bl	80002a0 <__adddf3>
 801d846:	4602      	mov	r2, r0
 801d848:	460b      	mov	r3, r1
 801d84a:	4610      	mov	r0, r2
 801d84c:	4619      	mov	r1, r3
 801d84e:	f7e3 f9b5 	bl	8000bbc <__aeabi_d2uiz>
 801d852:	4601      	mov	r1, r0
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	1da2      	adds	r2, r4, #6
 801d858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 28; i < 28 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801d85c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d860:	3301      	adds	r3, #1
 801d862:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801d866:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d86a:	2b23      	cmp	r3, #35	; 0x23
 801d86c:	d998      	bls.n	801d7a0 <menu_wait_task+0x230>
    }
    for (i = 37; i < 37 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801d86e:	2325      	movs	r3, #37	; 0x25
 801d870:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801d874:	e072      	b.n	801d95c <menu_wait_task+0x3ec>
    {
      data = task[i];
 801d876:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d87a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d87e:	4413      	add	r3, r2
 801d880:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801d884:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      if ((data >= '0') && (data <= '9'))
 801d888:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d88c:	2b2f      	cmp	r3, #47	; 0x2f
 801d88e:	d917      	bls.n	801d8c0 <menu_wait_task+0x350>
 801d890:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d894:	2b39      	cmp	r3, #57	; 0x39
 801d896:	d813      	bhi.n	801d8c0 <menu_wait_task+0x350>
        data = data - '0';
 801d898:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d89c:	3b30      	subs	r3, #48	; 0x30
 801d89e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801d8a2:	e012      	b.n	801d8ca <menu_wait_task+0x35a>
 801d8a4:	f3af 8000 	nop.w
 801d8a8:	00000000 	.word	0x00000000
 801d8ac:	40300000 	.word	0x40300000
 801d8b0:	08026358 	.word	0x08026358
 801d8b4:	e000e010 	.word	0xe000e010
 801d8b8:	2000134c 	.word	0x2000134c
 801d8bc:	080263d0 	.word	0x080263d0
      else
        data = 10 + data - 'A';
 801d8c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d8c4:	3b37      	subs	r3, #55	; 0x37
 801d8c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      chirp_outl->task_bitmap[(i - 37) / 8] += data * pow(0x10, sizeof(uint32_t) * 2 - 1 - ((i - 37) % (sizeof(uint32_t) * 2)));
 801d8ca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7e2 fe32 	bl	8000538 <__aeabi_i2d>
 801d8d4:	4604      	mov	r4, r0
 801d8d6:	460d      	mov	r5, r1
 801d8d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d8dc:	3b25      	subs	r3, #37	; 0x25
 801d8de:	43db      	mvns	r3, r3
 801d8e0:	f003 0307 	and.w	r3, r3, #7
 801d8e4:	4618      	mov	r0, r3
 801d8e6:	f7e2 fe17 	bl	8000518 <__aeabi_ui2d>
 801d8ea:	4602      	mov	r2, r0
 801d8ec:	460b      	mov	r3, r1
 801d8ee:	ec43 2b11 	vmov	d1, r2, r3
 801d8f2:	ed9f 0b65 	vldr	d0, [pc, #404]	; 801da88 <menu_wait_task+0x518>
 801d8f6:	f006 fb0f 	bl	8023f18 <pow>
 801d8fa:	ec53 2b10 	vmov	r2, r3, d0
 801d8fe:	4620      	mov	r0, r4
 801d900:	4629      	mov	r1, r5
 801d902:	f7e2 fe83 	bl	800060c <__aeabi_dmul>
 801d906:	4603      	mov	r3, r0
 801d908:	460c      	mov	r4, r1
 801d90a:	461d      	mov	r5, r3
 801d90c:	4626      	mov	r6, r4
 801d90e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d912:	3b25      	subs	r3, #37	; 0x25
 801d914:	2b00      	cmp	r3, #0
 801d916:	da00      	bge.n	801d91a <menu_wait_task+0x3aa>
 801d918:	3307      	adds	r3, #7
 801d91a:	10db      	asrs	r3, r3, #3
 801d91c:	461c      	mov	r4, r3
 801d91e:	687a      	ldr	r2, [r7, #4]
 801d920:	1da3      	adds	r3, r4, #6
 801d922:	009b      	lsls	r3, r3, #2
 801d924:	4413      	add	r3, r2
 801d926:	685b      	ldr	r3, [r3, #4]
 801d928:	4618      	mov	r0, r3
 801d92a:	f7e2 fdf5 	bl	8000518 <__aeabi_ui2d>
 801d92e:	4602      	mov	r2, r0
 801d930:	460b      	mov	r3, r1
 801d932:	4628      	mov	r0, r5
 801d934:	4631      	mov	r1, r6
 801d936:	f7e2 fcb3 	bl	80002a0 <__adddf3>
 801d93a:	4602      	mov	r2, r0
 801d93c:	460b      	mov	r3, r1
 801d93e:	4610      	mov	r0, r2
 801d940:	4619      	mov	r1, r3
 801d942:	f7e3 f93b 	bl	8000bbc <__aeabi_d2uiz>
 801d946:	4601      	mov	r1, r0
 801d948:	687a      	ldr	r2, [r7, #4]
 801d94a:	1da3      	adds	r3, r4, #6
 801d94c:	009b      	lsls	r3, r3, #2
 801d94e:	4413      	add	r3, r2
 801d950:	6059      	str	r1, [r3, #4]
    for (i = 37; i < 37 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801d952:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d956:	3301      	adds	r3, #1
 801d958:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801d95c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801d960:	2b2c      	cmp	r3, #44	; 0x2c
 801d962:	d988      	bls.n	801d876 <menu_wait_task+0x306>
    }
  } while ((mx_task > MX_TASK_LAST) || (mx_task < MX_TASK_FIRST));
 801d964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801d968:	2b05      	cmp	r3, #5
 801d96a:	f63f ae1a 	bhi.w	801d5a2 <menu_wait_task+0x32>

  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801d96e:	4b48      	ldr	r3, [pc, #288]	; (801da90 <menu_wait_task+0x520>)
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	4a47      	ldr	r2, [pc, #284]	; (801da90 <menu_wait_task+0x520>)
 801d974:	f023 0302 	bic.w	r3, r3, #2
 801d978:	6013      	str	r3, [r2, #0]

  PRINTF("Select: ");
 801d97a:	4846      	ldr	r0, [pc, #280]	; (801da94 <menu_wait_task+0x524>)
 801d97c:	f004 fc12 	bl	80221a4 <iprintf>

  chirp_outl->arrange_task = (Mixer_Task )mx_task;
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801d986:	719a      	strb	r2, [r3, #6]
  chirp_outl->default_sf = default_sf;
 801d988:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	f8c3 200d 	str.w	r2, [r3, #13]
  chirp_outl->default_tp = default_tp;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801d998:	755a      	strb	r2, [r3, #21]
  chirp_outl->default_payload_len = default_payload_len;
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801d9a0:	759a      	strb	r2, [r3, #22]
  chirp_outl->default_generate_size = default_generate_size;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801d9a8:	75da      	strb	r2, [r3, #23]
  chirp_outl->default_slot_num = default_slot_num;
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d9ae:	f8a3 200b 	strh.w	r2, [r3, #11]
  chirp_outl->dissem_back_sf = dissem_back_sf;
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 801d9b8:	f883 2020 	strb.w	r2, [r3, #32]
  chirp_outl->dissem_back_slot_num = dissem_back_slot_num;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801d9c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  PRINTF("default sf:%lu, %d, %d, %d, %d, %d, %d, %02x, %02x\n", chirp_outl->default_sf, chirp_outl->default_tp, chirp_outl->default_payload_len, chirp_outl->default_generate_size, chirp_outl->default_slot_num, chirp_outl->dissem_back_sf, chirp_outl->dissem_back_slot_num, chirp_outl->firmware_bitmap[0], chirp_outl->task_bitmap[0]);
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	f8d3 100d 	ldr.w	r1, [r3, #13]
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801d9d2:	469c      	mov	ip, r3
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	7d9b      	ldrb	r3, [r3, #22]
 801d9d8:	469e      	mov	lr, r3
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	7ddb      	ldrb	r3, [r3, #23]
 801d9de:	4618      	mov	r0, r3
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801d9e6:	b29b      	uxth	r3, r3
 801d9e8:	461c      	mov	r4, r3
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 801d9f0:	461d      	mov	r5, r3
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d9f8:	461e      	mov	r6, r3
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	699b      	ldr	r3, [r3, #24]
 801d9fe:	687a      	ldr	r2, [r7, #4]
 801da00:	69d2      	ldr	r2, [r2, #28]
 801da02:	9205      	str	r2, [sp, #20]
 801da04:	9304      	str	r3, [sp, #16]
 801da06:	9603      	str	r6, [sp, #12]
 801da08:	9502      	str	r5, [sp, #8]
 801da0a:	9401      	str	r4, [sp, #4]
 801da0c:	9000      	str	r0, [sp, #0]
 801da0e:	4673      	mov	r3, lr
 801da10:	4662      	mov	r2, ip
 801da12:	4821      	ldr	r0, [pc, #132]	; (801da98 <menu_wait_task+0x528>)
 801da14:	f004 fbc6 	bl	80221a4 <iprintf>
  switch (mx_task)
 801da18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801da1c:	2b05      	cmp	r3, #5
 801da1e:	d827      	bhi.n	801da70 <menu_wait_task+0x500>
 801da20:	a201      	add	r2, pc, #4	; (adr r2, 801da28 <menu_wait_task+0x4b8>)
 801da22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da26:	bf00      	nop
 801da28:	0801da41 	.word	0x0801da41
 801da2c:	0801da49 	.word	0x0801da49
 801da30:	0801da51 	.word	0x0801da51
 801da34:	0801da59 	.word	0x0801da59
 801da38:	0801da61 	.word	0x0801da61
 801da3c:	0801da69 	.word	0x0801da69
  {
    case CHIRP_START:
    {
      PRINTF("CHIRP_START\n");
 801da40:	4816      	ldr	r0, [pc, #88]	; (801da9c <menu_wait_task+0x52c>)
 801da42:	f004 fc37 	bl	80222b4 <puts>
      break;
 801da46:	e017      	b.n	801da78 <menu_wait_task+0x508>
    }
    case MX_DISSEMINATE:
    {
      PRINTF("MX_DISSEMINATE\n");
 801da48:	4815      	ldr	r0, [pc, #84]	; (801daa0 <menu_wait_task+0x530>)
 801da4a:	f004 fc33 	bl	80222b4 <puts>
      break;
 801da4e:	e013      	b.n	801da78 <menu_wait_task+0x508>
    }
    case MX_COLLECT:
    {
      PRINTF("MX_COLLECT\n");
 801da50:	4814      	ldr	r0, [pc, #80]	; (801daa4 <menu_wait_task+0x534>)
 801da52:	f004 fc2f 	bl	80222b4 <puts>
      break;
 801da56:	e00f      	b.n	801da78 <menu_wait_task+0x508>
    }
    case CHIRP_CONNECTIVITY:
    {
      PRINTF("CHIRP_CONNECTIVITY\n");
 801da58:	4813      	ldr	r0, [pc, #76]	; (801daa8 <menu_wait_task+0x538>)
 801da5a:	f004 fc2b 	bl	80222b4 <puts>
      break;
 801da5e:	e00b      	b.n	801da78 <menu_wait_task+0x508>
    }
    case CHIRP_TOPO:
    {
      PRINTF("CHIRP_TOPO\n");
 801da60:	4812      	ldr	r0, [pc, #72]	; (801daac <menu_wait_task+0x53c>)
 801da62:	f004 fc27 	bl	80222b4 <puts>
      break;
 801da66:	e007      	b.n	801da78 <menu_wait_task+0x508>
    }
    case CHIRP_VERSION:
    {
      PRINTF("CHIRP_VERSION\n");
 801da68:	4811      	ldr	r0, [pc, #68]	; (801dab0 <menu_wait_task+0x540>)
 801da6a:	f004 fc23 	bl	80222b4 <puts>
      break;
 801da6e:	e003      	b.n	801da78 <menu_wait_task+0x508>
    }
    default:
      PRINTF("WRONG TASK\n");
 801da70:	4810      	ldr	r0, [pc, #64]	; (801dab4 <menu_wait_task+0x544>)
 801da72:	f004 fc1f 	bl	80222b4 <puts>
      break;
 801da76:	bf00      	nop
  }
  return 1;
 801da78:	2301      	movs	r3, #1
}
 801da7a:	4618      	mov	r0, r3
 801da7c:	374c      	adds	r7, #76	; 0x4c
 801da7e:	46bd      	mov	sp, r7
 801da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da82:	bf00      	nop
 801da84:	f3af 8000 	nop.w
 801da88:	00000000 	.word	0x00000000
 801da8c:	40300000 	.word	0x40300000
 801da90:	e000e010 	.word	0xe000e010
 801da94:	080263e8 	.word	0x080263e8
 801da98:	080263f4 	.word	0x080263f4
 801da9c:	08026428 	.word	0x08026428
 801daa0:	08026434 	.word	0x08026434
 801daa4:	08026444 	.word	0x08026444
 801daa8:	08026450 	.word	0x08026450
 801daac:	08026464 	.word	0x08026464
 801dab0:	08026470 	.word	0x08026470
 801dab4:	08026480 	.word	0x08026480

0801dab8 <chirp_controller_read_command>:
  * @brief  Controller node waits for task parameters
  * @param  chirp_outl: config outline, related to each task
  * @retval none
  */
void chirp_controller_read_command(Chirp_Outl *chirp_outl)
{
 801dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dabc:	b096      	sub	sp, #88	; 0x58
 801dabe:	af0c      	add	r7, sp, #48	; 0x30
 801dac0:	6178      	str	r0, [r7, #20]
  uint8_t rxbuffer_len;
  uint8_t k = 0;
 801dac2:	2300      	movs	r3, #0
 801dac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t i, data;
  uint8_t pow_num;

  switch (chirp_outl->arrange_task)
 801dac8:	697b      	ldr	r3, [r7, #20]
 801daca:	799b      	ldrb	r3, [r3, #6]
 801dacc:	2b03      	cmp	r3, #3
 801dace:	d81b      	bhi.n	801db08 <chirp_controller_read_command+0x50>
 801dad0:	a201      	add	r2, pc, #4	; (adr r2, 801dad8 <chirp_controller_read_command+0x20>)
 801dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dad6:	bf00      	nop
 801dad8:	0801dae9 	.word	0x0801dae9
 801dadc:	0801daf1 	.word	0x0801daf1
 801dae0:	0801daf9 	.word	0x0801daf9
 801dae4:	0801db01 	.word	0x0801db01
  {
      case CHIRP_START:
      {
          rxbuffer_len = 46;
 801dae8:	232e      	movs	r3, #46	; 0x2e
 801daea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801daee:	e00c      	b.n	801db0a <chirp_controller_read_command+0x52>
      }
      case MX_DISSEMINATE:
      {
          rxbuffer_len = 55;
 801daf0:	2337      	movs	r3, #55	; 0x37
 801daf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801daf6:	e008      	b.n	801db0a <chirp_controller_read_command+0x52>
      }
      case MX_COLLECT:
      {
          rxbuffer_len = 17;
 801daf8:	2311      	movs	r3, #17
 801dafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801dafe:	e004      	b.n	801db0a <chirp_controller_read_command+0x52>
      }
      case CHIRP_CONNECTIVITY:
      {
          rxbuffer_len = 17;
 801db00:	2311      	movs	r3, #17
 801db02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801db06:	e000      	b.n	801db0a <chirp_controller_read_command+0x52>
      }
      default:
          break;
 801db08:	bf00      	nop
  }

  uart_read_data(0, rxbuffer_len);
 801db0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db0e:	4619      	mov	r1, r3
 801db10:	2000      	movs	r0, #0
 801db12:	f7f4 fed3 	bl	80128bc <uart_read_data>
  PRINTF("\nWaiting for parameter(s)...\n");
 801db16:	48d4      	ldr	r0, [pc, #848]	; (801de68 <chirp_controller_read_command+0x3b0>)
 801db18:	f004 fbcc 	bl	80222b4 <puts>

  while(!uart_read_done);
 801db1c:	bf00      	nop
 801db1e:	4bd3      	ldr	r3, [pc, #844]	; (801de6c <chirp_controller_read_command+0x3b4>)
 801db20:	781b      	ldrb	r3, [r3, #0]
 801db22:	b2db      	uxtb	r3, r3
 801db24:	2b00      	cmp	r3, #0
 801db26:	d0fa      	beq.n	801db1e <chirp_controller_read_command+0x66>

  uint8_t *command_buffer = (uint8_t *)malloc(rxbuffer_len);
 801db28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db2c:	4618      	mov	r0, r3
 801db2e:	f003 fd11 	bl	8021554 <malloc>
 801db32:	4603      	mov	r3, r0
 801db34:	61fb      	str	r3, [r7, #28]
  uart_read_command(command_buffer, rxbuffer_len);
 801db36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db3a:	4619      	mov	r1, r3
 801db3c:	69f8      	ldr	r0, [r7, #28]
 801db3e:	f7f4 fefd 	bl	801293c <uart_read_command>

  switch (chirp_outl->arrange_task)
 801db42:	697b      	ldr	r3, [r7, #20]
 801db44:	799b      	ldrb	r3, [r3, #6]
 801db46:	2b03      	cmp	r3, #3
 801db48:	f201 8141 	bhi.w	801edce <chirp_controller_read_command+0x1316>
 801db4c:	a201      	add	r2, pc, #4	; (adr r2, 801db54 <chirp_controller_read_command+0x9c>)
 801db4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db52:	bf00      	nop
 801db54:	0801db65 	.word	0x0801db65
 801db58:	0801e411 	.word	0x0801e411
 801db5c:	0801e93b 	.word	0x0801e93b
 801db60:	0801eaf7 	.word	0x0801eaf7
  {
      case CHIRP_START:
      {
        chirp_outl->version_hash = 0;
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	2200      	movs	r2, #0
 801db68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801db6c:	2200      	movs	r2, #0
 801db6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        // "2020,12,31,15,18,20,2020,12,31,16,18,20,0,6A75" 0: upgrade, 1: user, 6A75:version
        memset(&(chirp_outl->start_year), 0, offsetof(Chirp_Outl, flash_protection) - offsetof(Chirp_Outl, start_year));
 801db72:	697b      	ldr	r3, [r7, #20]
 801db74:	3328      	adds	r3, #40	; 0x28
 801db76:	220e      	movs	r2, #14
 801db78:	2100      	movs	r1, #0
 801db7a:	4618      	mov	r0, r3
 801db7c:	f003 fd05 	bl	802158a <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801db80:	2300      	movs	r3, #0
 801db82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801db86:	e3ec      	b.n	801e362 <chirp_controller_read_command+0x8aa>
        {
          data = (uint8_t)command_buffer[k++];
 801db88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db8c:	1c5a      	adds	r2, r3, #1
 801db8e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801db92:	461a      	mov	r2, r3
 801db94:	69fb      	ldr	r3, [r7, #28]
 801db96:	4413      	add	r3, r2
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801db9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dba2:	2b2f      	cmp	r3, #47	; 0x2f
 801dba4:	d903      	bls.n	801dbae <chirp_controller_read_command+0xf6>
 801dba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbaa:	2b39      	cmp	r3, #57	; 0x39
 801dbac:	d909      	bls.n	801dbc2 <chirp_controller_read_command+0x10a>
 801dbae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbb2:	2b40      	cmp	r3, #64	; 0x40
 801dbb4:	f240 83d0 	bls.w	801e358 <chirp_controller_read_command+0x8a0>
 801dbb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbbc:	2b46      	cmp	r3, #70	; 0x46
 801dbbe:	f200 83cb 	bhi.w	801e358 <chirp_controller_read_command+0x8a0>
          {
            if (i < 4)
 801dbc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dbc6:	2b03      	cmp	r3, #3
 801dbc8:	d83d      	bhi.n	801dc46 <chirp_controller_read_command+0x18e>
            {
              data =  data - '0';
 801dbca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbce:	3b30      	subs	r3, #48	; 0x30
 801dbd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 3;
 801dbd4:	2303      	movs	r3, #3
 801dbd6:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_year += data * pow(10,(pow_num-i));
 801dbd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f7e2 fcab 	bl	8000538 <__aeabi_i2d>
 801dbe2:	4604      	mov	r4, r0
 801dbe4:	460d      	mov	r5, r1
 801dbe6:	7efa      	ldrb	r2, [r7, #27]
 801dbe8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dbec:	1ad3      	subs	r3, r2, r3
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7e2 fca2 	bl	8000538 <__aeabi_i2d>
 801dbf4:	4602      	mov	r2, r0
 801dbf6:	460b      	mov	r3, r1
 801dbf8:	ec43 2b11 	vmov	d1, r2, r3
 801dbfc:	ed9f 0b98 	vldr	d0, [pc, #608]	; 801de60 <chirp_controller_read_command+0x3a8>
 801dc00:	f006 f98a 	bl	8023f18 <pow>
 801dc04:	ec53 2b10 	vmov	r2, r3, d0
 801dc08:	4620      	mov	r0, r4
 801dc0a:	4629      	mov	r1, r5
 801dc0c:	f7e2 fcfe 	bl	800060c <__aeabi_dmul>
 801dc10:	4603      	mov	r3, r0
 801dc12:	460c      	mov	r4, r1
 801dc14:	4625      	mov	r5, r4
 801dc16:	461c      	mov	r4, r3
 801dc18:	697b      	ldr	r3, [r7, #20]
 801dc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dc1c:	b29b      	uxth	r3, r3
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7e2 fc8a 	bl	8000538 <__aeabi_i2d>
 801dc24:	4602      	mov	r2, r0
 801dc26:	460b      	mov	r3, r1
 801dc28:	4620      	mov	r0, r4
 801dc2a:	4629      	mov	r1, r5
 801dc2c:	f7e2 fb38 	bl	80002a0 <__adddf3>
 801dc30:	4603      	mov	r3, r0
 801dc32:	460c      	mov	r4, r1
 801dc34:	4618      	mov	r0, r3
 801dc36:	4621      	mov	r1, r4
 801dc38:	f7e2 ffc0 	bl	8000bbc <__aeabi_d2uiz>
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	b29a      	uxth	r2, r3
 801dc40:	697b      	ldr	r3, [r7, #20]
 801dc42:	851a      	strh	r2, [r3, #40]	; 0x28
 801dc44:	e388      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 7)
 801dc46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dc4a:	2b06      	cmp	r3, #6
 801dc4c:	d83e      	bhi.n	801dccc <chirp_controller_read_command+0x214>
            {
              data =  data - '0';
 801dc4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dc52:	3b30      	subs	r3, #48	; 0x30
 801dc54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 6;
 801dc58:	2306      	movs	r3, #6
 801dc5a:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_month += data * pow(10,(pow_num-i));
 801dc5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dc60:	4618      	mov	r0, r3
 801dc62:	f7e2 fc69 	bl	8000538 <__aeabi_i2d>
 801dc66:	4604      	mov	r4, r0
 801dc68:	460d      	mov	r5, r1
 801dc6a:	7efa      	ldrb	r2, [r7, #27]
 801dc6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dc70:	1ad3      	subs	r3, r2, r3
 801dc72:	4618      	mov	r0, r3
 801dc74:	f7e2 fc60 	bl	8000538 <__aeabi_i2d>
 801dc78:	4602      	mov	r2, r0
 801dc7a:	460b      	mov	r3, r1
 801dc7c:	ec43 2b11 	vmov	d1, r2, r3
 801dc80:	ed9f 0b77 	vldr	d0, [pc, #476]	; 801de60 <chirp_controller_read_command+0x3a8>
 801dc84:	f006 f948 	bl	8023f18 <pow>
 801dc88:	ec53 2b10 	vmov	r2, r3, d0
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	4629      	mov	r1, r5
 801dc90:	f7e2 fcbc 	bl	800060c <__aeabi_dmul>
 801dc94:	4603      	mov	r3, r0
 801dc96:	460c      	mov	r4, r1
 801dc98:	4625      	mov	r5, r4
 801dc9a:	461c      	mov	r4, r3
 801dc9c:	697b      	ldr	r3, [r7, #20]
 801dc9e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7e2 fc48 	bl	8000538 <__aeabi_i2d>
 801dca8:	4602      	mov	r2, r0
 801dcaa:	460b      	mov	r3, r1
 801dcac:	4620      	mov	r0, r4
 801dcae:	4629      	mov	r1, r5
 801dcb0:	f7e2 faf6 	bl	80002a0 <__adddf3>
 801dcb4:	4603      	mov	r3, r0
 801dcb6:	460c      	mov	r4, r1
 801dcb8:	4618      	mov	r0, r3
 801dcba:	4621      	mov	r1, r4
 801dcbc:	f7e2 ff7e 	bl	8000bbc <__aeabi_d2uiz>
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	b2da      	uxtb	r2, r3
 801dcc4:	697b      	ldr	r3, [r7, #20]
 801dcc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 801dcca:	e345      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 10)
 801dccc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dcd0:	2b09      	cmp	r3, #9
 801dcd2:	d83e      	bhi.n	801dd52 <chirp_controller_read_command+0x29a>
            {
              data =  data - '0';
 801dcd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dcd8:	3b30      	subs	r3, #48	; 0x30
 801dcda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 9;
 801dcde:	2309      	movs	r3, #9
 801dce0:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_date += data * pow(10,(pow_num-i));
 801dce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dce6:	4618      	mov	r0, r3
 801dce8:	f7e2 fc26 	bl	8000538 <__aeabi_i2d>
 801dcec:	4604      	mov	r4, r0
 801dcee:	460d      	mov	r5, r1
 801dcf0:	7efa      	ldrb	r2, [r7, #27]
 801dcf2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dcf6:	1ad3      	subs	r3, r2, r3
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f7e2 fc1d 	bl	8000538 <__aeabi_i2d>
 801dcfe:	4602      	mov	r2, r0
 801dd00:	460b      	mov	r3, r1
 801dd02:	ec43 2b11 	vmov	d1, r2, r3
 801dd06:	ed9f 0b56 	vldr	d0, [pc, #344]	; 801de60 <chirp_controller_read_command+0x3a8>
 801dd0a:	f006 f905 	bl	8023f18 <pow>
 801dd0e:	ec53 2b10 	vmov	r2, r3, d0
 801dd12:	4620      	mov	r0, r4
 801dd14:	4629      	mov	r1, r5
 801dd16:	f7e2 fc79 	bl	800060c <__aeabi_dmul>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	460c      	mov	r4, r1
 801dd1e:	4625      	mov	r5, r4
 801dd20:	461c      	mov	r4, r3
 801dd22:	697b      	ldr	r3, [r7, #20]
 801dd24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7e2 fc05 	bl	8000538 <__aeabi_i2d>
 801dd2e:	4602      	mov	r2, r0
 801dd30:	460b      	mov	r3, r1
 801dd32:	4620      	mov	r0, r4
 801dd34:	4629      	mov	r1, r5
 801dd36:	f7e2 fab3 	bl	80002a0 <__adddf3>
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	460c      	mov	r4, r1
 801dd3e:	4618      	mov	r0, r3
 801dd40:	4621      	mov	r1, r4
 801dd42:	f7e2 ff3b 	bl	8000bbc <__aeabi_d2uiz>
 801dd46:	4603      	mov	r3, r0
 801dd48:	b2da      	uxtb	r2, r3
 801dd4a:	697b      	ldr	r3, [r7, #20]
 801dd4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 801dd50:	e302      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 13)
 801dd52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dd56:	2b0c      	cmp	r3, #12
 801dd58:	d83e      	bhi.n	801ddd8 <chirp_controller_read_command+0x320>
            {
              data =  data - '0';
 801dd5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dd5e:	3b30      	subs	r3, #48	; 0x30
 801dd60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 12;
 801dd64:	230c      	movs	r3, #12
 801dd66:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_hour += data * pow(10,(pow_num-i));
 801dd68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	f7e2 fbe3 	bl	8000538 <__aeabi_i2d>
 801dd72:	4604      	mov	r4, r0
 801dd74:	460d      	mov	r5, r1
 801dd76:	7efa      	ldrb	r2, [r7, #27]
 801dd78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dd7c:	1ad3      	subs	r3, r2, r3
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f7e2 fbda 	bl	8000538 <__aeabi_i2d>
 801dd84:	4602      	mov	r2, r0
 801dd86:	460b      	mov	r3, r1
 801dd88:	ec43 2b11 	vmov	d1, r2, r3
 801dd8c:	ed9f 0b34 	vldr	d0, [pc, #208]	; 801de60 <chirp_controller_read_command+0x3a8>
 801dd90:	f006 f8c2 	bl	8023f18 <pow>
 801dd94:	ec53 2b10 	vmov	r2, r3, d0
 801dd98:	4620      	mov	r0, r4
 801dd9a:	4629      	mov	r1, r5
 801dd9c:	f7e2 fc36 	bl	800060c <__aeabi_dmul>
 801dda0:	4603      	mov	r3, r0
 801dda2:	460c      	mov	r4, r1
 801dda4:	4625      	mov	r5, r4
 801dda6:	461c      	mov	r4, r3
 801dda8:	697b      	ldr	r3, [r7, #20]
 801ddaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7e2 fbc2 	bl	8000538 <__aeabi_i2d>
 801ddb4:	4602      	mov	r2, r0
 801ddb6:	460b      	mov	r3, r1
 801ddb8:	4620      	mov	r0, r4
 801ddba:	4629      	mov	r1, r5
 801ddbc:	f7e2 fa70 	bl	80002a0 <__adddf3>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	460c      	mov	r4, r1
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	4621      	mov	r1, r4
 801ddc8:	f7e2 fef8 	bl	8000bbc <__aeabi_d2uiz>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	b2da      	uxtb	r2, r3
 801ddd0:	697b      	ldr	r3, [r7, #20]
 801ddd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801ddd6:	e2bf      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 16)
 801ddd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dddc:	2b0f      	cmp	r3, #15
 801ddde:	d847      	bhi.n	801de70 <chirp_controller_read_command+0x3b8>
            {
              data =  data - '0';
 801dde0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dde4:	3b30      	subs	r3, #48	; 0x30
 801dde6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 15;
 801ddea:	230f      	movs	r3, #15
 801ddec:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_min += data * pow(10,(pow_num-i));
 801ddee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	f7e2 fba0 	bl	8000538 <__aeabi_i2d>
 801ddf8:	4604      	mov	r4, r0
 801ddfa:	460d      	mov	r5, r1
 801ddfc:	7efa      	ldrb	r2, [r7, #27]
 801ddfe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801de02:	1ad3      	subs	r3, r2, r3
 801de04:	4618      	mov	r0, r3
 801de06:	f7e2 fb97 	bl	8000538 <__aeabi_i2d>
 801de0a:	4602      	mov	r2, r0
 801de0c:	460b      	mov	r3, r1
 801de0e:	ec43 2b11 	vmov	d1, r2, r3
 801de12:	ed9f 0b13 	vldr	d0, [pc, #76]	; 801de60 <chirp_controller_read_command+0x3a8>
 801de16:	f006 f87f 	bl	8023f18 <pow>
 801de1a:	ec53 2b10 	vmov	r2, r3, d0
 801de1e:	4620      	mov	r0, r4
 801de20:	4629      	mov	r1, r5
 801de22:	f7e2 fbf3 	bl	800060c <__aeabi_dmul>
 801de26:	4603      	mov	r3, r0
 801de28:	460c      	mov	r4, r1
 801de2a:	4625      	mov	r5, r4
 801de2c:	461c      	mov	r4, r3
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801de34:	4618      	mov	r0, r3
 801de36:	f7e2 fb7f 	bl	8000538 <__aeabi_i2d>
 801de3a:	4602      	mov	r2, r0
 801de3c:	460b      	mov	r3, r1
 801de3e:	4620      	mov	r0, r4
 801de40:	4629      	mov	r1, r5
 801de42:	f7e2 fa2d 	bl	80002a0 <__adddf3>
 801de46:	4603      	mov	r3, r0
 801de48:	460c      	mov	r4, r1
 801de4a:	4618      	mov	r0, r3
 801de4c:	4621      	mov	r1, r4
 801de4e:	f7e2 feb5 	bl	8000bbc <__aeabi_d2uiz>
 801de52:	4603      	mov	r3, r0
 801de54:	b2da      	uxtb	r2, r3
 801de56:	697b      	ldr	r3, [r7, #20]
 801de58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801de5c:	e27c      	b.n	801e358 <chirp_controller_read_command+0x8a0>
 801de5e:	bf00      	nop
 801de60:	00000000 	.word	0x00000000
 801de64:	40240000 	.word	0x40240000
 801de68:	0802648c 	.word	0x0802648c
 801de6c:	200022d8 	.word	0x200022d8
            }
            else if (i < 19)
 801de70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801de74:	2b12      	cmp	r3, #18
 801de76:	d83e      	bhi.n	801def6 <chirp_controller_read_command+0x43e>
            {
              data =  data - '0';
 801de78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801de7c:	3b30      	subs	r3, #48	; 0x30
 801de7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 18;
 801de82:	2312      	movs	r3, #18
 801de84:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_sec += data * pow(10,(pow_num-i));
 801de86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801de8a:	4618      	mov	r0, r3
 801de8c:	f7e2 fb54 	bl	8000538 <__aeabi_i2d>
 801de90:	4604      	mov	r4, r0
 801de92:	460d      	mov	r5, r1
 801de94:	7efa      	ldrb	r2, [r7, #27]
 801de96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801de9a:	1ad3      	subs	r3, r2, r3
 801de9c:	4618      	mov	r0, r3
 801de9e:	f7e2 fb4b 	bl	8000538 <__aeabi_i2d>
 801dea2:	4602      	mov	r2, r0
 801dea4:	460b      	mov	r3, r1
 801dea6:	ec43 2b11 	vmov	d1, r2, r3
 801deaa:	ed9f 0bdd 	vldr	d0, [pc, #884]	; 801e220 <chirp_controller_read_command+0x768>
 801deae:	f006 f833 	bl	8023f18 <pow>
 801deb2:	ec53 2b10 	vmov	r2, r3, d0
 801deb6:	4620      	mov	r0, r4
 801deb8:	4629      	mov	r1, r5
 801deba:	f7e2 fba7 	bl	800060c <__aeabi_dmul>
 801debe:	4603      	mov	r3, r0
 801dec0:	460c      	mov	r4, r1
 801dec2:	4625      	mov	r5, r4
 801dec4:	461c      	mov	r4, r3
 801dec6:	697b      	ldr	r3, [r7, #20]
 801dec8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801decc:	4618      	mov	r0, r3
 801dece:	f7e2 fb33 	bl	8000538 <__aeabi_i2d>
 801ded2:	4602      	mov	r2, r0
 801ded4:	460b      	mov	r3, r1
 801ded6:	4620      	mov	r0, r4
 801ded8:	4629      	mov	r1, r5
 801deda:	f7e2 f9e1 	bl	80002a0 <__adddf3>
 801dede:	4603      	mov	r3, r0
 801dee0:	460c      	mov	r4, r1
 801dee2:	4618      	mov	r0, r3
 801dee4:	4621      	mov	r1, r4
 801dee6:	f7e2 fe69 	bl	8000bbc <__aeabi_d2uiz>
 801deea:	4603      	mov	r3, r0
 801deec:	b2da      	uxtb	r2, r3
 801deee:	697b      	ldr	r3, [r7, #20]
 801def0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 801def4:	e230      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 24)
 801def6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801defa:	2b17      	cmp	r3, #23
 801defc:	d83f      	bhi.n	801df7e <chirp_controller_read_command+0x4c6>
            {
              data =  data - '0';
 801defe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801df02:	3b30      	subs	r3, #48	; 0x30
 801df04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 23;
 801df08:	2317      	movs	r3, #23
 801df0a:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_year += data * pow(10,(pow_num-i));
 801df0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801df10:	4618      	mov	r0, r3
 801df12:	f7e2 fb11 	bl	8000538 <__aeabi_i2d>
 801df16:	4604      	mov	r4, r0
 801df18:	460d      	mov	r5, r1
 801df1a:	7efa      	ldrb	r2, [r7, #27]
 801df1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801df20:	1ad3      	subs	r3, r2, r3
 801df22:	4618      	mov	r0, r3
 801df24:	f7e2 fb08 	bl	8000538 <__aeabi_i2d>
 801df28:	4602      	mov	r2, r0
 801df2a:	460b      	mov	r3, r1
 801df2c:	ec43 2b11 	vmov	d1, r2, r3
 801df30:	ed9f 0bbb 	vldr	d0, [pc, #748]	; 801e220 <chirp_controller_read_command+0x768>
 801df34:	f005 fff0 	bl	8023f18 <pow>
 801df38:	ec53 2b10 	vmov	r2, r3, d0
 801df3c:	4620      	mov	r0, r4
 801df3e:	4629      	mov	r1, r5
 801df40:	f7e2 fb64 	bl	800060c <__aeabi_dmul>
 801df44:	4603      	mov	r3, r0
 801df46:	460c      	mov	r4, r1
 801df48:	4625      	mov	r5, r4
 801df4a:	461c      	mov	r4, r3
 801df4c:	697b      	ldr	r3, [r7, #20]
 801df4e:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801df52:	b29b      	uxth	r3, r3
 801df54:	4618      	mov	r0, r3
 801df56:	f7e2 faef 	bl	8000538 <__aeabi_i2d>
 801df5a:	4602      	mov	r2, r0
 801df5c:	460b      	mov	r3, r1
 801df5e:	4620      	mov	r0, r4
 801df60:	4629      	mov	r1, r5
 801df62:	f7e2 f99d 	bl	80002a0 <__adddf3>
 801df66:	4603      	mov	r3, r0
 801df68:	460c      	mov	r4, r1
 801df6a:	4618      	mov	r0, r3
 801df6c:	4621      	mov	r1, r4
 801df6e:	f7e2 fe25 	bl	8000bbc <__aeabi_d2uiz>
 801df72:	4603      	mov	r3, r0
 801df74:	b29a      	uxth	r2, r3
 801df76:	697b      	ldr	r3, [r7, #20]
 801df78:	f8a3 202f 	strh.w	r2, [r3, #47]	; 0x2f
 801df7c:	e1ec      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 27)
 801df7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801df82:	2b1a      	cmp	r3, #26
 801df84:	d83e      	bhi.n	801e004 <chirp_controller_read_command+0x54c>
            {
              data =  data - '0';
 801df86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801df8a:	3b30      	subs	r3, #48	; 0x30
 801df8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 26;
 801df90:	231a      	movs	r3, #26
 801df92:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_month += data * pow(10,(pow_num-i));
 801df94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801df98:	4618      	mov	r0, r3
 801df9a:	f7e2 facd 	bl	8000538 <__aeabi_i2d>
 801df9e:	4604      	mov	r4, r0
 801dfa0:	460d      	mov	r5, r1
 801dfa2:	7efa      	ldrb	r2, [r7, #27]
 801dfa4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dfa8:	1ad3      	subs	r3, r2, r3
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f7e2 fac4 	bl	8000538 <__aeabi_i2d>
 801dfb0:	4602      	mov	r2, r0
 801dfb2:	460b      	mov	r3, r1
 801dfb4:	ec43 2b11 	vmov	d1, r2, r3
 801dfb8:	ed9f 0b99 	vldr	d0, [pc, #612]	; 801e220 <chirp_controller_read_command+0x768>
 801dfbc:	f005 ffac 	bl	8023f18 <pow>
 801dfc0:	ec53 2b10 	vmov	r2, r3, d0
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	4629      	mov	r1, r5
 801dfc8:	f7e2 fb20 	bl	800060c <__aeabi_dmul>
 801dfcc:	4603      	mov	r3, r0
 801dfce:	460c      	mov	r4, r1
 801dfd0:	4625      	mov	r5, r4
 801dfd2:	461c      	mov	r4, r3
 801dfd4:	697b      	ldr	r3, [r7, #20]
 801dfd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dfda:	4618      	mov	r0, r3
 801dfdc:	f7e2 faac 	bl	8000538 <__aeabi_i2d>
 801dfe0:	4602      	mov	r2, r0
 801dfe2:	460b      	mov	r3, r1
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	4629      	mov	r1, r5
 801dfe8:	f7e2 f95a 	bl	80002a0 <__adddf3>
 801dfec:	4603      	mov	r3, r0
 801dfee:	460c      	mov	r4, r1
 801dff0:	4618      	mov	r0, r3
 801dff2:	4621      	mov	r1, r4
 801dff4:	f7e2 fde2 	bl	8000bbc <__aeabi_d2uiz>
 801dff8:	4603      	mov	r3, r0
 801dffa:	b2da      	uxtb	r2, r3
 801dffc:	697b      	ldr	r3, [r7, #20]
 801dffe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801e002:	e1a9      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 30)
 801e004:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e008:	2b1d      	cmp	r3, #29
 801e00a:	d83e      	bhi.n	801e08a <chirp_controller_read_command+0x5d2>
            {
              data =  data - '0';
 801e00c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e010:	3b30      	subs	r3, #48	; 0x30
 801e012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 29;
 801e016:	231d      	movs	r3, #29
 801e018:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_date += data * pow(10,(pow_num-i));
 801e01a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e01e:	4618      	mov	r0, r3
 801e020:	f7e2 fa8a 	bl	8000538 <__aeabi_i2d>
 801e024:	4604      	mov	r4, r0
 801e026:	460d      	mov	r5, r1
 801e028:	7efa      	ldrb	r2, [r7, #27]
 801e02a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e02e:	1ad3      	subs	r3, r2, r3
 801e030:	4618      	mov	r0, r3
 801e032:	f7e2 fa81 	bl	8000538 <__aeabi_i2d>
 801e036:	4602      	mov	r2, r0
 801e038:	460b      	mov	r3, r1
 801e03a:	ec43 2b11 	vmov	d1, r2, r3
 801e03e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 801e220 <chirp_controller_read_command+0x768>
 801e042:	f005 ff69 	bl	8023f18 <pow>
 801e046:	ec53 2b10 	vmov	r2, r3, d0
 801e04a:	4620      	mov	r0, r4
 801e04c:	4629      	mov	r1, r5
 801e04e:	f7e2 fadd 	bl	800060c <__aeabi_dmul>
 801e052:	4603      	mov	r3, r0
 801e054:	460c      	mov	r4, r1
 801e056:	4625      	mov	r5, r4
 801e058:	461c      	mov	r4, r3
 801e05a:	697b      	ldr	r3, [r7, #20]
 801e05c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801e060:	4618      	mov	r0, r3
 801e062:	f7e2 fa69 	bl	8000538 <__aeabi_i2d>
 801e066:	4602      	mov	r2, r0
 801e068:	460b      	mov	r3, r1
 801e06a:	4620      	mov	r0, r4
 801e06c:	4629      	mov	r1, r5
 801e06e:	f7e2 f917 	bl	80002a0 <__adddf3>
 801e072:	4603      	mov	r3, r0
 801e074:	460c      	mov	r4, r1
 801e076:	4618      	mov	r0, r3
 801e078:	4621      	mov	r1, r4
 801e07a:	f7e2 fd9f 	bl	8000bbc <__aeabi_d2uiz>
 801e07e:	4603      	mov	r3, r0
 801e080:	b2da      	uxtb	r2, r3
 801e082:	697b      	ldr	r3, [r7, #20]
 801e084:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 801e088:	e166      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 33)
 801e08a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e08e:	2b20      	cmp	r3, #32
 801e090:	d83e      	bhi.n	801e110 <chirp_controller_read_command+0x658>
            {
              data =  data - '0';
 801e092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e096:	3b30      	subs	r3, #48	; 0x30
 801e098:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 32;
 801e09c:	2320      	movs	r3, #32
 801e09e:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_hour += data * pow(10,(pow_num-i));
 801e0a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	f7e2 fa47 	bl	8000538 <__aeabi_i2d>
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	460d      	mov	r5, r1
 801e0ae:	7efa      	ldrb	r2, [r7, #27]
 801e0b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e0b4:	1ad3      	subs	r3, r2, r3
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f7e2 fa3e 	bl	8000538 <__aeabi_i2d>
 801e0bc:	4602      	mov	r2, r0
 801e0be:	460b      	mov	r3, r1
 801e0c0:	ec43 2b11 	vmov	d1, r2, r3
 801e0c4:	ed9f 0b56 	vldr	d0, [pc, #344]	; 801e220 <chirp_controller_read_command+0x768>
 801e0c8:	f005 ff26 	bl	8023f18 <pow>
 801e0cc:	ec53 2b10 	vmov	r2, r3, d0
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	4629      	mov	r1, r5
 801e0d4:	f7e2 fa9a 	bl	800060c <__aeabi_dmul>
 801e0d8:	4603      	mov	r3, r0
 801e0da:	460c      	mov	r4, r1
 801e0dc:	4625      	mov	r5, r4
 801e0de:	461c      	mov	r4, r3
 801e0e0:	697b      	ldr	r3, [r7, #20]
 801e0e2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	f7e2 fa26 	bl	8000538 <__aeabi_i2d>
 801e0ec:	4602      	mov	r2, r0
 801e0ee:	460b      	mov	r3, r1
 801e0f0:	4620      	mov	r0, r4
 801e0f2:	4629      	mov	r1, r5
 801e0f4:	f7e2 f8d4 	bl	80002a0 <__adddf3>
 801e0f8:	4603      	mov	r3, r0
 801e0fa:	460c      	mov	r4, r1
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	4621      	mov	r1, r4
 801e100:	f7e2 fd5c 	bl	8000bbc <__aeabi_d2uiz>
 801e104:	4603      	mov	r3, r0
 801e106:	b2da      	uxtb	r2, r3
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 801e10e:	e123      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 36)
 801e110:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e114:	2b23      	cmp	r3, #35	; 0x23
 801e116:	d83e      	bhi.n	801e196 <chirp_controller_read_command+0x6de>
            {
              data =  data - '0';
 801e118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e11c:	3b30      	subs	r3, #48	; 0x30
 801e11e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 35;
 801e122:	2323      	movs	r3, #35	; 0x23
 801e124:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_min += data * pow(10,(pow_num-i));
 801e126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e12a:	4618      	mov	r0, r3
 801e12c:	f7e2 fa04 	bl	8000538 <__aeabi_i2d>
 801e130:	4604      	mov	r4, r0
 801e132:	460d      	mov	r5, r1
 801e134:	7efa      	ldrb	r2, [r7, #27]
 801e136:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e13a:	1ad3      	subs	r3, r2, r3
 801e13c:	4618      	mov	r0, r3
 801e13e:	f7e2 f9fb 	bl	8000538 <__aeabi_i2d>
 801e142:	4602      	mov	r2, r0
 801e144:	460b      	mov	r3, r1
 801e146:	ec43 2b11 	vmov	d1, r2, r3
 801e14a:	ed9f 0b35 	vldr	d0, [pc, #212]	; 801e220 <chirp_controller_read_command+0x768>
 801e14e:	f005 fee3 	bl	8023f18 <pow>
 801e152:	ec53 2b10 	vmov	r2, r3, d0
 801e156:	4620      	mov	r0, r4
 801e158:	4629      	mov	r1, r5
 801e15a:	f7e2 fa57 	bl	800060c <__aeabi_dmul>
 801e15e:	4603      	mov	r3, r0
 801e160:	460c      	mov	r4, r1
 801e162:	4625      	mov	r5, r4
 801e164:	461c      	mov	r4, r3
 801e166:	697b      	ldr	r3, [r7, #20]
 801e168:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e16c:	4618      	mov	r0, r3
 801e16e:	f7e2 f9e3 	bl	8000538 <__aeabi_i2d>
 801e172:	4602      	mov	r2, r0
 801e174:	460b      	mov	r3, r1
 801e176:	4620      	mov	r0, r4
 801e178:	4629      	mov	r1, r5
 801e17a:	f7e2 f891 	bl	80002a0 <__adddf3>
 801e17e:	4603      	mov	r3, r0
 801e180:	460c      	mov	r4, r1
 801e182:	4618      	mov	r0, r3
 801e184:	4621      	mov	r1, r4
 801e186:	f7e2 fd19 	bl	8000bbc <__aeabi_d2uiz>
 801e18a:	4603      	mov	r3, r0
 801e18c:	b2da      	uxtb	r2, r3
 801e18e:	697b      	ldr	r3, [r7, #20]
 801e190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801e194:	e0e0      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 39)
 801e196:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e19a:	2b26      	cmp	r3, #38	; 0x26
 801e19c:	d848      	bhi.n	801e230 <chirp_controller_read_command+0x778>
            {
              data =  data - '0';
 801e19e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e1a2:	3b30      	subs	r3, #48	; 0x30
 801e1a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 38;
 801e1a8:	2326      	movs	r3, #38	; 0x26
 801e1aa:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_sec += data * pow(10,(pow_num-i));
 801e1ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	f7e2 f9c1 	bl	8000538 <__aeabi_i2d>
 801e1b6:	4604      	mov	r4, r0
 801e1b8:	460d      	mov	r5, r1
 801e1ba:	7efa      	ldrb	r2, [r7, #27]
 801e1bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e1c0:	1ad3      	subs	r3, r2, r3
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f7e2 f9b8 	bl	8000538 <__aeabi_i2d>
 801e1c8:	4602      	mov	r2, r0
 801e1ca:	460b      	mov	r3, r1
 801e1cc:	ec43 2b11 	vmov	d1, r2, r3
 801e1d0:	ed9f 0b13 	vldr	d0, [pc, #76]	; 801e220 <chirp_controller_read_command+0x768>
 801e1d4:	f005 fea0 	bl	8023f18 <pow>
 801e1d8:	ec53 2b10 	vmov	r2, r3, d0
 801e1dc:	4620      	mov	r0, r4
 801e1de:	4629      	mov	r1, r5
 801e1e0:	f7e2 fa14 	bl	800060c <__aeabi_dmul>
 801e1e4:	4603      	mov	r3, r0
 801e1e6:	460c      	mov	r4, r1
 801e1e8:	4625      	mov	r5, r4
 801e1ea:	461c      	mov	r4, r3
 801e1ec:	697b      	ldr	r3, [r7, #20]
 801e1ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	f7e2 f9a0 	bl	8000538 <__aeabi_i2d>
 801e1f8:	4602      	mov	r2, r0
 801e1fa:	460b      	mov	r3, r1
 801e1fc:	4620      	mov	r0, r4
 801e1fe:	4629      	mov	r1, r5
 801e200:	f7e2 f84e 	bl	80002a0 <__adddf3>
 801e204:	4603      	mov	r3, r0
 801e206:	460c      	mov	r4, r1
 801e208:	4618      	mov	r0, r3
 801e20a:	4621      	mov	r1, r4
 801e20c:	f7e2 fcd6 	bl	8000bbc <__aeabi_d2uiz>
 801e210:	4603      	mov	r3, r0
 801e212:	b2da      	uxtb	r2, r3
 801e214:	697b      	ldr	r3, [r7, #20]
 801e216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801e21a:	e09d      	b.n	801e358 <chirp_controller_read_command+0x8a0>
 801e21c:	f3af 8000 	nop.w
 801e220:	00000000 	.word	0x00000000
 801e224:	40240000 	.word	0x40240000
 801e228:	00000000 	.word	0x00000000
 801e22c:	40300000 	.word	0x40300000
            }
            else if (i < 41)
 801e230:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e234:	2b28      	cmp	r3, #40	; 0x28
 801e236:	d83e      	bhi.n	801e2b6 <chirp_controller_read_command+0x7fe>
            {
              data =  data - '0';
 801e238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e23c:	3b30      	subs	r3, #48	; 0x30
 801e23e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 40;
 801e242:	2328      	movs	r3, #40	; 0x28
 801e244:	76fb      	strb	r3, [r7, #27]
              chirp_outl->flash_protection += data * pow(10,(pow_num-i));
 801e246:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e24a:	4618      	mov	r0, r3
 801e24c:	f7e2 f974 	bl	8000538 <__aeabi_i2d>
 801e250:	4604      	mov	r4, r0
 801e252:	460d      	mov	r5, r1
 801e254:	7efa      	ldrb	r2, [r7, #27]
 801e256:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e25a:	1ad3      	subs	r3, r2, r3
 801e25c:	4618      	mov	r0, r3
 801e25e:	f7e2 f96b 	bl	8000538 <__aeabi_i2d>
 801e262:	4602      	mov	r2, r0
 801e264:	460b      	mov	r3, r1
 801e266:	ec43 2b11 	vmov	d1, r2, r3
 801e26a:	ed1f 0b13 	vldr	d0, [pc, #-76]	; 801e220 <chirp_controller_read_command+0x768>
 801e26e:	f005 fe53 	bl	8023f18 <pow>
 801e272:	ec53 2b10 	vmov	r2, r3, d0
 801e276:	4620      	mov	r0, r4
 801e278:	4629      	mov	r1, r5
 801e27a:	f7e2 f9c7 	bl	800060c <__aeabi_dmul>
 801e27e:	4603      	mov	r3, r0
 801e280:	460c      	mov	r4, r1
 801e282:	4625      	mov	r5, r4
 801e284:	461c      	mov	r4, r3
 801e286:	697b      	ldr	r3, [r7, #20]
 801e288:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801e28c:	4618      	mov	r0, r3
 801e28e:	f7e2 f953 	bl	8000538 <__aeabi_i2d>
 801e292:	4602      	mov	r2, r0
 801e294:	460b      	mov	r3, r1
 801e296:	4620      	mov	r0, r4
 801e298:	4629      	mov	r1, r5
 801e29a:	f7e2 f801 	bl	80002a0 <__adddf3>
 801e29e:	4603      	mov	r3, r0
 801e2a0:	460c      	mov	r4, r1
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	4621      	mov	r1, r4
 801e2a6:	f7e2 fc89 	bl	8000bbc <__aeabi_d2uiz>
 801e2aa:	4603      	mov	r3, r0
 801e2ac:	b2da      	uxtb	r2, r3
 801e2ae:	697b      	ldr	r3, [r7, #20]
 801e2b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 801e2b4:	e050      	b.n	801e358 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 46)
 801e2b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e2ba:	2b2d      	cmp	r3, #45	; 0x2d
 801e2bc:	d84c      	bhi.n	801e358 <chirp_controller_read_command+0x8a0>
            {
              if ((data >= '0') && (data <= '9'))
 801e2be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2c2:	2b2f      	cmp	r3, #47	; 0x2f
 801e2c4:	d909      	bls.n	801e2da <chirp_controller_read_command+0x822>
 801e2c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2ca:	2b39      	cmp	r3, #57	; 0x39
 801e2cc:	d805      	bhi.n	801e2da <chirp_controller_read_command+0x822>
                data = data - '0';
 801e2ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2d2:	3b30      	subs	r3, #48	; 0x30
 801e2d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e2d8:	e004      	b.n	801e2e4 <chirp_controller_read_command+0x82c>
              else
                data = 10 + data - 'A';
 801e2da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2de:	3b37      	subs	r3, #55	; 0x37
 801e2e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 45;
 801e2e4:	232d      	movs	r3, #45	; 0x2d
 801e2e6:	76fb      	strb	r3, [r7, #27]
              chirp_outl->version_hash += data * pow(16,(pow_num-i));
 801e2e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	f7e2 f923 	bl	8000538 <__aeabi_i2d>
 801e2f2:	4604      	mov	r4, r0
 801e2f4:	460d      	mov	r5, r1
 801e2f6:	7efa      	ldrb	r2, [r7, #27]
 801e2f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e2fc:	1ad3      	subs	r3, r2, r3
 801e2fe:	4618      	mov	r0, r3
 801e300:	f7e2 f91a 	bl	8000538 <__aeabi_i2d>
 801e304:	4602      	mov	r2, r0
 801e306:	460b      	mov	r3, r1
 801e308:	ec43 2b11 	vmov	d1, r2, r3
 801e30c:	ed1f 0b3a 	vldr	d0, [pc, #-232]	; 801e228 <chirp_controller_read_command+0x770>
 801e310:	f005 fe02 	bl	8023f18 <pow>
 801e314:	ec53 2b10 	vmov	r2, r3, d0
 801e318:	4620      	mov	r0, r4
 801e31a:	4629      	mov	r1, r5
 801e31c:	f7e2 f976 	bl	800060c <__aeabi_dmul>
 801e320:	4603      	mov	r3, r0
 801e322:	460c      	mov	r4, r1
 801e324:	4625      	mov	r5, r4
 801e326:	461c      	mov	r4, r3
 801e328:	697b      	ldr	r3, [r7, #20]
 801e32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e32e:	b29b      	uxth	r3, r3
 801e330:	4618      	mov	r0, r3
 801e332:	f7e2 f901 	bl	8000538 <__aeabi_i2d>
 801e336:	4602      	mov	r2, r0
 801e338:	460b      	mov	r3, r1
 801e33a:	4620      	mov	r0, r4
 801e33c:	4629      	mov	r1, r5
 801e33e:	f7e1 ffaf 	bl	80002a0 <__adddf3>
 801e342:	4603      	mov	r3, r0
 801e344:	460c      	mov	r4, r1
 801e346:	4618      	mov	r0, r3
 801e348:	4621      	mov	r1, r4
 801e34a:	f7e2 fc37 	bl	8000bbc <__aeabi_d2uiz>
 801e34e:	4603      	mov	r3, r0
 801e350:	b29a      	uxth	r2, r3
 801e352:	697b      	ldr	r3, [r7, #20]
 801e354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        for (i = 0; i < rxbuffer_len; i++)
 801e358:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e35c:	3301      	adds	r3, #1
 801e35e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e362:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801e366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e36a:	429a      	cmp	r2, r3
 801e36c:	f4ff ac0c 	bcc.w	801db88 <chirp_controller_read_command+0xd0>
            }
          }
        }

        PRINTF("\tSTART at %d-%d-%d, %d:%d:%d\n\tEnd at %d-%d-%d, %d:%d:%d\n, start user:%d, ver:%x\n", chirp_outl->start_year, chirp_outl->start_month, chirp_outl->start_date, chirp_outl->start_hour, chirp_outl->start_min, chirp_outl->start_sec, chirp_outl->end_year, chirp_outl->end_month, chirp_outl->end_date, chirp_outl->end_hour, chirp_outl->end_min, chirp_outl->end_sec, chirp_outl->flash_protection, chirp_outl->version_hash);
 801e370:	697b      	ldr	r3, [r7, #20]
 801e372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e374:	b29b      	uxth	r3, r3
 801e376:	469c      	mov	ip, r3
 801e378:	697b      	ldr	r3, [r7, #20]
 801e37a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801e37e:	469e      	mov	lr, r3
 801e380:	697b      	ldr	r3, [r7, #20]
 801e382:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801e386:	4698      	mov	r8, r3
 801e388:	697b      	ldr	r3, [r7, #20]
 801e38a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e38e:	461a      	mov	r2, r3
 801e390:	697b      	ldr	r3, [r7, #20]
 801e392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e396:	4619      	mov	r1, r3
 801e398:	697b      	ldr	r3, [r7, #20]
 801e39a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e39e:	4618      	mov	r0, r3
 801e3a0:	697b      	ldr	r3, [r7, #20]
 801e3a2:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801e3a6:	b29b      	uxth	r3, r3
 801e3a8:	461c      	mov	r4, r3
 801e3aa:	697b      	ldr	r3, [r7, #20]
 801e3ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e3b0:	461d      	mov	r5, r3
 801e3b2:	697b      	ldr	r3, [r7, #20]
 801e3b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801e3b8:	461e      	mov	r6, r3
 801e3ba:	697b      	ldr	r3, [r7, #20]
 801e3bc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801e3c0:	613b      	str	r3, [r7, #16]
 801e3c2:	697b      	ldr	r3, [r7, #20]
 801e3c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e3c8:	60fb      	str	r3, [r7, #12]
 801e3ca:	697b      	ldr	r3, [r7, #20]
 801e3cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e3d0:	60bb      	str	r3, [r7, #8]
 801e3d2:	697b      	ldr	r3, [r7, #20]
 801e3d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801e3d8:	607b      	str	r3, [r7, #4]
 801e3da:	697b      	ldr	r3, [r7, #20]
 801e3dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e3e0:	b29b      	uxth	r3, r3
 801e3e2:	930a      	str	r3, [sp, #40]	; 0x28
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801e3e8:	68bb      	ldr	r3, [r7, #8]
 801e3ea:	9308      	str	r3, [sp, #32]
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	9307      	str	r3, [sp, #28]
 801e3f0:	693b      	ldr	r3, [r7, #16]
 801e3f2:	9306      	str	r3, [sp, #24]
 801e3f4:	9605      	str	r6, [sp, #20]
 801e3f6:	9504      	str	r5, [sp, #16]
 801e3f8:	9403      	str	r4, [sp, #12]
 801e3fa:	9002      	str	r0, [sp, #8]
 801e3fc:	9101      	str	r1, [sp, #4]
 801e3fe:	9200      	str	r2, [sp, #0]
 801e400:	4643      	mov	r3, r8
 801e402:	4672      	mov	r2, lr
 801e404:	4661      	mov	r1, ip
 801e406:	48d8      	ldr	r0, [pc, #864]	; (801e768 <chirp_controller_read_command+0xcb0>)
 801e408:	f003 fecc 	bl	80221a4 <iprintf>
        break;
 801e40c:	f000 bce2 	b.w	801edd4 <chirp_controller_read_command+0x131c>
      case MX_DISSEMINATE:
      {
        /* ("0,0,00000,00000,6A75": update whole firmware, "1,0,7f800,7f500,6A75": patch firmware of bank1, "1,1,7f800,7f500,6A75": patch firmware of bank2) */
        /* hash code is 0x6A75 */
        /* 87BA9B1B68BFE39666AAB255A1049CC7, md5 of the new file */
        memset(&(chirp_outl->firmware_size), 0, offsetof(Chirp_Outl, collect_addr_start) - offsetof(Chirp_Outl, firmware_size));
 801e410:	697b      	ldr	r3, [r7, #20]
 801e412:	333c      	adds	r3, #60	; 0x3c
 801e414:	222d      	movs	r2, #45	; 0x2d
 801e416:	2100      	movs	r1, #0
 801e418:	4618      	mov	r0, r3
 801e41a:	f003 f8b6 	bl	802158a <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801e41e:	2300      	movs	r3, #0
 801e420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e424:	e240      	b.n	801e8a8 <chirp_controller_read_command+0xdf0>
        {
          data = (uint8_t)command_buffer[k++];
 801e426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e42a:	1c5a      	adds	r2, r3, #1
 801e42c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801e430:	461a      	mov	r2, r3
 801e432:	69fb      	ldr	r3, [r7, #28]
 801e434:	4413      	add	r3, r2
 801e436:	781b      	ldrb	r3, [r3, #0]
 801e438:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801e43c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e440:	2b2f      	cmp	r3, #47	; 0x2f
 801e442:	d903      	bls.n	801e44c <chirp_controller_read_command+0x994>
 801e444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e448:	2b39      	cmp	r3, #57	; 0x39
 801e44a:	d909      	bls.n	801e460 <chirp_controller_read_command+0x9a8>
 801e44c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e450:	2b40      	cmp	r3, #64	; 0x40
 801e452:	f240 8224 	bls.w	801e89e <chirp_controller_read_command+0xde6>
 801e456:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e45a:	2b46      	cmp	r3, #70	; 0x46
 801e45c:	f200 821f 	bhi.w	801e89e <chirp_controller_read_command+0xde6>
          {
            if (i < 1)
 801e460:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e464:	2b00      	cmp	r3, #0
 801e466:	d13e      	bne.n	801e4e6 <chirp_controller_read_command+0xa2e>
            {
              data =  data - '0';
 801e468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e46c:	3b30      	subs	r3, #48	; 0x30
 801e46e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 0;
 801e472:	2300      	movs	r3, #0
 801e474:	76fb      	strb	r3, [r7, #27]
              chirp_outl->patch_update += data * pow(10,(pow_num-i));
 801e476:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e47a:	4618      	mov	r0, r3
 801e47c:	f7e2 f85c 	bl	8000538 <__aeabi_i2d>
 801e480:	4604      	mov	r4, r0
 801e482:	460d      	mov	r5, r1
 801e484:	7efa      	ldrb	r2, [r7, #27]
 801e486:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e48a:	1ad3      	subs	r3, r2, r3
 801e48c:	4618      	mov	r0, r3
 801e48e:	f7e2 f853 	bl	8000538 <__aeabi_i2d>
 801e492:	4602      	mov	r2, r0
 801e494:	460b      	mov	r3, r1
 801e496:	ec43 2b11 	vmov	d1, r2, r3
 801e49a:	ed9f 0baf 	vldr	d0, [pc, #700]	; 801e758 <chirp_controller_read_command+0xca0>
 801e49e:	f005 fd3b 	bl	8023f18 <pow>
 801e4a2:	ec53 2b10 	vmov	r2, r3, d0
 801e4a6:	4620      	mov	r0, r4
 801e4a8:	4629      	mov	r1, r5
 801e4aa:	f7e2 f8af 	bl	800060c <__aeabi_dmul>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	460c      	mov	r4, r1
 801e4b2:	4625      	mov	r5, r4
 801e4b4:	461c      	mov	r4, r3
 801e4b6:	697b      	ldr	r3, [r7, #20]
 801e4b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e4bc:	4618      	mov	r0, r3
 801e4be:	f7e2 f83b 	bl	8000538 <__aeabi_i2d>
 801e4c2:	4602      	mov	r2, r0
 801e4c4:	460b      	mov	r3, r1
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	4629      	mov	r1, r5
 801e4ca:	f7e1 fee9 	bl	80002a0 <__adddf3>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	460c      	mov	r4, r1
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	4621      	mov	r1, r4
 801e4d6:	f7e2 fb71 	bl	8000bbc <__aeabi_d2uiz>
 801e4da:	4603      	mov	r3, r0
 801e4dc:	b2da      	uxtb	r2, r3
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801e4e4:	e1db      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 3)
 801e4e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e4ea:	2b02      	cmp	r3, #2
 801e4ec:	d83e      	bhi.n	801e56c <chirp_controller_read_command+0xab4>
            {
              data =  data - '0';
 801e4ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e4f2:	3b30      	subs	r3, #48	; 0x30
 801e4f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 2;
 801e4f8:	2302      	movs	r3, #2
 801e4fa:	76fb      	strb	r3, [r7, #27]
              chirp_outl->patch_bank += data * pow(10,(pow_num-i));
 801e4fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e500:	4618      	mov	r0, r3
 801e502:	f7e2 f819 	bl	8000538 <__aeabi_i2d>
 801e506:	4604      	mov	r4, r0
 801e508:	460d      	mov	r5, r1
 801e50a:	7efa      	ldrb	r2, [r7, #27]
 801e50c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e510:	1ad3      	subs	r3, r2, r3
 801e512:	4618      	mov	r0, r3
 801e514:	f7e2 f810 	bl	8000538 <__aeabi_i2d>
 801e518:	4602      	mov	r2, r0
 801e51a:	460b      	mov	r3, r1
 801e51c:	ec43 2b11 	vmov	d1, r2, r3
 801e520:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 801e758 <chirp_controller_read_command+0xca0>
 801e524:	f005 fcf8 	bl	8023f18 <pow>
 801e528:	ec53 2b10 	vmov	r2, r3, d0
 801e52c:	4620      	mov	r0, r4
 801e52e:	4629      	mov	r1, r5
 801e530:	f7e2 f86c 	bl	800060c <__aeabi_dmul>
 801e534:	4603      	mov	r3, r0
 801e536:	460c      	mov	r4, r1
 801e538:	4625      	mov	r5, r4
 801e53a:	461c      	mov	r4, r3
 801e53c:	697b      	ldr	r3, [r7, #20]
 801e53e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801e542:	4618      	mov	r0, r3
 801e544:	f7e1 fff8 	bl	8000538 <__aeabi_i2d>
 801e548:	4602      	mov	r2, r0
 801e54a:	460b      	mov	r3, r1
 801e54c:	4620      	mov	r0, r4
 801e54e:	4629      	mov	r1, r5
 801e550:	f7e1 fea6 	bl	80002a0 <__adddf3>
 801e554:	4603      	mov	r3, r0
 801e556:	460c      	mov	r4, r1
 801e558:	4618      	mov	r0, r3
 801e55a:	4621      	mov	r1, r4
 801e55c:	f7e2 fb2e 	bl	8000bbc <__aeabi_d2uiz>
 801e560:	4603      	mov	r3, r0
 801e562:	b2da      	uxtb	r2, r3
 801e564:	697b      	ldr	r3, [r7, #20]
 801e566:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 801e56a:	e198      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 5)
 801e56c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e570:	2b04      	cmp	r3, #4
 801e572:	d83d      	bhi.n	801e5f0 <chirp_controller_read_command+0xb38>
            {
              data =  data - '0';
 801e574:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e578:	3b30      	subs	r3, #48	; 0x30
 801e57a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 4;
 801e57e:	2304      	movs	r3, #4
 801e580:	76fb      	strb	r3, [r7, #27]
              chirp_outl->file_compression += data * pow(10,(pow_num-i));
 801e582:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e586:	4618      	mov	r0, r3
 801e588:	f7e1 ffd6 	bl	8000538 <__aeabi_i2d>
 801e58c:	4604      	mov	r4, r0
 801e58e:	460d      	mov	r5, r1
 801e590:	7efa      	ldrb	r2, [r7, #27]
 801e592:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e596:	1ad3      	subs	r3, r2, r3
 801e598:	4618      	mov	r0, r3
 801e59a:	f7e1 ffcd 	bl	8000538 <__aeabi_i2d>
 801e59e:	4602      	mov	r2, r0
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	ec43 2b11 	vmov	d1, r2, r3
 801e5a6:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801e758 <chirp_controller_read_command+0xca0>
 801e5aa:	f005 fcb5 	bl	8023f18 <pow>
 801e5ae:	ec53 2b10 	vmov	r2, r3, d0
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	4629      	mov	r1, r5
 801e5b6:	f7e2 f829 	bl	800060c <__aeabi_dmul>
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	460c      	mov	r4, r1
 801e5be:	4625      	mov	r5, r4
 801e5c0:	461c      	mov	r4, r3
 801e5c2:	697b      	ldr	r3, [r7, #20]
 801e5c4:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 801e5c8:	4618      	mov	r0, r3
 801e5ca:	f7e1 ffa5 	bl	8000518 <__aeabi_ui2d>
 801e5ce:	4602      	mov	r2, r0
 801e5d0:	460b      	mov	r3, r1
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	4629      	mov	r1, r5
 801e5d6:	f7e1 fe63 	bl	80002a0 <__adddf3>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	460c      	mov	r4, r1
 801e5de:	4618      	mov	r0, r3
 801e5e0:	4621      	mov	r1, r4
 801e5e2:	f7e2 faeb 	bl	8000bbc <__aeabi_d2uiz>
 801e5e6:	4602      	mov	r2, r0
 801e5e8:	697b      	ldr	r3, [r7, #20]
 801e5ea:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
 801e5ee:	e156      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 11)
 801e5f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e5f4:	2b0a      	cmp	r3, #10
 801e5f6:	d84b      	bhi.n	801e690 <chirp_controller_read_command+0xbd8>
            {
              pow_num = 10;
 801e5f8:	230a      	movs	r3, #10
 801e5fa:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801e5fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e600:	2b2f      	cmp	r3, #47	; 0x2f
 801e602:	d909      	bls.n	801e618 <chirp_controller_read_command+0xb60>
 801e604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e608:	2b39      	cmp	r3, #57	; 0x39
 801e60a:	d805      	bhi.n	801e618 <chirp_controller_read_command+0xb60>
                data = data - '0';
 801e60c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e610:	3b30      	subs	r3, #48	; 0x30
 801e612:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e616:	e004      	b.n	801e622 <chirp_controller_read_command+0xb6a>
              else
                data = 10 + data - 'A';
 801e618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e61c:	3b37      	subs	r3, #55	; 0x37
 801e61e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->old_firmware_size += data * pow(16,(pow_num-i));
 801e622:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e626:	4618      	mov	r0, r3
 801e628:	f7e1 ff86 	bl	8000538 <__aeabi_i2d>
 801e62c:	4604      	mov	r4, r0
 801e62e:	460d      	mov	r5, r1
 801e630:	7efa      	ldrb	r2, [r7, #27]
 801e632:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e636:	1ad3      	subs	r3, r2, r3
 801e638:	4618      	mov	r0, r3
 801e63a:	f7e1 ff7d 	bl	8000538 <__aeabi_i2d>
 801e63e:	4602      	mov	r2, r0
 801e640:	460b      	mov	r3, r1
 801e642:	ec43 2b11 	vmov	d1, r2, r3
 801e646:	ed9f 0b46 	vldr	d0, [pc, #280]	; 801e760 <chirp_controller_read_command+0xca8>
 801e64a:	f005 fc65 	bl	8023f18 <pow>
 801e64e:	ec53 2b10 	vmov	r2, r3, d0
 801e652:	4620      	mov	r0, r4
 801e654:	4629      	mov	r1, r5
 801e656:	f7e1 ffd9 	bl	800060c <__aeabi_dmul>
 801e65a:	4603      	mov	r3, r0
 801e65c:	460c      	mov	r4, r1
 801e65e:	4625      	mov	r5, r4
 801e660:	461c      	mov	r4, r3
 801e662:	697b      	ldr	r3, [r7, #20]
 801e664:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 801e668:	4618      	mov	r0, r3
 801e66a:	f7e1 ff55 	bl	8000518 <__aeabi_ui2d>
 801e66e:	4602      	mov	r2, r0
 801e670:	460b      	mov	r3, r1
 801e672:	4620      	mov	r0, r4
 801e674:	4629      	mov	r1, r5
 801e676:	f7e1 fe13 	bl	80002a0 <__adddf3>
 801e67a:	4603      	mov	r3, r0
 801e67c:	460c      	mov	r4, r1
 801e67e:	4618      	mov	r0, r3
 801e680:	4621      	mov	r1, r4
 801e682:	f7e2 fa9b 	bl	8000bbc <__aeabi_d2uiz>
 801e686:	4602      	mov	r2, r0
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	f8c3 2059 	str.w	r2, [r3, #89]	; 0x59
 801e68e:	e106      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 17)
 801e690:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e694:	2b10      	cmp	r3, #16
 801e696:	d849      	bhi.n	801e72c <chirp_controller_read_command+0xc74>
            {
              pow_num = 16;
 801e698:	2310      	movs	r3, #16
 801e69a:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801e69c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6a0:	2b2f      	cmp	r3, #47	; 0x2f
 801e6a2:	d909      	bls.n	801e6b8 <chirp_controller_read_command+0xc00>
 801e6a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6a8:	2b39      	cmp	r3, #57	; 0x39
 801e6aa:	d805      	bhi.n	801e6b8 <chirp_controller_read_command+0xc00>
                data = data - '0';
 801e6ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6b0:	3b30      	subs	r3, #48	; 0x30
 801e6b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e6b6:	e004      	b.n	801e6c2 <chirp_controller_read_command+0xc0a>
              else
                data = 10 + data - 'A';
 801e6b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6bc:	3b37      	subs	r3, #55	; 0x37
 801e6be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->firmware_size += data * pow(16,(pow_num-i));
 801e6c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	f7e1 ff36 	bl	8000538 <__aeabi_i2d>
 801e6cc:	4604      	mov	r4, r0
 801e6ce:	460d      	mov	r5, r1
 801e6d0:	7efa      	ldrb	r2, [r7, #27]
 801e6d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e6d6:	1ad3      	subs	r3, r2, r3
 801e6d8:	4618      	mov	r0, r3
 801e6da:	f7e1 ff2d 	bl	8000538 <__aeabi_i2d>
 801e6de:	4602      	mov	r2, r0
 801e6e0:	460b      	mov	r3, r1
 801e6e2:	ec43 2b11 	vmov	d1, r2, r3
 801e6e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801e760 <chirp_controller_read_command+0xca8>
 801e6ea:	f005 fc15 	bl	8023f18 <pow>
 801e6ee:	ec53 2b10 	vmov	r2, r3, d0
 801e6f2:	4620      	mov	r0, r4
 801e6f4:	4629      	mov	r1, r5
 801e6f6:	f7e1 ff89 	bl	800060c <__aeabi_dmul>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	460c      	mov	r4, r1
 801e6fe:	4625      	mov	r5, r4
 801e700:	461c      	mov	r4, r3
 801e702:	697b      	ldr	r3, [r7, #20]
 801e704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e706:	4618      	mov	r0, r3
 801e708:	f7e1 ff06 	bl	8000518 <__aeabi_ui2d>
 801e70c:	4602      	mov	r2, r0
 801e70e:	460b      	mov	r3, r1
 801e710:	4620      	mov	r0, r4
 801e712:	4629      	mov	r1, r5
 801e714:	f7e1 fdc4 	bl	80002a0 <__adddf3>
 801e718:	4603      	mov	r3, r0
 801e71a:	460c      	mov	r4, r1
 801e71c:	4618      	mov	r0, r3
 801e71e:	4621      	mov	r1, r4
 801e720:	f7e2 fa4c 	bl	8000bbc <__aeabi_d2uiz>
 801e724:	4602      	mov	r2, r0
 801e726:	697b      	ldr	r3, [r7, #20]
 801e728:	63da      	str	r2, [r3, #60]	; 0x3c
 801e72a:	e0b8      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 22)
 801e72c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e730:	2b15      	cmp	r3, #21
 801e732:	d859      	bhi.n	801e7e8 <chirp_controller_read_command+0xd30>
            {
              pow_num = 21;
 801e734:	2315      	movs	r3, #21
 801e736:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801e738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e73c:	2b2f      	cmp	r3, #47	; 0x2f
 801e73e:	d915      	bls.n	801e76c <chirp_controller_read_command+0xcb4>
 801e740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e744:	2b39      	cmp	r3, #57	; 0x39
 801e746:	d811      	bhi.n	801e76c <chirp_controller_read_command+0xcb4>
                data = data - '0';
 801e748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e74c:	3b30      	subs	r3, #48	; 0x30
 801e74e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e752:	e010      	b.n	801e776 <chirp_controller_read_command+0xcbe>
 801e754:	f3af 8000 	nop.w
 801e758:	00000000 	.word	0x00000000
 801e75c:	40240000 	.word	0x40240000
 801e760:	00000000 	.word	0x00000000
 801e764:	40300000 	.word	0x40300000
 801e768:	080264ac 	.word	0x080264ac
              else
                data = 10 + data - 'A';
 801e76c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e770:	3b37      	subs	r3, #55	; 0x37
 801e772:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->version_hash += data * pow(16,(pow_num-i));
 801e776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e77a:	4618      	mov	r0, r3
 801e77c:	f7e1 fedc 	bl	8000538 <__aeabi_i2d>
 801e780:	4604      	mov	r4, r0
 801e782:	460d      	mov	r5, r1
 801e784:	7efa      	ldrb	r2, [r7, #27]
 801e786:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e78a:	1ad3      	subs	r3, r2, r3
 801e78c:	4618      	mov	r0, r3
 801e78e:	f7e1 fed3 	bl	8000538 <__aeabi_i2d>
 801e792:	4602      	mov	r2, r0
 801e794:	460b      	mov	r3, r1
 801e796:	ec43 2b11 	vmov	d1, r2, r3
 801e79a:	ed9f 0bdf 	vldr	d0, [pc, #892]	; 801eb18 <chirp_controller_read_command+0x1060>
 801e79e:	f005 fbbb 	bl	8023f18 <pow>
 801e7a2:	ec53 2b10 	vmov	r2, r3, d0
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	4629      	mov	r1, r5
 801e7aa:	f7e1 ff2f 	bl	800060c <__aeabi_dmul>
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	460c      	mov	r4, r1
 801e7b2:	4625      	mov	r5, r4
 801e7b4:	461c      	mov	r4, r3
 801e7b6:	697b      	ldr	r3, [r7, #20]
 801e7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e7bc:	b29b      	uxth	r3, r3
 801e7be:	4618      	mov	r0, r3
 801e7c0:	f7e1 feba 	bl	8000538 <__aeabi_i2d>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	460b      	mov	r3, r1
 801e7c8:	4620      	mov	r0, r4
 801e7ca:	4629      	mov	r1, r5
 801e7cc:	f7e1 fd68 	bl	80002a0 <__adddf3>
 801e7d0:	4603      	mov	r3, r0
 801e7d2:	460c      	mov	r4, r1
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	4621      	mov	r1, r4
 801e7d8:	f7e2 f9f0 	bl	8000bbc <__aeabi_d2uiz>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	b29a      	uxth	r2, r3
 801e7e0:	697b      	ldr	r3, [r7, #20]
 801e7e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801e7e6:	e05a      	b.n	801e89e <chirp_controller_read_command+0xde6>
            }
            else if (i < 55)
 801e7e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e7ec:	2b36      	cmp	r3, #54	; 0x36
 801e7ee:	d856      	bhi.n	801e89e <chirp_controller_read_command+0xde6>
            {
              if ((data >= '0') && (data <= '9'))
 801e7f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e7f4:	2b2f      	cmp	r3, #47	; 0x2f
 801e7f6:	d909      	bls.n	801e80c <chirp_controller_read_command+0xd54>
 801e7f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e7fc:	2b39      	cmp	r3, #57	; 0x39
 801e7fe:	d805      	bhi.n	801e80c <chirp_controller_read_command+0xd54>
                data = data - '0';
 801e800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e804:	3b30      	subs	r3, #48	; 0x30
 801e806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e80a:	e004      	b.n	801e816 <chirp_controller_read_command+0xd5e>
              else
                data = 10 + data - 'A';
 801e80c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e810:	3b37      	subs	r3, #55	; 0x37
 801e812:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->firmware_md5[(i - 23) / 2] += data * pow(16,((i - 22) % 2));
 801e816:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e81a:	4618      	mov	r0, r3
 801e81c:	f7e1 fe8c 	bl	8000538 <__aeabi_i2d>
 801e820:	4604      	mov	r4, r0
 801e822:	460d      	mov	r5, r1
 801e824:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e828:	3b16      	subs	r3, #22
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	f003 0301 	and.w	r3, r3, #1
 801e830:	bfb8      	it	lt
 801e832:	425b      	neglt	r3, r3
 801e834:	4618      	mov	r0, r3
 801e836:	f7e1 fe7f 	bl	8000538 <__aeabi_i2d>
 801e83a:	4602      	mov	r2, r0
 801e83c:	460b      	mov	r3, r1
 801e83e:	ec43 2b11 	vmov	d1, r2, r3
 801e842:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 801eb18 <chirp_controller_read_command+0x1060>
 801e846:	f005 fb67 	bl	8023f18 <pow>
 801e84a:	ec53 2b10 	vmov	r2, r3, d0
 801e84e:	4620      	mov	r0, r4
 801e850:	4629      	mov	r1, r5
 801e852:	f7e1 fedb 	bl	800060c <__aeabi_dmul>
 801e856:	4603      	mov	r3, r0
 801e858:	460c      	mov	r4, r1
 801e85a:	461d      	mov	r5, r3
 801e85c:	4626      	mov	r6, r4
 801e85e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e862:	3b17      	subs	r3, #23
 801e864:	0fda      	lsrs	r2, r3, #31
 801e866:	4413      	add	r3, r2
 801e868:	105b      	asrs	r3, r3, #1
 801e86a:	461c      	mov	r4, r3
 801e86c:	697b      	ldr	r3, [r7, #20]
 801e86e:	4423      	add	r3, r4
 801e870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e874:	4618      	mov	r0, r3
 801e876:	f7e1 fe5f 	bl	8000538 <__aeabi_i2d>
 801e87a:	4602      	mov	r2, r0
 801e87c:	460b      	mov	r3, r1
 801e87e:	4628      	mov	r0, r5
 801e880:	4631      	mov	r1, r6
 801e882:	f7e1 fd0d 	bl	80002a0 <__adddf3>
 801e886:	4602      	mov	r2, r0
 801e888:	460b      	mov	r3, r1
 801e88a:	4610      	mov	r0, r2
 801e88c:	4619      	mov	r1, r3
 801e88e:	f7e2 f995 	bl	8000bbc <__aeabi_d2uiz>
 801e892:	4603      	mov	r3, r0
 801e894:	b2da      	uxtb	r2, r3
 801e896:	697b      	ldr	r3, [r7, #20]
 801e898:	4423      	add	r3, r4
 801e89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        for (i = 0; i < rxbuffer_len; i++)
 801e89e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e8a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801e8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	f4ff adb8 	bcc.w	801e426 <chirp_controller_read_command+0x96e>
            }
          }
        }
        PRINTF("MX_DISSEMINATE:%d, %d, %lu, %lu, %d, %lu\n", chirp_outl->patch_update, chirp_outl->patch_bank, chirp_outl->old_firmware_size, chirp_outl->firmware_size, chirp_outl->version_hash, chirp_outl->file_compression);
 801e8b6:	697b      	ldr	r3, [r7, #20]
 801e8b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e8bc:	461c      	mov	r4, r3
 801e8be:	697b      	ldr	r3, [r7, #20]
 801e8c0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801e8c4:	461d      	mov	r5, r3
 801e8c6:	697b      	ldr	r3, [r7, #20]
 801e8c8:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 801e8cc:	697b      	ldr	r3, [r7, #20]
 801e8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e8d0:	697a      	ldr	r2, [r7, #20]
 801e8d2:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 801e8d6:	b292      	uxth	r2, r2
 801e8d8:	4610      	mov	r0, r2
 801e8da:	697a      	ldr	r2, [r7, #20]
 801e8dc:	f8d2 2052 	ldr.w	r2, [r2, #82]	; 0x52
 801e8e0:	9202      	str	r2, [sp, #8]
 801e8e2:	9001      	str	r0, [sp, #4]
 801e8e4:	9300      	str	r3, [sp, #0]
 801e8e6:	460b      	mov	r3, r1
 801e8e8:	462a      	mov	r2, r5
 801e8ea:	4621      	mov	r1, r4
 801e8ec:	488c      	ldr	r0, [pc, #560]	; (801eb20 <chirp_controller_read_command+0x1068>)
 801e8ee:	f003 fc59 	bl	80221a4 <iprintf>
        for (i = 0; i < 16; i++)
 801e8f2:	2300      	movs	r3, #0
 801e8f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e8f8:	e00e      	b.n	801e918 <chirp_controller_read_command+0xe60>
        {
          PRINTF("%02X", chirp_outl->firmware_md5[i]);
 801e8fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e8fe:	697a      	ldr	r2, [r7, #20]
 801e900:	4413      	add	r3, r2
 801e902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e906:	4619      	mov	r1, r3
 801e908:	4886      	ldr	r0, [pc, #536]	; (801eb24 <chirp_controller_read_command+0x106c>)
 801e90a:	f003 fc4b 	bl	80221a4 <iprintf>
        for (i = 0; i < 16; i++)
 801e90e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e912:	3301      	adds	r3, #1
 801e914:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e918:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e91c:	2b0f      	cmp	r3, #15
 801e91e:	d9ec      	bls.n	801e8fa <chirp_controller_read_command+0xe42>
        }
        PRINTF("\n");
 801e920:	200a      	movs	r0, #10
 801e922:	f003 fc57 	bl	80221d4 <putchar>
        if (!chirp_outl->patch_update)
 801e926:	697b      	ldr	r3, [r7, #20]
 801e928:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	f040 8250 	bne.w	801edd2 <chirp_controller_read_command+0x131a>
        {
          menu_preSend(1);
 801e932:	2001      	movs	r0, #1
 801e934:	f7fe fc00 	bl	801d138 <menu_preSend>
        }
        break;
 801e938:	e24b      	b.n	801edd2 <chirp_controller_read_command+0x131a>
      }
      case MX_COLLECT:
      {
        // "0807F800,08080000"
        memset(&(chirp_outl->collect_addr_start), 0, offsetof(Chirp_Outl, sf) - offsetof(Chirp_Outl, collect_addr_start));
 801e93a:	697b      	ldr	r3, [r7, #20]
 801e93c:	3369      	adds	r3, #105	; 0x69
 801e93e:	220c      	movs	r2, #12
 801e940:	2100      	movs	r1, #0
 801e942:	4618      	mov	r0, r3
 801e944:	f002 fe21 	bl	802158a <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801e948:	2300      	movs	r3, #0
 801e94a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e94e:	e0c0      	b.n	801ead2 <chirp_controller_read_command+0x101a>
        {
          data = (uint8_t)command_buffer[k++];
 801e950:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e954:	1c5a      	adds	r2, r3, #1
 801e956:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801e95a:	461a      	mov	r2, r3
 801e95c:	69fb      	ldr	r3, [r7, #28]
 801e95e:	4413      	add	r3, r2
 801e960:	781b      	ldrb	r3, [r3, #0]
 801e962:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801e966:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e96a:	2b2f      	cmp	r3, #47	; 0x2f
 801e96c:	d903      	bls.n	801e976 <chirp_controller_read_command+0xebe>
 801e96e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e972:	2b39      	cmp	r3, #57	; 0x39
 801e974:	d909      	bls.n	801e98a <chirp_controller_read_command+0xed2>
 801e976:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e97a:	2b40      	cmp	r3, #64	; 0x40
 801e97c:	f240 80a4 	bls.w	801eac8 <chirp_controller_read_command+0x1010>
 801e980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e984:	2b46      	cmp	r3, #70	; 0x46
 801e986:	f200 809f 	bhi.w	801eac8 <chirp_controller_read_command+0x1010>
          {
            if (i < 8)
 801e98a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e98e:	2b07      	cmp	r3, #7
 801e990:	d84b      	bhi.n	801ea2a <chirp_controller_read_command+0xf72>
            {
              pow_num = 7;
 801e992:	2307      	movs	r3, #7
 801e994:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801e996:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e99a:	2b2f      	cmp	r3, #47	; 0x2f
 801e99c:	d909      	bls.n	801e9b2 <chirp_controller_read_command+0xefa>
 801e99e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9a2:	2b39      	cmp	r3, #57	; 0x39
 801e9a4:	d805      	bhi.n	801e9b2 <chirp_controller_read_command+0xefa>
                data = data - '0';
 801e9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9aa:	3b30      	subs	r3, #48	; 0x30
 801e9ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e9b0:	e004      	b.n	801e9bc <chirp_controller_read_command+0xf04>
              else
                data = 10 + data - 'A';
 801e9b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9b6:	3b37      	subs	r3, #55	; 0x37
 801e9b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->collect_addr_start += data * pow(16,(pow_num-i));
 801e9bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	f7e1 fdb9 	bl	8000538 <__aeabi_i2d>
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	460d      	mov	r5, r1
 801e9ca:	7efa      	ldrb	r2, [r7, #27]
 801e9cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e9d0:	1ad3      	subs	r3, r2, r3
 801e9d2:	4618      	mov	r0, r3
 801e9d4:	f7e1 fdb0 	bl	8000538 <__aeabi_i2d>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	460b      	mov	r3, r1
 801e9dc:	ec43 2b11 	vmov	d1, r2, r3
 801e9e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801eb18 <chirp_controller_read_command+0x1060>
 801e9e4:	f005 fa98 	bl	8023f18 <pow>
 801e9e8:	ec53 2b10 	vmov	r2, r3, d0
 801e9ec:	4620      	mov	r0, r4
 801e9ee:	4629      	mov	r1, r5
 801e9f0:	f7e1 fe0c 	bl	800060c <__aeabi_dmul>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	460c      	mov	r4, r1
 801e9f8:	4625      	mov	r5, r4
 801e9fa:	461c      	mov	r4, r3
 801e9fc:	697b      	ldr	r3, [r7, #20]
 801e9fe:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 801ea02:	4618      	mov	r0, r3
 801ea04:	f7e1 fd88 	bl	8000518 <__aeabi_ui2d>
 801ea08:	4602      	mov	r2, r0
 801ea0a:	460b      	mov	r3, r1
 801ea0c:	4620      	mov	r0, r4
 801ea0e:	4629      	mov	r1, r5
 801ea10:	f7e1 fc46 	bl	80002a0 <__adddf3>
 801ea14:	4603      	mov	r3, r0
 801ea16:	460c      	mov	r4, r1
 801ea18:	4618      	mov	r0, r3
 801ea1a:	4621      	mov	r1, r4
 801ea1c:	f7e2 f8ce 	bl	8000bbc <__aeabi_d2uiz>
 801ea20:	4602      	mov	r2, r0
 801ea22:	697b      	ldr	r3, [r7, #20]
 801ea24:	f8c3 2069 	str.w	r2, [r3, #105]	; 0x69
 801ea28:	e04e      	b.n	801eac8 <chirp_controller_read_command+0x1010>
            }
            else if (i < 17) /* Frequency */
 801ea2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ea2e:	2b10      	cmp	r3, #16
 801ea30:	d84a      	bhi.n	801eac8 <chirp_controller_read_command+0x1010>
            {
              pow_num = 16;
 801ea32:	2310      	movs	r3, #16
 801ea34:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801ea36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea3a:	2b2f      	cmp	r3, #47	; 0x2f
 801ea3c:	d909      	bls.n	801ea52 <chirp_controller_read_command+0xf9a>
 801ea3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea42:	2b39      	cmp	r3, #57	; 0x39
 801ea44:	d805      	bhi.n	801ea52 <chirp_controller_read_command+0xf9a>
                data = data - '0';
 801ea46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea4a:	3b30      	subs	r3, #48	; 0x30
 801ea4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ea50:	e004      	b.n	801ea5c <chirp_controller_read_command+0xfa4>
              else
                data = 10 + data - 'A';
 801ea52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea56:	3b37      	subs	r3, #55	; 0x37
 801ea58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->collect_addr_end += data * pow(16,(pow_num-i));
 801ea5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea60:	4618      	mov	r0, r3
 801ea62:	f7e1 fd69 	bl	8000538 <__aeabi_i2d>
 801ea66:	4604      	mov	r4, r0
 801ea68:	460d      	mov	r5, r1
 801ea6a:	7efa      	ldrb	r2, [r7, #27]
 801ea6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ea70:	1ad3      	subs	r3, r2, r3
 801ea72:	4618      	mov	r0, r3
 801ea74:	f7e1 fd60 	bl	8000538 <__aeabi_i2d>
 801ea78:	4602      	mov	r2, r0
 801ea7a:	460b      	mov	r3, r1
 801ea7c:	ec43 2b11 	vmov	d1, r2, r3
 801ea80:	ed9f 0b25 	vldr	d0, [pc, #148]	; 801eb18 <chirp_controller_read_command+0x1060>
 801ea84:	f005 fa48 	bl	8023f18 <pow>
 801ea88:	ec53 2b10 	vmov	r2, r3, d0
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	4629      	mov	r1, r5
 801ea90:	f7e1 fdbc 	bl	800060c <__aeabi_dmul>
 801ea94:	4603      	mov	r3, r0
 801ea96:	460c      	mov	r4, r1
 801ea98:	4625      	mov	r5, r4
 801ea9a:	461c      	mov	r4, r3
 801ea9c:	697b      	ldr	r3, [r7, #20]
 801ea9e:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	f7e1 fd38 	bl	8000518 <__aeabi_ui2d>
 801eaa8:	4602      	mov	r2, r0
 801eaaa:	460b      	mov	r3, r1
 801eaac:	4620      	mov	r0, r4
 801eaae:	4629      	mov	r1, r5
 801eab0:	f7e1 fbf6 	bl	80002a0 <__adddf3>
 801eab4:	4603      	mov	r3, r0
 801eab6:	460c      	mov	r4, r1
 801eab8:	4618      	mov	r0, r3
 801eaba:	4621      	mov	r1, r4
 801eabc:	f7e2 f87e 	bl	8000bbc <__aeabi_d2uiz>
 801eac0:	4602      	mov	r2, r0
 801eac2:	697b      	ldr	r3, [r7, #20]
 801eac4:	f8c3 206d 	str.w	r2, [r3, #109]	; 0x6d
        for (i = 0; i < rxbuffer_len; i++)
 801eac8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eacc:	3301      	adds	r3, #1
 801eace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ead2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ead6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eada:	429a      	cmp	r2, r3
 801eadc:	f4ff af38 	bcc.w	801e950 <chirp_controller_read_command+0xe98>
            }
          }
        }

        PRINTF("Start address: 0x%x, End address: 0x%x\n", chirp_outl->collect_addr_start, chirp_outl->collect_addr_end);
 801eae0:	697b      	ldr	r3, [r7, #20]
 801eae2:	f8d3 1069 	ldr.w	r1, [r3, #105]	; 0x69
 801eae6:	697b      	ldr	r3, [r7, #20]
 801eae8:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801eaec:	461a      	mov	r2, r3
 801eaee:	480e      	ldr	r0, [pc, #56]	; (801eb28 <chirp_controller_read_command+0x1070>)
 801eaf0:	f003 fb58 	bl	80221a4 <iprintf>
        break;
 801eaf4:	e16e      	b.n	801edd4 <chirp_controller_read_command+0x131c>
      }
      case CHIRP_CONNECTIVITY:
      {
        // "09,478600,-01"
        uint8_t tx_sign = 0;
 801eaf6:	2300      	movs	r3, #0
 801eaf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        memset(&(chirp_outl->sf), 0, offsetof(Chirp_Outl, chirp_energy) - offsetof(Chirp_Outl, sf));
 801eafc:	697b      	ldr	r3, [r7, #20]
 801eafe:	3375      	adds	r3, #117	; 0x75
 801eb00:	2207      	movs	r2, #7
 801eb02:	2100      	movs	r1, #0
 801eb04:	4618      	mov	r0, r3
 801eb06:	f002 fd40 	bl	802158a <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801eb0a:	2300      	movs	r3, #0
 801eb0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801eb10:	e134      	b.n	801ed7c <chirp_controller_read_command+0x12c4>
 801eb12:	bf00      	nop
 801eb14:	f3af 8000 	nop.w
 801eb18:	00000000 	.word	0x00000000
 801eb1c:	40300000 	.word	0x40300000
 801eb20:	08026500 	.word	0x08026500
 801eb24:	0802652c 	.word	0x0802652c
 801eb28:	08026534 	.word	0x08026534
        {
          data = (uint8_t)command_buffer[k++] - '0';
 801eb2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801eb30:	1c5a      	adds	r2, r3, #1
 801eb32:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801eb36:	461a      	mov	r2, r3
 801eb38:	69fb      	ldr	r3, [r7, #28]
 801eb3a:	4413      	add	r3, r2
 801eb3c:	781b      	ldrb	r3, [r3, #0]
 801eb3e:	3b30      	subs	r3, #48	; 0x30
 801eb40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= 0) && (data <= 9)) || (data == (uint8_t)('-' - '0')) || (data == (uint8_t)('+' - '0')))
 801eb44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb48:	2b09      	cmp	r3, #9
 801eb4a:	d908      	bls.n	801eb5e <chirp_controller_read_command+0x10a6>
 801eb4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb50:	2bfd      	cmp	r3, #253	; 0xfd
 801eb52:	d004      	beq.n	801eb5e <chirp_controller_read_command+0x10a6>
 801eb54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb58:	2bfb      	cmp	r3, #251	; 0xfb
 801eb5a:	f040 810a 	bne.w	801ed72 <chirp_controller_read_command+0x12ba>
          {
            if (i < 2) /* SF */
 801eb5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eb62:	2b01      	cmp	r3, #1
 801eb64:	d839      	bhi.n	801ebda <chirp_controller_read_command+0x1122>
            {
              pow_num = 1;
 801eb66:	2301      	movs	r3, #1
 801eb68:	76fb      	strb	r3, [r7, #27]
              chirp_outl->sf += data * pow(10,(pow_num-i));
 801eb6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7e1 fce2 	bl	8000538 <__aeabi_i2d>
 801eb74:	4604      	mov	r4, r0
 801eb76:	460d      	mov	r5, r1
 801eb78:	7efa      	ldrb	r2, [r7, #27]
 801eb7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eb7e:	1ad3      	subs	r3, r2, r3
 801eb80:	4618      	mov	r0, r3
 801eb82:	f7e1 fcd9 	bl	8000538 <__aeabi_i2d>
 801eb86:	4602      	mov	r2, r0
 801eb88:	460b      	mov	r3, r1
 801eb8a:	ec43 2b11 	vmov	d1, r2, r3
 801eb8e:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801ede8 <chirp_controller_read_command+0x1330>
 801eb92:	f005 f9c1 	bl	8023f18 <pow>
 801eb96:	ec53 2b10 	vmov	r2, r3, d0
 801eb9a:	4620      	mov	r0, r4
 801eb9c:	4629      	mov	r1, r5
 801eb9e:	f7e1 fd35 	bl	800060c <__aeabi_dmul>
 801eba2:	4603      	mov	r3, r0
 801eba4:	460c      	mov	r4, r1
 801eba6:	4625      	mov	r5, r4
 801eba8:	461c      	mov	r4, r3
 801ebaa:	697b      	ldr	r3, [r7, #20]
 801ebac:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f7e1 fcc1 	bl	8000538 <__aeabi_i2d>
 801ebb6:	4602      	mov	r2, r0
 801ebb8:	460b      	mov	r3, r1
 801ebba:	4620      	mov	r0, r4
 801ebbc:	4629      	mov	r1, r5
 801ebbe:	f7e1 fb6f 	bl	80002a0 <__adddf3>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	460c      	mov	r4, r1
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	4621      	mov	r1, r4
 801ebca:	f7e1 fff7 	bl	8000bbc <__aeabi_d2uiz>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	b2da      	uxtb	r2, r3
 801ebd2:	697b      	ldr	r3, [r7, #20]
 801ebd4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801ebd8:	e0cb      	b.n	801ed72 <chirp_controller_read_command+0x12ba>
            }
            else if (i < 9) /* Frequency */
 801ebda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ebde:	2b08      	cmp	r3, #8
 801ebe0:	d838      	bhi.n	801ec54 <chirp_controller_read_command+0x119c>
            {
              pow_num = 8;
 801ebe2:	2308      	movs	r3, #8
 801ebe4:	76fb      	strb	r3, [r7, #27]
              chirp_outl->freq += data * pow(10,(pow_num-i));
 801ebe6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebea:	4618      	mov	r0, r3
 801ebec:	f7e1 fca4 	bl	8000538 <__aeabi_i2d>
 801ebf0:	4604      	mov	r4, r0
 801ebf2:	460d      	mov	r5, r1
 801ebf4:	7efa      	ldrb	r2, [r7, #27]
 801ebf6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ebfa:	1ad3      	subs	r3, r2, r3
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7e1 fc9b 	bl	8000538 <__aeabi_i2d>
 801ec02:	4602      	mov	r2, r0
 801ec04:	460b      	mov	r3, r1
 801ec06:	ec43 2b11 	vmov	d1, r2, r3
 801ec0a:	ed9f 0b77 	vldr	d0, [pc, #476]	; 801ede8 <chirp_controller_read_command+0x1330>
 801ec0e:	f005 f983 	bl	8023f18 <pow>
 801ec12:	ec53 2b10 	vmov	r2, r3, d0
 801ec16:	4620      	mov	r0, r4
 801ec18:	4629      	mov	r1, r5
 801ec1a:	f7e1 fcf7 	bl	800060c <__aeabi_dmul>
 801ec1e:	4603      	mov	r3, r0
 801ec20:	460c      	mov	r4, r1
 801ec22:	4625      	mov	r5, r4
 801ec24:	461c      	mov	r4, r3
 801ec26:	697b      	ldr	r3, [r7, #20]
 801ec28:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f7e1 fc73 	bl	8000518 <__aeabi_ui2d>
 801ec32:	4602      	mov	r2, r0
 801ec34:	460b      	mov	r3, r1
 801ec36:	4620      	mov	r0, r4
 801ec38:	4629      	mov	r1, r5
 801ec3a:	f7e1 fb31 	bl	80002a0 <__adddf3>
 801ec3e:	4603      	mov	r3, r0
 801ec40:	460c      	mov	r4, r1
 801ec42:	4618      	mov	r0, r3
 801ec44:	4621      	mov	r1, r4
 801ec46:	f7e1 ffb9 	bl	8000bbc <__aeabi_d2uiz>
 801ec4a:	4602      	mov	r2, r0
 801ec4c:	697b      	ldr	r3, [r7, #20]
 801ec4e:	f8c3 2076 	str.w	r2, [r3, #118]	; 0x76
 801ec52:	e08e      	b.n	801ed72 <chirp_controller_read_command+0x12ba>
            }
            else if (i < 13) /* Tx power */
 801ec54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ec58:	2b0c      	cmp	r3, #12
 801ec5a:	d84d      	bhi.n	801ecf8 <chirp_controller_read_command+0x1240>
            {
              pow_num = 12;
 801ec5c:	230c      	movs	r3, #12
 801ec5e:	76fb      	strb	r3, [r7, #27]
              if (i < 11)
 801ec60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ec64:	2b0a      	cmp	r3, #10
 801ec66:	d80f      	bhi.n	801ec88 <chirp_controller_read_command+0x11d0>
              {
                if (data == (uint8_t)('-' - '0'))
 801ec68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec6c:	2bfd      	cmp	r3, #253	; 0xfd
 801ec6e:	d103      	bne.n	801ec78 <chirp_controller_read_command+0x11c0>
                  tx_sign = 0;
 801ec70:	2300      	movs	r3, #0
 801ec72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801ec76:	e07c      	b.n	801ed72 <chirp_controller_read_command+0x12ba>
                else if (data == (uint8_t)('+' - '0'))
 801ec78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec7c:	2bfb      	cmp	r3, #251	; 0xfb
 801ec7e:	d178      	bne.n	801ed72 <chirp_controller_read_command+0x12ba>
                  tx_sign = 1;
 801ec80:	2301      	movs	r3, #1
 801ec82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801ec86:	e074      	b.n	801ed72 <chirp_controller_read_command+0x12ba>
              }
              else
                chirp_outl->tx_power += data * pow(10,(pow_num-i));
 801ec88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec8c:	4618      	mov	r0, r3
 801ec8e:	f7e1 fc53 	bl	8000538 <__aeabi_i2d>
 801ec92:	4604      	mov	r4, r0
 801ec94:	460d      	mov	r5, r1
 801ec96:	7efa      	ldrb	r2, [r7, #27]
 801ec98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ec9c:	1ad3      	subs	r3, r2, r3
 801ec9e:	4618      	mov	r0, r3
 801eca0:	f7e1 fc4a 	bl	8000538 <__aeabi_i2d>
 801eca4:	4602      	mov	r2, r0
 801eca6:	460b      	mov	r3, r1
 801eca8:	ec43 2b11 	vmov	d1, r2, r3
 801ecac:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 801ede8 <chirp_controller_read_command+0x1330>
 801ecb0:	f005 f932 	bl	8023f18 <pow>
 801ecb4:	ec53 2b10 	vmov	r2, r3, d0
 801ecb8:	4620      	mov	r0, r4
 801ecba:	4629      	mov	r1, r5
 801ecbc:	f7e1 fca6 	bl	800060c <__aeabi_dmul>
 801ecc0:	4603      	mov	r3, r0
 801ecc2:	460c      	mov	r4, r1
 801ecc4:	4625      	mov	r5, r4
 801ecc6:	461c      	mov	r4, r3
 801ecc8:	697b      	ldr	r3, [r7, #20]
 801ecca:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801ecce:	4618      	mov	r0, r3
 801ecd0:	f7e1 fc32 	bl	8000538 <__aeabi_i2d>
 801ecd4:	4602      	mov	r2, r0
 801ecd6:	460b      	mov	r3, r1
 801ecd8:	4620      	mov	r0, r4
 801ecda:	4629      	mov	r1, r5
 801ecdc:	f7e1 fae0 	bl	80002a0 <__adddf3>
 801ece0:	4603      	mov	r3, r0
 801ece2:	460c      	mov	r4, r1
 801ece4:	4618      	mov	r0, r3
 801ece6:	4621      	mov	r1, r4
 801ece8:	f7e1 ff40 	bl	8000b6c <__aeabi_d2iz>
 801ecec:	4603      	mov	r3, r0
 801ecee:	b25a      	sxtb	r2, r3
 801ecf0:	697b      	ldr	r3, [r7, #20]
 801ecf2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 801ecf6:	e03c      	b.n	801ed72 <chirp_controller_read_command+0x12ba>
            }
            else if (i < 17) /* Frequency */
 801ecf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ecfc:	2b10      	cmp	r3, #16
 801ecfe:	d838      	bhi.n	801ed72 <chirp_controller_read_command+0x12ba>
            {
              pow_num = 16;
 801ed00:	2310      	movs	r3, #16
 801ed02:	76fb      	strb	r3, [r7, #27]
              chirp_outl->topo_payload_len += data * pow(10,(pow_num-i));
 801ed04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed08:	4618      	mov	r0, r3
 801ed0a:	f7e1 fc15 	bl	8000538 <__aeabi_i2d>
 801ed0e:	4604      	mov	r4, r0
 801ed10:	460d      	mov	r5, r1
 801ed12:	7efa      	ldrb	r2, [r7, #27]
 801ed14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ed18:	1ad3      	subs	r3, r2, r3
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7e1 fc0c 	bl	8000538 <__aeabi_i2d>
 801ed20:	4602      	mov	r2, r0
 801ed22:	460b      	mov	r3, r1
 801ed24:	ec43 2b11 	vmov	d1, r2, r3
 801ed28:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 801ede8 <chirp_controller_read_command+0x1330>
 801ed2c:	f005 f8f4 	bl	8023f18 <pow>
 801ed30:	ec53 2b10 	vmov	r2, r3, d0
 801ed34:	4620      	mov	r0, r4
 801ed36:	4629      	mov	r1, r5
 801ed38:	f7e1 fc68 	bl	800060c <__aeabi_dmul>
 801ed3c:	4603      	mov	r3, r0
 801ed3e:	460c      	mov	r4, r1
 801ed40:	4625      	mov	r5, r4
 801ed42:	461c      	mov	r4, r3
 801ed44:	697b      	ldr	r3, [r7, #20]
 801ed46:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801ed4a:	4618      	mov	r0, r3
 801ed4c:	f7e1 fbf4 	bl	8000538 <__aeabi_i2d>
 801ed50:	4602      	mov	r2, r0
 801ed52:	460b      	mov	r3, r1
 801ed54:	4620      	mov	r0, r4
 801ed56:	4629      	mov	r1, r5
 801ed58:	f7e1 faa2 	bl	80002a0 <__adddf3>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	460c      	mov	r4, r1
 801ed60:	4618      	mov	r0, r3
 801ed62:	4621      	mov	r1, r4
 801ed64:	f7e1 ff2a 	bl	8000bbc <__aeabi_d2uiz>
 801ed68:	4603      	mov	r3, r0
 801ed6a:	b2da      	uxtb	r2, r3
 801ed6c:	697b      	ldr	r3, [r7, #20]
 801ed6e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        for (i = 0; i < rxbuffer_len; i++)
 801ed72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ed76:	3301      	adds	r3, #1
 801ed78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ed7c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ed80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ed84:	429a      	cmp	r2, r3
 801ed86:	f4ff aed1 	bcc.w	801eb2c <chirp_controller_read_command+0x1074>
            }
          }
        }

        if (!tx_sign)
 801ed8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d109      	bne.n	801eda6 <chirp_controller_read_command+0x12ee>
          chirp_outl->tx_power = 0 - chirp_outl->tx_power;
 801ed92:	697b      	ldr	r3, [r7, #20]
 801ed94:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801ed98:	b2db      	uxtb	r3, r3
 801ed9a:	425b      	negs	r3, r3
 801ed9c:	b2db      	uxtb	r3, r3
 801ed9e:	b25a      	sxtb	r2, r3
 801eda0:	697b      	ldr	r3, [r7, #20]
 801eda2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        PRINTF("Spreading factor: %d, Frequency at: %lu kHz, Tx power: %d, topo_payload_len: %d\n", chirp_outl->sf, chirp_outl->freq, chirp_outl->tx_power, chirp_outl->topo_payload_len);
 801eda6:	697b      	ldr	r3, [r7, #20]
 801eda8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801edac:	4619      	mov	r1, r3
 801edae:	697b      	ldr	r3, [r7, #20]
 801edb0:	f8d3 2076 	ldr.w	r2, [r3, #118]	; 0x76
 801edb4:	697b      	ldr	r3, [r7, #20]
 801edb6:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801edba:	4618      	mov	r0, r3
 801edbc:	697b      	ldr	r3, [r7, #20]
 801edbe:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801edc2:	9300      	str	r3, [sp, #0]
 801edc4:	4603      	mov	r3, r0
 801edc6:	480a      	ldr	r0, [pc, #40]	; (801edf0 <chirp_controller_read_command+0x1338>)
 801edc8:	f003 f9ec 	bl	80221a4 <iprintf>
        break;
 801edcc:	e002      	b.n	801edd4 <chirp_controller_read_command+0x131c>
      }
      default:
        break;
 801edce:	bf00      	nop
 801edd0:	e000      	b.n	801edd4 <chirp_controller_read_command+0x131c>
        break;
 801edd2:	bf00      	nop
  }
  free(command_buffer);
 801edd4:	69f8      	ldr	r0, [r7, #28]
 801edd6:	f002 fbc5 	bl	8021564 <free>
}
 801edda:	bf00      	nop
 801eddc:	3728      	adds	r7, #40	; 0x28
 801edde:	46bd      	mov	sp, r7
 801ede0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ede4:	f3af 8000 	nop.w
 801ede8:	00000000 	.word	0x00000000
 801edec:	40240000 	.word	0x40240000
 801edf0:	0802655c 	.word	0x0802655c

0801edf4 <Chirp_RSHash>:

uint32_t Chirp_RSHash(uint8_t* str, uint32_t len)
{
 801edf4:	b480      	push	{r7}
 801edf6:	b087      	sub	sp, #28
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	6078      	str	r0, [r7, #4]
 801edfc:	6039      	str	r1, [r7, #0]
    uint32_t b    = 378551;
 801edfe:	4b15      	ldr	r3, [pc, #84]	; (801ee54 <Chirp_RSHash+0x60>)
 801ee00:	60bb      	str	r3, [r7, #8]
    uint32_t a    = 63689;
 801ee02:	f64f 03c9 	movw	r3, #63689	; 0xf8c9
 801ee06:	617b      	str	r3, [r7, #20]
    uint32_t hash = 0;
 801ee08:	2300      	movs	r3, #0
 801ee0a:	613b      	str	r3, [r7, #16]
    uint32_t i    = 0;
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < len; str++, i++)
 801ee10:	2300      	movs	r3, #0
 801ee12:	60fb      	str	r3, [r7, #12]
 801ee14:	e012      	b.n	801ee3c <Chirp_RSHash+0x48>
    {
      hash = hash * a + (*str);
 801ee16:	693b      	ldr	r3, [r7, #16]
 801ee18:	697a      	ldr	r2, [r7, #20]
 801ee1a:	fb02 f303 	mul.w	r3, r2, r3
 801ee1e:	687a      	ldr	r2, [r7, #4]
 801ee20:	7812      	ldrb	r2, [r2, #0]
 801ee22:	4413      	add	r3, r2
 801ee24:	613b      	str	r3, [r7, #16]
      a    = a * b;
 801ee26:	697b      	ldr	r3, [r7, #20]
 801ee28:	68ba      	ldr	r2, [r7, #8]
 801ee2a:	fb02 f303 	mul.w	r3, r2, r3
 801ee2e:	617b      	str	r3, [r7, #20]
    for(i = 0; i < len; str++, i++)
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	3301      	adds	r3, #1
 801ee34:	607b      	str	r3, [r7, #4]
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	3301      	adds	r3, #1
 801ee3a:	60fb      	str	r3, [r7, #12]
 801ee3c:	68fa      	ldr	r2, [r7, #12]
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d3e8      	bcc.n	801ee16 <Chirp_RSHash+0x22>
    }

    return hash;
 801ee44:	693b      	ldr	r3, [r7, #16]
}
 801ee46:	4618      	mov	r0, r3
 801ee48:	371c      	adds	r7, #28
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee50:	4770      	bx	lr
 801ee52:	bf00      	nop
 801ee54:	0005c6b7 	.word	0x0005c6b7

0801ee58 <chirp_start>:
    // printf("a[i]:%lu, %lu\n", a[i], i);
  }
}

void chirp_start(uint8_t node_id, uint8_t network_num_nodes)
{
 801ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee5a:	b0ed      	sub	sp, #436	; 0x1b4
 801ee5c:	af06      	add	r7, sp, #24
 801ee5e:	4602      	mov	r2, r0
 801ee60:	f107 030f 	add.w	r3, r7, #15
 801ee64:	701a      	strb	r2, [r3, #0]
 801ee66:	f107 030e 	add.w	r3, r7, #14
 801ee6a:	460a      	mov	r2, r1
 801ee6c:	701a      	strb	r2, [r3, #0]
  gpi_watchdog_periodic();
 801ee6e:	f7ef f96b 	bl	800e148 <gpi_watchdog_periodic>
	Chirp_Outl chirp_outl;
  memset(&chirp_outl, 0, sizeof(Chirp_Outl));
 801ee72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee76:	22f4      	movs	r2, #244	; 0xf4
 801ee78:	2100      	movs	r1, #0
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	f002 fb85 	bl	802158a <memset>
  chirp_outl.default_freq = LORABAND;
 801ee80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee84:	2200      	movs	r2, #0
 801ee86:	f062 021f 	orn	r2, r2, #31
 801ee8a:	745a      	strb	r2, [r3, #17]
 801ee8c:	2200      	movs	r2, #0
 801ee8e:	f042 0204 	orr.w	r2, r2, #4
 801ee92:	749a      	strb	r2, [r3, #18]
 801ee94:	2200      	movs	r2, #0
 801ee96:	f042 0207 	orr.w	r2, r2, #7
 801ee9a:	74da      	strb	r2, [r3, #19]
 801ee9c:	2200      	movs	r2, #0
 801ee9e:	751a      	strb	r2, [r3, #20]

  #if MX_LBT_ACCESS
    memset(&chirp_config.lbt_init_time, 0, sizeof(chirp_config.lbt_init_time));
 801eea0:	2208      	movs	r2, #8
 801eea2:	2100      	movs	r1, #0
 801eea4:	48b1      	ldr	r0, [pc, #708]	; (801f16c <chirp_start+0x314>)
 801eea6:	f002 fb70 	bl	802158a <memset>
    chirp_config.lbt_channel_total = LBT_CHANNEL_NUM;
 801eeaa:	4bb1      	ldr	r3, [pc, #708]	; (801f170 <chirp_start+0x318>)
 801eeac:	220a      	movs	r2, #10
 801eeae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    int32_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 801eeb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801eeb6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    uint32_t m;
    for (m = sizeof(uint32_t) * 8; m-- > chirp_config.lbt_channel_total;)
 801eeba:	2320      	movs	r3, #32
 801eebc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 801eec0:	e004      	b.n	801eecc <chirp_start+0x74>
        mask >>= 1;
 801eec2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801eec6:	105b      	asrs	r3, r3, #1
 801eec8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    for (m = sizeof(uint32_t) * 8; m-- > chirp_config.lbt_channel_total;)
 801eecc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801eed0:	1e5a      	subs	r2, r3, #1
 801eed2:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 801eed6:	4aa6      	ldr	r2, [pc, #664]	; (801f170 <chirp_start+0x318>)
 801eed8:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 801eedc:	4293      	cmp	r3, r2
 801eede:	d8f0      	bhi.n	801eec2 <chirp_start+0x6a>
    chirp_config.lbt_channel_mask = ~(mask << 1);
 801eee0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801eee4:	005b      	lsls	r3, r3, #1
 801eee6:	43db      	mvns	r3, r3
 801eee8:	461a      	mov	r2, r3
 801eeea:	4ba1      	ldr	r3, [pc, #644]	; (801f170 <chirp_start+0x318>)
 801eeec:	659a      	str	r2, [r3, #88]	; 0x58
  Chirp_Time ds3231_time;
  time_t diff;
  time_t sleep_sec;

  Chirp_Time gps_time;
  chirp_config.lbt_channel_primary = 0;
 801eeee:	4ba0      	ldr	r3, [pc, #640]	; (801f170 <chirp_start+0x318>)
 801eef0:	2200      	movs	r2, #0
 801eef2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  uint8_t sync_channel_id = 0;
 801eef6:	2300      	movs	r3, #0
 801eef8:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  sync_channel_id = gps_time.chirp_min % LBT_CHANNEL_NUM;
 801eefc:	f107 0314 	add.w	r3, r7, #20
 801ef00:	799a      	ldrb	r2, [r3, #6]
 801ef02:	4b9c      	ldr	r3, [pc, #624]	; (801f174 <chirp_start+0x31c>)
 801ef04:	fba3 1302 	umull	r1, r3, r3, r2
 801ef08:	08d9      	lsrs	r1, r3, #3
 801ef0a:	460b      	mov	r3, r1
 801ef0c:	009b      	lsls	r3, r3, #2
 801ef0e:	440b      	add	r3, r1
 801ef10:	005b      	lsls	r3, r3, #1
 801ef12:	1ad3      	subs	r3, r2, r3
 801ef14:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  chirp_outl.glossy_gps_on = 1;
 801ef18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ef1c:	2201      	movs	r2, #1
 801ef1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  #if GPS_DATA
  GPS_Sleep(60);
 801ef22:	203c      	movs	r0, #60	; 0x3c
 801ef24:	f7eb fa36 	bl	800a394 <GPS_Sleep>
  gps_time = GPS_Get_Time();
 801ef28:	f107 0314 	add.w	r3, r7, #20
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	f7eb f881 	bl	800a034 <GPS_Get_Time>

  // gps_time = GPS_Get_Time();

  #endif

  PRINTF("---------Chirpbox---------\n");
 801ef32:	4891      	ldr	r0, [pc, #580]	; (801f178 <chirp_start+0x320>)
 801ef34:	f003 f9be 	bl	80222b4 <puts>
	while (1)
	{
    #if ENERGEST_CONF_ON
      energest_init();
 801ef38:	f7ef f910 	bl	800e15c <energest_init>
      memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 801ef3c:	2228      	movs	r2, #40	; 0x28
 801ef3e:	2100      	movs	r1, #0
 801ef40:	488e      	ldr	r0, [pc, #568]	; (801f17c <chirp_start+0x324>)
 801ef42:	f002 fb22 	bl	802158a <memset>
 801ef46:	4b8e      	ldr	r3, [pc, #568]	; (801f180 <chirp_start+0x328>)
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801ef4c:	4a8d      	ldr	r2, [pc, #564]	; (801f184 <chirp_start+0x32c>)
 801ef4e:	61d3      	str	r3, [r2, #28]
 801ef50:	4b8d      	ldr	r3, [pc, #564]	; (801f188 <chirp_start+0x330>)
 801ef52:	2201      	movs	r2, #1
 801ef54:	71da      	strb	r2, [r3, #7]
    #endif
    // just finish a task
    if (chirp_config.glossy_task == 2)
 801ef56:	4b86      	ldr	r3, [pc, #536]	; (801f170 <chirp_start+0x318>)
 801ef58:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801ef5c:	2b02      	cmp	r3, #2
 801ef5e:	f040 808d 	bne.w	801f07c <chirp_start+0x224>
    {
      DS3231_GetTime();
 801ef62:	f7f9 ffcb 	bl	8018efc <DS3231_GetTime>
      /* Set alarm */
      ds3231_time = DS3231_ShowTime();
 801ef66:	f107 041c 	add.w	r4, r7, #28
 801ef6a:	463b      	mov	r3, r7
 801ef6c:	4618      	mov	r0, r3
 801ef6e:	f7f9 ffdf 	bl	8018f30 <DS3231_ShowTime>
 801ef72:	463a      	mov	r2, r7
 801ef74:	4623      	mov	r3, r4
 801ef76:	6810      	ldr	r0, [r2, #0]
 801ef78:	6851      	ldr	r1, [r2, #4]
 801ef7a:	c303      	stmia	r3!, {r0, r1}
      sync_channel_id = (ds3231_time.chirp_min+1) % LBT_CHANNEL_NUM;
 801ef7c:	f107 031c 	add.w	r3, r7, #28
 801ef80:	799b      	ldrb	r3, [r3, #6]
 801ef82:	1c5a      	adds	r2, r3, #1
 801ef84:	4b81      	ldr	r3, [pc, #516]	; (801f18c <chirp_start+0x334>)
 801ef86:	fb83 1302 	smull	r1, r3, r3, r2
 801ef8a:	1099      	asrs	r1, r3, #2
 801ef8c:	17d3      	asrs	r3, r2, #31
 801ef8e:	1ac9      	subs	r1, r1, r3
 801ef90:	460b      	mov	r3, r1
 801ef92:	009b      	lsls	r3, r3, #2
 801ef94:	440b      	add	r3, r1
 801ef96:	005b      	lsls	r3, r3, #1
 801ef98:	1ad1      	subs	r1, r2, r3
 801ef9a:	460b      	mov	r3, r1
 801ef9c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
      if (node_id)
 801efa0:	f107 030f 	add.w	r3, r7, #15
 801efa4:	781b      	ldrb	r3, [r3, #0]
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d047      	beq.n	801f03a <chirp_start+0x1e2>
      {
        diff = GPS_Diff(&ds3231_time, 1970, 1, 1, 0, 0, 0);
 801efaa:	f107 001c 	add.w	r0, r7, #28
 801efae:	2300      	movs	r3, #0
 801efb0:	9302      	str	r3, [sp, #8]
 801efb2:	2300      	movs	r3, #0
 801efb4:	9301      	str	r3, [sp, #4]
 801efb6:	2300      	movs	r3, #0
 801efb8:	9300      	str	r3, [sp, #0]
 801efba:	2301      	movs	r3, #1
 801efbc:	2201      	movs	r2, #1
 801efbe:	f240 71b2 	movw	r1, #1970	; 0x7b2
 801efc2:	f7eb f8f3 	bl	800a1ac <GPS_Diff>
 801efc6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801efca:	e9c3 0100 	strd	r0, r1, [r3]
        sleep_sec = 60 - (time_t)(0 - diff) % 60;
 801efce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801efd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 801efd6:	4258      	negs	r0, r3
 801efd8:	eb64 0144 	sbc.w	r1, r4, r4, lsl #1
 801efdc:	f04f 023c 	mov.w	r2, #60	; 0x3c
 801efe0:	f04f 0300 	mov.w	r3, #0
 801efe4:	f7e1 fe0a 	bl	8000bfc <__aeabi_ldivmod>
 801efe8:	461c      	mov	r4, r3
 801efea:	4613      	mov	r3, r2
 801efec:	4619      	mov	r1, r3
 801efee:	4622      	mov	r2, r4
 801eff0:	f04f 033c 	mov.w	r3, #60	; 0x3c
 801eff4:	f04f 0400 	mov.w	r4, #0
 801eff8:	1a5b      	subs	r3, r3, r1
 801effa:	eb64 0402 	sbc.w	r4, r4, r2
 801effe:	461d      	mov	r5, r3
 801f000:	4626      	mov	r6, r4
 801f002:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f006:	e9c3 5600 	strd	r5, r6, [r3]
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f00a:	4b5f      	ldr	r3, [pc, #380]	; (801f188 <chirp_start+0x330>)
 801f00c:	79db      	ldrb	r3, [r3, #7]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d00d      	beq.n	801f02e <chirp_start+0x1d6>
 801f012:	4b5b      	ldr	r3, [pc, #364]	; (801f180 <chirp_start+0x328>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f018:	4b5a      	ldr	r3, [pc, #360]	; (801f184 <chirp_start+0x32c>)
 801f01a:	69db      	ldr	r3, [r3, #28]
 801f01c:	1ad2      	subs	r2, r2, r3
 801f01e:	4b5c      	ldr	r3, [pc, #368]	; (801f190 <chirp_start+0x338>)
 801f020:	69db      	ldr	r3, [r3, #28]
 801f022:	4413      	add	r3, r2
 801f024:	4a5a      	ldr	r2, [pc, #360]	; (801f190 <chirp_start+0x338>)
 801f026:	61d3      	str	r3, [r2, #28]
 801f028:	4b57      	ldr	r3, [pc, #348]	; (801f188 <chirp_start+0x330>)
 801f02a:	2200      	movs	r2, #0
 801f02c:	71da      	strb	r2, [r3, #7]
        #endif
        RTC_Waiting_Count(sleep_sec);
 801f02e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f032:	4618      	mov	r0, r3
 801f034:	f7eb fc66 	bl	800a904 <RTC_Waiting_Count>
 801f038:	e002      	b.n	801f040 <chirp_start+0x1e8>
      }
      else
      {
          GPS_Sleep(60);
 801f03a:	203c      	movs	r0, #60	; 0x3c
 801f03c:	f7eb f9aa 	bl	800a394 <GPS_Sleep>
 801f040:	4b4f      	ldr	r3, [pc, #316]	; (801f180 <chirp_start+0x328>)
 801f042:	681b      	ldr	r3, [r3, #0]
 801f044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      }
    #if ENERGEST_CONF_ON
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801f046:	4a4f      	ldr	r2, [pc, #316]	; (801f184 <chirp_start+0x32c>)
 801f048:	61d3      	str	r3, [r2, #28]
 801f04a:	4b4f      	ldr	r3, [pc, #316]	; (801f188 <chirp_start+0x330>)
 801f04c:	2201      	movs	r2, #1
 801f04e:	71da      	strb	r2, [r3, #7]
      energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(sleep_sec));
 801f050:	2009      	movs	r0, #9
 801f052:	f7ef f8ad 	bl	800e1b0 <energest_type_time>
 801f056:	4601      	mov	r1, r0
 801f058:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f05c:	4a4d      	ldr	r2, [pc, #308]	; (801f194 <chirp_start+0x33c>)
 801f05e:	fb02 f303 	mul.w	r3, r2, r3
 801f062:	440b      	add	r3, r1
 801f064:	4619      	mov	r1, r3
 801f066:	2009      	movs	r0, #9
 801f068:	f7ef f8d6 	bl	800e218 <energest_type_set>
      Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801f06c:	2009      	movs	r0, #9
 801f06e:	f7ef f89f 	bl	800e1b0 <energest_type_time>
 801f072:	4603      	mov	r3, r0
 801f074:	4619      	mov	r1, r3
 801f076:	2009      	movs	r0, #9
 801f078:	f7eb fd4e 	bl	800ab18 <Stats_value_debug>
    #endif
    }

		/* MX_GLOSSY (sync) */
		chirp_outl.task = MX_GLOSSY;
 801f07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f080:	2207      	movs	r2, #7
 801f082:	701a      	strb	r2, [r3, #0]
		chirp_outl.arrange_task = MX_GLOSSY;
 801f084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f088:	2207      	movs	r2, #7
 801f08a:	719a      	strb	r2, [r3, #6]

		PRINTF("---------MX_GLOSSY---------\n");
 801f08c:	4842      	ldr	r0, [pc, #264]	; (801f198 <chirp_start+0x340>)
 801f08e:	f003 f911 	bl	80222b4 <puts>
		// TODO: glossy without mixer payload
		chirp_outl.num_nodes = network_num_nodes;
 801f092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f096:	f107 020e 	add.w	r2, r7, #14
 801f09a:	7812      	ldrb	r2, [r2, #0]
 801f09c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		chirp_outl.generation_size = 0;
 801f0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		chirp_outl.payload_len = 0;
 801f0aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		chirp_outl.round_setup = 0;
 801f0b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	715a      	strb	r2, [r3, #5]
		chirp_outl.round_max = 0;
 801f0bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	70da      	strb	r2, [r3, #3]
 801f0c4:	2200      	movs	r2, #0
 801f0c6:	711a      	strb	r2, [r3, #4]
		chirp_outl.file_chunk_len = 0;
 801f0c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	875a      	strh	r2, [r3, #58]	; 0x3a

		chirp_radio_config(12, 7, 1, 8, 14, chirp_outl.default_freq);
 801f0d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0d4:	f8d3 3011 	ldr.w	r3, [r3, #17]
 801f0d8:	9301      	str	r3, [sp, #4]
 801f0da:	230e      	movs	r3, #14
 801f0dc:	9300      	str	r3, [sp, #0]
 801f0de:	2308      	movs	r3, #8
 801f0e0:	2201      	movs	r2, #1
 801f0e2:	2107      	movs	r1, #7
 801f0e4:	200c      	movs	r0, #12
 801f0e6:	f7f3 fea1 	bl	8012e2c <chirp_radio_config>
		chirp_packet_config(chirp_outl.num_nodes, 0, 0, FLOODING);
 801f0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f0ee:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801f0f2:	2301      	movs	r3, #1
 801f0f4:	2200      	movs	r2, #0
 801f0f6:	2100      	movs	r1, #0
 801f0f8:	f7f3 fc32 	bl	8012960 <chirp_packet_config>
    chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, 8);
 801f0fc:	4b1c      	ldr	r3, [pc, #112]	; (801f170 <chirp_start+0x318>)
 801f0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f102:	4618      	mov	r0, r3
 801f104:	4b1a      	ldr	r3, [pc, #104]	; (801f170 <chirp_start+0x318>)
 801f106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f10a:	4619      	mov	r1, r3
 801f10c:	2308      	movs	r3, #8
 801f10e:	9301      	str	r3, [sp, #4]
 801f110:	2308      	movs	r3, #8
 801f112:	9300      	str	r3, [sp, #0]
 801f114:	2300      	movs	r3, #0
 801f116:	2201      	movs	r2, #1
 801f118:	f7ed ff38 	bl	800cf8c <SX1276GetPacketTime>
 801f11c:	4603      	mov	r3, r0
 801f11e:	461a      	mov	r2, r3
 801f120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f124:	f8c3 2007 	str.w	r2, [r3, #7]
    chirp_slot_config(chirp_outl.packet_time + 100000, 12, 10000000);
 801f128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f12c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801f130:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801f134:	33a0      	adds	r3, #160	; 0xa0
 801f136:	4a19      	ldr	r2, [pc, #100]	; (801f19c <chirp_start+0x344>)
 801f138:	210c      	movs	r1, #12
 801f13a:	4618      	mov	r0, r3
 801f13c:	f7f3 fe0a 	bl	8012d54 <chirp_slot_config>

    chirp_config.glossy_task = 0;
 801f140:	4b0b      	ldr	r3, [pc, #44]	; (801f170 <chirp_start+0x318>)
 801f142:	2200      	movs	r2, #0
 801f144:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    if (!node_id)
 801f148:	f107 030f 	add.w	r3, r7, #15
 801f14c:	781b      	ldrb	r3, [r3, #0]
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d12a      	bne.n	801f1a8 <chirp_start+0x350>
    {
      if (!menu_wait_task(&chirp_outl))
 801f152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f156:	4618      	mov	r0, r3
 801f158:	f7fe fa0a 	bl	801d570 <menu_wait_task>
 801f15c:	4603      	mov	r3, r0
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d11e      	bne.n	801f1a0 <chirp_start+0x348>
        chirp_config.glossy_task = 1;
 801f162:	4b03      	ldr	r3, [pc, #12]	; (801f170 <chirp_start+0x318>)
 801f164:	2201      	movs	r2, #1
 801f166:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 801f16a:	e01d      	b.n	801f1a8 <chirp_start+0x350>
 801f16c:	20001494 	.word	0x20001494
 801f170:	20001430 	.word	0x20001430
 801f174:	cccccccd 	.word	0xcccccccd
 801f178:	080265b0 	.word	0x080265b0
 801f17c:	20000d00 	.word	0x20000d00
 801f180:	200012c8 	.word	0x200012c8
 801f184:	20001308 	.word	0x20001308
 801f188:	2000112c 	.word	0x2000112c
 801f18c:	66666667 	.word	0x66666667
 801f190:	20000f10 	.word	0x20000f10
 801f194:	00f42400 	.word	0x00f42400
 801f198:	080265cc 	.word	0x080265cc
 801f19c:	00989680 	.word	0x00989680
      else
        chirp_config.glossy_task = 2;
 801f1a0:	4bb9      	ldr	r3, [pc, #740]	; (801f488 <chirp_start+0x630>)
 801f1a2:	2202      	movs	r2, #2
 801f1a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    }

    PRINTF("chirp_config.glossy_task:%d\n", chirp_config.glossy_task);
 801f1a8:	4bb7      	ldr	r3, [pc, #732]	; (801f488 <chirp_start+0x630>)
 801f1aa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f1ae:	4619      	mov	r1, r3
 801f1b0:	48b6      	ldr	r0, [pc, #728]	; (801f48c <chirp_start+0x634>)
 801f1b2:	f002 fff7 	bl	80221a4 <iprintf>
    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f1b6:	4bb6      	ldr	r3, [pc, #728]	; (801f490 <chirp_start+0x638>)
 801f1b8:	79db      	ldrb	r3, [r3, #7]
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d00d      	beq.n	801f1da <chirp_start+0x382>
 801f1be:	4bb5      	ldr	r3, [pc, #724]	; (801f494 <chirp_start+0x63c>)
 801f1c0:	681b      	ldr	r3, [r3, #0]
 801f1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f1c4:	4bb4      	ldr	r3, [pc, #720]	; (801f498 <chirp_start+0x640>)
 801f1c6:	69db      	ldr	r3, [r3, #28]
 801f1c8:	1ad2      	subs	r2, r2, r3
 801f1ca:	4bb4      	ldr	r3, [pc, #720]	; (801f49c <chirp_start+0x644>)
 801f1cc:	69db      	ldr	r3, [r3, #28]
 801f1ce:	4413      	add	r3, r2
 801f1d0:	4ab2      	ldr	r2, [pc, #712]	; (801f49c <chirp_start+0x644>)
 801f1d2:	61d3      	str	r3, [r2, #28]
 801f1d4:	4bae      	ldr	r3, [pc, #696]	; (801f490 <chirp_start+0x638>)
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	71da      	strb	r2, [r3, #7]
      Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801f1da:	2007      	movs	r0, #7
 801f1dc:	f7ee ffe8 	bl	800e1b0 <energest_type_time>
 801f1e0:	4603      	mov	r3, r0
 801f1e2:	4619      	mov	r1, r3
 801f1e4:	2007      	movs	r0, #7
 801f1e6:	f7eb fc97 	bl	800ab18 <Stats_value_debug>
    #endif
    sync_channel_id = 0;
 801f1ea:	2300      	movs	r3, #0
 801f1ec:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
    chirp_config.lbt_channel_primary = sync_channel_id;
 801f1f0:	4aa5      	ldr	r2, [pc, #660]	; (801f488 <chirp_start+0x630>)
 801f1f2:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 801f1f6:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
    SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 801f1fa:	4ba3      	ldr	r3, [pc, #652]	; (801f488 <chirp_start+0x630>)
 801f1fc:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 801f200:	4aa1      	ldr	r2, [pc, #644]	; (801f488 <chirp_start+0x630>)
 801f202:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801f206:	4611      	mov	r1, r2
 801f208:	4aa5      	ldr	r2, [pc, #660]	; (801f4a0 <chirp_start+0x648>)
 801f20a:	fb02 f201 	mul.w	r2, r2, r1
 801f20e:	4413      	add	r3, r2
 801f210:	4618      	mov	r0, r3
 801f212:	f7ec fef7 	bl	800c004 <SX1276SetChannel>
    // no task
		if (chirp_round(node_id, &chirp_outl) != 2)
 801f216:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f21a:	f107 030f 	add.w	r3, r7, #15
 801f21e:	781b      	ldrb	r3, [r3, #0]
 801f220:	4611      	mov	r1, r2
 801f222:	4618      	mov	r0, r3
 801f224:	f7f5 fcd6 	bl	8014bd4 <chirp_round>
 801f228:	4603      	mov	r3, r0
 801f22a:	2b02      	cmp	r3, #2
 801f22c:	f000 8142 	beq.w	801f4b4 <chirp_start+0x65c>
		{
        sync_channel_id = (sync_channel_id+1) % LBT_CHANNEL_NUM;
 801f230:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 801f234:	1c5a      	adds	r2, r3, #1
 801f236:	4b9b      	ldr	r3, [pc, #620]	; (801f4a4 <chirp_start+0x64c>)
 801f238:	fb83 1302 	smull	r1, r3, r3, r2
 801f23c:	1099      	asrs	r1, r3, #2
 801f23e:	17d3      	asrs	r3, r2, #31
 801f240:	1ac9      	subs	r1, r1, r3
 801f242:	460b      	mov	r3, r1
 801f244:	009b      	lsls	r3, r3, #2
 801f246:	440b      	add	r3, r1
 801f248:	005b      	lsls	r3, r3, #1
 801f24a:	1ad1      	subs	r1, r2, r3
 801f24c:	460b      	mov	r3, r1
 801f24e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f252:	4b8f      	ldr	r3, [pc, #572]	; (801f490 <chirp_start+0x638>)
 801f254:	79db      	ldrb	r3, [r3, #7]
 801f256:	2b00      	cmp	r3, #0
 801f258:	d00d      	beq.n	801f276 <chirp_start+0x41e>
 801f25a:	4b8e      	ldr	r3, [pc, #568]	; (801f494 <chirp_start+0x63c>)
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f260:	4b8d      	ldr	r3, [pc, #564]	; (801f498 <chirp_start+0x640>)
 801f262:	69db      	ldr	r3, [r3, #28]
 801f264:	1ad2      	subs	r2, r2, r3
 801f266:	4b8d      	ldr	r3, [pc, #564]	; (801f49c <chirp_start+0x644>)
 801f268:	69db      	ldr	r3, [r3, #28]
 801f26a:	4413      	add	r3, r2
 801f26c:	4a8b      	ldr	r2, [pc, #556]	; (801f49c <chirp_start+0x644>)
 801f26e:	61d3      	str	r3, [r2, #28]
 801f270:	4b87      	ldr	r3, [pc, #540]	; (801f490 <chirp_start+0x638>)
 801f272:	2200      	movs	r2, #0
 801f274:	71da      	strb	r2, [r3, #7]
          ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801f276:	4b86      	ldr	r3, [pc, #536]	; (801f490 <chirp_start+0x638>)
 801f278:	7a1b      	ldrb	r3, [r3, #8]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d00d      	beq.n	801f29a <chirp_start+0x442>
 801f27e:	4b85      	ldr	r3, [pc, #532]	; (801f494 <chirp_start+0x63c>)
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f284:	4b84      	ldr	r3, [pc, #528]	; (801f498 <chirp_start+0x640>)
 801f286:	6a1b      	ldr	r3, [r3, #32]
 801f288:	1ad2      	subs	r2, r2, r3
 801f28a:	4b84      	ldr	r3, [pc, #528]	; (801f49c <chirp_start+0x644>)
 801f28c:	6a1b      	ldr	r3, [r3, #32]
 801f28e:	4413      	add	r3, r2
 801f290:	4a82      	ldr	r2, [pc, #520]	; (801f49c <chirp_start+0x644>)
 801f292:	6213      	str	r3, [r2, #32]
 801f294:	4b7e      	ldr	r3, [pc, #504]	; (801f490 <chirp_start+0x638>)
 801f296:	2200      	movs	r2, #0
 801f298:	721a      	strb	r2, [r3, #8]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801f29a:	2007      	movs	r0, #7
 801f29c:	f7ee ff88 	bl	800e1b0 <energest_type_time>
 801f2a0:	4603      	mov	r3, r0
 801f2a2:	4619      	mov	r1, r3
 801f2a4:	2007      	movs	r0, #7
 801f2a6:	f7eb fc37 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 801f2aa:	2008      	movs	r0, #8
 801f2ac:	f7ee ff80 	bl	800e1b0 <energest_type_time>
 801f2b0:	4604      	mov	r4, r0
 801f2b2:	200e      	movs	r0, #14
 801f2b4:	f7ee ff7c 	bl	800e1b0 <energest_type_time>
 801f2b8:	4603      	mov	r3, r0
 801f2ba:	1ae4      	subs	r4, r4, r3
 801f2bc:	200f      	movs	r0, #15
 801f2be:	f7ee ff77 	bl	800e1b0 <energest_type_time>
 801f2c2:	4603      	mov	r3, r0
 801f2c4:	1ae3      	subs	r3, r4, r3
 801f2c6:	4619      	mov	r1, r3
 801f2c8:	2008      	movs	r0, #8
 801f2ca:	f7eb fc25 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 801f2ce:	200e      	movs	r0, #14
 801f2d0:	f7ee ff6e 	bl	800e1b0 <energest_type_time>
 801f2d4:	4603      	mov	r3, r0
 801f2d6:	4619      	mov	r1, r3
 801f2d8:	200e      	movs	r0, #14
 801f2da:	f7eb fc1d 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 801f2de:	200f      	movs	r0, #15
 801f2e0:	f7ee ff66 	bl	800e1b0 <energest_type_time>
 801f2e4:	4603      	mov	r3, r0
 801f2e6:	4619      	mov	r1, r3
 801f2e8:	200f      	movs	r0, #15
 801f2ea:	f7eb fc15 	bl	800ab18 <Stats_value_debug>
        #endif
        PRINTF("chirp_round:%d\n", chirp_config.glossy_task);
 801f2ee:	4b66      	ldr	r3, [pc, #408]	; (801f488 <chirp_start+0x630>)
 801f2f0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	486c      	ldr	r0, [pc, #432]	; (801f4a8 <chirp_start+0x650>)
 801f2f8:	f002 ff54 	bl	80221a4 <iprintf>
        if (!node_id)
 801f2fc:	f107 030f 	add.w	r3, r7, #15
 801f300:	781b      	ldrb	r3, [r3, #0]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d103      	bne.n	801f30e <chirp_start+0x4b6>
        {
          GPS_Sleep(60);
 801f306:	203c      	movs	r0, #60	; 0x3c
 801f308:	f7eb f844 	bl	800a394 <GPS_Sleep>
 801f30c:	e087      	b.n	801f41e <chirp_start+0x5c6>
        }
        else
        {
          // this time glossy no task but sync true
          if (chirp_config.glossy_task)
 801f30e:	4b5e      	ldr	r3, [pc, #376]	; (801f488 <chirp_start+0x630>)
 801f310:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f314:	2b00      	cmp	r3, #0
 801f316:	d011      	beq.n	801f33c <chirp_start+0x4e4>
          {
            chirp_outl.glossy_resync = 0;
 801f318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f31c:	2200      	movs	r2, #0
 801f31e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            // close gps if on
            if (chirp_outl.glossy_gps_on)
 801f322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f326:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d006      	beq.n	801f33c <chirp_start+0x4e4>
            {
              chirp_outl.glossy_gps_on = 0;
 801f32e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f332:	2200      	movs	r2, #0
 801f334:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
              #if GPS_DATA
                GPS_Off();
 801f338:	f7ea fe48 	bl	8009fcc <GPS_Off>
              #endif
            }
          }
          // long time no glossy, open the gps
          if (!chirp_config.glossy_task)
 801f33c:	4b52      	ldr	r3, [pc, #328]	; (801f488 <chirp_start+0x630>)
 801f33e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f342:	2b00      	cmp	r3, #0
 801f344:	d11f      	bne.n	801f386 <chirp_start+0x52e>
          {
            chirp_outl.glossy_resync++;
 801f346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f34a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801f34e:	3301      	adds	r3, #1
 801f350:	b2da      	uxtb	r2, r3
 801f352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f356:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            if ((chirp_outl.glossy_resync >= 5) && (!chirp_outl.glossy_gps_on))
 801f35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f35e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801f362:	2b04      	cmp	r3, #4
 801f364:	d90f      	bls.n	801f386 <chirp_start+0x52e>
 801f366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f36a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d109      	bne.n	801f386 <chirp_start+0x52e>
            {
              chirp_outl.glossy_gps_on = 1;
 801f372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f376:	2201      	movs	r2, #1
 801f378:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
              GPS_On();
 801f37c:	f7ea fe12 	bl	8009fa4 <GPS_On>
              GPS_Waiting_PPS(10);
 801f380:	200a      	movs	r0, #10
 801f382:	f7ea ff6f 	bl	800a264 <GPS_Waiting_PPS>
            //   sync_channel_id = (sync_channel_id+1) % LBT_CHANNEL_NUM;
            // }
          }

          // wait on each 60 seconds
          if (chirp_outl.glossy_gps_on)
 801f386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f38a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d003      	beq.n	801f39a <chirp_start+0x542>
          {
            GPS_Sleep(60);
 801f392:	203c      	movs	r0, #60	; 0x3c
 801f394:	f7ea fffe 	bl	800a394 <GPS_Sleep>
 801f398:	e041      	b.n	801f41e <chirp_start+0x5c6>
          }
          else
          {
            // RTC_Waiting_Count(60 - chirp_config.mx_period_time_s - 2);
            DS3231_GetTime();
 801f39a:	f7f9 fdaf 	bl	8018efc <DS3231_GetTime>
            /* Set alarm */
            ds3231_time = DS3231_ShowTime();
 801f39e:	f107 041c 	add.w	r4, r7, #28
 801f3a2:	463b      	mov	r3, r7
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f7f9 fdc3 	bl	8018f30 <DS3231_ShowTime>
 801f3aa:	463a      	mov	r2, r7
 801f3ac:	4623      	mov	r3, r4
 801f3ae:	6810      	ldr	r0, [r2, #0]
 801f3b0:	6851      	ldr	r1, [r2, #4]
 801f3b2:	c303      	stmia	r3!, {r0, r1}
            diff = GPS_Diff(&ds3231_time, 1970, 1, 1, 0, 0, 0);
 801f3b4:	f107 001c 	add.w	r0, r7, #28
 801f3b8:	2300      	movs	r3, #0
 801f3ba:	9302      	str	r3, [sp, #8]
 801f3bc:	2300      	movs	r3, #0
 801f3be:	9301      	str	r3, [sp, #4]
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	9300      	str	r3, [sp, #0]
 801f3c4:	2301      	movs	r3, #1
 801f3c6:	2201      	movs	r2, #1
 801f3c8:	f240 71b2 	movw	r1, #1970	; 0x7b2
 801f3cc:	f7ea feee 	bl	800a1ac <GPS_Diff>
 801f3d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f3d4:	e9c3 0100 	strd	r0, r1, [r3]
            sleep_sec = 60 - (time_t)(0 - diff) % 60;
 801f3d8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f3dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 801f3e0:	4258      	negs	r0, r3
 801f3e2:	eb64 0144 	sbc.w	r1, r4, r4, lsl #1
 801f3e6:	f04f 023c 	mov.w	r2, #60	; 0x3c
 801f3ea:	f04f 0300 	mov.w	r3, #0
 801f3ee:	f7e1 fc05 	bl	8000bfc <__aeabi_ldivmod>
 801f3f2:	461c      	mov	r4, r3
 801f3f4:	4613      	mov	r3, r2
 801f3f6:	4619      	mov	r1, r3
 801f3f8:	4622      	mov	r2, r4
 801f3fa:	f04f 033c 	mov.w	r3, #60	; 0x3c
 801f3fe:	f04f 0400 	mov.w	r4, #0
 801f402:	1a5b      	subs	r3, r3, r1
 801f404:	eb64 0402 	sbc.w	r4, r4, r2
 801f408:	461d      	mov	r5, r3
 801f40a:	4626      	mov	r6, r4
 801f40c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f410:	e9c3 5600 	strd	r5, r6, [r3]
            RTC_Waiting_Count(sleep_sec);
 801f414:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f418:	4618      	mov	r0, r3
 801f41a:	f7eb fa73 	bl	800a904 <RTC_Waiting_Count>
          }
        }
        #if ENERGEST_CONF_ON
          energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(60 - chirp_config.mx_period_time_s - 2));
 801f41e:	2009      	movs	r0, #9
 801f420:	f7ee fec6 	bl	800e1b0 <energest_type_time>
 801f424:	4602      	mov	r2, r0
 801f426:	4b18      	ldr	r3, [pc, #96]	; (801f488 <chirp_start+0x630>)
 801f428:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801f42c:	b29b      	uxth	r3, r3
 801f42e:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 801f432:	4619      	mov	r1, r3
 801f434:	4b1d      	ldr	r3, [pc, #116]	; (801f4ac <chirp_start+0x654>)
 801f436:	fb03 f301 	mul.w	r3, r3, r1
 801f43a:	4413      	add	r3, r2
 801f43c:	4619      	mov	r1, r3
 801f43e:	2009      	movs	r0, #9
 801f440:	f7ee feea 	bl	800e218 <energest_type_set>
          Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801f444:	2009      	movs	r0, #9
 801f446:	f7ee feb3 	bl	800e1b0 <energest_type_time>
 801f44a:	4603      	mov	r3, r0
 801f44c:	4619      	mov	r1, r3
 801f44e:	2009      	movs	r0, #9
 801f450:	f7eb fb62 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[0]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801f454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f458:	4a15      	ldr	r2, [pc, #84]	; (801f4b0 <chirp_start+0x658>)
 801f45a:	4614      	mov	r4, r2
 801f45c:	f103 067c 	add.w	r6, r3, #124	; 0x7c
 801f460:	f104 0c20 	add.w	ip, r4, #32
 801f464:	4635      	mov	r5, r6
 801f466:	4623      	mov	r3, r4
 801f468:	6818      	ldr	r0, [r3, #0]
 801f46a:	6859      	ldr	r1, [r3, #4]
 801f46c:	689a      	ldr	r2, [r3, #8]
 801f46e:	68db      	ldr	r3, [r3, #12]
 801f470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f472:	3410      	adds	r4, #16
 801f474:	3610      	adds	r6, #16
 801f476:	4564      	cmp	r4, ip
 801f478:	d1f4      	bne.n	801f464 <chirp_start+0x60c>
 801f47a:	4633      	mov	r3, r6
 801f47c:	4622      	mov	r2, r4
 801f47e:	6810      	ldr	r0, [r2, #0]
 801f480:	6851      	ldr	r1, [r2, #4]
 801f482:	c303      	stmia	r3!, {r0, r1}
 801f484:	e1b2      	b.n	801f7ec <chirp_start+0x994>
 801f486:	bf00      	nop
 801f488:	20001430 	.word	0x20001430
 801f48c:	080265e8 	.word	0x080265e8
 801f490:	2000112c 	.word	0x2000112c
 801f494:	200012c8 	.word	0x200012c8
 801f498:	20001308 	.word	0x20001308
 801f49c:	20000f10 	.word	0x20000f10
 801f4a0:	00030d40 	.word	0x00030d40
 801f4a4:	66666667 	.word	0x66666667
 801f4a8:	08026608 	.word	0x08026608
 801f4ac:	00f42400 	.word	0x00f42400
 801f4b0:	20000d00 	.word	0x20000d00
        #endif
    }
    // have a task to do
    else
    {
      PRINTF("glossy_task == 2\n");
 801f4b4:	48c3      	ldr	r0, [pc, #780]	; (801f7c4 <chirp_start+0x96c>)
 801f4b6:	f002 fefd 	bl	80222b4 <puts>
      chirp_outl.glossy_resync = 0;
 801f4ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f4be:	2200      	movs	r2, #0
 801f4c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      if ((chirp_outl.glossy_gps_on) && (node_id))
 801f4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f4c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	d00b      	beq.n	801f4e8 <chirp_start+0x690>
 801f4d0:	f107 030f 	add.w	r3, r7, #15
 801f4d4:	781b      	ldrb	r3, [r3, #0]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d006      	beq.n	801f4e8 <chirp_start+0x690>
      {
        chirp_outl.glossy_gps_on = 0;
 801f4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f4de:	2200      	movs	r2, #0
 801f4e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        #if GPS_DATA
          GPS_Off();
 801f4e4:	f7ea fd72 	bl	8009fcc <GPS_Off>
        #endif
      }
      #if ENERGEST_CONF_ON
        ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f4e8:	4bb7      	ldr	r3, [pc, #732]	; (801f7c8 <chirp_start+0x970>)
 801f4ea:	79db      	ldrb	r3, [r3, #7]
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d00d      	beq.n	801f50c <chirp_start+0x6b4>
 801f4f0:	4bb6      	ldr	r3, [pc, #728]	; (801f7cc <chirp_start+0x974>)
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f4f6:	4bb6      	ldr	r3, [pc, #728]	; (801f7d0 <chirp_start+0x978>)
 801f4f8:	69db      	ldr	r3, [r3, #28]
 801f4fa:	1ad2      	subs	r2, r2, r3
 801f4fc:	4bb5      	ldr	r3, [pc, #724]	; (801f7d4 <chirp_start+0x97c>)
 801f4fe:	69db      	ldr	r3, [r3, #28]
 801f500:	4413      	add	r3, r2
 801f502:	4ab4      	ldr	r2, [pc, #720]	; (801f7d4 <chirp_start+0x97c>)
 801f504:	61d3      	str	r3, [r2, #28]
 801f506:	4bb0      	ldr	r3, [pc, #704]	; (801f7c8 <chirp_start+0x970>)
 801f508:	2200      	movs	r2, #0
 801f50a:	71da      	strb	r2, [r3, #7]
        ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801f50c:	4bae      	ldr	r3, [pc, #696]	; (801f7c8 <chirp_start+0x970>)
 801f50e:	7a1b      	ldrb	r3, [r3, #8]
 801f510:	2b00      	cmp	r3, #0
 801f512:	d00d      	beq.n	801f530 <chirp_start+0x6d8>
 801f514:	4bad      	ldr	r3, [pc, #692]	; (801f7cc <chirp_start+0x974>)
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f51a:	4bad      	ldr	r3, [pc, #692]	; (801f7d0 <chirp_start+0x978>)
 801f51c:	6a1b      	ldr	r3, [r3, #32]
 801f51e:	1ad2      	subs	r2, r2, r3
 801f520:	4bac      	ldr	r3, [pc, #688]	; (801f7d4 <chirp_start+0x97c>)
 801f522:	6a1b      	ldr	r3, [r3, #32]
 801f524:	4413      	add	r3, r2
 801f526:	4aab      	ldr	r2, [pc, #684]	; (801f7d4 <chirp_start+0x97c>)
 801f528:	6213      	str	r3, [r2, #32]
 801f52a:	4ba7      	ldr	r3, [pc, #668]	; (801f7c8 <chirp_start+0x970>)
 801f52c:	2200      	movs	r2, #0
 801f52e:	721a      	strb	r2, [r3, #8]
        Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 801f530:	2008      	movs	r0, #8
 801f532:	f7ee fe3d 	bl	800e1b0 <energest_type_time>
 801f536:	4604      	mov	r4, r0
 801f538:	200e      	movs	r0, #14
 801f53a:	f7ee fe39 	bl	800e1b0 <energest_type_time>
 801f53e:	4603      	mov	r3, r0
 801f540:	1ae4      	subs	r4, r4, r3
 801f542:	200f      	movs	r0, #15
 801f544:	f7ee fe34 	bl	800e1b0 <energest_type_time>
 801f548:	4603      	mov	r3, r0
 801f54a:	1ae3      	subs	r3, r4, r3
 801f54c:	4619      	mov	r1, r3
 801f54e:	2008      	movs	r0, #8
 801f550:	f7eb fae2 	bl	800ab18 <Stats_value_debug>
        Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 801f554:	200e      	movs	r0, #14
 801f556:	f7ee fe2b 	bl	800e1b0 <energest_type_time>
 801f55a:	4603      	mov	r3, r0
 801f55c:	4619      	mov	r1, r3
 801f55e:	200e      	movs	r0, #14
 801f560:	f7eb fada 	bl	800ab18 <Stats_value_debug>
        Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 801f564:	200f      	movs	r0, #15
 801f566:	f7ee fe23 	bl	800e1b0 <energest_type_time>
 801f56a:	4603      	mov	r3, r0
 801f56c:	4619      	mov	r1, r3
 801f56e:	200f      	movs	r0, #15
 801f570:	f7eb fad2 	bl	800ab18 <Stats_value_debug>
      //   RTC_Waiting_Count(60 - chirp_config.mx_period_time_s - 2);
      // else
      //   GPS_Sleep(60);

		/* default mode is MX_ARRANGE (task arrangement) */
		chirp_outl.task = MX_ARRANGE;
 801f574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f578:	2206      	movs	r2, #6
 801f57a:	701a      	strb	r2, [r3, #0]
    if (node_id)
 801f57c:	f107 030f 	add.w	r3, r7, #15
 801f580:	781b      	ldrb	r3, [r3, #0]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d003      	beq.n	801f58e <chirp_start+0x736>
      chirp_outl.arrange_task = MX_ARRANGE;
 801f586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f58a:	2206      	movs	r2, #6
 801f58c:	719a      	strb	r2, [r3, #6]

      #if ENERGEST_CONF_ON
        energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(60 - chirp_config.mx_period_time_s - 2));
 801f58e:	2009      	movs	r0, #9
 801f590:	f7ee fe0e 	bl	800e1b0 <energest_type_time>
 801f594:	4602      	mov	r2, r0
 801f596:	4b90      	ldr	r3, [pc, #576]	; (801f7d8 <chirp_start+0x980>)
 801f598:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801f59c:	b29b      	uxth	r3, r3
 801f59e:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 801f5a2:	4619      	mov	r1, r3
 801f5a4:	4b8d      	ldr	r3, [pc, #564]	; (801f7dc <chirp_start+0x984>)
 801f5a6:	fb03 f301 	mul.w	r3, r3, r1
 801f5aa:	4413      	add	r3, r2
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	2009      	movs	r0, #9
 801f5b0:	f7ee fe32 	bl	800e218 <energest_type_set>
 801f5b4:	4b85      	ldr	r3, [pc, #532]	; (801f7cc <chirp_start+0x974>)
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ENERGEST_ON(ENERGEST_TYPE_CPU);
 801f5ba:	4a85      	ldr	r2, [pc, #532]	; (801f7d0 <chirp_start+0x978>)
 801f5bc:	61d3      	str	r3, [r2, #28]
 801f5be:	4b82      	ldr	r3, [pc, #520]	; (801f7c8 <chirp_start+0x970>)
 801f5c0:	2201      	movs	r2, #1
 801f5c2:	71da      	strb	r2, [r3, #7]
      #endif
		PRINTF("---------MX_ARRANGE---------\n");
 801f5c4:	4886      	ldr	r0, [pc, #536]	; (801f7e0 <chirp_start+0x988>)
 801f5c6:	f002 fe75 	bl	80222b4 <puts>
		// TODO: tune those parameters
		chirp_outl.num_nodes = network_num_nodes;
 801f5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5ce:	f107 020e 	add.w	r2, r7, #14
 801f5d2:	7812      	ldrb	r2, [r2, #0]
 801f5d4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		chirp_outl.generation_size = network_num_nodes;
 801f5d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5dc:	f107 020e 	add.w	r2, r7, #14
 801f5e0:	7812      	ldrb	r2, [r2, #0]
 801f5e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		chirp_outl.payload_len = DATA_HEADER_LENGTH + 5 + 4;
 801f5e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5ea:	2211      	movs	r2, #17
 801f5ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		chirp_outl.round_setup = 1;
 801f5f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5f4:	2201      	movs	r2, #1
 801f5f6:	715a      	strb	r2, [r3, #5]
		chirp_outl.round_max = 1;
 801f5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	f042 0201 	orr.w	r2, r2, #1
 801f602:	70da      	strb	r2, [r3, #3]
 801f604:	2200      	movs	r2, #0
 801f606:	711a      	strb	r2, [r3, #4]
		chirp_outl.file_chunk_len = 0;
 801f608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f60c:	2200      	movs	r2, #0
 801f60e:	875a      	strh	r2, [r3, #58]	; 0x3a

		chirp_radio_config(11, 7, 1, 8, 14, chirp_outl.default_freq);
 801f610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f614:	f8d3 3011 	ldr.w	r3, [r3, #17]
 801f618:	9301      	str	r3, [sp, #4]
 801f61a:	230e      	movs	r3, #14
 801f61c:	9300      	str	r3, [sp, #0]
 801f61e:	2308      	movs	r3, #8
 801f620:	2201      	movs	r2, #1
 801f622:	2107      	movs	r1, #7
 801f624:	200b      	movs	r0, #11
 801f626:	f7f3 fc01 	bl	8012e2c <chirp_radio_config>
		chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len + HASH_TAIL, DISSEMINATION);
 801f62a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f62e:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801f632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f636:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 801f63a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f63e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801f642:	3302      	adds	r3, #2
 801f644:	b2da      	uxtb	r2, r3
 801f646:	2302      	movs	r3, #2
 801f648:	f7f3 f98a 	bl	8012960 <chirp_packet_config>
    chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801f64c:	4b62      	ldr	r3, [pc, #392]	; (801f7d8 <chirp_start+0x980>)
 801f64e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f652:	4618      	mov	r0, r3
 801f654:	4b60      	ldr	r3, [pc, #384]	; (801f7d8 <chirp_start+0x980>)
 801f656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f65a:	4619      	mov	r1, r3
 801f65c:	4b5e      	ldr	r3, [pc, #376]	; (801f7d8 <chirp_start+0x980>)
 801f65e:	8a5b      	ldrh	r3, [r3, #18]
 801f660:	b29b      	uxth	r3, r3
 801f662:	3302      	adds	r3, #2
 801f664:	9301      	str	r3, [sp, #4]
 801f666:	2308      	movs	r3, #8
 801f668:	9300      	str	r3, [sp, #0]
 801f66a:	2300      	movs	r3, #0
 801f66c:	2201      	movs	r2, #1
 801f66e:	f7ed fc8d 	bl	800cf8c <SX1276GetPacketTime>
 801f672:	4603      	mov	r3, r0
 801f674:	461a      	mov	r2, r3
 801f676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f67a:	f8c3 2007 	str.w	r2, [r3, #7]
    chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.num_nodes * 3, 1500000);
 801f67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f682:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801f686:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801f68a:	33a0      	adds	r3, #160	; 0xa0
 801f68c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f690:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 801f694:	b292      	uxth	r2, r2
 801f696:	4611      	mov	r1, r2
 801f698:	0049      	lsls	r1, r1, #1
 801f69a:	440a      	add	r2, r1
 801f69c:	b291      	uxth	r1, r2
 801f69e:	4a51      	ldr	r2, [pc, #324]	; (801f7e4 <chirp_start+0x98c>)
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	f7f3 fb57 	bl	8012d54 <chirp_slot_config>
		chirp_payload_distribution(chirp_outl.task);
 801f6a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f6aa:	781b      	ldrb	r3, [r3, #0]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f7f3 fc1d 	bl	8012eec <chirp_payload_distribution>
    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f6b2:	4b45      	ldr	r3, [pc, #276]	; (801f7c8 <chirp_start+0x970>)
 801f6b4:	79db      	ldrb	r3, [r3, #7]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d00d      	beq.n	801f6d6 <chirp_start+0x87e>
 801f6ba:	4b44      	ldr	r3, [pc, #272]	; (801f7cc <chirp_start+0x974>)
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f6c0:	4b43      	ldr	r3, [pc, #268]	; (801f7d0 <chirp_start+0x978>)
 801f6c2:	69db      	ldr	r3, [r3, #28]
 801f6c4:	1ad2      	subs	r2, r2, r3
 801f6c6:	4b43      	ldr	r3, [pc, #268]	; (801f7d4 <chirp_start+0x97c>)
 801f6c8:	69db      	ldr	r3, [r3, #28]
 801f6ca:	4413      	add	r3, r2
 801f6cc:	4a41      	ldr	r2, [pc, #260]	; (801f7d4 <chirp_start+0x97c>)
 801f6ce:	61d3      	str	r3, [r2, #28]
 801f6d0:	4b3d      	ldr	r3, [pc, #244]	; (801f7c8 <chirp_start+0x970>)
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	71da      	strb	r2, [r3, #7]
      Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801f6d6:	2007      	movs	r0, #7
 801f6d8:	f7ee fd6a 	bl	800e1b0 <energest_type_time>
 801f6dc:	4603      	mov	r3, r0
 801f6de:	4619      	mov	r1, r3
 801f6e0:	2007      	movs	r0, #7
 801f6e2:	f7eb fa19 	bl	800ab18 <Stats_value_debug>
      Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801f6e6:	2009      	movs	r0, #9
 801f6e8:	f7ee fd62 	bl	800e1b0 <energest_type_time>
 801f6ec:	4603      	mov	r3, r0
 801f6ee:	4619      	mov	r1, r3
 801f6f0:	2009      	movs	r0, #9
 801f6f2:	f7eb fa11 	bl	800ab18 <Stats_value_debug>
      memcpy((uint32_t *)(&chirp_outl.chirp_energy[0]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801f6f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f6fa:	4a3b      	ldr	r2, [pc, #236]	; (801f7e8 <chirp_start+0x990>)
 801f6fc:	4614      	mov	r4, r2
 801f6fe:	f103 067c 	add.w	r6, r3, #124	; 0x7c
 801f702:	f104 0c20 	add.w	ip, r4, #32
 801f706:	4635      	mov	r5, r6
 801f708:	4623      	mov	r3, r4
 801f70a:	6818      	ldr	r0, [r3, #0]
 801f70c:	6859      	ldr	r1, [r3, #4]
 801f70e:	689a      	ldr	r2, [r3, #8]
 801f710:	68db      	ldr	r3, [r3, #12]
 801f712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f714:	3410      	adds	r4, #16
 801f716:	3610      	adds	r6, #16
 801f718:	4564      	cmp	r4, ip
 801f71a:	d1f4      	bne.n	801f706 <chirp_start+0x8ae>
 801f71c:	4633      	mov	r3, r6
 801f71e:	4622      	mov	r2, r4
 801f720:	6810      	ldr	r0, [r2, #0]
 801f722:	6851      	ldr	r1, [r2, #4]
 801f724:	c303      	stmia	r3!, {r0, r1}
      memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 801f726:	2228      	movs	r2, #40	; 0x28
 801f728:	2100      	movs	r1, #0
 801f72a:	482f      	ldr	r0, [pc, #188]	; (801f7e8 <chirp_start+0x990>)
 801f72c:	f001 ff2d 	bl	802158a <memset>
    #endif
		if (!chirp_round(node_id, &chirp_outl))
 801f730:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f734:	f107 030f 	add.w	r3, r7, #15
 801f738:	781b      	ldrb	r3, [r3, #0]
 801f73a:	4611      	mov	r1, r2
 801f73c:	4618      	mov	r0, r3
 801f73e:	f7f5 fa49 	bl	8014bd4 <chirp_round>
 801f742:	4603      	mov	r3, r0
 801f744:	2b00      	cmp	r3, #0
 801f746:	d107      	bne.n	801f758 <chirp_start+0x900>
    {
      chirp_outl.task = MX_ARRANGE;
 801f748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f74c:	2206      	movs	r2, #6
 801f74e:	701a      	strb	r2, [r3, #0]
      chirp_outl.arrange_task = MX_ARRANGE;
 801f750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f754:	2206      	movs	r2, #6
 801f756:	719a      	strb	r2, [r3, #6]
    }

    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f758:	4b1b      	ldr	r3, [pc, #108]	; (801f7c8 <chirp_start+0x970>)
 801f75a:	79db      	ldrb	r3, [r3, #7]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d00d      	beq.n	801f77c <chirp_start+0x924>
 801f760:	4b1a      	ldr	r3, [pc, #104]	; (801f7cc <chirp_start+0x974>)
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f766:	4b1a      	ldr	r3, [pc, #104]	; (801f7d0 <chirp_start+0x978>)
 801f768:	69db      	ldr	r3, [r3, #28]
 801f76a:	1ad2      	subs	r2, r2, r3
 801f76c:	4b19      	ldr	r3, [pc, #100]	; (801f7d4 <chirp_start+0x97c>)
 801f76e:	69db      	ldr	r3, [r3, #28]
 801f770:	4413      	add	r3, r2
 801f772:	4a18      	ldr	r2, [pc, #96]	; (801f7d4 <chirp_start+0x97c>)
 801f774:	61d3      	str	r3, [r2, #28]
 801f776:	4b14      	ldr	r3, [pc, #80]	; (801f7c8 <chirp_start+0x970>)
 801f778:	2200      	movs	r2, #0
 801f77a:	71da      	strb	r2, [r3, #7]
      ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801f77c:	4b12      	ldr	r3, [pc, #72]	; (801f7c8 <chirp_start+0x970>)
 801f77e:	7a1b      	ldrb	r3, [r3, #8]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d00d      	beq.n	801f7a0 <chirp_start+0x948>
 801f784:	4b11      	ldr	r3, [pc, #68]	; (801f7cc <chirp_start+0x974>)
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f78a:	4b11      	ldr	r3, [pc, #68]	; (801f7d0 <chirp_start+0x978>)
 801f78c:	6a1b      	ldr	r3, [r3, #32]
 801f78e:	1ad2      	subs	r2, r2, r3
 801f790:	4b10      	ldr	r3, [pc, #64]	; (801f7d4 <chirp_start+0x97c>)
 801f792:	6a1b      	ldr	r3, [r3, #32]
 801f794:	4413      	add	r3, r2
 801f796:	4a0f      	ldr	r2, [pc, #60]	; (801f7d4 <chirp_start+0x97c>)
 801f798:	6213      	str	r3, [r2, #32]
 801f79a:	4b0b      	ldr	r3, [pc, #44]	; (801f7c8 <chirp_start+0x970>)
 801f79c:	2200      	movs	r2, #0
 801f79e:	721a      	strb	r2, [r3, #8]
 801f7a0:	4b0a      	ldr	r3, [pc, #40]	; (801f7cc <chirp_start+0x974>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801f7a6:	4a0a      	ldr	r2, [pc, #40]	; (801f7d0 <chirp_start+0x978>)
 801f7a8:	61d3      	str	r3, [r2, #28]
 801f7aa:	4b07      	ldr	r3, [pc, #28]	; (801f7c8 <chirp_start+0x970>)
 801f7ac:	2201      	movs	r2, #1
 801f7ae:	71da      	strb	r2, [r3, #7]
      if (chirp_outl.arrange_task == MX_DISSEMINATE)
 801f7b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f7b4:	799b      	ldrb	r3, [r3, #6]
 801f7b6:	2b01      	cmp	r3, #1
 801f7b8:	d118      	bne.n	801f7ec <chirp_start+0x994>
      {
        FLASH_If_Erase_Pages(1, DAEMON_DEBUG_PAGE);
 801f7ba:	21f9      	movs	r1, #249	; 0xf9
 801f7bc:	2001      	movs	r0, #1
 801f7be:	f7fc fe3d 	bl	801c43c <FLASH_If_Erase_Pages>
 801f7c2:	e013      	b.n	801f7ec <chirp_start+0x994>
 801f7c4:	08026618 	.word	0x08026618
 801f7c8:	2000112c 	.word	0x2000112c
 801f7cc:	200012c8 	.word	0x200012c8
 801f7d0:	20001308 	.word	0x20001308
 801f7d4:	20000f10 	.word	0x20000f10
 801f7d8:	20001430 	.word	0x20001430
 801f7dc:	00f42400 	.word	0x00f42400
 801f7e0:	0802662c 	.word	0x0802662c
 801f7e4:	0016e360 	.word	0x0016e360
 801f7e8:	20000d00 	.word	0x20000d00
      }
    #endif
    }
		/* into the assigned task */
		chirp_outl.task = chirp_outl.arrange_task;
 801f7ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f7f0:	799a      	ldrb	r2, [r3, #6]
 801f7f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f7f6:	701a      	strb	r2, [r3, #0]
    memset(&chirp_stats_all, 0, sizeof(chirp_stats_all));
 801f7f8:	223c      	movs	r2, #60	; 0x3c
 801f7fa:	2100      	movs	r1, #0
 801f7fc:	48ac      	ldr	r0, [pc, #688]	; (801fab0 <chirp_start+0xc58>)
 801f7fe:	f001 fec4 	bl	802158a <memset>
    #if MX_LBT_ACCESS
      memset(&chirp_config.lbt_channel_time_stats_us, 0, sizeof(chirp_config.lbt_channel_time_stats_us));
 801f802:	2228      	movs	r2, #40	; 0x28
 801f804:	2100      	movs	r1, #0
 801f806:	48ab      	ldr	r0, [pc, #684]	; (801fab4 <chirp_start+0xc5c>)
 801f808:	f001 febf 	bl	802158a <memset>
    #endif

		Gpi_Fast_Tick_Native deadline;
    if (chirp_outl.task == MX_DISSEMINATE)
 801f80c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f810:	781b      	ldrb	r3, [r3, #0]
 801f812:	2b01      	cmp	r3, #1
 801f814:	d107      	bne.n	801f826 <chirp_start+0x9ce>
 801f816:	4ba8      	ldr	r3, [pc, #672]	; (801fab8 <chirp_start+0xc60>)
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      deadline = gpi_tick_fast_native() + GPI_TICK_MS_TO_FAST(20000);
 801f81c:	4ba7      	ldr	r3, [pc, #668]	; (801fabc <chirp_start+0xc64>)
 801f81e:	4413      	add	r3, r2
 801f820:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801f824:	e006      	b.n	801f834 <chirp_start+0x9dc>
 801f826:	4ba4      	ldr	r3, [pc, #656]	; (801fab8 <chirp_start+0xc60>)
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    else
      deadline = gpi_tick_fast_native() + GPI_TICK_MS_TO_FAST(5000);
 801f82c:	4ba4      	ldr	r3, [pc, #656]	; (801fac0 <chirp_start+0xc68>)
 801f82e:	4413      	add	r3, r2
 801f830:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    uint32_t task_bitmap_temp = chirp_outl.task_bitmap[0];
 801f834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f838:	69db      	ldr	r3, [r3, #28]
 801f83a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    uint8_t task_node_id = 0;
 801f83e:	2300      	movs	r3, #0
 801f840:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    uint8_t task_lsb;
    while(task_bitmap_temp)
 801f844:	e02c      	b.n	801f8a0 <chirp_start+0xa48>
 801f846:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801f84a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801f84e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801f852:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		asm
 801f856:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	bf0e      	itee	eq
 801f85e:	3b01      	subeq	r3, #1
 801f860:	fa93 f3a3 	rbitne	r3, r3
 801f864:	fab3 f383 	clzne	r3, r3
 801f868:	461c      	mov	r4, r3
	return y;
 801f86a:	4623      	mov	r3, r4
    {
      task_lsb = gpi_get_lsb_32(task_bitmap_temp);
 801f86c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      // PRINTF("task_bitmap_temp:%02x, %lu\n", task_bitmap_temp, task_lsb);
      if (task_lsb == node_id)
 801f870:	f107 030f 	add.w	r3, r7, #15
 801f874:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 801f878:	781b      	ldrb	r3, [r3, #0]
 801f87a:	429a      	cmp	r2, r3
 801f87c:	d015      	beq.n	801f8aa <chirp_start+0xa52>
        break;
      task_bitmap_temp &= ~(1 << task_lsb);
 801f87e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 801f882:	2201      	movs	r2, #1
 801f884:	fa02 f303 	lsl.w	r3, r2, r3
 801f888:	43db      	mvns	r3, r3
 801f88a:	461a      	mov	r2, r3
 801f88c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801f890:	4013      	ands	r3, r2
 801f892:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      task_node_id++;
 801f896:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 801f89a:	3301      	adds	r3, #1
 801f89c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    while(task_bitmap_temp)
 801f8a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d1ce      	bne.n	801f846 <chirp_start+0x9ee>
 801f8a8:	e000      	b.n	801f8ac <chirp_start+0xa54>
        break;
 801f8aa:	bf00      	nop
    }
    uint32_t task_node_num = gpi_popcnt_32(chirp_outl.task_bitmap[0]);
 801f8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f8b0:	69db      	ldr	r3, [r3, #28]
 801f8b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801f8b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801f8ba:	b29b      	uxth	r3, r3
 801f8bc:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f8c0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801f8c4:	b2db      	uxtb	r3, r3
 801f8c6:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	return gpi_popcnt_lut[x];
 801f8ca:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 801f8ce:	4a7d      	ldr	r2, [pc, #500]	; (801fac4 <chirp_start+0xc6c>)
 801f8d0:	5cd3      	ldrb	r3, [r2, r3]
 801f8d2:	4619      	mov	r1, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f8d4:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801f8d8:	0a1b      	lsrs	r3, r3, #8
 801f8da:	b29b      	uxth	r3, r3
 801f8dc:	b2db      	uxtb	r3, r3
 801f8de:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
	return gpi_popcnt_lut[x];
 801f8e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 801f8e6:	4a77      	ldr	r2, [pc, #476]	; (801fac4 <chirp_start+0xc6c>)
 801f8e8:	5cd3      	ldrb	r3, [r2, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f8ea:	18ca      	adds	r2, r1, r3
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801f8ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801f8f0:	0c1b      	lsrs	r3, r3, #16
 801f8f2:	b29b      	uxth	r3, r3
 801f8f4:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f8f8:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 801f8fc:	b2db      	uxtb	r3, r3
 801f8fe:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
	return gpi_popcnt_lut[x];
 801f902:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 801f906:	496f      	ldr	r1, [pc, #444]	; (801fac4 <chirp_start+0xc6c>)
 801f908:	5ccb      	ldrb	r3, [r1, r3]
 801f90a:	4618      	mov	r0, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f90c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 801f910:	0a1b      	lsrs	r3, r3, #8
 801f912:	b29b      	uxth	r3, r3
 801f914:	b2db      	uxtb	r3, r3
 801f916:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
	return gpi_popcnt_lut[x];
 801f91a:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 801f91e:	4969      	ldr	r1, [pc, #420]	; (801fac4 <chirp_start+0xc6c>)
 801f920:	5ccb      	ldrb	r3, [r1, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801f922:	4403      	add	r3, r0
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801f924:	4413      	add	r3, r2
 801f926:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    // PRINTF("task_node_id:%lu, %lu\n", task_node_id, task_node_num);
    gpi_watchdog_periodic();
 801f92a:	f7ee fc0d 	bl	800e148 <gpi_watchdog_periodic>
		switch (chirp_outl.task)
 801f92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	2b05      	cmp	r3, #5
 801f936:	f201 8484 	bhi.w	8021242 <chirp_start+0x23ea>
 801f93a:	a201      	add	r2, pc, #4	; (adr r2, 801f940 <chirp_start+0xae8>)
 801f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f940:	0801f959 	.word	0x0801f959
 801f944:	0801fedd 	.word	0x0801fedd
 801f948:	080204cd 	.word	0x080204cd
 801f94c:	080208cd 	.word	0x080208cd
 801f950:	08020d39 	.word	0x08020d39
 801f954:	080210d1 	.word	0x080210d1
		{
			case CHIRP_START:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 801f958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f95c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 801f960:	b2d8      	uxtb	r0, r3
 801f962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f966:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801f96a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f96e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 801f972:	9201      	str	r2, [sp, #4]
 801f974:	9300      	str	r3, [sp, #0]
 801f976:	2308      	movs	r3, #8
 801f978:	2201      	movs	r2, #1
 801f97a:	2107      	movs	r1, #7
 801f97c:	f7f3 fa56 	bl	8012e2c <chirp_radio_config>

				TRACE_MSG("---------CHIRP_START---------\n");
 801f980:	4851      	ldr	r0, [pc, #324]	; (801fac8 <chirp_start+0xc70>)
 801f982:	f002 fc97 	bl	80222b4 <puts>
 801f986:	4b51      	ldr	r3, [pc, #324]	; (801facc <chirp_start+0xc74>)
 801f988:	4a51      	ldr	r2, [pc, #324]	; (801fad0 <chirp_start+0xc78>)
 801f98a:	f240 51d7 	movw	r1, #1495	; 0x5d7
 801f98e:	4618      	mov	r0, r3
 801f990:	f001 fcb2 	bl	80212f8 <trace_store_msg>
 801f994:	f001 fd32 	bl	80213fc <trace_to_flash>
				chirp_outl.num_nodes = network_num_nodes;
 801f998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f99c:	f107 020e 	add.w	r2, r7, #14
 801f9a0:	7812      	ldrb	r2, [r2, #0]
 801f9a2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = network_num_nodes;
 801f9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9aa:	f107 020e 	add.w	r2, r7, #14
 801f9ae:	7812      	ldrb	r2, [r2, #0]
 801f9b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = offsetof(Chirp_Outl, num_nodes) - offsetof(Chirp_Outl, start_year) + DATA_HEADER_LENGTH + 2;
 801f9b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9b8:	2219      	movs	r2, #25
 801f9ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 801f9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9c2:	2201      	movs	r2, #1
 801f9c4:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = chirp_outl.round_setup;
 801f9c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9ca:	795b      	ldrb	r3, [r3, #5]
 801f9cc:	b29a      	uxth	r2, r3
 801f9ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9d2:	f8a3 2003 	strh.w	r2, [r3, #3]
        chirp_outl.version_hash = 0;
 801f9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9da:	2200      	movs	r2, #0
 801f9dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if (!node_id)
 801f9e0:	f107 030f 	add.w	r3, r7, #15
 801f9e4:	781b      	ldrb	r3, [r3, #0]
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d104      	bne.n	801f9f4 <chirp_start+0xb9c>
				{
					chirp_controller_read_command(&chirp_outl);
 801f9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9ee:	4618      	mov	r0, r3
 801f9f0:	f7fe f862 	bl	801dab8 <chirp_controller_read_command>
				}
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, DISSEMINATION);
 801f9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9f8:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801f9fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa00:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 801fa04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801fa0c:	3302      	adds	r3, #2
 801fa0e:	b2da      	uxtb	r2, r3
 801fa10:	2302      	movs	r3, #2
 801fa12:	f7f2 ffa5 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801fa16:	4b2f      	ldr	r3, [pc, #188]	; (801fad4 <chirp_start+0xc7c>)
 801fa18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fa1c:	4618      	mov	r0, r3
 801fa1e:	4b2d      	ldr	r3, [pc, #180]	; (801fad4 <chirp_start+0xc7c>)
 801fa20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fa24:	4619      	mov	r1, r3
 801fa26:	4b2b      	ldr	r3, [pc, #172]	; (801fad4 <chirp_start+0xc7c>)
 801fa28:	8a5b      	ldrh	r3, [r3, #18]
 801fa2a:	b29b      	uxth	r3, r3
 801fa2c:	3302      	adds	r3, #2
 801fa2e:	9301      	str	r3, [sp, #4]
 801fa30:	2308      	movs	r3, #8
 801fa32:	9300      	str	r3, [sp, #0]
 801fa34:	2300      	movs	r3, #0
 801fa36:	2201      	movs	r2, #1
 801fa38:	f7ed faa8 	bl	800cf8c <SX1276GetPacketTime>
 801fa3c:	4603      	mov	r3, r0
 801fa3e:	461a      	mov	r2, r3
 801fa40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa44:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 801fa48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa4c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801fa50:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801fa54:	33a0      	adds	r3, #160	; 0xa0
 801fa56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fa5a:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 801fa5e:	b291      	uxth	r1, r2
 801fa60:	4a1d      	ldr	r2, [pc, #116]	; (801fad8 <chirp_start+0xc80>)
 801fa62:	4618      	mov	r0, r3
 801fa64:	f7f3 f976 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 801fa68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa6c:	781b      	ldrb	r3, [r3, #0]
 801fa6e:	4618      	mov	r0, r3
 801fa70:	f7f3 fa3c 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 801fa74:	bf00      	nop
 801fa76:	4b10      	ldr	r3, [pc, #64]	; (801fab8 <chirp_start+0xc60>)
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa7c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801fa80:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801fa84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
 801fa88:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801fa8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801fa90:	1ad3      	subs	r3, r2, r3
 801fa92:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801fa96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	db1e      	blt.n	801fadc <chirp_start+0xc84>
 801fa9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	bf14      	ite	ne
 801faa6:	2301      	movne	r3, #1
 801faa8:	2300      	moveq	r3, #0
 801faaa:	b2db      	uxtb	r3, r3
 801faac:	e018      	b.n	801fae0 <chirp_start+0xc88>
 801faae:	bf00      	nop
 801fab0:	20000d28 	.word	0x20000d28
 801fab4:	200014c4 	.word	0x200014c4
 801fab8:	200012c8 	.word	0x200012c8
 801fabc:	1312d000 	.word	0x1312d000
 801fac0:	04c4b400 	.word	0x04c4b400
 801fac4:	080268e0 	.word	0x080268e0
 801fac8:	0802664c 	.word	0x0802664c
 801facc:	0802667d 	.word	0x0802667d
 801fad0:	08026684 	.word	0x08026684
 801fad4:	20001430 	.word	0x20001430
 801fad8:	0016e360 	.word	0x0016e360
 801fadc:	f04f 33ff 	mov.w	r3, #4294967295
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	dbc8      	blt.n	801fa76 <chirp_start+0xc1e>
				// chirp_round(node_id, &chirp_outl);

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801fae4:	4b24      	ldr	r3, [pc, #144]	; (801fb78 <chirp_start+0xd20>)
 801fae6:	79db      	ldrb	r3, [r3, #7]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d00d      	beq.n	801fb08 <chirp_start+0xcb0>
 801faec:	4b23      	ldr	r3, [pc, #140]	; (801fb7c <chirp_start+0xd24>)
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801faf2:	4b23      	ldr	r3, [pc, #140]	; (801fb80 <chirp_start+0xd28>)
 801faf4:	69db      	ldr	r3, [r3, #28]
 801faf6:	1ad2      	subs	r2, r2, r3
 801faf8:	4b22      	ldr	r3, [pc, #136]	; (801fb84 <chirp_start+0xd2c>)
 801fafa:	69db      	ldr	r3, [r3, #28]
 801fafc:	4413      	add	r3, r2
 801fafe:	4a21      	ldr	r2, [pc, #132]	; (801fb84 <chirp_start+0xd2c>)
 801fb00:	61d3      	str	r3, [r2, #28]
 801fb02:	4b1d      	ldr	r3, [pc, #116]	; (801fb78 <chirp_start+0xd20>)
 801fb04:	2200      	movs	r2, #0
 801fb06:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801fb08:	2007      	movs	r0, #7
 801fb0a:	f7ee fb51 	bl	800e1b0 <energest_type_time>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	4619      	mov	r1, r3
 801fb12:	2007      	movs	r0, #7
 801fb14:	f7eb f800 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801fb18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb1c:	4a1a      	ldr	r2, [pc, #104]	; (801fb88 <chirp_start+0xd30>)
 801fb1e:	4614      	mov	r4, r2
 801fb20:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 801fb24:	f104 0c20 	add.w	ip, r4, #32
 801fb28:	4635      	mov	r5, r6
 801fb2a:	4623      	mov	r3, r4
 801fb2c:	6818      	ldr	r0, [r3, #0]
 801fb2e:	6859      	ldr	r1, [r3, #4]
 801fb30:	689a      	ldr	r2, [r3, #8]
 801fb32:	68db      	ldr	r3, [r3, #12]
 801fb34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fb36:	3410      	adds	r4, #16
 801fb38:	3610      	adds	r6, #16
 801fb3a:	4564      	cmp	r4, ip
 801fb3c:	d1f4      	bne.n	801fb28 <chirp_start+0xcd0>
 801fb3e:	4633      	mov	r3, r6
 801fb40:	4622      	mov	r2, r4
 801fb42:	6810      	ldr	r0, [r2, #0]
 801fb44:	6851      	ldr	r1, [r2, #4]
 801fb46:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 801fb48:	2228      	movs	r2, #40	; 0x28
 801fb4a:	2100      	movs	r1, #0
 801fb4c:	480e      	ldr	r0, [pc, #56]	; (801fb88 <chirp_start+0xd30>)
 801fb4e:	f001 fd1c 	bl	802158a <memset>
        #endif
        if (!chirp_round(node_id, &chirp_outl))
 801fb52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fb56:	f107 030f 	add.w	r3, r7, #15
 801fb5a:	781b      	ldrb	r3, [r3, #0]
 801fb5c:	4611      	mov	r1, r2
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f7f5 f838 	bl	8014bd4 <chirp_round>
 801fb64:	4603      	mov	r3, r0
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	d112      	bne.n	801fb90 <chirp_start+0xd38>
        {
          free(payload_distribution);
 801fb6a:	4b08      	ldr	r3, [pc, #32]	; (801fb8c <chirp_start+0xd34>)
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	4618      	mov	r0, r3
 801fb70:	f001 fcf8 	bl	8021564 <free>
          break;
 801fb74:	f001 bb6f 	b.w	8021256 <chirp_start+0x23fe>
 801fb78:	2000112c 	.word	0x2000112c
 801fb7c:	200012c8 	.word	0x200012c8
 801fb80:	20001308 	.word	0x20001308
 801fb84:	20000f10 	.word	0x20000f10
 801fb88:	20000d00 	.word	0x20000d00
 801fb8c:	20000cc8 	.word	0x20000cc8
        }
				free(payload_distribution);
 801fb90:	4bc2      	ldr	r3, [pc, #776]	; (801fe9c <chirp_start+0x1044>)
 801fb92:	681b      	ldr	r3, [r3, #0]
 801fb94:	4618      	mov	r0, r3
 801fb96:	f001 fce5 	bl	8021564 <free>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801fb9a:	4bc1      	ldr	r3, [pc, #772]	; (801fea0 <chirp_start+0x1048>)
 801fb9c:	79db      	ldrb	r3, [r3, #7]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d00d      	beq.n	801fbbe <chirp_start+0xd66>
 801fba2:	4bc0      	ldr	r3, [pc, #768]	; (801fea4 <chirp_start+0x104c>)
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fba8:	4bbf      	ldr	r3, [pc, #764]	; (801fea8 <chirp_start+0x1050>)
 801fbaa:	69db      	ldr	r3, [r3, #28]
 801fbac:	1ad2      	subs	r2, r2, r3
 801fbae:	4bbf      	ldr	r3, [pc, #764]	; (801feac <chirp_start+0x1054>)
 801fbb0:	69db      	ldr	r3, [r3, #28]
 801fbb2:	4413      	add	r3, r2
 801fbb4:	4abd      	ldr	r2, [pc, #756]	; (801feac <chirp_start+0x1054>)
 801fbb6:	61d3      	str	r3, [r2, #28]
 801fbb8:	4bb9      	ldr	r3, [pc, #740]	; (801fea0 <chirp_start+0x1048>)
 801fbba:	2200      	movs	r2, #0
 801fbbc:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801fbbe:	2007      	movs	r0, #7
 801fbc0:	f7ee faf6 	bl	800e1b0 <energest_type_time>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	4619      	mov	r1, r3
 801fbc8:	2007      	movs	r0, #7
 801fbca:	f7ea ffa5 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801fbce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fbd2:	4ab7      	ldr	r2, [pc, #732]	; (801feb0 <chirp_start+0x1058>)
 801fbd4:	4614      	mov	r4, r2
 801fbd6:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 801fbda:	f104 0c20 	add.w	ip, r4, #32
 801fbde:	4635      	mov	r5, r6
 801fbe0:	4623      	mov	r3, r4
 801fbe2:	6818      	ldr	r0, [r3, #0]
 801fbe4:	6859      	ldr	r1, [r3, #4]
 801fbe6:	689a      	ldr	r2, [r3, #8]
 801fbe8:	68db      	ldr	r3, [r3, #12]
 801fbea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fbec:	3410      	adds	r4, #16
 801fbee:	3610      	adds	r6, #16
 801fbf0:	4564      	cmp	r4, ip
 801fbf2:	d1f4      	bne.n	801fbde <chirp_start+0xd86>
 801fbf4:	4633      	mov	r3, r6
 801fbf6:	4622      	mov	r2, r4
 801fbf8:	6810      	ldr	r0, [r2, #0]
 801fbfa:	6851      	ldr	r1, [r2, #4]
 801fbfc:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 801fbfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc02:	781b      	ldrb	r3, [r3, #0]
 801fc04:	461a      	mov	r2, r3
 801fc06:	4613      	mov	r3, r2
 801fc08:	005b      	lsls	r3, r3, #1
 801fc0a:	4413      	add	r3, r2
 801fc0c:	019b      	lsls	r3, r3, #6
 801fc0e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801fc12:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 801fc16:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fc1a:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 801fc1e:	220a      	movs	r2, #10
 801fc20:	4618      	mov	r0, r3
 801fc22:	f7fc fc8f 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 801fc26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc2a:	781b      	ldrb	r3, [r3, #0]
 801fc2c:	461a      	mov	r2, r3
 801fc2e:	4613      	mov	r3, r2
 801fc30:	005b      	lsls	r3, r3, #1
 801fc32:	4413      	add	r3, r2
 801fc34:	019b      	lsls	r3, r3, #6
 801fc36:	461a      	mov	r2, r3
 801fc38:	4b9e      	ldr	r3, [pc, #632]	; (801feb4 <chirp_start+0x105c>)
 801fc3a:	4413      	add	r3, r2
 801fc3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fc40:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 801fc44:	220a      	movs	r2, #10
 801fc46:	4618      	mov	r0, r3
 801fc48:	f7fc fc7c 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 801fc4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc50:	781b      	ldrb	r3, [r3, #0]
 801fc52:	461a      	mov	r2, r3
 801fc54:	4613      	mov	r3, r2
 801fc56:	005b      	lsls	r3, r3, #1
 801fc58:	4413      	add	r3, r2
 801fc5a:	019b      	lsls	r3, r3, #6
 801fc5c:	461a      	mov	r2, r3
 801fc5e:	4b96      	ldr	r3, [pc, #600]	; (801feb8 <chirp_start+0x1060>)
 801fc60:	4413      	add	r3, r2
 801fc62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fc66:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 801fc6a:	220a      	movs	r2, #10
 801fc6c:	4618      	mov	r0, r3
 801fc6e:	f7fc fc69 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 801fc72:	21f8      	movs	r1, #248	; 0xf8
 801fc74:	2001      	movs	r0, #1
 801fc76:	f7fc fbe1 	bl	801c43c <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 801fc7a:	220a      	movs	r2, #10
 801fc7c:	498f      	ldr	r1, [pc, #572]	; (801febc <chirp_start+0x1064>)
 801fc7e:	4890      	ldr	r0, [pc, #576]	; (801fec0 <chirp_start+0x1068>)
 801fc80:	f7fc fc60 	bl	801c544 <FLASH_If_Write>
        #endif

				#if GPS_DATA
          // gps_time = GPS_Get_Time();
          // time_t diff = GPS_Diff(&gps_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
          DS3231_GetTime();
 801fc84:	f7f9 f93a 	bl	8018efc <DS3231_GetTime>
          ds3231_time = DS3231_ShowTime();
 801fc88:	f107 041c 	add.w	r4, r7, #28
 801fc8c:	463b      	mov	r3, r7
 801fc8e:	4618      	mov	r0, r3
 801fc90:	f7f9 f94e 	bl	8018f30 <DS3231_ShowTime>
 801fc94:	463a      	mov	r2, r7
 801fc96:	4623      	mov	r3, r4
 801fc98:	6810      	ldr	r0, [r2, #0]
 801fc9a:	6851      	ldr	r1, [r2, #4]
 801fc9c:	c303      	stmia	r3!, {r0, r1}
          diff = GPS_Diff(&ds3231_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
 801fc9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fca2:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 801fca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fca8:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 801fcac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fcb0:	f893 602b 	ldrb.w	r6, [r3, #43]	; 0x2b
 801fcb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fcb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801fcbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fcc0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801fcc4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801fcc8:	f891 102e 	ldrb.w	r1, [r1, #46]	; 0x2e
 801fccc:	f107 001c 	add.w	r0, r7, #28
 801fcd0:	9102      	str	r1, [sp, #8]
 801fcd2:	9201      	str	r2, [sp, #4]
 801fcd4:	9300      	str	r3, [sp, #0]
 801fcd6:	4633      	mov	r3, r6
 801fcd8:	462a      	mov	r2, r5
 801fcda:	4621      	mov	r1, r4
 801fcdc:	f7ea fa66 	bl	800a1ac <GPS_Diff>
 801fce0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801fce4:	e9c3 0100 	strd	r0, r1, [r3]
          assert_reset((diff > 5));
 801fce8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801fcec:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fcf0:	2b06      	cmp	r3, #6
 801fcf2:	f174 0300 	sbcs.w	r3, r4, #0
 801fcf6:	da0a      	bge.n	801fd0e <chirp_start+0xeb6>
 801fcf8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801fcfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fd00:	2b06      	cmp	r3, #6
 801fd02:	f174 0300 	sbcs.w	r3, r4, #0
 801fd06:	da02      	bge.n	801fd0e <chirp_start+0xeb6>
  __ASM volatile ("cpsid f" : : : "memory");
 801fd08:	b671      	cpsid	f
 801fd0a:	f7fc fee9 	bl	801cae0 <NVIC_SystemReset>
          if (((chirp_outl.version_hash == ((VERSION_MAJOR << 8) | (VERSION_NODE)))) && (chirp_outl.firmware_bitmap[node_id / 32] & (1 << (node_id % 32))))
 801fd0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801fd16:	4619      	mov	r1, r3
 801fd18:	4b6a      	ldr	r3, [pc, #424]	; (801fec4 <chirp_start+0x106c>)
 801fd1a:	781b      	ldrb	r3, [r3, #0]
 801fd1c:	021b      	lsls	r3, r3, #8
 801fd1e:	4a6a      	ldr	r2, [pc, #424]	; (801fec8 <chirp_start+0x1070>)
 801fd20:	7812      	ldrb	r2, [r2, #0]
 801fd22:	4313      	orrs	r3, r2
 801fd24:	4299      	cmp	r1, r3
 801fd26:	f041 828f 	bne.w	8021248 <chirp_start+0x23f0>
 801fd2a:	f107 030f 	add.w	r3, r7, #15
 801fd2e:	781b      	ldrb	r3, [r3, #0]
 801fd30:	095b      	lsrs	r3, r3, #5
 801fd32:	b2db      	uxtb	r3, r3
 801fd34:	461a      	mov	r2, r3
 801fd36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd3a:	3206      	adds	r2, #6
 801fd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fd40:	f107 020f 	add.w	r2, r7, #15
 801fd44:	7812      	ldrb	r2, [r2, #0]
 801fd46:	f002 021f 	and.w	r2, r2, #31
 801fd4a:	2101      	movs	r1, #1
 801fd4c:	fa01 f202 	lsl.w	r2, r1, r2
 801fd50:	4013      	ands	r3, r2
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	f001 8278 	beq.w	8021248 <chirp_start+0x23f0>
          {
            /* erase the user flash page */
            FLASH_If_Erase_Pages(0, 255);
 801fd58:	21ff      	movs	r1, #255	; 0xff
 801fd5a:	2000      	movs	r0, #0
 801fd5c:	f7fc fb6e 	bl	801c43c <FLASH_If_Erase_Pages>

            DS3231_GetTime();
 801fd60:	f7f9 f8cc 	bl	8018efc <DS3231_GetTime>
            /* Set alarm */
            TRACE_MSG("date:%d, %d, %d, %d\n", chirp_outl.end_date, chirp_outl.end_hour, chirp_outl.end_min, chirp_outl.end_sec);
 801fd64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801fd6c:	4619      	mov	r1, r3
 801fd6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd72:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801fd76:	461a      	mov	r2, r3
 801fd78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801fd80:	4618      	mov	r0, r3
 801fd82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801fd8a:	9300      	str	r3, [sp, #0]
 801fd8c:	4603      	mov	r3, r0
 801fd8e:	484f      	ldr	r0, [pc, #316]	; (801fecc <chirp_start+0x1074>)
 801fd90:	f002 fa08 	bl	80221a4 <iprintf>
 801fd94:	484e      	ldr	r0, [pc, #312]	; (801fed0 <chirp_start+0x1078>)
 801fd96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801fd9e:	461c      	mov	r4, r3
 801fda0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fda4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801fda8:	461a      	mov	r2, r3
 801fdaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fdae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801fdb2:	4619      	mov	r1, r3
 801fdb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fdb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801fdbc:	9302      	str	r3, [sp, #8]
 801fdbe:	9101      	str	r1, [sp, #4]
 801fdc0:	9200      	str	r2, [sp, #0]
 801fdc2:	4623      	mov	r3, r4
 801fdc4:	4a41      	ldr	r2, [pc, #260]	; (801fecc <chirp_start+0x1074>)
 801fdc6:	f240 610f 	movw	r1, #1551	; 0x60f
 801fdca:	f001 fa95 	bl	80212f8 <trace_store_msg>
 801fdce:	f001 fb15 	bl	80213fc <trace_to_flash>
            ds3231_time = DS3231_ShowTime();
 801fdd2:	f107 041c 	add.w	r4, r7, #28
 801fdd6:	463b      	mov	r3, r7
 801fdd8:	4618      	mov	r0, r3
 801fdda:	f7f9 f8a9 	bl	8018f30 <DS3231_ShowTime>
 801fdde:	463a      	mov	r2, r7
 801fde0:	4623      	mov	r3, r4
 801fde2:	6810      	ldr	r0, [r2, #0]
 801fde4:	6851      	ldr	r1, [r2, #4]
 801fde6:	c303      	stmia	r3!, {r0, r1}
            DS3231_SetAlarm1_Time(chirp_outl.end_date, chirp_outl.end_hour, chirp_outl.end_min, chirp_outl.end_sec);
 801fde8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fdec:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
 801fdf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fdf4:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
 801fdf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fdfc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801fe00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801fe08:	f7f9 f9ea 	bl	80191e0 <DS3231_SetAlarm1_Time>
            /* Waiting for bank switch */
            // GPS_Waiting(chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
            diff = GPS_Diff(&ds3231_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
 801fe0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe10:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 801fe12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe16:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 801fe1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe1e:	f893 602b 	ldrb.w	r6, [r3, #43]	; 0x2b
 801fe22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801fe2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fe2e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801fe32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801fe36:	f891 102e 	ldrb.w	r1, [r1, #46]	; 0x2e
 801fe3a:	f107 001c 	add.w	r0, r7, #28
 801fe3e:	9102      	str	r1, [sp, #8]
 801fe40:	9201      	str	r2, [sp, #4]
 801fe42:	9300      	str	r3, [sp, #0]
 801fe44:	4633      	mov	r3, r6
 801fe46:	462a      	mov	r2, r5
 801fe48:	4621      	mov	r1, r4
 801fe4a:	f7ea f9af 	bl	800a1ac <GPS_Diff>
 801fe4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801fe52:	e9c3 0100 	strd	r0, r1, [r3]
            RTC_Waiting_Count(diff);
 801fe56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801fe5a:	4618      	mov	r0, r3
 801fe5c:	f7ea fd52 	bl	800a904 <RTC_Waiting_Count>
            TRACE_MSG("---------CHIRP_BANK---------\n");
 801fe60:	481c      	ldr	r0, [pc, #112]	; (801fed4 <chirp_start+0x107c>)
 801fe62:	f002 fa27 	bl	80222b4 <puts>
 801fe66:	4b1a      	ldr	r3, [pc, #104]	; (801fed0 <chirp_start+0x1078>)
 801fe68:	4a1b      	ldr	r2, [pc, #108]	; (801fed8 <chirp_start+0x1080>)
 801fe6a:	f240 6116 	movw	r1, #1558	; 0x616
 801fe6e:	4618      	mov	r0, r3
 801fe70:	f001 fa42 	bl	80212f8 <trace_store_msg>
 801fe74:	f001 fac2 	bl	80213fc <trace_to_flash>
            #if BANK_1_RUN
            /* flash protect */
            if (chirp_outl.flash_protection)
 801fe78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d004      	beq.n	801fe8e <chirp_start+0x1036>
              Bank1_WRP(0, 255);
 801fe84:	21ff      	movs	r1, #255	; 0xff
 801fe86:	2000      	movs	r0, #0
 801fe88:	f7f9 ff38 	bl	8019cfc <Bank1_WRP>
 801fe8c:	e001      	b.n	801fe92 <chirp_start+0x103a>
            else
              Bank1_nWRP();
 801fe8e:	f7f9 ff69 	bl	8019d64 <Bank1_nWRP>
            #endif
            /* switch to bank2 */
            STMFLASH_BankSwitch();
 801fe92:	f7fc fd87 	bl	801c9a4 <STMFLASH_BankSwitch>
          }
				#endif
				break;
 801fe96:	f001 b9d7 	b.w	8021248 <chirp_start+0x23f0>
 801fe9a:	bf00      	nop
 801fe9c:	20000cc8 	.word	0x20000cc8
 801fea0:	2000112c 	.word	0x2000112c
 801fea4:	200012c8 	.word	0x200012c8
 801fea8:	20001308 	.word	0x20001308
 801feac:	20000f10 	.word	0x20000f10
 801feb0:	20000d00 	.word	0x20000d00
 801feb4:	0807c840 	.word	0x0807c840
 801feb8:	0807c880 	.word	0x0807c880
 801febc:	2000149c 	.word	0x2000149c
 801fec0:	0807c000 	.word	0x0807c000
 801fec4:	08026888 	.word	0x08026888
 801fec8:	08026889 	.word	0x08026889
 801fecc:	080266a4 	.word	0x080266a4
 801fed0:	0802667d 	.word	0x0802667d
 801fed4:	080266bc 	.word	0x080266bc
 801fed8:	080266dc 	.word	0x080266dc
			}
			case MX_DISSEMINATE:
			{
        if ((chirp_outl.task_bitmap[node_id / 32] & (1 << (node_id % 32))))
 801fedc:	f107 030f 	add.w	r3, r7, #15
 801fee0:	781b      	ldrb	r3, [r3, #0]
 801fee2:	095b      	lsrs	r3, r3, #5
 801fee4:	b2db      	uxtb	r3, r3
 801fee6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801feea:	3306      	adds	r3, #6
 801feec:	009b      	lsls	r3, r3, #2
 801feee:	4413      	add	r3, r2
 801fef0:	685b      	ldr	r3, [r3, #4]
 801fef2:	f107 020f 	add.w	r2, r7, #15
 801fef6:	7812      	ldrb	r2, [r2, #0]
 801fef8:	f002 021f 	and.w	r2, r2, #31
 801fefc:	2101      	movs	r1, #1
 801fefe:	fa01 f202 	lsl.w	r2, r1, r2
 801ff02:	4013      	ands	r3, r2
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	f001 81a2 	beq.w	802124e <chirp_start+0x23f6>
        {
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 801ff0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff0e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 801ff12:	b2d8      	uxtb	r0, r3
 801ff14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff18:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801ff1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ff20:	f8d2 2011 	ldr.w	r2, [r2, #17]
 801ff24:	9201      	str	r2, [sp, #4]
 801ff26:	9300      	str	r3, [sp, #0]
 801ff28:	2308      	movs	r3, #8
 801ff2a:	2201      	movs	r2, #1
 801ff2c:	2107      	movs	r1, #7
 801ff2e:	f7f2 ff7d 	bl	8012e2c <chirp_radio_config>
        chirp_outl.disem_file_index = 0;
 801ff32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff36:	2200      	movs	r2, #0
 801ff38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        chirp_outl.disem_file_max = UINT16_MAX / 2;
 801ff3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff40:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ff44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        chirp_outl.disem_file_index_stay = 0;
 801ff48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff4c:	2200      	movs	r2, #0
 801ff4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        chirp_outl.version_hash = 0;
 801ff52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff56:	2200      	movs	r2, #0
 801ff58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        memset(chirp_outl.firmware_md5, 0, sizeof(chirp_outl.firmware_md5));
 801ff5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff60:	3340      	adds	r3, #64	; 0x40
 801ff62:	2210      	movs	r2, #16
 801ff64:	2100      	movs	r1, #0
 801ff66:	4618      	mov	r0, r3
 801ff68:	f001 fb0f 	bl	802158a <memset>
				TRACE_MSG("---------MX_DISSEMINATE---------\n");
 801ff6c:	48b0      	ldr	r0, [pc, #704]	; (8020230 <chirp_start+0x13d8>)
 801ff6e:	f002 f9a1 	bl	80222b4 <puts>
 801ff72:	4bb0      	ldr	r3, [pc, #704]	; (8020234 <chirp_start+0x13dc>)
 801ff74:	4ab0      	ldr	r2, [pc, #704]	; (8020238 <chirp_start+0x13e0>)
 801ff76:	f240 612e 	movw	r1, #1582	; 0x62e
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	f001 f9bc 	bl	80212f8 <trace_store_msg>
 801ff80:	f001 fa3c 	bl	80213fc <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = task_node_num;
 801ff84:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801ff88:	b2da      	uxtb	r2, r3
 801ff8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff8e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.default_generate_size;
 801ff92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff96:	7dda      	ldrb	r2, [r3, #23]
 801ff98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 801ffa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffa4:	7d9a      	ldrb	r2, [r3, #22]
 801ffa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				assert_reset((chirp_outl.payload_len > DATA_HEADER_LENGTH + 28));
 801ffae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ffb6:	2b24      	cmp	r3, #36	; 0x24
 801ffb8:	d808      	bhi.n	801ffcc <chirp_start+0x1174>
 801ffba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ffc2:	2b24      	cmp	r3, #36	; 0x24
 801ffc4:	d802      	bhi.n	801ffcc <chirp_start+0x1174>
 801ffc6:	b671      	cpsid	f
 801ffc8:	f7fc fd8a 	bl	801cae0 <NVIC_SystemReset>
				assert_reset(!((chirp_outl.payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 801ffcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ffd4:	f003 0307 	and.w	r3, r3, #7
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	d00a      	beq.n	801fff2 <chirp_start+0x119a>
 801ffdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ffe4:	f003 0307 	and.w	r3, r3, #7
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d002      	beq.n	801fff2 <chirp_start+0x119a>
 801ffec:	b671      	cpsid	f
 801ffee:	f7fc fd77 	bl	801cae0 <NVIC_SystemReset>
				chirp_outl.round_setup = 1;
 801fff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fff6:	2201      	movs	r2, #1
 801fff8:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = UINT16_MAX;
 801fffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fffe:	f04f 32ff 	mov.w	r2, #4294967295
 8020002:	70da      	strb	r2, [r3, #3]
 8020004:	f04f 32ff 	mov.w	r2, #4294967295
 8020008:	711a      	strb	r2, [r3, #4]
				chirp_outl.file_chunk_len = chirp_outl.generation_size * (chirp_outl.payload_len - DATA_HEADER_LENGTH);
 802000a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802000e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020012:	b29a      	uxth	r2, r3
 8020014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802001c:	3b08      	subs	r3, #8
 802001e:	b29b      	uxth	r3, r3
 8020020:	fb12 f303 	smulbb	r3, r2, r3
 8020024:	b29a      	uxth	r2, r3
 8020026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802002a:	875a      	strh	r2, [r3, #58]	; 0x3a
        chirp_outl.disem_file_memory = (uint32_t *)malloc(chirp_outl.file_chunk_len);
 802002c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020030:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020032:	4618      	mov	r0, r3
 8020034:	f001 fa8e 	bl	8021554 <malloc>
 8020038:	4603      	mov	r3, r0
 802003a:	461a      	mov	r2, r3
 802003c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020040:	f8c3 2065 	str.w	r2, [r3, #101]	; 0x65
        if (!node_id)
 8020044:	f107 030f 	add.w	r3, r7, #15
 8020048:	781b      	ldrb	r3, [r3, #0]
 802004a:	2b00      	cmp	r3, #0
 802004c:	f040 808d 	bne.w	802016a <chirp_start+0x1312>
				{
					chirp_controller_read_command(&chirp_outl);
 8020050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020054:	4618      	mov	r0, r3
 8020056:	f7fd fd2f 	bl	801dab8 <chirp_controller_read_command>
					uint32_t flash_length;
					if (!chirp_outl.patch_update)
 802005a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802005e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8020062:	2b00      	cmp	r3, #0
 8020064:	d104      	bne.n	8020070 <chirp_start+0x1218>
						flash_length = menu_initiator_read_file();
 8020066:	f7fd fa70 	bl	801d54a <menu_initiator_read_file>
 802006a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 802006e:	e022      	b.n	80200b6 <chirp_start+0x125e>
					else
					{
						/* patch bank1, means update self firmware */
						chirp_outl.patch_page = menu_pre_patch(chirp_outl.patch_bank, chirp_outl.old_firmware_size, chirp_outl.firmware_size);
 8020070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020074:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 8020078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802007c:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 8020080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020086:	461a      	mov	r2, r3
 8020088:	f7fd fa1e 	bl	801d4c8 <menu_pre_patch>
 802008c:	4603      	mov	r3, r0
 802008e:	461a      	mov	r2, r3
 8020090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
						flash_length = menu_serialDownload(chirp_outl.patch_page, chirp_outl.patch_bank);
 8020098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802009c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80200a0:	461a      	mov	r2, r3
 80200a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200a6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80200aa:	4619      	mov	r1, r3
 80200ac:	4610      	mov	r0, r2
 80200ae:	f7fd f871 	bl	801d194 <menu_serialDownload>
 80200b2:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
					}
					chirp_outl.firmware_size = flash_length;
 80200b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80200be:	63da      	str	r2, [r3, #60]	; 0x3c
					uint32_t firmware_size[1];
					firmware_size[0] = chirp_outl.firmware_size;
 80200c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80200c6:	f107 0310 	add.w	r3, r7, #16
 80200ca:	601a      	str	r2, [r3, #0]
          FLASH_If_Erase_Pages(0, 253);
 80200cc:	21fd      	movs	r1, #253	; 0xfd
 80200ce:	2000      	movs	r0, #0
 80200d0:	f7fc f9b4 	bl	801c43c <FLASH_If_Erase_Pages>
					FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size, 2);
 80200d4:	f107 0310 	add.w	r3, r7, #16
 80200d8:	2202      	movs	r2, #2
 80200da:	4619      	mov	r1, r3
 80200dc:	4857      	ldr	r0, [pc, #348]	; (802023c <chirp_start+0x13e4>)
 80200de:	f7fc fa31 	bl	801c544 <FLASH_If_Write>

          chirp_outl.disem_file_max = (chirp_outl.firmware_size + chirp_outl.file_chunk_len - 1) / chirp_outl.file_chunk_len + 1;
 80200e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80200e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80200ec:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80200ee:	4413      	add	r3, r2
 80200f0:	3b01      	subs	r3, #1
 80200f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80200f6:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80200f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80200fc:	b29b      	uxth	r3, r3
 80200fe:	3301      	adds	r3, #1
 8020100:	b29a      	uxth	r2, r3
 8020102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020106:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					TRACE_MSG("file size:%lu, %d, %d, %lu\n", flash_length, chirp_outl.disem_file_max, chirp_outl.file_chunk_len, chirp_outl.payload_len - DATA_HEADER_LENGTH );
 802010a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802010e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020112:	461a      	mov	r2, r3
 8020114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020118:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802011a:	4619      	mov	r1, r3
 802011c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020124:	3b08      	subs	r3, #8
 8020126:	9300      	str	r3, [sp, #0]
 8020128:	460b      	mov	r3, r1
 802012a:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 802012e:	4844      	ldr	r0, [pc, #272]	; (8020240 <chirp_start+0x13e8>)
 8020130:	f002 f838 	bl	80221a4 <iprintf>
 8020134:	483f      	ldr	r0, [pc, #252]	; (8020234 <chirp_start+0x13dc>)
 8020136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802013a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802013e:	461a      	mov	r2, r3
 8020140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020144:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020146:	4619      	mov	r1, r3
 8020148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802014c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020150:	3b08      	subs	r3, #8
 8020152:	9302      	str	r3, [sp, #8]
 8020154:	9101      	str	r1, [sp, #4]
 8020156:	9200      	str	r2, [sp, #0]
 8020158:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 802015c:	4a38      	ldr	r2, [pc, #224]	; (8020240 <chirp_start+0x13e8>)
 802015e:	f240 614c 	movw	r1, #1612	; 0x64c
 8020162:	f001 f8c9 	bl	80212f8 <trace_store_msg>
 8020166:	f001 f949 	bl	80213fc <trace_to_flash>
				}
        chirp_outl.disem_flag = 1;
 802016a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802016e:	2201      	movs	r2, #1
 8020170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len + HASH_TAIL, DISSEMINATION);
 8020174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020178:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 802017c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020180:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8020184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802018c:	3302      	adds	r3, #2
 802018e:	b2da      	uxtb	r2, r3
 8020190:	2302      	movs	r3, #2
 8020192:	f7f2 fbe5 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020196:	4b2b      	ldr	r3, [pc, #172]	; (8020244 <chirp_start+0x13ec>)
 8020198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802019c:	4618      	mov	r0, r3
 802019e:	4b29      	ldr	r3, [pc, #164]	; (8020244 <chirp_start+0x13ec>)
 80201a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80201a4:	4619      	mov	r1, r3
 80201a6:	4b27      	ldr	r3, [pc, #156]	; (8020244 <chirp_start+0x13ec>)
 80201a8:	8a5b      	ldrh	r3, [r3, #18]
 80201aa:	b29b      	uxth	r3, r3
 80201ac:	3302      	adds	r3, #2
 80201ae:	9301      	str	r3, [sp, #4]
 80201b0:	2308      	movs	r3, #8
 80201b2:	9300      	str	r3, [sp, #0]
 80201b4:	2300      	movs	r3, #0
 80201b6:	2201      	movs	r2, #1
 80201b8:	f7ec fee8 	bl	800cf8c <SX1276GetPacketTime>
 80201bc:	4603      	mov	r3, r0
 80201be:	461a      	mov	r2, r3
 80201c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201c4:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 2000000);
 80201c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201cc:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80201d0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80201d4:	33a0      	adds	r3, #160	; 0xa0
 80201d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80201da:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80201de:	b291      	uxth	r1, r2
 80201e0:	4a19      	ldr	r2, [pc, #100]	; (8020248 <chirp_start+0x13f0>)
 80201e2:	4618      	mov	r0, r3
 80201e4:	f7f2 fdb6 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 80201e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201ec:	781b      	ldrb	r3, [r3, #0]
 80201ee:	4618      	mov	r0, r3
 80201f0:	f7f2 fe7c 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 80201f4:	bf00      	nop
 80201f6:	4b15      	ldr	r3, [pc, #84]	; (802024c <chirp_start+0x13f4>)
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80201fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8020200:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020204:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8020208:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 802020c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8020210:	1ad3      	subs	r3, r2, r3
 8020212:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8020216:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 802021a:	2b00      	cmp	r3, #0
 802021c:	db18      	blt.n	8020250 <chirp_start+0x13f8>
 802021e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8020222:	2b00      	cmp	r3, #0
 8020224:	bf14      	ite	ne
 8020226:	2301      	movne	r3, #1
 8020228:	2300      	moveq	r3, #0
 802022a:	b2db      	uxtb	r3, r3
 802022c:	e012      	b.n	8020254 <chirp_start+0x13fc>
 802022e:	bf00      	nop
 8020230:	080266fc 	.word	0x080266fc
 8020234:	0802667d 	.word	0x0802667d
 8020238:	08026720 	.word	0x08026720
 802023c:	080fe800 	.word	0x080fe800
 8020240:	08026744 	.word	0x08026744
 8020244:	20001430 	.word	0x20001430
 8020248:	001e8480 	.word	0x001e8480
 802024c:	200012c8 	.word	0x200012c8
 8020250:	f04f 33ff 	mov.w	r3, #4294967295
 8020254:	2b00      	cmp	r3, #0
 8020256:	dbce      	blt.n	80201f6 <chirp_start+0x139e>
				// chirp_round(node_id, &chirp_outl);
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020258:	4b92      	ldr	r3, [pc, #584]	; (80204a4 <chirp_start+0x164c>)
 802025a:	79db      	ldrb	r3, [r3, #7]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d00d      	beq.n	802027c <chirp_start+0x1424>
 8020260:	4b91      	ldr	r3, [pc, #580]	; (80204a8 <chirp_start+0x1650>)
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020266:	4b91      	ldr	r3, [pc, #580]	; (80204ac <chirp_start+0x1654>)
 8020268:	69db      	ldr	r3, [r3, #28]
 802026a:	1ad2      	subs	r2, r2, r3
 802026c:	4b90      	ldr	r3, [pc, #576]	; (80204b0 <chirp_start+0x1658>)
 802026e:	69db      	ldr	r3, [r3, #28]
 8020270:	4413      	add	r3, r2
 8020272:	4a8f      	ldr	r2, [pc, #572]	; (80204b0 <chirp_start+0x1658>)
 8020274:	61d3      	str	r3, [r2, #28]
 8020276:	4b8b      	ldr	r3, [pc, #556]	; (80204a4 <chirp_start+0x164c>)
 8020278:	2200      	movs	r2, #0
 802027a:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 802027c:	2007      	movs	r0, #7
 802027e:	f7ed ff97 	bl	800e1b0 <energest_type_time>
 8020282:	4603      	mov	r3, r0
 8020284:	4619      	mov	r1, r3
 8020286:	2007      	movs	r0, #7
 8020288:	f7ea fc46 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 802028c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020290:	4a88      	ldr	r2, [pc, #544]	; (80204b4 <chirp_start+0x165c>)
 8020292:	4614      	mov	r4, r2
 8020294:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020298:	f104 0c20 	add.w	ip, r4, #32
 802029c:	4635      	mov	r5, r6
 802029e:	4623      	mov	r3, r4
 80202a0:	6818      	ldr	r0, [r3, #0]
 80202a2:	6859      	ldr	r1, [r3, #4]
 80202a4:	689a      	ldr	r2, [r3, #8]
 80202a6:	68db      	ldr	r3, [r3, #12]
 80202a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80202aa:	3410      	adds	r4, #16
 80202ac:	3610      	adds	r6, #16
 80202ae:	4564      	cmp	r4, ip
 80202b0:	d1f4      	bne.n	802029c <chirp_start+0x1444>
 80202b2:	4633      	mov	r3, r6
 80202b4:	4622      	mov	r2, r4
 80202b6:	6810      	ldr	r0, [r2, #0]
 80202b8:	6851      	ldr	r1, [r2, #4]
 80202ba:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 80202bc:	2228      	movs	r2, #40	; 0x28
 80202be:	2100      	movs	r1, #0
 80202c0:	487c      	ldr	r0, [pc, #496]	; (80204b4 <chirp_start+0x165c>)
 80202c2:	f001 f962 	bl	802158a <memset>
        #endif
        if (!chirp_round(task_node_id, &chirp_outl))
 80202c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80202ca:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80202ce:	4611      	mov	r1, r2
 80202d0:	4618      	mov	r0, r3
 80202d2:	f7f4 fc7f 	bl	8014bd4 <chirp_round>
 80202d6:	4603      	mov	r3, r0
 80202d8:	2b00      	cmp	r3, #0
 80202da:	d109      	bne.n	80202f0 <chirp_start+0x1498>
        {
          free(payload_distribution);
 80202dc:	4b76      	ldr	r3, [pc, #472]	; (80204b8 <chirp_start+0x1660>)
 80202de:	681b      	ldr	r3, [r3, #0]
 80202e0:	4618      	mov	r0, r3
 80202e2:	f001 f93f 	bl	8021564 <free>
          FLASH_If_Erase(0);
 80202e6:	2000      	movs	r0, #0
 80202e8:	f7fc f836 	bl	801c358 <FLASH_If_Erase>
          break;
 80202ec:	f000 bfb3 	b.w	8021256 <chirp_start+0x23fe>
        }
				free(payload_distribution);
 80202f0:	4b71      	ldr	r3, [pc, #452]	; (80204b8 <chirp_start+0x1660>)
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	4618      	mov	r0, r3
 80202f6:	f001 f935 	bl	8021564 <free>
        free(chirp_outl.disem_file_memory);
 80202fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202fe:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 8020302:	4618      	mov	r0, r3
 8020304:	f001 f92e 	bl	8021564 <free>
        if(!FirmwareUpgrade(chirp_outl.patch_update, chirp_outl.patch_bank, 0, chirp_outl.old_firmware_size, chirp_outl.patch_bank, chirp_outl.patch_page, chirp_outl.firmware_size, chirp_outl.firmware_md5, chirp_outl.file_compression))
 8020308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802030c:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8020310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020314:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 8020318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802031c:	f8d3 5059 	ldr.w	r5, [r3, #89]	; 0x59
 8020320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020324:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8020328:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802032c:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8020330:	4616      	mov	r6, r2
 8020332:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020336:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8020338:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802033c:	f8d1 1052 	ldr.w	r1, [r1, #82]	; 0x52
 8020340:	b2c9      	uxtb	r1, r1
 8020342:	9104      	str	r1, [sp, #16]
 8020344:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020348:	3140      	adds	r1, #64	; 0x40
 802034a:	9103      	str	r1, [sp, #12]
 802034c:	9202      	str	r2, [sp, #8]
 802034e:	9601      	str	r6, [sp, #4]
 8020350:	9300      	str	r3, [sp, #0]
 8020352:	462b      	mov	r3, r5
 8020354:	2200      	movs	r2, #0
 8020356:	4621      	mov	r1, r4
 8020358:	f7f9 fecc 	bl	801a0f4 <FirmwareUpgrade>
 802035c:	4603      	mov	r3, r0
 802035e:	f083 0301 	eor.w	r3, r3, #1
 8020362:	b2db      	uxtb	r3, r3
 8020364:	2b00      	cmp	r3, #0
 8020366:	f040 8775 	bne.w	8021254 <chirp_start+0x23fc>
          break;
        Stats_to_Flash(chirp_outl.task);
 802036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802036e:	781b      	ldrb	r3, [r3, #0]
 8020370:	4618      	mov	r0, r3
 8020372:	f7ea fc49 	bl	800ac08 <Stats_to_Flash>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020376:	4b4b      	ldr	r3, [pc, #300]	; (80204a4 <chirp_start+0x164c>)
 8020378:	79db      	ldrb	r3, [r3, #7]
 802037a:	2b00      	cmp	r3, #0
 802037c:	d00d      	beq.n	802039a <chirp_start+0x1542>
 802037e:	4b4a      	ldr	r3, [pc, #296]	; (80204a8 <chirp_start+0x1650>)
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020384:	4b49      	ldr	r3, [pc, #292]	; (80204ac <chirp_start+0x1654>)
 8020386:	69db      	ldr	r3, [r3, #28]
 8020388:	1ad2      	subs	r2, r2, r3
 802038a:	4b49      	ldr	r3, [pc, #292]	; (80204b0 <chirp_start+0x1658>)
 802038c:	69db      	ldr	r3, [r3, #28]
 802038e:	4413      	add	r3, r2
 8020390:	4a47      	ldr	r2, [pc, #284]	; (80204b0 <chirp_start+0x1658>)
 8020392:	61d3      	str	r3, [r2, #28]
 8020394:	4b43      	ldr	r3, [pc, #268]	; (80204a4 <chirp_start+0x164c>)
 8020396:	2200      	movs	r2, #0
 8020398:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 802039a:	2007      	movs	r0, #7
 802039c:	f7ed ff08 	bl	800e1b0 <energest_type_time>
 80203a0:	4603      	mov	r3, r0
 80203a2:	4619      	mov	r1, r3
 80203a4:	2007      	movs	r0, #7
 80203a6:	f7ea fbb7 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_WRITE_BANK1, energest_type_time(ENERGEST_TYPE_FLASH_WRITE_BANK1));
 80203aa:	200a      	movs	r0, #10
 80203ac:	f7ed ff00 	bl	800e1b0 <energest_type_time>
 80203b0:	4603      	mov	r3, r0
 80203b2:	4619      	mov	r1, r3
 80203b4:	200a      	movs	r0, #10
 80203b6:	f7ea fbaf 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_WRITE_BANK2, energest_type_time(ENERGEST_TYPE_FLASH_WRITE_BANK2));
 80203ba:	200b      	movs	r0, #11
 80203bc:	f7ed fef8 	bl	800e1b0 <energest_type_time>
 80203c0:	4603      	mov	r3, r0
 80203c2:	4619      	mov	r1, r3
 80203c4:	200b      	movs	r0, #11
 80203c6:	f7ea fba7 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_ERASE, energest_type_time(ENERGEST_TYPE_FLASH_ERASE));
 80203ca:	200c      	movs	r0, #12
 80203cc:	f7ed fef0 	bl	800e1b0 <energest_type_time>
 80203d0:	4603      	mov	r3, r0
 80203d2:	4619      	mov	r1, r3
 80203d4:	200c      	movs	r0, #12
 80203d6:	f7ea fb9f 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_VERIFY, energest_type_time(ENERGEST_TYPE_FLASH_VERIFY));
 80203da:	200d      	movs	r0, #13
 80203dc:	f7ed fee8 	bl	800e1b0 <energest_type_time>
 80203e0:	4603      	mov	r3, r0
 80203e2:	4619      	mov	r1, r3
 80203e4:	200d      	movs	r0, #13
 80203e6:	f7ea fb97 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 80203ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80203ee:	4a31      	ldr	r2, [pc, #196]	; (80204b4 <chirp_start+0x165c>)
 80203f0:	4614      	mov	r4, r2
 80203f2:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 80203f6:	f104 0c20 	add.w	ip, r4, #32
 80203fa:	4635      	mov	r5, r6
 80203fc:	4623      	mov	r3, r4
 80203fe:	6818      	ldr	r0, [r3, #0]
 8020400:	6859      	ldr	r1, [r3, #4]
 8020402:	689a      	ldr	r2, [r3, #8]
 8020404:	68db      	ldr	r3, [r3, #12]
 8020406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020408:	3410      	adds	r4, #16
 802040a:	3610      	adds	r6, #16
 802040c:	4564      	cmp	r4, ip
 802040e:	d1f4      	bne.n	80203fa <chirp_start+0x15a2>
 8020410:	4633      	mov	r3, r6
 8020412:	4622      	mov	r2, r4
 8020414:	6810      	ldr	r0, [r2, #0]
 8020416:	6851      	ldr	r1, [r2, #4]
 8020418:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 802041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802041e:	781b      	ldrb	r3, [r3, #0]
 8020420:	461a      	mov	r2, r3
 8020422:	4613      	mov	r3, r2
 8020424:	005b      	lsls	r3, r3, #1
 8020426:	4413      	add	r3, r2
 8020428:	019b      	lsls	r3, r3, #6
 802042a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 802042e:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 8020432:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020436:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 802043a:	220a      	movs	r2, #10
 802043c:	4618      	mov	r0, r3
 802043e:	f7fc f881 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 8020442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020446:	781b      	ldrb	r3, [r3, #0]
 8020448:	461a      	mov	r2, r3
 802044a:	4613      	mov	r3, r2
 802044c:	005b      	lsls	r3, r3, #1
 802044e:	4413      	add	r3, r2
 8020450:	019b      	lsls	r3, r3, #6
 8020452:	461a      	mov	r2, r3
 8020454:	4b19      	ldr	r3, [pc, #100]	; (80204bc <chirp_start+0x1664>)
 8020456:	4413      	add	r3, r2
 8020458:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802045c:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8020460:	220a      	movs	r2, #10
 8020462:	4618      	mov	r0, r3
 8020464:	f7fc f86e 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 8020468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802046c:	781b      	ldrb	r3, [r3, #0]
 802046e:	461a      	mov	r2, r3
 8020470:	4613      	mov	r3, r2
 8020472:	005b      	lsls	r3, r3, #1
 8020474:	4413      	add	r3, r2
 8020476:	019b      	lsls	r3, r3, #6
 8020478:	461a      	mov	r2, r3
 802047a:	4b11      	ldr	r3, [pc, #68]	; (80204c0 <chirp_start+0x1668>)
 802047c:	4413      	add	r3, r2
 802047e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020482:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 8020486:	220a      	movs	r2, #10
 8020488:	4618      	mov	r0, r3
 802048a:	f7fc f85b 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 802048e:	21f8      	movs	r1, #248	; 0xf8
 8020490:	2001      	movs	r0, #1
 8020492:	f7fb ffd3 	bl	801c43c <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 8020496:	220a      	movs	r2, #10
 8020498:	490a      	ldr	r1, [pc, #40]	; (80204c4 <chirp_start+0x166c>)
 802049a:	480b      	ldr	r0, [pc, #44]	; (80204c8 <chirp_start+0x1670>)
 802049c:	f7fc f852 	bl	801c544 <FLASH_If_Write>
        #endif

        }
				break;
 80204a0:	f000 bed5 	b.w	802124e <chirp_start+0x23f6>
 80204a4:	2000112c 	.word	0x2000112c
 80204a8:	200012c8 	.word	0x200012c8
 80204ac:	20001308 	.word	0x20001308
 80204b0:	20000f10 	.word	0x20000f10
 80204b4:	20000d00 	.word	0x20000d00
 80204b8:	20000cc8 	.word	0x20000cc8
 80204bc:	0807c840 	.word	0x0807c840
 80204c0:	0807c880 	.word	0x0807c880
 80204c4:	2000149c 	.word	0x2000149c
 80204c8:	0807c000 	.word	0x0807c000
			}
			case MX_COLLECT:
			{
        if ((chirp_outl.task_bitmap[node_id / 32] & (1 << (node_id % 32))))
 80204cc:	f107 030f 	add.w	r3, r7, #15
 80204d0:	781b      	ldrb	r3, [r3, #0]
 80204d2:	095b      	lsrs	r3, r3, #5
 80204d4:	b2db      	uxtb	r3, r3
 80204d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80204da:	3306      	adds	r3, #6
 80204dc:	009b      	lsls	r3, r3, #2
 80204de:	4413      	add	r3, r2
 80204e0:	685b      	ldr	r3, [r3, #4]
 80204e2:	f107 020f 	add.w	r2, r7, #15
 80204e6:	7812      	ldrb	r2, [r2, #0]
 80204e8:	f002 021f 	and.w	r2, r2, #31
 80204ec:	2101      	movs	r1, #1
 80204ee:	fa01 f202 	lsl.w	r2, r1, r2
 80204f2:	4013      	ands	r3, r2
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	f000 8172 	beq.w	80207de <chirp_start+0x1986>
        {
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 80204fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204fe:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8020502:	b2d8      	uxtb	r0, r3
 8020504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020508:	f993 3015 	ldrsb.w	r3, [r3, #21]
 802050c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020510:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8020514:	9201      	str	r2, [sp, #4]
 8020516:	9300      	str	r3, [sp, #0]
 8020518:	2308      	movs	r3, #8
 802051a:	2201      	movs	r2, #1
 802051c:	2107      	movs	r1, #7
 802051e:	f7f2 fc85 	bl	8012e2c <chirp_radio_config>

				TRACE_MSG("---------MX_COLLECT---------\n");
 8020522:	48a0      	ldr	r0, [pc, #640]	; (80207a4 <chirp_start+0x194c>)
 8020524:	f001 fec6 	bl	80222b4 <puts>
 8020528:	4b9f      	ldr	r3, [pc, #636]	; (80207a8 <chirp_start+0x1950>)
 802052a:	4aa0      	ldr	r2, [pc, #640]	; (80207ac <chirp_start+0x1954>)
 802052c:	f240 617f 	movw	r1, #1663	; 0x67f
 8020530:	4618      	mov	r0, r3
 8020532:	f000 fee1 	bl	80212f8 <trace_store_msg>
 8020536:	f000 ff61 	bl	80213fc <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = task_node_num;
 802053a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 802053e:	b2da      	uxtb	r2, r3
 8020540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020544:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 8020548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802054c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 8020558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802055c:	7d9a      	ldrb	r2, [r3, #22]
 802055e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_max = UINT16_MAX;
 8020566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802056a:	f04f 32ff 	mov.w	r2, #4294967295
 802056e:	70da      	strb	r2, [r3, #3]
 8020570:	f04f 32ff 	mov.w	r2, #4294967295
 8020574:	711a      	strb	r2, [r3, #4]
				chirp_outl.round_setup = 1;
 8020576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802057a:	2201      	movs	r2, #1
 802057c:	715a      	strb	r2, [r3, #5]
				chirp_outl.file_chunk_len = chirp_outl.payload_len - DATA_HEADER_LENGTH;
 802057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020582:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020586:	b29b      	uxth	r3, r3
 8020588:	3b08      	subs	r3, #8
 802058a:	b29a      	uxth	r2, r3
 802058c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020590:	875a      	strh	r2, [r3, #58]	; 0x3a
        assert_reset((chirp_outl.payload_len > DATA_HEADER_LENGTH + 8));
 8020592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020596:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802059a:	2b10      	cmp	r3, #16
 802059c:	d808      	bhi.n	80205b0 <chirp_start+0x1758>
 802059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80205a6:	2b10      	cmp	r3, #16
 80205a8:	d802      	bhi.n	80205b0 <chirp_start+0x1758>
 80205aa:	b671      	cpsid	f
 80205ac:	f7fc fa98 	bl	801cae0 <NVIC_SystemReset>
				assert_reset(!(chirp_outl.file_chunk_len % sizeof(uint64_t)));
 80205b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80205b6:	f003 0307 	and.w	r3, r3, #7
 80205ba:	b29b      	uxth	r3, r3
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d00a      	beq.n	80205d6 <chirp_start+0x177e>
 80205c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80205c6:	f003 0307 	and.w	r3, r3, #7
 80205ca:	b29b      	uxth	r3, r3
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d002      	beq.n	80205d6 <chirp_start+0x177e>
 80205d0:	b671      	cpsid	f
 80205d2:	f7fc fa85 	bl	801cae0 <NVIC_SystemReset>
				if (!node_id)
 80205d6:	f107 030f 	add.w	r3, r7, #15
 80205da:	781b      	ldrb	r3, [r3, #0]
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d136      	bne.n	802064e <chirp_start+0x17f6>
				{
					chirp_controller_read_command(&chirp_outl);
 80205e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205e4:	4618      	mov	r0, r3
 80205e6:	f7fd fa67 	bl	801dab8 <chirp_controller_read_command>
					chirp_outl.collect_length = ((chirp_outl.collect_addr_end - chirp_outl.collect_addr_start + sizeof(uint64_t) - 1) / sizeof(uint64_t)) * sizeof(uint64_t);
 80205ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205ee:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 80205f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205f6:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 80205fa:	1ad3      	subs	r3, r2, r3
 80205fc:	3307      	adds	r3, #7
 80205fe:	f023 0207 	bic.w	r2, r3, #7
 8020602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020606:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
					chirp_outl.round_max = chirp_outl.round_setup + (chirp_outl.collect_length + chirp_outl.file_chunk_len - 1) / chirp_outl.file_chunk_len;
 802060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802060e:	795b      	ldrb	r3, [r3, #5]
 8020610:	b29a      	uxth	r2, r3
 8020612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020616:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 802061a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802061e:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8020620:	440b      	add	r3, r1
 8020622:	3b01      	subs	r3, #1
 8020624:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020628:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 802062a:	fbb3 f3f1 	udiv	r3, r3, r1
 802062e:	b29b      	uxth	r3, r3
 8020630:	4413      	add	r3, r2
 8020632:	b29a      	uxth	r2, r3
 8020634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020638:	f8a3 2003 	strh.w	r2, [r3, #3]
					PRINTF("set:%d\n", chirp_outl.round_max);
 802063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020640:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8020644:	b29b      	uxth	r3, r3
 8020646:	4619      	mov	r1, r3
 8020648:	4859      	ldr	r0, [pc, #356]	; (80207b0 <chirp_start+0x1958>)
 802064a:	f001 fdab 	bl	80221a4 <iprintf>
				}
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 802064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020652:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8020656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802065a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 802065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020662:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020666:	3302      	adds	r3, #2
 8020668:	b2da      	uxtb	r2, r3
 802066a:	2303      	movs	r3, #3
 802066c:	f7f2 f978 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020670:	4b50      	ldr	r3, [pc, #320]	; (80207b4 <chirp_start+0x195c>)
 8020672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020676:	4618      	mov	r0, r3
 8020678:	4b4e      	ldr	r3, [pc, #312]	; (80207b4 <chirp_start+0x195c>)
 802067a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802067e:	4619      	mov	r1, r3
 8020680:	4b4c      	ldr	r3, [pc, #304]	; (80207b4 <chirp_start+0x195c>)
 8020682:	8a5b      	ldrh	r3, [r3, #18]
 8020684:	b29b      	uxth	r3, r3
 8020686:	3302      	adds	r3, #2
 8020688:	9301      	str	r3, [sp, #4]
 802068a:	2308      	movs	r3, #8
 802068c:	9300      	str	r3, [sp, #0]
 802068e:	2300      	movs	r3, #0
 8020690:	2201      	movs	r2, #1
 8020692:	f7ec fc7b 	bl	800cf8c <SX1276GetPacketTime>
 8020696:	4603      	mov	r3, r0
 8020698:	461a      	mov	r2, r3
 802069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802069e:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 80206a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206a6:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80206aa:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80206ae:	33a0      	adds	r3, #160	; 0xa0
 80206b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80206b4:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80206b8:	b291      	uxth	r1, r2
 80206ba:	4a3f      	ldr	r2, [pc, #252]	; (80207b8 <chirp_start+0x1960>)
 80206bc:	4618      	mov	r0, r3
 80206be:	f7f2 fb49 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 80206c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206c6:	781b      	ldrb	r3, [r3, #0]
 80206c8:	4618      	mov	r0, r3
 80206ca:	f7f2 fc0f 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 80206ce:	bf00      	nop
 80206d0:	4b3a      	ldr	r3, [pc, #232]	; (80207bc <chirp_start+0x1964>)
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80206da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80206de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80206e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80206e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80206ea:	1ad3      	subs	r3, r2, r3
 80206ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80206f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	db07      	blt.n	8020708 <chirp_start+0x18b0>
 80206f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	bf14      	ite	ne
 8020700:	2301      	movne	r3, #1
 8020702:	2300      	moveq	r3, #0
 8020704:	b2db      	uxtb	r3, r3
 8020706:	e001      	b.n	802070c <chirp_start+0x18b4>
 8020708:	f04f 33ff 	mov.w	r3, #4294967295
 802070c:	2b00      	cmp	r3, #0
 802070e:	dbdf      	blt.n	80206d0 <chirp_start+0x1878>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020710:	4b2b      	ldr	r3, [pc, #172]	; (80207c0 <chirp_start+0x1968>)
 8020712:	79db      	ldrb	r3, [r3, #7]
 8020714:	2b00      	cmp	r3, #0
 8020716:	d00d      	beq.n	8020734 <chirp_start+0x18dc>
 8020718:	4b28      	ldr	r3, [pc, #160]	; (80207bc <chirp_start+0x1964>)
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802071e:	4b29      	ldr	r3, [pc, #164]	; (80207c4 <chirp_start+0x196c>)
 8020720:	69db      	ldr	r3, [r3, #28]
 8020722:	1ad2      	subs	r2, r2, r3
 8020724:	4b28      	ldr	r3, [pc, #160]	; (80207c8 <chirp_start+0x1970>)
 8020726:	69db      	ldr	r3, [r3, #28]
 8020728:	4413      	add	r3, r2
 802072a:	4a27      	ldr	r2, [pc, #156]	; (80207c8 <chirp_start+0x1970>)
 802072c:	61d3      	str	r3, [r2, #28]
 802072e:	4b24      	ldr	r3, [pc, #144]	; (80207c0 <chirp_start+0x1968>)
 8020730:	2200      	movs	r2, #0
 8020732:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020734:	2007      	movs	r0, #7
 8020736:	f7ed fd3b 	bl	800e1b0 <energest_type_time>
 802073a:	4603      	mov	r3, r0
 802073c:	4619      	mov	r1, r3
 802073e:	2007      	movs	r0, #7
 8020740:	f7ea f9ea 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020748:	4a20      	ldr	r2, [pc, #128]	; (80207cc <chirp_start+0x1974>)
 802074a:	4614      	mov	r4, r2
 802074c:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020750:	f104 0c20 	add.w	ip, r4, #32
 8020754:	4635      	mov	r5, r6
 8020756:	4623      	mov	r3, r4
 8020758:	6818      	ldr	r0, [r3, #0]
 802075a:	6859      	ldr	r1, [r3, #4]
 802075c:	689a      	ldr	r2, [r3, #8]
 802075e:	68db      	ldr	r3, [r3, #12]
 8020760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020762:	3410      	adds	r4, #16
 8020764:	3610      	adds	r6, #16
 8020766:	4564      	cmp	r4, ip
 8020768:	d1f4      	bne.n	8020754 <chirp_start+0x18fc>
 802076a:	4633      	mov	r3, r6
 802076c:	4622      	mov	r2, r4
 802076e:	6810      	ldr	r0, [r2, #0]
 8020770:	6851      	ldr	r1, [r2, #4]
 8020772:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020774:	2228      	movs	r2, #40	; 0x28
 8020776:	2100      	movs	r1, #0
 8020778:	4814      	ldr	r0, [pc, #80]	; (80207cc <chirp_start+0x1974>)
 802077a:	f000 ff06 	bl	802158a <memset>
        #endif
				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(task_node_id, &chirp_outl))
 802077e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020782:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8020786:	4611      	mov	r1, r2
 8020788:	4618      	mov	r0, r3
 802078a:	f7f4 fa23 	bl	8014bd4 <chirp_round>
 802078e:	4603      	mov	r3, r0
 8020790:	2b00      	cmp	r3, #0
 8020792:	d11f      	bne.n	80207d4 <chirp_start+0x197c>
        {
          free(payload_distribution);
 8020794:	4b0e      	ldr	r3, [pc, #56]	; (80207d0 <chirp_start+0x1978>)
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	4618      	mov	r0, r3
 802079a:	f000 fee3 	bl	8021564 <free>
          break;
 802079e:	f000 bd5a 	b.w	8021256 <chirp_start+0x23fe>
 80207a2:	bf00      	nop
 80207a4:	08026760 	.word	0x08026760
 80207a8:	0802667d 	.word	0x0802667d
 80207ac:	08026780 	.word	0x08026780
 80207b0:	080267a0 	.word	0x080267a0
 80207b4:	20001430 	.word	0x20001430
 80207b8:	0016e360 	.word	0x0016e360
 80207bc:	200012c8 	.word	0x200012c8
 80207c0:	2000112c 	.word	0x2000112c
 80207c4:	20001308 	.word	0x20001308
 80207c8:	20000f10 	.word	0x20000f10
 80207cc:	20000d00 	.word	0x20000d00
 80207d0:	20000cc8 	.word	0x20000cc8
        }
				free(payload_distribution);
 80207d4:	4bb7      	ldr	r3, [pc, #732]	; (8020ab4 <chirp_start+0x1c5c>)
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	4618      	mov	r0, r3
 80207da:	f000 fec3 	bl	8021564 <free>
        }
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80207de:	4bb6      	ldr	r3, [pc, #728]	; (8020ab8 <chirp_start+0x1c60>)
 80207e0:	79db      	ldrb	r3, [r3, #7]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d00d      	beq.n	8020802 <chirp_start+0x19aa>
 80207e6:	4bb5      	ldr	r3, [pc, #724]	; (8020abc <chirp_start+0x1c64>)
 80207e8:	681b      	ldr	r3, [r3, #0]
 80207ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80207ec:	4bb4      	ldr	r3, [pc, #720]	; (8020ac0 <chirp_start+0x1c68>)
 80207ee:	69db      	ldr	r3, [r3, #28]
 80207f0:	1ad2      	subs	r2, r2, r3
 80207f2:	4bb4      	ldr	r3, [pc, #720]	; (8020ac4 <chirp_start+0x1c6c>)
 80207f4:	69db      	ldr	r3, [r3, #28]
 80207f6:	4413      	add	r3, r2
 80207f8:	4ab2      	ldr	r2, [pc, #712]	; (8020ac4 <chirp_start+0x1c6c>)
 80207fa:	61d3      	str	r3, [r2, #28]
 80207fc:	4bae      	ldr	r3, [pc, #696]	; (8020ab8 <chirp_start+0x1c60>)
 80207fe:	2200      	movs	r2, #0
 8020800:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020802:	2007      	movs	r0, #7
 8020804:	f7ed fcd4 	bl	800e1b0 <energest_type_time>
 8020808:	4603      	mov	r3, r0
 802080a:	4619      	mov	r1, r3
 802080c:	2007      	movs	r0, #7
 802080e:	f7ea f983 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020816:	4aac      	ldr	r2, [pc, #688]	; (8020ac8 <chirp_start+0x1c70>)
 8020818:	4614      	mov	r4, r2
 802081a:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 802081e:	f104 0c20 	add.w	ip, r4, #32
 8020822:	4635      	mov	r5, r6
 8020824:	4623      	mov	r3, r4
 8020826:	6818      	ldr	r0, [r3, #0]
 8020828:	6859      	ldr	r1, [r3, #4]
 802082a:	689a      	ldr	r2, [r3, #8]
 802082c:	68db      	ldr	r3, [r3, #12]
 802082e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020830:	3410      	adds	r4, #16
 8020832:	3610      	adds	r6, #16
 8020834:	4564      	cmp	r4, ip
 8020836:	d1f4      	bne.n	8020822 <chirp_start+0x19ca>
 8020838:	4633      	mov	r3, r6
 802083a:	4622      	mov	r2, r4
 802083c:	6810      	ldr	r0, [r2, #0]
 802083e:	6851      	ldr	r1, [r2, #4]
 8020840:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 8020842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020846:	781b      	ldrb	r3, [r3, #0]
 8020848:	461a      	mov	r2, r3
 802084a:	4613      	mov	r3, r2
 802084c:	005b      	lsls	r3, r3, #1
 802084e:	4413      	add	r3, r2
 8020850:	019b      	lsls	r3, r3, #6
 8020852:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8020856:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 802085a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802085e:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8020862:	220a      	movs	r2, #10
 8020864:	4618      	mov	r0, r3
 8020866:	f7fb fe6d 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 802086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802086e:	781b      	ldrb	r3, [r3, #0]
 8020870:	461a      	mov	r2, r3
 8020872:	4613      	mov	r3, r2
 8020874:	005b      	lsls	r3, r3, #1
 8020876:	4413      	add	r3, r2
 8020878:	019b      	lsls	r3, r3, #6
 802087a:	461a      	mov	r2, r3
 802087c:	4b93      	ldr	r3, [pc, #588]	; (8020acc <chirp_start+0x1c74>)
 802087e:	4413      	add	r3, r2
 8020880:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020884:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8020888:	220a      	movs	r2, #10
 802088a:	4618      	mov	r0, r3
 802088c:	f7fb fe5a 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 8020890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020894:	781b      	ldrb	r3, [r3, #0]
 8020896:	461a      	mov	r2, r3
 8020898:	4613      	mov	r3, r2
 802089a:	005b      	lsls	r3, r3, #1
 802089c:	4413      	add	r3, r2
 802089e:	019b      	lsls	r3, r3, #6
 80208a0:	461a      	mov	r2, r3
 80208a2:	4b8b      	ldr	r3, [pc, #556]	; (8020ad0 <chirp_start+0x1c78>)
 80208a4:	4413      	add	r3, r2
 80208a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80208aa:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 80208ae:	220a      	movs	r2, #10
 80208b0:	4618      	mov	r0, r3
 80208b2:	f7fb fe47 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 80208b6:	21f8      	movs	r1, #248	; 0xf8
 80208b8:	2001      	movs	r0, #1
 80208ba:	f7fb fdbf 	bl	801c43c <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 80208be:	220a      	movs	r2, #10
 80208c0:	4984      	ldr	r1, [pc, #528]	; (8020ad4 <chirp_start+0x1c7c>)
 80208c2:	4885      	ldr	r0, [pc, #532]	; (8020ad8 <chirp_start+0x1c80>)
 80208c4:	f7fb fe3e 	bl	801c544 <FLASH_If_Write>
        #endif
				break;
 80208c8:	f000 bcc5 	b.w	8021256 <chirp_start+0x23fe>
			}
			case CHIRP_CONNECTIVITY:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 80208cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80208d0:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80208d4:	b2d8      	uxtb	r0, r3
 80208d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80208da:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80208de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80208e2:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80208e6:	9201      	str	r2, [sp, #4]
 80208e8:	9300      	str	r3, [sp, #0]
 80208ea:	2308      	movs	r3, #8
 80208ec:	2201      	movs	r2, #1
 80208ee:	2107      	movs	r1, #7
 80208f0:	f7f2 fa9c 	bl	8012e2c <chirp_radio_config>

				TRACE_MSG("---------CHIRP_CONNECTIVITY---------\n");
 80208f4:	4879      	ldr	r0, [pc, #484]	; (8020adc <chirp_start+0x1c84>)
 80208f6:	f001 fcdd 	bl	80222b4 <puts>
 80208fa:	4b79      	ldr	r3, [pc, #484]	; (8020ae0 <chirp_start+0x1c88>)
 80208fc:	4a79      	ldr	r2, [pc, #484]	; (8020ae4 <chirp_start+0x1c8c>)
 80208fe:	f240 61b4 	movw	r1, #1716	; 0x6b4
 8020902:	4618      	mov	r0, r3
 8020904:	f000 fcf8 	bl	80212f8 <trace_store_msg>
 8020908:	f000 fd78 	bl	80213fc <trace_to_flash>
				chirp_outl.num_nodes = network_num_nodes;
 802090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020910:	f107 020e 	add.w	r2, r7, #14
 8020914:	7812      	ldrb	r2, [r2, #0]
 8020916:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = network_num_nodes;
 802091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802091e:	f107 020e 	add.w	r2, r7, #14
 8020922:	7812      	ldrb	r2, [r2, #0]
 8020924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = DATA_HEADER_LENGTH + 7;
 8020928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802092c:	220f      	movs	r2, #15
 802092e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 8020932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020936:	2201      	movs	r2, #1
 8020938:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = chirp_outl.round_setup;
 802093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802093e:	795b      	ldrb	r3, [r3, #5]
 8020940:	b29a      	uxth	r2, r3
 8020942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020946:	f8a3 2003 	strh.w	r2, [r3, #3]
				if (!node_id)
 802094a:	f107 030f 	add.w	r3, r7, #15
 802094e:	781b      	ldrb	r3, [r3, #0]
 8020950:	2b00      	cmp	r3, #0
 8020952:	d104      	bne.n	802095e <chirp_start+0x1b06>
					chirp_controller_read_command(&chirp_outl);
 8020954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020958:	4618      	mov	r0, r3
 802095a:	f7fd f8ad 	bl	801dab8 <chirp_controller_read_command>
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, DISSEMINATION);
 802095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020962:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8020966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802096a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 802096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020972:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020976:	3302      	adds	r3, #2
 8020978:	b2da      	uxtb	r2, r3
 802097a:	2302      	movs	r3, #2
 802097c:	f7f1 fff0 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020980:	4b59      	ldr	r3, [pc, #356]	; (8020ae8 <chirp_start+0x1c90>)
 8020982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020986:	4618      	mov	r0, r3
 8020988:	4b57      	ldr	r3, [pc, #348]	; (8020ae8 <chirp_start+0x1c90>)
 802098a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802098e:	4619      	mov	r1, r3
 8020990:	4b55      	ldr	r3, [pc, #340]	; (8020ae8 <chirp_start+0x1c90>)
 8020992:	8a5b      	ldrh	r3, [r3, #18]
 8020994:	b29b      	uxth	r3, r3
 8020996:	3302      	adds	r3, #2
 8020998:	9301      	str	r3, [sp, #4]
 802099a:	2308      	movs	r3, #8
 802099c:	9300      	str	r3, [sp, #0]
 802099e:	2300      	movs	r3, #0
 80209a0:	2201      	movs	r2, #1
 80209a2:	f7ec faf3 	bl	800cf8c <SX1276GetPacketTime>
 80209a6:	4603      	mov	r3, r0
 80209a8:	461a      	mov	r2, r3
 80209aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209ae:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 80209b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209b6:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80209ba:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80209be:	33a0      	adds	r3, #160	; 0xa0
 80209c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80209c4:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80209c8:	b291      	uxth	r1, r2
 80209ca:	4a48      	ldr	r2, [pc, #288]	; (8020aec <chirp_start+0x1c94>)
 80209cc:	4618      	mov	r0, r3
 80209ce:	f7f2 f9c1 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 80209d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209d6:	781b      	ldrb	r3, [r3, #0]
 80209d8:	4618      	mov	r0, r3
 80209da:	f7f2 fa87 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 80209de:	bf00      	nop
 80209e0:	4b36      	ldr	r3, [pc, #216]	; (8020abc <chirp_start+0x1c64>)
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80209ea:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80209ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80209f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80209f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80209fa:	1ad3      	subs	r3, r2, r3
 80209fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8020a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	db07      	blt.n	8020a18 <chirp_start+0x1bc0>
 8020a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	bf14      	ite	ne
 8020a10:	2301      	movne	r3, #1
 8020a12:	2300      	moveq	r3, #0
 8020a14:	b2db      	uxtb	r3, r3
 8020a16:	e001      	b.n	8020a1c <chirp_start+0x1bc4>
 8020a18:	f04f 33ff 	mov.w	r3, #4294967295
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	dbdf      	blt.n	80209e0 <chirp_start+0x1b88>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020a20:	4b25      	ldr	r3, [pc, #148]	; (8020ab8 <chirp_start+0x1c60>)
 8020a22:	79db      	ldrb	r3, [r3, #7]
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d00d      	beq.n	8020a44 <chirp_start+0x1bec>
 8020a28:	4b24      	ldr	r3, [pc, #144]	; (8020abc <chirp_start+0x1c64>)
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020a2e:	4b24      	ldr	r3, [pc, #144]	; (8020ac0 <chirp_start+0x1c68>)
 8020a30:	69db      	ldr	r3, [r3, #28]
 8020a32:	1ad2      	subs	r2, r2, r3
 8020a34:	4b23      	ldr	r3, [pc, #140]	; (8020ac4 <chirp_start+0x1c6c>)
 8020a36:	69db      	ldr	r3, [r3, #28]
 8020a38:	4413      	add	r3, r2
 8020a3a:	4a22      	ldr	r2, [pc, #136]	; (8020ac4 <chirp_start+0x1c6c>)
 8020a3c:	61d3      	str	r3, [r2, #28]
 8020a3e:	4b1e      	ldr	r3, [pc, #120]	; (8020ab8 <chirp_start+0x1c60>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020a44:	2007      	movs	r0, #7
 8020a46:	f7ed fbb3 	bl	800e1b0 <energest_type_time>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	4619      	mov	r1, r3
 8020a4e:	2007      	movs	r0, #7
 8020a50:	f7ea f862 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a58:	4a1b      	ldr	r2, [pc, #108]	; (8020ac8 <chirp_start+0x1c70>)
 8020a5a:	4614      	mov	r4, r2
 8020a5c:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020a60:	f104 0c20 	add.w	ip, r4, #32
 8020a64:	4635      	mov	r5, r6
 8020a66:	4623      	mov	r3, r4
 8020a68:	6818      	ldr	r0, [r3, #0]
 8020a6a:	6859      	ldr	r1, [r3, #4]
 8020a6c:	689a      	ldr	r2, [r3, #8]
 8020a6e:	68db      	ldr	r3, [r3, #12]
 8020a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a72:	3410      	adds	r4, #16
 8020a74:	3610      	adds	r6, #16
 8020a76:	4564      	cmp	r4, ip
 8020a78:	d1f4      	bne.n	8020a64 <chirp_start+0x1c0c>
 8020a7a:	4633      	mov	r3, r6
 8020a7c:	4622      	mov	r2, r4
 8020a7e:	6810      	ldr	r0, [r2, #0]
 8020a80:	6851      	ldr	r1, [r2, #4]
 8020a82:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020a84:	2228      	movs	r2, #40	; 0x28
 8020a86:	2100      	movs	r1, #0
 8020a88:	480f      	ldr	r0, [pc, #60]	; (8020ac8 <chirp_start+0x1c70>)
 8020a8a:	f000 fd7e 	bl	802158a <memset>
        #endif

				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 8020a8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020a92:	f107 030f 	add.w	r3, r7, #15
 8020a96:	781b      	ldrb	r3, [r3, #0]
 8020a98:	4611      	mov	r1, r2
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	f7f4 f89a 	bl	8014bd4 <chirp_round>
 8020aa0:	4603      	mov	r3, r0
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	d124      	bne.n	8020af0 <chirp_start+0x1c98>
        {
          free(payload_distribution);
 8020aa6:	4b03      	ldr	r3, [pc, #12]	; (8020ab4 <chirp_start+0x1c5c>)
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	4618      	mov	r0, r3
 8020aac:	f000 fd5a 	bl	8021564 <free>
          break;
 8020ab0:	e3d1      	b.n	8021256 <chirp_start+0x23fe>
 8020ab2:	bf00      	nop
 8020ab4:	20000cc8 	.word	0x20000cc8
 8020ab8:	2000112c 	.word	0x2000112c
 8020abc:	200012c8 	.word	0x200012c8
 8020ac0:	20001308 	.word	0x20001308
 8020ac4:	20000f10 	.word	0x20000f10
 8020ac8:	20000d00 	.word	0x20000d00
 8020acc:	0807c840 	.word	0x0807c840
 8020ad0:	0807c880 	.word	0x0807c880
 8020ad4:	2000149c 	.word	0x2000149c
 8020ad8:	0807c000 	.word	0x0807c000
 8020adc:	080267a8 	.word	0x080267a8
 8020ae0:	0802667d 	.word	0x0802667d
 8020ae4:	080267d0 	.word	0x080267d0
 8020ae8:	20001430 	.word	0x20001430
 8020aec:	0016e360 	.word	0x0016e360
        }

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020af0:	4b87      	ldr	r3, [pc, #540]	; (8020d10 <chirp_start+0x1eb8>)
 8020af2:	79db      	ldrb	r3, [r3, #7]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d00d      	beq.n	8020b14 <chirp_start+0x1cbc>
 8020af8:	4b86      	ldr	r3, [pc, #536]	; (8020d14 <chirp_start+0x1ebc>)
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020afe:	4b86      	ldr	r3, [pc, #536]	; (8020d18 <chirp_start+0x1ec0>)
 8020b00:	69db      	ldr	r3, [r3, #28]
 8020b02:	1ad2      	subs	r2, r2, r3
 8020b04:	4b85      	ldr	r3, [pc, #532]	; (8020d1c <chirp_start+0x1ec4>)
 8020b06:	69db      	ldr	r3, [r3, #28]
 8020b08:	4413      	add	r3, r2
 8020b0a:	4a84      	ldr	r2, [pc, #528]	; (8020d1c <chirp_start+0x1ec4>)
 8020b0c:	61d3      	str	r3, [r2, #28]
 8020b0e:	4b80      	ldr	r3, [pc, #512]	; (8020d10 <chirp_start+0x1eb8>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	71da      	strb	r2, [r3, #7]
          ENERGEST_OFF(ENERGEST_TYPE_LPM);
 8020b14:	4b7e      	ldr	r3, [pc, #504]	; (8020d10 <chirp_start+0x1eb8>)
 8020b16:	7a1b      	ldrb	r3, [r3, #8]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d00d      	beq.n	8020b38 <chirp_start+0x1ce0>
 8020b1c:	4b7d      	ldr	r3, [pc, #500]	; (8020d14 <chirp_start+0x1ebc>)
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020b22:	4b7d      	ldr	r3, [pc, #500]	; (8020d18 <chirp_start+0x1ec0>)
 8020b24:	6a1b      	ldr	r3, [r3, #32]
 8020b26:	1ad2      	subs	r2, r2, r3
 8020b28:	4b7c      	ldr	r3, [pc, #496]	; (8020d1c <chirp_start+0x1ec4>)
 8020b2a:	6a1b      	ldr	r3, [r3, #32]
 8020b2c:	4413      	add	r3, r2
 8020b2e:	4a7b      	ldr	r2, [pc, #492]	; (8020d1c <chirp_start+0x1ec4>)
 8020b30:	6213      	str	r3, [r2, #32]
 8020b32:	4b77      	ldr	r3, [pc, #476]	; (8020d10 <chirp_start+0x1eb8>)
 8020b34:	2200      	movs	r2, #0
 8020b36:	721a      	strb	r2, [r3, #8]
 8020b38:	4b76      	ldr	r3, [pc, #472]	; (8020d14 <chirp_start+0x1ebc>)
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
          ENERGEST_ON(ENERGEST_TYPE_CPU);
 8020b3e:	4a76      	ldr	r2, [pc, #472]	; (8020d18 <chirp_start+0x1ec0>)
 8020b40:	61d3      	str	r3, [r2, #28]
 8020b42:	4b73      	ldr	r3, [pc, #460]	; (8020d10 <chirp_start+0x1eb8>)
 8020b44:	2201      	movs	r2, #1
 8020b46:	71da      	strb	r2, [r3, #7]
        #endif

        chirp_radio_config(chirp_outl.sf, 7, 1, 8, chirp_outl.tx_power, chirp_outl.freq);
 8020b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b4c:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 8020b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b54:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 8020b58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020b5c:	f8d2 2076 	ldr.w	r2, [r2, #118]	; 0x76
 8020b60:	9201      	str	r2, [sp, #4]
 8020b62:	9300      	str	r3, [sp, #0]
 8020b64:	2308      	movs	r3, #8
 8020b66:	2201      	movs	r2, #1
 8020b68:	2107      	movs	r1, #7
 8020b6a:	f7f2 f95f 	bl	8012e2c <chirp_radio_config>
        topo_init(network_num_nodes, node_id, chirp_outl.sf, chirp_outl.topo_payload_len);
 8020b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b72:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8020b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b7a:	f893 407b 	ldrb.w	r4, [r3, #123]	; 0x7b
 8020b7e:	f107 030f 	add.w	r3, r7, #15
 8020b82:	7819      	ldrb	r1, [r3, #0]
 8020b84:	f107 030e 	add.w	r3, r7, #14
 8020b88:	7818      	ldrb	r0, [r3, #0]
 8020b8a:	4623      	mov	r3, r4
 8020b8c:	f7ea f91a 	bl	800adc4 <topo_init>
        uint8_t i;
        for (i = 0; i < network_num_nodes; i++)
 8020b90:	2300      	movs	r3, #0
 8020b92:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8020b96:	e019      	b.n	8020bcc <chirp_start+0x1d74>
        {
          // #if GPS_DATA
          // GPS_Sleep(10);
          // #endif
          RTC_Waiting_Count_Sleep(5);
 8020b98:	2005      	movs	r0, #5
 8020b9a:	f7e9 fee9 	bl	800a970 <RTC_Waiting_Count_Sleep>
          topo_round_robin(node_id, chirp_outl.num_nodes, i, deadline);
 8020b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ba2:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8020ba6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020baa:	f04f 0400 	mov.w	r4, #0
 8020bae:	f897 5177 	ldrb.w	r5, [r7, #375]	; 0x177
 8020bb2:	f107 020f 	add.w	r2, r7, #15
 8020bb6:	7810      	ldrb	r0, [r2, #0]
 8020bb8:	e9cd 3400 	strd	r3, r4, [sp]
 8020bbc:	462a      	mov	r2, r5
 8020bbe:	f7ea f987 	bl	800aed0 <topo_round_robin>
        for (i = 0; i < network_num_nodes; i++)
 8020bc2:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8020bc6:	3301      	adds	r3, #1
 8020bc8:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8020bcc:	f107 030e 	add.w	r3, r7, #14
 8020bd0:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8020bd4:	781b      	ldrb	r3, [r3, #0]
 8020bd6:	429a      	cmp	r2, r3
 8020bd8:	d3de      	bcc.n	8020b98 <chirp_start+0x1d40>
        }
				topo_result(chirp_outl.num_nodes);
 8020bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bde:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8020be2:	4618      	mov	r0, r3
 8020be4:	f7ea fc54 	bl	800b490 <topo_result>
				free(payload_distribution);
 8020be8:	4b4d      	ldr	r3, [pc, #308]	; (8020d20 <chirp_start+0x1ec8>)
 8020bea:	681b      	ldr	r3, [r3, #0]
 8020bec:	4618      	mov	r0, r3
 8020bee:	f000 fcb9 	bl	8021564 <free>
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020bf2:	4b47      	ldr	r3, [pc, #284]	; (8020d10 <chirp_start+0x1eb8>)
 8020bf4:	79db      	ldrb	r3, [r3, #7]
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d00d      	beq.n	8020c16 <chirp_start+0x1dbe>
 8020bfa:	4b46      	ldr	r3, [pc, #280]	; (8020d14 <chirp_start+0x1ebc>)
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020c00:	4b45      	ldr	r3, [pc, #276]	; (8020d18 <chirp_start+0x1ec0>)
 8020c02:	69db      	ldr	r3, [r3, #28]
 8020c04:	1ad2      	subs	r2, r2, r3
 8020c06:	4b45      	ldr	r3, [pc, #276]	; (8020d1c <chirp_start+0x1ec4>)
 8020c08:	69db      	ldr	r3, [r3, #28]
 8020c0a:	4413      	add	r3, r2
 8020c0c:	4a43      	ldr	r2, [pc, #268]	; (8020d1c <chirp_start+0x1ec4>)
 8020c0e:	61d3      	str	r3, [r2, #28]
 8020c10:	4b3f      	ldr	r3, [pc, #252]	; (8020d10 <chirp_start+0x1eb8>)
 8020c12:	2200      	movs	r2, #0
 8020c14:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020c16:	2007      	movs	r0, #7
 8020c18:	f7ed faca 	bl	800e1b0 <energest_type_time>
 8020c1c:	4603      	mov	r3, r0
 8020c1e:	4619      	mov	r1, r3
 8020c20:	2007      	movs	r0, #7
 8020c22:	f7e9 ff79 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8020c26:	200e      	movs	r0, #14
 8020c28:	f7ed fac2 	bl	800e1b0 <energest_type_time>
 8020c2c:	4603      	mov	r3, r0
 8020c2e:	4619      	mov	r1, r3
 8020c30:	200e      	movs	r0, #14
 8020c32:	f7e9 ff71 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8020c36:	200f      	movs	r0, #15
 8020c38:	f7ed faba 	bl	800e1b0 <energest_type_time>
 8020c3c:	4603      	mov	r3, r0
 8020c3e:	4619      	mov	r1, r3
 8020c40:	200f      	movs	r0, #15
 8020c42:	f7e9 ff69 	bl	800ab18 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_WRITE_BANK1, energest_type_time(ENERGEST_TYPE_FLASH_WRITE_BANK1));
 8020c46:	200a      	movs	r0, #10
 8020c48:	f7ed fab2 	bl	800e1b0 <energest_type_time>
 8020c4c:	4603      	mov	r3, r0
 8020c4e:	4619      	mov	r1, r3
 8020c50:	200a      	movs	r0, #10
 8020c52:	f7e9 ff61 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c5a:	4a32      	ldr	r2, [pc, #200]	; (8020d24 <chirp_start+0x1ecc>)
 8020c5c:	4614      	mov	r4, r2
 8020c5e:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 8020c62:	f104 0c20 	add.w	ip, r4, #32
 8020c66:	4635      	mov	r5, r6
 8020c68:	4623      	mov	r3, r4
 8020c6a:	6818      	ldr	r0, [r3, #0]
 8020c6c:	6859      	ldr	r1, [r3, #4]
 8020c6e:	689a      	ldr	r2, [r3, #8]
 8020c70:	68db      	ldr	r3, [r3, #12]
 8020c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020c74:	3410      	adds	r4, #16
 8020c76:	3610      	adds	r6, #16
 8020c78:	4564      	cmp	r4, ip
 8020c7a:	d1f4      	bne.n	8020c66 <chirp_start+0x1e0e>
 8020c7c:	4633      	mov	r3, r6
 8020c7e:	4622      	mov	r2, r4
 8020c80:	6810      	ldr	r0, [r2, #0]
 8020c82:	6851      	ldr	r1, [r2, #4]
 8020c84:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 8020c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c8a:	781b      	ldrb	r3, [r3, #0]
 8020c8c:	461a      	mov	r2, r3
 8020c8e:	4613      	mov	r3, r2
 8020c90:	005b      	lsls	r3, r3, #1
 8020c92:	4413      	add	r3, r2
 8020c94:	019b      	lsls	r3, r3, #6
 8020c96:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8020c9a:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 8020c9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020ca2:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8020ca6:	220a      	movs	r2, #10
 8020ca8:	4618      	mov	r0, r3
 8020caa:	f7fb fc4b 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 8020cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020cb2:	781b      	ldrb	r3, [r3, #0]
 8020cb4:	461a      	mov	r2, r3
 8020cb6:	4613      	mov	r3, r2
 8020cb8:	005b      	lsls	r3, r3, #1
 8020cba:	4413      	add	r3, r2
 8020cbc:	019b      	lsls	r3, r3, #6
 8020cbe:	461a      	mov	r2, r3
 8020cc0:	4b19      	ldr	r3, [pc, #100]	; (8020d28 <chirp_start+0x1ed0>)
 8020cc2:	4413      	add	r3, r2
 8020cc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020cc8:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8020ccc:	220a      	movs	r2, #10
 8020cce:	4618      	mov	r0, r3
 8020cd0:	f7fb fc38 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 8020cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020cd8:	781b      	ldrb	r3, [r3, #0]
 8020cda:	461a      	mov	r2, r3
 8020cdc:	4613      	mov	r3, r2
 8020cde:	005b      	lsls	r3, r3, #1
 8020ce0:	4413      	add	r3, r2
 8020ce2:	019b      	lsls	r3, r3, #6
 8020ce4:	461a      	mov	r2, r3
 8020ce6:	4b11      	ldr	r3, [pc, #68]	; (8020d2c <chirp_start+0x1ed4>)
 8020ce8:	4413      	add	r3, r2
 8020cea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020cee:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 8020cf2:	220a      	movs	r2, #10
 8020cf4:	4618      	mov	r0, r3
 8020cf6:	f7fb fc25 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8020cfa:	21f8      	movs	r1, #248	; 0xf8
 8020cfc:	2001      	movs	r0, #1
 8020cfe:	f7fb fb9d 	bl	801c43c <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 8020d02:	220a      	movs	r2, #10
 8020d04:	490a      	ldr	r1, [pc, #40]	; (8020d30 <chirp_start+0x1ed8>)
 8020d06:	480b      	ldr	r0, [pc, #44]	; (8020d34 <chirp_start+0x1edc>)
 8020d08:	f7fb fc1c 	bl	801c544 <FLASH_If_Write>
        #endif
				break;
 8020d0c:	e2a3      	b.n	8021256 <chirp_start+0x23fe>
 8020d0e:	bf00      	nop
 8020d10:	2000112c 	.word	0x2000112c
 8020d14:	200012c8 	.word	0x200012c8
 8020d18:	20001308 	.word	0x20001308
 8020d1c:	20000f10 	.word	0x20000f10
 8020d20:	20000cc8 	.word	0x20000cc8
 8020d24:	20000d00 	.word	0x20000d00
 8020d28:	0807c840 	.word	0x0807c840
 8020d2c:	0807c880 	.word	0x0807c880
 8020d30:	2000149c 	.word	0x2000149c
 8020d34:	0807c000 	.word	0x0807c000
			}
			case CHIRP_TOPO:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 8020d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d3c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8020d40:	b2d8      	uxtb	r0, r3
 8020d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d46:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8020d4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020d4e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8020d52:	9201      	str	r2, [sp, #4]
 8020d54:	9300      	str	r3, [sp, #0]
 8020d56:	2308      	movs	r3, #8
 8020d58:	2201      	movs	r2, #1
 8020d5a:	2107      	movs	r1, #7
 8020d5c:	f7f2 f866 	bl	8012e2c <chirp_radio_config>

				TRACE_MSG("---------CHIRP_TOPO---------\n");
 8020d60:	48cc      	ldr	r0, [pc, #816]	; (8021094 <chirp_start+0x223c>)
 8020d62:	f001 faa7 	bl	80222b4 <puts>
 8020d66:	4bcc      	ldr	r3, [pc, #816]	; (8021098 <chirp_start+0x2240>)
 8020d68:	4acc      	ldr	r2, [pc, #816]	; (802109c <chirp_start+0x2244>)
 8020d6a:	f240 61f6 	movw	r1, #1782	; 0x6f6
 8020d6e:	4618      	mov	r0, r3
 8020d70:	f000 fac2 	bl	80212f8 <trace_store_msg>
 8020d74:	f000 fb42 	bl	80213fc <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = network_num_nodes;
 8020d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d7c:	f107 020e 	add.w	r2, r7, #14
 8020d80:	7812      	ldrb	r2, [r2, #0]
 8020d82:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 8020d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d8a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 8020d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d9a:	7d9a      	ldrb	r2, [r3, #22]
 8020d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 0;
 8020da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da8:	2200      	movs	r2, #0
 8020daa:	715a      	strb	r2, [r3, #5]
				chirp_outl.file_chunk_len = chirp_outl.payload_len - DATA_HEADER_LENGTH;
 8020dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020db0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	3b08      	subs	r3, #8
 8020db8:	b29a      	uxth	r2, r3
 8020dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dbe:	875a      	strh	r2, [r3, #58]	; 0x3a
        assert_reset((chirp_outl.payload_len > DATA_HEADER_LENGTH));
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020dc8:	2b08      	cmp	r3, #8
 8020dca:	d808      	bhi.n	8020dde <chirp_start+0x1f86>
 8020dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020dd4:	2b08      	cmp	r3, #8
 8020dd6:	d802      	bhi.n	8020dde <chirp_start+0x1f86>
 8020dd8:	b671      	cpsid	f
 8020dda:	f7fb fe81 	bl	801cae0 <NVIC_SystemReset>
				assert_reset(!(chirp_outl.file_chunk_len % sizeof(uint64_t)));
 8020dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020de4:	f003 0307 	and.w	r3, r3, #7
 8020de8:	b29b      	uxth	r3, r3
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	d00a      	beq.n	8020e04 <chirp_start+0x1fac>
 8020dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020df2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020df4:	f003 0307 	and.w	r3, r3, #7
 8020df8:	b29b      	uxth	r3, r3
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d002      	beq.n	8020e04 <chirp_start+0x1fac>
 8020dfe:	b671      	cpsid	f
 8020e00:	f7fb fe6e 	bl	801cae0 <NVIC_SystemReset>

				uint16_t file_size = (((chirp_outl.num_nodes + 1) / 2) * 2) * sizeof(uint32_t);
 8020e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e08:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8020e0c:	3301      	adds	r3, #1
 8020e0e:	0fda      	lsrs	r2, r3, #31
 8020e10:	4413      	add	r3, r2
 8020e12:	105b      	asrs	r3, r3, #1
 8020e14:	b29b      	uxth	r3, r3
 8020e16:	00db      	lsls	r3, r3, #3
 8020e18:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
				chirp_outl.round_max = chirp_outl.round_setup + (file_size + chirp_outl.file_chunk_len - 1)/ chirp_outl.file_chunk_len;
 8020e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e20:	795b      	ldrb	r3, [r3, #5]
 8020e22:	b29a      	uxth	r2, r3
 8020e24:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8020e28:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020e2c:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8020e2e:	440b      	add	r3, r1
 8020e30:	3b01      	subs	r3, #1
 8020e32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020e36:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8020e38:	fb93 f3f1 	sdiv	r3, r3, r1
 8020e3c:	b29b      	uxth	r3, r3
 8020e3e:	4413      	add	r3, r2
 8020e40:	b29a      	uxth	r2, r3
 8020e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e46:	f8a3 2003 	strh.w	r2, [r3, #3]

				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 8020e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e4e:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8020e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e56:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8020e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020e62:	3302      	adds	r3, #2
 8020e64:	b2da      	uxtb	r2, r3
 8020e66:	2303      	movs	r3, #3
 8020e68:	f7f1 fd7a 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020e6c:	4b8c      	ldr	r3, [pc, #560]	; (80210a0 <chirp_start+0x2248>)
 8020e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020e72:	4618      	mov	r0, r3
 8020e74:	4b8a      	ldr	r3, [pc, #552]	; (80210a0 <chirp_start+0x2248>)
 8020e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020e7a:	4619      	mov	r1, r3
 8020e7c:	4b88      	ldr	r3, [pc, #544]	; (80210a0 <chirp_start+0x2248>)
 8020e7e:	8a5b      	ldrh	r3, [r3, #18]
 8020e80:	b29b      	uxth	r3, r3
 8020e82:	3302      	adds	r3, #2
 8020e84:	9301      	str	r3, [sp, #4]
 8020e86:	2308      	movs	r3, #8
 8020e88:	9300      	str	r3, [sp, #0]
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	2201      	movs	r2, #1
 8020e8e:	f7ec f87d 	bl	800cf8c <SX1276GetPacketTime>
 8020e92:	4603      	mov	r3, r0
 8020e94:	461a      	mov	r2, r3
 8020e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e9a:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 8020e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ea2:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8020ea6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8020eaa:	33a0      	adds	r3, #160	; 0xa0
 8020eac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020eb0:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8020eb4:	b291      	uxth	r1, r2
 8020eb6:	4a7b      	ldr	r2, [pc, #492]	; (80210a4 <chirp_start+0x224c>)
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f7f1 ff4b 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8020ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ec2:	781b      	ldrb	r3, [r3, #0]
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	f7f2 f811 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 8020eca:	bf00      	nop
 8020ecc:	4b76      	ldr	r3, [pc, #472]	; (80210a8 <chirp_start+0x2250>)
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ed2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8020ed6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8020ede:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8020ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020ee6:	1ad3      	subs	r3, r2, r3
 8020ee8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8020eec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	db07      	blt.n	8020f04 <chirp_start+0x20ac>
 8020ef4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	bf14      	ite	ne
 8020efc:	2301      	movne	r3, #1
 8020efe:	2300      	moveq	r3, #0
 8020f00:	b2db      	uxtb	r3, r3
 8020f02:	e001      	b.n	8020f08 <chirp_start+0x20b0>
 8020f04:	f04f 33ff 	mov.w	r3, #4294967295
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	dbdf      	blt.n	8020ecc <chirp_start+0x2074>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020f0c:	4b67      	ldr	r3, [pc, #412]	; (80210ac <chirp_start+0x2254>)
 8020f0e:	79db      	ldrb	r3, [r3, #7]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d00d      	beq.n	8020f30 <chirp_start+0x20d8>
 8020f14:	4b64      	ldr	r3, [pc, #400]	; (80210a8 <chirp_start+0x2250>)
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020f1a:	4b65      	ldr	r3, [pc, #404]	; (80210b0 <chirp_start+0x2258>)
 8020f1c:	69db      	ldr	r3, [r3, #28]
 8020f1e:	1ad2      	subs	r2, r2, r3
 8020f20:	4b64      	ldr	r3, [pc, #400]	; (80210b4 <chirp_start+0x225c>)
 8020f22:	69db      	ldr	r3, [r3, #28]
 8020f24:	4413      	add	r3, r2
 8020f26:	4a63      	ldr	r2, [pc, #396]	; (80210b4 <chirp_start+0x225c>)
 8020f28:	61d3      	str	r3, [r2, #28]
 8020f2a:	4b60      	ldr	r3, [pc, #384]	; (80210ac <chirp_start+0x2254>)
 8020f2c:	2200      	movs	r2, #0
 8020f2e:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020f30:	2007      	movs	r0, #7
 8020f32:	f7ed f93d 	bl	800e1b0 <energest_type_time>
 8020f36:	4603      	mov	r3, r0
 8020f38:	4619      	mov	r1, r3
 8020f3a:	2007      	movs	r0, #7
 8020f3c:	f7e9 fdec 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f44:	4a5c      	ldr	r2, [pc, #368]	; (80210b8 <chirp_start+0x2260>)
 8020f46:	4614      	mov	r4, r2
 8020f48:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020f4c:	f104 0c20 	add.w	ip, r4, #32
 8020f50:	4635      	mov	r5, r6
 8020f52:	4623      	mov	r3, r4
 8020f54:	6818      	ldr	r0, [r3, #0]
 8020f56:	6859      	ldr	r1, [r3, #4]
 8020f58:	689a      	ldr	r2, [r3, #8]
 8020f5a:	68db      	ldr	r3, [r3, #12]
 8020f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020f5e:	3410      	adds	r4, #16
 8020f60:	3610      	adds	r6, #16
 8020f62:	4564      	cmp	r4, ip
 8020f64:	d1f4      	bne.n	8020f50 <chirp_start+0x20f8>
 8020f66:	4633      	mov	r3, r6
 8020f68:	4622      	mov	r2, r4
 8020f6a:	6810      	ldr	r0, [r2, #0]
 8020f6c:	6851      	ldr	r1, [r2, #4]
 8020f6e:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020f70:	2228      	movs	r2, #40	; 0x28
 8020f72:	2100      	movs	r1, #0
 8020f74:	4850      	ldr	r0, [pc, #320]	; (80210b8 <chirp_start+0x2260>)
 8020f76:	f000 fb08 	bl	802158a <memset>
        #endif

				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 8020f7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020f7e:	f107 030f 	add.w	r3, r7, #15
 8020f82:	781b      	ldrb	r3, [r3, #0]
 8020f84:	4611      	mov	r1, r2
 8020f86:	4618      	mov	r0, r3
 8020f88:	f7f3 fe24 	bl	8014bd4 <chirp_round>
 8020f8c:	4603      	mov	r3, r0
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d105      	bne.n	8020f9e <chirp_start+0x2146>
        {
          free(payload_distribution);
 8020f92:	4b4a      	ldr	r3, [pc, #296]	; (80210bc <chirp_start+0x2264>)
 8020f94:	681b      	ldr	r3, [r3, #0]
 8020f96:	4618      	mov	r0, r3
 8020f98:	f000 fae4 	bl	8021564 <free>
          break;
 8020f9c:	e15b      	b.n	8021256 <chirp_start+0x23fe>
        }
				free(payload_distribution);
 8020f9e:	4b47      	ldr	r3, [pc, #284]	; (80210bc <chirp_start+0x2264>)
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	f000 fade 	bl	8021564 <free>
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020fa8:	4b40      	ldr	r3, [pc, #256]	; (80210ac <chirp_start+0x2254>)
 8020faa:	79db      	ldrb	r3, [r3, #7]
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d00d      	beq.n	8020fcc <chirp_start+0x2174>
 8020fb0:	4b3d      	ldr	r3, [pc, #244]	; (80210a8 <chirp_start+0x2250>)
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020fb6:	4b3e      	ldr	r3, [pc, #248]	; (80210b0 <chirp_start+0x2258>)
 8020fb8:	69db      	ldr	r3, [r3, #28]
 8020fba:	1ad2      	subs	r2, r2, r3
 8020fbc:	4b3d      	ldr	r3, [pc, #244]	; (80210b4 <chirp_start+0x225c>)
 8020fbe:	69db      	ldr	r3, [r3, #28]
 8020fc0:	4413      	add	r3, r2
 8020fc2:	4a3c      	ldr	r2, [pc, #240]	; (80210b4 <chirp_start+0x225c>)
 8020fc4:	61d3      	str	r3, [r2, #28]
 8020fc6:	4b39      	ldr	r3, [pc, #228]	; (80210ac <chirp_start+0x2254>)
 8020fc8:	2200      	movs	r2, #0
 8020fca:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020fcc:	2007      	movs	r0, #7
 8020fce:	f7ed f8ef 	bl	800e1b0 <energest_type_time>
 8020fd2:	4603      	mov	r3, r0
 8020fd4:	4619      	mov	r1, r3
 8020fd6:	2007      	movs	r0, #7
 8020fd8:	f7e9 fd9e 	bl	800ab18 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020fe0:	4a35      	ldr	r2, [pc, #212]	; (80210b8 <chirp_start+0x2260>)
 8020fe2:	4614      	mov	r4, r2
 8020fe4:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 8020fe8:	f104 0c20 	add.w	ip, r4, #32
 8020fec:	4635      	mov	r5, r6
 8020fee:	4623      	mov	r3, r4
 8020ff0:	6818      	ldr	r0, [r3, #0]
 8020ff2:	6859      	ldr	r1, [r3, #4]
 8020ff4:	689a      	ldr	r2, [r3, #8]
 8020ff6:	68db      	ldr	r3, [r3, #12]
 8020ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020ffa:	3410      	adds	r4, #16
 8020ffc:	3610      	adds	r6, #16
 8020ffe:	4564      	cmp	r4, ip
 8021000:	d1f4      	bne.n	8020fec <chirp_start+0x2194>
 8021002:	4633      	mov	r3, r6
 8021004:	4622      	mov	r2, r4
 8021006:	6810      	ldr	r0, [r2, #0]
 8021008:	6851      	ldr	r1, [r2, #4]
 802100a:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 802100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021010:	781b      	ldrb	r3, [r3, #0]
 8021012:	461a      	mov	r2, r3
 8021014:	4613      	mov	r3, r2
 8021016:	005b      	lsls	r3, r3, #1
 8021018:	4413      	add	r3, r2
 802101a:	019b      	lsls	r3, r3, #6
 802101c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8021020:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 8021024:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021028:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 802102c:	220a      	movs	r2, #10
 802102e:	4618      	mov	r0, r3
 8021030:	f7fb fa88 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 8021034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021038:	781b      	ldrb	r3, [r3, #0]
 802103a:	461a      	mov	r2, r3
 802103c:	4613      	mov	r3, r2
 802103e:	005b      	lsls	r3, r3, #1
 8021040:	4413      	add	r3, r2
 8021042:	019b      	lsls	r3, r3, #6
 8021044:	461a      	mov	r2, r3
 8021046:	4b1e      	ldr	r3, [pc, #120]	; (80210c0 <chirp_start+0x2268>)
 8021048:	4413      	add	r3, r2
 802104a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802104e:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8021052:	220a      	movs	r2, #10
 8021054:	4618      	mov	r0, r3
 8021056:	f7fb fa75 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 802105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802105e:	781b      	ldrb	r3, [r3, #0]
 8021060:	461a      	mov	r2, r3
 8021062:	4613      	mov	r3, r2
 8021064:	005b      	lsls	r3, r3, #1
 8021066:	4413      	add	r3, r2
 8021068:	019b      	lsls	r3, r3, #6
 802106a:	461a      	mov	r2, r3
 802106c:	4b15      	ldr	r3, [pc, #84]	; (80210c4 <chirp_start+0x226c>)
 802106e:	4413      	add	r3, r2
 8021070:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021074:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 8021078:	220a      	movs	r2, #10
 802107a:	4618      	mov	r0, r3
 802107c:	f7fb fa62 	bl	801c544 <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8021080:	21f8      	movs	r1, #248	; 0xf8
 8021082:	2001      	movs	r0, #1
 8021084:	f7fb f9da 	bl	801c43c <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 8021088:	220a      	movs	r2, #10
 802108a:	490f      	ldr	r1, [pc, #60]	; (80210c8 <chirp_start+0x2270>)
 802108c:	480f      	ldr	r0, [pc, #60]	; (80210cc <chirp_start+0x2274>)
 802108e:	f7fb fa59 	bl	801c544 <FLASH_If_Write>
        #endif
				break;
 8021092:	e0e0      	b.n	8021256 <chirp_start+0x23fe>
 8021094:	080267f8 	.word	0x080267f8
 8021098:	0802667d 	.word	0x0802667d
 802109c:	08026818 	.word	0x08026818
 80210a0:	20001430 	.word	0x20001430
 80210a4:	0016e360 	.word	0x0016e360
 80210a8:	200012c8 	.word	0x200012c8
 80210ac:	2000112c 	.word	0x2000112c
 80210b0:	20001308 	.word	0x20001308
 80210b4:	20000f10 	.word	0x20000f10
 80210b8:	20000d00 	.word	0x20000d00
 80210bc:	20000cc8 	.word	0x20000cc8
 80210c0:	0807c840 	.word	0x0807c840
 80210c4:	0807c880 	.word	0x0807c880
 80210c8:	2000149c 	.word	0x2000149c
 80210cc:	0807c000 	.word	0x0807c000
			}
			case CHIRP_VERSION:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 80210d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210d4:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80210d8:	b2d8      	uxtb	r0, r3
 80210da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210de:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80210e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80210e6:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80210ea:	9201      	str	r2, [sp, #4]
 80210ec:	9300      	str	r3, [sp, #0]
 80210ee:	2308      	movs	r3, #8
 80210f0:	2201      	movs	r2, #1
 80210f2:	2107      	movs	r1, #7
 80210f4:	f7f1 fe9a 	bl	8012e2c <chirp_radio_config>

				TRACE_MSG("---------CHIRP_VERSION---------\n");
 80210f8:	4858      	ldr	r0, [pc, #352]	; (802125c <chirp_start+0x2404>)
 80210fa:	f001 f8db 	bl	80222b4 <puts>
 80210fe:	4b58      	ldr	r3, [pc, #352]	; (8021260 <chirp_start+0x2408>)
 8021100:	4a58      	ldr	r2, [pc, #352]	; (8021264 <chirp_start+0x240c>)
 8021102:	f240 7127 	movw	r1, #1831	; 0x727
 8021106:	4618      	mov	r0, r3
 8021108:	f000 f8f6 	bl	80212f8 <trace_store_msg>
 802110c:	f000 f976 	bl	80213fc <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = network_num_nodes;
 8021110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021114:	f107 020e 	add.w	r2, r7, #14
 8021118:	7812      	ldrb	r2, [r2, #0]
 802111a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 802111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021122:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8021126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802112a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = DATA_HEADER_LENGTH + 3;
 802112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021132:	220b      	movs	r2, #11
 8021134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 8021138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802113c:	2201      	movs	r2, #1
 802113e:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = chirp_outl.round_setup;
 8021140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021144:	795b      	ldrb	r3, [r3, #5]
 8021146:	b29a      	uxth	r2, r3
 8021148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802114c:	f8a3 2003 	strh.w	r2, [r3, #3]

				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 8021150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021154:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8021158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802115c:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8021160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8021168:	3302      	adds	r3, #2
 802116a:	b2da      	uxtb	r2, r3
 802116c:	2303      	movs	r3, #3
 802116e:	f7f1 fbf7 	bl	8012960 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8021172:	4b3d      	ldr	r3, [pc, #244]	; (8021268 <chirp_start+0x2410>)
 8021174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021178:	4618      	mov	r0, r3
 802117a:	4b3b      	ldr	r3, [pc, #236]	; (8021268 <chirp_start+0x2410>)
 802117c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021180:	4619      	mov	r1, r3
 8021182:	4b39      	ldr	r3, [pc, #228]	; (8021268 <chirp_start+0x2410>)
 8021184:	8a5b      	ldrh	r3, [r3, #18]
 8021186:	b29b      	uxth	r3, r3
 8021188:	3302      	adds	r3, #2
 802118a:	9301      	str	r3, [sp, #4]
 802118c:	2308      	movs	r3, #8
 802118e:	9300      	str	r3, [sp, #0]
 8021190:	2300      	movs	r3, #0
 8021192:	2201      	movs	r2, #1
 8021194:	f7eb fefa 	bl	800cf8c <SX1276GetPacketTime>
 8021198:	4603      	mov	r3, r0
 802119a:	461a      	mov	r2, r3
 802119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211a0:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 80211a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211a8:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80211ac:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80211b0:	33a0      	adds	r3, #160	; 0xa0
 80211b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80211b6:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80211ba:	b291      	uxth	r1, r2
 80211bc:	4a2b      	ldr	r2, [pc, #172]	; (802126c <chirp_start+0x2414>)
 80211be:	4618      	mov	r0, r3
 80211c0:	f7f1 fdc8 	bl	8012d54 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 80211c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211c8:	781b      	ldrb	r3, [r3, #0]
 80211ca:	4618      	mov	r0, r3
 80211cc:	f7f1 fe8e 	bl	8012eec <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 80211d0:	bf00      	nop
 80211d2:	4b27      	ldr	r3, [pc, #156]	; (8021270 <chirp_start+0x2418>)
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80211d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80211dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80211e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80211e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80211e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80211ec:	1ad3      	subs	r3, r2, r3
 80211ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80211f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	db07      	blt.n	802120a <chirp_start+0x23b2>
 80211fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80211fe:	2b00      	cmp	r3, #0
 8021200:	bf14      	ite	ne
 8021202:	2301      	movne	r3, #1
 8021204:	2300      	moveq	r3, #0
 8021206:	b2db      	uxtb	r3, r3
 8021208:	e001      	b.n	802120e <chirp_start+0x23b6>
 802120a:	f04f 33ff 	mov.w	r3, #4294967295
 802120e:	2b00      	cmp	r3, #0
 8021210:	dbdf      	blt.n	80211d2 <chirp_start+0x237a>
				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 8021212:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021216:	f107 030f 	add.w	r3, r7, #15
 802121a:	781b      	ldrb	r3, [r3, #0]
 802121c:	4611      	mov	r1, r2
 802121e:	4618      	mov	r0, r3
 8021220:	f7f3 fcd8 	bl	8014bd4 <chirp_round>
 8021224:	4603      	mov	r3, r0
 8021226:	2b00      	cmp	r3, #0
 8021228:	d105      	bne.n	8021236 <chirp_start+0x23de>
        {
          free(payload_distribution);
 802122a:	4b12      	ldr	r3, [pc, #72]	; (8021274 <chirp_start+0x241c>)
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	4618      	mov	r0, r3
 8021230:	f000 f998 	bl	8021564 <free>
          break;
 8021234:	e00f      	b.n	8021256 <chirp_start+0x23fe>
        }
				free(payload_distribution);
 8021236:	4b0f      	ldr	r3, [pc, #60]	; (8021274 <chirp_start+0x241c>)
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	4618      	mov	r0, r3
 802123c:	f000 f992 	bl	8021564 <free>
				break;
 8021240:	e009      	b.n	8021256 <chirp_start+0x23fe>
			}
			default:
				break;
 8021242:	bf00      	nop
 8021244:	f7fd be78 	b.w	801ef38 <chirp_start+0xe0>
				break;
 8021248:	bf00      	nop
 802124a:	f7fd be75 	b.w	801ef38 <chirp_start+0xe0>
				break;
 802124e:	bf00      	nop
 8021250:	f7fd be72 	b.w	801ef38 <chirp_start+0xe0>
          break;
 8021254:	bf00      	nop
	{
 8021256:	f7fd be6f 	b.w	801ef38 <chirp_start+0xe0>
 802125a:	bf00      	nop
 802125c:	08026838 	.word	0x08026838
 8021260:	0802667d 	.word	0x0802667d
 8021264:	08026858 	.word	0x08026858
 8021268:	20001430 	.word	0x20001430
 802126c:	0016e360 	.word	0x0016e360
 8021270:	200012c8 	.word	0x200012c8
 8021274:	20000cc8 	.word	0x20000cc8

08021278 <Reset_Handler>:
					)
				}
#endif

void Reset_Handler(void)
{
 8021278:	b580      	push	{r7, lr}
 802127a:	b082      	sub	sp, #8
 802127c:	af00      	add	r7, sp, #0
					__ASM volatile
 802127e:	f8df d060 	ldr.w	sp, [pc, #96]	; 80212e0 <LoopForever+0x10>
 8021282:	2100      	movs	r1, #0
 8021284:	e003      	b.n	802128e <LoopCopyDataInit>

08021286 <CopyDataInit>:
 8021286:	4b17      	ldr	r3, [pc, #92]	; (80212e4 <LoopForever+0x14>)
 8021288:	585b      	ldr	r3, [r3, r1]
 802128a:	5043      	str	r3, [r0, r1]
 802128c:	3104      	adds	r1, #4

0802128e <LoopCopyDataInit>:
 802128e:	4816      	ldr	r0, [pc, #88]	; (80212e8 <LoopForever+0x18>)
 8021290:	4b16      	ldr	r3, [pc, #88]	; (80212ec <LoopForever+0x1c>)
 8021292:	1842      	adds	r2, r0, r1
 8021294:	429a      	cmp	r2, r3
 8021296:	d3f6      	bcc.n	8021286 <CopyDataInit>
 8021298:	4a15      	ldr	r2, [pc, #84]	; (80212f0 <LoopForever+0x20>)
 802129a:	e002      	b.n	80212a2 <LoopFillZerobss>

0802129c <FillZerobss>:
 802129c:	2300      	movs	r3, #0
 802129e:	f842 3b04 	str.w	r3, [r2], #4

080212a2 <LoopFillZerobss>:
 80212a2:	4b14      	ldr	r3, [pc, #80]	; (80212f4 <LoopForever+0x24>)
 80212a4:	429a      	cmp	r2, r3
 80212a6:	d3f9      	bcc.n	802129c <FillZerobss>
	#if defined ( __GNUC__ )
		BEFORE_MAIN();
		SystemInit();
 80212a8:	f7e0 fb5c 	bl	8001964 <SystemInit>
	#else
		SystemInit();
	#endif
	/* Only examine JUMP when in bank 2 */
	uint32_t BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 80212ac:	4b0b      	ldr	r3, [pc, #44]	; (80212dc <LoopForever+0xc>)
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80212b4:	607b      	str	r3, [r7, #4]
	if (((BankActive != 0) && (TOGGLE_RESET_EXTI_CALLBACK() == FLAG_WRT_OK)) || (BankActive == 0))
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d004      	beq.n	80212c6 <LoopFillZerobss+0x24>
 80212bc:	f003 fe98 	bl	8024ff0 <_etext>
 80212c0:	4603      	mov	r3, r0
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d002      	beq.n	80212cc <LoopFillZerobss+0x2a>
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d102      	bne.n	80212d2 <LoopForever+0x2>
					__ASM volatile
 80212cc:	f7df ffe0 	bl	8001290 <main>

080212d0 <LoopForever>:
 80212d0:	e7fe      	b.n	80212d0 <LoopForever>
		INTO_MAIN();
}
 80212d2:	bf00      	nop
 80212d4:	3708      	adds	r7, #8
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}
 80212da:	bf00      	nop
 80212dc:	40010000 	.word	0x40010000
 80212e0:	20018000 	.word	0x20018000
 80212e4:	080272a8 	.word	0x080272a8
 80212e8:	20000000 	.word	0x20000000
 80212ec:	20000328 	.word	0x20000328
 80212f0:	20000328 	.word	0x20000328
 80212f4:	200022e0 	.word	0x200022e0

080212f8 <trace_store_msg>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void trace_store_msg(const char* file_name, const int file_line, const char* fmt, ...)
{
 80212f8:	b40c      	push	{r2, r3}
 80212fa:	b590      	push	{r4, r7, lr}
 80212fc:	b08d      	sub	sp, #52	; 0x34
 80212fe:	af00      	add	r7, sp, #0
 8021300:	6078      	str	r0, [r7, #4]
 8021302:	6039      	str	r1, [r7, #0]
	__ASM volatile
 8021304:	f3ef 8310 	mrs	r3, PRIMASK
 8021308:	b672      	cpsid	i
 802130a:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 802130c:	f3bf 8f5f 	dmb	sy
	return ie;
 8021310:	4623      	mov	r3, r4
	Trace_Msg *msg;
	unsigned int num_writing;
	int	ie;

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 8021312:	62fb      	str	r3, [r7, #44]	; 0x2c

    num_writing = s_msg_queue_num_writing++;
 8021314:	4b35      	ldr	r3, [pc, #212]	; (80213ec <trace_store_msg+0xf4>)
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	1c5a      	adds	r2, r3, #1
 802131a:	4934      	ldr	r1, [pc, #208]	; (80213ec <trace_store_msg+0xf4>)
 802131c:	600a      	str	r2, [r1, #0]
 802131e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021322:	61fb      	str	r3, [r7, #28]
 8021324:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8021328:	69fb      	ldr	r3, [r7, #28]
 802132a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802132c:	69bb      	ldr	r3, [r7, #24]
 802132e:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
    /* copy to the queue */
	msg = &s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS];
 8021332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021334:	f003 030f 	and.w	r3, r3, #15
 8021338:	01db      	lsls	r3, r3, #7
 802133a:	4a2d      	ldr	r2, [pc, #180]	; (80213f0 <trace_store_msg+0xf8>)
 802133c:	4413      	add	r3, r2
 802133e:	627b      	str	r3, [r7, #36]	; 0x24
    memset((Trace_Msg *)&s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS], 0, sizeof(Trace_Msg));
 8021340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021342:	f003 030f 	and.w	r3, r3, #15
 8021346:	01db      	lsls	r3, r3, #7
 8021348:	4a29      	ldr	r2, [pc, #164]	; (80213f0 <trace_store_msg+0xf8>)
 802134a:	4413      	add	r3, r2
 802134c:	2280      	movs	r2, #128	; 0x80
 802134e:	2100      	movs	r1, #0
 8021350:	4618      	mov	r0, r3
 8021352:	f000 f91a 	bl	802158a <memset>

    memcpy(msg->file_name, file_name, sizeof(msg->file_name));
 8021356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021358:	220e      	movs	r2, #14
 802135a:	6879      	ldr	r1, [r7, #4]
 802135c:	4618      	mov	r0, r3
 802135e:	f000 f909 	bl	8021574 <memcpy>
    msg->file_line = file_line;
 8021362:	683b      	ldr	r3, [r7, #0]
 8021364:	b29a      	uxth	r2, r3
 8021366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021368:	81da      	strh	r2, [r3, #14]
    memcpy(msg->arguments, fmt, sizeof(msg->arguments));
 802136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802136c:	3310      	adds	r3, #16
 802136e:	2240      	movs	r2, #64	; 0x40
 8021370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021372:	4618      	mov	r0, r3
 8021374:	f000 f8fe 	bl	8021574 <memcpy>

    /* save parameters */
    va_list va;
    va_start(va, fmt);
 8021378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802137c:	60fb      	str	r3, [r7, #12]
    size_t va_size_max = (uintptr_t)_estack - (uintptr_t)(va.__ap);
 802137e:	4b1d      	ldr	r3, [pc, #116]	; (80213f4 <trace_store_msg+0xfc>)
 8021380:	68fa      	ldr	r2, [r7, #12]
 8021382:	1a9b      	subs	r3, r3, r2
 8021384:	623b      	str	r3, [r7, #32]
    if (sizeof(msg->var_args) > va_size_max)
 8021386:	6a3b      	ldr	r3, [r7, #32]
 8021388:	2b2f      	cmp	r3, #47	; 0x2f
 802138a:	d807      	bhi.n	802139c <trace_store_msg+0xa4>
        memcpy(msg->var_args, va.__ap, va_size_max);
 802138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802138e:	3350      	adds	r3, #80	; 0x50
 8021390:	68f9      	ldr	r1, [r7, #12]
 8021392:	6a3a      	ldr	r2, [r7, #32]
 8021394:	4618      	mov	r0, r3
 8021396:	f000 f8ed 	bl	8021574 <memcpy>
 802139a:	e006      	b.n	80213aa <trace_store_msg+0xb2>
    else memcpy(msg->var_args, va.__ap, sizeof(msg->var_args));
 802139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802139e:	3350      	adds	r3, #80	; 0x50
 80213a0:	68f9      	ldr	r1, [r7, #12]
 80213a2:	2230      	movs	r2, #48	; 0x30
 80213a4:	4618      	mov	r0, r3
 80213a6:	f000 f8e5 	bl	8021574 <memcpy>
	__ASM volatile
 80213aa:	f3ef 8310 	mrs	r3, PRIMASK
 80213ae:	b672      	cpsid	i
 80213b0:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 80213b2:	f3bf 8f5f 	dmb	sy
	return ie;
 80213b6:	4623      	mov	r3, r4
    va_end(va);

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 80213b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (s_msg_queue_num_written == num_writing)
 80213ba:	4b0f      	ldr	r3, [pc, #60]	; (80213f8 <trace_store_msg+0x100>)
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80213c0:	429a      	cmp	r2, r3
 80213c2:	d103      	bne.n	80213cc <trace_store_msg+0xd4>
		s_msg_queue_num_written = s_msg_queue_num_writing;
 80213c4:	4b09      	ldr	r3, [pc, #36]	; (80213ec <trace_store_msg+0xf4>)
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	4a0b      	ldr	r2, [pc, #44]	; (80213f8 <trace_store_msg+0x100>)
 80213ca:	6013      	str	r3, [r2, #0]
 80213cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213ce:	617b      	str	r3, [r7, #20]
 80213d0:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80213d4:	697b      	ldr	r3, [r7, #20]
 80213d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80213d8:	693b      	ldr	r3, [r7, #16]
 80213da:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 80213de:	bf00      	nop
 80213e0:	3734      	adds	r7, #52	; 0x34
 80213e2:	46bd      	mov	sp, r7
 80213e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80213e8:	b002      	add	sp, #8
 80213ea:	4770      	bx	lr
 80213ec:	20000c90 	.word	0x20000c90
 80213f0:	2000048c 	.word	0x2000048c
 80213f4:	20018000 	.word	0x20018000
 80213f8:	20000c8c 	.word	0x20000c8c

080213fc <trace_to_flash>:

void trace_to_flash()
{
 80213fc:	b590      	push	{r4, r7, lr}
 80213fe:	b085      	sub	sp, #20
 8021400:	af00      	add	r7, sp, #0
	uint8_t	num_read_start;
    int8_t i, k = 0;
 8021402:	2300      	movs	r3, #0
 8021404:	737b      	strb	r3, [r7, #13]
	__ASM volatile
 8021406:	f3ef 8310 	mrs	r3, PRIMASK
 802140a:	b672      	cpsid	i
 802140c:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 802140e:	f3bf 8f5f 	dmb	sy
	return ie;
 8021412:	4623      	mov	r3, r4
	int	ie;
	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 8021414:	60bb      	str	r3, [r7, #8]

    // erase flash
    LL_FLASH_PageErase(TRACE_PAGE);
 8021416:	20fa      	movs	r0, #250	; 0xfa
 8021418:	f7fb f9b2 	bl	801c780 <LL_FLASH_PageErase>

    /* loop the queue */
    num_read_start = (uint8_t)(s_msg_queue_num_written % TRACE_BUFFER_ELEMENTS) - 1;
 802141c:	4b30      	ldr	r3, [pc, #192]	; (80214e0 <trace_to_flash+0xe4>)
 802141e:	681b      	ldr	r3, [r3, #0]
 8021420:	b2db      	uxtb	r3, r3
 8021422:	f003 030f 	and.w	r3, r3, #15
 8021426:	b2db      	uxtb	r3, r3
 8021428:	3b01      	subs	r3, #1
 802142a:	73fb      	strb	r3, [r7, #15]
    if (num_read_start == 0xFF)
 802142c:	7bfb      	ldrb	r3, [r7, #15]
 802142e:	2bff      	cmp	r3, #255	; 0xff
 8021430:	d101      	bne.n	8021436 <trace_to_flash+0x3a>
        num_read_start = TRACE_BUFFER_ELEMENTS - 1;
 8021432:	230f      	movs	r3, #15
 8021434:	73fb      	strb	r3, [r7, #15]
    for (i = num_read_start; i >= 0; i--, k++)
 8021436:	7bfb      	ldrb	r3, [r7, #15]
 8021438:	73bb      	strb	r3, [r7, #14]
 802143a:	e01b      	b.n	8021474 <trace_to_flash+0x78>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 802143c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8021440:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021444:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8021448:	01d8      	lsls	r0, r3, #7
 802144a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802144e:	01db      	lsls	r3, r3, #7
 8021450:	4a24      	ldr	r2, [pc, #144]	; (80214e4 <trace_to_flash+0xe8>)
 8021452:	4413      	add	r3, r2
 8021454:	2220      	movs	r2, #32
 8021456:	4619      	mov	r1, r3
 8021458:	f7fb fa2c 	bl	801c8b4 <LL_FLASH_Program64s>
    for (i = num_read_start; i >= 0; i--, k++)
 802145c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021460:	b2db      	uxtb	r3, r3
 8021462:	3b01      	subs	r3, #1
 8021464:	b2db      	uxtb	r3, r3
 8021466:	73bb      	strb	r3, [r7, #14]
 8021468:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802146c:	b2db      	uxtb	r3, r3
 802146e:	3301      	adds	r3, #1
 8021470:	b2db      	uxtb	r3, r3
 8021472:	737b      	strb	r3, [r7, #13]
 8021474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021478:	2b00      	cmp	r3, #0
 802147a:	dadf      	bge.n	802143c <trace_to_flash+0x40>
    }
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 802147c:	230f      	movs	r3, #15
 802147e:	73bb      	strb	r3, [r7, #14]
 8021480:	e01b      	b.n	80214ba <trace_to_flash+0xbe>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 8021482:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8021486:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802148a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 802148e:	01d8      	lsls	r0, r3, #7
 8021490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021494:	01db      	lsls	r3, r3, #7
 8021496:	4a13      	ldr	r2, [pc, #76]	; (80214e4 <trace_to_flash+0xe8>)
 8021498:	4413      	add	r3, r2
 802149a:	2220      	movs	r2, #32
 802149c:	4619      	mov	r1, r3
 802149e:	f7fb fa09 	bl	801c8b4 <LL_FLASH_Program64s>
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 80214a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80214a6:	b2db      	uxtb	r3, r3
 80214a8:	3b01      	subs	r3, #1
 80214aa:	b2db      	uxtb	r3, r3
 80214ac:	73bb      	strb	r3, [r7, #14]
 80214ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80214b2:	b2db      	uxtb	r3, r3
 80214b4:	3301      	adds	r3, #1
 80214b6:	b2db      	uxtb	r3, r3
 80214b8:	737b      	strb	r3, [r7, #13]
 80214ba:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80214be:	7bfb      	ldrb	r3, [r7, #15]
 80214c0:	429a      	cmp	r2, r3
 80214c2:	dcde      	bgt.n	8021482 <trace_to_flash+0x86>
 80214c4:	68bb      	ldr	r3, [r7, #8]
 80214c6:	607b      	str	r3, [r7, #4]
 80214c8:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80214d0:	683b      	ldr	r3, [r7, #0]
 80214d2:	f383 8810 	msr	PRIMASK, r3
    }

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 80214d6:	bf00      	nop
 80214d8:	3714      	adds	r7, #20
 80214da:	46bd      	mov	sp, r7
 80214dc:	bd90      	pop	{r4, r7, pc}
 80214de:	bf00      	nop
 80214e0:	20000c8c 	.word	0x20000c8c
 80214e4:	2000048c 	.word	0x2000048c

080214e8 <__assert_func>:
 80214e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80214ea:	461c      	mov	r4, r3
 80214ec:	4b09      	ldr	r3, [pc, #36]	; (8021514 <__assert_func+0x2c>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	4605      	mov	r5, r0
 80214f2:	68d8      	ldr	r0, [r3, #12]
 80214f4:	b152      	cbz	r2, 802150c <__assert_func+0x24>
 80214f6:	4b08      	ldr	r3, [pc, #32]	; (8021518 <__assert_func+0x30>)
 80214f8:	9100      	str	r1, [sp, #0]
 80214fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80214fe:	4907      	ldr	r1, [pc, #28]	; (802151c <__assert_func+0x34>)
 8021500:	462b      	mov	r3, r5
 8021502:	4622      	mov	r2, r4
 8021504:	f000 f814 	bl	8021530 <fiprintf>
 8021508:	f001 faf6 	bl	8022af8 <abort>
 802150c:	4b04      	ldr	r3, [pc, #16]	; (8021520 <__assert_func+0x38>)
 802150e:	461a      	mov	r2, r3
 8021510:	e7f2      	b.n	80214f8 <__assert_func+0x10>
 8021512:	bf00      	nop
 8021514:	200000f4 	.word	0x200000f4
 8021518:	08026b54 	.word	0x08026b54
 802151c:	08026b61 	.word	0x08026b61
 8021520:	08026b8f 	.word	0x08026b8f

08021524 <__assert>:
 8021524:	b508      	push	{r3, lr}
 8021526:	4613      	mov	r3, r2
 8021528:	2200      	movs	r2, #0
 802152a:	f7ff ffdd 	bl	80214e8 <__assert_func>
	...

08021530 <fiprintf>:
 8021530:	b40e      	push	{r1, r2, r3}
 8021532:	b503      	push	{r0, r1, lr}
 8021534:	4601      	mov	r1, r0
 8021536:	ab03      	add	r3, sp, #12
 8021538:	4805      	ldr	r0, [pc, #20]	; (8021550 <fiprintf+0x20>)
 802153a:	f853 2b04 	ldr.w	r2, [r3], #4
 802153e:	6800      	ldr	r0, [r0, #0]
 8021540:	9301      	str	r3, [sp, #4]
 8021542:	f000 fb91 	bl	8021c68 <_vfiprintf_r>
 8021546:	b002      	add	sp, #8
 8021548:	f85d eb04 	ldr.w	lr, [sp], #4
 802154c:	b003      	add	sp, #12
 802154e:	4770      	bx	lr
 8021550:	200000f4 	.word	0x200000f4

08021554 <malloc>:
 8021554:	4b02      	ldr	r3, [pc, #8]	; (8021560 <malloc+0xc>)
 8021556:	4601      	mov	r1, r0
 8021558:	6818      	ldr	r0, [r3, #0]
 802155a:	f000 bb01 	b.w	8021b60 <_malloc_r>
 802155e:	bf00      	nop
 8021560:	200000f4 	.word	0x200000f4

08021564 <free>:
 8021564:	4b02      	ldr	r3, [pc, #8]	; (8021570 <free+0xc>)
 8021566:	4601      	mov	r1, r0
 8021568:	6818      	ldr	r0, [r3, #0]
 802156a:	f000 baab 	b.w	8021ac4 <_free_r>
 802156e:	bf00      	nop
 8021570:	200000f4 	.word	0x200000f4

08021574 <memcpy>:
 8021574:	b510      	push	{r4, lr}
 8021576:	1e43      	subs	r3, r0, #1
 8021578:	440a      	add	r2, r1
 802157a:	4291      	cmp	r1, r2
 802157c:	d100      	bne.n	8021580 <memcpy+0xc>
 802157e:	bd10      	pop	{r4, pc}
 8021580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021588:	e7f7      	b.n	802157a <memcpy+0x6>

0802158a <memset>:
 802158a:	4402      	add	r2, r0
 802158c:	4603      	mov	r3, r0
 802158e:	4293      	cmp	r3, r2
 8021590:	d100      	bne.n	8021594 <memset+0xa>
 8021592:	4770      	bx	lr
 8021594:	f803 1b01 	strb.w	r1, [r3], #1
 8021598:	e7f9      	b.n	802158e <memset+0x4>
	...

0802159c <validate_structure>:
 802159c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802159e:	6801      	ldr	r1, [r0, #0]
 80215a0:	293b      	cmp	r1, #59	; 0x3b
 80215a2:	4604      	mov	r4, r0
 80215a4:	d911      	bls.n	80215ca <validate_structure+0x2e>
 80215a6:	223c      	movs	r2, #60	; 0x3c
 80215a8:	4668      	mov	r0, sp
 80215aa:	f001 faac 	bl	8022b06 <div>
 80215ae:	9a01      	ldr	r2, [sp, #4]
 80215b0:	6863      	ldr	r3, [r4, #4]
 80215b2:	9900      	ldr	r1, [sp, #0]
 80215b4:	2a00      	cmp	r2, #0
 80215b6:	440b      	add	r3, r1
 80215b8:	6063      	str	r3, [r4, #4]
 80215ba:	bfbb      	ittet	lt
 80215bc:	323c      	addlt	r2, #60	; 0x3c
 80215be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80215c2:	6022      	strge	r2, [r4, #0]
 80215c4:	6022      	strlt	r2, [r4, #0]
 80215c6:	bfb8      	it	lt
 80215c8:	6063      	strlt	r3, [r4, #4]
 80215ca:	6861      	ldr	r1, [r4, #4]
 80215cc:	293b      	cmp	r1, #59	; 0x3b
 80215ce:	d911      	bls.n	80215f4 <validate_structure+0x58>
 80215d0:	223c      	movs	r2, #60	; 0x3c
 80215d2:	4668      	mov	r0, sp
 80215d4:	f001 fa97 	bl	8022b06 <div>
 80215d8:	9a01      	ldr	r2, [sp, #4]
 80215da:	68a3      	ldr	r3, [r4, #8]
 80215dc:	9900      	ldr	r1, [sp, #0]
 80215de:	2a00      	cmp	r2, #0
 80215e0:	440b      	add	r3, r1
 80215e2:	60a3      	str	r3, [r4, #8]
 80215e4:	bfbb      	ittet	lt
 80215e6:	323c      	addlt	r2, #60	; 0x3c
 80215e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80215ec:	6062      	strge	r2, [r4, #4]
 80215ee:	6062      	strlt	r2, [r4, #4]
 80215f0:	bfb8      	it	lt
 80215f2:	60a3      	strlt	r3, [r4, #8]
 80215f4:	68a1      	ldr	r1, [r4, #8]
 80215f6:	2917      	cmp	r1, #23
 80215f8:	d911      	bls.n	802161e <validate_structure+0x82>
 80215fa:	2218      	movs	r2, #24
 80215fc:	4668      	mov	r0, sp
 80215fe:	f001 fa82 	bl	8022b06 <div>
 8021602:	9a01      	ldr	r2, [sp, #4]
 8021604:	68e3      	ldr	r3, [r4, #12]
 8021606:	9900      	ldr	r1, [sp, #0]
 8021608:	2a00      	cmp	r2, #0
 802160a:	440b      	add	r3, r1
 802160c:	60e3      	str	r3, [r4, #12]
 802160e:	bfbb      	ittet	lt
 8021610:	3218      	addlt	r2, #24
 8021612:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021616:	60a2      	strge	r2, [r4, #8]
 8021618:	60a2      	strlt	r2, [r4, #8]
 802161a:	bfb8      	it	lt
 802161c:	60e3      	strlt	r3, [r4, #12]
 802161e:	6921      	ldr	r1, [r4, #16]
 8021620:	290b      	cmp	r1, #11
 8021622:	d911      	bls.n	8021648 <validate_structure+0xac>
 8021624:	220c      	movs	r2, #12
 8021626:	4668      	mov	r0, sp
 8021628:	f001 fa6d 	bl	8022b06 <div>
 802162c:	9a01      	ldr	r2, [sp, #4]
 802162e:	6963      	ldr	r3, [r4, #20]
 8021630:	9900      	ldr	r1, [sp, #0]
 8021632:	2a00      	cmp	r2, #0
 8021634:	440b      	add	r3, r1
 8021636:	6163      	str	r3, [r4, #20]
 8021638:	bfbb      	ittet	lt
 802163a:	320c      	addlt	r2, #12
 802163c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021640:	6122      	strge	r2, [r4, #16]
 8021642:	6122      	strlt	r2, [r4, #16]
 8021644:	bfb8      	it	lt
 8021646:	6163      	strlt	r3, [r4, #20]
 8021648:	6963      	ldr	r3, [r4, #20]
 802164a:	0799      	lsls	r1, r3, #30
 802164c:	d120      	bne.n	8021690 <validate_structure+0xf4>
 802164e:	2164      	movs	r1, #100	; 0x64
 8021650:	fb93 f2f1 	sdiv	r2, r3, r1
 8021654:	fb01 3212 	mls	r2, r1, r2, r3
 8021658:	b9e2      	cbnz	r2, 8021694 <validate_structure+0xf8>
 802165a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802165e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021662:	fb93 f2f1 	sdiv	r2, r3, r1
 8021666:	fb01 3312 	mls	r3, r1, r2, r3
 802166a:	2b00      	cmp	r3, #0
 802166c:	bf14      	ite	ne
 802166e:	231c      	movne	r3, #28
 8021670:	231d      	moveq	r3, #29
 8021672:	68e2      	ldr	r2, [r4, #12]
 8021674:	2a00      	cmp	r2, #0
 8021676:	dc0f      	bgt.n	8021698 <validate_structure+0xfc>
 8021678:	4f34      	ldr	r7, [pc, #208]	; (802174c <validate_structure+0x1b0>)
 802167a:	260b      	movs	r6, #11
 802167c:	2064      	movs	r0, #100	; 0x64
 802167e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8021682:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8021686:	f1bc 0f00 	cmp.w	ip, #0
 802168a:	dd14      	ble.n	80216b6 <validate_structure+0x11a>
 802168c:	b003      	add	sp, #12
 802168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021690:	231c      	movs	r3, #28
 8021692:	e7ee      	b.n	8021672 <validate_structure+0xd6>
 8021694:	231d      	movs	r3, #29
 8021696:	e7ec      	b.n	8021672 <validate_structure+0xd6>
 8021698:	4f2c      	ldr	r7, [pc, #176]	; (802174c <validate_structure+0x1b0>)
 802169a:	f04f 0c00 	mov.w	ip, #0
 802169e:	2564      	movs	r5, #100	; 0x64
 80216a0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80216a4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80216a8:	2a01      	cmp	r2, #1
 80216aa:	d02f      	beq.n	802170c <validate_structure+0x170>
 80216ac:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 80216b0:	4281      	cmp	r1, r0
 80216b2:	dc2e      	bgt.n	8021712 <validate_structure+0x176>
 80216b4:	e7ea      	b.n	802168c <validate_structure+0xf0>
 80216b6:	6921      	ldr	r1, [r4, #16]
 80216b8:	3901      	subs	r1, #1
 80216ba:	6121      	str	r1, [r4, #16]
 80216bc:	3101      	adds	r1, #1
 80216be:	d114      	bne.n	80216ea <validate_structure+0x14e>
 80216c0:	6963      	ldr	r3, [r4, #20]
 80216c2:	1e59      	subs	r1, r3, #1
 80216c4:	078a      	lsls	r2, r1, #30
 80216c6:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80216ca:	d117      	bne.n	80216fc <validate_structure+0x160>
 80216cc:	fb91 f2f0 	sdiv	r2, r1, r0
 80216d0:	fb00 1112 	mls	r1, r0, r2, r1
 80216d4:	b9a1      	cbnz	r1, 8021700 <validate_structure+0x164>
 80216d6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80216da:	fb93 f2f5 	sdiv	r2, r3, r5
 80216de:	fb05 3312 	mls	r3, r5, r2, r3
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	bf14      	ite	ne
 80216e6:	231c      	movne	r3, #28
 80216e8:	231d      	moveq	r3, #29
 80216ea:	6922      	ldr	r2, [r4, #16]
 80216ec:	2a01      	cmp	r2, #1
 80216ee:	bf14      	ite	ne
 80216f0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80216f4:	461a      	moveq	r2, r3
 80216f6:	4462      	add	r2, ip
 80216f8:	60e2      	str	r2, [r4, #12]
 80216fa:	e7c2      	b.n	8021682 <validate_structure+0xe6>
 80216fc:	231c      	movs	r3, #28
 80216fe:	e7f4      	b.n	80216ea <validate_structure+0x14e>
 8021700:	231d      	movs	r3, #29
 8021702:	e7f2      	b.n	80216ea <validate_structure+0x14e>
 8021704:	231c      	movs	r3, #28
 8021706:	e7cd      	b.n	80216a4 <validate_structure+0x108>
 8021708:	231d      	movs	r3, #29
 802170a:	e7cb      	b.n	80216a4 <validate_structure+0x108>
 802170c:	428b      	cmp	r3, r1
 802170e:	dabd      	bge.n	802168c <validate_structure+0xf0>
 8021710:	4618      	mov	r0, r3
 8021712:	3201      	adds	r2, #1
 8021714:	1a09      	subs	r1, r1, r0
 8021716:	2a0c      	cmp	r2, #12
 8021718:	60e1      	str	r1, [r4, #12]
 802171a:	6122      	str	r2, [r4, #16]
 802171c:	d1c2      	bne.n	80216a4 <validate_structure+0x108>
 802171e:	6963      	ldr	r3, [r4, #20]
 8021720:	1c5a      	adds	r2, r3, #1
 8021722:	0791      	lsls	r1, r2, #30
 8021724:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8021728:	d1ec      	bne.n	8021704 <validate_structure+0x168>
 802172a:	fb92 f1f5 	sdiv	r1, r2, r5
 802172e:	fb05 2211 	mls	r2, r5, r1, r2
 8021732:	2a00      	cmp	r2, #0
 8021734:	d1e8      	bne.n	8021708 <validate_structure+0x16c>
 8021736:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802173a:	fb93 f2f6 	sdiv	r2, r3, r6
 802173e:	fb06 3312 	mls	r3, r6, r2, r3
 8021742:	2b00      	cmp	r3, #0
 8021744:	bf14      	ite	ne
 8021746:	231c      	movne	r3, #28
 8021748:	231d      	moveq	r3, #29
 802174a:	e7ab      	b.n	80216a4 <validate_structure+0x108>
 802174c:	08026b94 	.word	0x08026b94

08021750 <mktime>:
 8021750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021754:	b089      	sub	sp, #36	; 0x24
 8021756:	4606      	mov	r6, r0
 8021758:	f001 fba8 	bl	8022eac <__gettzinfo>
 802175c:	4680      	mov	r8, r0
 802175e:	4630      	mov	r0, r6
 8021760:	f7ff ff1c 	bl	802159c <validate_structure>
 8021764:	e9d6 3000 	ldrd	r3, r0, [r6]
 8021768:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 802176c:	fb0a 3a00 	mla	sl, sl, r0, r3
 8021770:	68b0      	ldr	r0, [r6, #8]
 8021772:	4abe      	ldr	r2, [pc, #760]	; (8021a6c <mktime+0x31c>)
 8021774:	6975      	ldr	r5, [r6, #20]
 8021776:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802177a:	fb03 aa00 	mla	sl, r3, r0, sl
 802177e:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8021782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021786:	3c01      	subs	r4, #1
 8021788:	2b01      	cmp	r3, #1
 802178a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 802178e:	4414      	add	r4, r2
 8021790:	dd11      	ble.n	80217b6 <mktime+0x66>
 8021792:	07a9      	lsls	r1, r5, #30
 8021794:	d10f      	bne.n	80217b6 <mktime+0x66>
 8021796:	2264      	movs	r2, #100	; 0x64
 8021798:	fb95 f3f2 	sdiv	r3, r5, r2
 802179c:	fb02 5313 	mls	r3, r2, r3, r5
 80217a0:	b943      	cbnz	r3, 80217b4 <mktime+0x64>
 80217a2:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80217a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80217aa:	fb91 f3f2 	sdiv	r3, r1, r2
 80217ae:	fb02 1313 	mls	r3, r2, r3, r1
 80217b2:	b903      	cbnz	r3, 80217b6 <mktime+0x66>
 80217b4:	3401      	adds	r4, #1
 80217b6:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 80217ba:	3310      	adds	r3, #16
 80217bc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80217c0:	4293      	cmp	r3, r2
 80217c2:	61f4      	str	r4, [r6, #28]
 80217c4:	f200 8179 	bhi.w	8021aba <mktime+0x36a>
 80217c8:	2d46      	cmp	r5, #70	; 0x46
 80217ca:	f340 8084 	ble.w	80218d6 <mktime+0x186>
 80217ce:	2346      	movs	r3, #70	; 0x46
 80217d0:	f240 176d 	movw	r7, #365	; 0x16d
 80217d4:	2164      	movs	r1, #100	; 0x64
 80217d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80217da:	079a      	lsls	r2, r3, #30
 80217dc:	d175      	bne.n	80218ca <mktime+0x17a>
 80217de:	fb93 f2f1 	sdiv	r2, r3, r1
 80217e2:	fb01 3212 	mls	r2, r1, r2, r3
 80217e6:	2a00      	cmp	r2, #0
 80217e8:	d172      	bne.n	80218d0 <mktime+0x180>
 80217ea:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80217ee:	fb9c f2f0 	sdiv	r2, ip, r0
 80217f2:	fb00 c212 	mls	r2, r0, r2, ip
 80217f6:	2a00      	cmp	r2, #0
 80217f8:	bf14      	ite	ne
 80217fa:	463a      	movne	r2, r7
 80217fc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8021800:	3301      	adds	r3, #1
 8021802:	429d      	cmp	r5, r3
 8021804:	4414      	add	r4, r2
 8021806:	d1e8      	bne.n	80217da <mktime+0x8a>
 8021808:	4b99      	ldr	r3, [pc, #612]	; (8021a70 <mktime+0x320>)
 802180a:	4363      	muls	r3, r4
 802180c:	eb1a 0103 	adds.w	r1, sl, r3
 8021810:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8021814:	e9cd 1200 	strd	r1, r2, [sp]
 8021818:	f000 ff28 	bl	802266c <__tz_lock>
 802181c:	f000 ff28 	bl	8022670 <_tzset_unlocked>
 8021820:	4b94      	ldr	r3, [pc, #592]	; (8021a74 <mktime+0x324>)
 8021822:	f8d3 9000 	ldr.w	r9, [r3]
 8021826:	f1b9 0f00 	cmp.w	r9, #0
 802182a:	d045      	beq.n	80218b8 <mktime+0x168>
 802182c:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8021830:	6970      	ldr	r0, [r6, #20]
 8021832:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021836:	464f      	mov	r7, r9
 8021838:	2f01      	cmp	r7, #1
 802183a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802183e:	bfa8      	it	ge
 8021840:	2701      	movge	r7, #1
 8021842:	4283      	cmp	r3, r0
 8021844:	f040 8089 	bne.w	802195a <mktime+0x20a>
 8021848:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 802184c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8021850:	460a      	mov	r2, r1
 8021852:	17cb      	asrs	r3, r1, #31
 8021854:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021858:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802185c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021860:	1a12      	subs	r2, r2, r0
 8021862:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 8021866:	4692      	mov	sl, r2
 8021868:	469b      	mov	fp, r3
 802186a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802186e:	4552      	cmp	r2, sl
 8021870:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8021874:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8021878:	da76      	bge.n	8021968 <mktime+0x218>
 802187a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 802187e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021882:	ebb2 0a0a 	subs.w	sl, r2, sl
 8021886:	eb63 0b0b 	sbc.w	fp, r3, fp
 802188a:	f8d8 3000 	ldr.w	r3, [r8]
 802188e:	2b00      	cmp	r3, #0
 8021890:	d079      	beq.n	8021986 <mktime+0x236>
 8021892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021896:	4552      	cmp	r2, sl
 8021898:	eb73 030b 	sbcs.w	r3, r3, fp
 802189c:	db07      	blt.n	80218ae <mktime+0x15e>
 802189e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80218a2:	e9dd ab00 	ldrd	sl, fp, [sp]
 80218a6:	4592      	cmp	sl, r2
 80218a8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80218ac:	db71      	blt.n	8021992 <mktime+0x242>
 80218ae:	f1b9 0f00 	cmp.w	r9, #0
 80218b2:	f04f 0900 	mov.w	r9, #0
 80218b6:	da71      	bge.n	802199c <mktime+0x24c>
 80218b8:	e9dd ab00 	ldrd	sl, fp, [sp]
 80218bc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80218c0:	eb1a 0a03 	adds.w	sl, sl, r3
 80218c4:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80218c8:	e0b4      	b.n	8021a34 <mktime+0x2e4>
 80218ca:	f240 126d 	movw	r2, #365	; 0x16d
 80218ce:	e797      	b.n	8021800 <mktime+0xb0>
 80218d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80218d4:	e794      	b.n	8021800 <mktime+0xb0>
 80218d6:	d097      	beq.n	8021808 <mktime+0xb8>
 80218d8:	2345      	movs	r3, #69	; 0x45
 80218da:	f240 176d 	movw	r7, #365	; 0x16d
 80218de:	2164      	movs	r1, #100	; 0x64
 80218e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80218e4:	e012      	b.n	802190c <mktime+0x1bc>
 80218e6:	bb62      	cbnz	r2, 8021942 <mktime+0x1f2>
 80218e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80218ec:	fb01 3212 	mls	r2, r1, r2, r3
 80218f0:	bb52      	cbnz	r2, 8021948 <mktime+0x1f8>
 80218f2:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80218f6:	fb9c f2f0 	sdiv	r2, ip, r0
 80218fa:	fb00 c212 	mls	r2, r0, r2, ip
 80218fe:	2a00      	cmp	r2, #0
 8021900:	bf14      	ite	ne
 8021902:	463a      	movne	r2, r7
 8021904:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8021908:	1aa4      	subs	r4, r4, r2
 802190a:	3b01      	subs	r3, #1
 802190c:	429d      	cmp	r5, r3
 802190e:	f003 0203 	and.w	r2, r3, #3
 8021912:	dbe8      	blt.n	80218e6 <mktime+0x196>
 8021914:	b9da      	cbnz	r2, 802194e <mktime+0x1fe>
 8021916:	2264      	movs	r2, #100	; 0x64
 8021918:	fb95 f3f2 	sdiv	r3, r5, r2
 802191c:	fb02 5313 	mls	r3, r2, r3, r5
 8021920:	b9c3      	cbnz	r3, 8021954 <mktime+0x204>
 8021922:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8021926:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802192a:	fb91 f3f2 	sdiv	r3, r1, r2
 802192e:	fb02 1313 	mls	r3, r2, r3, r1
 8021932:	2b00      	cmp	r3, #0
 8021934:	f240 136d 	movw	r3, #365	; 0x16d
 8021938:	bf08      	it	eq
 802193a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802193e:	1ae4      	subs	r4, r4, r3
 8021940:	e762      	b.n	8021808 <mktime+0xb8>
 8021942:	f240 126d 	movw	r2, #365	; 0x16d
 8021946:	e7df      	b.n	8021908 <mktime+0x1b8>
 8021948:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802194c:	e7dc      	b.n	8021908 <mktime+0x1b8>
 802194e:	f240 136d 	movw	r3, #365	; 0x16d
 8021952:	e7f4      	b.n	802193e <mktime+0x1ee>
 8021954:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8021958:	e7f1      	b.n	802193e <mktime+0x1ee>
 802195a:	f000 fddf 	bl	802251c <__tzcalc_limits>
 802195e:	2800      	cmp	r0, #0
 8021960:	f47f af72 	bne.w	8021848 <mktime+0xf8>
 8021964:	46b9      	mov	r9, r7
 8021966:	e057      	b.n	8021a18 <mktime+0x2c8>
 8021968:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 802196c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021970:	ebb2 020a 	subs.w	r2, r2, sl
 8021974:	eb63 030b 	sbc.w	r3, r3, fp
 8021978:	e9dd ab00 	ldrd	sl, fp, [sp]
 802197c:	4592      	cmp	sl, r2
 802197e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8021982:	dbef      	blt.n	8021964 <mktime+0x214>
 8021984:	e779      	b.n	802187a <mktime+0x12a>
 8021986:	e9dd 2300 	ldrd	r2, r3, [sp]
 802198a:	4552      	cmp	r2, sl
 802198c:	eb73 030b 	sbcs.w	r3, r3, fp
 8021990:	db85      	blt.n	802189e <mktime+0x14e>
 8021992:	f1b9 0f00 	cmp.w	r9, #0
 8021996:	db43      	blt.n	8021a20 <mktime+0x2d0>
 8021998:	f04f 0901 	mov.w	r9, #1
 802199c:	ea87 0709 	eor.w	r7, r7, r9
 80219a0:	2f01      	cmp	r7, #1
 80219a2:	d139      	bne.n	8021a18 <mktime+0x2c8>
 80219a4:	1a40      	subs	r0, r0, r1
 80219a6:	f1b9 0f00 	cmp.w	r9, #0
 80219aa:	d100      	bne.n	80219ae <mktime+0x25e>
 80219ac:	4240      	negs	r0, r0
 80219ae:	6833      	ldr	r3, [r6, #0]
 80219b0:	4403      	add	r3, r0
 80219b2:	6033      	str	r3, [r6, #0]
 80219b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80219b8:	1812      	adds	r2, r2, r0
 80219ba:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80219be:	e9cd 2300 	strd	r2, r3, [sp]
 80219c2:	4630      	mov	r0, r6
 80219c4:	68f2      	ldr	r2, [r6, #12]
 80219c6:	9202      	str	r2, [sp, #8]
 80219c8:	f7ff fde8 	bl	802159c <validate_structure>
 80219cc:	68f3      	ldr	r3, [r6, #12]
 80219ce:	9a02      	ldr	r2, [sp, #8]
 80219d0:	1a9b      	subs	r3, r3, r2
 80219d2:	d021      	beq.n	8021a18 <mktime+0x2c8>
 80219d4:	2b01      	cmp	r3, #1
 80219d6:	dc40      	bgt.n	8021a5a <mktime+0x30a>
 80219d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80219dc:	bfa8      	it	ge
 80219de:	461f      	movge	r7, r3
 80219e0:	69f3      	ldr	r3, [r6, #28]
 80219e2:	443c      	add	r4, r7
 80219e4:	18ff      	adds	r7, r7, r3
 80219e6:	d547      	bpl.n	8021a78 <mktime+0x328>
 80219e8:	1e6a      	subs	r2, r5, #1
 80219ea:	0791      	lsls	r1, r2, #30
 80219ec:	d138      	bne.n	8021a60 <mktime+0x310>
 80219ee:	2164      	movs	r1, #100	; 0x64
 80219f0:	fb92 f3f1 	sdiv	r3, r2, r1
 80219f4:	fb01 2313 	mls	r3, r1, r3, r2
 80219f8:	bbab      	cbnz	r3, 8021a66 <mktime+0x316>
 80219fa:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 80219fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021a02:	fb95 f3f2 	sdiv	r3, r5, r2
 8021a06:	fb02 5513 	mls	r5, r2, r3, r5
 8021a0a:	2d00      	cmp	r5, #0
 8021a0c:	f240 136d 	movw	r3, #365	; 0x16d
 8021a10:	bf18      	it	ne
 8021a12:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8021a16:	61f3      	str	r3, [r6, #28]
 8021a18:	f1b9 0f01 	cmp.w	r9, #1
 8021a1c:	f47f af4c 	bne.w	80218b8 <mktime+0x168>
 8021a20:	e9dd ab00 	ldrd	sl, fp, [sp]
 8021a24:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8021a28:	eb1a 0a03 	adds.w	sl, sl, r3
 8021a2c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8021a30:	f04f 0901 	mov.w	r9, #1
 8021a34:	f000 fe1b 	bl	802266e <__tz_unlock>
 8021a38:	3404      	adds	r4, #4
 8021a3a:	2307      	movs	r3, #7
 8021a3c:	fb94 f3f3 	sdiv	r3, r4, r3
 8021a40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021a44:	1ae4      	subs	r4, r4, r3
 8021a46:	bf48      	it	mi
 8021a48:	3407      	addmi	r4, #7
 8021a4a:	f8c6 9020 	str.w	r9, [r6, #32]
 8021a4e:	61b4      	str	r4, [r6, #24]
 8021a50:	4650      	mov	r0, sl
 8021a52:	4659      	mov	r1, fp
 8021a54:	b009      	add	sp, #36	; 0x24
 8021a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8021a5e:	e7bf      	b.n	80219e0 <mktime+0x290>
 8021a60:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8021a64:	e7d7      	b.n	8021a16 <mktime+0x2c6>
 8021a66:	f240 136d 	movw	r3, #365	; 0x16d
 8021a6a:	e7d4      	b.n	8021a16 <mktime+0x2c6>
 8021a6c:	08026bc4 	.word	0x08026bc4
 8021a70:	00015180 	.word	0x00015180
 8021a74:	20000cb8 	.word	0x20000cb8
 8021a78:	07ab      	lsls	r3, r5, #30
 8021a7a:	d118      	bne.n	8021aae <mktime+0x35e>
 8021a7c:	2264      	movs	r2, #100	; 0x64
 8021a7e:	fb95 f3f2 	sdiv	r3, r5, r2
 8021a82:	fb02 5313 	mls	r3, r2, r3, r5
 8021a86:	b9ab      	cbnz	r3, 8021ab4 <mktime+0x364>
 8021a88:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8021a8c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021a90:	fb95 f3f2 	sdiv	r3, r5, r2
 8021a94:	fb02 5513 	mls	r5, r2, r3, r5
 8021a98:	2d00      	cmp	r5, #0
 8021a9a:	f240 136d 	movw	r3, #365	; 0x16d
 8021a9e:	bf08      	it	eq
 8021aa0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8021aa4:	429f      	cmp	r7, r3
 8021aa6:	bfa8      	it	ge
 8021aa8:	1aff      	subge	r7, r7, r3
 8021aaa:	61f7      	str	r7, [r6, #28]
 8021aac:	e7b4      	b.n	8021a18 <mktime+0x2c8>
 8021aae:	f240 136d 	movw	r3, #365	; 0x16d
 8021ab2:	e7f7      	b.n	8021aa4 <mktime+0x354>
 8021ab4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8021ab8:	e7f4      	b.n	8021aa4 <mktime+0x354>
 8021aba:	f04f 3aff 	mov.w	sl, #4294967295
 8021abe:	f04f 3bff 	mov.w	fp, #4294967295
 8021ac2:	e7c5      	b.n	8021a50 <mktime+0x300>

08021ac4 <_free_r>:
 8021ac4:	b538      	push	{r3, r4, r5, lr}
 8021ac6:	4605      	mov	r5, r0
 8021ac8:	2900      	cmp	r1, #0
 8021aca:	d045      	beq.n	8021b58 <_free_r+0x94>
 8021acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ad0:	1f0c      	subs	r4, r1, #4
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	bfb8      	it	lt
 8021ad6:	18e4      	addlt	r4, r4, r3
 8021ad8:	f001 fa8d 	bl	8022ff6 <__malloc_lock>
 8021adc:	4a1f      	ldr	r2, [pc, #124]	; (8021b5c <_free_r+0x98>)
 8021ade:	6813      	ldr	r3, [r2, #0]
 8021ae0:	4610      	mov	r0, r2
 8021ae2:	b933      	cbnz	r3, 8021af2 <_free_r+0x2e>
 8021ae4:	6063      	str	r3, [r4, #4]
 8021ae6:	6014      	str	r4, [r2, #0]
 8021ae8:	4628      	mov	r0, r5
 8021aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021aee:	f001 ba83 	b.w	8022ff8 <__malloc_unlock>
 8021af2:	42a3      	cmp	r3, r4
 8021af4:	d90c      	bls.n	8021b10 <_free_r+0x4c>
 8021af6:	6821      	ldr	r1, [r4, #0]
 8021af8:	1862      	adds	r2, r4, r1
 8021afa:	4293      	cmp	r3, r2
 8021afc:	bf04      	itt	eq
 8021afe:	681a      	ldreq	r2, [r3, #0]
 8021b00:	685b      	ldreq	r3, [r3, #4]
 8021b02:	6063      	str	r3, [r4, #4]
 8021b04:	bf04      	itt	eq
 8021b06:	1852      	addeq	r2, r2, r1
 8021b08:	6022      	streq	r2, [r4, #0]
 8021b0a:	6004      	str	r4, [r0, #0]
 8021b0c:	e7ec      	b.n	8021ae8 <_free_r+0x24>
 8021b0e:	4613      	mov	r3, r2
 8021b10:	685a      	ldr	r2, [r3, #4]
 8021b12:	b10a      	cbz	r2, 8021b18 <_free_r+0x54>
 8021b14:	42a2      	cmp	r2, r4
 8021b16:	d9fa      	bls.n	8021b0e <_free_r+0x4a>
 8021b18:	6819      	ldr	r1, [r3, #0]
 8021b1a:	1858      	adds	r0, r3, r1
 8021b1c:	42a0      	cmp	r0, r4
 8021b1e:	d10b      	bne.n	8021b38 <_free_r+0x74>
 8021b20:	6820      	ldr	r0, [r4, #0]
 8021b22:	4401      	add	r1, r0
 8021b24:	1858      	adds	r0, r3, r1
 8021b26:	4282      	cmp	r2, r0
 8021b28:	6019      	str	r1, [r3, #0]
 8021b2a:	d1dd      	bne.n	8021ae8 <_free_r+0x24>
 8021b2c:	6810      	ldr	r0, [r2, #0]
 8021b2e:	6852      	ldr	r2, [r2, #4]
 8021b30:	605a      	str	r2, [r3, #4]
 8021b32:	4401      	add	r1, r0
 8021b34:	6019      	str	r1, [r3, #0]
 8021b36:	e7d7      	b.n	8021ae8 <_free_r+0x24>
 8021b38:	d902      	bls.n	8021b40 <_free_r+0x7c>
 8021b3a:	230c      	movs	r3, #12
 8021b3c:	602b      	str	r3, [r5, #0]
 8021b3e:	e7d3      	b.n	8021ae8 <_free_r+0x24>
 8021b40:	6820      	ldr	r0, [r4, #0]
 8021b42:	1821      	adds	r1, r4, r0
 8021b44:	428a      	cmp	r2, r1
 8021b46:	bf04      	itt	eq
 8021b48:	6811      	ldreq	r1, [r2, #0]
 8021b4a:	6852      	ldreq	r2, [r2, #4]
 8021b4c:	6062      	str	r2, [r4, #4]
 8021b4e:	bf04      	itt	eq
 8021b50:	1809      	addeq	r1, r1, r0
 8021b52:	6021      	streq	r1, [r4, #0]
 8021b54:	605c      	str	r4, [r3, #4]
 8021b56:	e7c7      	b.n	8021ae8 <_free_r+0x24>
 8021b58:	bd38      	pop	{r3, r4, r5, pc}
 8021b5a:	bf00      	nop
 8021b5c:	20000c94 	.word	0x20000c94

08021b60 <_malloc_r>:
 8021b60:	b570      	push	{r4, r5, r6, lr}
 8021b62:	1ccd      	adds	r5, r1, #3
 8021b64:	f025 0503 	bic.w	r5, r5, #3
 8021b68:	3508      	adds	r5, #8
 8021b6a:	2d0c      	cmp	r5, #12
 8021b6c:	bf38      	it	cc
 8021b6e:	250c      	movcc	r5, #12
 8021b70:	2d00      	cmp	r5, #0
 8021b72:	4606      	mov	r6, r0
 8021b74:	db01      	blt.n	8021b7a <_malloc_r+0x1a>
 8021b76:	42a9      	cmp	r1, r5
 8021b78:	d903      	bls.n	8021b82 <_malloc_r+0x22>
 8021b7a:	230c      	movs	r3, #12
 8021b7c:	6033      	str	r3, [r6, #0]
 8021b7e:	2000      	movs	r0, #0
 8021b80:	bd70      	pop	{r4, r5, r6, pc}
 8021b82:	f001 fa38 	bl	8022ff6 <__malloc_lock>
 8021b86:	4a21      	ldr	r2, [pc, #132]	; (8021c0c <_malloc_r+0xac>)
 8021b88:	6814      	ldr	r4, [r2, #0]
 8021b8a:	4621      	mov	r1, r4
 8021b8c:	b991      	cbnz	r1, 8021bb4 <_malloc_r+0x54>
 8021b8e:	4c20      	ldr	r4, [pc, #128]	; (8021c10 <_malloc_r+0xb0>)
 8021b90:	6823      	ldr	r3, [r4, #0]
 8021b92:	b91b      	cbnz	r3, 8021b9c <_malloc_r+0x3c>
 8021b94:	4630      	mov	r0, r6
 8021b96:	f000 fbed 	bl	8022374 <_sbrk_r>
 8021b9a:	6020      	str	r0, [r4, #0]
 8021b9c:	4629      	mov	r1, r5
 8021b9e:	4630      	mov	r0, r6
 8021ba0:	f000 fbe8 	bl	8022374 <_sbrk_r>
 8021ba4:	1c43      	adds	r3, r0, #1
 8021ba6:	d124      	bne.n	8021bf2 <_malloc_r+0x92>
 8021ba8:	230c      	movs	r3, #12
 8021baa:	6033      	str	r3, [r6, #0]
 8021bac:	4630      	mov	r0, r6
 8021bae:	f001 fa23 	bl	8022ff8 <__malloc_unlock>
 8021bb2:	e7e4      	b.n	8021b7e <_malloc_r+0x1e>
 8021bb4:	680b      	ldr	r3, [r1, #0]
 8021bb6:	1b5b      	subs	r3, r3, r5
 8021bb8:	d418      	bmi.n	8021bec <_malloc_r+0x8c>
 8021bba:	2b0b      	cmp	r3, #11
 8021bbc:	d90f      	bls.n	8021bde <_malloc_r+0x7e>
 8021bbe:	600b      	str	r3, [r1, #0]
 8021bc0:	50cd      	str	r5, [r1, r3]
 8021bc2:	18cc      	adds	r4, r1, r3
 8021bc4:	4630      	mov	r0, r6
 8021bc6:	f001 fa17 	bl	8022ff8 <__malloc_unlock>
 8021bca:	f104 000b 	add.w	r0, r4, #11
 8021bce:	1d23      	adds	r3, r4, #4
 8021bd0:	f020 0007 	bic.w	r0, r0, #7
 8021bd4:	1ac3      	subs	r3, r0, r3
 8021bd6:	d0d3      	beq.n	8021b80 <_malloc_r+0x20>
 8021bd8:	425a      	negs	r2, r3
 8021bda:	50e2      	str	r2, [r4, r3]
 8021bdc:	e7d0      	b.n	8021b80 <_malloc_r+0x20>
 8021bde:	428c      	cmp	r4, r1
 8021be0:	684b      	ldr	r3, [r1, #4]
 8021be2:	bf16      	itet	ne
 8021be4:	6063      	strne	r3, [r4, #4]
 8021be6:	6013      	streq	r3, [r2, #0]
 8021be8:	460c      	movne	r4, r1
 8021bea:	e7eb      	b.n	8021bc4 <_malloc_r+0x64>
 8021bec:	460c      	mov	r4, r1
 8021bee:	6849      	ldr	r1, [r1, #4]
 8021bf0:	e7cc      	b.n	8021b8c <_malloc_r+0x2c>
 8021bf2:	1cc4      	adds	r4, r0, #3
 8021bf4:	f024 0403 	bic.w	r4, r4, #3
 8021bf8:	42a0      	cmp	r0, r4
 8021bfa:	d005      	beq.n	8021c08 <_malloc_r+0xa8>
 8021bfc:	1a21      	subs	r1, r4, r0
 8021bfe:	4630      	mov	r0, r6
 8021c00:	f000 fbb8 	bl	8022374 <_sbrk_r>
 8021c04:	3001      	adds	r0, #1
 8021c06:	d0cf      	beq.n	8021ba8 <_malloc_r+0x48>
 8021c08:	6025      	str	r5, [r4, #0]
 8021c0a:	e7db      	b.n	8021bc4 <_malloc_r+0x64>
 8021c0c:	20000c94 	.word	0x20000c94
 8021c10:	20000c98 	.word	0x20000c98

08021c14 <__sfputc_r>:
 8021c14:	6893      	ldr	r3, [r2, #8]
 8021c16:	3b01      	subs	r3, #1
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	b410      	push	{r4}
 8021c1c:	6093      	str	r3, [r2, #8]
 8021c1e:	da08      	bge.n	8021c32 <__sfputc_r+0x1e>
 8021c20:	6994      	ldr	r4, [r2, #24]
 8021c22:	42a3      	cmp	r3, r4
 8021c24:	db01      	blt.n	8021c2a <__sfputc_r+0x16>
 8021c26:	290a      	cmp	r1, #10
 8021c28:	d103      	bne.n	8021c32 <__sfputc_r+0x1e>
 8021c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c2e:	f000 bea3 	b.w	8022978 <__swbuf_r>
 8021c32:	6813      	ldr	r3, [r2, #0]
 8021c34:	1c58      	adds	r0, r3, #1
 8021c36:	6010      	str	r0, [r2, #0]
 8021c38:	7019      	strb	r1, [r3, #0]
 8021c3a:	4608      	mov	r0, r1
 8021c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c40:	4770      	bx	lr

08021c42 <__sfputs_r>:
 8021c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c44:	4606      	mov	r6, r0
 8021c46:	460f      	mov	r7, r1
 8021c48:	4614      	mov	r4, r2
 8021c4a:	18d5      	adds	r5, r2, r3
 8021c4c:	42ac      	cmp	r4, r5
 8021c4e:	d101      	bne.n	8021c54 <__sfputs_r+0x12>
 8021c50:	2000      	movs	r0, #0
 8021c52:	e007      	b.n	8021c64 <__sfputs_r+0x22>
 8021c54:	463a      	mov	r2, r7
 8021c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c5a:	4630      	mov	r0, r6
 8021c5c:	f7ff ffda 	bl	8021c14 <__sfputc_r>
 8021c60:	1c43      	adds	r3, r0, #1
 8021c62:	d1f3      	bne.n	8021c4c <__sfputs_r+0xa>
 8021c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c68 <_vfiprintf_r>:
 8021c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c6c:	460c      	mov	r4, r1
 8021c6e:	b09d      	sub	sp, #116	; 0x74
 8021c70:	4617      	mov	r7, r2
 8021c72:	461d      	mov	r5, r3
 8021c74:	4606      	mov	r6, r0
 8021c76:	b118      	cbz	r0, 8021c80 <_vfiprintf_r+0x18>
 8021c78:	6983      	ldr	r3, [r0, #24]
 8021c7a:	b90b      	cbnz	r3, 8021c80 <_vfiprintf_r+0x18>
 8021c7c:	f001 f848 	bl	8022d10 <__sinit>
 8021c80:	4b7c      	ldr	r3, [pc, #496]	; (8021e74 <_vfiprintf_r+0x20c>)
 8021c82:	429c      	cmp	r4, r3
 8021c84:	d158      	bne.n	8021d38 <_vfiprintf_r+0xd0>
 8021c86:	6874      	ldr	r4, [r6, #4]
 8021c88:	89a3      	ldrh	r3, [r4, #12]
 8021c8a:	0718      	lsls	r0, r3, #28
 8021c8c:	d55e      	bpl.n	8021d4c <_vfiprintf_r+0xe4>
 8021c8e:	6923      	ldr	r3, [r4, #16]
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d05b      	beq.n	8021d4c <_vfiprintf_r+0xe4>
 8021c94:	2300      	movs	r3, #0
 8021c96:	9309      	str	r3, [sp, #36]	; 0x24
 8021c98:	2320      	movs	r3, #32
 8021c9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021c9e:	2330      	movs	r3, #48	; 0x30
 8021ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021ca4:	9503      	str	r5, [sp, #12]
 8021ca6:	f04f 0b01 	mov.w	fp, #1
 8021caa:	46b8      	mov	r8, r7
 8021cac:	4645      	mov	r5, r8
 8021cae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021cb2:	b10b      	cbz	r3, 8021cb8 <_vfiprintf_r+0x50>
 8021cb4:	2b25      	cmp	r3, #37	; 0x25
 8021cb6:	d154      	bne.n	8021d62 <_vfiprintf_r+0xfa>
 8021cb8:	ebb8 0a07 	subs.w	sl, r8, r7
 8021cbc:	d00b      	beq.n	8021cd6 <_vfiprintf_r+0x6e>
 8021cbe:	4653      	mov	r3, sl
 8021cc0:	463a      	mov	r2, r7
 8021cc2:	4621      	mov	r1, r4
 8021cc4:	4630      	mov	r0, r6
 8021cc6:	f7ff ffbc 	bl	8021c42 <__sfputs_r>
 8021cca:	3001      	adds	r0, #1
 8021ccc:	f000 80c2 	beq.w	8021e54 <_vfiprintf_r+0x1ec>
 8021cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cd2:	4453      	add	r3, sl
 8021cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8021cd6:	f898 3000 	ldrb.w	r3, [r8]
 8021cda:	2b00      	cmp	r3, #0
 8021cdc:	f000 80ba 	beq.w	8021e54 <_vfiprintf_r+0x1ec>
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8021ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021cea:	9304      	str	r3, [sp, #16]
 8021cec:	9307      	str	r3, [sp, #28]
 8021cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8021cf4:	46a8      	mov	r8, r5
 8021cf6:	2205      	movs	r2, #5
 8021cf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8021cfc:	485e      	ldr	r0, [pc, #376]	; (8021e78 <_vfiprintf_r+0x210>)
 8021cfe:	f7de fa67 	bl	80001d0 <memchr>
 8021d02:	9b04      	ldr	r3, [sp, #16]
 8021d04:	bb78      	cbnz	r0, 8021d66 <_vfiprintf_r+0xfe>
 8021d06:	06d9      	lsls	r1, r3, #27
 8021d08:	bf44      	itt	mi
 8021d0a:	2220      	movmi	r2, #32
 8021d0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021d10:	071a      	lsls	r2, r3, #28
 8021d12:	bf44      	itt	mi
 8021d14:	222b      	movmi	r2, #43	; 0x2b
 8021d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021d1a:	782a      	ldrb	r2, [r5, #0]
 8021d1c:	2a2a      	cmp	r2, #42	; 0x2a
 8021d1e:	d02a      	beq.n	8021d76 <_vfiprintf_r+0x10e>
 8021d20:	9a07      	ldr	r2, [sp, #28]
 8021d22:	46a8      	mov	r8, r5
 8021d24:	2000      	movs	r0, #0
 8021d26:	250a      	movs	r5, #10
 8021d28:	4641      	mov	r1, r8
 8021d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d2e:	3b30      	subs	r3, #48	; 0x30
 8021d30:	2b09      	cmp	r3, #9
 8021d32:	d969      	bls.n	8021e08 <_vfiprintf_r+0x1a0>
 8021d34:	b360      	cbz	r0, 8021d90 <_vfiprintf_r+0x128>
 8021d36:	e024      	b.n	8021d82 <_vfiprintf_r+0x11a>
 8021d38:	4b50      	ldr	r3, [pc, #320]	; (8021e7c <_vfiprintf_r+0x214>)
 8021d3a:	429c      	cmp	r4, r3
 8021d3c:	d101      	bne.n	8021d42 <_vfiprintf_r+0xda>
 8021d3e:	68b4      	ldr	r4, [r6, #8]
 8021d40:	e7a2      	b.n	8021c88 <_vfiprintf_r+0x20>
 8021d42:	4b4f      	ldr	r3, [pc, #316]	; (8021e80 <_vfiprintf_r+0x218>)
 8021d44:	429c      	cmp	r4, r3
 8021d46:	bf08      	it	eq
 8021d48:	68f4      	ldreq	r4, [r6, #12]
 8021d4a:	e79d      	b.n	8021c88 <_vfiprintf_r+0x20>
 8021d4c:	4621      	mov	r1, r4
 8021d4e:	4630      	mov	r0, r6
 8021d50:	f000 fe64 	bl	8022a1c <__swsetup_r>
 8021d54:	2800      	cmp	r0, #0
 8021d56:	d09d      	beq.n	8021c94 <_vfiprintf_r+0x2c>
 8021d58:	f04f 30ff 	mov.w	r0, #4294967295
 8021d5c:	b01d      	add	sp, #116	; 0x74
 8021d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d62:	46a8      	mov	r8, r5
 8021d64:	e7a2      	b.n	8021cac <_vfiprintf_r+0x44>
 8021d66:	4a44      	ldr	r2, [pc, #272]	; (8021e78 <_vfiprintf_r+0x210>)
 8021d68:	1a80      	subs	r0, r0, r2
 8021d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8021d6e:	4318      	orrs	r0, r3
 8021d70:	9004      	str	r0, [sp, #16]
 8021d72:	4645      	mov	r5, r8
 8021d74:	e7be      	b.n	8021cf4 <_vfiprintf_r+0x8c>
 8021d76:	9a03      	ldr	r2, [sp, #12]
 8021d78:	1d11      	adds	r1, r2, #4
 8021d7a:	6812      	ldr	r2, [r2, #0]
 8021d7c:	9103      	str	r1, [sp, #12]
 8021d7e:	2a00      	cmp	r2, #0
 8021d80:	db01      	blt.n	8021d86 <_vfiprintf_r+0x11e>
 8021d82:	9207      	str	r2, [sp, #28]
 8021d84:	e004      	b.n	8021d90 <_vfiprintf_r+0x128>
 8021d86:	4252      	negs	r2, r2
 8021d88:	f043 0302 	orr.w	r3, r3, #2
 8021d8c:	9207      	str	r2, [sp, #28]
 8021d8e:	9304      	str	r3, [sp, #16]
 8021d90:	f898 3000 	ldrb.w	r3, [r8]
 8021d94:	2b2e      	cmp	r3, #46	; 0x2e
 8021d96:	d10e      	bne.n	8021db6 <_vfiprintf_r+0x14e>
 8021d98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8021d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8021d9e:	d138      	bne.n	8021e12 <_vfiprintf_r+0x1aa>
 8021da0:	9b03      	ldr	r3, [sp, #12]
 8021da2:	1d1a      	adds	r2, r3, #4
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	9203      	str	r2, [sp, #12]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	bfb8      	it	lt
 8021dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8021db0:	f108 0802 	add.w	r8, r8, #2
 8021db4:	9305      	str	r3, [sp, #20]
 8021db6:	4d33      	ldr	r5, [pc, #204]	; (8021e84 <_vfiprintf_r+0x21c>)
 8021db8:	f898 1000 	ldrb.w	r1, [r8]
 8021dbc:	2203      	movs	r2, #3
 8021dbe:	4628      	mov	r0, r5
 8021dc0:	f7de fa06 	bl	80001d0 <memchr>
 8021dc4:	b140      	cbz	r0, 8021dd8 <_vfiprintf_r+0x170>
 8021dc6:	2340      	movs	r3, #64	; 0x40
 8021dc8:	1b40      	subs	r0, r0, r5
 8021dca:	fa03 f000 	lsl.w	r0, r3, r0
 8021dce:	9b04      	ldr	r3, [sp, #16]
 8021dd0:	4303      	orrs	r3, r0
 8021dd2:	f108 0801 	add.w	r8, r8, #1
 8021dd6:	9304      	str	r3, [sp, #16]
 8021dd8:	f898 1000 	ldrb.w	r1, [r8]
 8021ddc:	482a      	ldr	r0, [pc, #168]	; (8021e88 <_vfiprintf_r+0x220>)
 8021dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021de2:	2206      	movs	r2, #6
 8021de4:	f108 0701 	add.w	r7, r8, #1
 8021de8:	f7de f9f2 	bl	80001d0 <memchr>
 8021dec:	2800      	cmp	r0, #0
 8021dee:	d037      	beq.n	8021e60 <_vfiprintf_r+0x1f8>
 8021df0:	4b26      	ldr	r3, [pc, #152]	; (8021e8c <_vfiprintf_r+0x224>)
 8021df2:	bb1b      	cbnz	r3, 8021e3c <_vfiprintf_r+0x1d4>
 8021df4:	9b03      	ldr	r3, [sp, #12]
 8021df6:	3307      	adds	r3, #7
 8021df8:	f023 0307 	bic.w	r3, r3, #7
 8021dfc:	3308      	adds	r3, #8
 8021dfe:	9303      	str	r3, [sp, #12]
 8021e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e02:	444b      	add	r3, r9
 8021e04:	9309      	str	r3, [sp, #36]	; 0x24
 8021e06:	e750      	b.n	8021caa <_vfiprintf_r+0x42>
 8021e08:	fb05 3202 	mla	r2, r5, r2, r3
 8021e0c:	2001      	movs	r0, #1
 8021e0e:	4688      	mov	r8, r1
 8021e10:	e78a      	b.n	8021d28 <_vfiprintf_r+0xc0>
 8021e12:	2300      	movs	r3, #0
 8021e14:	f108 0801 	add.w	r8, r8, #1
 8021e18:	9305      	str	r3, [sp, #20]
 8021e1a:	4619      	mov	r1, r3
 8021e1c:	250a      	movs	r5, #10
 8021e1e:	4640      	mov	r0, r8
 8021e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021e24:	3a30      	subs	r2, #48	; 0x30
 8021e26:	2a09      	cmp	r2, #9
 8021e28:	d903      	bls.n	8021e32 <_vfiprintf_r+0x1ca>
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d0c3      	beq.n	8021db6 <_vfiprintf_r+0x14e>
 8021e2e:	9105      	str	r1, [sp, #20]
 8021e30:	e7c1      	b.n	8021db6 <_vfiprintf_r+0x14e>
 8021e32:	fb05 2101 	mla	r1, r5, r1, r2
 8021e36:	2301      	movs	r3, #1
 8021e38:	4680      	mov	r8, r0
 8021e3a:	e7f0      	b.n	8021e1e <_vfiprintf_r+0x1b6>
 8021e3c:	ab03      	add	r3, sp, #12
 8021e3e:	9300      	str	r3, [sp, #0]
 8021e40:	4622      	mov	r2, r4
 8021e42:	4b13      	ldr	r3, [pc, #76]	; (8021e90 <_vfiprintf_r+0x228>)
 8021e44:	a904      	add	r1, sp, #16
 8021e46:	4630      	mov	r0, r6
 8021e48:	f3af 8000 	nop.w
 8021e4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021e50:	4681      	mov	r9, r0
 8021e52:	d1d5      	bne.n	8021e00 <_vfiprintf_r+0x198>
 8021e54:	89a3      	ldrh	r3, [r4, #12]
 8021e56:	065b      	lsls	r3, r3, #25
 8021e58:	f53f af7e 	bmi.w	8021d58 <_vfiprintf_r+0xf0>
 8021e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e5e:	e77d      	b.n	8021d5c <_vfiprintf_r+0xf4>
 8021e60:	ab03      	add	r3, sp, #12
 8021e62:	9300      	str	r3, [sp, #0]
 8021e64:	4622      	mov	r2, r4
 8021e66:	4b0a      	ldr	r3, [pc, #40]	; (8021e90 <_vfiprintf_r+0x228>)
 8021e68:	a904      	add	r1, sp, #16
 8021e6a:	4630      	mov	r0, r6
 8021e6c:	f000 f888 	bl	8021f80 <_printf_i>
 8021e70:	e7ec      	b.n	8021e4c <_vfiprintf_r+0x1e4>
 8021e72:	bf00      	nop
 8021e74:	08026c84 	.word	0x08026c84
 8021e78:	08026bf4 	.word	0x08026bf4
 8021e7c:	08026ca4 	.word	0x08026ca4
 8021e80:	08026c64 	.word	0x08026c64
 8021e84:	08026bfa 	.word	0x08026bfa
 8021e88:	08026bfe 	.word	0x08026bfe
 8021e8c:	00000000 	.word	0x00000000
 8021e90:	08021c43 	.word	0x08021c43

08021e94 <_printf_common>:
 8021e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e98:	4691      	mov	r9, r2
 8021e9a:	461f      	mov	r7, r3
 8021e9c:	688a      	ldr	r2, [r1, #8]
 8021e9e:	690b      	ldr	r3, [r1, #16]
 8021ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021ea4:	4293      	cmp	r3, r2
 8021ea6:	bfb8      	it	lt
 8021ea8:	4613      	movlt	r3, r2
 8021eaa:	f8c9 3000 	str.w	r3, [r9]
 8021eae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021eb2:	4606      	mov	r6, r0
 8021eb4:	460c      	mov	r4, r1
 8021eb6:	b112      	cbz	r2, 8021ebe <_printf_common+0x2a>
 8021eb8:	3301      	adds	r3, #1
 8021eba:	f8c9 3000 	str.w	r3, [r9]
 8021ebe:	6823      	ldr	r3, [r4, #0]
 8021ec0:	0699      	lsls	r1, r3, #26
 8021ec2:	bf42      	ittt	mi
 8021ec4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8021ec8:	3302      	addmi	r3, #2
 8021eca:	f8c9 3000 	strmi.w	r3, [r9]
 8021ece:	6825      	ldr	r5, [r4, #0]
 8021ed0:	f015 0506 	ands.w	r5, r5, #6
 8021ed4:	d107      	bne.n	8021ee6 <_printf_common+0x52>
 8021ed6:	f104 0a19 	add.w	sl, r4, #25
 8021eda:	68e3      	ldr	r3, [r4, #12]
 8021edc:	f8d9 2000 	ldr.w	r2, [r9]
 8021ee0:	1a9b      	subs	r3, r3, r2
 8021ee2:	42ab      	cmp	r3, r5
 8021ee4:	dc28      	bgt.n	8021f38 <_printf_common+0xa4>
 8021ee6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8021eea:	6822      	ldr	r2, [r4, #0]
 8021eec:	3300      	adds	r3, #0
 8021eee:	bf18      	it	ne
 8021ef0:	2301      	movne	r3, #1
 8021ef2:	0692      	lsls	r2, r2, #26
 8021ef4:	d42d      	bmi.n	8021f52 <_printf_common+0xbe>
 8021ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021efa:	4639      	mov	r1, r7
 8021efc:	4630      	mov	r0, r6
 8021efe:	47c0      	blx	r8
 8021f00:	3001      	adds	r0, #1
 8021f02:	d020      	beq.n	8021f46 <_printf_common+0xb2>
 8021f04:	6823      	ldr	r3, [r4, #0]
 8021f06:	68e5      	ldr	r5, [r4, #12]
 8021f08:	f8d9 2000 	ldr.w	r2, [r9]
 8021f0c:	f003 0306 	and.w	r3, r3, #6
 8021f10:	2b04      	cmp	r3, #4
 8021f12:	bf08      	it	eq
 8021f14:	1aad      	subeq	r5, r5, r2
 8021f16:	68a3      	ldr	r3, [r4, #8]
 8021f18:	6922      	ldr	r2, [r4, #16]
 8021f1a:	bf0c      	ite	eq
 8021f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021f20:	2500      	movne	r5, #0
 8021f22:	4293      	cmp	r3, r2
 8021f24:	bfc4      	itt	gt
 8021f26:	1a9b      	subgt	r3, r3, r2
 8021f28:	18ed      	addgt	r5, r5, r3
 8021f2a:	f04f 0900 	mov.w	r9, #0
 8021f2e:	341a      	adds	r4, #26
 8021f30:	454d      	cmp	r5, r9
 8021f32:	d11a      	bne.n	8021f6a <_printf_common+0xd6>
 8021f34:	2000      	movs	r0, #0
 8021f36:	e008      	b.n	8021f4a <_printf_common+0xb6>
 8021f38:	2301      	movs	r3, #1
 8021f3a:	4652      	mov	r2, sl
 8021f3c:	4639      	mov	r1, r7
 8021f3e:	4630      	mov	r0, r6
 8021f40:	47c0      	blx	r8
 8021f42:	3001      	adds	r0, #1
 8021f44:	d103      	bne.n	8021f4e <_printf_common+0xba>
 8021f46:	f04f 30ff 	mov.w	r0, #4294967295
 8021f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f4e:	3501      	adds	r5, #1
 8021f50:	e7c3      	b.n	8021eda <_printf_common+0x46>
 8021f52:	18e1      	adds	r1, r4, r3
 8021f54:	1c5a      	adds	r2, r3, #1
 8021f56:	2030      	movs	r0, #48	; 0x30
 8021f58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021f5c:	4422      	add	r2, r4
 8021f5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021f62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021f66:	3302      	adds	r3, #2
 8021f68:	e7c5      	b.n	8021ef6 <_printf_common+0x62>
 8021f6a:	2301      	movs	r3, #1
 8021f6c:	4622      	mov	r2, r4
 8021f6e:	4639      	mov	r1, r7
 8021f70:	4630      	mov	r0, r6
 8021f72:	47c0      	blx	r8
 8021f74:	3001      	adds	r0, #1
 8021f76:	d0e6      	beq.n	8021f46 <_printf_common+0xb2>
 8021f78:	f109 0901 	add.w	r9, r9, #1
 8021f7c:	e7d8      	b.n	8021f30 <_printf_common+0x9c>
	...

08021f80 <_printf_i>:
 8021f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8021f88:	460c      	mov	r4, r1
 8021f8a:	7e09      	ldrb	r1, [r1, #24]
 8021f8c:	b085      	sub	sp, #20
 8021f8e:	296e      	cmp	r1, #110	; 0x6e
 8021f90:	4617      	mov	r7, r2
 8021f92:	4606      	mov	r6, r0
 8021f94:	4698      	mov	r8, r3
 8021f96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f98:	f000 80b3 	beq.w	8022102 <_printf_i+0x182>
 8021f9c:	d822      	bhi.n	8021fe4 <_printf_i+0x64>
 8021f9e:	2963      	cmp	r1, #99	; 0x63
 8021fa0:	d036      	beq.n	8022010 <_printf_i+0x90>
 8021fa2:	d80a      	bhi.n	8021fba <_printf_i+0x3a>
 8021fa4:	2900      	cmp	r1, #0
 8021fa6:	f000 80b9 	beq.w	802211c <_printf_i+0x19c>
 8021faa:	2958      	cmp	r1, #88	; 0x58
 8021fac:	f000 8083 	beq.w	80220b6 <_printf_i+0x136>
 8021fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021fb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8021fb8:	e032      	b.n	8022020 <_printf_i+0xa0>
 8021fba:	2964      	cmp	r1, #100	; 0x64
 8021fbc:	d001      	beq.n	8021fc2 <_printf_i+0x42>
 8021fbe:	2969      	cmp	r1, #105	; 0x69
 8021fc0:	d1f6      	bne.n	8021fb0 <_printf_i+0x30>
 8021fc2:	6820      	ldr	r0, [r4, #0]
 8021fc4:	6813      	ldr	r3, [r2, #0]
 8021fc6:	0605      	lsls	r5, r0, #24
 8021fc8:	f103 0104 	add.w	r1, r3, #4
 8021fcc:	d52a      	bpl.n	8022024 <_printf_i+0xa4>
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	6011      	str	r1, [r2, #0]
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	da03      	bge.n	8021fde <_printf_i+0x5e>
 8021fd6:	222d      	movs	r2, #45	; 0x2d
 8021fd8:	425b      	negs	r3, r3
 8021fda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8021fde:	486f      	ldr	r0, [pc, #444]	; (802219c <_printf_i+0x21c>)
 8021fe0:	220a      	movs	r2, #10
 8021fe2:	e039      	b.n	8022058 <_printf_i+0xd8>
 8021fe4:	2973      	cmp	r1, #115	; 0x73
 8021fe6:	f000 809d 	beq.w	8022124 <_printf_i+0x1a4>
 8021fea:	d808      	bhi.n	8021ffe <_printf_i+0x7e>
 8021fec:	296f      	cmp	r1, #111	; 0x6f
 8021fee:	d020      	beq.n	8022032 <_printf_i+0xb2>
 8021ff0:	2970      	cmp	r1, #112	; 0x70
 8021ff2:	d1dd      	bne.n	8021fb0 <_printf_i+0x30>
 8021ff4:	6823      	ldr	r3, [r4, #0]
 8021ff6:	f043 0320 	orr.w	r3, r3, #32
 8021ffa:	6023      	str	r3, [r4, #0]
 8021ffc:	e003      	b.n	8022006 <_printf_i+0x86>
 8021ffe:	2975      	cmp	r1, #117	; 0x75
 8022000:	d017      	beq.n	8022032 <_printf_i+0xb2>
 8022002:	2978      	cmp	r1, #120	; 0x78
 8022004:	d1d4      	bne.n	8021fb0 <_printf_i+0x30>
 8022006:	2378      	movs	r3, #120	; 0x78
 8022008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802200c:	4864      	ldr	r0, [pc, #400]	; (80221a0 <_printf_i+0x220>)
 802200e:	e055      	b.n	80220bc <_printf_i+0x13c>
 8022010:	6813      	ldr	r3, [r2, #0]
 8022012:	1d19      	adds	r1, r3, #4
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	6011      	str	r1, [r2, #0]
 8022018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802201c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022020:	2301      	movs	r3, #1
 8022022:	e08c      	b.n	802213e <_printf_i+0x1be>
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	6011      	str	r1, [r2, #0]
 8022028:	f010 0f40 	tst.w	r0, #64	; 0x40
 802202c:	bf18      	it	ne
 802202e:	b21b      	sxthne	r3, r3
 8022030:	e7cf      	b.n	8021fd2 <_printf_i+0x52>
 8022032:	6813      	ldr	r3, [r2, #0]
 8022034:	6825      	ldr	r5, [r4, #0]
 8022036:	1d18      	adds	r0, r3, #4
 8022038:	6010      	str	r0, [r2, #0]
 802203a:	0628      	lsls	r0, r5, #24
 802203c:	d501      	bpl.n	8022042 <_printf_i+0xc2>
 802203e:	681b      	ldr	r3, [r3, #0]
 8022040:	e002      	b.n	8022048 <_printf_i+0xc8>
 8022042:	0668      	lsls	r0, r5, #25
 8022044:	d5fb      	bpl.n	802203e <_printf_i+0xbe>
 8022046:	881b      	ldrh	r3, [r3, #0]
 8022048:	4854      	ldr	r0, [pc, #336]	; (802219c <_printf_i+0x21c>)
 802204a:	296f      	cmp	r1, #111	; 0x6f
 802204c:	bf14      	ite	ne
 802204e:	220a      	movne	r2, #10
 8022050:	2208      	moveq	r2, #8
 8022052:	2100      	movs	r1, #0
 8022054:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022058:	6865      	ldr	r5, [r4, #4]
 802205a:	60a5      	str	r5, [r4, #8]
 802205c:	2d00      	cmp	r5, #0
 802205e:	f2c0 8095 	blt.w	802218c <_printf_i+0x20c>
 8022062:	6821      	ldr	r1, [r4, #0]
 8022064:	f021 0104 	bic.w	r1, r1, #4
 8022068:	6021      	str	r1, [r4, #0]
 802206a:	2b00      	cmp	r3, #0
 802206c:	d13d      	bne.n	80220ea <_printf_i+0x16a>
 802206e:	2d00      	cmp	r5, #0
 8022070:	f040 808e 	bne.w	8022190 <_printf_i+0x210>
 8022074:	4665      	mov	r5, ip
 8022076:	2a08      	cmp	r2, #8
 8022078:	d10b      	bne.n	8022092 <_printf_i+0x112>
 802207a:	6823      	ldr	r3, [r4, #0]
 802207c:	07db      	lsls	r3, r3, #31
 802207e:	d508      	bpl.n	8022092 <_printf_i+0x112>
 8022080:	6923      	ldr	r3, [r4, #16]
 8022082:	6862      	ldr	r2, [r4, #4]
 8022084:	429a      	cmp	r2, r3
 8022086:	bfde      	ittt	le
 8022088:	2330      	movle	r3, #48	; 0x30
 802208a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802208e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022092:	ebac 0305 	sub.w	r3, ip, r5
 8022096:	6123      	str	r3, [r4, #16]
 8022098:	f8cd 8000 	str.w	r8, [sp]
 802209c:	463b      	mov	r3, r7
 802209e:	aa03      	add	r2, sp, #12
 80220a0:	4621      	mov	r1, r4
 80220a2:	4630      	mov	r0, r6
 80220a4:	f7ff fef6 	bl	8021e94 <_printf_common>
 80220a8:	3001      	adds	r0, #1
 80220aa:	d14d      	bne.n	8022148 <_printf_i+0x1c8>
 80220ac:	f04f 30ff 	mov.w	r0, #4294967295
 80220b0:	b005      	add	sp, #20
 80220b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220b6:	4839      	ldr	r0, [pc, #228]	; (802219c <_printf_i+0x21c>)
 80220b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80220bc:	6813      	ldr	r3, [r2, #0]
 80220be:	6821      	ldr	r1, [r4, #0]
 80220c0:	1d1d      	adds	r5, r3, #4
 80220c2:	681b      	ldr	r3, [r3, #0]
 80220c4:	6015      	str	r5, [r2, #0]
 80220c6:	060a      	lsls	r2, r1, #24
 80220c8:	d50b      	bpl.n	80220e2 <_printf_i+0x162>
 80220ca:	07ca      	lsls	r2, r1, #31
 80220cc:	bf44      	itt	mi
 80220ce:	f041 0120 	orrmi.w	r1, r1, #32
 80220d2:	6021      	strmi	r1, [r4, #0]
 80220d4:	b91b      	cbnz	r3, 80220de <_printf_i+0x15e>
 80220d6:	6822      	ldr	r2, [r4, #0]
 80220d8:	f022 0220 	bic.w	r2, r2, #32
 80220dc:	6022      	str	r2, [r4, #0]
 80220de:	2210      	movs	r2, #16
 80220e0:	e7b7      	b.n	8022052 <_printf_i+0xd2>
 80220e2:	064d      	lsls	r5, r1, #25
 80220e4:	bf48      	it	mi
 80220e6:	b29b      	uxthmi	r3, r3
 80220e8:	e7ef      	b.n	80220ca <_printf_i+0x14a>
 80220ea:	4665      	mov	r5, ip
 80220ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80220f0:	fb02 3311 	mls	r3, r2, r1, r3
 80220f4:	5cc3      	ldrb	r3, [r0, r3]
 80220f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80220fa:	460b      	mov	r3, r1
 80220fc:	2900      	cmp	r1, #0
 80220fe:	d1f5      	bne.n	80220ec <_printf_i+0x16c>
 8022100:	e7b9      	b.n	8022076 <_printf_i+0xf6>
 8022102:	6813      	ldr	r3, [r2, #0]
 8022104:	6825      	ldr	r5, [r4, #0]
 8022106:	6961      	ldr	r1, [r4, #20]
 8022108:	1d18      	adds	r0, r3, #4
 802210a:	6010      	str	r0, [r2, #0]
 802210c:	0628      	lsls	r0, r5, #24
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	d501      	bpl.n	8022116 <_printf_i+0x196>
 8022112:	6019      	str	r1, [r3, #0]
 8022114:	e002      	b.n	802211c <_printf_i+0x19c>
 8022116:	066a      	lsls	r2, r5, #25
 8022118:	d5fb      	bpl.n	8022112 <_printf_i+0x192>
 802211a:	8019      	strh	r1, [r3, #0]
 802211c:	2300      	movs	r3, #0
 802211e:	6123      	str	r3, [r4, #16]
 8022120:	4665      	mov	r5, ip
 8022122:	e7b9      	b.n	8022098 <_printf_i+0x118>
 8022124:	6813      	ldr	r3, [r2, #0]
 8022126:	1d19      	adds	r1, r3, #4
 8022128:	6011      	str	r1, [r2, #0]
 802212a:	681d      	ldr	r5, [r3, #0]
 802212c:	6862      	ldr	r2, [r4, #4]
 802212e:	2100      	movs	r1, #0
 8022130:	4628      	mov	r0, r5
 8022132:	f7de f84d 	bl	80001d0 <memchr>
 8022136:	b108      	cbz	r0, 802213c <_printf_i+0x1bc>
 8022138:	1b40      	subs	r0, r0, r5
 802213a:	6060      	str	r0, [r4, #4]
 802213c:	6863      	ldr	r3, [r4, #4]
 802213e:	6123      	str	r3, [r4, #16]
 8022140:	2300      	movs	r3, #0
 8022142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022146:	e7a7      	b.n	8022098 <_printf_i+0x118>
 8022148:	6923      	ldr	r3, [r4, #16]
 802214a:	462a      	mov	r2, r5
 802214c:	4639      	mov	r1, r7
 802214e:	4630      	mov	r0, r6
 8022150:	47c0      	blx	r8
 8022152:	3001      	adds	r0, #1
 8022154:	d0aa      	beq.n	80220ac <_printf_i+0x12c>
 8022156:	6823      	ldr	r3, [r4, #0]
 8022158:	079b      	lsls	r3, r3, #30
 802215a:	d413      	bmi.n	8022184 <_printf_i+0x204>
 802215c:	68e0      	ldr	r0, [r4, #12]
 802215e:	9b03      	ldr	r3, [sp, #12]
 8022160:	4298      	cmp	r0, r3
 8022162:	bfb8      	it	lt
 8022164:	4618      	movlt	r0, r3
 8022166:	e7a3      	b.n	80220b0 <_printf_i+0x130>
 8022168:	2301      	movs	r3, #1
 802216a:	464a      	mov	r2, r9
 802216c:	4639      	mov	r1, r7
 802216e:	4630      	mov	r0, r6
 8022170:	47c0      	blx	r8
 8022172:	3001      	adds	r0, #1
 8022174:	d09a      	beq.n	80220ac <_printf_i+0x12c>
 8022176:	3501      	adds	r5, #1
 8022178:	68e3      	ldr	r3, [r4, #12]
 802217a:	9a03      	ldr	r2, [sp, #12]
 802217c:	1a9b      	subs	r3, r3, r2
 802217e:	42ab      	cmp	r3, r5
 8022180:	dcf2      	bgt.n	8022168 <_printf_i+0x1e8>
 8022182:	e7eb      	b.n	802215c <_printf_i+0x1dc>
 8022184:	2500      	movs	r5, #0
 8022186:	f104 0919 	add.w	r9, r4, #25
 802218a:	e7f5      	b.n	8022178 <_printf_i+0x1f8>
 802218c:	2b00      	cmp	r3, #0
 802218e:	d1ac      	bne.n	80220ea <_printf_i+0x16a>
 8022190:	7803      	ldrb	r3, [r0, #0]
 8022192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022196:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802219a:	e76c      	b.n	8022076 <_printf_i+0xf6>
 802219c:	08026c05 	.word	0x08026c05
 80221a0:	08026c16 	.word	0x08026c16

080221a4 <iprintf>:
 80221a4:	b40f      	push	{r0, r1, r2, r3}
 80221a6:	4b0a      	ldr	r3, [pc, #40]	; (80221d0 <iprintf+0x2c>)
 80221a8:	b513      	push	{r0, r1, r4, lr}
 80221aa:	681c      	ldr	r4, [r3, #0]
 80221ac:	b124      	cbz	r4, 80221b8 <iprintf+0x14>
 80221ae:	69a3      	ldr	r3, [r4, #24]
 80221b0:	b913      	cbnz	r3, 80221b8 <iprintf+0x14>
 80221b2:	4620      	mov	r0, r4
 80221b4:	f000 fdac 	bl	8022d10 <__sinit>
 80221b8:	ab05      	add	r3, sp, #20
 80221ba:	9a04      	ldr	r2, [sp, #16]
 80221bc:	68a1      	ldr	r1, [r4, #8]
 80221be:	9301      	str	r3, [sp, #4]
 80221c0:	4620      	mov	r0, r4
 80221c2:	f7ff fd51 	bl	8021c68 <_vfiprintf_r>
 80221c6:	b002      	add	sp, #8
 80221c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221cc:	b004      	add	sp, #16
 80221ce:	4770      	bx	lr
 80221d0:	200000f4 	.word	0x200000f4

080221d4 <putchar>:
 80221d4:	b538      	push	{r3, r4, r5, lr}
 80221d6:	4b08      	ldr	r3, [pc, #32]	; (80221f8 <putchar+0x24>)
 80221d8:	681c      	ldr	r4, [r3, #0]
 80221da:	4605      	mov	r5, r0
 80221dc:	b124      	cbz	r4, 80221e8 <putchar+0x14>
 80221de:	69a3      	ldr	r3, [r4, #24]
 80221e0:	b913      	cbnz	r3, 80221e8 <putchar+0x14>
 80221e2:	4620      	mov	r0, r4
 80221e4:	f000 fd94 	bl	8022d10 <__sinit>
 80221e8:	68a2      	ldr	r2, [r4, #8]
 80221ea:	4629      	mov	r1, r5
 80221ec:	4620      	mov	r0, r4
 80221ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80221f2:	f001 b87b 	b.w	80232ec <_putc_r>
 80221f6:	bf00      	nop
 80221f8:	200000f4 	.word	0x200000f4

080221fc <_puts_r>:
 80221fc:	b570      	push	{r4, r5, r6, lr}
 80221fe:	460e      	mov	r6, r1
 8022200:	4605      	mov	r5, r0
 8022202:	b118      	cbz	r0, 802220c <_puts_r+0x10>
 8022204:	6983      	ldr	r3, [r0, #24]
 8022206:	b90b      	cbnz	r3, 802220c <_puts_r+0x10>
 8022208:	f000 fd82 	bl	8022d10 <__sinit>
 802220c:	69ab      	ldr	r3, [r5, #24]
 802220e:	68ac      	ldr	r4, [r5, #8]
 8022210:	b913      	cbnz	r3, 8022218 <_puts_r+0x1c>
 8022212:	4628      	mov	r0, r5
 8022214:	f000 fd7c 	bl	8022d10 <__sinit>
 8022218:	4b23      	ldr	r3, [pc, #140]	; (80222a8 <_puts_r+0xac>)
 802221a:	429c      	cmp	r4, r3
 802221c:	d117      	bne.n	802224e <_puts_r+0x52>
 802221e:	686c      	ldr	r4, [r5, #4]
 8022220:	89a3      	ldrh	r3, [r4, #12]
 8022222:	071b      	lsls	r3, r3, #28
 8022224:	d51d      	bpl.n	8022262 <_puts_r+0x66>
 8022226:	6923      	ldr	r3, [r4, #16]
 8022228:	b1db      	cbz	r3, 8022262 <_puts_r+0x66>
 802222a:	3e01      	subs	r6, #1
 802222c:	68a3      	ldr	r3, [r4, #8]
 802222e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022232:	3b01      	subs	r3, #1
 8022234:	60a3      	str	r3, [r4, #8]
 8022236:	b9e9      	cbnz	r1, 8022274 <_puts_r+0x78>
 8022238:	2b00      	cmp	r3, #0
 802223a:	da2e      	bge.n	802229a <_puts_r+0x9e>
 802223c:	4622      	mov	r2, r4
 802223e:	210a      	movs	r1, #10
 8022240:	4628      	mov	r0, r5
 8022242:	f000 fb99 	bl	8022978 <__swbuf_r>
 8022246:	3001      	adds	r0, #1
 8022248:	d011      	beq.n	802226e <_puts_r+0x72>
 802224a:	200a      	movs	r0, #10
 802224c:	e011      	b.n	8022272 <_puts_r+0x76>
 802224e:	4b17      	ldr	r3, [pc, #92]	; (80222ac <_puts_r+0xb0>)
 8022250:	429c      	cmp	r4, r3
 8022252:	d101      	bne.n	8022258 <_puts_r+0x5c>
 8022254:	68ac      	ldr	r4, [r5, #8]
 8022256:	e7e3      	b.n	8022220 <_puts_r+0x24>
 8022258:	4b15      	ldr	r3, [pc, #84]	; (80222b0 <_puts_r+0xb4>)
 802225a:	429c      	cmp	r4, r3
 802225c:	bf08      	it	eq
 802225e:	68ec      	ldreq	r4, [r5, #12]
 8022260:	e7de      	b.n	8022220 <_puts_r+0x24>
 8022262:	4621      	mov	r1, r4
 8022264:	4628      	mov	r0, r5
 8022266:	f000 fbd9 	bl	8022a1c <__swsetup_r>
 802226a:	2800      	cmp	r0, #0
 802226c:	d0dd      	beq.n	802222a <_puts_r+0x2e>
 802226e:	f04f 30ff 	mov.w	r0, #4294967295
 8022272:	bd70      	pop	{r4, r5, r6, pc}
 8022274:	2b00      	cmp	r3, #0
 8022276:	da04      	bge.n	8022282 <_puts_r+0x86>
 8022278:	69a2      	ldr	r2, [r4, #24]
 802227a:	429a      	cmp	r2, r3
 802227c:	dc06      	bgt.n	802228c <_puts_r+0x90>
 802227e:	290a      	cmp	r1, #10
 8022280:	d004      	beq.n	802228c <_puts_r+0x90>
 8022282:	6823      	ldr	r3, [r4, #0]
 8022284:	1c5a      	adds	r2, r3, #1
 8022286:	6022      	str	r2, [r4, #0]
 8022288:	7019      	strb	r1, [r3, #0]
 802228a:	e7cf      	b.n	802222c <_puts_r+0x30>
 802228c:	4622      	mov	r2, r4
 802228e:	4628      	mov	r0, r5
 8022290:	f000 fb72 	bl	8022978 <__swbuf_r>
 8022294:	3001      	adds	r0, #1
 8022296:	d1c9      	bne.n	802222c <_puts_r+0x30>
 8022298:	e7e9      	b.n	802226e <_puts_r+0x72>
 802229a:	6823      	ldr	r3, [r4, #0]
 802229c:	200a      	movs	r0, #10
 802229e:	1c5a      	adds	r2, r3, #1
 80222a0:	6022      	str	r2, [r4, #0]
 80222a2:	7018      	strb	r0, [r3, #0]
 80222a4:	e7e5      	b.n	8022272 <_puts_r+0x76>
 80222a6:	bf00      	nop
 80222a8:	08026c84 	.word	0x08026c84
 80222ac:	08026ca4 	.word	0x08026ca4
 80222b0:	08026c64 	.word	0x08026c64

080222b4 <puts>:
 80222b4:	4b02      	ldr	r3, [pc, #8]	; (80222c0 <puts+0xc>)
 80222b6:	4601      	mov	r1, r0
 80222b8:	6818      	ldr	r0, [r3, #0]
 80222ba:	f7ff bf9f 	b.w	80221fc <_puts_r>
 80222be:	bf00      	nop
 80222c0:	200000f4 	.word	0x200000f4

080222c4 <srand>:
 80222c4:	b538      	push	{r3, r4, r5, lr}
 80222c6:	4b0d      	ldr	r3, [pc, #52]	; (80222fc <srand+0x38>)
 80222c8:	681c      	ldr	r4, [r3, #0]
 80222ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80222cc:	4605      	mov	r5, r0
 80222ce:	b97b      	cbnz	r3, 80222f0 <srand+0x2c>
 80222d0:	2018      	movs	r0, #24
 80222d2:	f7ff f93f 	bl	8021554 <malloc>
 80222d6:	4a0a      	ldr	r2, [pc, #40]	; (8022300 <srand+0x3c>)
 80222d8:	4b0a      	ldr	r3, [pc, #40]	; (8022304 <srand+0x40>)
 80222da:	63a0      	str	r0, [r4, #56]	; 0x38
 80222dc:	e9c0 2300 	strd	r2, r3, [r0]
 80222e0:	4b09      	ldr	r3, [pc, #36]	; (8022308 <srand+0x44>)
 80222e2:	6083      	str	r3, [r0, #8]
 80222e4:	230b      	movs	r3, #11
 80222e6:	8183      	strh	r3, [r0, #12]
 80222e8:	2201      	movs	r2, #1
 80222ea:	2300      	movs	r3, #0
 80222ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80222f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80222f2:	2200      	movs	r2, #0
 80222f4:	611d      	str	r5, [r3, #16]
 80222f6:	615a      	str	r2, [r3, #20]
 80222f8:	bd38      	pop	{r3, r4, r5, pc}
 80222fa:	bf00      	nop
 80222fc:	200000f4 	.word	0x200000f4
 8022300:	abcd330e 	.word	0xabcd330e
 8022304:	e66d1234 	.word	0xe66d1234
 8022308:	0005deec 	.word	0x0005deec

0802230c <rand>:
 802230c:	b538      	push	{r3, r4, r5, lr}
 802230e:	4b13      	ldr	r3, [pc, #76]	; (802235c <rand+0x50>)
 8022310:	681c      	ldr	r4, [r3, #0]
 8022312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022314:	b97b      	cbnz	r3, 8022336 <rand+0x2a>
 8022316:	2018      	movs	r0, #24
 8022318:	f7ff f91c 	bl	8021554 <malloc>
 802231c:	4a10      	ldr	r2, [pc, #64]	; (8022360 <rand+0x54>)
 802231e:	4b11      	ldr	r3, [pc, #68]	; (8022364 <rand+0x58>)
 8022320:	63a0      	str	r0, [r4, #56]	; 0x38
 8022322:	e9c0 2300 	strd	r2, r3, [r0]
 8022326:	4b10      	ldr	r3, [pc, #64]	; (8022368 <rand+0x5c>)
 8022328:	6083      	str	r3, [r0, #8]
 802232a:	230b      	movs	r3, #11
 802232c:	8183      	strh	r3, [r0, #12]
 802232e:	2201      	movs	r2, #1
 8022330:	2300      	movs	r3, #0
 8022332:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022338:	480c      	ldr	r0, [pc, #48]	; (802236c <rand+0x60>)
 802233a:	690a      	ldr	r2, [r1, #16]
 802233c:	694b      	ldr	r3, [r1, #20]
 802233e:	4c0c      	ldr	r4, [pc, #48]	; (8022370 <rand+0x64>)
 8022340:	4350      	muls	r0, r2
 8022342:	fb04 0003 	mla	r0, r4, r3, r0
 8022346:	fba2 2304 	umull	r2, r3, r2, r4
 802234a:	4403      	add	r3, r0
 802234c:	1c54      	adds	r4, r2, #1
 802234e:	f143 0500 	adc.w	r5, r3, #0
 8022352:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8022356:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 802235a:	bd38      	pop	{r3, r4, r5, pc}
 802235c:	200000f4 	.word	0x200000f4
 8022360:	abcd330e 	.word	0xabcd330e
 8022364:	e66d1234 	.word	0xe66d1234
 8022368:	0005deec 	.word	0x0005deec
 802236c:	5851f42d 	.word	0x5851f42d
 8022370:	4c957f2d 	.word	0x4c957f2d

08022374 <_sbrk_r>:
 8022374:	b538      	push	{r3, r4, r5, lr}
 8022376:	4c06      	ldr	r4, [pc, #24]	; (8022390 <_sbrk_r+0x1c>)
 8022378:	2300      	movs	r3, #0
 802237a:	4605      	mov	r5, r0
 802237c:	4608      	mov	r0, r1
 802237e:	6023      	str	r3, [r4, #0]
 8022380:	f7df fa8e 	bl	80018a0 <_sbrk>
 8022384:	1c43      	adds	r3, r0, #1
 8022386:	d102      	bne.n	802238e <_sbrk_r+0x1a>
 8022388:	6823      	ldr	r3, [r4, #0]
 802238a:	b103      	cbz	r3, 802238e <_sbrk_r+0x1a>
 802238c:	602b      	str	r3, [r5, #0]
 802238e:	bd38      	pop	{r3, r4, r5, pc}
 8022390:	200022dc 	.word	0x200022dc

08022394 <siprintf>:
 8022394:	b40e      	push	{r1, r2, r3}
 8022396:	b500      	push	{lr}
 8022398:	b09c      	sub	sp, #112	; 0x70
 802239a:	ab1d      	add	r3, sp, #116	; 0x74
 802239c:	9002      	str	r0, [sp, #8]
 802239e:	9006      	str	r0, [sp, #24]
 80223a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80223a4:	4809      	ldr	r0, [pc, #36]	; (80223cc <siprintf+0x38>)
 80223a6:	9107      	str	r1, [sp, #28]
 80223a8:	9104      	str	r1, [sp, #16]
 80223aa:	4909      	ldr	r1, [pc, #36]	; (80223d0 <siprintf+0x3c>)
 80223ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80223b0:	9105      	str	r1, [sp, #20]
 80223b2:	6800      	ldr	r0, [r0, #0]
 80223b4:	9301      	str	r3, [sp, #4]
 80223b6:	a902      	add	r1, sp, #8
 80223b8:	f000 fea0 	bl	80230fc <_svfiprintf_r>
 80223bc:	9b02      	ldr	r3, [sp, #8]
 80223be:	2200      	movs	r2, #0
 80223c0:	701a      	strb	r2, [r3, #0]
 80223c2:	b01c      	add	sp, #112	; 0x70
 80223c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80223c8:	b003      	add	sp, #12
 80223ca:	4770      	bx	lr
 80223cc:	200000f4 	.word	0x200000f4
 80223d0:	ffff0208 	.word	0xffff0208

080223d4 <_strtol_l.isra.0>:
 80223d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223d8:	4680      	mov	r8, r0
 80223da:	4689      	mov	r9, r1
 80223dc:	4692      	mov	sl, r2
 80223de:	461e      	mov	r6, r3
 80223e0:	460f      	mov	r7, r1
 80223e2:	463d      	mov	r5, r7
 80223e4:	9808      	ldr	r0, [sp, #32]
 80223e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80223ea:	f000 fd63 	bl	8022eb4 <__locale_ctype_ptr_l>
 80223ee:	4420      	add	r0, r4
 80223f0:	7843      	ldrb	r3, [r0, #1]
 80223f2:	f013 0308 	ands.w	r3, r3, #8
 80223f6:	d132      	bne.n	802245e <_strtol_l.isra.0+0x8a>
 80223f8:	2c2d      	cmp	r4, #45	; 0x2d
 80223fa:	d132      	bne.n	8022462 <_strtol_l.isra.0+0x8e>
 80223fc:	787c      	ldrb	r4, [r7, #1]
 80223fe:	1cbd      	adds	r5, r7, #2
 8022400:	2201      	movs	r2, #1
 8022402:	2e00      	cmp	r6, #0
 8022404:	d05d      	beq.n	80224c2 <_strtol_l.isra.0+0xee>
 8022406:	2e10      	cmp	r6, #16
 8022408:	d109      	bne.n	802241e <_strtol_l.isra.0+0x4a>
 802240a:	2c30      	cmp	r4, #48	; 0x30
 802240c:	d107      	bne.n	802241e <_strtol_l.isra.0+0x4a>
 802240e:	782b      	ldrb	r3, [r5, #0]
 8022410:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8022414:	2b58      	cmp	r3, #88	; 0x58
 8022416:	d14f      	bne.n	80224b8 <_strtol_l.isra.0+0xe4>
 8022418:	786c      	ldrb	r4, [r5, #1]
 802241a:	2610      	movs	r6, #16
 802241c:	3502      	adds	r5, #2
 802241e:	2a00      	cmp	r2, #0
 8022420:	bf14      	ite	ne
 8022422:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8022426:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802242a:	2700      	movs	r7, #0
 802242c:	fbb1 fcf6 	udiv	ip, r1, r6
 8022430:	4638      	mov	r0, r7
 8022432:	fb06 1e1c 	mls	lr, r6, ip, r1
 8022436:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802243a:	2b09      	cmp	r3, #9
 802243c:	d817      	bhi.n	802246e <_strtol_l.isra.0+0x9a>
 802243e:	461c      	mov	r4, r3
 8022440:	42a6      	cmp	r6, r4
 8022442:	dd23      	ble.n	802248c <_strtol_l.isra.0+0xb8>
 8022444:	1c7b      	adds	r3, r7, #1
 8022446:	d007      	beq.n	8022458 <_strtol_l.isra.0+0x84>
 8022448:	4584      	cmp	ip, r0
 802244a:	d31c      	bcc.n	8022486 <_strtol_l.isra.0+0xb2>
 802244c:	d101      	bne.n	8022452 <_strtol_l.isra.0+0x7e>
 802244e:	45a6      	cmp	lr, r4
 8022450:	db19      	blt.n	8022486 <_strtol_l.isra.0+0xb2>
 8022452:	fb00 4006 	mla	r0, r0, r6, r4
 8022456:	2701      	movs	r7, #1
 8022458:	f815 4b01 	ldrb.w	r4, [r5], #1
 802245c:	e7eb      	b.n	8022436 <_strtol_l.isra.0+0x62>
 802245e:	462f      	mov	r7, r5
 8022460:	e7bf      	b.n	80223e2 <_strtol_l.isra.0+0xe>
 8022462:	2c2b      	cmp	r4, #43	; 0x2b
 8022464:	bf04      	itt	eq
 8022466:	1cbd      	addeq	r5, r7, #2
 8022468:	787c      	ldrbeq	r4, [r7, #1]
 802246a:	461a      	mov	r2, r3
 802246c:	e7c9      	b.n	8022402 <_strtol_l.isra.0+0x2e>
 802246e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8022472:	2b19      	cmp	r3, #25
 8022474:	d801      	bhi.n	802247a <_strtol_l.isra.0+0xa6>
 8022476:	3c37      	subs	r4, #55	; 0x37
 8022478:	e7e2      	b.n	8022440 <_strtol_l.isra.0+0x6c>
 802247a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802247e:	2b19      	cmp	r3, #25
 8022480:	d804      	bhi.n	802248c <_strtol_l.isra.0+0xb8>
 8022482:	3c57      	subs	r4, #87	; 0x57
 8022484:	e7dc      	b.n	8022440 <_strtol_l.isra.0+0x6c>
 8022486:	f04f 37ff 	mov.w	r7, #4294967295
 802248a:	e7e5      	b.n	8022458 <_strtol_l.isra.0+0x84>
 802248c:	1c7b      	adds	r3, r7, #1
 802248e:	d108      	bne.n	80224a2 <_strtol_l.isra.0+0xce>
 8022490:	2322      	movs	r3, #34	; 0x22
 8022492:	f8c8 3000 	str.w	r3, [r8]
 8022496:	4608      	mov	r0, r1
 8022498:	f1ba 0f00 	cmp.w	sl, #0
 802249c:	d107      	bne.n	80224ae <_strtol_l.isra.0+0xda>
 802249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224a2:	b102      	cbz	r2, 80224a6 <_strtol_l.isra.0+0xd2>
 80224a4:	4240      	negs	r0, r0
 80224a6:	f1ba 0f00 	cmp.w	sl, #0
 80224aa:	d0f8      	beq.n	802249e <_strtol_l.isra.0+0xca>
 80224ac:	b10f      	cbz	r7, 80224b2 <_strtol_l.isra.0+0xde>
 80224ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80224b2:	f8ca 9000 	str.w	r9, [sl]
 80224b6:	e7f2      	b.n	802249e <_strtol_l.isra.0+0xca>
 80224b8:	2430      	movs	r4, #48	; 0x30
 80224ba:	2e00      	cmp	r6, #0
 80224bc:	d1af      	bne.n	802241e <_strtol_l.isra.0+0x4a>
 80224be:	2608      	movs	r6, #8
 80224c0:	e7ad      	b.n	802241e <_strtol_l.isra.0+0x4a>
 80224c2:	2c30      	cmp	r4, #48	; 0x30
 80224c4:	d0a3      	beq.n	802240e <_strtol_l.isra.0+0x3a>
 80224c6:	260a      	movs	r6, #10
 80224c8:	e7a9      	b.n	802241e <_strtol_l.isra.0+0x4a>
	...

080224cc <_strtol_r>:
 80224cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80224ce:	4c06      	ldr	r4, [pc, #24]	; (80224e8 <_strtol_r+0x1c>)
 80224d0:	4d06      	ldr	r5, [pc, #24]	; (80224ec <_strtol_r+0x20>)
 80224d2:	6824      	ldr	r4, [r4, #0]
 80224d4:	6a24      	ldr	r4, [r4, #32]
 80224d6:	2c00      	cmp	r4, #0
 80224d8:	bf08      	it	eq
 80224da:	462c      	moveq	r4, r5
 80224dc:	9400      	str	r4, [sp, #0]
 80224de:	f7ff ff79 	bl	80223d4 <_strtol_l.isra.0>
 80224e2:	b003      	add	sp, #12
 80224e4:	bd30      	pop	{r4, r5, pc}
 80224e6:	bf00      	nop
 80224e8:	200000f4 	.word	0x200000f4
 80224ec:	200001b8 	.word	0x200001b8

080224f0 <strtol>:
 80224f0:	4b08      	ldr	r3, [pc, #32]	; (8022514 <strtol+0x24>)
 80224f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80224f4:	681c      	ldr	r4, [r3, #0]
 80224f6:	4d08      	ldr	r5, [pc, #32]	; (8022518 <strtol+0x28>)
 80224f8:	6a23      	ldr	r3, [r4, #32]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	bf08      	it	eq
 80224fe:	462b      	moveq	r3, r5
 8022500:	9300      	str	r3, [sp, #0]
 8022502:	4613      	mov	r3, r2
 8022504:	460a      	mov	r2, r1
 8022506:	4601      	mov	r1, r0
 8022508:	4620      	mov	r0, r4
 802250a:	f7ff ff63 	bl	80223d4 <_strtol_l.isra.0>
 802250e:	b003      	add	sp, #12
 8022510:	bd30      	pop	{r4, r5, pc}
 8022512:	bf00      	nop
 8022514:	200000f4 	.word	0x200000f4
 8022518:	200001b8 	.word	0x200001b8

0802251c <__tzcalc_limits>:
 802251c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022520:	4680      	mov	r8, r0
 8022522:	f000 fcc3 	bl	8022eac <__gettzinfo>
 8022526:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802252a:	4598      	cmp	r8, r3
 802252c:	f340 8098 	ble.w	8022660 <__tzcalc_limits+0x144>
 8022530:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8022534:	4443      	add	r3, r8
 8022536:	109b      	asrs	r3, r3, #2
 8022538:	f240 126d 	movw	r2, #365	; 0x16d
 802253c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8022540:	fb02 3505 	mla	r5, r2, r5, r3
 8022544:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8022548:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 802254c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022550:	441d      	add	r5, r3
 8022552:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022556:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 802255a:	fb98 f7f3 	sdiv	r7, r8, r3
 802255e:	fb03 8717 	mls	r7, r3, r7, r8
 8022562:	4442      	add	r2, r8
 8022564:	fab7 fc87 	clz	ip, r7
 8022568:	fb92 f2f3 	sdiv	r2, r2, r3
 802256c:	f008 0303 	and.w	r3, r8, #3
 8022570:	4415      	add	r5, r2
 8022572:	2264      	movs	r2, #100	; 0x64
 8022574:	f8c0 8004 	str.w	r8, [r0, #4]
 8022578:	fb98 f6f2 	sdiv	r6, r8, r2
 802257c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022580:	fb02 8616 	mls	r6, r2, r6, r8
 8022584:	4604      	mov	r4, r0
 8022586:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802258a:	9300      	str	r3, [sp, #0]
 802258c:	f04f 0e07 	mov.w	lr, #7
 8022590:	7a22      	ldrb	r2, [r4, #8]
 8022592:	6963      	ldr	r3, [r4, #20]
 8022594:	2a4a      	cmp	r2, #74	; 0x4a
 8022596:	d128      	bne.n	80225ea <__tzcalc_limits+0xce>
 8022598:	9900      	ldr	r1, [sp, #0]
 802259a:	18ea      	adds	r2, r5, r3
 802259c:	b901      	cbnz	r1, 80225a0 <__tzcalc_limits+0x84>
 802259e:	b906      	cbnz	r6, 80225a2 <__tzcalc_limits+0x86>
 80225a0:	bb0f      	cbnz	r7, 80225e6 <__tzcalc_limits+0xca>
 80225a2:	2b3b      	cmp	r3, #59	; 0x3b
 80225a4:	bfd4      	ite	le
 80225a6:	2300      	movle	r3, #0
 80225a8:	2301      	movgt	r3, #1
 80225aa:	4413      	add	r3, r2
 80225ac:	1e5a      	subs	r2, r3, #1
 80225ae:	69a3      	ldr	r3, [r4, #24]
 80225b0:	492c      	ldr	r1, [pc, #176]	; (8022664 <__tzcalc_limits+0x148>)
 80225b2:	fb01 3202 	mla	r2, r1, r2, r3
 80225b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80225b8:	4413      	add	r3, r2
 80225ba:	461a      	mov	r2, r3
 80225bc:	17db      	asrs	r3, r3, #31
 80225be:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80225c2:	3428      	adds	r4, #40	; 0x28
 80225c4:	45a3      	cmp	fp, r4
 80225c6:	d1e3      	bne.n	8022590 <__tzcalc_limits+0x74>
 80225c8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80225cc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80225d0:	4294      	cmp	r4, r2
 80225d2:	eb75 0303 	sbcs.w	r3, r5, r3
 80225d6:	bfb4      	ite	lt
 80225d8:	2301      	movlt	r3, #1
 80225da:	2300      	movge	r3, #0
 80225dc:	6003      	str	r3, [r0, #0]
 80225de:	2001      	movs	r0, #1
 80225e0:	b003      	add	sp, #12
 80225e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225e6:	2300      	movs	r3, #0
 80225e8:	e7df      	b.n	80225aa <__tzcalc_limits+0x8e>
 80225ea:	2a44      	cmp	r2, #68	; 0x44
 80225ec:	d101      	bne.n	80225f2 <__tzcalc_limits+0xd6>
 80225ee:	18ea      	adds	r2, r5, r3
 80225f0:	e7dd      	b.n	80225ae <__tzcalc_limits+0x92>
 80225f2:	9a00      	ldr	r2, [sp, #0]
 80225f4:	bb72      	cbnz	r2, 8022654 <__tzcalc_limits+0x138>
 80225f6:	2e00      	cmp	r6, #0
 80225f8:	bf0c      	ite	eq
 80225fa:	46e1      	moveq	r9, ip
 80225fc:	f04f 0901 	movne.w	r9, #1
 8022600:	2230      	movs	r2, #48	; 0x30
 8022602:	fb02 f909 	mul.w	r9, r2, r9
 8022606:	68e2      	ldr	r2, [r4, #12]
 8022608:	9201      	str	r2, [sp, #4]
 802260a:	f04f 0800 	mov.w	r8, #0
 802260e:	462a      	mov	r2, r5
 8022610:	f108 0801 	add.w	r8, r8, #1
 8022614:	4914      	ldr	r1, [pc, #80]	; (8022668 <__tzcalc_limits+0x14c>)
 8022616:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 802261a:	448a      	add	sl, r1
 802261c:	9901      	ldr	r1, [sp, #4]
 802261e:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8022622:	4541      	cmp	r1, r8
 8022624:	dc18      	bgt.n	8022658 <__tzcalc_limits+0x13c>
 8022626:	f102 0804 	add.w	r8, r2, #4
 802262a:	fb98 f9fe 	sdiv	r9, r8, lr
 802262e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8022632:	eba8 0909 	sub.w	r9, r8, r9
 8022636:	ebb3 0909 	subs.w	r9, r3, r9
 802263a:	6923      	ldr	r3, [r4, #16]
 802263c:	f103 33ff 	add.w	r3, r3, #4294967295
 8022640:	bf48      	it	mi
 8022642:	f109 0907 	addmi.w	r9, r9, #7
 8022646:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802264a:	444b      	add	r3, r9
 802264c:	4553      	cmp	r3, sl
 802264e:	da05      	bge.n	802265c <__tzcalc_limits+0x140>
 8022650:	441a      	add	r2, r3
 8022652:	e7ac      	b.n	80225ae <__tzcalc_limits+0x92>
 8022654:	46e1      	mov	r9, ip
 8022656:	e7d3      	b.n	8022600 <__tzcalc_limits+0xe4>
 8022658:	4452      	add	r2, sl
 802265a:	e7d9      	b.n	8022610 <__tzcalc_limits+0xf4>
 802265c:	3b07      	subs	r3, #7
 802265e:	e7f5      	b.n	802264c <__tzcalc_limits+0x130>
 8022660:	2000      	movs	r0, #0
 8022662:	e7bd      	b.n	80225e0 <__tzcalc_limits+0xc4>
 8022664:	00015180 	.word	0x00015180
 8022668:	08026cd0 	.word	0x08026cd0

0802266c <__tz_lock>:
 802266c:	4770      	bx	lr

0802266e <__tz_unlock>:
 802266e:	4770      	bx	lr

08022670 <_tzset_unlocked>:
 8022670:	4b01      	ldr	r3, [pc, #4]	; (8022678 <_tzset_unlocked+0x8>)
 8022672:	6818      	ldr	r0, [r3, #0]
 8022674:	f000 b802 	b.w	802267c <_tzset_unlocked_r>
 8022678:	200000f4 	.word	0x200000f4

0802267c <_tzset_unlocked_r>:
 802267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022680:	b08d      	sub	sp, #52	; 0x34
 8022682:	4607      	mov	r7, r0
 8022684:	f000 fc12 	bl	8022eac <__gettzinfo>
 8022688:	49af      	ldr	r1, [pc, #700]	; (8022948 <_tzset_unlocked_r+0x2cc>)
 802268a:	4eb0      	ldr	r6, [pc, #704]	; (802294c <_tzset_unlocked_r+0x2d0>)
 802268c:	4605      	mov	r5, r0
 802268e:	4638      	mov	r0, r7
 8022690:	f000 fc04 	bl	8022e9c <_getenv_r>
 8022694:	4604      	mov	r4, r0
 8022696:	b970      	cbnz	r0, 80226b6 <_tzset_unlocked_r+0x3a>
 8022698:	4bad      	ldr	r3, [pc, #692]	; (8022950 <_tzset_unlocked_r+0x2d4>)
 802269a:	4aae      	ldr	r2, [pc, #696]	; (8022954 <_tzset_unlocked_r+0x2d8>)
 802269c:	6018      	str	r0, [r3, #0]
 802269e:	4bae      	ldr	r3, [pc, #696]	; (8022958 <_tzset_unlocked_r+0x2dc>)
 80226a0:	6018      	str	r0, [r3, #0]
 80226a2:	4bae      	ldr	r3, [pc, #696]	; (802295c <_tzset_unlocked_r+0x2e0>)
 80226a4:	6830      	ldr	r0, [r6, #0]
 80226a6:	e9c3 2200 	strd	r2, r2, [r3]
 80226aa:	f7fe ff5b 	bl	8021564 <free>
 80226ae:	6034      	str	r4, [r6, #0]
 80226b0:	b00d      	add	sp, #52	; 0x34
 80226b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226b6:	6831      	ldr	r1, [r6, #0]
 80226b8:	2900      	cmp	r1, #0
 80226ba:	d15f      	bne.n	802277c <_tzset_unlocked_r+0x100>
 80226bc:	6830      	ldr	r0, [r6, #0]
 80226be:	f7fe ff51 	bl	8021564 <free>
 80226c2:	4620      	mov	r0, r4
 80226c4:	f7dd fdde 	bl	8000284 <strlen>
 80226c8:	1c41      	adds	r1, r0, #1
 80226ca:	4638      	mov	r0, r7
 80226cc:	f7ff fa48 	bl	8021b60 <_malloc_r>
 80226d0:	6030      	str	r0, [r6, #0]
 80226d2:	2800      	cmp	r0, #0
 80226d4:	d157      	bne.n	8022786 <_tzset_unlocked_r+0x10a>
 80226d6:	7823      	ldrb	r3, [r4, #0]
 80226d8:	4aa1      	ldr	r2, [pc, #644]	; (8022960 <_tzset_unlocked_r+0x2e4>)
 80226da:	49a2      	ldr	r1, [pc, #648]	; (8022964 <_tzset_unlocked_r+0x2e8>)
 80226dc:	2b3a      	cmp	r3, #58	; 0x3a
 80226de:	bf08      	it	eq
 80226e0:	3401      	addeq	r4, #1
 80226e2:	ae0a      	add	r6, sp, #40	; 0x28
 80226e4:	4633      	mov	r3, r6
 80226e6:	4620      	mov	r0, r4
 80226e8:	f000 fe7a 	bl	80233e0 <siscanf>
 80226ec:	2800      	cmp	r0, #0
 80226ee:	dddf      	ble.n	80226b0 <_tzset_unlocked_r+0x34>
 80226f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226f2:	18e7      	adds	r7, r4, r3
 80226f4:	5ce3      	ldrb	r3, [r4, r3]
 80226f6:	2b2d      	cmp	r3, #45	; 0x2d
 80226f8:	d149      	bne.n	802278e <_tzset_unlocked_r+0x112>
 80226fa:	3701      	adds	r7, #1
 80226fc:	f04f 34ff 	mov.w	r4, #4294967295
 8022700:	f10d 0a20 	add.w	sl, sp, #32
 8022704:	f10d 0b1e 	add.w	fp, sp, #30
 8022708:	f04f 0800 	mov.w	r8, #0
 802270c:	9603      	str	r6, [sp, #12]
 802270e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8022712:	f8cd b000 	str.w	fp, [sp]
 8022716:	4633      	mov	r3, r6
 8022718:	aa07      	add	r2, sp, #28
 802271a:	4993      	ldr	r1, [pc, #588]	; (8022968 <_tzset_unlocked_r+0x2ec>)
 802271c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022720:	4638      	mov	r0, r7
 8022722:	f8ad 8020 	strh.w	r8, [sp, #32]
 8022726:	f000 fe5b 	bl	80233e0 <siscanf>
 802272a:	4540      	cmp	r0, r8
 802272c:	ddc0      	ble.n	80226b0 <_tzset_unlocked_r+0x34>
 802272e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022736:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8022974 <_tzset_unlocked_r+0x2f8>
 802273a:	213c      	movs	r1, #60	; 0x3c
 802273c:	fb01 2203 	mla	r2, r1, r3, r2
 8022740:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022744:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022748:	fb01 2303 	mla	r3, r1, r3, r2
 802274c:	435c      	muls	r4, r3
 802274e:	62ac      	str	r4, [r5, #40]	; 0x28
 8022750:	4c82      	ldr	r4, [pc, #520]	; (802295c <_tzset_unlocked_r+0x2e0>)
 8022752:	4b83      	ldr	r3, [pc, #524]	; (8022960 <_tzset_unlocked_r+0x2e4>)
 8022754:	6023      	str	r3, [r4, #0]
 8022756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022758:	4982      	ldr	r1, [pc, #520]	; (8022964 <_tzset_unlocked_r+0x2e8>)
 802275a:	441f      	add	r7, r3
 802275c:	464a      	mov	r2, r9
 802275e:	4633      	mov	r3, r6
 8022760:	4638      	mov	r0, r7
 8022762:	f000 fe3d 	bl	80233e0 <siscanf>
 8022766:	4540      	cmp	r0, r8
 8022768:	dc16      	bgt.n	8022798 <_tzset_unlocked_r+0x11c>
 802276a:	6823      	ldr	r3, [r4, #0]
 802276c:	6063      	str	r3, [r4, #4]
 802276e:	4b78      	ldr	r3, [pc, #480]	; (8022950 <_tzset_unlocked_r+0x2d4>)
 8022770:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022772:	601a      	str	r2, [r3, #0]
 8022774:	4b78      	ldr	r3, [pc, #480]	; (8022958 <_tzset_unlocked_r+0x2dc>)
 8022776:	f8c3 8000 	str.w	r8, [r3]
 802277a:	e799      	b.n	80226b0 <_tzset_unlocked_r+0x34>
 802277c:	f7dd fd78 	bl	8000270 <strcmp>
 8022780:	2800      	cmp	r0, #0
 8022782:	d095      	beq.n	80226b0 <_tzset_unlocked_r+0x34>
 8022784:	e79a      	b.n	80226bc <_tzset_unlocked_r+0x40>
 8022786:	4621      	mov	r1, r4
 8022788:	f000 fe99 	bl	80234be <strcpy>
 802278c:	e7a3      	b.n	80226d6 <_tzset_unlocked_r+0x5a>
 802278e:	2b2b      	cmp	r3, #43	; 0x2b
 8022790:	bf08      	it	eq
 8022792:	3701      	addeq	r7, #1
 8022794:	2401      	movs	r4, #1
 8022796:	e7b3      	b.n	8022700 <_tzset_unlocked_r+0x84>
 8022798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802279a:	f8c4 9004 	str.w	r9, [r4, #4]
 802279e:	18fc      	adds	r4, r7, r3
 80227a0:	5cfb      	ldrb	r3, [r7, r3]
 80227a2:	2b2d      	cmp	r3, #45	; 0x2d
 80227a4:	f040 808b 	bne.w	80228be <_tzset_unlocked_r+0x242>
 80227a8:	3401      	adds	r4, #1
 80227aa:	f04f 37ff 	mov.w	r7, #4294967295
 80227ae:	2300      	movs	r3, #0
 80227b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80227b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80227b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80227bc:	930a      	str	r3, [sp, #40]	; 0x28
 80227be:	e9cd a602 	strd	sl, r6, [sp, #8]
 80227c2:	e9cd b600 	strd	fp, r6, [sp]
 80227c6:	4633      	mov	r3, r6
 80227c8:	aa07      	add	r2, sp, #28
 80227ca:	4967      	ldr	r1, [pc, #412]	; (8022968 <_tzset_unlocked_r+0x2ec>)
 80227cc:	4620      	mov	r0, r4
 80227ce:	f000 fe07 	bl	80233e0 <siscanf>
 80227d2:	2800      	cmp	r0, #0
 80227d4:	dc78      	bgt.n	80228c8 <_tzset_unlocked_r+0x24c>
 80227d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80227d8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80227dc:	652b      	str	r3, [r5, #80]	; 0x50
 80227de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227e0:	462f      	mov	r7, r5
 80227e2:	441c      	add	r4, r3
 80227e4:	f04f 0900 	mov.w	r9, #0
 80227e8:	7823      	ldrb	r3, [r4, #0]
 80227ea:	2b2c      	cmp	r3, #44	; 0x2c
 80227ec:	bf08      	it	eq
 80227ee:	3401      	addeq	r4, #1
 80227f0:	f894 8000 	ldrb.w	r8, [r4]
 80227f4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80227f8:	d179      	bne.n	80228ee <_tzset_unlocked_r+0x272>
 80227fa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80227fe:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8022802:	ab09      	add	r3, sp, #36	; 0x24
 8022804:	9300      	str	r3, [sp, #0]
 8022806:	9603      	str	r6, [sp, #12]
 8022808:	4633      	mov	r3, r6
 802280a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802280e:	4957      	ldr	r1, [pc, #348]	; (802296c <_tzset_unlocked_r+0x2f0>)
 8022810:	4620      	mov	r0, r4
 8022812:	f000 fde5 	bl	80233e0 <siscanf>
 8022816:	2803      	cmp	r0, #3
 8022818:	f47f af4a 	bne.w	80226b0 <_tzset_unlocked_r+0x34>
 802281c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8022820:	1e4b      	subs	r3, r1, #1
 8022822:	2b0b      	cmp	r3, #11
 8022824:	f63f af44 	bhi.w	80226b0 <_tzset_unlocked_r+0x34>
 8022828:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802282c:	1e53      	subs	r3, r2, #1
 802282e:	2b04      	cmp	r3, #4
 8022830:	f63f af3e 	bhi.w	80226b0 <_tzset_unlocked_r+0x34>
 8022834:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8022838:	2b06      	cmp	r3, #6
 802283a:	f63f af39 	bhi.w	80226b0 <_tzset_unlocked_r+0x34>
 802283e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8022842:	f887 8008 	strb.w	r8, [r7, #8]
 8022846:	617b      	str	r3, [r7, #20]
 8022848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802284a:	eb04 0803 	add.w	r8, r4, r3
 802284e:	2302      	movs	r3, #2
 8022850:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022854:	2300      	movs	r3, #0
 8022856:	f8ad 301e 	strh.w	r3, [sp, #30]
 802285a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802285e:	930a      	str	r3, [sp, #40]	; 0x28
 8022860:	f898 3000 	ldrb.w	r3, [r8]
 8022864:	2b2f      	cmp	r3, #47	; 0x2f
 8022866:	d109      	bne.n	802287c <_tzset_unlocked_r+0x200>
 8022868:	e9cd a602 	strd	sl, r6, [sp, #8]
 802286c:	e9cd b600 	strd	fp, r6, [sp]
 8022870:	4633      	mov	r3, r6
 8022872:	aa07      	add	r2, sp, #28
 8022874:	493e      	ldr	r1, [pc, #248]	; (8022970 <_tzset_unlocked_r+0x2f4>)
 8022876:	4640      	mov	r0, r8
 8022878:	f000 fdb2 	bl	80233e0 <siscanf>
 802287c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022884:	213c      	movs	r1, #60	; 0x3c
 8022886:	fb01 2203 	mla	r2, r1, r3, r2
 802288a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802288e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022892:	fb01 2303 	mla	r3, r1, r3, r2
 8022896:	61bb      	str	r3, [r7, #24]
 8022898:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802289a:	3728      	adds	r7, #40	; 0x28
 802289c:	4444      	add	r4, r8
 802289e:	f1b9 0f00 	cmp.w	r9, #0
 80228a2:	d021      	beq.n	80228e8 <_tzset_unlocked_r+0x26c>
 80228a4:	6868      	ldr	r0, [r5, #4]
 80228a6:	f7ff fe39 	bl	802251c <__tzcalc_limits>
 80228aa:	4b29      	ldr	r3, [pc, #164]	; (8022950 <_tzset_unlocked_r+0x2d4>)
 80228ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80228ae:	601a      	str	r2, [r3, #0]
 80228b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80228b2:	1a9b      	subs	r3, r3, r2
 80228b4:	4a28      	ldr	r2, [pc, #160]	; (8022958 <_tzset_unlocked_r+0x2dc>)
 80228b6:	bf18      	it	ne
 80228b8:	2301      	movne	r3, #1
 80228ba:	6013      	str	r3, [r2, #0]
 80228bc:	e6f8      	b.n	80226b0 <_tzset_unlocked_r+0x34>
 80228be:	2b2b      	cmp	r3, #43	; 0x2b
 80228c0:	bf08      	it	eq
 80228c2:	3401      	addeq	r4, #1
 80228c4:	2701      	movs	r7, #1
 80228c6:	e772      	b.n	80227ae <_tzset_unlocked_r+0x132>
 80228c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80228cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80228d0:	213c      	movs	r1, #60	; 0x3c
 80228d2:	fb01 2203 	mla	r2, r1, r3, r2
 80228d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80228da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80228de:	fb01 2303 	mla	r3, r1, r3, r2
 80228e2:	435f      	muls	r7, r3
 80228e4:	652f      	str	r7, [r5, #80]	; 0x50
 80228e6:	e77a      	b.n	80227de <_tzset_unlocked_r+0x162>
 80228e8:	f04f 0901 	mov.w	r9, #1
 80228ec:	e77c      	b.n	80227e8 <_tzset_unlocked_r+0x16c>
 80228ee:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80228f2:	bf06      	itte	eq
 80228f4:	3401      	addeq	r4, #1
 80228f6:	4643      	moveq	r3, r8
 80228f8:	2344      	movne	r3, #68	; 0x44
 80228fa:	220a      	movs	r2, #10
 80228fc:	a90b      	add	r1, sp, #44	; 0x2c
 80228fe:	4620      	mov	r0, r4
 8022900:	9305      	str	r3, [sp, #20]
 8022902:	f000 fe83 	bl	802360c <strtoul>
 8022906:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802290a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802290e:	45a0      	cmp	r8, r4
 8022910:	9b05      	ldr	r3, [sp, #20]
 8022912:	d114      	bne.n	802293e <_tzset_unlocked_r+0x2c2>
 8022914:	234d      	movs	r3, #77	; 0x4d
 8022916:	f1b9 0f00 	cmp.w	r9, #0
 802291a:	d107      	bne.n	802292c <_tzset_unlocked_r+0x2b0>
 802291c:	722b      	strb	r3, [r5, #8]
 802291e:	2103      	movs	r1, #3
 8022920:	2302      	movs	r3, #2
 8022922:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022926:	f8c5 9014 	str.w	r9, [r5, #20]
 802292a:	e790      	b.n	802284e <_tzset_unlocked_r+0x1d2>
 802292c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8022930:	220b      	movs	r2, #11
 8022932:	2301      	movs	r3, #1
 8022934:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8022938:	2300      	movs	r3, #0
 802293a:	63eb      	str	r3, [r5, #60]	; 0x3c
 802293c:	e787      	b.n	802284e <_tzset_unlocked_r+0x1d2>
 802293e:	b280      	uxth	r0, r0
 8022940:	723b      	strb	r3, [r7, #8]
 8022942:	6178      	str	r0, [r7, #20]
 8022944:	e783      	b.n	802284e <_tzset_unlocked_r+0x1d2>
 8022946:	bf00      	nop
 8022948:	08026c27 	.word	0x08026c27
 802294c:	20000cb4 	.word	0x20000cb4
 8022950:	20000cbc 	.word	0x20000cbc
 8022954:	08026c2a 	.word	0x08026c2a
 8022958:	20000cb8 	.word	0x20000cb8
 802295c:	20000158 	.word	0x20000158
 8022960:	20000ca7 	.word	0x20000ca7
 8022964:	08026c2e 	.word	0x08026c2e
 8022968:	08026c51 	.word	0x08026c51
 802296c:	08026c3d 	.word	0x08026c3d
 8022970:	08026c50 	.word	0x08026c50
 8022974:	20000c9c 	.word	0x20000c9c

08022978 <__swbuf_r>:
 8022978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802297a:	460e      	mov	r6, r1
 802297c:	4614      	mov	r4, r2
 802297e:	4605      	mov	r5, r0
 8022980:	b118      	cbz	r0, 802298a <__swbuf_r+0x12>
 8022982:	6983      	ldr	r3, [r0, #24]
 8022984:	b90b      	cbnz	r3, 802298a <__swbuf_r+0x12>
 8022986:	f000 f9c3 	bl	8022d10 <__sinit>
 802298a:	4b21      	ldr	r3, [pc, #132]	; (8022a10 <__swbuf_r+0x98>)
 802298c:	429c      	cmp	r4, r3
 802298e:	d12a      	bne.n	80229e6 <__swbuf_r+0x6e>
 8022990:	686c      	ldr	r4, [r5, #4]
 8022992:	69a3      	ldr	r3, [r4, #24]
 8022994:	60a3      	str	r3, [r4, #8]
 8022996:	89a3      	ldrh	r3, [r4, #12]
 8022998:	071a      	lsls	r2, r3, #28
 802299a:	d52e      	bpl.n	80229fa <__swbuf_r+0x82>
 802299c:	6923      	ldr	r3, [r4, #16]
 802299e:	b363      	cbz	r3, 80229fa <__swbuf_r+0x82>
 80229a0:	6923      	ldr	r3, [r4, #16]
 80229a2:	6820      	ldr	r0, [r4, #0]
 80229a4:	1ac0      	subs	r0, r0, r3
 80229a6:	6963      	ldr	r3, [r4, #20]
 80229a8:	b2f6      	uxtb	r6, r6
 80229aa:	4283      	cmp	r3, r0
 80229ac:	4637      	mov	r7, r6
 80229ae:	dc04      	bgt.n	80229ba <__swbuf_r+0x42>
 80229b0:	4621      	mov	r1, r4
 80229b2:	4628      	mov	r0, r5
 80229b4:	f000 f942 	bl	8022c3c <_fflush_r>
 80229b8:	bb28      	cbnz	r0, 8022a06 <__swbuf_r+0x8e>
 80229ba:	68a3      	ldr	r3, [r4, #8]
 80229bc:	3b01      	subs	r3, #1
 80229be:	60a3      	str	r3, [r4, #8]
 80229c0:	6823      	ldr	r3, [r4, #0]
 80229c2:	1c5a      	adds	r2, r3, #1
 80229c4:	6022      	str	r2, [r4, #0]
 80229c6:	701e      	strb	r6, [r3, #0]
 80229c8:	6963      	ldr	r3, [r4, #20]
 80229ca:	3001      	adds	r0, #1
 80229cc:	4283      	cmp	r3, r0
 80229ce:	d004      	beq.n	80229da <__swbuf_r+0x62>
 80229d0:	89a3      	ldrh	r3, [r4, #12]
 80229d2:	07db      	lsls	r3, r3, #31
 80229d4:	d519      	bpl.n	8022a0a <__swbuf_r+0x92>
 80229d6:	2e0a      	cmp	r6, #10
 80229d8:	d117      	bne.n	8022a0a <__swbuf_r+0x92>
 80229da:	4621      	mov	r1, r4
 80229dc:	4628      	mov	r0, r5
 80229de:	f000 f92d 	bl	8022c3c <_fflush_r>
 80229e2:	b190      	cbz	r0, 8022a0a <__swbuf_r+0x92>
 80229e4:	e00f      	b.n	8022a06 <__swbuf_r+0x8e>
 80229e6:	4b0b      	ldr	r3, [pc, #44]	; (8022a14 <__swbuf_r+0x9c>)
 80229e8:	429c      	cmp	r4, r3
 80229ea:	d101      	bne.n	80229f0 <__swbuf_r+0x78>
 80229ec:	68ac      	ldr	r4, [r5, #8]
 80229ee:	e7d0      	b.n	8022992 <__swbuf_r+0x1a>
 80229f0:	4b09      	ldr	r3, [pc, #36]	; (8022a18 <__swbuf_r+0xa0>)
 80229f2:	429c      	cmp	r4, r3
 80229f4:	bf08      	it	eq
 80229f6:	68ec      	ldreq	r4, [r5, #12]
 80229f8:	e7cb      	b.n	8022992 <__swbuf_r+0x1a>
 80229fa:	4621      	mov	r1, r4
 80229fc:	4628      	mov	r0, r5
 80229fe:	f000 f80d 	bl	8022a1c <__swsetup_r>
 8022a02:	2800      	cmp	r0, #0
 8022a04:	d0cc      	beq.n	80229a0 <__swbuf_r+0x28>
 8022a06:	f04f 37ff 	mov.w	r7, #4294967295
 8022a0a:	4638      	mov	r0, r7
 8022a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a0e:	bf00      	nop
 8022a10:	08026c84 	.word	0x08026c84
 8022a14:	08026ca4 	.word	0x08026ca4
 8022a18:	08026c64 	.word	0x08026c64

08022a1c <__swsetup_r>:
 8022a1c:	4b32      	ldr	r3, [pc, #200]	; (8022ae8 <__swsetup_r+0xcc>)
 8022a1e:	b570      	push	{r4, r5, r6, lr}
 8022a20:	681d      	ldr	r5, [r3, #0]
 8022a22:	4606      	mov	r6, r0
 8022a24:	460c      	mov	r4, r1
 8022a26:	b125      	cbz	r5, 8022a32 <__swsetup_r+0x16>
 8022a28:	69ab      	ldr	r3, [r5, #24]
 8022a2a:	b913      	cbnz	r3, 8022a32 <__swsetup_r+0x16>
 8022a2c:	4628      	mov	r0, r5
 8022a2e:	f000 f96f 	bl	8022d10 <__sinit>
 8022a32:	4b2e      	ldr	r3, [pc, #184]	; (8022aec <__swsetup_r+0xd0>)
 8022a34:	429c      	cmp	r4, r3
 8022a36:	d10f      	bne.n	8022a58 <__swsetup_r+0x3c>
 8022a38:	686c      	ldr	r4, [r5, #4]
 8022a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a3e:	b29a      	uxth	r2, r3
 8022a40:	0715      	lsls	r5, r2, #28
 8022a42:	d42c      	bmi.n	8022a9e <__swsetup_r+0x82>
 8022a44:	06d0      	lsls	r0, r2, #27
 8022a46:	d411      	bmi.n	8022a6c <__swsetup_r+0x50>
 8022a48:	2209      	movs	r2, #9
 8022a4a:	6032      	str	r2, [r6, #0]
 8022a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a50:	81a3      	strh	r3, [r4, #12]
 8022a52:	f04f 30ff 	mov.w	r0, #4294967295
 8022a56:	e03e      	b.n	8022ad6 <__swsetup_r+0xba>
 8022a58:	4b25      	ldr	r3, [pc, #148]	; (8022af0 <__swsetup_r+0xd4>)
 8022a5a:	429c      	cmp	r4, r3
 8022a5c:	d101      	bne.n	8022a62 <__swsetup_r+0x46>
 8022a5e:	68ac      	ldr	r4, [r5, #8]
 8022a60:	e7eb      	b.n	8022a3a <__swsetup_r+0x1e>
 8022a62:	4b24      	ldr	r3, [pc, #144]	; (8022af4 <__swsetup_r+0xd8>)
 8022a64:	429c      	cmp	r4, r3
 8022a66:	bf08      	it	eq
 8022a68:	68ec      	ldreq	r4, [r5, #12]
 8022a6a:	e7e6      	b.n	8022a3a <__swsetup_r+0x1e>
 8022a6c:	0751      	lsls	r1, r2, #29
 8022a6e:	d512      	bpl.n	8022a96 <__swsetup_r+0x7a>
 8022a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a72:	b141      	cbz	r1, 8022a86 <__swsetup_r+0x6a>
 8022a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a78:	4299      	cmp	r1, r3
 8022a7a:	d002      	beq.n	8022a82 <__swsetup_r+0x66>
 8022a7c:	4630      	mov	r0, r6
 8022a7e:	f7ff f821 	bl	8021ac4 <_free_r>
 8022a82:	2300      	movs	r3, #0
 8022a84:	6363      	str	r3, [r4, #52]	; 0x34
 8022a86:	89a3      	ldrh	r3, [r4, #12]
 8022a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022a8c:	81a3      	strh	r3, [r4, #12]
 8022a8e:	2300      	movs	r3, #0
 8022a90:	6063      	str	r3, [r4, #4]
 8022a92:	6923      	ldr	r3, [r4, #16]
 8022a94:	6023      	str	r3, [r4, #0]
 8022a96:	89a3      	ldrh	r3, [r4, #12]
 8022a98:	f043 0308 	orr.w	r3, r3, #8
 8022a9c:	81a3      	strh	r3, [r4, #12]
 8022a9e:	6923      	ldr	r3, [r4, #16]
 8022aa0:	b94b      	cbnz	r3, 8022ab6 <__swsetup_r+0x9a>
 8022aa2:	89a3      	ldrh	r3, [r4, #12]
 8022aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022aac:	d003      	beq.n	8022ab6 <__swsetup_r+0x9a>
 8022aae:	4621      	mov	r1, r4
 8022ab0:	4630      	mov	r0, r6
 8022ab2:	f000 fa35 	bl	8022f20 <__smakebuf_r>
 8022ab6:	89a2      	ldrh	r2, [r4, #12]
 8022ab8:	f012 0301 	ands.w	r3, r2, #1
 8022abc:	d00c      	beq.n	8022ad8 <__swsetup_r+0xbc>
 8022abe:	2300      	movs	r3, #0
 8022ac0:	60a3      	str	r3, [r4, #8]
 8022ac2:	6963      	ldr	r3, [r4, #20]
 8022ac4:	425b      	negs	r3, r3
 8022ac6:	61a3      	str	r3, [r4, #24]
 8022ac8:	6923      	ldr	r3, [r4, #16]
 8022aca:	b953      	cbnz	r3, 8022ae2 <__swsetup_r+0xc6>
 8022acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022ad4:	d1ba      	bne.n	8022a4c <__swsetup_r+0x30>
 8022ad6:	bd70      	pop	{r4, r5, r6, pc}
 8022ad8:	0792      	lsls	r2, r2, #30
 8022ada:	bf58      	it	pl
 8022adc:	6963      	ldrpl	r3, [r4, #20]
 8022ade:	60a3      	str	r3, [r4, #8]
 8022ae0:	e7f2      	b.n	8022ac8 <__swsetup_r+0xac>
 8022ae2:	2000      	movs	r0, #0
 8022ae4:	e7f7      	b.n	8022ad6 <__swsetup_r+0xba>
 8022ae6:	bf00      	nop
 8022ae8:	200000f4 	.word	0x200000f4
 8022aec:	08026c84 	.word	0x08026c84
 8022af0:	08026ca4 	.word	0x08026ca4
 8022af4:	08026c64 	.word	0x08026c64

08022af8 <abort>:
 8022af8:	b508      	push	{r3, lr}
 8022afa:	2006      	movs	r0, #6
 8022afc:	f000 fc54 	bl	80233a8 <raise>
 8022b00:	2001      	movs	r0, #1
 8022b02:	f7de fec3 	bl	800188c <_exit>

08022b06 <div>:
 8022b06:	2900      	cmp	r1, #0
 8022b08:	b510      	push	{r4, lr}
 8022b0a:	fb91 f4f2 	sdiv	r4, r1, r2
 8022b0e:	fb02 1314 	mls	r3, r2, r4, r1
 8022b12:	db06      	blt.n	8022b22 <div+0x1c>
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	da01      	bge.n	8022b1c <div+0x16>
 8022b18:	3401      	adds	r4, #1
 8022b1a:	1a9b      	subs	r3, r3, r2
 8022b1c:	e9c0 4300 	strd	r4, r3, [r0]
 8022b20:	bd10      	pop	{r4, pc}
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	bfc4      	itt	gt
 8022b26:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8022b2a:	189b      	addgt	r3, r3, r2
 8022b2c:	e7f6      	b.n	8022b1c <div+0x16>
	...

08022b30 <__sflush_r>:
 8022b30:	898a      	ldrh	r2, [r1, #12]
 8022b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b36:	4605      	mov	r5, r0
 8022b38:	0710      	lsls	r0, r2, #28
 8022b3a:	460c      	mov	r4, r1
 8022b3c:	d458      	bmi.n	8022bf0 <__sflush_r+0xc0>
 8022b3e:	684b      	ldr	r3, [r1, #4]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	dc05      	bgt.n	8022b50 <__sflush_r+0x20>
 8022b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	dc02      	bgt.n	8022b50 <__sflush_r+0x20>
 8022b4a:	2000      	movs	r0, #0
 8022b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b52:	2e00      	cmp	r6, #0
 8022b54:	d0f9      	beq.n	8022b4a <__sflush_r+0x1a>
 8022b56:	2300      	movs	r3, #0
 8022b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022b5c:	682f      	ldr	r7, [r5, #0]
 8022b5e:	6a21      	ldr	r1, [r4, #32]
 8022b60:	602b      	str	r3, [r5, #0]
 8022b62:	d032      	beq.n	8022bca <__sflush_r+0x9a>
 8022b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022b66:	89a3      	ldrh	r3, [r4, #12]
 8022b68:	075a      	lsls	r2, r3, #29
 8022b6a:	d505      	bpl.n	8022b78 <__sflush_r+0x48>
 8022b6c:	6863      	ldr	r3, [r4, #4]
 8022b6e:	1ac0      	subs	r0, r0, r3
 8022b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022b72:	b10b      	cbz	r3, 8022b78 <__sflush_r+0x48>
 8022b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022b76:	1ac0      	subs	r0, r0, r3
 8022b78:	2300      	movs	r3, #0
 8022b7a:	4602      	mov	r2, r0
 8022b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b7e:	6a21      	ldr	r1, [r4, #32]
 8022b80:	4628      	mov	r0, r5
 8022b82:	47b0      	blx	r6
 8022b84:	1c43      	adds	r3, r0, #1
 8022b86:	89a3      	ldrh	r3, [r4, #12]
 8022b88:	d106      	bne.n	8022b98 <__sflush_r+0x68>
 8022b8a:	6829      	ldr	r1, [r5, #0]
 8022b8c:	291d      	cmp	r1, #29
 8022b8e:	d848      	bhi.n	8022c22 <__sflush_r+0xf2>
 8022b90:	4a29      	ldr	r2, [pc, #164]	; (8022c38 <__sflush_r+0x108>)
 8022b92:	40ca      	lsrs	r2, r1
 8022b94:	07d6      	lsls	r6, r2, #31
 8022b96:	d544      	bpl.n	8022c22 <__sflush_r+0xf2>
 8022b98:	2200      	movs	r2, #0
 8022b9a:	6062      	str	r2, [r4, #4]
 8022b9c:	04d9      	lsls	r1, r3, #19
 8022b9e:	6922      	ldr	r2, [r4, #16]
 8022ba0:	6022      	str	r2, [r4, #0]
 8022ba2:	d504      	bpl.n	8022bae <__sflush_r+0x7e>
 8022ba4:	1c42      	adds	r2, r0, #1
 8022ba6:	d101      	bne.n	8022bac <__sflush_r+0x7c>
 8022ba8:	682b      	ldr	r3, [r5, #0]
 8022baa:	b903      	cbnz	r3, 8022bae <__sflush_r+0x7e>
 8022bac:	6560      	str	r0, [r4, #84]	; 0x54
 8022bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022bb0:	602f      	str	r7, [r5, #0]
 8022bb2:	2900      	cmp	r1, #0
 8022bb4:	d0c9      	beq.n	8022b4a <__sflush_r+0x1a>
 8022bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022bba:	4299      	cmp	r1, r3
 8022bbc:	d002      	beq.n	8022bc4 <__sflush_r+0x94>
 8022bbe:	4628      	mov	r0, r5
 8022bc0:	f7fe ff80 	bl	8021ac4 <_free_r>
 8022bc4:	2000      	movs	r0, #0
 8022bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8022bc8:	e7c0      	b.n	8022b4c <__sflush_r+0x1c>
 8022bca:	2301      	movs	r3, #1
 8022bcc:	4628      	mov	r0, r5
 8022bce:	47b0      	blx	r6
 8022bd0:	1c41      	adds	r1, r0, #1
 8022bd2:	d1c8      	bne.n	8022b66 <__sflush_r+0x36>
 8022bd4:	682b      	ldr	r3, [r5, #0]
 8022bd6:	2b00      	cmp	r3, #0
 8022bd8:	d0c5      	beq.n	8022b66 <__sflush_r+0x36>
 8022bda:	2b1d      	cmp	r3, #29
 8022bdc:	d001      	beq.n	8022be2 <__sflush_r+0xb2>
 8022bde:	2b16      	cmp	r3, #22
 8022be0:	d101      	bne.n	8022be6 <__sflush_r+0xb6>
 8022be2:	602f      	str	r7, [r5, #0]
 8022be4:	e7b1      	b.n	8022b4a <__sflush_r+0x1a>
 8022be6:	89a3      	ldrh	r3, [r4, #12]
 8022be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022bec:	81a3      	strh	r3, [r4, #12]
 8022bee:	e7ad      	b.n	8022b4c <__sflush_r+0x1c>
 8022bf0:	690f      	ldr	r7, [r1, #16]
 8022bf2:	2f00      	cmp	r7, #0
 8022bf4:	d0a9      	beq.n	8022b4a <__sflush_r+0x1a>
 8022bf6:	0793      	lsls	r3, r2, #30
 8022bf8:	680e      	ldr	r6, [r1, #0]
 8022bfa:	bf08      	it	eq
 8022bfc:	694b      	ldreq	r3, [r1, #20]
 8022bfe:	600f      	str	r7, [r1, #0]
 8022c00:	bf18      	it	ne
 8022c02:	2300      	movne	r3, #0
 8022c04:	eba6 0807 	sub.w	r8, r6, r7
 8022c08:	608b      	str	r3, [r1, #8]
 8022c0a:	f1b8 0f00 	cmp.w	r8, #0
 8022c0e:	dd9c      	ble.n	8022b4a <__sflush_r+0x1a>
 8022c10:	4643      	mov	r3, r8
 8022c12:	463a      	mov	r2, r7
 8022c14:	6a21      	ldr	r1, [r4, #32]
 8022c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022c18:	4628      	mov	r0, r5
 8022c1a:	47b0      	blx	r6
 8022c1c:	2800      	cmp	r0, #0
 8022c1e:	dc06      	bgt.n	8022c2e <__sflush_r+0xfe>
 8022c20:	89a3      	ldrh	r3, [r4, #12]
 8022c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c26:	81a3      	strh	r3, [r4, #12]
 8022c28:	f04f 30ff 	mov.w	r0, #4294967295
 8022c2c:	e78e      	b.n	8022b4c <__sflush_r+0x1c>
 8022c2e:	4407      	add	r7, r0
 8022c30:	eba8 0800 	sub.w	r8, r8, r0
 8022c34:	e7e9      	b.n	8022c0a <__sflush_r+0xda>
 8022c36:	bf00      	nop
 8022c38:	20400001 	.word	0x20400001

08022c3c <_fflush_r>:
 8022c3c:	b538      	push	{r3, r4, r5, lr}
 8022c3e:	690b      	ldr	r3, [r1, #16]
 8022c40:	4605      	mov	r5, r0
 8022c42:	460c      	mov	r4, r1
 8022c44:	b1db      	cbz	r3, 8022c7e <_fflush_r+0x42>
 8022c46:	b118      	cbz	r0, 8022c50 <_fflush_r+0x14>
 8022c48:	6983      	ldr	r3, [r0, #24]
 8022c4a:	b90b      	cbnz	r3, 8022c50 <_fflush_r+0x14>
 8022c4c:	f000 f860 	bl	8022d10 <__sinit>
 8022c50:	4b0c      	ldr	r3, [pc, #48]	; (8022c84 <_fflush_r+0x48>)
 8022c52:	429c      	cmp	r4, r3
 8022c54:	d109      	bne.n	8022c6a <_fflush_r+0x2e>
 8022c56:	686c      	ldr	r4, [r5, #4]
 8022c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c5c:	b17b      	cbz	r3, 8022c7e <_fflush_r+0x42>
 8022c5e:	4621      	mov	r1, r4
 8022c60:	4628      	mov	r0, r5
 8022c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c66:	f7ff bf63 	b.w	8022b30 <__sflush_r>
 8022c6a:	4b07      	ldr	r3, [pc, #28]	; (8022c88 <_fflush_r+0x4c>)
 8022c6c:	429c      	cmp	r4, r3
 8022c6e:	d101      	bne.n	8022c74 <_fflush_r+0x38>
 8022c70:	68ac      	ldr	r4, [r5, #8]
 8022c72:	e7f1      	b.n	8022c58 <_fflush_r+0x1c>
 8022c74:	4b05      	ldr	r3, [pc, #20]	; (8022c8c <_fflush_r+0x50>)
 8022c76:	429c      	cmp	r4, r3
 8022c78:	bf08      	it	eq
 8022c7a:	68ec      	ldreq	r4, [r5, #12]
 8022c7c:	e7ec      	b.n	8022c58 <_fflush_r+0x1c>
 8022c7e:	2000      	movs	r0, #0
 8022c80:	bd38      	pop	{r3, r4, r5, pc}
 8022c82:	bf00      	nop
 8022c84:	08026c84 	.word	0x08026c84
 8022c88:	08026ca4 	.word	0x08026ca4
 8022c8c:	08026c64 	.word	0x08026c64

08022c90 <std>:
 8022c90:	2300      	movs	r3, #0
 8022c92:	b510      	push	{r4, lr}
 8022c94:	4604      	mov	r4, r0
 8022c96:	e9c0 3300 	strd	r3, r3, [r0]
 8022c9a:	6083      	str	r3, [r0, #8]
 8022c9c:	8181      	strh	r1, [r0, #12]
 8022c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8022ca0:	81c2      	strh	r2, [r0, #14]
 8022ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022ca6:	6183      	str	r3, [r0, #24]
 8022ca8:	4619      	mov	r1, r3
 8022caa:	2208      	movs	r2, #8
 8022cac:	305c      	adds	r0, #92	; 0x5c
 8022cae:	f7fe fc6c 	bl	802158a <memset>
 8022cb2:	4b05      	ldr	r3, [pc, #20]	; (8022cc8 <std+0x38>)
 8022cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8022cb6:	4b05      	ldr	r3, [pc, #20]	; (8022ccc <std+0x3c>)
 8022cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8022cba:	4b05      	ldr	r3, [pc, #20]	; (8022cd0 <std+0x40>)
 8022cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022cbe:	4b05      	ldr	r3, [pc, #20]	; (8022cd4 <std+0x44>)
 8022cc0:	6224      	str	r4, [r4, #32]
 8022cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8022cc4:	bd10      	pop	{r4, pc}
 8022cc6:	bf00      	nop
 8022cc8:	08023435 	.word	0x08023435
 8022ccc:	0802345b 	.word	0x0802345b
 8022cd0:	08023493 	.word	0x08023493
 8022cd4:	080234b7 	.word	0x080234b7

08022cd8 <_cleanup_r>:
 8022cd8:	4901      	ldr	r1, [pc, #4]	; (8022ce0 <_cleanup_r+0x8>)
 8022cda:	f000 b885 	b.w	8022de8 <_fwalk_reent>
 8022cde:	bf00      	nop
 8022ce0:	08022c3d 	.word	0x08022c3d

08022ce4 <__sfmoreglue>:
 8022ce4:	b570      	push	{r4, r5, r6, lr}
 8022ce6:	1e4a      	subs	r2, r1, #1
 8022ce8:	2568      	movs	r5, #104	; 0x68
 8022cea:	4355      	muls	r5, r2
 8022cec:	460e      	mov	r6, r1
 8022cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022cf2:	f7fe ff35 	bl	8021b60 <_malloc_r>
 8022cf6:	4604      	mov	r4, r0
 8022cf8:	b140      	cbz	r0, 8022d0c <__sfmoreglue+0x28>
 8022cfa:	2100      	movs	r1, #0
 8022cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8022d00:	300c      	adds	r0, #12
 8022d02:	60a0      	str	r0, [r4, #8]
 8022d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022d08:	f7fe fc3f 	bl	802158a <memset>
 8022d0c:	4620      	mov	r0, r4
 8022d0e:	bd70      	pop	{r4, r5, r6, pc}

08022d10 <__sinit>:
 8022d10:	6983      	ldr	r3, [r0, #24]
 8022d12:	b510      	push	{r4, lr}
 8022d14:	4604      	mov	r4, r0
 8022d16:	bb33      	cbnz	r3, 8022d66 <__sinit+0x56>
 8022d18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8022d1c:	6503      	str	r3, [r0, #80]	; 0x50
 8022d1e:	4b12      	ldr	r3, [pc, #72]	; (8022d68 <__sinit+0x58>)
 8022d20:	4a12      	ldr	r2, [pc, #72]	; (8022d6c <__sinit+0x5c>)
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	6282      	str	r2, [r0, #40]	; 0x28
 8022d26:	4298      	cmp	r0, r3
 8022d28:	bf04      	itt	eq
 8022d2a:	2301      	moveq	r3, #1
 8022d2c:	6183      	streq	r3, [r0, #24]
 8022d2e:	f000 f81f 	bl	8022d70 <__sfp>
 8022d32:	6060      	str	r0, [r4, #4]
 8022d34:	4620      	mov	r0, r4
 8022d36:	f000 f81b 	bl	8022d70 <__sfp>
 8022d3a:	60a0      	str	r0, [r4, #8]
 8022d3c:	4620      	mov	r0, r4
 8022d3e:	f000 f817 	bl	8022d70 <__sfp>
 8022d42:	2200      	movs	r2, #0
 8022d44:	60e0      	str	r0, [r4, #12]
 8022d46:	2104      	movs	r1, #4
 8022d48:	6860      	ldr	r0, [r4, #4]
 8022d4a:	f7ff ffa1 	bl	8022c90 <std>
 8022d4e:	2201      	movs	r2, #1
 8022d50:	2109      	movs	r1, #9
 8022d52:	68a0      	ldr	r0, [r4, #8]
 8022d54:	f7ff ff9c 	bl	8022c90 <std>
 8022d58:	2202      	movs	r2, #2
 8022d5a:	2112      	movs	r1, #18
 8022d5c:	68e0      	ldr	r0, [r4, #12]
 8022d5e:	f7ff ff97 	bl	8022c90 <std>
 8022d62:	2301      	movs	r3, #1
 8022d64:	61a3      	str	r3, [r4, #24]
 8022d66:	bd10      	pop	{r4, pc}
 8022d68:	08026b90 	.word	0x08026b90
 8022d6c:	08022cd9 	.word	0x08022cd9

08022d70 <__sfp>:
 8022d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d72:	4b1b      	ldr	r3, [pc, #108]	; (8022de0 <__sfp+0x70>)
 8022d74:	681e      	ldr	r6, [r3, #0]
 8022d76:	69b3      	ldr	r3, [r6, #24]
 8022d78:	4607      	mov	r7, r0
 8022d7a:	b913      	cbnz	r3, 8022d82 <__sfp+0x12>
 8022d7c:	4630      	mov	r0, r6
 8022d7e:	f7ff ffc7 	bl	8022d10 <__sinit>
 8022d82:	3648      	adds	r6, #72	; 0x48
 8022d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022d88:	3b01      	subs	r3, #1
 8022d8a:	d503      	bpl.n	8022d94 <__sfp+0x24>
 8022d8c:	6833      	ldr	r3, [r6, #0]
 8022d8e:	b133      	cbz	r3, 8022d9e <__sfp+0x2e>
 8022d90:	6836      	ldr	r6, [r6, #0]
 8022d92:	e7f7      	b.n	8022d84 <__sfp+0x14>
 8022d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022d98:	b16d      	cbz	r5, 8022db6 <__sfp+0x46>
 8022d9a:	3468      	adds	r4, #104	; 0x68
 8022d9c:	e7f4      	b.n	8022d88 <__sfp+0x18>
 8022d9e:	2104      	movs	r1, #4
 8022da0:	4638      	mov	r0, r7
 8022da2:	f7ff ff9f 	bl	8022ce4 <__sfmoreglue>
 8022da6:	6030      	str	r0, [r6, #0]
 8022da8:	2800      	cmp	r0, #0
 8022daa:	d1f1      	bne.n	8022d90 <__sfp+0x20>
 8022dac:	230c      	movs	r3, #12
 8022dae:	603b      	str	r3, [r7, #0]
 8022db0:	4604      	mov	r4, r0
 8022db2:	4620      	mov	r0, r4
 8022db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022db6:	4b0b      	ldr	r3, [pc, #44]	; (8022de4 <__sfp+0x74>)
 8022db8:	6665      	str	r5, [r4, #100]	; 0x64
 8022dba:	e9c4 5500 	strd	r5, r5, [r4]
 8022dbe:	60a5      	str	r5, [r4, #8]
 8022dc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8022dc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8022dc8:	2208      	movs	r2, #8
 8022dca:	4629      	mov	r1, r5
 8022dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022dd0:	f7fe fbdb 	bl	802158a <memset>
 8022dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022ddc:	e7e9      	b.n	8022db2 <__sfp+0x42>
 8022dde:	bf00      	nop
 8022de0:	08026b90 	.word	0x08026b90
 8022de4:	ffff0001 	.word	0xffff0001

08022de8 <_fwalk_reent>:
 8022de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022dec:	4680      	mov	r8, r0
 8022dee:	4689      	mov	r9, r1
 8022df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022df4:	2600      	movs	r6, #0
 8022df6:	b914      	cbnz	r4, 8022dfe <_fwalk_reent+0x16>
 8022df8:	4630      	mov	r0, r6
 8022dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022dfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8022e02:	3f01      	subs	r7, #1
 8022e04:	d501      	bpl.n	8022e0a <_fwalk_reent+0x22>
 8022e06:	6824      	ldr	r4, [r4, #0]
 8022e08:	e7f5      	b.n	8022df6 <_fwalk_reent+0xe>
 8022e0a:	89ab      	ldrh	r3, [r5, #12]
 8022e0c:	2b01      	cmp	r3, #1
 8022e0e:	d907      	bls.n	8022e20 <_fwalk_reent+0x38>
 8022e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022e14:	3301      	adds	r3, #1
 8022e16:	d003      	beq.n	8022e20 <_fwalk_reent+0x38>
 8022e18:	4629      	mov	r1, r5
 8022e1a:	4640      	mov	r0, r8
 8022e1c:	47c8      	blx	r9
 8022e1e:	4306      	orrs	r6, r0
 8022e20:	3568      	adds	r5, #104	; 0x68
 8022e22:	e7ee      	b.n	8022e02 <_fwalk_reent+0x1a>

08022e24 <_findenv_r>:
 8022e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e28:	4607      	mov	r7, r0
 8022e2a:	468b      	mov	fp, r1
 8022e2c:	4690      	mov	r8, r2
 8022e2e:	f000 fc33 	bl	8023698 <__env_lock>
 8022e32:	4b19      	ldr	r3, [pc, #100]	; (8022e98 <_findenv_r+0x74>)
 8022e34:	681d      	ldr	r5, [r3, #0]
 8022e36:	469a      	mov	sl, r3
 8022e38:	b13d      	cbz	r5, 8022e4a <_findenv_r+0x26>
 8022e3a:	465c      	mov	r4, fp
 8022e3c:	4623      	mov	r3, r4
 8022e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022e42:	b32a      	cbz	r2, 8022e90 <_findenv_r+0x6c>
 8022e44:	2a3d      	cmp	r2, #61	; 0x3d
 8022e46:	461c      	mov	r4, r3
 8022e48:	d1f8      	bne.n	8022e3c <_findenv_r+0x18>
 8022e4a:	4638      	mov	r0, r7
 8022e4c:	f000 fc25 	bl	802369a <__env_unlock>
 8022e50:	2000      	movs	r0, #0
 8022e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e56:	464d      	mov	r5, r9
 8022e58:	46a9      	mov	r9, r5
 8022e5a:	f859 0b04 	ldr.w	r0, [r9], #4
 8022e5e:	2800      	cmp	r0, #0
 8022e60:	d0f3      	beq.n	8022e4a <_findenv_r+0x26>
 8022e62:	4622      	mov	r2, r4
 8022e64:	4659      	mov	r1, fp
 8022e66:	f000 fb32 	bl	80234ce <strncmp>
 8022e6a:	2800      	cmp	r0, #0
 8022e6c:	d1f3      	bne.n	8022e56 <_findenv_r+0x32>
 8022e6e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8022e72:	191e      	adds	r6, r3, r4
 8022e74:	5d1b      	ldrb	r3, [r3, r4]
 8022e76:	2b3d      	cmp	r3, #61	; 0x3d
 8022e78:	d1ed      	bne.n	8022e56 <_findenv_r+0x32>
 8022e7a:	f8da 3000 	ldr.w	r3, [sl]
 8022e7e:	1aed      	subs	r5, r5, r3
 8022e80:	10ad      	asrs	r5, r5, #2
 8022e82:	4638      	mov	r0, r7
 8022e84:	f8c8 5000 	str.w	r5, [r8]
 8022e88:	f000 fc07 	bl	802369a <__env_unlock>
 8022e8c:	1c70      	adds	r0, r6, #1
 8022e8e:	e7e0      	b.n	8022e52 <_findenv_r+0x2e>
 8022e90:	eba4 040b 	sub.w	r4, r4, fp
 8022e94:	e7e0      	b.n	8022e58 <_findenv_r+0x34>
 8022e96:	bf00      	nop
 8022e98:	20000064 	.word	0x20000064

08022e9c <_getenv_r>:
 8022e9c:	b507      	push	{r0, r1, r2, lr}
 8022e9e:	aa01      	add	r2, sp, #4
 8022ea0:	f7ff ffc0 	bl	8022e24 <_findenv_r>
 8022ea4:	b003      	add	sp, #12
 8022ea6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022eac <__gettzinfo>:
 8022eac:	4800      	ldr	r0, [pc, #0]	; (8022eb0 <__gettzinfo+0x4>)
 8022eae:	4770      	bx	lr
 8022eb0:	20000160 	.word	0x20000160

08022eb4 <__locale_ctype_ptr_l>:
 8022eb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8022eb8:	4770      	bx	lr
	...

08022ebc <__locale_ctype_ptr>:
 8022ebc:	4b04      	ldr	r3, [pc, #16]	; (8022ed0 <__locale_ctype_ptr+0x14>)
 8022ebe:	4a05      	ldr	r2, [pc, #20]	; (8022ed4 <__locale_ctype_ptr+0x18>)
 8022ec0:	681b      	ldr	r3, [r3, #0]
 8022ec2:	6a1b      	ldr	r3, [r3, #32]
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	bf08      	it	eq
 8022ec8:	4613      	moveq	r3, r2
 8022eca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8022ece:	4770      	bx	lr
 8022ed0:	200000f4 	.word	0x200000f4
 8022ed4:	200001b8 	.word	0x200001b8

08022ed8 <__swhatbuf_r>:
 8022ed8:	b570      	push	{r4, r5, r6, lr}
 8022eda:	460e      	mov	r6, r1
 8022edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ee0:	2900      	cmp	r1, #0
 8022ee2:	b096      	sub	sp, #88	; 0x58
 8022ee4:	4614      	mov	r4, r2
 8022ee6:	461d      	mov	r5, r3
 8022ee8:	da07      	bge.n	8022efa <__swhatbuf_r+0x22>
 8022eea:	2300      	movs	r3, #0
 8022eec:	602b      	str	r3, [r5, #0]
 8022eee:	89b3      	ldrh	r3, [r6, #12]
 8022ef0:	061a      	lsls	r2, r3, #24
 8022ef2:	d410      	bmi.n	8022f16 <__swhatbuf_r+0x3e>
 8022ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ef8:	e00e      	b.n	8022f18 <__swhatbuf_r+0x40>
 8022efa:	466a      	mov	r2, sp
 8022efc:	f000 fbce 	bl	802369c <_fstat_r>
 8022f00:	2800      	cmp	r0, #0
 8022f02:	dbf2      	blt.n	8022eea <__swhatbuf_r+0x12>
 8022f04:	9a01      	ldr	r2, [sp, #4]
 8022f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022f0e:	425a      	negs	r2, r3
 8022f10:	415a      	adcs	r2, r3
 8022f12:	602a      	str	r2, [r5, #0]
 8022f14:	e7ee      	b.n	8022ef4 <__swhatbuf_r+0x1c>
 8022f16:	2340      	movs	r3, #64	; 0x40
 8022f18:	2000      	movs	r0, #0
 8022f1a:	6023      	str	r3, [r4, #0]
 8022f1c:	b016      	add	sp, #88	; 0x58
 8022f1e:	bd70      	pop	{r4, r5, r6, pc}

08022f20 <__smakebuf_r>:
 8022f20:	898b      	ldrh	r3, [r1, #12]
 8022f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022f24:	079d      	lsls	r5, r3, #30
 8022f26:	4606      	mov	r6, r0
 8022f28:	460c      	mov	r4, r1
 8022f2a:	d507      	bpl.n	8022f3c <__smakebuf_r+0x1c>
 8022f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022f30:	6023      	str	r3, [r4, #0]
 8022f32:	6123      	str	r3, [r4, #16]
 8022f34:	2301      	movs	r3, #1
 8022f36:	6163      	str	r3, [r4, #20]
 8022f38:	b002      	add	sp, #8
 8022f3a:	bd70      	pop	{r4, r5, r6, pc}
 8022f3c:	ab01      	add	r3, sp, #4
 8022f3e:	466a      	mov	r2, sp
 8022f40:	f7ff ffca 	bl	8022ed8 <__swhatbuf_r>
 8022f44:	9900      	ldr	r1, [sp, #0]
 8022f46:	4605      	mov	r5, r0
 8022f48:	4630      	mov	r0, r6
 8022f4a:	f7fe fe09 	bl	8021b60 <_malloc_r>
 8022f4e:	b948      	cbnz	r0, 8022f64 <__smakebuf_r+0x44>
 8022f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f54:	059a      	lsls	r2, r3, #22
 8022f56:	d4ef      	bmi.n	8022f38 <__smakebuf_r+0x18>
 8022f58:	f023 0303 	bic.w	r3, r3, #3
 8022f5c:	f043 0302 	orr.w	r3, r3, #2
 8022f60:	81a3      	strh	r3, [r4, #12]
 8022f62:	e7e3      	b.n	8022f2c <__smakebuf_r+0xc>
 8022f64:	4b0d      	ldr	r3, [pc, #52]	; (8022f9c <__smakebuf_r+0x7c>)
 8022f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8022f68:	89a3      	ldrh	r3, [r4, #12]
 8022f6a:	6020      	str	r0, [r4, #0]
 8022f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022f70:	81a3      	strh	r3, [r4, #12]
 8022f72:	9b00      	ldr	r3, [sp, #0]
 8022f74:	6163      	str	r3, [r4, #20]
 8022f76:	9b01      	ldr	r3, [sp, #4]
 8022f78:	6120      	str	r0, [r4, #16]
 8022f7a:	b15b      	cbz	r3, 8022f94 <__smakebuf_r+0x74>
 8022f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f80:	4630      	mov	r0, r6
 8022f82:	f000 fb9d 	bl	80236c0 <_isatty_r>
 8022f86:	b128      	cbz	r0, 8022f94 <__smakebuf_r+0x74>
 8022f88:	89a3      	ldrh	r3, [r4, #12]
 8022f8a:	f023 0303 	bic.w	r3, r3, #3
 8022f8e:	f043 0301 	orr.w	r3, r3, #1
 8022f92:	81a3      	strh	r3, [r4, #12]
 8022f94:	89a3      	ldrh	r3, [r4, #12]
 8022f96:	431d      	orrs	r5, r3
 8022f98:	81a5      	strh	r5, [r4, #12]
 8022f9a:	e7cd      	b.n	8022f38 <__smakebuf_r+0x18>
 8022f9c:	08022cd9 	.word	0x08022cd9

08022fa0 <__ascii_mbtowc>:
 8022fa0:	b082      	sub	sp, #8
 8022fa2:	b901      	cbnz	r1, 8022fa6 <__ascii_mbtowc+0x6>
 8022fa4:	a901      	add	r1, sp, #4
 8022fa6:	b142      	cbz	r2, 8022fba <__ascii_mbtowc+0x1a>
 8022fa8:	b14b      	cbz	r3, 8022fbe <__ascii_mbtowc+0x1e>
 8022faa:	7813      	ldrb	r3, [r2, #0]
 8022fac:	600b      	str	r3, [r1, #0]
 8022fae:	7812      	ldrb	r2, [r2, #0]
 8022fb0:	1c10      	adds	r0, r2, #0
 8022fb2:	bf18      	it	ne
 8022fb4:	2001      	movne	r0, #1
 8022fb6:	b002      	add	sp, #8
 8022fb8:	4770      	bx	lr
 8022fba:	4610      	mov	r0, r2
 8022fbc:	e7fb      	b.n	8022fb6 <__ascii_mbtowc+0x16>
 8022fbe:	f06f 0001 	mvn.w	r0, #1
 8022fc2:	e7f8      	b.n	8022fb6 <__ascii_mbtowc+0x16>

08022fc4 <memmove>:
 8022fc4:	4288      	cmp	r0, r1
 8022fc6:	b510      	push	{r4, lr}
 8022fc8:	eb01 0302 	add.w	r3, r1, r2
 8022fcc:	d807      	bhi.n	8022fde <memmove+0x1a>
 8022fce:	1e42      	subs	r2, r0, #1
 8022fd0:	4299      	cmp	r1, r3
 8022fd2:	d00a      	beq.n	8022fea <memmove+0x26>
 8022fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022fd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022fdc:	e7f8      	b.n	8022fd0 <memmove+0xc>
 8022fde:	4283      	cmp	r3, r0
 8022fe0:	d9f5      	bls.n	8022fce <memmove+0xa>
 8022fe2:	1881      	adds	r1, r0, r2
 8022fe4:	1ad2      	subs	r2, r2, r3
 8022fe6:	42d3      	cmn	r3, r2
 8022fe8:	d100      	bne.n	8022fec <memmove+0x28>
 8022fea:	bd10      	pop	{r4, pc}
 8022fec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022ff0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022ff4:	e7f7      	b.n	8022fe6 <memmove+0x22>

08022ff6 <__malloc_lock>:
 8022ff6:	4770      	bx	lr

08022ff8 <__malloc_unlock>:
 8022ff8:	4770      	bx	lr

08022ffa <_realloc_r>:
 8022ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ffc:	4607      	mov	r7, r0
 8022ffe:	4614      	mov	r4, r2
 8023000:	460e      	mov	r6, r1
 8023002:	b921      	cbnz	r1, 802300e <_realloc_r+0x14>
 8023004:	4611      	mov	r1, r2
 8023006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802300a:	f7fe bda9 	b.w	8021b60 <_malloc_r>
 802300e:	b922      	cbnz	r2, 802301a <_realloc_r+0x20>
 8023010:	f7fe fd58 	bl	8021ac4 <_free_r>
 8023014:	4625      	mov	r5, r4
 8023016:	4628      	mov	r0, r5
 8023018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802301a:	f000 fb73 	bl	8023704 <_malloc_usable_size_r>
 802301e:	42a0      	cmp	r0, r4
 8023020:	d20f      	bcs.n	8023042 <_realloc_r+0x48>
 8023022:	4621      	mov	r1, r4
 8023024:	4638      	mov	r0, r7
 8023026:	f7fe fd9b 	bl	8021b60 <_malloc_r>
 802302a:	4605      	mov	r5, r0
 802302c:	2800      	cmp	r0, #0
 802302e:	d0f2      	beq.n	8023016 <_realloc_r+0x1c>
 8023030:	4631      	mov	r1, r6
 8023032:	4622      	mov	r2, r4
 8023034:	f7fe fa9e 	bl	8021574 <memcpy>
 8023038:	4631      	mov	r1, r6
 802303a:	4638      	mov	r0, r7
 802303c:	f7fe fd42 	bl	8021ac4 <_free_r>
 8023040:	e7e9      	b.n	8023016 <_realloc_r+0x1c>
 8023042:	4635      	mov	r5, r6
 8023044:	e7e7      	b.n	8023016 <_realloc_r+0x1c>

08023046 <__ssputs_r>:
 8023046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802304a:	688e      	ldr	r6, [r1, #8]
 802304c:	429e      	cmp	r6, r3
 802304e:	4682      	mov	sl, r0
 8023050:	460c      	mov	r4, r1
 8023052:	4690      	mov	r8, r2
 8023054:	4699      	mov	r9, r3
 8023056:	d837      	bhi.n	80230c8 <__ssputs_r+0x82>
 8023058:	898a      	ldrh	r2, [r1, #12]
 802305a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802305e:	d031      	beq.n	80230c4 <__ssputs_r+0x7e>
 8023060:	6825      	ldr	r5, [r4, #0]
 8023062:	6909      	ldr	r1, [r1, #16]
 8023064:	1a6f      	subs	r7, r5, r1
 8023066:	6965      	ldr	r5, [r4, #20]
 8023068:	2302      	movs	r3, #2
 802306a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802306e:	fb95 f5f3 	sdiv	r5, r5, r3
 8023072:	f109 0301 	add.w	r3, r9, #1
 8023076:	443b      	add	r3, r7
 8023078:	429d      	cmp	r5, r3
 802307a:	bf38      	it	cc
 802307c:	461d      	movcc	r5, r3
 802307e:	0553      	lsls	r3, r2, #21
 8023080:	d530      	bpl.n	80230e4 <__ssputs_r+0x9e>
 8023082:	4629      	mov	r1, r5
 8023084:	f7fe fd6c 	bl	8021b60 <_malloc_r>
 8023088:	4606      	mov	r6, r0
 802308a:	b950      	cbnz	r0, 80230a2 <__ssputs_r+0x5c>
 802308c:	230c      	movs	r3, #12
 802308e:	f8ca 3000 	str.w	r3, [sl]
 8023092:	89a3      	ldrh	r3, [r4, #12]
 8023094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023098:	81a3      	strh	r3, [r4, #12]
 802309a:	f04f 30ff 	mov.w	r0, #4294967295
 802309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230a2:	463a      	mov	r2, r7
 80230a4:	6921      	ldr	r1, [r4, #16]
 80230a6:	f7fe fa65 	bl	8021574 <memcpy>
 80230aa:	89a3      	ldrh	r3, [r4, #12]
 80230ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80230b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80230b4:	81a3      	strh	r3, [r4, #12]
 80230b6:	6126      	str	r6, [r4, #16]
 80230b8:	6165      	str	r5, [r4, #20]
 80230ba:	443e      	add	r6, r7
 80230bc:	1bed      	subs	r5, r5, r7
 80230be:	6026      	str	r6, [r4, #0]
 80230c0:	60a5      	str	r5, [r4, #8]
 80230c2:	464e      	mov	r6, r9
 80230c4:	454e      	cmp	r6, r9
 80230c6:	d900      	bls.n	80230ca <__ssputs_r+0x84>
 80230c8:	464e      	mov	r6, r9
 80230ca:	4632      	mov	r2, r6
 80230cc:	4641      	mov	r1, r8
 80230ce:	6820      	ldr	r0, [r4, #0]
 80230d0:	f7ff ff78 	bl	8022fc4 <memmove>
 80230d4:	68a3      	ldr	r3, [r4, #8]
 80230d6:	1b9b      	subs	r3, r3, r6
 80230d8:	60a3      	str	r3, [r4, #8]
 80230da:	6823      	ldr	r3, [r4, #0]
 80230dc:	441e      	add	r6, r3
 80230de:	6026      	str	r6, [r4, #0]
 80230e0:	2000      	movs	r0, #0
 80230e2:	e7dc      	b.n	802309e <__ssputs_r+0x58>
 80230e4:	462a      	mov	r2, r5
 80230e6:	f7ff ff88 	bl	8022ffa <_realloc_r>
 80230ea:	4606      	mov	r6, r0
 80230ec:	2800      	cmp	r0, #0
 80230ee:	d1e2      	bne.n	80230b6 <__ssputs_r+0x70>
 80230f0:	6921      	ldr	r1, [r4, #16]
 80230f2:	4650      	mov	r0, sl
 80230f4:	f7fe fce6 	bl	8021ac4 <_free_r>
 80230f8:	e7c8      	b.n	802308c <__ssputs_r+0x46>
	...

080230fc <_svfiprintf_r>:
 80230fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023100:	461d      	mov	r5, r3
 8023102:	898b      	ldrh	r3, [r1, #12]
 8023104:	061f      	lsls	r7, r3, #24
 8023106:	b09d      	sub	sp, #116	; 0x74
 8023108:	4680      	mov	r8, r0
 802310a:	460c      	mov	r4, r1
 802310c:	4616      	mov	r6, r2
 802310e:	d50f      	bpl.n	8023130 <_svfiprintf_r+0x34>
 8023110:	690b      	ldr	r3, [r1, #16]
 8023112:	b96b      	cbnz	r3, 8023130 <_svfiprintf_r+0x34>
 8023114:	2140      	movs	r1, #64	; 0x40
 8023116:	f7fe fd23 	bl	8021b60 <_malloc_r>
 802311a:	6020      	str	r0, [r4, #0]
 802311c:	6120      	str	r0, [r4, #16]
 802311e:	b928      	cbnz	r0, 802312c <_svfiprintf_r+0x30>
 8023120:	230c      	movs	r3, #12
 8023122:	f8c8 3000 	str.w	r3, [r8]
 8023126:	f04f 30ff 	mov.w	r0, #4294967295
 802312a:	e0c8      	b.n	80232be <_svfiprintf_r+0x1c2>
 802312c:	2340      	movs	r3, #64	; 0x40
 802312e:	6163      	str	r3, [r4, #20]
 8023130:	2300      	movs	r3, #0
 8023132:	9309      	str	r3, [sp, #36]	; 0x24
 8023134:	2320      	movs	r3, #32
 8023136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802313a:	2330      	movs	r3, #48	; 0x30
 802313c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023140:	9503      	str	r5, [sp, #12]
 8023142:	f04f 0b01 	mov.w	fp, #1
 8023146:	4637      	mov	r7, r6
 8023148:	463d      	mov	r5, r7
 802314a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802314e:	b10b      	cbz	r3, 8023154 <_svfiprintf_r+0x58>
 8023150:	2b25      	cmp	r3, #37	; 0x25
 8023152:	d13e      	bne.n	80231d2 <_svfiprintf_r+0xd6>
 8023154:	ebb7 0a06 	subs.w	sl, r7, r6
 8023158:	d00b      	beq.n	8023172 <_svfiprintf_r+0x76>
 802315a:	4653      	mov	r3, sl
 802315c:	4632      	mov	r2, r6
 802315e:	4621      	mov	r1, r4
 8023160:	4640      	mov	r0, r8
 8023162:	f7ff ff70 	bl	8023046 <__ssputs_r>
 8023166:	3001      	adds	r0, #1
 8023168:	f000 80a4 	beq.w	80232b4 <_svfiprintf_r+0x1b8>
 802316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802316e:	4453      	add	r3, sl
 8023170:	9309      	str	r3, [sp, #36]	; 0x24
 8023172:	783b      	ldrb	r3, [r7, #0]
 8023174:	2b00      	cmp	r3, #0
 8023176:	f000 809d 	beq.w	80232b4 <_svfiprintf_r+0x1b8>
 802317a:	2300      	movs	r3, #0
 802317c:	f04f 32ff 	mov.w	r2, #4294967295
 8023180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023184:	9304      	str	r3, [sp, #16]
 8023186:	9307      	str	r3, [sp, #28]
 8023188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802318c:	931a      	str	r3, [sp, #104]	; 0x68
 802318e:	462f      	mov	r7, r5
 8023190:	2205      	movs	r2, #5
 8023192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023196:	4850      	ldr	r0, [pc, #320]	; (80232d8 <_svfiprintf_r+0x1dc>)
 8023198:	f7dd f81a 	bl	80001d0 <memchr>
 802319c:	9b04      	ldr	r3, [sp, #16]
 802319e:	b9d0      	cbnz	r0, 80231d6 <_svfiprintf_r+0xda>
 80231a0:	06d9      	lsls	r1, r3, #27
 80231a2:	bf44      	itt	mi
 80231a4:	2220      	movmi	r2, #32
 80231a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80231aa:	071a      	lsls	r2, r3, #28
 80231ac:	bf44      	itt	mi
 80231ae:	222b      	movmi	r2, #43	; 0x2b
 80231b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80231b4:	782a      	ldrb	r2, [r5, #0]
 80231b6:	2a2a      	cmp	r2, #42	; 0x2a
 80231b8:	d015      	beq.n	80231e6 <_svfiprintf_r+0xea>
 80231ba:	9a07      	ldr	r2, [sp, #28]
 80231bc:	462f      	mov	r7, r5
 80231be:	2000      	movs	r0, #0
 80231c0:	250a      	movs	r5, #10
 80231c2:	4639      	mov	r1, r7
 80231c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80231c8:	3b30      	subs	r3, #48	; 0x30
 80231ca:	2b09      	cmp	r3, #9
 80231cc:	d94d      	bls.n	802326a <_svfiprintf_r+0x16e>
 80231ce:	b1b8      	cbz	r0, 8023200 <_svfiprintf_r+0x104>
 80231d0:	e00f      	b.n	80231f2 <_svfiprintf_r+0xf6>
 80231d2:	462f      	mov	r7, r5
 80231d4:	e7b8      	b.n	8023148 <_svfiprintf_r+0x4c>
 80231d6:	4a40      	ldr	r2, [pc, #256]	; (80232d8 <_svfiprintf_r+0x1dc>)
 80231d8:	1a80      	subs	r0, r0, r2
 80231da:	fa0b f000 	lsl.w	r0, fp, r0
 80231de:	4318      	orrs	r0, r3
 80231e0:	9004      	str	r0, [sp, #16]
 80231e2:	463d      	mov	r5, r7
 80231e4:	e7d3      	b.n	802318e <_svfiprintf_r+0x92>
 80231e6:	9a03      	ldr	r2, [sp, #12]
 80231e8:	1d11      	adds	r1, r2, #4
 80231ea:	6812      	ldr	r2, [r2, #0]
 80231ec:	9103      	str	r1, [sp, #12]
 80231ee:	2a00      	cmp	r2, #0
 80231f0:	db01      	blt.n	80231f6 <_svfiprintf_r+0xfa>
 80231f2:	9207      	str	r2, [sp, #28]
 80231f4:	e004      	b.n	8023200 <_svfiprintf_r+0x104>
 80231f6:	4252      	negs	r2, r2
 80231f8:	f043 0302 	orr.w	r3, r3, #2
 80231fc:	9207      	str	r2, [sp, #28]
 80231fe:	9304      	str	r3, [sp, #16]
 8023200:	783b      	ldrb	r3, [r7, #0]
 8023202:	2b2e      	cmp	r3, #46	; 0x2e
 8023204:	d10c      	bne.n	8023220 <_svfiprintf_r+0x124>
 8023206:	787b      	ldrb	r3, [r7, #1]
 8023208:	2b2a      	cmp	r3, #42	; 0x2a
 802320a:	d133      	bne.n	8023274 <_svfiprintf_r+0x178>
 802320c:	9b03      	ldr	r3, [sp, #12]
 802320e:	1d1a      	adds	r2, r3, #4
 8023210:	681b      	ldr	r3, [r3, #0]
 8023212:	9203      	str	r2, [sp, #12]
 8023214:	2b00      	cmp	r3, #0
 8023216:	bfb8      	it	lt
 8023218:	f04f 33ff 	movlt.w	r3, #4294967295
 802321c:	3702      	adds	r7, #2
 802321e:	9305      	str	r3, [sp, #20]
 8023220:	4d2e      	ldr	r5, [pc, #184]	; (80232dc <_svfiprintf_r+0x1e0>)
 8023222:	7839      	ldrb	r1, [r7, #0]
 8023224:	2203      	movs	r2, #3
 8023226:	4628      	mov	r0, r5
 8023228:	f7dc ffd2 	bl	80001d0 <memchr>
 802322c:	b138      	cbz	r0, 802323e <_svfiprintf_r+0x142>
 802322e:	2340      	movs	r3, #64	; 0x40
 8023230:	1b40      	subs	r0, r0, r5
 8023232:	fa03 f000 	lsl.w	r0, r3, r0
 8023236:	9b04      	ldr	r3, [sp, #16]
 8023238:	4303      	orrs	r3, r0
 802323a:	3701      	adds	r7, #1
 802323c:	9304      	str	r3, [sp, #16]
 802323e:	7839      	ldrb	r1, [r7, #0]
 8023240:	4827      	ldr	r0, [pc, #156]	; (80232e0 <_svfiprintf_r+0x1e4>)
 8023242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023246:	2206      	movs	r2, #6
 8023248:	1c7e      	adds	r6, r7, #1
 802324a:	f7dc ffc1 	bl	80001d0 <memchr>
 802324e:	2800      	cmp	r0, #0
 8023250:	d038      	beq.n	80232c4 <_svfiprintf_r+0x1c8>
 8023252:	4b24      	ldr	r3, [pc, #144]	; (80232e4 <_svfiprintf_r+0x1e8>)
 8023254:	bb13      	cbnz	r3, 802329c <_svfiprintf_r+0x1a0>
 8023256:	9b03      	ldr	r3, [sp, #12]
 8023258:	3307      	adds	r3, #7
 802325a:	f023 0307 	bic.w	r3, r3, #7
 802325e:	3308      	adds	r3, #8
 8023260:	9303      	str	r3, [sp, #12]
 8023262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023264:	444b      	add	r3, r9
 8023266:	9309      	str	r3, [sp, #36]	; 0x24
 8023268:	e76d      	b.n	8023146 <_svfiprintf_r+0x4a>
 802326a:	fb05 3202 	mla	r2, r5, r2, r3
 802326e:	2001      	movs	r0, #1
 8023270:	460f      	mov	r7, r1
 8023272:	e7a6      	b.n	80231c2 <_svfiprintf_r+0xc6>
 8023274:	2300      	movs	r3, #0
 8023276:	3701      	adds	r7, #1
 8023278:	9305      	str	r3, [sp, #20]
 802327a:	4619      	mov	r1, r3
 802327c:	250a      	movs	r5, #10
 802327e:	4638      	mov	r0, r7
 8023280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023284:	3a30      	subs	r2, #48	; 0x30
 8023286:	2a09      	cmp	r2, #9
 8023288:	d903      	bls.n	8023292 <_svfiprintf_r+0x196>
 802328a:	2b00      	cmp	r3, #0
 802328c:	d0c8      	beq.n	8023220 <_svfiprintf_r+0x124>
 802328e:	9105      	str	r1, [sp, #20]
 8023290:	e7c6      	b.n	8023220 <_svfiprintf_r+0x124>
 8023292:	fb05 2101 	mla	r1, r5, r1, r2
 8023296:	2301      	movs	r3, #1
 8023298:	4607      	mov	r7, r0
 802329a:	e7f0      	b.n	802327e <_svfiprintf_r+0x182>
 802329c:	ab03      	add	r3, sp, #12
 802329e:	9300      	str	r3, [sp, #0]
 80232a0:	4622      	mov	r2, r4
 80232a2:	4b11      	ldr	r3, [pc, #68]	; (80232e8 <_svfiprintf_r+0x1ec>)
 80232a4:	a904      	add	r1, sp, #16
 80232a6:	4640      	mov	r0, r8
 80232a8:	f3af 8000 	nop.w
 80232ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80232b0:	4681      	mov	r9, r0
 80232b2:	d1d6      	bne.n	8023262 <_svfiprintf_r+0x166>
 80232b4:	89a3      	ldrh	r3, [r4, #12]
 80232b6:	065b      	lsls	r3, r3, #25
 80232b8:	f53f af35 	bmi.w	8023126 <_svfiprintf_r+0x2a>
 80232bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232be:	b01d      	add	sp, #116	; 0x74
 80232c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232c4:	ab03      	add	r3, sp, #12
 80232c6:	9300      	str	r3, [sp, #0]
 80232c8:	4622      	mov	r2, r4
 80232ca:	4b07      	ldr	r3, [pc, #28]	; (80232e8 <_svfiprintf_r+0x1ec>)
 80232cc:	a904      	add	r1, sp, #16
 80232ce:	4640      	mov	r0, r8
 80232d0:	f7fe fe56 	bl	8021f80 <_printf_i>
 80232d4:	e7ea      	b.n	80232ac <_svfiprintf_r+0x1b0>
 80232d6:	bf00      	nop
 80232d8:	08026bf4 	.word	0x08026bf4
 80232dc:	08026bfa 	.word	0x08026bfa
 80232e0:	08026bfe 	.word	0x08026bfe
 80232e4:	00000000 	.word	0x00000000
 80232e8:	08023047 	.word	0x08023047

080232ec <_putc_r>:
 80232ec:	b570      	push	{r4, r5, r6, lr}
 80232ee:	460d      	mov	r5, r1
 80232f0:	4614      	mov	r4, r2
 80232f2:	4606      	mov	r6, r0
 80232f4:	b118      	cbz	r0, 80232fe <_putc_r+0x12>
 80232f6:	6983      	ldr	r3, [r0, #24]
 80232f8:	b90b      	cbnz	r3, 80232fe <_putc_r+0x12>
 80232fa:	f7ff fd09 	bl	8022d10 <__sinit>
 80232fe:	4b13      	ldr	r3, [pc, #76]	; (802334c <_putc_r+0x60>)
 8023300:	429c      	cmp	r4, r3
 8023302:	d112      	bne.n	802332a <_putc_r+0x3e>
 8023304:	6874      	ldr	r4, [r6, #4]
 8023306:	68a3      	ldr	r3, [r4, #8]
 8023308:	3b01      	subs	r3, #1
 802330a:	2b00      	cmp	r3, #0
 802330c:	60a3      	str	r3, [r4, #8]
 802330e:	da16      	bge.n	802333e <_putc_r+0x52>
 8023310:	69a2      	ldr	r2, [r4, #24]
 8023312:	4293      	cmp	r3, r2
 8023314:	db02      	blt.n	802331c <_putc_r+0x30>
 8023316:	b2eb      	uxtb	r3, r5
 8023318:	2b0a      	cmp	r3, #10
 802331a:	d110      	bne.n	802333e <_putc_r+0x52>
 802331c:	4622      	mov	r2, r4
 802331e:	4629      	mov	r1, r5
 8023320:	4630      	mov	r0, r6
 8023322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023326:	f7ff bb27 	b.w	8022978 <__swbuf_r>
 802332a:	4b09      	ldr	r3, [pc, #36]	; (8023350 <_putc_r+0x64>)
 802332c:	429c      	cmp	r4, r3
 802332e:	d101      	bne.n	8023334 <_putc_r+0x48>
 8023330:	68b4      	ldr	r4, [r6, #8]
 8023332:	e7e8      	b.n	8023306 <_putc_r+0x1a>
 8023334:	4b07      	ldr	r3, [pc, #28]	; (8023354 <_putc_r+0x68>)
 8023336:	429c      	cmp	r4, r3
 8023338:	bf08      	it	eq
 802333a:	68f4      	ldreq	r4, [r6, #12]
 802333c:	e7e3      	b.n	8023306 <_putc_r+0x1a>
 802333e:	6823      	ldr	r3, [r4, #0]
 8023340:	1c5a      	adds	r2, r3, #1
 8023342:	6022      	str	r2, [r4, #0]
 8023344:	701d      	strb	r5, [r3, #0]
 8023346:	b2e8      	uxtb	r0, r5
 8023348:	bd70      	pop	{r4, r5, r6, pc}
 802334a:	bf00      	nop
 802334c:	08026c84 	.word	0x08026c84
 8023350:	08026ca4 	.word	0x08026ca4
 8023354:	08026c64 	.word	0x08026c64

08023358 <_raise_r>:
 8023358:	291f      	cmp	r1, #31
 802335a:	b538      	push	{r3, r4, r5, lr}
 802335c:	4604      	mov	r4, r0
 802335e:	460d      	mov	r5, r1
 8023360:	d904      	bls.n	802336c <_raise_r+0x14>
 8023362:	2316      	movs	r3, #22
 8023364:	6003      	str	r3, [r0, #0]
 8023366:	f04f 30ff 	mov.w	r0, #4294967295
 802336a:	bd38      	pop	{r3, r4, r5, pc}
 802336c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802336e:	b112      	cbz	r2, 8023376 <_raise_r+0x1e>
 8023370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023374:	b94b      	cbnz	r3, 802338a <_raise_r+0x32>
 8023376:	4620      	mov	r0, r4
 8023378:	f000 f830 	bl	80233dc <_getpid_r>
 802337c:	462a      	mov	r2, r5
 802337e:	4601      	mov	r1, r0
 8023380:	4620      	mov	r0, r4
 8023382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023386:	f000 b817 	b.w	80233b8 <_kill_r>
 802338a:	2b01      	cmp	r3, #1
 802338c:	d00a      	beq.n	80233a4 <_raise_r+0x4c>
 802338e:	1c59      	adds	r1, r3, #1
 8023390:	d103      	bne.n	802339a <_raise_r+0x42>
 8023392:	2316      	movs	r3, #22
 8023394:	6003      	str	r3, [r0, #0]
 8023396:	2001      	movs	r0, #1
 8023398:	e7e7      	b.n	802336a <_raise_r+0x12>
 802339a:	2400      	movs	r4, #0
 802339c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80233a0:	4628      	mov	r0, r5
 80233a2:	4798      	blx	r3
 80233a4:	2000      	movs	r0, #0
 80233a6:	e7e0      	b.n	802336a <_raise_r+0x12>

080233a8 <raise>:
 80233a8:	4b02      	ldr	r3, [pc, #8]	; (80233b4 <raise+0xc>)
 80233aa:	4601      	mov	r1, r0
 80233ac:	6818      	ldr	r0, [r3, #0]
 80233ae:	f7ff bfd3 	b.w	8023358 <_raise_r>
 80233b2:	bf00      	nop
 80233b4:	200000f4 	.word	0x200000f4

080233b8 <_kill_r>:
 80233b8:	b538      	push	{r3, r4, r5, lr}
 80233ba:	4c07      	ldr	r4, [pc, #28]	; (80233d8 <_kill_r+0x20>)
 80233bc:	2300      	movs	r3, #0
 80233be:	4605      	mov	r5, r0
 80233c0:	4608      	mov	r0, r1
 80233c2:	4611      	mov	r1, r2
 80233c4:	6023      	str	r3, [r4, #0]
 80233c6:	f7de fa4f 	bl	8001868 <_kill>
 80233ca:	1c43      	adds	r3, r0, #1
 80233cc:	d102      	bne.n	80233d4 <_kill_r+0x1c>
 80233ce:	6823      	ldr	r3, [r4, #0]
 80233d0:	b103      	cbz	r3, 80233d4 <_kill_r+0x1c>
 80233d2:	602b      	str	r3, [r5, #0]
 80233d4:	bd38      	pop	{r3, r4, r5, pc}
 80233d6:	bf00      	nop
 80233d8:	200022dc 	.word	0x200022dc

080233dc <_getpid_r>:
 80233dc:	f7de ba3c 	b.w	8001858 <_getpid>

080233e0 <siscanf>:
 80233e0:	b40e      	push	{r1, r2, r3}
 80233e2:	b530      	push	{r4, r5, lr}
 80233e4:	b09c      	sub	sp, #112	; 0x70
 80233e6:	ac1f      	add	r4, sp, #124	; 0x7c
 80233e8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80233ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80233f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80233f4:	9002      	str	r0, [sp, #8]
 80233f6:	9006      	str	r0, [sp, #24]
 80233f8:	f7dc ff44 	bl	8000284 <strlen>
 80233fc:	4b0b      	ldr	r3, [pc, #44]	; (802342c <siscanf+0x4c>)
 80233fe:	9003      	str	r0, [sp, #12]
 8023400:	9007      	str	r0, [sp, #28]
 8023402:	930b      	str	r3, [sp, #44]	; 0x2c
 8023404:	480a      	ldr	r0, [pc, #40]	; (8023430 <siscanf+0x50>)
 8023406:	9401      	str	r4, [sp, #4]
 8023408:	2300      	movs	r3, #0
 802340a:	930f      	str	r3, [sp, #60]	; 0x3c
 802340c:	9314      	str	r3, [sp, #80]	; 0x50
 802340e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023412:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023416:	462a      	mov	r2, r5
 8023418:	4623      	mov	r3, r4
 802341a:	a902      	add	r1, sp, #8
 802341c:	6800      	ldr	r0, [r0, #0]
 802341e:	f000 f9d3 	bl	80237c8 <__ssvfiscanf_r>
 8023422:	b01c      	add	sp, #112	; 0x70
 8023424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023428:	b003      	add	sp, #12
 802342a:	4770      	bx	lr
 802342c:	08023457 	.word	0x08023457
 8023430:	200000f4 	.word	0x200000f4

08023434 <__sread>:
 8023434:	b510      	push	{r4, lr}
 8023436:	460c      	mov	r4, r1
 8023438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802343c:	f000 fc6c 	bl	8023d18 <_read_r>
 8023440:	2800      	cmp	r0, #0
 8023442:	bfab      	itete	ge
 8023444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023446:	89a3      	ldrhlt	r3, [r4, #12]
 8023448:	181b      	addge	r3, r3, r0
 802344a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802344e:	bfac      	ite	ge
 8023450:	6563      	strge	r3, [r4, #84]	; 0x54
 8023452:	81a3      	strhlt	r3, [r4, #12]
 8023454:	bd10      	pop	{r4, pc}

08023456 <__seofread>:
 8023456:	2000      	movs	r0, #0
 8023458:	4770      	bx	lr

0802345a <__swrite>:
 802345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802345e:	461f      	mov	r7, r3
 8023460:	898b      	ldrh	r3, [r1, #12]
 8023462:	05db      	lsls	r3, r3, #23
 8023464:	4605      	mov	r5, r0
 8023466:	460c      	mov	r4, r1
 8023468:	4616      	mov	r6, r2
 802346a:	d505      	bpl.n	8023478 <__swrite+0x1e>
 802346c:	2302      	movs	r3, #2
 802346e:	2200      	movs	r2, #0
 8023470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023474:	f000 f934 	bl	80236e0 <_lseek_r>
 8023478:	89a3      	ldrh	r3, [r4, #12]
 802347a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802347e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023482:	81a3      	strh	r3, [r4, #12]
 8023484:	4632      	mov	r2, r6
 8023486:	463b      	mov	r3, r7
 8023488:	4628      	mov	r0, r5
 802348a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802348e:	f000 b8e1 	b.w	8023654 <_write_r>

08023492 <__sseek>:
 8023492:	b510      	push	{r4, lr}
 8023494:	460c      	mov	r4, r1
 8023496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802349a:	f000 f921 	bl	80236e0 <_lseek_r>
 802349e:	1c43      	adds	r3, r0, #1
 80234a0:	89a3      	ldrh	r3, [r4, #12]
 80234a2:	bf15      	itete	ne
 80234a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80234a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80234aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80234ae:	81a3      	strheq	r3, [r4, #12]
 80234b0:	bf18      	it	ne
 80234b2:	81a3      	strhne	r3, [r4, #12]
 80234b4:	bd10      	pop	{r4, pc}

080234b6 <__sclose>:
 80234b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234ba:	f000 b8dd 	b.w	8023678 <_close_r>

080234be <strcpy>:
 80234be:	4603      	mov	r3, r0
 80234c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234c4:	f803 2b01 	strb.w	r2, [r3], #1
 80234c8:	2a00      	cmp	r2, #0
 80234ca:	d1f9      	bne.n	80234c0 <strcpy+0x2>
 80234cc:	4770      	bx	lr

080234ce <strncmp>:
 80234ce:	b510      	push	{r4, lr}
 80234d0:	b16a      	cbz	r2, 80234ee <strncmp+0x20>
 80234d2:	3901      	subs	r1, #1
 80234d4:	1884      	adds	r4, r0, r2
 80234d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80234da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80234de:	4293      	cmp	r3, r2
 80234e0:	d103      	bne.n	80234ea <strncmp+0x1c>
 80234e2:	42a0      	cmp	r0, r4
 80234e4:	d001      	beq.n	80234ea <strncmp+0x1c>
 80234e6:	2b00      	cmp	r3, #0
 80234e8:	d1f5      	bne.n	80234d6 <strncmp+0x8>
 80234ea:	1a98      	subs	r0, r3, r2
 80234ec:	bd10      	pop	{r4, pc}
 80234ee:	4610      	mov	r0, r2
 80234f0:	e7fc      	b.n	80234ec <strncmp+0x1e>

080234f2 <_strtoul_l.isra.0>:
 80234f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234f6:	4680      	mov	r8, r0
 80234f8:	4689      	mov	r9, r1
 80234fa:	4692      	mov	sl, r2
 80234fc:	461e      	mov	r6, r3
 80234fe:	460f      	mov	r7, r1
 8023500:	463d      	mov	r5, r7
 8023502:	9808      	ldr	r0, [sp, #32]
 8023504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023508:	f7ff fcd4 	bl	8022eb4 <__locale_ctype_ptr_l>
 802350c:	4420      	add	r0, r4
 802350e:	7843      	ldrb	r3, [r0, #1]
 8023510:	f013 0308 	ands.w	r3, r3, #8
 8023514:	d130      	bne.n	8023578 <_strtoul_l.isra.0+0x86>
 8023516:	2c2d      	cmp	r4, #45	; 0x2d
 8023518:	d130      	bne.n	802357c <_strtoul_l.isra.0+0x8a>
 802351a:	787c      	ldrb	r4, [r7, #1]
 802351c:	1cbd      	adds	r5, r7, #2
 802351e:	2101      	movs	r1, #1
 8023520:	2e00      	cmp	r6, #0
 8023522:	d05c      	beq.n	80235de <_strtoul_l.isra.0+0xec>
 8023524:	2e10      	cmp	r6, #16
 8023526:	d109      	bne.n	802353c <_strtoul_l.isra.0+0x4a>
 8023528:	2c30      	cmp	r4, #48	; 0x30
 802352a:	d107      	bne.n	802353c <_strtoul_l.isra.0+0x4a>
 802352c:	782b      	ldrb	r3, [r5, #0]
 802352e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023532:	2b58      	cmp	r3, #88	; 0x58
 8023534:	d14e      	bne.n	80235d4 <_strtoul_l.isra.0+0xe2>
 8023536:	786c      	ldrb	r4, [r5, #1]
 8023538:	2610      	movs	r6, #16
 802353a:	3502      	adds	r5, #2
 802353c:	f04f 32ff 	mov.w	r2, #4294967295
 8023540:	2300      	movs	r3, #0
 8023542:	fbb2 f2f6 	udiv	r2, r2, r6
 8023546:	fb06 fc02 	mul.w	ip, r6, r2
 802354a:	ea6f 0c0c 	mvn.w	ip, ip
 802354e:	4618      	mov	r0, r3
 8023550:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8023554:	2f09      	cmp	r7, #9
 8023556:	d817      	bhi.n	8023588 <_strtoul_l.isra.0+0x96>
 8023558:	463c      	mov	r4, r7
 802355a:	42a6      	cmp	r6, r4
 802355c:	dd23      	ble.n	80235a6 <_strtoul_l.isra.0+0xb4>
 802355e:	2b00      	cmp	r3, #0
 8023560:	db1e      	blt.n	80235a0 <_strtoul_l.isra.0+0xae>
 8023562:	4282      	cmp	r2, r0
 8023564:	d31c      	bcc.n	80235a0 <_strtoul_l.isra.0+0xae>
 8023566:	d101      	bne.n	802356c <_strtoul_l.isra.0+0x7a>
 8023568:	45a4      	cmp	ip, r4
 802356a:	db19      	blt.n	80235a0 <_strtoul_l.isra.0+0xae>
 802356c:	fb00 4006 	mla	r0, r0, r6, r4
 8023570:	2301      	movs	r3, #1
 8023572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023576:	e7eb      	b.n	8023550 <_strtoul_l.isra.0+0x5e>
 8023578:	462f      	mov	r7, r5
 802357a:	e7c1      	b.n	8023500 <_strtoul_l.isra.0+0xe>
 802357c:	2c2b      	cmp	r4, #43	; 0x2b
 802357e:	bf04      	itt	eq
 8023580:	1cbd      	addeq	r5, r7, #2
 8023582:	787c      	ldrbeq	r4, [r7, #1]
 8023584:	4619      	mov	r1, r3
 8023586:	e7cb      	b.n	8023520 <_strtoul_l.isra.0+0x2e>
 8023588:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802358c:	2f19      	cmp	r7, #25
 802358e:	d801      	bhi.n	8023594 <_strtoul_l.isra.0+0xa2>
 8023590:	3c37      	subs	r4, #55	; 0x37
 8023592:	e7e2      	b.n	802355a <_strtoul_l.isra.0+0x68>
 8023594:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8023598:	2f19      	cmp	r7, #25
 802359a:	d804      	bhi.n	80235a6 <_strtoul_l.isra.0+0xb4>
 802359c:	3c57      	subs	r4, #87	; 0x57
 802359e:	e7dc      	b.n	802355a <_strtoul_l.isra.0+0x68>
 80235a0:	f04f 33ff 	mov.w	r3, #4294967295
 80235a4:	e7e5      	b.n	8023572 <_strtoul_l.isra.0+0x80>
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	da09      	bge.n	80235be <_strtoul_l.isra.0+0xcc>
 80235aa:	2322      	movs	r3, #34	; 0x22
 80235ac:	f8c8 3000 	str.w	r3, [r8]
 80235b0:	f04f 30ff 	mov.w	r0, #4294967295
 80235b4:	f1ba 0f00 	cmp.w	sl, #0
 80235b8:	d107      	bne.n	80235ca <_strtoul_l.isra.0+0xd8>
 80235ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235be:	b101      	cbz	r1, 80235c2 <_strtoul_l.isra.0+0xd0>
 80235c0:	4240      	negs	r0, r0
 80235c2:	f1ba 0f00 	cmp.w	sl, #0
 80235c6:	d0f8      	beq.n	80235ba <_strtoul_l.isra.0+0xc8>
 80235c8:	b10b      	cbz	r3, 80235ce <_strtoul_l.isra.0+0xdc>
 80235ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80235ce:	f8ca 9000 	str.w	r9, [sl]
 80235d2:	e7f2      	b.n	80235ba <_strtoul_l.isra.0+0xc8>
 80235d4:	2430      	movs	r4, #48	; 0x30
 80235d6:	2e00      	cmp	r6, #0
 80235d8:	d1b0      	bne.n	802353c <_strtoul_l.isra.0+0x4a>
 80235da:	2608      	movs	r6, #8
 80235dc:	e7ae      	b.n	802353c <_strtoul_l.isra.0+0x4a>
 80235de:	2c30      	cmp	r4, #48	; 0x30
 80235e0:	d0a4      	beq.n	802352c <_strtoul_l.isra.0+0x3a>
 80235e2:	260a      	movs	r6, #10
 80235e4:	e7aa      	b.n	802353c <_strtoul_l.isra.0+0x4a>
	...

080235e8 <_strtoul_r>:
 80235e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80235ea:	4c06      	ldr	r4, [pc, #24]	; (8023604 <_strtoul_r+0x1c>)
 80235ec:	4d06      	ldr	r5, [pc, #24]	; (8023608 <_strtoul_r+0x20>)
 80235ee:	6824      	ldr	r4, [r4, #0]
 80235f0:	6a24      	ldr	r4, [r4, #32]
 80235f2:	2c00      	cmp	r4, #0
 80235f4:	bf08      	it	eq
 80235f6:	462c      	moveq	r4, r5
 80235f8:	9400      	str	r4, [sp, #0]
 80235fa:	f7ff ff7a 	bl	80234f2 <_strtoul_l.isra.0>
 80235fe:	b003      	add	sp, #12
 8023600:	bd30      	pop	{r4, r5, pc}
 8023602:	bf00      	nop
 8023604:	200000f4 	.word	0x200000f4
 8023608:	200001b8 	.word	0x200001b8

0802360c <strtoul>:
 802360c:	4b08      	ldr	r3, [pc, #32]	; (8023630 <strtoul+0x24>)
 802360e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023610:	681c      	ldr	r4, [r3, #0]
 8023612:	4d08      	ldr	r5, [pc, #32]	; (8023634 <strtoul+0x28>)
 8023614:	6a23      	ldr	r3, [r4, #32]
 8023616:	2b00      	cmp	r3, #0
 8023618:	bf08      	it	eq
 802361a:	462b      	moveq	r3, r5
 802361c:	9300      	str	r3, [sp, #0]
 802361e:	4613      	mov	r3, r2
 8023620:	460a      	mov	r2, r1
 8023622:	4601      	mov	r1, r0
 8023624:	4620      	mov	r0, r4
 8023626:	f7ff ff64 	bl	80234f2 <_strtoul_l.isra.0>
 802362a:	b003      	add	sp, #12
 802362c:	bd30      	pop	{r4, r5, pc}
 802362e:	bf00      	nop
 8023630:	200000f4 	.word	0x200000f4
 8023634:	200001b8 	.word	0x200001b8

08023638 <__ascii_wctomb>:
 8023638:	b149      	cbz	r1, 802364e <__ascii_wctomb+0x16>
 802363a:	2aff      	cmp	r2, #255	; 0xff
 802363c:	bf85      	ittet	hi
 802363e:	238a      	movhi	r3, #138	; 0x8a
 8023640:	6003      	strhi	r3, [r0, #0]
 8023642:	700a      	strbls	r2, [r1, #0]
 8023644:	f04f 30ff 	movhi.w	r0, #4294967295
 8023648:	bf98      	it	ls
 802364a:	2001      	movls	r0, #1
 802364c:	4770      	bx	lr
 802364e:	4608      	mov	r0, r1
 8023650:	4770      	bx	lr
	...

08023654 <_write_r>:
 8023654:	b538      	push	{r3, r4, r5, lr}
 8023656:	4c07      	ldr	r4, [pc, #28]	; (8023674 <_write_r+0x20>)
 8023658:	4605      	mov	r5, r0
 802365a:	4608      	mov	r0, r1
 802365c:	4611      	mov	r1, r2
 802365e:	2200      	movs	r2, #0
 8023660:	6022      	str	r2, [r4, #0]
 8023662:	461a      	mov	r2, r3
 8023664:	f7ea fbc8 	bl	800ddf8 <_write>
 8023668:	1c43      	adds	r3, r0, #1
 802366a:	d102      	bne.n	8023672 <_write_r+0x1e>
 802366c:	6823      	ldr	r3, [r4, #0]
 802366e:	b103      	cbz	r3, 8023672 <_write_r+0x1e>
 8023670:	602b      	str	r3, [r5, #0]
 8023672:	bd38      	pop	{r3, r4, r5, pc}
 8023674:	200022dc 	.word	0x200022dc

08023678 <_close_r>:
 8023678:	b538      	push	{r3, r4, r5, lr}
 802367a:	4c06      	ldr	r4, [pc, #24]	; (8023694 <_close_r+0x1c>)
 802367c:	2300      	movs	r3, #0
 802367e:	4605      	mov	r5, r0
 8023680:	4608      	mov	r0, r1
 8023682:	6023      	str	r3, [r4, #0]
 8023684:	f7de f93a 	bl	80018fc <_close>
 8023688:	1c43      	adds	r3, r0, #1
 802368a:	d102      	bne.n	8023692 <_close_r+0x1a>
 802368c:	6823      	ldr	r3, [r4, #0]
 802368e:	b103      	cbz	r3, 8023692 <_close_r+0x1a>
 8023690:	602b      	str	r3, [r5, #0]
 8023692:	bd38      	pop	{r3, r4, r5, pc}
 8023694:	200022dc 	.word	0x200022dc

08023698 <__env_lock>:
 8023698:	4770      	bx	lr

0802369a <__env_unlock>:
 802369a:	4770      	bx	lr

0802369c <_fstat_r>:
 802369c:	b538      	push	{r3, r4, r5, lr}
 802369e:	4c07      	ldr	r4, [pc, #28]	; (80236bc <_fstat_r+0x20>)
 80236a0:	2300      	movs	r3, #0
 80236a2:	4605      	mov	r5, r0
 80236a4:	4608      	mov	r0, r1
 80236a6:	4611      	mov	r1, r2
 80236a8:	6023      	str	r3, [r4, #0]
 80236aa:	f7de f933 	bl	8001914 <_fstat>
 80236ae:	1c43      	adds	r3, r0, #1
 80236b0:	d102      	bne.n	80236b8 <_fstat_r+0x1c>
 80236b2:	6823      	ldr	r3, [r4, #0]
 80236b4:	b103      	cbz	r3, 80236b8 <_fstat_r+0x1c>
 80236b6:	602b      	str	r3, [r5, #0]
 80236b8:	bd38      	pop	{r3, r4, r5, pc}
 80236ba:	bf00      	nop
 80236bc:	200022dc 	.word	0x200022dc

080236c0 <_isatty_r>:
 80236c0:	b538      	push	{r3, r4, r5, lr}
 80236c2:	4c06      	ldr	r4, [pc, #24]	; (80236dc <_isatty_r+0x1c>)
 80236c4:	2300      	movs	r3, #0
 80236c6:	4605      	mov	r5, r0
 80236c8:	4608      	mov	r0, r1
 80236ca:	6023      	str	r3, [r4, #0]
 80236cc:	f7de f932 	bl	8001934 <_isatty>
 80236d0:	1c43      	adds	r3, r0, #1
 80236d2:	d102      	bne.n	80236da <_isatty_r+0x1a>
 80236d4:	6823      	ldr	r3, [r4, #0]
 80236d6:	b103      	cbz	r3, 80236da <_isatty_r+0x1a>
 80236d8:	602b      	str	r3, [r5, #0]
 80236da:	bd38      	pop	{r3, r4, r5, pc}
 80236dc:	200022dc 	.word	0x200022dc

080236e0 <_lseek_r>:
 80236e0:	b538      	push	{r3, r4, r5, lr}
 80236e2:	4c07      	ldr	r4, [pc, #28]	; (8023700 <_lseek_r+0x20>)
 80236e4:	4605      	mov	r5, r0
 80236e6:	4608      	mov	r0, r1
 80236e8:	4611      	mov	r1, r2
 80236ea:	2200      	movs	r2, #0
 80236ec:	6022      	str	r2, [r4, #0]
 80236ee:	461a      	mov	r2, r3
 80236f0:	f7de f92b 	bl	800194a <_lseek>
 80236f4:	1c43      	adds	r3, r0, #1
 80236f6:	d102      	bne.n	80236fe <_lseek_r+0x1e>
 80236f8:	6823      	ldr	r3, [r4, #0]
 80236fa:	b103      	cbz	r3, 80236fe <_lseek_r+0x1e>
 80236fc:	602b      	str	r3, [r5, #0]
 80236fe:	bd38      	pop	{r3, r4, r5, pc}
 8023700:	200022dc 	.word	0x200022dc

08023704 <_malloc_usable_size_r>:
 8023704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023708:	1f18      	subs	r0, r3, #4
 802370a:	2b00      	cmp	r3, #0
 802370c:	bfbc      	itt	lt
 802370e:	580b      	ldrlt	r3, [r1, r0]
 8023710:	18c0      	addlt	r0, r0, r3
 8023712:	4770      	bx	lr

08023714 <_sungetc_r>:
 8023714:	b538      	push	{r3, r4, r5, lr}
 8023716:	1c4b      	adds	r3, r1, #1
 8023718:	4614      	mov	r4, r2
 802371a:	d103      	bne.n	8023724 <_sungetc_r+0x10>
 802371c:	f04f 35ff 	mov.w	r5, #4294967295
 8023720:	4628      	mov	r0, r5
 8023722:	bd38      	pop	{r3, r4, r5, pc}
 8023724:	8993      	ldrh	r3, [r2, #12]
 8023726:	f023 0320 	bic.w	r3, r3, #32
 802372a:	8193      	strh	r3, [r2, #12]
 802372c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802372e:	6852      	ldr	r2, [r2, #4]
 8023730:	b2cd      	uxtb	r5, r1
 8023732:	b18b      	cbz	r3, 8023758 <_sungetc_r+0x44>
 8023734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023736:	4293      	cmp	r3, r2
 8023738:	dd08      	ble.n	802374c <_sungetc_r+0x38>
 802373a:	6823      	ldr	r3, [r4, #0]
 802373c:	1e5a      	subs	r2, r3, #1
 802373e:	6022      	str	r2, [r4, #0]
 8023740:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023744:	6863      	ldr	r3, [r4, #4]
 8023746:	3301      	adds	r3, #1
 8023748:	6063      	str	r3, [r4, #4]
 802374a:	e7e9      	b.n	8023720 <_sungetc_r+0xc>
 802374c:	4621      	mov	r1, r4
 802374e:	f000 fb27 	bl	8023da0 <__submore>
 8023752:	2800      	cmp	r0, #0
 8023754:	d0f1      	beq.n	802373a <_sungetc_r+0x26>
 8023756:	e7e1      	b.n	802371c <_sungetc_r+0x8>
 8023758:	6921      	ldr	r1, [r4, #16]
 802375a:	6823      	ldr	r3, [r4, #0]
 802375c:	b151      	cbz	r1, 8023774 <_sungetc_r+0x60>
 802375e:	4299      	cmp	r1, r3
 8023760:	d208      	bcs.n	8023774 <_sungetc_r+0x60>
 8023762:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023766:	42a9      	cmp	r1, r5
 8023768:	d104      	bne.n	8023774 <_sungetc_r+0x60>
 802376a:	3b01      	subs	r3, #1
 802376c:	3201      	adds	r2, #1
 802376e:	6023      	str	r3, [r4, #0]
 8023770:	6062      	str	r2, [r4, #4]
 8023772:	e7d5      	b.n	8023720 <_sungetc_r+0xc>
 8023774:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802377c:	6363      	str	r3, [r4, #52]	; 0x34
 802377e:	2303      	movs	r3, #3
 8023780:	63a3      	str	r3, [r4, #56]	; 0x38
 8023782:	4623      	mov	r3, r4
 8023784:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023788:	6023      	str	r3, [r4, #0]
 802378a:	2301      	movs	r3, #1
 802378c:	e7dc      	b.n	8023748 <_sungetc_r+0x34>

0802378e <__ssrefill_r>:
 802378e:	b510      	push	{r4, lr}
 8023790:	460c      	mov	r4, r1
 8023792:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023794:	b169      	cbz	r1, 80237b2 <__ssrefill_r+0x24>
 8023796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802379a:	4299      	cmp	r1, r3
 802379c:	d001      	beq.n	80237a2 <__ssrefill_r+0x14>
 802379e:	f7fe f991 	bl	8021ac4 <_free_r>
 80237a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80237a4:	6063      	str	r3, [r4, #4]
 80237a6:	2000      	movs	r0, #0
 80237a8:	6360      	str	r0, [r4, #52]	; 0x34
 80237aa:	b113      	cbz	r3, 80237b2 <__ssrefill_r+0x24>
 80237ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80237ae:	6023      	str	r3, [r4, #0]
 80237b0:	bd10      	pop	{r4, pc}
 80237b2:	6923      	ldr	r3, [r4, #16]
 80237b4:	6023      	str	r3, [r4, #0]
 80237b6:	2300      	movs	r3, #0
 80237b8:	6063      	str	r3, [r4, #4]
 80237ba:	89a3      	ldrh	r3, [r4, #12]
 80237bc:	f043 0320 	orr.w	r3, r3, #32
 80237c0:	81a3      	strh	r3, [r4, #12]
 80237c2:	f04f 30ff 	mov.w	r0, #4294967295
 80237c6:	e7f3      	b.n	80237b0 <__ssrefill_r+0x22>

080237c8 <__ssvfiscanf_r>:
 80237c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237cc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80237d0:	460c      	mov	r4, r1
 80237d2:	2100      	movs	r1, #0
 80237d4:	9144      	str	r1, [sp, #272]	; 0x110
 80237d6:	9145      	str	r1, [sp, #276]	; 0x114
 80237d8:	499f      	ldr	r1, [pc, #636]	; (8023a58 <__ssvfiscanf_r+0x290>)
 80237da:	91a0      	str	r1, [sp, #640]	; 0x280
 80237dc:	f10d 0804 	add.w	r8, sp, #4
 80237e0:	499e      	ldr	r1, [pc, #632]	; (8023a5c <__ssvfiscanf_r+0x294>)
 80237e2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8023a60 <__ssvfiscanf_r+0x298>
 80237e6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80237ea:	4606      	mov	r6, r0
 80237ec:	4692      	mov	sl, r2
 80237ee:	91a1      	str	r1, [sp, #644]	; 0x284
 80237f0:	9300      	str	r3, [sp, #0]
 80237f2:	270a      	movs	r7, #10
 80237f4:	f89a 3000 	ldrb.w	r3, [sl]
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	f000 812a 	beq.w	8023a52 <__ssvfiscanf_r+0x28a>
 80237fe:	4655      	mov	r5, sl
 8023800:	f7ff fb5c 	bl	8022ebc <__locale_ctype_ptr>
 8023804:	f815 bb01 	ldrb.w	fp, [r5], #1
 8023808:	4458      	add	r0, fp
 802380a:	7843      	ldrb	r3, [r0, #1]
 802380c:	f013 0308 	ands.w	r3, r3, #8
 8023810:	d01c      	beq.n	802384c <__ssvfiscanf_r+0x84>
 8023812:	6863      	ldr	r3, [r4, #4]
 8023814:	2b00      	cmp	r3, #0
 8023816:	dd12      	ble.n	802383e <__ssvfiscanf_r+0x76>
 8023818:	f7ff fb50 	bl	8022ebc <__locale_ctype_ptr>
 802381c:	6823      	ldr	r3, [r4, #0]
 802381e:	781a      	ldrb	r2, [r3, #0]
 8023820:	4410      	add	r0, r2
 8023822:	7842      	ldrb	r2, [r0, #1]
 8023824:	0712      	lsls	r2, r2, #28
 8023826:	d401      	bmi.n	802382c <__ssvfiscanf_r+0x64>
 8023828:	46aa      	mov	sl, r5
 802382a:	e7e3      	b.n	80237f4 <__ssvfiscanf_r+0x2c>
 802382c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802382e:	3201      	adds	r2, #1
 8023830:	9245      	str	r2, [sp, #276]	; 0x114
 8023832:	6862      	ldr	r2, [r4, #4]
 8023834:	3301      	adds	r3, #1
 8023836:	3a01      	subs	r2, #1
 8023838:	6062      	str	r2, [r4, #4]
 802383a:	6023      	str	r3, [r4, #0]
 802383c:	e7e9      	b.n	8023812 <__ssvfiscanf_r+0x4a>
 802383e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023840:	4621      	mov	r1, r4
 8023842:	4630      	mov	r0, r6
 8023844:	4798      	blx	r3
 8023846:	2800      	cmp	r0, #0
 8023848:	d0e6      	beq.n	8023818 <__ssvfiscanf_r+0x50>
 802384a:	e7ed      	b.n	8023828 <__ssvfiscanf_r+0x60>
 802384c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8023850:	f040 8082 	bne.w	8023958 <__ssvfiscanf_r+0x190>
 8023854:	9343      	str	r3, [sp, #268]	; 0x10c
 8023856:	9341      	str	r3, [sp, #260]	; 0x104
 8023858:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802385c:	2b2a      	cmp	r3, #42	; 0x2a
 802385e:	d103      	bne.n	8023868 <__ssvfiscanf_r+0xa0>
 8023860:	2310      	movs	r3, #16
 8023862:	9341      	str	r3, [sp, #260]	; 0x104
 8023864:	f10a 0502 	add.w	r5, sl, #2
 8023868:	46aa      	mov	sl, r5
 802386a:	f815 1b01 	ldrb.w	r1, [r5], #1
 802386e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8023872:	2a09      	cmp	r2, #9
 8023874:	d922      	bls.n	80238bc <__ssvfiscanf_r+0xf4>
 8023876:	2203      	movs	r2, #3
 8023878:	4879      	ldr	r0, [pc, #484]	; (8023a60 <__ssvfiscanf_r+0x298>)
 802387a:	f7dc fca9 	bl	80001d0 <memchr>
 802387e:	b138      	cbz	r0, 8023890 <__ssvfiscanf_r+0xc8>
 8023880:	eba0 0309 	sub.w	r3, r0, r9
 8023884:	2001      	movs	r0, #1
 8023886:	4098      	lsls	r0, r3
 8023888:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802388a:	4318      	orrs	r0, r3
 802388c:	9041      	str	r0, [sp, #260]	; 0x104
 802388e:	46aa      	mov	sl, r5
 8023890:	f89a 3000 	ldrb.w	r3, [sl]
 8023894:	2b67      	cmp	r3, #103	; 0x67
 8023896:	f10a 0501 	add.w	r5, sl, #1
 802389a:	d82b      	bhi.n	80238f4 <__ssvfiscanf_r+0x12c>
 802389c:	2b65      	cmp	r3, #101	; 0x65
 802389e:	f080 809f 	bcs.w	80239e0 <__ssvfiscanf_r+0x218>
 80238a2:	2b47      	cmp	r3, #71	; 0x47
 80238a4:	d810      	bhi.n	80238c8 <__ssvfiscanf_r+0x100>
 80238a6:	2b45      	cmp	r3, #69	; 0x45
 80238a8:	f080 809a 	bcs.w	80239e0 <__ssvfiscanf_r+0x218>
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	d06c      	beq.n	802398a <__ssvfiscanf_r+0x1c2>
 80238b0:	2b25      	cmp	r3, #37	; 0x25
 80238b2:	d051      	beq.n	8023958 <__ssvfiscanf_r+0x190>
 80238b4:	2303      	movs	r3, #3
 80238b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80238b8:	9742      	str	r7, [sp, #264]	; 0x108
 80238ba:	e027      	b.n	802390c <__ssvfiscanf_r+0x144>
 80238bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80238be:	fb07 1303 	mla	r3, r7, r3, r1
 80238c2:	3b30      	subs	r3, #48	; 0x30
 80238c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80238c6:	e7cf      	b.n	8023868 <__ssvfiscanf_r+0xa0>
 80238c8:	2b5b      	cmp	r3, #91	; 0x5b
 80238ca:	d06a      	beq.n	80239a2 <__ssvfiscanf_r+0x1da>
 80238cc:	d80c      	bhi.n	80238e8 <__ssvfiscanf_r+0x120>
 80238ce:	2b58      	cmp	r3, #88	; 0x58
 80238d0:	d1f0      	bne.n	80238b4 <__ssvfiscanf_r+0xec>
 80238d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80238d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80238d8:	9241      	str	r2, [sp, #260]	; 0x104
 80238da:	2210      	movs	r2, #16
 80238dc:	9242      	str	r2, [sp, #264]	; 0x108
 80238de:	2b6e      	cmp	r3, #110	; 0x6e
 80238e0:	bf8c      	ite	hi
 80238e2:	2304      	movhi	r3, #4
 80238e4:	2303      	movls	r3, #3
 80238e6:	e010      	b.n	802390a <__ssvfiscanf_r+0x142>
 80238e8:	2b63      	cmp	r3, #99	; 0x63
 80238ea:	d065      	beq.n	80239b8 <__ssvfiscanf_r+0x1f0>
 80238ec:	2b64      	cmp	r3, #100	; 0x64
 80238ee:	d1e1      	bne.n	80238b4 <__ssvfiscanf_r+0xec>
 80238f0:	9742      	str	r7, [sp, #264]	; 0x108
 80238f2:	e7f4      	b.n	80238de <__ssvfiscanf_r+0x116>
 80238f4:	2b70      	cmp	r3, #112	; 0x70
 80238f6:	d04b      	beq.n	8023990 <__ssvfiscanf_r+0x1c8>
 80238f8:	d826      	bhi.n	8023948 <__ssvfiscanf_r+0x180>
 80238fa:	2b6e      	cmp	r3, #110	; 0x6e
 80238fc:	d062      	beq.n	80239c4 <__ssvfiscanf_r+0x1fc>
 80238fe:	d84c      	bhi.n	802399a <__ssvfiscanf_r+0x1d2>
 8023900:	2b69      	cmp	r3, #105	; 0x69
 8023902:	d1d7      	bne.n	80238b4 <__ssvfiscanf_r+0xec>
 8023904:	2300      	movs	r3, #0
 8023906:	9342      	str	r3, [sp, #264]	; 0x108
 8023908:	2303      	movs	r3, #3
 802390a:	9347      	str	r3, [sp, #284]	; 0x11c
 802390c:	6863      	ldr	r3, [r4, #4]
 802390e:	2b00      	cmp	r3, #0
 8023910:	dd68      	ble.n	80239e4 <__ssvfiscanf_r+0x21c>
 8023912:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023914:	0659      	lsls	r1, r3, #25
 8023916:	d407      	bmi.n	8023928 <__ssvfiscanf_r+0x160>
 8023918:	f7ff fad0 	bl	8022ebc <__locale_ctype_ptr>
 802391c:	6823      	ldr	r3, [r4, #0]
 802391e:	781a      	ldrb	r2, [r3, #0]
 8023920:	4410      	add	r0, r2
 8023922:	7842      	ldrb	r2, [r0, #1]
 8023924:	0712      	lsls	r2, r2, #28
 8023926:	d464      	bmi.n	80239f2 <__ssvfiscanf_r+0x22a>
 8023928:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802392a:	2b02      	cmp	r3, #2
 802392c:	dc73      	bgt.n	8023a16 <__ssvfiscanf_r+0x24e>
 802392e:	466b      	mov	r3, sp
 8023930:	4622      	mov	r2, r4
 8023932:	a941      	add	r1, sp, #260	; 0x104
 8023934:	4630      	mov	r0, r6
 8023936:	f000 f897 	bl	8023a68 <_scanf_chars>
 802393a:	2801      	cmp	r0, #1
 802393c:	f000 8089 	beq.w	8023a52 <__ssvfiscanf_r+0x28a>
 8023940:	2802      	cmp	r0, #2
 8023942:	f47f af71 	bne.w	8023828 <__ssvfiscanf_r+0x60>
 8023946:	e01d      	b.n	8023984 <__ssvfiscanf_r+0x1bc>
 8023948:	2b75      	cmp	r3, #117	; 0x75
 802394a:	d0d1      	beq.n	80238f0 <__ssvfiscanf_r+0x128>
 802394c:	2b78      	cmp	r3, #120	; 0x78
 802394e:	d0c0      	beq.n	80238d2 <__ssvfiscanf_r+0x10a>
 8023950:	2b73      	cmp	r3, #115	; 0x73
 8023952:	d1af      	bne.n	80238b4 <__ssvfiscanf_r+0xec>
 8023954:	2302      	movs	r3, #2
 8023956:	e7d8      	b.n	802390a <__ssvfiscanf_r+0x142>
 8023958:	6863      	ldr	r3, [r4, #4]
 802395a:	2b00      	cmp	r3, #0
 802395c:	dd0c      	ble.n	8023978 <__ssvfiscanf_r+0x1b0>
 802395e:	6823      	ldr	r3, [r4, #0]
 8023960:	781a      	ldrb	r2, [r3, #0]
 8023962:	455a      	cmp	r2, fp
 8023964:	d175      	bne.n	8023a52 <__ssvfiscanf_r+0x28a>
 8023966:	3301      	adds	r3, #1
 8023968:	6862      	ldr	r2, [r4, #4]
 802396a:	6023      	str	r3, [r4, #0]
 802396c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802396e:	3a01      	subs	r2, #1
 8023970:	3301      	adds	r3, #1
 8023972:	6062      	str	r2, [r4, #4]
 8023974:	9345      	str	r3, [sp, #276]	; 0x114
 8023976:	e757      	b.n	8023828 <__ssvfiscanf_r+0x60>
 8023978:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802397a:	4621      	mov	r1, r4
 802397c:	4630      	mov	r0, r6
 802397e:	4798      	blx	r3
 8023980:	2800      	cmp	r0, #0
 8023982:	d0ec      	beq.n	802395e <__ssvfiscanf_r+0x196>
 8023984:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023986:	2800      	cmp	r0, #0
 8023988:	d159      	bne.n	8023a3e <__ssvfiscanf_r+0x276>
 802398a:	f04f 30ff 	mov.w	r0, #4294967295
 802398e:	e05c      	b.n	8023a4a <__ssvfiscanf_r+0x282>
 8023990:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023992:	f042 0220 	orr.w	r2, r2, #32
 8023996:	9241      	str	r2, [sp, #260]	; 0x104
 8023998:	e79b      	b.n	80238d2 <__ssvfiscanf_r+0x10a>
 802399a:	2308      	movs	r3, #8
 802399c:	9342      	str	r3, [sp, #264]	; 0x108
 802399e:	2304      	movs	r3, #4
 80239a0:	e7b3      	b.n	802390a <__ssvfiscanf_r+0x142>
 80239a2:	4629      	mov	r1, r5
 80239a4:	4640      	mov	r0, r8
 80239a6:	f000 f9c9 	bl	8023d3c <__sccl>
 80239aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80239ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80239b0:	9341      	str	r3, [sp, #260]	; 0x104
 80239b2:	4605      	mov	r5, r0
 80239b4:	2301      	movs	r3, #1
 80239b6:	e7a8      	b.n	802390a <__ssvfiscanf_r+0x142>
 80239b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80239ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80239be:	9341      	str	r3, [sp, #260]	; 0x104
 80239c0:	2300      	movs	r3, #0
 80239c2:	e7a2      	b.n	802390a <__ssvfiscanf_r+0x142>
 80239c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80239c6:	06c3      	lsls	r3, r0, #27
 80239c8:	f53f af2e 	bmi.w	8023828 <__ssvfiscanf_r+0x60>
 80239cc:	9b00      	ldr	r3, [sp, #0]
 80239ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80239d0:	1d19      	adds	r1, r3, #4
 80239d2:	9100      	str	r1, [sp, #0]
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	07c0      	lsls	r0, r0, #31
 80239d8:	bf4c      	ite	mi
 80239da:	801a      	strhmi	r2, [r3, #0]
 80239dc:	601a      	strpl	r2, [r3, #0]
 80239de:	e723      	b.n	8023828 <__ssvfiscanf_r+0x60>
 80239e0:	2305      	movs	r3, #5
 80239e2:	e792      	b.n	802390a <__ssvfiscanf_r+0x142>
 80239e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80239e6:	4621      	mov	r1, r4
 80239e8:	4630      	mov	r0, r6
 80239ea:	4798      	blx	r3
 80239ec:	2800      	cmp	r0, #0
 80239ee:	d090      	beq.n	8023912 <__ssvfiscanf_r+0x14a>
 80239f0:	e7c8      	b.n	8023984 <__ssvfiscanf_r+0x1bc>
 80239f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80239f4:	3201      	adds	r2, #1
 80239f6:	9245      	str	r2, [sp, #276]	; 0x114
 80239f8:	6862      	ldr	r2, [r4, #4]
 80239fa:	3a01      	subs	r2, #1
 80239fc:	2a00      	cmp	r2, #0
 80239fe:	6062      	str	r2, [r4, #4]
 8023a00:	dd02      	ble.n	8023a08 <__ssvfiscanf_r+0x240>
 8023a02:	3301      	adds	r3, #1
 8023a04:	6023      	str	r3, [r4, #0]
 8023a06:	e787      	b.n	8023918 <__ssvfiscanf_r+0x150>
 8023a08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023a0a:	4621      	mov	r1, r4
 8023a0c:	4630      	mov	r0, r6
 8023a0e:	4798      	blx	r3
 8023a10:	2800      	cmp	r0, #0
 8023a12:	d081      	beq.n	8023918 <__ssvfiscanf_r+0x150>
 8023a14:	e7b6      	b.n	8023984 <__ssvfiscanf_r+0x1bc>
 8023a16:	2b04      	cmp	r3, #4
 8023a18:	dc06      	bgt.n	8023a28 <__ssvfiscanf_r+0x260>
 8023a1a:	466b      	mov	r3, sp
 8023a1c:	4622      	mov	r2, r4
 8023a1e:	a941      	add	r1, sp, #260	; 0x104
 8023a20:	4630      	mov	r0, r6
 8023a22:	f000 f885 	bl	8023b30 <_scanf_i>
 8023a26:	e788      	b.n	802393a <__ssvfiscanf_r+0x172>
 8023a28:	4b0e      	ldr	r3, [pc, #56]	; (8023a64 <__ssvfiscanf_r+0x29c>)
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	f43f aefc 	beq.w	8023828 <__ssvfiscanf_r+0x60>
 8023a30:	466b      	mov	r3, sp
 8023a32:	4622      	mov	r2, r4
 8023a34:	a941      	add	r1, sp, #260	; 0x104
 8023a36:	4630      	mov	r0, r6
 8023a38:	f3af 8000 	nop.w
 8023a3c:	e77d      	b.n	802393a <__ssvfiscanf_r+0x172>
 8023a3e:	89a3      	ldrh	r3, [r4, #12]
 8023a40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023a44:	bf18      	it	ne
 8023a46:	f04f 30ff 	movne.w	r0, #4294967295
 8023a4a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a52:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023a54:	e7f9      	b.n	8023a4a <__ssvfiscanf_r+0x282>
 8023a56:	bf00      	nop
 8023a58:	08023715 	.word	0x08023715
 8023a5c:	0802378f 	.word	0x0802378f
 8023a60:	08026bfa 	.word	0x08026bfa
 8023a64:	00000000 	.word	0x00000000

08023a68 <_scanf_chars>:
 8023a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a6c:	4615      	mov	r5, r2
 8023a6e:	688a      	ldr	r2, [r1, #8]
 8023a70:	4680      	mov	r8, r0
 8023a72:	460c      	mov	r4, r1
 8023a74:	b932      	cbnz	r2, 8023a84 <_scanf_chars+0x1c>
 8023a76:	698a      	ldr	r2, [r1, #24]
 8023a78:	2a00      	cmp	r2, #0
 8023a7a:	bf14      	ite	ne
 8023a7c:	f04f 32ff 	movne.w	r2, #4294967295
 8023a80:	2201      	moveq	r2, #1
 8023a82:	608a      	str	r2, [r1, #8]
 8023a84:	6822      	ldr	r2, [r4, #0]
 8023a86:	06d1      	lsls	r1, r2, #27
 8023a88:	bf5f      	itttt	pl
 8023a8a:	681a      	ldrpl	r2, [r3, #0]
 8023a8c:	1d11      	addpl	r1, r2, #4
 8023a8e:	6019      	strpl	r1, [r3, #0]
 8023a90:	6817      	ldrpl	r7, [r2, #0]
 8023a92:	2600      	movs	r6, #0
 8023a94:	69a3      	ldr	r3, [r4, #24]
 8023a96:	b1db      	cbz	r3, 8023ad0 <_scanf_chars+0x68>
 8023a98:	2b01      	cmp	r3, #1
 8023a9a:	d107      	bne.n	8023aac <_scanf_chars+0x44>
 8023a9c:	682b      	ldr	r3, [r5, #0]
 8023a9e:	6962      	ldr	r2, [r4, #20]
 8023aa0:	781b      	ldrb	r3, [r3, #0]
 8023aa2:	5cd3      	ldrb	r3, [r2, r3]
 8023aa4:	b9a3      	cbnz	r3, 8023ad0 <_scanf_chars+0x68>
 8023aa6:	2e00      	cmp	r6, #0
 8023aa8:	d132      	bne.n	8023b10 <_scanf_chars+0xa8>
 8023aaa:	e006      	b.n	8023aba <_scanf_chars+0x52>
 8023aac:	2b02      	cmp	r3, #2
 8023aae:	d007      	beq.n	8023ac0 <_scanf_chars+0x58>
 8023ab0:	2e00      	cmp	r6, #0
 8023ab2:	d12d      	bne.n	8023b10 <_scanf_chars+0xa8>
 8023ab4:	69a3      	ldr	r3, [r4, #24]
 8023ab6:	2b01      	cmp	r3, #1
 8023ab8:	d12a      	bne.n	8023b10 <_scanf_chars+0xa8>
 8023aba:	2001      	movs	r0, #1
 8023abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ac0:	f7ff f9fc 	bl	8022ebc <__locale_ctype_ptr>
 8023ac4:	682b      	ldr	r3, [r5, #0]
 8023ac6:	781b      	ldrb	r3, [r3, #0]
 8023ac8:	4418      	add	r0, r3
 8023aca:	7843      	ldrb	r3, [r0, #1]
 8023acc:	071b      	lsls	r3, r3, #28
 8023ace:	d4ef      	bmi.n	8023ab0 <_scanf_chars+0x48>
 8023ad0:	6823      	ldr	r3, [r4, #0]
 8023ad2:	06da      	lsls	r2, r3, #27
 8023ad4:	bf5e      	ittt	pl
 8023ad6:	682b      	ldrpl	r3, [r5, #0]
 8023ad8:	781b      	ldrbpl	r3, [r3, #0]
 8023ada:	703b      	strbpl	r3, [r7, #0]
 8023adc:	682a      	ldr	r2, [r5, #0]
 8023ade:	686b      	ldr	r3, [r5, #4]
 8023ae0:	f102 0201 	add.w	r2, r2, #1
 8023ae4:	602a      	str	r2, [r5, #0]
 8023ae6:	68a2      	ldr	r2, [r4, #8]
 8023ae8:	f103 33ff 	add.w	r3, r3, #4294967295
 8023aec:	f102 32ff 	add.w	r2, r2, #4294967295
 8023af0:	606b      	str	r3, [r5, #4]
 8023af2:	f106 0601 	add.w	r6, r6, #1
 8023af6:	bf58      	it	pl
 8023af8:	3701      	addpl	r7, #1
 8023afa:	60a2      	str	r2, [r4, #8]
 8023afc:	b142      	cbz	r2, 8023b10 <_scanf_chars+0xa8>
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	dcc8      	bgt.n	8023a94 <_scanf_chars+0x2c>
 8023b02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023b06:	4629      	mov	r1, r5
 8023b08:	4640      	mov	r0, r8
 8023b0a:	4798      	blx	r3
 8023b0c:	2800      	cmp	r0, #0
 8023b0e:	d0c1      	beq.n	8023a94 <_scanf_chars+0x2c>
 8023b10:	6823      	ldr	r3, [r4, #0]
 8023b12:	f013 0310 	ands.w	r3, r3, #16
 8023b16:	d105      	bne.n	8023b24 <_scanf_chars+0xbc>
 8023b18:	68e2      	ldr	r2, [r4, #12]
 8023b1a:	3201      	adds	r2, #1
 8023b1c:	60e2      	str	r2, [r4, #12]
 8023b1e:	69a2      	ldr	r2, [r4, #24]
 8023b20:	b102      	cbz	r2, 8023b24 <_scanf_chars+0xbc>
 8023b22:	703b      	strb	r3, [r7, #0]
 8023b24:	6923      	ldr	r3, [r4, #16]
 8023b26:	441e      	add	r6, r3
 8023b28:	6126      	str	r6, [r4, #16]
 8023b2a:	2000      	movs	r0, #0
 8023b2c:	e7c6      	b.n	8023abc <_scanf_chars+0x54>
	...

08023b30 <_scanf_i>:
 8023b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b34:	469a      	mov	sl, r3
 8023b36:	4b74      	ldr	r3, [pc, #464]	; (8023d08 <_scanf_i+0x1d8>)
 8023b38:	460c      	mov	r4, r1
 8023b3a:	4683      	mov	fp, r0
 8023b3c:	4616      	mov	r6, r2
 8023b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023b42:	b087      	sub	sp, #28
 8023b44:	ab03      	add	r3, sp, #12
 8023b46:	68a7      	ldr	r7, [r4, #8]
 8023b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023b4c:	4b6f      	ldr	r3, [pc, #444]	; (8023d0c <_scanf_i+0x1dc>)
 8023b4e:	69a1      	ldr	r1, [r4, #24]
 8023b50:	4a6f      	ldr	r2, [pc, #444]	; (8023d10 <_scanf_i+0x1e0>)
 8023b52:	2903      	cmp	r1, #3
 8023b54:	bf08      	it	eq
 8023b56:	461a      	moveq	r2, r3
 8023b58:	1e7b      	subs	r3, r7, #1
 8023b5a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8023b5e:	bf84      	itt	hi
 8023b60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8023b64:	60a3      	strhi	r3, [r4, #8]
 8023b66:	6823      	ldr	r3, [r4, #0]
 8023b68:	9200      	str	r2, [sp, #0]
 8023b6a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023b6e:	bf88      	it	hi
 8023b70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023b74:	f104 091c 	add.w	r9, r4, #28
 8023b78:	6023      	str	r3, [r4, #0]
 8023b7a:	bf8c      	ite	hi
 8023b7c:	197f      	addhi	r7, r7, r5
 8023b7e:	2700      	movls	r7, #0
 8023b80:	464b      	mov	r3, r9
 8023b82:	f04f 0800 	mov.w	r8, #0
 8023b86:	9301      	str	r3, [sp, #4]
 8023b88:	6831      	ldr	r1, [r6, #0]
 8023b8a:	ab03      	add	r3, sp, #12
 8023b8c:	2202      	movs	r2, #2
 8023b8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023b92:	7809      	ldrb	r1, [r1, #0]
 8023b94:	f7dc fb1c 	bl	80001d0 <memchr>
 8023b98:	9b01      	ldr	r3, [sp, #4]
 8023b9a:	b330      	cbz	r0, 8023bea <_scanf_i+0xba>
 8023b9c:	f1b8 0f01 	cmp.w	r8, #1
 8023ba0:	d15a      	bne.n	8023c58 <_scanf_i+0x128>
 8023ba2:	6862      	ldr	r2, [r4, #4]
 8023ba4:	b92a      	cbnz	r2, 8023bb2 <_scanf_i+0x82>
 8023ba6:	6822      	ldr	r2, [r4, #0]
 8023ba8:	2108      	movs	r1, #8
 8023baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023bae:	6061      	str	r1, [r4, #4]
 8023bb0:	6022      	str	r2, [r4, #0]
 8023bb2:	6822      	ldr	r2, [r4, #0]
 8023bb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8023bb8:	6022      	str	r2, [r4, #0]
 8023bba:	68a2      	ldr	r2, [r4, #8]
 8023bbc:	1e51      	subs	r1, r2, #1
 8023bbe:	60a1      	str	r1, [r4, #8]
 8023bc0:	b19a      	cbz	r2, 8023bea <_scanf_i+0xba>
 8023bc2:	6832      	ldr	r2, [r6, #0]
 8023bc4:	1c51      	adds	r1, r2, #1
 8023bc6:	6031      	str	r1, [r6, #0]
 8023bc8:	7812      	ldrb	r2, [r2, #0]
 8023bca:	701a      	strb	r2, [r3, #0]
 8023bcc:	1c5d      	adds	r5, r3, #1
 8023bce:	6873      	ldr	r3, [r6, #4]
 8023bd0:	3b01      	subs	r3, #1
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	6073      	str	r3, [r6, #4]
 8023bd6:	dc07      	bgt.n	8023be8 <_scanf_i+0xb8>
 8023bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023bdc:	4631      	mov	r1, r6
 8023bde:	4658      	mov	r0, fp
 8023be0:	4798      	blx	r3
 8023be2:	2800      	cmp	r0, #0
 8023be4:	f040 8086 	bne.w	8023cf4 <_scanf_i+0x1c4>
 8023be8:	462b      	mov	r3, r5
 8023bea:	f108 0801 	add.w	r8, r8, #1
 8023bee:	f1b8 0f03 	cmp.w	r8, #3
 8023bf2:	d1c8      	bne.n	8023b86 <_scanf_i+0x56>
 8023bf4:	6862      	ldr	r2, [r4, #4]
 8023bf6:	b90a      	cbnz	r2, 8023bfc <_scanf_i+0xcc>
 8023bf8:	220a      	movs	r2, #10
 8023bfa:	6062      	str	r2, [r4, #4]
 8023bfc:	6862      	ldr	r2, [r4, #4]
 8023bfe:	4945      	ldr	r1, [pc, #276]	; (8023d14 <_scanf_i+0x1e4>)
 8023c00:	6960      	ldr	r0, [r4, #20]
 8023c02:	9301      	str	r3, [sp, #4]
 8023c04:	1a89      	subs	r1, r1, r2
 8023c06:	f000 f899 	bl	8023d3c <__sccl>
 8023c0a:	9b01      	ldr	r3, [sp, #4]
 8023c0c:	f04f 0800 	mov.w	r8, #0
 8023c10:	461d      	mov	r5, r3
 8023c12:	68a3      	ldr	r3, [r4, #8]
 8023c14:	6822      	ldr	r2, [r4, #0]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	d03a      	beq.n	8023c90 <_scanf_i+0x160>
 8023c1a:	6831      	ldr	r1, [r6, #0]
 8023c1c:	6960      	ldr	r0, [r4, #20]
 8023c1e:	f891 c000 	ldrb.w	ip, [r1]
 8023c22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023c26:	2800      	cmp	r0, #0
 8023c28:	d032      	beq.n	8023c90 <_scanf_i+0x160>
 8023c2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8023c2e:	d121      	bne.n	8023c74 <_scanf_i+0x144>
 8023c30:	0510      	lsls	r0, r2, #20
 8023c32:	d51f      	bpl.n	8023c74 <_scanf_i+0x144>
 8023c34:	f108 0801 	add.w	r8, r8, #1
 8023c38:	b117      	cbz	r7, 8023c40 <_scanf_i+0x110>
 8023c3a:	3301      	adds	r3, #1
 8023c3c:	3f01      	subs	r7, #1
 8023c3e:	60a3      	str	r3, [r4, #8]
 8023c40:	6873      	ldr	r3, [r6, #4]
 8023c42:	3b01      	subs	r3, #1
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	6073      	str	r3, [r6, #4]
 8023c48:	dd1b      	ble.n	8023c82 <_scanf_i+0x152>
 8023c4a:	6833      	ldr	r3, [r6, #0]
 8023c4c:	3301      	adds	r3, #1
 8023c4e:	6033      	str	r3, [r6, #0]
 8023c50:	68a3      	ldr	r3, [r4, #8]
 8023c52:	3b01      	subs	r3, #1
 8023c54:	60a3      	str	r3, [r4, #8]
 8023c56:	e7dc      	b.n	8023c12 <_scanf_i+0xe2>
 8023c58:	f1b8 0f02 	cmp.w	r8, #2
 8023c5c:	d1ad      	bne.n	8023bba <_scanf_i+0x8a>
 8023c5e:	6822      	ldr	r2, [r4, #0]
 8023c60:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8023c64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023c68:	d1bf      	bne.n	8023bea <_scanf_i+0xba>
 8023c6a:	2110      	movs	r1, #16
 8023c6c:	6061      	str	r1, [r4, #4]
 8023c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023c72:	e7a1      	b.n	8023bb8 <_scanf_i+0x88>
 8023c74:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023c78:	6022      	str	r2, [r4, #0]
 8023c7a:	780b      	ldrb	r3, [r1, #0]
 8023c7c:	702b      	strb	r3, [r5, #0]
 8023c7e:	3501      	adds	r5, #1
 8023c80:	e7de      	b.n	8023c40 <_scanf_i+0x110>
 8023c82:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023c86:	4631      	mov	r1, r6
 8023c88:	4658      	mov	r0, fp
 8023c8a:	4798      	blx	r3
 8023c8c:	2800      	cmp	r0, #0
 8023c8e:	d0df      	beq.n	8023c50 <_scanf_i+0x120>
 8023c90:	6823      	ldr	r3, [r4, #0]
 8023c92:	05d9      	lsls	r1, r3, #23
 8023c94:	d50c      	bpl.n	8023cb0 <_scanf_i+0x180>
 8023c96:	454d      	cmp	r5, r9
 8023c98:	d908      	bls.n	8023cac <_scanf_i+0x17c>
 8023c9a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8023ca2:	4632      	mov	r2, r6
 8023ca4:	4658      	mov	r0, fp
 8023ca6:	4798      	blx	r3
 8023ca8:	1e6f      	subs	r7, r5, #1
 8023caa:	463d      	mov	r5, r7
 8023cac:	454d      	cmp	r5, r9
 8023cae:	d029      	beq.n	8023d04 <_scanf_i+0x1d4>
 8023cb0:	6822      	ldr	r2, [r4, #0]
 8023cb2:	f012 0210 	ands.w	r2, r2, #16
 8023cb6:	d113      	bne.n	8023ce0 <_scanf_i+0x1b0>
 8023cb8:	702a      	strb	r2, [r5, #0]
 8023cba:	6863      	ldr	r3, [r4, #4]
 8023cbc:	9e00      	ldr	r6, [sp, #0]
 8023cbe:	4649      	mov	r1, r9
 8023cc0:	4658      	mov	r0, fp
 8023cc2:	47b0      	blx	r6
 8023cc4:	f8da 3000 	ldr.w	r3, [sl]
 8023cc8:	6821      	ldr	r1, [r4, #0]
 8023cca:	1d1a      	adds	r2, r3, #4
 8023ccc:	f8ca 2000 	str.w	r2, [sl]
 8023cd0:	f011 0f20 	tst.w	r1, #32
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	d010      	beq.n	8023cfa <_scanf_i+0x1ca>
 8023cd8:	6018      	str	r0, [r3, #0]
 8023cda:	68e3      	ldr	r3, [r4, #12]
 8023cdc:	3301      	adds	r3, #1
 8023cde:	60e3      	str	r3, [r4, #12]
 8023ce0:	eba5 0509 	sub.w	r5, r5, r9
 8023ce4:	44a8      	add	r8, r5
 8023ce6:	6925      	ldr	r5, [r4, #16]
 8023ce8:	4445      	add	r5, r8
 8023cea:	6125      	str	r5, [r4, #16]
 8023cec:	2000      	movs	r0, #0
 8023cee:	b007      	add	sp, #28
 8023cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cf4:	f04f 0800 	mov.w	r8, #0
 8023cf8:	e7ca      	b.n	8023c90 <_scanf_i+0x160>
 8023cfa:	07ca      	lsls	r2, r1, #31
 8023cfc:	bf4c      	ite	mi
 8023cfe:	8018      	strhmi	r0, [r3, #0]
 8023d00:	6018      	strpl	r0, [r3, #0]
 8023d02:	e7ea      	b.n	8023cda <_scanf_i+0x1aa>
 8023d04:	2001      	movs	r0, #1
 8023d06:	e7f2      	b.n	8023cee <_scanf_i+0x1be>
 8023d08:	0802687c 	.word	0x0802687c
 8023d0c:	080224cd 	.word	0x080224cd
 8023d10:	080235e9 	.word	0x080235e9
 8023d14:	08026e41 	.word	0x08026e41

08023d18 <_read_r>:
 8023d18:	b538      	push	{r3, r4, r5, lr}
 8023d1a:	4c07      	ldr	r4, [pc, #28]	; (8023d38 <_read_r+0x20>)
 8023d1c:	4605      	mov	r5, r0
 8023d1e:	4608      	mov	r0, r1
 8023d20:	4611      	mov	r1, r2
 8023d22:	2200      	movs	r2, #0
 8023d24:	6022      	str	r2, [r4, #0]
 8023d26:	461a      	mov	r2, r3
 8023d28:	f7ea f83e 	bl	800dda8 <_read>
 8023d2c:	1c43      	adds	r3, r0, #1
 8023d2e:	d102      	bne.n	8023d36 <_read_r+0x1e>
 8023d30:	6823      	ldr	r3, [r4, #0]
 8023d32:	b103      	cbz	r3, 8023d36 <_read_r+0x1e>
 8023d34:	602b      	str	r3, [r5, #0]
 8023d36:	bd38      	pop	{r3, r4, r5, pc}
 8023d38:	200022dc 	.word	0x200022dc

08023d3c <__sccl>:
 8023d3c:	b570      	push	{r4, r5, r6, lr}
 8023d3e:	780b      	ldrb	r3, [r1, #0]
 8023d40:	2b5e      	cmp	r3, #94	; 0x5e
 8023d42:	bf13      	iteet	ne
 8023d44:	1c4a      	addne	r2, r1, #1
 8023d46:	1c8a      	addeq	r2, r1, #2
 8023d48:	784b      	ldrbeq	r3, [r1, #1]
 8023d4a:	2100      	movne	r1, #0
 8023d4c:	bf08      	it	eq
 8023d4e:	2101      	moveq	r1, #1
 8023d50:	1e44      	subs	r4, r0, #1
 8023d52:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8023d56:	f804 1f01 	strb.w	r1, [r4, #1]!
 8023d5a:	42ac      	cmp	r4, r5
 8023d5c:	d1fb      	bne.n	8023d56 <__sccl+0x1a>
 8023d5e:	b913      	cbnz	r3, 8023d66 <__sccl+0x2a>
 8023d60:	3a01      	subs	r2, #1
 8023d62:	4610      	mov	r0, r2
 8023d64:	bd70      	pop	{r4, r5, r6, pc}
 8023d66:	f081 0401 	eor.w	r4, r1, #1
 8023d6a:	54c4      	strb	r4, [r0, r3]
 8023d6c:	1c51      	adds	r1, r2, #1
 8023d6e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8023d72:	2d2d      	cmp	r5, #45	; 0x2d
 8023d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8023d78:	460a      	mov	r2, r1
 8023d7a:	d006      	beq.n	8023d8a <__sccl+0x4e>
 8023d7c:	2d5d      	cmp	r5, #93	; 0x5d
 8023d7e:	d0f0      	beq.n	8023d62 <__sccl+0x26>
 8023d80:	b90d      	cbnz	r5, 8023d86 <__sccl+0x4a>
 8023d82:	4632      	mov	r2, r6
 8023d84:	e7ed      	b.n	8023d62 <__sccl+0x26>
 8023d86:	462b      	mov	r3, r5
 8023d88:	e7ef      	b.n	8023d6a <__sccl+0x2e>
 8023d8a:	780e      	ldrb	r6, [r1, #0]
 8023d8c:	2e5d      	cmp	r6, #93	; 0x5d
 8023d8e:	d0fa      	beq.n	8023d86 <__sccl+0x4a>
 8023d90:	42b3      	cmp	r3, r6
 8023d92:	dcf8      	bgt.n	8023d86 <__sccl+0x4a>
 8023d94:	3301      	adds	r3, #1
 8023d96:	429e      	cmp	r6, r3
 8023d98:	54c4      	strb	r4, [r0, r3]
 8023d9a:	dcfb      	bgt.n	8023d94 <__sccl+0x58>
 8023d9c:	3102      	adds	r1, #2
 8023d9e:	e7e6      	b.n	8023d6e <__sccl+0x32>

08023da0 <__submore>:
 8023da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023da4:	460c      	mov	r4, r1
 8023da6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023dac:	4299      	cmp	r1, r3
 8023dae:	d11d      	bne.n	8023dec <__submore+0x4c>
 8023db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023db4:	f7fd fed4 	bl	8021b60 <_malloc_r>
 8023db8:	b918      	cbnz	r0, 8023dc2 <__submore+0x22>
 8023dba:	f04f 30ff 	mov.w	r0, #4294967295
 8023dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023dc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8023dc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8023dce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8023dd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023dd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8023dda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023dde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8023de2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8023de6:	6020      	str	r0, [r4, #0]
 8023de8:	2000      	movs	r0, #0
 8023dea:	e7e8      	b.n	8023dbe <__submore+0x1e>
 8023dec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023dee:	0077      	lsls	r7, r6, #1
 8023df0:	463a      	mov	r2, r7
 8023df2:	f7ff f902 	bl	8022ffa <_realloc_r>
 8023df6:	4605      	mov	r5, r0
 8023df8:	2800      	cmp	r0, #0
 8023dfa:	d0de      	beq.n	8023dba <__submore+0x1a>
 8023dfc:	eb00 0806 	add.w	r8, r0, r6
 8023e00:	4601      	mov	r1, r0
 8023e02:	4632      	mov	r2, r6
 8023e04:	4640      	mov	r0, r8
 8023e06:	f7fd fbb5 	bl	8021574 <memcpy>
 8023e0a:	f8c4 8000 	str.w	r8, [r4]
 8023e0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023e12:	e7e9      	b.n	8023de8 <__submore+0x48>
 8023e14:	0000      	movs	r0, r0
	...

08023e18 <ceil>:
 8023e18:	ec51 0b10 	vmov	r0, r1, d0
 8023e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023e24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023e28:	2e13      	cmp	r6, #19
 8023e2a:	460c      	mov	r4, r1
 8023e2c:	ee10 5a10 	vmov	r5, s0
 8023e30:	4680      	mov	r8, r0
 8023e32:	dc30      	bgt.n	8023e96 <ceil+0x7e>
 8023e34:	2e00      	cmp	r6, #0
 8023e36:	da12      	bge.n	8023e5e <ceil+0x46>
 8023e38:	a333      	add	r3, pc, #204	; (adr r3, 8023f08 <ceil+0xf0>)
 8023e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e3e:	f7dc fa2f 	bl	80002a0 <__adddf3>
 8023e42:	2200      	movs	r2, #0
 8023e44:	2300      	movs	r3, #0
 8023e46:	f7dc fe71 	bl	8000b2c <__aeabi_dcmpgt>
 8023e4a:	b128      	cbz	r0, 8023e58 <ceil+0x40>
 8023e4c:	2c00      	cmp	r4, #0
 8023e4e:	db55      	blt.n	8023efc <ceil+0xe4>
 8023e50:	432c      	orrs	r4, r5
 8023e52:	d057      	beq.n	8023f04 <ceil+0xec>
 8023e54:	4c2e      	ldr	r4, [pc, #184]	; (8023f10 <ceil+0xf8>)
 8023e56:	2500      	movs	r5, #0
 8023e58:	4621      	mov	r1, r4
 8023e5a:	4628      	mov	r0, r5
 8023e5c:	e025      	b.n	8023eaa <ceil+0x92>
 8023e5e:	4f2d      	ldr	r7, [pc, #180]	; (8023f14 <ceil+0xfc>)
 8023e60:	4137      	asrs	r7, r6
 8023e62:	ea01 0307 	and.w	r3, r1, r7
 8023e66:	4303      	orrs	r3, r0
 8023e68:	d01f      	beq.n	8023eaa <ceil+0x92>
 8023e6a:	a327      	add	r3, pc, #156	; (adr r3, 8023f08 <ceil+0xf0>)
 8023e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e70:	f7dc fa16 	bl	80002a0 <__adddf3>
 8023e74:	2200      	movs	r2, #0
 8023e76:	2300      	movs	r3, #0
 8023e78:	f7dc fe58 	bl	8000b2c <__aeabi_dcmpgt>
 8023e7c:	2800      	cmp	r0, #0
 8023e7e:	d0eb      	beq.n	8023e58 <ceil+0x40>
 8023e80:	2c00      	cmp	r4, #0
 8023e82:	bfc2      	ittt	gt
 8023e84:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8023e88:	fa43 f606 	asrgt.w	r6, r3, r6
 8023e8c:	19a4      	addgt	r4, r4, r6
 8023e8e:	ea24 0407 	bic.w	r4, r4, r7
 8023e92:	2500      	movs	r5, #0
 8023e94:	e7e0      	b.n	8023e58 <ceil+0x40>
 8023e96:	2e33      	cmp	r6, #51	; 0x33
 8023e98:	dd0b      	ble.n	8023eb2 <ceil+0x9a>
 8023e9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023e9e:	d104      	bne.n	8023eaa <ceil+0x92>
 8023ea0:	ee10 2a10 	vmov	r2, s0
 8023ea4:	460b      	mov	r3, r1
 8023ea6:	f7dc f9fb 	bl	80002a0 <__adddf3>
 8023eaa:	ec41 0b10 	vmov	d0, r0, r1
 8023eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023eb2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8023eba:	fa23 f707 	lsr.w	r7, r3, r7
 8023ebe:	4207      	tst	r7, r0
 8023ec0:	d0f3      	beq.n	8023eaa <ceil+0x92>
 8023ec2:	a311      	add	r3, pc, #68	; (adr r3, 8023f08 <ceil+0xf0>)
 8023ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ec8:	f7dc f9ea 	bl	80002a0 <__adddf3>
 8023ecc:	2200      	movs	r2, #0
 8023ece:	2300      	movs	r3, #0
 8023ed0:	f7dc fe2c 	bl	8000b2c <__aeabi_dcmpgt>
 8023ed4:	2800      	cmp	r0, #0
 8023ed6:	d0bf      	beq.n	8023e58 <ceil+0x40>
 8023ed8:	2c00      	cmp	r4, #0
 8023eda:	dd02      	ble.n	8023ee2 <ceil+0xca>
 8023edc:	2e14      	cmp	r6, #20
 8023ede:	d103      	bne.n	8023ee8 <ceil+0xd0>
 8023ee0:	3401      	adds	r4, #1
 8023ee2:	ea25 0507 	bic.w	r5, r5, r7
 8023ee6:	e7b7      	b.n	8023e58 <ceil+0x40>
 8023ee8:	2301      	movs	r3, #1
 8023eea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023eee:	fa03 f606 	lsl.w	r6, r3, r6
 8023ef2:	4435      	add	r5, r6
 8023ef4:	4545      	cmp	r5, r8
 8023ef6:	bf38      	it	cc
 8023ef8:	18e4      	addcc	r4, r4, r3
 8023efa:	e7f2      	b.n	8023ee2 <ceil+0xca>
 8023efc:	2500      	movs	r5, #0
 8023efe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023f02:	e7a9      	b.n	8023e58 <ceil+0x40>
 8023f04:	4625      	mov	r5, r4
 8023f06:	e7a7      	b.n	8023e58 <ceil+0x40>
 8023f08:	8800759c 	.word	0x8800759c
 8023f0c:	7e37e43c 	.word	0x7e37e43c
 8023f10:	3ff00000 	.word	0x3ff00000
 8023f14:	000fffff 	.word	0x000fffff

08023f18 <pow>:
 8023f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f1c:	ed2d 8b04 	vpush	{d8-d9}
 8023f20:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80241f4 <pow+0x2dc>
 8023f24:	b08d      	sub	sp, #52	; 0x34
 8023f26:	ec57 6b10 	vmov	r6, r7, d0
 8023f2a:	ec55 4b11 	vmov	r4, r5, d1
 8023f2e:	f000 f963 	bl	80241f8 <__ieee754_pow>
 8023f32:	f999 3000 	ldrsb.w	r3, [r9]
 8023f36:	9300      	str	r3, [sp, #0]
 8023f38:	3301      	adds	r3, #1
 8023f3a:	eeb0 8a40 	vmov.f32	s16, s0
 8023f3e:	eef0 8a60 	vmov.f32	s17, s1
 8023f42:	46c8      	mov	r8, r9
 8023f44:	d05f      	beq.n	8024006 <pow+0xee>
 8023f46:	4622      	mov	r2, r4
 8023f48:	462b      	mov	r3, r5
 8023f4a:	4620      	mov	r0, r4
 8023f4c:	4629      	mov	r1, r5
 8023f4e:	f7dc fdf7 	bl	8000b40 <__aeabi_dcmpun>
 8023f52:	4683      	mov	fp, r0
 8023f54:	2800      	cmp	r0, #0
 8023f56:	d156      	bne.n	8024006 <pow+0xee>
 8023f58:	4632      	mov	r2, r6
 8023f5a:	463b      	mov	r3, r7
 8023f5c:	4630      	mov	r0, r6
 8023f5e:	4639      	mov	r1, r7
 8023f60:	f7dc fdee 	bl	8000b40 <__aeabi_dcmpun>
 8023f64:	9001      	str	r0, [sp, #4]
 8023f66:	b1e8      	cbz	r0, 8023fa4 <pow+0x8c>
 8023f68:	2200      	movs	r2, #0
 8023f6a:	2300      	movs	r3, #0
 8023f6c:	4620      	mov	r0, r4
 8023f6e:	4629      	mov	r1, r5
 8023f70:	f7dc fdb4 	bl	8000adc <__aeabi_dcmpeq>
 8023f74:	2800      	cmp	r0, #0
 8023f76:	d046      	beq.n	8024006 <pow+0xee>
 8023f78:	2301      	movs	r3, #1
 8023f7a:	9302      	str	r3, [sp, #8]
 8023f7c:	4b96      	ldr	r3, [pc, #600]	; (80241d8 <pow+0x2c0>)
 8023f7e:	9303      	str	r3, [sp, #12]
 8023f80:	4b96      	ldr	r3, [pc, #600]	; (80241dc <pow+0x2c4>)
 8023f82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8023f86:	2200      	movs	r2, #0
 8023f88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023f8c:	9b00      	ldr	r3, [sp, #0]
 8023f8e:	2b02      	cmp	r3, #2
 8023f90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023f94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023f98:	d033      	beq.n	8024002 <pow+0xea>
 8023f9a:	a802      	add	r0, sp, #8
 8023f9c:	f000 fefb 	bl	8024d96 <matherr>
 8023fa0:	bb48      	cbnz	r0, 8023ff6 <pow+0xde>
 8023fa2:	e05d      	b.n	8024060 <pow+0x148>
 8023fa4:	f04f 0a00 	mov.w	sl, #0
 8023fa8:	f04f 0b00 	mov.w	fp, #0
 8023fac:	4652      	mov	r2, sl
 8023fae:	465b      	mov	r3, fp
 8023fb0:	4630      	mov	r0, r6
 8023fb2:	4639      	mov	r1, r7
 8023fb4:	f7dc fd92 	bl	8000adc <__aeabi_dcmpeq>
 8023fb8:	ec4b ab19 	vmov	d9, sl, fp
 8023fbc:	2800      	cmp	r0, #0
 8023fbe:	d054      	beq.n	802406a <pow+0x152>
 8023fc0:	4652      	mov	r2, sl
 8023fc2:	465b      	mov	r3, fp
 8023fc4:	4620      	mov	r0, r4
 8023fc6:	4629      	mov	r1, r5
 8023fc8:	f7dc fd88 	bl	8000adc <__aeabi_dcmpeq>
 8023fcc:	4680      	mov	r8, r0
 8023fce:	b318      	cbz	r0, 8024018 <pow+0x100>
 8023fd0:	2301      	movs	r3, #1
 8023fd2:	9302      	str	r3, [sp, #8]
 8023fd4:	4b80      	ldr	r3, [pc, #512]	; (80241d8 <pow+0x2c0>)
 8023fd6:	9303      	str	r3, [sp, #12]
 8023fd8:	9b01      	ldr	r3, [sp, #4]
 8023fda:	930a      	str	r3, [sp, #40]	; 0x28
 8023fdc:	9b00      	ldr	r3, [sp, #0]
 8023fde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023fe2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023fe6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	d0d5      	beq.n	8023f9a <pow+0x82>
 8023fee:	4b7b      	ldr	r3, [pc, #492]	; (80241dc <pow+0x2c4>)
 8023ff0:	2200      	movs	r2, #0
 8023ff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ff8:	b11b      	cbz	r3, 8024002 <pow+0xea>
 8023ffa:	f000 ffe3 	bl	8024fc4 <__errno>
 8023ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024000:	6003      	str	r3, [r0, #0]
 8024002:	ed9d 8b08 	vldr	d8, [sp, #32]
 8024006:	eeb0 0a48 	vmov.f32	s0, s16
 802400a:	eef0 0a68 	vmov.f32	s1, s17
 802400e:	b00d      	add	sp, #52	; 0x34
 8024010:	ecbd 8b04 	vpop	{d8-d9}
 8024014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024018:	ec45 4b10 	vmov	d0, r4, r5
 802401c:	f000 feb3 	bl	8024d86 <finite>
 8024020:	2800      	cmp	r0, #0
 8024022:	d0f0      	beq.n	8024006 <pow+0xee>
 8024024:	4652      	mov	r2, sl
 8024026:	465b      	mov	r3, fp
 8024028:	4620      	mov	r0, r4
 802402a:	4629      	mov	r1, r5
 802402c:	f7dc fd60 	bl	8000af0 <__aeabi_dcmplt>
 8024030:	2800      	cmp	r0, #0
 8024032:	d0e8      	beq.n	8024006 <pow+0xee>
 8024034:	2301      	movs	r3, #1
 8024036:	9302      	str	r3, [sp, #8]
 8024038:	4b67      	ldr	r3, [pc, #412]	; (80241d8 <pow+0x2c0>)
 802403a:	9303      	str	r3, [sp, #12]
 802403c:	f999 3000 	ldrsb.w	r3, [r9]
 8024040:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8024044:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8024048:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802404c:	b913      	cbnz	r3, 8024054 <pow+0x13c>
 802404e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8024052:	e7a2      	b.n	8023f9a <pow+0x82>
 8024054:	4962      	ldr	r1, [pc, #392]	; (80241e0 <pow+0x2c8>)
 8024056:	2000      	movs	r0, #0
 8024058:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802405c:	2b02      	cmp	r3, #2
 802405e:	d19c      	bne.n	8023f9a <pow+0x82>
 8024060:	f000 ffb0 	bl	8024fc4 <__errno>
 8024064:	2321      	movs	r3, #33	; 0x21
 8024066:	6003      	str	r3, [r0, #0]
 8024068:	e7c5      	b.n	8023ff6 <pow+0xde>
 802406a:	eeb0 0a48 	vmov.f32	s0, s16
 802406e:	eef0 0a68 	vmov.f32	s1, s17
 8024072:	f000 fe88 	bl	8024d86 <finite>
 8024076:	9000      	str	r0, [sp, #0]
 8024078:	2800      	cmp	r0, #0
 802407a:	f040 8081 	bne.w	8024180 <pow+0x268>
 802407e:	ec47 6b10 	vmov	d0, r6, r7
 8024082:	f000 fe80 	bl	8024d86 <finite>
 8024086:	2800      	cmp	r0, #0
 8024088:	d07a      	beq.n	8024180 <pow+0x268>
 802408a:	ec45 4b10 	vmov	d0, r4, r5
 802408e:	f000 fe7a 	bl	8024d86 <finite>
 8024092:	2800      	cmp	r0, #0
 8024094:	d074      	beq.n	8024180 <pow+0x268>
 8024096:	ec53 2b18 	vmov	r2, r3, d8
 802409a:	ee18 0a10 	vmov	r0, s16
 802409e:	4619      	mov	r1, r3
 80240a0:	f7dc fd4e 	bl	8000b40 <__aeabi_dcmpun>
 80240a4:	f999 9000 	ldrsb.w	r9, [r9]
 80240a8:	4b4b      	ldr	r3, [pc, #300]	; (80241d8 <pow+0x2c0>)
 80240aa:	b1b0      	cbz	r0, 80240da <pow+0x1c2>
 80240ac:	2201      	movs	r2, #1
 80240ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80240b2:	9b00      	ldr	r3, [sp, #0]
 80240b4:	930a      	str	r3, [sp, #40]	; 0x28
 80240b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80240ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80240be:	f1b9 0f00 	cmp.w	r9, #0
 80240c2:	d0c4      	beq.n	802404e <pow+0x136>
 80240c4:	4652      	mov	r2, sl
 80240c6:	465b      	mov	r3, fp
 80240c8:	4650      	mov	r0, sl
 80240ca:	4659      	mov	r1, fp
 80240cc:	f7dc fbc8 	bl	8000860 <__aeabi_ddiv>
 80240d0:	f1b9 0f02 	cmp.w	r9, #2
 80240d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80240d8:	e7c1      	b.n	802405e <pow+0x146>
 80240da:	2203      	movs	r2, #3
 80240dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80240e0:	900a      	str	r0, [sp, #40]	; 0x28
 80240e2:	4629      	mov	r1, r5
 80240e4:	4620      	mov	r0, r4
 80240e6:	2200      	movs	r2, #0
 80240e8:	4b3e      	ldr	r3, [pc, #248]	; (80241e4 <pow+0x2cc>)
 80240ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80240ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80240f2:	f7dc fa8b 	bl	800060c <__aeabi_dmul>
 80240f6:	4604      	mov	r4, r0
 80240f8:	460d      	mov	r5, r1
 80240fa:	f1b9 0f00 	cmp.w	r9, #0
 80240fe:	d124      	bne.n	802414a <pow+0x232>
 8024100:	4b39      	ldr	r3, [pc, #228]	; (80241e8 <pow+0x2d0>)
 8024102:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8024106:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802410a:	4630      	mov	r0, r6
 802410c:	4652      	mov	r2, sl
 802410e:	465b      	mov	r3, fp
 8024110:	4639      	mov	r1, r7
 8024112:	f7dc fced 	bl	8000af0 <__aeabi_dcmplt>
 8024116:	2800      	cmp	r0, #0
 8024118:	d056      	beq.n	80241c8 <pow+0x2b0>
 802411a:	ec45 4b10 	vmov	d0, r4, r5
 802411e:	f000 fe47 	bl	8024db0 <rint>
 8024122:	4622      	mov	r2, r4
 8024124:	462b      	mov	r3, r5
 8024126:	ec51 0b10 	vmov	r0, r1, d0
 802412a:	f7dc fcd7 	bl	8000adc <__aeabi_dcmpeq>
 802412e:	b920      	cbnz	r0, 802413a <pow+0x222>
 8024130:	4b2e      	ldr	r3, [pc, #184]	; (80241ec <pow+0x2d4>)
 8024132:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8024136:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802413a:	f998 3000 	ldrsb.w	r3, [r8]
 802413e:	2b02      	cmp	r3, #2
 8024140:	d142      	bne.n	80241c8 <pow+0x2b0>
 8024142:	f000 ff3f 	bl	8024fc4 <__errno>
 8024146:	2322      	movs	r3, #34	; 0x22
 8024148:	e78d      	b.n	8024066 <pow+0x14e>
 802414a:	4b29      	ldr	r3, [pc, #164]	; (80241f0 <pow+0x2d8>)
 802414c:	2200      	movs	r2, #0
 802414e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024152:	4630      	mov	r0, r6
 8024154:	4652      	mov	r2, sl
 8024156:	465b      	mov	r3, fp
 8024158:	4639      	mov	r1, r7
 802415a:	f7dc fcc9 	bl	8000af0 <__aeabi_dcmplt>
 802415e:	2800      	cmp	r0, #0
 8024160:	d0eb      	beq.n	802413a <pow+0x222>
 8024162:	ec45 4b10 	vmov	d0, r4, r5
 8024166:	f000 fe23 	bl	8024db0 <rint>
 802416a:	4622      	mov	r2, r4
 802416c:	462b      	mov	r3, r5
 802416e:	ec51 0b10 	vmov	r0, r1, d0
 8024172:	f7dc fcb3 	bl	8000adc <__aeabi_dcmpeq>
 8024176:	2800      	cmp	r0, #0
 8024178:	d1df      	bne.n	802413a <pow+0x222>
 802417a:	2200      	movs	r2, #0
 802417c:	4b18      	ldr	r3, [pc, #96]	; (80241e0 <pow+0x2c8>)
 802417e:	e7da      	b.n	8024136 <pow+0x21e>
 8024180:	2200      	movs	r2, #0
 8024182:	2300      	movs	r3, #0
 8024184:	ec51 0b18 	vmov	r0, r1, d8
 8024188:	f7dc fca8 	bl	8000adc <__aeabi_dcmpeq>
 802418c:	2800      	cmp	r0, #0
 802418e:	f43f af3a 	beq.w	8024006 <pow+0xee>
 8024192:	ec47 6b10 	vmov	d0, r6, r7
 8024196:	f000 fdf6 	bl	8024d86 <finite>
 802419a:	2800      	cmp	r0, #0
 802419c:	f43f af33 	beq.w	8024006 <pow+0xee>
 80241a0:	ec45 4b10 	vmov	d0, r4, r5
 80241a4:	f000 fdef 	bl	8024d86 <finite>
 80241a8:	2800      	cmp	r0, #0
 80241aa:	f43f af2c 	beq.w	8024006 <pow+0xee>
 80241ae:	2304      	movs	r3, #4
 80241b0:	9302      	str	r3, [sp, #8]
 80241b2:	4b09      	ldr	r3, [pc, #36]	; (80241d8 <pow+0x2c0>)
 80241b4:	9303      	str	r3, [sp, #12]
 80241b6:	2300      	movs	r3, #0
 80241b8:	930a      	str	r3, [sp, #40]	; 0x28
 80241ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80241be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80241c2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80241c6:	e7b8      	b.n	802413a <pow+0x222>
 80241c8:	a802      	add	r0, sp, #8
 80241ca:	f000 fde4 	bl	8024d96 <matherr>
 80241ce:	2800      	cmp	r0, #0
 80241d0:	f47f af11 	bne.w	8023ff6 <pow+0xde>
 80241d4:	e7b5      	b.n	8024142 <pow+0x22a>
 80241d6:	bf00      	nop
 80241d8:	08026e4c 	.word	0x08026e4c
 80241dc:	3ff00000 	.word	0x3ff00000
 80241e0:	fff00000 	.word	0xfff00000
 80241e4:	3fe00000 	.word	0x3fe00000
 80241e8:	47efffff 	.word	0x47efffff
 80241ec:	c7efffff 	.word	0xc7efffff
 80241f0:	7ff00000 	.word	0x7ff00000
 80241f4:	20000324 	.word	0x20000324

080241f8 <__ieee754_pow>:
 80241f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241fc:	b091      	sub	sp, #68	; 0x44
 80241fe:	ed8d 1b00 	vstr	d1, [sp]
 8024202:	e9dd 2900 	ldrd	r2, r9, [sp]
 8024206:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802420a:	ea58 0302 	orrs.w	r3, r8, r2
 802420e:	ec57 6b10 	vmov	r6, r7, d0
 8024212:	f000 84be 	beq.w	8024b92 <__ieee754_pow+0x99a>
 8024216:	4b7a      	ldr	r3, [pc, #488]	; (8024400 <__ieee754_pow+0x208>)
 8024218:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802421c:	429c      	cmp	r4, r3
 802421e:	463d      	mov	r5, r7
 8024220:	ee10 aa10 	vmov	sl, s0
 8024224:	dc09      	bgt.n	802423a <__ieee754_pow+0x42>
 8024226:	d103      	bne.n	8024230 <__ieee754_pow+0x38>
 8024228:	b93e      	cbnz	r6, 802423a <__ieee754_pow+0x42>
 802422a:	45a0      	cmp	r8, r4
 802422c:	dc0d      	bgt.n	802424a <__ieee754_pow+0x52>
 802422e:	e001      	b.n	8024234 <__ieee754_pow+0x3c>
 8024230:	4598      	cmp	r8, r3
 8024232:	dc02      	bgt.n	802423a <__ieee754_pow+0x42>
 8024234:	4598      	cmp	r8, r3
 8024236:	d10e      	bne.n	8024256 <__ieee754_pow+0x5e>
 8024238:	b16a      	cbz	r2, 8024256 <__ieee754_pow+0x5e>
 802423a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802423e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8024242:	ea54 030a 	orrs.w	r3, r4, sl
 8024246:	f000 84a4 	beq.w	8024b92 <__ieee754_pow+0x99a>
 802424a:	486e      	ldr	r0, [pc, #440]	; (8024404 <__ieee754_pow+0x20c>)
 802424c:	b011      	add	sp, #68	; 0x44
 802424e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024252:	f000 bda5 	b.w	8024da0 <nan>
 8024256:	2d00      	cmp	r5, #0
 8024258:	da53      	bge.n	8024302 <__ieee754_pow+0x10a>
 802425a:	4b6b      	ldr	r3, [pc, #428]	; (8024408 <__ieee754_pow+0x210>)
 802425c:	4598      	cmp	r8, r3
 802425e:	dc4d      	bgt.n	80242fc <__ieee754_pow+0x104>
 8024260:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8024264:	4598      	cmp	r8, r3
 8024266:	dd4c      	ble.n	8024302 <__ieee754_pow+0x10a>
 8024268:	ea4f 5328 	mov.w	r3, r8, asr #20
 802426c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024270:	2b14      	cmp	r3, #20
 8024272:	dd26      	ble.n	80242c2 <__ieee754_pow+0xca>
 8024274:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8024278:	fa22 f103 	lsr.w	r1, r2, r3
 802427c:	fa01 f303 	lsl.w	r3, r1, r3
 8024280:	4293      	cmp	r3, r2
 8024282:	d13e      	bne.n	8024302 <__ieee754_pow+0x10a>
 8024284:	f001 0101 	and.w	r1, r1, #1
 8024288:	f1c1 0b02 	rsb	fp, r1, #2
 802428c:	2a00      	cmp	r2, #0
 802428e:	d15b      	bne.n	8024348 <__ieee754_pow+0x150>
 8024290:	4b5b      	ldr	r3, [pc, #364]	; (8024400 <__ieee754_pow+0x208>)
 8024292:	4598      	cmp	r8, r3
 8024294:	d124      	bne.n	80242e0 <__ieee754_pow+0xe8>
 8024296:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802429a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802429e:	ea53 030a 	orrs.w	r3, r3, sl
 80242a2:	f000 8476 	beq.w	8024b92 <__ieee754_pow+0x99a>
 80242a6:	4b59      	ldr	r3, [pc, #356]	; (802440c <__ieee754_pow+0x214>)
 80242a8:	429c      	cmp	r4, r3
 80242aa:	dd2d      	ble.n	8024308 <__ieee754_pow+0x110>
 80242ac:	f1b9 0f00 	cmp.w	r9, #0
 80242b0:	f280 8473 	bge.w	8024b9a <__ieee754_pow+0x9a2>
 80242b4:	2000      	movs	r0, #0
 80242b6:	2100      	movs	r1, #0
 80242b8:	ec41 0b10 	vmov	d0, r0, r1
 80242bc:	b011      	add	sp, #68	; 0x44
 80242be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242c2:	2a00      	cmp	r2, #0
 80242c4:	d13e      	bne.n	8024344 <__ieee754_pow+0x14c>
 80242c6:	f1c3 0314 	rsb	r3, r3, #20
 80242ca:	fa48 f103 	asr.w	r1, r8, r3
 80242ce:	fa01 f303 	lsl.w	r3, r1, r3
 80242d2:	4543      	cmp	r3, r8
 80242d4:	f040 8469 	bne.w	8024baa <__ieee754_pow+0x9b2>
 80242d8:	f001 0101 	and.w	r1, r1, #1
 80242dc:	f1c1 0b02 	rsb	fp, r1, #2
 80242e0:	4b4b      	ldr	r3, [pc, #300]	; (8024410 <__ieee754_pow+0x218>)
 80242e2:	4598      	cmp	r8, r3
 80242e4:	d118      	bne.n	8024318 <__ieee754_pow+0x120>
 80242e6:	f1b9 0f00 	cmp.w	r9, #0
 80242ea:	f280 845a 	bge.w	8024ba2 <__ieee754_pow+0x9aa>
 80242ee:	4948      	ldr	r1, [pc, #288]	; (8024410 <__ieee754_pow+0x218>)
 80242f0:	4632      	mov	r2, r6
 80242f2:	463b      	mov	r3, r7
 80242f4:	2000      	movs	r0, #0
 80242f6:	f7dc fab3 	bl	8000860 <__aeabi_ddiv>
 80242fa:	e7dd      	b.n	80242b8 <__ieee754_pow+0xc0>
 80242fc:	f04f 0b02 	mov.w	fp, #2
 8024300:	e7c4      	b.n	802428c <__ieee754_pow+0x94>
 8024302:	f04f 0b00 	mov.w	fp, #0
 8024306:	e7c1      	b.n	802428c <__ieee754_pow+0x94>
 8024308:	f1b9 0f00 	cmp.w	r9, #0
 802430c:	dad2      	bge.n	80242b4 <__ieee754_pow+0xbc>
 802430e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8024312:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024316:	e7cf      	b.n	80242b8 <__ieee754_pow+0xc0>
 8024318:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802431c:	d106      	bne.n	802432c <__ieee754_pow+0x134>
 802431e:	4632      	mov	r2, r6
 8024320:	463b      	mov	r3, r7
 8024322:	4610      	mov	r0, r2
 8024324:	4619      	mov	r1, r3
 8024326:	f7dc f971 	bl	800060c <__aeabi_dmul>
 802432a:	e7c5      	b.n	80242b8 <__ieee754_pow+0xc0>
 802432c:	4b39      	ldr	r3, [pc, #228]	; (8024414 <__ieee754_pow+0x21c>)
 802432e:	4599      	cmp	r9, r3
 8024330:	d10a      	bne.n	8024348 <__ieee754_pow+0x150>
 8024332:	2d00      	cmp	r5, #0
 8024334:	db08      	blt.n	8024348 <__ieee754_pow+0x150>
 8024336:	ec47 6b10 	vmov	d0, r6, r7
 802433a:	b011      	add	sp, #68	; 0x44
 802433c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024340:	f000 bc68 	b.w	8024c14 <__ieee754_sqrt>
 8024344:	f04f 0b00 	mov.w	fp, #0
 8024348:	ec47 6b10 	vmov	d0, r6, r7
 802434c:	f000 fd12 	bl	8024d74 <fabs>
 8024350:	ec51 0b10 	vmov	r0, r1, d0
 8024354:	f1ba 0f00 	cmp.w	sl, #0
 8024358:	d127      	bne.n	80243aa <__ieee754_pow+0x1b2>
 802435a:	b124      	cbz	r4, 8024366 <__ieee754_pow+0x16e>
 802435c:	4b2c      	ldr	r3, [pc, #176]	; (8024410 <__ieee754_pow+0x218>)
 802435e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8024362:	429a      	cmp	r2, r3
 8024364:	d121      	bne.n	80243aa <__ieee754_pow+0x1b2>
 8024366:	f1b9 0f00 	cmp.w	r9, #0
 802436a:	da05      	bge.n	8024378 <__ieee754_pow+0x180>
 802436c:	4602      	mov	r2, r0
 802436e:	460b      	mov	r3, r1
 8024370:	2000      	movs	r0, #0
 8024372:	4927      	ldr	r1, [pc, #156]	; (8024410 <__ieee754_pow+0x218>)
 8024374:	f7dc fa74 	bl	8000860 <__aeabi_ddiv>
 8024378:	2d00      	cmp	r5, #0
 802437a:	da9d      	bge.n	80242b8 <__ieee754_pow+0xc0>
 802437c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8024380:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8024384:	ea54 030b 	orrs.w	r3, r4, fp
 8024388:	d108      	bne.n	802439c <__ieee754_pow+0x1a4>
 802438a:	4602      	mov	r2, r0
 802438c:	460b      	mov	r3, r1
 802438e:	4610      	mov	r0, r2
 8024390:	4619      	mov	r1, r3
 8024392:	f7db ff83 	bl	800029c <__aeabi_dsub>
 8024396:	4602      	mov	r2, r0
 8024398:	460b      	mov	r3, r1
 802439a:	e7ac      	b.n	80242f6 <__ieee754_pow+0xfe>
 802439c:	f1bb 0f01 	cmp.w	fp, #1
 80243a0:	d18a      	bne.n	80242b8 <__ieee754_pow+0xc0>
 80243a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80243a6:	4619      	mov	r1, r3
 80243a8:	e786      	b.n	80242b8 <__ieee754_pow+0xc0>
 80243aa:	0fed      	lsrs	r5, r5, #31
 80243ac:	1e6b      	subs	r3, r5, #1
 80243ae:	930d      	str	r3, [sp, #52]	; 0x34
 80243b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80243b4:	d102      	bne.n	80243bc <__ieee754_pow+0x1c4>
 80243b6:	4632      	mov	r2, r6
 80243b8:	463b      	mov	r3, r7
 80243ba:	e7e8      	b.n	802438e <__ieee754_pow+0x196>
 80243bc:	4b16      	ldr	r3, [pc, #88]	; (8024418 <__ieee754_pow+0x220>)
 80243be:	4598      	cmp	r8, r3
 80243c0:	f340 80fe 	ble.w	80245c0 <__ieee754_pow+0x3c8>
 80243c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80243c8:	4598      	cmp	r8, r3
 80243ca:	dd0a      	ble.n	80243e2 <__ieee754_pow+0x1ea>
 80243cc:	4b0f      	ldr	r3, [pc, #60]	; (802440c <__ieee754_pow+0x214>)
 80243ce:	429c      	cmp	r4, r3
 80243d0:	dc0d      	bgt.n	80243ee <__ieee754_pow+0x1f6>
 80243d2:	f1b9 0f00 	cmp.w	r9, #0
 80243d6:	f6bf af6d 	bge.w	80242b4 <__ieee754_pow+0xbc>
 80243da:	a307      	add	r3, pc, #28	; (adr r3, 80243f8 <__ieee754_pow+0x200>)
 80243dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243e0:	e79f      	b.n	8024322 <__ieee754_pow+0x12a>
 80243e2:	4b0e      	ldr	r3, [pc, #56]	; (802441c <__ieee754_pow+0x224>)
 80243e4:	429c      	cmp	r4, r3
 80243e6:	ddf4      	ble.n	80243d2 <__ieee754_pow+0x1da>
 80243e8:	4b09      	ldr	r3, [pc, #36]	; (8024410 <__ieee754_pow+0x218>)
 80243ea:	429c      	cmp	r4, r3
 80243ec:	dd18      	ble.n	8024420 <__ieee754_pow+0x228>
 80243ee:	f1b9 0f00 	cmp.w	r9, #0
 80243f2:	dcf2      	bgt.n	80243da <__ieee754_pow+0x1e2>
 80243f4:	e75e      	b.n	80242b4 <__ieee754_pow+0xbc>
 80243f6:	bf00      	nop
 80243f8:	8800759c 	.word	0x8800759c
 80243fc:	7e37e43c 	.word	0x7e37e43c
 8024400:	7ff00000 	.word	0x7ff00000
 8024404:	08026b8f 	.word	0x08026b8f
 8024408:	433fffff 	.word	0x433fffff
 802440c:	3fefffff 	.word	0x3fefffff
 8024410:	3ff00000 	.word	0x3ff00000
 8024414:	3fe00000 	.word	0x3fe00000
 8024418:	41e00000 	.word	0x41e00000
 802441c:	3feffffe 	.word	0x3feffffe
 8024420:	2200      	movs	r2, #0
 8024422:	4b63      	ldr	r3, [pc, #396]	; (80245b0 <__ieee754_pow+0x3b8>)
 8024424:	f7db ff3a 	bl	800029c <__aeabi_dsub>
 8024428:	a355      	add	r3, pc, #340	; (adr r3, 8024580 <__ieee754_pow+0x388>)
 802442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802442e:	4604      	mov	r4, r0
 8024430:	460d      	mov	r5, r1
 8024432:	f7dc f8eb 	bl	800060c <__aeabi_dmul>
 8024436:	a354      	add	r3, pc, #336	; (adr r3, 8024588 <__ieee754_pow+0x390>)
 8024438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802443c:	4606      	mov	r6, r0
 802443e:	460f      	mov	r7, r1
 8024440:	4620      	mov	r0, r4
 8024442:	4629      	mov	r1, r5
 8024444:	f7dc f8e2 	bl	800060c <__aeabi_dmul>
 8024448:	2200      	movs	r2, #0
 802444a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802444e:	4b59      	ldr	r3, [pc, #356]	; (80245b4 <__ieee754_pow+0x3bc>)
 8024450:	4620      	mov	r0, r4
 8024452:	4629      	mov	r1, r5
 8024454:	f7dc f8da 	bl	800060c <__aeabi_dmul>
 8024458:	4602      	mov	r2, r0
 802445a:	460b      	mov	r3, r1
 802445c:	a14c      	add	r1, pc, #304	; (adr r1, 8024590 <__ieee754_pow+0x398>)
 802445e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024462:	f7db ff1b 	bl	800029c <__aeabi_dsub>
 8024466:	4622      	mov	r2, r4
 8024468:	462b      	mov	r3, r5
 802446a:	f7dc f8cf 	bl	800060c <__aeabi_dmul>
 802446e:	4602      	mov	r2, r0
 8024470:	460b      	mov	r3, r1
 8024472:	2000      	movs	r0, #0
 8024474:	4950      	ldr	r1, [pc, #320]	; (80245b8 <__ieee754_pow+0x3c0>)
 8024476:	f7db ff11 	bl	800029c <__aeabi_dsub>
 802447a:	4622      	mov	r2, r4
 802447c:	462b      	mov	r3, r5
 802447e:	4680      	mov	r8, r0
 8024480:	4689      	mov	r9, r1
 8024482:	4620      	mov	r0, r4
 8024484:	4629      	mov	r1, r5
 8024486:	f7dc f8c1 	bl	800060c <__aeabi_dmul>
 802448a:	4602      	mov	r2, r0
 802448c:	460b      	mov	r3, r1
 802448e:	4640      	mov	r0, r8
 8024490:	4649      	mov	r1, r9
 8024492:	f7dc f8bb 	bl	800060c <__aeabi_dmul>
 8024496:	a340      	add	r3, pc, #256	; (adr r3, 8024598 <__ieee754_pow+0x3a0>)
 8024498:	e9d3 2300 	ldrd	r2, r3, [r3]
 802449c:	f7dc f8b6 	bl	800060c <__aeabi_dmul>
 80244a0:	4602      	mov	r2, r0
 80244a2:	460b      	mov	r3, r1
 80244a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80244a8:	f7db fef8 	bl	800029c <__aeabi_dsub>
 80244ac:	4602      	mov	r2, r0
 80244ae:	460b      	mov	r3, r1
 80244b0:	4604      	mov	r4, r0
 80244b2:	460d      	mov	r5, r1
 80244b4:	4630      	mov	r0, r6
 80244b6:	4639      	mov	r1, r7
 80244b8:	f7db fef2 	bl	80002a0 <__adddf3>
 80244bc:	2000      	movs	r0, #0
 80244be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80244c2:	4632      	mov	r2, r6
 80244c4:	463b      	mov	r3, r7
 80244c6:	f7db fee9 	bl	800029c <__aeabi_dsub>
 80244ca:	4602      	mov	r2, r0
 80244cc:	460b      	mov	r3, r1
 80244ce:	4620      	mov	r0, r4
 80244d0:	4629      	mov	r1, r5
 80244d2:	f7db fee3 	bl	800029c <__aeabi_dsub>
 80244d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80244d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80244dc:	4313      	orrs	r3, r2
 80244de:	4606      	mov	r6, r0
 80244e0:	460f      	mov	r7, r1
 80244e2:	f040 81eb 	bne.w	80248bc <__ieee754_pow+0x6c4>
 80244e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80245a0 <__ieee754_pow+0x3a8>
 80244ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80244ee:	2400      	movs	r4, #0
 80244f0:	4622      	mov	r2, r4
 80244f2:	462b      	mov	r3, r5
 80244f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80244f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80244fc:	f7db fece 	bl	800029c <__aeabi_dsub>
 8024500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024504:	f7dc f882 	bl	800060c <__aeabi_dmul>
 8024508:	e9dd 2300 	ldrd	r2, r3, [sp]
 802450c:	4680      	mov	r8, r0
 802450e:	4689      	mov	r9, r1
 8024510:	4630      	mov	r0, r6
 8024512:	4639      	mov	r1, r7
 8024514:	f7dc f87a 	bl	800060c <__aeabi_dmul>
 8024518:	4602      	mov	r2, r0
 802451a:	460b      	mov	r3, r1
 802451c:	4640      	mov	r0, r8
 802451e:	4649      	mov	r1, r9
 8024520:	f7db febe 	bl	80002a0 <__adddf3>
 8024524:	4622      	mov	r2, r4
 8024526:	462b      	mov	r3, r5
 8024528:	4680      	mov	r8, r0
 802452a:	4689      	mov	r9, r1
 802452c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024530:	f7dc f86c 	bl	800060c <__aeabi_dmul>
 8024534:	460b      	mov	r3, r1
 8024536:	4604      	mov	r4, r0
 8024538:	460d      	mov	r5, r1
 802453a:	4602      	mov	r2, r0
 802453c:	4649      	mov	r1, r9
 802453e:	4640      	mov	r0, r8
 8024540:	e9cd 4500 	strd	r4, r5, [sp]
 8024544:	f7db feac 	bl	80002a0 <__adddf3>
 8024548:	4b1c      	ldr	r3, [pc, #112]	; (80245bc <__ieee754_pow+0x3c4>)
 802454a:	4299      	cmp	r1, r3
 802454c:	4606      	mov	r6, r0
 802454e:	460f      	mov	r7, r1
 8024550:	468b      	mov	fp, r1
 8024552:	f340 82f7 	ble.w	8024b44 <__ieee754_pow+0x94c>
 8024556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802455a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802455e:	4303      	orrs	r3, r0
 8024560:	f000 81ea 	beq.w	8024938 <__ieee754_pow+0x740>
 8024564:	a310      	add	r3, pc, #64	; (adr r3, 80245a8 <__ieee754_pow+0x3b0>)
 8024566:	e9d3 2300 	ldrd	r2, r3, [r3]
 802456a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802456e:	f7dc f84d 	bl	800060c <__aeabi_dmul>
 8024572:	a30d      	add	r3, pc, #52	; (adr r3, 80245a8 <__ieee754_pow+0x3b0>)
 8024574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024578:	e6d5      	b.n	8024326 <__ieee754_pow+0x12e>
 802457a:	bf00      	nop
 802457c:	f3af 8000 	nop.w
 8024580:	60000000 	.word	0x60000000
 8024584:	3ff71547 	.word	0x3ff71547
 8024588:	f85ddf44 	.word	0xf85ddf44
 802458c:	3e54ae0b 	.word	0x3e54ae0b
 8024590:	55555555 	.word	0x55555555
 8024594:	3fd55555 	.word	0x3fd55555
 8024598:	652b82fe 	.word	0x652b82fe
 802459c:	3ff71547 	.word	0x3ff71547
 80245a0:	00000000 	.word	0x00000000
 80245a4:	bff00000 	.word	0xbff00000
 80245a8:	8800759c 	.word	0x8800759c
 80245ac:	7e37e43c 	.word	0x7e37e43c
 80245b0:	3ff00000 	.word	0x3ff00000
 80245b4:	3fd00000 	.word	0x3fd00000
 80245b8:	3fe00000 	.word	0x3fe00000
 80245bc:	408fffff 	.word	0x408fffff
 80245c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80245c4:	f04f 0200 	mov.w	r2, #0
 80245c8:	da05      	bge.n	80245d6 <__ieee754_pow+0x3de>
 80245ca:	4bd3      	ldr	r3, [pc, #844]	; (8024918 <__ieee754_pow+0x720>)
 80245cc:	f7dc f81e 	bl	800060c <__aeabi_dmul>
 80245d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80245d4:	460c      	mov	r4, r1
 80245d6:	1523      	asrs	r3, r4, #20
 80245d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80245dc:	4413      	add	r3, r2
 80245de:	9309      	str	r3, [sp, #36]	; 0x24
 80245e0:	4bce      	ldr	r3, [pc, #824]	; (802491c <__ieee754_pow+0x724>)
 80245e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80245e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80245ea:	429c      	cmp	r4, r3
 80245ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80245f0:	dd08      	ble.n	8024604 <__ieee754_pow+0x40c>
 80245f2:	4bcb      	ldr	r3, [pc, #812]	; (8024920 <__ieee754_pow+0x728>)
 80245f4:	429c      	cmp	r4, r3
 80245f6:	f340 815e 	ble.w	80248b6 <__ieee754_pow+0x6be>
 80245fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245fc:	3301      	adds	r3, #1
 80245fe:	9309      	str	r3, [sp, #36]	; 0x24
 8024600:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8024604:	f04f 0a00 	mov.w	sl, #0
 8024608:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802460c:	930c      	str	r3, [sp, #48]	; 0x30
 802460e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024610:	4bc4      	ldr	r3, [pc, #784]	; (8024924 <__ieee754_pow+0x72c>)
 8024612:	4413      	add	r3, r2
 8024614:	ed93 7b00 	vldr	d7, [r3]
 8024618:	4629      	mov	r1, r5
 802461a:	ec53 2b17 	vmov	r2, r3, d7
 802461e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8024622:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8024626:	f7db fe39 	bl	800029c <__aeabi_dsub>
 802462a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802462e:	4606      	mov	r6, r0
 8024630:	460f      	mov	r7, r1
 8024632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024636:	f7db fe33 	bl	80002a0 <__adddf3>
 802463a:	4602      	mov	r2, r0
 802463c:	460b      	mov	r3, r1
 802463e:	2000      	movs	r0, #0
 8024640:	49b9      	ldr	r1, [pc, #740]	; (8024928 <__ieee754_pow+0x730>)
 8024642:	f7dc f90d 	bl	8000860 <__aeabi_ddiv>
 8024646:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802464a:	4602      	mov	r2, r0
 802464c:	460b      	mov	r3, r1
 802464e:	4630      	mov	r0, r6
 8024650:	4639      	mov	r1, r7
 8024652:	f7db ffdb 	bl	800060c <__aeabi_dmul>
 8024656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802465a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 802465e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024662:	2300      	movs	r3, #0
 8024664:	9302      	str	r3, [sp, #8]
 8024666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802466a:	106d      	asrs	r5, r5, #1
 802466c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8024670:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8024674:	2200      	movs	r2, #0
 8024676:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802467a:	4640      	mov	r0, r8
 802467c:	4649      	mov	r1, r9
 802467e:	4614      	mov	r4, r2
 8024680:	461d      	mov	r5, r3
 8024682:	f7db ffc3 	bl	800060c <__aeabi_dmul>
 8024686:	4602      	mov	r2, r0
 8024688:	460b      	mov	r3, r1
 802468a:	4630      	mov	r0, r6
 802468c:	4639      	mov	r1, r7
 802468e:	f7db fe05 	bl	800029c <__aeabi_dsub>
 8024692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024696:	4606      	mov	r6, r0
 8024698:	460f      	mov	r7, r1
 802469a:	4620      	mov	r0, r4
 802469c:	4629      	mov	r1, r5
 802469e:	f7db fdfd 	bl	800029c <__aeabi_dsub>
 80246a2:	4602      	mov	r2, r0
 80246a4:	460b      	mov	r3, r1
 80246a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80246aa:	f7db fdf7 	bl	800029c <__aeabi_dsub>
 80246ae:	4642      	mov	r2, r8
 80246b0:	464b      	mov	r3, r9
 80246b2:	f7db ffab 	bl	800060c <__aeabi_dmul>
 80246b6:	4602      	mov	r2, r0
 80246b8:	460b      	mov	r3, r1
 80246ba:	4630      	mov	r0, r6
 80246bc:	4639      	mov	r1, r7
 80246be:	f7db fded 	bl	800029c <__aeabi_dsub>
 80246c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80246c6:	f7db ffa1 	bl	800060c <__aeabi_dmul>
 80246ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80246ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80246d2:	4610      	mov	r0, r2
 80246d4:	4619      	mov	r1, r3
 80246d6:	f7db ff99 	bl	800060c <__aeabi_dmul>
 80246da:	a37b      	add	r3, pc, #492	; (adr r3, 80248c8 <__ieee754_pow+0x6d0>)
 80246dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246e0:	4604      	mov	r4, r0
 80246e2:	460d      	mov	r5, r1
 80246e4:	f7db ff92 	bl	800060c <__aeabi_dmul>
 80246e8:	a379      	add	r3, pc, #484	; (adr r3, 80248d0 <__ieee754_pow+0x6d8>)
 80246ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246ee:	f7db fdd7 	bl	80002a0 <__adddf3>
 80246f2:	4622      	mov	r2, r4
 80246f4:	462b      	mov	r3, r5
 80246f6:	f7db ff89 	bl	800060c <__aeabi_dmul>
 80246fa:	a377      	add	r3, pc, #476	; (adr r3, 80248d8 <__ieee754_pow+0x6e0>)
 80246fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024700:	f7db fdce 	bl	80002a0 <__adddf3>
 8024704:	4622      	mov	r2, r4
 8024706:	462b      	mov	r3, r5
 8024708:	f7db ff80 	bl	800060c <__aeabi_dmul>
 802470c:	a374      	add	r3, pc, #464	; (adr r3, 80248e0 <__ieee754_pow+0x6e8>)
 802470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024712:	f7db fdc5 	bl	80002a0 <__adddf3>
 8024716:	4622      	mov	r2, r4
 8024718:	462b      	mov	r3, r5
 802471a:	f7db ff77 	bl	800060c <__aeabi_dmul>
 802471e:	a372      	add	r3, pc, #456	; (adr r3, 80248e8 <__ieee754_pow+0x6f0>)
 8024720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024724:	f7db fdbc 	bl	80002a0 <__adddf3>
 8024728:	4622      	mov	r2, r4
 802472a:	462b      	mov	r3, r5
 802472c:	f7db ff6e 	bl	800060c <__aeabi_dmul>
 8024730:	a36f      	add	r3, pc, #444	; (adr r3, 80248f0 <__ieee754_pow+0x6f8>)
 8024732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024736:	f7db fdb3 	bl	80002a0 <__adddf3>
 802473a:	4622      	mov	r2, r4
 802473c:	4606      	mov	r6, r0
 802473e:	460f      	mov	r7, r1
 8024740:	462b      	mov	r3, r5
 8024742:	4620      	mov	r0, r4
 8024744:	4629      	mov	r1, r5
 8024746:	f7db ff61 	bl	800060c <__aeabi_dmul>
 802474a:	4602      	mov	r2, r0
 802474c:	460b      	mov	r3, r1
 802474e:	4630      	mov	r0, r6
 8024750:	4639      	mov	r1, r7
 8024752:	f7db ff5b 	bl	800060c <__aeabi_dmul>
 8024756:	4642      	mov	r2, r8
 8024758:	4604      	mov	r4, r0
 802475a:	460d      	mov	r5, r1
 802475c:	464b      	mov	r3, r9
 802475e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024762:	f7db fd9d 	bl	80002a0 <__adddf3>
 8024766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802476a:	f7db ff4f 	bl	800060c <__aeabi_dmul>
 802476e:	4622      	mov	r2, r4
 8024770:	462b      	mov	r3, r5
 8024772:	f7db fd95 	bl	80002a0 <__adddf3>
 8024776:	4642      	mov	r2, r8
 8024778:	4606      	mov	r6, r0
 802477a:	460f      	mov	r7, r1
 802477c:	464b      	mov	r3, r9
 802477e:	4640      	mov	r0, r8
 8024780:	4649      	mov	r1, r9
 8024782:	f7db ff43 	bl	800060c <__aeabi_dmul>
 8024786:	2200      	movs	r2, #0
 8024788:	4b68      	ldr	r3, [pc, #416]	; (802492c <__ieee754_pow+0x734>)
 802478a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802478e:	f7db fd87 	bl	80002a0 <__adddf3>
 8024792:	4632      	mov	r2, r6
 8024794:	463b      	mov	r3, r7
 8024796:	f7db fd83 	bl	80002a0 <__adddf3>
 802479a:	9802      	ldr	r0, [sp, #8]
 802479c:	460d      	mov	r5, r1
 802479e:	4604      	mov	r4, r0
 80247a0:	4602      	mov	r2, r0
 80247a2:	460b      	mov	r3, r1
 80247a4:	4640      	mov	r0, r8
 80247a6:	4649      	mov	r1, r9
 80247a8:	f7db ff30 	bl	800060c <__aeabi_dmul>
 80247ac:	2200      	movs	r2, #0
 80247ae:	4680      	mov	r8, r0
 80247b0:	4689      	mov	r9, r1
 80247b2:	4b5e      	ldr	r3, [pc, #376]	; (802492c <__ieee754_pow+0x734>)
 80247b4:	4620      	mov	r0, r4
 80247b6:	4629      	mov	r1, r5
 80247b8:	f7db fd70 	bl	800029c <__aeabi_dsub>
 80247bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80247c0:	f7db fd6c 	bl	800029c <__aeabi_dsub>
 80247c4:	4602      	mov	r2, r0
 80247c6:	460b      	mov	r3, r1
 80247c8:	4630      	mov	r0, r6
 80247ca:	4639      	mov	r1, r7
 80247cc:	f7db fd66 	bl	800029c <__aeabi_dsub>
 80247d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80247d4:	f7db ff1a 	bl	800060c <__aeabi_dmul>
 80247d8:	4622      	mov	r2, r4
 80247da:	4606      	mov	r6, r0
 80247dc:	460f      	mov	r7, r1
 80247de:	462b      	mov	r3, r5
 80247e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80247e4:	f7db ff12 	bl	800060c <__aeabi_dmul>
 80247e8:	4602      	mov	r2, r0
 80247ea:	460b      	mov	r3, r1
 80247ec:	4630      	mov	r0, r6
 80247ee:	4639      	mov	r1, r7
 80247f0:	f7db fd56 	bl	80002a0 <__adddf3>
 80247f4:	4606      	mov	r6, r0
 80247f6:	460f      	mov	r7, r1
 80247f8:	4602      	mov	r2, r0
 80247fa:	460b      	mov	r3, r1
 80247fc:	4640      	mov	r0, r8
 80247fe:	4649      	mov	r1, r9
 8024800:	f7db fd4e 	bl	80002a0 <__adddf3>
 8024804:	9802      	ldr	r0, [sp, #8]
 8024806:	a33c      	add	r3, pc, #240	; (adr r3, 80248f8 <__ieee754_pow+0x700>)
 8024808:	e9d3 2300 	ldrd	r2, r3, [r3]
 802480c:	4604      	mov	r4, r0
 802480e:	460d      	mov	r5, r1
 8024810:	f7db fefc 	bl	800060c <__aeabi_dmul>
 8024814:	4642      	mov	r2, r8
 8024816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802481a:	464b      	mov	r3, r9
 802481c:	4620      	mov	r0, r4
 802481e:	4629      	mov	r1, r5
 8024820:	f7db fd3c 	bl	800029c <__aeabi_dsub>
 8024824:	4602      	mov	r2, r0
 8024826:	460b      	mov	r3, r1
 8024828:	4630      	mov	r0, r6
 802482a:	4639      	mov	r1, r7
 802482c:	f7db fd36 	bl	800029c <__aeabi_dsub>
 8024830:	a333      	add	r3, pc, #204	; (adr r3, 8024900 <__ieee754_pow+0x708>)
 8024832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024836:	f7db fee9 	bl	800060c <__aeabi_dmul>
 802483a:	a333      	add	r3, pc, #204	; (adr r3, 8024908 <__ieee754_pow+0x710>)
 802483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024840:	4606      	mov	r6, r0
 8024842:	460f      	mov	r7, r1
 8024844:	4620      	mov	r0, r4
 8024846:	4629      	mov	r1, r5
 8024848:	f7db fee0 	bl	800060c <__aeabi_dmul>
 802484c:	4602      	mov	r2, r0
 802484e:	460b      	mov	r3, r1
 8024850:	4630      	mov	r0, r6
 8024852:	4639      	mov	r1, r7
 8024854:	f7db fd24 	bl	80002a0 <__adddf3>
 8024858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802485a:	4b35      	ldr	r3, [pc, #212]	; (8024930 <__ieee754_pow+0x738>)
 802485c:	4413      	add	r3, r2
 802485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024862:	f7db fd1d 	bl	80002a0 <__adddf3>
 8024866:	4604      	mov	r4, r0
 8024868:	9809      	ldr	r0, [sp, #36]	; 0x24
 802486a:	460d      	mov	r5, r1
 802486c:	f7db fe64 	bl	8000538 <__aeabi_i2d>
 8024870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024872:	4b30      	ldr	r3, [pc, #192]	; (8024934 <__ieee754_pow+0x73c>)
 8024874:	4413      	add	r3, r2
 8024876:	e9d3 8900 	ldrd	r8, r9, [r3]
 802487a:	4606      	mov	r6, r0
 802487c:	460f      	mov	r7, r1
 802487e:	4622      	mov	r2, r4
 8024880:	462b      	mov	r3, r5
 8024882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024886:	f7db fd0b 	bl	80002a0 <__adddf3>
 802488a:	4642      	mov	r2, r8
 802488c:	464b      	mov	r3, r9
 802488e:	f7db fd07 	bl	80002a0 <__adddf3>
 8024892:	4632      	mov	r2, r6
 8024894:	463b      	mov	r3, r7
 8024896:	f7db fd03 	bl	80002a0 <__adddf3>
 802489a:	9802      	ldr	r0, [sp, #8]
 802489c:	4632      	mov	r2, r6
 802489e:	463b      	mov	r3, r7
 80248a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80248a4:	f7db fcfa 	bl	800029c <__aeabi_dsub>
 80248a8:	4642      	mov	r2, r8
 80248aa:	464b      	mov	r3, r9
 80248ac:	f7db fcf6 	bl	800029c <__aeabi_dsub>
 80248b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80248b4:	e607      	b.n	80244c6 <__ieee754_pow+0x2ce>
 80248b6:	f04f 0a01 	mov.w	sl, #1
 80248ba:	e6a5      	b.n	8024608 <__ieee754_pow+0x410>
 80248bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024910 <__ieee754_pow+0x718>
 80248c0:	e613      	b.n	80244ea <__ieee754_pow+0x2f2>
 80248c2:	bf00      	nop
 80248c4:	f3af 8000 	nop.w
 80248c8:	4a454eef 	.word	0x4a454eef
 80248cc:	3fca7e28 	.word	0x3fca7e28
 80248d0:	93c9db65 	.word	0x93c9db65
 80248d4:	3fcd864a 	.word	0x3fcd864a
 80248d8:	a91d4101 	.word	0xa91d4101
 80248dc:	3fd17460 	.word	0x3fd17460
 80248e0:	518f264d 	.word	0x518f264d
 80248e4:	3fd55555 	.word	0x3fd55555
 80248e8:	db6fabff 	.word	0xdb6fabff
 80248ec:	3fdb6db6 	.word	0x3fdb6db6
 80248f0:	33333303 	.word	0x33333303
 80248f4:	3fe33333 	.word	0x3fe33333
 80248f8:	e0000000 	.word	0xe0000000
 80248fc:	3feec709 	.word	0x3feec709
 8024900:	dc3a03fd 	.word	0xdc3a03fd
 8024904:	3feec709 	.word	0x3feec709
 8024908:	145b01f5 	.word	0x145b01f5
 802490c:	be3e2fe0 	.word	0xbe3e2fe0
 8024910:	00000000 	.word	0x00000000
 8024914:	3ff00000 	.word	0x3ff00000
 8024918:	43400000 	.word	0x43400000
 802491c:	0003988e 	.word	0x0003988e
 8024920:	000bb679 	.word	0x000bb679
 8024924:	08026e50 	.word	0x08026e50
 8024928:	3ff00000 	.word	0x3ff00000
 802492c:	40080000 	.word	0x40080000
 8024930:	08026e70 	.word	0x08026e70
 8024934:	08026e60 	.word	0x08026e60
 8024938:	a3b4      	add	r3, pc, #720	; (adr r3, 8024c0c <__ieee754_pow+0xa14>)
 802493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802493e:	4640      	mov	r0, r8
 8024940:	4649      	mov	r1, r9
 8024942:	f7db fcad 	bl	80002a0 <__adddf3>
 8024946:	4622      	mov	r2, r4
 8024948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802494c:	462b      	mov	r3, r5
 802494e:	4630      	mov	r0, r6
 8024950:	4639      	mov	r1, r7
 8024952:	f7db fca3 	bl	800029c <__aeabi_dsub>
 8024956:	4602      	mov	r2, r0
 8024958:	460b      	mov	r3, r1
 802495a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802495e:	f7dc f8e5 	bl	8000b2c <__aeabi_dcmpgt>
 8024962:	2800      	cmp	r0, #0
 8024964:	f47f adfe 	bne.w	8024564 <__ieee754_pow+0x36c>
 8024968:	4aa3      	ldr	r2, [pc, #652]	; (8024bf8 <__ieee754_pow+0xa00>)
 802496a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802496e:	4293      	cmp	r3, r2
 8024970:	f340 810a 	ble.w	8024b88 <__ieee754_pow+0x990>
 8024974:	151b      	asrs	r3, r3, #20
 8024976:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802497a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802497e:	fa4a f303 	asr.w	r3, sl, r3
 8024982:	445b      	add	r3, fp
 8024984:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024988:	4e9c      	ldr	r6, [pc, #624]	; (8024bfc <__ieee754_pow+0xa04>)
 802498a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802498e:	4116      	asrs	r6, r2
 8024990:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024994:	2000      	movs	r0, #0
 8024996:	ea23 0106 	bic.w	r1, r3, r6
 802499a:	f1c2 0214 	rsb	r2, r2, #20
 802499e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80249a2:	fa4a fa02 	asr.w	sl, sl, r2
 80249a6:	f1bb 0f00 	cmp.w	fp, #0
 80249aa:	4602      	mov	r2, r0
 80249ac:	460b      	mov	r3, r1
 80249ae:	4620      	mov	r0, r4
 80249b0:	4629      	mov	r1, r5
 80249b2:	bfb8      	it	lt
 80249b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80249b8:	f7db fc70 	bl	800029c <__aeabi_dsub>
 80249bc:	e9cd 0100 	strd	r0, r1, [sp]
 80249c0:	4642      	mov	r2, r8
 80249c2:	464b      	mov	r3, r9
 80249c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80249c8:	f7db fc6a 	bl	80002a0 <__adddf3>
 80249cc:	2000      	movs	r0, #0
 80249ce:	a378      	add	r3, pc, #480	; (adr r3, 8024bb0 <__ieee754_pow+0x9b8>)
 80249d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249d4:	4604      	mov	r4, r0
 80249d6:	460d      	mov	r5, r1
 80249d8:	f7db fe18 	bl	800060c <__aeabi_dmul>
 80249dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80249e0:	4606      	mov	r6, r0
 80249e2:	460f      	mov	r7, r1
 80249e4:	4620      	mov	r0, r4
 80249e6:	4629      	mov	r1, r5
 80249e8:	f7db fc58 	bl	800029c <__aeabi_dsub>
 80249ec:	4602      	mov	r2, r0
 80249ee:	460b      	mov	r3, r1
 80249f0:	4640      	mov	r0, r8
 80249f2:	4649      	mov	r1, r9
 80249f4:	f7db fc52 	bl	800029c <__aeabi_dsub>
 80249f8:	a36f      	add	r3, pc, #444	; (adr r3, 8024bb8 <__ieee754_pow+0x9c0>)
 80249fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249fe:	f7db fe05 	bl	800060c <__aeabi_dmul>
 8024a02:	a36f      	add	r3, pc, #444	; (adr r3, 8024bc0 <__ieee754_pow+0x9c8>)
 8024a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a08:	4680      	mov	r8, r0
 8024a0a:	4689      	mov	r9, r1
 8024a0c:	4620      	mov	r0, r4
 8024a0e:	4629      	mov	r1, r5
 8024a10:	f7db fdfc 	bl	800060c <__aeabi_dmul>
 8024a14:	4602      	mov	r2, r0
 8024a16:	460b      	mov	r3, r1
 8024a18:	4640      	mov	r0, r8
 8024a1a:	4649      	mov	r1, r9
 8024a1c:	f7db fc40 	bl	80002a0 <__adddf3>
 8024a20:	4604      	mov	r4, r0
 8024a22:	460d      	mov	r5, r1
 8024a24:	4602      	mov	r2, r0
 8024a26:	460b      	mov	r3, r1
 8024a28:	4630      	mov	r0, r6
 8024a2a:	4639      	mov	r1, r7
 8024a2c:	f7db fc38 	bl	80002a0 <__adddf3>
 8024a30:	4632      	mov	r2, r6
 8024a32:	463b      	mov	r3, r7
 8024a34:	4680      	mov	r8, r0
 8024a36:	4689      	mov	r9, r1
 8024a38:	f7db fc30 	bl	800029c <__aeabi_dsub>
 8024a3c:	4602      	mov	r2, r0
 8024a3e:	460b      	mov	r3, r1
 8024a40:	4620      	mov	r0, r4
 8024a42:	4629      	mov	r1, r5
 8024a44:	f7db fc2a 	bl	800029c <__aeabi_dsub>
 8024a48:	4642      	mov	r2, r8
 8024a4a:	4606      	mov	r6, r0
 8024a4c:	460f      	mov	r7, r1
 8024a4e:	464b      	mov	r3, r9
 8024a50:	4640      	mov	r0, r8
 8024a52:	4649      	mov	r1, r9
 8024a54:	f7db fdda 	bl	800060c <__aeabi_dmul>
 8024a58:	a35b      	add	r3, pc, #364	; (adr r3, 8024bc8 <__ieee754_pow+0x9d0>)
 8024a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a5e:	4604      	mov	r4, r0
 8024a60:	460d      	mov	r5, r1
 8024a62:	f7db fdd3 	bl	800060c <__aeabi_dmul>
 8024a66:	a35a      	add	r3, pc, #360	; (adr r3, 8024bd0 <__ieee754_pow+0x9d8>)
 8024a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a6c:	f7db fc16 	bl	800029c <__aeabi_dsub>
 8024a70:	4622      	mov	r2, r4
 8024a72:	462b      	mov	r3, r5
 8024a74:	f7db fdca 	bl	800060c <__aeabi_dmul>
 8024a78:	a357      	add	r3, pc, #348	; (adr r3, 8024bd8 <__ieee754_pow+0x9e0>)
 8024a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a7e:	f7db fc0f 	bl	80002a0 <__adddf3>
 8024a82:	4622      	mov	r2, r4
 8024a84:	462b      	mov	r3, r5
 8024a86:	f7db fdc1 	bl	800060c <__aeabi_dmul>
 8024a8a:	a355      	add	r3, pc, #340	; (adr r3, 8024be0 <__ieee754_pow+0x9e8>)
 8024a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a90:	f7db fc04 	bl	800029c <__aeabi_dsub>
 8024a94:	4622      	mov	r2, r4
 8024a96:	462b      	mov	r3, r5
 8024a98:	f7db fdb8 	bl	800060c <__aeabi_dmul>
 8024a9c:	a352      	add	r3, pc, #328	; (adr r3, 8024be8 <__ieee754_pow+0x9f0>)
 8024a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aa2:	f7db fbfd 	bl	80002a0 <__adddf3>
 8024aa6:	4622      	mov	r2, r4
 8024aa8:	462b      	mov	r3, r5
 8024aaa:	f7db fdaf 	bl	800060c <__aeabi_dmul>
 8024aae:	4602      	mov	r2, r0
 8024ab0:	460b      	mov	r3, r1
 8024ab2:	4640      	mov	r0, r8
 8024ab4:	4649      	mov	r1, r9
 8024ab6:	f7db fbf1 	bl	800029c <__aeabi_dsub>
 8024aba:	4604      	mov	r4, r0
 8024abc:	460d      	mov	r5, r1
 8024abe:	4602      	mov	r2, r0
 8024ac0:	460b      	mov	r3, r1
 8024ac2:	4640      	mov	r0, r8
 8024ac4:	4649      	mov	r1, r9
 8024ac6:	f7db fda1 	bl	800060c <__aeabi_dmul>
 8024aca:	2200      	movs	r2, #0
 8024acc:	e9cd 0100 	strd	r0, r1, [sp]
 8024ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024ad4:	4620      	mov	r0, r4
 8024ad6:	4629      	mov	r1, r5
 8024ad8:	f7db fbe0 	bl	800029c <__aeabi_dsub>
 8024adc:	4602      	mov	r2, r0
 8024ade:	460b      	mov	r3, r1
 8024ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024ae4:	f7db febc 	bl	8000860 <__aeabi_ddiv>
 8024ae8:	4632      	mov	r2, r6
 8024aea:	4604      	mov	r4, r0
 8024aec:	460d      	mov	r5, r1
 8024aee:	463b      	mov	r3, r7
 8024af0:	4640      	mov	r0, r8
 8024af2:	4649      	mov	r1, r9
 8024af4:	f7db fd8a 	bl	800060c <__aeabi_dmul>
 8024af8:	4632      	mov	r2, r6
 8024afa:	463b      	mov	r3, r7
 8024afc:	f7db fbd0 	bl	80002a0 <__adddf3>
 8024b00:	4602      	mov	r2, r0
 8024b02:	460b      	mov	r3, r1
 8024b04:	4620      	mov	r0, r4
 8024b06:	4629      	mov	r1, r5
 8024b08:	f7db fbc8 	bl	800029c <__aeabi_dsub>
 8024b0c:	4642      	mov	r2, r8
 8024b0e:	464b      	mov	r3, r9
 8024b10:	f7db fbc4 	bl	800029c <__aeabi_dsub>
 8024b14:	4602      	mov	r2, r0
 8024b16:	460b      	mov	r3, r1
 8024b18:	2000      	movs	r0, #0
 8024b1a:	4939      	ldr	r1, [pc, #228]	; (8024c00 <__ieee754_pow+0xa08>)
 8024b1c:	f7db fbbe 	bl	800029c <__aeabi_dsub>
 8024b20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8024b24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024b28:	4602      	mov	r2, r0
 8024b2a:	460b      	mov	r3, r1
 8024b2c:	da2f      	bge.n	8024b8e <__ieee754_pow+0x996>
 8024b2e:	4650      	mov	r0, sl
 8024b30:	ec43 2b10 	vmov	d0, r2, r3
 8024b34:	f000 f9c0 	bl	8024eb8 <scalbn>
 8024b38:	ec51 0b10 	vmov	r0, r1, d0
 8024b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024b40:	f7ff bbf1 	b.w	8024326 <__ieee754_pow+0x12e>
 8024b44:	4b2f      	ldr	r3, [pc, #188]	; (8024c04 <__ieee754_pow+0xa0c>)
 8024b46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024b4a:	429e      	cmp	r6, r3
 8024b4c:	f77f af0c 	ble.w	8024968 <__ieee754_pow+0x770>
 8024b50:	4b2d      	ldr	r3, [pc, #180]	; (8024c08 <__ieee754_pow+0xa10>)
 8024b52:	440b      	add	r3, r1
 8024b54:	4303      	orrs	r3, r0
 8024b56:	d00b      	beq.n	8024b70 <__ieee754_pow+0x978>
 8024b58:	a325      	add	r3, pc, #148	; (adr r3, 8024bf0 <__ieee754_pow+0x9f8>)
 8024b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024b62:	f7db fd53 	bl	800060c <__aeabi_dmul>
 8024b66:	a322      	add	r3, pc, #136	; (adr r3, 8024bf0 <__ieee754_pow+0x9f8>)
 8024b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b6c:	f7ff bbdb 	b.w	8024326 <__ieee754_pow+0x12e>
 8024b70:	4622      	mov	r2, r4
 8024b72:	462b      	mov	r3, r5
 8024b74:	f7db fb92 	bl	800029c <__aeabi_dsub>
 8024b78:	4642      	mov	r2, r8
 8024b7a:	464b      	mov	r3, r9
 8024b7c:	f7db ffcc 	bl	8000b18 <__aeabi_dcmpge>
 8024b80:	2800      	cmp	r0, #0
 8024b82:	f43f aef1 	beq.w	8024968 <__ieee754_pow+0x770>
 8024b86:	e7e7      	b.n	8024b58 <__ieee754_pow+0x960>
 8024b88:	f04f 0a00 	mov.w	sl, #0
 8024b8c:	e718      	b.n	80249c0 <__ieee754_pow+0x7c8>
 8024b8e:	4621      	mov	r1, r4
 8024b90:	e7d4      	b.n	8024b3c <__ieee754_pow+0x944>
 8024b92:	2000      	movs	r0, #0
 8024b94:	491a      	ldr	r1, [pc, #104]	; (8024c00 <__ieee754_pow+0xa08>)
 8024b96:	f7ff bb8f 	b.w	80242b8 <__ieee754_pow+0xc0>
 8024b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024b9e:	f7ff bb8b 	b.w	80242b8 <__ieee754_pow+0xc0>
 8024ba2:	4630      	mov	r0, r6
 8024ba4:	4639      	mov	r1, r7
 8024ba6:	f7ff bb87 	b.w	80242b8 <__ieee754_pow+0xc0>
 8024baa:	4693      	mov	fp, r2
 8024bac:	f7ff bb98 	b.w	80242e0 <__ieee754_pow+0xe8>
 8024bb0:	00000000 	.word	0x00000000
 8024bb4:	3fe62e43 	.word	0x3fe62e43
 8024bb8:	fefa39ef 	.word	0xfefa39ef
 8024bbc:	3fe62e42 	.word	0x3fe62e42
 8024bc0:	0ca86c39 	.word	0x0ca86c39
 8024bc4:	be205c61 	.word	0xbe205c61
 8024bc8:	72bea4d0 	.word	0x72bea4d0
 8024bcc:	3e663769 	.word	0x3e663769
 8024bd0:	c5d26bf1 	.word	0xc5d26bf1
 8024bd4:	3ebbbd41 	.word	0x3ebbbd41
 8024bd8:	af25de2c 	.word	0xaf25de2c
 8024bdc:	3f11566a 	.word	0x3f11566a
 8024be0:	16bebd93 	.word	0x16bebd93
 8024be4:	3f66c16c 	.word	0x3f66c16c
 8024be8:	5555553e 	.word	0x5555553e
 8024bec:	3fc55555 	.word	0x3fc55555
 8024bf0:	c2f8f359 	.word	0xc2f8f359
 8024bf4:	01a56e1f 	.word	0x01a56e1f
 8024bf8:	3fe00000 	.word	0x3fe00000
 8024bfc:	000fffff 	.word	0x000fffff
 8024c00:	3ff00000 	.word	0x3ff00000
 8024c04:	4090cbff 	.word	0x4090cbff
 8024c08:	3f6f3400 	.word	0x3f6f3400
 8024c0c:	652b82fe 	.word	0x652b82fe
 8024c10:	3c971547 	.word	0x3c971547

08024c14 <__ieee754_sqrt>:
 8024c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c18:	4955      	ldr	r1, [pc, #340]	; (8024d70 <__ieee754_sqrt+0x15c>)
 8024c1a:	ec55 4b10 	vmov	r4, r5, d0
 8024c1e:	43a9      	bics	r1, r5
 8024c20:	462b      	mov	r3, r5
 8024c22:	462a      	mov	r2, r5
 8024c24:	d112      	bne.n	8024c4c <__ieee754_sqrt+0x38>
 8024c26:	ee10 2a10 	vmov	r2, s0
 8024c2a:	ee10 0a10 	vmov	r0, s0
 8024c2e:	4629      	mov	r1, r5
 8024c30:	f7db fcec 	bl	800060c <__aeabi_dmul>
 8024c34:	4602      	mov	r2, r0
 8024c36:	460b      	mov	r3, r1
 8024c38:	4620      	mov	r0, r4
 8024c3a:	4629      	mov	r1, r5
 8024c3c:	f7db fb30 	bl	80002a0 <__adddf3>
 8024c40:	4604      	mov	r4, r0
 8024c42:	460d      	mov	r5, r1
 8024c44:	ec45 4b10 	vmov	d0, r4, r5
 8024c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024c4c:	2d00      	cmp	r5, #0
 8024c4e:	ee10 0a10 	vmov	r0, s0
 8024c52:	4621      	mov	r1, r4
 8024c54:	dc0f      	bgt.n	8024c76 <__ieee754_sqrt+0x62>
 8024c56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024c5a:	4330      	orrs	r0, r6
 8024c5c:	d0f2      	beq.n	8024c44 <__ieee754_sqrt+0x30>
 8024c5e:	b155      	cbz	r5, 8024c76 <__ieee754_sqrt+0x62>
 8024c60:	ee10 2a10 	vmov	r2, s0
 8024c64:	4620      	mov	r0, r4
 8024c66:	4629      	mov	r1, r5
 8024c68:	f7db fb18 	bl	800029c <__aeabi_dsub>
 8024c6c:	4602      	mov	r2, r0
 8024c6e:	460b      	mov	r3, r1
 8024c70:	f7db fdf6 	bl	8000860 <__aeabi_ddiv>
 8024c74:	e7e4      	b.n	8024c40 <__ieee754_sqrt+0x2c>
 8024c76:	151b      	asrs	r3, r3, #20
 8024c78:	d073      	beq.n	8024d62 <__ieee754_sqrt+0x14e>
 8024c7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024c7e:	07dd      	lsls	r5, r3, #31
 8024c80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024c84:	bf48      	it	mi
 8024c86:	0fc8      	lsrmi	r0, r1, #31
 8024c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8024c8c:	bf44      	itt	mi
 8024c8e:	0049      	lslmi	r1, r1, #1
 8024c90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8024c94:	2500      	movs	r5, #0
 8024c96:	1058      	asrs	r0, r3, #1
 8024c98:	0fcb      	lsrs	r3, r1, #31
 8024c9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8024c9e:	0049      	lsls	r1, r1, #1
 8024ca0:	2316      	movs	r3, #22
 8024ca2:	462c      	mov	r4, r5
 8024ca4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8024ca8:	19a7      	adds	r7, r4, r6
 8024caa:	4297      	cmp	r7, r2
 8024cac:	bfde      	ittt	le
 8024cae:	19bc      	addle	r4, r7, r6
 8024cb0:	1bd2      	suble	r2, r2, r7
 8024cb2:	19ad      	addle	r5, r5, r6
 8024cb4:	0fcf      	lsrs	r7, r1, #31
 8024cb6:	3b01      	subs	r3, #1
 8024cb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8024cbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024cc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024cc4:	d1f0      	bne.n	8024ca8 <__ieee754_sqrt+0x94>
 8024cc6:	f04f 0c20 	mov.w	ip, #32
 8024cca:	469e      	mov	lr, r3
 8024ccc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024cd0:	42a2      	cmp	r2, r4
 8024cd2:	eb06 070e 	add.w	r7, r6, lr
 8024cd6:	dc02      	bgt.n	8024cde <__ieee754_sqrt+0xca>
 8024cd8:	d112      	bne.n	8024d00 <__ieee754_sqrt+0xec>
 8024cda:	428f      	cmp	r7, r1
 8024cdc:	d810      	bhi.n	8024d00 <__ieee754_sqrt+0xec>
 8024cde:	2f00      	cmp	r7, #0
 8024ce0:	eb07 0e06 	add.w	lr, r7, r6
 8024ce4:	da42      	bge.n	8024d6c <__ieee754_sqrt+0x158>
 8024ce6:	f1be 0f00 	cmp.w	lr, #0
 8024cea:	db3f      	blt.n	8024d6c <__ieee754_sqrt+0x158>
 8024cec:	f104 0801 	add.w	r8, r4, #1
 8024cf0:	1b12      	subs	r2, r2, r4
 8024cf2:	428f      	cmp	r7, r1
 8024cf4:	bf88      	it	hi
 8024cf6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024cfa:	1bc9      	subs	r1, r1, r7
 8024cfc:	4433      	add	r3, r6
 8024cfe:	4644      	mov	r4, r8
 8024d00:	0052      	lsls	r2, r2, #1
 8024d02:	f1bc 0c01 	subs.w	ip, ip, #1
 8024d06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024d0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024d0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024d12:	d1dd      	bne.n	8024cd0 <__ieee754_sqrt+0xbc>
 8024d14:	430a      	orrs	r2, r1
 8024d16:	d006      	beq.n	8024d26 <__ieee754_sqrt+0x112>
 8024d18:	1c5c      	adds	r4, r3, #1
 8024d1a:	bf13      	iteet	ne
 8024d1c:	3301      	addne	r3, #1
 8024d1e:	3501      	addeq	r5, #1
 8024d20:	4663      	moveq	r3, ip
 8024d22:	f023 0301 	bicne.w	r3, r3, #1
 8024d26:	106a      	asrs	r2, r5, #1
 8024d28:	085b      	lsrs	r3, r3, #1
 8024d2a:	07e9      	lsls	r1, r5, #31
 8024d2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8024d30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8024d34:	bf48      	it	mi
 8024d36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8024d3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8024d3e:	461c      	mov	r4, r3
 8024d40:	e780      	b.n	8024c44 <__ieee754_sqrt+0x30>
 8024d42:	0aca      	lsrs	r2, r1, #11
 8024d44:	3815      	subs	r0, #21
 8024d46:	0549      	lsls	r1, r1, #21
 8024d48:	2a00      	cmp	r2, #0
 8024d4a:	d0fa      	beq.n	8024d42 <__ieee754_sqrt+0x12e>
 8024d4c:	02d6      	lsls	r6, r2, #11
 8024d4e:	d50a      	bpl.n	8024d66 <__ieee754_sqrt+0x152>
 8024d50:	f1c3 0420 	rsb	r4, r3, #32
 8024d54:	fa21 f404 	lsr.w	r4, r1, r4
 8024d58:	1e5d      	subs	r5, r3, #1
 8024d5a:	4099      	lsls	r1, r3
 8024d5c:	4322      	orrs	r2, r4
 8024d5e:	1b43      	subs	r3, r0, r5
 8024d60:	e78b      	b.n	8024c7a <__ieee754_sqrt+0x66>
 8024d62:	4618      	mov	r0, r3
 8024d64:	e7f0      	b.n	8024d48 <__ieee754_sqrt+0x134>
 8024d66:	0052      	lsls	r2, r2, #1
 8024d68:	3301      	adds	r3, #1
 8024d6a:	e7ef      	b.n	8024d4c <__ieee754_sqrt+0x138>
 8024d6c:	46a0      	mov	r8, r4
 8024d6e:	e7bf      	b.n	8024cf0 <__ieee754_sqrt+0xdc>
 8024d70:	7ff00000 	.word	0x7ff00000

08024d74 <fabs>:
 8024d74:	ec51 0b10 	vmov	r0, r1, d0
 8024d78:	ee10 2a10 	vmov	r2, s0
 8024d7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024d80:	ec43 2b10 	vmov	d0, r2, r3
 8024d84:	4770      	bx	lr

08024d86 <finite>:
 8024d86:	ee10 3a90 	vmov	r3, s1
 8024d8a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024d8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024d92:	0fc0      	lsrs	r0, r0, #31
 8024d94:	4770      	bx	lr

08024d96 <matherr>:
 8024d96:	2000      	movs	r0, #0
 8024d98:	4770      	bx	lr
 8024d9a:	0000      	movs	r0, r0
 8024d9c:	0000      	movs	r0, r0
	...

08024da0 <nan>:
 8024da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024da8 <nan+0x8>
 8024da4:	4770      	bx	lr
 8024da6:	bf00      	nop
 8024da8:	00000000 	.word	0x00000000
 8024dac:	7ff80000 	.word	0x7ff80000

08024db0 <rint>:
 8024db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024db2:	ec51 0b10 	vmov	r0, r1, d0
 8024db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024dba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8024dbe:	2e13      	cmp	r6, #19
 8024dc0:	460b      	mov	r3, r1
 8024dc2:	ee10 4a10 	vmov	r4, s0
 8024dc6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8024dca:	dc56      	bgt.n	8024e7a <rint+0xca>
 8024dcc:	2e00      	cmp	r6, #0
 8024dce:	da2b      	bge.n	8024e28 <rint+0x78>
 8024dd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024dd4:	4302      	orrs	r2, r0
 8024dd6:	d023      	beq.n	8024e20 <rint+0x70>
 8024dd8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8024ddc:	4302      	orrs	r2, r0
 8024dde:	4254      	negs	r4, r2
 8024de0:	4314      	orrs	r4, r2
 8024de2:	0c4b      	lsrs	r3, r1, #17
 8024de4:	0b24      	lsrs	r4, r4, #12
 8024de6:	045b      	lsls	r3, r3, #17
 8024de8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8024dec:	ea44 0103 	orr.w	r1, r4, r3
 8024df0:	460b      	mov	r3, r1
 8024df2:	492f      	ldr	r1, [pc, #188]	; (8024eb0 <rint+0x100>)
 8024df4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8024df8:	e9d1 6700 	ldrd	r6, r7, [r1]
 8024dfc:	4602      	mov	r2, r0
 8024dfe:	4639      	mov	r1, r7
 8024e00:	4630      	mov	r0, r6
 8024e02:	f7db fa4d 	bl	80002a0 <__adddf3>
 8024e06:	e9cd 0100 	strd	r0, r1, [sp]
 8024e0a:	463b      	mov	r3, r7
 8024e0c:	4632      	mov	r2, r6
 8024e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024e12:	f7db fa43 	bl	800029c <__aeabi_dsub>
 8024e16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024e1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8024e1e:	4639      	mov	r1, r7
 8024e20:	ec41 0b10 	vmov	d0, r0, r1
 8024e24:	b003      	add	sp, #12
 8024e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e28:	4a22      	ldr	r2, [pc, #136]	; (8024eb4 <rint+0x104>)
 8024e2a:	4132      	asrs	r2, r6
 8024e2c:	ea01 0702 	and.w	r7, r1, r2
 8024e30:	4307      	orrs	r7, r0
 8024e32:	d0f5      	beq.n	8024e20 <rint+0x70>
 8024e34:	0852      	lsrs	r2, r2, #1
 8024e36:	4011      	ands	r1, r2
 8024e38:	430c      	orrs	r4, r1
 8024e3a:	d00b      	beq.n	8024e54 <rint+0xa4>
 8024e3c:	ea23 0202 	bic.w	r2, r3, r2
 8024e40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024e44:	2e13      	cmp	r6, #19
 8024e46:	fa43 f306 	asr.w	r3, r3, r6
 8024e4a:	bf0c      	ite	eq
 8024e4c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8024e50:	2400      	movne	r4, #0
 8024e52:	4313      	orrs	r3, r2
 8024e54:	4916      	ldr	r1, [pc, #88]	; (8024eb0 <rint+0x100>)
 8024e56:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8024e5a:	4622      	mov	r2, r4
 8024e5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024e60:	4620      	mov	r0, r4
 8024e62:	4629      	mov	r1, r5
 8024e64:	f7db fa1c 	bl	80002a0 <__adddf3>
 8024e68:	e9cd 0100 	strd	r0, r1, [sp]
 8024e6c:	4622      	mov	r2, r4
 8024e6e:	462b      	mov	r3, r5
 8024e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024e74:	f7db fa12 	bl	800029c <__aeabi_dsub>
 8024e78:	e7d2      	b.n	8024e20 <rint+0x70>
 8024e7a:	2e33      	cmp	r6, #51	; 0x33
 8024e7c:	dd07      	ble.n	8024e8e <rint+0xde>
 8024e7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024e82:	d1cd      	bne.n	8024e20 <rint+0x70>
 8024e84:	ee10 2a10 	vmov	r2, s0
 8024e88:	f7db fa0a 	bl	80002a0 <__adddf3>
 8024e8c:	e7c8      	b.n	8024e20 <rint+0x70>
 8024e8e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8024e92:	f04f 32ff 	mov.w	r2, #4294967295
 8024e96:	40f2      	lsrs	r2, r6
 8024e98:	4210      	tst	r0, r2
 8024e9a:	d0c1      	beq.n	8024e20 <rint+0x70>
 8024e9c:	0852      	lsrs	r2, r2, #1
 8024e9e:	4210      	tst	r0, r2
 8024ea0:	bf1f      	itttt	ne
 8024ea2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8024ea6:	ea20 0202 	bicne.w	r2, r0, r2
 8024eaa:	4134      	asrne	r4, r6
 8024eac:	4314      	orrne	r4, r2
 8024eae:	e7d1      	b.n	8024e54 <rint+0xa4>
 8024eb0:	08026e80 	.word	0x08026e80
 8024eb4:	000fffff 	.word	0x000fffff

08024eb8 <scalbn>:
 8024eb8:	b570      	push	{r4, r5, r6, lr}
 8024eba:	ec55 4b10 	vmov	r4, r5, d0
 8024ebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024ec2:	4606      	mov	r6, r0
 8024ec4:	462b      	mov	r3, r5
 8024ec6:	b9aa      	cbnz	r2, 8024ef4 <scalbn+0x3c>
 8024ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024ecc:	4323      	orrs	r3, r4
 8024ece:	d03b      	beq.n	8024f48 <scalbn+0x90>
 8024ed0:	4b31      	ldr	r3, [pc, #196]	; (8024f98 <scalbn+0xe0>)
 8024ed2:	4629      	mov	r1, r5
 8024ed4:	2200      	movs	r2, #0
 8024ed6:	ee10 0a10 	vmov	r0, s0
 8024eda:	f7db fb97 	bl	800060c <__aeabi_dmul>
 8024ede:	4b2f      	ldr	r3, [pc, #188]	; (8024f9c <scalbn+0xe4>)
 8024ee0:	429e      	cmp	r6, r3
 8024ee2:	4604      	mov	r4, r0
 8024ee4:	460d      	mov	r5, r1
 8024ee6:	da12      	bge.n	8024f0e <scalbn+0x56>
 8024ee8:	a327      	add	r3, pc, #156	; (adr r3, 8024f88 <scalbn+0xd0>)
 8024eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024eee:	f7db fb8d 	bl	800060c <__aeabi_dmul>
 8024ef2:	e009      	b.n	8024f08 <scalbn+0x50>
 8024ef4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024ef8:	428a      	cmp	r2, r1
 8024efa:	d10c      	bne.n	8024f16 <scalbn+0x5e>
 8024efc:	ee10 2a10 	vmov	r2, s0
 8024f00:	4620      	mov	r0, r4
 8024f02:	4629      	mov	r1, r5
 8024f04:	f7db f9cc 	bl	80002a0 <__adddf3>
 8024f08:	4604      	mov	r4, r0
 8024f0a:	460d      	mov	r5, r1
 8024f0c:	e01c      	b.n	8024f48 <scalbn+0x90>
 8024f0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024f12:	460b      	mov	r3, r1
 8024f14:	3a36      	subs	r2, #54	; 0x36
 8024f16:	4432      	add	r2, r6
 8024f18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024f1c:	428a      	cmp	r2, r1
 8024f1e:	dd0b      	ble.n	8024f38 <scalbn+0x80>
 8024f20:	ec45 4b11 	vmov	d1, r4, r5
 8024f24:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8024f90 <scalbn+0xd8>
 8024f28:	f000 f83c 	bl	8024fa4 <copysign>
 8024f2c:	a318      	add	r3, pc, #96	; (adr r3, 8024f90 <scalbn+0xd8>)
 8024f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f32:	ec51 0b10 	vmov	r0, r1, d0
 8024f36:	e7da      	b.n	8024eee <scalbn+0x36>
 8024f38:	2a00      	cmp	r2, #0
 8024f3a:	dd08      	ble.n	8024f4e <scalbn+0x96>
 8024f3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024f40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024f44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024f48:	ec45 4b10 	vmov	d0, r4, r5
 8024f4c:	bd70      	pop	{r4, r5, r6, pc}
 8024f4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024f52:	da0d      	bge.n	8024f70 <scalbn+0xb8>
 8024f54:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024f58:	429e      	cmp	r6, r3
 8024f5a:	ec45 4b11 	vmov	d1, r4, r5
 8024f5e:	dce1      	bgt.n	8024f24 <scalbn+0x6c>
 8024f60:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8024f88 <scalbn+0xd0>
 8024f64:	f000 f81e 	bl	8024fa4 <copysign>
 8024f68:	a307      	add	r3, pc, #28	; (adr r3, 8024f88 <scalbn+0xd0>)
 8024f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f6e:	e7e0      	b.n	8024f32 <scalbn+0x7a>
 8024f70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024f74:	3236      	adds	r2, #54	; 0x36
 8024f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024f7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024f7e:	4620      	mov	r0, r4
 8024f80:	4629      	mov	r1, r5
 8024f82:	2200      	movs	r2, #0
 8024f84:	4b06      	ldr	r3, [pc, #24]	; (8024fa0 <scalbn+0xe8>)
 8024f86:	e7b2      	b.n	8024eee <scalbn+0x36>
 8024f88:	c2f8f359 	.word	0xc2f8f359
 8024f8c:	01a56e1f 	.word	0x01a56e1f
 8024f90:	8800759c 	.word	0x8800759c
 8024f94:	7e37e43c 	.word	0x7e37e43c
 8024f98:	43500000 	.word	0x43500000
 8024f9c:	ffff3cb0 	.word	0xffff3cb0
 8024fa0:	3c900000 	.word	0x3c900000

08024fa4 <copysign>:
 8024fa4:	ec51 0b10 	vmov	r0, r1, d0
 8024fa8:	ee11 0a90 	vmov	r0, s3
 8024fac:	ee10 2a10 	vmov	r2, s0
 8024fb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8024fb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8024fb8:	ea41 0300 	orr.w	r3, r1, r0
 8024fbc:	ec43 2b10 	vmov	d0, r2, r3
 8024fc0:	4770      	bx	lr
	...

08024fc4 <__errno>:
 8024fc4:	4b01      	ldr	r3, [pc, #4]	; (8024fcc <__errno+0x8>)
 8024fc6:	6818      	ldr	r0, [r3, #0]
 8024fc8:	4770      	bx	lr
 8024fca:	bf00      	nop
 8024fcc:	200000f4 	.word	0x200000f4

08024fd0 <_init>:
 8024fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fd2:	bf00      	nop
 8024fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024fd6:	bc08      	pop	{r3}
 8024fd8:	469e      	mov	lr, r3
 8024fda:	4770      	bx	lr

08024fdc <_fini>:
 8024fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fde:	bf00      	nop
 8024fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024fe2:	bc08      	pop	{r3}
 8024fe4:	469e      	mov	lr, r3
 8024fe6:	4770      	bx	lr

08024fe8 <__memxor_block_core_veneer>:
 8024fe8:	f85f f000 	ldr.w	pc, [pc]	; 8024fec <__memxor_block_core_veneer+0x4>
 8024fec:	20000005 	.word	0x20000005

Disassembly of section .ARM.__at_0x08000534:

08024ff0 <TOGGLE_RESET_EXTI_CALLBACK>:
{
 8024ff0:	b580      	push	{r7, lr}
 8024ff2:	b084      	sub	sp, #16
 8024ff4:	af00      	add	r7, sp, #0
	unsigned short state=FLAG_WRT_ERR;
 8024ff6:	230f      	movs	r3, #15
 8024ff8:	81fb      	strh	r3, [r7, #14]
	unsigned int JumpFlag[2] = {0};
 8024ffa:	1d3b      	adds	r3, r7, #4
 8024ffc:	2200      	movs	r2, #0
 8024ffe:	601a      	str	r2, [r3, #0]
 8025000:	605a      	str	r2, [r3, #4]
	if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_N_FLAG)
 8025002:	4819      	ldr	r0, [pc, #100]	; (8025068 <_etext+0x78>)
 8025004:	f7f7 fcc2 	bl	801c98c <STMFLASH_Read32>
 8025008:	4603      	mov	r3, r0
 802500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802500e:	d111      	bne.n	8025034 <TOGGLE_RESET_EXTI_CALLBACK+0x44>
		JumpFlag[0] = JUMP_FLAG;
 8025010:	4b16      	ldr	r3, [pc, #88]	; (802506c <_etext+0x7c>)
 8025012:	607b      	str	r3, [r7, #4]
		JumpFlag[1] = JUMP_FLAG;
 8025014:	4b15      	ldr	r3, [pc, #84]	; (802506c <_etext+0x7c>)
 8025016:	60bb      	str	r3, [r7, #8]
		if(LL_FLASH_Program64(JUMP_FLAG_ADDRESS, (uint32_t *)&JumpFlag)!=LL_OK)
 8025018:	1d3b      	adds	r3, r7, #4
 802501a:	4619      	mov	r1, r3
 802501c:	4812      	ldr	r0, [pc, #72]	; (8025068 <_etext+0x78>)
 802501e:	f7f7 fc0b 	bl	801c838 <LL_FLASH_Program64>
 8025022:	4603      	mov	r3, r0
 8025024:	2b00      	cmp	r3, #0
 8025026:	d002      	beq.n	802502e <TOGGLE_RESET_EXTI_CALLBACK+0x3e>
			state = FLAG_WRT_ERR;//Write Error
 8025028:	230f      	movs	r3, #15
 802502a:	81fb      	strh	r3, [r7, #14]
 802502c:	e016      	b.n	802505c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = FLAG_WRT_OK;//Write Ok
 802502e:	2300      	movs	r3, #0
 8025030:	81fb      	strh	r3, [r7, #14]
 8025032:	e013      	b.n	802505c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
	else if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_FLAG)
 8025034:	480c      	ldr	r0, [pc, #48]	; (8025068 <_etext+0x78>)
 8025036:	f7f7 fca9 	bl	801c98c <STMFLASH_Read32>
 802503a:	4602      	mov	r2, r0
 802503c:	4b0b      	ldr	r3, [pc, #44]	; (802506c <_etext+0x7c>)
 802503e:	429a      	cmp	r2, r3
 8025040:	d10c      	bne.n	802505c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
		LL_FLASH_PageErase(254);
 8025042:	20fe      	movs	r0, #254	; 0xfe
 8025044:	f7f7 fb9c 	bl	801c780 <LL_FLASH_PageErase>
		if (STMFLASH_BankSwitch() != LL_OK)
 8025048:	f7f7 fcac 	bl	801c9a4 <STMFLASH_BankSwitch>
 802504c:	4603      	mov	r3, r0
 802504e:	2b00      	cmp	r3, #0
 8025050:	d002      	beq.n	8025058 <TOGGLE_RESET_EXTI_CALLBACK+0x68>
			state = BANK_TOGGLE_ERR;//Jump Error
 8025052:	231f      	movs	r3, #31
 8025054:	81fb      	strh	r3, [r7, #14]
 8025056:	e001      	b.n	802505c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = BANK_TOGGLE_OK;//Jump OK
 8025058:	2310      	movs	r3, #16
 802505a:	81fb      	strh	r3, [r7, #14]
	return state;
 802505c:	89fb      	ldrh	r3, [r7, #14]
 802505e:	b2db      	uxtb	r3, r3
}
 8025060:	4618      	mov	r0, r3
 8025062:	3710      	adds	r7, #16
 8025064:	46bd      	mov	sp, r7
 8025066:	bd80      	pop	{r7, pc}
 8025068:	0807f7f8 	.word	0x0807f7f8
 802506c:	4a554d50 	.word	0x4a554d50
