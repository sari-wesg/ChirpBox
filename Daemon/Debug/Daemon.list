
Daemon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000252f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.__at_0x08000534 00000080  08025488  08025488  00035488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e80  08025508  08025508  00035508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.__at_0x08020610 00000400  08027388  08027388  00037388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08027788  08027788  00040328  2**0
                  CONTENTS
  6 .ARM          00000008  08027788  08027788  00037788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08027790  08027790  00040328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08027790  08027790  00037790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08027798  08027798  00037798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000328  20000000  080277a0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001fb8  20000328  08027ac8  00040328  2**3
                  ALLOC
 12 ._user_heap_stack 00005400  200022e0  08027ac8  000422e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00069326  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a187  00000000  00000000  000a967e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002688  00000000  00000000  000b3808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002578  00000000  00000000  000b5e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00039ea2  00000000  00000000  000b8408  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00035d54  00000000  00000000  000f22aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00124427  00000000  00000000  00127ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0024c425  2**0
                  CONTENTS, READONLY
 22 gpi_profile_info 0000000c  00000000  00000000  0024c4a0  2**2
                  CONTENTS, READONLY
 23 .debug_frame  0000b598  00000000  00000000  0024c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000328 	.word	0x20000328
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08025468 	.word	0x08025468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	08025468 	.word	0x08025468

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d2:	f1a4 0401 	sub.w	r4, r4, #1
 80003d6:	d1e9      	bne.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bd 	b.w	8000f98 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b972 	b.w	8000f98 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4615      	mov	r5, r2
 8000cde:	d967      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b14a      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce6:	f1c2 0720 	rsb	r7, r2, #32
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf2:	4095      	lsls	r5, r2
 8000cf4:	ea47 0803 	orr.w	r8, r7, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d04:	fa1f fc85 	uxth.w	ip, r5
 8000d08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d10:	fb07 f10c 	mul.w	r1, r7, ip
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18eb      	adds	r3, r5, r3
 8000d1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1e:	f080 811b 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8118 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d28:	3f02      	subs	r7, #2
 8000d2a:	442b      	add	r3, r5
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d54:	3802      	subs	r0, #2
 8000d56:	442c      	add	r4, r5
 8000d58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	2700      	movs	r7, #0
 8000d62:	b11e      	cbz	r6, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xbe>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80eb 	beq.w	8000f52 <__udivmoddi4+0x286>
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d82:	4638      	mov	r0, r7
 8000d84:	4639      	mov	r1, r7
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f783 	clz	r7, r3
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d147      	bne.n	8000e22 <__udivmoddi4+0x156>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd0>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2c4>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4698      	mov	r8, r3
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000daa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xe8>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 808f 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbe:	1b49      	subs	r1, r1, r5
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	fa1f f885 	uxth.w	r8, r5
 8000dc8:	2701      	movs	r7, #1
 8000dca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000de0:	18eb      	adds	r3, r5, r3
 8000de2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dee:	4684      	mov	ip, r0
 8000df0:	1a59      	subs	r1, r3, r1
 8000df2:	b2a3      	uxth	r3, r4
 8000df4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e00:	fb08 f800 	mul.w	r8, r8, r0
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x14c>
 8000e08:	192c      	adds	r4, r5, r4
 8000e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14a>
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	f200 80b6 	bhi.w	8000f82 <__udivmoddi4+0x2b6>
 8000e16:	4618      	mov	r0, r3
 8000e18:	eba4 0408 	sub.w	r4, r4, r8
 8000e1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e20:	e79f      	b.n	8000d62 <__udivmoddi4+0x96>
 8000e22:	f1c7 0c20 	rsb	ip, r7, #32
 8000e26:	40bb      	lsls	r3, r7
 8000e28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e30:	fa01 f407 	lsl.w	r4, r1, r7
 8000e34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e40:	4325      	orrs	r5, r4
 8000e42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e46:	0c2c      	lsrs	r4, r5, #16
 8000e48:	fb08 3319 	mls	r3, r8, r9, r3
 8000e4c:	fa1f fa8e 	uxth.w	sl, lr
 8000e50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e54:	fb09 f40a 	mul.w	r4, r9, sl
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1e 0303 	adds.w	r3, lr, r3
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	f080 8087 	bcs.w	8000f7e <__udivmoddi4+0x2b2>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f240 8084 	bls.w	8000f7e <__udivmoddi4+0x2b2>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4473      	add	r3, lr
 8000e7c:	1b1b      	subs	r3, r3, r4
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1e 0404 	adds.w	r4, lr, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9c:	d26b      	bcs.n	8000f76 <__udivmoddi4+0x2aa>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d969      	bls.n	8000f76 <__udivmoddi4+0x2aa>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4474      	add	r4, lr
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c2      	mov	sl, r8
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	d354      	bcc.n	8000f64 <__udivmoddi4+0x298>
 8000eba:	d051      	beq.n	8000f60 <__udivmoddi4+0x294>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d069      	beq.n	8000f94 <__udivmoddi4+0x2c8>
 8000ec0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ecc:	40fd      	lsrs	r5, r7
 8000ece:	40fc      	lsrs	r4, r7
 8000ed0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e747      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee4:	4095      	lsls	r5, r2
 8000ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eea:	fa21 f303 	lsr.w	r3, r1, r3
 8000eee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef2:	4338      	orrs	r0, r7
 8000ef4:	0c01      	lsrs	r1, r0, #16
 8000ef6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efa:	fa1f f885 	uxth.w	r8, r5
 8000efe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb07 f308 	mul.w	r3, r7, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x256>
 8000f12:	1869      	adds	r1, r5, r1
 8000f14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f18:	d22f      	bcs.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d92d      	bls.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1e:	3f02      	subs	r7, #2
 8000f20:	4429      	add	r1, r5
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b281      	uxth	r1, r0
 8000f26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb00 f308 	mul.w	r3, r0, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x27e>
 8000f3a:	1869      	adds	r1, r5, r1
 8000f3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f40:	d217      	bcs.n	8000f72 <__udivmoddi4+0x2a6>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d915      	bls.n	8000f72 <__udivmoddi4+0x2a6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4429      	add	r1, r5
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f50:	e73b      	b.n	8000dca <__udivmoddi4+0xfe>
 8000f52:	4637      	mov	r7, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e709      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	e6e7      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f60:	4541      	cmp	r1, r8
 8000f62:	d2ab      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f68:	eb69 020e 	sbc.w	r2, r9, lr
 8000f6c:	3801      	subs	r0, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	e7a4      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f72:	4660      	mov	r0, ip
 8000f74:	e7e9      	b.n	8000f4a <__udivmoddi4+0x27e>
 8000f76:	4618      	mov	r0, r3
 8000f78:	e795      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7a:	4667      	mov	r7, ip
 8000f7c:	e7d1      	b.n	8000f22 <__udivmoddi4+0x256>
 8000f7e:	4681      	mov	r9, r0
 8000f80:	e77c      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f82:	3802      	subs	r0, #2
 8000f84:	442c      	add	r4, r5
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0x14c>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	442b      	add	r3, r5
 8000f8e:	e72f      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f90:	4638      	mov	r0, r7
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xda>
 8000f94:	4637      	mov	r7, r6
 8000f96:	e6e9      	b.n	8000d6c <__udivmoddi4+0xa0>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <NVIC_SystemReset+0x20>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fac:	4903      	ldr	r1, [pc, #12]	; (8000fbc <NVIC_SystemReset+0x20>)
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <NVIC_SystemReset+0x24>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60cb      	str	r3, [r1, #12]
 8000fb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000fb8:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fba:	e7fd      	b.n	8000fb8 <NVIC_SystemReset+0x1c>
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	05fa0004 	.word	0x05fa0004

08000fc4 <node_id_restore>:
 * @description: Read hardware id
 * @param None
 * @return: None
 */
static void node_id_restore(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	device_id[0] = DEVICE_ID_REG0;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <node_id_restore+0x44>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <node_id_restore+0x48>)
 8000fce:	6013      	str	r3, [r2, #0]
	device_id[1] = DEVICE_ID_REG1;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <node_id_restore+0x4c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <node_id_restore+0x48>)
 8000fd6:	6053      	str	r3, [r2, #4]
	device_id[2] = DEVICE_ID_REG2;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <node_id_restore+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <node_id_restore+0x48>)
 8000fde:	6093      	str	r3, [r2, #8]

	(*(uint32_t *)node_mac) = DEVICE_ID_REG1;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <node_id_restore+0x4c>)
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <node_id_restore+0x54>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
	(*(((uint32_t *)node_mac) + 1)) = DEVICE_ID_REG2 + DEVICE_ID_REG0;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <node_id_restore+0x50>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <node_id_restore+0x44>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	490a      	ldr	r1, [pc, #40]	; (800101c <node_id_restore+0x58>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
	// stm_node_id = (uint32_t)(DEVICE_ID_REG0);
	TOS_NODE_ID = (uint32_t)(DEVICE_ID_REG0);
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <node_id_restore+0x44>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <node_id_restore+0x5c>)
 8000ffc:	6013      	str	r3, [r2, #0]
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	1fff7590 	.word	0x1fff7590
 800100c:	20000ccc 	.word	0x20000ccc
 8001010:	1fff7594 	.word	0x1fff7594
 8001014:	1fff7598 	.word	0x1fff7598
 8001018:	20000cd8 	.word	0x20000cd8
 800101c:	20000cdc 	.word	0x20000cdc
 8001020:	20000000 	.word	0x20000000

08001024 <hardware_init>:
 * @description: Initialization with hardware based on HAL library, peripherals, GPS, interrupt, System clock, radio, node id allocation and rand seed.
 * @param None
 * @return: node_id
 */
static uint8_t hardware_init()
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b093      	sub	sp, #76	; 0x4c
 8001028:	af04      	add	r7, sp, #16
	uint8_t node_id;

	HAL_Init();
 800102a:	f000 fcdd 	bl	80019e8 <HAL_Init>
	gpi_platform_init();
 800102e:	f00d f877 	bl	800e120 <gpi_platform_init>

	#if BANK_1_RUN
	/* Only when the board is stable (eg, after a long time of getting GPS signal), the flash option bytes can be changed. Otherwise, readout protection will be triggered, when the voltage of the external power supply falls below the power down threshold.
	*/
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8001032:	4b91      	ldr	r3, [pc, #580]	; (8001278 <hardware_init+0x254>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a90      	ldr	r2, [pc, #576]	; (8001278 <hardware_init+0x254>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6013      	str	r3, [r2, #0]
	HAL_Delay(5000);
 800103e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001042:	f000 fd1d 	bl	8001a80 <HAL_Delay>
	Bank_WRT_Check();
 8001046:	f019 f94f 	bl	801a2e8 <Bank_WRT_Check>
	#endif

	/* Disable SysTick Interrupt */
	HAL_SuspendTick();
 800104a:	f000 fd37 	bl	8001abc <HAL_SuspendTick>

	menu_bank();
 800104e:	f01c fab9 	bl	801d5c4 <menu_bank>
  __ASM volatile ("cpsie i" : : : "memory");
 8001052:	b662      	cpsie	i

	gpi_int_enable();

	/* init RF transceiver */
	gpi_radio_init();
 8001054:	f00c f97e 	bl	800d354 <gpi_radio_init>
	node_id_restore();
 8001058:	f7ff ffb4 	bl	8000fc4 <node_id_restore>

	PRINTF("\tStarting node 0x%X \n", TOS_NODE_ID);
 800105c:	4b87      	ldr	r3, [pc, #540]	; (800127c <hardware_init+0x258>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4887      	ldr	r0, [pc, #540]	; (8001280 <hardware_init+0x25c>)
 8001064:	f021 faea 	bl	802263c <iprintf>

	/* translate TOS_NODE_ID to logical node id used with mixer */
	for (node_id = 0; node_id < NUM_ELEMENTS(nodes); ++node_id)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{
		PRINTF("node:%lu, 0x%x\n", node_id, nodes[node_id]);
 800106e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001076:	4a83      	ldr	r2, [pc, #524]	; (8001284 <hardware_init+0x260>)
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	461a      	mov	r2, r3
 800107e:	4882      	ldr	r0, [pc, #520]	; (8001288 <hardware_init+0x264>)
 8001080:	f021 fadc 	bl	802263c <iprintf>
		if (nodes[node_id] == 0)
 8001084:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001088:	4a7e      	ldr	r2, [pc, #504]	; (8001284 <hardware_init+0x260>)
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <hardware_init+0x7a>
	for (node_id = 0; node_id < NUM_ELEMENTS(nodes); ++node_id)
 8001092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001096:	3301      	adds	r3, #1
 8001098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		PRINTF("node:%lu, 0x%x\n", node_id, nodes[node_id]);
 800109c:	e7e7      	b.n	800106e <hardware_init+0x4a>
			break;
 800109e:	bf00      	nop
	}
	MX_NUM_NODES_CONF = node_id;
 80010a0:	4a7a      	ldr	r2, [pc, #488]	; (800128c <hardware_init+0x268>)
 80010a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010a6:	7013      	strb	r3, [r2, #0]
	PRINTF("MX_NUM_NODES_CONF:%lu\n", MX_NUM_NODES_CONF);
 80010a8:	4b78      	ldr	r3, [pc, #480]	; (800128c <hardware_init+0x268>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4878      	ldr	r0, [pc, #480]	; (8001290 <hardware_init+0x26c>)
 80010b0:	f021 fac4 	bl	802263c <iprintf>

	for (node_id = 0; node_id < MX_NUM_NODES_CONF; ++node_id)
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010ba:	e00d      	b.n	80010d8 <hardware_init+0xb4>
	{
		if (nodes[node_id] == TOS_NODE_ID)
 80010bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c0:	4a70      	ldr	r2, [pc, #448]	; (8001284 <hardware_init+0x260>)
 80010c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c6:	4b6d      	ldr	r3, [pc, #436]	; (800127c <hardware_init+0x258>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d00b      	beq.n	80010e6 <hardware_init+0xc2>
	for (node_id = 0; node_id < MX_NUM_NODES_CONF; ++node_id)
 80010ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010d2:	3301      	adds	r3, #1
 80010d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010d8:	4b6c      	ldr	r3, [pc, #432]	; (800128c <hardware_init+0x268>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3eb      	bcc.n	80010bc <hardware_init+0x98>
 80010e4:	e000      	b.n	80010e8 <hardware_init+0xc4>
			break;
 80010e6:	bf00      	nop
	}

	if (node_id >= MX_NUM_NODES_CONF)
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <hardware_init+0x268>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d306      	bcc.n	8001102 <hardware_init+0xde>
	{
		PRINTF("Warning: node mapping not found for node 0x%x !!!\n", TOS_NODE_ID);
 80010f4:	4b61      	ldr	r3, [pc, #388]	; (800127c <hardware_init+0x258>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4866      	ldr	r0, [pc, #408]	; (8001294 <hardware_init+0x270>)
 80010fc:	f021 fa9e 	bl	802263c <iprintf>
		while (1)
 8001100:	e7fe      	b.n	8001100 <hardware_init+0xdc>
			;
	}
	PRINTF("Running with node ID: %lu\n", node_id);
 8001102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001106:	4619      	mov	r1, r3
 8001108:	4863      	ldr	r0, [pc, #396]	; (8001298 <hardware_init+0x274>)
 800110a:	f021 fa97 	bl	802263c <iprintf>

	/* init RNG with randomized seed */
	mixer_rand_seed(gpi_mulu_16x16(TOS_NODE_ID, gpi_tick_fast_native()));
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <hardware_init+0x258>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29a      	uxth	r2, r3

//**************************************************************************************************

static ALWAYS_INLINE Gpi_Fast_Tick_Native gpi_tick_fast_native()
{
	return htim2.Instance->CNT;
 8001114:	4b61      	ldr	r3, [pc, #388]	; (800129c <hardware_init+0x278>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	b29b      	uxth	r3, r3
 800111c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800111e:	847b      	strh	r3, [r7, #34]	; 0x22
//**************************************************************************************************
//*************************************************************************************************

static ALWAYS_INLINE uint32_t gpi_mulu_16x16(uint16_t a, uint16_t b)
{
	return (uint32_t)a * (uint32_t)b;
 8001120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001122:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f017 fd85 	bl	8018c38 <mixer_rand_seed>

	DS3231_ClearAlarm1_Time();
 800112e:	f018 fa4f 	bl	80195d0 <DS3231_ClearAlarm1_Time>
	GPS_Init();
 8001132:	f008 fee5 	bl	8009f00 <GPS_Init>
	GPS_On();
 8001136:	f008 ff3f 	bl	8009fb8 <GPS_On>
#if GPS_DATA
	GPS_Waiting_PPS(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f009 f89c 	bl	800a278 <GPS_Waiting_PPS>
	Chirp_Time gps_time;
    memset(&gps_time, 0, sizeof(gps_time));
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	2208      	movs	r2, #8
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f020 fc6a 	bl	8021a22 <memset>
	while(!gps_time.chirp_year)
 800114e:	e009      	b.n	8001164 <hardware_init+0x140>
	{
		gps_time = GPS_Get_Time();
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f008 ff78 	bl	800a048 <GPS_Get_Time>
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	463a      	mov	r2, r7
 800115e:	6810      	ldr	r0, [r2, #0]
 8001160:	6851      	ldr	r1, [r2, #4]
 8001162:	c303      	stmia	r3!, {r0, r1}
	while(!gps_time.chirp_year)
 8001164:	8b3b      	ldrh	r3, [r7, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f2      	beq.n	8001150 <hardware_init+0x12c>
	}
	RTC_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 800116a:	8b3b      	ldrh	r3, [r7, #24]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	7ebc      	ldrb	r4, [r7, #26]
 8001174:	7efd      	ldrb	r5, [r7, #27]
 8001176:	7f3e      	ldrb	r6, [r7, #28]
 8001178:	7f7b      	ldrb	r3, [r7, #29]
 800117a:	7fba      	ldrb	r2, [r7, #30]
 800117c:	7ff9      	ldrb	r1, [r7, #31]
 800117e:	9102      	str	r1, [sp, #8]
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4633      	mov	r3, r6
 8001186:	462a      	mov	r2, r5
 8001188:	4621      	mov	r1, r4
 800118a:	f009 fb53 	bl	800a834 <RTC_ModifyTime>
	#if BANK_1_RUN
	time_t rtc_diff = 0x05;
 800118e:	f04f 0305 	mov.w	r3, #5
 8001192:	f04f 0400 	mov.w	r4, #0
 8001196:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	uint8_t count = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/* if is in bank1, daemon erase jump1 to ensure keep in bank1 */
	while((rtc_diff < 0) || (rtc_diff >= 0x05))
 80011a0:	e044      	b.n	800122c <hardware_init+0x208>
	{
		count++;
 80011a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		assert_reset(count < 10);
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d910      	bls.n	80011d6 <hardware_init+0x1b2>
 80011b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d801      	bhi.n	80011c0 <hardware_init+0x19c>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <hardware_init+0x19e>
 80011c0:	2300      	movs	r3, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f021 fa3a 	bl	802263c <iprintf>
 80011c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d902      	bls.n	80011d6 <hardware_init+0x1b2>
  __ASM volatile ("cpsid f" : : : "memory");
 80011d0:	b671      	cpsid	f
 80011d2:	f7ff fee3 	bl	8000f9c <NVIC_SystemReset>
		DS3231_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 80011d6:	8b3b      	ldrh	r3, [r7, #24]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3330      	adds	r3, #48	; 0x30
 80011dc:	b2d8      	uxtb	r0, r3
 80011de:	7ebc      	ldrb	r4, [r7, #26]
 80011e0:	7efd      	ldrb	r5, [r7, #27]
 80011e2:	7f3e      	ldrb	r6, [r7, #28]
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	7fba      	ldrb	r2, [r7, #30]
 80011e8:	7ff9      	ldrb	r1, [r7, #31]
 80011ea:	9102      	str	r1, [sp, #8]
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4633      	mov	r3, r6
 80011f2:	462a      	mov	r2, r5
 80011f4:	4621      	mov	r1, r4
 80011f6:	f018 f873 	bl	80192e0 <DS3231_ModifyTime>
		DS3231_GetTime();
 80011fa:	f018 f8e3 	bl	80193c4 <DS3231_GetTime>
		Chirp_Time RTC_Time = DS3231_ShowTime();
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f018 f8f8 	bl	80193f8 <DS3231_ShowTime>
		rtc_diff = GPS_Diff(&gps_time, RTC_Time.chirp_year, RTC_Time.chirp_month, RTC_Time.chirp_date, RTC_Time.chirp_hour, RTC_Time.chirp_min, RTC_Time.chirp_sec);
 8001208:	893c      	ldrh	r4, [r7, #8]
 800120a:	7abd      	ldrb	r5, [r7, #10]
 800120c:	7afe      	ldrb	r6, [r7, #11]
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7bf9      	ldrb	r1, [r7, #15]
 8001214:	f107 0018 	add.w	r0, r7, #24
 8001218:	9102      	str	r1, [sp, #8]
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4633      	mov	r3, r6
 8001220:	462a      	mov	r2, r5
 8001222:	4621      	mov	r1, r4
 8001224:	f008 ffcc 	bl	800a1c0 <GPS_Diff>
 8001228:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	while((rtc_diff < 0) || (rtc_diff >= 0x05))
 800122c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	f174 0300 	sbcs.w	r3, r4, #0
 8001236:	dbb4      	blt.n	80011a2 <hardware_init+0x17e>
 8001238:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800123c:	2b05      	cmp	r3, #5
 800123e:	f174 0300 	sbcs.w	r3, r4, #0
 8001242:	daae      	bge.n	80011a2 <hardware_init+0x17e>
	}
	#endif
    uint32_t reset_time_flash[sizeof(Chirp_Time) / sizeof(uint32_t)];
	memcpy(reset_time_flash, (uint32_t *)&gps_time, sizeof(reset_time_flash));
 8001244:	f107 0118 	add.w	r1, r7, #24
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2208      	movs	r2, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f020 fbdc 	bl	8021a0c <memcpy>
	FLASH_If_Erase_Pages(1, RESET_PAGE);
 8001254:	21fb      	movs	r1, #251	; 0xfb
 8001256:	2001      	movs	r0, #1
 8001258:	f01b fb8c 	bl	801c974 <FLASH_If_Erase_Pages>
	FLASH_If_Write(RESET_FLASH_ADDRESS, (uint32_t *)reset_time_flash, sizeof(reset_time_flash) / sizeof(uint32_t));
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2202      	movs	r2, #2
 8001262:	4619      	mov	r1, r3
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <hardware_init+0x27c>)
 8001266:	f01b fc09 	bl	801ca7c <FLASH_If_Write>
#endif

	return node_id;
 800126a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800126e:	4618      	mov	r0, r3
 8001270:	373c      	adds	r7, #60	; 0x3c
 8001272:	46bd      	mov	sp, r7
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010
 800127c:	20000000 	.word	0x20000000
 8001280:	080256bc 	.word	0x080256bc
 8001284:	08027388 	.word	0x08027388
 8001288:	080256d4 	.word	0x080256d4
 800128c:	20000cc0 	.word	0x20000cc0
 8001290:	080256e4 	.word	0x080256e4
 8001294:	080256fc 	.word	0x080256fc
 8001298:	08025730 	.word	0x08025730
 800129c:	200012c8 	.word	0x200012c8
 80012a0:	0807d800 	.word	0x0807d800

080012a4 <main>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	/****************************** HARDWARE INITIALIZATION ***************************/
	uint8_t node_id = hardware_init();
 80012aa:	f7ff febb 	bl	8001024 <hardware_init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	node_id_allocate = node_id;
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <main+0x2c>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	7013      	strb	r3, [r2, #0]

	/************************************ Chirpbox ************************************/
	chirp_start(node_id, MX_NUM_NODES_CONF);
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <main+0x30>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f01e f865 	bl	801f390 <chirp_start>

	return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000cc1 	.word	0x20000cc1
 80012d4:	20000cc0 	.word	0x20000cc0

080012d8 <_Error_Handler>:

//**************************************************************************************************
void _Error_Handler(char *file, int line)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 80012e2:	e7fe      	b.n	80012e2 <_Error_Handler+0xa>

080012e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_MspInit+0x98>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <HAL_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6613      	str	r3, [r2, #96]	; 0x60
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_MspInit+0x98>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <HAL_MspInit+0x98>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_MspInit+0x98>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_MspInit+0x98>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131a:	2003      	movs	r0, #3
 800131c:	f000 fcc4 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	f06f 000b 	mvn.w	r0, #11
 8001328:	f000 fcc9 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	f06f 000a 	mvn.w	r0, #10
 8001334:	f000 fcc3 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	f06f 0009 	mvn.w	r0, #9
 8001340:	f000 fcbd 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	f06f 0004 	mvn.w	r0, #4
 800134c:	f000 fcb7 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	f06f 0003 	mvn.w	r0, #3
 8001358:	f000 fcb1 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	f06f 0001 	mvn.w	r0, #1
 8001364:	f000 fcab 	bl	8001cbe <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 fca5 	bl	8001cbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d114      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fc85 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b4:	201c      	movs	r0, #28
 80013b6:	f000 fc9e 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80013ba:	e018      	b.n	80013ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_TIM_Base_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d113      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x78>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2032      	movs	r0, #50	; 0x32
 80013e4:	f000 fc6b 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f000 fc84 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000c00 	.word	0x40000c00

08001400 <HAL_LPTIM_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  if(hlptim->Instance==LPTIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_LPTIM_MspInit+0x44>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d113      	bne.n	800143a <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_LPTIM_MspInit+0x48>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_LPTIM_MspInit+0x48>)
 8001418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_LPTIM_MspInit+0x48>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2041      	movs	r0, #65	; 0x41
 8001430:	f000 fc45 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001434:	2041      	movs	r0, #65	; 0x41
 8001436:	f000 fc5e 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40007c00 	.word	0x40007c00
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_UART_MspInit+0xd0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d125      	bne.n	80014aa <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_UART_MspInit+0xd4>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a2f      	ldr	r2, [pc, #188]	; (8001520 <HAL_UART_MspInit+0xd4>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_UART_MspInit+0xd4>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001486:	2307      	movs	r3, #7
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f001 fd7c 	bl	8002f90 <HAL_GPIO_Init>

	/* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2026      	movs	r0, #38	; 0x26
 800149e:	f000 fc0e 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a2:	2026      	movs	r0, #38	; 0x26
 80014a4:	f000 fc27 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014a8:	e034      	b.n	8001514 <HAL_UART_MspInit+0xc8>
  else if(huart->Instance==USART3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0xd8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d12f      	bne.n	8001514 <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a13      	ldr	r2, [pc, #76]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0xd4>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80014e4:	2330      	movs	r3, #48	; 0x30
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <HAL_UART_MspInit+0xdc>)
 8001500:	f001 fd46 	bl	8002f90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2101      	movs	r1, #1
 8001508:	2027      	movs	r0, #39	; 0x27
 800150a:	f000 fbd8 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150e:	2027      	movs	r0, #39	; 0x27
 8001510:	f000 fbf1 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40004400 	.word	0x40004400
 8001520:	40021000 	.word	0x40021000
 8001524:	40004800 	.word	0x40004800
 8001528:	48000800 	.word	0x48000800

0800152c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_UART_MspDeInit+0x5c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10e      	bne.n	800155c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_UART_MspDeInit+0x60>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_UART_MspDeInit+0x60>)
 8001544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001548:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 800154a:	210c      	movs	r1, #12
 800154c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001550:	f001 feca 	bl	80032e8 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001554:	2026      	movs	r0, #38	; 0x26
 8001556:	f000 fbdc 	bl	8001d12 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800155a:	e011      	b.n	8001580 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_UART_MspDeInit+0x64>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10c      	bne.n	8001580 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_UART_MspDeInit+0x60>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_UART_MspDeInit+0x60>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, USART3_TX_Pin|USART3_RX_Pin);
 8001572:	2130      	movs	r1, #48	; 0x30
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <HAL_UART_MspDeInit+0x68>)
 8001576:	f001 feb7 	bl	80032e8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800157a:	2027      	movs	r0, #39	; 0x27
 800157c:	f000 fbc9 	bl	8001d12 <HAL_NVIC_DisableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	40021000 	.word	0x40021000
 8001590:	40004800 	.word	0x40004800
 8001594:	48000800 	.word	0x48000800

08001598 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <HAL_SPI_MspInit+0x78>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12d      	bne.n	8001606 <HAL_SPI_MspInit+0x6e>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_SPI_MspInit+0x7c>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <HAL_SPI_MspInit+0x7c>)
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_SPI_MspInit+0x7c>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015c2:	23e0      	movs	r3, #224	; 0xe0
 80015c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d2:	2305      	movs	r3, #5
 80015d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f001 fcd6 	bl	8002f90 <HAL_GPIO_Init>

//		NSS
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_SPI_MspInit+0x80>)
 80015f8:	f001 fcca 	bl	8002f90 <HAL_GPIO_Init>
		HAL_GPIO_WritePin( GPIOB, GPIO_PIN_6 , 1 );
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_SPI_MspInit+0x80>)
 8001602:	f001 ff69 	bl	80034d8 <HAL_GPIO_WritePin>
  }

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40013000 	.word	0x40013000
 8001614:	40021000 	.word	0x40021000
 8001618:	48000400 	.word	0x48000400

0800161c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_RTC_MspInit+0x3c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10f      	bne.n	800164e <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RTC_MspInit+0x40>)
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RTC_MspInit+0x40>)
 8001636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2003      	movs	r0, #3
 8001644:	f000 fb3b 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fb54 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40002800 	.word	0x40002800
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_CRC_MspInit+0x38>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10b      	bne.n	800168a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_CRC_MspInit+0x3c>)
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_CRC_MspInit+0x3c>)
 8001678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800167c:	6493      	str	r3, [r2, #72]	; 0x48
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_CRC_MspInit+0x3c>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023000 	.word	0x40023000
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_I2C_MspInit+0x9c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d138      	bne.n	8001734 <HAL_I2C_MspInit+0x94>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ec:	2304      	movs	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <HAL_I2C_MspInit+0xa4>)
 80016f8:	f001 fc4a 	bl	8002f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 8001702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_I2C_MspInit+0xa0>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2021      	movs	r0, #33	; 0x21
 800171a:	f000 fad0 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800171e:	2021      	movs	r0, #33	; 0x21
 8001720:	f000 fae9 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2022      	movs	r0, #34	; 0x22
 800172a:	f000 fac8 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800172e:	2022      	movs	r0, #34	; 0x22
 8001730:	f000 fae1 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  }
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005800 	.word	0x40005800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <HAL_GPIO_EXTI_Callback>:
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  HW_GPIO_IrqHandler( GPIO_Pin );
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	4618      	mov	r0, r3
 8001756:	f00c f879 	bl	800d84c <HW_GPIO_IrqHandler>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 f971 	bl	8001a4c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800176a:	f000 faec 	bl	8001d46 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART2_IRQHandler+0x10>)
 800177a:	f007 fb1d 	bl	8008db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000134c 	.word	0x2000134c

08001788 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART3_IRQHandler+0x10>)
 800178e:	f007 fb13 	bl	8008db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20001058 	.word	0x20001058

0800179c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C2_EV_IRQHandler+0x10>)
 80017a2:	f002 fa1d 	bl	8003be0 <HAL_I2C_EV_IRQHandler>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200010e0 	.word	0x200010e0

080017b0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <I2C2_ER_IRQHandler+0x10>)
 80017b6:	f002 fa2d 	bl	8003c14 <HAL_I2C_ER_IRQHandler>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200010e0 	.word	0x200010e0

080017c4 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line[15:0] interrupts.
*/
void EXTI0_IRQHandler( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 80017c8:	2001      	movs	r0, #1
 80017ca:	f001 fe9d 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 80017d6:	2002      	movs	r0, #2
 80017d8:	f001 fe96 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 80017e4:	2004      	movs	r0, #4
 80017e6:	f001 fe8f 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}

080017ee <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 80017f2:	2008      	movs	r0, #8
 80017f4:	f001 fe88 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8001800:	2010      	movs	r0, #16
 8001802:	f001 fe81 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}

0800180a <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800180e:	2020      	movs	r0, #32
 8001810:	f001 fe7a 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8001814:	2040      	movs	r0, #64	; 0x40
 8001816:	f001 fe77 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800181a:	2080      	movs	r0, #128	; 0x80
 800181c:	f001 fe74 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8001820:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001824:	f001 fe70 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8001828:	f44f 7000 	mov.w	r0, #512	; 0x200
 800182c:	f001 fe6c 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8001838:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800183c:	f001 fe64 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8001840:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001844:	f001 fe60 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8001848:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800184c:	f001 fe5c 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8001850:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001854:	f001 fe58 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8001858:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800185c:	f001 fe54 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8001860:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001864:	f001 fe50 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_kill>:

int _kill(int pid, int sig)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <_kill+0x20>)
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
	return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	200022dc 	.word	0x200022dc

080018a0 <_exit>:

void _exit (int status)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe5 	bl	800187c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b2:	e7fe      	b.n	80018b2 <_exit+0x12>

080018b4 <_sbrk>:
//	}
//	return len;
//}

caddr_t _sbrk(int incr)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x50>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x16>
		heap_end = &end;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <_sbrk+0x50>)
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <_sbrk+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <_sbrk+0x50>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <_sbrk+0x50>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	466a      	mov	r2, sp
 80018da:	4293      	cmp	r3, r2
 80018dc:	d905      	bls.n	80018ea <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <_sbrk+0x58>)
 80018e0:	220c      	movs	r2, #12
 80018e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	e006      	b.n	80018f8 <_sbrk+0x44>
	}

	heap_end += incr;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <_sbrk+0x50>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <_sbrk+0x50>)
 80018f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	20000348 	.word	0x20000348
 8001908:	200022e0 	.word	0x200022e0
 800190c:	200022dc 	.word	0x200022dc

08001910 <_close>:

int _close(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001938:	605a      	str	r2, [r3, #4]
	return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_isatty>:

int _isatty(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <SystemInit+0x64>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <SystemInit+0x64>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <SystemInit+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <SystemInit+0x68>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <SystemInit+0x68>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SystemInit+0x68>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <SystemInit+0x68>)
 80019a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <SystemInit+0x68>)
 80019b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <SystemInit+0x68>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <SystemInit+0x68>)
 80019bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <SystemInit+0x68>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SystemInit+0x64>)
 80019ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ce:	609a      	str	r2, [r3, #8]
#endif
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	40021000 	.word	0x40021000

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x28>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x28>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f955 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fc6e 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_InitTick+0x30>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_InitTick+0x34>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f980 	bl	8001d2e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	f04f 30ff 	mov.w	r0, #4294967295
 8001a36:	f000 f942 	bl	8001cbe <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000068 	.word	0x20000068
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick++;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_IncTick+0x18>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_IncTick+0x18>)
 8001a58:	6013      	str	r3, [r2, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20000ce8 	.word	0x20000ce8

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000ce8 	.word	0x20000ce8

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d002      	beq.n	8001aa0 <HAL_Delay+0x20>
  {
    wait++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8001aa0:	bf00      	nop
 8001aa2:	f7ff ffe1 	bl	8001a68 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d8f7      	bhi.n	8001aa2 <HAL_Delay+0x22>
  {
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_SuspendTick+0x1c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_SuspendTick+0x1c>)
 8001ac6:	f023 0302 	bic.w	r3, r3, #2
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <NVIC_EnableIRQ+0x30>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <NVIC_DisableIRQ+0x30>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	3320      	adds	r3, #32
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da0b      	bge.n	8001bd4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <NVIC_SetPriority+0x4c>)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	3b04      	subs	r3, #4
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd2:	e009      	b.n	8001be8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <NVIC_SetPriority+0x50>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff13 	bl	8001adc <NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff28 	bl	8001b24 <NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff8e 	bl	8001bfc <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff1b 	bl	8001b40 <NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff27 	bl	8001b74 <NVIC_DisableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff94 	bl	8001c64 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d4a:	f000 f802 	bl	8001d52 <HAL_SYSTICK_Callback>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e054      	b.n	8001e1c <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7f5b      	ldrb	r3, [r3, #29]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fc6c 	bl	8001660 <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_CRC_Init+0xc4>)
 8001d9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0218 	bic.w	r2, r2, #24
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	e00c      	b.n	8001dca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	461a      	mov	r2, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f950 	bl	8002060 <HAL_CRCEx_Polynomial_Set>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e028      	b.n	8001e1c <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	795b      	ldrb	r3, [r3, #5]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	e004      	b.n	8001de8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6912      	ldr	r2, [r2, #16]
 8001de6:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	04c11db7 	.word	0x04c11db7

08001e28 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the  
  *        handle field hcrc->InputDataFormat. 
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t index = 0; /* CRC input data buffer index */
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
    
  /* Process locked */
  __HAL_LOCK(hcrc); 
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	7f1b      	ldrb	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_CRC_Calculate+0x20>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e042      	b.n	8001ece <HAL_CRC_Calculate+0xa6>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	771a      	strb	r2, [r3, #28]
  
  /* Change CRC peripheral state */  
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2202      	movs	r2, #2
 8001e52:	775a      	strb	r2, [r3, #29]
  
  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is 
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	609a      	str	r2, [r3, #8]
  
  switch (hcrc->InputDataFormat)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_CRC_Calculate+0x8a>
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d002      	beq.n	8001e76 <HAL_CRC_Calculate+0x4e>
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d017      	beq.n	8001ea4 <HAL_CRC_Calculate+0x7c>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
      break;
      
    default:
      break;    
 8001e74:	e024      	b.n	8001ec0 <HAL_CRC_Calculate+0x98>
      for(index = 0; index < BufferLength; index++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <HAL_CRC_Calculate+0x6a>
        hcrc->Instance->DR = pBuffer[index];
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	441a      	add	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3f0      	bcc.n	8001e7c <HAL_CRC_Calculate+0x54>
      temp = hcrc->Instance->DR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	613b      	str	r3, [r7, #16]
      break;
 8001ea2:	e00d      	b.n	8001ec0 <HAL_CRC_Calculate+0x98>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f814 	bl	8001ed6 <CRC_Handle_8>
 8001eae:	6138      	str	r0, [r7, #16]
      break;
 8001eb0:	e006      	b.n	8001ec0 <HAL_CRC_Calculate+0x98>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f897 	bl	8001fea <CRC_Handle_16>
 8001ebc:	6138      	str	r0, [r7, #16]
      break;
 8001ebe:	bf00      	nop
  }

  /* Change CRC peripheral state */    
  hcrc->State = HAL_CRC_STATE_READY; 
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	775a      	strb	r2, [r3, #29]
  
  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
  
  /* Return the CRC computed value */ 
  return temp;
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b087      	sub	sp, #28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  uint32_t i = 0; /* input data buffer index */
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e023      	b.n	8001f34 <CRC_Handle_8+0x5e>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	061a      	lsls	r2, r3, #24
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	3301      	adds	r3, #1
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	440b      	add	r3, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	431a      	orrs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	440b      	add	r3, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	440b      	add	r3, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3d6      	bcc.n	8001eec <CRC_Handle_8+0x16>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d047      	beq.n	8001fd8 <CRC_Handle_8+0x102>
   {
     if  (BufferLength%4 == 1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <CRC_Handle_8+0x8c>
     {
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	7013      	strb	r3, [r2, #0]
     }
     if  (BufferLength%4 == 2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d113      	bne.n	8001f94 <CRC_Handle_8+0xbe>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3301      	adds	r3, #1
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	440b      	add	r3, r1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	6809      	ldr	r1, [r1, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	800b      	strh	r3, [r1, #0]
     }
     if  (BufferLength%4 == 3)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d11c      	bne.n	8001fd8 <CRC_Handle_8+0x102>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	6809      	ldr	r1, [r1, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	800b      	strh	r3, [r1, #0]
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	4413      	add	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;  /* input data buffer index */
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e013      	b.n	8002028 <CRC_Handle_16+0x3e>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2*i]<<16) | (uint32_t)pBuffer[2*i+1];     
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	440b      	add	r3, r1
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3e6      	bcc.n	8002000 <CRC_Handle_16+0x16>
  }
  if ((BufferLength%2) != 0)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <CRC_Handle_16+0x62>
  {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800206c:	231f      	movs	r3, #31
 800206e:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)) {}
 8002070:	bf00      	nop
 8002072:	2201      	movs	r2, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d104      	bne.n	800208a <HAL_CRCEx_Polynomial_Set+0x2a>
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	617a      	str	r2, [r7, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f3      	bne.n	8002072 <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b18      	cmp	r3, #24
 800208e:	d844      	bhi.n	800211a <HAL_CRCEx_Polynomial_Set+0xba>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <HAL_CRCEx_Polynomial_Set+0x38>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	0800211b 	.word	0x0800211b
 800209c:	0800211b 	.word	0x0800211b
 80020a0:	0800211b 	.word	0x0800211b
 80020a4:	0800211b 	.word	0x0800211b
 80020a8:	0800211b 	.word	0x0800211b
 80020ac:	0800211b 	.word	0x0800211b
 80020b0:	0800211b 	.word	0x0800211b
 80020b4:	0800211b 	.word	0x0800211b
 80020b8:	08002111 	.word	0x08002111
 80020bc:	0800211b 	.word	0x0800211b
 80020c0:	0800211b 	.word	0x0800211b
 80020c4:	0800211b 	.word	0x0800211b
 80020c8:	0800211b 	.word	0x0800211b
 80020cc:	0800211b 	.word	0x0800211b
 80020d0:	0800211b 	.word	0x0800211b
 80020d4:	0800211b 	.word	0x0800211b
 80020d8:	08002107 	.word	0x08002107
 80020dc:	0800211b 	.word	0x0800211b
 80020e0:	0800211b 	.word	0x0800211b
 80020e4:	0800211b 	.word	0x0800211b
 80020e8:	0800211b 	.word	0x0800211b
 80020ec:	0800211b 	.word	0x0800211b
 80020f0:	0800211b 	.word	0x0800211b
 80020f4:	0800211b 	.word	0x0800211b
 80020f8:	080020fd 	.word	0x080020fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d90d      	bls.n	800211e <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01f      	b.n	8002146 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b07      	cmp	r3, #7
 800210a:	d90a      	bls.n	8002122 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01a      	b.n	8002146 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	d907      	bls.n	8002126 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e015      	b.n	8002146 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                        
 800211a:	bf00      	nop
 800211c:	e004      	b.n	8002128 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800211e:	bf00      	nop
 8002120:	e002      	b.n	8002128 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002122:	bf00      	nop
 8002124:	e000      	b.n	8002128 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002126:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0118 	bic.w	r1, r3, #24
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop

08002154 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(NULL == hdma)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_DMA_Abort+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e022      	b.n	80021b0 <HAL_DMA_Abort+0x5c>
  }

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020e 	bic.w	r2, r2, #14
 8002178:	601a      	str	r2, [r3, #0]
  /* disable the DMAMUX sync overrun IT*/
  hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 021c 	and.w	r2, r3, #28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	605a      	str	r2, [r3, #4]
  }

#endif /* DMAMUX1 */

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d005      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2204      	movs	r2, #4
 80021d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e029      	b.n	8002234 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 020e 	bic.w	r2, r2, #14
 80021ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 021c 	and.w	r2, r3, #28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
    }
  }
  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_FLASH_Program+0xd0>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_FLASH_Program+0x1e>
 800225a:	2302      	movs	r3, #2
 800225c:	e053      	b.n	8002306 <HAL_FLASH_Program+0xc6>
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_FLASH_Program+0xd0>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002264:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002268:	f000 f8b6 	bl	80023d8 <FLASH_WaitForLastOperation>
 800226c:	4603      	mov	r3, r0
 800226e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d143      	bne.n	80022fe <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_FLASH_Program+0xd0>)
 8002278:	2200      	movs	r2, #0
 800227a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_FLASH_Program+0xd4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_FLASH_Program+0xd4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_FLASH_Program+0xd4>)
 800228e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002292:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_FLASH_Program+0xd0>)
 8002296:	2202      	movs	r2, #2
 8002298:	771a      	strb	r2, [r3, #28]
 800229a:	e002      	b.n	80022a2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_FLASH_Program+0xd0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80022a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f000 f8f1 	bl	8002494 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80022b2:	2301      	movs	r3, #1
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e010      	b.n	80022da <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d002      	beq.n	80022c4 <HAL_FLASH_Program+0x84>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d10a      	bne.n	80022da <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	68b8      	ldr	r0, [r7, #8]
 80022ca:	f000 f905 	bl	80024d8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d102      	bne.n	80022da <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80022d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022d8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022de:	f000 f87b 	bl	80023d8 <FLASH_WaitForLastOperation>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_FLASH_Program+0xd4>)
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <HAL_FLASH_Program+0xd4>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022fa:	f000 fad5 	bl	80028a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_FLASH_Program+0xd0>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]

  return status;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000006c 	.word	0x2000006c
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_FLASH_Unlock+0x38>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da0b      	bge.n	8002342 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_FLASH_Unlock+0x38>)
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_FLASH_Unlock+0x3c>)
 800232e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_FLASH_Unlock+0x38>)
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_FLASH_Unlock+0x40>)
 8002334:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_FLASH_Unlock+0x38>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	da01      	bge.n	8002342 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002342:	79fb      	ldrb	r3, [r7, #7]
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40022000 	.word	0x40022000
 8002354:	45670123 	.word	0x45670123
 8002358:	cdef89ab 	.word	0xcdef89ab

0800235c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_FLASH_Lock+0x1c>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_FLASH_Lock+0x1c>)
 8002366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800236a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_FLASH_OB_Unlock+0x2c>)
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_FLASH_OB_Unlock+0x30>)
 8002390:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_FLASH_OB_Unlock+0x34>)
 8002396:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40022000 	.word	0x40022000
 80023ac:	08192a3b 	.word	0x08192a3b
 80023b0:	4c5d6e7f 	.word	0x4c5d6e7f

080023b4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_FLASH_OB_Launch+0x20>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <HAL_FLASH_OB_Launch+0x20>)
 80023be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023c2:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80023c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023c8:	f000 f806 	bl	80023d8 <FLASH_WaitForLastOperation>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000

080023d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fb42 	bl	8001a68 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023e6:	e00d      	b.n	8002404 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d009      	beq.n	8002404 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80023f0:	f7ff fb3a 	bl	8001a68 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d801      	bhi.n	8002404 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e03f      	b.n	8002484 <FLASH_WaitForLastOperation+0xac>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d0ea      	beq.n	80023e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800241a:	4013      	ands	r3, r2
 800241c:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4313      	orrs	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01e      	beq.n	8002470 <FLASH_WaitForLastOperation+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <FLASH_WaitForLastOperation+0xb8>)
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4313      	orrs	r3, r2
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <FLASH_WaitForLastOperation+0xb8>)
 800243c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <FLASH_WaitForLastOperation+0x80>
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	618b      	str	r3, [r1, #24]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <FLASH_WaitForLastOperation+0x94>
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800246a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e009      	b.n	8002484 <FLASH_WaitForLastOperation+0xac>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d102      	bne.n	8002482 <FLASH_WaitForLastOperation+0xaa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <FLASH_WaitForLastOperation+0xb4>)
 800247e:	2201      	movs	r2, #1
 8002480:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40022000 	.word	0x40022000
 8002490:	2000006c 	.word	0x2000006c

08002494 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002494:	b490      	push	{r4, r7}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <FLASH_Program_DoubleWord+0x40>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <FLASH_Program_DoubleWord+0x40>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6153      	str	r3, [r2, #20]

  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80024b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	f04f 0400 	mov.w	r4, #0
 80024be:	0013      	movs	r3, r2
 80024c0:	2400      	movs	r4, #0
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	3204      	adds	r2, #4
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc90      	pop	{r4, r7}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80024e2:	2340      	movs	r3, #64	; 0x40
 80024e4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <FLASH_Program_Fast+0x54>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <FLASH_Program_Fast+0x54>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6153      	str	r3, [r2, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fa:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	3304      	adds	r3, #4
 8002508:	613b      	str	r3, [r7, #16]
    src_addr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
    row_index--;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	3b01      	subs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
  } while (row_index != 0U);
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ef      	bne.n	80024fc <FLASH_Program_Fast+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 800251c:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40022000 	.word	0x40022000

08002530 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_FLASHEx_Erase+0x16>
 8002542:	2302      	movs	r3, #2
 8002544:	e08d      	b.n	8002662 <HAL_FLASHEx_Erase+0x132>
 8002546:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800254c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002550:	f7ff ff42 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d17d      	bne.n	800265a <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256c:	2b00      	cmp	r3, #0
 800256e:	d019      	beq.n	80025a4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a3e      	ldr	r2, [pc, #248]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 8002576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800257c:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 800258e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 8002596:	2203      	movs	r2, #3
 8002598:	771a      	strb	r2, [r3, #28]
 800259a:	e016      	b.n	80025ca <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 800259e:	2201      	movs	r2, #1
 80025a0:	771a      	strb	r2, [r3, #28]
 80025a2:	e012      	b.n	80025ca <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 80025b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 80025be:	2202      	movs	r2, #2
 80025c0:	771a      	strb	r2, [r3, #28]
 80025c2:	e002      	b.n	80025ca <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d113      	bne.n	80025fa <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f908 	bl	80027ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e0:	f7ff fefa 	bl	80023d8 <FLASH_WaitForLastOperation>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73fb      	strb	r3, [r7, #15]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 80025ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6153      	str	r3, [r2, #20]
 80025f8:	e02d      	b.n	8002656 <HAL_FLASHEx_Erase+0x126>
#endif      
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	601a      	str	r2, [r3, #0]
      
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	e01d      	b.n	8002646 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4619      	mov	r1, r3
 8002610:	68b8      	ldr	r0, [r7, #8]
 8002612:	f000 f913 	bl	800283c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002616:	f24c 3050 	movw	r0, #50000	; 0xc350
 800261a:	f7ff fedd 	bl	80023d8 <FLASH_WaitForLastOperation>
 800261e:	4603      	mov	r3, r0
 8002620:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_FLASHEx_Erase+0x140>)
 8002628:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	601a      	str	r2, [r3, #0]
          break;
 800263e:	e00a      	b.n	8002656 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4413      	add	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3d9      	bcc.n	800260a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }
    
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002656:	f000 f927 	bl	80028a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_FLASHEx_Erase+0x13c>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]

  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000006c 	.word	0x2000006c
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_FLASHEx_OBProgram+0xd8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_FLASHEx_OBProgram+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e05a      	b.n	8002742 <HAL_FLASHEx_OBProgram+0xce>
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_FLASHEx_OBProgram+0xd8>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
  
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_FLASHEx_OBProgram+0xd8>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6858      	ldr	r0, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f000 f93d 	bl	8002930 <FLASH_OB_WRPConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
    }
    
  }
  
  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f991 	bl	80029f8 <FLASH_OB_RDPConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 f9ac 	bl	8002a54 <FLASH_OB_UserConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	429a      	cmp	r2, r3
 800271c:	d00d      	beq.n	800273a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69d8      	ldr	r0, [r3, #28]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a19      	ldr	r1, [r3, #32]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa8a 	bl	8002c44 <FLASH_OB_PCROPConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_FLASHEx_OBProgram+0xd8>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]

  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000006c 	.word	0x2000006c

08002750 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2206      	movs	r2, #6
 800275c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d007      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8002772:	2b02      	cmp	r3, #2
 8002774:	d003      	beq.n	800277e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d10f      	bne.n	800279e <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6858      	ldr	r0, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0108 	add.w	r1, r3, #8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	330c      	adds	r3, #12
 8002798:	461a      	mov	r2, r3
 800279a:	f000 fafd 	bl	8002d98 <FLASH_OB_GetWRP>
  }
  
  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800279e:	f000 fb45 	bl	8002e2c <FLASH_OB_GetRDP>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	611a      	str	r2, [r3, #16]
  
  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80027a8:	f000 fb5a 	bl	8002e60 <FLASH_OB_GetUser>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d003      	beq.n	80027c2 <HAL_FLASHEx_OBGetConfig+0x72>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d110      	bne.n	80027e4 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif    
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 0208 	orr.w	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 001c 	add.w	r0, r3, #28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0120 	add.w	r1, r3, #32
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3324      	adds	r3, #36	; 0x24
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 fb52 	bl	8002e88 <FLASH_OB_GetPCROP>
  }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <FLASH_MassErase+0x4c>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <FLASH_MassErase+0x4c>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6153      	str	r3, [r2, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <FLASH_MassErase+0x4c>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <FLASH_MassErase+0x4c>)
 800281a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <FLASH_MassErase+0x4c>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <FLASH_MassErase+0x4c>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6153      	str	r3, [r2, #20]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40022000 	.word	0x40022000

0800283c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <FLASH_PageErase+0x68>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <FLASH_PageErase+0x68>)
 8002856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285a:	6153      	str	r3, [r2, #20]
 800285c:	e005      	b.n	800286a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <FLASH_PageErase+0x68>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <FLASH_PageErase+0x68>)
 8002864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002868:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <FLASH_PageErase+0x68>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <FLASH_PageErase+0x68>)
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <FLASH_PageErase+0x68>)
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <FLASH_PageErase+0x68>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <FLASH_PageErase+0x68>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <FLASH_PageErase+0x68>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6153      	str	r3, [r2, #20]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40022000 	.word	0x40022000

080028a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <FLASH_FlushCaches+0x80>)
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d002      	beq.n	80028c0 <FLASH_FlushCaches+0x18>
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d111      	bne.n	80028e4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <FLASH_FlushCaches+0x84>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <FLASH_FlushCaches+0x84>)
 80028c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <FLASH_FlushCaches+0x84>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <FLASH_FlushCaches+0x84>)
 80028d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <FLASH_FlushCaches+0x84>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <FLASH_FlushCaches+0x84>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d002      	beq.n	80028f0 <FLASH_FlushCaches+0x48>
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d111      	bne.n	8002914 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <FLASH_FlushCaches+0x84>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <FLASH_FlushCaches+0x84>)
 80028f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <FLASH_FlushCaches+0x84>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <FLASH_FlushCaches+0x84>)
 8002902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002906:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <FLASH_FlushCaches+0x84>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <FLASH_FlushCaches+0x84>)
 800290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002912:	6013      	str	r3, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <FLASH_FlushCaches+0x80>)
 8002916:	2200      	movs	r2, #0
 8002918:	771a      	strb	r2, [r3, #28]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	2000006c 	.word	0x2000006c
 800292c:	40022000 	.word	0x40022000

08002930 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1) 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800293c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002940:	f7ff fd4a 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14c      	bne.n	80029e8 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END), 
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0419      	lsls	r1, r3, #16
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	430b      	orrs	r3, r1
 8002964:	4923      	ldr	r1, [pc, #140]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	62cb      	str	r3, [r1, #44]	; 0x2c
 800296a:	e02b      	b.n	80029c4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10b      	bne.n	800298a <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END), 
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0419      	lsls	r1, r3, #16
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	430b      	orrs	r3, r1
 8002982:	491c      	ldr	r1, [pc, #112]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	630b      	str	r3, [r1, #48]	; 0x30
 8002988:	e01c      	b.n	80029c4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d10b      	bne.n	80029a8 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END), 
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0419      	lsls	r1, r3, #16
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	430b      	orrs	r3, r1
 80029a0:	4914      	ldr	r1, [pc, #80]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029a6:	e00d      	b.n	80029c4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d10a      	bne.n	80029c4 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END), 
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0419      	lsls	r1, r3, #16
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	430b      	orrs	r3, r1
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029d4:	f7ff fd00 	bl	80023d8 <FLASH_WaitForLastOperation>
 80029d8:	4603      	mov	r3, r0
 80029da:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <FLASH_OB_WRPConfig+0xc4>)
 80029e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029e6:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000

080029f8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a04:	f7ff fce8 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d119      	bne.n	8002a46 <FLASH_OB_RDPConfig+0x4e>
  { 
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a32:	f7ff fcd1 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002a36:	4603      	mov	r3, r0
 8002a38:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <FLASH_OB_RDPConfig+0x58>)
 8002a40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a44:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40022000 	.word	0x40022000

08002a54 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25). 
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a6a:	f7ff fcb5 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 80de 	bne.w	8002c36 <FLASH_OB_UserConfig+0x1e2>
  { 
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));
    
      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a96:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));
    
      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ab4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));
    
      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));
    
      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));
    
      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));
    
      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));
    
      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));
    
      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b68:	613b      	str	r3, [r7, #16]
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));
    
      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b86:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));
    
      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba4:	613b      	str	r3, [r7, #16]
#endif
    }
#endif
    
    if((UserType & OB_USER_nBOOT1) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));
    
      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bc2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));
    
      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));
    
      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif
    
    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	490d      	ldr	r1, [pc, #52]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c22:	f7ff fbd9 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <FLASH_OB_UserConfig+0x1ec>)
 8002c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c34:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40022000 	.word	0x40022000

08002c44 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c54:	f7ff fbc0 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8002c5c:	7ffb      	ldrb	r3, [r7, #31]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 808a 	bne.w	8002d78 <FLASH_OB_PCROPConfig+0x134>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002c64:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <FLASH_OB_PCROPConfig+0x140>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d114      	bne.n	8002c9a <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8002c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c74:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <FLASH_OB_PCROPConfig+0x144>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d008      	beq.n	8002c94 <FLASH_OB_PCROPConfig+0x50>
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <FLASH_OB_PCROPConfig+0x144>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	029b      	lsls	r3, r3, #10
 8002c88:	085a      	lsrs	r2, r3, #1
 8002c8a:	4b40      	ldr	r3, [pc, #256]	; (8002d8c <FLASH_OB_PCROPConfig+0x148>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002c92:	e000      	b.n	8002c96 <FLASH_OB_PCROPConfig+0x52>
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <FLASH_OB_PCROPConfig+0x14c>)
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e013      	b.n	8002cc2 <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <FLASH_OB_PCROPConfig+0x144>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d008      	beq.n	8002cb8 <FLASH_OB_PCROPConfig+0x74>
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <FLASH_OB_PCROPConfig+0x144>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	085a      	lsrs	r2, r3, #1
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <FLASH_OB_PCROPConfig+0x148>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002cb6:	e000      	b.n	8002cba <FLASH_OB_PCROPConfig+0x76>
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <FLASH_OB_PCROPConfig+0x14c>)
 8002cba:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8002cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cc0:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d11a      	bne.n	8002d02 <FLASH_OB_PCROPConfig+0xbe>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	08db      	lsrs	r3, r3, #3
 8002cd4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	492d      	ldr	r1, [pc, #180]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	624b      	str	r3, [r1, #36]	; 0x24
        
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	4926      	ldr	r1, [pc, #152]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8002d00:	e01e      	b.n	8002d40 <FLASH_OB_PCROPConfig+0xfc>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d119      	bne.n	8002d40 <FLASH_OB_PCROPConfig+0xfc>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	08db      	lsrs	r3, r3, #3
 8002d14:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	491d      	ldr	r1, [pc, #116]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	644b      	str	r3, [r1, #68]	; 0x44
        
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }
    
    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d4e:	4911      	ldr	r1, [pc, #68]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	628b      	str	r3, [r1, #40]	; 0x28
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5e:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d64:	f7ff fb38 	bl	80023d8 <FLASH_WaitForLastOperation>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <FLASH_OB_PCROPConfig+0x150>)
 8002d72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d76:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 8002d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	1fff75e0 	.word	0x1fff75e0
 8002d8c:	001ffe00 	.word	0x001ffe00
 8002d90:	08080000 	.word	0x08080000
 8002d94:	40022000 	.word	0x40022000

08002d98 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10b      	bne.n	8002dc2 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8002dc0:	e02b      	b.n	8002e1a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10b      	bne.n	8002de0 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	e01c      	b.n	8002e1a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d10b      	bne.n	8002dfe <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	e00d      	b.n	8002e1a <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d10a      	bne.n	8002e1a <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <FLASH_OB_GetWRP+0x90>)
 8002e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000

08002e2c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <FLASH_OB_GetRDP+0x30>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2baa      	cmp	r3, #170	; 0xaa
 8002e3e:	d004      	beq.n	8002e4a <FLASH_OB_GetRDP+0x1e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2bcc      	cmp	r3, #204	; 0xcc
 8002e44:	d001      	beq.n	8002e4a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8002e46:	23bb      	movs	r3, #187	; 0xbb
 8002e48:	e002      	b.n	8002e50 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <FLASH_OB_GetRDP+0x30>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	b2db      	uxtb	r3, r3
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40022000 	.word	0x40022000

08002e60 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),  
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27). 
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <FLASH_OB_GetUser+0x24>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e72:	607b      	str	r3, [r7, #4]
  
  return user_config;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000

08002e88 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002e94:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <FLASH_OB_GetPCROP+0xf4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d114      	bne.n	8002eca <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8002ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ea4:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <FLASH_OB_GetPCROP+0xf8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d008      	beq.n	8002ec4 <FLASH_OB_GetPCROP+0x3c>
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <FLASH_OB_GetPCROP+0xf8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	085a      	lsrs	r2, r3, #1
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <FLASH_OB_GetPCROP+0xfc>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ec2:	e000      	b.n	8002ec6 <FLASH_OB_GetPCROP+0x3e>
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <FLASH_OB_GetPCROP+0x100>)
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e013      	b.n	8002ef2 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <FLASH_OB_GetPCROP+0xf8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d008      	beq.n	8002ee8 <FLASH_OB_GetPCROP+0x60>
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <FLASH_OB_GetPCROP+0xf8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	085a      	lsrs	r2, r3, #1
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <FLASH_OB_GetPCROP+0xfc>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ee6:	e000      	b.n	8002eea <FLASH_OB_GetPCROP+0x62>
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <FLASH_OB_GetPCROP+0x100>)
 8002eea:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8002eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ef0:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d114      	bne.n	8002f28 <FLASH_OB_GetPCROP+0xa0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8002efe:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <FLASH_OB_GetPCROP+0x104>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	00da      	lsls	r2, r3, #3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <FLASH_OB_GetPCROP+0x104>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	00da      	lsls	r2, r3, #3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	441a      	add	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e019      	b.n	8002f5c <FLASH_OB_GetPCROP+0xd4>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d113      	bne.n	8002f5c <FLASH_OB_GetPCROP+0xd4>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <FLASH_OB_GetPCROP+0x104>)
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	441a      	add	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <FLASH_OB_GetPCROP+0x104>)
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	00da      	lsls	r2, r3, #3
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	441a      	add	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }
  
  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <FLASH_OB_GetPCROP+0x104>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	1fff75e0 	.word	0x1fff75e0
 8002f84:	001ffe00 	.word	0x001ffe00
 8002f88:	08080000 	.word	0x08080000
 8002f8c:	40022000 	.word	0x40022000

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002fa6:	e17f      	b.n	80032a8 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8171 	beq.w	80032a2 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x40>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b12      	cmp	r3, #18
 8002fce:	d123      	bne.n	8003018 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	08da      	lsrs	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3208      	adds	r2, #8
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	08da      	lsrs	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3208      	adds	r2, #8
 8003012:	6939      	ldr	r1, [r7, #16]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0203 	and.w	r2, r3, #3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d00b      	beq.n	800306c <HAL_GPIO_Init+0xdc>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d007      	beq.n	800306c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003060:	2b11      	cmp	r3, #17
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d130      	bne.n	80030ce <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a2:	2201      	movs	r2, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0201 	and.w	r2, r3, #1
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d118      	bne.n	800310c <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030e0:	2201      	movs	r2, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0201 	and.w	r2, r3, #1
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ac 	beq.w	80032a2 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_GPIO_Init+0x334>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_GPIO_Init+0x334>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6613      	str	r3, [r2, #96]	; 0x60
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_GPIO_Init+0x334>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003162:	4a59      	ldr	r2, [pc, #356]	; (80032c8 <HAL_GPIO_Init+0x338>)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	3302      	adds	r3, #2
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	220f      	movs	r2, #15
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x24a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4e      	ldr	r2, [pc, #312]	; (80032cc <HAL_GPIO_Init+0x33c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x246>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4d      	ldr	r2, [pc, #308]	; (80032d0 <HAL_GPIO_Init+0x340>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x242>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <HAL_GPIO_Init+0x344>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x23e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <HAL_GPIO_Init+0x348>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x23a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_GPIO_Init+0x34c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x236>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a49      	ldr	r2, [pc, #292]	; (80032e0 <HAL_GPIO_Init+0x350>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x232>
 80031be:	2306      	movs	r3, #6
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031c2:	2307      	movs	r3, #7
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x24c>
 80031da:	2300      	movs	r3, #0
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031ec:	4936      	ldr	r1, [pc, #216]	; (80032c8 <HAL_GPIO_Init+0x338>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_GPIO_Init+0x354>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800321e:	4a31      	ldr	r2, [pc, #196]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_GPIO_Init+0x354>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800329c:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_GPIO_Init+0x354>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f47f ae78 	bne.w	8002fa8 <HAL_GPIO_Init+0x18>
  }
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40010000 	.word	0x40010000
 80032cc:	48000400 	.word	0x48000400
 80032d0:	48000800 	.word	0x48000800
 80032d4:	48000c00 	.word	0x48000c00
 80032d8:	48001000 	.word	0x48001000
 80032dc:	48001400 	.word	0x48001400
 80032e0:	48001800 	.word	0x48001800
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 80032fe:	e0cd      	b.n	800349c <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003300:	2201      	movs	r2, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80c0 	beq.w	8003496 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2103      	movs	r1, #3
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	08d2      	lsrs	r2, r2, #3
 800334a:	4019      	ands	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2103      	movs	r1, #3
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	401a      	ands	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	2101      	movs	r1, #1
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2103      	movs	r1, #3
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	401a      	ands	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 80033a8:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <HAL_GPIO_DeInit+0x1d0>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	220f      	movs	r2, #15
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033d0:	d025      	beq.n	800341e <HAL_GPIO_DeInit+0x136>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <HAL_GPIO_DeInit+0x1d4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <HAL_GPIO_DeInit+0x132>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_GPIO_DeInit+0x1d8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d019      	beq.n	8003416 <HAL_GPIO_DeInit+0x12e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a37      	ldr	r2, [pc, #220]	; (80034c4 <HAL_GPIO_DeInit+0x1dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_DeInit+0x12a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a36      	ldr	r2, [pc, #216]	; (80034c8 <HAL_GPIO_DeInit+0x1e0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00d      	beq.n	800340e <HAL_GPIO_DeInit+0x126>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_GPIO_DeInit+0x1e4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <HAL_GPIO_DeInit+0x122>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <HAL_GPIO_DeInit+0x1e8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_GPIO_DeInit+0x11e>
 8003402:	2306      	movs	r3, #6
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 8003406:	2307      	movs	r3, #7
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_DeInit+0x138>
 800341e:	2300      	movs	r3, #0
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d132      	bne.n	8003496 <HAL_GPIO_DeInit+0x1ae>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_GPIO_DeInit+0x1d0>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43da      	mvns	r2, r3
 8003450:	4819      	ldr	r0, [pc, #100]	; (80034b8 <HAL_GPIO_DeInit+0x1d0>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	400a      	ands	r2, r1
 8003458:	3302      	adds	r3, #2
 800345a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 8003468:	4013      	ands	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 8003476:	4013      	ands	r3, r2
 8003478:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 800347a:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	4914      	ldr	r1, [pc, #80]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 8003484:	4013      	ands	r3, r2
 8003486:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	4910      	ldr	r1, [pc, #64]	; (80034d4 <HAL_GPIO_DeInit+0x1ec>)
 8003492:	4013      	ands	r3, r2
 8003494:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3301      	adds	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f af2b 	bne.w	8003300 <HAL_GPIO_DeInit+0x18>
  }
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	48000400 	.word	0x48000400
 80034c0:	48000800 	.word	0x48000800
 80034c4:	48000c00 	.word	0x48000c00
 80034c8:	48001000 	.word	0x48001000
 80034cc:	48001400 	.word	0x48001400
 80034d0:	48001800 	.word	0x48001800
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe f90e 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40010400 	.word	0x40010400

08003538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_I2C_Init+0x1a>
  {
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e081      	b.n	8003656 <HAL_I2C_Init+0x11e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe f89a 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Init+0x82>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e006      	b.n	80035c8 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d104      	bne.n	80035da <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	ea42 0103 	orr.w	r1, r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69d9      	ldr	r1, [r3, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	461a      	mov	r2, r3
 800366e:	4603      	mov	r3, r0
 8003670:	817b      	strh	r3, [r7, #10]
 8003672:	460b      	mov	r3, r1
 8003674:	813b      	strh	r3, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	f040 80f7 	bne.w	8003876 <HAL_I2C_Mem_Write+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_I2C_Mem_Write+0x34>
 800368e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0eb      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_I2C_Mem_Write+0x4e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0e4      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b6:	f7fe f9d7 	bl	8001a68 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2319      	movs	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f001 fb63 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0cf      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2221      	movs	r2, #33	; 0x21
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003700:	88f8      	ldrh	r0, [r7, #6]
 8003702:	893a      	ldrh	r2, [r7, #8]
 8003704:	8979      	ldrh	r1, [r7, #10]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4603      	mov	r3, r0
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fec7 	bl	80044a4 <I2C_RequestMemoryWrite>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0a7      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d90e      	bls.n	8003750 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	b2da      	uxtb	r2, r3
 800373e:	8979      	ldrh	r1, [r7, #10]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f001 fc45 	bl	8004fd8 <I2C_TransferConfig>
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	b2da      	uxtb	r2, r3
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f001 fc34 	bl	8004fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f001 fb4d 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e079      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c59      	adds	r1, r3, #1
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	6251      	str	r1, [r2, #36]	; 0x24
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d034      	beq.n	8003824 <HAL_I2C_Mem_Write+0x1c4>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d130      	bne.n	8003824 <HAL_I2C_Mem_Write+0x1c4>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f001 fae1 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Write+0x17c>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e04d      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d90e      	bls.n	8003804 <HAL_I2C_Mem_Write+0x1a4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	22ff      	movs	r2, #255	; 0xff
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	8979      	ldrh	r1, [r7, #10]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f001 fbeb 	bl	8004fd8 <I2C_TransferConfig>
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Mem_Write+0x1c4>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	b2da      	uxtb	r2, r3
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f001 fbda 	bl	8004fd8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1a0      	bne.n	8003770 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 fb2e 	bl	8004e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Mem_Write+0x1e2>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e01a      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2220      	movs	r2, #32
 8003848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_I2C_Mem_Write+0x220>)
 8003856:	400b      	ands	r3, r1
 8003858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_I2C_Mem_Write+0x218>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4603      	mov	r3, r0
 8003894:	817b      	strh	r3, [r7, #10]
 8003896:	460b      	mov	r3, r1
 8003898:	813b      	strh	r3, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	f040 80fb 	bne.w	8003aa2 <HAL_I2C_Mem_Read+0x21e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x34>
 80038b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0ef      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x4e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e0e8      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038da:	f7fe f8c5 	bl	8001a68 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2319      	movs	r3, #25
 80038e6:	2201      	movs	r2, #1
 80038e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f001 fa51 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0d3      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2222      	movs	r2, #34	; 0x22
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003924:	88f8      	ldrh	r0, [r7, #6]
 8003926:	893a      	ldrh	r2, [r7, #8]
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4603      	mov	r3, r0
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fe09 	bl	800454c <I2C_RequestMemoryRead>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0ab      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2bff      	cmp	r3, #255	; 0xff
 8003954:	d90e      	bls.n	8003974 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22ff      	movs	r2, #255	; 0xff
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	4b51      	ldr	r3, [pc, #324]	; (8003aac <HAL_I2C_Mem_Read+0x228>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f001 fb33 	bl	8004fd8 <I2C_TransferConfig>
 8003972:	e00f      	b.n	8003994 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_I2C_Mem_Read+0x228>)
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f001 fb22 	bl	8004fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	2200      	movs	r2, #0
 800399c:	2104      	movs	r1, #4
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f001 f9f8 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07a      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6251      	str	r1, [r2, #36]	; 0x24
 80039be:	b2c2      	uxtb	r2, r0
 80039c0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d034      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x1cc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d130      	bne.n	8003a50 <HAL_I2C_Mem_Read+0x1cc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f001 f9cb 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x184>
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04d      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d90e      	bls.n	8003a30 <HAL_I2C_Mem_Read+0x1ac>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	22ff      	movs	r2, #255	; 0xff
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f001 fad5 	bl	8004fd8 <I2C_TransferConfig>
 8003a2e:	e00f      	b.n	8003a50 <HAL_I2C_Mem_Read+0x1cc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f001 fac4 	bl	8004fd8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d19c      	bne.n	8003994 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f001 fa18 	bl	8004e94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Mem_Read+0x1ea>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e01a      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2220      	movs	r2, #32
 8003a74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_I2C_Mem_Read+0x22c>)
 8003a82:	400b      	ands	r3, r1
 8003a84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_I2C_Mem_Read+0x220>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	80002400 	.word	0x80002400
 8003ab0:	fe00e800 	.word	0xfe00e800

08003ab4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	813b      	strh	r3, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d176      	bne.n	8003bc8 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_I2C_Mem_Read_IT+0x32>
 8003ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	e061      	b.n	8003bca <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2C_Mem_Read_IT+0x60>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e05a      	b.n	8003bca <HAL_I2C_Mem_Read_IT+0x116>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fd ffa4 	bl	8001a68 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2222      	movs	r2, #34	; 0x22
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2240      	movs	r2, #64	; 0x40
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_I2C_Mem_Read_IT+0x120>)
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	; (8003bd8 <HAL_I2C_Mem_Read_IT+0x124>)
 8003b4e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2bff      	cmp	r3, #255	; 0xff
 8003b58:	d906      	bls.n	8003b68 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e007      	b.n	8003b78 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003b78:	88f8      	ldrh	r0, [r7, #6]
 8003b7a:	893a      	ldrh	r2, [r7, #8]
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	2319      	movs	r3, #25
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4603      	mov	r3, r0
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fcdf 	bl	800454c <I2C_RequestMemoryRead>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e014      	b.n	8003bca <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	8979      	ldrh	r1, [r7, #10]
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_I2C_Mem_Read_IT+0x128>)
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f001 fa12 	bl	8004fd8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f001 fa38 	bl	8005034 <I2C_Enable_IRQ>

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e000      	b.n	8003bca <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	ffff0000 	.word	0xffff0000
 8003bd8:	08003d73 	.word	0x08003d73
 8003bdc:	80002400 	.word	0x80002400

08003be0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00f      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x42>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00f      	beq.n	8003c80 <HAL_I2C_ER_IRQHandler+0x6c>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <HAL_I2C_ER_IRQHandler+0x96>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f043 0202 	orr.w	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca8:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f003 030b 	and.w	r3, r3, #11
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 ff53 	bl	8004b68 <I2C_ITError>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
 8003d26:	4613      	mov	r3, r2
 8003d28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b088      	sub	sp, #32
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <I2C_Master_ISR_IT+0x1a>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e101      	b.n	8003f90 <I2C_Master_ISR_IT+0x21e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d012      	beq.n	8003dc4 <I2C_Master_ISR_IT+0x52>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_Master_ISR_IT+0x52>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 ff99 	bl	8004cf4 <I2C_Flush_TXDR>
 8003dc2:	e0d2      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01c      	beq.n	8003e08 <I2C_Master_ISR_IT+0x96>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <I2C_Master_ISR_IT+0x96>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6251      	str	r1, [r2, #36]	; 0x24
 8003de8:	b2c2      	uxtb	r2, r0
 8003dea:	701a      	strb	r2, [r3, #0]
    hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e06:	e0b0      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <I2C_Master_ISR_IT+0xd8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d016      	beq.n	8003e4a <I2C_Master_ISR_IT+0xd8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	6251      	str	r1, [r2, #36]	; 0x24
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->XferSize--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e48:	e08f      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05d      	beq.n	8003f10 <I2C_Master_ISR_IT+0x19e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d058      	beq.n	8003f10 <I2C_Master_ISR_IT+0x19e>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d041      	beq.n	8003eec <I2C_Master_ISR_IT+0x17a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d13d      	bne.n	8003eec <I2C_Master_ISR_IT+0x17a>
    {
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e7c:	82fb      	strh	r3, [r7, #22]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	d90e      	bls.n	8003ea6 <I2C_Master_ISR_IT+0x134>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	8af9      	ldrh	r1, [r7, #22]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 f89a 	bl	8004fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea4:	e033      	b.n	8003f0e <I2C_Master_ISR_IT+0x19c>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb8:	d00c      	beq.n	8003ed4 <I2C_Master_ISR_IT+0x162>
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ec4:	8af9      	ldrh	r1, [r7, #22]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4603      	mov	r3, r0
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f001 f883 	bl	8004fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed2:	e01c      	b.n	8003f0e <I2C_Master_ISR_IT+0x19c>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	8af9      	ldrh	r1, [r7, #22]
 8003edc:	2300      	movs	r3, #0
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f001 f877 	bl	8004fd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eea:	e010      	b.n	8003f0e <I2C_Master_ISR_IT+0x19c>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003efa:	d003      	beq.n	8003f04 <I2C_Master_ISR_IT+0x192>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSequentialCplt(hi2c);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fbfb 	bl	80046f8 <I2C_ITMasterSequentialCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f02:	e032      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f04:	2140      	movs	r1, #64	; 0x40
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fe2e 	bl	8004b68 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f0c:	e02d      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
 8003f0e:	e02c      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
      }
    }
  }
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d027      	beq.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
  {
    if (hi2c->XferCount == 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <I2C_Master_ISR_IT+0x1f0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f3c:	d015      	beq.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f46:	d108      	bne.n	8003f5a <I2C_Master_ISR_IT+0x1e8>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e007      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSequentialCplt(hi2c);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fbcc 	bl	80046f8 <I2C_ITMasterSequentialCplt>
 8003f60:	e003      	b.n	8003f6a <I2C_Master_ISR_IT+0x1f8>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fdff 	bl	8004b68 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <I2C_Master_ISR_IT+0x214>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <I2C_Master_ISR_IT+0x214>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fc33 	bl	80047ec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <I2C_Slave_ISR_IT+0x1a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e0d8      	b.n	8004164 <I2C_Slave_ISR_IT+0x1cc>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d045      	beq.n	8004050 <I2C_Slave_ISR_IT+0xb8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d040      	beq.n	8004050 <I2C_Slave_ISR_IT+0xb8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d12f      	bne.n	8004038 <I2C_Slave_ISR_IT+0xa0>
    {
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe0:	d004      	beq.n	8003fec <I2C_Slave_ISR_IT+0x54>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fea:	d10a      	bne.n	8004002 <I2C_Slave_ISR_IT+0x6a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8003ff4:	2b28      	cmp	r3, #40	; 0x28
 8003ff6:	d104      	bne.n	8004002 <I2C_Slave_ISR_IT+0x6a>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fd62 	bl	8004ac4 <I2C_ITListenCplt>
 8004000:	e025      	b.n	800404e <I2C_Slave_ISR_IT+0xb6>
      }
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400a:	d010      	beq.n	800402e <I2C_Slave_ISR_IT+0x96>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b29      	cmp	r3, #41	; 0x29
 8004016:	d10a      	bne.n	800402e <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2210      	movs	r2, #16
 800401e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fe67 	bl	8004cf4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fba3 	bl	8004772 <I2C_ITSlaveSequentialCplt>
 800402c:	e00f      	b.n	800404e <I2C_Slave_ISR_IT+0xb6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2210      	movs	r2, #16
 8004034:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004036:	e082      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2210      	movs	r2, #16
 800403e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hi2c->XferCount == 0U)
 800404c:	e077      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
 800404e:	e076      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
    }
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02e      	beq.n	80040b8 <I2C_Slave_ISR_IT+0x120>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d029      	beq.n	80040b8 <I2C_Slave_ISR_IT+0x120>
  {
    if (hi2c->XferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <I2C_Slave_ISR_IT+0x104>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c59      	adds	r1, r3, #1
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6251      	str	r1, [r2, #36]	; 0x24
 800407e:	b2c2      	uxtb	r2, r0
 8004080:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d14a      	bne.n	800413c <I2C_Slave_ISR_IT+0x1a4>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80040aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ae:	d045      	beq.n	800413c <I2C_Slave_ISR_IT+0x1a4>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb5e 	bl	8004772 <I2C_ITSlaveSequentialCplt>
    if ((hi2c->XferCount == 0U) && \
 80040b6:	e041      	b.n	800413c <I2C_Slave_ISR_IT+0x1a4>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <I2C_Slave_ISR_IT+0x13e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <I2C_Slave_ISR_IT+0x13e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa90 	bl	80045f4 <I2C_ITAddrCplt>
 80040d4:	e033      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <I2C_Slave_ISR_IT+0x1a6>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d029      	beq.n	800413e <I2C_Slave_ISR_IT+0x1a6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <I2C_Slave_ISR_IT+0x18a>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c59      	adds	r1, r3, #1
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6251      	str	r1, [r2, #36]	; 0x24
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004120:	e00d      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800412a:	d003      	beq.n	8004134 <I2C_Slave_ISR_IT+0x19c>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <I2C_Slave_ISR_IT+0x1a6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fb1c 	bl	8004772 <I2C_ITSlaveSequentialCplt>
 800413a:	e000      	b.n	800413e <I2C_Slave_ISR_IT+0x1a6>
    if ((hi2c->XferCount == 0U) && \
 800413c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <I2C_Slave_ISR_IT+0x1c2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <I2C_Slave_ISR_IT+0x1c2>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fbe1 	bl	800491c <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <I2C_Master_ISR_DMA+0x1a>
 8004182:	2302      	movs	r3, #2
 8004184:	e0d9      	b.n	800433a <I2C_Master_ISR_DMA+0x1ce>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <I2C_Master_ISR_DMA+0x5a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2210      	movs	r2, #16
 80041a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041b6:	2112      	movs	r1, #18
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 ff3b 	bl	8005034 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fd98 	bl	8004cf4 <I2C_Flush_TXDR>
 80041c4:	e0b4      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if (((ITFlags & I2C_FLAG_TCR) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d071      	beq.n	80042b4 <I2C_Master_ISR_DMA+0x148>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06c      	beq.n	80042b4 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d04e      	beq.n	8004292 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (hi2c->Instance->CR2 & I2C_CR2_SADD);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004200:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	2bff      	cmp	r3, #255	; 0xff
 800420a:	d906      	bls.n	800421a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e010      	b.n	800423c <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800422c:	d003      	beq.n	8004236 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e002      	b.n	800423c <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	b2da      	uxtb	r2, r3
 8004242:	8a79      	ldrh	r1, [r7, #18]
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fec4 	bl	8004fd8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	d108      	bne.n	8004280 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800427e:	e057      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004290:	e04e      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a0:	d003      	beq.n	80042aa <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSequentialCplt(hi2c);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fa28 	bl	80046f8 <I2C_ITMasterSequentialCplt>
    if (hi2c->XferCount != 0U)
 80042a8:	e042      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042aa:	2140      	movs	r1, #64	; 0x40
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fc5b 	bl	8004b68 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80042b2:	e03d      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if (((ITFlags & I2C_FLAG_TC) != RESET) && ((ITSources & I2C_IT_TCI) != RESET))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <I2C_Master_ISR_DMA+0x1a4>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d119      	bne.n	8004306 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042e0:	d025      	beq.n	800432e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ea:	d108      	bne.n	80042fe <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042fa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80042fc:	e017      	b.n	800432e <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSequentialCplt(hi2c);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f9fa 	bl	80046f8 <I2C_ITMasterSequentialCplt>
    if (hi2c->XferCount == 0U)
 8004304:	e013      	b.n	800432e <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004306:	2140      	movs	r1, #64	; 0x40
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fc2d 	bl	8004b68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800430e:	e00e      	b.n	800432e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa60 	bl	80047ec <I2C_ITMasterCplt>
 800432c:	e000      	b.n	8004330 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800432e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <I2C_Slave_ISR_DMA+0x1a>
 8004358:	2302      	movs	r3, #2
 800435a:	e09f      	b.n	800449c <I2C_Slave_ISR_DMA+0x15a>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d074      	beq.n	8004458 <I2C_Slave_ISR_DMA+0x116>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d06f      	beq.n	8004458 <I2C_Slave_ISR_DMA+0x116>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004386:	d007      	beq.n	8004398 <I2C_Slave_ISR_DMA+0x56>
        ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004396:	d159      	bne.n	800444c <I2C_Slave_ISR_DMA+0x10a>
    {
      if (((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL)) && (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <I2C_Slave_ISR_DMA+0x66>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d045      	beq.n	8004434 <I2C_Slave_ISR_DMA+0xf2>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b6:	d106      	bne.n	80043c6 <I2C_Slave_ISR_DMA+0x84>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <I2C_Slave_ISR_DMA+0x90>
 80043c4:	e036      	b.n	8004434 <I2C_Slave_ISR_DMA+0xf2>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d130      	bne.n	8004434 <I2C_Slave_ISR_DMA+0xf2>
      {
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043da:	d004      	beq.n	80043e6 <I2C_Slave_ISR_DMA+0xa4>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e4:	d10a      	bne.n	80043fc <I2C_Slave_ISR_DMA+0xba>
            (hi2c->State == HAL_I2C_STATE_LISTEN))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ec:	b2db      	uxtb	r3, r3
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 80043ee:	2b28      	cmp	r3, #40	; 0x28
 80043f0:	d104      	bne.n	80043fc <I2C_Slave_ISR_DMA+0xba>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fb65 	bl	8004ac4 <I2C_ITListenCplt>
 80043fa:	e01a      	b.n	8004432 <I2C_Slave_ISR_DMA+0xf0>
        }
        else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004404:	d010      	beq.n	8004428 <I2C_Slave_ISR_DMA+0xe6>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b29      	cmp	r3, #41	; 0x29
 8004410:	d10a      	bne.n	8004428 <I2C_Slave_ISR_DMA+0xe6>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2210      	movs	r2, #16
 8004418:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fc6a 	bl	8004cf4 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSequentialCplt(hi2c);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f9a6 	bl	8004772 <I2C_ITSlaveSequentialCplt>
 8004426:	e004      	b.n	8004432 <I2C_Slave_ISR_DMA+0xf0>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2210      	movs	r2, #16
 800442e:	61da      	str	r2, [r3, #28]
        if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8004430:	e00b      	b.n	800444a <I2C_Slave_ISR_DMA+0x108>
 8004432:	e00a      	b.n	800444a <I2C_Slave_ISR_DMA+0x108>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
      if (((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL)) && (I2C_GET_DMA_REMAIN_DATA(hi2c) == 0U))
 8004448:	e005      	b.n	8004456 <I2C_Slave_ISR_DMA+0x114>
 800444a:	e004      	b.n	8004456 <I2C_Slave_ISR_DMA+0x114>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	61da      	str	r2, [r3, #28]
    if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004454:	e01d      	b.n	8004492 <I2C_Slave_ISR_DMA+0x150>
 8004456:	e01c      	b.n	8004492 <I2C_Slave_ISR_DMA+0x150>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <I2C_Slave_ISR_DMA+0x134>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <I2C_Slave_ISR_DMA+0x134>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8c0 	bl	80045f4 <I2C_ITAddrCplt>
 8004474:	e00d      	b.n	8004492 <I2C_Slave_ISR_DMA+0x150>
  }
  else if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <I2C_Slave_ISR_DMA+0x150>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <I2C_Slave_ISR_DMA+0x150>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa45 	bl	800491c <I2C_ITSlaveCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	8979      	ldrh	r1, [r7, #10]
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <I2C_RequestMemoryWrite+0xa4>)
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fd83 	bl	8004fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fc9c 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02c      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
 80044f6:	e015      	b.n	8004524 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fc82 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e012      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800451a:	893b      	ldrh	r3, [r7, #8]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fc30 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	80002000 	.word	0x80002000

0800454c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <I2C_RequestMemoryRead+0xa4>)
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2300      	movs	r3, #0
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fd30 	bl	8004fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	69b9      	ldr	r1, [r7, #24]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fc49 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e02c      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
 800459c:	e015      	b.n	80045ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800459e:	893b      	ldrh	r3, [r7, #8]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	69b9      	ldr	r1, [r7, #24]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fc2f 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e012      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2140      	movs	r1, #64	; 0x40
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fbdd 	bl	8004d94 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	80002000 	.word	0x80002000

080045f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800460a:	2b28      	cmp	r3, #40	; 0x28
 800460c:	d168      	bne.n	80046e0 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	b29b      	uxth	r3, r3
 8004628:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800462c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004648:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d137      	bne.n	80046c2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	09db      	lsrs	r3, r3, #7
 8004656:	b29a      	uxth	r2, r3
 8004658:	89bb      	ldrh	r3, [r7, #12]
 800465a:	4053      	eors	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11c      	bne.n	80046a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	2b02      	cmp	r3, #2
 800467a:	d139      	bne.n	80046f0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2208      	movs	r2, #8
 8004688:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004692:	89ba      	ldrh	r2, [r7, #12]
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fb3e 	bl	8003d1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800469e:	e027      	b.n	80046f0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046a4:	2104      	movs	r1, #4
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fd32 	bl	8005110 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046b4:	89ba      	ldrh	r2, [r7, #12]
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fb2d 	bl	8003d1a <HAL_I2C_AddrCallback>
}
 80046c0:	e016      	b.n	80046f0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80046c2:	2104      	movs	r1, #4
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fd23 	bl	8005110 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046d2:	89ba      	ldrh	r2, [r7, #12]
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fb1e 	bl	8003d1a <HAL_I2C_AddrCallback>
}
 80046de:	e007      	b.n	80046f0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2208      	movs	r2, #8
 80046e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_ITMasterSequentialCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b21      	cmp	r3, #33	; 0x21
 8004712:	d115      	bne.n	8004740 <I2C_ITMasterSequentialCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2211      	movs	r2, #17
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004728:	2101      	movs	r1, #1
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fcf0 	bl	8005110 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fac6 	bl	8003cca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800473e:	e014      	b.n	800476a <I2C_ITMasterSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2212      	movs	r2, #18
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004754:	2102      	movs	r1, #2
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fcda 	bl	8005110 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff faba 	bl	8003cde <HAL_I2C_MasterRxCpltCallback>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b29      	cmp	r3, #41	; 0x29
 800478c:	d112      	bne.n	80047b4 <I2C_ITSlaveSequentialCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2228      	movs	r2, #40	; 0x28
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800479c:	2101      	movs	r1, #1
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fcb6 	bl	8005110 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff faa0 	bl	8003cf2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047b2:	e017      	b.n	80047e4 <I2C_ITSlaveSequentialCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b2a      	cmp	r3, #42	; 0x2a
 80047be:	d111      	bne.n	80047e4 <I2C_ITSlaveSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2228      	movs	r2, #40	; 0x28
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2222      	movs	r2, #34	; 0x22
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047ce:	2102      	movs	r1, #2
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fc9d 	bl	8005110 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fa91 	bl	8003d06 <HAL_I2C_SlaveRxCpltCallback>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2220      	movs	r2, #32
 80047fc:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b42      	ldr	r3, [pc, #264]	; (8004914 <I2C_ITMasterCplt+0x128>)
 800480a:	400b      	ands	r3, r1
 800480c:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <I2C_ITMasterCplt+0x12c>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  if ((ITFlags & I2C_FLAG_AF) != RESET)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <I2C_ITMasterCplt+0x52>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2210      	movs	r2, #16
 8004830:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa58 	bl	8004cf4 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004844:	2103      	movs	r1, #3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fc62 	bl	8005110 <I2C_Disable_IRQ>

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->ErrorCode != HAL_I2C_ERROR_NONE) || (hi2c->State == HAL_I2C_STATE_ABORT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <I2C_ITMasterCplt+0x74>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d106      	bne.n	800486e <I2C_ITMasterCplt+0x82>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f97e 	bl	8004b68 <I2C_ITError>
#else
      HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800486c:	e04e      	b.n	800490c <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b21      	cmp	r3, #33	; 0x21
 8004878:	d121      	bne.n	80048be <I2C_ITMasterCplt+0xd2>
    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d10b      	bne.n	80048a6 <I2C_ITMasterCplt+0xba>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f015 f898 	bl	80199d4 <HAL_I2C_MemTxCpltCallback>
}
 80048a4:	e032      	b.n	800490c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fa07 	bl	8003cca <HAL_I2C_MasterTxCpltCallback>
}
 80048bc:	e026      	b.n	800490c <I2C_ITMasterCplt+0x120>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b22      	cmp	r3, #34	; 0x22
 80048c8:	d120      	bne.n	800490c <I2C_ITMasterCplt+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d10b      	bne.n	80048f6 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f015 f800 	bl	80198f4 <HAL_I2C_MemRxCpltCallback>
}
 80048f4:	e00a      	b.n	800490c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff f9e9 	bl	8003cde <HAL_I2C_MasterRxCpltCallback>
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	fe00e800 	.word	0xfe00e800
 8004918:	ffff0000 	.word	0xffff0000

0800491c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2220      	movs	r2, #32
 800492c:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2208      	movs	r2, #8
 8004934:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004936:	2107      	movs	r1, #7
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fbe9 	bl	8005110 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b58      	ldr	r3, [pc, #352]	; (8004abc <I2C_ITSlaveCplt+0x1a0>)
 800495a:	400b      	ands	r3, r1
 800495c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9c8 	bl	8004cf4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004972:	d007      	beq.n	8004984 <I2C_ITSlaveCplt+0x68>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004982:	d11c      	bne.n	80049be <I2C_ITSlaveCplt+0xa2>
  {
    if ((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <I2C_ITSlaveCplt+0x78>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d014      	beq.n	80049be <I2C_ITSlaveCplt+0xa2>
    {
      hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a2:	d105      	bne.n	80049b0 <I2C_ITSlaveCplt+0x94>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	e004      	b.n	80049ba <I2C_ITSlaveCplt+0x9e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	8553      	strh	r3, [r2, #42]	; 0x2a
    }
  }

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <I2C_ITSlaveCplt+0xe2>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6251      	str	r1, [r2, #36]	; 0x24
 80049d8:	b2c2      	uxtb	r2, r0
 80049da:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00c      	beq.n	80049fe <I2C_ITSlaveCplt+0xe2>
    {
      hi2c->XferSize--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <I2C_ITSlaveCplt+0xf8>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d010      	beq.n	8004a52 <I2C_ITSlaveCplt+0x136>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f896 	bl	8004b68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b28      	cmp	r3, #40	; 0x28
 8004a46:	d135      	bne.n	8004ab4 <I2C_ITSlaveCplt+0x198>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f83a 	bl	8004ac4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a50:	e030      	b.n	8004ab4 <I2C_ITSlaveCplt+0x198>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a5a:	d00e      	beq.n	8004a7a <I2C_ITSlaveCplt+0x15e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <I2C_ITSlaveCplt+0x1a4>)
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff f95f 	bl	8003d36 <HAL_I2C_ListenCpltCallback>
}
 8004a78:	e01c      	b.n	8004ab4 <I2C_ITSlaveCplt+0x198>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b22      	cmp	r3, #34	; 0x22
 8004a84:	d10b      	bne.n	8004a9e <I2C_ITSlaveCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff f935 	bl	8003d06 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a9c:	e00a      	b.n	8004ab4 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff f91f 	bl	8003cf2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	fe00e800 	.word	0xfe00e800
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <I2C_ITListenCplt+0xa0>)
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <I2C_ITListenCplt+0x78>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	1c59      	adds	r1, r3, #1
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6251      	str	r1, [r2, #36]	; 0x24
 8004b0a:	b2c2      	uxtb	r2, r0
 8004b0c:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d012      	beq.n	8004b3c <I2C_ITListenCplt+0x78>
    {
      hi2c->XferSize--;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f043 0204 	orr.w	r2, r3, #4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b3c:	2107      	movs	r1, #7
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fae6 	bl	8005110 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff f8ee 	bl	8003d36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	ffff0000 	.word	0xffff0000

08004b68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <I2C_ITError+0x180>)
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b28      	cmp	r3, #40	; 0x28
 8004b9c:	d00b      	beq.n	8004bb6 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba4:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8004ba6:	2b29      	cmp	r3, #41	; 0x29
 8004ba8:	d005      	beq.n	8004bb6 <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb0:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bb4:	d10e      	bne.n	8004bd4 <I2C_ITError+0x6c>
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 faa9 	bl	8005110 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2228      	movs	r2, #40	; 0x28
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a47      	ldr	r2, [pc, #284]	; (8004cec <I2C_ITError+0x184>)
 8004bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004bd2:	e013      	b.n	8004bfc <I2C_ITError+0x94>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bd4:	2107      	movs	r1, #7
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa9a 	bl	8005110 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b60      	cmp	r3, #96	; 0x60
 8004be6:	d003      	beq.n	8004bf0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0a:	d123      	bne.n	8004c54 <I2C_ITError+0xec>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05c      	beq.n	8004cde <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	4a31      	ldr	r2, [pc, #196]	; (8004cf0 <I2C_ITError+0x188>)
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fd fabf 	bl	80021bc <HAL_DMA_Abort_IT>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d04c      	beq.n	8004cde <I2C_ITError+0x176>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c52:	e044      	b.n	8004cde <I2C_ITError+0x176>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	d123      	bne.n	8004cac <I2C_ITError+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d030      	beq.n	8004cde <I2C_ITError+0x176>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <I2C_ITError+0x188>)
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd fa93 	bl	80021bc <HAL_DMA_Abort_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <I2C_ITError+0x176>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
}
 8004caa:	e018      	b.n	8004cde <I2C_ITError+0x176>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d10b      	bne.n	8004cd0 <I2C_ITError+0x168>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff f848 	bl	8003d5e <HAL_I2C_AbortCpltCallback>
}
 8004cce:	e006      	b.n	8004cde <I2C_ITError+0x176>
    __HAL_UNLOCK(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff f836 	bl	8003d4a <HAL_I2C_ErrorCallback>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	ffff0000 	.word	0xffff0000
 8004cec:	08003f99 	.word	0x08003f99
 8004cf0:	08004d3d 	.word	0x08004d3d

08004cf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d007      	beq.n	8004d30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	619a      	str	r2, [r3, #24]
  }
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d58:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	2200      	movs	r2, #0
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	2200      	movs	r2, #0
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b60      	cmp	r3, #96	; 0x60
 8004d74:	d107      	bne.n	8004d86 <I2C_DMAAbort+0x4a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7fe ffed 	bl	8003d5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d84:	e002      	b.n	8004d8c <I2C_DMAAbort+0x50>
    HAL_I2C_ErrorCallback(hi2c);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7fe ffdf 	bl	8003d4a <HAL_I2C_ErrorCallback>
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da4:	e022      	b.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d01e      	beq.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fc fe5b 	bl	8001a68 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d113      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e00f      	b.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d0cd      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e20:	e02c      	b.n	8004e7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f870 	bl	8004f0c <I2C_IsAcknowledgeFailed>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e02a      	b.n	8004e8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d01e      	beq.n	8004e7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3e:	f7fc fe13 	bl	8001a68 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d113      	bne.n	8004e7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d1cb      	bne.n	8004e22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea0:	e028      	b.n	8004ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f830 	bl	8004f0c <I2C_IsAcknowledgeFailed>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e026      	b.n	8004f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fc fdd7 	bl	8001a68 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e007      	b.n	8004f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d1cf      	bne.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d151      	bne.n	8004fca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f26:	e022      	b.n	8004f6e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d01e      	beq.n	8004f6e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f30:	f7fc fd9a 	bl	8001a68 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <I2C_IsAcknowledgeFailed+0x3a>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d113      	bne.n	8004f6e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e02e      	b.n	8004fcc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d1d5      	bne.n	8004f28 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2210      	movs	r2, #16
 8004f82:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff feb1 	bl	8004cf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	f043 0204 	orr.w	r2, r3, #4
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	fe00e800 	.word	0xfe00e800

08004fd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	817b      	strh	r3, [r7, #10]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	0d5b      	lsrs	r3, r3, #21
 8004ff4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <I2C_TransferConfig+0x58>)
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	ea02 0103 	and.w	r1, r2, r3
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005008:	7a7b      	ldrb	r3, [r7, #9]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	431a      	orrs	r2, r3
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	03ff63ff 	.word	0x03ff63ff

08005034 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <I2C_Enable_IRQ+0xd4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005052:	4a2e      	ldr	r2, [pc, #184]	; (800510c <I2C_Enable_IRQ+0xd8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d124      	bne.n	80050a2 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005068:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	f003 0311 	and.w	r3, r3, #17
 8005070:	2b11      	cmp	r3, #17
 8005072:	d103      	bne.n	800507c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800507a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	f003 0312 	and.w	r3, r3, #18
 8005082:	2b12      	cmp	r3, #18
 8005084:	d103      	bne.n	800508e <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f043 0320 	orr.w	r3, r3, #32
 800508c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800508e:	887b      	ldrh	r3, [r7, #2]
 8005090:	f003 0312 	and.w	r3, r3, #18
 8005094:	2b12      	cmp	r3, #18
 8005096:	d128      	bne.n	80050ea <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509e:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80050a0:	e023      	b.n	80050ea <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050a2:	887b      	ldrh	r3, [r7, #2]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050b4:	887b      	ldrh	r3, [r7, #2]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80050c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80050d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	f003 0312 	and.w	r3, r3, #18
 80050de:	2b12      	cmp	r3, #18
 80050e0:	d103      	bne.n	80050ea <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f043 0320 	orr.w	r3, r3, #32
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	0800416d 	.word	0x0800416d
 800510c:	08004343 	.word	0x08004343

08005110 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00f      	beq.n	800514a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005130:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800513e:	2b28      	cmp	r3, #40	; 0x28
 8005140:	d003      	beq.n	800514a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005148:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800515a:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005168:	2b28      	cmp	r3, #40	; 0x28
 800516a:	d003      	beq.n	8005174 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005172:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005174:	887b      	ldrh	r3, [r7, #2]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005184:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8005186:	887b      	ldrh	r3, [r7, #2]
 8005188:	f003 0311 	and.w	r3, r3, #17
 800518c:	2b11      	cmp	r3, #17
 800518e:	d103      	bne.n	8005198 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005196:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	f003 0312 	and.w	r3, r3, #18
 800519e:	2b12      	cmp	r3, #18
 80051a0:	d103      	bne.n	80051aa <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	f003 0312 	and.w	r3, r3, #18
 80051b0:	2b12      	cmp	r3, #18
 80051b2:	d103      	bne.n	80051bc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	43da      	mvns	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d138      	bne.n	8005262 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e032      	b.n	8005264 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2224      	movs	r2, #36	; 0x24
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800522c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	d139      	bne.n	80052fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005290:	2302      	movs	r3, #2
 8005292:	e033      	b.n	80052fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e000      	b.n	80052fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
  }
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e038      	b.n	800538c <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005322:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f245 5255 	movw	r2, #21845	; 0x5555
 800532c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005342:	f7fc fb91 	bl	8001a68 <HAL_GetTick>
 8005346:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8005348:	e008      	b.n	800535c <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800534a:	f7fc fb8d 	bl	8001a68 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d901      	bls.n	800535c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e017      	b.n	800538c <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f1      	bne.n	800534a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68d2      	ldr	r2, [r2, #12]
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	e004      	b.n	800538a <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80053a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e076      	b.n	80054b8 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc f80e 	bl	8001400 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d103      	bne.n	8005404 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 031e 	bic.w	r3, r3, #30
 8005402:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800540c:	4293      	cmp	r3, r2
 800540e:	d005      	beq.n	800541c <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005416:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800541a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4b28      	ldr	r3, [pc, #160]	; (80054c0 <HAL_LPTIM_Init+0x10c>)
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800542c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005432:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005438:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800543e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d107      	bne.n	800545e <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8005456:	4313      	orrs	r3, r2
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005466:	4293      	cmp	r3, r2
 8005468:	d00a      	beq.n	8005480 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005472:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005478:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_LPTIM_Init+0x110>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	621a      	str	r2, [r3, #32]
 80054a2:	e004      	b.n	80054ae <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054ac:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	ff19f1fe 	.word	0xff19f1fe
 80054c4:	40007c00 	.word	0x40007c00

080054c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40007000 	.word	0x40007000

080054e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <HAL_PWREx_GetVoltageRange+0x18>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40007000 	.word	0x40007000

08005504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005516:	d12f      	bne.n	8005578 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005524:	d037      	beq.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005526:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005534:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8005536:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	0c9b      	lsrs	r3, r3, #18
 8005542:	2232      	movs	r2, #50	; 0x32
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800554a:	e002      	b.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3b01      	subs	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x62>
 8005558:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d0f2      	beq.n	800554c <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005572:	d110      	bne.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e00f      	b.n	8005598 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005584:	d007      	beq.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005594:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}  
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40007000 	.word	0x40007000
 80055a8:	20000068 	.word	0x20000068
 80055ac:	431bde83 	.word	0x431bde83

080055b0 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055ca:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055d0:	f043 0304 	orr.w	r3, r3, #4
 80055d4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80055dc:	bf30      	wfi
 80055de:	e002      	b.n	80055e6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80055e0:	bf40      	sev
  __ASM volatile ("wfe");
 80055e2:	bf20      	wfe
 80055e4:	bf20      	wfe
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	4a06      	ldr	r2, [pc, #24]	; (8005604 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	6113      	str	r3, [r2, #16]
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40007000 	.word	0x40007000
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e356      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80d0 	beq.w	80057c8 <HAL_RCC_OscConfig+0x1c0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8005628:	4ba1      	ldr	r3, [pc, #644]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b00      	cmp	r3, #0
 8005632:	d179      	bne.n	8005728 <HAL_RCC_OscConfig+0x120>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005634:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x44>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x44>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e33d      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_RCC_OscConfig+0x5e>
 800565c:	4b94      	ldr	r3, [pc, #592]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005664:	e005      	b.n	8005672 <HAL_RCC_OscConfig+0x6a>
 8005666:	4b92      	ldr	r3, [pc, #584]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005672:	4293      	cmp	r3, r2
 8005674:	d223      	bcs.n	80056be <HAL_RCC_OscConfig+0xb6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fce8 	bl	8006050 <RCC_SetFlashLatencyFromMSIRange>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x82>
          {
            return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e31e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800568a:	4b89      	ldr	r3, [pc, #548]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a88      	ldr	r2, [pc, #544]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005690:	f043 0308 	orr.w	r3, r3, #8
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4b86      	ldr	r3, [pc, #536]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4983      	ldr	r1, [pc, #524]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a8:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	497e      	ldr	r1, [pc, #504]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
 80056bc:	e022      	b.n	8005704 <HAL_RCC_OscConfig+0xfc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056be:	4b7c      	ldr	r3, [pc, #496]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a7b      	ldr	r2, [pc, #492]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b79      	ldr	r3, [pc, #484]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4976      	ldr	r1, [pc, #472]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056dc:	4b74      	ldr	r3, [pc, #464]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	4971      	ldr	r1, [pc, #452]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fcab 	bl	8006050 <RCC_SetFlashLatencyFromMSIRange>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e2e1      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005704:	f000 fbc0 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005708:	4601      	mov	r1, r0
 800570a:	4b69      	ldr	r3, [pc, #420]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	4a67      	ldr	r2, [pc, #412]	; (80058b4 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	5cd3      	ldrb	r3, [r2, r3]
 8005718:	fa21 f303 	lsr.w	r3, r1, r3
 800571c:	4a66      	ldr	r2, [pc, #408]	; (80058b8 <HAL_RCC_OscConfig+0x2b0>)
 800571e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8005720:	2000      	movs	r0, #0
 8005722:	f7fc f977 	bl	8001a14 <HAL_InitTick>
 8005726:	e04f      	b.n	80057c8 <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d032      	beq.n	8005796 <HAL_RCC_OscConfig+0x18e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005730:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5e      	ldr	r2, [pc, #376]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800573c:	f7fc f994 	bl	8001a68 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005744:	f7fc f990 	bl	8001a68 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e2b8      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005756:	4b56      	ldr	r3, [pc, #344]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x13c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005762:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	494d      	ldr	r1, [pc, #308]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005780:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	4948      	ldr	r1, [pc, #288]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x1c0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a45      	ldr	r2, [pc, #276]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057a2:	f7fc f961 	bl	8001a68 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057aa:	f7fc f95d 	bl	8001a68 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e285      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80057bc:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x1a2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d07b      	beq.n	80058cc <HAL_RCC_OscConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d00b      	beq.n	80057f8 <HAL_RCC_OscConfig+0x1f0>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057e0:	4b33      	ldr	r3, [pc, #204]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d111      	bne.n	8005810 <HAL_RCC_OscConfig+0x208>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057ec:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d10b      	bne.n	8005810 <HAL_RCC_OscConfig+0x208>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f8:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d062      	beq.n	80058ca <HAL_RCC_OscConfig+0x2c2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d15e      	bne.n	80058ca <HAL_RCC_OscConfig+0x2c2>
      {
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e25b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005818:	d106      	bne.n	8005828 <HAL_RCC_OscConfig+0x220>
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e01d      	b.n	8005864 <HAL_RCC_OscConfig+0x25c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x244>
 8005832:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e00b      	b.n	8005864 <HAL_RCC_OscConfig+0x25c>
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 800585e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <HAL_RCC_OscConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fc f8fc 	bl	8001a68 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005874:	f7fc f8f8 	bl	8001a68 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e220      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <HAL_RCC_OscConfig+0x2a8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x26c>
 8005892:	e01b      	b.n	80058cc <HAL_RCC_OscConfig+0x2c4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fc f8e8 	bl	8001a68 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800589a:	e00f      	b.n	80058bc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800589c:	f7fc f8e4 	bl	8001a68 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b64      	cmp	r3, #100	; 0x64
 80058a8:	d908      	bls.n	80058bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e20c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000
 80058b4:	08026d80 	.word	0x08026d80
 80058b8:	20000068 	.word	0x20000068
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80058bc:	4ba9      	ldr	r3, [pc, #676]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e9      	bne.n	800589c <HAL_RCC_OscConfig+0x294>
 80058c8:	e000      	b.n	80058cc <HAL_RCC_OscConfig+0x2c4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d069      	beq.n	80059ac <HAL_RCC_OscConfig+0x3a4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80058d8:	4ba2      	ldr	r3, [pc, #648]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d00b      	beq.n	80058fc <HAL_RCC_OscConfig+0x2f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058e4:	4b9f      	ldr	r3, [pc, #636]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80058ec:	2b0c      	cmp	r3, #12
 80058ee:	d11c      	bne.n	800592a <HAL_RCC_OscConfig+0x322>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058f0:	4b9c      	ldr	r3, [pc, #624]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d116      	bne.n	800592a <HAL_RCC_OscConfig+0x322>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058fc:	4b99      	ldr	r3, [pc, #612]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_OscConfig+0x30c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_OscConfig+0x30c>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e1d9      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005914:	4b93      	ldr	r3, [pc, #588]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	4990      	ldr	r1, [pc, #576]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005928:	e040      	b.n	80059ac <HAL_RCC_OscConfig+0x3a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d023      	beq.n	800597a <HAL_RCC_OscConfig+0x372>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005932:	4b8c      	ldr	r3, [pc, #560]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a8b      	ldr	r2, [pc, #556]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fc f893 	bl	8001a68 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005946:	f7fc f88f 	bl	8001a68 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e1b7      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005958:	4b82      	ldr	r3, [pc, #520]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005964:	4b7f      	ldr	r3, [pc, #508]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	497c      	ldr	r1, [pc, #496]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	e018      	b.n	80059ac <HAL_RCC_OscConfig+0x3a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b7a      	ldr	r3, [pc, #488]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a79      	ldr	r2, [pc, #484]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7fc f86f 	bl	8001a68 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc f86b 	bl	8001a68 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e193      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80059a0:	4b70      	ldr	r3, [pc, #448]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03c      	beq.n	8005a32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01c      	beq.n	80059fa <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c0:	4b68      	ldr	r3, [pc, #416]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80059c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c6:	4a67      	ldr	r2, [pc, #412]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fc f84a 	bl	8001a68 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fc f846 	bl	8001a68 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e16e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80059ea:	4b5e      	ldr	r3, [pc, #376]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80059ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ef      	beq.n	80059d8 <HAL_RCC_OscConfig+0x3d0>
 80059f8:	e01b      	b.n	8005a32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059fa:	4b5a      	ldr	r3, [pc, #360]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a00:	4a58      	ldr	r2, [pc, #352]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fc f82d 	bl	8001a68 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fc f829 	bl	8001a68 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e151      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8005a24:	4b4f      	ldr	r3, [pc, #316]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ef      	bne.n	8005a12 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80a6 	beq.w	8005b8c <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a40:	2300      	movs	r3, #0
 8005a42:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a44:	4b47      	ldr	r3, [pc, #284]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10d      	bne.n	8005a6c <HAL_RCC_OscConfig+0x464>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a50:	4b44      	ldr	r3, [pc, #272]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	4a43      	ldr	r2, [pc, #268]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5c:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a6c:	4b3e      	ldr	r3, [pc, #248]	; (8005b68 <HAL_RCC_OscConfig+0x560>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d118      	bne.n	8005aaa <HAL_RCC_OscConfig+0x4a2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a78:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <HAL_RCC_OscConfig+0x560>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3a      	ldr	r2, [pc, #232]	; (8005b68 <HAL_RCC_OscConfig+0x560>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a84:	f7fb fff0 	bl	8001a68 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8c:	f7fb ffec 	bl	8001a68 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e114      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9e:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <HAL_RCC_OscConfig+0x560>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x484>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x4bc>
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ac2:	e024      	b.n	8005b0e <HAL_RCC_OscConfig+0x506>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d110      	bne.n	8005aee <HAL_RCC_OscConfig+0x4e6>
 8005acc:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad2:	4a24      	ldr	r2, [pc, #144]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005ad4:	f043 0304 	orr.w	r3, r3, #4
 8005ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005adc:	4b21      	ldr	r3, [pc, #132]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aec:	e00f      	b.n	8005b0e <HAL_RCC_OscConfig+0x506>
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b04:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_RCC_OscConfig+0x53c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b16:	f7fb ffa7 	bl	8001a68 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCC_OscConfig+0x52c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1e:	f7fb ffa3 	bl	8001a68 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e0c9      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_OscConfig+0x55c>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ed      	beq.n	8005b1e <HAL_RCC_OscConfig+0x516>
 8005b42:	e01a      	b.n	8005b7a <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fb ff90 	bl	8001a68 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fb ff8c 	bl	8001a68 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d906      	bls.n	8005b6c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0b2      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e8      	bne.n	8005b4c <HAL_RCC_OscConfig+0x544>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d105      	bne.n	8005b8c <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b80:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8098 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b96:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	f000 808f 	beq.w	8005cc2 <HAL_RCC_OscConfig+0x6ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d156      	bne.n	8005c5a <HAL_RCC_OscConfig+0x652>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bac:	4b48      	ldr	r3, [pc, #288]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a47      	ldr	r2, [pc, #284]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fb ff56 	bl	8001a68 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x5ca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fb ff52 	bl	8001a68 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e07a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005bd2:	4b3f      	ldr	r3, [pc, #252]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x5b8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	3b01      	subs	r3, #1
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	045b      	lsls	r3, r3, #17
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	3b01      	subs	r3, #1
 8005c06:	055b      	lsls	r3, r3, #21
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	3b01      	subs	r3, #1
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	492e      	ldr	r1, [pc, #184]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c1a:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c24:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c26:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c30:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fb ff19 	bl	8001a68 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x644>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fb ff15 	bl	8001a68 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x644>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e03d      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005c4c:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x632>
 8005c58:	e035      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCC_OscConfig+0x682>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           &&
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <HAL_RCC_OscConfig+0x682>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c84:	f023 0303 	bic.w	r3, r3, #3
 8005c88:	60d3      	str	r3, [r2, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c8a:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005c90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fb fee5 	bl	8001a68 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x6ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca2:	f7fb fee1 	bl	8001a68 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_RCC_OscConfig+0x6c8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x69a>
 8005cc0:	e001      	b.n	8005cc6 <HAL_RCC_OscConfig+0x6be>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x6c0>
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000

08005cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0;
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0c2      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b63      	ldr	r3, [pc, #396]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d910      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 0207 	bic.w	r2, r3, #7
 8005cfe:	495e      	ldr	r1, [pc, #376]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b5c      	ldr	r3, [pc, #368]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0aa      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d04c      	beq.n	8005dbe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005d2c:	4b53      	ldr	r3, [pc, #332]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d121      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e098      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005d44:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d115      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e08c      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005d5c:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d109      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e080      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005d6c:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e078      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f023 0203 	bic.w	r2, r3, #3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	493c      	ldr	r1, [pc, #240]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fb fe6b 	bl	8001a68 <HAL_GetTick>
 8005d92:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d94:	e00a      	b.n	8005dac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d96:	f7fb fe67 	bl	8001a68 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e060      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dac:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 020c 	and.w	r2, r3, #12
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d1eb      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4929      	ldr	r1, [pc, #164]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d210      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 0207 	bic.w	r2, r3, #7
 8005df2:	4921      	ldr	r1, [pc, #132]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCC_ClockConfig+0x1a4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e030      	b.n	8005e6e <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4915      	ldr	r1, [pc, #84]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e4a:	f000 f81d 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1a8>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1ac>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCC_ClockConfig+0x1b0>)
 8005e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fb fdd4 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40022000 	.word	0x40022000
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	08026d80 	.word	0x08026d80
 8005e84:	20000068 	.word	0x20000068

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005ea6:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005eb2:	4b49      	ldr	r3, [pc, #292]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005eba:	2b0c      	cmp	r3, #12
 8005ebc:	d127      	bne.n	8005f0e <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d121      	bne.n	8005f0e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8005eca:	4b43      	ldr	r3, [pc, #268]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ed6:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e005      	b.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ee6:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ef2:	4a3a      	ldr	r2, [pc, #232]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x154>)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efa:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d113      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005f0c:	e010      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f0e:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d102      	bne.n	8005f20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e007      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f20:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f30:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d145      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	3301      	adds	r3, #1
 8005f52:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d002      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0xd8>
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d00d      	beq.n	8005f7a <HAL_RCC_GetSysClockFreq+0xf2>
 8005f5e:	e019      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f6a:	68d2      	ldr	r2, [r2, #12]
 8005f6c:	0a12      	lsrs	r2, r2, #8
 8005f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	613b      	str	r3, [r7, #16]
      break;
 8005f78:	e019      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f84:	68d2      	ldr	r2, [r2, #12]
 8005f86:	0a12      	lsrs	r2, r2, #8
 8005f88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
 8005f90:	613b      	str	r3, [r7, #16]
      break;
 8005f92:	e00c      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4a0e      	ldr	r2, [pc, #56]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005f9e:	68d2      	ldr	r2, [r2, #12]
 8005fa0:	0a12      	lsrs	r2, r2, #8
 8005fa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	613b      	str	r3, [r7, #16]
      break;
 8005fac:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x150>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	0e5b      	lsrs	r3, r3, #25
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	3301      	adds	r3, #1
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	08026d98 	.word	0x08026d98
 8005fe0:	00f42400 	.word	0x00f42400
 8005fe4:	007a1200 	.word	0x007a1200

08005fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000068 	.word	0x20000068

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006004:	f7ff fff0 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006008:	4601      	mov	r1, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4a03      	ldr	r2, [pc, #12]	; (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006016:	5cd3      	ldrb	r3, [r2, r3]
 8006018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40021000 	.word	0x40021000
 8006024:	08026d90 	.word	0x08026d90

08006028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800602c:	f7ff ffdc 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006030:	4601      	mov	r1, r0
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	0adb      	lsrs	r3, r3, #11
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4a03      	ldr	r2, [pc, #12]	; (800604c <HAL_RCC_GetPCLK2Freq+0x24>)
 800603e:	5cd3      	ldrb	r3, [r2, r3]
 8006040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40021000 	.word	0x40021000
 800604c:	08026d90 	.word	0x08026d90

08006050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006060:	4b2a      	ldr	r3, [pc, #168]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800606c:	f7ff fa3c 	bl	80054e8 <HAL_PWREx_GetVoltageRange>
 8006070:	6178      	str	r0, [r7, #20]
 8006072:	e014      	b.n	800609e <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006074:	4b25      	ldr	r3, [pc, #148]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800607a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607e:	6593      	str	r3, [r2, #88]	; 0x58
 8006080:	4b22      	ldr	r3, [pc, #136]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800608c:	f7ff fa2c 	bl	80054e8 <HAL_PWREx_GetVoltageRange>
 8006090:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006092:	4b1e      	ldr	r3, [pc, #120]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a4:	d10b      	bne.n	80060be <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d919      	bls.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2ba0      	cmp	r3, #160	; 0xa0
 80060b0:	d902      	bls.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060b2:	2302      	movs	r3, #2
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e013      	b.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060b8:	2301      	movs	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e010      	b.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d902      	bls.n	80060ca <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060c4:	2303      	movs	r3, #3
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	e00a      	b.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d102      	bne.n	80060d6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060d0:	2302      	movs	r3, #2
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	e004      	b.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b70      	cmp	r3, #112	; 0x70
 80060da:	d101      	bne.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060dc:	2301      	movs	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 0207 	bic.w	r2, r3, #7
 80060e8:	4909      	ldr	r1, [pc, #36]	; (8006110 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d001      	beq.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40021000 	.word	0x40021000
 8006110:	40022000 	.word	0x40022000

08006114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006124:	2300      	movs	r3, #0
 8006126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006128:	2300      	movs	r3, #0
 800612a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006134:	2b00      	cmp	r3, #0
 8006136:	d03f      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006140:	d01c      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006146:	d802      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800614c:	e01f      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800614e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8006154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006158:	d01c      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800615a:	e018      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800615c:	4b82      	ldr	r3, [pc, #520]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a81      	ldr	r2, [pc, #516]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006166:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fab3 	bl	80066dc <RCCEx_PLLSAI1_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3320      	adds	r3, #32
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fb9c 	bl	80068c0 <RCCEx_PLLSAI2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	74fb      	strb	r3, [r7, #19]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800619c:	4b72      	ldr	r3, [pc, #456]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	496f      	ldr	r1, [pc, #444]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061b2:	e001      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03f      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061cc:	d01c      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061d2:	d802      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80061d8:	e01f      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061de:	d003      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061e4:	d01c      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80061e6:	e018      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061e8:	4b5f      	ldr	r3, [pc, #380]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4a5e      	ldr	r2, [pc, #376]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061f4:	e015      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa6d 	bl	80066dc <RCCEx_PLLSAI1_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006206:	e00c      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3320      	adds	r3, #32
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fb56 	bl	80068c0 <RCCEx_PLLSAI2_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	74fb      	strb	r3, [r7, #19]
      break;
 800621e:	e000      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006228:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006236:	494c      	ldr	r1, [pc, #304]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800623e:	e001      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 809a 	beq.w	8006386 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	4b41      	ldr	r3, [pc, #260]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006266:	4a40      	ldr	r2, [pc, #256]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626c:	6593      	str	r3, [r2, #88]	; 0x58
 800626e:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627a:	2301      	movs	r3, #1
 800627c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a3a      	ldr	r2, [pc, #232]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800628a:	f7fb fbed 	bl	8001a68 <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8006290:	e009      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006292:	f7fb fbe9 	bl	8001a68 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d902      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	74fb      	strb	r3, [r7, #19]
        break;
 80062a4:	e005      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80062a6:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ef      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 80062b2:	7cfb      	ldrb	r3, [r7, #19]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d15b      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062b8:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01f      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d019      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062d6:	4b24      	ldr	r3, [pc, #144]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b21      	ldr	r3, [pc, #132]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062f2:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006302:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d016      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fb fba8 	bl	8001a68 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800631a:	e00b      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fb fba4 	bl	8001a68 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d902      	bls.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	74fb      	strb	r3, [r7, #19]
            break;
 8006332:	e006      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0ec      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 8006342:	7cfb      	ldrb	r3, [r7, #19]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006358:	4903      	ldr	r1, [pc, #12]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006360:	e008      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006362:	7cfb      	ldrb	r3, [r7, #19]
 8006364:	74bb      	strb	r3, [r7, #18]
 8006366:	e005      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8006368:	40021000 	.word	0x40021000
 800636c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7cfb      	ldrb	r3, [r7, #19]
 8006372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006374:	7c7b      	ldrb	r3, [r7, #17]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637a:	4b9e      	ldr	r3, [pc, #632]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	4a9d      	ldr	r2, [pc, #628]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006392:	4b98      	ldr	r3, [pc, #608]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	f023 0203 	bic.w	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	4994      	ldr	r1, [pc, #592]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b4:	4b8f      	ldr	r3, [pc, #572]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f023 020c 	bic.w	r2, r3, #12
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	498c      	ldr	r1, [pc, #560]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d6:	4b87      	ldr	r3, [pc, #540]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	4983      	ldr	r1, [pc, #524]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	497b      	ldr	r1, [pc, #492]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800641a:	4b76      	ldr	r3, [pc, #472]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006428:	4972      	ldr	r1, [pc, #456]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800643c:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	496a      	ldr	r1, [pc, #424]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645e:	4b65      	ldr	r3, [pc, #404]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	4961      	ldr	r1, [pc, #388]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006480:	4b5c      	ldr	r3, [pc, #368]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648e:	4959      	ldr	r1, [pc, #356]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064a2:	4b54      	ldr	r3, [pc, #336]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	4950      	ldr	r1, [pc, #320]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064c4:	4b4b      	ldr	r3, [pc, #300]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	4948      	ldr	r1, [pc, #288]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064e6:	4b43      	ldr	r3, [pc, #268]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	493f      	ldr	r1, [pc, #252]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d028      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006508:	4b3a      	ldr	r3, [pc, #232]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006516:	4937      	ldr	r1, [pc, #220]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006528:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a31      	ldr	r2, [pc, #196]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006532:	60d3      	str	r3, [r2, #12]
 8006534:	e011      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800653e:	d10c      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	2101      	movs	r1, #1
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f8c8 	bl	80066dc <RCCEx_PLLSAI1_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006550:	7cfb      	ldrb	r3, [r7, #19]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d028      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006566:	4b23      	ldr	r3, [pc, #140]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006574:	491f      	ldr	r1, [pc, #124]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006584:	d106      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006586:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4a1a      	ldr	r2, [pc, #104]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800658c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006590:	60d3      	str	r3, [r2, #12]
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800659c:	d10c      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2101      	movs	r1, #1
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f899 	bl	80066dc <RCCEx_PLLSAI1_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 80065b4:	7cfb      	ldrb	r3, [r7, #19]
 80065b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d02b      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d2:	4908      	ldr	r1, [pc, #32]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d109      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a02      	ldr	r2, [pc, #8]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]
 80065f0:	e014      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80065f2:	bf00      	nop
 80065f4:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006600:	d10c      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f000 f867 	bl	80066dc <RCCEx_PLLSAI1_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006612:	7cfb      	ldrb	r3, [r7, #19]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02f      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006628:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006636:	4928      	ldr	r1, [pc, #160]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006646:	d10d      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	2102      	movs	r1, #2
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f844 	bl	80066dc <RCCEx_PLLSAI1_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006658:	7cfb      	ldrb	r3, [r7, #19]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d014      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800665e:	7cfb      	ldrb	r3, [r7, #19]
 8006660:	74bb      	strb	r3, [r7, #18]
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3320      	adds	r3, #32
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f923 	bl	80068c0 <RCCEx_PLLSAI2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006694:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a2:	490d      	ldr	r1, [pc, #52]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c6:	4904      	ldr	r1, [pc, #16]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40021000 	.word	0x40021000

080066dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ee:	4b73      	ldr	r3, [pc, #460]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d018      	beq.n	800672c <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066fa:	4b70      	ldr	r3, [pc, #448]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0203 	and.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d10d      	bne.n	8006726 <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
       ||
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006712:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
       ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d044      	beq.n	80067b0 <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
 800672a:	e041      	b.n	80067b0 <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d00c      	beq.n	800674e <RCCEx_PLLSAI1_Config+0x72>
 8006734:	2b03      	cmp	r3, #3
 8006736:	d013      	beq.n	8006760 <RCCEx_PLLSAI1_Config+0x84>
 8006738:	2b01      	cmp	r3, #1
 800673a:	d120      	bne.n	800677e <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800673c:	4b5f      	ldr	r3, [pc, #380]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d11d      	bne.n	8006784 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800674c:	e01a      	b.n	8006784 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800674e:	4b5b      	ldr	r3, [pc, #364]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006756:	2b00      	cmp	r3, #0
 8006758:	d116      	bne.n	8006788 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800675e:	e013      	b.n	8006788 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006760:	4b56      	ldr	r3, [pc, #344]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10f      	bne.n	800678c <RCCEx_PLLSAI1_Config+0xb0>
 800676c:	4b53      	ldr	r3, [pc, #332]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800677c:	e006      	b.n	800678c <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
      break;
 8006782:	e004      	b.n	800678e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <RCCEx_PLLSAI1_Config+0xb2>
      break;
 800678c:	bf00      	nop
    }

    if(status == HAL_OK)
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006794:	4b49      	ldr	r3, [pc, #292]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	430b      	orrs	r3, r1
 80067aa:	4944      	ldr	r1, [pc, #272]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d17d      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067b6:	4b41      	ldr	r3, [pc, #260]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a40      	ldr	r2, [pc, #256]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c2:	f7fb f951 	bl	8001a68 <HAL_GetTick>
 80067c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80067c8:	e009      	b.n	80067de <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ca:	f7fb f94d 	bl	8001a68 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d902      	bls.n	80067de <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	73fb      	strb	r3, [r7, #15]
        break;
 80067dc:	e005      	b.n	80067ea <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80067de:	4b37      	ldr	r3, [pc, #220]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1ef      	bne.n	80067ca <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d160      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d111      	bne.n	800681a <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067f6:	4b31      	ldr	r3, [pc, #196]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6892      	ldr	r2, [r2, #8]
 8006806:	0211      	lsls	r1, r2, #8
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68d2      	ldr	r2, [r2, #12]
 800680c:	0912      	lsrs	r2, r2, #4
 800680e:	0452      	lsls	r2, r2, #17
 8006810:	430a      	orrs	r2, r1
 8006812:	492a      	ldr	r1, [pc, #168]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006814:	4313      	orrs	r3, r2
 8006816:	610b      	str	r3, [r1, #16]
 8006818:	e027      	b.n	800686a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d112      	bne.n	8006846 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006820:	4b26      	ldr	r3, [pc, #152]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006828:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6892      	ldr	r2, [r2, #8]
 8006830:	0211      	lsls	r1, r2, #8
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6912      	ldr	r2, [r2, #16]
 8006836:	0852      	lsrs	r2, r2, #1
 8006838:	3a01      	subs	r2, #1
 800683a:	0552      	lsls	r2, r2, #21
 800683c:	430a      	orrs	r2, r1
 800683e:	491f      	ldr	r1, [pc, #124]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]
 8006844:	e011      	b.n	800686a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006846:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800684e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	0211      	lsls	r1, r2, #8
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6952      	ldr	r2, [r2, #20]
 800685c:	0852      	lsrs	r2, r2, #1
 800685e:	3a01      	subs	r2, #1
 8006860:	0652      	lsls	r2, r2, #25
 8006862:	430a      	orrs	r2, r1
 8006864:	4915      	ldr	r1, [pc, #84]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006866:	4313      	orrs	r3, r2
 8006868:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006876:	f7fb f8f7 	bl	8001a68 <HAL_GetTick>
 800687a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800687c:	e009      	b.n	8006892 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800687e:	f7fb f8f3 	bl	8001a68 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d902      	bls.n	8006892 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	73fb      	strb	r3, [r7, #15]
          break;
 8006890:	e005      	b.n	800689e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ef      	beq.n	800687e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	4903      	ldr	r1, [pc, #12]	; (80068bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40021000 	.word	0x40021000

080068c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068d2:	4b68      	ldr	r3, [pc, #416]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068de:	4b65      	ldr	r3, [pc, #404]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f003 0203 	and.w	r2, r3, #3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d10d      	bne.n	800690a <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
       ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068f6:	4b5f      	ldr	r3, [pc, #380]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	091b      	lsrs	r3, r3, #4
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
       ||
 8006906:	429a      	cmp	r2, r3
 8006908:	d044      	beq.n	8006994 <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
 800690e:	e041      	b.n	8006994 <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d00c      	beq.n	8006932 <RCCEx_PLLSAI2_Config+0x72>
 8006918:	2b03      	cmp	r3, #3
 800691a:	d013      	beq.n	8006944 <RCCEx_PLLSAI2_Config+0x84>
 800691c:	2b01      	cmp	r3, #1
 800691e:	d120      	bne.n	8006962 <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006920:	4b54      	ldr	r3, [pc, #336]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11d      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006930:	e01a      	b.n	8006968 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006932:	4b50      	ldr	r3, [pc, #320]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006942:	e013      	b.n	800696c <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006944:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10f      	bne.n	8006970 <RCCEx_PLLSAI2_Config+0xb0>
 8006950:	4b48      	ldr	r3, [pc, #288]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006960:	e006      	b.n	8006970 <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
      break;
 8006966:	e004      	b.n	8006972 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8006968:	bf00      	nop
 800696a:	e002      	b.n	8006972 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8006970:	bf00      	nop
    }

    if(status == HAL_OK)
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006978:	4b3e      	ldr	r3, [pc, #248]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	3b01      	subs	r3, #1
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	430b      	orrs	r3, r1
 800698e:	4939      	ldr	r1, [pc, #228]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006990:	4313      	orrs	r3, r2
 8006992:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d167      	bne.n	8006a6a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800699a:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a35      	ldr	r2, [pc, #212]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a6:	f7fb f85f 	bl	8001a68 <HAL_GetTick>
 80069aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80069ac:	e009      	b.n	80069c2 <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069ae:	f7fb f85b 	bl	8001a68 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d902      	bls.n	80069c2 <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	73fb      	strb	r3, [r7, #15]
        break;
 80069c0:	e005      	b.n	80069ce <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80069c2:	4b2c      	ldr	r3, [pc, #176]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1ef      	bne.n	80069ae <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d14a      	bne.n	8006a6a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d111      	bne.n	80069fe <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069da:	4b26      	ldr	r3, [pc, #152]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	0211      	lsls	r1, r2, #8
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68d2      	ldr	r2, [r2, #12]
 80069f0:	0912      	lsrs	r2, r2, #4
 80069f2:	0452      	lsls	r2, r2, #17
 80069f4:	430a      	orrs	r2, r1
 80069f6:	491f      	ldr	r1, [pc, #124]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	614b      	str	r3, [r1, #20]
 80069fc:	e011      	b.n	8006a22 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6892      	ldr	r2, [r2, #8]
 8006a0e:	0211      	lsls	r1, r2, #8
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6912      	ldr	r2, [r2, #16]
 8006a14:	0852      	lsrs	r2, r2, #1
 8006a16:	3a01      	subs	r2, #1
 8006a18:	0652      	lsls	r2, r2, #25
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	4915      	ldr	r1, [pc, #84]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a22:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2e:	f7fb f81b 	bl	8001a68 <HAL_GetTick>
 8006a32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8006a34:	e009      	b.n	8006a4a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a36:	f7fb f817 	bl	8001a68 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d902      	bls.n	8006a4a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	73fb      	strb	r3, [r7, #15]
          break;
 8006a48:	e005      	b.n	8006a56 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0ef      	beq.n	8006a36 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	4903      	ldr	r1, [pc, #12]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40021000 	.word	0x40021000

08006a78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d06f      	beq.n	8006b6a <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fdbc 	bl	800161c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	22ca      	movs	r2, #202	; 0xca
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2253      	movs	r2, #83	; 0x53
 8006aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa4c 	bl	8006f5a <RTC_EnterInitMode>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d14e      	bne.n	8006b6a <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ade:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6899      	ldr	r1, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68d2      	ldr	r2, [r2, #12]
 8006b06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6919      	ldr	r1, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	041a      	lsls	r2, r3, #16
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa4f 	bl	8006fc0 <RTC_ExitInitMode>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11e      	bne.n	8006b6a <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0203 	bic.w	r2, r2, #3
 8006b3a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	22ff      	movs	r2, #255	; 0xff
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_RTC_SetTime+0x1a>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e08b      	b.n	8006ca6 <HAL_RTC_SetTime+0x132>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	22ca      	movs	r2, #202	; 0xca
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2253      	movs	r2, #83	; 0x53
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f9d3 	bl	8006f5a <RTC_EnterInitMode>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d163      	bne.n	8006c86 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d126      	bne.n	8006c12 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fa2d 	bl	800703c <RTC_ByteToBcd2>
 8006be2:	4603      	mov	r3, r0
 8006be4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fa26 	bl	800703c <RTC_ByteToBcd2>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006bf4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	789b      	ldrb	r3, [r3, #2]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fa1e 	bl	800703c <RTC_ByteToBcd2>
 8006c00:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c02:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	78db      	ldrb	r3, [r3, #3]
 8006c0a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e018      	b.n	8006c44 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c32:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c38:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	78db      	ldrb	r3, [r3, #3]
 8006c3e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6899      	ldr	r1, [r3, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f99f 	bl	8006fc0 <RTC_ExitInitMode>
 8006c82:	4603      	mov	r3, r0
 8006c84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006c8e:	7cfb      	ldrb	r3, [r7, #19]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006ca4:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd90      	pop	{r4, r7, pc}

08006cae <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	0d9b      	lsrs	r3, r3, #22
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11a      	bne.n	8006d5c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f9a6 	bl	800707c <RTC_Bcd2ToByte>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 f99d 	bl	800707c <RTC_Bcd2ToByte>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	789b      	ldrb	r3, [r3, #2]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 f994 	bl	800707c <RTC_Bcd2ToByte>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d66:	b590      	push	{r4, r7, lr}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_RTC_SetDate+0x1a>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e075      	b.n	8006e6c <HAL_RTC_SetDate+0x106>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10e      	bne.n	8006db4 <HAL_RTC_SetDate+0x4e>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	f023 0310 	bic.w	r3, r3, #16
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	330a      	adds	r3, #10
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d11c      	bne.n	8006df4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f93c 	bl	800703c <RTC_ByteToBcd2>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 f935 	bl	800703c <RTC_ByteToBcd2>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006dd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f92d 	bl	800703c <RTC_ByteToBcd2>
 8006de2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006de4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	e00e      	b.n	8006e12 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e00:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006e06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	22ca      	movs	r2, #202	; 0xca
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2253      	movs	r2, #83	; 0x53
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 f899 	bl	8006f5a <RTC_EnterInitMode>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006e2c:	7cfb      	ldrb	r3, [r7, #19]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10c      	bne.n	8006e4c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f8bc 	bl	8006fc0 <RTC_ExitInitMode>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006e6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}

08006e74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	0b5b      	lsrs	r3, r3, #13
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11a      	bne.n	8006f04 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	78db      	ldrb	r3, [r3, #3]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f8d2 	bl	800707c <RTC_Bcd2ToByte>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f8c9 	bl	800707c <RTC_Bcd2ToByte>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	789b      	ldrb	r3, [r3, #2]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f8c0 	bl	800707c <RTC_Bcd2ToByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f24:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006f26:	f7fa fd9f 	bl	8001a68 <HAL_GetTick>
 8006f2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f2c:	e009      	b.n	8006f42 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f2e:	f7fa fd9b 	bl	8001a68 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3c:	d901      	bls.n	8006f42 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e007      	b.n	8006f52 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0ee      	beq.n	8006f2e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d120      	bne.n	8006fb6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006f7e:	f7fa fd73 	bl	8001a68 <HAL_GetTick>
 8006f82:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f84:	e00d      	b.n	8006fa2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f86:	f7fa fd6f 	bl	8001a68 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f94:	d905      	bls.n	8006fa2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <RTC_EnterInitMode+0x5c>
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d1e7      	bne.n	8006f86 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <RTC_ExitInitMode+0x78>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4a19      	ldr	r2, [pc, #100]	; (8007038 <RTC_ExitInitMode+0x78>)
 8006fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fd8:	4b17      	ldr	r3, [pc, #92]	; (8007038 <RTC_ExitInitMode+0x78>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10c      	bne.n	8006ffe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff92 	bl	8006f0e <HAL_RTC_WaitForSynchro>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01e      	beq.n	800702e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	e017      	b.n	800702e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <RTC_ExitInitMode+0x78>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	4a0d      	ldr	r2, [pc, #52]	; (8007038 <RTC_ExitInitMode+0x78>)
 8007004:	f023 0320 	bic.w	r3, r3, #32
 8007008:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff ff7f 	bl	8006f0e <HAL_RTC_WaitForSynchro>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2203      	movs	r2, #3
 800701a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <RTC_ExitInitMode+0x78>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <RTC_ExitInitMode+0x78>)
 8007028:	f043 0320 	orr.w	r3, r3, #32
 800702c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40002800 	.word	0x40002800

0800703c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800704e:	e005      	b.n	800705c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	3b0a      	subs	r3, #10
 800705a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	2b09      	cmp	r3, #9
 8007060:	d8f6      	bhi.n	8007050 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	b2da      	uxtb	r2, r3
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	4313      	orrs	r3, r2
 800706e:	b2db      	uxtb	r3, r3
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	b2db      	uxtb	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	0092      	lsls	r2, r2, #2
 8007090:	4413      	add	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	b2da      	uxtb	r2, r3
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4413      	add	r3, r2
 80070a2:	b2db      	uxtb	r3, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e07f      	b.n	80071ca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	22ca      	movs	r2, #202	; 0xca
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2253      	movs	r2, #83	; 0x53
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800710a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d120      	bne.n	800715c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800711a:	f7fa fca5 	bl	8001a68 <HAL_GetTick>
 800711e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007120:	e015      	b.n	800714e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007122:	f7fa fca1 	bl	8001a68 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007130:	d90d      	bls.n	800714e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	22ff      	movs	r2, #255	; 0xff
 8007138:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e03d      	b.n	80071ca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0e2      	beq.n	8007122 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f023 0107 	bic.w	r1, r3, #7
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	430a      	orrs	r2, r1
 8007176:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007178:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800717e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007182:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007184:	4b13      	ldr	r3, [pc, #76]	; (80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4a12      	ldr	r2, [pc, #72]	; (80071d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800718a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800718e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40010400 	.word	0x40010400

080071d8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e04d      	b.n	800728a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	22ca      	movs	r2, #202	; 0xca
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2253      	movs	r2, #83	; 0x53
 800720c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800722c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800722e:	f7fa fc1b 	bl	8001a68 <HAL_GetTick>
 8007232:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007234:	e015      	b.n	8007262 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007236:	f7fa fc17 	bl	8001a68 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007244:	d90d      	bls.n	8007262 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	22ff      	movs	r2, #255	; 0xff
 800724c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2203      	movs	r2, #3
 8007252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e013      	b.n	800728a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0e2      	beq.n	8007236 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e07c      	b.n	800739e <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa f96a 	bl	8001598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072e4:	d902      	bls.n	80072ec <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e002      	b.n	80072f2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80072fa:	d007      	beq.n	800730c <HAL_SPI_Init+0x7a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007304:	d002      	beq.n	800730c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800731c:	d903      	bls.n	8007326 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
 8007324:	e002      	b.n	800732c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	ea42 0103 	orr.w	r1, r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f003 0204 	and.w	r2, r3, #4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	ea42 0103 	orr.w	r1, r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08a      	sub	sp, #40	; 0x28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x32>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e1de      	b.n	8007796 <HAL_SPI_TransmitReceive+0x3f0>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e0:	f7fa fb42 	bl	8001a68 <HAL_GetTick>
 80073e4:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d00e      	beq.n	800741a <HAL_SPI_TransmitReceive+0x74>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007402:	d106      	bne.n	8007412 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <HAL_SPI_TransmitReceive+0x6c>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b04      	cmp	r3, #4
 8007410:	d003      	beq.n	800741a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8007412:	2302      	movs	r3, #2
 8007414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007418:	e1b3      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_SPI_TransmitReceive+0x86>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SPI_TransmitReceive+0x86>
 8007426:	887b      	ldrh	r3, [r7, #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007432:	e1a6      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3dc>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b04      	cmp	r3, #4
 800743e:	d003      	beq.n	8007448 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2205      	movs	r2, #5
 8007444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	887a      	ldrh	r2, [r7, #2]
 8007458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	887a      	ldrh	r2, [r7, #2]
 8007460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	887a      	ldrh	r2, [r7, #2]
 800746e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	887a      	ldrh	r2, [r7, #2]
 8007474:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800748a:	d805      	bhi.n	8007498 <HAL_SPI_TransmitReceive+0xf2>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d908      	bls.n	80074aa <HAL_SPI_TransmitReceive+0x104>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	e007      	b.n	80074ba <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	d007      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074e0:	d975      	bls.n	80075ce <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x14e>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d160      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	881a      	ldrh	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	3302      	adds	r3, #2
 8007502:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007512:	e050      	b.n	80075b6 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01c      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x1ae>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d017      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x1ae>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b02      	cmp	r3, #2
 8007530:	d110      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	881a      	ldrh	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	3302      	adds	r3, #2
 8007540:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x1f0>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d113      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3302      	adds	r3, #2
 800757e:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007592:	2301      	movs	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d00b      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x210>
 800759e:	f7fa fa63 	bl	8001a68 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d803      	bhi.n	80075b6 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80075b4:	e0e5      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1a9      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x16e>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1a3      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x16e>
 80075cc:	e0c9      	b.n	8007762 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_SPI_TransmitReceive+0x23c>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 80b3 	bne.w	8007748 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d90f      	bls.n	800760c <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	3302      	adds	r3, #2
 80075fa:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b02      	subs	r3, #2
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760a:	e09d      	b.n	8007748 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	60ba      	str	r2, [r7, #8]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	320c      	adds	r2, #12
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800762a:	e08d      	b.n	8007748 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d031      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x2f0>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02c      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x2f0>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b02      	cmp	r3, #2
 8007648:	d125      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d90f      	bls.n	8007674 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3302      	adds	r3, #2
 8007662:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b02      	subs	r3, #2
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007672:	e00e      	b.n	8007692 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	60ba      	str	r2, [r7, #8]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	320c      	adds	r2, #12
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d042      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x382>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d13b      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d920      	bls.n	80076fe <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3302      	adds	r3, #2
 80076cc:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b02      	subs	r3, #2
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d81b      	bhi.n	8007724 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	e012      	b.n	8007724 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f103 020c 	add.w	r2, r3, #12
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	1c59      	adds	r1, r3, #1
 800770a:	6079      	str	r1, [r7, #4]
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d00b      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x3a2>
 8007730:	f7fa f99a 	bl	8001a68 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773c:	429a      	cmp	r2, r3
 800773e:	d803      	bhi.n	8007748 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007746:	e01c      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	f47f af6c 	bne.w	800762c <HAL_SPI_TransmitReceive+0x286>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	f47f af65 	bne.w	800762c <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8f1 	bl	800794e <SPI_EndRxTxTransaction>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d006      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x3da>
  {
    errorcode = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
 800777e:	e000      	b.n	8007782 <HAL_SPI_TransmitReceive+0x3dc>
  }

error :
 8007780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007796:	4618      	mov	r0, r3
 8007798:	3728      	adds	r7, #40	; 0x28
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ac:	e04c      	b.n	8007848 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d048      	beq.n	8007848 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80077bc:	f7fa f954 	bl	8001a68 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d83d      	bhi.n	8007848 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e4:	d111      	bne.n	800780a <SPI_WaitFlagStateUntilTimeout+0x6c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ee:	d004      	beq.n	80077fa <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f8:	d107      	bne.n	800780a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007812:	d10f      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e00e      	b.n	8007866 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4013      	ands	r3, r2
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d101      	bne.n	800785c <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007858:	2201      	movs	r2, #1
 800785a:	e000      	b.n	800785e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800785c:	2200      	movs	r2, #0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d1a4      	bne.n	80077ae <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800787c:	e05a      	b.n	8007934 <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007884:	d109      	bne.n	800789a <SPI_WaitFifoStateUntilTimeout+0x2c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007898:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d048      	beq.n	8007934 <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80078a8:	f7fa f8de 	bl	8001a68 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d83d      	bhi.n	8007934 <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d0:	d111      	bne.n	80078f6 <SPI_WaitFifoStateUntilTimeout+0x88>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078da:	d004      	beq.n	80078e6 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d107      	bne.n	80078f6 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078fe:	d10f      	bne.n	8007920 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800791e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e008      	b.n	8007946 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d19c      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af02      	add	r7, sp, #8
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff ff81 	bl	800786e <SPI_WaitFifoStateUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e027      	b.n	80079d2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2200      	movs	r2, #0
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff ff06 	bl	800779e <SPI_WaitFlagStateUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	f043 0220 	orr.w	r2, r3, #32
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e014      	b.n	80079d2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff ff5a 	bl	800786e <SPI_WaitFifoStateUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c4:	f043 0220 	orr.w	r2, r3, #32
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e000      	b.n	80079d2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e01d      	b.n	8007a28 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fcbd 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f000 fa55 	bl	8007ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <HAL_TIM_Base_Start+0x54>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d00f      	beq.n	8007a6e <HAL_TIM_Base_Start+0x3e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <HAL_TIM_Base_Start+0x54>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a5c:	d007      	beq.n	8007a6e <HAL_TIM_Base_Start+0x3e>
  {
    __HAL_TIM_ENABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	00010007 	.word	0x00010007

08007a88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e01d      	b.n	8007ad6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f815 	bl	8007ade <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f000 f9fe 	bl	8007ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
	...

08007af4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d841      	bhi.n	8007b88 <HAL_TIM_OC_Start_IT+0x94>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <HAL_TIM_OC_Start_IT+0x18>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b41 	.word	0x08007b41
 8007b10:	08007b89 	.word	0x08007b89
 8007b14:	08007b89 	.word	0x08007b89
 8007b18:	08007b89 	.word	0x08007b89
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b89 	.word	0x08007b89
 8007b24:	08007b89 	.word	0x08007b89
 8007b28:	08007b89 	.word	0x08007b89
 8007b2c:	08007b65 	.word	0x08007b65
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007b89 	.word	0x08007b89
 8007b3c:	08007b77 	.word	0x08007b77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0202 	orr.w	r2, r2, #2
 8007b4e:	60da      	str	r2, [r3, #12]
      break;
 8007b50:	e01b      	b.n	8007b8a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0204 	orr.w	r2, r2, #4
 8007b60:	60da      	str	r2, [r3, #12]
      break;
 8007b62:	e012      	b.n	8007b8a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0208 	orr.w	r2, r2, #8
 8007b72:	60da      	str	r2, [r3, #12]
      break;
 8007b74:	e009      	b.n	8007b8a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0210 	orr.w	r2, r2, #16
 8007b84:	60da      	str	r2, [r3, #12]
      break;
 8007b86:	e000      	b.n	8007b8a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8007b88:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fda2 	bl	80086dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <HAL_TIM_OC_Start_IT+0x128>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <HAL_TIM_OC_Start_IT+0xd6>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <HAL_TIM_OC_Start_IT+0x12c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00e      	beq.n	8007bca <HAL_TIM_OC_Start_IT+0xd6>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	; (8007c24 <HAL_TIM_OC_Start_IT+0x130>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <HAL_TIM_OC_Start_IT+0xd6>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <HAL_TIM_OC_Start_IT+0x134>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <HAL_TIM_OC_Start_IT+0xd6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <HAL_TIM_OC_Start_IT+0x138>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d101      	bne.n	8007bce <HAL_TIM_OC_Start_IT+0xda>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <HAL_TIM_OC_Start_IT+0xdc>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <HAL_TIM_OC_Start_IT+0x13c>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	d00f      	beq.n	8007c12 <HAL_TIM_OC_Start_IT+0x11e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <HAL_TIM_OC_Start_IT+0x13c>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d007      	beq.n	8007c12 <HAL_TIM_OC_Start_IT+0x11e>
  {
    __HAL_TIM_ENABLE(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	40012c00 	.word	0x40012c00
 8007c20:	40013400 	.word	0x40013400
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	00010007 	.word	0x00010007

08007c34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_OC_ConfigChannel+0x1a>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e06c      	b.n	8007d28 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b14      	cmp	r3, #20
 8007c62:	d857      	bhi.n	8007d14 <HAL_TIM_OC_ConfigChannel+0xe0>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <HAL_TIM_OC_ConfigChannel+0x38>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007cc1 	.word	0x08007cc1
 8007c70:	08007d15 	.word	0x08007d15
 8007c74:	08007d15 	.word	0x08007d15
 8007c78:	08007d15 	.word	0x08007d15
 8007c7c:	08007ccf 	.word	0x08007ccf
 8007c80:	08007d15 	.word	0x08007d15
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007cdd 	.word	0x08007cdd
 8007c90:	08007d15 	.word	0x08007d15
 8007c94:	08007d15 	.word	0x08007d15
 8007c98:	08007d15 	.word	0x08007d15
 8007c9c:	08007ceb 	.word	0x08007ceb
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007d15 	.word	0x08007d15
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007cf9 	.word	0x08007cf9
 8007cb0:	08007d15 	.word	0x08007d15
 8007cb4:	08007d15 	.word	0x08007d15
 8007cb8:	08007d15 	.word	0x08007d15
 8007cbc:	08007d07 	.word	0x08007d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68b9      	ldr	r1, [r7, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f998 	bl	8007ffc <TIM_OC1_SetConfig>
      break;
 8007ccc:	e023      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fa21 	bl	800811c <TIM_OC2_SetConfig>
      break;
 8007cda:	e01c      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 faa4 	bl	8008230 <TIM_OC3_SetConfig>
      break;
 8007ce8:	e015      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fb25 	bl	8008340 <TIM_OC4_SetConfig>
      break;
 8007cf6:	e00e      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fb88 	bl	8008414 <TIM_OC5_SetConfig>
      break;
 8007d04:	e007      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fbe5 	bl	80084dc <TIM_OC6_SetConfig>
      break;
 8007d12:	e000      	b.n	8007d16 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8007d14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x18>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e0ba      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x18e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b40      	cmp	r3, #64	; 0x40
 8007d82:	d07a      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x14a>
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d80d      	bhi.n	8007da4 <HAL_TIM_ConfigClockSource+0x74>
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	f000 8086 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x16a>
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d803      	bhi.n	8007d9a <HAL_TIM_ConfigClockSource+0x6a>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8081 	beq.w	8007e9a <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d98:	e088      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d07d      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x16a>
 8007d9e:	2b30      	cmp	r3, #48	; 0x30
 8007da0:	d07b      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8007da2:	e083      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007da4:	2b70      	cmp	r3, #112	; 0x70
 8007da6:	d018      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0xaa>
 8007da8:	2b70      	cmp	r3, #112	; 0x70
 8007daa:	d804      	bhi.n	8007db6 <HAL_TIM_ConfigClockSource+0x86>
 8007dac:	2b50      	cmp	r3, #80	; 0x50
 8007dae:	d044      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x10a>
 8007db0:	2b60      	cmp	r3, #96	; 0x60
 8007db2:	d052      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8007db4:	e07a      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dba:	d003      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x94>
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc0:	d028      	beq.n	8007e14 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007dc2:	e073      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	6093      	str	r3, [r2, #8]
      break;
 8007dd8:	e068      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6899      	ldr	r1, [r3, #8]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f000 fc57 	bl	800869c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	609a      	str	r2, [r3, #8]
      break;
 8007e12:	e04b      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6899      	ldr	r1, [r3, #8]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f000 fc3a 	bl	800869c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e36:	609a      	str	r2, [r3, #8]
      break;
 8007e38:	e038      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 fbae 	bl	80085a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2150      	movs	r1, #80	; 0x50
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fc07 	bl	8008666 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e028      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 fbcd 	bl	8008606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2160      	movs	r1, #96	; 0x60
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fbf7 	bl	8008666 <TIM_ITRx_SetConfig>
      break;
 8007e78:	e018      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 fb8e 	bl	80085a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fbe7 	bl	8008666 <TIM_ITRx_SetConfig>
      break;
 8007e98:	e008      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 fbde 	bl	8008666 <TIM_ITRx_SetConfig>
      break;
 8007eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a40      	ldr	r2, [pc, #256]	; (8007fdc <TIM_Base_SetConfig+0x114>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <TIM_Base_SetConfig+0x40>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee6:	d00f      	beq.n	8007f08 <TIM_Base_SetConfig+0x40>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a3d      	ldr	r2, [pc, #244]	; (8007fe0 <TIM_Base_SetConfig+0x118>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <TIM_Base_SetConfig+0x40>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a3c      	ldr	r2, [pc, #240]	; (8007fe4 <TIM_Base_SetConfig+0x11c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a3b      	ldr	r2, [pc, #236]	; (8007fe8 <TIM_Base_SetConfig+0x120>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a3a      	ldr	r2, [pc, #232]	; (8007fec <TIM_Base_SetConfig+0x124>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d108      	bne.n	8007f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a2f      	ldr	r2, [pc, #188]	; (8007fdc <TIM_Base_SetConfig+0x114>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d01f      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f28:	d01b      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <TIM_Base_SetConfig+0x118>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d017      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <TIM_Base_SetConfig+0x11c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2a      	ldr	r2, [pc, #168]	; (8007fe8 <TIM_Base_SetConfig+0x120>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00f      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a29      	ldr	r2, [pc, #164]	; (8007fec <TIM_Base_SetConfig+0x124>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a28      	ldr	r2, [pc, #160]	; (8007ff0 <TIM_Base_SetConfig+0x128>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d007      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <TIM_Base_SetConfig+0x12c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_Base_SetConfig+0x9a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <TIM_Base_SetConfig+0x130>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d108      	bne.n	8007f74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <TIM_Base_SetConfig+0x114>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00f      	beq.n	8007fc0 <TIM_Base_SetConfig+0xf8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <TIM_Base_SetConfig+0x124>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <TIM_Base_SetConfig+0xf8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <TIM_Base_SetConfig+0x128>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d007      	beq.n	8007fc0 <TIM_Base_SetConfig+0xf8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a10      	ldr	r2, [pc, #64]	; (8007ff4 <TIM_Base_SetConfig+0x12c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_Base_SetConfig+0xf8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a0f      	ldr	r2, [pc, #60]	; (8007ff8 <TIM_Base_SetConfig+0x130>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d103      	bne.n	8007fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	615a      	str	r2, [r3, #20]
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	40012c00 	.word	0x40012c00
 8007fe0:	40000400 	.word	0x40000400
 8007fe4:	40000800 	.word	0x40000800
 8007fe8:	40000c00 	.word	0x40000c00
 8007fec:	40013400 	.word	0x40013400
 8007ff0:	40014000 	.word	0x40014000
 8007ff4:	40014400 	.word	0x40014400
 8007ff8:	40014800 	.word	0x40014800

08007ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0303 	bic.w	r3, r3, #3
 8008036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 0302 	bic.w	r3, r3, #2
 8008048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a2c      	ldr	r2, [pc, #176]	; (8008108 <TIM_OC1_SetConfig+0x10c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00f      	beq.n	800807c <TIM_OC1_SetConfig+0x80>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a2b      	ldr	r2, [pc, #172]	; (800810c <TIM_OC1_SetConfig+0x110>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_OC1_SetConfig+0x80>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <TIM_OC1_SetConfig+0x114>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d007      	beq.n	800807c <TIM_OC1_SetConfig+0x80>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a29      	ldr	r2, [pc, #164]	; (8008114 <TIM_OC1_SetConfig+0x118>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_OC1_SetConfig+0x80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a28      	ldr	r2, [pc, #160]	; (8008118 <TIM_OC1_SetConfig+0x11c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d10c      	bne.n	8008096 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f023 0308 	bic.w	r3, r3, #8
 8008082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f023 0304 	bic.w	r3, r3, #4
 8008094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <TIM_OC1_SetConfig+0x10c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00f      	beq.n	80080be <TIM_OC1_SetConfig+0xc2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a1a      	ldr	r2, [pc, #104]	; (800810c <TIM_OC1_SetConfig+0x110>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00b      	beq.n	80080be <TIM_OC1_SetConfig+0xc2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a19      	ldr	r2, [pc, #100]	; (8008110 <TIM_OC1_SetConfig+0x114>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d007      	beq.n	80080be <TIM_OC1_SetConfig+0xc2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a18      	ldr	r2, [pc, #96]	; (8008114 <TIM_OC1_SetConfig+0x118>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d003      	beq.n	80080be <TIM_OC1_SetConfig+0xc2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a17      	ldr	r2, [pc, #92]	; (8008118 <TIM_OC1_SetConfig+0x11c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d111      	bne.n	80080e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	621a      	str	r2, [r3, #32]
}
 80080fc:	bf00      	nop
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	40012c00 	.word	0x40012c00
 800810c:	40013400 	.word	0x40013400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0210 	bic.w	r2, r3, #16
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800814a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f023 0320 	bic.w	r3, r3, #32
 800816a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a28      	ldr	r2, [pc, #160]	; (800821c <TIM_OC2_SetConfig+0x100>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d003      	beq.n	8008188 <TIM_OC2_SetConfig+0x6c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a27      	ldr	r2, [pc, #156]	; (8008220 <TIM_OC2_SetConfig+0x104>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d10d      	bne.n	80081a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800818e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a1d      	ldr	r2, [pc, #116]	; (800821c <TIM_OC2_SetConfig+0x100>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00f      	beq.n	80081cc <TIM_OC2_SetConfig+0xb0>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <TIM_OC2_SetConfig+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00b      	beq.n	80081cc <TIM_OC2_SetConfig+0xb0>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <TIM_OC2_SetConfig+0x108>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d007      	beq.n	80081cc <TIM_OC2_SetConfig+0xb0>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1a      	ldr	r2, [pc, #104]	; (8008228 <TIM_OC2_SetConfig+0x10c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC2_SetConfig+0xb0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a19      	ldr	r2, [pc, #100]	; (800822c <TIM_OC2_SetConfig+0x110>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d113      	bne.n	80081f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	621a      	str	r2, [r3, #32]
}
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40012c00 	.word	0x40012c00
 8008220:	40013400 	.word	0x40013400
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400
 800822c:	40014800 	.word	0x40014800

08008230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a27      	ldr	r2, [pc, #156]	; (800832c <TIM_OC3_SetConfig+0xfc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC3_SetConfig+0x6a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a26      	ldr	r2, [pc, #152]	; (8008330 <TIM_OC3_SetConfig+0x100>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d10d      	bne.n	80082b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1c      	ldr	r2, [pc, #112]	; (800832c <TIM_OC3_SetConfig+0xfc>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00f      	beq.n	80082de <TIM_OC3_SetConfig+0xae>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <TIM_OC3_SetConfig+0x100>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00b      	beq.n	80082de <TIM_OC3_SetConfig+0xae>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <TIM_OC3_SetConfig+0x104>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d007      	beq.n	80082de <TIM_OC3_SetConfig+0xae>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a19      	ldr	r2, [pc, #100]	; (8008338 <TIM_OC3_SetConfig+0x108>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d003      	beq.n	80082de <TIM_OC3_SetConfig+0xae>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a18      	ldr	r2, [pc, #96]	; (800833c <TIM_OC3_SetConfig+0x10c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d113      	bne.n	8008306 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	621a      	str	r2, [r3, #32]
}
 8008320:	bf00      	nop
 8008322:	371c      	adds	r7, #28
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	40012c00 	.word	0x40012c00
 8008330:	40013400 	.word	0x40013400
 8008334:	40014000 	.word	0x40014000
 8008338:	40014400 	.word	0x40014400
 800833c:	40014800 	.word	0x40014800

08008340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800838e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	031b      	lsls	r3, r3, #12
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <TIM_OC4_SetConfig+0xc0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00f      	beq.n	80083c4 <TIM_OC4_SetConfig+0x84>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a17      	ldr	r2, [pc, #92]	; (8008404 <TIM_OC4_SetConfig+0xc4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00b      	beq.n	80083c4 <TIM_OC4_SetConfig+0x84>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_OC4_SetConfig+0xc8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d007      	beq.n	80083c4 <TIM_OC4_SetConfig+0x84>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a15      	ldr	r2, [pc, #84]	; (800840c <TIM_OC4_SetConfig+0xcc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d003      	beq.n	80083c4 <TIM_OC4_SetConfig+0x84>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a14      	ldr	r2, [pc, #80]	; (8008410 <TIM_OC4_SetConfig+0xd0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d109      	bne.n	80083d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	019b      	lsls	r3, r3, #6
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40012c00 	.word	0x40012c00
 8008404:	40013400 	.word	0x40013400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800

08008414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <TIM_OC5_SetConfig+0xb4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00f      	beq.n	800848e <TIM_OC5_SetConfig+0x7a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <TIM_OC5_SetConfig+0xb8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d00b      	beq.n	800848e <TIM_OC5_SetConfig+0x7a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a15      	ldr	r2, [pc, #84]	; (80084d0 <TIM_OC5_SetConfig+0xbc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <TIM_OC5_SetConfig+0x7a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <TIM_OC5_SetConfig+0xc0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_OC5_SetConfig+0x7a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a13      	ldr	r2, [pc, #76]	; (80084d8 <TIM_OC5_SetConfig+0xc4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d109      	bne.n	80084a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	621a      	str	r2, [r3, #32]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40013400 	.word	0x40013400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800

080084dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800850a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	051b      	lsls	r3, r3, #20
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <TIM_OC6_SetConfig+0xb8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00f      	beq.n	8008558 <TIM_OC6_SetConfig+0x7c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a17      	ldr	r2, [pc, #92]	; (8008598 <TIM_OC6_SetConfig+0xbc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00b      	beq.n	8008558 <TIM_OC6_SetConfig+0x7c>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a16      	ldr	r2, [pc, #88]	; (800859c <TIM_OC6_SetConfig+0xc0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_OC6_SetConfig+0x7c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <TIM_OC6_SetConfig+0xc4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC6_SetConfig+0x7c>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a14      	ldr	r2, [pc, #80]	; (80085a4 <TIM_OC6_SetConfig+0xc8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d109      	bne.n	800856c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	029b      	lsls	r3, r3, #10
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	621a      	str	r2, [r3, #32]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40012c00 	.word	0x40012c00
 8008598:	40013400 	.word	0x40013400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	f023 0201 	bic.w	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f023 030a 	bic.w	r3, r3, #10
 80085e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0210 	bic.w	r2, r3, #16
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	031b      	lsls	r3, r3, #12
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	011b      	lsls	r3, r3, #4
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	f043 0307 	orr.w	r3, r3, #7
 8008688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	609a      	str	r2, [r3, #8]
}
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	021a      	lsls	r2, r3, #8
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	431a      	orrs	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	609a      	str	r2, [r3, #8]
}
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f003 031f 	and.w	r3, r3, #31
 80086ee:	2201      	movs	r2, #1
 80086f0:	fa02 f303 	lsl.w	r3, r2, r3
 80086f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1a      	ldr	r2, [r3, #32]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	43db      	mvns	r3, r3
 80086fe:	401a      	ands	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 031f 	and.w	r3, r3, #31
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	fa01 f303 	lsl.w	r3, r1, r3
 8008714:	431a      	orrs	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
	...

08008728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800873c:	2302      	movs	r3, #2
 800873e:	e045      	b.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d108      	bne.n	8008786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800877a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800879e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40013400 	.word	0x40013400

080087e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e043      	b.n	800887a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f8 fe20 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2224      	movs	r2, #36	; 0x24
 8008810:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc09 	bl	800903c <UART_SetConfig>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e022      	b.n	800887a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 ff49 	bl	80096d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008850:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008860:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0201 	orr.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 ffd0 	bl	8009818 <UART_CheckIdleState>
 8008878:	4603      	mov	r3, r0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e02a      	b.n	80088ea <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2224      	movs	r2, #36	; 0x24
 8008898:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2200      	movs	r2, #0
 80088c2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7f8 fe31 	bl	800152c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b088      	sub	sp, #32
 80088f6:	af02      	add	r7, sp, #8
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	4613      	mov	r3, r2
 8008900:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b20      	cmp	r3, #32
 8008910:	d177      	bne.n	8008a02 <HAL_UART_Transmit+0x110>
  {
    if ((pData == NULL) || (Size == 0U))
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <HAL_UART_Transmit+0x2c>
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e070      	b.n	8008a04 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_UART_Transmit+0x3e>
 800892c:	2302      	movs	r3, #2
 800892e:	e069      	b.n	8008a04 <HAL_UART_Transmit+0x112>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	675a      	str	r2, [r3, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2221      	movs	r2, #33	; 0x21
 8008942:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008946:	f7f9 f88f 	bl	8001a68 <HAL_GetTick>
 800894a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	88fa      	ldrh	r2, [r7, #6]
 8008950:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	88fa      	ldrh	r2, [r7, #6]
 8008958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    while (huart->TxXferCount > 0U)
 800895c:	e034      	b.n	80089c8 <HAL_UART_Transmit+0xd6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	2180      	movs	r1, #128	; 0x80
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 ff9e 	bl	80098aa <UART_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_UART_Transmit+0x86>
      {
        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e045      	b.n	8008a04 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008980:	d111      	bne.n	80089a6 <HAL_UART_Transmit+0xb4>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10d      	bne.n	80089a6 <HAL_UART_Transmit+0xb4>
      {
        tmp = (uint16_t *) pData;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800899a:	b292      	uxth	r2, r2
 800899c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3302      	adds	r3, #2
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	e007      	b.n	80089b6 <HAL_UART_Transmit+0xc4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	60ba      	str	r2, [r7, #8]
 80089ac:	781a      	ldrb	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	b292      	uxth	r2, r2
 80089b4:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1c4      	bne.n	800895e <HAL_UART_Transmit+0x6c>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2200      	movs	r2, #0
 80089dc:	2140      	movs	r1, #64	; 0x40
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 ff63 	bl	80098aa <UART_WaitOnFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e00a      	b.n	8008a04 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	e000      	b.n	8008a04 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008a02:	2302      	movs	r3, #2
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	f040 80ad 	bne.w	8008b88 <HAL_UART_Receive+0x17c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <HAL_UART_Receive+0x2e>
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e0a5      	b.n	8008b8a <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_UART_Receive+0x40>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e09e      	b.n	8008b8a <HAL_UART_Receive+0x17e>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2222      	movs	r2, #34	; 0x22
 8008a5e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008a62:	f7f9 f801 	bl	8001a68 <HAL_GetTick>
 8008a66:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize  = Size;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	88fa      	ldrh	r2, [r7, #6]
 8008a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a80:	d10e      	bne.n	8008aa0 <HAL_UART_Receive+0x94>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d105      	bne.n	8008a96 <HAL_UART_Receive+0x8a>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a94:	e028      	b.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	22ff      	movs	r2, #255	; 0xff
 8008a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a9e:	e023      	b.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10d      	bne.n	8008ac4 <HAL_UART_Receive+0xb8>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <HAL_UART_Receive+0xae>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	22ff      	movs	r2, #255	; 0xff
 8008ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ab8:	e016      	b.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	227f      	movs	r2, #127	; 0x7f
 8008abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ac2:	e011      	b.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008acc:	d10c      	bne.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <HAL_UART_Receive+0xd4>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	227f      	movs	r2, #127	; 0x7f
 8008ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ade:	e003      	b.n	8008ae8 <HAL_UART_Receive+0xdc>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	223f      	movs	r2, #63	; 0x3f
 8008ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aee:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008af0:	e03a      	b.n	8008b68 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2120      	movs	r1, #32
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fed4 	bl	80098aa <UART_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <HAL_UART_Receive+0x100>
      {
        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e03e      	b.n	8008b8a <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b14:	d112      	bne.n	8008b3c <HAL_UART_Receive+0x130>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10e      	bne.n	8008b3c <HAL_UART_Receive+0x130>
      {
        tmp = (uint16_t *) pData ;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	8b7b      	ldrh	r3, [r7, #26]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	801a      	strh	r2, [r3, #0]
        pData += 2U;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3302      	adds	r3, #2
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	e00c      	b.n	8008b56 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	b2d9      	uxtb	r1, r3
 8008b46:	8b7b      	ldrh	r3, [r7, #26]
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	1c58      	adds	r0, r3, #1
 8008b4e:	60b8      	str	r0, [r7, #8]
 8008b50:	400a      	ands	r2, r1
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]
      }
      huart->RxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1be      	bne.n	8008af2 <HAL_UART_Receive+0xe6>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e000      	b.n	8008b8a <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8008b88:	2302      	movs	r3, #2
  }
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3720      	adds	r7, #32
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	f040 8086 	bne.w	8008cbc <HAL_UART_Receive_IT+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_UART_Receive_IT+0x28>
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e07e      	b.n	8008cbe <HAL_UART_Receive_IT+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Receive_IT+0x3a>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e077      	b.n	8008cbe <HAL_UART_Receive_IT+0x12a>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfa:	d10e      	bne.n	8008c1a <HAL_UART_Receive_IT+0x86>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d105      	bne.n	8008c10 <HAL_UART_Receive_IT+0x7c>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c0e:	e028      	b.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c18:	e023      	b.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10d      	bne.n	8008c3e <HAL_UART_Receive_IT+0xaa>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <HAL_UART_Receive_IT+0xa0>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	; 0xff
 8008c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c32:	e016      	b.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	227f      	movs	r2, #127	; 0x7f
 8008c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c3c:	e011      	b.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c46:	d10c      	bne.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <HAL_UART_Receive_IT+0xc6>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	227f      	movs	r2, #127	; 0x7f
 8008c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c58:	e003      	b.n	8008c62 <HAL_UART_Receive_IT+0xce>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	223f      	movs	r2, #63	; 0x3f
 8008c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2222      	movs	r2, #34	; 0x22
 8008c6c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	609a      	str	r2, [r3, #8]
    }
    else
#endif
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c88:	d107      	bne.n	8008c9a <HAL_UART_Receive_IT+0x106>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <HAL_UART_Receive_IT+0x106>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <HAL_UART_Receive_IT+0x138>)
 8008c96:	661a      	str	r2, [r3, #96]	; 0x60
 8008c98:	e002      	b.n	8008ca0 <HAL_UART_Receive_IT+0x10c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4a0c      	ldr	r2, [pc, #48]	; (8008cd0 <HAL_UART_Receive_IT+0x13c>)
 8008c9e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
#if defined(USART_CR1_FIFOEN)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
#else
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008cb6:	601a      	str	r2, [r3, #0]
#endif
    }

    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <HAL_UART_Receive_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	08009a87 	.word	0x08009a87
 8008cd0:	080099e1 	.word	0x080099e1

08008cd4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8008cea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0201 	bic.w	r2, r2, #1
 8008cfa:	609a      	str	r2, [r3, #8]
#endif

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b80      	cmp	r3, #128	; 0x80
 8008d08:	d114      	bne.n	8008d34 <HAL_UART_Abort+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d18:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <HAL_UART_Abort+0x60>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d26:	2200      	movs	r2, #0
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38

      HAL_DMA_Abort(huart->hdmatx);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f9 fa10 	bl	8002154 <HAL_DMA_Abort>
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	d114      	bne.n	8008d6c <HAL_UART_Abort+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d50:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_UART_Abort+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5e:	2200      	movs	r2, #0
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

      HAL_DMA_Abort(huart->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f9 f9f4 	bl	8002154 <HAL_DMA_Abort>
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	220f      	movs	r2, #15
 8008d82:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	8b1b      	ldrh	r3, [r3, #24]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f042 0208 	orr.w	r2, r2, #8
 8008d94:	b292      	uxth	r2, r2
 8008d96:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset Handle ErrorCode to No Error */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d113      	bne.n	8008e0e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00e      	beq.n	8008e0e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <HAL_UART_IRQHandler+0x56>
#endif
    {
      if (huart->RxISR != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 80fd 	beq.w	8008ffe <HAL_UART_IRQHandler+0x246>
      {
        huart->RxISR(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
      }
      return;
 8008e0c:	e0f7      	b.n	8008ffe <HAL_UART_IRQHandler+0x246>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
#else
  if ((errorflags != RESET)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80bf 	beq.w	8008f94 <HAL_UART_IRQHandler+0x1dc>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80b4 	beq.w	8008f94 <HAL_UART_IRQHandler+0x1dc>
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00e      	beq.n	8008e54 <HAL_UART_IRQHandler+0x9c>
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d009      	beq.n	8008e54 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2201      	movs	r2, #1
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	f043 0201 	orr.w	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00e      	beq.n	8008e7c <HAL_UART_IRQHandler+0xc4>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d009      	beq.n	8008e7c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e74:	f043 0204 	orr.w	r2, r3, #4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00e      	beq.n	8008ea4 <HAL_UART_IRQHandler+0xec>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2204      	movs	r2, #4
 8008e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e9c:	f043 0202 	orr.w	r2, r3, #2
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	675a      	str	r2, [r3, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if (((isrflags & USART_ISR_ORE) != RESET)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d013      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != RESET)))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x11e>
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ece:	f043 0208 	orr.w	r2, r3, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 8091 	beq.w	8009002 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00c      	beq.n	8008f04 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f003 0320 	and.w	r3, r3, #32
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <HAL_UART_IRQHandler+0x14c>
#endif
      {
        if (huart->RxISR != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <HAL_UART_IRQHandler+0x166>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d131      	bne.n	8008f82 <HAL_UART_IRQHandler+0x1ca>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fd0d 	bl	800993e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d123      	bne.n	8008f7a <HAL_UART_IRQHandler+0x1c2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f40:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d013      	beq.n	8008f72 <HAL_UART_IRQHandler+0x1ba>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4e:	4a30      	ldr	r2, [pc, #192]	; (8009010 <HAL_UART_IRQHandler+0x258>)
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7f9 f930 	bl	80021bc <HAL_DMA_Abort_IT>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d016      	beq.n	8008f90 <HAL_UART_IRQHandler+0x1d8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	e00e      	b.n	8008f90 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f858 	bl	8009028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e00a      	b.n	8008f90 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f854 	bl	8009028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	e006      	b.n	8008f90 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f850 	bl	8009028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	675a      	str	r2, [r3, #116]	; 0x74
      }
    }
    return;
 8008f8e:	e038      	b.n	8009002 <HAL_UART_IRQHandler+0x24a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	bf00      	nop
    return;
 8008f92:	e036      	b.n	8009002 <HAL_UART_IRQHandler+0x24a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00d      	beq.n	8008fba <HAL_UART_IRQHandler+0x202>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d008      	beq.n	8008fba <HAL_UART_IRQHandler+0x202>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fdbc 	bl	8009b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fb8:	e026      	b.n	8009008 <HAL_UART_IRQHandler+0x250>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
#else
  if (((isrflags & USART_ISR_TXE) != RESET)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00d      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x228>
#endif
  {
    if (huart->TxISR != NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d017      	beq.n	8009006 <HAL_UART_IRQHandler+0x24e>
    {
      huart->TxISR(huart);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
    }
    return;
 8008fde:	e012      	b.n	8009006 <HAL_UART_IRQHandler+0x24e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <HAL_UART_IRQHandler+0x250>
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <HAL_UART_IRQHandler+0x250>
  {
    UART_EndTransmit_IT(huart);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fcd9 	bl	80099ac <UART_EndTransmit_IT>
    return;
 8008ffa:	bf00      	nop
 8008ffc:	e004      	b.n	8009008 <HAL_UART_IRQHandler+0x250>
      return;
 8008ffe:	bf00      	nop
 8009000:	e002      	b.n	8009008 <HAL_UART_IRQHandler+0x250>
    return;
 8009002:	bf00      	nop
 8009004:	e000      	b.n	8009008 <HAL_UART_IRQHandler+0x250>
    return;
 8009006:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif
}
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	08009981 	.word	0x08009981

08009014 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800903c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009040:	b088      	sub	sp, #32
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800904a:	2310      	movs	r3, #16
 800904c:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800904e:	2300      	movs	r3, #0
 8009050:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	431a      	orrs	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	4313      	orrs	r3, r2
 8009074:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	4bab      	ldr	r3, [pc, #684]	; (800932c <UART_SetConfig+0x2f0>)
 800907e:	4013      	ands	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	69f9      	ldr	r1, [r7, #28]
 8009086:	430b      	orrs	r3, r1
 8009088:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4aa1      	ldr	r2, [pc, #644]	; (8009330 <UART_SetConfig+0x2f4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d004      	beq.n	80090ba <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a98      	ldr	r2, [pc, #608]	; (8009334 <UART_SetConfig+0x2f8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d121      	bne.n	800911c <UART_SetConfig+0xe0>
 80090d8:	4b97      	ldr	r3, [pc, #604]	; (8009338 <UART_SetConfig+0x2fc>)
 80090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d816      	bhi.n	8009114 <UART_SetConfig+0xd8>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0xb0>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	080090fd 	.word	0x080090fd
 80090f0:	08009109 	.word	0x08009109
 80090f4:	08009103 	.word	0x08009103
 80090f8:	0800910f 	.word	0x0800910f
 80090fc:	2301      	movs	r3, #1
 80090fe:	76fb      	strb	r3, [r7, #27]
 8009100:	e0e6      	b.n	80092d0 <UART_SetConfig+0x294>
 8009102:	2302      	movs	r3, #2
 8009104:	76fb      	strb	r3, [r7, #27]
 8009106:	e0e3      	b.n	80092d0 <UART_SetConfig+0x294>
 8009108:	2304      	movs	r3, #4
 800910a:	76fb      	strb	r3, [r7, #27]
 800910c:	e0e0      	b.n	80092d0 <UART_SetConfig+0x294>
 800910e:	2308      	movs	r3, #8
 8009110:	76fb      	strb	r3, [r7, #27]
 8009112:	e0dd      	b.n	80092d0 <UART_SetConfig+0x294>
 8009114:	2310      	movs	r3, #16
 8009116:	76fb      	strb	r3, [r7, #27]
 8009118:	bf00      	nop
 800911a:	e0d9      	b.n	80092d0 <UART_SetConfig+0x294>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a86      	ldr	r2, [pc, #536]	; (800933c <UART_SetConfig+0x300>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d134      	bne.n	8009190 <UART_SetConfig+0x154>
 8009126:	4b84      	ldr	r3, [pc, #528]	; (8009338 <UART_SetConfig+0x2fc>)
 8009128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912c:	f003 030c 	and.w	r3, r3, #12
 8009130:	2b0c      	cmp	r3, #12
 8009132:	d829      	bhi.n	8009188 <UART_SetConfig+0x14c>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <UART_SetConfig+0x100>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009171 	.word	0x08009171
 8009140:	08009189 	.word	0x08009189
 8009144:	08009189 	.word	0x08009189
 8009148:	08009189 	.word	0x08009189
 800914c:	0800917d 	.word	0x0800917d
 8009150:	08009189 	.word	0x08009189
 8009154:	08009189 	.word	0x08009189
 8009158:	08009189 	.word	0x08009189
 800915c:	08009177 	.word	0x08009177
 8009160:	08009189 	.word	0x08009189
 8009164:	08009189 	.word	0x08009189
 8009168:	08009189 	.word	0x08009189
 800916c:	08009183 	.word	0x08009183
 8009170:	2300      	movs	r3, #0
 8009172:	76fb      	strb	r3, [r7, #27]
 8009174:	e0ac      	b.n	80092d0 <UART_SetConfig+0x294>
 8009176:	2302      	movs	r3, #2
 8009178:	76fb      	strb	r3, [r7, #27]
 800917a:	e0a9      	b.n	80092d0 <UART_SetConfig+0x294>
 800917c:	2304      	movs	r3, #4
 800917e:	76fb      	strb	r3, [r7, #27]
 8009180:	e0a6      	b.n	80092d0 <UART_SetConfig+0x294>
 8009182:	2308      	movs	r3, #8
 8009184:	76fb      	strb	r3, [r7, #27]
 8009186:	e0a3      	b.n	80092d0 <UART_SetConfig+0x294>
 8009188:	2310      	movs	r3, #16
 800918a:	76fb      	strb	r3, [r7, #27]
 800918c:	bf00      	nop
 800918e:	e09f      	b.n	80092d0 <UART_SetConfig+0x294>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a6a      	ldr	r2, [pc, #424]	; (8009340 <UART_SetConfig+0x304>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d120      	bne.n	80091dc <UART_SetConfig+0x1a0>
 800919a:	4b67      	ldr	r3, [pc, #412]	; (8009338 <UART_SetConfig+0x2fc>)
 800919c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091a4:	2b10      	cmp	r3, #16
 80091a6:	d00f      	beq.n	80091c8 <UART_SetConfig+0x18c>
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d802      	bhi.n	80091b2 <UART_SetConfig+0x176>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <UART_SetConfig+0x180>
 80091b0:	e010      	b.n	80091d4 <UART_SetConfig+0x198>
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d005      	beq.n	80091c2 <UART_SetConfig+0x186>
 80091b6:	2b30      	cmp	r3, #48	; 0x30
 80091b8:	d009      	beq.n	80091ce <UART_SetConfig+0x192>
 80091ba:	e00b      	b.n	80091d4 <UART_SetConfig+0x198>
 80091bc:	2300      	movs	r3, #0
 80091be:	76fb      	strb	r3, [r7, #27]
 80091c0:	e086      	b.n	80092d0 <UART_SetConfig+0x294>
 80091c2:	2302      	movs	r3, #2
 80091c4:	76fb      	strb	r3, [r7, #27]
 80091c6:	e083      	b.n	80092d0 <UART_SetConfig+0x294>
 80091c8:	2304      	movs	r3, #4
 80091ca:	76fb      	strb	r3, [r7, #27]
 80091cc:	e080      	b.n	80092d0 <UART_SetConfig+0x294>
 80091ce:	2308      	movs	r3, #8
 80091d0:	76fb      	strb	r3, [r7, #27]
 80091d2:	e07d      	b.n	80092d0 <UART_SetConfig+0x294>
 80091d4:	2310      	movs	r3, #16
 80091d6:	76fb      	strb	r3, [r7, #27]
 80091d8:	bf00      	nop
 80091da:	e079      	b.n	80092d0 <UART_SetConfig+0x294>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a58      	ldr	r2, [pc, #352]	; (8009344 <UART_SetConfig+0x308>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d120      	bne.n	8009228 <UART_SetConfig+0x1ec>
 80091e6:	4b54      	ldr	r3, [pc, #336]	; (8009338 <UART_SetConfig+0x2fc>)
 80091e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091f0:	2b40      	cmp	r3, #64	; 0x40
 80091f2:	d00f      	beq.n	8009214 <UART_SetConfig+0x1d8>
 80091f4:	2b40      	cmp	r3, #64	; 0x40
 80091f6:	d802      	bhi.n	80091fe <UART_SetConfig+0x1c2>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <UART_SetConfig+0x1cc>
 80091fc:	e010      	b.n	8009220 <UART_SetConfig+0x1e4>
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	d005      	beq.n	800920e <UART_SetConfig+0x1d2>
 8009202:	2bc0      	cmp	r3, #192	; 0xc0
 8009204:	d009      	beq.n	800921a <UART_SetConfig+0x1de>
 8009206:	e00b      	b.n	8009220 <UART_SetConfig+0x1e4>
 8009208:	2300      	movs	r3, #0
 800920a:	76fb      	strb	r3, [r7, #27]
 800920c:	e060      	b.n	80092d0 <UART_SetConfig+0x294>
 800920e:	2302      	movs	r3, #2
 8009210:	76fb      	strb	r3, [r7, #27]
 8009212:	e05d      	b.n	80092d0 <UART_SetConfig+0x294>
 8009214:	2304      	movs	r3, #4
 8009216:	76fb      	strb	r3, [r7, #27]
 8009218:	e05a      	b.n	80092d0 <UART_SetConfig+0x294>
 800921a:	2308      	movs	r3, #8
 800921c:	76fb      	strb	r3, [r7, #27]
 800921e:	e057      	b.n	80092d0 <UART_SetConfig+0x294>
 8009220:	2310      	movs	r3, #16
 8009222:	76fb      	strb	r3, [r7, #27]
 8009224:	bf00      	nop
 8009226:	e053      	b.n	80092d0 <UART_SetConfig+0x294>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a46      	ldr	r2, [pc, #280]	; (8009348 <UART_SetConfig+0x30c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d124      	bne.n	800927c <UART_SetConfig+0x240>
 8009232:	4b41      	ldr	r3, [pc, #260]	; (8009338 <UART_SetConfig+0x2fc>)
 8009234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800923c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009240:	d012      	beq.n	8009268 <UART_SetConfig+0x22c>
 8009242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009246:	d802      	bhi.n	800924e <UART_SetConfig+0x212>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d007      	beq.n	800925c <UART_SetConfig+0x220>
 800924c:	e012      	b.n	8009274 <UART_SetConfig+0x238>
 800924e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009252:	d006      	beq.n	8009262 <UART_SetConfig+0x226>
 8009254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009258:	d009      	beq.n	800926e <UART_SetConfig+0x232>
 800925a:	e00b      	b.n	8009274 <UART_SetConfig+0x238>
 800925c:	2300      	movs	r3, #0
 800925e:	76fb      	strb	r3, [r7, #27]
 8009260:	e036      	b.n	80092d0 <UART_SetConfig+0x294>
 8009262:	2302      	movs	r3, #2
 8009264:	76fb      	strb	r3, [r7, #27]
 8009266:	e033      	b.n	80092d0 <UART_SetConfig+0x294>
 8009268:	2304      	movs	r3, #4
 800926a:	76fb      	strb	r3, [r7, #27]
 800926c:	e030      	b.n	80092d0 <UART_SetConfig+0x294>
 800926e:	2308      	movs	r3, #8
 8009270:	76fb      	strb	r3, [r7, #27]
 8009272:	e02d      	b.n	80092d0 <UART_SetConfig+0x294>
 8009274:	2310      	movs	r3, #16
 8009276:	76fb      	strb	r3, [r7, #27]
 8009278:	bf00      	nop
 800927a:	e029      	b.n	80092d0 <UART_SetConfig+0x294>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a2b      	ldr	r2, [pc, #172]	; (8009330 <UART_SetConfig+0x2f4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d123      	bne.n	80092ce <UART_SetConfig+0x292>
 8009286:	4b2c      	ldr	r3, [pc, #176]	; (8009338 <UART_SetConfig+0x2fc>)
 8009288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009294:	d012      	beq.n	80092bc <UART_SetConfig+0x280>
 8009296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800929a:	d802      	bhi.n	80092a2 <UART_SetConfig+0x266>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <UART_SetConfig+0x274>
 80092a0:	e012      	b.n	80092c8 <UART_SetConfig+0x28c>
 80092a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092a6:	d006      	beq.n	80092b6 <UART_SetConfig+0x27a>
 80092a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092ac:	d009      	beq.n	80092c2 <UART_SetConfig+0x286>
 80092ae:	e00b      	b.n	80092c8 <UART_SetConfig+0x28c>
 80092b0:	2300      	movs	r3, #0
 80092b2:	76fb      	strb	r3, [r7, #27]
 80092b4:	e00c      	b.n	80092d0 <UART_SetConfig+0x294>
 80092b6:	2302      	movs	r3, #2
 80092b8:	76fb      	strb	r3, [r7, #27]
 80092ba:	e009      	b.n	80092d0 <UART_SetConfig+0x294>
 80092bc:	2304      	movs	r3, #4
 80092be:	76fb      	strb	r3, [r7, #27]
 80092c0:	e006      	b.n	80092d0 <UART_SetConfig+0x294>
 80092c2:	2308      	movs	r3, #8
 80092c4:	76fb      	strb	r3, [r7, #27]
 80092c6:	e003      	b.n	80092d0 <UART_SetConfig+0x294>
 80092c8:	2310      	movs	r3, #16
 80092ca:	76fb      	strb	r3, [r7, #27]
 80092cc:	e000      	b.n	80092d0 <UART_SetConfig+0x294>
 80092ce:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a16      	ldr	r2, [pc, #88]	; (8009330 <UART_SetConfig+0x2f4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	f040 80fa 	bne.w	80094d0 <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092dc:	7efb      	ldrb	r3, [r7, #27]
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d836      	bhi.n	8009350 <UART_SetConfig+0x314>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0x2ac>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009315 	.word	0x08009315
 80092f4:	08009351 	.word	0x08009351
 80092f8:	0800931b 	.word	0x0800931b
 80092fc:	08009351 	.word	0x08009351
 8009300:	08009351 	.word	0x08009351
 8009304:	08009351 	.word	0x08009351
 8009308:	08009323 	.word	0x08009323
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800930c:	f7fc fe78 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8009310:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8009312:	e020      	b.n	8009356 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8009314:	4b0d      	ldr	r3, [pc, #52]	; (800934c <UART_SetConfig+0x310>)
 8009316:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8009318:	e01d      	b.n	8009356 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800931a:	f7fc fdb5 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800931e:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8009320:	e019      	b.n	8009356 <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8009322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009326:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8009328:	e015      	b.n	8009356 <UART_SetConfig+0x31a>
 800932a:	bf00      	nop
 800932c:	efff69f3 	.word	0xefff69f3
 8009330:	40008000 	.word	0x40008000
 8009334:	40013800 	.word	0x40013800
 8009338:	40021000 	.word	0x40021000
 800933c:	40004400 	.word	0x40004400
 8009340:	40004800 	.word	0x40004800
 8009344:	40004c00 	.word	0x40004c00
 8009348:	40005000 	.word	0x40005000
 800934c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	74fb      	strb	r3, [r7, #19]
        break;
 8009354:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 81ac 	beq.w	80096b6 <UART_SetConfig+0x67a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	4613      	mov	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	4413      	add	r3, r2
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	429a      	cmp	r2, r3
 800936c:	d305      	bcc.n	800937a <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	429a      	cmp	r2, r3
 8009378:	d902      	bls.n	8009380 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	74fb      	strb	r3, [r7, #19]
 800937e:	e19a      	b.n	80096b6 <UART_SetConfig+0x67a>
      }
      else
      {
        switch (clocksource)
 8009380:	7efb      	ldrb	r3, [r7, #27]
 8009382:	2b08      	cmp	r3, #8
 8009384:	f200 8091 	bhi.w	80094aa <UART_SetConfig+0x46e>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <UART_SetConfig+0x354>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080094ab 	.word	0x080094ab
 8009398:	08009401 	.word	0x08009401
 800939c:	080094ab 	.word	0x080094ab
 80093a0:	08009435 	.word	0x08009435
 80093a4:	080094ab 	.word	0x080094ab
 80093a8:	080094ab 	.word	0x080094ab
 80093ac:	080094ab 	.word	0x080094ab
 80093b0:	08009481 	.word	0x08009481
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80093b4:	f7fc fe24 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 80093b8:	4603      	mov	r3, r0
 80093ba:	4619      	mov	r1, r3
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	f04f 0400 	mov.w	r4, #0
 80093c8:	0214      	lsls	r4, r2, #8
 80093ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80093ce:	020b      	lsls	r3, r1, #8
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6852      	ldr	r2, [r2, #4]
 80093d4:	0852      	lsrs	r2, r2, #1
 80093d6:	4611      	mov	r1, r2
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	eb13 0b01 	adds.w	fp, r3, r1
 80093e0:	eb44 0c02 	adc.w	ip, r4, r2
 80093e4:	4658      	mov	r0, fp
 80093e6:	4661      	mov	r1, ip
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f04f 0400 	mov.w	r4, #0
 80093f0:	461a      	mov	r2, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	f7f7 fc52 	bl	8000c9c <__aeabi_uldivmod>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	617b      	str	r3, [r7, #20]
#endif
            break;
 80093fe:	e057      	b.n	80094b0 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	085b      	lsrs	r3, r3, #1
 8009406:	f04f 0400 	mov.w	r4, #0
 800940a:	49b1      	ldr	r1, [pc, #708]	; (80096d0 <UART_SetConfig+0x694>)
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	eb13 0b01 	adds.w	fp, r3, r1
 8009414:	eb44 0c02 	adc.w	ip, r4, r2
 8009418:	4658      	mov	r0, fp
 800941a:	4661      	mov	r1, ip
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f04f 0400 	mov.w	r4, #0
 8009424:	461a      	mov	r2, r3
 8009426:	4623      	mov	r3, r4
 8009428:	f7f7 fc38 	bl	8000c9c <__aeabi_uldivmod>
 800942c:	4603      	mov	r3, r0
 800942e:	460c      	mov	r4, r1
 8009430:	617b      	str	r3, [r7, #20]
#endif
            break;
 8009432:	e03d      	b.n	80094b0 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009434:	f7fc fd28 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8009438:	4603      	mov	r3, r0
 800943a:	4619      	mov	r1, r3
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	f04f 0400 	mov.w	r4, #0
 8009448:	0214      	lsls	r4, r2, #8
 800944a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800944e:	020b      	lsls	r3, r1, #8
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6852      	ldr	r2, [r2, #4]
 8009454:	0852      	lsrs	r2, r2, #1
 8009456:	4611      	mov	r1, r2
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	eb13 0b01 	adds.w	fp, r3, r1
 8009460:	eb44 0c02 	adc.w	ip, r4, r2
 8009464:	4658      	mov	r0, fp
 8009466:	4661      	mov	r1, ip
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f04f 0400 	mov.w	r4, #0
 8009470:	461a      	mov	r2, r3
 8009472:	4623      	mov	r3, r4
 8009474:	f7f7 fc12 	bl	8000c9c <__aeabi_uldivmod>
 8009478:	4603      	mov	r3, r0
 800947a:	460c      	mov	r4, r1
 800947c:	617b      	str	r3, [r7, #20]
#endif
            break;
 800947e:	e017      	b.n	80094b0 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	085b      	lsrs	r3, r3, #1
 8009486:	f04f 0400 	mov.w	r4, #0
 800948a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800948e:	f144 0100 	adc.w	r1, r4, #0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f04f 0400 	mov.w	r4, #0
 800949a:	461a      	mov	r2, r3
 800949c:	4623      	mov	r3, r4
 800949e:	f7f7 fbfd 	bl	8000c9c <__aeabi_uldivmod>
 80094a2:	4603      	mov	r3, r0
 80094a4:	460c      	mov	r4, r1
 80094a6:	617b      	str	r3, [r7, #20]
#endif
            break;
 80094a8:	e002      	b.n	80094b0 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	74fb      	strb	r3, [r7, #19]
            break;
 80094ae:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b6:	d308      	bcc.n	80094ca <UART_SetConfig+0x48e>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094be:	d204      	bcs.n	80094ca <UART_SetConfig+0x48e>
        {
          huart->Instance->BRR = usartdiv;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	60da      	str	r2, [r3, #12]
 80094c8:	e0f5      	b.n	80096b6 <UART_SetConfig+0x67a>
        }
        else
        {
          ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	74fb      	strb	r3, [r7, #19]
 80094ce:	e0f2      	b.n	80096b6 <UART_SetConfig+0x67a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d8:	d17f      	bne.n	80095da <UART_SetConfig+0x59e>
  {
    switch (clocksource)
 80094da:	7efb      	ldrb	r3, [r7, #27]
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d85c      	bhi.n	800959a <UART_SetConfig+0x55e>
 80094e0:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0x4ac>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	0800952b 	.word	0x0800952b
 80094f0:	08009549 	.word	0x08009549
 80094f4:	0800959b 	.word	0x0800959b
 80094f8:	08009565 	.word	0x08009565
 80094fc:	0800959b 	.word	0x0800959b
 8009500:	0800959b 	.word	0x0800959b
 8009504:	0800959b 	.word	0x0800959b
 8009508:	08009583 	.word	0x08009583
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800950c:	f7fc fd78 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8009510:	4603      	mov	r3, r0
 8009512:	005a      	lsls	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	441a      	add	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	fbb2 f3f3 	udiv	r3, r2, r3
 8009524:	b29b      	uxth	r3, r3
 8009526:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009528:	e03a      	b.n	80095a0 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800952a:	f7fc fd7d 	bl	8006028 <HAL_RCC_GetPCLK2Freq>
 800952e:	4603      	mov	r3, r0
 8009530:	005a      	lsls	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	441a      	add	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009546:	e02b      	b.n	80095a0 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	085b      	lsrs	r3, r3, #1
 800954e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009552:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6852      	ldr	r2, [r2, #4]
 800955a:	fbb3 f3f2 	udiv	r3, r3, r2
 800955e:	b29b      	uxth	r3, r3
 8009560:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009562:	e01d      	b.n	80095a0 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009564:	f7fc fc90 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8009568:	4603      	mov	r3, r0
 800956a:	005a      	lsls	r2, r3, #1
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	b29b      	uxth	r3, r3
 800957e:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009580:	e00e      	b.n	80095a0 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	085b      	lsrs	r3, r3, #1
 8009588:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	fbb2 f3f3 	udiv	r3, r2, r3
 8009594:	b29b      	uxth	r3, r3
 8009596:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009598:	e002      	b.n	80095a0 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	74fb      	strb	r3, [r7, #19]
        break;
 800959e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b0f      	cmp	r3, #15
 80095a4:	d916      	bls.n	80095d4 <UART_SetConfig+0x598>
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ac:	d212      	bcs.n	80095d4 <UART_SetConfig+0x598>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f023 030f 	bic.w	r3, r3, #15
 80095b6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	897b      	ldrh	r3, [r7, #10]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	897a      	ldrh	r2, [r7, #10]
 80095d0:	60da      	str	r2, [r3, #12]
 80095d2:	e070      	b.n	80096b6 <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	74fb      	strb	r3, [r7, #19]
 80095d8:	e06d      	b.n	80096b6 <UART_SetConfig+0x67a>
    }
  }
  else
  {
    switch (clocksource)
 80095da:	7efb      	ldrb	r3, [r7, #27]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d859      	bhi.n	8009694 <UART_SetConfig+0x658>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <UART_SetConfig+0x5ac>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	08009629 	.word	0x08009629
 80095f0:	08009645 	.word	0x08009645
 80095f4:	08009695 	.word	0x08009695
 80095f8:	08009661 	.word	0x08009661
 80095fc:	08009695 	.word	0x08009695
 8009600:	08009695 	.word	0x08009695
 8009604:	08009695 	.word	0x08009695
 8009608:	0800967d 	.word	0x0800967d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800960c:	f7fc fcf8 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8009610:	4602      	mov	r2, r0
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	441a      	add	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009622:	b29b      	uxth	r3, r3
 8009624:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009626:	e038      	b.n	800969a <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009628:	f7fc fcfe 	bl	8006028 <HAL_RCC_GetPCLK2Freq>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	085b      	lsrs	r3, r3, #1
 8009634:	441a      	add	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	fbb2 f3f3 	udiv	r3, r2, r3
 800963e:	b29b      	uxth	r3, r3
 8009640:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009642:	e02a      	b.n	800969a <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	085b      	lsrs	r3, r3, #1
 800964a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800964e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6852      	ldr	r2, [r2, #4]
 8009656:	fbb3 f3f2 	udiv	r3, r3, r2
 800965a:	b29b      	uxth	r3, r3
 800965c:	617b      	str	r3, [r7, #20]
#endif
        break;
 800965e:	e01c      	b.n	800969a <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009660:	f7fc fc12 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	085b      	lsrs	r3, r3, #1
 800966c:	441a      	add	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	fbb2 f3f3 	udiv	r3, r2, r3
 8009676:	b29b      	uxth	r3, r3
 8009678:	617b      	str	r3, [r7, #20]
#endif
        break;
 800967a:	e00e      	b.n	800969a <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	fbb2 f3f3 	udiv	r3, r2, r3
 800968e:	b29b      	uxth	r3, r3
 8009690:	617b      	str	r3, [r7, #20]
#endif
        break;
 8009692:	e002      	b.n	800969a <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	74fb      	strb	r3, [r7, #19]
        break;
 8009698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b0f      	cmp	r3, #15
 800969e:	d908      	bls.n	80096b2 <UART_SetConfig+0x676>
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a6:	d204      	bcs.n	80096b2 <UART_SetConfig+0x676>
    {
      huart->Instance->BRR = usartdiv;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	60da      	str	r2, [r3, #12]
 80096b0:	e001      	b.n	80096b6 <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80096c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3720      	adds	r7, #32
 80096c8:	46bd      	mov	sp, r7
 80096ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80096ce:	bf00      	nop
 80096d0:	f4240000 	.word	0xf4240000

080096d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00a      	beq.n	80096fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	f003 0308 	and.w	r3, r3, #8
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00a      	beq.n	8009764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	430a      	orrs	r2, r1
 8009762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	f003 0310 	and.w	r3, r3, #16
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00a      	beq.n	8009786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01a      	beq.n	80097ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097d2:	d10a      	bne.n	80097ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	430a      	orrs	r2, r1
 800980a:	605a      	str	r2, [r3, #4]
  }
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800982a:	f7f8 f91d 	bl	8001a68 <HAL_GetTick>
 800982e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b08      	cmp	r3, #8
 800983c:	d10e      	bne.n	800985c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800983e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f82c 	bl	80098aa <UART_WaitOnFlagUntilTimeout>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e022      	b.n	80098a2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0304 	and.w	r3, r3, #4
 8009866:	2b04      	cmp	r3, #4
 8009868:	d10e      	bne.n	8009888 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800986a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f816 	bl	80098aa <UART_WaitOnFlagUntilTimeout>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e00c      	b.n	80098a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2220      	movs	r2, #32
 8009894:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	603b      	str	r3, [r7, #0]
 80098b6:	4613      	mov	r3, r2
 80098b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ba:	e02c      	b.n	8009916 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c2:	d028      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <UART_WaitOnFlagUntilTimeout+0x30>
 80098ca:	f7f8 f8cd 	bl	8001a68 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d21d      	bcs.n	8009916 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098e8:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0201 	bic.w	r2, r2, #1
 80098f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2220      	movs	r2, #32
 8009906:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e00f      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69da      	ldr	r2, [r3, #28]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4013      	ands	r3, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	bf0c      	ite	eq
 8009926:	2301      	moveq	r3, #1
 8009928:	2300      	movne	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	429a      	cmp	r2, r3
 8009932:	d0c3      	beq.n	80098bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009954:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff fb42 	bl	8009028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2220      	movs	r2, #32
 80099c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fb1e 	bl	8009014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b22      	cmp	r3, #34	; 0x22
 80099fa:	d136      	bne.n	8009a6a <UART_RxISR_8BIT+0x8a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a02:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a04:	89bb      	ldrh	r3, [r7, #12]
 8009a06:	b2d9      	uxtb	r1, r3
 8009a08:	89fb      	ldrh	r3, [r7, #14]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a10:	1c5c      	adds	r4, r3, #1
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	6544      	str	r4, [r0, #84]	; 0x54
 8009a16:	400a      	ands	r2, r1
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]

    if (--huart->RxXferCount == 0)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d124      	bne.n	8009a7e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a42:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689a      	ldr	r2, [r3, #8]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f004 fa70 	bl	800df48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a68:	e009      	b.n	8009a7e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	8b1b      	ldrh	r3, [r3, #24]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0208 	orr.w	r2, r2, #8
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	831a      	strh	r2, [r3, #24]
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd90      	pop	{r4, r7, pc}

08009a86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b22      	cmp	r3, #34	; 0x22
 8009aa0:	d138      	bne.n	8009b14 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009aa8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ab0:	89ba      	ldrh	r2, [r7, #12]
 8009ab2:	89fb      	ldrh	r3, [r7, #14]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac0:	1c9a      	adds	r2, r3, #2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	655a      	str	r2, [r3, #84]	; 0x54

    if (--huart->RxXferCount == 0)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d124      	bne.n	8009b28 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009aec:	601a      	str	r2, [r3, #0]
#endif

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f004 fa1b 	bl	800df48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b12:	e009      	b.n	8009b28 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	8b1b      	ldrh	r3, [r3, #24]
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0208 	orr.w	r2, r2, #8
 8009b24:	b292      	uxth	r2, r2
 8009b26:	831a      	strh	r2, [r3, #24]
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <applib_dt_is_leap_year>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static unsigned char applib_dt_is_leap_year(unsigned short year)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	80fb      	strh	r3, [r7, #6]
    if ((year % 400) == 0)
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	4a15      	ldr	r2, [pc, #84]	; (8009ba8 <applib_dt_is_leap_year+0x64>)
 8009b52:	fba2 1203 	umull	r1, r2, r2, r3
 8009b56:	09d2      	lsrs	r2, r2, #7
 8009b58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009b5c:	fb01 f202 	mul.w	r2, r1, r2
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <applib_dt_is_leap_year+0x28>
        return 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e016      	b.n	8009b9a <applib_dt_is_leap_year+0x56>
    else if ((year % 100) == 0)
 8009b6c:	88fb      	ldrh	r3, [r7, #6]
 8009b6e:	4a0e      	ldr	r2, [pc, #56]	; (8009ba8 <applib_dt_is_leap_year+0x64>)
 8009b70:	fba2 1203 	umull	r1, r2, r2, r3
 8009b74:	0952      	lsrs	r2, r2, #5
 8009b76:	2164      	movs	r1, #100	; 0x64
 8009b78:	fb01 f202 	mul.w	r2, r1, r2
 8009b7c:	1a9b      	subs	r3, r3, r2
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <applib_dt_is_leap_year+0x44>
        return 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	e008      	b.n	8009b9a <applib_dt_is_leap_year+0x56>
    else if ((year % 4) == 0)
 8009b88:	88fb      	ldrh	r3, [r7, #6]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <applib_dt_is_leap_year+0x54>
        return 1;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <applib_dt_is_leap_year+0x56>
    else
        return 0;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	51eb851f 	.word	0x51eb851f

08009bac <applib_dt_last_day_of_mon>:

static unsigned char applib_dt_last_day_of_mon(unsigned char month, unsigned short year)
{
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	460a      	mov	r2, r1
 8009bb6:	71fb      	strb	r3, [r7, #7]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	80bb      	strh	r3, [r7, #4]
    if ((month == 0) || (month > 12))
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <applib_dt_last_day_of_mon+0x1c>
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	2b0c      	cmp	r3, #12
 8009bc6:	d908      	bls.n	8009bda <applib_dt_last_day_of_mon+0x2e>
        return g_day_per_mon[1] + applib_dt_is_leap_year(year);
 8009bc8:	241c      	movs	r4, #28
 8009bca:	88bb      	ldrh	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff ffb9 	bl	8009b44 <applib_dt_is_leap_year>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4423      	add	r3, r4
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	e00f      	b.n	8009bfa <applib_dt_last_day_of_mon+0x4e>

    if (month != 2)
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d004      	beq.n	8009bea <applib_dt_last_day_of_mon+0x3e>
        return g_day_per_mon[month - 1];
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	4a07      	ldr	r2, [pc, #28]	; (8009c04 <applib_dt_last_day_of_mon+0x58>)
 8009be6:	5cd3      	ldrb	r3, [r2, r3]
 8009be8:	e007      	b.n	8009bfa <applib_dt_last_day_of_mon+0x4e>
    else
        return g_day_per_mon[1] + applib_dt_is_leap_year(year);
 8009bea:	241c      	movs	r4, #28
 8009bec:	88bb      	ldrh	r3, [r7, #4]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff ffa8 	bl	8009b44 <applib_dt_is_leap_year>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4423      	add	r3, r4
 8009bf8:	b2db      	uxtb	r3, r3
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	08026dc8 	.word	0x08026dc8

08009c08 <change_unix>:

static void change_unix(long ts, Chirp_Time *gps_time)
{
 8009c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0a:	b093      	sub	sp, #76	; 0x4c
 8009c0c:	af04      	add	r7, sp, #16
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
    int year = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	623b      	str	r3, [r7, #32]
    int month = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
    int date = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
    int day = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
    int hour = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	633b      	str	r3, [r7, #48]	; 0x30
    int minute = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
    int second = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]

    int dates = ts / SEC_PER_DAY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a9f      	ldr	r2, [pc, #636]	; (8009eb0 <change_unix+0x2a8>)
 8009c32:	fb82 1203 	smull	r1, r2, r2, r3
 8009c36:	441a      	add	r2, r3
 8009c38:	1412      	asrs	r2, r2, #16
 8009c3a:	17db      	asrs	r3, r3, #31
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int yearTmp = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28
    int dayTmp = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
    for (yearTmp = UTC_BASE_YEAR; dates > 0; yearTmp++)
 8009c48:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8009c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c4e:	e013      	b.n	8009c78 <change_unix+0x70>
    {
        dayTmp = (DAY_PER_YEAR + applib_dt_is_leap_year(yearTmp));
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff ff75 	bl	8009b44 <applib_dt_is_leap_year>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8009c60:	60fb      	str	r3, [r7, #12]
        if (dates >= dayTmp)
 8009c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	db0a      	blt.n	8009c80 <change_unix+0x78>
            dates -= dayTmp;
 8009c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (yearTmp = UTC_BASE_YEAR; dates > 0; yearTmp++)
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	3301      	adds	r3, #1
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dce8      	bgt.n	8009c50 <change_unix+0x48>
 8009c7e:	e000      	b.n	8009c82 <change_unix+0x7a>
        else
            break;
 8009c80:	bf00      	nop
    }
    year = yearTmp;
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	623b      	str	r3, [r7, #32]

    int monthTmp = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
    for (monthTmp = 1; monthTmp < MONTH_PER_YEAR; monthTmp++)
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8e:	e014      	b.n	8009cba <change_unix+0xb2>
    {
        dayTmp = applib_dt_last_day_of_mon(monthTmp, year);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	b292      	uxth	r2, r2
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ff86 	bl	8009bac <applib_dt_last_day_of_mon>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	60fb      	str	r3, [r7, #12]
        if (dates >= dayTmp)
 8009ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	db0a      	blt.n	8009cc2 <change_unix+0xba>
            dates -= dayTmp;
 8009cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (monthTmp = 1; monthTmp < MONTH_PER_YEAR; monthTmp++)
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	2b0b      	cmp	r3, #11
 8009cbe:	dde7      	ble.n	8009c90 <change_unix+0x88>
 8009cc0:	e000      	b.n	8009cc4 <change_unix+0xbc>
        else
            break;
 8009cc2:	bf00      	nop
    }
    month = monthTmp;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	61fb      	str	r3, [r7, #28]

    date = dates + 1;
 8009cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cca:	3301      	adds	r3, #1
 8009ccc:	637b      	str	r3, [r7, #52]	; 0x34

    int secs = ts % SEC_PER_DAY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a77      	ldr	r2, [pc, #476]	; (8009eb0 <change_unix+0x2a8>)
 8009cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8009cd6:	441a      	add	r2, r3
 8009cd8:	1411      	asrs	r1, r2, #16
 8009cda:	17da      	asrs	r2, r3, #31
 8009cdc:	1a8a      	subs	r2, r1, r2
 8009cde:	4975      	ldr	r1, [pc, #468]	; (8009eb4 <change_unix+0x2ac>)
 8009ce0:	fb01 f202 	mul.w	r2, r1, r2
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	60bb      	str	r3, [r7, #8]
    hour = secs / SEC_PER_HOUR;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	4a73      	ldr	r2, [pc, #460]	; (8009eb8 <change_unix+0x2b0>)
 8009cec:	fb82 1203 	smull	r1, r2, r2, r3
 8009cf0:	441a      	add	r2, r3
 8009cf2:	12d2      	asrs	r2, r2, #11
 8009cf4:	17db      	asrs	r3, r3, #31
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	633b      	str	r3, [r7, #48]	; 0x30
    hour += 8;
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	633b      	str	r3, [r7, #48]	; 0x30
    if (hour >= 24)
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	2b17      	cmp	r3, #23
 8009d04:	dd2b      	ble.n	8009d5e <change_unix+0x156>
    {
        hour -= 24;
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	3b18      	subs	r3, #24
 8009d0a:	633b      	str	r3, [r7, #48]	; 0x30
        date++;
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0e:	3301      	adds	r3, #1
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
        dayTmp = applib_dt_last_day_of_mon(monthTmp, year);
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ff45 	bl	8009bac <applib_dt_last_day_of_mon>
 8009d22:	4603      	mov	r3, r0
 8009d24:	60fb      	str	r3, [r7, #12]
        if (date > dayTmp)
 8009d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	dd17      	ble.n	8009d5e <change_unix+0x156>
        {
            date -= dayTmp;
 8009d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
            if (month == 12)
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b0c      	cmp	r3, #12
 8009d3a:	d102      	bne.n	8009d42 <change_unix+0x13a>
                yearTmp = yearTmp + 1;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	3301      	adds	r3, #1
 8009d40:	62bb      	str	r3, [r7, #40]	; 0x28

            monthTmp = (monthTmp + 1) % MONTH_PER_YEAR;
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	4b5d      	ldr	r3, [pc, #372]	; (8009ebc <change_unix+0x2b4>)
 8009d48:	fb83 1302 	smull	r1, r3, r3, r2
 8009d4c:	1059      	asrs	r1, r3, #1
 8009d4e:	17d3      	asrs	r3, r2, #31
 8009d50:	1ac9      	subs	r1, r1, r3
 8009d52:	460b      	mov	r3, r1
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	440b      	add	r3, r1
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    year = yearTmp;
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	623b      	str	r3, [r7, #32]
    month = monthTmp;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	61fb      	str	r3, [r7, #28]

    secs %= SEC_PER_HOUR;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4a53      	ldr	r2, [pc, #332]	; (8009eb8 <change_unix+0x2b0>)
 8009d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8009d6e:	441a      	add	r2, r3
 8009d70:	12d1      	asrs	r1, r2, #11
 8009d72:	17da      	asrs	r2, r3, #31
 8009d74:	1a8a      	subs	r2, r1, r2
 8009d76:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009d7a:	fb01 f202 	mul.w	r2, r1, r2
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	60bb      	str	r3, [r7, #8]
    minute = secs / SEC_PER_MIN;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4a4e      	ldr	r2, [pc, #312]	; (8009ec0 <change_unix+0x2b8>)
 8009d86:	fb82 1203 	smull	r1, r2, r2, r3
 8009d8a:	441a      	add	r2, r3
 8009d8c:	1152      	asrs	r2, r2, #5
 8009d8e:	17db      	asrs	r3, r3, #31
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	617b      	str	r3, [r7, #20]
    second = secs % SEC_PER_MIN;
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	4b4a      	ldr	r3, [pc, #296]	; (8009ec0 <change_unix+0x2b8>)
 8009d98:	fb83 1302 	smull	r1, r3, r3, r2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	1159      	asrs	r1, r3, #5
 8009da0:	17d3      	asrs	r3, r2, #31
 8009da2:	1ac9      	subs	r1, r1, r3
 8009da4:	460b      	mov	r3, r1
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	1a5b      	subs	r3, r3, r1
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	613b      	str	r3, [r7, #16]

    if (monthTmp == 1 || monthTmp == 2)
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d002      	beq.n	8009dbc <change_unix+0x1b4>
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d105      	bne.n	8009dc8 <change_unix+0x1c0>
    {
        monthTmp += 12;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	330c      	adds	r3, #12
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
        yearTmp--;
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    day =  (date + 2 * monthTmp + 3 * (monthTmp + 1) / 5 + yearTmp + yearTmp / 4 - yearTmp / 100 + yearTmp / 400) % 7 + 1;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	005a      	lsls	r2, r3, #1
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dce:	18d1      	adds	r1, r2, r3
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	4a3a      	ldr	r2, [pc, #232]	; (8009ec4 <change_unix+0x2bc>)
 8009ddc:	fb82 0203 	smull	r0, r2, r2, r3
 8009de0:	1052      	asrs	r2, r2, #1
 8009de2:	17db      	asrs	r3, r3, #31
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	18ca      	adds	r2, r1, r3
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	441a      	add	r2, r3
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	da00      	bge.n	8009df4 <change_unix+0x1ec>
 8009df2:	3303      	adds	r3, #3
 8009df4:	109b      	asrs	r3, r3, #2
 8009df6:	441a      	add	r2, r3
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	4933      	ldr	r1, [pc, #204]	; (8009ec8 <change_unix+0x2c0>)
 8009dfc:	fb81 0103 	smull	r0, r1, r1, r3
 8009e00:	1149      	asrs	r1, r1, #5
 8009e02:	17db      	asrs	r3, r3, #31
 8009e04:	1a5b      	subs	r3, r3, r1
 8009e06:	441a      	add	r2, r3
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	492f      	ldr	r1, [pc, #188]	; (8009ec8 <change_unix+0x2c0>)
 8009e0c:	fb81 0103 	smull	r0, r1, r1, r3
 8009e10:	11c9      	asrs	r1, r1, #7
 8009e12:	17db      	asrs	r3, r3, #31
 8009e14:	1acb      	subs	r3, r1, r3
 8009e16:	441a      	add	r2, r3
 8009e18:	4b2c      	ldr	r3, [pc, #176]	; (8009ecc <change_unix+0x2c4>)
 8009e1a:	fb83 1302 	smull	r1, r3, r3, r2
 8009e1e:	4413      	add	r3, r2
 8009e20:	1099      	asrs	r1, r3, #2
 8009e22:	17d3      	asrs	r3, r2, #31
 8009e24:	1ac9      	subs	r1, r1, r3
 8009e26:	460b      	mov	r3, r1
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	1a5b      	subs	r3, r3, r1
 8009e2c:	1ad1      	subs	r1, r2, r3
 8009e2e:	1c4b      	adds	r3, r1, #1
 8009e30:	61bb      	str	r3, [r7, #24]

    gps_time->chirp_year = (uint16_t)year;
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	801a      	strh	r2, [r3, #0]
    gps_time->chirp_month = (uint8_t)month;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	709a      	strb	r2, [r3, #2]
    gps_time->chirp_date = (uint8_t)date;
 8009e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	70da      	strb	r2, [r3, #3]
    gps_time->chirp_day = (uint8_t)day;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	711a      	strb	r2, [r3, #4]
    gps_time->chirp_hour = (uint8_t)hour;
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	715a      	strb	r2, [r3, #5]
    gps_time->chirp_min = (uint8_t)minute;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	719a      	strb	r2, [r3, #6]
    gps_time->chirp_sec = (uint8_t)second;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	71da      	strb	r2, [r3, #7]
    PRINTF("%d-%d-%d %d:%d:%d week: %d\n", gps_time->chirp_year, gps_time->chirp_month, gps_time->chirp_date, gps_time->chirp_hour, gps_time->chirp_min, gps_time->chirp_sec, gps_time->chirp_day);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	461c      	mov	r4, r3
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	789b      	ldrb	r3, [r3, #2]
 8009e74:	461d      	mov	r5, r3
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	78db      	ldrb	r3, [r3, #3]
 8009e7a:	461e      	mov	r6, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	795b      	ldrb	r3, [r3, #5]
 8009e80:	461a      	mov	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	799b      	ldrb	r3, [r3, #6]
 8009e86:	4619      	mov	r1, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	79db      	ldrb	r3, [r3, #7]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	791b      	ldrb	r3, [r3, #4]
 8009e92:	9303      	str	r3, [sp, #12]
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9101      	str	r1, [sp, #4]
 8009e98:	9200      	str	r2, [sp, #0]
 8009e9a:	4633      	mov	r3, r6
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	480b      	ldr	r0, [pc, #44]	; (8009ed0 <change_unix+0x2c8>)
 8009ea2:	f018 fbcb 	bl	802263c <iprintf>
}
 8009ea6:	bf00      	nop
 8009ea8:	373c      	adds	r7, #60	; 0x3c
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	c22e4507 	.word	0xc22e4507
 8009eb4:	00015180 	.word	0x00015180
 8009eb8:	91a2b3c5 	.word	0x91a2b3c5
 8009ebc:	2aaaaaab 	.word	0x2aaaaaab
 8009ec0:	88888889 	.word	0x88888889
 8009ec4:	66666667 	.word	0x66666667
 8009ec8:	51eb851f 	.word	0x51eb851f
 8009ecc:	92492493 	.word	0x92492493
 8009ed0:	0802574c 	.word	0x0802574c

08009ed4 <gps_pps_IRQ>:

void gps_pps_IRQ()
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 8009ed8:	f004 f97a 	bl	800e1d0 <gpi_watchdog_periodic>
    pps_count++;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <gps_pps_IRQ+0x24>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	4a05      	ldr	r2, [pc, #20]	; (8009ef8 <gps_pps_IRQ+0x24>)
 8009ee4:	6013      	str	r3, [r2, #0]
    PRINTF("pps:%lu\n", pps_count);
 8009ee6:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <gps_pps_IRQ+0x24>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4803      	ldr	r0, [pc, #12]	; (8009efc <gps_pps_IRQ+0x28>)
 8009eee:	f018 fba5 	bl	802263c <iprintf>
}
 8009ef2:	bf00      	nop
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000034c 	.word	0x2000034c
 8009efc:	08025768 	.word	0x08025768

08009f00 <GPS_Init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void GPS_Init()
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // config gps
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f06:	2301      	movs	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	613b      	str	r3, [r7, #16]
    HW_GPIO_Init(GPIOA, GPIO_PIN_12|GPIO_PIN_11, &GPIO_InitStruct );
 8009f12:	1d3b      	adds	r3, r7, #4
 8009f14:	461a      	mov	r2, r3
 8009f16:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f1e:	f003 fbf5 	bl	800d70c <HW_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_RESET);
 8009f22:	2200      	movs	r2, #0
 8009f24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f2c:	f7f9 fad4 	bl	80034d8 <HAL_GPIO_WritePin>

    // config gps
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f30:	2301      	movs	r3, #1
 8009f32:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	613b      	str	r3, [r7, #16]
    HW_GPIO_Init(GPIOB, GPIO_PIN_12, &GPIO_InitStruct );
 8009f3c:	1d3b      	adds	r3, r7, #4
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f44:	4818      	ldr	r0, [pc, #96]	; (8009fa8 <GPS_Init+0xa8>)
 8009f46:	f003 fbe1 	bl	800d70c <HW_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f50:	4815      	ldr	r0, [pc, #84]	; (8009fa8 <GPS_Init+0xa8>)
 8009f52:	f7f9 fac1 	bl	80034d8 <HAL_GPIO_WritePin>

    /*Configure trigger */
    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_RESET);
 8009f56:	2200      	movs	r2, #0
 8009f58:	2104      	movs	r1, #4
 8009f5a:	4814      	ldr	r0, [pc, #80]	; (8009fac <GPS_Init+0xac>)
 8009f5c:	f7f9 fabc 	bl	80034d8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f60:	2301      	movs	r3, #1
 8009f62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, &GPIO_InitStruct);
 8009f6c:	1d3b      	adds	r3, r7, #4
 8009f6e:	461a      	mov	r2, r3
 8009f70:	2104      	movs	r1, #4
 8009f72:	480e      	ldr	r0, [pc, #56]	; (8009fac <GPS_Init+0xac>)
 8009f74:	f003 fbca 	bl	800d70c <HW_GPIO_Init>

    /*Configure pps */
    GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <GPS_Init+0xb0>)
 8009f7e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f80:	2301      	movs	r3, #1
 8009f82:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPS_PPS_Port, &GPIO_InitStruct);
 8009f84:	1d3b      	adds	r3, r7, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <GPS_Init+0xac>)
 8009f8a:	f7f9 f801 	bl	8002f90 <HAL_GPIO_Init>

    HW_GPIO_SetIrq(GPS_PPS_Port, GPS_PPS_Pin, 0, gps_pps_IRQ);
 8009f8e:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <GPS_Init+0xb4>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	2101      	movs	r1, #1
 8009f94:	4805      	ldr	r0, [pc, #20]	; (8009fac <GPS_Init+0xac>)
 8009f96:	f003 fc25 	bl	800d7e4 <HW_GPIO_SetIrq>
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 8009f9a:	2006      	movs	r0, #6
 8009f9c:	f7f7 feb9 	bl	8001d12 <HAL_NVIC_DisableIRQ>
}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	48000400 	.word	0x48000400
 8009fac:	48000800 	.word	0x48000800
 8009fb0:	10210000 	.word	0x10210000
 8009fb4:	08009ed5 	.word	0x08009ed5

08009fb8 <GPS_On>:

void GPS_On()
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_SET);
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fc6:	f7f9 fa87 	bl	80034d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009fd0:	4802      	ldr	r0, [pc, #8]	; (8009fdc <GPS_On+0x24>)
 8009fd2:	f7f9 fa81 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8009fd6:	bf00      	nop
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	48000400 	.word	0x48000400

08009fe0 <GPS_Off>:

void GPS_Off()
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11, GPIO_PIN_RESET);
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fee:	f7f9 fa73 	bl	80034d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ff8:	4802      	ldr	r0, [pc, #8]	; (800a004 <GPS_Off+0x24>)
 8009ffa:	f7f9 fa6d 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8009ffe:	bf00      	nop
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	48000400 	.word	0x48000400

0800a008 <GPS_Uart_Irq>:

void GPS_Uart_Irq()
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	af00      	add	r7, sp, #0
    // change_unix(strtol(aRxBuffer, NULL, 10) - 1, &chirp_time);
    gps_done = 2;
 800a00c:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <GPS_Uart_Irq+0x34>)
 800a00e:	2202      	movs	r2, #2
 800a010:	701a      	strb	r2, [r3, #0]

    HAL_UART_Abort(&huart3);
 800a012:	480b      	ldr	r0, [pc, #44]	; (800a040 <GPS_Uart_Irq+0x38>)
 800a014:	f7fe fe5e 	bl	8008cd4 <HAL_UART_Abort>
    /* Disable usart, stop receiving data */
    __HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 800a018:	4b09      	ldr	r3, [pc, #36]	; (800a040 <GPS_Uart_Irq+0x38>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4b08      	ldr	r3, [pc, #32]	; (800a040 <GPS_Uart_Irq+0x38>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0220 	bic.w	r2, r2, #32
 800a026:	601a      	str	r2, [r3, #0]
    /* Disable Main Timer, since we have received GPS time */
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800a028:	4b06      	ldr	r3, [pc, #24]	; (800a044 <GPS_Uart_Irq+0x3c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <GPS_Uart_Irq+0x3c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0202 	bic.w	r2, r2, #2
 800a036:	60da      	str	r2, [r3, #12]
}
 800a038:	bf00      	nop
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000350 	.word	0x20000350
 800a040:	20001058 	.word	0x20001058
 800a044:	200012c8 	.word	0x200012c8

0800a048 <GPS_Get_Time>:

Chirp_Time GPS_Get_Time()
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	chirp_isr.state = ISR_GPS;
 800a050:	4b36      	ldr	r3, [pc, #216]	; (800a12c <GPS_Get_Time+0xe4>)
 800a052:	2208      	movs	r2, #8
 800a054:	701a      	strb	r2, [r3, #0]
    gps_state = GPS_GET_TIME;
 800a056:	4b36      	ldr	r3, [pc, #216]	; (800a130 <GPS_Get_Time+0xe8>)
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]

    __HAL_UART_DISABLE(&huart3);
 800a05c:	4b35      	ldr	r3, [pc, #212]	; (800a134 <GPS_Get_Time+0xec>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	4b34      	ldr	r3, [pc, #208]	; (800a134 <GPS_Get_Time+0xec>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0201 	bic.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE(&huart3);
 800a06c:	4b31      	ldr	r3, [pc, #196]	; (800a134 <GPS_Get_Time+0xec>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b30      	ldr	r3, [pc, #192]	; (800a134 <GPS_Get_Time+0xec>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0201 	orr.w	r2, r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
    memset(aRxBuffer, 0, sizeof(aRxBuffer));
 800a07c:	220a      	movs	r2, #10
 800a07e:	2100      	movs	r1, #0
 800a080:	482d      	ldr	r0, [pc, #180]	; (800a138 <GPS_Get_Time+0xf0>)
 800a082:	f017 fcce 	bl	8021a22 <memset>
    memset(&chirp_time, 0, sizeof(chirp_time));
 800a086:	2208      	movs	r2, #8
 800a088:	2100      	movs	r1, #0
 800a08a:	482c      	ldr	r0, [pc, #176]	; (800a13c <GPS_Get_Time+0xf4>)
 800a08c:	f017 fcc9 	bl	8021a22 <memset>

    HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, sizeof(aRxBuffer));
 800a090:	220a      	movs	r2, #10
 800a092:	4929      	ldr	r1, [pc, #164]	; (800a138 <GPS_Get_Time+0xf0>)
 800a094:	4827      	ldr	r0, [pc, #156]	; (800a134 <GPS_Get_Time+0xec>)
 800a096:	f7fe fd7d 	bl	8008b94 <HAL_UART_Receive_IT>

    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_SET);
 800a09a:	2201      	movs	r2, #1
 800a09c:	2104      	movs	r1, #4
 800a09e:	4828      	ldr	r0, [pc, #160]	; (800a140 <GPS_Get_Time+0xf8>)
 800a0a0:	f7f9 fa1a 	bl	80034d8 <HAL_GPIO_WritePin>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a0a4:	4b27      	ldr	r3, [pc, #156]	; (800a144 <GPS_Get_Time+0xfc>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0202 	mvn.w	r2, #2
 800a0ac:	611a      	str	r2, [r3, #16]
    MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(1000000);
 800a0ae:	4b25      	ldr	r3, [pc, #148]	; (800a144 <GPS_Get_Time+0xfc>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	4a23      	ldr	r2, [pc, #140]	; (800a144 <GPS_Get_Time+0xfc>)
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a0bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a0c0:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800a0c2:	4b20      	ldr	r3, [pc, #128]	; (800a144 <GPS_Get_Time+0xfc>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <GPS_Get_Time+0xfc>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0202 	orr.w	r2, r2, #2
 800a0d0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin(GPS_TRIGGER_Port, GPS_TRIGGER_Pin, GPIO_PIN_RESET);
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2104      	movs	r1, #4
 800a0d6:	481a      	ldr	r0, [pc, #104]	; (800a140 <GPS_Get_Time+0xf8>)
 800a0d8:	f7f9 f9fe 	bl	80034d8 <HAL_GPIO_WritePin>
    gps_done = 0;
 800a0dc:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <GPS_Get_Time+0x100>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
    while (gps_done == 0)
 800a0e2:	bf00      	nop
 800a0e4:	4b18      	ldr	r3, [pc, #96]	; (800a148 <GPS_Get_Time+0x100>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0fa      	beq.n	800a0e4 <GPS_Get_Time+0x9c>
        ;
    if (gps_done == 2)
 800a0ee:	4b16      	ldr	r3, [pc, #88]	; (800a148 <GPS_Get_Time+0x100>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d10e      	bne.n	800a116 <GPS_Get_Time+0xce>
    {
        PRINTF("chirp_time:%s\n", aRxBuffer);
 800a0f8:	490f      	ldr	r1, [pc, #60]	; (800a138 <GPS_Get_Time+0xf0>)
 800a0fa:	4814      	ldr	r0, [pc, #80]	; (800a14c <GPS_Get_Time+0x104>)
 800a0fc:	f018 fa9e 	bl	802263c <iprintf>
        change_unix(strtol(aRxBuffer, NULL, 10) - 1, &chirp_time);
 800a100:	220a      	movs	r2, #10
 800a102:	2100      	movs	r1, #0
 800a104:	480c      	ldr	r0, [pc, #48]	; (800a138 <GPS_Get_Time+0xf0>)
 800a106:	f018 fc3f 	bl	8022988 <strtol>
 800a10a:	4603      	mov	r3, r0
 800a10c:	3b01      	subs	r3, #1
 800a10e:	490b      	ldr	r1, [pc, #44]	; (800a13c <GPS_Get_Time+0xf4>)
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff fd79 	bl	8009c08 <change_unix>
    }
    return chirp_time;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4908      	ldr	r1, [pc, #32]	; (800a13c <GPS_Get_Time+0xf4>)
 800a11a:	461a      	mov	r2, r3
 800a11c:	460b      	mov	r3, r1
 800a11e:	cb03      	ldmia	r3!, {r0, r1}
 800a120:	6010      	str	r0, [r2, #0]
 800a122:	6051      	str	r1, [r2, #4]
}
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20000cfc 	.word	0x20000cfc
 800a130:	20000cec 	.word	0x20000cec
 800a134:	20001058 	.word	0x20001058
 800a138:	20000cf0 	.word	0x20000cf0
 800a13c:	20000354 	.word	0x20000354
 800a140:	48000800 	.word	0x48000800
 800a144:	200012c8 	.word	0x200012c8
 800a148:	20000350 	.word	0x20000350
 800a14c:	08025774 	.word	0x08025774

0800a150 <GPS_Conv>:

time_t GPS_Conv(uint16_t year, uint8_t month, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b08f      	sub	sp, #60	; 0x3c
 800a154:	af00      	add	r7, sp, #0
 800a156:	4604      	mov	r4, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	4623      	mov	r3, r4
 800a160:	80fb      	strh	r3, [r7, #6]
 800a162:	4603      	mov	r3, r0
 800a164:	717b      	strb	r3, [r7, #5]
 800a166:	460b      	mov	r3, r1
 800a168:	713b      	strb	r3, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	70fb      	strb	r3, [r7, #3]
    time_t retval = 0;
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	f04f 0400 	mov.w	r4, #0
 800a176:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    struct tm tm;
    tm.tm_year = year - 1900;
 800a17a:	88fb      	ldrh	r3, [r7, #6]
 800a17c:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800a180:	623b      	str	r3, [r7, #32]
    tm.tm_mon = month - 1;
 800a182:	797b      	ldrb	r3, [r7, #5]
 800a184:	3b01      	subs	r3, #1
 800a186:	61fb      	str	r3, [r7, #28]
    tm.tm_mday = date;
 800a188:	793b      	ldrb	r3, [r7, #4]
 800a18a:	61bb      	str	r3, [r7, #24]
    tm.tm_hour = hour;
 800a18c:	78fb      	ldrb	r3, [r7, #3]
 800a18e:	617b      	str	r3, [r7, #20]
    tm.tm_min = min;
 800a190:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a194:	613b      	str	r3, [r7, #16]
    tm.tm_sec = sec;
 800a196:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a19a:	60fb      	str	r3, [r7, #12]
    tm.tm_isdst = -1;
 800a19c:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    retval = mktime(&tm);
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f017 fd1e 	bl	8021be8 <mktime>
 800a1ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    return retval;
 800a1b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	373c      	adds	r7, #60	; 0x3c
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd90      	pop	{r4, r7, pc}
	...

0800a1c0 <GPS_Diff>:

time_t GPS_Diff(Chirp_Time *gps_time, uint16_t start_year, uint8_t start_month, uint8_t start_date, uint8_t start_hour, uint8_t start_min, uint8_t start_sec)
{
 800a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1c2:	b08b      	sub	sp, #44	; 0x2c
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	807b      	strh	r3, [r7, #2]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	707b      	strb	r3, [r7, #1]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	703b      	strb	r3, [r7, #0]
    time_t now = 0;
 800a1da:	f04f 0300 	mov.w	r3, #0
 800a1de:	f04f 0400 	mov.w	r4, #0
 800a1e2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    time_t start = 0;
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	f04f 0400 	mov.w	r4, #0
 800a1ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
    time_t diff = 0;
 800a1f2:	f04f 0300 	mov.w	r3, #0
 800a1f6:	f04f 0400 	mov.w	r4, #0
 800a1fa:	e9c7 3402 	strd	r3, r4, [r7, #8]

    now = GPS_Conv(gps_time->chirp_year, gps_time->chirp_month, gps_time->chirp_date, gps_time->chirp_hour, gps_time->chirp_min, gps_time->chirp_sec);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	8818      	ldrh	r0, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7899      	ldrb	r1, [r3, #2]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	78dc      	ldrb	r4, [r3, #3]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	795d      	ldrb	r5, [r3, #5]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	799b      	ldrb	r3, [r3, #6]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	79d2      	ldrb	r2, [r2, #7]
 800a216:	9201      	str	r2, [sp, #4]
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	462b      	mov	r3, r5
 800a21c:	4622      	mov	r2, r4
 800a21e:	f7ff ff97 	bl	800a150 <GPS_Conv>
 800a222:	e9c7 0106 	strd	r0, r1, [r7, #24]
    start = GPS_Conv(start_year, start_month, start_date, start_hour, start_min, start_sec);
 800a226:	f897 4038 	ldrb.w	r4, [r7, #56]	; 0x38
 800a22a:	783a      	ldrb	r2, [r7, #0]
 800a22c:	7879      	ldrb	r1, [r7, #1]
 800a22e:	8878      	ldrh	r0, [r7, #2]
 800a230:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	4623      	mov	r3, r4
 800a23e:	f7ff ff87 	bl	800a150 <GPS_Conv>
 800a242:	e9c7 0104 	strd	r0, r1, [r7, #16]
    diff = start - now;
 800a246:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a24a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a24e:	1ac9      	subs	r1, r1, r3
 800a250:	eb62 0204 	sbc.w	r2, r2, r4
 800a254:	460d      	mov	r5, r1
 800a256:	4616      	mov	r6, r2
 800a258:	e9c7 5602 	strd	r5, r6, [r7, #8]
    PRINTF("seconds difference = %ld\n", diff);
 800a25c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a260:	4804      	ldr	r0, [pc, #16]	; (800a274 <GPS_Diff+0xb4>)
 800a262:	f018 f9eb 	bl	802263c <iprintf>
    return diff;
 800a266:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	4621      	mov	r1, r4
 800a26e:	3724      	adds	r7, #36	; 0x24
 800a270:	46bd      	mov	sp, r7
 800a272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a274:	08025784 	.word	0x08025784

0800a278 <GPS_Waiting_PPS>:
  * @brief  wait until PPS is normal, then we can read the gps time
  * @param  none
  * @retval none
  */
void GPS_Waiting_PPS(uint32_t PPS_wait)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
    __HAL_GPIO_EXTI_CLEAR_FLAG(GPS_PPS_Pin);
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <GPS_Waiting_PPS+0x40>)
 800a282:	2201      	movs	r2, #1
 800a284:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ( EXTI0_IRQn );
 800a286:	2006      	movs	r0, #6
 800a288:	f7f7 fd35 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    {
        pps_count = 0;
 800a28c:	4b0b      	ldr	r3, [pc, #44]	; (800a2bc <GPS_Waiting_PPS+0x44>)
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
        while (pps_count <= PPS_wait)
 800a292:	e001      	b.n	800a298 <GPS_Waiting_PPS+0x20>
        {
            gpi_watchdog_periodic();
 800a294:	f003 ff9c 	bl	800e1d0 <gpi_watchdog_periodic>
        while (pps_count <= PPS_wait)
 800a298:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <GPS_Waiting_PPS+0x44>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d2f8      	bcs.n	800a294 <GPS_Waiting_PPS+0x1c>
        }
    }
    pps_count = 0;
 800a2a2:	4b06      	ldr	r3, [pc, #24]	; (800a2bc <GPS_Waiting_PPS+0x44>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 800a2a8:	2006      	movs	r0, #6
 800a2aa:	f7f7 fd32 	bl	8001d12 <HAL_NVIC_DisableIRQ>
}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40010400 	.word	0x40010400
 800a2bc:	2000034c 	.word	0x2000034c

0800a2c0 <GPS_Wakeup>:
  * @brief  obtain current gps time to calculate the length of main timer interrupt compare time
  * @param  interval_sec: interval time of interrupt
  * @retval none
  */
void GPS_Wakeup(uint32_t interval_sec)
{
 800a2c0:	b5b0      	push	{r4, r5, r7, lr}
 800a2c2:	b08c      	sub	sp, #48	; 0x30
 800a2c4:	af04      	add	r7, sp, #16
 800a2c6:	60f8      	str	r0, [r7, #12]
    GPS_Get_Time();
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff febc 	bl	800a048 <GPS_Get_Time>
    time_t diff = GPS_Diff(&chirp_time, 1970, 1, 1, 0, 0, 0);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2301      	movs	r3, #1
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a2e4:	4829      	ldr	r0, [pc, #164]	; (800a38c <GPS_Wakeup+0xcc>)
 800a2e6:	f7ff ff6b 	bl	800a1c0 <GPS_Diff>
 800a2ea:	e9c7 0106 	strd	r0, r1, [r7, #24]
    time_t sleep_sec = interval_sec - (time_t)(0 - diff) % interval_sec;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	461c      	mov	r4, r3
 800a2f2:	f04f 0500 	mov.w	r5, #0
 800a2f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2fa:	4250      	negs	r0, r2
 800a2fc:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	461a      	mov	r2, r3
 800a304:	f04f 0300 	mov.w	r3, #0
 800a308:	f7f6 fc78 	bl	8000bfc <__aeabi_ldivmod>
 800a30c:	1aa4      	subs	r4, r4, r2
 800a30e:	eb65 0503 	sbc.w	r5, r5, r3
 800a312:	4623      	mov	r3, r4
 800a314:	462c      	mov	r4, r5
 800a316:	e9c7 3404 	strd	r3, r4, [r7, #16]
    PRINTF("sleep_sec:%lu, version: %x-%x\n", sleep_sec, VERSION_MAJOR, VERSION_NODE);
 800a31a:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <GPS_Wakeup+0xd0>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <GPS_Wakeup+0xd4>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	9200      	str	r2, [sp, #0]
 800a328:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a32c:	481a      	ldr	r0, [pc, #104]	; (800a398 <GPS_Wakeup+0xd8>)
 800a32e:	f018 f985 	bl	802263c <iprintf>
    gps_state = GPS_WAKEUP;
 800a332:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <GPS_Wakeup+0xdc>)
 800a334:	2201      	movs	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a338:	4b19      	ldr	r3, [pc, #100]	; (800a3a0 <GPS_Wakeup+0xe0>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0202 	mvn.w	r2, #2
 800a340:	611a      	str	r2, [r3, #16]

    HAL_NVIC_EnableIRQ( EXTI0_IRQn );
 800a342:	2006      	movs	r0, #6
 800a344:	f7f7 fcd7 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
    // sleep_sec += 1;
    if (sleep_sec > 0)
 800a348:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	f174 0300 	sbcs.w	r3, r4, #0
 800a352:	db11      	blt.n	800a378 <GPS_Wakeup+0xb8>
    {
        pps_count = 0;
 800a354:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <GPS_Wakeup+0xe4>)
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
        while (pps_count <= sleep_sec)
 800a35a:	e003      	b.n	800a364 <GPS_Wakeup+0xa4>
  __ASM volatile ("cpsid i" : : : "memory");
 800a35c:	b672      	cpsid	i
        {
            // enter low-power mode
            gpi_int_disable();

            gpi_sleep();
 800a35e:	f003 ff19 	bl	800e194 <gpi_sleep>
  __ASM volatile ("cpsie i" : : : "memory");
 800a362:	b662      	cpsie	i
        while (pps_count <= sleep_sec)
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <GPS_Wakeup+0xe4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f04f 0400 	mov.w	r4, #0
 800a36c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a370:	4299      	cmp	r1, r3
 800a372:	eb72 0304 	sbcs.w	r3, r2, r4
 800a376:	daf1      	bge.n	800a35c <GPS_Wakeup+0x9c>

            /* wake by the timer interrupt */
            gpi_int_enable();
        }
    }
    pps_count = 0;
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <GPS_Wakeup+0xe4>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ( EXTI0_IRQn );
 800a37e:	2006      	movs	r0, #6
 800a380:	f7f7 fcc7 	bl	8001d12 <HAL_NVIC_DisableIRQ>
}
 800a384:	bf00      	nop
 800a386:	3720      	adds	r7, #32
 800a388:	46bd      	mov	sp, r7
 800a38a:	bdb0      	pop	{r4, r5, r7, pc}
 800a38c:	20000354 	.word	0x20000354
 800a390:	08026d7c 	.word	0x08026d7c
 800a394:	08026d7d 	.word	0x08026d7d
 800a398:	080257a0 	.word	0x080257a0
 800a39c:	20000cec 	.word	0x20000cec
 800a3a0:	200012c8 	.word	0x200012c8
 800a3a4:	2000034c 	.word	0x2000034c

0800a3a8 <GPS_Sleep>:
  * @brief  call this to go into sleep mode, and wake up at whole time point according to GPS time. Should not exceed 263 s, which is the longest duration of main timer
  * @param  interval_sec: interval time of interrupt
  * @retval none
  */
void GPS_Sleep(uint32_t interval_sec)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    GPS_Wakeup(interval_sec);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff85 	bl	800a2c0 <GPS_Wakeup>
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <gps_main_timer_isr>:

void gps_main_timer_isr(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800a3c4:	f003 ff04 	bl	800e1d0 <gpi_watchdog_periodic>
    #if GPS_DATA
    if (gps_state == GPS_GET_TIME)
 800a3c8:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <gps_main_timer_isr+0x3c>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d112      	bne.n	800a3f6 <gps_main_timer_isr+0x36>
    {
        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <gps_main_timer_isr+0x40>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0202 	mvn.w	r2, #2
 800a3d8:	611a      	str	r2, [r3, #16]

        __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <gps_main_timer_isr+0x40>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <gps_main_timer_isr+0x40>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f022 0202 	bic.w	r2, r2, #2
 800a3e8:	60da      	str	r2, [r3, #12]
        gps_done = 1;
 800a3ea:	4b06      	ldr	r3, [pc, #24]	; (800a404 <gps_main_timer_isr+0x44>)
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	701a      	strb	r2, [r3, #0]
        PRINTF("gps timeout!\n");
 800a3f0:	4805      	ldr	r0, [pc, #20]	; (800a408 <gps_main_timer_isr+0x48>)
 800a3f2:	f018 f9ab 	bl	802274c <puts>
    }
    #endif
}
 800a3f6:	bf00      	nop
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000cec 	.word	0x20000cec
 800a400:	200012c8 	.word	0x200012c8
 800a404:	20000350 	.word	0x20000350
 800a408:	080257c0 	.word	0x080257c0

0800a40c <TIM2_IRQHandler>:
//***** Global Functions ***************************************************************************

//Timer2 IRQ dispatcher
void __attribute__((naked)) MAIN_TIMER_ISR_NAME()
{
	__asm__ volatile
 800a40c:	4804      	ldr	r0, [pc, #16]	; (800a420 <TIM2_IRQHandler+0x14>)
 800a40e:	7800      	ldrb	r0, [r0, #0]
 800a410:	4487      	add	pc, r0
 800a412:	bf00      	nop
 800a414:	f005 bb2e 	b.w	800fa74 <mixer_main_timer_isr>
 800a418:	f001 bafe 	b.w	800ba18 <topo_main_timer_isr>
 800a41c:	f7ff bfd0 	b.w	800a3c0 <gps_main_timer_isr>
 800a420:	20000cfc 	.word	0x20000cfc
		"b.w	gps_main_timer_isr			\n"		// 8: gps_main_timer_isr (don't return to here)
		"1:									\n"
		".word	%c0							\n"
		: : "i"(&chirp_isr.state)
	);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <SX1276OnDio0Irq>:

//SX1276DIO0 IRQ dispatcher
void __attribute__((naked)) SX1276OnDio0Irq()
{
	__asm__ volatile
 800a428:	4803      	ldr	r0, [pc, #12]	; (800a438 <SX1276OnDio0Irq+0x10>)
 800a42a:	7800      	ldrb	r0, [r0, #0]
 800a42c:	4487      	add	pc, r0
 800a42e:	bf00      	nop
 800a430:	f004 bc34 	b.w	800ec9c <mixer_dio0_isr>
 800a434:	f001 b962 	b.w	800b6fc <topo_dio0_isr>
 800a438:	20000cfc 	.word	0x20000cfc
		"b.w	topo_dio0_isr				\n"		// 4: topo_dio0_isr (don't return to here)
		"1:									\n"
		".word	%c0							\n"
		: : "i"(&chirp_isr.state)
	);
}
 800a43c:	bf00      	nop
 800a43e:	bf00      	nop

0800a440 <SX1276OnDio3Irq>:
// }

//SX1276DIO3 IRQ dispatcher
void __attribute__((naked)) SX1276OnDio3Irq()
{
	__asm__ volatile
 800a440:	f005 b9ba 	b.w	800f7b8 <mixer_dio3_isr>
	(
		"b.w	mixer_dio3_isr		 		\n"		// 0: mixer_dio3_isr (don't return to here)
	);
}
 800a444:	bf00      	nop
	...

0800a448 <NVIC_SystemReset>:
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a44c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <NVIC_SystemReset+0x20>)
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a458:	4903      	ldr	r1, [pc, #12]	; (800a468 <NVIC_SystemReset+0x20>)
 800a45a:	4b04      	ldr	r3, [pc, #16]	; (800a46c <NVIC_SystemReset+0x24>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	60cb      	str	r3, [r1, #12]
 800a460:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a464:	bf00      	nop
    __NOP();
 800a466:	e7fd      	b.n	800a464 <NVIC_SystemReset+0x1c>
 800a468:	e000ed00 	.word	0xe000ed00
 800a46c:	05fa0004 	.word	0x05fa0004

0800a470 <lbt_pesudo_channel>:


//**************************************************************************************************
//***** Global Functions ***************************************************************************
uint8_t lbt_pesudo_channel(uint8_t channel_total, uint8_t last_channel, uint16_t pesudo_value, uint32_t lbt_available)
{
 800a470:	b5b0      	push	{r4, r5, r7, lr}
 800a472:	b08e      	sub	sp, #56	; 0x38
 800a474:	af00      	add	r7, sp, #0
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	4603      	mov	r3, r0
 800a47a:	71fb      	strb	r3, [r7, #7]
 800a47c:	460b      	mov	r3, r1
 800a47e:	71bb      	strb	r3, [r7, #6]
 800a480:	4613      	mov	r3, r2
 800a482:	80bb      	strh	r3, [r7, #4]
 800a484:	466b      	mov	r3, sp
 800a486:	461d      	mov	r5, r3
    /* make sure the total number of channel is less than 32 */
    assert_reset(channel_total <= sizeof(uint32_t) * 8);
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d90e      	bls.n	800a4ac <lbt_pesudo_channel+0x3c>
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	2b20      	cmp	r3, #32
 800a492:	d801      	bhi.n	800a498 <lbt_pesudo_channel+0x28>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <lbt_pesudo_channel+0x2a>
 800a498:	2300      	movs	r3, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f018 f8ce 	bl	802263c <iprintf>
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d902      	bls.n	800a4ac <lbt_pesudo_channel+0x3c>
  __ASM volatile ("cpsid f" : : : "memory");
 800a4a6:	b671      	cpsid	f
 800a4a8:	f7ff ffce 	bl	800a448 <NVIC_SystemReset>

    /* init seed */
    srand(pesudo_value);
 800a4ac:	88bb      	ldrh	r3, [r7, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f018 f954 	bl	802275c <srand>
    rand();
 800a4b4:	f018 f976 	bl	80227a4 <rand>

    uint32_t help_bitmask = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint32_t lbt = lbt_available & (~(1 << last_channel));
 800a4bc:	79bb      	ldrb	r3, [r7, #6]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c4:	43db      	mvns	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	61bb      	str	r3, [r7, #24]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
}

static ALWAYS_INLINE uint_fast8_t gpi_popcnt_32(uint32_t x)
{
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	82fb      	strh	r3, [r7, #22]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4d8:	8afb      	ldrh	r3, [r7, #22]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	757b      	strb	r3, [r7, #21]
	return gpi_popcnt_lut[x];
 800a4de:	7d7b      	ldrb	r3, [r7, #21]
 800a4e0:	4a52      	ldr	r2, [pc, #328]	; (800a62c <lbt_pesudo_channel+0x1bc>)
 800a4e2:	5cd3      	ldrb	r3, [r2, r3]
 800a4e4:	4619      	mov	r1, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4e6:	8afb      	ldrh	r3, [r7, #22]
 800a4e8:	0a1b      	lsrs	r3, r3, #8
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	753b      	strb	r3, [r7, #20]
	return gpi_popcnt_lut[x];
 800a4f0:	7d3b      	ldrb	r3, [r7, #20]
 800a4f2:	4a4e      	ldr	r2, [pc, #312]	; (800a62c <lbt_pesudo_channel+0x1bc>)
 800a4f4:	5cd3      	ldrb	r3, [r2, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a4f6:	18ca      	adds	r2, r1, r3
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	0c1b      	lsrs	r3, r3, #16
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	827b      	strh	r3, [r7, #18]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a500:	8a7b      	ldrh	r3, [r7, #18]
 800a502:	b2db      	uxtb	r3, r3
 800a504:	747b      	strb	r3, [r7, #17]
	return gpi_popcnt_lut[x];
 800a506:	7c7b      	ldrb	r3, [r7, #17]
 800a508:	4948      	ldr	r1, [pc, #288]	; (800a62c <lbt_pesudo_channel+0x1bc>)
 800a50a:	5ccb      	ldrb	r3, [r1, r3]
 800a50c:	4618      	mov	r0, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a50e:	8a7b      	ldrh	r3, [r7, #18]
 800a510:	0a1b      	lsrs	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	b2db      	uxtb	r3, r3
 800a516:	743b      	strb	r3, [r7, #16]
	return gpi_popcnt_lut[x];
 800a518:	7c3b      	ldrb	r3, [r7, #16]
 800a51a:	4944      	ldr	r1, [pc, #272]	; (800a62c <lbt_pesudo_channel+0x1bc>)
 800a51c:	5ccb      	ldrb	r3, [r1, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 800a51e:	4403      	add	r3, r0
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 800a520:	4413      	add	r3, r2

    uint8_t lbt_len = gpi_popcnt_32(lbt);
 800a522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    assert_reset((lbt_len <= channel_total) && (lbt_len > 0));
 800a526:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d803      	bhi.n	800a538 <lbt_pesudo_channel+0xc8>
 800a530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a534:	2b00      	cmp	r3, #0
 800a536:	d11a      	bne.n	800a56e <lbt_pesudo_channel+0xfe>
 800a538:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a53c:	79fb      	ldrb	r3, [r7, #7]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d805      	bhi.n	800a54e <lbt_pesudo_channel+0xde>
 800a542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <lbt_pesudo_channel+0xde>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <lbt_pesudo_channel+0xe0>
 800a54e:	2300      	movs	r3, #0
 800a550:	4618      	mov	r0, r3
 800a552:	f018 f873 	bl	802263c <iprintf>
 800a556:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d806      	bhi.n	800a56e <lbt_pesudo_channel+0xfe>
 800a560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <lbt_pesudo_channel+0xfe>
 800a568:	b671      	cpsid	f
 800a56a:	f7ff ff6d 	bl	800a448 <NVIC_SystemReset>

    uint8_t lookupTable[lbt_len];
 800a56e:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800a572:	4603      	mov	r3, r0
 800a574:	3b01      	subs	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
 800a578:	b2c1      	uxtb	r1, r0
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	00d4      	lsls	r4, r2, #3
 800a588:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a58c:	00cb      	lsls	r3, r1, #3
 800a58e:	b2c1      	uxtb	r1, r0
 800a590:	f04f 0200 	mov.w	r2, #0
 800a594:	f04f 0300 	mov.w	r3, #0
 800a598:	f04f 0400 	mov.w	r4, #0
 800a59c:	00d4      	lsls	r4, r2, #3
 800a59e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a5a2:	00cb      	lsls	r3, r1, #3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	3307      	adds	r3, #7
 800a5a8:	08db      	lsrs	r3, r3, #3
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	ebad 0d03 	sub.w	sp, sp, r3
 800a5b0:	466b      	mov	r3, sp
 800a5b2:	3300      	adds	r3, #0
 800a5b4:	623b      	str	r3, [r7, #32]
    uint8_t i = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while (lbt)
 800a5bc:	e020      	b.n	800a600 <lbt_pesudo_channel+0x190>
    {
        // isolate first set bit
        #if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
            help_bitmask = lbt & -lbt;			// isolate LSB
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	425b      	negs	r3, r3
 800a5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	60bb      	str	r3, [r7, #8]
		asm
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bf0e      	itee	eq
 800a5d6:	3b01      	subeq	r3, #1
 800a5d8:	fa93 f3a3 	rbitne	r3, r3
 800a5dc:	fab3 f383 	clzne	r3, r3
 800a5e0:	461c      	mov	r4, r3
	return y;
 800a5e2:	4621      	mov	r1, r4
        #else
            #error TODO						// isolate MSB
        #endif

        lookupTable[i++] = gpi_get_lsb_32(lbt);
 800a5e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	b2c9      	uxtb	r1, r1
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	5499      	strb	r1, [r3, r2]
        lbt &= ~help_bitmask;
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	43db      	mvns	r3, r3
 800a5fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	633b      	str	r3, [r7, #48]	; 0x30
    while (lbt)
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1db      	bne.n	800a5be <lbt_pesudo_channel+0x14e>
    }
    uint8_t value = lookupTable[rand() % lbt_len];
 800a606:	f018 f8cd 	bl	80227a4 <rand>
 800a60a:	4602      	mov	r2, r0
 800a60c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a610:	fb92 f1f3 	sdiv	r1, r2, r3
 800a614:	fb03 f301 	mul.w	r3, r3, r1
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	6a3a      	ldr	r2, [r7, #32]
 800a61c:	5cd3      	ldrb	r3, [r2, r3]
 800a61e:	77fb      	strb	r3, [r7, #31]

    return value;
 800a620:	7ffb      	ldrb	r3, [r7, #31]
 800a622:	46ad      	mov	sp, r5
}
 800a624:	4618      	mov	r0, r3
 800a626:	3738      	adds	r7, #56	; 0x38
 800a628:	46bd      	mov	sp, r7
 800a62a:	bdb0      	pop	{r4, r5, r7, pc}
 800a62c:	08026dd4 	.word	0x08026dd4

0800a630 <lbt_update_channel>:

uint32_t lbt_update_channel(uint32_t tx_us, uint8_t tx_channel)
{
 800a630:	b5b0      	push	{r4, r5, r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
    chirp_config.lbt_channel_time_us[tx_channel] += tx_us;
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	4a28      	ldr	r2, [pc, #160]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a640:	331a      	adds	r3, #26
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	6859      	ldr	r1, [r3, #4]
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	440a      	add	r2, r1
 800a64e:	4924      	ldr	r1, [pc, #144]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a650:	331a      	adds	r3, #26
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	440b      	add	r3, r1
 800a656:	605a      	str	r2, [r3, #4]
    chirp_config.lbt_channel_time_stats_us[tx_channel] += tx_us;
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	4a21      	ldr	r2, [pc, #132]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a65c:	3324      	adds	r3, #36	; 0x24
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	6859      	ldr	r1, [r3, #4]
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	440a      	add	r2, r1
 800a66a:	491d      	ldr	r1, [pc, #116]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a66c:	3324      	adds	r3, #36	; 0x24
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	605a      	str	r2, [r3, #4]
    if(tx_us)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d027      	beq.n	800a6ca <lbt_update_channel+0x9a>

    /* not enough for the next tx */
    // TODO:
    if ((chirp_config.lbt_channel_time_us[tx_channel]) > LBT_TX_TIME_S * 1e6 - tx_us)
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	4a18      	ldr	r2, [pc, #96]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a67e:	331a      	adds	r3, #26
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	4618      	mov	r0, r3
 800a688:	f7f5 ff46 	bl	8000518 <__aeabi_ui2d>
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7f5 ff41 	bl	8000518 <__aeabi_ui2d>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	a10f      	add	r1, pc, #60	; (adr r1, 800a6d8 <lbt_update_channel+0xa8>)
 800a69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a0:	f7f5 fdfc 	bl	800029c <__aeabi_dsub>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	f7f6 fa3e 	bl	8000b2c <__aeabi_dcmpgt>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <lbt_update_channel+0x9a>
        chirp_config.lbt_channel_available &= ~(1 << tx_channel);
 800a6b6:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ba:	78fa      	ldrb	r2, [r7, #3]
 800a6bc:	2101      	movs	r1, #1
 800a6be:	fa01 f202 	lsl.w	r2, r1, r2
 800a6c2:	43d2      	mvns	r2, r2
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a6c8:	6613      	str	r3, [r2, #96]	; 0x60
    return chirp_config.lbt_channel_available;
 800a6ca:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <lbt_update_channel+0xb0>)
 800a6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	80000000 	.word	0x80000000
 800a6dc:	41ead274 	.word	0x41ead274
 800a6e0:	20001430 	.word	0x20001430

0800a6e4 <lbt_check_time>:

void lbt_check_time()
{
 800a6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e6:	b08d      	sub	sp, #52	; 0x34
 800a6e8:	af04      	add	r7, sp, #16
	// Chirp_Time gps_time = GPS_Get_Time();
    // time_t diff = GPS_Diff(&gps_time, chirp_config.lbt_init_time.chirp_year, chirp_config.lbt_init_time.chirp_month, chirp_config.lbt_init_time.chirp_date, chirp_config.lbt_init_time.chirp_hour, chirp_config.lbt_init_time.chirp_min, chirp_config.lbt_init_time.chirp_sec);
	Chirp_Time gps_time = RTC_GetTime();
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f8d5 	bl	800a89c <RTC_GetTime>
    time_t diff = GPS_Diff(&gps_time, chirp_config.lbt_init_time.chirp_year, chirp_config.lbt_init_time.chirp_month, chirp_config.lbt_init_time.chirp_date, chirp_config.lbt_init_time.chirp_hour, chirp_config.lbt_init_time.chirp_min, chirp_config.lbt_init_time.chirp_sec);
 800a6f2:	4b2d      	ldr	r3, [pc, #180]	; (800a7a8 <lbt_check_time+0xc4>)
 800a6f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6f8:	b29c      	uxth	r4, r3
 800a6fa:	4b2b      	ldr	r3, [pc, #172]	; (800a7a8 <lbt_check_time+0xc4>)
 800a6fc:	f893 5066 	ldrb.w	r5, [r3, #102]	; 0x66
 800a700:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <lbt_check_time+0xc4>)
 800a702:	f893 6067 	ldrb.w	r6, [r3, #103]	; 0x67
 800a706:	4b28      	ldr	r3, [pc, #160]	; (800a7a8 <lbt_check_time+0xc4>)
 800a708:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a70c:	4a26      	ldr	r2, [pc, #152]	; (800a7a8 <lbt_check_time+0xc4>)
 800a70e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800a712:	4925      	ldr	r1, [pc, #148]	; (800a7a8 <lbt_check_time+0xc4>)
 800a714:	f891 106b 	ldrb.w	r1, [r1, #107]	; 0x6b
 800a718:	4638      	mov	r0, r7
 800a71a:	9102      	str	r1, [sp, #8]
 800a71c:	9201      	str	r2, [sp, #4]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	4633      	mov	r3, r6
 800a722:	462a      	mov	r2, r5
 800a724:	4621      	mov	r1, r4
 800a726:	f7ff fd4b 	bl	800a1c0 <GPS_Diff>
 800a72a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    if (ABS(diff) >= 3600)
 800a72e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a732:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800a736:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f174 0200 	sbcs.w	r2, r4, #0
 800a740:	da02      	bge.n	800a748 <lbt_check_time+0x64>
 800a742:	425b      	negs	r3, r3
 800a744:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800a748:	4619      	mov	r1, r3
 800a74a:	4622      	mov	r2, r4
 800a74c:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a750:	f04f 0400 	mov.w	r4, #0
 800a754:	428b      	cmp	r3, r1
 800a756:	eb74 0302 	sbcs.w	r3, r4, r2
 800a75a:	da21      	bge.n	800a7a0 <lbt_check_time+0xbc>
    {
        memcpy(&chirp_config.lbt_init_time, &gps_time, sizeof(Chirp_Time));
 800a75c:	463b      	mov	r3, r7
 800a75e:	2208      	movs	r2, #8
 800a760:	4619      	mov	r1, r3
 800a762:	4812      	ldr	r0, [pc, #72]	; (800a7ac <lbt_check_time+0xc8>)
 800a764:	f017 f952 	bl	8021a0c <memcpy>
        memset((uint32_t)&chirp_config.lbt_channel_time_us[0], 0, sizeof(chirp_config.lbt_channel_time_us));
 800a768:	2228      	movs	r2, #40	; 0x28
 800a76a:	2100      	movs	r1, #0
 800a76c:	4810      	ldr	r0, [pc, #64]	; (800a7b0 <lbt_check_time+0xcc>)
 800a76e:	f017 f958 	bl	8021a22 <memset>
        int32_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 800a772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a776:	61fb      	str	r3, [r7, #28]
        uint32_t i;
        for (i = sizeof(uint32_t) * 8; i-- > chirp_config.lbt_channel_total;)
 800a778:	2320      	movs	r3, #32
 800a77a:	61bb      	str	r3, [r7, #24]
 800a77c:	e002      	b.n	800a784 <lbt_check_time+0xa0>
            mask >>= 1;
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	105b      	asrs	r3, r3, #1
 800a782:	61fb      	str	r3, [r7, #28]
        for (i = sizeof(uint32_t) * 8; i-- > chirp_config.lbt_channel_total;)
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	1e5a      	subs	r2, r3, #1
 800a788:	61ba      	str	r2, [r7, #24]
 800a78a:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <lbt_check_time+0xc4>)
 800a78c:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 800a790:	4293      	cmp	r3, r2
 800a792:	d8f4      	bhi.n	800a77e <lbt_check_time+0x9a>
        chirp_config.lbt_channel_available = ~(mask << 1);
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	43db      	mvns	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <lbt_check_time+0xc4>)
 800a79e:	661a      	str	r2, [r3, #96]	; 0x60
    }
}
 800a7a0:	bf00      	nop
 800a7a2:	3724      	adds	r7, #36	; 0x24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a8:	20001430 	.word	0x20001430
 800a7ac:	20001494 	.word	0x20001494
 800a7b0:	2000149c 	.word	0x2000149c

0800a7b4 <RTC_Wakeup_Enable>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

void RTC_Wakeup_Enable()
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
    /* Clear the EXTI's line Flag for RTC WakeUpTimer */
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <RTC_Wakeup_Enable+0x30>)
 800a7ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7be:	615a      	str	r2, [r3, #20]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a7c0:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <RTC_Wakeup_Enable+0x34>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <RTC_Wakeup_Enable+0x34>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a7d0:	60da      	str	r2, [r3, #12]

    /* Configure the Wakeup Timer counter */
    // 2048 = 32768 (LSE) / 16 (RTC_WAKEUPCLOCK_RTCCLK_DIV16)
    // set 1 second
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7d8:	4803      	ldr	r0, [pc, #12]	; (800a7e8 <RTC_Wakeup_Enable+0x34>)
 800a7da:	f7fc fc69 	bl	80070b0 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a7de:	bf00      	nop
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40010400 	.word	0x40010400
 800a7e8:	20001240 	.word	0x20001240

0800a7ec <RTC_WKUP_IRQHandler>:

void RTC_TIMER_ISR_NAME(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <RTC_WKUP_IRQHandler+0x38>)
 800a7f2:	221f      	movs	r2, #31
 800a7f4:	619a      	str	r2, [r3, #24]

    /* Clear the EXTI's line Flag for RTC WakeUpTimer */
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <RTC_WKUP_IRQHandler+0x3c>)
 800a7f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a7fc:	615a      	str	r2, [r3, #20]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <RTC_WKUP_IRQHandler+0x40>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <RTC_WKUP_IRQHandler+0x40>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a80e:	60da      	str	r2, [r3, #12]

    gpi_watchdog_periodic();
 800a810:	f003 fcde 	bl	800e1d0 <gpi_watchdog_periodic>
    rtc_count++;
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <RTC_WKUP_IRQHandler+0x44>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	4a05      	ldr	r2, [pc, #20]	; (800a830 <RTC_WKUP_IRQHandler+0x44>)
 800a81c:	6013      	str	r3, [r2, #0]
}
 800a81e:	bf00      	nop
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	40007000 	.word	0x40007000
 800a828:	40010400 	.word	0x40010400
 800a82c:	20001240 	.word	0x20001240
 800a830:	2000035c 	.word	0x2000035c

0800a834 <RTC_ModifyTime>:
  * @param  mintue: 00–59
  * @param  second: 00–59
  * @retval None
  */
void RTC_ModifyTime(uint8_t year, uint8_t month, uint8_t date, uint8_t day, uint8_t hour, uint8_t mintue, uint8_t second)
{
 800a834:	b590      	push	{r4, r7, lr}
 800a836:	b089      	sub	sp, #36	; 0x24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	461a      	mov	r2, r3
 800a842:	4623      	mov	r3, r4
 800a844:	71fb      	strb	r3, [r7, #7]
 800a846:	4603      	mov	r3, r0
 800a848:	71bb      	strb	r3, [r7, #6]
 800a84a:	460b      	mov	r3, r1
 800a84c:	717b      	strb	r3, [r7, #5]
 800a84e:	4613      	mov	r3, r2
 800a850:	713b      	strb	r3, [r7, #4]
    RTC_TimeTypeDef nTime;
    RTC_DateTypeDef nDate;

    nTime.Hours = hour;
 800a852:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a856:	733b      	strb	r3, [r7, #12]
    nTime.Minutes = mintue;
 800a858:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a85c:	737b      	strb	r3, [r7, #13]
    nTime.Seconds = second;
 800a85e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a862:	73bb      	strb	r3, [r7, #14]
    nDate.WeekDay = day;
 800a864:	793b      	ldrb	r3, [r7, #4]
 800a866:	723b      	strb	r3, [r7, #8]
    nDate.Month = month;
 800a868:	79bb      	ldrb	r3, [r7, #6]
 800a86a:	727b      	strb	r3, [r7, #9]
    nDate.Date = date;
 800a86c:	797b      	ldrb	r3, [r7, #5]
 800a86e:	72bb      	strb	r3, [r7, #10]
    nDate.Year = year;
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	72fb      	strb	r3, [r7, #11]
    HAL_RTC_SetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	2200      	movs	r2, #0
 800a87a:	4619      	mov	r1, r3
 800a87c:	4806      	ldr	r0, [pc, #24]	; (800a898 <RTC_ModifyTime+0x64>)
 800a87e:	f7fc f979 	bl	8006b74 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	2200      	movs	r2, #0
 800a888:	4619      	mov	r1, r3
 800a88a:	4803      	ldr	r0, [pc, #12]	; (800a898 <RTC_ModifyTime+0x64>)
 800a88c:	f7fc fa6b 	bl	8006d66 <HAL_RTC_SetDate>
}
 800a890:	bf00      	nop
 800a892:	3724      	adds	r7, #36	; 0x24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd90      	pop	{r4, r7, pc}
 800a898:	20001240 	.word	0x20001240

0800a89c <RTC_GetTime>:

Chirp_Time RTC_GetTime(void)
{
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b08f      	sub	sp, #60	; 0x3c
 800a8a0:	af04      	add	r7, sp, #16
 800a8a2:	6078      	str	r0, [r7, #4]
    Chirp_Time RTC_Time;
    RTC_TimeTypeDef nTime;
    RTC_DateTypeDef nDate;
    HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 800a8a4:	f107 030c 	add.w	r3, r7, #12
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4823      	ldr	r0, [pc, #140]	; (800a93c <RTC_GetTime+0xa0>)
 800a8ae:	f7fc f9fe 	bl	8006cae <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &nDate, RTC_FORMAT_BIN);
 800a8b2:	f107 0308 	add.w	r3, r7, #8
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4820      	ldr	r0, [pc, #128]	; (800a93c <RTC_GetTime+0xa0>)
 800a8bc:	f7fc fada 	bl	8006e74 <HAL_RTC_GetDate>
    RTC_Time.chirp_year = 2000 + nDate.Year;
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	843b      	strh	r3, [r7, #32]
    RTC_Time.chirp_month = nDate.Month;
 800a8cc:	7a7b      	ldrb	r3, [r7, #9]
 800a8ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RTC_Time.chirp_date = nDate.Date;
 800a8d2:	7abb      	ldrb	r3, [r7, #10]
 800a8d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    RTC_Time.chirp_day = nDate.WeekDay;
 800a8d8:	7a3b      	ldrb	r3, [r7, #8]
 800a8da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    RTC_Time.chirp_hour = nTime.Hours;
 800a8de:	7b3b      	ldrb	r3, [r7, #12]
 800a8e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    RTC_Time.chirp_min = nTime.Minutes;
 800a8e4:	7b7b      	ldrb	r3, [r7, #13]
 800a8e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    RTC_Time.chirp_sec = nTime.Seconds;
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	PRINTF("RTC_GetTime: %d-%d-%d %d:%d:%d week: %d\n", RTC_Time.chirp_year, RTC_Time.chirp_month, RTC_Time.chirp_date, RTC_Time.chirp_hour, RTC_Time.chirp_min, RTC_Time.chirp_sec, RTC_Time.chirp_day);
 800a8f0:	8c3b      	ldrh	r3, [r7, #32]
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8f8:	461d      	mov	r5, r3
 800a8fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8fe:	461e      	mov	r6, r3
 800a900:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a904:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a908:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800a90c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800a910:	9003      	str	r0, [sp, #12]
 800a912:	9102      	str	r1, [sp, #8]
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	4633      	mov	r3, r6
 800a91a:	462a      	mov	r2, r5
 800a91c:	4621      	mov	r1, r4
 800a91e:	4808      	ldr	r0, [pc, #32]	; (800a940 <RTC_GetTime+0xa4>)
 800a920:	f017 fe8c 	bl	802263c <iprintf>

    return RTC_Time;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	461a      	mov	r2, r3
 800a928:	f107 0320 	add.w	r3, r7, #32
 800a92c:	cb03      	ldmia	r3!, {r0, r1}
 800a92e:	6010      	str	r0, [r2, #0]
 800a930:	6051      	str	r1, [r2, #4]
}
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	372c      	adds	r7, #44	; 0x2c
 800a936:	46bd      	mov	sp, r7
 800a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20001240 	.word	0x20001240
 800a940:	080257d0 	.word	0x080257d0

0800a944 <RTC_Waiting_Count>:
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_WAKEUPTIMER_DISABLE_IT(&hrtc, RTC_IT_WUT);
}

void RTC_Waiting_Count(uint32_t Count_wait)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
    PRINTF("RTC_Waiting_Count:%lu\n", Count_wait);
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4814      	ldr	r0, [pc, #80]	; (800a9a0 <RTC_Waiting_Count+0x5c>)
 800a950:	f017 fe74 	bl	802263c <iprintf>

    if (Count_wait > 1)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d91d      	bls.n	800a996 <RTC_Waiting_Count+0x52>
    {
        Count_wait = Count_wait;
        RTC_Wakeup_Enable();
 800a95a:	f7ff ff2b 	bl	800a7b4 <RTC_Wakeup_Enable>
        {
            rtc_count = 0;
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <RTC_Waiting_Count+0x60>)
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]
            while (rtc_count <= Count_wait)
 800a964:	e00c      	b.n	800a980 <RTC_Waiting_Count+0x3c>
            {
                PRINTF("rtc:%lu\n", rtc_count);
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <RTC_Waiting_Count+0x60>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4619      	mov	r1, r3
 800a96c:	480e      	ldr	r0, [pc, #56]	; (800a9a8 <RTC_Waiting_Count+0x64>)
 800a96e:	f017 fe65 	bl	802263c <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a972:	b672      	cpsid	i
                // enter low-power mode
                gpi_int_disable();

                // gpi_sleep();
                HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 800a974:	2001      	movs	r0, #1
 800a976:	f7fa fe1b 	bl	80055b0 <HAL_PWREx_EnterSTOP1Mode>
  __ASM volatile ("cpsie i" : : : "memory");
 800a97a:	b662      	cpsie	i

                /* wake by the timer interrupt */
                gpi_int_enable();
                SystemClock_Config();
 800a97c:	f003 f85e 	bl	800da3c <SystemClock_Config>
            while (rtc_count <= Count_wait)
 800a980:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <RTC_Waiting_Count+0x60>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	429a      	cmp	r2, r3
 800a988:	d2ed      	bcs.n	800a966 <RTC_Waiting_Count+0x22>
            }
        }
        rtc_count = 0;
 800a98a:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <RTC_Waiting_Count+0x60>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]

        /* Disable the Wakeup Timer */
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a990:	4806      	ldr	r0, [pc, #24]	; (800a9ac <RTC_Waiting_Count+0x68>)
 800a992:	f7fc fc21 	bl	80071d8 <HAL_RTCEx_DeactivateWakeUpTimer>
    }
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08025808 	.word	0x08025808
 800a9a4:	2000035c 	.word	0x2000035c
 800a9a8:	080257fc 	.word	0x080257fc
 800a9ac:	20001240 	.word	0x20001240

0800a9b0 <RTC_Waiting_Count_Sleep>:


void RTC_Waiting_Count_Sleep(uint32_t Count_wait)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
    PRINTF("RTC_Waiting_Count:%lu\n", Count_wait);
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	482c      	ldr	r0, [pc, #176]	; (800aa6c <RTC_Waiting_Count_Sleep+0xbc>)
 800a9bc:	f017 fe3e 	bl	802263c <iprintf>

    if (Count_wait > 1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d94e      	bls.n	800aa64 <RTC_Waiting_Count_Sleep+0xb4>
    {
        Count_wait = Count_wait;
        RTC_Wakeup_Enable();
 800a9c6:	f7ff fef5 	bl	800a7b4 <RTC_Wakeup_Enable>
        {
            rtc_count = 0;
 800a9ca:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <RTC_Waiting_Count_Sleep+0xc0>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
            while (rtc_count <= Count_wait)
 800a9d0:	e03d      	b.n	800aa4e <RTC_Waiting_Count_Sleep+0x9e>
            {
                PRINTF("rtc:%lu\n", rtc_count);
 800a9d2:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <RTC_Waiting_Count_Sleep+0xc0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4826      	ldr	r0, [pc, #152]	; (800aa74 <RTC_Waiting_Count_Sleep+0xc4>)
 800a9da:	f017 fe2f 	bl	802263c <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a9de:	b672      	cpsid	i
                // enter low-power mode
                gpi_int_disable();

                #if ENERGEST_CONF_ON
                ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800a9e2:	79db      	ldrb	r3, [r3, #7]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00d      	beq.n	800aa04 <RTC_Waiting_Count_Sleep+0x54>
 800a9e8:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <RTC_Waiting_Count_Sleep+0xcc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ee:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <RTC_Waiting_Count_Sleep+0xd0>)
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	4b23      	ldr	r3, [pc, #140]	; (800aa84 <RTC_Waiting_Count_Sleep+0xd4>)
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <RTC_Waiting_Count_Sleep+0xd4>)
 800a9fc:	61d3      	str	r3, [r2, #28]
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	71da      	strb	r2, [r3, #7]
 800aa04:	4b1d      	ldr	r3, [pc, #116]	; (800aa7c <RTC_Waiting_Count_Sleep+0xcc>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ENERGEST_ON(ENERGEST_TYPE_LPM);
 800aa0a:	4a1d      	ldr	r2, [pc, #116]	; (800aa80 <RTC_Waiting_Count_Sleep+0xd0>)
 800aa0c:	6213      	str	r3, [r2, #32]
 800aa0e:	4b1a      	ldr	r3, [pc, #104]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	721a      	strb	r2, [r3, #8]
                #endif

                gpi_sleep();
 800aa14:	f003 fbbe 	bl	800e194 <gpi_sleep>
 800aa18:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <RTC_Waiting_Count_Sleep+0xcc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                // HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);

                #if ENERGEST_CONF_ON
                ENERGEST_ON(ENERGEST_TYPE_CPU);
 800aa1e:	4a18      	ldr	r2, [pc, #96]	; (800aa80 <RTC_Waiting_Count_Sleep+0xd0>)
 800aa20:	61d3      	str	r3, [r2, #28]
 800aa22:	4b15      	ldr	r3, [pc, #84]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	71da      	strb	r2, [r3, #7]
                ENERGEST_OFF(ENERGEST_TYPE_LPM);
 800aa28:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa2a:	7a1b      	ldrb	r3, [r3, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <RTC_Waiting_Count_Sleep+0x9c>
 800aa30:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <RTC_Waiting_Count_Sleep+0xcc>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa36:	4b12      	ldr	r3, [pc, #72]	; (800aa80 <RTC_Waiting_Count_Sleep+0xd0>)
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <RTC_Waiting_Count_Sleep+0xd4>)
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	4413      	add	r3, r2
 800aa42:	4a10      	ldr	r2, [pc, #64]	; (800aa84 <RTC_Waiting_Count_Sleep+0xd4>)
 800aa44:	6213      	str	r3, [r2, #32]
 800aa46:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <RTC_Waiting_Count_Sleep+0xc8>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	721a      	strb	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800aa4c:	b662      	cpsie	i
            while (rtc_count <= Count_wait)
 800aa4e:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <RTC_Waiting_Count_Sleep+0xc0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d2bc      	bcs.n	800a9d2 <RTC_Waiting_Count_Sleep+0x22>
                /* wake by the timer interrupt */
                gpi_int_enable();
                // SystemClock_Config();
            }
        }
        rtc_count = 0;
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <RTC_Waiting_Count_Sleep+0xc0>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]

        /* Disable the Wakeup Timer */
        HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800aa5e:	480a      	ldr	r0, [pc, #40]	; (800aa88 <RTC_Waiting_Count_Sleep+0xd8>)
 800aa60:	f7fc fbba 	bl	80071d8 <HAL_RTCEx_DeactivateWakeUpTimer>
    }
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	08025808 	.word	0x08025808
 800aa70:	2000035c 	.word	0x2000035c
 800aa74:	080257fc 	.word	0x080257fc
 800aa78:	2000112c 	.word	0x2000112c
 800aa7c:	200012c8 	.word	0x200012c8
 800aa80:	20001308 	.word	0x20001308
 800aa84:	20000f10 	.word	0x20000f10
 800aa88:	20001240 	.word	0x20001240

0800aa8c <NVIC_SystemReset>:
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aa90:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <NVIC_SystemReset+0x20>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aa9c:	4903      	ldr	r1, [pc, #12]	; (800aaac <NVIC_SystemReset+0x20>)
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <NVIC_SystemReset+0x24>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60cb      	str	r3, [r1, #12]
 800aaa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800aaa8:	bf00      	nop
    __NOP();
 800aaaa:	e7fd      	b.n	800aaa8 <NVIC_SystemReset+0x1c>
 800aaac:	e000ed00 	.word	0xe000ed00
 800aab0:	05fa0004 	.word	0x05fa0004

0800aab4 <Stats_value>:
Chirp_Energy chirp_stats_all_debug;
//**************************************************************************************************
//***** Global Functions ***************************************************************************

void Stats_value(uint8_t stats_type, uint32_t value)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	6039      	str	r1, [r7, #0]
 800aabe:	71fb      	strb	r3, [r7, #7]
    Chirp_Stats *chirp_stats_temp;
    switch (stats_type)
 800aac0:	79fb      	ldrb	r3, [r7, #7]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d007      	beq.n	800aad6 <Stats_value+0x22>
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d008      	beq.n	800aadc <Stats_value+0x28>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d000      	beq.n	800aad0 <Stats_value+0x1c>
        break;
    case TX_STATS:
        chirp_stats_temp = &(chirp_stats_all.tx_on);
        break;
    default:
        break;
 800aace:	e008      	b.n	800aae2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.slot);
 800aad0:	4b1e      	ldr	r3, [pc, #120]	; (800ab4c <Stats_value+0x98>)
 800aad2:	60fb      	str	r3, [r7, #12]
        break;
 800aad4:	e005      	b.n	800aae2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.rx_on);
 800aad6:	4b1e      	ldr	r3, [pc, #120]	; (800ab50 <Stats_value+0x9c>)
 800aad8:	60fb      	str	r3, [r7, #12]
        break;
 800aada:	e002      	b.n	800aae2 <Stats_value+0x2e>
        chirp_stats_temp = &(chirp_stats_all.tx_on);
 800aadc:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <Stats_value+0xa0>)
 800aade:	60fb      	str	r3, [r7, #12]
        break;
 800aae0:	bf00      	nop
    }

    if (value)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d025      	beq.n	800ab34 <Stats_value+0x80>
    {
        if (!chirp_stats_temp->stats_count)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <Stats_value+0x48>
        {
            chirp_stats_temp->stats_min = value;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	609a      	str	r2, [r3, #8]
            chirp_stats_temp->stats_max = value;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	60da      	str	r2, [r3, #12]
        }
        chirp_stats_temp->stats_sum += value;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	441a      	add	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	601a      	str	r2, [r3, #0]
        chirp_stats_temp->stats_count ++;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]
        chirp_stats_temp->stats_min = (chirp_stats_temp->stats_min <= value)? chirp_stats_temp->stats_min : value;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	689a      	ldr	r2, [r3, #8]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	bf28      	it	cs
 800ab1c:	461a      	movcs	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	609a      	str	r2, [r3, #8]
        chirp_stats_temp->stats_max = (chirp_stats_temp->stats_max >= value)? chirp_stats_temp->stats_max : value;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	bf38      	it	cc
 800ab2c:	461a      	movcc	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	60da      	str	r2, [r3, #12]
    }
    else
    {
        chirp_stats_temp->stats_none ++;
    }
}
 800ab32:	e004      	b.n	800ab3e <Stats_value+0x8a>
        chirp_stats_temp->stats_none ++;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	611a      	str	r2, [r3, #16]
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	20000d28 	.word	0x20000d28
 800ab50:	20000d3c 	.word	0x20000d3c
 800ab54:	20000d50 	.word	0x20000d50

0800ab58 <Stats_value_debug>:

void Stats_value_debug(uint8_t energy_type, uint32_t value)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6039      	str	r1, [r7, #0]
 800ab62:	71fb      	strb	r3, [r7, #7]
    // printf("value:%lu, %lu\n", energy_type, (uint32_t)gpi_tick_fast_to_us(value));
    uint8_t i = energy_type - ENERGEST_TYPE_CPU;
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	3b07      	subs	r3, #7
 800ab68:	75fb      	strb	r3, [r7, #23]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	60bb      	str	r3, [r7, #8]
		ASSERT_CT(
			(GPI_HYBRID_CLOCK_RATE == (GPI_HYBRID_CLOCK_RATE / 1000000) * 1000000) &&
			IS_POWER_OF_2(GPI_HYBRID_CLOCK_RATE / 1000000),
			GPI_HYBRID_CLOCK_RATE_unsupported);

		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	091b      	lsrs	r3, r3, #4
    uint32_t value_s = (uint32_t)gpi_tick_fast_to_us(value);
 800ab76:	613b      	str	r3, [r7, #16]
    switch (energy_type)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	3b07      	subs	r3, #7
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d85d      	bhi.n	800ac3c <Stats_value_debug+0xe4>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <Stats_value_debug+0x30>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abbf 	.word	0x0800abbf
 800ab90:	0800abcd 	.word	0x0800abcd
 800ab94:	0800abdb 	.word	0x0800abdb
 800ab98:	0800abe9 	.word	0x0800abe9
 800ab9c:	0800abf7 	.word	0x0800abf7
 800aba0:	0800ac05 	.word	0x0800ac05
 800aba4:	0800ac13 	.word	0x0800ac13
 800aba8:	0800ac21 	.word	0x0800ac21
 800abac:	0800ac2f 	.word	0x0800ac2f
    {
        case ENERGEST_TYPE_CPU:
            chirp_stats_all_debug.CPU += value_s;
 800abb0:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <Stats_value_debug+0xf4>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4413      	add	r3, r2
 800abb8:	4a24      	ldr	r2, [pc, #144]	; (800ac4c <Stats_value_debug+0xf4>)
 800abba:	6013      	str	r3, [r2, #0]
            break;
 800abbc:	e03f      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_LPM:
            chirp_stats_all_debug.LPM += value_s;
 800abbe:	4b23      	ldr	r3, [pc, #140]	; (800ac4c <Stats_value_debug+0xf4>)
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	4413      	add	r3, r2
 800abc6:	4a21      	ldr	r2, [pc, #132]	; (800ac4c <Stats_value_debug+0xf4>)
 800abc8:	6053      	str	r3, [r2, #4]
            break;
 800abca:	e038      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_STOP:
            chirp_stats_all_debug.STOP += value_s;
 800abcc:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <Stats_value_debug+0xf4>)
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	4413      	add	r3, r2
 800abd4:	4a1d      	ldr	r2, [pc, #116]	; (800ac4c <Stats_value_debug+0xf4>)
 800abd6:	6093      	str	r3, [r2, #8]
            break;
 800abd8:	e031      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_FLASH_WRITE_BANK1:
            chirp_stats_all_debug.FLASH_WRITE_BANK1 += value_s;
 800abda:	4b1c      	ldr	r3, [pc, #112]	; (800ac4c <Stats_value_debug+0xf4>)
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4413      	add	r3, r2
 800abe2:	4a1a      	ldr	r2, [pc, #104]	; (800ac4c <Stats_value_debug+0xf4>)
 800abe4:	60d3      	str	r3, [r2, #12]
            break;
 800abe6:	e02a      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_FLASH_WRITE_BANK2:
            chirp_stats_all_debug.FLASH_WRITE_BANK2 += value_s;
 800abe8:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <Stats_value_debug+0xf4>)
 800abea:	691a      	ldr	r2, [r3, #16]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	4a16      	ldr	r2, [pc, #88]	; (800ac4c <Stats_value_debug+0xf4>)
 800abf2:	6113      	str	r3, [r2, #16]
            break;
 800abf4:	e023      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_FLASH_ERASE:
            chirp_stats_all_debug.FLASH_ERASE += value_s;
 800abf6:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <Stats_value_debug+0xf4>)
 800abf8:	695a      	ldr	r2, [r3, #20]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	4413      	add	r3, r2
 800abfe:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac00:	6153      	str	r3, [r2, #20]
            break;
 800ac02:	e01c      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_FLASH_VERIFY:
            chirp_stats_all_debug.FLASH_VERIFY += value_s;
 800ac04:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac06:	699a      	ldr	r2, [r3, #24]
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	4a0f      	ldr	r2, [pc, #60]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac0e:	6193      	str	r3, [r2, #24]
            break;
 800ac10:	e015      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_TRANSMIT:
            chirp_stats_all_debug.TRANSMIT += value_s;
 800ac12:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac14:	69da      	ldr	r2, [r3, #28]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	4413      	add	r3, r2
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac1c:	61d3      	str	r3, [r2, #28]
            break;
 800ac1e:	e00e      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_LISTEN:
            chirp_stats_all_debug.LISTEN += value_s;
 800ac20:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4413      	add	r3, r2
 800ac28:	4a08      	ldr	r2, [pc, #32]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac2a:	6213      	str	r3, [r2, #32]
            break;
 800ac2c:	e007      	b.n	800ac3e <Stats_value_debug+0xe6>
        case ENERGEST_TYPE_GPS:
            chirp_stats_all_debug.GPS += value_s;
 800ac2e:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	4413      	add	r3, r2
 800ac36:	4a05      	ldr	r2, [pc, #20]	; (800ac4c <Stats_value_debug+0xf4>)
 800ac38:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 800ac3a:	e000      	b.n	800ac3e <Stats_value_debug+0xe6>
        default:
            break;
 800ac3c:	bf00      	nop
    }
}
 800ac3e:	bf00      	nop
 800ac40:	371c      	adds	r7, #28
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	20000d00 	.word	0x20000d00

0800ac50 <Stats_to_Flash>:

void Stats_to_Flash(Mixer_Task task)
{
 800ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac52:	b089      	sub	sp, #36	; 0x24
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
 800ac5a:	466b      	mov	r3, sp
 800ac5c:	461e      	mov	r6, r3
    uint16_t stats_len = 2 * ((sizeof(chirp_stats_all) + sizeof(uint64_t) - 1) / sizeof(uint64_t));
 800ac5e:	2310      	movs	r3, #16
 800ac60:	83fb      	strh	r3, [r7, #30]
    uint32_t stats_array[stats_len];
 800ac62:	8bfd      	ldrh	r5, [r7, #30]
 800ac64:	462b      	mov	r3, r5
 800ac66:	3b01      	subs	r3, #1
 800ac68:	61bb      	str	r3, [r7, #24]
 800ac6a:	b2a9      	uxth	r1, r5
 800ac6c:	f04f 0200 	mov.w	r2, #0
 800ac70:	f04f 0300 	mov.w	r3, #0
 800ac74:	f04f 0400 	mov.w	r4, #0
 800ac78:	0154      	lsls	r4, r2, #5
 800ac7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ac7e:	014b      	lsls	r3, r1, #5
 800ac80:	b2a9      	uxth	r1, r5
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	f04f 0300 	mov.w	r3, #0
 800ac8a:	f04f 0400 	mov.w	r4, #0
 800ac8e:	0154      	lsls	r4, r2, #5
 800ac90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ac94:	014b      	lsls	r3, r1, #5
 800ac96:	462b      	mov	r3, r5
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	3303      	adds	r3, #3
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	08db      	lsrs	r3, r3, #3
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	ebad 0d03 	sub.w	sp, sp, r3
 800aca6:	466b      	mov	r3, sp
 800aca8:	3303      	adds	r3, #3
 800acaa:	089b      	lsrs	r3, r3, #2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	617b      	str	r3, [r7, #20]
    #if MX_LBT_ACCESS
        uint16_t stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800acb0:	2305      	movs	r3, #5
 800acb2:	827b      	strh	r3, [r7, #18]
    #endif

    assert_reset(sizeof(stats_array) >= sizeof(chirp_stats_all));
 800acb4:	462b      	mov	r3, r5
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	2b3b      	cmp	r3, #59	; 0x3b
 800acba:	d810      	bhi.n	800acde <Stats_to_Flash+0x8e>
 800acbc:	462b      	mov	r3, r5
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	2b3b      	cmp	r3, #59	; 0x3b
 800acc2:	d901      	bls.n	800acc8 <Stats_to_Flash+0x78>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <Stats_to_Flash+0x7a>
 800acc8:	2300      	movs	r3, #0
 800acca:	4618      	mov	r0, r3
 800accc:	f017 fcb6 	bl	802263c <iprintf>
 800acd0:	462b      	mov	r3, r5
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	2b3b      	cmp	r3, #59	; 0x3b
 800acd6:	d802      	bhi.n	800acde <Stats_to_Flash+0x8e>
  __ASM volatile ("cpsid f" : : : "memory");
 800acd8:	b671      	cpsid	f
 800acda:	f7ff fed7 	bl	800aa8c <NVIC_SystemReset>
    memset((uint32_t *)stats_array, 0, sizeof(stats_array));
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	462a      	mov	r2, r5
 800ace2:	0092      	lsls	r2, r2, #2
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f016 fe9b 	bl	8021a22 <memset>
    memcpy((uint32_t *)stats_array, (uint32_t *)&chirp_stats_all.slot.stats_sum, sizeof(chirp_stats_all));
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	223c      	movs	r2, #60	; 0x3c
 800acf0:	492b      	ldr	r1, [pc, #172]	; (800ada0 <Stats_to_Flash+0x150>)
 800acf2:	4618      	mov	r0, r3
 800acf4:	f016 fe8a 	bl	8021a0c <memcpy>

    if ((task != MX_ARRANGE) && (task != MX_COLLECT))
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	2b06      	cmp	r3, #6
 800acfc:	d01e      	beq.n	800ad3c <Stats_to_Flash+0xec>
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d01b      	beq.n	800ad3c <Stats_to_Flash+0xec>
    {
        FLASH_If_Erase_Pages(1, DAEMON_PAGE);
 800ad04:	21fc      	movs	r1, #252	; 0xfc
 800ad06:	2001      	movs	r0, #1
 800ad08:	f011 fe34 	bl	801c974 <FLASH_If_Erase_Pages>
        FLASH_If_Write(DAEMON_FLASH_ADDRESS, (uint32_t *)stats_array, sizeof(stats_array) / sizeof(uint32_t));
 800ad0c:	6979      	ldr	r1, [r7, #20]
 800ad0e:	462b      	mov	r3, r5
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	089b      	lsrs	r3, r3, #2
 800ad14:	461a      	mov	r2, r3
 800ad16:	4823      	ldr	r0, [pc, #140]	; (800ada4 <Stats_to_Flash+0x154>)
 800ad18:	f011 feb0 	bl	801ca7c <FLASH_If_Write>
        #if MX_LBT_ACCESS
        stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800ad1c:	2305      	movs	r3, #5
 800ad1e:	827b      	strh	r3, [r7, #18]
        FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array) * 2, (uint32_t *)&chirp_config.lbt_channel_time_stats_us[0], stats_lbt_len * sizeof(uint64_t) / sizeof(uint32_t));
 800ad20:	462b      	mov	r3, r5
 800ad22:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800ad26:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800ad2a:	00d8      	lsls	r0, r3, #3
 800ad2c:	8a7b      	ldrh	r3, [r7, #18]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	089b      	lsrs	r3, r3, #2
 800ad32:	461a      	mov	r2, r3
 800ad34:	491c      	ldr	r1, [pc, #112]	; (800ada8 <Stats_to_Flash+0x158>)
 800ad36:	f011 fea1 	bl	801ca7c <FLASH_If_Write>
 800ad3a:	e02c      	b.n	800ad96 <Stats_to_Flash+0x146>
        #endif
    }
    else if (task == MX_COLLECT)
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d129      	bne.n	800ad96 <Stats_to_Flash+0x146>
    {
        uint32_t flash_data = *(__IO uint32_t*)(DAEMON_FLASH_ADDRESS + sizeof(stats_array));
 800ad42:	462b      	mov	r3, r5
 800ad44:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800ad48:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	60fb      	str	r3, [r7, #12]
        if (flash_data == 0xFFFFFFFF)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad58:	d11d      	bne.n	800ad96 <Stats_to_Flash+0x146>
        {
            FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array), (uint32_t *)stats_array, sizeof(stats_array) / sizeof(uint32_t));
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800ad60:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800ad64:	0098      	lsls	r0, r3, #2
 800ad66:	6979      	ldr	r1, [r7, #20]
 800ad68:	462b      	mov	r3, r5
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	089b      	lsrs	r3, r3, #2
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f011 fe84 	bl	801ca7c <FLASH_If_Write>
            #if MX_LBT_ACCESS
            stats_lbt_len = (LBT_CHANNEL_NUM + 1) / 2;
 800ad74:	2305      	movs	r3, #5
 800ad76:	827b      	strh	r3, [r7, #18]
            FLASH_If_Write(DAEMON_FLASH_ADDRESS + sizeof(stats_array) * 2 + stats_lbt_len * sizeof(uint64_t), (uint32_t *)&chirp_config.lbt_channel_time_stats_us[0], stats_lbt_len * sizeof(uint64_t) / sizeof(uint32_t));
 800ad78:	462a      	mov	r2, r5
 800ad7a:	8a7b      	ldrh	r3, [r7, #18]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800ad82:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800ad86:	00d8      	lsls	r0, r3, #3
 800ad88:	8a7b      	ldrh	r3, [r7, #18]
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	089b      	lsrs	r3, r3, #2
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4905      	ldr	r1, [pc, #20]	; (800ada8 <Stats_to_Flash+0x158>)
 800ad92:	f011 fe73 	bl	801ca7c <FLASH_If_Write>
 800ad96:	46b5      	mov	sp, r6
            #endif
        }
    }
}
 800ad98:	bf00      	nop
 800ad9a:	3724      	adds	r7, #36	; 0x24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada0:	20000d28 	.word	0x20000d28
 800ada4:	0807e000 	.word	0x0807e000
 800ada8:	200014c4 	.word	0x200014c4

0800adac <NVIC_SystemReset>:
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800adb0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800adb4:	4b05      	ldr	r3, [pc, #20]	; (800adcc <NVIC_SystemReset+0x20>)
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800adbc:	4903      	ldr	r1, [pc, #12]	; (800adcc <NVIC_SystemReset+0x20>)
 800adbe:	4b04      	ldr	r3, [pc, #16]	; (800add0 <NVIC_SystemReset+0x24>)
 800adc0:	4313      	orrs	r3, r2
 800adc2:	60cb      	str	r3, [r1, #12]
 800adc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800adc8:	bf00      	nop
    __NOP();
 800adca:	e7fd      	b.n	800adc8 <NVIC_SystemReset+0x1c>
 800adcc:	e000ed00 	.word	0xe000ed00
 800add0:	05fa0004 	.word	0x05fa0004

0800add4 <packet_prepare>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

void packet_prepare(uint8_t node_id)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
    Tx_Buffer[0] = node_id + 1;
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	3301      	adds	r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <packet_prepare+0x48>)
 800ade6:	701a      	strb	r2, [r3, #0]
    Tx_Buffer[1] = node_id + 2;
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	3302      	adds	r3, #2
 800adec:	b2da      	uxtb	r2, r3
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <packet_prepare+0x48>)
 800adf0:	705a      	strb	r2, [r3, #1]
    uint16_t topo_hash_tx = Chirp_RSHash((uint8_t *)&(Tx_Buffer[0]), 2);
 800adf2:	2102      	movs	r1, #2
 800adf4:	4809      	ldr	r0, [pc, #36]	; (800ae1c <packet_prepare+0x48>)
 800adf6:	f014 fa99 	bl	801f32c <Chirp_RSHash>
 800adfa:	4603      	mov	r3, r0
 800adfc:	81fb      	strh	r3, [r7, #14]
    Tx_Buffer[2] = topo_hash_tx >> 8;
 800adfe:	89fb      	ldrh	r3, [r7, #14]
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <packet_prepare+0x48>)
 800ae08:	709a      	strb	r2, [r3, #2]
    Tx_Buffer[3] = topo_hash_tx;
 800ae0a:	89fb      	ldrh	r3, [r7, #14]
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <packet_prepare+0x48>)
 800ae10:	70da      	strb	r2, [r3, #3]
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000d6c 	.word	0x20000d6c

0800ae20 <topo_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************
uint32_t topo_init(uint8_t nodes_num, uint8_t node_id, uint8_t sf, uint8_t payload_len)
{
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4623      	mov	r3, r4
 800ae30:	71fb      	strb	r3, [r7, #7]
 800ae32:	4603      	mov	r3, r0
 800ae34:	71bb      	strb	r3, [r7, #6]
 800ae36:	460b      	mov	r3, r1
 800ae38:	717b      	strb	r3, [r7, #5]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	713b      	strb	r3, [r7, #4]
    tx_num_max = 20;
 800ae3e:	4b3e      	ldr	r3, [pc, #248]	; (800af38 <topo_init+0x118>)
 800ae40:	2214      	movs	r2, #20
 800ae42:	701a      	strb	r2, [r3, #0]
    assert_reset(payload_len >= 2);
 800ae44:	793b      	ldrb	r3, [r7, #4]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d80e      	bhi.n	800ae68 <topo_init+0x48>
 800ae4a:	793b      	ldrb	r3, [r7, #4]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d901      	bls.n	800ae54 <topo_init+0x34>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e000      	b.n	800ae56 <topo_init+0x36>
 800ae54:	2300      	movs	r3, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f017 fbf0 	bl	802263c <iprintf>
 800ae5c:	793b      	ldrb	r3, [r7, #4]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d802      	bhi.n	800ae68 <topo_init+0x48>
  __ASM volatile ("cpsid f" : : : "memory");
 800ae62:	b671      	cpsid	f
 800ae64:	f7ff ffa2 	bl	800adac <NVIC_SystemReset>
    tx_payload_len = payload_len + 2;
 800ae68:	793b      	ldrb	r3, [r7, #4]
 800ae6a:	3302      	adds	r3, #2
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b33      	ldr	r3, [pc, #204]	; (800af3c <topo_init+0x11c>)
 800ae70:	701a      	strb	r2, [r3, #0]
    assert_reset(tx_payload_len <= BUFFER_SIZE);
 800ae72:	4b32      	ldr	r3, [pc, #200]	; (800af3c <topo_init+0x11c>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	2bc8      	cmp	r3, #200	; 0xc8
 800ae78:	d910      	bls.n	800ae9c <topo_init+0x7c>
 800ae7a:	4b30      	ldr	r3, [pc, #192]	; (800af3c <topo_init+0x11c>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2bc8      	cmp	r3, #200	; 0xc8
 800ae80:	d801      	bhi.n	800ae86 <topo_init+0x66>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <topo_init+0x68>
 800ae86:	2300      	movs	r3, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f017 fbd7 	bl	802263c <iprintf>
 800ae8e:	4b2b      	ldr	r3, [pc, #172]	; (800af3c <topo_init+0x11c>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2bc8      	cmp	r3, #200	; 0xc8
 800ae94:	d902      	bls.n	800ae9c <topo_init+0x7c>
 800ae96:	b671      	cpsid	f
 800ae98:	f7ff ff88 	bl	800adac <NVIC_SystemReset>
    packet_time_us = SX1276GetPacketTime(sf, 7, 1, 0, chirp_config.lora_plen, tx_payload_len) + 50000;
 800ae9c:	4b28      	ldr	r3, [pc, #160]	; (800af40 <topo_init+0x120>)
 800ae9e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800aea2:	4a26      	ldr	r2, [pc, #152]	; (800af3c <topo_init+0x11c>)
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	7978      	ldrb	r0, [r7, #5]
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	2300      	movs	r3, #0
 800aeae:	2201      	movs	r2, #1
 800aeb0:	2107      	movs	r1, #7
 800aeb2:	f002 f8af 	bl	800d014 <SX1276GetPacketTime>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 800aebc:	3350      	adds	r3, #80	; 0x50
 800aebe:	4a21      	ldr	r2, [pc, #132]	; (800af44 <topo_init+0x124>)
 800aec0:	6013      	str	r3, [r2, #0]
    node_topology = (Topology_result *)malloc(nodes_num * sizeof(Topology_result));
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f016 fd90 	bl	80219ec <malloc>
 800aecc:	4603      	mov	r3, r0
 800aece:	461a      	mov	r2, r3
 800aed0:	4b1d      	ldr	r3, [pc, #116]	; (800af48 <topo_init+0x128>)
 800aed2:	601a      	str	r2, [r3, #0]
    memset(node_topology, 0, nodes_num * sizeof(Topology_result));
 800aed4:	4b1c      	ldr	r3, [pc, #112]	; (800af48 <topo_init+0x128>)
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	461a      	mov	r2, r3
 800aede:	2100      	movs	r1, #0
 800aee0:	f016 fd9f 	bl	8021a22 <memset>

    node_topology_link = (Topology_result_link *)malloc(nodes_num * sizeof(Topology_result_link));
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f016 fd7f 	bl	80219ec <malloc>
 800aeee:	4603      	mov	r3, r0
 800aef0:	461a      	mov	r2, r3
 800aef2:	4b16      	ldr	r3, [pc, #88]	; (800af4c <topo_init+0x12c>)
 800aef4:	601a      	str	r2, [r3, #0]
    memset(node_topology_link, 0, nodes_num * sizeof(Topology_result_link));
 800aef6:	4b15      	ldr	r3, [pc, #84]	; (800af4c <topo_init+0x12c>)
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	461a      	mov	r2, r3
 800af00:	2100      	movs	r1, #0
 800af02:	f016 fd8e 	bl	8021a22 <memset>

    round_length_us = packet_time_us * (tx_num_max + 3) + 2000000;
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <topo_init+0x118>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	3303      	adds	r3, #3
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b0d      	ldr	r3, [pc, #52]	; (800af44 <topo_init+0x124>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	fb03 f302 	mul.w	r3, r3, r2
 800af16:	f503 13f4 	add.w	r3, r3, #1998848	; 0x1e8000
 800af1a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800af1e:	4a0c      	ldr	r2, [pc, #48]	; (800af50 <topo_init+0x130>)
 800af20:	6013      	str	r3, [r2, #0]

    packet_prepare(node_id);
 800af22:	79bb      	ldrb	r3, [r7, #6]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff ff55 	bl	800add4 <packet_prepare>

    return packet_time_us;
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <topo_init+0x124>)
 800af2c:	681b      	ldr	r3, [r3, #0]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	bd90      	pop	{r4, r7, pc}
 800af36:	bf00      	nop
 800af38:	20000360 	.word	0x20000360
 800af3c:	20000361 	.word	0x20000361
 800af40:	20001430 	.word	0x20001430
 800af44:	20000d64 	.word	0x20000d64
 800af48:	20000e3c 	.word	0x20000e3c
 800af4c:	20000e34 	.word	0x20000e34
 800af50:	20000364 	.word	0x20000364

0800af54 <topo_round_robin>:

Gpi_Fast_Tick_Extended topo_round_robin(uint8_t node_id, uint8_t nodes_num, uint8_t i, Gpi_Fast_Tick_Extended deadline)
{
 800af54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af56:	b08f      	sub	sp, #60	; 0x3c
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	71fb      	strb	r3, [r7, #7]
 800af5e:	460b      	mov	r3, r1
 800af60:	71bb      	strb	r3, [r7, #6]
 800af62:	4613      	mov	r3, r2
 800af64:	717b      	strb	r3, [r7, #5]
	return htim2.Instance->CNT;
 800af66:	4b8c      	ldr	r3, [pc, #560]	; (800b198 <topo_round_robin+0x244>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    #if ENERGEST_CONF_ON
        ENERGEST_ON(ENERGEST_TYPE_CPU);
 800af6c:	4a8b      	ldr	r2, [pc, #556]	; (800b19c <topo_round_robin+0x248>)
 800af6e:	61d3      	str	r3, [r2, #28]
 800af70:	4b8b      	ldr	r3, [pc, #556]	; (800b1a0 <topo_round_robin+0x24c>)
 800af72:	2201      	movs	r2, #1
 800af74:	71da      	strb	r2, [r3, #7]
    #endif

    SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800af76:	2000      	movs	r0, #0
 800af78:	f001 fcee 	bl	800c958 <SX1276SetOpMode>
	chirp_isr.state = ISR_TOPO;
 800af7c:	4b89      	ldr	r3, [pc, #548]	; (800b1a4 <topo_round_robin+0x250>)
 800af7e:	2204      	movs	r2, #4
 800af80:	701a      	strb	r2, [r3, #0]

    topology_state = IDLE;
 800af82:	4b89      	ldr	r3, [pc, #548]	; (800b1a8 <topo_round_robin+0x254>)
 800af84:	2200      	movs	r2, #0
 800af86:	701a      	strb	r2, [r3, #0]
    tx_send_num = 0;
 800af88:	4b88      	ldr	r3, [pc, #544]	; (800b1ac <topo_round_robin+0x258>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	801a      	strh	r2, [r3, #0]
    rx_receive_num = 0;
 800af8e:	4b88      	ldr	r3, [pc, #544]	; (800b1b0 <topo_round_robin+0x25c>)
 800af90:	2200      	movs	r2, #0
 800af92:	801a      	strh	r2, [r3, #0]
    if (i != node_id)
 800af94:	797a      	ldrb	r2, [r7, #5]
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	429a      	cmp	r2, r3
 800af9a:	f000 8119 	beq.w	800b1d0 <topo_round_robin+0x27c>
    {
        PRINTF("Topology---Rx:%d\n", i);
 800af9e:	797b      	ldrb	r3, [r7, #5]
 800afa0:	4619      	mov	r1, r3
 800afa2:	4884      	ldr	r0, [pc, #528]	; (800b1b4 <topo_round_robin+0x260>)
 800afa4:	f017 fb4a 	bl	802263c <iprintf>
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800afa8:	219f      	movs	r1, #159	; 0x9f
 800afaa:	2011      	movs	r0, #17
 800afac:	f001 fd4c 	bl	800ca48 <SX1276Write>
											RFLR_IRQFLAGS_VALIDHEADER |
											RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );
		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK) | RFLR_DIOMAPPING1_DIO0_00);
 800afb0:	2040      	movs	r0, #64	; 0x40
 800afb2:	f001 fd5b 	bl	800ca6c <SX1276Read>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	4619      	mov	r1, r3
 800afc0:	2040      	movs	r0, #64	; 0x40
 800afc2:	f001 fd41 	bl	800ca48 <SX1276Write>

		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800afc6:	2033      	movs	r0, #51	; 0x33
 800afc8:	f001 fd50 	bl	800ca6c <SX1276Read>
 800afcc:	4603      	mov	r3, r0
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800afd4:	b25b      	sxtb	r3, r3
 800afd6:	f043 0301 	orr.w	r3, r3, #1
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	4619      	mov	r1, r3
 800afe0:	2033      	movs	r0, #51	; 0x33
 800afe2:	f001 fd31 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800afe6:	211d      	movs	r1, #29
 800afe8:	203b      	movs	r0, #59	; 0x3b
 800afea:	f001 fd2d 	bl	800ca48 <SX1276Write>

		SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800afee:	2031      	movs	r0, #49	; 0x31
 800aff0:	f001 fd3c 	bl	800ca6c <SX1276Read>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affa:	b2db      	uxtb	r3, r3
 800affc:	4619      	mov	r1, r3
 800affe:	2031      	movs	r0, #49	; 0x31
 800b000:	f001 fd22 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800b004:	2100      	movs	r1, #0
 800b006:	2030      	movs	r0, #48	; 0x30
 800b008:	f001 fd1e 	bl	800ca48 <SX1276Write>
        SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800b00c:	2140      	movs	r1, #64	; 0x40
 800b00e:	202f      	movs	r0, #47	; 0x2f
 800b010:	f001 fd1a 	bl	800ca48 <SX1276Write>

        SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800b014:	2005      	movs	r0, #5
 800b016:	f001 fc9f 	bl	800c958 <SX1276SetOpMode>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800b01a:	4b61      	ldr	r3, [pc, #388]	; (800b1a0 <topo_round_robin+0x24c>)
 800b01c:	79db      	ldrb	r3, [r3, #7]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00d      	beq.n	800b03e <topo_round_robin+0xea>
 800b022:	4b5d      	ldr	r3, [pc, #372]	; (800b198 <topo_round_robin+0x244>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b028:	4b5c      	ldr	r3, [pc, #368]	; (800b19c <topo_round_robin+0x248>)
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	1ad2      	subs	r2, r2, r3
 800b02e:	4b62      	ldr	r3, [pc, #392]	; (800b1b8 <topo_round_robin+0x264>)
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	4413      	add	r3, r2
 800b034:	4a60      	ldr	r2, [pc, #384]	; (800b1b8 <topo_round_robin+0x264>)
 800b036:	61d3      	str	r3, [r2, #28]
 800b038:	4b59      	ldr	r3, [pc, #356]	; (800b1a0 <topo_round_robin+0x24c>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	71da      	strb	r2, [r3, #7]
 800b03e:	4b56      	ldr	r3, [pc, #344]	; (800b198 <topo_round_robin+0x244>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 800b044:	4a55      	ldr	r2, [pc, #340]	; (800b19c <topo_round_robin+0x248>)
 800b046:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b048:	4b55      	ldr	r3, [pc, #340]	; (800b1a0 <topo_round_robin+0x24c>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	73da      	strb	r2, [r3, #15]
        #endif
        topology_state = RX_RUNNING;
 800b04e:	4b56      	ldr	r3, [pc, #344]	; (800b1a8 <topo_round_robin+0x254>)
 800b050:	2210      	movs	r2, #16
 800b052:	701a      	strb	r2, [r3, #0]

        deadline = gpi_tick_fast_extended() + GPI_TICK_US_TO_FAST2(round_length_us);
 800b054:	f000 fd46 	bl	800bae4 <gpi_tick_fast_extended>
 800b058:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <topo_round_robin+0x268>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a58      	ldr	r2, [pc, #352]	; (800b1c0 <topo_round_robin+0x26c>)
 800b05e:	fba2 2303 	umull	r2, r3, r2, r3
 800b062:	0c9b      	lsrs	r3, r3, #18
 800b064:	4a57      	ldr	r2, [pc, #348]	; (800b1c4 <topo_round_robin+0x270>)
 800b066:	fb02 f403 	mul.w	r4, r2, r3
 800b06a:	4b54      	ldr	r3, [pc, #336]	; (800b1bc <topo_round_robin+0x268>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a56      	ldr	r2, [pc, #344]	; (800b1c8 <topo_round_robin+0x274>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	099a      	lsrs	r2, r3, #6
 800b076:	4b54      	ldr	r3, [pc, #336]	; (800b1c8 <topo_round_robin+0x274>)
 800b078:	fba3 5302 	umull	r5, r3, r3, r2
 800b07c:	099b      	lsrs	r3, r3, #6
 800b07e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b082:	fb05 f303 	mul.w	r3, r5, r3
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b08c:	fb02 f303 	mul.w	r3, r2, r3
 800b090:	441c      	add	r4, r3
 800b092:	4b4a      	ldr	r3, [pc, #296]	; (800b1bc <topo_round_robin+0x268>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	4b4c      	ldr	r3, [pc, #304]	; (800b1c8 <topo_round_robin+0x274>)
 800b098:	fba3 5302 	umull	r5, r3, r3, r2
 800b09c:	099b      	lsrs	r3, r3, #6
 800b09e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b0a2:	fb05 f303 	mul.w	r3, r5, r3
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	011b      	lsls	r3, r3, #4
 800b0aa:	4423      	add	r3, r4
 800b0ac:	461d      	mov	r5, r3
 800b0ae:	f04f 0600 	mov.w	r6, #0
 800b0b2:	182b      	adds	r3, r5, r0
 800b0b4:	eb46 0401 	adc.w	r4, r6, r1
 800b0b8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800b0bc:	4b36      	ldr	r3, [pc, #216]	; (800b198 <topo_round_robin+0x244>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f06f 0202 	mvn.w	r2, #2
 800b0c4:	611a      	str	r2, [r3, #16]
        __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800b0c6:	4b34      	ldr	r3, [pc, #208]	; (800b198 <topo_round_robin+0x244>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	4b32      	ldr	r3, [pc, #200]	; (800b198 <topo_round_robin+0x244>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0202 	bic.w	r2, r2, #2
 800b0d4:	60da      	str	r2, [r3, #12]
        MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(16000000);
 800b0d6:	4b30      	ldr	r3, [pc, #192]	; (800b198 <topo_round_robin+0x244>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	4a2e      	ldr	r2, [pc, #184]	; (800b198 <topo_round_robin+0x244>)
 800b0de:	6812      	ldr	r2, [r2, #0]
 800b0e0:	f103 6374 	add.w	r3, r3, #255852544	; 0xf400000
 800b0e4:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 800b0e8:	6353      	str	r3, [r2, #52]	; 0x34
        __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800b0ea:	4b2b      	ldr	r3, [pc, #172]	; (800b198 <topo_round_robin+0x244>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	4b29      	ldr	r3, [pc, #164]	; (800b198 <topo_round_robin+0x244>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0202 	orr.w	r2, r2, #2
 800b0f8:	60da      	str	r2, [r3, #12]

        while(1)
        {
            if (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) >= 0)
 800b0fa:	f000 fcf3 	bl	800bae4 <gpi_tick_fast_extended>
 800b0fe:	4603      	mov	r3, r0
 800b100:	460c      	mov	r4, r1
 800b102:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800b106:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b10a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
//***** Implementations of Inline Functions ********************************************************

_GPI_TICK_COMPARE_FUNCTION(slow_native, 	Gpi_Slow_Tick_Native)
_GPI_TICK_COMPARE_FUNCTION(slow_extended, 	Gpi_Slow_Tick_Extended)
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
_GPI_TICK_COMPARE_FUNCTION(fast_extended, 	Gpi_Fast_Tick_Extended)
 800b10e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b112:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b116:	1ac9      	subs	r1, r1, r3
 800b118:	eb62 0204 	sbc.w	r2, r2, r4
 800b11c:	460d      	mov	r5, r1
 800b11e:	4616      	mov	r6, r2
 800b120:	e9c7 560c 	strd	r5, r6, [r7, #48]	; 0x30
 800b124:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f174 0300 	sbcs.w	r3, r4, #0
 800b12e:	db08      	blt.n	800b142 <topo_round_robin+0x1ee>
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	4313      	orrs	r3, r2
 800b136:	2b00      	cmp	r3, #0
 800b138:	bf14      	ite	ne
 800b13a:	2301      	movne	r3, #1
 800b13c:	2300      	moveq	r3, #0
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	e001      	b.n	800b146 <topo_round_robin+0x1f2>
 800b142:	f04f 33ff 	mov.w	r3, #4294967295
 800b146:	2b00      	cmp	r3, #0
 800b148:	da00      	bge.n	800b14c <topo_round_robin+0x1f8>
 800b14a:	e7d6      	b.n	800b0fa <topo_round_robin+0x1a6>
                break;
 800b14c:	bf00      	nop
        }

        node_topology[i].rx_num = rx_receive_num;
 800b14e:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <topo_round_robin+0x25c>)
 800b150:	8819      	ldrh	r1, [r3, #0]
 800b152:	4b1e      	ldr	r3, [pc, #120]	; (800b1cc <topo_round_robin+0x278>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	797b      	ldrb	r3, [r7, #5]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	b2ca      	uxtb	r2, r1
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <topo_round_robin+0x244>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 800b166:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <topo_round_robin+0x248>)
 800b168:	61d3      	str	r3, [r2, #28]
 800b16a:	4b0d      	ldr	r3, [pc, #52]	; (800b1a0 <topo_round_robin+0x24c>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	71da      	strb	r2, [r3, #7]
            ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800b170:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <topo_round_robin+0x24c>)
 800b172:	7bdb      	ldrb	r3, [r3, #15]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 81ae 	beq.w	800b4d6 <topo_round_robin+0x582>
 800b17a:	4b07      	ldr	r3, [pc, #28]	; (800b198 <topo_round_robin+0x244>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b180:	4b06      	ldr	r3, [pc, #24]	; (800b19c <topo_round_robin+0x248>)
 800b182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b184:	1ad2      	subs	r2, r2, r3
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <topo_round_robin+0x264>)
 800b188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18a:	4413      	add	r3, r2
 800b18c:	4a0a      	ldr	r2, [pc, #40]	; (800b1b8 <topo_round_robin+0x264>)
 800b18e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b190:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <topo_round_robin+0x24c>)
 800b192:	2200      	movs	r2, #0
 800b194:	73da      	strb	r2, [r3, #15]
 800b196:	e19e      	b.n	800b4d6 <topo_round_robin+0x582>
 800b198:	200012c8 	.word	0x200012c8
 800b19c:	20001308 	.word	0x20001308
 800b1a0:	2000112c 	.word	0x2000112c
 800b1a4:	20000cfc 	.word	0x20000cfc
 800b1a8:	20000d68 	.word	0x20000d68
 800b1ac:	20000e38 	.word	0x20000e38
 800b1b0:	20000e40 	.word	0x20000e40
 800b1b4:	08025820 	.word	0x08025820
 800b1b8:	20000f10 	.word	0x20000f10
 800b1bc:	20000364 	.word	0x20000364
 800b1c0:	431bde83 	.word	0x431bde83
 800b1c4:	00f42400 	.word	0x00f42400
 800b1c8:	10624dd3 	.word	0x10624dd3
 800b1cc:	20000e3c 	.word	0x20000e3c
        #endif
    }
    else
    {
        /* delay more than receivers */
        deadline = gpi_tick_fast_extended() + GPI_TICK_US_TO_FAST2(packet_time_us * 3) + GPI_TICK_US_TO_FAST2(1000000);
 800b1d0:	f000 fc88 	bl	800bae4 <gpi_tick_fast_extended>
 800b1d4:	4ba4      	ldr	r3, [pc, #656]	; (800b468 <topo_round_robin+0x514>)
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	4413      	add	r3, r2
 800b1de:	4aa3      	ldr	r2, [pc, #652]	; (800b46c <topo_round_robin+0x518>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	0c9b      	lsrs	r3, r3, #18
 800b1e6:	4aa2      	ldr	r2, [pc, #648]	; (800b470 <topo_round_robin+0x51c>)
 800b1e8:	fb02 f403 	mul.w	r4, r2, r3
 800b1ec:	4b9e      	ldr	r3, [pc, #632]	; (800b468 <topo_round_robin+0x514>)
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	4413      	add	r3, r2
 800b1f6:	4a9f      	ldr	r2, [pc, #636]	; (800b474 <topo_round_robin+0x520>)
 800b1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fc:	099a      	lsrs	r2, r3, #6
 800b1fe:	4b9d      	ldr	r3, [pc, #628]	; (800b474 <topo_round_robin+0x520>)
 800b200:	fba3 5302 	umull	r5, r3, r3, r2
 800b204:	099b      	lsrs	r3, r3, #6
 800b206:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b20a:	fb05 f303 	mul.w	r3, r5, r3
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b214:	fb02 f303 	mul.w	r3, r2, r3
 800b218:	441c      	add	r4, r3
 800b21a:	4b93      	ldr	r3, [pc, #588]	; (800b468 <topo_round_robin+0x514>)
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	4613      	mov	r3, r2
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	441a      	add	r2, r3
 800b224:	4b93      	ldr	r3, [pc, #588]	; (800b474 <topo_round_robin+0x520>)
 800b226:	fba3 5302 	umull	r5, r3, r3, r2
 800b22a:	099b      	lsrs	r3, r3, #6
 800b22c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800b230:	fb05 f303 	mul.w	r3, r5, r3
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	011b      	lsls	r3, r3, #4
 800b238:	4423      	add	r3, r4
 800b23a:	f04f 0400 	mov.w	r4, #0
 800b23e:	181d      	adds	r5, r3, r0
 800b240:	eb44 0601 	adc.w	r6, r4, r1
 800b244:	498a      	ldr	r1, [pc, #552]	; (800b470 <topo_round_robin+0x51c>)
 800b246:	f04f 0200 	mov.w	r2, #0
 800b24a:	186b      	adds	r3, r5, r1
 800b24c:	eb46 0402 	adc.w	r4, r6, r2
 800b250:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        SX1276WriteFIFO(Tx_Buffer, tx_payload_len);
 800b254:	4b88      	ldr	r3, [pc, #544]	; (800b478 <topo_round_robin+0x524>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	4619      	mov	r1, r3
 800b25a:	4888      	ldr	r0, [pc, #544]	; (800b47c <topo_round_robin+0x528>)
 800b25c:	f001 fe3a 	bl	800ced4 <SX1276WriteFIFO>
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800b260:	21f7      	movs	r1, #247	; 0xf7
 800b262:	2011      	movs	r0, #17
 800b264:	f001 fbf0 	bl	800ca48 <SX1276Write>
											RFLR_IRQFLAGS_VALIDHEADER |
											//RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );
        SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800b268:	2040      	movs	r0, #64	; 0x40
 800b26a:	f001 fbff 	bl	800ca6c <SX1276Read>
 800b26e:	4603      	mov	r3, r0
 800b270:	b25b      	sxtb	r3, r3
 800b272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b276:	b25b      	sxtb	r3, r3
 800b278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27c:	b25b      	sxtb	r3, r3
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	2040      	movs	r0, #64	; 0x40
 800b284:	f001 fbe0 	bl	800ca48 <SX1276Write>

		SX1276Write( REG_LR_PAYLOADLENGTH, tx_payload_len );
 800b288:	4b7b      	ldr	r3, [pc, #492]	; (800b478 <topo_round_robin+0x524>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	4619      	mov	r1, r3
 800b28e:	2022      	movs	r0, #34	; 0x22
 800b290:	f001 fbda 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800b294:	2033      	movs	r0, #51	; 0x33
 800b296:	f001 fbe9 	bl	800ca6c <SX1276Read>
 800b29a:	4603      	mov	r3, r0
 800b29c:	b25b      	sxtb	r3, r3
 800b29e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800b2a2:	b25b      	sxtb	r3, r3
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	b25b      	sxtb	r3, r3
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	2033      	movs	r0, #51	; 0x33
 800b2b0:	f001 fbca 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800b2b4:	211d      	movs	r1, #29
 800b2b6:	203b      	movs	r0, #59	; 0x3b
 800b2b8:	f001 fbc6 	bl	800ca48 <SX1276Write>
		// Full buffer used for Tx
		SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800b2bc:	2100      	movs	r1, #0
 800b2be:	200e      	movs	r0, #14
 800b2c0:	f001 fbc2 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	200d      	movs	r0, #13
 800b2c8:	f001 fbbe 	bl	800ca48 <SX1276Write>

        while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 800b2cc:	bf00      	nop
 800b2ce:	f000 fc09 	bl	800bae4 <gpi_tick_fast_extended>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800b2da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b2de:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800b2e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b2e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b2ea:	1ac9      	subs	r1, r1, r3
 800b2ec:	eb62 0204 	sbc.w	r2, r2, r4
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	4616      	mov	r6, r2
 800b2f4:	e9c7 5608 	strd	r5, r6, [r7, #32]
 800b2f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f174 0300 	sbcs.w	r3, r4, #0
 800b302:	db08      	blt.n	800b316 <topo_round_robin+0x3c2>
 800b304:	6a3a      	ldr	r2, [r7, #32]
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	4313      	orrs	r3, r2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	bf14      	ite	ne
 800b30e:	2301      	movne	r3, #1
 800b310:	2300      	moveq	r3, #0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	e001      	b.n	800b31a <topo_round_robin+0x3c6>
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dbd7      	blt.n	800b2ce <topo_round_robin+0x37a>
        PRINTF("Topology---Tx\n");
 800b31e:	4858      	ldr	r0, [pc, #352]	; (800b480 <topo_round_robin+0x52c>)
 800b320:	f017 fa14 	bl	802274c <puts>
        SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 800b324:	2003      	movs	r0, #3
 800b326:	f001 fb17 	bl	800c958 <SX1276SetOpMode>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 800b32a:	4b56      	ldr	r3, [pc, #344]	; (800b484 <topo_round_robin+0x530>)
 800b32c:	79db      	ldrb	r3, [r3, #7]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00d      	beq.n	800b34e <topo_round_robin+0x3fa>
 800b332:	4b55      	ldr	r3, [pc, #340]	; (800b488 <topo_round_robin+0x534>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b338:	4b54      	ldr	r3, [pc, #336]	; (800b48c <topo_round_robin+0x538>)
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	1ad2      	subs	r2, r2, r3
 800b33e:	4b54      	ldr	r3, [pc, #336]	; (800b490 <topo_round_robin+0x53c>)
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	4413      	add	r3, r2
 800b344:	4a52      	ldr	r2, [pc, #328]	; (800b490 <topo_round_robin+0x53c>)
 800b346:	61d3      	str	r3, [r2, #28]
 800b348:	4b4e      	ldr	r3, [pc, #312]	; (800b484 <topo_round_robin+0x530>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	71da      	strb	r2, [r3, #7]
 800b34e:	4b4e      	ldr	r3, [pc, #312]	; (800b488 <topo_round_robin+0x534>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
 800b354:	4a4d      	ldr	r2, [pc, #308]	; (800b48c <topo_round_robin+0x538>)
 800b356:	6393      	str	r3, [r2, #56]	; 0x38
 800b358:	4b4a      	ldr	r3, [pc, #296]	; (800b484 <topo_round_robin+0x530>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	739a      	strb	r2, [r3, #14]
        #endif
        tx_send_num++;
 800b35e:	4b4d      	ldr	r3, [pc, #308]	; (800b494 <topo_round_robin+0x540>)
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	3301      	adds	r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	4b4b      	ldr	r3, [pc, #300]	; (800b494 <topo_round_robin+0x540>)
 800b368:	801a      	strh	r2, [r3, #0]
        topology_state = TX_RUNNING;
 800b36a:	4b4b      	ldr	r3, [pc, #300]	; (800b498 <topo_round_robin+0x544>)
 800b36c:	220c      	movs	r2, #12
 800b36e:	701a      	strb	r2, [r3, #0]
        deadline += GPI_TICK_US_TO_FAST2(round_length_us - packet_time_us * 3 - 1000000);
 800b370:	4b4a      	ldr	r3, [pc, #296]	; (800b49c <topo_round_robin+0x548>)
 800b372:	6819      	ldr	r1, [r3, #0]
 800b374:	4b3c      	ldr	r3, [pc, #240]	; (800b468 <topo_round_robin+0x514>)
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	4613      	mov	r3, r2
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	4413      	add	r3, r2
 800b37e:	1acb      	subs	r3, r1, r3
 800b380:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b384:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b388:	4a38      	ldr	r2, [pc, #224]	; (800b46c <topo_round_robin+0x518>)
 800b38a:	fba2 2303 	umull	r2, r3, r2, r3
 800b38e:	0c9b      	lsrs	r3, r3, #18
 800b390:	4a37      	ldr	r2, [pc, #220]	; (800b470 <topo_round_robin+0x51c>)
 800b392:	fb02 f103 	mul.w	r1, r2, r3
 800b396:	4b41      	ldr	r3, [pc, #260]	; (800b49c <topo_round_robin+0x548>)
 800b398:	6818      	ldr	r0, [r3, #0]
 800b39a:	4b33      	ldr	r3, [pc, #204]	; (800b468 <topo_round_robin+0x514>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	4413      	add	r3, r2
 800b3a4:	1ac3      	subs	r3, r0, r3
 800b3a6:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b3aa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b3ae:	4a31      	ldr	r2, [pc, #196]	; (800b474 <topo_round_robin+0x520>)
 800b3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b4:	099a      	lsrs	r2, r3, #6
 800b3b6:	4b2f      	ldr	r3, [pc, #188]	; (800b474 <topo_round_robin+0x520>)
 800b3b8:	fba3 0302 	umull	r0, r3, r3, r2
 800b3bc:	099b      	lsrs	r3, r3, #6
 800b3be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3c2:	fb00 f303 	mul.w	r3, r0, r3
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	4419      	add	r1, r3
 800b3d2:	4b32      	ldr	r3, [pc, #200]	; (800b49c <topo_round_robin+0x548>)
 800b3d4:	6818      	ldr	r0, [r3, #0]
 800b3d6:	4b24      	ldr	r3, [pc, #144]	; (800b468 <topo_round_robin+0x514>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	1ac3      	subs	r3, r0, r3
 800b3e2:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800b3e6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b3ea:	4a22      	ldr	r2, [pc, #136]	; (800b474 <topo_round_robin+0x520>)
 800b3ec:	fba2 0203 	umull	r0, r2, r2, r3
 800b3f0:	0992      	lsrs	r2, r2, #6
 800b3f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3f6:	fb00 f202 	mul.w	r2, r0, r2
 800b3fa:	1a9a      	subs	r2, r3, r2
 800b3fc:	0113      	lsls	r3, r2, #4
 800b3fe:	440b      	add	r3, r1
 800b400:	461d      	mov	r5, r3
 800b402:	f04f 0600 	mov.w	r6, #0
 800b406:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b40a:	186b      	adds	r3, r5, r1
 800b40c:	eb46 0402 	adc.w	r4, r6, r2
 800b410:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

        while(1)
        {
            if (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) >= 0)
 800b414:	f000 fb66 	bl	800bae4 <gpi_tick_fast_extended>
 800b418:	4603      	mov	r3, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800b420:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800b424:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800b428:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b42c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b430:	1ac9      	subs	r1, r1, r3
 800b432:	eb62 0204 	sbc.w	r2, r2, r4
 800b436:	460d      	mov	r5, r1
 800b438:	4616      	mov	r6, r2
 800b43a:	e9c7 5604 	strd	r5, r6, [r7, #16]
 800b43e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f174 0300 	sbcs.w	r3, r4, #0
 800b448:	db08      	blt.n	800b45c <topo_round_robin+0x508>
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	4313      	orrs	r3, r2
 800b450:	2b00      	cmp	r3, #0
 800b452:	bf14      	ite	ne
 800b454:	2301      	movne	r3, #1
 800b456:	2300      	moveq	r3, #0
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	e001      	b.n	800b460 <topo_round_robin+0x50c>
 800b45c:	f04f 33ff 	mov.w	r3, #4294967295
 800b460:	2b00      	cmp	r3, #0
 800b462:	da1d      	bge.n	800b4a0 <topo_round_robin+0x54c>
 800b464:	e7d6      	b.n	800b414 <topo_round_robin+0x4c0>
 800b466:	bf00      	nop
 800b468:	20000d64 	.word	0x20000d64
 800b46c:	431bde83 	.word	0x431bde83
 800b470:	00f42400 	.word	0x00f42400
 800b474:	10624dd3 	.word	0x10624dd3
 800b478:	20000361 	.word	0x20000361
 800b47c:	20000d6c 	.word	0x20000d6c
 800b480:	08025834 	.word	0x08025834
 800b484:	2000112c 	.word	0x2000112c
 800b488:	200012c8 	.word	0x200012c8
 800b48c:	20001308 	.word	0x20001308
 800b490:	20000f10 	.word	0x20000f10
 800b494:	20000e38 	.word	0x20000e38
 800b498:	20000d68 	.word	0x20000d68
 800b49c:	20000364 	.word	0x20000364
                break;
 800b4a0:	bf00      	nop
 800b4a2:	4b18      	ldr	r3, [pc, #96]	; (800b504 <topo_round_robin+0x5b0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 800b4a8:	4a17      	ldr	r2, [pc, #92]	; (800b508 <topo_round_robin+0x5b4>)
 800b4aa:	61d3      	str	r3, [r2, #28]
 800b4ac:	4b17      	ldr	r3, [pc, #92]	; (800b50c <topo_round_robin+0x5b8>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	71da      	strb	r2, [r3, #7]
            ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 800b4b2:	4b16      	ldr	r3, [pc, #88]	; (800b50c <topo_round_robin+0x5b8>)
 800b4b4:	7b9b      	ldrb	r3, [r3, #14]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00d      	beq.n	800b4d6 <topo_round_robin+0x582>
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <topo_round_robin+0x5b0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <topo_round_robin+0x5b4>)
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	1ad2      	subs	r2, r2, r3
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <topo_round_robin+0x5bc>)
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ca:	4413      	add	r3, r2
 800b4cc:	4a10      	ldr	r2, [pc, #64]	; (800b510 <topo_round_robin+0x5bc>)
 800b4ce:	6393      	str	r3, [r2, #56]	; 0x38
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <topo_round_robin+0x5b8>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	739a      	strb	r2, [r3, #14]
        #endif
    }
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <topo_round_robin+0x5b0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f06f 0202 	mvn.w	r2, #2
 800b4de:	611a      	str	r2, [r3, #16]
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800b4e0:	4b08      	ldr	r3, [pc, #32]	; (800b504 <topo_round_robin+0x5b0>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	4b07      	ldr	r3, [pc, #28]	; (800b504 <topo_round_robin+0x5b0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 0202 	bic.w	r2, r2, #2
 800b4ee:	60da      	str	r2, [r3, #12]
    SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f001 fa31 	bl	800c958 <SX1276SetOpMode>
    return deadline;
 800b4f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	373c      	adds	r7, #60	; 0x3c
 800b500:	46bd      	mov	sp, r7
 800b502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b504:	200012c8 	.word	0x200012c8
 800b508:	20001308 	.word	0x20001308
 800b50c:	2000112c 	.word	0x2000112c
 800b510:	20000f10 	.word	0x20000f10
 800b514:	00000000 	.word	0x00000000

0800b518 <topo_result>:

void topo_result(uint8_t nodes_num)
{
 800b518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b51c:	b08b      	sub	sp, #44	; 0x2c
 800b51e:	af00      	add	r7, sp, #0
 800b520:	4603      	mov	r3, r0
 800b522:	71fb      	strb	r3, [r7, #7]
 800b524:	466b      	mov	r3, sp
 800b526:	461e      	mov	r6, r3
    gpi_watchdog_periodic();
 800b528:	f002 fe52 	bl	800e1d0 <gpi_watchdog_periodic>
    uint8_t i;
    /* 64 bit length */
    uint32_t topo_result[((nodes_num + 1) / 2) * 2];
 800b52c:	79fb      	ldrb	r3, [r7, #7]
 800b52e:	3301      	adds	r3, #1
 800b530:	0fda      	lsrs	r2, r3, #31
 800b532:	4413      	add	r3, r2
 800b534:	105b      	asrs	r3, r3, #1
 800b536:	005d      	lsls	r5, r3, #1
 800b538:	1e6b      	subs	r3, r5, #1
 800b53a:	623b      	str	r3, [r7, #32]
 800b53c:	462b      	mov	r3, r5
 800b53e:	4619      	mov	r1, r3
 800b540:	f04f 0200 	mov.w	r2, #0
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	f04f 0400 	mov.w	r4, #0
 800b54c:	0154      	lsls	r4, r2, #5
 800b54e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b552:	014b      	lsls	r3, r1, #5
 800b554:	462b      	mov	r3, r5
 800b556:	4619      	mov	r1, r3
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	f04f 0300 	mov.w	r3, #0
 800b560:	f04f 0400 	mov.w	r4, #0
 800b564:	0154      	lsls	r4, r2, #5
 800b566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b56a:	014b      	lsls	r3, r1, #5
 800b56c:	462b      	mov	r3, r5
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	3303      	adds	r3, #3
 800b572:	3307      	adds	r3, #7
 800b574:	08db      	lsrs	r3, r3, #3
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	ebad 0d03 	sub.w	sp, sp, r3
 800b57c:	466b      	mov	r3, sp
 800b57e:	3303      	adds	r3, #3
 800b580:	089b      	lsrs	r3, r3, #2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	61fb      	str	r3, [r7, #28]
    memset(topo_result, 0, sizeof(topo_result));
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	462a      	mov	r2, r5
 800b58a:	0092      	lsls	r2, r2, #2
 800b58c:	2100      	movs	r1, #0
 800b58e:	4618      	mov	r0, r3
 800b590:	f016 fa47 	bl	8021a22 <memset>

    for ( i = 0; i < nodes_num; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b59a:	e058      	b.n	800b64e <topo_result+0x136>
    {
        uint32_t reliability = (uint32_t)((node_topology[i].rx_num * 1e4) / (uint32_t)(tx_num_max));
 800b59c:	4b50      	ldr	r3, [pc, #320]	; (800b6e0 <topo_result+0x1c8>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7f4 ffc4 	bl	8000538 <__aeabi_i2d>
 800b5b0:	a349      	add	r3, pc, #292	; (adr r3, 800b6d8 <topo_result+0x1c0>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f5 f829 	bl	800060c <__aeabi_dmul>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	4698      	mov	r8, r3
 800b5c0:	46a1      	mov	r9, r4
 800b5c2:	4b48      	ldr	r3, [pc, #288]	; (800b6e4 <topo_result+0x1cc>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 ffa6 	bl	8000518 <__aeabi_ui2d>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	f7f5 f942 	bl	8000860 <__aeabi_ddiv>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f7f5 faea 	bl	8000bbc <__aeabi_d2uiz>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	617b      	str	r3, [r7, #20]
        node_topology[i].reliability = reliability;
 800b5ec:	4b3c      	ldr	r3, [pc, #240]	; (800b6e0 <topo_result+0x1c8>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	b292      	uxth	r2, r2
 800b5fc:	805a      	strh	r2, [r3, #2]
        topo_result[i] = (uint8_t)i | (uint32_t)node_topology[i].reliability << 16;
 800b5fe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800b602:	4b37      	ldr	r3, [pc, #220]	; (800b6e0 <topo_result+0x1c8>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	885b      	ldrh	r3, [r3, #2]
 800b610:	041b      	lsls	r3, r3, #16
 800b612:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b616:	4319      	orrs	r1, r3
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        PRINTF("r:%d, %lu, %x\n", i, node_topology[i].reliability, topo_result[i]);
 800b61e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800b622:	4b2f      	ldr	r3, [pc, #188]	; (800b6e0 <topo_result+0x1c8>)
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	885b      	ldrh	r3, [r3, #2]
 800b630:	4618      	mov	r0, r3
 800b632:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	4602      	mov	r2, r0
 800b63e:	482a      	ldr	r0, [pc, #168]	; (800b6e8 <topo_result+0x1d0>)
 800b640:	f016 fffc 	bl	802263c <iprintf>
    for ( i = 0; i < nodes_num; i++)
 800b644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b648:	3301      	adds	r3, #1
 800b64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b64e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b652:	79fb      	ldrb	r3, [r7, #7]
 800b654:	429a      	cmp	r2, r3
 800b656:	d3a1      	bcc.n	800b59c <topo_result+0x84>
    }

    uint8_t temp_raw = SX1276GetRawTemp();
 800b658:	f001 fdfa 	bl	800d250 <SX1276GetRawTemp>
 800b65c:	4603      	mov	r3, r0
 800b65e:	76fb      	strb	r3, [r7, #27]
    uint32_t temp_flash[2];
    temp_flash[0] = (uint32_t)(temp_raw);
 800b660:	7efb      	ldrb	r3, [r7, #27]
 800b662:	60fb      	str	r3, [r7, #12]

    #if MX_FLASH_FILE
        // menu_preSend(0);
        FLASH_If_Erase_Pages(1, 255);
 800b664:	21ff      	movs	r1, #255	; 0xff
 800b666:	2001      	movs	r0, #1
 800b668:	f011 f984 	bl	801c974 <FLASH_If_Erase_Pages>
        FLASH_If_Write(TOPO_FLASH_ADDRESS, (uint32_t *)(topo_result), sizeof(topo_result) / sizeof(uint32_t));
 800b66c:	69f9      	ldr	r1, [r7, #28]
 800b66e:	462b      	mov	r3, r5
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	089b      	lsrs	r3, r3, #2
 800b674:	461a      	mov	r2, r3
 800b676:	481d      	ldr	r0, [pc, #116]	; (800b6ec <topo_result+0x1d4>)
 800b678:	f011 fa00 	bl	801ca7c <FLASH_If_Write>
        FLASH_If_Write(TOPO_FLASH_ADDRESS + sizeof(topo_result) + 8, (uint32_t *)(temp_flash), sizeof(temp_flash) / sizeof(uint32_t));
 800b67c:	462a      	mov	r2, r5
 800b67e:	4b1c      	ldr	r3, [pc, #112]	; (800b6f0 <topo_result+0x1d8>)
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	f107 010c 	add.w	r1, r7, #12
 800b688:	2202      	movs	r2, #2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f011 f9f6 	bl	801ca7c <FLASH_If_Write>
        memcpy(topo_result, (uint32_t *)(node_topology_link), nodes_num * sizeof(Topology_result_link));
 800b690:	69f8      	ldr	r0, [r7, #28]
 800b692:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <topo_result+0x1dc>)
 800b694:	6819      	ldr	r1, [r3, #0]
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	461a      	mov	r2, r3
 800b69c:	f016 f9b6 	bl	8021a0c <memcpy>
        FLASH_If_Write(TOPO_FLASH_ADDRESS + sizeof(topo_result) + 8 + sizeof(temp_flash), (uint32_t *)(topo_result), sizeof(topo_result) / sizeof(uint32_t));
 800b6a0:	462a      	mov	r2, r5
 800b6a2:	4b15      	ldr	r3, [pc, #84]	; (800b6f8 <topo_result+0x1e0>)
 800b6a4:	4413      	add	r3, r2
 800b6a6:	0098      	lsls	r0, r3, #2
 800b6a8:	69f9      	ldr	r1, [r7, #28]
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	089b      	lsrs	r3, r3, #2
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	f011 f9e3 	bl	801ca7c <FLASH_If_Write>
    #endif

    free(node_topology);
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <topo_result+0x1c8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f016 f99e 	bl	80219fc <free>
    free(node_topology_link);
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <topo_result+0x1dc>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f016 f999 	bl	80219fc <free>
 800b6ca:	46b5      	mov	sp, r6
}
 800b6cc:	bf00      	nop
 800b6ce:	372c      	adds	r7, #44	; 0x2c
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	bf00      	nop
 800b6d8:	00000000 	.word	0x00000000
 800b6dc:	40c38800 	.word	0x40c38800
 800b6e0:	20000e3c 	.word	0x20000e3c
 800b6e4:	20000360 	.word	0x20000360
 800b6e8:	08025844 	.word	0x08025844
 800b6ec:	0807f800 	.word	0x0807f800
 800b6f0:	0201fe02 	.word	0x0201fe02
 800b6f4:	20000e34 	.word	0x20000e34
 800b6f8:	0201fe04 	.word	0x0201fe04

0800b6fc <topo_dio0_isr>:

void topo_dio0_isr()
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08c      	sub	sp, #48	; 0x30
 800b700:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800b702:	f002 fd65 	bl	800e1d0 <gpi_watchdog_periodic>
    /* must be periodically called */
    gpi_tick_hybrid_reference();
 800b706:	463b      	mov	r3, r7
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 fa2d 	bl	800bb68 <gpi_tick_hybrid_reference>

    if (topology_state == RX_RUNNING)
 800b70e:	4b9d      	ldr	r3, [pc, #628]	; (800b984 <topo_dio0_isr+0x288>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b10      	cmp	r3, #16
 800b714:	f040 8103 	bne.w	800b91e <topo_dio0_isr+0x222>
 800b718:	2300      	movs	r3, #0
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
//**************************************************************************************************
//***** Implementations of Inline Functions ********************************************************

static ALWAYS_INLINE void gpi_led_on(int mask)
{
	if (mask)
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <topo_dio0_isr+0x2c>
		LED_GPIO_Port->BSRR = mask;
 800b722:	4a99      	ldr	r2, [pc, #612]	; (800b988 <topo_dio0_isr+0x28c>)
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	6193      	str	r3, [r2, #24]
    {
        gpi_led_on(GPI_LED_1);
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800b728:	2140      	movs	r1, #64	; 0x40
 800b72a:	2012      	movs	r0, #18
 800b72c:	f001 f98c 	bl	800ca48 <SX1276Write>
        volatile uint8_t packet_len = (uint8_t)SX1276Read( REG_LR_RXNBBYTES );
 800b730:	2013      	movs	r0, #19
 800b732:	f001 f99b 	bl	800ca6c <SX1276Read>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
        volatile uint8_t irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800b73a:	2012      	movs	r0, #18
 800b73c:	f001 f996 	bl	800ca6c <SX1276Read>
 800b740:	4603      	mov	r3, r0
 800b742:	73bb      	strb	r3, [r7, #14]
        if(( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) != RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	f000 80cd 	beq.w	800b8ec <topo_dio0_isr+0x1f0>
        {
            memset(Rx_Buffer, 0, BUFFER_SIZE);
 800b752:	22c8      	movs	r2, #200	; 0xc8
 800b754:	2100      	movs	r1, #0
 800b756:	488d      	ldr	r0, [pc, #564]	; (800b98c <topo_dio0_isr+0x290>)
 800b758:	f016 f963 	bl	8021a22 <memset>
            // read rx packet from start address (in data buffer) of last packet received
            SX1276Write(REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800b75c:	2010      	movs	r0, #16
 800b75e:	f001 f985 	bl	800ca6c <SX1276Read>
 800b762:	4603      	mov	r3, r0
 800b764:	4619      	mov	r1, r3
 800b766:	200d      	movs	r0, #13
 800b768:	f001 f96e 	bl	800ca48 <SX1276Write>
            SX1276ReadFifo(Rx_Buffer, packet_len );
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	4619      	mov	r1, r3
 800b772:	4886      	ldr	r0, [pc, #536]	; (800b98c <topo_dio0_isr+0x290>)
 800b774:	f001 fa02 	bl	800cb7c <SX1276ReadFifo>
            uint16_t topo_hash_rx = Chirp_RSHash((uint8_t *)&(Rx_Buffer[0]), 2);
 800b778:	2102      	movs	r1, #2
 800b77a:	4884      	ldr	r0, [pc, #528]	; (800b98c <topo_dio0_isr+0x290>)
 800b77c:	f013 fdd6 	bl	801f32c <Chirp_RSHash>
 800b780:	4603      	mov	r3, r0
 800b782:	857b      	strh	r3, [r7, #42]	; 0x2a
            if (topo_hash_rx == Rx_Buffer[2] >> 8 | Rx_Buffer[3])
 800b784:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b786:	4b81      	ldr	r3, [pc, #516]	; (800b98c <topo_dio0_isr+0x290>)
 800b788:	789b      	ldrb	r3, [r3, #2]
 800b78a:	121b      	asrs	r3, r3, #8
 800b78c:	429a      	cmp	r2, r3
 800b78e:	bf0c      	ite	eq
 800b790:	2301      	moveq	r3, #1
 800b792:	2300      	movne	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	4b7c      	ldr	r3, [pc, #496]	; (800b98c <topo_dio0_isr+0x290>)
 800b79a:	78db      	ldrb	r3, [r3, #3]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 809d 	beq.w	800b8de <topo_dio0_isr+0x1e2>
            {
                // count++;
                rx_receive_num++;
 800b7a4:	4b7a      	ldr	r3, [pc, #488]	; (800b990 <topo_dio0_isr+0x294>)
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	4b78      	ldr	r3, [pc, #480]	; (800b990 <topo_dio0_isr+0x294>)
 800b7ae:	801a      	strh	r2, [r3, #0]

                // Returns SNR value [dB] rounded to the nearest integer value
                SnrValue = (((int8_t)SX1276Read(REG_LR_PKTSNRVALUE)) + 2) >> 2;
 800b7b0:	2019      	movs	r0, #25
 800b7b2:	f001 f95b 	bl	800ca6c <SX1276Read>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	3302      	adds	r3, #2
 800b7bc:	109b      	asrs	r3, r3, #2
 800b7be:	b25a      	sxtb	r2, r3
 800b7c0:	4b74      	ldr	r3, [pc, #464]	; (800b994 <topo_dio0_isr+0x298>)
 800b7c2:	701a      	strb	r2, [r3, #0]
                rssi_link = SX1276Read(REG_LR_PKTRSSIVALUE);
 800b7c4:	201a      	movs	r0, #26
 800b7c6:	f001 f951 	bl	800ca6c <SX1276Read>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	b21a      	sxth	r2, r3
 800b7ce:	4b72      	ldr	r3, [pc, #456]	; (800b998 <topo_dio0_isr+0x29c>)
 800b7d0:	801a      	strh	r2, [r3, #0]

                if (SnrValue < 0)
 800b7d2:	4b70      	ldr	r3, [pc, #448]	; (800b994 <topo_dio0_isr+0x298>)
 800b7d4:	f993 3000 	ldrsb.w	r3, [r3]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	da35      	bge.n	800b848 <topo_dio0_isr+0x14c>
                {
                    if (chirp_config.lora_freq > RF_MID_BAND_THRESH)
 800b7dc:	4b6f      	ldr	r3, [pc, #444]	; (800b99c <topo_dio0_isr+0x2a0>)
 800b7de:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800b7e2:	4a6f      	ldr	r2, [pc, #444]	; (800b9a0 <topo_dio0_isr+0x2a4>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d917      	bls.n	800b818 <topo_dio0_isr+0x11c>
                        RssiValue_link = RSSI_OFFSET_HF + rssi_link + (rssi_link >> 4) + SnrValue;
 800b7e8:	4b6b      	ldr	r3, [pc, #428]	; (800b998 <topo_dio0_isr+0x29c>)
 800b7ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7ee:	111b      	asrs	r3, r3, #4
 800b7f0:	b21b      	sxth	r3, r3
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	4b68      	ldr	r3, [pc, #416]	; (800b998 <topo_dio0_isr+0x29c>)
 800b7f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	4b64      	ldr	r3, [pc, #400]	; (800b994 <topo_dio0_isr+0x298>)
 800b802:	f993 3000 	ldrsb.w	r3, [r3]
 800b806:	b29b      	uxth	r3, r3
 800b808:	4413      	add	r3, r2
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	3b9d      	subs	r3, #157	; 0x9d
 800b80e:	b29b      	uxth	r3, r3
 800b810:	b21a      	sxth	r2, r3
 800b812:	4b64      	ldr	r3, [pc, #400]	; (800b9a4 <topo_dio0_isr+0x2a8>)
 800b814:	801a      	strh	r2, [r3, #0]
 800b816:	e040      	b.n	800b89a <topo_dio0_isr+0x19e>
                    else
                        RssiValue_link = RSSI_OFFSET_LF + rssi_link + (rssi_link >> 4) + SnrValue;
 800b818:	4b5f      	ldr	r3, [pc, #380]	; (800b998 <topo_dio0_isr+0x29c>)
 800b81a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b81e:	111b      	asrs	r3, r3, #4
 800b820:	b21b      	sxth	r3, r3
 800b822:	b29a      	uxth	r2, r3
 800b824:	4b5c      	ldr	r3, [pc, #368]	; (800b998 <topo_dio0_isr+0x29c>)
 800b826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4413      	add	r3, r2
 800b82e:	b29a      	uxth	r2, r3
 800b830:	4b58      	ldr	r3, [pc, #352]	; (800b994 <topo_dio0_isr+0x298>)
 800b832:	f993 3000 	ldrsb.w	r3, [r3]
 800b836:	b29b      	uxth	r3, r3
 800b838:	4413      	add	r3, r2
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	3ba4      	subs	r3, #164	; 0xa4
 800b83e:	b29b      	uxth	r3, r3
 800b840:	b21a      	sxth	r2, r3
 800b842:	4b58      	ldr	r3, [pc, #352]	; (800b9a4 <topo_dio0_isr+0x2a8>)
 800b844:	801a      	strh	r2, [r3, #0]
 800b846:	e028      	b.n	800b89a <topo_dio0_isr+0x19e>
                }
                else
                {
                    if (chirp_config.lora_freq > RF_MID_BAND_THRESH)
 800b848:	4b54      	ldr	r3, [pc, #336]	; (800b99c <topo_dio0_isr+0x2a0>)
 800b84a:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800b84e:	4a54      	ldr	r2, [pc, #336]	; (800b9a0 <topo_dio0_isr+0x2a4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d911      	bls.n	800b878 <topo_dio0_isr+0x17c>
                        RssiValue_link = RSSI_OFFSET_HF + rssi_link + (rssi_link >> 4);
 800b854:	4b50      	ldr	r3, [pc, #320]	; (800b998 <topo_dio0_isr+0x29c>)
 800b856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b85a:	111b      	asrs	r3, r3, #4
 800b85c:	b21b      	sxth	r3, r3
 800b85e:	b29a      	uxth	r2, r3
 800b860:	4b4d      	ldr	r3, [pc, #308]	; (800b998 <topo_dio0_isr+0x29c>)
 800b862:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b866:	b29b      	uxth	r3, r3
 800b868:	4413      	add	r3, r2
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	3b9d      	subs	r3, #157	; 0x9d
 800b86e:	b29b      	uxth	r3, r3
 800b870:	b21a      	sxth	r2, r3
 800b872:	4b4c      	ldr	r3, [pc, #304]	; (800b9a4 <topo_dio0_isr+0x2a8>)
 800b874:	801a      	strh	r2, [r3, #0]
 800b876:	e010      	b.n	800b89a <topo_dio0_isr+0x19e>
                    else
                        RssiValue_link = RSSI_OFFSET_LF + rssi_link + (rssi_link >> 4);
 800b878:	4b47      	ldr	r3, [pc, #284]	; (800b998 <topo_dio0_isr+0x29c>)
 800b87a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b87e:	111b      	asrs	r3, r3, #4
 800b880:	b21b      	sxth	r3, r3
 800b882:	b29a      	uxth	r2, r3
 800b884:	4b44      	ldr	r3, [pc, #272]	; (800b998 <topo_dio0_isr+0x29c>)
 800b886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	4413      	add	r3, r2
 800b88e:	b29b      	uxth	r3, r3
 800b890:	3ba4      	subs	r3, #164	; 0xa4
 800b892:	b29b      	uxth	r3, r3
 800b894:	b21a      	sxth	r2, r3
 800b896:	4b43      	ldr	r3, [pc, #268]	; (800b9a4 <topo_dio0_isr+0x2a8>)
 800b898:	801a      	strh	r2, [r3, #0]
                }
                node_topology_link[Rx_Buffer[0]-1].snr_link = SnrValue;
 800b89a:	4b3e      	ldr	r3, [pc, #248]	; (800b994 <topo_dio0_isr+0x298>)
 800b89c:	f993 1000 	ldrsb.w	r1, [r3]
 800b8a0:	4b41      	ldr	r3, [pc, #260]	; (800b9a8 <topo_dio0_isr+0x2ac>)
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	4b39      	ldr	r3, [pc, #228]	; (800b98c <topo_dio0_isr+0x290>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	b20a      	sxth	r2, r1
 800b8b4:	801a      	strh	r2, [r3, #0]
                node_topology_link[Rx_Buffer[0]-1].rssi_link = RssiValue_link;
 800b8b6:	4b3c      	ldr	r3, [pc, #240]	; (800b9a8 <topo_dio0_isr+0x2ac>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	4b34      	ldr	r3, [pc, #208]	; (800b98c <topo_dio0_isr+0x290>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	4a36      	ldr	r2, [pc, #216]	; (800b9a4 <topo_dio0_isr+0x2a8>)
 800b8ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b8ce:	805a      	strh	r2, [r3, #2]
                // printf("rx-----------:%d, %d, %lu\n", SnrValue, RssiValue_link, Rx_Buffer[0]-1);

                PRINTF("RX: %d\n", rx_receive_num);
 800b8d0:	4b2f      	ldr	r3, [pc, #188]	; (800b990 <topo_dio0_isr+0x294>)
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4835      	ldr	r0, [pc, #212]	; (800b9ac <topo_dio0_isr+0x2b0>)
 800b8d8:	f016 feb0 	bl	802263c <iprintf>
 800b8dc:	e010      	b.n	800b900 <topo_dio0_isr+0x204>
            }
            else
            {
                PRINTF("crc: %d\n", rx_receive_num);
 800b8de:	4b2c      	ldr	r3, [pc, #176]	; (800b990 <topo_dio0_isr+0x294>)
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4832      	ldr	r0, [pc, #200]	; (800b9b0 <topo_dio0_isr+0x2b4>)
 800b8e6:	f016 fea9 	bl	802263c <iprintf>
 800b8ea:	e009      	b.n	800b900 <topo_dio0_isr+0x204>
            }
        }
        else
        {
			SX1276Write(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR);
 800b8ec:	2120      	movs	r1, #32
 800b8ee:	2012      	movs	r0, #18
 800b8f0:	f001 f8aa 	bl	800ca48 <SX1276Write>
            PRINTF("RX wrong: %d\n", rx_receive_num);
 800b8f4:	4b26      	ldr	r3, [pc, #152]	; (800b990 <topo_dio0_isr+0x294>)
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	482e      	ldr	r0, [pc, #184]	; (800b9b4 <topo_dio0_isr+0x2b8>)
 800b8fc:	f016 fe9e 	bl	802263c <iprintf>
        }
        SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800b900:	2000      	movs	r0, #0
 800b902:	f001 f829 	bl	800c958 <SX1276SetOpMode>
        SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800b906:	2005      	movs	r0, #5
 800b908:	f001 f826 	bl	800c958 <SX1276SetOpMode>
 800b90c:	2300      	movs	r3, #0
 800b90e:	623b      	str	r3, [r7, #32]
}

static ALWAYS_INLINE void gpi_led_off(int mask)
{
	if (mask)
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d073      	beq.n	800b9fe <topo_dio0_isr+0x302>
		LED_GPIO_Port->BRR = mask;
 800b916:	4a1c      	ldr	r2, [pc, #112]	; (800b988 <topo_dio0_isr+0x28c>)
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	6293      	str	r3, [r2, #40]	; 0x28
            tx_send_num++;
            topology_state = TX_RUNNING;
        }
        gpi_led_off(GPI_LED_2);
    }
}
 800b91c:	e06f      	b.n	800b9fe <topo_dio0_isr+0x302>
    else if (topology_state == TX_RUNNING)
 800b91e:	4b19      	ldr	r3, [pc, #100]	; (800b984 <topo_dio0_isr+0x288>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2b0c      	cmp	r3, #12
 800b924:	d16b      	bne.n	800b9fe <topo_dio0_isr+0x302>
        PRINTF("TXDONE\n");
 800b926:	4824      	ldr	r0, [pc, #144]	; (800b9b8 <topo_dio0_isr+0x2bc>)
 800b928:	f016 ff10 	bl	802274c <puts>
 800b92c:	2300      	movs	r3, #0
 800b92e:	61fb      	str	r3, [r7, #28]
	if (mask)
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <topo_dio0_isr+0x240>
		LED_GPIO_Port->BSRR = mask;
 800b936:	4a14      	ldr	r2, [pc, #80]	; (800b988 <topo_dio0_isr+0x28c>)
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	6193      	str	r3, [r2, #24]
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800b93c:	2108      	movs	r1, #8
 800b93e:	2012      	movs	r0, #18
 800b940:	f001 f882 	bl	800ca48 <SX1276Write>
        topology_state = 0;
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <topo_dio0_isr+0x288>)
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <topo_dio0_isr+0x2c0>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        Gpi_Fast_Tick_Native tx_interval = gpi_tick_fast_native() + GPI_TICK_US_TO_FAST2(10000);
 800b950:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800b954:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), tx_interval) < 0);
 800b95a:	bf00      	nop
 800b95c:	4b17      	ldr	r3, [pc, #92]	; (800b9bc <topo_dio0_isr+0x2c0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	617b      	str	r3, [r7, #20]
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	61bb      	str	r3, [r7, #24]
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	db24      	blt.n	800b9c0 <topo_dio0_isr+0x2c4>
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf14      	ite	ne
 800b97c:	2301      	movne	r3, #1
 800b97e:	2300      	moveq	r3, #0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	e01f      	b.n	800b9c4 <topo_dio0_isr+0x2c8>
 800b984:	20000d68 	.word	0x20000d68
 800b988:	48000800 	.word	0x48000800
 800b98c:	20000e44 	.word	0x20000e44
 800b990:	20000e40 	.word	0x20000e40
 800b994:	20000370 	.word	0x20000370
 800b998:	20000e42 	.word	0x20000e42
 800b99c:	20001430 	.word	0x20001430
 800b9a0:	1f4add40 	.word	0x1f4add40
 800b9a4:	20000f0c 	.word	0x20000f0c
 800b9a8:	20000e34 	.word	0x20000e34
 800b9ac:	08025854 	.word	0x08025854
 800b9b0:	0802585c 	.word	0x0802585c
 800b9b4:	08025868 	.word	0x08025868
 800b9b8:	08025878 	.word	0x08025878
 800b9bc:	200012c8 	.word	0x200012c8
 800b9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dbc9      	blt.n	800b95c <topo_dio0_isr+0x260>
        if (tx_send_num < tx_num_max)
 800b9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <topo_dio0_isr+0x30c>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <topo_dio0_isr+0x310>)
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d90b      	bls.n	800b9ee <topo_dio0_isr+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 800b9d6:	2003      	movs	r0, #3
 800b9d8:	f000 ffbe 	bl	800c958 <SX1276SetOpMode>
            tx_send_num++;
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <topo_dio0_isr+0x310>)
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <topo_dio0_isr+0x310>)
 800b9e6:	801a      	strh	r2, [r3, #0]
            topology_state = TX_RUNNING;
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <topo_dio0_isr+0x314>)
 800b9ea:	220c      	movs	r2, #12
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	613b      	str	r3, [r7, #16]
	if (mask)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <topo_dio0_isr+0x302>
		LED_GPIO_Port->BRR = mask;
 800b9f8:	4a06      	ldr	r2, [pc, #24]	; (800ba14 <topo_dio0_isr+0x318>)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6293      	str	r3, [r2, #40]	; 0x28
}
 800b9fe:	bf00      	nop
 800ba00:	3730      	adds	r7, #48	; 0x30
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000360 	.word	0x20000360
 800ba0c:	20000e38 	.word	0x20000e38
 800ba10:	20000d68 	.word	0x20000d68
 800ba14:	48000800 	.word	0x48000800

0800ba18 <topo_main_timer_isr>:

void topo_main_timer_isr()
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
    gpi_watchdog_periodic();
 800ba1c:	f002 fbd8 	bl	800e1d0 <gpi_watchdog_periodic>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f06f 0202 	mvn.w	r2, #2
 800ba28:	611a      	str	r2, [r3, #16]
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68da      	ldr	r2, [r3, #12]
 800ba30:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0202 	bic.w	r2, r2, #2
 800ba38:	60da      	str	r2, [r3, #12]
    MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST(16000000);
 800ba3a:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	4a08      	ldr	r2, [pc, #32]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba42:	6812      	ldr	r2, [r2, #0]
 800ba44:	f103 6374 	add.w	r3, r3, #255852544	; 0xf400000
 800ba48:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 800ba4c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <topo_main_timer_isr+0x4c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f042 0202 	orr.w	r2, r2, #2
 800ba5c:	60da      	str	r2, [r3, #12]
}
 800ba5e:	bf00      	nop
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	200012c8 	.word	0x200012c8

0800ba68 <gpi_tick_slow_extended>:

// 	return o.u32;
// }

Gpi_Slow_Tick_Extended gpi_tick_slow_extended()
{
 800ba68:	b4f0      	push	{r4, r5, r6, r7}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0

	REORDER_BARRIER();

	// NOTE: We do not use CMSIS functions at this point to avoid spill code in debug builds.
	// This may be a matter of taste (it is not absolutely necessary if performance is secondary).
	__ASM volatile
 800ba6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba72:	b672      	cpsid	i
 800ba74:	461d      	mov	r5, r3
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800ba76:	f3bf 8f5f 	dmb	sy
	);

	REORDER_BARRIER();
	__DMB();

	return ie;
 800ba7a:	462b      	mov	r3, r5
	// TODO: check how the function is used and decide if we can remove the int-lock or
	// provide and unlocked version (using the same static variables)
	// ATTENTION: int-lock makes the function reentrant; it is not without the int-lock.
	// Maybe it is possible to use a marker to avoid nested updates, e.g. the LSB of s.last.

	int ie = gpi_int_lock();
 800ba7c:	60fb      	str	r3, [r7, #12]
		a = hlptim1.Instance->CNT;
 800ba7e:	4b17      	ldr	r3, [pc, #92]	; (800badc <gpi_tick_slow_extended+0x74>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	b29d      	uxth	r5, r3
		b = hlptim1.Instance->CNT;
 800ba86:	4b15      	ldr	r3, [pc, #84]	; (800badc <gpi_tick_slow_extended+0x74>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	b29e      	uxth	r6, r3
	while (a != b);
 800ba8e:	42b5      	cmp	r5, r6
 800ba90:	d1f5      	bne.n	800ba7e <gpi_tick_slow_extended+0x16>
	return a;
 800ba92:	462b      	mov	r3, r5

	o.u16_l = gpi_tick_slow_native();
 800ba94:	f363 040f 	bfi	r4, r3, #0, #16

	// extend format
	// ATTENTION: function has to be called periodically at least once per 0xFFFF ticks,
	// otherwise it will loose ticks in high part
	if (o.u16_l < s.last)
 800ba98:	b2a2      	uxth	r2, r4
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <gpi_tick_slow_extended+0x78>)
 800ba9c:	885b      	ldrh	r3, [r3, #2]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d205      	bcs.n	800baae <gpi_tick_slow_extended+0x46>
	{
		// gpi_led_toggle(GPI_LED_2);
		s.high++;
 800baa2:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <gpi_tick_slow_extended+0x78>)
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <gpi_tick_slow_extended+0x78>)
 800baac:	801a      	strh	r2, [r3, #0]
	}
	s.last = o.u16_l;
 800baae:	b2a2      	uxth	r2, r4
 800bab0:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <gpi_tick_slow_extended+0x78>)
 800bab2:	805a      	strh	r2, [r3, #2]

	o.u16_h = s.high;
 800bab4:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <gpi_tick_slow_extended+0x78>)
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	f363 441f 	bfi	r4, r3, #16, #16
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	60bb      	str	r3, [r7, #8]
 800bac0:	f3bf 8f5f 	dmb	sy
{
	REORDER_BARRIER();
	__DMB();

	// NOTE: we expect ie as it has been returned by gpi_int_lock()
	__set_PRIMASK(ie);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f383 8810 	msr	PRIMASK, r3

	gpi_int_unlock(ie);

	return o.u32;
 800bace:	4623      	mov	r3, r4
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bcf0      	pop	{r4, r5, r6, r7}
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	200011e4 	.word	0x200011e4
 800bae0:	200003b8 	.word	0x200003b8

0800bae4 <gpi_tick_fast_extended>:

//*************************************************************************************************

Gpi_Fast_Tick_Extended gpi_tick_fast_extended()
{
 800bae4:	b4f0      	push	{r4, r5, r6, r7}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
	__ASM volatile
 800baea:	f3ef 8310 	mrs	r3, PRIMASK
 800baee:	b672      	cpsid	i
 800baf0:	461e      	mov	r6, r3
  __ASM volatile ("dmb 0xF":::"memory");
 800baf2:	f3bf 8f5f 	dmb	sy
	return ie;
 800baf6:	4633      	mov	r3, r6
	// TODO: check how the function is used and decide if we can remove the int-lock or
	// provide and unlocked version (using the same static variables)
	// ATTENTION: int-lock makes the function reentrant; it is not without the int-lock.
	// Maybe it is possible to use a marker to avoid nested updates, e.g. the LSB of s.last.

	int ie = gpi_int_lock();
 800baf8:	60fb      	str	r3, [r7, #12]
	return htim2.Instance->CNT;
 800bafa:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <gpi_tick_fast_extended+0x60>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	o.u32_l = gpi_tick_fast_native();
 800bb00:	461c      	mov	r4, r3
	// extend format
	// ATTENTION: function has to be called periodically at least once per 0xF...F ticks,
	// otherwise it will loose ticks in high part
	// To catch such situations, we could additionally compare the slow ticks. This would
	// decrease the probability of missed overruns (significantly).
	if (o.u32_l < s.last)
 800bb02:	4622      	mov	r2, r4
 800bb04:	4b10      	ldr	r3, [pc, #64]	; (800bb48 <gpi_tick_fast_extended+0x64>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d204      	bcs.n	800bb16 <gpi_tick_fast_extended+0x32>
		s.high++;
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <gpi_tick_fast_extended+0x64>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3301      	adds	r3, #1
 800bb12:	4a0d      	ldr	r2, [pc, #52]	; (800bb48 <gpi_tick_fast_extended+0x64>)
 800bb14:	6013      	str	r3, [r2, #0]
	s.last = o.u32_l;
 800bb16:	4622      	mov	r2, r4
 800bb18:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <gpi_tick_fast_extended+0x64>)
 800bb1a:	605a      	str	r2, [r3, #4]

	o.u32_h = s.high;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <gpi_tick_fast_extended+0x64>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	461d      	mov	r5, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	60bb      	str	r3, [r7, #8]
 800bb26:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f383 8810 	msr	PRIMASK, r3

	gpi_int_unlock(ie);

	return o.u64;
 800bb34:	4623      	mov	r3, r4
 800bb36:	462c      	mov	r4, r5
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bcf0      	pop	{r4, r5, r6, r7}
 800bb42:	4770      	bx	lr
 800bb44:	200012c8 	.word	0x200012c8
 800bb48:	200003bc 	.word	0x200003bc

0800bb4c <gpi_tick_hybrid>:
}

//**************************************************************************************************

Gpi_Hybrid_Tick gpi_tick_hybrid()
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <gpi_tick_hybrid+0x18>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return gpi_tick_fast_to_hybrid(gpi_tick_fast_native());
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f850 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 800bb5c:	4603      	mov	r3, r0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	200012c8 	.word	0x200012c8

0800bb68 <gpi_tick_hybrid_reference>:

//**************************************************************************************************
Gpi_Hybrid_Reference gpi_tick_hybrid_reference()
{
 800bb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	b089      	sub	sp, #36	; 0x24
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
	register Generic32		t;
	register uint16_t		slow;
	register uint32_t		fast;
	Gpi_Hybrid_Reference	r;

	slow = hlptim1.Instance->CNT;
 800bb72:	4b20      	ldr	r3, [pc, #128]	; (800bbf4 <gpi_tick_hybrid_reference+0x8c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	b29d      	uxth	r5, r3
	fast = htim2.Instance->CNT;
 800bb7a:	4b1f      	ldr	r3, [pc, #124]	; (800bbf8 <gpi_tick_hybrid_reference+0x90>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6a5e      	ldr	r6, [r3, #36]	; 0x24

	t.u32 = gpi_tick_slow_extended();
 800bb80:	f7ff ff72 	bl	800ba68 <gpi_tick_slow_extended>
 800bb84:	4603      	mov	r3, r0
 800bb86:	461c      	mov	r4, r3
	if (t.u16_l < slow)
 800bb88:	b2a3      	uxth	r3, r4
 800bb8a:	429d      	cmp	r5, r3
 800bb8c:	d906      	bls.n	800bb9c <gpi_tick_hybrid_reference+0x34>
		t.u16_h--;
 800bb8e:	f3c4 430f 	ubfx	r3, r4, #16, #16
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	f363 441f 	bfi	r4, r3, #16, #16
	t.u16_l = slow;
 800bb9c:	f365 040f 	bfi	r4, r5, #0, #16
		ASSERT_CT(32768 == GPI_SLOW_CLOCK_RATE, GPI_SLOW_CLOCK_RATE_unsupported);
		ASSERT_CT((512000000u == (512000000u / GPI_HYBRID_CLOCK_RATE) * GPI_HYBRID_CLOCK_RATE) &&
			IS_POWER_OF_2(512000000u / GPI_HYBRID_CLOCK_RATE),
			hybrid_slow_ratio_unsupported);

		t.u32 = gpi_mulu_32x16to64(t.u32, 15625) >> MSB(512000000u / GPI_HYBRID_CLOCK_RATE);
 800bba0:	4623      	mov	r3, r4
 800bba2:	61fb      	str	r3, [r7, #28]
 800bba4:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bba8:	837b      	strh	r3, [r7, #26]
	return gpi_mulu_32x32to64(a, b);
 800bbaa:	8b7b      	ldrh	r3, [r7, #26]
 800bbac:	69fa      	ldr	r2, [r7, #28]
 800bbae:	617a      	str	r2, [r7, #20]
 800bbb0:	613b      	str	r3, [r7, #16]
	asm
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	fba3 2302 	umull	r2, r3, r3, r2
 800bbba:	4690      	mov	r8, r2
 800bbbc:	4699      	mov	r9, r3
	return result.u64;
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	464a      	mov	r2, r9
 800bbc2:	f04f 0300 	mov.w	r3, #0
 800bbc6:	f04f 0400 	mov.w	r4, #0
 800bbca:	094b      	lsrs	r3, r1, #5
 800bbcc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800bbd0:	0954      	lsrs	r4, r2, #5
 800bbd2:	461c      	mov	r4, r3
    }

	r.hybrid_tick = t.u32;
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	60bb      	str	r3, [r7, #8]
	r.fast_capture = fast;
 800bbd8:	60fe      	str	r6, [r7, #12]

	return r;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	f107 0308 	add.w	r3, r7, #8
 800bbe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbe6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	3724      	adds	r7, #36	; 0x24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf4:	200011e4 	.word	0x200011e4
 800bbf8:	200012c8 	.word	0x200012c8

0800bbfc <gpi_tick_fast_to_hybrid>:

//*************************************************************************************************

Gpi_Hybrid_Tick gpi_tick_fast_to_hybrid(Gpi_Fast_Tick_Native fast_tick)
{
 800bbfc:	b590      	push	{r4, r7, lr}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
	register Gpi_Hybrid_Reference	r;
	register Gpi_Fast_Tick_Native	delta;

	// get last edge ticks
	// ATTENTION: this must happen <= 0xF...F fast ticks after the interesting point in time
	r = gpi_tick_hybrid_reference();
 800bc04:	463b      	mov	r3, r7
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff ffae 	bl	800bb68 <gpi_tick_hybrid_reference>
 800bc0c:	f107 0310 	add.w	r3, r7, #16
 800bc10:	463a      	mov	r2, r7
 800bc12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc16:	e883 0003 	stmia.w	r3, {r0, r1}
	// attention: we expect that fast_tick is before edge tick in the typical case. But the edge is
	// from the (near) past, so it is also possible that fast_tick stems from a period < 1 slow
	// clock cycles after the edge. In this case, -delta < GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE
	// (+ some tolerance if fast clock is asynchronous to slow clock, e.g. DCO vs. XO). Hence we
	// split the interpretation of delta at this value.
	delta = r.fast_capture - fast_tick;
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	1ad4      	subs	r4, r2, r3

	// compute hybrid tick:
	// if fast_tick is behind edge for sure: sub delta with respect to datatypes
	// ATTENTION: we add a safety margin that compensates for clock drift (i.e. delta may be
	// > GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE even if fast_tick is between edge and next edge)
	if (-delta < ((GPI_FAST_CLOCK_RATE / GPI_SLOW_CLOCK_RATE) * 103) / 100)
 800bc20:	4263      	negs	r3, r4
 800bc22:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800bc26:	d203      	bcs.n	800bc30 <gpi_tick_fast_to_hybrid+0x34>
		r.hybrid_tick += -delta / (GPI_FAST_CLOCK_RATE / GPI_HYBRID_CLOCK_RATE);
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	1b1b      	subs	r3, r3, r4
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	e002      	b.n	800bc36 <gpi_tick_fast_to_hybrid+0x3a>

	// else sub delta in standard way
	else
		r.hybrid_tick -= delta / (GPI_FAST_CLOCK_RATE / GPI_HYBRID_CLOCK_RATE);
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	1b1b      	subs	r3, r3, r4
 800bc34:	613b      	str	r3, [r7, #16]

	return r.hybrid_tick;
 800bc36:	693b      	ldr	r3, [r7, #16]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd90      	pop	{r4, r7, pc}

0800bc40 <SX1276IoInit>:
static bool RadioIsActive = false;
//**************************************************************************************************
//***** Global Functions ***************************************************************************
/*sx1276mb1mas---------------------------------------------------------------------------*/
void SX1276IoInit( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bc46:	1d3b      	adds	r3, r7, #4
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	605a      	str	r2, [r3, #4]
 800bc4e:	609a      	str	r2, [r3, #8]
 800bc50:	60da      	str	r2, [r3, #12]
 800bc52:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_IT_RISING;
 800bc54:	4b11      	ldr	r3, [pc, #68]	; (800bc9c <SX1276IoInit+0x5c>)
 800bc56:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_PULLDOWN;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800bc60:	1d3b      	adds	r3, r7, #4
 800bc62:	461a      	mov	r2, r3
 800bc64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc6c:	f001 fd4e 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800bc70:	1d3b      	adds	r3, r7, #4
 800bc72:	461a      	mov	r2, r3
 800bc74:	2108      	movs	r1, #8
 800bc76:	480a      	ldr	r0, [pc, #40]	; (800bca0 <SX1276IoInit+0x60>)
 800bc78:	f001 fd48 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800bc7c:	1d3b      	adds	r3, r7, #4
 800bc7e:	461a      	mov	r2, r3
 800bc80:	2120      	movs	r1, #32
 800bc82:	4807      	ldr	r0, [pc, #28]	; (800bca0 <SX1276IoInit+0x60>)
 800bc84:	f001 fd42 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800bc88:	1d3b      	adds	r3, r7, #4
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	2110      	movs	r1, #16
 800bc8e:	4804      	ldr	r0, [pc, #16]	; (800bca0 <SX1276IoInit+0x60>)
 800bc90:	f001 fd3c 	bl	800d70c <HW_GPIO_Init>
}
 800bc94:	bf00      	nop
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	10110000 	.word	0x10110000
 800bca0:	48000400 	.word	0x48000400

0800bca4 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
    HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bcb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bcba:	f001 fd93 	bl	800d7e4 <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	2108      	movs	r1, #8
 800bcc8:	480b      	ldr	r0, [pc, #44]	; (800bcf8 <SX1276IoIrqInit+0x54>)
 800bcca:	f001 fd8b 	bl	800d7e4 <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	2120      	movs	r1, #32
 800bcd8:	4807      	ldr	r0, [pc, #28]	; (800bcf8 <SX1276IoIrqInit+0x54>)
 800bcda:	f001 fd83 	bl	800d7e4 <HW_GPIO_SetIrq>
    HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	330c      	adds	r3, #12
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2201      	movs	r2, #1
 800bce6:	2110      	movs	r1, #16
 800bce8:	4803      	ldr	r0, [pc, #12]	; (800bcf8 <SX1276IoIrqInit+0x54>)
 800bcea:	f001 fd7b 	bl	800d7e4 <HW_GPIO_SetIrq>
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	48000400 	.word	0x48000400

0800bcfc <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bd02:	1d3b      	adds	r3, r7, #4
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	605a      	str	r2, [r3, #4]
 800bd0a:	609a      	str	r2, [r3, #8]
 800bd0c:	60da      	str	r2, [r3, #12]
 800bd0e:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_IT_RISING ;
 800bd10:	4b10      	ldr	r3, [pc, #64]	; (800bd54 <SX1276IoDeInit+0x58>)
 800bd12:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_PULLDOWN;
 800bd14:	2302      	movs	r3, #2
 800bd16:	60fb      	str	r3, [r7, #12]

    HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800bd18:	1d3b      	adds	r3, r7, #4
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bd24:	f001 fcf2 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800bd28:	1d3b      	adds	r3, r7, #4
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	2108      	movs	r1, #8
 800bd2e:	480a      	ldr	r0, [pc, #40]	; (800bd58 <SX1276IoDeInit+0x5c>)
 800bd30:	f001 fcec 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800bd34:	1d3b      	adds	r3, r7, #4
 800bd36:	461a      	mov	r2, r3
 800bd38:	2120      	movs	r1, #32
 800bd3a:	4807      	ldr	r0, [pc, #28]	; (800bd58 <SX1276IoDeInit+0x5c>)
 800bd3c:	f001 fce6 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800bd40:	1d3b      	adds	r3, r7, #4
 800bd42:	461a      	mov	r2, r3
 800bd44:	2110      	movs	r1, #16
 800bd46:	4804      	ldr	r0, [pc, #16]	; (800bd58 <SX1276IoDeInit+0x5c>)
 800bd48:	f001 fce0 	bl	800d70c <HW_GPIO_Init>
}
 800bd4c:	bf00      	nop
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	10110000 	.word	0x10110000
 800bd58:	48000400 	.word	0x48000400

0800bd5c <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 800bd6e:	2009      	movs	r0, #9
 800bd70:	f000 fe7c 	bl	800ca6c <SX1276Read>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 800bd78:	204d      	movs	r0, #77	; 0x4d
 800bd7a:	f000 fe77 	bl	800ca6c <SX1276Read>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800bd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd8a:	b25c      	sxtb	r4, r3
 800bd8c:	4b49      	ldr	r3, [pc, #292]	; (800beb4 <SX1276SetRfTxPower+0x158>)
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 f891 	bl	800beb8 <SX1276GetPaSelect>
 800bd96:	4603      	mov	r3, r0
 800bd98:	b25b      	sxtb	r3, r3
 800bd9a:	4323      	orrs	r3, r4
 800bd9c:	b25b      	sxtb	r3, r3
 800bd9e:	73fb      	strb	r3, [r7, #15]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800bda6:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800bda8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da4e      	bge.n	800be4e <SX1276SetRfTxPower+0xf2>
    {
        if( power > 17 )
 800bdb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdb4:	2b11      	cmp	r3, #17
 800bdb6:	dd04      	ble.n	800bdc2 <SX1276SetRfTxPower+0x66>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	f043 0307 	orr.w	r3, r3, #7
 800bdbe:	73bb      	strb	r3, [r7, #14]
 800bdc0:	e008      	b.n	800bdd4 <SX1276SetRfTxPower+0x78>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800bdc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f043 0304 	orr.w	r3, r3, #4
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	d11b      	bne.n	800be16 <SX1276SetRfTxPower+0xba>
        {
            if( power < 5 )
 800bdde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bde2:	2b04      	cmp	r3, #4
 800bde4:	dc01      	bgt.n	800bdea <SX1276SetRfTxPower+0x8e>
            {
                power = 5;
 800bde6:	2305      	movs	r3, #5
 800bde8:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 800bdea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdee:	2b14      	cmp	r3, #20
 800bdf0:	dd01      	ble.n	800bdf6 <SX1276SetRfTxPower+0x9a>
            {
                power = 20;
 800bdf2:	2314      	movs	r3, #20
 800bdf4:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800bdf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdfa:	f023 030f 	bic.w	r3, r3, #15
 800bdfe:	b25a      	sxtb	r2, r3
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	3b05      	subs	r3, #5
 800be04:	b2db      	uxtb	r3, r3
 800be06:	b25b      	sxtb	r3, r3
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	4313      	orrs	r3, r2
 800be10:	b25b      	sxtb	r3, r3
 800be12:	73fb      	strb	r3, [r7, #15]
 800be14:	e040      	b.n	800be98 <SX1276SetRfTxPower+0x13c>
        }
        else
        {
            if( power < 2 )
 800be16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	dc01      	bgt.n	800be22 <SX1276SetRfTxPower+0xc6>
            {
                power = 2;
 800be1e:	2302      	movs	r3, #2
 800be20:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 800be22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be26:	2b11      	cmp	r3, #17
 800be28:	dd01      	ble.n	800be2e <SX1276SetRfTxPower+0xd2>
            {
                power = 17;
 800be2a:	2311      	movs	r3, #17
 800be2c:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800be2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be32:	f023 030f 	bic.w	r3, r3, #15
 800be36:	b25a      	sxtb	r2, r3
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	3b02      	subs	r3, #2
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	b25b      	sxtb	r3, r3
 800be40:	f003 030f 	and.w	r3, r3, #15
 800be44:	b25b      	sxtb	r3, r3
 800be46:	4313      	orrs	r3, r2
 800be48:	b25b      	sxtb	r3, r3
 800be4a:	73fb      	strb	r3, [r7, #15]
 800be4c:	e024      	b.n	800be98 <SX1276SetRfTxPower+0x13c>
        }
        // SX1276Write( REG_LR_OCP, 0x2F );
    }
    else
    {
        paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800be4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be52:	f023 0307 	bic.w	r3, r3, #7
 800be56:	b25b      	sxtb	r3, r3
 800be58:	f043 0304 	orr.w	r3, r3, #4
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	73bb      	strb	r3, [r7, #14]
        if( power < -1 )
 800be60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	da01      	bge.n	800be6e <SX1276SetRfTxPower+0x112>
        {
            power = -1;
 800be6a:	23ff      	movs	r3, #255	; 0xff
 800be6c:	71fb      	strb	r3, [r7, #7]
        }
        if( power > 14 )
 800be6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be72:	2b0e      	cmp	r3, #14
 800be74:	dd01      	ble.n	800be7a <SX1276SetRfTxPower+0x11e>
        {
            power = 14;
 800be76:	230e      	movs	r3, #14
 800be78:	71fb      	strb	r3, [r7, #7]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800be7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be7e:	f023 030f 	bic.w	r3, r3, #15
 800be82:	b25a      	sxtb	r2, r3
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	3301      	adds	r3, #1
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	b25b      	sxtb	r3, r3
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	b25b      	sxtb	r3, r3
 800be92:	4313      	orrs	r3, r2
 800be94:	b25b      	sxtb	r3, r3
 800be96:	73fb      	strb	r3, [r7, #15]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	4619      	mov	r1, r3
 800be9c:	2009      	movs	r0, #9
 800be9e:	f000 fdd3 	bl	800ca48 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	4619      	mov	r1, r3
 800bea6:	204d      	movs	r0, #77	; 0x4d
 800bea8:	f000 fdce 	bl	800ca48 <SX1276Write>
}
 800beac:	bf00      	nop
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd90      	pop	{r4, r7, pc}
 800beb4:	200013c4 	.word	0x200013c4

0800beb8 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_RFO;
 800bec0:	2300      	movs	r3, #0
    // return RF_PACONFIG_PASELECT_PABOOST;
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <SX1276SetAntSwLowPower+0x38>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	79fa      	ldrb	r2, [r7, #7]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d00d      	beq.n	800bf00 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800bee4:	4a08      	ldr	r2, [pc, #32]	; (800bf08 <SX1276SetAntSwLowPower+0x38>)
 800bee6:	79fb      	ldrb	r3, [r7, #7]
 800bee8:	7013      	strb	r3, [r2, #0]

        if( status == false )
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	f083 0301 	eor.w	r3, r3, #1
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800bef6:	f000 f809 	bl	800bf0c <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 800befa:	e001      	b.n	800bf00 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 800befc:	f000 f828 	bl	800bf50 <SX1276AntSwDeInit>
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20000368 	.word	0x20000368

0800bf0c <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	605a      	str	r2, [r3, #4]
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	60da      	str	r2, [r3, #12]
 800bf1e:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800bf20:	2301      	movs	r3, #1
 800bf22:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct  );
 800bf2c:	1d3b      	adds	r3, r7, #4
 800bf2e:	461a      	mov	r2, r3
 800bf30:	2102      	movs	r1, #2
 800bf32:	4806      	ldr	r0, [pc, #24]	; (800bf4c <SX1276AntSwInit+0x40>)
 800bf34:	f001 fbea 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2102      	movs	r1, #2
 800bf3c:	4803      	ldr	r0, [pc, #12]	; (800bf4c <SX1276AntSwInit+0x40>)
 800bf3e:	f001 fca3 	bl	800d888 <HW_GPIO_Write>
}
 800bf42:	bf00      	nop
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	48000800 	.word	0x48000800

0800bf50 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct={0};
 800bf56:	1d3b      	adds	r3, r7, #4
 800bf58:	2200      	movs	r2, #0
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	605a      	str	r2, [r3, #4]
 800bf5e:	609a      	str	r2, [r3, #8]
 800bf60:	60da      	str	r2, [r3, #12]
 800bf62:	611a      	str	r2, [r3, #16]

    initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf64:	2301      	movs	r3, #1
 800bf66:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	613b      	str	r3, [r7, #16]

    HW_GPIO_Init(  RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, &initStruct );
 800bf70:	1d3b      	adds	r3, r7, #4
 800bf72:	461a      	mov	r2, r3
 800bf74:	2102      	movs	r1, #2
 800bf76:	4806      	ldr	r0, [pc, #24]	; (800bf90 <SX1276AntSwDeInit+0x40>)
 800bf78:	f001 fbc8 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, 0);
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2102      	movs	r1, #2
 800bf80:	4803      	ldr	r0, [pc, #12]	; (800bf90 <SX1276AntSwDeInit+0x40>)
 800bf82:	f001 fc81 	bl	800d888 <HW_GPIO_Write>
}
 800bf86:	bf00      	nop
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	48000800 	.word	0x48000800

0800bf94 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	71fb      	strb	r3, [r7, #7]
    switch( opMode )
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d105      	bne.n	800bfb0 <SX1276SetAntSw+0x1c>
    {
    case RFLR_OPMODE_TRANSMITTER:
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_TX);
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	2102      	movs	r1, #2
 800bfa8:	4806      	ldr	r0, [pc, #24]	; (800bfc4 <SX1276SetAntSw+0x30>)
 800bfaa:	f001 fc6d 	bl	800d888 <HW_GPIO_Write>
        break;
 800bfae:	e005      	b.n	800bfbc <SX1276SetAntSw+0x28>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT, RADIO_ANT_SWITCH_PIN, RADIO_ANT_SWITCH_SET_RX);
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2102      	movs	r1, #2
 800bfb4:	4803      	ldr	r0, [pc, #12]	; (800bfc4 <SX1276SetAntSw+0x30>)
 800bfb6:	f001 fc67 	bl	800d888 <HW_GPIO_Write>
        break;
 800bfba:	bf00      	nop
    }
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	48000800 	.word	0x48000800

0800bfc8 <SX1276Init>:
SX1276_t SX1276;

DioIrqHandler *DioIrq[] = { SX1276OnDio0Irq, SX1276OnDio1Irq, SX1276OnDio2Irq, SX1276OnDio3Irq, SX1276OnDio4Irq};
/*---------------------------------------------------------------------------*/
uint32_t SX1276Init()
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
    uint8_t i;
    SX1276IoIrqInit( DioIrq );
 800bfce:	482b      	ldr	r0, [pc, #172]	; (800c07c <SX1276Init+0xb4>)
 800bfd0:	f7ff fe68 	bl	800bca4 <SX1276IoIrqInit>
    HAL_NVIC_DisableIRQ( EXTI4_IRQn );
 800bfd4:	200a      	movs	r0, #10
 800bfd6:	f7f5 fe9c 	bl	8001d12 <HAL_NVIC_DisableIRQ>

    SX1276Reset( );
 800bfda:	f000 fc93 	bl	800c904 <SX1276Reset>
    // Clear dio3 IRQ (PB4), as SX1276Reset will generate dio3 IRQ
    __HAL_GPIO_EXTI_CLEAR_FLAG(RADIO_DIO_3_PIN);
 800bfde:	4b28      	ldr	r3, [pc, #160]	; (800c080 <SX1276Init+0xb8>)
 800bfe0:	2210      	movs	r2, #16
 800bfe2:	615a      	str	r2, [r3, #20]
    HAL_NVIC_EnableIRQ( EXTI4_IRQn );
 800bfe4:	200a      	movs	r0, #10
 800bfe6:	f7f5 fe86 	bl	8001cf6 <HAL_NVIC_EnableIRQ>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800bfea:	2000      	movs	r0, #0
 800bfec:	f000 fcb4 	bl	800c958 <SX1276SetOpMode>

    // LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
    // SX1276IoIrqInit( DioIrq );

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800bff0:	2300      	movs	r3, #0
 800bff2:	71fb      	strb	r3, [r7, #7]
 800bff4:	e020      	b.n	800c038 <SX1276Init+0x70>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800bff6:	79fa      	ldrb	r2, [r7, #7]
 800bff8:	4922      	ldr	r1, [pc, #136]	; (800c084 <SX1276Init+0xbc>)
 800bffa:	4613      	mov	r3, r2
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	4413      	add	r3, r2
 800c000:	440b      	add	r3, r1
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fce1 	bl	800c9cc <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800c00a:	79fa      	ldrb	r2, [r7, #7]
 800c00c:	491d      	ldr	r1, [pc, #116]	; (800c084 <SX1276Init+0xbc>)
 800c00e:	4613      	mov	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	4413      	add	r3, r2
 800c014:	440b      	add	r3, r1
 800c016:	3301      	adds	r3, #1
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	b298      	uxth	r0, r3
 800c01c:	79fa      	ldrb	r2, [r7, #7]
 800c01e:	4919      	ldr	r1, [pc, #100]	; (800c084 <SX1276Init+0xbc>)
 800c020:	4613      	mov	r3, r2
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	4413      	add	r3, r2
 800c026:	440b      	add	r3, r1
 800c028:	3302      	adds	r3, #2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4619      	mov	r1, r3
 800c02e:	f000 fd0b 	bl	800ca48 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	3301      	adds	r3, #1
 800c036:	71fb      	strb	r3, [r7, #7]
 800c038:	79fb      	ldrb	r3, [r7, #7]
 800c03a:	2b0f      	cmp	r3, #15
 800c03c:	d9db      	bls.n	800bff6 <SX1276Init+0x2e>
    }
    SX1276SetModem( MODEM_LORA );
 800c03e:	2001      	movs	r0, #1
 800c040:	f000 fcc4 	bl	800c9cc <SX1276SetModem>

    // Launch Rx chain calibration
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800c044:	203b      	movs	r0, #59	; 0x3b
 800c046:	f000 fd11 	bl	800ca6c <SX1276Read>
 800c04a:	4603      	mov	r3, r0
 800c04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c050:	b2db      	uxtb	r3, r3
 800c052:	4619      	mov	r1, r3
 800c054:	203b      	movs	r0, #59	; 0x3b
 800c056:	f000 fcf7 	bl	800ca48 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800c05a:	bf00      	nop
 800c05c:	203b      	movs	r0, #59	; 0x3b
 800c05e:	f000 fd05 	bl	800ca6c <SX1276Read>
 800c062:	4603      	mov	r3, r0
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b20      	cmp	r3, #32
 800c06a:	d0f7      	beq.n	800c05c <SX1276Init+0x94>
    {
    }

    SX1276.Settings.State = RF_IDLE;
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <SX1276Init+0xc0>)
 800c06e:	2200      	movs	r2, #0
 800c070:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )(BOARD_WAKEUP_TIME + RADIO_WAKEUP_TIME);// BOARD_WAKEUP_TIME;
 800c072:	2302      	movs	r3, #2
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	2000008c 	.word	0x2000008c
 800c080:	40010400 	.word	0x40010400
 800c084:	08026ed4 	.word	0x08026ed4
 800c088:	200013c4 	.word	0x200013c4

0800c08c <SX1276SetChannel>:
{
    return SX1276.Settings.State;
}

void SX1276SetChannel( uint32_t freq )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 800c094:	4a1a      	ldr	r2, [pc, #104]	; (800c100 <SX1276SetChannel+0x74>)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6093      	str	r3, [r2, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a19      	ldr	r2, [pc, #100]	; (800c104 <SX1276SetChannel+0x78>)
 800c09e:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a2:	0b1b      	lsrs	r3, r3, #12
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f643 5209 	movw	r2, #15625	; 0x3d09
 800c0ac:	fb02 f303 	mul.w	r3, r2, r3
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	613b      	str	r3, [r7, #16]
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	021a      	lsls	r2, r3, #8
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	490f      	ldr	r1, [pc, #60]	; (800c104 <SX1276SetChannel+0x78>)
 800c0c6:	fba1 1303 	umull	r1, r3, r1, r3
 800c0ca:	0b1b      	lsrs	r3, r3, #12
 800c0cc:	4413      	add	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	2006      	movs	r0, #6
 800c0da:	f000 fcb5 	bl	800ca48 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	0a1b      	lsrs	r3, r3, #8
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	2007      	movs	r0, #7
 800c0e8:	f000 fcae 	bl	800ca48 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	2008      	movs	r0, #8
 800c0f4:	f000 fca8 	bl	800ca48 <SX1276Write>
}
 800c0f8:	bf00      	nop
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	200013c4 	.word	0x200013c4
 800c104:	431bde83 	.word	0x431bde83

0800c108 <GetFskBandwidthRegValue>:
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    SX1276SetChannel( initialFreq );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
 800c114:	e017      	b.n	800c146 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	4a10      	ldr	r2, [pc, #64]	; (800c15c <GetFskBandwidthRegValue+0x54>)
 800c11a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	429a      	cmp	r2, r3
 800c122:	d30d      	bcc.n	800c140 <GetFskBandwidthRegValue+0x38>
 800c124:	7bfb      	ldrb	r3, [r7, #15]
 800c126:	3301      	adds	r3, #1
 800c128:	4a0c      	ldr	r2, [pc, #48]	; (800c15c <GetFskBandwidthRegValue+0x54>)
 800c12a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	429a      	cmp	r2, r3
 800c132:	d205      	bcs.n	800c140 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	4a09      	ldr	r2, [pc, #36]	; (800c15c <GetFskBandwidthRegValue+0x54>)
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	791b      	ldrb	r3, [r3, #4]
 800c13e:	e006      	b.n	800c14e <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	3301      	adds	r3, #1
 800c144:	73fb      	strb	r3, [r7, #15]
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	2b14      	cmp	r3, #20
 800c14a:	d9e4      	bls.n	800c116 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c14c:	e7fe      	b.n	800c14c <GetFskBandwidthRegValue+0x44>
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	08026f04 	.word	0x08026f04

0800c160 <SX1276SetRxConfig>:
                        uint32_t bandwidthAfc, uint16_t preambleLen,
                        uint16_t symbTimeout, bool fixLen,
                        uint8_t payloadLen,
                        bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                        bool iqInverted, bool rxContinuous )
{
 800c160:	b5b0      	push	{r4, r5, r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	461a      	mov	r2, r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	73fb      	strb	r3, [r7, #15]
 800c170:	4613      	mov	r3, r2
 800c172:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fc28 	bl	800c9cc <SX1276SetModem>

    switch( modem )
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <SX1276SetRxConfig+0x2a>
 800c182:	2b01      	cmp	r3, #1
 800c184:	f000 80cf 	beq.w	800c326 <SX1276SetRxConfig+0x1c6>
                            RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800c188:	e1f9      	b.n	800c57e <SX1276SetRxConfig+0x41e>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c18a:	4a91      	ldr	r2, [pc, #580]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	6153      	str	r3, [r2, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800c190:	4a8f      	ldr	r2, [pc, #572]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	61d3      	str	r3, [r2, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800c196:	4a8e      	ldr	r2, [pc, #568]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	6193      	str	r3, [r2, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800c19c:	4a8c      	ldr	r2, [pc, #560]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c19e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1a2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800c1a6:	4a8a      	ldr	r2, [pc, #552]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c1a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c1ac:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800c1b0:	4a87      	ldr	r2, [pc, #540]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c1b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c1b6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800c1ba:	4a85      	ldr	r2, [pc, #532]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c1bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1c0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800c1c4:	4a82      	ldr	r2, [pc, #520]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c1c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c1ca:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c1ce:	4a80      	ldr	r2, [pc, #512]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c1d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1d2:	8413      	strh	r3, [r2, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800c1d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f4 f9ae 	bl	8000538 <__aeabi_i2d>
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7f4 f999 	bl	8000518 <__aeabi_ui2d>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	f04f 0000 	mov.w	r0, #0
 800c1ee:	4979      	ldr	r1, [pc, #484]	; (800c3d4 <SX1276SetRxConfig+0x274>)
 800c1f0:	f7f4 fb36 	bl	8000860 <__aeabi_ddiv>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f04f 0200 	mov.w	r2, #0
 800c200:	4b75      	ldr	r3, [pc, #468]	; (800c3d8 <SX1276SetRxConfig+0x278>)
 800c202:	f7f4 fa03 	bl	800060c <__aeabi_dmul>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4620      	mov	r0, r4
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 f9fd 	bl	800060c <__aeabi_dmul>
 800c212:	4603      	mov	r3, r0
 800c214:	460c      	mov	r4, r1
 800c216:	4618      	mov	r0, r3
 800c218:	4621      	mov	r1, r4
 800c21a:	f04f 0200 	mov.w	r2, #0
 800c21e:	4b6f      	ldr	r3, [pc, #444]	; (800c3dc <SX1276SetRxConfig+0x27c>)
 800c220:	f7f4 f9f4 	bl	800060c <__aeabi_dmul>
 800c224:	4603      	mov	r3, r0
 800c226:	460c      	mov	r4, r1
 800c228:	4618      	mov	r0, r3
 800c22a:	4621      	mov	r1, r4
 800c22c:	f7f4 fcc6 	bl	8000bbc <__aeabi_d2uiz>
 800c230:	4602      	mov	r2, r0
 800c232:	4b67      	ldr	r3, [pc, #412]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c234:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7f4 f96e 	bl	8000518 <__aeabi_ui2d>
 800c23c:	4603      	mov	r3, r0
 800c23e:	460c      	mov	r4, r1
 800c240:	461a      	mov	r2, r3
 800c242:	4623      	mov	r3, r4
 800c244:	a160      	add	r1, pc, #384	; (adr r1, 800c3c8 <SX1276SetRxConfig+0x268>)
 800c246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24a:	f7f4 fb09 	bl	8000860 <__aeabi_ddiv>
 800c24e:	4603      	mov	r3, r0
 800c250:	460c      	mov	r4, r1
 800c252:	4618      	mov	r0, r3
 800c254:	4621      	mov	r1, r4
 800c256:	f7f4 fcb1 	bl	8000bbc <__aeabi_d2uiz>
 800c25a:	4603      	mov	r3, r0
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	0a1b      	lsrs	r3, r3, #8
 800c264:	b2db      	uxtb	r3, r3
 800c266:	4619      	mov	r1, r3
 800c268:	2002      	movs	r0, #2
 800c26a:	f000 fbed 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	b2db      	uxtb	r3, r3
 800c272:	4619      	mov	r1, r3
 800c274:	2003      	movs	r0, #3
 800c276:	f000 fbe7 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800c27a:	68b8      	ldr	r0, [r7, #8]
 800c27c:	f7ff ff44 	bl	800c108 <GetFskBandwidthRegValue>
 800c280:	4603      	mov	r3, r0
 800c282:	4619      	mov	r1, r3
 800c284:	2012      	movs	r0, #18
 800c286:	f000 fbdf 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800c28a:	6a38      	ldr	r0, [r7, #32]
 800c28c:	f7ff ff3c 	bl	800c108 <GetFskBandwidthRegValue>
 800c290:	4603      	mov	r3, r0
 800c292:	4619      	mov	r1, r3
 800c294:	2013      	movs	r0, #19
 800c296:	f000 fbd7 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	2025      	movs	r0, #37	; 0x25
 800c2a6:	f000 fbcf 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c2aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	2026      	movs	r0, #38	; 0x26
 800c2b2:	f000 fbc9 	bl	800ca48 <SX1276Write>
            if( fixLen == 1 )
 800c2b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d006      	beq.n	800c2cc <SX1276SetRxConfig+0x16c>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800c2be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	2032      	movs	r0, #50	; 0x32
 800c2c6:	f000 fbbf 	bl	800ca48 <SX1276Write>
 800c2ca:	e003      	b.n	800c2d4 <SX1276SetRxConfig+0x174>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800c2cc:	21ff      	movs	r1, #255	; 0xff
 800c2ce:	2032      	movs	r0, #50	; 0x32
 800c2d0:	f000 fbba 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_PACKETCONFIG1 ) &
 800c2d4:	2030      	movs	r0, #48	; 0x30
 800c2d6:	f000 fbc9 	bl	800ca6c <SX1276Read>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	b25b      	sxtb	r3, r3
                        RF_PACKETCONFIG1_CRC_MASK &
 800c2de:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800c2e2:	b25b      	sxtb	r3, r3
                        RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800c2e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d001      	beq.n	800c2f0 <SX1276SetRxConfig+0x190>
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	e001      	b.n	800c2f4 <SX1276SetRxConfig+0x194>
 800c2f0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	b25a      	sxtb	r2, r3
                        ( crcOn << 4 ) );
 800c2f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c2fc:	011b      	lsls	r3, r3, #4
                        ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800c2fe:	b25b      	sxtb	r3, r3
 800c300:	4313      	orrs	r3, r2
 800c302:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800c304:	b2db      	uxtb	r3, r3
 800c306:	4619      	mov	r1, r3
 800c308:	2030      	movs	r0, #48	; 0x30
 800c30a:	f000 fb9d 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800c30e:	2031      	movs	r0, #49	; 0x31
 800c310:	f000 fbac 	bl	800ca6c <SX1276Read>
 800c314:	4603      	mov	r3, r0
 800c316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	4619      	mov	r1, r3
 800c31e:	2031      	movs	r0, #49	; 0x31
 800c320:	f000 fb92 	bl	800ca48 <SX1276Write>
        break;
 800c324:	e12b      	b.n	800c57e <SX1276SetRxConfig+0x41e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c326:	4a2a      	ldr	r2, [pc, #168]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	6453      	str	r3, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800c32c:	4a28      	ldr	r2, [pc, #160]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6493      	str	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 800c332:	4a27      	ldr	r2, [pc, #156]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800c33a:	4a25      	ldr	r2, [pc, #148]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c33c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c33e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800c342:	4a23      	ldr	r2, [pc, #140]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c344:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c348:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800c34c:	4a20      	ldr	r2, [pc, #128]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c34e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c352:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800c356:	4a1e      	ldr	r2, [pc, #120]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c358:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c35c:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800c360:	4a1b      	ldr	r2, [pc, #108]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c362:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c366:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800c36a:	4a19      	ldr	r2, [pc, #100]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c36c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c370:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c374:	4a16      	ldr	r2, [pc, #88]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c376:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c37a:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800c37e:	4a14      	ldr	r2, [pc, #80]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c380:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c384:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
            if( datarate > 12 )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b0c      	cmp	r3, #12
 800c38c:	d902      	bls.n	800c394 <SX1276SetRxConfig+0x234>
                datarate = 12;
 800c38e:	230c      	movs	r3, #12
 800c390:	607b      	str	r3, [r7, #4]
 800c392:	e004      	b.n	800c39e <SX1276SetRxConfig+0x23e>
            else if( datarate < 6 )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b05      	cmp	r3, #5
 800c398:	d801      	bhi.n	800c39e <SX1276SetRxConfig+0x23e>
                datarate = 6;
 800c39a:	2306      	movs	r3, #6
 800c39c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b07      	cmp	r3, #7
 800c3a2:	d105      	bne.n	800c3b0 <SX1276SetRxConfig+0x250>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b0b      	cmp	r3, #11
 800c3a8:	d008      	beq.n	800c3bc <SX1276SetRxConfig+0x25c>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b0c      	cmp	r3, #12
 800c3ae:	d005      	beq.n	800c3bc <SX1276SetRxConfig+0x25c>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b08      	cmp	r3, #8
 800c3b4:	d114      	bne.n	800c3e0 <SX1276SetRxConfig+0x280>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b0c      	cmp	r3, #12
 800c3ba:	d111      	bne.n	800c3e0 <SX1276SetRxConfig+0x280>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800c3bc:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <SX1276SetRxConfig+0x270>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800c3c4:	e010      	b.n	800c3e8 <SX1276SetRxConfig+0x288>
 800c3c6:	bf00      	nop
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	417e8480 	.word	0x417e8480
 800c3d0:	200013c4 	.word	0x200013c4
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	40200000 	.word	0x40200000
 800c3dc:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800c3e0:	4b69      	ldr	r3, [pc, #420]	; (800c588 <SX1276SetRxConfig+0x428>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                        ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c3e8:	201d      	movs	r0, #29
 800c3ea:	f000 fb3f 	bl	800ca6c <SX1276Read>
                        ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	011b      	lsls	r3, r3, #4
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                        ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c404:	4313      	orrs	r3, r2
 800c406:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c408:	4619      	mov	r1, r3
 800c40a:	201d      	movs	r0, #29
 800c40c:	f000 fb1c 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800c410:	201e      	movs	r0, #30
 800c412:	f000 fb2b 	bl	800ca6c <SX1276Read>
 800c416:	4603      	mov	r3, r0
                        RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800c418:	f003 0308 	and.w	r3, r3, #8
 800c41c:	b2da      	uxtb	r2, r3
                        ( datarate << 4 ) | ( crcOn << 2 ) |
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	011b      	lsls	r3, r3, #4
 800c424:	b2db      	uxtb	r3, r3
                        RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800c426:	4313      	orrs	r3, r2
 800c428:	b2da      	uxtb	r2, r3
                        ( datarate << 4 ) | ( crcOn << 2 ) |
 800c42a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	b2db      	uxtb	r3, r3
 800c432:	4313      	orrs	r3, r2
 800c434:	b2da      	uxtb	r2, r3
                        ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800c436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c438:	0a1b      	lsrs	r3, r3, #8
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	f003 0303 	and.w	r3, r3, #3
 800c442:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c444:	4313      	orrs	r3, r2
 800c446:	b2db      	uxtb	r3, r3
 800c448:	4619      	mov	r1, r3
 800c44a:	201e      	movs	r0, #30
 800c44c:	f000 fafc 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c450:	2026      	movs	r0, #38	; 0x26
 800c452:	f000 fb0b 	bl	800ca6c <SX1276Read>
 800c456:	4603      	mov	r3, r0
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	f023 0308 	bic.w	r3, r3, #8
 800c45e:	b25a      	sxtb	r2, r3
                        ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c460:	4b49      	ldr	r3, [pc, #292]	; (800c588 <SX1276SetRxConfig+0x428>)
 800c462:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c466:	00db      	lsls	r3, r3, #3
                        RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800c468:	b25b      	sxtb	r3, r3
 800c46a:	4313      	orrs	r3, r2
 800c46c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	4619      	mov	r1, r3
 800c472:	2026      	movs	r0, #38	; 0x26
 800c474:	f000 fae8 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800c478:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	4619      	mov	r1, r3
 800c47e:	201f      	movs	r0, #31
 800c480:	f000 fae2 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800c484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c486:	0a1b      	lsrs	r3, r3, #8
 800c488:	b29b      	uxth	r3, r3
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	4619      	mov	r1, r3
 800c48e:	2020      	movs	r0, #32
 800c490:	f000 fada 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800c494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c496:	b2db      	uxtb	r3, r3
 800c498:	4619      	mov	r1, r3
 800c49a:	2021      	movs	r0, #33	; 0x21
 800c49c:	f000 fad4 	bl	800ca48 <SX1276Write>
            if( fixLen == 1 )
 800c4a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d005      	beq.n	800c4b4 <SX1276SetRxConfig+0x354>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800c4a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	2022      	movs	r0, #34	; 0x22
 800c4b0:	f000 faca 	bl	800ca48 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c4b4:	4b34      	ldr	r3, [pc, #208]	; (800c588 <SX1276SetRxConfig+0x428>)
 800c4b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d011      	beq.n	800c4e2 <SX1276SetRxConfig+0x382>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800c4be:	2044      	movs	r0, #68	; 0x44
 800c4c0:	f000 fad4 	bl	800ca6c <SX1276Read>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	2044      	movs	r0, #68	; 0x44
 800c4d0:	f000 faba 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800c4d4:	4b2c      	ldr	r3, [pc, #176]	; (800c588 <SX1276SetRxConfig+0x428>)
 800c4d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c4da:	4619      	mov	r1, r3
 800c4dc:	2024      	movs	r0, #36	; 0x24
 800c4de:	f000 fab3 	bl	800ca48 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b09      	cmp	r3, #9
 800c4e6:	d10d      	bne.n	800c504 <SX1276SetRxConfig+0x3a4>
 800c4e8:	4b27      	ldr	r3, [pc, #156]	; (800c588 <SX1276SetRxConfig+0x428>)
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	4a27      	ldr	r2, [pc, #156]	; (800c58c <SX1276SetRxConfig+0x42c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d908      	bls.n	800c504 <SX1276SetRxConfig+0x3a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c4f2:	2102      	movs	r1, #2
 800c4f4:	2036      	movs	r0, #54	; 0x36
 800c4f6:	f000 faa7 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800c4fa:	2164      	movs	r1, #100	; 0x64
 800c4fc:	203a      	movs	r0, #58	; 0x3a
 800c4fe:	f000 faa3 	bl	800ca48 <SX1276Write>
 800c502:	e00f      	b.n	800c524 <SX1276SetRxConfig+0x3c4>
            else if( bandwidth == 9 )
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	2b09      	cmp	r3, #9
 800c508:	d108      	bne.n	800c51c <SX1276SetRxConfig+0x3bc>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800c50a:	2102      	movs	r1, #2
 800c50c:	2036      	movs	r0, #54	; 0x36
 800c50e:	f000 fa9b 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800c512:	217f      	movs	r1, #127	; 0x7f
 800c514:	203a      	movs	r0, #58	; 0x3a
 800c516:	f000 fa97 	bl	800ca48 <SX1276Write>
 800c51a:	e003      	b.n	800c524 <SX1276SetRxConfig+0x3c4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800c51c:	2103      	movs	r1, #3
 800c51e:	2036      	movs	r0, #54	; 0x36
 800c520:	f000 fa92 	bl	800ca48 <SX1276Write>
            if( datarate == 6 )
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b06      	cmp	r3, #6
 800c528:	d114      	bne.n	800c554 <SX1276SetRxConfig+0x3f4>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c52a:	2031      	movs	r0, #49	; 0x31
 800c52c:	f000 fa9e 	bl	800ca6c <SX1276Read>
 800c530:	4603      	mov	r3, r0
 800c532:	b25b      	sxtb	r3, r3
 800c534:	f023 0307 	bic.w	r3, r3, #7
 800c538:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c53a:	f043 0305 	orr.w	r3, r3, #5
 800c53e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c540:	b2db      	uxtb	r3, r3
 800c542:	4619      	mov	r1, r3
 800c544:	2031      	movs	r0, #49	; 0x31
 800c546:	f000 fa7f 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c54a:	210c      	movs	r1, #12
 800c54c:	2037      	movs	r0, #55	; 0x37
 800c54e:	f000 fa7b 	bl	800ca48 <SX1276Write>
        break;
 800c552:	e013      	b.n	800c57c <SX1276SetRxConfig+0x41c>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c554:	2031      	movs	r0, #49	; 0x31
 800c556:	f000 fa89 	bl	800ca6c <SX1276Read>
 800c55a:	4603      	mov	r3, r0
 800c55c:	b25b      	sxtb	r3, r3
 800c55e:	f023 0307 	bic.w	r3, r3, #7
 800c562:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c564:	f043 0303 	orr.w	r3, r3, #3
 800c568:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	4619      	mov	r1, r3
 800c56e:	2031      	movs	r0, #49	; 0x31
 800c570:	f000 fa6a 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c574:	210a      	movs	r1, #10
 800c576:	2037      	movs	r0, #55	; 0x37
 800c578:	f000 fa66 	bl	800ca48 <SX1276Write>
        break;
 800c57c:	bf00      	nop
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bdb0      	pop	{r4, r5, r7, pc}
 800c586:	bf00      	nop
 800c588:	200013c4 	.word	0x200013c4
 800c58c:	1f4add40 	.word	0x1f4add40

0800c590 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	60ba      	str	r2, [r7, #8]
 800c598:	607b      	str	r3, [r7, #4]
 800c59a:	4603      	mov	r3, r0
 800c59c:	73fb      	strb	r3, [r7, #15]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 fa11 	bl	800c9cc <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800c5aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fbd4 	bl	800bd5c <SX1276SetRfTxPower>

    switch( modem )
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d003      	beq.n	800c5c2 <SX1276SetTxConfig+0x32>
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	f000 8099 	beq.w	800c6f2 <SX1276SetTxConfig+0x162>
                            RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800c5c0:	e181      	b.n	800c8c6 <SX1276SetTxConfig+0x336>
            SX1276.Settings.Fsk.Power = power;
 800c5c2:	4ab5      	ldr	r2, [pc, #724]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	7313      	strb	r3, [r2, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 800c5c8:	4ab3      	ldr	r2, [pc, #716]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	6113      	str	r3, [r2, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800c5ce:	4ab2      	ldr	r2, [pc, #712]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6153      	str	r3, [r2, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 800c5d4:	4ab0      	ldr	r2, [pc, #704]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	61d3      	str	r3, [r2, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800c5da:	4aaf      	ldr	r2, [pc, #700]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5de:	8413      	strh	r3, [r2, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800c5e0:	4aad      	ldr	r2, [pc, #692]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5e6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800c5ea:	4aab      	ldr	r2, [pc, #684]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c5f0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800c5f4:	4aa8      	ldr	r2, [pc, #672]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c5f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5fa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800c5fe:	4aa6      	ldr	r2, [pc, #664]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c602:	6293      	str	r3, [r2, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800c604:	68b8      	ldr	r0, [r7, #8]
 800c606:	f7f3 ff87 	bl	8000518 <__aeabi_ui2d>
 800c60a:	a39f      	add	r3, pc, #636	; (adr r3, 800c888 <SX1276SetTxConfig+0x2f8>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f4 f926 	bl	8000860 <__aeabi_ddiv>
 800c614:	4603      	mov	r3, r0
 800c616:	460c      	mov	r4, r1
 800c618:	4618      	mov	r0, r3
 800c61a:	4621      	mov	r1, r4
 800c61c:	f7f4 face 	bl	8000bbc <__aeabi_d2uiz>
 800c620:	4603      	mov	r3, r0
 800c622:	b29b      	uxth	r3, r3
 800c624:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	0a1b      	lsrs	r3, r3, #8
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	4619      	mov	r1, r3
 800c62e:	2004      	movs	r0, #4
 800c630:	f000 fa0a 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	b2db      	uxtb	r3, r3
 800c638:	4619      	mov	r1, r3
 800c63a:	2005      	movs	r0, #5
 800c63c:	f000 fa04 	bl	800ca48 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800c640:	6a38      	ldr	r0, [r7, #32]
 800c642:	f7f3 ff69 	bl	8000518 <__aeabi_ui2d>
 800c646:	4603      	mov	r3, r0
 800c648:	460c      	mov	r4, r1
 800c64a:	461a      	mov	r2, r3
 800c64c:	4623      	mov	r3, r4
 800c64e:	a190      	add	r1, pc, #576	; (adr r1, 800c890 <SX1276SetTxConfig+0x300>)
 800c650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c654:	f7f4 f904 	bl	8000860 <__aeabi_ddiv>
 800c658:	4603      	mov	r3, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	4618      	mov	r0, r3
 800c65e:	4621      	mov	r1, r4
 800c660:	f7f4 faac 	bl	8000bbc <__aeabi_d2uiz>
 800c664:	4603      	mov	r3, r0
 800c666:	b29b      	uxth	r3, r3
 800c668:	623b      	str	r3, [r7, #32]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	0a1b      	lsrs	r3, r3, #8
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	4619      	mov	r1, r3
 800c672:	2002      	movs	r0, #2
 800c674:	f000 f9e8 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	4619      	mov	r1, r3
 800c67e:	2003      	movs	r0, #3
 800c680:	f000 f9e2 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800c684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	b29b      	uxth	r3, r3
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	4619      	mov	r1, r3
 800c68e:	2025      	movs	r0, #37	; 0x25
 800c690:	f000 f9da 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800c694:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c696:	b2db      	uxtb	r3, r3
 800c698:	4619      	mov	r1, r3
 800c69a:	2026      	movs	r0, #38	; 0x26
 800c69c:	f000 f9d4 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_PACKETCONFIG1 ) &
 800c6a0:	2030      	movs	r0, #48	; 0x30
 800c6a2:	f000 f9e3 	bl	800ca6c <SX1276Read>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	b25b      	sxtb	r3, r3
                            RF_PACKETCONFIG1_CRC_MASK &
 800c6aa:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800c6ae:	b25b      	sxtb	r3, r3
                            RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800c6b0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	d001      	beq.n	800c6bc <SX1276SetTxConfig+0x12c>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	e001      	b.n	800c6c0 <SX1276SetTxConfig+0x130>
 800c6bc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	b25a      	sxtb	r2, r3
                            ( crcOn << 4 ) );
 800c6c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c6c8:	011b      	lsls	r3, r3, #4
                            ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800c6ca:	b25b      	sxtb	r3, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	2030      	movs	r0, #48	; 0x30
 800c6d6:	f000 f9b7 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800c6da:	2031      	movs	r0, #49	; 0x31
 800c6dc:	f000 f9c6 	bl	800ca6c <SX1276Read>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	2031      	movs	r0, #49	; 0x31
 800c6ec:	f000 f9ac 	bl	800ca48 <SX1276Write>
        break;
 800c6f0:	e0e9      	b.n	800c8c6 <SX1276SetTxConfig+0x336>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800c6f2:	4a69      	ldr	r2, [pc, #420]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6453      	str	r3, [r2, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800c6f8:	4a67      	ldr	r2, [pc, #412]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	6493      	str	r3, [r2, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 800c6fe:	4a66      	ldr	r2, [pc, #408]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c700:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c704:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800c708:	4a63      	ldr	r2, [pc, #396]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c70a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c70c:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800c710:	4a61      	ldr	r2, [pc, #388]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c716:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800c71a:	4a5f      	ldr	r2, [pc, #380]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c71c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c720:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800c724:	4a5c      	ldr	r2, [pc, #368]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c726:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c72a:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800c72e:	4a5a      	ldr	r2, [pc, #360]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c730:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c734:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800c738:	4a57      	ldr	r2, [pc, #348]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c73a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c73e:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800c742:	4a55      	ldr	r2, [pc, #340]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c746:	6593      	str	r3, [r2, #88]	; 0x58
            if( datarate > 12 )
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	2b0c      	cmp	r3, #12
 800c74c:	d902      	bls.n	800c754 <SX1276SetTxConfig+0x1c4>
                datarate = 12;
 800c74e:	230c      	movs	r3, #12
 800c750:	623b      	str	r3, [r7, #32]
 800c752:	e004      	b.n	800c75e <SX1276SetTxConfig+0x1ce>
            else if( datarate < 6 )
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	2b05      	cmp	r3, #5
 800c758:	d801      	bhi.n	800c75e <SX1276SetTxConfig+0x1ce>
                datarate = 6;
 800c75a:	2306      	movs	r3, #6
 800c75c:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b07      	cmp	r3, #7
 800c762:	d105      	bne.n	800c770 <SX1276SetTxConfig+0x1e0>
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	2b0b      	cmp	r3, #11
 800c768:	d008      	beq.n	800c77c <SX1276SetTxConfig+0x1ec>
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	2b0c      	cmp	r3, #12
 800c76e:	d005      	beq.n	800c77c <SX1276SetTxConfig+0x1ec>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b08      	cmp	r3, #8
 800c774:	d107      	bne.n	800c786 <SX1276SetTxConfig+0x1f6>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2b0c      	cmp	r3, #12
 800c77a:	d104      	bne.n	800c786 <SX1276SetTxConfig+0x1f6>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800c77c:	4b46      	ldr	r3, [pc, #280]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800c784:	e003      	b.n	800c78e <SX1276SetTxConfig+0x1fe>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800c786:	4b44      	ldr	r3, [pc, #272]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c78e:	4b42      	ldr	r3, [pc, #264]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c790:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c794:	2b00      	cmp	r3, #0
 800c796:	d011      	beq.n	800c7bc <SX1276SetTxConfig+0x22c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800c798:	2044      	movs	r0, #68	; 0x44
 800c79a:	f000 f967 	bl	800ca6c <SX1276Read>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	2044      	movs	r0, #68	; 0x44
 800c7aa:	f000 f94d 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800c7ae:	4b3a      	ldr	r3, [pc, #232]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c7b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	2024      	movs	r0, #36	; 0x24
 800c7b8:	f000 f946 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800c7bc:	201d      	movs	r0, #29
 800c7be:	f000 f955 	bl	800ca6c <SX1276Read>
                            ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c7d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                            ( bandwidth << 4 ) | ( coderate << 1 ) |
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800c7de:	4619      	mov	r1, r3
 800c7e0:	201d      	movs	r0, #29
 800c7e2:	f000 f931 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800c7e6:	201e      	movs	r0, #30
 800c7e8:	f000 f940 	bl	800ca6c <SX1276Read>
 800c7ec:	4603      	mov	r3, r0
                            RFLR_MODEMCONFIG2_SF_MASK &
 800c7ee:	f003 030b 	and.w	r3, r3, #11
 800c7f2:	b2da      	uxtb	r2, r3
                            ( datarate << 4 ) | ( crcOn << 2 ) );
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	b2db      	uxtb	r3, r3
                            RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	b2da      	uxtb	r2, r3
                            ( datarate << 4 ) | ( crcOn << 2 ) );
 800c800:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800c808:	4313      	orrs	r3, r2
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	4619      	mov	r1, r3
 800c80e:	201e      	movs	r0, #30
 800c810:	f000 f91a 	bl	800ca48 <SX1276Write>
                        ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800c814:	2026      	movs	r0, #38	; 0x26
 800c816:	f000 f929 	bl	800ca6c <SX1276Read>
 800c81a:	4603      	mov	r3, r0
 800c81c:	b25b      	sxtb	r3, r3
 800c81e:	f023 0308 	bic.w	r3, r3, #8
 800c822:	b25a      	sxtb	r2, r3
                            ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800c824:	4b1c      	ldr	r3, [pc, #112]	; (800c898 <SX1276SetTxConfig+0x308>)
 800c826:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c82a:	00db      	lsls	r3, r3, #3
                            RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800c82c:	b25b      	sxtb	r3, r3
 800c82e:	4313      	orrs	r3, r2
 800c830:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800c832:	b2db      	uxtb	r3, r3
 800c834:	4619      	mov	r1, r3
 800c836:	2026      	movs	r0, #38	; 0x26
 800c838:	f000 f906 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800c83c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c83e:	0a1b      	lsrs	r3, r3, #8
 800c840:	b29b      	uxth	r3, r3
 800c842:	b2db      	uxtb	r3, r3
 800c844:	4619      	mov	r1, r3
 800c846:	2020      	movs	r0, #32
 800c848:	f000 f8fe 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800c84c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4619      	mov	r1, r3
 800c852:	2021      	movs	r0, #33	; 0x21
 800c854:	f000 f8f8 	bl	800ca48 <SX1276Write>
            if( datarate == 6 )
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	2b06      	cmp	r3, #6
 800c85c:	d11e      	bne.n	800c89c <SX1276SetTxConfig+0x30c>
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c85e:	2031      	movs	r0, #49	; 0x31
 800c860:	f000 f904 	bl	800ca6c <SX1276Read>
 800c864:	4603      	mov	r3, r0
 800c866:	b25b      	sxtb	r3, r3
 800c868:	f023 0307 	bic.w	r3, r3, #7
 800c86c:	b25b      	sxtb	r3, r3
                                RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c86e:	f043 0305 	orr.w	r3, r3, #5
 800c872:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c874:	b2db      	uxtb	r3, r3
 800c876:	4619      	mov	r1, r3
 800c878:	2031      	movs	r0, #49	; 0x31
 800c87a:	f000 f8e5 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c87e:	210c      	movs	r1, #12
 800c880:	2037      	movs	r0, #55	; 0x37
 800c882:	f000 f8e1 	bl	800ca48 <SX1276Write>
        break;
 800c886:	e01d      	b.n	800c8c4 <SX1276SetTxConfig+0x334>
 800c888:	00000000 	.word	0x00000000
 800c88c:	404e8480 	.word	0x404e8480
 800c890:	00000000 	.word	0x00000000
 800c894:	417e8480 	.word	0x417e8480
 800c898:	200013c4 	.word	0x200013c4
                            ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800c89c:	2031      	movs	r0, #49	; 0x31
 800c89e:	f000 f8e5 	bl	800ca6c <SX1276Read>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	b25b      	sxtb	r3, r3
 800c8a6:	f023 0307 	bic.w	r3, r3, #7
 800c8aa:	b25b      	sxtb	r3, r3
                            RFLR_DETECTIONOPTIMIZE_MASK ) |
 800c8ac:	f043 0303 	orr.w	r3, r3, #3
 800c8b0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	2031      	movs	r0, #49	; 0x31
 800c8b8:	f000 f8c6 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800c8bc:	210a      	movs	r1, #10
 800c8be:	2037      	movs	r0, #55	; 0x37
 800c8c0:	f000 f8c2 	bl	800ca48 <SX1276Write>
        break;
 800c8c4:	bf00      	nop
}
 800c8c6:	bf00      	nop
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd90      	pop	{r4, r7, pc}
 800c8ce:	bf00      	nop

0800c8d0 <SX1276SetSleep>:
    }
    SX1276SetTx( txTimeout );
}

void SX1276SetSleep( void )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	f000 f83f 	bl	800c958 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800c8da:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <SX1276SetSleep+0x14>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	711a      	strb	r2, [r3, #4]
}
 800c8e0:	bf00      	nop
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	200013c4 	.word	0x200013c4

0800c8e8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
	SX1276IoDeInit();
 800c8ec:	f7ff fa06 	bl	800bcfc <SX1276IoDeInit>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800c8f0:	2001      	movs	r0, #1
 800c8f2:	f000 f831 	bl	800c958 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800c8f6:	4b02      	ldr	r3, [pc, #8]	; (800c900 <SX1276SetStby+0x18>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	711a      	strb	r2, [r3, #4]
}
 800c8fc:	bf00      	nop
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	200013c4 	.word	0x200013c4

0800c904 <SX1276Reset>:
    }
    return rssi;
}

void SX1276Reset( void )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 800c90a:	1d3b      	adds	r3, r7, #4
 800c90c:	2200      	movs	r2, #0
 800c90e:	601a      	str	r2, [r3, #0]
 800c910:	605a      	str	r2, [r3, #4]
 800c912:	609a      	str	r2, [r3, #8]
 800c914:	60da      	str	r2, [r3, #12]
 800c916:	611a      	str	r2, [r3, #16]

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800c918:	2301      	movs	r3, #1
 800c91a:	60bb      	str	r3, [r7, #8]
    initStruct.Pull = GPIO_NOPULL;
 800c91c:	2300      	movs	r3, #0
 800c91e:	60fb      	str	r3, [r7, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 800c920:	2303      	movs	r3, #3
 800c922:	613b      	str	r3, [r7, #16]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800c924:	1d3b      	adds	r3, r7, #4
 800c926:	461a      	mov	r2, r3
 800c928:	2101      	movs	r1, #1
 800c92a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c92e:	f000 feed 	bl	800d70c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 800c932:	2200      	movs	r2, #0
 800c934:	2101      	movs	r1, #1
 800c936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c93a:	f000 ffa5 	bl	800d888 <HW_GPIO_Write>


    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	60bb      	str	r3, [r7, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800c942:	1d3b      	adds	r3, r7, #4
 800c944:	461a      	mov	r2, r3
 800c946:	2101      	movs	r1, #1
 800c948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c94c:	f000 fede 	bl	800d70c <HW_GPIO_Init>

}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	4603      	mov	r3, r0
 800c960:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800c962:	79fb      	ldrb	r3, [r7, #7]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d114      	bne.n	800c992 <SX1276SetOpMode+0x3a>
    {
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c968:	2001      	movs	r0, #1
 800c96a:	f000 f87f 	bl	800ca6c <SX1276Read>
 800c96e:	4603      	mov	r3, r0
 800c970:	b25b      	sxtb	r3, r3
 800c972:	f023 0307 	bic.w	r3, r3, #7
 800c976:	b25a      	sxtb	r2, r3
 800c978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	b25b      	sxtb	r3, r3
 800c980:	b2db      	uxtb	r3, r3
 800c982:	4619      	mov	r1, r3
 800c984:	2001      	movs	r0, #1
 800c986:	f000 f85f 	bl	800ca48 <SX1276Write>

        SX1276SetAntSwLowPower( true );
 800c98a:	2001      	movs	r0, #1
 800c98c:	f7ff faa0 	bl	800bed0 <SX1276SetAntSwLowPower>

        SX1276SetAntSw( opMode );

        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 800c990:	e017      	b.n	800c9c2 <SX1276SetOpMode+0x6a>
        SX1276SetAntSwLowPower( false );
 800c992:	2000      	movs	r0, #0
 800c994:	f7ff fa9c 	bl	800bed0 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff fafa 	bl	800bf94 <SX1276SetAntSw>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c9a0:	2001      	movs	r0, #1
 800c9a2:	f000 f863 	bl	800ca6c <SX1276Read>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	b25b      	sxtb	r3, r3
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	b25a      	sxtb	r2, r3
 800c9b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	b25b      	sxtb	r3, r3
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f000 f843 	bl	800ca48 <SX1276Write>
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	71fb      	strb	r3, [r7, #7]
    SX1276.Settings.Modem = modem;
 800c9d6:	4a1b      	ldr	r2, [pc, #108]	; (800ca44 <SX1276SetModem+0x78>)
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	7153      	strb	r3, [r2, #5]
    switch( SX1276.Settings.Modem )
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <SX1276SetModem+0x78>)
 800c9de:	795b      	ldrb	r3, [r3, #5]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d015      	beq.n	800ca10 <SX1276SetModem+0x44>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800c9e4:	f7ff ff74 	bl	800c8d0 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f000 f83f 	bl	800ca6c <SX1276Read>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	f000 f825 	bl	800ca48 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800c9fe:	2100      	movs	r1, #0
 800ca00:	2040      	movs	r0, #64	; 0x40
 800ca02:	f000 f821 	bl	800ca48 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800ca06:	2130      	movs	r1, #48	; 0x30
 800ca08:	2041      	movs	r0, #65	; 0x41
 800ca0a:	f000 f81d 	bl	800ca48 <SX1276Write>
        break;
 800ca0e:	e015      	b.n	800ca3c <SX1276SetModem+0x70>
    case MODEM_LORA:
        SX1276SetSleep( );
 800ca10:	f7ff ff5e 	bl	800c8d0 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800ca14:	2001      	movs	r0, #1
 800ca16:	f000 f829 	bl	800ca6c <SX1276Read>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	4619      	mov	r1, r3
 800ca24:	2001      	movs	r0, #1
 800ca26:	f000 f80f 	bl	800ca48 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	2040      	movs	r0, #64	; 0x40
 800ca2e:	f000 f80b 	bl	800ca48 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800ca32:	2100      	movs	r1, #0
 800ca34:	2041      	movs	r0, #65	; 0x41
 800ca36:	f000 f807 	bl	800ca48 <SX1276Write>
        break;
 800ca3a:	bf00      	nop
    }
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	200013c4 	.word	0x200013c4

0800ca48 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	460a      	mov	r2, r1
 800ca52:	80fb      	strh	r3, [r7, #6]
 800ca54:	4613      	mov	r3, r2
 800ca56:	717b      	strb	r3, [r7, #5]
    SX1276WriteBuffer( addr, &data, 1 );
 800ca58:	1d79      	adds	r1, r7, #5
 800ca5a:	88fb      	ldrh	r3, [r7, #6]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f816 	bl	800ca90 <SX1276WriteBuffer>
}
 800ca64:	bf00      	nop
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800ca76:	f107 010f 	add.w	r1, r7, #15
 800ca7a:	88fb      	ldrh	r3, [r7, #6]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f838 	bl	800caf4 <SX1276ReadBuffer>
    return data;
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	80fb      	strh	r3, [r7, #6]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800caa0:	2200      	movs	r2, #0
 800caa2:	2140      	movs	r1, #64	; 0x40
 800caa4:	4812      	ldr	r0, [pc, #72]	; (800caf0 <SX1276WriteBuffer+0x60>)
 800caa6:	f000 feef 	bl	800d888 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 800caaa:	88fb      	ldrh	r3, [r7, #6]
 800caac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 ff6e 	bl	800d994 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
 800cabc:	e00a      	b.n	800cad4 <SX1276WriteBuffer+0x44>
    {
        HW_SPI_InOut( buffer[i] );
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	4413      	add	r3, r2
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 ff63 	bl	800d994 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	3301      	adds	r3, #1
 800cad2:	73fb      	strb	r3, [r7, #15]
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	797b      	ldrb	r3, [r7, #5]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d3f0      	bcc.n	800cabe <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800cadc:	2201      	movs	r2, #1
 800cade:	2140      	movs	r1, #64	; 0x40
 800cae0:	4803      	ldr	r0, [pc, #12]	; (800caf0 <SX1276WriteBuffer+0x60>)
 800cae2:	f000 fed1 	bl	800d888 <HW_GPIO_Write>
}
 800cae6:	bf00      	nop
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	48000400 	.word	0x48000400

0800caf4 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	80fb      	strh	r3, [r7, #6]
 800cb00:	4613      	mov	r3, r2
 800cb02:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800cb04:	2200      	movs	r2, #0
 800cb06:	2140      	movs	r1, #64	; 0x40
 800cb08:	4813      	ldr	r0, [pc, #76]	; (800cb58 <SX1276ReadBuffer+0x64>)
 800cb0a:	f000 febd 	bl	800d888 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 800cb0e:	88fb      	ldrh	r3, [r7, #6]
 800cb10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 ff3c 	bl	800d994 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	73fb      	strb	r3, [r7, #15]
 800cb20:	e00c      	b.n	800cb3c <SX1276ReadBuffer+0x48>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 800cb22:	2000      	movs	r0, #0
 800cb24:	f000 ff36 	bl	800d994 <HW_SPI_InOut>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	4413      	add	r3, r2
 800cb32:	b2ca      	uxtb	r2, r1
 800cb34:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	73fb      	strb	r3, [r7, #15]
 800cb3c:	7bfa      	ldrb	r2, [r7, #15]
 800cb3e:	797b      	ldrb	r3, [r7, #5]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d3ee      	bcc.n	800cb22 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800cb44:	2201      	movs	r2, #1
 800cb46:	2140      	movs	r1, #64	; 0x40
 800cb48:	4803      	ldr	r0, [pc, #12]	; (800cb58 <SX1276ReadBuffer+0x64>)
 800cb4a:	f000 fe9d 	bl	800d888 <HW_GPIO_Write>
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	48000400 	.word	0x48000400

0800cb5c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	2000      	movs	r0, #0
 800cb70:	f7ff ff8e 	bl	800ca90 <SX1276WriteBuffer>
}
 800cb74:	bf00      	nop
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	2000      	movs	r0, #0
 800cb90:	f7ff ffb0 	bl	800caf4 <SX1276ReadBuffer>
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <SX1276OnDio1Irq>:
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}

void SX1276OnDio1Irq()
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800cba0:	4b5e      	ldr	r3, [pc, #376]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cba2:	791b      	ldrb	r3, [r3, #4]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d002      	beq.n	800cbae <SX1276OnDio1Irq+0x12>
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d074      	beq.n	800cc96 <SX1276OnDio1Irq+0xfa>
            default:
                break;
            }
            break;
        default:
            break;
 800cbac:	e0b3      	b.n	800cd16 <SX1276OnDio1Irq+0x17a>
            switch( SX1276.Settings.Modem )
 800cbae:	4b5b      	ldr	r3, [pc, #364]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbb0:	795b      	ldrb	r3, [r3, #5]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <SX1276OnDio1Irq+0x20>
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d057      	beq.n	800cc6a <SX1276OnDio1Irq+0xce>
                break;
 800cbba:	e06b      	b.n	800cc94 <SX1276OnDio1Irq+0xf8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800cbbc:	4b57      	ldr	r3, [pc, #348]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbbe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d117      	bne.n	800cbf4 <SX1276OnDio1Irq+0x58>
 800cbc4:	4b55      	ldr	r3, [pc, #340]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbc6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d113      	bne.n	800cbf4 <SX1276OnDio1Irq+0x58>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800cbcc:	4b53      	ldr	r3, [pc, #332]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cbd2:	f083 0301 	eor.w	r3, r3, #1
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d004      	beq.n	800cbe6 <SX1276OnDio1Irq+0x4a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800cbdc:	2101      	movs	r1, #1
 800cbde:	4850      	ldr	r0, [pc, #320]	; (800cd20 <SX1276OnDio1Irq+0x184>)
 800cbe0:	f7ff ffcc 	bl	800cb7c <SX1276ReadFifo>
 800cbe4:	e006      	b.n	800cbf4 <SX1276OnDio1Irq+0x58>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800cbe6:	2032      	movs	r0, #50	; 0x32
 800cbe8:	f7ff ff40 	bl	800ca6c <SX1276Read>
 800cbec:	4603      	mov	r3, r0
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	4b4a      	ldr	r3, [pc, #296]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbf2:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800cbf4:	4b49      	ldr	r3, [pc, #292]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbf6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4b48      	ldr	r3, [pc, #288]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cbfc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	4a46      	ldr	r2, [pc, #280]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc02:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800cc06:	4293      	cmp	r3, r2
 800cc08:	db1a      	blt.n	800cc40 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800cc0a:	4b44      	ldr	r3, [pc, #272]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc0e:	461a      	mov	r2, r3
 800cc10:	4b44      	ldr	r3, [pc, #272]	; (800cd24 <SX1276OnDio1Irq+0x188>)
 800cc12:	441a      	add	r2, r3
 800cc14:	4b41      	ldr	r3, [pc, #260]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4610      	mov	r0, r2
 800cc22:	f7ff ffab 	bl	800cb7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800cc26:	4b3d      	ldr	r3, [pc, #244]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc28:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cc2a:	4b3c      	ldr	r3, [pc, #240]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	4413      	add	r3, r2
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	3b01      	subs	r3, #1
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	4b38      	ldr	r3, [pc, #224]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc3c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cc3e:	e029      	b.n	800cc94 <SX1276OnDio1Irq+0xf8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cc40:	4b36      	ldr	r3, [pc, #216]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc42:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc44:	461a      	mov	r2, r3
 800cc46:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <SX1276OnDio1Irq+0x188>)
 800cc48:	18d0      	adds	r0, r2, r3
 800cc4a:	4b34      	ldr	r3, [pc, #208]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc4c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	4b32      	ldr	r3, [pc, #200]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc52:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	f7ff ff8e 	bl	800cb7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cc60:	4b2e      	ldr	r3, [pc, #184]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc62:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc66:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cc68:	e014      	b.n	800cc94 <SX1276OnDio1Irq+0xf8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800cc6a:	2180      	movs	r1, #128	; 0x80
 800cc6c:	2012      	movs	r0, #18
 800cc6e:	f7ff feeb 	bl	800ca48 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800cc72:	4b2a      	ldr	r3, [pc, #168]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cc78:	4b2b      	ldr	r3, [pc, #172]	; (800cd28 <SX1276OnDio1Irq+0x18c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d008      	beq.n	800cc92 <SX1276OnDio1Irq+0xf6>
 800cc80:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <SX1276OnDio1Irq+0x18c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <SX1276OnDio1Irq+0xf6>
                    RadioEvents->RxTimeout( );
 800cc8a:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <SX1276OnDio1Irq+0x18c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	4798      	blx	r3
                break;
 800cc92:	bf00      	nop
            break;
 800cc94:	e03f      	b.n	800cd16 <SX1276OnDio1Irq+0x17a>
            switch( SX1276.Settings.Modem )
 800cc96:	4b21      	ldr	r3, [pc, #132]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cc98:	795b      	ldrb	r3, [r3, #5]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <SX1276OnDio1Irq+0x108>
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d037      	beq.n	800cd12 <SX1276OnDio1Irq+0x176>
                break;
 800cca2:	e037      	b.n	800cd14 <SX1276OnDio1Irq+0x178>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800cca4:	4b1d      	ldr	r3, [pc, #116]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cca6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800cca8:	461a      	mov	r2, r3
 800ccaa:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	4a1a      	ldr	r2, [pc, #104]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccb2:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	dd16      	ble.n	800cce8 <SX1276OnDio1Irq+0x14c>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800ccba:	4b18      	ldr	r3, [pc, #96]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccbc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	4b18      	ldr	r3, [pc, #96]	; (800cd24 <SX1276OnDio1Irq+0x188>)
 800ccc2:	441a      	add	r2, r3
 800ccc4:	4b15      	ldr	r3, [pc, #84]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7ff ff45 	bl	800cb5c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ccd2:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccd4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ccd6:	4b11      	ldr	r3, [pc, #68]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4413      	add	r3, r2
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	4b0e      	ldr	r3, [pc, #56]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cce4:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cce6:	e015      	b.n	800cd14 <SX1276OnDio1Irq+0x178>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <SX1276OnDio1Irq+0x188>)
 800ccf0:	18d0      	adds	r0, r2, r3
 800ccf2:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccf4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800ccfa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	4619      	mov	r1, r3
 800cd04:	f7ff ff2a 	bl	800cb5c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800cd08:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cd0a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800cd0c:	4b03      	ldr	r3, [pc, #12]	; (800cd1c <SX1276OnDio1Irq+0x180>)
 800cd0e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800cd10:	e000      	b.n	800cd14 <SX1276OnDio1Irq+0x178>
                break;
 800cd12:	bf00      	nop
            break;
 800cd14:	bf00      	nop
    }
}
 800cd16:	bf00      	nop
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	200013c4 	.word	0x200013c4
 800cd20:	200013fe 	.word	0x200013fe
 800cd24:	20000f54 	.word	0x20000f54
 800cd28:	2000036c 	.word	0x2000036c

0800cd2c <SX1276OnDio2Irq>:

void SX1276OnDio2Irq()
{
 800cd2c:	b590      	push	{r4, r7, lr}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 800cd36:	4b56      	ldr	r3, [pc, #344]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd38:	791b      	ldrb	r3, [r3, #4]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d002      	beq.n	800cd44 <SX1276OnDio2Irq+0x18>
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d078      	beq.n	800ce34 <SX1276OnDio2Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 800cd42:	e0a1      	b.n	800ce88 <SX1276OnDio2Irq+0x15c>
            switch( SX1276.Settings.Modem )
 800cd44:	4b52      	ldr	r3, [pc, #328]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd46:	795b      	ldrb	r3, [r3, #5]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <SX1276OnDio2Irq+0x26>
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d04e      	beq.n	800cdee <SX1276OnDio2Irq+0xc2>
                break;
 800cd50:	e06f      	b.n	800ce32 <SX1276OnDio2Irq+0x106>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800cd52:	4b4f      	ldr	r3, [pc, #316]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800cd5a:	4b4d      	ldr	r3, [pc, #308]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d163      	bne.n	800ce2c <SX1276OnDio2Irq+0x100>
 800cd64:	4b4a      	ldr	r3, [pc, #296]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d15e      	bne.n	800ce2c <SX1276OnDio2Irq+0x100>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800cd6e:	4b48      	ldr	r3, [pc, #288]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800cd76:	2011      	movs	r0, #17
 800cd78:	f7ff fe78 	bl	800ca6c <SX1276Read>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	085b      	lsrs	r3, r3, #1
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	425b      	negs	r3, r3
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	b25a      	sxtb	r2, r3
 800cd88:	4b41      	ldr	r3, [pc, #260]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cd8a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800cd8e:	201b      	movs	r0, #27
 800cd90:	f7ff fe6c 	bl	800ca6c <SX1276Read>
 800cd94:	4603      	mov	r3, r0
 800cd96:	021c      	lsls	r4, r3, #8
                                ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800cd98:	201c      	movs	r0, #28
 800cd9a:	f7ff fe67 	bl	800ca6c <SX1276Read>
 800cd9e:	4603      	mov	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800cda0:	4323      	orrs	r3, r4
 800cda2:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	0a1b      	lsrs	r3, r3, #8
 800cda8:	60bb      	str	r3, [r7, #8]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	607b      	str	r3, [r7, #4]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f643 5209 	movw	r2, #15625	; 0x3d09
 800cdba:	fb02 f203 	mul.w	r2, r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f643 5109 	movw	r1, #15625	; 0x3d09
 800cdc4:	fb01 f303 	mul.w	r3, r1, r3
 800cdc8:	3380      	adds	r3, #128	; 0x80
 800cdca:	0a1b      	lsrs	r3, r3, #8
 800cdcc:	4413      	add	r3, r2
 800cdce:	461a      	mov	r2, r3
 800cdd0:	4b2f      	ldr	r3, [pc, #188]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cdd2:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800cdd4:	200c      	movs	r0, #12
 800cdd6:	f7ff fe49 	bl	800ca6c <SX1276Read>
 800cdda:	4603      	mov	r3, r0
 800cddc:	095b      	lsrs	r3, r3, #5
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	f003 0307 	and.w	r3, r3, #7
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	4b2a      	ldr	r3, [pc, #168]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cde8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                break;
 800cdec:	e01e      	b.n	800ce2c <SX1276OnDio2Irq+0x100>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800cdee:	4b28      	ldr	r3, [pc, #160]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800cdf0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01b      	beq.n	800ce30 <SX1276OnDio2Irq+0x104>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800cdf8:	2102      	movs	r1, #2
 800cdfa:	2012      	movs	r0, #18
 800cdfc:	f7ff fe24 	bl	800ca48 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800ce00:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d013      	beq.n	800ce30 <SX1276OnDio2Irq+0x104>
 800ce08:	4b22      	ldr	r3, [pc, #136]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00e      	beq.n	800ce30 <SX1276OnDio2Irq+0x104>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800ce12:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	695c      	ldr	r4, [r3, #20]
 800ce18:	201c      	movs	r0, #28
 800ce1a:	f7ff fe27 	bl	800ca6c <SX1276Read>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	4618      	mov	r0, r3
 800ce28:	47a0      	blx	r4
                break;
 800ce2a:	e001      	b.n	800ce30 <SX1276OnDio2Irq+0x104>
                break;
 800ce2c:	bf00      	nop
 800ce2e:	e02b      	b.n	800ce88 <SX1276OnDio2Irq+0x15c>
                break;
 800ce30:	bf00      	nop
            break;
 800ce32:	e029      	b.n	800ce88 <SX1276OnDio2Irq+0x15c>
            switch( SX1276.Settings.Modem )
 800ce34:	4b16      	ldr	r3, [pc, #88]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800ce36:	795b      	ldrb	r3, [r3, #5]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d021      	beq.n	800ce80 <SX1276OnDio2Irq+0x154>
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d000      	beq.n	800ce42 <SX1276OnDio2Irq+0x116>
                break;
 800ce40:	e021      	b.n	800ce86 <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ce42:	4b13      	ldr	r3, [pc, #76]	; (800ce90 <SX1276OnDio2Irq+0x164>)
 800ce44:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01b      	beq.n	800ce84 <SX1276OnDio2Irq+0x158>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800ce4c:	2102      	movs	r1, #2
 800ce4e:	2012      	movs	r0, #18
 800ce50:	f7ff fdfa 	bl	800ca48 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800ce54:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d013      	beq.n	800ce84 <SX1276OnDio2Irq+0x158>
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00e      	beq.n	800ce84 <SX1276OnDio2Irq+0x158>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800ce66:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <SX1276OnDio2Irq+0x168>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	695c      	ldr	r4, [r3, #20]
 800ce6c:	201c      	movs	r0, #28
 800ce6e:	f7ff fdfd 	bl	800ca6c <SX1276Read>
 800ce72:	4603      	mov	r3, r0
 800ce74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	47a0      	blx	r4
                break;
 800ce7e:	e001      	b.n	800ce84 <SX1276OnDio2Irq+0x158>
                break;
 800ce80:	bf00      	nop
 800ce82:	e000      	b.n	800ce86 <SX1276OnDio2Irq+0x15a>
                break;
 800ce84:	bf00      	nop
            break;
 800ce86:	bf00      	nop
    }
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd90      	pop	{r4, r7, pc}
 800ce90:	200013c4 	.word	0x200013c4
 800ce94:	2000036c 	.word	0x2000036c

0800ce98 <SX1276OnDio4Irq>:
//         break;
//     }
// }

void SX1276OnDio4Irq()
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <SX1276OnDio4Irq+0x38>)
 800ce9e:	795b      	ldrb	r3, [r3, #5]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <SX1276OnDio4Irq+0x12>
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d00a      	beq.n	800cebe <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800cea8:	e00c      	b.n	800cec4 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800ceaa:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <SX1276OnDio4Irq+0x38>)
 800ceac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d106      	bne.n	800cec2 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <SX1276OnDio4Irq+0x38>)
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        break;
 800cebc:	e001      	b.n	800cec2 <SX1276OnDio4Irq+0x2a>
        break;
 800cebe:	bf00      	nop
 800cec0:	e000      	b.n	800cec4 <SX1276OnDio4Irq+0x2c>
        break;
 800cec2:	bf00      	nop
    }
}
 800cec4:	bf00      	nop
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	200013c4 	.word	0x200013c4

0800ced4 <SX1276WriteFIFO>:
}


/*sx1276 functions---------------------------------------------------------------------------*/
void SX1276WriteFIFO( uint8_t *buffer, uint8_t size )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
    switch( SX1276.Settings.Modem )
 800cee0:	4b4a      	ldr	r3, [pc, #296]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cee2:	795b      	ldrb	r3, [r3, #5]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <SX1276WriteFIFO+0x1a>
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d041      	beq.n	800cf70 <SX1276WriteFIFO+0x9c>
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
        }
        break;
    }
}
 800ceec:	e08a      	b.n	800d004 <SX1276WriteFIFO+0x130>
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ceee:	4b47      	ldr	r3, [pc, #284]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800cef4:	78fb      	ldrb	r3, [r7, #3]
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	4b44      	ldr	r3, [pc, #272]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cefa:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800cefc:	4b43      	ldr	r3, [pc, #268]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cefe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cf02:	f083 0301 	eor.w	r3, r3, #1
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <SX1276WriteFIFO+0x44>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800cf0c:	1cfb      	adds	r3, r7, #3
 800cf0e:	2101      	movs	r1, #1
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fe23 	bl	800cb5c <SX1276WriteFifo>
 800cf16:	e004      	b.n	800cf22 <SX1276WriteFIFO+0x4e>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	2032      	movs	r0, #50	; 0x32
 800cf1e:	f7ff fd93 	bl	800ca48 <SX1276Write>
            if( ( size > 0 ) && ( size <= 64 ) )
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <SX1276WriteFIFO+0x64>
 800cf28:	78fb      	ldrb	r3, [r7, #3]
 800cf2a:	2b40      	cmp	r3, #64	; 0x40
 800cf2c:	d804      	bhi.n	800cf38 <SX1276WriteFIFO+0x64>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	4b36      	ldr	r3, [pc, #216]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf36:	e009      	b.n	800cf4c <SX1276WriteFIFO+0x78>
                memcpy( RxTxBuffer, buffer, size );
 800cf38:	78fb      	ldrb	r3, [r7, #3]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	4834      	ldr	r0, [pc, #208]	; (800d010 <SX1276WriteFIFO+0x13c>)
 800cf40:	f014 fd64 	bl	8021a0c <memcpy>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800cf44:	4b31      	ldr	r3, [pc, #196]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf46:	2220      	movs	r2, #32
 800cf48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800cf4c:	4b2f      	ldr	r3, [pc, #188]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff fe01 	bl	800cb5c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800cf5a:	4b2c      	ldr	r3, [pc, #176]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf5c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cf5e:	4b2b      	ldr	r3, [pc, #172]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	4413      	add	r3, r2
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	4b28      	ldr	r3, [pc, #160]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf6c:	879a      	strh	r2, [r3, #60]	; 0x3c
        break;
 800cf6e:	e049      	b.n	800d004 <SX1276WriteFIFO+0x130>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800cf70:	4b26      	ldr	r3, [pc, #152]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cf72:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00f      	beq.n	800cf9a <SX1276WriteFIFO+0xc6>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800cf7a:	2033      	movs	r0, #51	; 0x33
 800cf7c:	f7ff fd76 	bl	800ca6c <SX1276Read>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	4619      	mov	r1, r3
 800cf8a:	2033      	movs	r0, #51	; 0x33
 800cf8c:	f7ff fd5c 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800cf90:	2119      	movs	r1, #25
 800cf92:	203b      	movs	r0, #59	; 0x3b
 800cf94:	f7ff fd58 	bl	800ca48 <SX1276Write>
 800cf98:	e013      	b.n	800cfc2 <SX1276WriteFIFO+0xee>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800cf9a:	2033      	movs	r0, #51	; 0x33
 800cf9c:	f7ff fd66 	bl	800ca6c <SX1276Read>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	b25b      	sxtb	r3, r3
 800cfa4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800cfa8:	b25b      	sxtb	r3, r3
 800cfaa:	f043 0301 	orr.w	r3, r3, #1
 800cfae:	b25b      	sxtb	r3, r3
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	2033      	movs	r0, #51	; 0x33
 800cfb6:	f7ff fd47 	bl	800ca48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800cfba:	211d      	movs	r1, #29
 800cfbc:	203b      	movs	r0, #59	; 0x3b
 800cfbe:	f7ff fd43 	bl	800ca48 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	4b11      	ldr	r3, [pc, #68]	; (800d00c <SX1276WriteFIFO+0x138>)
 800cfc6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800cfca:	78fb      	ldrb	r3, [r7, #3]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	2022      	movs	r0, #34	; 0x22
 800cfd0:	f7ff fd3a 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	200e      	movs	r0, #14
 800cfd8:	f7ff fd36 	bl	800ca48 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800cfdc:	2100      	movs	r1, #0
 800cfde:	200d      	movs	r0, #13
 800cfe0:	f7ff fd32 	bl	800ca48 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800cfe4:	2001      	movs	r0, #1
 800cfe6:	f7ff fd41 	bl	800ca6c <SX1276Read>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <SX1276WriteFIFO+0x124>
                SX1276SetStby( );
 800cff4:	f7ff fc78 	bl	800c8e8 <SX1276SetStby>
            SX1276WriteFifo( buffer, size );
 800cff8:	78fb      	ldrb	r3, [r7, #3]
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff fdad 	bl	800cb5c <SX1276WriteFifo>
        break;
 800d002:	bf00      	nop
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	200013c4 	.word	0x200013c4
 800d010:	20000f54 	.word	0x20000f54

0800d014 <SX1276GetPacketTime>:
    SX1276Write( REG_LR_MODEMCONFIG2, ( SX1276Read( REG_LR_MODEMCONFIG2 ) & RFLR_MODEMCONFIG2_SF_MASK) |
                ( datarate << 4 ) );
}

uint32_t SX1276GetPacketTime(uint8_t sf, uint8_t bandwidth, uint8_t cr, uint8_t header, uint8_t preamble_len, uint8_t pktLen)
{
 800d014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d016:	b08d      	sub	sp, #52	; 0x34
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	4611      	mov	r1, r2
 800d020:	461a      	mov	r2, r3
 800d022:	4623      	mov	r3, r4
 800d024:	71fb      	strb	r3, [r7, #7]
 800d026:	4603      	mov	r3, r0
 800d028:	71bb      	strb	r3, [r7, #6]
 800d02a:	460b      	mov	r3, r1
 800d02c:	717b      	strb	r3, [r7, #5]
 800d02e:	4613      	mov	r3, r2
 800d030:	713b      	strb	r3, [r7, #4]
    uint32_t bw = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t Crc_on, FixLen, LowDatarateOptimize;
    uint32_t tPreamble = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	627b      	str	r3, [r7, #36]	; 0x24
    if (header) /* if is for calculate the explict header */
 800d03a:	793b      	ldrb	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <SX1276GetPacketTime+0x44>
    {
        Crc_on = 0;
 800d040:	2300      	movs	r3, #0
 800d042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        FixLen = 1;
 800d046:	2301      	movs	r3, #1
 800d048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        cr = 4;
 800d04c:	2304      	movs	r3, #4
 800d04e:	717b      	strb	r3, [r7, #5]
        pktLen = 2;
 800d050:	2302      	movs	r3, #2
 800d052:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800d056:	e005      	b.n	800d064 <SX1276GetPacketTime+0x50>
    }
    else
    {
        Crc_on = 1;
 800d058:	2301      	movs	r3, #1
 800d05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        FixLen = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
    // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
    switch( bandwidth )
 800d064:	79bb      	ldrb	r3, [r7, #6]
 800d066:	2b08      	cmp	r3, #8
 800d068:	d006      	beq.n	800d078 <SX1276GetPacketTime+0x64>
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d007      	beq.n	800d07e <SX1276GetPacketTime+0x6a>
 800d06e:	2b07      	cmp	r3, #7
 800d070:	d108      	bne.n	800d084 <SX1276GetPacketTime+0x70>
    {
    case 7: // 125 kHz
        bw = 125000;
 800d072:	4b58      	ldr	r3, [pc, #352]	; (800d1d4 <SX1276GetPacketTime+0x1c0>)
 800d074:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d076:	e005      	b.n	800d084 <SX1276GetPacketTime+0x70>
    case 8: // 250 kHz
        bw = 250000;
 800d078:	4b57      	ldr	r3, [pc, #348]	; (800d1d8 <SX1276GetPacketTime+0x1c4>)
 800d07a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d07c:	e002      	b.n	800d084 <SX1276GetPacketTime+0x70>
    case 9: // 500 kHz
        bw = 500000;
 800d07e:	4b57      	ldr	r3, [pc, #348]	; (800d1dc <SX1276GetPacketTime+0x1c8>)
 800d080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d082:	bf00      	nop
    }
    if( ( ( bandwidth == 7 ) && ( ( sf == 11 ) || ( sf == 12 ) ) ) ||
 800d084:	79bb      	ldrb	r3, [r7, #6]
 800d086:	2b07      	cmp	r3, #7
 800d088:	d105      	bne.n	800d096 <SX1276GetPacketTime+0x82>
 800d08a:	79fb      	ldrb	r3, [r7, #7]
 800d08c:	2b0b      	cmp	r3, #11
 800d08e:	d008      	beq.n	800d0a2 <SX1276GetPacketTime+0x8e>
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b0c      	cmp	r3, #12
 800d094:	d005      	beq.n	800d0a2 <SX1276GetPacketTime+0x8e>
 800d096:	79bb      	ldrb	r3, [r7, #6]
 800d098:	2b08      	cmp	r3, #8
 800d09a:	d106      	bne.n	800d0aa <SX1276GetPacketTime+0x96>
    ( ( bandwidth == 8 ) && ( sf == 12 ) ) )
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b0c      	cmp	r3, #12
 800d0a0:	d103      	bne.n	800d0aa <SX1276GetPacketTime+0x96>
    {
        LowDatarateOptimize = 0x01;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800d0a8:	e002      	b.n	800d0b0 <SX1276GetPacketTime+0x9c>
    }
    else
    {
        LowDatarateOptimize = 0x00;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }

    uint32_t rs = (1e3 * bw) / ( 1 << sf );
 800d0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0b2:	f7f3 fa31 	bl	8000518 <__aeabi_ui2d>
 800d0b6:	f04f 0200 	mov.w	r2, #0
 800d0ba:	4b49      	ldr	r3, [pc, #292]	; (800d1e0 <SX1276GetPacketTime+0x1cc>)
 800d0bc:	f7f3 faa6 	bl	800060c <__aeabi_dmul>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4625      	mov	r5, r4
 800d0c6:	461c      	mov	r4, r3
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7f3 fa31 	bl	8000538 <__aeabi_i2d>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	4620      	mov	r0, r4
 800d0dc:	4629      	mov	r1, r5
 800d0de:	f7f3 fbbf 	bl	8000860 <__aeabi_ddiv>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	f7f3 fd67 	bl	8000bbc <__aeabi_d2uiz>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	623b      	str	r3, [r7, #32]
    uint32_t ts = (uint32_t)1e9 / rs; /* Symbol time : time for one symbol (us) */
 800d0f2:	4a3c      	ldr	r2, [pc, #240]	; (800d1e4 <SX1276GetPacketTime+0x1d0>)
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0fa:	61fb      	str	r3, [r7, #28]
    uint32_t tmp = (uint32_t)(ceil( (int32_t)( 8 * pktLen - 4 * sf + 28 + 16 * Crc_on - ( FixLen ? 20 : 0 ) ) / (double)( 4 * (sf - ( ( LowDatarateOptimize > 0 ) ? 2 : 0 ))) ) * ( cr + 4 ));
 800d0fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d100:	005a      	lsls	r2, r3, #1
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	1dda      	adds	r2, r3, #7
 800d108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	009a      	lsls	r2, r3, #2
 800d112:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <SX1276GetPacketTime+0x10a>
 800d11a:	2314      	movs	r3, #20
 800d11c:	e000      	b.n	800d120 <SX1276GetPacketTime+0x10c>
 800d11e:	2300      	movs	r3, #0
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	4618      	mov	r0, r3
 800d124:	f7f3 fa08 	bl	8000538 <__aeabi_i2d>
 800d128:	4604      	mov	r4, r0
 800d12a:	460d      	mov	r5, r1
 800d12c:	79fa      	ldrb	r2, [r7, #7]
 800d12e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <SX1276GetPacketTime+0x126>
 800d136:	2302      	movs	r3, #2
 800d138:	e000      	b.n	800d13c <SX1276GetPacketTime+0x128>
 800d13a:	2300      	movs	r3, #0
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4618      	mov	r0, r3
 800d142:	f7f3 f9f9 	bl	8000538 <__aeabi_i2d>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4620      	mov	r0, r4
 800d14c:	4629      	mov	r1, r5
 800d14e:	f7f3 fb87 	bl	8000860 <__aeabi_ddiv>
 800d152:	4603      	mov	r3, r0
 800d154:	460c      	mov	r4, r1
 800d156:	ec44 3b17 	vmov	d7, r3, r4
 800d15a:	eeb0 0a47 	vmov.f32	s0, s14
 800d15e:	eef0 0a67 	vmov.f32	s1, s15
 800d162:	f017 f8a5 	bl	80242b0 <ceil>
 800d166:	ec56 5b10 	vmov	r5, r6, d0
 800d16a:	797b      	ldrb	r3, [r7, #5]
 800d16c:	3304      	adds	r3, #4
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f9e2 	bl	8000538 <__aeabi_i2d>
 800d174:	4603      	mov	r3, r0
 800d176:	460c      	mov	r4, r1
 800d178:	461a      	mov	r2, r3
 800d17a:	4623      	mov	r3, r4
 800d17c:	4628      	mov	r0, r5
 800d17e:	4631      	mov	r1, r6
 800d180:	f7f3 fa44 	bl	800060c <__aeabi_dmul>
 800d184:	4603      	mov	r3, r0
 800d186:	460c      	mov	r4, r1
 800d188:	4618      	mov	r0, r3
 800d18a:	4621      	mov	r1, r4
 800d18c:	f7f3 fd16 	bl	8000bbc <__aeabi_d2uiz>
 800d190:	4603      	mov	r3, r0
 800d192:	61bb      	str	r3, [r7, #24]
    if (preamble_len)
 800d194:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00a      	beq.n	800d1b2 <SX1276GetPacketTime+0x19e>
        tPreamble = (preamble_len + 4) * ts + ts / 4;
 800d19c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	fb03 f202 	mul.w	r2, r3, r2
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	089b      	lsrs	r3, r3, #2
 800d1ae:	4413      	add	r3, r2
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	617b      	str	r3, [r7, #20]
    uint32_t tPayload = nPayload * ts;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	fb02 f303 	mul.w	r3, r2, r3
 800d1c0:	613b      	str	r3, [r7, #16]
    uint32_t tOnAir = tPreamble + tPayload;
 800d1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	60fb      	str	r3, [r7, #12]
    // printf("nPayload time:%lu, %lu, %lu, %lu, %lu\n", nPayload, ts, tPreamble, tOnAir, preamble_len);

    return tOnAir;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3734      	adds	r7, #52	; 0x34
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d4:	0001e848 	.word	0x0001e848
 800d1d8:	0003d090 	.word	0x0003d090
 800d1dc:	0007a120 	.word	0x0007a120
 800d1e0:	408f4000 	.word	0x408f4000
 800d1e4:	3b9aca00 	.word	0x3b9aca00

0800d1e8 <SX1276GetSymbolTime>:

uint32_t SX1276GetSymbolTime(uint8_t sf, uint8_t bandwidth)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	460a      	mov	r2, r1
 800d1f2:	71fb      	strb	r3, [r7, #7]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	71bb      	strb	r3, [r7, #6]
    uint32_t bw = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	617b      	str	r3, [r7, #20]
    // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
    switch( bandwidth )
 800d1fc:	79bb      	ldrb	r3, [r7, #6]
 800d1fe:	2b08      	cmp	r3, #8
 800d200:	d006      	beq.n	800d210 <SX1276GetSymbolTime+0x28>
 800d202:	2b09      	cmp	r3, #9
 800d204:	d007      	beq.n	800d216 <SX1276GetSymbolTime+0x2e>
 800d206:	2b07      	cmp	r3, #7
 800d208:	d108      	bne.n	800d21c <SX1276GetSymbolTime+0x34>
    {
    case 7: // 125 kHz
        bw = 125000;
 800d20a:	4b0d      	ldr	r3, [pc, #52]	; (800d240 <SX1276GetSymbolTime+0x58>)
 800d20c:	617b      	str	r3, [r7, #20]
        break;
 800d20e:	e005      	b.n	800d21c <SX1276GetSymbolTime+0x34>
    case 8: // 250 kHz
        bw = 250000;
 800d210:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <SX1276GetSymbolTime+0x5c>)
 800d212:	617b      	str	r3, [r7, #20]
        break;
 800d214:	e002      	b.n	800d21c <SX1276GetSymbolTime+0x34>
    case 9: // 500 kHz
        bw = 500000;
 800d216:	4b0c      	ldr	r3, [pc, #48]	; (800d248 <SX1276GetSymbolTime+0x60>)
 800d218:	617b      	str	r3, [r7, #20]
        break;
 800d21a:	bf00      	nop
    }
    uint32_t rs = bw / ( 1 << sf );
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	fa22 f303 	lsr.w	r3, r2, r3
 800d224:	613b      	str	r3, [r7, #16]
    uint32_t ts = (uint32_t)1e6 / rs; /* Symbol time : time for one symbol (us) */
 800d226:	4a09      	ldr	r2, [pc, #36]	; (800d24c <SX1276GetSymbolTime+0x64>)
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22e:	60fb      	str	r3, [r7, #12]
    return ts;
 800d230:	68fb      	ldr	r3, [r7, #12]
}
 800d232:	4618      	mov	r0, r3
 800d234:	371c      	adds	r7, #28
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	0001e848 	.word	0x0001e848
 800d244:	0003d090 	.word	0x0003d090
 800d248:	0007a120 	.word	0x0007a120
 800d24c:	000f4240 	.word	0x000f4240

0800d250 <SX1276GetRawTemp>:

uint8_t SX1276GetRawTemp()
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
    int8_t temp = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	75fb      	strb	r3, [r7, #23]

    uint8_t previousOpMode = SX1276Read( REG_OPMODE );
 800d25a:	2001      	movs	r0, #1
 800d25c:	f7ff fc06 	bl	800ca6c <SX1276Read>
 800d260:	4603      	mov	r3, r0
 800d262:	75bb      	strb	r3, [r7, #22]

    if ((previousOpMode & RFLR_OPMODE_LONGRANGEMODE_ON) == RFLR_OPMODE_LONGRANGEMODE_ON)
 800d264:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	da03      	bge.n	800d274 <SX1276GetRawTemp+0x24>
    {
        SX1276Write( REG_OPMODE, RFLR_OPMODE_SLEEP );
 800d26c:	2100      	movs	r1, #0
 800d26e:	2001      	movs	r0, #1
 800d270:	f7ff fbea 	bl	800ca48 <SX1276Write>
    }

    SX1276Write( REG_OPMODE, RFLR_OPMODE_STANDBY );
 800d274:	2101      	movs	r1, #1
 800d276:	2001      	movs	r0, #1
 800d278:	f7ff fbe6 	bl	800ca48 <SX1276Write>

    SX1276Write( REG_OPMODE, RF_OPMODE_SYNTHESIZER_RX );
 800d27c:	2104      	movs	r1, #4
 800d27e:	2001      	movs	r0, #1
 800d280:	f7ff fbe2 	bl	800ca48 <SX1276Write>
    uint8_t RegImageCal = SX1276Read( REG_IMAGECAL);
 800d284:	203b      	movs	r0, #59	; 0x3b
 800d286:	f7ff fbf1 	bl	800ca6c <SX1276Read>
 800d28a:	4603      	mov	r3, r0
 800d28c:	757b      	strb	r3, [r7, #21]
    RegImageCal = (RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK) | RF_IMAGECAL_TEMPMONITOR_ON;
 800d28e:	7d7b      	ldrb	r3, [r7, #21]
 800d290:	f023 0301 	bic.w	r3, r3, #1
 800d294:	757b      	strb	r3, [r7, #21]
    SX1276Write( REG_IMAGECAL, RegImageCal );
 800d296:	7d7b      	ldrb	r3, [r7, #21]
 800d298:	4619      	mov	r1, r3
 800d29a:	203b      	movs	r0, #59	; 0x3b
 800d29c:	f7ff fbd4 	bl	800ca48 <SX1276Write>
 800d2a0:	4b2b      	ldr	r3, [pc, #172]	; (800d350 <SX1276GetRawTemp+0x100>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    // Delay 150 us
    Gpi_Fast_Tick_Native deadline = gpi_tick_fast_native() + GPI_TICK_US_TO_FAST(150);
 800d2a6:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800d2aa:	613b      	str	r3, [r7, #16]
    while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 800d2ac:	bf00      	nop
 800d2ae:	4b28      	ldr	r3, [pc, #160]	; (800d350 <SX1276GetRawTemp+0x100>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	60bb      	str	r3, [r7, #8]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	607b      	str	r3, [r7, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	60bb      	str	r3, [r7, #8]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	db06      	blt.n	800d2d6 <SX1276GetRawTemp+0x86>
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	bf14      	ite	ne
 800d2ce:	2301      	movne	r3, #1
 800d2d0:	2300      	moveq	r3, #0
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	e001      	b.n	800d2da <SX1276GetRawTemp+0x8a>
 800d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	dbe7      	blt.n	800d2ae <SX1276GetRawTemp+0x5e>

    RegImageCal = SX1276Read( REG_IMAGECAL);
 800d2de:	203b      	movs	r0, #59	; 0x3b
 800d2e0:	f7ff fbc4 	bl	800ca6c <SX1276Read>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	757b      	strb	r3, [r7, #21]
    RegImageCal = (RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK) | RF_IMAGECAL_TEMPMONITOR_OFF;
 800d2e8:	7d7b      	ldrb	r3, [r7, #21]
 800d2ea:	f043 0301 	orr.w	r3, r3, #1
 800d2ee:	757b      	strb	r3, [r7, #21]
    SX1276Write( REG_IMAGECAL, RegImageCal );
 800d2f0:	7d7b      	ldrb	r3, [r7, #21]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	203b      	movs	r0, #59	; 0x3b
 800d2f6:	f7ff fba7 	bl	800ca48 <SX1276Write>

    SX1276Write( REG_OPMODE, RFLR_OPMODE_STANDBY );
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	f7ff fba3 	bl	800ca48 <SX1276Write>

    uint8_t RegTemp = SX1276Read( REG_TEMP);
 800d302:	203c      	movs	r0, #60	; 0x3c
 800d304:	f7ff fbb2 	bl	800ca6c <SX1276Read>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]

    if ((RegTemp & 0x80) == 0x80)
 800d30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d310:	2b00      	cmp	r3, #0
 800d312:	da04      	bge.n	800d31e <SX1276GetRawTemp+0xce>
        temp = 255 - RegTemp;
 800d314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d318:	43db      	mvns	r3, r3
 800d31a:	75fb      	strb	r3, [r7, #23]
 800d31c:	e005      	b.n	800d32a <SX1276GetRawTemp+0xda>
    else
    {
        temp = RegTemp;
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	75fb      	strb	r3, [r7, #23]
        temp *= (-1);
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	425b      	negs	r3, r3
 800d326:	b2db      	uxtb	r3, r3
 800d328:	75fb      	strb	r3, [r7, #23]
    }

    if ((previousOpMode & RFLR_OPMODE_LONGRANGEMODE_ON) == RFLR_OPMODE_LONGRANGEMODE_ON)
 800d32a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da03      	bge.n	800d33a <SX1276GetRawTemp+0xea>
    {
        SX1276Write( REG_OPMODE, RFLR_OPMODE_SLEEP );
 800d332:	2100      	movs	r1, #0
 800d334:	2001      	movs	r0, #1
 800d336:	f7ff fb87 	bl	800ca48 <SX1276Write>
    }

    SX1276Write( REG_OPMODE, previousOpMode );
 800d33a:	7dbb      	ldrb	r3, [r7, #22]
 800d33c:	4619      	mov	r1, r3
 800d33e:	2001      	movs	r0, #1
 800d340:	f7ff fb82 	bl	800ca48 <SX1276Write>
    // return temp;
    return RegTemp;
 800d344:	7bfb      	ldrb	r3, [r7, #15]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3718      	adds	r7, #24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	200012c8 	.word	0x200012c8

0800d354 <gpi_radio_init>:
//**************************************************************************************************
//***** Global Functions ***************************************************************************

/*sx1276-arch functions---------------------------------------------------------------------------*/
void gpi_radio_init()
{
 800d354:	b5b0      	push	{r4, r5, r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af0a      	add	r7, sp, #40	; 0x28
    SX1276IoInit();
 800d35a:	f7fe fc71 	bl	800bc40 <SX1276IoInit>
    spi_init();
 800d35e:	f000 fadb 	bl	800d918 <spi_init>
    SX1276Init();
 800d362:	f7fe fe31 	bl	800bfc8 <SX1276Init>

    SX1276SetChannel(chirp_config.lora_freq);
 800d366:	4b2d      	ldr	r3, [pc, #180]	; (800d41c <gpi_radio_init+0xc8>)
 800d368:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fe fe8d 	bl	800c08c <SX1276SetChannel>

#if defined( USE_MODEM_LORA )

    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d372:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <gpi_radio_init+0xc8>)
 800d374:	f993 0048 	ldrsb.w	r0, [r3, #72]	; 0x48
 800d378:	4b28      	ldr	r3, [pc, #160]	; (800d41c <gpi_radio_init+0xc8>)
 800d37a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d37e:	461d      	mov	r5, r3
                    chirp_config.lora_sf, chirp_config.lora_cr,
 800d380:	4b26      	ldr	r3, [pc, #152]	; (800d41c <gpi_radio_init+0xc8>)
 800d382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d386:	461c      	mov	r4, r3
 800d388:	4b24      	ldr	r3, [pc, #144]	; (800d41c <gpi_radio_init+0xc8>)
 800d38a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
                    chirp_config.lora_plen, LORA_FIX_LENGTH_PAYLOAD_ON,
 800d38e:	4a23      	ldr	r2, [pc, #140]	; (800d41c <gpi_radio_init+0xc8>)
 800d390:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    SX1276SetTxConfig( MODEM_LORA, chirp_config.lora_tx_pwr, 0, chirp_config.lora_bw,
 800d394:	b292      	uxth	r2, r2
 800d396:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800d39a:	9108      	str	r1, [sp, #32]
 800d39c:	2100      	movs	r1, #0
 800d39e:	9107      	str	r1, [sp, #28]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	9106      	str	r1, [sp, #24]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	9105      	str	r1, [sp, #20]
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	9104      	str	r1, [sp, #16]
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	9103      	str	r1, [sp, #12]
 800d3b0:	9202      	str	r2, [sp, #8]
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	9400      	str	r4, [sp, #0]
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	2001      	movs	r0, #1
 800d3be:	f7ff f8e7 	bl	800c590 <SX1276SetTxConfig>
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE );

    SX1276SetRxConfig( MODEM_LORA, chirp_config.lora_bw, chirp_config.lora_sf,
 800d3c2:	4b16      	ldr	r3, [pc, #88]	; (800d41c <gpi_radio_init+0xc8>)
 800d3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	4b14      	ldr	r3, [pc, #80]	; (800d41c <gpi_radio_init+0xc8>)
 800d3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3d0:	461c      	mov	r4, r3
 800d3d2:	4b12      	ldr	r3, [pc, #72]	; (800d41c <gpi_radio_init+0xc8>)
 800d3d4:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
                    chirp_config.lora_cr, 0, chirp_config.lora_plen,
 800d3d8:	4b10      	ldr	r3, [pc, #64]	; (800d41c <gpi_radio_init+0xc8>)
 800d3da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    SX1276SetRxConfig( MODEM_LORA, chirp_config.lora_bw, chirp_config.lora_sf,
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	9208      	str	r2, [sp, #32]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	9207      	str	r2, [sp, #28]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	9206      	str	r2, [sp, #24]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	9205      	str	r2, [sp, #20]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	9204      	str	r2, [sp, #16]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	9203      	str	r2, [sp, #12]
 800d3fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d400:	9202      	str	r2, [sp, #8]
 800d402:	9301      	str	r3, [sp, #4]
 800d404:	2300      	movs	r3, #0
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	460b      	mov	r3, r1
 800d40a:	4622      	mov	r2, r4
 800d40c:	4601      	mov	r1, r0
 800d40e:	2001      	movs	r0, #1
 800d410:	f7fe fea6 	bl	800c160 <SX1276SetRxConfig>
#elif defined( USE_MODEM_FSK )
    #error "Please define FSK parameters."
#else
    #error "Please define a frequency band in the compiler options."
#endif
}
 800d414:	bf00      	nop
 800d416:	46bd      	mov	sp, r7
 800d418:	bdb0      	pop	{r4, r5, r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20001430 	.word	0x20001430

0800d420 <gpi_read_rssi>:
    SX1276.Settings.Fsk.Power = power;
#endif
}

RadioLoRaPacketHandler_t gpi_read_rssi(uint8_t rxdone)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
    RadioLoRaPacketHandler_t read_value;

    // Returns SNR value [dB] rounded to the nearest integer value
    read_value.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d42c:	2019      	movs	r0, #25
 800d42e:	f7ff fb1d 	bl	800ca6c <SX1276Read>
 800d432:	4603      	mov	r3, r0
 800d434:	b25b      	sxtb	r3, r3
 800d436:	3302      	adds	r3, #2
 800d438:	109b      	asrs	r3, r3, #2
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	723b      	strb	r3, [r7, #8]
    int16_t rssi;

    if (rxdone)
 800d43e:	78fb      	ldrb	r3, [r7, #3]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d050      	beq.n	800d4e6 <gpi_read_rssi+0xc6>
    {
        rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d444:	201a      	movs	r0, #26
 800d446:	f7ff fb11 	bl	800ca6c <SX1276Read>
 800d44a:	4603      	mov	r3, r0
 800d44c:	81fb      	strh	r3, [r7, #14]

        if( read_value.SnrValue < 0 )
 800d44e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	da28      	bge.n	800d4a8 <gpi_read_rssi+0x88>
        {
            if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d456:	4b34      	ldr	r3, [pc, #208]	; (800d528 <gpi_read_rssi+0x108>)
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	4a34      	ldr	r2, [pc, #208]	; (800d52c <gpi_read_rssi+0x10c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d911      	bls.n	800d484 <gpi_read_rssi+0x64>
            {
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d460:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d464:	111b      	asrs	r3, r3, #4
 800d466:	b21b      	sxth	r3, r3
 800d468:	b29a      	uxth	r2, r3
 800d46a:	89fb      	ldrh	r3, [r7, #14]
 800d46c:	4413      	add	r3, r2
 800d46e:	b29a      	uxth	r2, r3
                                                                read_value.SnrValue;
 800d470:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d474:	b29b      	uxth	r3, r3
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d476:	4413      	add	r3, r2
 800d478:	b29b      	uxth	r3, r3
 800d47a:	3b9d      	subs	r3, #157	; 0x9d
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	b21b      	sxth	r3, r3
 800d480:	817b      	strh	r3, [r7, #10]
 800d482:	e045      	b.n	800d510 <gpi_read_rssi+0xf0>
            }
            else
            {
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d488:	111b      	asrs	r3, r3, #4
 800d48a:	b21b      	sxth	r3, r3
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	89fb      	ldrh	r3, [r7, #14]
 800d490:	4413      	add	r3, r2
 800d492:	b29a      	uxth	r2, r3
                                                                read_value.SnrValue;
 800d494:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800d498:	b29b      	uxth	r3, r3
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d49a:	4413      	add	r3, r2
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	3ba4      	subs	r3, #164	; 0xa4
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	b21b      	sxth	r3, r3
 800d4a4:	817b      	strh	r3, [r7, #10]
 800d4a6:	e033      	b.n	800d510 <gpi_read_rssi+0xf0>
            }
        }
        else
        {
            if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d4a8:	4b1f      	ldr	r3, [pc, #124]	; (800d528 <gpi_read_rssi+0x108>)
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	4a1f      	ldr	r2, [pc, #124]	; (800d52c <gpi_read_rssi+0x10c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d90c      	bls.n	800d4cc <gpi_read_rssi+0xac>
            {
                read_value.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d4b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d4b6:	111b      	asrs	r3, r3, #4
 800d4b8:	b21b      	sxth	r3, r3
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	89fb      	ldrh	r3, [r7, #14]
 800d4be:	4413      	add	r3, r2
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	3b9d      	subs	r3, #157	; 0x9d
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	b21b      	sxth	r3, r3
 800d4c8:	817b      	strh	r3, [r7, #10]
 800d4ca:	e021      	b.n	800d510 <gpi_read_rssi+0xf0>
            }
            else
            {
                read_value.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d4cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d4d0:	111b      	asrs	r3, r3, #4
 800d4d2:	b21b      	sxth	r3, r3
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	89fb      	ldrh	r3, [r7, #14]
 800d4d8:	4413      	add	r3, r2
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	3ba4      	subs	r3, #164	; 0xa4
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	b21b      	sxth	r3, r3
 800d4e2:	817b      	strh	r3, [r7, #10]
 800d4e4:	e014      	b.n	800d510 <gpi_read_rssi+0xf0>
            }
        }
    }
    else
    {
        rssi = SX1276Read( REG_LR_RSSIVALUE );
 800d4e6:	201b      	movs	r0, #27
 800d4e8:	f7ff fac0 	bl	800ca6c <SX1276Read>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	81fb      	strh	r3, [r7, #14]

        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <gpi_read_rssi+0x108>)
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	4a0d      	ldr	r2, [pc, #52]	; (800d52c <gpi_read_rssi+0x10c>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d905      	bls.n	800d506 <gpi_read_rssi+0xe6>
        {
            read_value.RssiValue = RSSI_OFFSET_HF + rssi;
 800d4fa:	89fb      	ldrh	r3, [r7, #14]
 800d4fc:	3b9d      	subs	r3, #157	; 0x9d
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	b21b      	sxth	r3, r3
 800d502:	817b      	strh	r3, [r7, #10]
 800d504:	e004      	b.n	800d510 <gpi_read_rssi+0xf0>
        }
        else
        {
            read_value.RssiValue = RSSI_OFFSET_LF + rssi;
 800d506:	89fb      	ldrh	r3, [r7, #14]
 800d508:	3ba4      	subs	r3, #164	; 0xa4
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	b21b      	sxth	r3, r3
 800d50e:	817b      	strh	r3, [r7, #10]
        }
    }

    return read_value;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	461a      	mov	r2, r3
 800d514:	f107 0308 	add.w	r3, r7, #8
 800d518:	6818      	ldr	r0, [r3, #0]
 800d51a:	6010      	str	r0, [r2, #0]
 800d51c:	889b      	ldrh	r3, [r3, #4]
 800d51e:	8093      	strh	r3, [r2, #4]
}
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	200013c4 	.word	0x200013c4
 800d52c:	1f4add40 	.word	0x1f4add40

0800d530 <MX_GPIO_Init>:
#include "hw_gpio.h"
/*---------------------------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08a      	sub	sp, #40	; 0x28
 800d534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d536:	4b55      	ldr	r3, [pc, #340]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d53a:	4a54      	ldr	r2, [pc, #336]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d53c:	f043 0304 	orr.w	r3, r3, #4
 800d540:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d542:	4b52      	ldr	r3, [pc, #328]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d546:	f003 0304 	and.w	r3, r3, #4
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d54e:	4b4f      	ldr	r3, [pc, #316]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d552:	4a4e      	ldr	r2, [pc, #312]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d55a:	4b4c      	ldr	r3, [pc, #304]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d566:	4b49      	ldr	r3, [pc, #292]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d56a:	4a48      	ldr	r2, [pc, #288]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d56c:	f043 0301 	orr.w	r3, r3, #1
 800d570:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d572:	4b46      	ldr	r3, [pc, #280]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	60bb      	str	r3, [r7, #8]
 800d57c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d57e:	4b43      	ldr	r3, [pc, #268]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d582:	4a42      	ldr	r2, [pc, #264]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d584:	f043 0302 	orr.w	r3, r3, #2
 800d588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d58a:	4b40      	ldr	r3, [pc, #256]	; (800d68c <MX_GPIO_Init+0x15c>)
 800d58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d58e:	f003 0302 	and.w	r3, r3, #2
 800d592:	607b      	str	r3, [r7, #4]
 800d594:	687b      	ldr	r3, [r7, #4]

  // ---------------config all gpio as reset---------------
  /* except PA14 (SWCLK) and PA13 (SWDIO) */
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 800d596:	2200      	movs	r2, #0
 800d598:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d59c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5a0:	f7f5 ff9a 	bl	80034d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOA, 0x9FFF, &GPIO_InitStruct );
 800d5b0:	f107 0314 	add.w	r3, r7, #20
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d5ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5be:	f000 f8a5 	bl	800d70c <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f649 71ff 	movw	r1, #40959	; 0x9fff
 800d5c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d5cc:	f7f5 ff84 	bl	80034d8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5d6:	482e      	ldr	r0, [pc, #184]	; (800d690 <MX_GPIO_Init+0x160>)
 800d5d8:	f7f5 ff7e 	bl	80034d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOB, 0xffff, &GPIO_InitStruct );
 800d5e8:	f107 0314 	add.w	r3, r7, #20
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5f2:	4827      	ldr	r0, [pc, #156]	; (800d690 <MX_GPIO_Init+0x160>)
 800d5f4:	f000 f88a 	bl	800d70c <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5fe:	4824      	ldr	r0, [pc, #144]	; (800d690 <MX_GPIO_Init+0x160>)
 800d600:	f7f5 ff6a 	bl	80034d8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 800d604:	2200      	movs	r2, #0
 800d606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d60a:	4822      	ldr	r0, [pc, #136]	; (800d694 <MX_GPIO_Init+0x164>)
 800d60c:	f7f5 ff64 	bl	80034d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d610:	2301      	movs	r3, #1
 800d612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d614:	2300      	movs	r3, #0
 800d616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d618:	2300      	movs	r3, #0
 800d61a:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOC, 0xffff, &GPIO_InitStruct );
 800d61c:	f107 0314 	add.w	r3, r7, #20
 800d620:	461a      	mov	r2, r3
 800d622:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d626:	481b      	ldr	r0, [pc, #108]	; (800d694 <MX_GPIO_Init+0x164>)
 800d628:	f000 f870 	bl	800d70c <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 800d62c:	2200      	movs	r2, #0
 800d62e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d632:	4818      	ldr	r0, [pc, #96]	; (800d694 <MX_GPIO_Init+0x164>)
 800d634:	f7f5 ff50 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure LED pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, GPIO_PIN_RESET);
 800d638:	2200      	movs	r2, #0
 800d63a:	f641 5148 	movw	r1, #7496	; 0x1d48
 800d63e:	4815      	ldr	r0, [pc, #84]	; (800d694 <MX_GPIO_Init+0x164>)
 800d640:	f7f5 ff4a 	bl	80034d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d644:	2301      	movs	r3, #1
 800d646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d648:	2300      	movs	r3, #0
 800d64a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d64c:	2300      	movs	r3, #0
 800d64e:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, &GPIO_InitStruct );
 800d650:	f107 0314 	add.w	r3, r7, #20
 800d654:	461a      	mov	r2, r3
 800d656:	f641 5148 	movw	r1, #7496	; 0x1d48
 800d65a:	480e      	ldr	r0, [pc, #56]	; (800d694 <MX_GPIO_Init+0x164>)
 800d65c:	f000 f856 	bl	800d70c <HW_GPIO_Init>

  // TODO: no need to config?
  /*Configure RADIO_DIO_3_PIN pin Output Level */
  HAL_GPIO_WritePin(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, GPIO_PIN_RESET);
 800d660:	2200      	movs	r2, #0
 800d662:	2110      	movs	r1, #16
 800d664:	480a      	ldr	r0, [pc, #40]	; (800d690 <MX_GPIO_Init+0x160>)
 800d666:	f7f5 ff37 	bl	80034d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d66a:	2301      	movs	r3, #1
 800d66c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d672:	2300      	movs	r3, #0
 800d674:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &GPIO_InitStruct );
 800d676:	f107 0314 	add.w	r3, r7, #20
 800d67a:	461a      	mov	r2, r3
 800d67c:	2110      	movs	r1, #16
 800d67e:	4804      	ldr	r0, [pc, #16]	; (800d690 <MX_GPIO_Init+0x160>)
 800d680:	f000 f844 	bl	800d70c <HW_GPIO_Init>
}
 800d684:	bf00      	nop
 800d686:	3728      	adds	r7, #40	; 0x28
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	40021000 	.word	0x40021000
 800d690:	48000400 	.word	0x48000400
 800d694:	48000800 	.word	0x48000800

0800d698 <MSP_GetIRQn>:

static GpioIrqHandler *GpioIrq[16] = { NULL };

IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	80fb      	strh	r3, [r7, #6]
  switch( GPIO_Pin )
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	2b10      	cmp	r3, #16
 800d6a6:	d025      	beq.n	800d6f4 <MSP_GetIRQn+0x5c>
 800d6a8:	2b10      	cmp	r3, #16
 800d6aa:	dc0b      	bgt.n	800d6c4 <MSP_GetIRQn+0x2c>
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d01b      	beq.n	800d6e8 <MSP_GetIRQn+0x50>
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	dc02      	bgt.n	800d6ba <MSP_GetIRQn+0x22>
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d015      	beq.n	800d6e4 <MSP_GetIRQn+0x4c>
 800d6b8:	e020      	b.n	800d6fc <MSP_GetIRQn+0x64>
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	d016      	beq.n	800d6ec <MSP_GetIRQn+0x54>
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	d016      	beq.n	800d6f0 <MSP_GetIRQn+0x58>
 800d6c2:	e01b      	b.n	800d6fc <MSP_GetIRQn+0x64>
 800d6c4:	2b80      	cmp	r3, #128	; 0x80
 800d6c6:	d017      	beq.n	800d6f8 <MSP_GetIRQn+0x60>
 800d6c8:	2b80      	cmp	r3, #128	; 0x80
 800d6ca:	dc04      	bgt.n	800d6d6 <MSP_GetIRQn+0x3e>
 800d6cc:	2b20      	cmp	r3, #32
 800d6ce:	d013      	beq.n	800d6f8 <MSP_GetIRQn+0x60>
 800d6d0:	2b40      	cmp	r3, #64	; 0x40
 800d6d2:	d011      	beq.n	800d6f8 <MSP_GetIRQn+0x60>
 800d6d4:	e012      	b.n	800d6fc <MSP_GetIRQn+0x64>
 800d6d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6da:	d00d      	beq.n	800d6f8 <MSP_GetIRQn+0x60>
 800d6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6e0:	d00a      	beq.n	800d6f8 <MSP_GetIRQn+0x60>
 800d6e2:	e00b      	b.n	800d6fc <MSP_GetIRQn+0x64>
  {
    case GPIO_PIN_0:  return EXTI0_IRQn;
 800d6e4:	2306      	movs	r3, #6
 800d6e6:	e00a      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_1:  return EXTI1_IRQn;
 800d6e8:	2307      	movs	r3, #7
 800d6ea:	e008      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_2:  return EXTI2_IRQn;
 800d6ec:	2308      	movs	r3, #8
 800d6ee:	e006      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_3:  return EXTI3_IRQn;
 800d6f0:	2309      	movs	r3, #9
 800d6f2:	e004      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_4:  return EXTI4_IRQn;
 800d6f4:	230a      	movs	r3, #10
 800d6f6:	e002      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_5:
    case GPIO_PIN_6:
    case GPIO_PIN_7:
    case GPIO_PIN_8:
    case GPIO_PIN_9:  return EXTI9_5_IRQn;
 800d6f8:	2317      	movs	r3, #23
 800d6fa:	e000      	b.n	800d6fe <MSP_GetIRQn+0x66>
    case GPIO_PIN_11:
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
	default: return EXTI15_10_IRQn;
 800d6fc:	2328      	movs	r3, #40	; 0x28
  }
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
	...

0800d70c <HW_GPIO_Init>:

void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08a      	sub	sp, #40	; 0x28
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	460b      	mov	r3, r1
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	817b      	strh	r3, [r7, #10]
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	4a2d      	ldr	r2, [pc, #180]	; (800d7d4 <HW_GPIO_Init+0xc8>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d01a      	beq.n	800d758 <HW_GPIO_Init+0x4c>
 800d722:	4a2c      	ldr	r2, [pc, #176]	; (800d7d4 <HW_GPIO_Init+0xc8>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d803      	bhi.n	800d730 <HW_GPIO_Init+0x24>
 800d728:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d72c:	d007      	beq.n	800d73e <HW_GPIO_Init+0x32>
 800d72e:	e03a      	b.n	800d7a6 <HW_GPIO_Init+0x9a>
 800d730:	4a29      	ldr	r2, [pc, #164]	; (800d7d8 <HW_GPIO_Init+0xcc>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d01d      	beq.n	800d772 <HW_GPIO_Init+0x66>
 800d736:	4a29      	ldr	r2, [pc, #164]	; (800d7dc <HW_GPIO_Init+0xd0>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d027      	beq.n	800d78c <HW_GPIO_Init+0x80>
 800d73c:	e033      	b.n	800d7a6 <HW_GPIO_Init+0x9a>
 800d73e:	4b28      	ldr	r3, [pc, #160]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d742:	4a27      	ldr	r2, [pc, #156]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d744:	f043 0301 	orr.w	r3, r3, #1
 800d748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d74a:	4b25      	ldr	r3, [pc, #148]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	e032      	b.n	800d7be <HW_GPIO_Init+0xb2>
 800d758:	4b21      	ldr	r3, [pc, #132]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d75c:	4a20      	ldr	r2, [pc, #128]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d75e:	f043 0302 	orr.w	r3, r3, #2
 800d762:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d764:	4b1e      	ldr	r3, [pc, #120]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d768:	f003 0302 	and.w	r3, r3, #2
 800d76c:	623b      	str	r3, [r7, #32]
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	e025      	b.n	800d7be <HW_GPIO_Init+0xb2>
 800d772:	4b1b      	ldr	r3, [pc, #108]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d776:	4a1a      	ldr	r2, [pc, #104]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d778:	f043 0304 	orr.w	r3, r3, #4
 800d77c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d77e:	4b18      	ldr	r3, [pc, #96]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	e018      	b.n	800d7be <HW_GPIO_Init+0xb2>
 800d78c:	4b14      	ldr	r3, [pc, #80]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d790:	4a13      	ldr	r2, [pc, #76]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d792:	f043 0308 	orr.w	r3, r3, #8
 800d796:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d798:	4b11      	ldr	r3, [pc, #68]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d79a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d79c:	f003 0308 	and.w	r3, r3, #8
 800d7a0:	61bb      	str	r3, [r7, #24]
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	e00b      	b.n	800d7be <HW_GPIO_Init+0xb2>
 800d7a6:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7aa:	4a0d      	ldr	r2, [pc, #52]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <HW_GPIO_Init+0xd4>)
 800d7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ba:	617b      	str	r3, [r7, #20]
 800d7bc:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 800d7be:	897a      	ldrh	r2, [r7, #10]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f7f5 fbe2 	bl	8002f90 <HAL_GPIO_Init>
}
 800d7cc:	bf00      	nop
 800d7ce:	3728      	adds	r7, #40	; 0x28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	48000400 	.word	0x48000400
 800d7d8:	48000800 	.word	0x48000800
 800d7dc:	48000c00 	.word	0x48000c00
 800d7e0:	40021000 	.word	0x40021000

0800d7e4 <HW_GPIO_SetIrq>:

void HW_GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio, GpioIrqHandler *irqHandler )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	607a      	str	r2, [r7, #4]
 800d7ee:	603b      	str	r3, [r7, #0]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	817b      	strh	r3, [r7, #10]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800d7f4:	897b      	ldrh	r3, [r7, #10]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 f858 	bl	800d8ac <HW_GPIO_GetBitPos>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	617b      	str	r3, [r7, #20]

  if ( irqHandler != NULL)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d017      	beq.n	800d836 <HW_GPIO_SetIrq+0x52>
  {
    GpioIrq[ BitPos ] = irqHandler;
 800d806:	4910      	ldr	r1, [pc, #64]	; (800d848 <HW_GPIO_SetIrq+0x64>)
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    IRQnb = MSP_GetIRQn( GPIO_Pin );
 800d810:	897b      	ldrh	r3, [r7, #10]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff ff40 	bl	800d698 <MSP_GetIRQn>
 800d818:	4603      	mov	r3, r0
 800d81a:	74fb      	strb	r3, [r7, #19]

    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 800d81c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d820:	2200      	movs	r2, #0
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	4618      	mov	r0, r3
 800d826:	f7f4 fa4a 	bl	8001cbe <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ( IRQnb );
 800d82a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7f4 fa61 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 800d834:	e004      	b.n	800d840 <HW_GPIO_SetIrq+0x5c>
    GpioIrq[ BitPos ] = NULL;
 800d836:	4a04      	ldr	r2, [pc, #16]	; (800d848 <HW_GPIO_SetIrq+0x64>)
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	2100      	movs	r1, #0
 800d83c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800d840:	bf00      	nop
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20000374 	.word	0x20000374

0800d84c <HW_GPIO_IrqHandler>:

void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	80fb      	strh	r3, [r7, #6]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 800d856:	88fb      	ldrh	r3, [r7, #6]
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 f827 	bl	800d8ac <HW_GPIO_GetBitPos>
 800d85e:	4603      	mov	r3, r0
 800d860:	60fb      	str	r3, [r7, #12]

  if ( GpioIrq[ BitPos ]  != NULL)
 800d862:	4a08      	ldr	r2, [pc, #32]	; (800d884 <HW_GPIO_IrqHandler+0x38>)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <HW_GPIO_IrqHandler+0x2e>
  {
    GpioIrq[ BitPos ] ( NULL );
 800d86e:	4a05      	ldr	r2, [pc, #20]	; (800d884 <HW_GPIO_IrqHandler+0x38>)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d876:	2000      	movs	r0, #0
 800d878:	4798      	blx	r3
  }
}
 800d87a:	bf00      	nop
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20000374 	.word	0x20000374

0800d888 <HW_GPIO_Write>:

void HW_GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	460b      	mov	r3, r1
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	897b      	ldrh	r3, [r7, #10]
 800d89c:	4619      	mov	r1, r3
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7f5 fe1a 	bl	80034d8 <HAL_GPIO_WritePin>
}
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <HW_GPIO_GetBitPos>:
{
  return HAL_GPIO_ReadPin( GPIOx, GPIO_Pin);
}

uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d003      	beq.n	800d8cc <HW_GPIO_GetBitPos+0x20>
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	f043 0308 	orr.w	r3, r3, #8
 800d8ca:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800d8cc:	88fa      	ldrh	r2, [r7, #6]
 800d8ce:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HW_GPIO_GetBitPos+0x34>
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
 800d8da:	f043 0304 	orr.w	r3, r3, #4
 800d8de:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 800d8e0:	88fa      	ldrh	r2, [r7, #6]
 800d8e2:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d003      	beq.n	800d8f4 <HW_GPIO_GetBitPos+0x48>
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	f043 0302 	orr.w	r3, r3, #2
 800d8f2:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 800d8f4:	88fa      	ldrh	r2, [r7, #6]
 800d8f6:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <HW_GPIO_GetBitPos+0x5c>
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	f043 0301 	orr.w	r3, r3, #1
 800d906:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
	...

0800d918 <spi_init>:
#include "spi.h"
/*---------------------------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
/*---------------------------------------------------------------------------*/
void spi_init(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 800d91c:	4b19      	ldr	r3, [pc, #100]	; (800d984 <spi_init+0x6c>)
 800d91e:	4a1a      	ldr	r2, [pc, #104]	; (800d988 <spi_init+0x70>)
 800d920:	601a      	str	r2, [r3, #0]

//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
    hspi1.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800d922:	481a      	ldr	r0, [pc, #104]	; (800d98c <spi_init+0x74>)
 800d924:	f000 f84c 	bl	800d9c0 <SpiFrequency>
 800d928:	4602      	mov	r2, r0
 800d92a:	4b16      	ldr	r3, [pc, #88]	; (800d984 <spi_init+0x6c>)
 800d92c:	61da      	str	r2, [r3, #28]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d92e:	4b15      	ldr	r3, [pc, #84]	; (800d984 <spi_init+0x6c>)
 800d930:	2200      	movs	r2, #0
 800d932:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800d934:	4b13      	ldr	r3, [pc, #76]	; (800d984 <spi_init+0x6c>)
 800d936:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d93a:	605a      	str	r2, [r3, #4]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d93c:	4b11      	ldr	r3, [pc, #68]	; (800d984 <spi_init+0x6c>)
 800d93e:	2200      	movs	r2, #0
 800d940:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d942:	4b10      	ldr	r3, [pc, #64]	; (800d984 <spi_init+0x6c>)
 800d944:	2200      	movs	r2, #0
 800d946:	615a      	str	r2, [r3, #20]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d948:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <spi_init+0x6c>)
 800d94a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d94e:	60da      	str	r2, [r3, #12]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d950:	4b0c      	ldr	r3, [pc, #48]	; (800d984 <spi_init+0x6c>)
 800d952:	2200      	movs	r2, #0
 800d954:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d956:	4b0b      	ldr	r3, [pc, #44]	; (800d984 <spi_init+0x6c>)
 800d958:	2200      	movs	r2, #0
 800d95a:	621a      	str	r2, [r3, #32]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800d95c:	4b09      	ldr	r3, [pc, #36]	; (800d984 <spi_init+0x6c>)
 800d95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d962:	619a      	str	r2, [r3, #24]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d964:	4b07      	ldr	r3, [pc, #28]	; (800d984 <spi_init+0x6c>)
 800d966:	2200      	movs	r2, #0
 800d968:	625a      	str	r2, [r3, #36]	; 0x24

//  hspi1.Init.CRCPolynomial = 7;
//  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d96a:	4806      	ldr	r0, [pc, #24]	; (800d984 <spi_init+0x6c>)
 800d96c:	f7f9 fc91 	bl	8007292 <HAL_SPI_Init>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <spi_init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800d976:	211c      	movs	r1, #28
 800d978:	4805      	ldr	r0, [pc, #20]	; (800d990 <spi_init+0x78>)
 800d97a:	f7f3 fcad 	bl	80012d8 <_Error_Handler>
  }

}
 800d97e:	bf00      	nop
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20001264 	.word	0x20001264
 800d988:	40013000 	.word	0x40013000
 800d98c:	00989680 	.word	0x00989680
 800d990:	08026fb4 	.word	0x08026fb4

0800d994 <HW_SPI_InOut>:

uint16_t HW_SPI_InOut( uint16_t txData )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af02      	add	r7, sp, #8
 800d99a:	4603      	mov	r3, r0
 800d99c:	80fb      	strh	r3, [r7, #6]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive( &hspi1, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);
 800d99e:	f107 020e 	add.w	r2, r7, #14
 800d9a2:	1db9      	adds	r1, r7, #6
 800d9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4803      	ldr	r0, [pc, #12]	; (800d9bc <HW_SPI_InOut+0x28>)
 800d9ae:	f7f9 fcfa 	bl	80073a6 <HAL_SPI_TransmitReceive>

  return rxData;
 800d9b2:	89fb      	ldrh	r3, [r7, #14]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20001264 	.word	0x20001264

0800d9c0 <SpiFrequency>:

uint32_t SpiFrequency( uint32_t hz )
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 800d9cc:	4b1a      	ldr	r3, [pc, #104]	; (800da38 <SpiFrequency+0x78>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while( SysClkTmp > hz)
 800d9d2:	e008      	b.n	800d9e6 <SpiFrequency+0x26>
  {
    divisor++;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	617b      	str	r3, [r7, #20]
    SysClkTmp= ( SysClkTmp >> 1);
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	085b      	lsrs	r3, r3, #1
 800d9de:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b06      	cmp	r3, #6
 800d9e4:	d804      	bhi.n	800d9f0 <SpiFrequency+0x30>
  while( SysClkTmp > hz)
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d8f2      	bhi.n	800d9d4 <SpiFrequency+0x14>
 800d9ee:	e000      	b.n	800d9f2 <SpiFrequency+0x32>
      break;
 800d9f0:	bf00      	nop
  }

  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <SpiFrequency+0x40>
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	e000      	b.n	800da02 <SpiFrequency+0x42>
 800da00:	2220      	movs	r2, #32
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )|
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f003 0302 	and.w	r3, r3, #2
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d101      	bne.n	800da10 <SpiFrequency+0x50>
 800da0c:	2300      	movs	r3, #0
 800da0e:	e000      	b.n	800da12 <SpiFrequency+0x52>
 800da10:	2310      	movs	r3, #16
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800da12:	4313      	orrs	r3, r2
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	f002 0201 	and.w	r2, r2, #1
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	d101      	bne.n	800da22 <SpiFrequency+0x62>
 800da1e:	2200      	movs	r2, #0
 800da20:	e000      	b.n	800da24 <SpiFrequency+0x64>
 800da22:	2208      	movs	r2, #8
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )|
 800da24:	4313      	orrs	r3, r2
 800da26:	60fb      	str	r3, [r7, #12]

  return baudRate;
 800da28:	68fb      	ldr	r3, [r7, #12]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	371c      	adds	r7, #28
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20000068 	.word	0x20000068

0800da3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b0b8      	sub	sp, #224	; 0xe0
 800da40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability*/
  HAL_PWR_EnableBkUpAccess();
 800da42:	f7f7 fd41 	bl	80054c8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800da46:	4b4a      	ldr	r3, [pc, #296]	; (800db70 <SystemClock_Config+0x134>)
 800da48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da4c:	4a48      	ldr	r2, [pc, #288]	; (800db70 <SystemClock_Config+0x134>)
 800da4e:	f023 0318 	bic.w	r3, r3, #24
 800da52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_LSI;
 800da56:	230e      	movs	r3, #14
 800da58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800da5c:	2301      	movs	r3, #1
 800da5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800da62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800da6a:	2310      	movs	r3, #16
 800da6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800da70:	2301      	movs	r3, #1
 800da72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da76:	2302      	movs	r3, #2
 800da78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800da7c:	2302      	movs	r3, #2
 800da7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800da82:	2301      	movs	r3, #1
 800da84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800da88:	230a      	movs	r3, #10
 800da8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800da8e:	2307      	movs	r3, #7
 800da90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800da94:	2302      	movs	r3, #2
 800da96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800da9a:	2302      	movs	r3, #2
 800da9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800daa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7f7 fdaf 	bl	8005608 <HAL_RCC_OscConfig>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d003      	beq.n	800dab8 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dab0:	218c      	movs	r1, #140	; 0x8c
 800dab2:	4830      	ldr	r0, [pc, #192]	; (800db74 <SystemClock_Config+0x138>)
 800dab4:	f7f3 fc10 	bl	80012d8 <_Error_Handler>
  }

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dab8:	230f      	movs	r3, #15
 800daba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dabe:	2303      	movs	r3, #3
 800dac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dac4:	2300      	movs	r3, #0
 800dac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800daca:	2300      	movs	r3, #0
 800dacc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800dad0:	2300      	movs	r3, #0
 800dad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800dad6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dada:	2104      	movs	r1, #4
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f8 f8f9 	bl	8005cd4 <HAL_RCC_ClockConfig>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d003      	beq.n	800daf0 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dae8:	219a      	movs	r1, #154	; 0x9a
 800daea:	4822      	ldr	r0, [pc, #136]	; (800db74 <SystemClock_Config+0x138>)
 800daec:	f7f3 fbf4 	bl	80012d8 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800daf0:	4b21      	ldr	r3, [pc, #132]	; (800db78 <SystemClock_Config+0x13c>)
 800daf2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800daf4:	2300      	movs	r3, #0
 800daf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800daf8:	2300      	movs	r3, #0
 800dafa:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800dafc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800db00:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800db02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800db0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db0e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800db10:	2302      	movs	r3, #2
 800db12:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800db14:	2301      	movs	r3, #1
 800db16:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800db18:	2308      	movs	r3, #8
 800db1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800db1c:	2307      	movs	r3, #7
 800db1e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800db20:	2302      	movs	r3, #2
 800db22:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800db24:	2304      	movs	r3, #4
 800db26:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800db28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db2c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db2e:	463b      	mov	r3, r7
 800db30:	4618      	mov	r0, r3
 800db32:	f7f8 faef 	bl	8006114 <HAL_RCCEx_PeriphCLKConfig>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d003      	beq.n	800db44 <SystemClock_Config+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db3c:	21ac      	movs	r1, #172	; 0xac
 800db3e:	480d      	ldr	r0, [pc, #52]	; (800db74 <SystemClock_Config+0x138>)
 800db40:	f7f3 fbca 	bl	80012d8 <_Error_Handler>
  }

  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800db44:	f44f 7000 	mov.w	r0, #512	; 0x200
 800db48:	f7f7 fcdc 	bl	8005504 <HAL_PWREx_ControlVoltageScaling>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <SystemClock_Config+0x11e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800db52:	21b3      	movs	r1, #179	; 0xb3
 800db54:	4807      	ldr	r0, [pc, #28]	; (800db74 <SystemClock_Config+0x138>)
 800db56:	f7f3 fbbf 	bl	80012d8 <_Error_Handler>
  }

  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800db5a:	4b08      	ldr	r3, [pc, #32]	; (800db7c <SystemClock_Config+0x140>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a07      	ldr	r2, [pc, #28]	; (800db7c <SystemClock_Config+0x140>)
 800db60:	f023 0302 	bic.w	r3, r3, #2
 800db64:	6013      	str	r3, [r2, #0]
}
 800db66:	bf00      	nop
 800db68:	37e0      	adds	r7, #224	; 0xe0
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	40021000 	.word	0x40021000
 800db74:	08026fd8 	.word	0x08026fd8
 800db78:	00024206 	.word	0x00024206
 800db7c:	e000e010 	.word	0xe000e010

0800db80 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08e      	sub	sp, #56	; 0x38
 800db84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800db86:	4b31      	ldr	r3, [pc, #196]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800db88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800db8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 800db8e:	4b2f      	ldr	r3, [pc, #188]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800db90:	2204      	movs	r2, #4
 800db92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db94:	4b2d      	ldr	r3, [pc, #180]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800db96:	2200      	movs	r2, #0
 800db98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800db9a:	4b2c      	ldr	r3, [pc, #176]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800db9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dba2:	4b2a      	ldr	r3, [pc, #168]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dba8:	4b28      	ldr	r3, [pc, #160]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dbae:	4827      	ldr	r0, [pc, #156]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dbb0:	f7f9 ff13 	bl	80079da <HAL_TIM_Base_Init>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dbba:	21c8      	movs	r1, #200	; 0xc8
 800dbbc:	4824      	ldr	r0, [pc, #144]	; (800dc50 <MX_TIM2_Init+0xd0>)
 800dbbe:	f7f3 fb8b 	bl	80012d8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dbc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dbc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbcc:	4619      	mov	r1, r3
 800dbce:	481f      	ldr	r0, [pc, #124]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dbd0:	f7fa f8ae 	bl	8007d30 <HAL_TIM_ConfigClockSource>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dbda:	21ce      	movs	r1, #206	; 0xce
 800dbdc:	481c      	ldr	r0, [pc, #112]	; (800dc50 <MX_TIM2_Init+0xd0>)
 800dbde:	f7f3 fb7b 	bl	80012d8 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800dbe2:	481a      	ldr	r0, [pc, #104]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dbe4:	f7f9 ff50 	bl	8007a88 <HAL_TIM_OC_Init>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dbee:	21d3      	movs	r1, #211	; 0xd3
 800dbf0:	4817      	ldr	r0, [pc, #92]	; (800dc50 <MX_TIM2_Init+0xd0>)
 800dbf2:	f7f3 fb71 	bl	80012d8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dbfe:	f107 031c 	add.w	r3, r7, #28
 800dc02:	4619      	mov	r1, r3
 800dc04:	4811      	ldr	r0, [pc, #68]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dc06:	f7fa fd8f 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <MX_TIM2_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc10:	21da      	movs	r1, #218	; 0xda
 800dc12:	480f      	ldr	r0, [pc, #60]	; (800dc50 <MX_TIM2_Init+0xd0>)
 800dc14:	f7f3 fb60 	bl	80012d8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0xFFFFFFFF;
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc26:	2300      	movs	r3, #0
 800dc28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dc2a:	463b      	mov	r3, r7
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4806      	ldr	r0, [pc, #24]	; (800dc4c <MX_TIM2_Init+0xcc>)
 800dc32:	f7f9 ffff 	bl	8007c34 <HAL_TIM_OC_ConfigChannel>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <MX_TIM2_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc3c:	21e3      	movs	r1, #227	; 0xe3
 800dc3e:	4804      	ldr	r0, [pc, #16]	; (800dc50 <MX_TIM2_Init+0xd0>)
 800dc40:	f7f3 fb4a 	bl	80012d8 <_Error_Handler>
  }

}
 800dc44:	bf00      	nop
 800dc46:	3738      	adds	r7, #56	; 0x38
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	200012c8 	.word	0x200012c8
 800dc50:	08026fd8 	.word	0x08026fd8

0800dc54 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b088      	sub	sp, #32
 800dc58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 800dc5a:	4b26      	ldr	r3, [pc, #152]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc5c:	4a26      	ldr	r2, [pc, #152]	; (800dcf8 <MX_TIM5_Init+0xa4>)
 800dc5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 800dc60:	4b24      	ldr	r3, [pc, #144]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc62:	2204      	movs	r2, #4
 800dc64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc66:	4b23      	ldr	r3, [pc, #140]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = GPI_FAST_CLOCK_RATE * DOG_PERIOD;
 800dc6c:	4b21      	ldr	r3, [pc, #132]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc6e:	4a23      	ldr	r2, [pc, #140]	; (800dcfc <MX_TIM5_Init+0xa8>)
 800dc70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc72:	4b20      	ldr	r3, [pc, #128]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc78:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dc7e:	481d      	ldr	r0, [pc, #116]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dc80:	f7f9 feab 	bl	80079da <HAL_TIM_Base_Init>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <MX_TIM5_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dc8a:	21f5      	movs	r1, #245	; 0xf5
 800dc8c:	481c      	ldr	r0, [pc, #112]	; (800dd00 <MX_TIM5_Init+0xac>)
 800dc8e:	f7f3 fb23 	bl	80012d8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dc98:	f107 0310 	add.w	r3, r7, #16
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	4815      	ldr	r0, [pc, #84]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dca0:	f7fa f846 	bl	8007d30 <HAL_TIM_ConfigClockSource>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <MX_TIM5_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dcaa:	21fb      	movs	r1, #251	; 0xfb
 800dcac:	4814      	ldr	r0, [pc, #80]	; (800dd00 <MX_TIM5_Init+0xac>)
 800dcae:	f7f3 fb13 	bl	80012d8 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800dcb2:	4810      	ldr	r0, [pc, #64]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dcb4:	f7f9 fee8 	bl	8007a88 <HAL_TIM_OC_Init>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d004      	beq.n	800dcc8 <MX_TIM5_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dcbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcc2:	480f      	ldr	r0, [pc, #60]	; (800dd00 <MX_TIM5_Init+0xac>)
 800dcc4:	f7f3 fb08 	bl	80012d8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dccc:	2300      	movs	r3, #0
 800dcce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dcd0:	1d3b      	adds	r3, r7, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4807      	ldr	r0, [pc, #28]	; (800dcf4 <MX_TIM5_Init+0xa0>)
 800dcd6:	f7fa fd27 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d004      	beq.n	800dcea <MX_TIM5_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dce0:	f240 1107 	movw	r1, #263	; 0x107
 800dce4:	4806      	ldr	r0, [pc, #24]	; (800dd00 <MX_TIM5_Init+0xac>)
 800dce6:	f7f3 faf7 	bl	80012d8 <_Error_Handler>
  }
}
 800dcea:	bf00      	nop
 800dcec:	3720      	adds	r7, #32
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	20001140 	.word	0x20001140
 800dcf8:	40000c00 	.word	0x40000c00
 800dcfc:	1312d000 	.word	0x1312d000
 800dd00:	08026fd8 	.word	0x08026fd8

0800dd04 <MX_LPTIM1_Init>:

void MX_LPTIM1_Init(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 800dd08:	4b14      	ldr	r3, [pc, #80]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd0a:	4a15      	ldr	r2, [pc, #84]	; (800dd60 <MX_LPTIM1_Init+0x5c>)
 800dd0c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800dd0e:	4b13      	ldr	r3, [pc, #76]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800dd14:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800dd1a:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd20:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800dd22:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800dd28:	4b0c      	ldr	r3, [pc, #48]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800dd2e:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800dd3a:	4b08      	ldr	r3, [pc, #32]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800dd40:	4806      	ldr	r0, [pc, #24]	; (800dd5c <MX_LPTIM1_Init+0x58>)
 800dd42:	f7f7 fb37 	bl	80053b4 <HAL_LPTIM_Init>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d004      	beq.n	800dd56 <MX_LPTIM1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800dd4c:	f240 1119 	movw	r1, #281	; 0x119
 800dd50:	4804      	ldr	r0, [pc, #16]	; (800dd64 <MX_LPTIM1_Init+0x60>)
 800dd52:	f7f3 fac1 	bl	80012d8 <_Error_Handler>
  }

}
 800dd56:	bf00      	nop
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	200011e4 	.word	0x200011e4
 800dd60:	40007c00 	.word	0x40007c00
 800dd64:	08026fd8 	.word	0x08026fd8

0800dd68 <HAL_LPTIM_Start>:

void HAL_LPTIM_Start(LPTIM_HandleTypeDef *hlptim){
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68da      	ldr	r2, [r3, #12]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800dd86:	60da      	str	r2, [r3, #12]

  __HAL_LPTIM_ENABLE(hlptim);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	691a      	ldr	r2, [r3, #16]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f042 0201 	orr.w	r2, r2, #1
 800dd96:	611a      	str	r2, [r3, #16]

	__HAL_LPTIM_AUTORELOAD_SET(hlptim, 65535);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dda0:	619a      	str	r2, [r3, #24]

  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	691a      	ldr	r2, [r3, #16]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f042 0204 	orr.w	r2, r2, #4
 800ddb0:	611a      	str	r2, [r3, #16]

  hlptim->State= HAL_LPTIM_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800ddba:	bf00      	nop
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800ddcc:	4b15      	ldr	r3, [pc, #84]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800ddce:	4a16      	ldr	r2, [pc, #88]	; (800de28 <MX_USART2_UART_Init+0x60>)
 800ddd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ddd2:	4b14      	ldr	r3, [pc, #80]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800ddd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ddd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ddda:	4b12      	ldr	r3, [pc, #72]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dde0:	4b10      	ldr	r3, [pc, #64]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dde6:	4b0f      	ldr	r3, [pc, #60]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ddec:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800ddee:	220c      	movs	r2, #12
 800ddf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ddf2:	4b0c      	ldr	r3, [pc, #48]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ddfe:	4b09      	ldr	r3, [pc, #36]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800de00:	2200      	movs	r2, #0
 800de02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de04:	4b07      	ldr	r3, [pc, #28]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800de06:	2200      	movs	r2, #0
 800de08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800de0a:	4806      	ldr	r0, [pc, #24]	; (800de24 <MX_USART2_UART_Init+0x5c>)
 800de0c:	f7fa fce8 	bl	80087e0 <HAL_UART_Init>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d004      	beq.n	800de20 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800de16:	f240 113b 	movw	r1, #315	; 0x13b
 800de1a:	4804      	ldr	r0, [pc, #16]	; (800de2c <MX_USART2_UART_Init+0x64>)
 800de1c:	f7f3 fa5c 	bl	80012d8 <_Error_Handler>
  }
}
 800de20:	bf00      	nop
 800de22:	bd80      	pop	{r7, pc}
 800de24:	2000134c 	.word	0x2000134c
 800de28:	40004400 	.word	0x40004400
 800de2c:	08026fd8 	.word	0x08026fd8

0800de30 <_read>:

int _read (int fd, char *pBuffer, int size)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
 800de40:	e011      	b.n	800de66 <_read+0x36>
    {
      while((USART2->ISR&0X40)==0);
 800de42:	bf00      	nop
 800de44:	4b0d      	ldr	r3, [pc, #52]	; (800de7c <_read+0x4c>)
 800de46:	69db      	ldr	r3, [r3, #28]
 800de48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0f9      	beq.n	800de44 <_read+0x14>
      pBuffer[i] = USART2->RDR;
 800de50:	4b0a      	ldr	r3, [pc, #40]	; (800de7c <_read+0x4c>)
 800de52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de54:	b299      	uxth	r1, r3
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	4413      	add	r3, r2
 800de5c:	b2ca      	uxtb	r2, r1
 800de5e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	3301      	adds	r3, #1
 800de64:	617b      	str	r3, [r7, #20]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	dbe9      	blt.n	800de42 <_read+0x12>
    }
    return size;
 800de6e:	687b      	ldr	r3, [r7, #4]
}
 800de70:	4618      	mov	r0, r3
 800de72:	371c      	adds	r7, #28
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	40004400 	.word	0x40004400

0800de80 <_write>:

int _write (int fd, char *pBuffer, int size)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800de8c:	2300      	movs	r3, #0
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e010      	b.n	800deb4 <_write+0x34>
    {
      while((USART2->ISR&0X40)==0);
 800de92:	bf00      	nop
 800de94:	4b0d      	ldr	r3, [pc, #52]	; (800decc <_write+0x4c>)
 800de96:	69db      	ldr	r3, [r3, #28]
 800de98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d0f9      	beq.n	800de94 <_write+0x14>
      USART2->TDR = (uint8_t) pBuffer[i];
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	4413      	add	r3, r2
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	4b08      	ldr	r3, [pc, #32]	; (800decc <_write+0x4c>)
 800deaa:	b292      	uxth	r2, r2
 800deac:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < size; i++)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	3301      	adds	r3, #1
 800deb2:	617b      	str	r3, [r7, #20]
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	429a      	cmp	r2, r3
 800deba:	dbea      	blt.n	800de92 <_write+0x12>
    }
    return size;
 800debc:	687b      	ldr	r3, [r7, #4]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	371c      	adds	r7, #28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	40004400 	.word	0x40004400

0800ded0 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ded4:	4b19      	ldr	r3, [pc, #100]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800ded6:	4a1a      	ldr	r2, [pc, #104]	; (800df40 <MX_USART3_UART_Init+0x70>)
 800ded8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800deda:	4b18      	ldr	r3, [pc, #96]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800dedc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dee2:	4b16      	ldr	r3, [pc, #88]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dee8:	4b14      	ldr	r3, [pc, #80]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800deea:	2200      	movs	r2, #0
 800deec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800deee:	4b13      	ldr	r3, [pc, #76]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800def0:	2200      	movs	r2, #0
 800def2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800def4:	4b11      	ldr	r3, [pc, #68]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800def6:	220c      	movs	r2, #12
 800def8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800defa:	4b10      	ldr	r3, [pc, #64]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800defc:	2200      	movs	r2, #0
 800defe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800df00:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800df02:	2200      	movs	r2, #0
 800df04:	61da      	str	r2, [r3, #28]
  // huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800df08:	2200      	movs	r2, #0
 800df0a:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_DeInit(&huart3) != HAL_OK)
 800df0c:	480b      	ldr	r0, [pc, #44]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800df0e:	f7fa fcb8 	bl	8008882 <HAL_UART_DeInit>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800df18:	f240 1163 	movw	r1, #355	; 0x163
 800df1c:	4809      	ldr	r0, [pc, #36]	; (800df44 <MX_USART3_UART_Init+0x74>)
 800df1e:	f7f3 f9db 	bl	80012d8 <_Error_Handler>
  }
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800df22:	4806      	ldr	r0, [pc, #24]	; (800df3c <MX_USART3_UART_Init+0x6c>)
 800df24:	f7fa fc5c 	bl	80087e0 <HAL_UART_Init>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800df2e:	f240 1167 	movw	r1, #359	; 0x167
 800df32:	4804      	ldr	r0, [pc, #16]	; (800df44 <MX_USART3_UART_Init+0x74>)
 800df34:	f7f3 f9d0 	bl	80012d8 <_Error_Handler>
  }
}
 800df38:	bf00      	nop
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20001058 	.word	0x20001058
 800df40:	40004800 	.word	0x40004800
 800df44:	08026fd8 	.word	0x08026fd8

0800df48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  if (huart == &huart2)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4a09      	ldr	r2, [pc, #36]	; (800df78 <HAL_UART_RxCpltCallback+0x30>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d104      	bne.n	800df62 <HAL_UART_RxCpltCallback+0x1a>
    uart_read_data(1, 0);
 800df58:	2100      	movs	r1, #0
 800df5a:	2001      	movs	r0, #1
 800df5c:	f004 fda2 	bl	8012aa4 <uart_read_data>
  #if GPS_DATA
  else if (huart == &huart3)
    GPS_Uart_Irq();
  #endif
}
 800df60:	e005      	b.n	800df6e <HAL_UART_RxCpltCallback+0x26>
  else if (huart == &huart3)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4a05      	ldr	r2, [pc, #20]	; (800df7c <HAL_UART_RxCpltCallback+0x34>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d101      	bne.n	800df6e <HAL_UART_RxCpltCallback+0x26>
    GPS_Uart_Irq();
 800df6a:	f7fc f84d 	bl	800a008 <GPS_Uart_Irq>
}
 800df6e:	bf00      	nop
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	2000134c 	.word	0x2000134c
 800df7c:	20001058 	.word	0x20001058

0800df80 <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 800df84:	4b1a      	ldr	r3, [pc, #104]	; (800dff0 <MX_RTC_Init+0x70>)
 800df86:	4a1b      	ldr	r2, [pc, #108]	; (800dff4 <MX_RTC_Init+0x74>)
 800df88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800df8a:	4b19      	ldr	r3, [pc, #100]	; (800dff0 <MX_RTC_Init+0x70>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800df90:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <MX_RTC_Init+0x70>)
 800df92:	227f      	movs	r2, #127	; 0x7f
 800df94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800df96:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <MX_RTC_Init+0x70>)
 800df98:	22ff      	movs	r2, #255	; 0xff
 800df9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800df9c:	4b14      	ldr	r3, [pc, #80]	; (800dff0 <MX_RTC_Init+0x70>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800dfa2:	4b13      	ldr	r3, [pc, #76]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dfa8:	4b11      	ldr	r3, [pc, #68]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dfae:	4b10      	ldr	r3, [pc, #64]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dfb4:	480e      	ldr	r0, [pc, #56]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfb6:	f7f8 fd5f 	bl	8006a78 <HAL_RTC_Init>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <MX_RTC_Init+0x4a>
  {
    Error_Handler();
 800dfc0:	f240 1181 	movw	r1, #385	; 0x181
 800dfc4:	480c      	ldr	r0, [pc, #48]	; (800dff8 <MX_RTC_Init+0x78>)
 800dfc6:	f7f3 f987 	bl	80012d8 <_Error_Handler>
  }
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800dfca:	4b09      	ldr	r3, [pc, #36]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	22ca      	movs	r2, #202	; 0xca
 800dfd0:	625a      	str	r2, [r3, #36]	; 0x24
 800dfd2:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2253      	movs	r2, #83	; 0x53
 800dfd8:	625a      	str	r2, [r3, #36]	; 0x24
  // disable RTC wakeup
  CLEAR_BIT(hrtc.Instance->CR, RTC_CR_WUTE);
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	689a      	ldr	r2, [r3, #8]
 800dfe0:	4b03      	ldr	r3, [pc, #12]	; (800dff0 <MX_RTC_Init+0x70>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfe8:	609a      	str	r2, [r3, #8]
}
 800dfea:	bf00      	nop
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20001240 	.word	0x20001240
 800dff4:	40002800 	.word	0x40002800
 800dff8:	08026fd8 	.word	0x08026fd8

0800dffc <MX_CRC_Init>:

#if MX_FLASH_FILE

static void MX_CRC_Init(void)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
  /* CRC configured */
  CrcHandle.Instance = CRC;
 800e000:	4b14      	ldr	r3, [pc, #80]	; (800e054 <MX_CRC_Init+0x58>)
 800e002:	4a15      	ldr	r2, [pc, #84]	; (800e058 <MX_CRC_Init+0x5c>)
 800e004:	601a      	str	r2, [r3, #0]

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 800e006:	4b13      	ldr	r3, [pc, #76]	; (800e054 <MX_CRC_Init+0x58>)
 800e008:	2201      	movs	r2, #1
 800e00a:	711a      	strb	r2, [r3, #4]
  CrcHandle.Init.GeneratingPolynomial    = 0x1021;
 800e00c:	4b11      	ldr	r3, [pc, #68]	; (800e054 <MX_CRC_Init+0x58>)
 800e00e:	f241 0221 	movw	r2, #4129	; 0x1021
 800e012:	609a      	str	r2, [r3, #8]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 800e014:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <MX_CRC_Init+0x58>)
 800e016:	2208      	movs	r2, #8
 800e018:	60da      	str	r2, [r3, #12]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
 800e01a:	4b0e      	ldr	r3, [pc, #56]	; (800e054 <MX_CRC_Init+0x58>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	715a      	strb	r2, [r3, #5]
  CrcHandle.Init.InitValue               = 0;
 800e020:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <MX_CRC_Init+0x58>)
 800e022:	2200      	movs	r2, #0
 800e024:	611a      	str	r2, [r3, #16]

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 800e026:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <MX_CRC_Init+0x58>)
 800e028:	2200      	movs	r2, #0
 800e02a:	615a      	str	r2, [r3, #20]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800e02c:	4b09      	ldr	r3, [pc, #36]	; (800e054 <MX_CRC_Init+0x58>)
 800e02e:	2200      	movs	r2, #0
 800e030:	619a      	str	r2, [r3, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 800e032:	4b08      	ldr	r3, [pc, #32]	; (800e054 <MX_CRC_Init+0x58>)
 800e034:	2201      	movs	r2, #1
 800e036:	621a      	str	r2, [r3, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 800e038:	4806      	ldr	r0, [pc, #24]	; (800e054 <MX_CRC_Init+0x58>)
 800e03a:	f7f3 fe91 	bl	8001d60 <HAL_CRC_Init>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d004      	beq.n	800e04e <MX_CRC_Init+0x52>
  {
    /* Initialization Error */
    _Error_Handler(__FILE__, __LINE__);
 800e044:	f240 11a5 	movw	r1, #421	; 0x1a5
 800e048:	4804      	ldr	r0, [pc, #16]	; (800e05c <MX_CRC_Init+0x60>)
 800e04a:	f7f3 f945 	bl	80012d8 <_Error_Handler>
  }
}
 800e04e:	bf00      	nop
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	2000121c 	.word	0x2000121c
 800e058:	40023000 	.word	0x40023000
 800e05c:	08026fd8 	.word	0x08026fd8

0800e060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800e064:	4b19      	ldr	r3, [pc, #100]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e066:	4a1a      	ldr	r2, [pc, #104]	; (800e0d0 <MX_I2C2_Init+0x70>)
 800e068:	601a      	str	r2, [r3, #0]
  // I2C speed frequency 100 KHz; Rise time 100 ns; Fall time 100 ns; Coefficient of digital filter 0;
  hi2c2.Init.Timing = 0x10D19CE4;
 800e06a:	4b18      	ldr	r3, [pc, #96]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e06c:	4a19      	ldr	r2, [pc, #100]	; (800e0d4 <MX_I2C2_Init+0x74>)
 800e06e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800e070:	4b16      	ldr	r3, [pc, #88]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e072:	2200      	movs	r2, #0
 800e074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e078:	2201      	movs	r2, #1
 800e07a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e07c:	4b13      	ldr	r3, [pc, #76]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e07e:	2200      	movs	r2, #0
 800e080:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800e082:	4b12      	ldr	r3, [pc, #72]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e084:	2200      	movs	r2, #0
 800e086:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e088:	4b10      	ldr	r3, [pc, #64]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e08e:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e090:	2200      	movs	r2, #0
 800e092:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e094:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e096:	2200      	movs	r2, #0
 800e098:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800e09a:	480c      	ldr	r0, [pc, #48]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e09c:	f7f5 fa4c 	bl	8003538 <HAL_I2C_Init>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d000      	beq.n	800e0a8 <MX_I2C2_Init+0x48>
  {
    while(1);
 800e0a6:	e7fe      	b.n	800e0a6 <MX_I2C2_Init+0x46>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	4808      	ldr	r0, [pc, #32]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e0ac:	f7f7 f895 	bl	80051da <HAL_I2CEx_ConfigAnalogFilter>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d000      	beq.n	800e0b8 <MX_I2C2_Init+0x58>
  {
    while(1);
 800e0b6:	e7fe      	b.n	800e0b6 <MX_I2C2_Init+0x56>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	4804      	ldr	r0, [pc, #16]	; (800e0cc <MX_I2C2_Init+0x6c>)
 800e0bc:	f7f7 f8d8 	bl	8005270 <HAL_I2CEx_ConfigDigitalFilter>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d000      	beq.n	800e0c8 <MX_I2C2_Init+0x68>
  {
    while(1);
 800e0c6:	e7fe      	b.n	800e0c6 <MX_I2C2_Init+0x66>
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	200010e0 	.word	0x200010e0
 800e0d0:	40005800 	.word	0x40005800
 800e0d4:	10d19ce4 	.word	0x10d19ce4

0800e0d8 <MX_IWDG_Init>:

/* IWDG init function */
static void MX_IWDG_Init(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	af00      	add	r7, sp, #0
  hiwdg.Instance = IWDG;
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <MX_IWDG_Init+0x3c>)
 800e0de:	4a0e      	ldr	r2, [pc, #56]	; (800e118 <MX_IWDG_Init+0x40>)
 800e0e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800e0e2:	4b0c      	ldr	r3, [pc, #48]	; (800e114 <MX_IWDG_Init+0x3c>)
 800e0e4:	2206      	movs	r2, #6
 800e0e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800e0e8:	4b0a      	ldr	r3, [pc, #40]	; (800e114 <MX_IWDG_Init+0x3c>)
 800e0ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e0ee:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800e0f0:	4b08      	ldr	r3, [pc, #32]	; (800e114 <MX_IWDG_Init+0x3c>)
 800e0f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e0f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e0f8:	4806      	ldr	r0, [pc, #24]	; (800e114 <MX_IWDG_Init+0x3c>)
 800e0fa:	f7f7 f905 	bl	8005308 <HAL_IWDG_Init>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d004      	beq.n	800e10e <MX_IWDG_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e104:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e108:	4804      	ldr	r0, [pc, #16]	; (800e11c <MX_IWDG_Init+0x44>)
 800e10a:	f7f3 f8e5 	bl	80012d8 <_Error_Handler>
  }

}
 800e10e:	bf00      	nop
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	200010d0 	.word	0x200010d0
 800e118:	40003000 	.word	0x40003000
 800e11c:	08026fd8 	.word	0x08026fd8

0800e120 <gpi_platform_init>:
  /* USER CODE END ADC1_Init 2 */

}

void gpi_platform_init(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
    ASSERT_CT(GPI_ARCH_IS_OS(NONE));
    SystemClock_Config();
 800e124:	f7ff fc8a 	bl	800da3c <SystemClock_Config>
    MX_GPIO_Init();
 800e128:	f7ff fa02 	bl	800d530 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800e12c:	f7ff fe4c 	bl	800ddc8 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 800e130:	f7ff fece 	bl	800ded0 <MX_USART3_UART_Init>
    #if MX_FLASH_FILE
      MX_CRC_Init();
 800e134:	f7ff ff62 	bl	800dffc <MX_CRC_Init>
    #endif
    MX_RTC_Init();
 800e138:	f7ff ff22 	bl	800df80 <MX_RTC_Init>
    MX_I2C2_Init();
 800e13c:	f7ff ff90 	bl	800e060 <MX_I2C2_Init>

    MX_TIM2_Init();
 800e140:	f7ff fd1e 	bl	800db80 <MX_TIM2_Init>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800e144:	2100      	movs	r1, #0
 800e146:	4810      	ldr	r0, [pc, #64]	; (800e188 <gpi_platform_init+0x68>)
 800e148:	f7f9 fcd4 	bl	8007af4 <HAL_TIM_OC_Start_IT>
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800e14c:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <gpi_platform_init+0x68>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	4b0d      	ldr	r3, [pc, #52]	; (800e188 <gpi_platform_init+0x68>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f022 0202 	bic.w	r2, r2, #2
 800e15a:	60da      	str	r2, [r3, #12]

    MX_TIM5_Init();
 800e15c:	f7ff fd7a 	bl	800dc54 <MX_TIM5_Init>
    // HAL_TIM_Base_Start(&htim5);
    HAL_TIM_Base_Start(&htim5);
 800e160:	480a      	ldr	r0, [pc, #40]	; (800e18c <gpi_platform_init+0x6c>)
 800e162:	f7f9 fc65 	bl	8007a30 <HAL_TIM_Base_Start>
    __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <gpi_platform_init+0x6c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68da      	ldr	r2, [r3, #12]
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <gpi_platform_init+0x6c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f022 0201 	bic.w	r2, r2, #1
 800e174:	60da      	str	r2, [r3, #12]

		MX_LPTIM1_Init();
 800e176:	f7ff fdc5 	bl	800dd04 <MX_LPTIM1_Init>
		HAL_LPTIM_Start(&hlptim1);
 800e17a:	4805      	ldr	r0, [pc, #20]	; (800e190 <gpi_platform_init+0x70>)
 800e17c:	f7ff fdf4 	bl	800dd68 <HAL_LPTIM_Start>
    MX_IWDG_Init();
 800e180:	f7ff ffaa 	bl	800e0d8 <MX_IWDG_Init>
}
 800e184:	bf00      	nop
 800e186:	bd80      	pop	{r7, pc}
 800e188:	200012c8 	.word	0x200012c8
 800e18c:	20001140 	.word	0x20001140
 800e190:	200011e4 	.word	0x200011e4

0800e194 <gpi_sleep>:

void gpi_sleep()
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e19a:	b672      	cpsid	i
	  gpi_int_disable();

    // mark that CPU comes from power-down
    // this flag can be evaluated by the application
    // NOTE: to be meaningful, the first ISR taken after power-up should clear it
    gpi_wakeup_event = 1;
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <gpi_sleep+0x34>)
 800e19e:	2201      	movs	r2, #1
 800e1a0:	601a      	str	r2, [r3, #0]

    /* Clear SLEEPDEEP bit of Cortex System Control Register */
		CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e1a2:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <gpi_sleep+0x38>)
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <gpi_sleep+0x38>)
 800e1a8:	f023 0304 	bic.w	r3, r3, #4
 800e1ac:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800e1ae:	bf30      	wfi
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f383 8810 	msr	PRIMASK, r3
  	// sleep...

    // restore standard behavior
    // NOTE: PRIMASK = 0 reenables interrupts. In consequence, pending IRQ(s) will be taken.
    __set_PRIMASK(0);
}
 800e1ba:	bf00      	nop
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	200003b4 	.word	0x200003b4
 800e1cc:	e000ed00 	.word	0xe000ed00

0800e1d0 <gpi_watchdog_periodic>:

void gpi_watchdog_periodic()
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  /* This function is called periodically to restart the watchdog
     timer. */
	HAL_IWDG_Refresh(&hiwdg);
 800e1d4:	4802      	ldr	r0, [pc, #8]	; (800e1e0 <gpi_watchdog_periodic+0x10>)
 800e1d6:	f7f7 f8dd 	bl	8005394 <HAL_IWDG_Refresh>
}
 800e1da:	bf00      	nop
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	200010d0 	.word	0x200010d0

0800e1e4 <energest_init>:
unsigned char energest_current_mode[ENERGEST_TYPE_MAX];

/*---------------------------------------------------------------------------*/
void
energest_init(void)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
    int i;
    for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	607b      	str	r3, [r7, #4]
 800e1ee:	e014      	b.n	800e21a <energest_init+0x36>
    energest_total_time[i].current = energest_current_time[i] = 0;
 800e1f0:	4a0e      	ldr	r2, [pc, #56]	; (800e22c <energest_init+0x48>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e1fa:	4a0c      	ldr	r2, [pc, #48]	; (800e22c <energest_init+0x48>)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e202:	490b      	ldr	r1, [pc, #44]	; (800e230 <energest_init+0x4c>)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    energest_current_mode[i] = 0;
 800e20a:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <energest_init+0x50>)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4413      	add	r3, r2
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < ENERGEST_TYPE_MAX; ++i) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3301      	adds	r3, #1
 800e218:	607b      	str	r3, [r7, #4]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b10      	cmp	r3, #16
 800e21e:	dde7      	ble.n	800e1f0 <energest_init+0xc>
    #ifdef ENERGEST_CONF_LEVELDEVICE_LEVELS
    for(i = 0; i < ENERGEST_CONF_LEVELDEVICE_LEVELS; ++i) {
    energest_leveldevice_current_leveltime[i].current = 0;
    }
    #endif
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	20001308 	.word	0x20001308
 800e230:	20000f10 	.word	0x20000f10
 800e234:	2000112c 	.word	0x2000112c

0800e238 <energest_type_time>:
/*---------------------------------------------------------------------------*/
unsigned long
energest_type_time(int type)
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
    /* Note: does not support ENERGEST_CONF_LEVELDEVICE_LEVELS! */
    #ifndef ENERGEST_CONF_LEVELDEVICE_LEVELS
    if(energest_current_mode[type]) {
 800e240:	4a13      	ldr	r2, [pc, #76]	; (800e290 <energest_type_time+0x58>)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4413      	add	r3, r2
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d017      	beq.n	800e27c <energest_type_time+0x44>
 800e24c:	4b11      	ldr	r3, [pc, #68]	; (800e294 <energest_type_time+0x5c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    Gpi_Fast_Tick_Native now = gpi_tick_fast_native();
 800e252:	60fb      	str	r3, [r7, #12]
    energest_total_time[type].current += (Gpi_Fast_Tick_Native)
 800e254:	4a10      	ldr	r2, [pc, #64]	; (800e298 <energest_type_time+0x60>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        (now - energest_current_time[type]);
 800e25c:	490f      	ldr	r1, [pc, #60]	; (800e29c <energest_type_time+0x64>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e264:	68f9      	ldr	r1, [r7, #12]
 800e266:	1acb      	subs	r3, r1, r3
    energest_total_time[type].current += (Gpi_Fast_Tick_Native)
 800e268:	441a      	add	r2, r3
 800e26a:	490b      	ldr	r1, [pc, #44]	; (800e298 <energest_type_time+0x60>)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    energest_current_time[type] = now;
 800e272:	490a      	ldr	r1, [pc, #40]	; (800e29c <energest_type_time+0x64>)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    #endif /* ENERGEST_CONF_LEVELDEVICE_LEVELS */
    return energest_total_time[type].current;
 800e27c:	4a06      	ldr	r2, [pc, #24]	; (800e298 <energest_type_time+0x60>)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3714      	adds	r7, #20
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	2000112c 	.word	0x2000112c
 800e294:	200012c8 	.word	0x200012c8
 800e298:	20000f10 	.word	0x20000f10
 800e29c:	20001308 	.word	0x20001308

0800e2a0 <energest_type_set>:
    #endif
}
/*---------------------------------------------------------------------------*/
void
energest_type_set(int type, unsigned long val)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
    energest_total_time[type].current = val;
 800e2aa:	4905      	ldr	r1, [pc, #20]	; (800e2c0 <energest_type_set+0x20>)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	20000f10 	.word	0x20000f10

0800e2c4 <memxor_block_straight>:

//**************************************************************************************************

// straight version for cases where size is small
void memxor_block_straight(void *dest, /*const*/ void *src[], unsigned int size, int num_src)
{
 800e2c4:	b4f0      	push	{r4, r5, r6, r7}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
 800e2d0:	603b      	str	r3, [r7, #0]
		""
		"str		%0, [%[d], %[i]]	\n"
		"subs		%[i], #4			\n"
		"bge		1b					\n"
		: "=&r"(tmp1), "=&r"(tmp2), "=&r"(tmp3), [d] "+&r"(dest)
		: [i] "r"((size - 1) & ~3u), [s] "r"(src), [n] "r"(96 - 12 * num_src)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	f023 0203 	bic.w	r2, r3, #3
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	0089      	lsls	r1, r1, #2
 800e2e0:	1a5b      	subs	r3, r3, r1
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	f103 0060 	add.w	r0, r3, #96	; 0x60
	__asm__ volatile
 800e2e8:	68b9      	ldr	r1, [r7, #8]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	589c      	ldr	r4, [r3, r2]
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	4487      	add	pc, r0
 800e2f2:	bf00      	nop
 800e2f4:	f855 6b04 	ldr.w	r6, [r5], #4
 800e2f8:	f856 6002 	ldr.w	r6, [r6, r2]
 800e2fc:	ea84 0406 	eor.w	r4, r4, r6
 800e300:	f855 6b04 	ldr.w	r6, [r5], #4
 800e304:	f856 6002 	ldr.w	r6, [r6, r2]
 800e308:	ea84 0406 	eor.w	r4, r4, r6
 800e30c:	f855 6b04 	ldr.w	r6, [r5], #4
 800e310:	f856 6002 	ldr.w	r6, [r6, r2]
 800e314:	ea84 0406 	eor.w	r4, r4, r6
 800e318:	f855 6b04 	ldr.w	r6, [r5], #4
 800e31c:	f856 6002 	ldr.w	r6, [r6, r2]
 800e320:	ea84 0406 	eor.w	r4, r4, r6
 800e324:	f855 6b04 	ldr.w	r6, [r5], #4
 800e328:	f856 6002 	ldr.w	r6, [r6, r2]
 800e32c:	ea84 0406 	eor.w	r4, r4, r6
 800e330:	f855 6b04 	ldr.w	r6, [r5], #4
 800e334:	f856 6002 	ldr.w	r6, [r6, r2]
 800e338:	ea84 0406 	eor.w	r4, r4, r6
 800e33c:	f855 6b04 	ldr.w	r6, [r5], #4
 800e340:	f856 6002 	ldr.w	r6, [r6, r2]
 800e344:	ea84 0406 	eor.w	r4, r4, r6
 800e348:	f855 6b04 	ldr.w	r6, [r5], #4
 800e34c:	f856 6002 	ldr.w	r6, [r6, r2]
 800e350:	ea84 0406 	eor.w	r4, r4, r6
 800e354:	509c      	str	r4, [r3, r2]
 800e356:	3a04      	subs	r2, #4
 800e358:	dac8      	bge.n	800e2ec <memxor_block_straight+0x28>
 800e35a:	60fb      	str	r3, [r7, #12]
		: "cc", "memory"
	);

	ASSERT_CT(MEMXOR_BLOCKSIZE == 8, inconsistent_code);
}
 800e35c:	bf00      	nop
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bcf0      	pop	{r4, r5, r6, r7}
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop

0800e368 <NVIC_SystemReset>:
{
 800e368:	b480      	push	{r7}
 800e36a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e36c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e370:	4b05      	ldr	r3, [pc, #20]	; (800e388 <NVIC_SystemReset+0x20>)
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e378:	4903      	ldr	r1, [pc, #12]	; (800e388 <NVIC_SystemReset+0x20>)
 800e37a:	4b04      	ldr	r3, [pc, #16]	; (800e38c <NVIC_SystemReset+0x24>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60cb      	str	r3, [r1, #12]
 800e380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800e384:	bf00      	nop
    __NOP();
 800e386:	e7fd      	b.n	800e384 <NVIC_SystemReset+0x1c>
 800e388:	e000ed00 	.word	0xe000ed00
 800e38c:	05fa0004 	.word	0x05fa0004

0800e390 <mx_get_leading_index>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

int_fast16_t mx_get_leading_index(const uint8_t *pcv)
{
 800e390:	b490      	push	{r4, r7}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	const uint32_t	*p = (const uint32_t*)pcv;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	617b      	str	r3, [r7, #20]
	int_fast16_t	i;

	for (i = 0; i < chirp_config.coding_vector.len * 32; i += 32, p++)
 800e39c:	2300      	movs	r3, #0
 800e39e:	613b      	str	r3, [r7, #16]
 800e3a0:	e027      	b.n	800e3f2 <mx_get_leading_index+0x62>
	{
		if (*p)
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d01d      	beq.n	800e3e6 <mx_get_leading_index+0x56>
		{
			i += gpi_get_lsb(*p);
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	60bb      	str	r3, [r7, #8]
		asm
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	bf0e      	itee	eq
 800e3ba:	3b01      	subeq	r3, #1
 800e3bc:	fa93 f3a3 	rbitne	r3, r3
 800e3c0:	fab3 f383 	clzne	r3, r3
 800e3c4:	461c      	mov	r4, r3
	return y;
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	613b      	str	r3, [r7, #16]

			// ATTENTION: unused coding vector bits may be non-zero
			return (i < chirp_config.mx_generation_size) ? i : -1;
 800e3ce:	4b0f      	ldr	r3, [pc, #60]	; (800e40c <mx_get_leading_index+0x7c>)
 800e3d0:	885b      	ldrh	r3, [r3, #2]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	da01      	bge.n	800e3e0 <mx_get_leading_index+0x50>
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	e010      	b.n	800e402 <mx_get_leading_index+0x72>
 800e3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e4:	e00d      	b.n	800e402 <mx_get_leading_index+0x72>
	for (i = 0; i < chirp_config.coding_vector.len * 32; i += 32, p++)
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	3320      	adds	r3, #32
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	4b06      	ldr	r3, [pc, #24]	; (800e40c <mx_get_leading_index+0x7c>)
 800e3f4:	79db      	ldrb	r3, [r3, #7]
 800e3f6:	015b      	lsls	r3, r3, #5
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	dbd1      	blt.n	800e3a2 <mx_get_leading_index+0x12>
        }
	}

	return -1;
 800e3fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e402:	4618      	mov	r0, r3
 800e404:	3718      	adds	r7, #24
 800e406:	46bd      	mov	sp, r7
 800e408:	bc90      	pop	{r4, r7}
 800e40a:	4770      	bx	lr
 800e40c:	20001430 	.word	0x20001430

0800e410 <unwrap_chunk>:

void unwrap_chunk(uint8_t *p)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
// 	ASSERT_CT(
// 		offsetof(Packet, payload) ==
// 			offsetof(Packet, coding_vector) +
// 			sizeof_member(Packet, coding_vector),
// 		inconsistent_alignment);
	assert_reset(
 800e418:	4b41      	ldr	r3, [pc, #260]	; (800e520 <unwrap_chunk+0x110>)
 800e41a:	7a1b      	ldrb	r3, [r3, #8]
 800e41c:	461a      	mov	r2, r3
 800e41e:	4b40      	ldr	r3, [pc, #256]	; (800e520 <unwrap_chunk+0x110>)
 800e420:	799b      	ldrb	r3, [r3, #6]
 800e422:	4619      	mov	r1, r3
 800e424:	4b3e      	ldr	r3, [pc, #248]	; (800e520 <unwrap_chunk+0x110>)
 800e426:	79db      	ldrb	r3, [r3, #7]
 800e428:	440b      	add	r3, r1
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d01e      	beq.n	800e46c <unwrap_chunk+0x5c>
 800e42e:	4b3c      	ldr	r3, [pc, #240]	; (800e520 <unwrap_chunk+0x110>)
 800e430:	7a1b      	ldrb	r3, [r3, #8]
 800e432:	461a      	mov	r2, r3
 800e434:	4b3a      	ldr	r3, [pc, #232]	; (800e520 <unwrap_chunk+0x110>)
 800e436:	799b      	ldrb	r3, [r3, #6]
 800e438:	4619      	mov	r1, r3
 800e43a:	4b39      	ldr	r3, [pc, #228]	; (800e520 <unwrap_chunk+0x110>)
 800e43c:	79db      	ldrb	r3, [r3, #7]
 800e43e:	440b      	add	r3, r1
 800e440:	429a      	cmp	r2, r3
 800e442:	d101      	bne.n	800e448 <unwrap_chunk+0x38>
 800e444:	2301      	movs	r3, #1
 800e446:	e000      	b.n	800e44a <unwrap_chunk+0x3a>
 800e448:	2300      	movs	r3, #0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f014 f8f6 	bl	802263c <iprintf>
 800e450:	4b33      	ldr	r3, [pc, #204]	; (800e520 <unwrap_chunk+0x110>)
 800e452:	7a1b      	ldrb	r3, [r3, #8]
 800e454:	461a      	mov	r2, r3
 800e456:	4b32      	ldr	r3, [pc, #200]	; (800e520 <unwrap_chunk+0x110>)
 800e458:	799b      	ldrb	r3, [r3, #6]
 800e45a:	4619      	mov	r1, r3
 800e45c:	4b30      	ldr	r3, [pc, #192]	; (800e520 <unwrap_chunk+0x110>)
 800e45e:	79db      	ldrb	r3, [r3, #7]
 800e460:	440b      	add	r3, r1
 800e462:	429a      	cmp	r2, r3
 800e464:	d002      	beq.n	800e46c <unwrap_chunk+0x5c>
  __ASM volatile ("cpsid f" : : : "memory");
 800e466:	b671      	cpsid	f
 800e468:	f7ff ff7e 	bl	800e368 <NVIC_SystemReset>
		inconsistent_alignment);
	// ASSERT_CT(
	// 	offsetof(Matrix_Row, payload_8) ==
	// 		offsetof(Matrix_Row, coding_vector_8) + sizeof_member(Matrix_Row, coding_vector_8),
	// 	inconsisten_alignment);
	assert_reset(chirp_config.matrix_payload_8.pos == chirp_config.matrix_coding_vector_8.pos + chirp_config.matrix_coding_vector_8.len);
 800e46c:	4b2c      	ldr	r3, [pc, #176]	; (800e520 <unwrap_chunk+0x110>)
 800e46e:	7e9b      	ldrb	r3, [r3, #26]
 800e470:	461a      	mov	r2, r3
 800e472:	4b2b      	ldr	r3, [pc, #172]	; (800e520 <unwrap_chunk+0x110>)
 800e474:	7e1b      	ldrb	r3, [r3, #24]
 800e476:	4619      	mov	r1, r3
 800e478:	4b29      	ldr	r3, [pc, #164]	; (800e520 <unwrap_chunk+0x110>)
 800e47a:	7e5b      	ldrb	r3, [r3, #25]
 800e47c:	440b      	add	r3, r1
 800e47e:	429a      	cmp	r2, r3
 800e480:	d01e      	beq.n	800e4c0 <unwrap_chunk+0xb0>
 800e482:	4b27      	ldr	r3, [pc, #156]	; (800e520 <unwrap_chunk+0x110>)
 800e484:	7e9b      	ldrb	r3, [r3, #26]
 800e486:	461a      	mov	r2, r3
 800e488:	4b25      	ldr	r3, [pc, #148]	; (800e520 <unwrap_chunk+0x110>)
 800e48a:	7e1b      	ldrb	r3, [r3, #24]
 800e48c:	4619      	mov	r1, r3
 800e48e:	4b24      	ldr	r3, [pc, #144]	; (800e520 <unwrap_chunk+0x110>)
 800e490:	7e5b      	ldrb	r3, [r3, #25]
 800e492:	440b      	add	r3, r1
 800e494:	429a      	cmp	r2, r3
 800e496:	d101      	bne.n	800e49c <unwrap_chunk+0x8c>
 800e498:	2301      	movs	r3, #1
 800e49a:	e000      	b.n	800e49e <unwrap_chunk+0x8e>
 800e49c:	2300      	movs	r3, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f014 f8cc 	bl	802263c <iprintf>
 800e4a4:	4b1e      	ldr	r3, [pc, #120]	; (800e520 <unwrap_chunk+0x110>)
 800e4a6:	7e9b      	ldrb	r3, [r3, #26]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4b1d      	ldr	r3, [pc, #116]	; (800e520 <unwrap_chunk+0x110>)
 800e4ac:	7e1b      	ldrb	r3, [r3, #24]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4b1b      	ldr	r3, [pc, #108]	; (800e520 <unwrap_chunk+0x110>)
 800e4b2:	7e5b      	ldrb	r3, [r3, #25]
 800e4b4:	440b      	add	r3, r1
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d002      	beq.n	800e4c0 <unwrap_chunk+0xb0>
 800e4ba:	b671      	cpsid	f
 800e4bc:	f7ff ff54 	bl	800e368 <NVIC_SystemReset>

	/* NOTE: condition gets resolved at compile time */
	if (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos != offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t))
 800e4c0:	4b17      	ldr	r3, [pc, #92]	; (800e520 <unwrap_chunk+0x110>)
 800e4c2:	7e9b      	ldrb	r3, [r3, #26]
 800e4c4:	1d1a      	adds	r2, r3, #4
 800e4c6:	4b16      	ldr	r3, [pc, #88]	; (800e520 <unwrap_chunk+0x110>)
 800e4c8:	7f9b      	ldrb	r3, [r3, #30]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d022      	beq.n	800e518 <unwrap_chunk+0x108>
	{
		/* #pragma GCC diagnostic push
		#pragma GCC diagnostic ignored "-Warray-bounds" */

		uint8_t			*s = p + chirp_config.matrix_coding_vector_8.len;
 800e4d2:	4b13      	ldr	r3, [pc, #76]	; (800e520 <unwrap_chunk+0x110>)
 800e4d4:	7e5b      	ldrb	r3, [r3, #25]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4413      	add	r3, r2
 800e4dc:	617b      	str	r3, [r7, #20]
		uint8_t			*d = s + chirp_config.matrix_payload_8.len;
 800e4de:	4b10      	ldr	r3, [pc, #64]	; (800e520 <unwrap_chunk+0x110>)
 800e4e0:	7edb      	ldrb	r3, [r3, #27]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	613b      	str	r3, [r7, #16]
		unsigned int	i;

		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e4ea:	4b0d      	ldr	r3, [pc, #52]	; (800e520 <unwrap_chunk+0x110>)
 800e4ec:	7f9b      	ldrb	r3, [r3, #30]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4a0b      	ldr	r2, [pc, #44]	; (800e520 <unwrap_chunk+0x110>)
 800e4f4:	7e92      	ldrb	r2, [r2, #26]
 800e4f6:	1a9b      	subs	r3, r3, r2
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	e007      	b.n	800e50e <unwrap_chunk+0xfe>
			*d++ = *s++;
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	1c53      	adds	r3, r2, #1
 800e502:	617b      	str	r3, [r7, #20]
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	1c59      	adds	r1, r3, #1
 800e508:	6139      	str	r1, [r7, #16]
 800e50a:	7812      	ldrb	r2, [r2, #0]
 800e50c:	701a      	strb	r2, [r3, #0]
		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	1e5a      	subs	r2, r3, #1
 800e512:	60fa      	str	r2, [r7, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d1f2      	bne.n	800e4fe <unwrap_chunk+0xee>

		/* #pragma GCC diagnostic pop */
    }
}
 800e518:	bf00      	nop
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	20001430 	.word	0x20001430

0800e524 <unwrap_row>:

//**************************************************************************************************

void unwrap_row(unsigned int i)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	unwrap_chunk(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 800e52c:	4a08      	ldr	r2, [pc, #32]	; (800e550 <unwrap_row+0x2c>)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3316      	adds	r3, #22
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	4a06      	ldr	r2, [pc, #24]	; (800e554 <unwrap_row+0x30>)
 800e53a:	7e12      	ldrb	r2, [r2, #24]
 800e53c:	4413      	add	r3, r2
 800e53e:	3304      	adds	r3, #4
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff ff65 	bl	800e410 <unwrap_chunk>
}
 800e546:	bf00      	nop
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	200014f0 	.word	0x200014f0
 800e554:	20001430 	.word	0x20001430

0800e558 <wrap_chunk>:

//**************************************************************************************************

void wrap_chunk(uint8_t *p)
{
 800e558:	b480      	push	{r7}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
	// NOTE: condition gets resolved at compile time
	if (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos != offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t))
 800e560:	4b18      	ldr	r3, [pc, #96]	; (800e5c4 <wrap_chunk+0x6c>)
 800e562:	7e9b      	ldrb	r3, [r3, #26]
 800e564:	1d1a      	adds	r2, r3, #4
 800e566:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <wrap_chunk+0x6c>)
 800e568:	7f9b      	ldrb	r3, [r3, #30]
 800e56a:	3301      	adds	r3, #1
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	429a      	cmp	r2, r3
 800e570:	d022      	beq.n	800e5b8 <wrap_chunk+0x60>
	{
//		#pragma GCC diagnostic push
//		#pragma GCC diagnostic ignored "-Warray-bounds"

		uint8_t			*d = p + chirp_config.matrix_coding_vector_8.len;
 800e572:	4b14      	ldr	r3, [pc, #80]	; (800e5c4 <wrap_chunk+0x6c>)
 800e574:	7e5b      	ldrb	r3, [r3, #25]
 800e576:	461a      	mov	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	4413      	add	r3, r2
 800e57c:	617b      	str	r3, [r7, #20]
		uint8_t			*s = d + chirp_config.matrix_payload_8.len;
 800e57e:	4b11      	ldr	r3, [pc, #68]	; (800e5c4 <wrap_chunk+0x6c>)
 800e580:	7edb      	ldrb	r3, [r3, #27]
 800e582:	461a      	mov	r2, r3
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	4413      	add	r3, r2
 800e588:	613b      	str	r3, [r7, #16]
		unsigned int	i;

		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e58a:	4b0e      	ldr	r3, [pc, #56]	; (800e5c4 <wrap_chunk+0x6c>)
 800e58c:	7f9b      	ldrb	r3, [r3, #30]
 800e58e:	3301      	adds	r3, #1
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4a0c      	ldr	r2, [pc, #48]	; (800e5c4 <wrap_chunk+0x6c>)
 800e594:	7e92      	ldrb	r2, [r2, #26]
 800e596:	1a9b      	subs	r3, r3, r2
 800e598:	3b04      	subs	r3, #4
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	e007      	b.n	800e5ae <wrap_chunk+0x56>
			*d++ = *s++;
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	1c53      	adds	r3, r2, #1
 800e5a2:	613b      	str	r3, [r7, #16]
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	1c59      	adds	r1, r3, #1
 800e5a8:	6179      	str	r1, [r7, #20]
 800e5aa:	7812      	ldrb	r2, [r2, #0]
 800e5ac:	701a      	strb	r2, [r3, #0]
		for (i = (offsetof(Matrix_Row, matrix_chunk) + (chirp_config.matrix_payload.pos) * sizeof(uint_fast_t)) - (offsetof(Matrix_Row, matrix_chunk_8) + chirp_config.matrix_payload_8.pos); i-- > 0;)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	1e5a      	subs	r2, r3, #1
 800e5b2:	60fa      	str	r2, [r7, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1f2      	bne.n	800e59e <wrap_chunk+0x46>

//		#pragma GCC diagnostic pop
    }
}
 800e5b8:	bf00      	nop
 800e5ba:	371c      	adds	r7, #28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	20001430 	.word	0x20001430

0800e5c8 <NVIC_ClearPendingIRQ>:
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f003 021f 	and.w	r2, r3, #31
 800e5d8:	4907      	ldr	r1, [pc, #28]	; (800e5f8 <NVIC_ClearPendingIRQ+0x30>)
 800e5da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e5de:	095b      	lsrs	r3, r3, #5
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	fa00 f202 	lsl.w	r2, r0, r2
 800e5e6:	3360      	adds	r3, #96	; 0x60
 800e5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	e000e100 	.word	0xe000e100

0800e5fc <NVIC_SystemReset>:
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e600:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e604:	4b05      	ldr	r3, [pc, #20]	; (800e61c <NVIC_SystemReset+0x20>)
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e60c:	4903      	ldr	r1, [pc, #12]	; (800e61c <NVIC_SystemReset+0x20>)
 800e60e:	4b04      	ldr	r3, [pc, #16]	; (800e620 <NVIC_SystemReset+0x24>)
 800e610:	4313      	orrs	r3, r2
 800e612:	60cb      	str	r3, [r1, #12]
 800e614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800e618:	bf00      	nop
    __NOP();
 800e61a:	e7fd      	b.n	800e618 <NVIC_SystemReset+0x1c>
 800e61c:	e000ed00 	.word	0xe000ed00
 800e620:	05fa0004 	.word	0x05fa0004

0800e624 <mixer_transport_initiate_radio>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static void mixer_transport_initiate_radio()
{
 800e624:	b590      	push	{r4, r7, lr}
 800e626:	b097      	sub	sp, #92	; 0x5c
 800e628:	af02      	add	r7, sp, #8
	uint32_t symbol_bandwidth = ( chirp_config.lora_bw > 8) ? 500000 : ( ( chirp_config.lora_bw - 6) * 125000 );
 800e62a:	4b06      	ldr	r3, [pc, #24]	; (800e644 <mixer_transport_initiate_radio+0x20>)
 800e62c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e630:	2b08      	cmp	r3, #8
 800e632:	d80b      	bhi.n	800e64c <mixer_transport_initiate_radio+0x28>
 800e634:	4b03      	ldr	r3, [pc, #12]	; (800e644 <mixer_transport_initiate_radio+0x20>)
 800e636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e63a:	3b06      	subs	r3, #6
 800e63c:	4a02      	ldr	r2, [pc, #8]	; (800e648 <mixer_transport_initiate_radio+0x24>)
 800e63e:	fb02 f303 	mul.w	r3, r2, r3
 800e642:	e004      	b.n	800e64e <mixer_transport_initiate_radio+0x2a>
 800e644:	20001430 	.word	0x20001430
 800e648:	0001e848 	.word	0x0001e848
 800e64c:	4bb5      	ldr	r3, [pc, #724]	; (800e924 <mixer_transport_initiate_radio+0x300>)
 800e64e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t symbol_rate = ( ( symbol_bandwidth ) / ( 1 << chirp_config.lora_sf ) );
 800e650:	4bb5      	ldr	r3, [pc, #724]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e656:	461a      	mov	r2, r3
 800e658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e65a:	40d3      	lsrs	r3, r2
 800e65c:	64bb      	str	r3, [r7, #72]	; 0x48

	uint32_t symbol_time = (uint32_t)1e6 / symbol_rate;
 800e65e:	4ab3      	ldr	r2, [pc, #716]	; (800e92c <mixer_transport_initiate_radio+0x308>)
 800e660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e662:	fbb2 f3f3 	udiv	r3, r2, r3
 800e666:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t payload_air_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 0, chirp_config.lora_plen, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 800e668:	4baf      	ldr	r3, [pc, #700]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e66a:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e66e:	4bae      	ldr	r3, [pc, #696]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e670:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e674:	4bac      	ldr	r3, [pc, #688]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e676:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e67a:	4bab      	ldr	r3, [pc, #684]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e67c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e680:	4aa9      	ldr	r2, [pc, #676]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e682:	8a52      	ldrh	r2, [r2, #18]
 800e684:	b292      	uxth	r2, r2
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	3202      	adds	r2, #2
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	9201      	str	r2, [sp, #4]
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	2300      	movs	r3, #0
 800e692:	4622      	mov	r2, r4
 800e694:	f7fe fcbe 	bl	800d014 <SX1276GetPacketTime>
 800e698:	6438      	str	r0, [r7, #64]	; 0x40
	uint32_t drift_tolerance = MIN(2500, MAX((chirp_config.mx_slot_length + 999) / 1000, 1));
 800e69a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6a0:	4ba1      	ldr	r3, [pc, #644]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6a4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e6a8:	4aa1      	ldr	r2, [pc, #644]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ae:	099b      	lsrs	r3, r3, #6
 800e6b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	bf38      	it	cc
 800e6be:	4613      	movcc	r3, r2
 800e6c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	bf28      	it	cs
 800e6ca:	4613      	movcs	r3, r2
 800e6cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	radio.header_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 1, chirp_config.lora_plen, 2);
 800e6ce:	4b96      	ldr	r3, [pc, #600]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e6d0:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e6d4:	4b94      	ldr	r3, [pc, #592]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e6d6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e6da:	4b93      	ldr	r3, [pc, #588]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e6dc:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e6e0:	4b91      	ldr	r3, [pc, #580]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e6e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	9201      	str	r2, [sp, #4]
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	4622      	mov	r2, r4
 800e6f0:	f7fe fc90 	bl	800d014 <SX1276GetPacketTime>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	4b8f      	ldr	r3, [pc, #572]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e6f8:	601a      	str	r2, [r3, #0]

	radio.after_header_time = payload_air_time - radio.header_time;
 800e6fa:	4b8e      	ldr	r3, [pc, #568]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	4a8c      	ldr	r2, [pc, #560]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e704:	6053      	str	r3, [r2, #4]

	radio.max_propagation_delay = GPI_TICK_US_TO_HYBRID(2);
 800e706:	4b8b      	ldr	r3, [pc, #556]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e708:	2220      	movs	r2, #32
 800e70a:	609a      	str	r2, [r3, #8]

	radio.packet_air_time = GPI_TICK_US_TO_HYBRID2(payload_air_time);
 800e70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70e:	4a8a      	ldr	r2, [pc, #552]	; (800e938 <mixer_transport_initiate_radio+0x314>)
 800e710:	fba2 2303 	umull	r2, r3, r2, r3
 800e714:	0c9b      	lsrs	r3, r3, #18
 800e716:	4a89      	ldr	r2, [pc, #548]	; (800e93c <mixer_transport_initiate_radio+0x318>)
 800e718:	fb02 f103 	mul.w	r1, r2, r3
 800e71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71e:	4a84      	ldr	r2, [pc, #528]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e720:	fba2 2303 	umull	r2, r3, r2, r3
 800e724:	099a      	lsrs	r2, r3, #6
 800e726:	4b82      	ldr	r3, [pc, #520]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e728:	fba3 0302 	umull	r0, r3, r3, r2
 800e72c:	099b      	lsrs	r3, r3, #6
 800e72e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e732:	fb00 f303 	mul.w	r3, r0, r3
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e73c:	fb02 f303 	mul.w	r3, r2, r3
 800e740:	4419      	add	r1, r3
 800e742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e744:	4b7a      	ldr	r3, [pc, #488]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e746:	fba3 0302 	umull	r0, r3, r3, r2
 800e74a:	099b      	lsrs	r3, r3, #6
 800e74c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e750:	fb00 f303 	mul.w	r3, r0, r3
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	440b      	add	r3, r1
 800e75a:	4a76      	ldr	r2, [pc, #472]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e75c:	60d3      	str	r3, [r2, #12]
	radio.rx_to_grid_offset = (0 + GPI_TICK_US_TO_HYBRID(37));
 800e75e:	4b75      	ldr	r3, [pc, #468]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e760:	f44f 7214 	mov.w	r2, #592	; 0x250
 800e764:	611a      	str	r2, [r3, #16]
	radio.tx_to_grid_offset = (0 + GPI_TICK_US_TO_HYBRID(130));
 800e766:	4b73      	ldr	r3, [pc, #460]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e768:	f44f 6202 	mov.w	r2, #2080	; 0x820
 800e76c:	615a      	str	r2, [r3, #20]

	radio.rx_window_increment = 2 * drift_tolerance;
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	4a70      	ldr	r2, [pc, #448]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e774:	6193      	str	r3, [r2, #24]

	#if (!MX_LBT_ACCESS)
		radio.rx_window_max = MIN(0x7FFFFFFF, MIN(15 * radio.rx_window_increment, (chirp_config.mx_slot_length - radio.packet_air_time - radio.rx_to_grid_offset) / 2));
	#else
		radio.rx_window_max = MIN(0x7FFFFFFF, MIN(15 * radio.rx_window_increment, (GPI_TICK_US_TO_HYBRID(symbol_time)) / 2));
 800e776:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e77a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e77c:	4b6d      	ldr	r3, [pc, #436]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e77e:	699a      	ldr	r2, [r3, #24]
 800e780:	4613      	mov	r3, r2
 800e782:	011b      	lsls	r3, r3, #4
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	627b      	str	r3, [r7, #36]	; 0x24
 800e788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e78a:	011b      	lsls	r3, r3, #4
 800e78c:	085b      	lsrs	r3, r3, #1
 800e78e:	623b      	str	r3, [r7, #32]
 800e790:	6a3a      	ldr	r2, [r7, #32]
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	4293      	cmp	r3, r2
 800e796:	bf28      	it	cs
 800e798:	4613      	movcs	r3, r2
 800e79a:	61fb      	str	r3, [r7, #28]
 800e79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	bf28      	it	cs
 800e7a4:	4613      	movcs	r3, r2
 800e7a6:	4a63      	ldr	r2, [pc, #396]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7a8:	61d3      	str	r3, [r2, #28]
	#endif

	radio.rx_window_min = MIN(radio.rx_window_max / 2, MAX(2 * radio.rx_window_increment, GPI_TICK_US_TO_HYBRID(1)));
 800e7aa:	4b62      	ldr	r3, [pc, #392]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	085b      	lsrs	r3, r3, #1
 800e7b0:	61bb      	str	r3, [r7, #24]
 800e7b2:	4b60      	ldr	r3, [pc, #384]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7b4:	699b      	ldr	r3, [r3, #24]
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	2310      	movs	r3, #16
 800e7bc:	613b      	str	r3, [r7, #16]
 800e7be:	693a      	ldr	r2, [r7, #16]
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	bf38      	it	cc
 800e7c6:	4613      	movcc	r3, r2
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	bf28      	it	cs
 800e7d2:	4613      	movcs	r3, r2
 800e7d4:	4a57      	ldr	r2, [pc, #348]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7d6:	6213      	str	r3, [r2, #32]

	radio.grid_drift_filter_div = 4;
 800e7d8:	4b56      	ldr	r3, [pc, #344]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7da:	2204      	movs	r2, #4
 800e7dc:	625a      	str	r2, [r3, #36]	; 0x24
	radio.grid_tick_update_div = 2;
 800e7de:	4b55      	ldr	r3, [pc, #340]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	629a      	str	r2, [r3, #40]	; 0x28
	radio.grid_drift_max = MIN(3 * drift_tolerance * radio.grid_tick_update_div * radio.grid_drift_filter_div, 0x7FFFFF);
 800e7e4:	4b53      	ldr	r3, [pc, #332]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	fb03 f302 	mul.w	r3, r3, r2
 800e7f0:	4a50      	ldr	r2, [pc, #320]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e7f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e7f4:	fb02 f203 	mul.w	r2, r2, r3
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	005b      	lsls	r3, r3, #1
 800e7fc:	4413      	add	r3, r2
 800e7fe:	60bb      	str	r3, [r7, #8]
 800e800:	4b4f      	ldr	r3, [pc, #316]	; (800e940 <mixer_transport_initiate_radio+0x31c>)
 800e802:	607b      	str	r3, [r7, #4]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	4293      	cmp	r3, r2
 800e80a:	bf28      	it	cs
 800e80c:	4613      	movcs	r3, r2
 800e80e:	4a49      	ldr	r2, [pc, #292]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e810:	62d3      	str	r3, [r2, #44]	; 0x2c

	radio.tx_offset_filter_div = 2;
 800e812:	4b48      	ldr	r3, [pc, #288]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e814:	2202      	movs	r2, #2
 800e816:	631a      	str	r2, [r3, #48]	; 0x30
	radio.tx_offset_max = (2 * radio.max_propagation_delay + GPI_TICK_US_TO_HYBRID(2));
 800e818:	4b46      	ldr	r3, [pc, #280]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	3310      	adds	r3, #16
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4a44      	ldr	r2, [pc, #272]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e822:	6353      	str	r3, [r2, #52]	; 0x34

	radio.isr_latency_buffer = 122;
 800e824:	4b43      	ldr	r3, [pc, #268]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e826:	227a      	movs	r2, #122	; 0x7a
 800e828:	639a      	str	r2, [r3, #56]	; 0x38
	radio.isr_latency_slow = 4 * HYBRID_SLOW_RATIO;
 800e82a:	4b42      	ldr	r3, [pc, #264]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e82c:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 800e830:	63da      	str	r2, [r3, #60]	; 0x3c

	radio.grid_drift_offset = GPI_TICK_US_TO_HYBRID2(5 * symbol_time);
 800e832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	4a3f      	ldr	r2, [pc, #252]	; (800e938 <mixer_transport_initiate_radio+0x314>)
 800e83c:	fba2 2303 	umull	r2, r3, r2, r3
 800e840:	0c9b      	lsrs	r3, r3, #18
 800e842:	4a3e      	ldr	r2, [pc, #248]	; (800e93c <mixer_transport_initiate_radio+0x318>)
 800e844:	fb02 f103 	mul.w	r1, r2, r3
 800e848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e84a:	4613      	mov	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	4a37      	ldr	r2, [pc, #220]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e852:	fba2 2303 	umull	r2, r3, r2, r3
 800e856:	099a      	lsrs	r2, r3, #6
 800e858:	4b35      	ldr	r3, [pc, #212]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e85a:	fba3 0302 	umull	r0, r3, r3, r2
 800e85e:	099b      	lsrs	r3, r3, #6
 800e860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e864:	fb00 f303 	mul.w	r3, r0, r3
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e86e:	fb02 f303 	mul.w	r3, r2, r3
 800e872:	4419      	add	r1, r3
 800e874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	441a      	add	r2, r3
 800e87c:	4b2c      	ldr	r3, [pc, #176]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e87e:	fba3 0302 	umull	r0, r3, r3, r2
 800e882:	099b      	lsrs	r3, r3, #6
 800e884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e888:	fb00 f303 	mul.w	r3, r0, r3
 800e88c:	1ad3      	subs	r3, r2, r3
 800e88e:	011b      	lsls	r3, r3, #4
 800e890:	440b      	add	r3, r1
 800e892:	4a28      	ldr	r2, [pc, #160]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e894:	6413      	str	r3, [r2, #64]	; 0x40

	radio.max_tb_interval = GPI_TICK_US_TO_HYBRID(2000);
 800e896:	4b27      	ldr	r3, [pc, #156]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e898:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800e89c:	645a      	str	r2, [r3, #68]	; 0x44

	#if MX_HEADER_CHECK
	uint32_t after_header_us = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, chirp_config.lora_cr, 0, chirp_config.lora_plen, HASH_HEADER) - radio.header_time + 2 * symbol_time;
 800e89e:	4b22      	ldr	r3, [pc, #136]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e8a0:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 800e8a4:	4b20      	ldr	r3, [pc, #128]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e8a6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 800e8aa:	4b1f      	ldr	r3, [pc, #124]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e8ac:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
 800e8b0:	4b1d      	ldr	r3, [pc, #116]	; (800e928 <mixer_transport_initiate_radio+0x304>)
 800e8b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e8b6:	2204      	movs	r2, #4
 800e8b8:	9201      	str	r2, [sp, #4]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4622      	mov	r2, r4
 800e8c0:	f7fe fba8 	bl	800d014 <SX1276GetPacketTime>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	4b1b      	ldr	r3, [pc, #108]	; (800e934 <mixer_transport_initiate_radio+0x310>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	1ad2      	subs	r2, r2, r3
 800e8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	603b      	str	r3, [r7, #0]

	radio.after_header_hybrid = GPI_TICK_US_TO_HYBRID2(after_header_us);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	4a18      	ldr	r2, [pc, #96]	; (800e938 <mixer_transport_initiate_radio+0x314>)
 800e8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8dc:	0c9b      	lsrs	r3, r3, #18
 800e8de:	4a17      	ldr	r2, [pc, #92]	; (800e93c <mixer_transport_initiate_radio+0x318>)
 800e8e0:	fb02 f103 	mul.w	r1, r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	4a12      	ldr	r2, [pc, #72]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ec:	099a      	lsrs	r2, r3, #6
 800e8ee:	4b10      	ldr	r3, [pc, #64]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e8f0:	fba3 0302 	umull	r0, r3, r3, r2
 800e8f4:	099b      	lsrs	r3, r3, #6
 800e8f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e8fa:	fb00 f303 	mul.w	r3, r0, r3
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800e904:	fb02 f303 	mul.w	r3, r2, r3
 800e908:	4419      	add	r1, r3
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	4b08      	ldr	r3, [pc, #32]	; (800e930 <mixer_transport_initiate_radio+0x30c>)
 800e90e:	fba3 0302 	umull	r0, r3, r3, r2
 800e912:	099b      	lsrs	r3, r3, #6
 800e914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e918:	fb00 f303 	mul.w	r3, r0, r3
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	440b      	add	r3, r1
 800e922:	e00f      	b.n	800e944 <mixer_transport_initiate_radio+0x320>
 800e924:	0007a120 	.word	0x0007a120
 800e928:	20001430 	.word	0x20001430
 800e92c:	000f4240 	.word	0x000f4240
 800e930:	10624dd3 	.word	0x10624dd3
 800e934:	200003c4 	.word	0x200003c4
 800e938:	431bde83 	.word	0x431bde83
 800e93c:	00f42400 	.word	0x00f42400
 800e940:	007fffff 	.word	0x007fffff
 800e944:	4a0f      	ldr	r2, [pc, #60]	; (800e984 <mixer_transport_initiate_radio+0x360>)
 800e946:	6493      	str	r3, [r2, #72]	; 0x48
	#endif

	#if MX_LBT_ACCESS
		s.lbt_sensitivity_in_dbm = 3 * (chirp_config.lora_bw - 7) - 81;
 800e948:	4b0f      	ldr	r3, [pc, #60]	; (800e988 <mixer_transport_initiate_radio+0x364>)
 800e94a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e94e:	3b07      	subs	r3, #7
 800e950:	b29b      	uxth	r3, r3
 800e952:	461a      	mov	r2, r3
 800e954:	0052      	lsls	r2, r2, #1
 800e956:	4413      	add	r3, r2
 800e958:	b29b      	uxth	r3, r3
 800e95a:	3b51      	subs	r3, #81	; 0x51
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	b21a      	sxth	r2, r3
 800e960:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <mixer_transport_initiate_radio+0x368>)
 800e962:	875a      	strh	r2, [r3, #58]	; 0x3a
		s.lbt_rx_on = 0;
 800e964:	4b09      	ldr	r3, [pc, #36]	; (800e98c <mixer_transport_initiate_radio+0x368>)
 800e966:	2200      	movs	r2, #0
 800e968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		s.lbt_tx_on = CCA_NONE;
 800e96c:	4b07      	ldr	r3, [pc, #28]	; (800e98c <mixer_transport_initiate_radio+0x368>)
 800e96e:	2200      	movs	r2, #0
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		s.lbt_channel_seq_no = 0;
 800e974:	4b05      	ldr	r3, [pc, #20]	; (800e98c <mixer_transport_initiate_radio+0x368>)
 800e976:	2200      	movs	r2, #0
 800e978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	#endif
}
 800e97c:	bf00      	nop
 800e97e:	3754      	adds	r7, #84	; 0x54
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	200003c4 	.word	0x200003c4
 800e988:	20001430 	.word	0x20001430
 800e98c:	20000410 	.word	0x20000410

0800e990 <trigger_main_timer>:

//**************************************************************************************************

// trigger grid/timeout timer (immediately)
static inline void trigger_main_timer(int use_int_lock)
{
 800e990:	b490      	push	{r4, r7}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
	register int	ie;

	if (use_int_lock)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d007      	beq.n	800e9ae <trigger_main_timer+0x1e>
	__ASM volatile
 800e99e:	f3ef 8310 	mrs	r3, PRIMASK
 800e9a2:	b672      	cpsid	i
 800e9a4:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 800e9a6:	f3bf 8f5f 	dmb	sy
	return ie;
 800e9aa:	4623      	mov	r3, r4
		ie = gpi_int_lock();
 800e9ac:	461c      	mov	r4, r3

	MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + 10;
 800e9ae:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <trigger_main_timer+0x4c>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9b4:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <trigger_main_timer+0x4c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	320a      	adds	r2, #10
 800e9ba:	635a      	str	r2, [r3, #52]	; 0x34

	if (use_int_lock)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <trigger_main_timer+0x42>
 800e9c2:	60fc      	str	r4, [r7, #12]
 800e9c4:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	f383 8810 	msr	PRIMASK, r3
		gpi_int_unlock(ie);

}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bc90      	pop	{r4, r7}
 800e9da:	4770      	bx	lr
 800e9dc:	200012c8 	.word	0x200012c8

0800e9e0 <unmask_main_timer>:
		gpi_int_unlock(ie);
}
//**************************************************************************************************

static inline void unmask_main_timer(int clear_pending)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
	if (clear_pending)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d002      	beq.n	800e9f4 <unmask_main_timer+0x14>
	{
		NVIC_ClearPendingIRQ(MAIN_TIMER_IRQ);
 800e9ee:	201c      	movs	r0, #28
 800e9f0:	f7ff fdea 	bl	800e5c8 <NVIC_ClearPendingIRQ>
    }

    __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 800e9f4:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <unmask_main_timer+0x2c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	4b04      	ldr	r3, [pc, #16]	; (800ea0c <unmask_main_timer+0x2c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f042 0202 	orr.w	r2, r2, #2
 800ea02:	60da      	str	r2, [r3, #12]
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	200012c8 	.word	0x200012c8

0800ea10 <mask_main_timer>:

static inline void mask_main_timer()
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800ea14:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <mask_main_timer+0x20>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68da      	ldr	r2, [r3, #12]
 800ea1a:	4b05      	ldr	r3, [pc, #20]	; (800ea30 <mask_main_timer+0x20>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f022 0202 	bic.w	r2, r2, #2
 800ea22:	60da      	str	r2, [r3, #12]
}
 800ea24:	bf00      	nop
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	200012c8 	.word	0x200012c8

0800ea34 <unmask_slow_timer>:
//**************************************************************************************************

static inline void unmask_slow_timer(int clear_pending)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	if (clear_pending)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <unmask_slow_timer+0x14>
	{
		NVIC_ClearPendingIRQ(LP_TIMER_IRQ);
 800ea42:	2041      	movs	r0, #65	; 0x41
 800ea44:	f7ff fdc0 	bl	800e5c8 <NVIC_ClearPendingIRQ>
    }

    __HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 800ea48:	4b05      	ldr	r3, [pc, #20]	; (800ea60 <unmask_slow_timer+0x2c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689a      	ldr	r2, [r3, #8]
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <unmask_slow_timer+0x2c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f042 0201 	orr.w	r2, r2, #1
 800ea56:	609a      	str	r2, [r3, #8]
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	200011e4 	.word	0x200011e4

0800ea64 <mask_slow_timer>:

static inline void mask_slow_timer()
{
 800ea64:	b480      	push	{r7}
 800ea66:	af00      	add	r7, sp, #0
    __HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 800ea68:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <mask_slow_timer+0x20>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689a      	ldr	r2, [r3, #8]
 800ea6e:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <mask_slow_timer+0x20>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f022 0201 	bic.w	r2, r2, #1
 800ea76:	609a      	str	r2, [r3, #8]
}
 800ea78:	bf00      	nop
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	200011e4 	.word	0x200011e4

0800ea88 <write_tx_fifo>:
}

//**************************************************************************************************

static uint8_t write_tx_fifo(uint8_t *buffer, uint8_t *p2, uint8_t size)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	71fb      	strb	r3, [r7, #7]
    uint8_t 		i, tmp_data;
	uint8_t			or_data = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	75bb      	strb	r3, [r7, #22]

	if(p2 == NULL)
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d121      	bne.n	800eae4 <write_tx_fifo+0x5c>
	{
		or_data = 1;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	75bb      	strb	r3, [r7, #22]

		//NSS = 0;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2140      	movs	r1, #64	; 0x40
 800eaa8:	4829      	ldr	r0, [pc, #164]	; (800eb50 <write_tx_fifo+0xc8>)
 800eaaa:	f7fe feed 	bl	800d888 <HW_GPIO_Write>

		HW_SPI_InOut( REG_LR_FIFO | 0x80 );
 800eaae:	2080      	movs	r0, #128	; 0x80
 800eab0:	f7fe ff70 	bl	800d994 <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800eab4:	2300      	movs	r3, #0
 800eab6:	75fb      	strb	r3, [r7, #23]
 800eab8:	e00a      	b.n	800ead0 <write_tx_fifo+0x48>
		{
			HW_SPI_InOut( buffer[i] );
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4413      	add	r3, r2
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fe ff65 	bl	800d994 <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	3301      	adds	r3, #1
 800eace:	75fb      	strb	r3, [r7, #23]
 800ead0:	7dfa      	ldrb	r2, [r7, #23]
 800ead2:	79fb      	ldrb	r3, [r7, #7]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d3f0      	bcc.n	800eaba <write_tx_fifo+0x32>
		}

		//NSS = 1;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800ead8:	2201      	movs	r2, #1
 800eada:	2140      	movs	r1, #64	; 0x40
 800eadc:	481c      	ldr	r0, [pc, #112]	; (800eb50 <write_tx_fifo+0xc8>)
 800eade:	f7fe fed3 	bl	800d888 <HW_GPIO_Write>
 800eae2:	e02f      	b.n	800eb44 <write_tx_fifo+0xbc>
	}
	else
	{
		//NSS = 0;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800eae4:	2200      	movs	r2, #0
 800eae6:	2140      	movs	r1, #64	; 0x40
 800eae8:	4819      	ldr	r0, [pc, #100]	; (800eb50 <write_tx_fifo+0xc8>)
 800eaea:	f7fe fecd 	bl	800d888 <HW_GPIO_Write>

		HW_SPI_InOut( REG_LR_FIFO | 0x80 );
 800eaee:	2080      	movs	r0, #128	; 0x80
 800eaf0:	f7fe ff50 	bl	800d994 <HW_SPI_InOut>
		for( i = 0; i < size; i++ )
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	75fb      	strb	r3, [r7, #23]
 800eaf8:	e01b      	b.n	800eb32 <write_tx_fifo+0xaa>
		{
			tmp_data = ( buffer[i] ^ p2[i] );
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	781a      	ldrb	r2, [r3, #0]
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	68b9      	ldr	r1, [r7, #8]
 800eb06:	440b      	add	r3, r1
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	4053      	eors	r3, r2
 800eb0c:	757b      	strb	r3, [r7, #21]
			HW_SPI_InOut( tmp_data );
 800eb0e:	7d7b      	ldrb	r3, [r7, #21]
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe ff3e 	bl	800d994 <HW_SPI_InOut>
			or_data = (tmp_data)? ++or_data: or_data;
 800eb18:	7d7b      	ldrb	r3, [r7, #21]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d004      	beq.n	800eb28 <write_tx_fifo+0xa0>
 800eb1e:	7dbb      	ldrb	r3, [r7, #22]
 800eb20:	3301      	adds	r3, #1
 800eb22:	75bb      	strb	r3, [r7, #22]
 800eb24:	7dbb      	ldrb	r3, [r7, #22]
 800eb26:	e000      	b.n	800eb2a <write_tx_fifo+0xa2>
 800eb28:	7dbb      	ldrb	r3, [r7, #22]
 800eb2a:	75bb      	strb	r3, [r7, #22]
		for( i = 0; i < size; i++ )
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	75fb      	strb	r3, [r7, #23]
 800eb32:	7dfa      	ldrb	r2, [r7, #23]
 800eb34:	79fb      	ldrb	r3, [r7, #7]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d3df      	bcc.n	800eafa <write_tx_fifo+0x72>
		}

		//NSS = 1;
		HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	2140      	movs	r1, #64	; 0x40
 800eb3e:	4804      	ldr	r0, [pc, #16]	; (800eb50 <write_tx_fifo+0xc8>)
 800eb40:	f7fe fea2 	bl	800d888 <HW_GPIO_Write>
	}

	return or_data;
 800eb44:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	48000400 	.word	0x48000400

0800eb54 <start_grid_timer>:

//**************************************************************************************************

static void start_grid_timer()
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
	Gpi_Hybrid_Reference	r;
	Gpi_Hybrid_Tick			d, t;
	r = gpi_tick_hybrid_reference();
 800eb5a:	463b      	mov	r3, r7
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fd f803 	bl	800bb68 <gpi_tick_hybrid_reference>

	d = s.next_trigger_tick - r.hybrid_tick;
 800eb62:	4b47      	ldr	r3, [pc, #284]	; (800ec80 <start_grid_timer+0x12c>)
 800eb64:	689a      	ldr	r2, [r3, #8]
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	60fb      	str	r3, [r7, #12]
	s.hybrid_trigger = s.next_trigger_tick;
 800eb6c:	4b44      	ldr	r3, [pc, #272]	; (800ec80 <start_grid_timer+0x12c>)
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	4a43      	ldr	r2, [pc, #268]	; (800ec80 <start_grid_timer+0x12c>)
 800eb72:	6113      	str	r3, [r2, #16]

	t = s.next_trigger_tick - GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer);
 800eb74:	4b42      	ldr	r3, [pc, #264]	; (800ec80 <start_grid_timer+0x12c>)
 800eb76:	689a      	ldr	r2, [r3, #8]
 800eb78:	4b42      	ldr	r3, [pc, #264]	; (800ec84 <start_grid_timer+0x130>)
 800eb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	1ad3      	subs	r3, r2, r3
 800eb80:	60bb      	str	r3, [r7, #8]
	s.slow_trigger = s.next_trigger_tick;
 800eb82:	4b3f      	ldr	r3, [pc, #252]	; (800ec80 <start_grid_timer+0x12c>)
 800eb84:	689b      	ldr	r3, [r3, #8]
 800eb86:	4a3e      	ldr	r2, [pc, #248]	; (800ec80 <start_grid_timer+0x12c>)
 800eb88:	60d3      	str	r3, [r2, #12]

	mask_main_timer();
 800eb8a:	f7ff ff41 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800eb8e:	4b3e      	ldr	r3, [pc, #248]	; (800ec88 <start_grid_timer+0x134>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f06f 0202 	mvn.w	r2, #2
 800eb96:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 800eb98:	f7ff ff64 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800eb9c:	4b3b      	ldr	r3, [pc, #236]	; (800ec8c <start_grid_timer+0x138>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2201      	movs	r2, #1
 800eba2:	605a      	str	r2, [r3, #4]
	// if we are late
	s.grid_timer_flag = 0;
 800eba4:	4b36      	ldr	r3, [pc, #216]	; (800ec80 <start_grid_timer+0x12c>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	751a      	strb	r2, [r3, #20]
	// note: signed comparison is important
	if ((int32_t)(d) < (int32_t)(GPI_TICK_US_TO_HYBRID(1000000 / GPI_SLOW_CLOCK_RATE + 50) + GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer)))
 800ebaa:	4b36      	ldr	r3, [pc, #216]	; (800ec84 <start_grid_timer+0x130>)
 800ebac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebae:	3350      	adds	r3, #80	; 0x50
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	dd0e      	ble.n	800ebd8 <start_grid_timer+0x84>
	{
		// trigger grid timer immediately
		// NOTE: capture register is updated implicitly
		trigger_main_timer(0);
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f7ff fee8 	bl	800e990 <trigger_main_timer>
		unmask_main_timer(0);
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f7ff ff0d 	bl	800e9e0 <unmask_main_timer>

		#if MX_VERBOSE_STATISTICS
			mx.stat_counter.num_grid_late++;
 800ebc6:	4b32      	ldr	r3, [pc, #200]	; (800ec90 <start_grid_timer+0x13c>)
 800ebc8:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
 800ebcc:	3301      	adds	r3, #1
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	4b2f      	ldr	r3, [pc, #188]	; (800ec90 <start_grid_timer+0x13c>)
 800ebd2:	f8a3 2890 	strh.w	r2, [r3, #2192]	; 0x890
 800ebd6:	e044      	b.n	800ec62 <start_grid_timer+0x10e>
		#endif
    }
	else if (d <= radio.max_tb_interval)
 800ebd8:	4b2a      	ldr	r3, [pc, #168]	; (800ec84 <start_grid_timer+0x130>)
 800ebda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d80d      	bhi.n	800ebfe <start_grid_timer+0xaa>
	{
		MAIN_TIMER_CC_REG = r.fast_capture + d * FAST_HYBRID_RATIO - GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	18d1      	adds	r1, r2, r3
 800ebe8:	4b26      	ldr	r3, [pc, #152]	; (800ec84 <start_grid_timer+0x130>)
 800ebea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebec:	011a      	lsls	r2, r3, #4
 800ebee:	4b26      	ldr	r3, [pc, #152]	; (800ec88 <start_grid_timer+0x134>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	1a8a      	subs	r2, r1, r2
 800ebf4:	635a      	str	r2, [r3, #52]	; 0x34
		unmask_main_timer(0);
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f7ff fef2 	bl	800e9e0 <unmask_main_timer>
 800ebfc:	e031      	b.n	800ec62 <start_grid_timer+0x10e>
	}
	// else if trigger tick is in reach for fast timer
	else
	{
		ASSERT_CT(HYBRID_SLOW_RATIO <= 0x10000);
		if (d > 0xF000ul * HYBRID_SLOW_RATIO)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	4a24      	ldr	r2, [pc, #144]	; (800ec94 <start_grid_timer+0x140>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d906      	bls.n	800ec14 <start_grid_timer+0xc0>
			d = r.hybrid_tick + 0xE000ul * HYBRID_SLOW_RATIO;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	f103 73d5 	add.w	r3, r3, #27918336	; 0x1aa0000
 800ec0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e006      	b.n	800ec22 <start_grid_timer+0xce>
		else d = s.next_trigger_tick - radio.max_tb_interval / 2;
 800ec14:	4b1a      	ldr	r3, [pc, #104]	; (800ec80 <start_grid_timer+0x12c>)
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	4b1a      	ldr	r3, [pc, #104]	; (800ec84 <start_grid_timer+0x130>)
 800ec1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec1c:	085b      	lsrs	r3, r3, #1
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	60fb      	str	r3, [r7, #12]
		__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800ec22:	4b1a      	ldr	r3, [pc, #104]	; (800ec8c <start_grid_timer+0x138>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2208      	movs	r2, #8
 800ec28:	605a      	str	r2, [r3, #4]
		LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800ec2a:	4b18      	ldr	r3, [pc, #96]	; (800ec8c <start_grid_timer+0x138>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	69d9      	ldr	r1, [r3, #28]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	4a18      	ldr	r2, [pc, #96]	; (800ec98 <start_grid_timer+0x144>)
 800ec38:	fba2 2303 	umull	r2, r3, r2, r3
 800ec3c:	09da      	lsrs	r2, r3, #7
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <start_grid_timer+0x138>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	440a      	add	r2, r1
 800ec44:	615a      	str	r2, [r3, #20]
		while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800ec46:	bf00      	nop
 800ec48:	4b10      	ldr	r3, [pc, #64]	; (800ec8c <start_grid_timer+0x138>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0308 	and.w	r3, r3, #8
 800ec52:	2b08      	cmp	r3, #8
 800ec54:	d1f8      	bne.n	800ec48 <start_grid_timer+0xf4>

		s.grid_timer_flag = 1;
 800ec56:	4b0a      	ldr	r3, [pc, #40]	; (800ec80 <start_grid_timer+0x12c>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	751a      	strb	r2, [r3, #20]
		unmask_slow_timer(1);
 800ec5c:	2001      	movs	r0, #1
 800ec5e:	f7ff fee9 	bl	800ea34 <unmask_slow_timer>
    }

	// else if trigger tick is far away
	s.slot_state = (RESYNC == s.slot_state) ? RESYNC : IDLE;
 800ec62:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <start_grid_timer+0x12c>)
 800ec64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <start_grid_timer+0x11c>
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	e000      	b.n	800ec72 <start_grid_timer+0x11e>
 800ec70:	220c      	movs	r2, #12
 800ec72:	4b03      	ldr	r3, [pc, #12]	; (800ec80 <start_grid_timer+0x12c>)
 800ec74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800ec78:	bf00      	nop
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20000410 	.word	0x20000410
 800ec84:	200003c4 	.word	0x200003c4
 800ec88:	200012c8 	.word	0x200012c8
 800ec8c:	200011e4 	.word	0x200011e4
 800ec90:	200014f0 	.word	0x200014f0
 800ec94:	01c98000 	.word	0x01c98000
 800ec98:	4325c53f 	.word	0x4325c53f

0800ec9c <mixer_dio0_isr>:
	unmask_main_timer(0);
}

//**************************************************************************************************
#define USE_MODEM_LORA
void LED_ISR(mixer_dio0_isr, LED_DIO0_ISR)
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4b14      	ldr	r3, [pc, #80]	; (800ecf4 <mixer_dio0_isr+0x58>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d008      	beq.n	800ecbc <mixer_dio0_isr+0x20>
 800ecaa:	4b13      	ldr	r3, [pc, #76]	; (800ecf8 <mixer_dio0_isr+0x5c>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb0:	4a12      	ldr	r2, [pc, #72]	; (800ecfc <mixer_dio0_isr+0x60>)
 800ecb2:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800ecb6:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <mixer_dio0_isr+0x58>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	603b      	str	r3, [r7, #0]
}

static ALWAYS_INLINE void gpi_led_toggle(int mask)
{
	if (mask)
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d005      	beq.n	800ecd2 <mixer_dio0_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800ecc6:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <mixer_dio0_isr+0x64>)
 800ecc8:	695a      	ldr	r2, [r3, #20]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	490c      	ldr	r1, [pc, #48]	; (800ed00 <mixer_dio0_isr+0x64>)
 800ecce:	4053      	eors	r3, r2
 800ecd0:	614b      	str	r3, [r1, #20]
 800ecd2:	f000 f817 	bl	800ed04 <mixer_dio0_isr_>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	607b      	str	r3, [r7, #4]
	if (mask)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d005      	beq.n	800ecec <mixer_dio0_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <mixer_dio0_isr+0x64>)
 800ece2:	695a      	ldr	r2, [r3, #20]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4906      	ldr	r1, [pc, #24]	; (800ed00 <mixer_dio0_isr+0x64>)
 800ece8:	4053      	eors	r3, r2
 800ecea:	614b      	str	r3, [r1, #20]
 800ecec:	bf00      	nop
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	200003b4 	.word	0x200003b4
 800ecf8:	200012c8 	.word	0x200012c8
 800ecfc:	200014f0 	.word	0x200014f0
 800ed00:	48000800 	.word	0x48000800

0800ed04 <mixer_dio0_isr_>:
{
 800ed04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed06:	b0b1      	sub	sp, #196	; 0xc4
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4b42      	ldr	r3, [pc, #264]	; (800ee14 <mixer_dio0_isr_+0x110>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800ed10:	4a41      	ldr	r2, [pc, #260]	; (800ee18 <mixer_dio0_isr_+0x114>)
 800ed12:	6013      	str	r3, [r2, #0]
 800ed14:	4b41      	ldr	r3, [pc, #260]	; (800ee1c <mixer_dio0_isr_+0x118>)
 800ed16:	2201      	movs	r2, #1
 800ed18:	701a      	strb	r2, [r3, #0]
#endif
#if defined( USE_MODEM_LORA )
	Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800ed1a:	f107 031c 	add.w	r3, r7, #28
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fc ff22 	bl	800bb68 <gpi_tick_hybrid_reference>

	Gpi_Hybrid_Tick dio0_event_tick_slow = r.hybrid_tick;
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    // if Rx
	// NOTE: s.slot_state = RX_RUNNING or RESYNC
	if (TX_RUNNING != s.slot_state)
 800ed2a:	4b3d      	ldr	r3, [pc, #244]	; (800ee20 <mixer_dio0_isr_+0x11c>)
 800ed2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed30:	2b0c      	cmp	r3, #12
 800ed32:	f000 84d5 	beq.w	800f6e0 <mixer_dio0_isr_+0x9dc>
	{
		// Clear Irq
		SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800ed36:	2140      	movs	r1, #64	; 0x40
 800ed38:	2012      	movs	r0, #18
 800ed3a:	f7fd fe85 	bl	800ca48 <SX1276Write>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (mask)
 800ed44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d003      	beq.n	800ed54 <mixer_dio0_isr_+0x50>
		LED_GPIO_Port->BRR = mask;
 800ed4c:	4a35      	ldr	r2, [pc, #212]	; (800ee24 <mixer_dio0_isr_+0x120>)
 800ed4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ed52:	6293      	str	r3, [r2, #40]	; 0x28
		// situation at this point: Rx done, radio entering DISABLED state
		gpi_led_off(LED_RX);

		// stop timeout timer
		// -> not needed because this is done implicitely below
		mask_main_timer();
 800ed54:	f7ff fe5c 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800ed58:	4b2e      	ldr	r3, [pc, #184]	; (800ee14 <mixer_dio0_isr_+0x110>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f06f 0202 	mvn.w	r2, #2
 800ed60:	611a      	str	r2, [r3, #16]
		mask_slow_timer();
 800ed62:	f7ff fe7f 	bl	800ea64 <mask_slow_timer>
		__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800ed66:	4b30      	ldr	r3, [pc, #192]	; (800ee28 <mixer_dio0_isr_+0x124>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	605a      	str	r2, [r3, #4]
 800ed6e:	4b29      	ldr	r3, [pc, #164]	; (800ee14 <mixer_dio0_isr_+0x110>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6a5a      	ldr	r2, [r3, #36]	; 0x24

		#if MX_VERBOSE_STATISTICS
		{
			mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800ed74:	4b2a      	ldr	r3, [pc, #168]	; (800ee20 <mixer_dio0_isr_+0x11c>)
 800ed76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed78:	1ad2      	subs	r2, r2, r3
 800ed7a:	4b2c      	ldr	r3, [pc, #176]	; (800ee2c <mixer_dio0_isr_+0x128>)
 800ed7c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800ed80:	4413      	add	r3, r2
 800ed82:	4a2a      	ldr	r2, [pc, #168]	; (800ee2c <mixer_dio0_isr_+0x128>)
 800ed84:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
			s.radio_start_timestamp = 0;
 800ed88:	4b25      	ldr	r3, [pc, #148]	; (800ee20 <mixer_dio0_isr_+0x11c>)
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800ed8e:	4b23      	ldr	r3, [pc, #140]	; (800ee1c <mixer_dio0_isr_+0x118>)
 800ed90:	7bdb      	ldrb	r3, [r3, #15]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00d      	beq.n	800edb2 <mixer_dio0_isr_+0xae>
 800ed96:	4b1f      	ldr	r3, [pc, #124]	; (800ee14 <mixer_dio0_isr_+0x110>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed9c:	4b1e      	ldr	r3, [pc, #120]	; (800ee18 <mixer_dio0_isr_+0x114>)
 800ed9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda0:	1ad2      	subs	r2, r2, r3
 800eda2:	4b23      	ldr	r3, [pc, #140]	; (800ee30 <mixer_dio0_isr_+0x12c>)
 800eda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda6:	4413      	add	r3, r2
 800eda8:	4a21      	ldr	r2, [pc, #132]	; (800ee30 <mixer_dio0_isr_+0x12c>)
 800edaa:	63d3      	str	r3, [r2, #60]	; 0x3c
 800edac:	4b1b      	ldr	r3, [pc, #108]	; (800ee1c <mixer_dio0_isr_+0x118>)
 800edae:	2200      	movs	r2, #0
 800edb0:	73da      	strb	r2, [r3, #15]
		#endif

		// if LEN or CRC not ok: regard packet as invisible
		volatile uint8_t packet_len = (uint8_t)SX1276Read( REG_LR_RXNBBYTES );
 800edb2:	2013      	movs	r0, #19
 800edb4:	f7fd fe5a 	bl	800ca6c <SX1276Read>
 800edb8:	4603      	mov	r3, r0
 800edba:	76fb      	strb	r3, [r7, #27]
		volatile uint8_t irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800edbc:	2012      	movs	r0, #18
 800edbe:	f7fd fe55 	bl	800ca6c <SX1276Read>
 800edc2:	4603      	mov	r3, r0
 800edc4:	76bb      	strb	r3, [r7, #26]
		if( ( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR ) || ( packet_len != chirp_config.phy_payload_size + HASH_TAIL_CODE )
 800edc6:	7ebb      	ldrb	r3, [r7, #26]
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	f003 0320 	and.w	r3, r3, #32
 800edce:	2b20      	cmp	r3, #32
 800edd0:	d008      	beq.n	800ede4 <mixer_dio0_isr_+0xe0>
 800edd2:	7efb      	ldrb	r3, [r7, #27]
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	461a      	mov	r2, r3
 800edd8:	4b16      	ldr	r3, [pc, #88]	; (800ee34 <mixer_dio0_isr_+0x130>)
 800edda:	8a5b      	ldrh	r3, [r3, #18]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	3302      	adds	r3, #2
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d029      	beq.n	800ee38 <mixer_dio0_isr_+0x134>
		)
		{
			SX1276Write(REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR);
 800ede4:	2120      	movs	r1, #32
 800ede6:	2012      	movs	r0, #18
 800ede8:	f7fd fe2e 	bl	800ca48 <SX1276Write>

			GPI_TRACE_MSG_FAST(TRACE_INFO, "broken packet received, LEN: %d, CRC:error", (int)(packet_len));
 800edec:	bf00      	nop

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_broken++;
 800edee:	4b0f      	ldr	r3, [pc, #60]	; (800ee2c <mixer_dio0_isr_+0x128>)
 800edf0:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	; 0x880
 800edf4:	3301      	adds	r3, #1
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	4b0c      	ldr	r3, [pc, #48]	; (800ee2c <mixer_dio0_isr_+0x128>)
 800edfa:	f8a3 2880 	strh.w	r2, [r3, #2176]	; 0x880
			#endif
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800edfe:	2000      	movs	r0, #0
 800ee00:	f7fd fdaa 	bl	800c958 <SX1276SetOpMode>

			// trigger timeout timer (immediately) -> do error handling there
			// NOTE: don't need to unmask timer here because it already is
			trigger_main_timer(0);
 800ee04:	2000      	movs	r0, #0
 800ee06:	f7ff fdc3 	bl	800e990 <trigger_main_timer>
			unmask_main_timer(1);
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	f7ff fde8 	bl	800e9e0 <unmask_main_timer>
 800ee10:	f000 bcac 	b.w	800f76c <mixer_dio0_isr_+0xa68>
 800ee14:	200012c8 	.word	0x200012c8
 800ee18:	20001308 	.word	0x20001308
 800ee1c:	2000112c 	.word	0x2000112c
 800ee20:	20000410 	.word	0x20000410
 800ee24:	48000800 	.word	0x48000800
 800ee28:	200011e4 	.word	0x200011e4
 800ee2c:	200014f0 	.word	0x200014f0
 800ee30:	20000f10 	.word	0x20000f10
 800ee34:	20001430 	.word	0x20001430
        }
		// if packet ok: process packet
		else
		{
 800ee38:	466b      	mov	r3, sp
 800ee3a:	461e      	mov	r6, r3
			if (chirp_config.primitive == FLOODING)
 800ee3c:	4bc5      	ldr	r3, [pc, #788]	; (800f154 <mixer_dio0_isr_+0x450>)
 800ee3e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d102      	bne.n	800ee4c <mixer_dio0_isr_+0x148>
			{
				PRINTF_CHIRP("ok\n");
 800ee46:	48c4      	ldr	r0, [pc, #784]	; (800f158 <mixer_dio0_isr_+0x454>)
 800ee48:	f013 fc80 	bl	802274c <puts>
			}

			uint8_t RxPacketBuffer[packet_len];
 800ee4c:	7efb      	ldrb	r3, [r7, #27]
 800ee4e:	b2d8      	uxtb	r0, r3
 800ee50:	4603      	mov	r3, r0
 800ee52:	3b01      	subs	r3, #1
 800ee54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee58:	b2c1      	uxtb	r1, r0
 800ee5a:	f04f 0200 	mov.w	r2, #0
 800ee5e:	f04f 0300 	mov.w	r3, #0
 800ee62:	f04f 0400 	mov.w	r4, #0
 800ee66:	00d4      	lsls	r4, r2, #3
 800ee68:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ee6c:	00cb      	lsls	r3, r1, #3
 800ee6e:	b2c1      	uxtb	r1, r0
 800ee70:	f04f 0200 	mov.w	r2, #0
 800ee74:	f04f 0300 	mov.w	r3, #0
 800ee78:	f04f 0400 	mov.w	r4, #0
 800ee7c:	00d4      	lsls	r4, r2, #3
 800ee7e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ee82:	00cb      	lsls	r3, r1, #3
 800ee84:	4603      	mov	r3, r0
 800ee86:	3307      	adds	r3, #7
 800ee88:	08db      	lsrs	r3, r3, #3
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	ebad 0d03 	sub.w	sp, sp, r3
 800ee90:	466b      	mov	r3, sp
 800ee92:	3300      	adds	r3, #0
 800ee94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			memset( RxPacketBuffer, 0, ( size_t )packet_len );
 800ee98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee9c:	7efa      	ldrb	r2, [r7, #27]
 800ee9e:	b2d2      	uxtb	r2, r2
 800eea0:	2100      	movs	r1, #0
 800eea2:	4618      	mov	r0, r3
 800eea4:	f012 fdbd 	bl	8021a22 <memset>
			// read rx packet from start address (in data buffer) of last packet received
			SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800eea8:	2010      	movs	r0, #16
 800eeaa:	f7fd fddf 	bl	800ca6c <SX1276Read>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	200d      	movs	r0, #13
 800eeb4:	f7fd fdc8 	bl	800ca48 <SX1276Write>
			SX1276ReadFifo( RxPacketBuffer, packet_len );
 800eeb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eebc:	7efa      	ldrb	r2, [r7, #27]
 800eebe:	b2d2      	uxtb	r2, r2
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fd fe5a 	bl	800cb7c <SX1276ReadFifo>
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800eec8:	2000      	movs	r0, #0
 800eeca:	f7fd fd45 	bl	800c958 <SX1276SetOpMode>

			uint16_t code_tail_hash_rx = Chirp_RSHash((uint8_t *)RxPacketBuffer, chirp_config.phy_payload_size);
 800eece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eed2:	4ba0      	ldr	r3, [pc, #640]	; (800f154 <mixer_dio0_isr_+0x450>)
 800eed4:	8a5b      	ldrh	r3, [r3, #18]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f010 fa26 	bl	801f32c <Chirp_RSHash>
 800eee0:	4603      	mov	r3, r0
 800eee2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			uint16_t hash_code_rx = RxPacketBuffer[packet_len - 2] << 8 | RxPacketBuffer[packet_len - 1];
 800eee6:	7efb      	ldrb	r3, [r7, #27]
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	3b02      	subs	r3, #2
 800eeec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eef0:	5cd3      	ldrb	r3, [r2, r3]
 800eef2:	021b      	lsls	r3, r3, #8
 800eef4:	b21a      	sxth	r2, r3
 800eef6:	7efb      	ldrb	r3, [r7, #27]
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800ef00:	5ccb      	ldrb	r3, [r1, r3]
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	4313      	orrs	r3, r2
 800ef06:	b21b      	sxth	r3, r3
 800ef08:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
			if ((hash_code_rx == code_tail_hash_rx) && (hash_code_rx))
 800ef0c:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800ef10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef14:	429a      	cmp	r2, r3
 800ef16:	f040 83ce 	bne.w	800f6b6 <mixer_dio0_isr_+0x9b2>
 800ef1a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 83c9 	beq.w	800f6b6 <mixer_dio0_isr_+0x9b2>
			{
				// allocate rx queue destination slot
				Packet	*packet;

				gpi_memcpy_dma_aligned(&(mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)]->phy_payload_begin), RxPacketBuffer, chirp_config.phy_payload_size);
 800ef24:	4b8d      	ldr	r3, [pc, #564]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef28:	f003 0303 	and.w	r3, r3, #3
 800ef2c:	4a8b      	ldr	r2, [pc, #556]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	4619      	mov	r1, r3
 800ef36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef3a:	4a86      	ldr	r2, [pc, #536]	; (800f154 <mixer_dio0_isr_+0x450>)
 800ef3c:	8a52      	ldrh	r2, [r2, #18]
 800ef3e:	b292      	uxth	r2, r2
 800ef40:	66f9      	str	r1, [r7, #108]	; 0x6c
 800ef42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef44:	667a      	str	r2, [r7, #100]	; 0x64
	__builtin_memcpy(dest, src, size);
}

static ALWAYS_INLINE void gpi_memcpy_dma_aligned(void *dest, const void *src, size_t size)
{
	__builtin_memcpy(dest, src, size);
 800ef46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef50:	461a      	mov	r2, r3
 800ef52:	f012 fd5b 	bl	8021a0c <memcpy>
				packet = mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)];
 800ef56:	4b81      	ldr	r3, [pc, #516]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef5a:	f003 0303 	and.w	r3, r3, #3
 800ef5e:	4a7f      	ldr	r2, [pc, #508]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					#if INFO_VECTOR_QUEUE
					gpi_memcpy_dma_inline((uint8_t *)&(mx.code_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.code_queue)]->vector[0]), (uint8_t *)(RxPacketBuffer + offsetof(Packet, packet_chunk) + chirp_config.coding_vector.pos), chirp_config.coding_vector.len);
 800ef6a:	4b7c      	ldr	r3, [pc, #496]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6e:	f003 0303 	and.w	r3, r3, #3
 800ef72:	4a7a      	ldr	r2, [pc, #488]	; (800f15c <mixer_dio0_isr_+0x458>)
 800ef74:	3304      	adds	r3, #4
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	4413      	add	r3, r2
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ef82:	4b74      	ldr	r3, [pc, #464]	; (800f154 <mixer_dio0_isr_+0x450>)
 800ef84:	799b      	ldrb	r3, [r3, #6]
 800ef86:	3308      	adds	r3, #8
 800ef88:	4413      	add	r3, r2
 800ef8a:	4a72      	ldr	r2, [pc, #456]	; (800f154 <mixer_dio0_isr_+0x450>)
 800ef8c:	79d2      	ldrb	r2, [r2, #7]
 800ef8e:	67b9      	str	r1, [r7, #120]	; 0x78
 800ef90:	677b      	str	r3, [r7, #116]	; 0x74
 800ef92:	673a      	str	r2, [r7, #112]	; 0x70
	__builtin_memcpy(dest, src, size);
}

static ALWAYS_INLINE void gpi_memcpy_dma_inline(void *dest, const void *src, size_t size)
{
	__builtin_memcpy(dest, src, size);
 800ef94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef98:	4610      	mov	r0, r2
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef9e:	461a      	mov	r2, r3
 800efa0:	f012 fd34 	bl	8021a0c <memcpy>
					gpi_memcpy_dma_inline((uint8_t *)&(mx.info_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.info_queue)]->vector[0]), (uint8_t *)(RxPacketBuffer + offsetof(Packet, packet_chunk) + chirp_config.info_vector.pos), chirp_config.info_vector.len);
 800efa4:	4b6d      	ldr	r3, [pc, #436]	; (800f15c <mixer_dio0_isr_+0x458>)
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	f003 0303 	and.w	r3, r3, #3
 800efac:	4a6b      	ldr	r2, [pc, #428]	; (800f15c <mixer_dio0_isr_+0x458>)
 800efae:	3308      	adds	r3, #8
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4413      	add	r3, r2
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	4619      	mov	r1, r3
 800efb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800efbc:	4b65      	ldr	r3, [pc, #404]	; (800f154 <mixer_dio0_isr_+0x450>)
 800efbe:	7a9b      	ldrb	r3, [r3, #10]
 800efc0:	3308      	adds	r3, #8
 800efc2:	4413      	add	r3, r2
 800efc4:	4a63      	ldr	r2, [pc, #396]	; (800f154 <mixer_dio0_isr_+0x450>)
 800efc6:	7ad2      	ldrb	r2, [r2, #11]
 800efc8:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800efcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800efd0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800efd2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800efd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800efda:	4610      	mov	r0, r2
 800efdc:	4619      	mov	r1, r3
 800efde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800efe0:	461a      	mov	r2, r3
 800efe2:	f012 fd13 	bl	8021a0c <memcpy>

				if (chirp_config.primitive == FLOODING)
 800efe6:	4b5b      	ldr	r3, [pc, #364]	; (800f154 <mixer_dio0_isr_+0x450>)
 800efe8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800efec:	2b01      	cmp	r3, #1
 800efee:	d121      	bne.n	800f034 <mixer_dio0_isr_+0x330>
				{
					chirp_config.glossy_task = packet->flags.all;
 800eff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eff4:	79da      	ldrb	r2, [r3, #7]
 800eff6:	4b57      	ldr	r3, [pc, #348]	; (800f154 <mixer_dio0_isr_+0x450>)
 800eff8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
					gpi_memcpy_dma_inline((uint8_t *)(mx.tx_packet->packet_chunk), (uint8_t *)&(mx.rx_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.rx_queue)]->phy_payload_begin), chirp_config.phy_payload_size - LORADISC_HEADER_LEN);
 800effc:	4b57      	ldr	r3, [pc, #348]	; (800f15c <mixer_dio0_isr_+0x458>)
 800effe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f000:	f103 0208 	add.w	r2, r3, #8
 800f004:	4b55      	ldr	r3, [pc, #340]	; (800f15c <mixer_dio0_isr_+0x458>)
 800f006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f008:	f003 0303 	and.w	r3, r3, #3
 800f00c:	4953      	ldr	r1, [pc, #332]	; (800f15c <mixer_dio0_isr_+0x458>)
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	440b      	add	r3, r1
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	4619      	mov	r1, r3
 800f016:	4b4f      	ldr	r3, [pc, #316]	; (800f154 <mixer_dio0_isr_+0x450>)
 800f018:	8a5b      	ldrh	r3, [r3, #18]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	3b08      	subs	r3, #8
 800f01e:	663a      	str	r2, [r7, #96]	; 0x60
 800f020:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f022:	65bb      	str	r3, [r7, #88]	; 0x58
 800f024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f028:	4610      	mov	r0, r2
 800f02a:	4619      	mov	r1, r3
 800f02c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f02e:	461a      	mov	r2, r3
 800f030:	f012 fcec 	bl	8021a0c <memcpy>
					gpi_memcpy_dma_inline(mx.code_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.code_queue)].vector, (uint8_t *)(RxPacketBuffer + offsetof(Packet, coding_vector)), sizeof_member(Packet, coding_vector));
					gpi_memcpy_dma_inline(mx.info_queue[mx.rx_queue_num_written % NUM_ELEMENTS(mx.info_queue)].vector, (uint8_t *)(RxPacketBuffer + offsetof(Packet, info_vector)), sizeof_member(Packet, info_vector));
					#endif
				#endif

				PROFILE_ISR("radio ISR process Rx packet begin");
 800f034:	bf00      	nop

				int	strobe_resync = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

				GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "CRC ok");
 800f03c:	bf00      	nop

				#if MX_VERBOSE_STATISTICS
					mx.stat_counter.num_rx_success++;
 800f03e:	4b47      	ldr	r3, [pc, #284]	; (800f15c <mixer_dio0_isr_+0x458>)
 800f040:	f8b3 387e 	ldrh.w	r3, [r3, #2174]	; 0x87e
 800f044:	3301      	adds	r3, #1
 800f046:	b29a      	uxth	r2, r3
 800f048:	4b44      	ldr	r3, [pc, #272]	; (800f15c <mixer_dio0_isr_+0x458>)
 800f04a:	f8a3 287e 	strh.w	r2, [r3, #2174]	; 0x87e
				// update slot timing control values
				{
					// Gpi_Hybrid_Tick	event_tick;
					// Gpi_Hybrid_Tick event_tick = dio0_event_tick_slow;
					/* see "Longshot", ipsn 2019 */
					uint32_t rx_processing_time[6] = {682, 1372, 2850, 5970, 12800, 27000};
 800f04e:	4b44      	ldr	r3, [pc, #272]	; (800f160 <mixer_dio0_isr_+0x45c>)
 800f050:	463c      	mov	r4, r7
 800f052:	461d      	mov	r5, r3
 800f054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f058:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f05c:	e884 0003 	stmia.w	r4, {r0, r1}
					Gpi_Hybrid_Tick event_tick = dio0_event_tick_slow - GPI_TICK_US_TO_HYBRID2(rx_processing_time[chirp_config.lora_sf - 7]);
 800f060:	4b3c      	ldr	r3, [pc, #240]	; (800f154 <mixer_dio0_isr_+0x450>)
 800f062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f066:	3b07      	subs	r3, #7
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f06e:	4413      	add	r3, r2
 800f070:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800f074:	4a3b      	ldr	r2, [pc, #236]	; (800f164 <mixer_dio0_isr_+0x460>)
 800f076:	fba2 2303 	umull	r2, r3, r2, r3
 800f07a:	0c9b      	lsrs	r3, r3, #18
 800f07c:	4a3a      	ldr	r2, [pc, #232]	; (800f168 <mixer_dio0_isr_+0x464>)
 800f07e:	fb02 f103 	mul.w	r1, r2, r3
 800f082:	4b34      	ldr	r3, [pc, #208]	; (800f154 <mixer_dio0_isr_+0x450>)
 800f084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f088:	3b07      	subs	r3, #7
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f090:	4413      	add	r3, r2
 800f092:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800f096:	4a35      	ldr	r2, [pc, #212]	; (800f16c <mixer_dio0_isr_+0x468>)
 800f098:	fba2 2303 	umull	r2, r3, r2, r3
 800f09c:	099a      	lsrs	r2, r3, #6
 800f09e:	4b33      	ldr	r3, [pc, #204]	; (800f16c <mixer_dio0_isr_+0x468>)
 800f0a0:	fba3 0302 	umull	r0, r3, r3, r2
 800f0a4:	099b      	lsrs	r3, r3, #6
 800f0a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f0aa:	fb00 f303 	mul.w	r3, r0, r3
 800f0ae:	1ad3      	subs	r3, r2, r3
 800f0b0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800f0b4:	fb02 f303 	mul.w	r3, r2, r3
 800f0b8:	4419      	add	r1, r3
 800f0ba:	4b26      	ldr	r3, [pc, #152]	; (800f154 <mixer_dio0_isr_+0x450>)
 800f0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0c0:	3b07      	subs	r3, #7
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f853 2cc0 	ldr.w	r2, [r3, #-192]
 800f0ce:	4b27      	ldr	r3, [pc, #156]	; (800f16c <mixer_dio0_isr_+0x468>)
 800f0d0:	fba3 0302 	umull	r0, r3, r3, r2
 800f0d4:	099b      	lsrs	r3, r3, #6
 800f0d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f0da:	fb00 f303 	mul.w	r3, r0, r3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	011b      	lsls	r3, r3, #4
 800f0e2:	440b      	add	r3, r1
 800f0e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

					ASSERT_CT(sizeof(Gpi_Slow_Tick_Native) >= sizeof(uint16_t));

					// if RESYNC requested: realign slot grid based on capture value
					if (RESYNC == s.slot_state)
 800f0ee:	4b20      	ldr	r3, [pc, #128]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d168      	bne.n	800f1ca <mixer_dio0_isr_+0x4c6>
					{
						#if MX_LBT_ACCESS
							event_tick -= GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 800f0f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0fc:	f5a3 331c 	sub.w	r3, r3, #159744	; 0x27000
 800f100:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#endif

						s.next_grid_tick = event_tick - radio.packet_air_time + chirp_config.mx_slot_length;
 800f108:	4b1a      	ldr	r3, [pc, #104]	; (800f174 <mixer_dio0_isr_+0x470>)
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f110:	1ad2      	subs	r2, r2, r3
 800f112:	4b10      	ldr	r3, [pc, #64]	; (800f154 <mixer_dio0_isr_+0x450>)
 800f114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f116:	4413      	add	r3, r2
 800f118:	4a15      	ldr	r2, [pc, #84]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f11a:	6053      	str	r3, [r2, #4]

						s.grid_drift = 0;
 800f11c:	4b14      	ldr	r3, [pc, #80]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f11e:	2200      	movs	r2, #0
 800f120:	619a      	str	r2, [r3, #24]
						s.grid_drift_cumulative = 0;
 800f122:	4b13      	ldr	r3, [pc, #76]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f124:	2200      	movs	r2, #0
 800f126:	61da      	str	r2, [r3, #28]
						s.tx_trigger_offset = radio.tx_to_grid_offset;
 800f128:	4b12      	ldr	r3, [pc, #72]	; (800f174 <mixer_dio0_isr_+0x470>)
 800f12a:	695b      	ldr	r3, [r3, #20]
 800f12c:	4a10      	ldr	r2, [pc, #64]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f12e:	6253      	str	r3, [r2, #36]	; 0x24

						// don't set Rx window to tight after resync because we don't have
						// any information on grid drift yet
						// TODO:
						s.rx_trigger_offset = radio.rx_to_grid_offset + radio.rx_window_max / 2;
 800f130:	4b10      	ldr	r3, [pc, #64]	; (800f174 <mixer_dio0_isr_+0x470>)
 800f132:	691a      	ldr	r2, [r3, #16]
 800f134:	4b0f      	ldr	r3, [pc, #60]	; (800f174 <mixer_dio0_isr_+0x470>)
 800f136:	69db      	ldr	r3, [r3, #28]
 800f138:	085b      	lsrs	r3, r3, #1
 800f13a:	4413      	add	r3, r2
 800f13c:	4a0c      	ldr	r2, [pc, #48]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f13e:	6213      	str	r3, [r2, #32]

						s.slot_state = RX_RUNNING;
 800f140:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <mixer_dio0_isr_+0x46c>)
 800f142:	2210      	movs	r2, #16
 800f144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

						mx.slot_number = packet->slot_number;
 800f148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f14c:	889b      	ldrh	r3, [r3, #4]
 800f14e:	b29a      	uxth	r2, r3
 800f150:	e012      	b.n	800f178 <mixer_dio0_isr_+0x474>
 800f152:	bf00      	nop
 800f154:	20001430 	.word	0x20001430
 800f158:	08025880 	.word	0x08025880
 800f15c:	200014f0 	.word	0x200014f0
 800f160:	08025884 	.word	0x08025884
 800f164:	431bde83 	.word	0x431bde83
 800f168:	00f42400 	.word	0x00f42400
 800f16c:	10624dd3 	.word	0x10624dd3
 800f170:	20000410 	.word	0x20000410
 800f174:	200003c4 	.word	0x200003c4
 800f178:	4bb8      	ldr	r3, [pc, #736]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f17a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						GPI_TRACE_MSG_FAST(TRACE_INFO, "(re)synchronized to slot %u", mx.slot_number);
 800f17e:	bf00      	nop
						if (chirp_config.primitive == FLOODING)
 800f180:	4bb7      	ldr	r3, [pc, #732]	; (800f460 <mixer_dio0_isr_+0x75c>)
 800f182:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800f186:	2b01      	cmp	r3, #1
 800f188:	f040 818a 	bne.w	800f4a0 <mixer_dio0_isr_+0x79c>
 800f18c:	2301      	movs	r3, #1
 800f18e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	gpi_atomic_set(&(mx.events), BV(event));
 800f192:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f196:	2201      	movs	r2, #1
 800f198:	fa02 f303 	lsl.w	r3, r2, r3
 800f19c:	4aaf      	ldr	r2, [pc, #700]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f19e:	653a      	str	r2, [r7, #80]	; 0x50
 800f1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("dmb 0xF":::"memory");
 800f1aa:	f3bf 8f5f 	dmb	sy
		register int	tmp1, tmp2;

		REORDER_BARRIER();
		__DMB();

		__asm__
 800f1ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b4:	e851 0f00 	ldrex	r0, [r1]
 800f1b8:	ea40 0003 	orr.w	r0, r0, r3
 800f1bc:	e841 0300 	strex	r3, r0, [r1]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d1f7      	bne.n	800f1b4 <mixer_dio0_isr_+0x4b0>
 800f1c4:	f3bf 8f5f 	dmb	sy

/// @brief make function always inline (incl. debug builds with optimization disabled)
#define ALWAYS_INLINE					inline __attribute__((always_inline))

/// @brief general re-order barrier
static ALWAYS_INLINE void REORDER_BARRIER()	{__asm volatile ("" : : : "memory"); }
 800f1c8:	e16a      	b.n	800f4a0 <mixer_dio0_isr_+0x79c>
					}
					// else use phase-lock control loop to track grid
					else
					{
						#if MX_LBT_ACCESS
							event_tick -= GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US + s.lbt_channel_seq_no * chirp_config.lbt_detect_duration_us);
 800f1ca:	4ba6      	ldr	r3, [pc, #664]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f1cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4ba3      	ldr	r3, [pc, #652]	; (800f460 <mixer_dio0_isr_+0x75c>)
 800f1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1d6:	fb03 f302 	mul.w	r3, r3, r2
 800f1da:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f1de:	3310      	adds	r3, #16
 800f1e0:	4aa1      	ldr	r2, [pc, #644]	; (800f468 <mixer_dio0_isr_+0x764>)
 800f1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1e6:	0c9b      	lsrs	r3, r3, #18
 800f1e8:	4aa0      	ldr	r2, [pc, #640]	; (800f46c <mixer_dio0_isr_+0x768>)
 800f1ea:	fb02 f103 	mul.w	r1, r2, r3
 800f1ee:	4b9d      	ldr	r3, [pc, #628]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f1f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	4b9a      	ldr	r3, [pc, #616]	; (800f460 <mixer_dio0_isr_+0x75c>)
 800f1f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1fa:	fb03 f302 	mul.w	r3, r3, r2
 800f1fe:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f202:	3310      	adds	r3, #16
 800f204:	4a9a      	ldr	r2, [pc, #616]	; (800f470 <mixer_dio0_isr_+0x76c>)
 800f206:	fba2 2303 	umull	r2, r3, r2, r3
 800f20a:	099a      	lsrs	r2, r3, #6
 800f20c:	4b98      	ldr	r3, [pc, #608]	; (800f470 <mixer_dio0_isr_+0x76c>)
 800f20e:	fba3 0302 	umull	r0, r3, r3, r2
 800f212:	099b      	lsrs	r3, r3, #6
 800f214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f218:	fb00 f303 	mul.w	r3, r0, r3
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800f222:	fb02 f303 	mul.w	r3, r2, r3
 800f226:	4419      	add	r1, r3
 800f228:	4b8e      	ldr	r3, [pc, #568]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f22a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f22e:	461a      	mov	r2, r3
 800f230:	4b8b      	ldr	r3, [pc, #556]	; (800f460 <mixer_dio0_isr_+0x75c>)
 800f232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f234:	fb03 f302 	mul.w	r3, r3, r2
 800f238:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800f23c:	3310      	adds	r3, #16
 800f23e:	4a8c      	ldr	r2, [pc, #560]	; (800f470 <mixer_dio0_isr_+0x76c>)
 800f240:	fba2 0203 	umull	r0, r2, r2, r3
 800f244:	0992      	lsrs	r2, r2, #6
 800f246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f24a:	fb00 f202 	mul.w	r2, r0, r2
 800f24e:	1a9a      	subs	r2, r3, r2
 800f250:	0113      	lsls	r3, r2, #4
 800f252:	440b      	add	r3, r1
 800f254:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
							s.lbt_channel_seq_no = 0;
 800f25e:	4b81      	ldr	r3, [pc, #516]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f260:	2200      	movs	r2, #0
 800f262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						#endif

						int32_t	gd;

						if (mx.slot_number != packet->slot_number)
 800f266:	4b7d      	ldr	r3, [pc, #500]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f268:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f272:	889b      	ldrh	r3, [r3, #4]
 800f274:	b29b      	uxth	r3, r3
 800f276:	429a      	cmp	r2, r3
 800f278:	d00f      	beq.n	800f29a <mixer_dio0_isr_+0x596>
						{
							#if MX_VERBOSE_STATISTICS
								mx.stat_counter.num_rx_slot_mismatch++;
 800f27a:	4b78      	ldr	r3, [pc, #480]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f27c:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
 800f280:	3301      	adds	r3, #1
 800f282:	b29a      	uxth	r2, r3
 800f284:	4b75      	ldr	r3, [pc, #468]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f286:	f8a3 2892 	strh.w	r2, [r3, #2194]	; 0x892
							#endif
							GPI_TRACE_MSG_FAST(TRACE_WARNING, "!!! slot_number mismatch: expected: %u, received: %u !!!",
 800f28a:	bf00      	nop
								mx.slot_number, packet->slot_number);

							mx.slot_number = packet->slot_number;
 800f28c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f290:	889b      	ldrh	r3, [r3, #4]
 800f292:	b29a      	uxth	r2, r3
 800f294:	4b71      	ldr	r3, [pc, #452]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f296:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						// update grid drift and next grid tick
						// NOTE: s.grid_drift uses fix point format with ld(GRID_DRIFT_FILTER_DIV) fractional digits

						// compute SFD event deviation
						// NOTE: result is bounded by Rx window size
						event_tick -= s.event_tick_nominal;
 800f29a:	4b72      	ldr	r3, [pc, #456]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

						// keep Rx window in this range (with some margin)
						// TODO:
						s.rx_trigger_offset = radio.rx_window_min;
 800f2a8:	4b72      	ldr	r3, [pc, #456]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f2aa:	6a1b      	ldr	r3, [r3, #32]
 800f2ac:	4a6d      	ldr	r2, [pc, #436]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f2ae:	6213      	str	r3, [r2, #32]
						gd = (uint32_t)MAX(ABS(s.grid_drift / radio.grid_drift_filter_div), ABS((int32_t)event_tick));
 800f2b0:	4b6c      	ldr	r3, [pc, #432]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f2b2:	699a      	ldr	r2, [r3, #24]
 800f2b4:	4b6f      	ldr	r3, [pc, #444]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f2bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f2c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	bfb8      	it	lt
 800f2c8:	425b      	neglt	r3, r3
 800f2ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f2ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f2d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	bfb8      	it	lt
 800f2de:	425b      	neglt	r3, r3
 800f2e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f2e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f2e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	bfb8      	it	lt
 800f2f0:	4613      	movlt	r3, r2
 800f2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						if (s.rx_trigger_offset < (uint32_t)gd + radio.rx_window_increment)
 800f2f6:	4b5b      	ldr	r3, [pc, #364]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f2f8:	6a1a      	ldr	r2, [r3, #32]
 800f2fa:	4b5e      	ldr	r3, [pc, #376]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f2fc:	6999      	ldr	r1, [r3, #24]
 800f2fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f302:	440b      	add	r3, r1
 800f304:	429a      	cmp	r2, r3
 800f306:	d206      	bcs.n	800f316 <mixer_dio0_isr_+0x612>
							s.rx_trigger_offset = (uint32_t)gd + radio.rx_window_increment;
 800f308:	4b5a      	ldr	r3, [pc, #360]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f30a:	699a      	ldr	r2, [r3, #24]
 800f30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f310:	4413      	add	r3, r2
 800f312:	4a54      	ldr	r2, [pc, #336]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f314:	6213      	str	r3, [r2, #32]
						s.rx_trigger_offset += radio.rx_to_grid_offset;
 800f316:	4b53      	ldr	r3, [pc, #332]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f318:	6a1a      	ldr	r2, [r3, #32]
 800f31a:	4b56      	ldr	r3, [pc, #344]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	4413      	add	r3, r2
 800f320:	4a50      	ldr	r2, [pc, #320]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f322:	6213      	str	r3, [r2, #32]

						// restore nominal grid tick (i.e. remove previously added control value)
						// TODO:
						s.next_grid_tick -= s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 800f324:	4b4f      	ldr	r3, [pc, #316]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4a4e      	ldr	r2, [pc, #312]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f32a:	6991      	ldr	r1, [r2, #24]
 800f32c:	4a51      	ldr	r2, [pc, #324]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f32e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f330:	4850      	ldr	r0, [pc, #320]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f332:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f334:	fb00 f202 	mul.w	r2, r0, r2
 800f338:	fb91 f2f2 	sdiv	r2, r1, r2
 800f33c:	1a9b      	subs	r3, r3, r2
 800f33e:	4a49      	ldr	r2, [pc, #292]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f340:	6053      	str	r3, [r2, #4]

						// update grid drift:
						// new = 1/c * measurement + (c-1)/c * old = old - 1/c * old + 1/c * measurement
						// + GRID_DRIFT_FILTER_DIV / 2 leads to rounding
						s.grid_drift -= (s.grid_drift + radio.grid_drift_filter_div / 2) / radio.grid_drift_filter_div;
 800f342:	4b48      	ldr	r3, [pc, #288]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f344:	699a      	ldr	r2, [r3, #24]
 800f346:	4b47      	ldr	r3, [pc, #284]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f348:	6999      	ldr	r1, [r3, #24]
 800f34a:	4b4a      	ldr	r3, [pc, #296]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34e:	0fd8      	lsrs	r0, r3, #31
 800f350:	4403      	add	r3, r0
 800f352:	105b      	asrs	r3, r3, #1
 800f354:	4419      	add	r1, r3
 800f356:	4b47      	ldr	r3, [pc, #284]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35a:	fb91 f3f3 	sdiv	r3, r1, r3
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	4a40      	ldr	r2, [pc, #256]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f362:	6193      	str	r3, [r2, #24]
						gd = s.grid_drift;
 800f364:	4b3f      	ldr	r3, [pc, #252]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f366:	699b      	ldr	r3, [r3, #24]
 800f368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						gd += (int32_t)event_tick;
 800f36c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f374:	4413      	add	r3, r2
 800f376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						s.grid_drift = gd;
 800f37a:	4a3a      	ldr	r2, [pc, #232]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f37c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f380:	6193      	str	r3, [r2, #24]

						// if drift exceeds limit: start RESYNC
						// NOTE: saturation could also help since obviously we are still able to receive
						// something (at the moment). Nevertheless it seems that we are in a critical
						// situation, so resync appears adequate as well.
						if (ABS(gd) > 500 * radio.grid_drift_max)
 800f382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f38a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	bfb8      	it	lt
 800f392:	425b      	neglt	r3, r3
 800f394:	4619      	mov	r1, r3
 800f396:	4b37      	ldr	r3, [pc, #220]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f39e:	fb02 f303 	mul.w	r3, r2, r3
 800f3a2:	4299      	cmp	r1, r3
 800f3a4:	d914      	bls.n	800f3d0 <mixer_dio0_isr_+0x6cc>
						{
							#if MX_VERBOSE_STATISTICS
								mx.stat_counter.num_grid_drift_overflow++;
 800f3a6:	4b2d      	ldr	r3, [pc, #180]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f3a8:	f8b3 387a 	ldrh.w	r3, [r3, #2170]	; 0x87a
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	4b2a      	ldr	r3, [pc, #168]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f3b2:	f8a3 287a 	strh.w	r2, [r3, #2170]	; 0x87a
								mx.stat_counter.num_resync++;
 800f3b6:	4b29      	ldr	r3, [pc, #164]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f3b8:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800f3bc:	3301      	adds	r3, #1
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	4b26      	ldr	r3, [pc, #152]	; (800f45c <mixer_dio0_isr_+0x758>)
 800f3c2:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
							#endif
							GPI_TRACE_MSG_FAST(TRACE_INFO, "grid drift overflow: %d > %d -> enter RESYNC",
 800f3c6:	bf00      	nop
								ABS(gd), radio.grid_drift_max);

							strobe_resync = 1;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f3ce:	e067      	b.n	800f4a0 <mixer_dio0_isr_+0x79c>
						else
						{
							// update grid tick
							// NOTE: this realizes the proportional term of a PID controller
							// TODO:
							s.next_grid_tick += s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 800f3d0:	4b24      	ldr	r3, [pc, #144]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	4a23      	ldr	r2, [pc, #140]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f3d6:	6991      	ldr	r1, [r2, #24]
 800f3d8:	4a26      	ldr	r2, [pc, #152]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f3da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f3dc:	4825      	ldr	r0, [pc, #148]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f3de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f3e0:	fb00 f202 	mul.w	r2, r0, r2
 800f3e4:	fb91 f2f2 	sdiv	r2, r1, r2
 800f3e8:	4413      	add	r3, r2
 800f3ea:	4a1e      	ldr	r2, [pc, #120]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f3ec:	6053      	str	r3, [r2, #4]

							// keep cumulative grid drift
							// NOTE: this is the base for the integral component of a PID controller
							gd = s.grid_drift_cumulative;
 800f3ee:	4b1d      	ldr	r3, [pc, #116]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f3f0:	69db      	ldr	r3, [r3, #28]
 800f3f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							gd += s.grid_drift;
 800f3f6:	4b1b      	ldr	r3, [pc, #108]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f3fe:	4413      	add	r3, r2
 800f400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							if (gd > 0x7FFF)
 800f404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f40c:	db04      	blt.n	800f418 <mixer_dio0_isr_+0x714>
								gd = 0x7FFF;
 800f40e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f416:	e007      	b.n	800f428 <mixer_dio0_isr_+0x724>
							else if (gd < -0x8000l)
 800f418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f41c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f420:	da02      	bge.n	800f428 <mixer_dio0_isr_+0x724>
								gd = -0x8000l;
 800f422:	4b15      	ldr	r3, [pc, #84]	; (800f478 <mixer_dio0_isr_+0x774>)
 800f424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							s.grid_drift_cumulative = gd;
 800f428:	4a0e      	ldr	r2, [pc, #56]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f42a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f42e:	61d3      	str	r3, [r2, #28]

							// update tx trigger offset
							// NOTE: this realizes the integral term of a PID controller in an indirect way
							// (through a loopback with potentially high uncertainty on its reaction)
							// TODO:
							s.tx_trigger_offset = s.grid_drift_cumulative / (radio.grid_drift_filter_div * radio.tx_offset_filter_div);
 800f430:	4b0c      	ldr	r3, [pc, #48]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f432:	69da      	ldr	r2, [r3, #28]
 800f434:	4b0f      	ldr	r3, [pc, #60]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	490e      	ldr	r1, [pc, #56]	; (800f474 <mixer_dio0_isr_+0x770>)
 800f43a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800f43c:	fb01 f303 	mul.w	r3, r1, r3
 800f440:	fb92 f3f3 	sdiv	r3, r2, r3
 800f444:	461a      	mov	r2, r3
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f448:	625a      	str	r2, [r3, #36]	; 0x24

							if ((int32_t)s.tx_trigger_offset < 0)
 800f44a:	4b06      	ldr	r3, [pc, #24]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44e:	2b00      	cmp	r3, #0
 800f450:	da14      	bge.n	800f47c <mixer_dio0_isr_+0x778>
								s.tx_trigger_offset = 0;
 800f452:	4b04      	ldr	r3, [pc, #16]	; (800f464 <mixer_dio0_isr_+0x760>)
 800f454:	2200      	movs	r2, #0
 800f456:	625a      	str	r2, [r3, #36]	; 0x24
 800f458:	e01a      	b.n	800f490 <mixer_dio0_isr_+0x78c>
 800f45a:	bf00      	nop
 800f45c:	200014f0 	.word	0x200014f0
 800f460:	20001430 	.word	0x20001430
 800f464:	20000410 	.word	0x20000410
 800f468:	431bde83 	.word	0x431bde83
 800f46c:	00f42400 	.word	0x00f42400
 800f470:	10624dd3 	.word	0x10624dd3
 800f474:	200003c4 	.word	0x200003c4
 800f478:	ffff8000 	.word	0xffff8000
							else if (s.tx_trigger_offset > radio.tx_offset_max)
 800f47c:	4b92      	ldr	r3, [pc, #584]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f47e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f480:	4b92      	ldr	r3, [pc, #584]	; (800f6cc <mixer_dio0_isr_+0x9c8>)
 800f482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f484:	429a      	cmp	r2, r3
 800f486:	d903      	bls.n	800f490 <mixer_dio0_isr_+0x78c>
								s.tx_trigger_offset = radio.tx_offset_max;
 800f488:	4b90      	ldr	r3, [pc, #576]	; (800f6cc <mixer_dio0_isr_+0x9c8>)
 800f48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f48c:	4a8e      	ldr	r2, [pc, #568]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f48e:	6253      	str	r3, [r2, #36]	; 0x24
							s.tx_trigger_offset += radio.tx_to_grid_offset;
 800f490:	4b8d      	ldr	r3, [pc, #564]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f494:	4b8d      	ldr	r3, [pc, #564]	; (800f6cc <mixer_dio0_isr_+0x9c8>)
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	4413      	add	r3, r2
 800f49a:	4a8b      	ldr	r2, [pc, #556]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f49c:	6253      	str	r3, [r2, #36]	; 0x24

							GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "grid_drift_cum: %d, tx_offset: %u",
 800f49e:	bf00      	nop
					}


					// special handling during start-up phase, see tx decision for details
					#if (MX_COORDINATED_TX && !MX_BENCHMARK_NO_COORDINATED_STARTUP)
						if (!strobe_resync && (mx.slot_number < chirp_config.mx_generation_size) && packet->flags.has_next_payload)
 800f4a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d123      	bne.n	800f4f0 <mixer_dio0_isr_+0x7ec>
 800f4a8:	4b89      	ldr	r3, [pc, #548]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f4aa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	4b88      	ldr	r3, [pc, #544]	; (800f6d4 <mixer_dio0_isr_+0x9d0>)
 800f4b2:	885b      	ldrh	r3, [r3, #2]
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d21a      	bcs.n	800f4f0 <mixer_dio0_isr_+0x7ec>
 800f4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f4be:	79db      	ldrb	r3, [r3, #7]
 800f4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d012      	beq.n	800f4f0 <mixer_dio0_isr_+0x7ec>
							// ATTENTION: don't rely on mx.tx_sideload or mx.tx_reserve at this point
							// (mx.tx_sideload may change between here and next trigger tick, mx.tx_reserve
							// may point to an incosistent row since it is not guarded w.r.t. ISR level).
							// Instead, there is a very high probability that mx.tx_packet is ready since
							// we did not TX in current slot (otherwise we wouldn't be here).
							if (((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS) && (STOP != s.next_slot_task))
 800f4ca:	4b81      	ldr	r3, [pc, #516]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ce:	4a81      	ldr	r2, [pc, #516]	; (800f6d4 <mixer_dio0_isr_+0x9d0>)
 800f4d0:	7b92      	ldrb	r2, [r2, #14]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	7a1b      	ldrb	r3, [r3, #8]
 800f4d6:	b25b      	sxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	da09      	bge.n	800f4f0 <mixer_dio0_isr_+0x7ec>
 800f4dc:	4b7a      	ldr	r3, [pc, #488]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f4de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f4e2:	2b02      	cmp	r3, #2
 800f4e4:	d004      	beq.n	800f4f0 <mixer_dio0_isr_+0x7ec>
							{
								GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "tx decision: has_next_payload set");
 800f4e6:	bf00      	nop
								s.next_slot_task = TX;
 800f4e8:	4b77      	ldr	r3, [pc, #476]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
							}
						}
					#endif

					s.next_trigger_tick = s.next_grid_tick -
 800f4f0:	4b75      	ldr	r3, [pc, #468]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f4f2:	685a      	ldr	r2, [r3, #4]
						((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 800f4f4:	4b74      	ldr	r3, [pc, #464]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f4f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d102      	bne.n	800f504 <mixer_dio0_isr_+0x800>
 800f4fe:	4b72      	ldr	r3, [pc, #456]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f502:	e001      	b.n	800f508 <mixer_dio0_isr_+0x804>
 800f504:	4b70      	ldr	r3, [pc, #448]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f506:	6a1b      	ldr	r3, [r3, #32]
					s.next_trigger_tick = s.next_grid_tick -
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	4a6f      	ldr	r2, [pc, #444]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f50c:	6093      	str	r3, [r2, #8]

					GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "next_grid: %lu, grid_drift: %+d (%+dus)",
 800f50e:	bf00      	nop
					);
				}


				// check potential queue overflow, if ok: keep packet
				if (mx.rx_queue_num_writing - mx.rx_queue_num_read < NUM_ELEMENTS(mx.rx_queue))
 800f510:	4b6f      	ldr	r3, [pc, #444]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f514:	4b6e      	ldr	r3, [pc, #440]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d83b      	bhi.n	800f596 <mixer_dio0_isr_+0x892>
				{
					mx.rx_queue_num_written++;
 800f51e:	4b6c      	ldr	r3, [pc, #432]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f522:	3301      	adds	r3, #1
 800f524:	4a6a      	ldr	r2, [pc, #424]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f526:	6393      	str	r3, [r2, #56]	; 0x38

					// use packet as next Tx sideload (-> fast tx update)
					if (chirp_config.mx_generation_size != mx.rank)
 800f528:	4b6a      	ldr	r3, [pc, #424]	; (800f6d4 <mixer_dio0_isr_+0x9d0>)
 800f52a:	885b      	ldrh	r3, [r3, #2]
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	4b68      	ldr	r3, [pc, #416]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f530:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800f534:	429a      	cmp	r2, r3
 800f536:	d007      	beq.n	800f548 <mixer_dio0_isr_+0x844>
					{
						mx.tx_sideload = &(packet->packet_chunk[chirp_config.coding_vector.pos]);
 800f538:	4b66      	ldr	r3, [pc, #408]	; (800f6d4 <mixer_dio0_isr_+0x9d0>)
 800f53a:	799b      	ldrb	r3, [r3, #6]
 800f53c:	3308      	adds	r3, #8
 800f53e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f542:	4413      	add	r3, r2
 800f544:	4a62      	ldr	r2, [pc, #392]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f546:	6453      	str	r3, [r2, #68]	; 0x44
 800f548:	2304      	movs	r3, #4
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	gpi_atomic_set(&(mx.events), BV(event));
 800f54e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f552:	2201      	movs	r2, #1
 800f554:	fa02 f303 	lsl.w	r3, r2, r3
 800f558:	4a5d      	ldr	r2, [pc, #372]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f55a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f55c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f560:	637b      	str	r3, [r7, #52]	; 0x34
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	633b      	str	r3, [r7, #48]	; 0x30
 800f566:	f3bf 8f5f 	dmb	sy
 800f56a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f570:	e851 0f00 	ldrex	r0, [r1]
 800f574:	ea40 0003 	orr.w	r0, r0, r3
 800f578:	e841 0300 	strex	r3, r0, [r1]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f7      	bne.n	800f570 <mixer_dio0_isr_+0x86c>
 800f580:	f3bf 8f5f 	dmb	sy
					}

					set_event(RX_READY);

					#if MX_VERBOSE_STATISTICS
						mx.stat_counter.num_received++;
 800f584:	4b52      	ldr	r3, [pc, #328]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f586:	f8b3 3876 	ldrh.w	r3, [r3, #2166]	; 0x876
 800f58a:	3301      	adds	r3, #1
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	4b50      	ldr	r3, [pc, #320]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f590:	f8a3 2876 	strh.w	r2, [r3, #2166]	; 0x876
 800f594:	e019      	b.n	800f5ca <mixer_dio0_isr_+0x8c6>
					#endif
				}
				#if MX_VERBOSE_STATISTICS
				else
				{
					GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx queue overflow, NW: %u, NR: %u", mx.rx_queue_num_writing, mx.rx_queue_num_read);
 800f596:	bf00      	nop

					if (mx.rank < chirp_config.mx_generation_size)
 800f598:	4b4d      	ldr	r3, [pc, #308]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f59a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800f59e:	4b4d      	ldr	r3, [pc, #308]	; (800f6d4 <mixer_dio0_isr_+0x9d0>)
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d208      	bcs.n	800f5ba <mixer_dio0_isr_+0x8b6>
					{
						mx.stat_counter.num_rx_queue_overflow++;
 800f5a8:	4b49      	ldr	r3, [pc, #292]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5aa:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	4b47      	ldr	r3, [pc, #284]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5b4:	f8a3 2894 	strh.w	r2, [r3, #2196]	; 0x894
 800f5b8:	e007      	b.n	800f5ca <mixer_dio0_isr_+0x8c6>
					}
					else mx.stat_counter.num_rx_queue_overflow_full_rank++;
 800f5ba:	4b45      	ldr	r3, [pc, #276]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5bc:	f8b3 3896 	ldrh.w	r3, [r3, #2198]	; 0x896
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	4b42      	ldr	r3, [pc, #264]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5c6:	f8a3 2896 	strh.w	r2, [r3, #2198]	; 0x896
				}
				#endif
				ASSERT_CT(NUM_ELEMENTS(mx.rx_queue) >= 2, single_entry_rx_queue_will_not_work);

				// start RESYNC if requested
				if (strobe_resync)
 800f5ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d06d      	beq.n	800f6ae <mixer_dio0_isr_+0x9aa>
				{
					#if MX_VERBOSE_STATISTICS
						mx.stat_counter.num_resync++;
 800f5d2:	4b3f      	ldr	r3, [pc, #252]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5d4:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800f5d8:	3301      	adds	r3, #1
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	4b3c      	ldr	r3, [pc, #240]	; (800f6d0 <mixer_dio0_isr_+0x9cc>)
 800f5de:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (2 == mode)
 800f5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e8:	2b02      	cmp	r3, #2
 800f5ea:	d108      	bne.n	800f5fe <mixer_dio0_isr_+0x8fa>
		s.slot_state = IDLE;
 800f5ec:	4b36      	ldr	r3, [pc, #216]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f5ee:	220c      	movs	r2, #12
 800f5f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 800f5f4:	4b34      	ldr	r3, [pc, #208]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f5fc:	e01d      	b.n	800f63a <mixer_dio0_isr_+0x936>
	else if (1 == mode)
 800f5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f600:	2b01      	cmp	r3, #1
 800f602:	d108      	bne.n	800f616 <mixer_dio0_isr_+0x912>
		s.slot_state = RESYNC;
 800f604:	4b30      	ldr	r3, [pc, #192]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800f60c:	4b2e      	ldr	r3, [pc, #184]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f614:	e011      	b.n	800f63a <mixer_dio0_isr_+0x936>
	else if (STOP == s.next_slot_task)
 800f616:	4b2c      	ldr	r3, [pc, #176]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f61c:	2b02      	cmp	r3, #2
 800f61e:	d104      	bne.n	800f62a <mixer_dio0_isr_+0x926>
		s.slot_state = IDLE;
 800f620:	4b29      	ldr	r3, [pc, #164]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f622:	220c      	movs	r2, #12
 800f624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f628:	e007      	b.n	800f63a <mixer_dio0_isr_+0x936>
		s.slot_state = RESYNC;
 800f62a:	4b27      	ldr	r3, [pc, #156]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800f632:	4b25      	ldr	r3, [pc, #148]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f634:	2200      	movs	r2, #0
 800f636:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 800f63a:	f7ff f9e9 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f63e:	4b26      	ldr	r3, [pc, #152]	; (800f6d8 <mixer_dio0_isr_+0x9d4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f06f 0202 	mvn.w	r2, #2
 800f646:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 800f648:	f7ff fa0c 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f64c:	4b23      	ldr	r3, [pc, #140]	; (800f6dc <mixer_dio0_isr_+0x9d8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2201      	movs	r2, #1
 800f652:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 800f654:	2001      	movs	r0, #1
 800f656:	f7ff f99b 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 800f65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d022      	beq.n	800f6a6 <mixer_dio0_isr_+0x9a2>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 800f660:	4b1d      	ldr	r3, [pc, #116]	; (800f6d8 <mixer_dio0_isr_+0x9d4>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f666:	4618      	mov	r0, r3
 800f668:	f7fc fac8 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 800f66c:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800f66e:	4b17      	ldr	r3, [pc, #92]	; (800f6cc <mixer_dio0_isr_+0x9c8>)
 800f670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f672:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 800f674:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 800f676:	4b15      	ldr	r3, [pc, #84]	; (800f6cc <mixer_dio0_isr_+0x9c8>)
 800f678:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 800f67a:	4413      	add	r3, r2
 800f67c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 800f680:	4a11      	ldr	r2, [pc, #68]	; (800f6c8 <mixer_dio0_isr_+0x9c4>)
 800f682:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 800f684:	f7ff f9c4 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f688:	4b13      	ldr	r3, [pc, #76]	; (800f6d8 <mixer_dio0_isr_+0x9d4>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f06f 0202 	mvn.w	r2, #2
 800f690:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 800f692:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <mixer_dio0_isr_+0x9d4>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f698:	4b0f      	ldr	r3, [pc, #60]	; (800f6d8 <mixer_dio0_isr_+0x9d4>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800f6a0:	635a      	str	r2, [r3, #52]	; 0x34
 800f6a2:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	f7ff f99a 	bl	800e9e0 <unmask_main_timer>
				else
				{
					start_grid_timer();
				}

				PROFILE_ISR("radio ISR process Rx packet end");
 800f6ac:	e001      	b.n	800f6b2 <mixer_dio0_isr_+0x9ae>
					start_grid_timer();
 800f6ae:	f7ff fa51 	bl	800eb54 <start_grid_timer>
				PROFILE_ISR("radio ISR process Rx packet end");
 800f6b2:	bf00      	nop
			{
 800f6b4:	e005      	b.n	800f6c2 <mixer_dio0_isr_+0x9be>
			}
			else
			{
				// trigger timeout timer (immediately) -> do error handling there
				// NOTE: don't need to unmask timer here because it already is
				trigger_main_timer(0);
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	f7ff f96a 	bl	800e990 <trigger_main_timer>
				unmask_main_timer(1);
 800f6bc:	2001      	movs	r0, #1
 800f6be:	f7ff f98f 	bl	800e9e0 <unmask_main_timer>
 800f6c2:	46b5      	mov	sp, r6
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx done");
	}

	_return_:

	PROFILE_ISR("radio ISR return");
 800f6c4:	e052      	b.n	800f76c <mixer_dio0_isr_+0xa68>
 800f6c6:	bf00      	nop
 800f6c8:	20000410 	.word	0x20000410
 800f6cc:	200003c4 	.word	0x200003c4
 800f6d0:	200014f0 	.word	0x200014f0
 800f6d4:	20001430 	.word	0x20001430
 800f6d8:	200012c8 	.word	0x200012c8
 800f6dc:	200011e4 	.word	0x200011e4
        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800f6e0:	2108      	movs	r1, #8
 800f6e2:	2012      	movs	r0, #18
 800f6e4:	f7fd f9b0 	bl	800ca48 <SX1276Write>
		SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	f7fd f935 	bl	800c958 <SX1276SetOpMode>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (mask)
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <mixer_dio0_isr_+0x9fa>
		LED_GPIO_Port->BRR = mask;
 800f6f8:	4a28      	ldr	r2, [pc, #160]	; (800f79c <mixer_dio0_isr_+0xa98>)
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	6293      	str	r3, [r2, #40]	; 0x28
 800f6fe:	4b28      	ldr	r3, [pc, #160]	; (800f7a0 <mixer_dio0_isr_+0xa9c>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800f704:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f708:	1ad2      	subs	r2, r2, r3
 800f70a:	4b27      	ldr	r3, [pc, #156]	; (800f7a8 <mixer_dio0_isr_+0xaa4>)
 800f70c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800f710:	4413      	add	r3, r2
 800f712:	4a25      	ldr	r2, [pc, #148]	; (800f7a8 <mixer_dio0_isr_+0xaa4>)
 800f714:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
			s.radio_start_timestamp = 0;
 800f718:	4b22      	ldr	r3, [pc, #136]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	635a      	str	r2, [r3, #52]	; 0x34
			ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 800f71e:	4b23      	ldr	r3, [pc, #140]	; (800f7ac <mixer_dio0_isr_+0xaa8>)
 800f720:	7b9b      	ldrb	r3, [r3, #14]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00d      	beq.n	800f742 <mixer_dio0_isr_+0xa3e>
 800f726:	4b1e      	ldr	r3, [pc, #120]	; (800f7a0 <mixer_dio0_isr_+0xa9c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f72c:	4b20      	ldr	r3, [pc, #128]	; (800f7b0 <mixer_dio0_isr_+0xaac>)
 800f72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f730:	1ad2      	subs	r2, r2, r3
 800f732:	4b20      	ldr	r3, [pc, #128]	; (800f7b4 <mixer_dio0_isr_+0xab0>)
 800f734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f736:	4413      	add	r3, r2
 800f738:	4a1e      	ldr	r2, [pc, #120]	; (800f7b4 <mixer_dio0_isr_+0xab0>)
 800f73a:	6393      	str	r3, [r2, #56]	; 0x38
 800f73c:	4b1b      	ldr	r3, [pc, #108]	; (800f7ac <mixer_dio0_isr_+0xaa8>)
 800f73e:	2200      	movs	r2, #0
 800f740:	739a      	strb	r2, [r3, #14]
 800f742:	4b17      	ldr	r3, [pc, #92]	; (800f7a0 <mixer_dio0_isr_+0xa9c>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			s.tx_on_time = gpi_tick_fast_native() - s.tx_on_time;
 800f748:	4b16      	ldr	r3, [pc, #88]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f74a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	4a15      	ldr	r2, [pc, #84]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f750:	6453      	str	r3, [r2, #68]	; 0x44
			lbt_update_channel((uint32_t)gpi_tick_hybrid_to_us(s.tx_on_time), s.tx_now_channel);
 800f752:	4b14      	ldr	r3, [pc, #80]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f756:	627b      	str	r3, [r7, #36]	; 0x24
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	091a      	lsrs	r2, r3, #4
 800f75c:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <mixer_dio0_isr_+0xaa0>)
 800f75e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f762:	4619      	mov	r1, r3
 800f764:	4610      	mov	r0, r2
 800f766:	f7fa ff63 	bl	800a630 <lbt_update_channel>
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx done");
 800f76a:	bf00      	nop
	PROFILE_ISR("radio ISR return");
 800f76c:	bf00      	nop

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800f76e:	4b0f      	ldr	r3, [pc, #60]	; (800f7ac <mixer_dio0_isr_+0xaa8>)
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00e      	beq.n	800f794 <mixer_dio0_isr_+0xa90>
	return htim2.Instance->CNT;
 800f776:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <mixer_dio0_isr_+0xa9c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f77c:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <mixer_dio0_isr_+0xaac>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	1ad2      	subs	r2, r2, r3
 800f782:	4b0c      	ldr	r3, [pc, #48]	; (800f7b4 <mixer_dio0_isr_+0xab0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4413      	add	r3, r2
 800f788:	4a0a      	ldr	r2, [pc, #40]	; (800f7b4 <mixer_dio0_isr_+0xab0>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	4b07      	ldr	r3, [pc, #28]	; (800f7ac <mixer_dio0_isr_+0xaa8>)
 800f78e:	2200      	movs	r2, #0
 800f790:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_RETURN_FAST();
 800f792:	bf00      	nop
 800f794:	bf00      	nop

#elif defined( USE_MODEM_FSK )
    #error "Please define FSK parameters."
#endif
}
 800f796:	37c4      	adds	r7, #196	; 0xc4
 800f798:	46bd      	mov	sp, r7
 800f79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f79c:	48000800 	.word	0x48000800
 800f7a0:	200012c8 	.word	0x200012c8
 800f7a4:	20000410 	.word	0x20000410
 800f7a8:	200014f0 	.word	0x200014f0
 800f7ac:	2000112c 	.word	0x2000112c
 800f7b0:	20001308 	.word	0x20001308
 800f7b4:	20000f10 	.word	0x20000f10

0800f7b8 <mixer_dio3_isr>:


void LED_ISR(mixer_dio3_isr, LED_DIO3_ISR)
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	4b14      	ldr	r3, [pc, #80]	; (800f810 <mixer_dio3_isr+0x58>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d008      	beq.n	800f7d8 <mixer_dio3_isr+0x20>
 800f7c6:	4b13      	ldr	r3, [pc, #76]	; (800f814 <mixer_dio3_isr+0x5c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7cc:	4a12      	ldr	r2, [pc, #72]	; (800f818 <mixer_dio3_isr+0x60>)
 800f7ce:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800f7d2:	4b0f      	ldr	r3, [pc, #60]	; (800f810 <mixer_dio3_isr+0x58>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	603b      	str	r3, [r7, #0]
	if (mask)
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d005      	beq.n	800f7ee <mixer_dio3_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800f7e2:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <mixer_dio3_isr+0x64>)
 800f7e4:	695a      	ldr	r2, [r3, #20]
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	490c      	ldr	r1, [pc, #48]	; (800f81c <mixer_dio3_isr+0x64>)
 800f7ea:	4053      	eors	r3, r2
 800f7ec:	614b      	str	r3, [r1, #20]
 800f7ee:	f000 f817 	bl	800f820 <mixer_dio3_isr_>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	607b      	str	r3, [r7, #4]
	if (mask)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d005      	beq.n	800f808 <mixer_dio3_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800f7fc:	4b07      	ldr	r3, [pc, #28]	; (800f81c <mixer_dio3_isr+0x64>)
 800f7fe:	695a      	ldr	r2, [r3, #20]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4906      	ldr	r1, [pc, #24]	; (800f81c <mixer_dio3_isr+0x64>)
 800f804:	4053      	eors	r3, r2
 800f806:	614b      	str	r3, [r1, #20]
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	200003b4 	.word	0x200003b4
 800f814:	200012c8 	.word	0x200012c8
 800f818:	200014f0 	.word	0x200014f0
 800f81c:	48000800 	.word	0x48000800

0800f820 <mixer_dio3_isr_>:
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	4b36      	ldr	r3, [pc, #216]	; (800f900 <mixer_dio3_isr_+0xe0>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800f82c:	4a35      	ldr	r2, [pc, #212]	; (800f904 <mixer_dio3_isr_+0xe4>)
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	4b35      	ldr	r3, [pc, #212]	; (800f908 <mixer_dio3_isr_+0xe8>)
 800f832:	2201      	movs	r2, #1
 800f834:	701a      	strb	r2, [r3, #0]
	// TODO:
	// if (Dio3Irq)
	{
		#if defined( USE_MODEM_LORA )

			mask_main_timer();
 800f836:	f7ff f8eb 	bl	800ea10 <mask_main_timer>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800f83a:	4b31      	ldr	r3, [pc, #196]	; (800f900 <mixer_dio3_isr_+0xe0>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f06f 0202 	mvn.w	r2, #2
 800f842:	611a      	str	r2, [r3, #16]
			mask_slow_timer();
 800f844:	f7ff f90e 	bl	800ea64 <mask_slow_timer>
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f848:	4b30      	ldr	r3, [pc, #192]	; (800f90c <mixer_dio3_isr_+0xec>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2201      	movs	r2, #1
 800f84e:	605a      	str	r2, [r3, #4]

			// if Rx
			// NOTE: s.slot_state = RX_RUNNING or RESYNC
			if (TX_RUNNING != s.slot_state)
 800f850:	4b2f      	ldr	r3, [pc, #188]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f856:	2b0c      	cmp	r3, #12
 800f858:	d04c      	beq.n	800f8f4 <mixer_dio3_isr_+0xd4>
			{
				// Clear Irq
				SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_VALIDHEADER );
 800f85a:	2110      	movs	r1, #16
 800f85c:	2012      	movs	r0, #18
 800f85e:	f7fd f8f3 	bl	800ca48 <SX1276Write>
				// if frame detected
				GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "header detected");
 800f862:	bf00      	nop

				// REG_LR_RXNBBYTES cannot be read before a valid packet is received, so we do not check the payload length here
				{
					// MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(PAYLOAD_TIME);
					Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800f864:	463b      	mov	r3, r7
 800f866:	4618      	mov	r0, r3
 800f868:	f7fc f97e 	bl	800bb68 <gpi_tick_hybrid_reference>
					// s.slow_trigger = r.hybrid_tick + GPI_TICK_US_TO_HYBRID2(AFTER_HEADER_TIME);
					s.slow_trigger = r.hybrid_tick + radio.packet_air_time;
 800f86c:	683a      	ldr	r2, [r7, #0]
 800f86e:	4b29      	ldr	r3, [pc, #164]	; (800f914 <mixer_dio3_isr_+0xf4>)
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	4413      	add	r3, r2
 800f874:	4a26      	ldr	r2, [pc, #152]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f876:	60d3      	str	r3, [r2, #12]
					MAIN_TIMER_CC_REG = r.fast_capture + (s.slow_trigger - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	4b25      	ldr	r3, [pc, #148]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f87c:	68da      	ldr	r2, [r3, #12]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	1ad2      	subs	r2, r2, r3
 800f882:	4b1f      	ldr	r3, [pc, #124]	; (800f900 <mixer_dio3_isr_+0xe0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	440a      	add	r2, r1
 800f888:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800f88a:	4b20      	ldr	r3, [pc, #128]	; (800f90c <mixer_dio3_isr_+0xec>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2208      	movs	r2, #8
 800f890:	605a      	str	r2, [r3, #4]
					LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 5 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 800f892:	4b1e      	ldr	r3, [pc, #120]	; (800f90c <mixer_dio3_isr_+0xec>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	69d9      	ldr	r1, [r3, #28]
 800f898:	4b1e      	ldr	r3, [pc, #120]	; (800f914 <mixer_dio3_isr_+0xf4>)
 800f89a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f89c:	4613      	mov	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	4a1d      	ldr	r2, [pc, #116]	; (800f918 <mixer_dio3_isr_+0xf8>)
 800f8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a8:	09da      	lsrs	r2, r3, #7
 800f8aa:	4b18      	ldr	r3, [pc, #96]	; (800f90c <mixer_dio3_isr_+0xec>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	440a      	add	r2, r1
 800f8b0:	615a      	str	r2, [r3, #20]
					while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800f8b2:	bf00      	nop
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <mixer_dio3_isr_+0xec>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 0308 	and.w	r3, r3, #8
 800f8be:	2b08      	cmp	r3, #8
 800f8c0:	d1f8      	bne.n	800f8b4 <mixer_dio3_isr_+0x94>

					s.grid_timer_flag = 0;
 800f8c2:	4b13      	ldr	r3, [pc, #76]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	751a      	strb	r2, [r3, #20]

					#if MX_HEADER_CHECK
					if (RESYNC != s.slot_state)
 800f8c8:	4b11      	ldr	r3, [pc, #68]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f8ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00a      	beq.n	800f8e8 <mixer_dio3_isr_+0xc8>
					{
						s.valid_header = 1;
 800f8d2:	4b0f      	ldr	r3, [pc, #60]	; (800f910 <mixer_dio3_isr_+0xf0>)
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						MAIN_TIMER_CC_REG = r.fast_capture + radio.after_header_hybrid * FAST_HYBRID_RATIO;
 800f8da:	6879      	ldr	r1, [r7, #4]
 800f8dc:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <mixer_dio3_isr_+0xf4>)
 800f8de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <mixer_dio3_isr_+0xe0>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	440a      	add	r2, r1
 800f8e6:	635a      	str	r2, [r3, #52]	; 0x34
					}
					#endif
				}
				unmask_main_timer(1);
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	f7ff f879 	bl	800e9e0 <unmask_main_timer>
				unmask_slow_timer(1);
 800f8ee:	2001      	movs	r0, #1
 800f8f0:	f7ff f8a0 	bl	800ea34 <unmask_slow_timer>
			}

			PROFILE_ISR("radio ISR return");
 800f8f4:	bf00      	nop
			GPI_TRACE_RETURN_FAST();
 800f8f6:	bf00      	nop
	// 	Dio3Irq = 1;

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
#endif
}
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	200012c8 	.word	0x200012c8
 800f904:	20001308 	.word	0x20001308
 800f908:	2000112c 	.word	0x2000112c
 800f90c:	200011e4 	.word	0x200011e4
 800f910:	20000410 	.word	0x20000410
 800f914:	200003c4 	.word	0x200003c4
 800f918:	4325c53f 	.word	0x4325c53f

0800f91c <LPTIM1_IRQHandler>:

//**************************************************************************************************
// helper ISR for grid timer, see start_grid_timer() for details
void LED_ISR(LP_TIMER_ISR_NAME, GPI_LED_5)
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	4b14      	ldr	r3, [pc, #80]	; (800f974 <LPTIM1_IRQHandler+0x58>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d008      	beq.n	800f93c <LPTIM1_IRQHandler+0x20>
 800f92a:	4b13      	ldr	r3, [pc, #76]	; (800f978 <LPTIM1_IRQHandler+0x5c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	4a12      	ldr	r2, [pc, #72]	; (800f97c <LPTIM1_IRQHandler+0x60>)
 800f932:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800f936:	4b0f      	ldr	r3, [pc, #60]	; (800f974 <LPTIM1_IRQHandler+0x58>)
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	2300      	movs	r3, #0
 800f93e:	603b      	str	r3, [r7, #0]
	if (mask)
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d005      	beq.n	800f952 <LPTIM1_IRQHandler+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800f946:	4b0e      	ldr	r3, [pc, #56]	; (800f980 <LPTIM1_IRQHandler+0x64>)
 800f948:	695a      	ldr	r2, [r3, #20]
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	490c      	ldr	r1, [pc, #48]	; (800f980 <LPTIM1_IRQHandler+0x64>)
 800f94e:	4053      	eors	r3, r2
 800f950:	614b      	str	r3, [r1, #20]
 800f952:	f000 f817 	bl	800f984 <LP_TIMER_ISR_NAME_>
 800f956:	2300      	movs	r3, #0
 800f958:	607b      	str	r3, [r7, #4]
	if (mask)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d005      	beq.n	800f96c <LPTIM1_IRQHandler+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800f960:	4b07      	ldr	r3, [pc, #28]	; (800f980 <LPTIM1_IRQHandler+0x64>)
 800f962:	695a      	ldr	r2, [r3, #20]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4906      	ldr	r1, [pc, #24]	; (800f980 <LPTIM1_IRQHandler+0x64>)
 800f968:	4053      	eors	r3, r2
 800f96a:	614b      	str	r3, [r1, #20]
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	200003b4 	.word	0x200003b4
 800f978:	200012c8 	.word	0x200012c8
 800f97c:	200014f0 	.word	0x200014f0
 800f980:	48000800 	.word	0x48000800

0800f984 <LP_TIMER_ISR_NAME_>:
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
	// start_grid_timer();
	mask_slow_timer();
 800f98a:	f7ff f86b 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800f98e:	4b34      	ldr	r3, [pc, #208]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2201      	movs	r2, #1
 800f994:	605a      	str	r2, [r3, #4]
	if (s.grid_timer_flag)
 800f996:	4b33      	ldr	r3, [pc, #204]	; (800fa64 <LP_TIMER_ISR_NAME_+0xe0>)
 800f998:	7d1b      	ldrb	r3, [r3, #20]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <LP_TIMER_ISR_NAME_+0x20>
	{
		start_grid_timer();
 800f99e:	f7ff f8d9 	bl	800eb54 <start_grid_timer>
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
			unmask_slow_timer(0);
		}
	}
}
 800f9a2:	e059      	b.n	800fa58 <LP_TIMER_ISR_NAME_+0xd4>
		r = gpi_tick_hybrid_reference();
 800f9a4:	1d3b      	adds	r3, r7, #4
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fc f8de 	bl	800bb68 <gpi_tick_hybrid_reference>
		d = s.slow_trigger - r.hybrid_tick;
 800f9ac:	4b2d      	ldr	r3, [pc, #180]	; (800fa64 <LP_TIMER_ISR_NAME_+0xe0>)
 800f9ae:	68da      	ldr	r2, [r3, #12]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	60fb      	str	r3, [r7, #12]
		if (d > 0xF000ul * HYBRID_SLOW_RATIO)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	4a2b      	ldr	r2, [pc, #172]	; (800fa68 <LP_TIMER_ISR_NAME_+0xe4>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d923      	bls.n	800fa06 <LP_TIMER_ISR_NAME_+0x82>
			d = r.hybrid_tick + 0xE000ul * HYBRID_SLOW_RATIO;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f103 73d5 	add.w	r3, r3, #27918336	; 0x1aa0000
 800f9c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f9c8:	60fb      	str	r3, [r7, #12]
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800f9ca:	4b25      	ldr	r3, [pc, #148]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2208      	movs	r2, #8
 800f9d0:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800f9d2:	4b23      	ldr	r3, [pc, #140]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	69d9      	ldr	r1, [r3, #28]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	4a23      	ldr	r2, [pc, #140]	; (800fa6c <LP_TIMER_ISR_NAME_+0xe8>)
 800f9e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e4:	09da      	lsrs	r2, r3, #7
 800f9e6:	4b1e      	ldr	r3, [pc, #120]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	440a      	add	r2, r1
 800f9ec:	615a      	str	r2, [r3, #20]
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800f9ee:	bf00      	nop
 800f9f0:	4b1b      	ldr	r3, [pc, #108]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 0308 	and.w	r3, r3, #8
 800f9fa:	2b08      	cmp	r3, #8
 800f9fc:	d1f8      	bne.n	800f9f0 <LP_TIMER_ISR_NAME_+0x6c>
			unmask_slow_timer(0);
 800f9fe:	2000      	movs	r0, #0
 800fa00:	f7ff f818 	bl	800ea34 <unmask_slow_timer>
}
 800fa04:	e028      	b.n	800fa58 <LP_TIMER_ISR_NAME_+0xd4>
		else if (d > radio.max_tb_interval)
 800fa06:	4b1a      	ldr	r3, [pc, #104]	; (800fa70 <LP_TIMER_ISR_NAME_+0xec>)
 800fa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d923      	bls.n	800fa58 <LP_TIMER_ISR_NAME_+0xd4>
			d = s.slow_trigger - radio.max_tb_interval / 2;
 800fa10:	4b14      	ldr	r3, [pc, #80]	; (800fa64 <LP_TIMER_ISR_NAME_+0xe0>)
 800fa12:	68da      	ldr	r2, [r3, #12]
 800fa14:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <LP_TIMER_ISR_NAME_+0xec>)
 800fa16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa18:	085b      	lsrs	r3, r3, #1
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	60fb      	str	r3, [r7, #12]
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800fa1e:	4b10      	ldr	r3, [pc, #64]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2208      	movs	r2, #8
 800fa24:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + (d - r.hybrid_tick) / HYBRID_SLOW_RATIO;
 800fa26:	4b0e      	ldr	r3, [pc, #56]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	69d9      	ldr	r1, [r3, #28]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	4a0e      	ldr	r2, [pc, #56]	; (800fa6c <LP_TIMER_ISR_NAME_+0xe8>)
 800fa34:	fba2 2303 	umull	r2, r3, r2, r3
 800fa38:	09da      	lsrs	r2, r3, #7
 800fa3a:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	440a      	add	r2, r1
 800fa40:	615a      	str	r2, [r3, #20]
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800fa42:	bf00      	nop
 800fa44:	4b06      	ldr	r3, [pc, #24]	; (800fa60 <LP_TIMER_ISR_NAME_+0xdc>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f003 0308 	and.w	r3, r3, #8
 800fa4e:	2b08      	cmp	r3, #8
 800fa50:	d1f8      	bne.n	800fa44 <LP_TIMER_ISR_NAME_+0xc0>
			unmask_slow_timer(0);
 800fa52:	2000      	movs	r0, #0
 800fa54:	f7fe ffee 	bl	800ea34 <unmask_slow_timer>
}
 800fa58:	bf00      	nop
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	200011e4 	.word	0x200011e4
 800fa64:	20000410 	.word	0x20000410
 800fa68:	01c98000 	.word	0x01c98000
 800fa6c:	4325c53f 	.word	0x4325c53f
 800fa70:	200003c4 	.word	0x200003c4

0800fa74 <mixer_main_timer_isr>:
	// 	case RESYNC:			timeout_isr(); grid_timer_isr();	break;
	// 	case RX_RUNNING:		timeout_isr();						break;
	// 	case TX_RUNNING, IDLE:	grid_timer_isr();					break;
	// 	default:				undefined behavior
	// }
	__asm__ volatile
 800fa74:	4806      	ldr	r0, [pc, #24]	; (800fa90 <mixer_main_timer_isr+0x1c>)
 800fa76:	7800      	ldrb	r0, [r0, #0]
 800fa78:	4487      	add	pc, r0
 800fa7a:	bf00      	nop
 800fa7c:	f84d ed04 	str.w	lr, [sp, #-4]!
 800fa80:	f000 f80a 	bl	800fa98 <timeout_isr>
 800fa84:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa88:	f000 bb5e 	b.w	8010148 <grid_timer_isr>
 800fa8c:	f000 b804 	b.w	800fa98 <timeout_isr>
 800fa90:	20000440 	.word	0x20000440
		"b.w	timeout_isr			\n"		// 16: timeout (don't return to here)
		"1:							\n"
		".word	%c0					\n"
		: : "i"(&s.slot_state)
	);
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop

0800fa98 <timeout_isr>:

//**************************************************************************************************

// timeout ISR
// triggered if there was no successful packet transfer in a specific time interval
void LED_ISR(timeout_isr, LED_TIMEOUT_ISR)
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4b14      	ldr	r3, [pc, #80]	; (800faf0 <timeout_isr+0x58>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d008      	beq.n	800fab8 <timeout_isr+0x20>
 800faa6:	4b13      	ldr	r3, [pc, #76]	; (800faf4 <timeout_isr+0x5c>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	4a12      	ldr	r2, [pc, #72]	; (800faf8 <timeout_isr+0x60>)
 800faae:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 800fab2:	4b0f      	ldr	r3, [pc, #60]	; (800faf0 <timeout_isr+0x58>)
 800fab4:	2200      	movs	r2, #0
 800fab6:	601a      	str	r2, [r3, #0]
 800fab8:	2300      	movs	r3, #0
 800faba:	603b      	str	r3, [r7, #0]
	if (mask)
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d005      	beq.n	800face <timeout_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 800fac2:	4b0e      	ldr	r3, [pc, #56]	; (800fafc <timeout_isr+0x64>)
 800fac4:	695a      	ldr	r2, [r3, #20]
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	490c      	ldr	r1, [pc, #48]	; (800fafc <timeout_isr+0x64>)
 800faca:	4053      	eors	r3, r2
 800facc:	614b      	str	r3, [r1, #20]
 800face:	f000 f817 	bl	800fb00 <timeout_isr_>
 800fad2:	2300      	movs	r3, #0
 800fad4:	607b      	str	r3, [r7, #4]
	if (mask)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d005      	beq.n	800fae8 <timeout_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 800fadc:	4b07      	ldr	r3, [pc, #28]	; (800fafc <timeout_isr+0x64>)
 800fade:	695a      	ldr	r2, [r3, #20]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4906      	ldr	r1, [pc, #24]	; (800fafc <timeout_isr+0x64>)
 800fae4:	4053      	eors	r3, r2
 800fae6:	614b      	str	r3, [r1, #20]
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	200003b4 	.word	0x200003b4
 800faf4:	200012c8 	.word	0x200012c8
 800faf8:	200014f0 	.word	0x200014f0
 800fafc:	48000800 	.word	0x48000800

0800fb00 <timeout_isr_>:
{
 800fb00:	b590      	push	{r4, r7, lr}
 800fb02:	b08d      	sub	sp, #52	; 0x34
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	4b97      	ldr	r3, [pc, #604]	; (800fd64 <timeout_isr_+0x264>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 800fb0c:	4a96      	ldr	r2, [pc, #600]	; (800fd68 <timeout_isr_+0x268>)
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	4b96      	ldr	r3, [pc, #600]	; (800fd6c <timeout_isr_+0x26c>)
 800fb12:	2201      	movs	r2, #1
 800fb14:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_FUNCTION_FAST();
 800fb16:	bf00      	nop
	PROFILE_ISR("timeout ISR entry");
 800fb18:	bf00      	nop

	mask_main_timer();
 800fb1a:	f7fe ff79 	bl	800ea10 <mask_main_timer>

	//clear IRQ
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800fb1e:	4b91      	ldr	r3, [pc, #580]	; (800fd64 <timeout_isr_+0x264>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f06f 0202 	mvn.w	r2, #2
 800fb26:	611a      	str	r2, [r3, #16]

	mask_slow_timer();
 800fb28:	f7fe ff9c 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 800fb2c:	4b90      	ldr	r3, [pc, #576]	; (800fd70 <timeout_isr_+0x270>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2201      	movs	r2, #1
 800fb32:	605a      	str	r2, [r3, #4]

	#if MX_LBT_ACCESS
	if (s.lbt_rx_on)
 800fb34:	4b8f      	ldr	r3, [pc, #572]	; (800fd74 <timeout_isr_+0x274>)
 800fb36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f000 815c 	beq.w	800fdf8 <timeout_isr_+0x2f8>
	{
		/* Bit 0: Signal Detected, see SX1276/77/78/79 - 137 MHz to 1020 MHz, Rev. 5, Page 46 */
		if (SX1276Read( REG_LR_MODEMSTAT ) & RFLR_MODEMSTAT_MODEM_STATUS_SIGNAL_MASK)
 800fb40:	2018      	movs	r0, #24
 800fb42:	f7fc ff93 	bl	800ca6c <SX1276Read>
 800fb46:	4603      	mov	r3, r0
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d04f      	beq.n	800fbf0 <timeout_isr_+0xf0>
		{
			s.lbt_rx_on = 0;
 800fb50:	4b88      	ldr	r3, [pc, #544]	; (800fd74 <timeout_isr_+0x274>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* waiting for a valid header time */
			MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(radio.header_time) + 4 * radio.grid_drift_offset * FAST_HYBRID_RATIO;
 800fb58:	4b82      	ldr	r3, [pc, #520]	; (800fd64 <timeout_isr_+0x264>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fb5e:	4b86      	ldr	r3, [pc, #536]	; (800fd78 <timeout_isr_+0x278>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a86      	ldr	r2, [pc, #536]	; (800fd7c <timeout_isr_+0x27c>)
 800fb64:	fba2 2303 	umull	r2, r3, r2, r3
 800fb68:	0c9b      	lsrs	r3, r3, #18
 800fb6a:	4a85      	ldr	r2, [pc, #532]	; (800fd80 <timeout_isr_+0x280>)
 800fb6c:	fb02 f003 	mul.w	r0, r2, r3
 800fb70:	4b81      	ldr	r3, [pc, #516]	; (800fd78 <timeout_isr_+0x278>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a83      	ldr	r2, [pc, #524]	; (800fd84 <timeout_isr_+0x284>)
 800fb76:	fba2 2303 	umull	r2, r3, r2, r3
 800fb7a:	099a      	lsrs	r2, r3, #6
 800fb7c:	4b81      	ldr	r3, [pc, #516]	; (800fd84 <timeout_isr_+0x284>)
 800fb7e:	fba3 4302 	umull	r4, r3, r3, r2
 800fb82:	099b      	lsrs	r3, r3, #6
 800fb84:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fb88:	fb04 f303 	mul.w	r3, r4, r3
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800fb92:	fb02 f303 	mul.w	r3, r2, r3
 800fb96:	4418      	add	r0, r3
 800fb98:	4b77      	ldr	r3, [pc, #476]	; (800fd78 <timeout_isr_+0x278>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	4b79      	ldr	r3, [pc, #484]	; (800fd84 <timeout_isr_+0x284>)
 800fb9e:	fba3 4302 	umull	r4, r3, r3, r2
 800fba2:	099b      	lsrs	r3, r3, #6
 800fba4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fba8:	fb04 f303 	mul.w	r3, r4, r3
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	011b      	lsls	r3, r3, #4
 800fbb0:	4403      	add	r3, r0
 800fbb2:	4419      	add	r1, r3
 800fbb4:	4b70      	ldr	r3, [pc, #448]	; (800fd78 <timeout_isr_+0x278>)
 800fbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbb8:	009a      	lsls	r2, r3, #2
 800fbba:	4b6a      	ldr	r3, [pc, #424]	; (800fd64 <timeout_isr_+0x264>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	440a      	add	r2, r1
 800fbc0:	635a      	str	r2, [r3, #52]	; 0x34
			unmask_main_timer(1);
 800fbc2:	2001      	movs	r0, #1
 800fbc4:	f7fe ff0c 	bl	800e9e0 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800fbc8:	4b68      	ldr	r3, [pc, #416]	; (800fd6c <timeout_isr_+0x26c>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 82a3 	beq.w	8010118 <timeout_isr_+0x618>
 800fbd2:	4b64      	ldr	r3, [pc, #400]	; (800fd64 <timeout_isr_+0x264>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbd8:	4b63      	ldr	r3, [pc, #396]	; (800fd68 <timeout_isr_+0x268>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	1ad2      	subs	r2, r2, r3
 800fbde:	4b6a      	ldr	r3, [pc, #424]	; (800fd88 <timeout_isr_+0x288>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	4a68      	ldr	r2, [pc, #416]	; (800fd88 <timeout_isr_+0x288>)
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	4b60      	ldr	r3, [pc, #384]	; (800fd6c <timeout_isr_+0x26c>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]
#endif
			GPI_TRACE_RETURN_FAST();
 800fbee:	e293      	b.n	8010118 <timeout_isr_+0x618>
		}
		else
		{
			s.lbt_channel_seq_no ++;
 800fbf0:	4b60      	ldr	r3, [pc, #384]	; (800fd74 <timeout_isr_+0x274>)
 800fbf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b5e      	ldr	r3, [pc, #376]	; (800fd74 <timeout_isr_+0x274>)
 800fbfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			SX1276SetOpMode(RFLR_OPMODE_SLEEP);
 800fc00:	2000      	movs	r0, #0
 800fc02:	f7fc fea9 	bl	800c958 <SX1276SetOpMode>
			if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 800fc06:	4b5b      	ldr	r3, [pc, #364]	; (800fd74 <timeout_isr_+0x274>)
 800fc08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	f200 80c3 	bhi.w	800fd98 <timeout_isr_+0x298>
			{
				Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800fc12:	f107 030c 	add.w	r3, r7, #12
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fb ffa6 	bl	800bb68 <gpi_tick_hybrid_reference>
				/* hop to another channel, random seed is related to round seq, slot number and channel seq */
				uint8_t now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 800fc1c:	4b5b      	ldr	r3, [pc, #364]	; (800fd8c <timeout_isr_+0x28c>)
 800fc1e:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 800fc22:	4b5a      	ldr	r3, [pc, #360]	; (800fd8c <timeout_isr_+0x28c>)
 800fc24:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 800fc28:	4b59      	ldr	r3, [pc, #356]	; (800fd90 <timeout_isr_+0x290>)
 800fc2a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	4b56      	ldr	r3, [pc, #344]	; (800fd8c <timeout_isr_+0x28c>)
 800fc32:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	4413      	add	r3, r2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	4b4d      	ldr	r3, [pc, #308]	; (800fd74 <timeout_isr_+0x274>)
 800fc3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	4413      	add	r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	4b50      	ldr	r3, [pc, #320]	; (800fd8c <timeout_isr_+0x28c>)
 800fc4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc4c:	f7fa fc10 	bl	800a470 <lbt_pesudo_channel>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				SX1276SetChannel(chirp_config.lora_freq + now_channel * CHANNEL_STEP);
 800fc56:	4b4d      	ldr	r3, [pc, #308]	; (800fd8c <timeout_isr_+0x28c>)
 800fc58:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800fc5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fc60:	494c      	ldr	r1, [pc, #304]	; (800fd94 <timeout_isr_+0x294>)
 800fc62:	fb01 f202 	mul.w	r2, r1, r2
 800fc66:	4413      	add	r3, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7fc fa0f 	bl	800c08c <SX1276SetChannel>
				SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800fc6e:	2005      	movs	r0, #5
 800fc70:	f7fc fe72 	bl	800c958 <SX1276SetOpMode>
				/* waiting for a valid header time */
				Gpi_Hybrid_Tick t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset + GPI_TICK_US_TO_FAST2(chirp_config.lbt_detect_duration_us * (s.lbt_channel_seq_no + 1) - radio.isr_latency_buffer + LBT_DELAY_IN_US);
 800fc74:	4b3f      	ldr	r3, [pc, #252]	; (800fd74 <timeout_isr_+0x274>)
 800fc76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc78:	4b3e      	ldr	r3, [pc, #248]	; (800fd74 <timeout_isr_+0x274>)
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	441a      	add	r2, r3
 800fc7e:	4b3e      	ldr	r3, [pc, #248]	; (800fd78 <timeout_isr_+0x278>)
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	1ad1      	subs	r1, r2, r3
 800fc84:	4b41      	ldr	r3, [pc, #260]	; (800fd8c <timeout_isr_+0x28c>)
 800fc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc88:	4a3a      	ldr	r2, [pc, #232]	; (800fd74 <timeout_isr_+0x274>)
 800fc8a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fc8e:	3201      	adds	r2, #1
 800fc90:	fb02 f203 	mul.w	r2, r2, r3
 800fc94:	4b38      	ldr	r3, [pc, #224]	; (800fd78 <timeout_isr_+0x278>)
 800fc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fc9e:	3310      	adds	r3, #16
 800fca0:	4a36      	ldr	r2, [pc, #216]	; (800fd7c <timeout_isr_+0x27c>)
 800fca2:	fba2 2303 	umull	r2, r3, r2, r3
 800fca6:	0c9b      	lsrs	r3, r3, #18
 800fca8:	4a35      	ldr	r2, [pc, #212]	; (800fd80 <timeout_isr_+0x280>)
 800fcaa:	fb02 f003 	mul.w	r0, r2, r3
 800fcae:	4b37      	ldr	r3, [pc, #220]	; (800fd8c <timeout_isr_+0x28c>)
 800fcb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcb2:	4a30      	ldr	r2, [pc, #192]	; (800fd74 <timeout_isr_+0x274>)
 800fcb4:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fcb8:	3201      	adds	r2, #1
 800fcba:	fb02 f203 	mul.w	r2, r2, r3
 800fcbe:	4b2e      	ldr	r3, [pc, #184]	; (800fd78 <timeout_isr_+0x278>)
 800fcc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc2:	1ad3      	subs	r3, r2, r3
 800fcc4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fcc8:	3310      	adds	r3, #16
 800fcca:	4a2e      	ldr	r2, [pc, #184]	; (800fd84 <timeout_isr_+0x284>)
 800fccc:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd0:	099a      	lsrs	r2, r3, #6
 800fcd2:	4b2c      	ldr	r3, [pc, #176]	; (800fd84 <timeout_isr_+0x284>)
 800fcd4:	fba3 4302 	umull	r4, r3, r3, r2
 800fcd8:	099b      	lsrs	r3, r3, #6
 800fcda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fcde:	fb04 f303 	mul.w	r3, r4, r3
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800fce8:	fb02 f303 	mul.w	r3, r2, r3
 800fcec:	4418      	add	r0, r3
 800fcee:	4b27      	ldr	r3, [pc, #156]	; (800fd8c <timeout_isr_+0x28c>)
 800fcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcf2:	4a20      	ldr	r2, [pc, #128]	; (800fd74 <timeout_isr_+0x274>)
 800fcf4:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800fcf8:	3201      	adds	r2, #1
 800fcfa:	fb02 f203 	mul.w	r2, r2, r3
 800fcfe:	4b1e      	ldr	r3, [pc, #120]	; (800fd78 <timeout_isr_+0x278>)
 800fd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800fd08:	3310      	adds	r3, #16
 800fd0a:	4a1e      	ldr	r2, [pc, #120]	; (800fd84 <timeout_isr_+0x284>)
 800fd0c:	fba2 4203 	umull	r4, r2, r2, r3
 800fd10:	0992      	lsrs	r2, r2, #6
 800fd12:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fd16:	fb04 f202 	mul.w	r2, r4, r2
 800fd1a:	1a9a      	subs	r2, r3, r2
 800fd1c:	0113      	lsls	r3, r2, #4
 800fd1e:	4403      	add	r3, r0
 800fd20:	440b      	add	r3, r1
 800fd22:	62bb      	str	r3, [r7, #40]	; 0x28
				MAIN_TIMER_CC_REG = r.fast_capture + (t - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800fd24:	6939      	ldr	r1, [r7, #16]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2a:	1ad2      	subs	r2, r2, r3
 800fd2c:	4b0d      	ldr	r3, [pc, #52]	; (800fd64 <timeout_isr_+0x264>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	440a      	add	r2, r1
 800fd32:	635a      	str	r2, [r3, #52]	; 0x34

				unmask_main_timer(1);
 800fd34:	2001      	movs	r0, #1
 800fd36:	f7fe fe53 	bl	800e9e0 <unmask_main_timer>
#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800fd3a:	4b0c      	ldr	r3, [pc, #48]	; (800fd6c <timeout_isr_+0x26c>)
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f000 81ec 	beq.w	801011c <timeout_isr_+0x61c>
 800fd44:	4b07      	ldr	r3, [pc, #28]	; (800fd64 <timeout_isr_+0x264>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd4a:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <timeout_isr_+0x268>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	1ad2      	subs	r2, r2, r3
 800fd50:	4b0d      	ldr	r3, [pc, #52]	; (800fd88 <timeout_isr_+0x288>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4413      	add	r3, r2
 800fd56:	4a0c      	ldr	r2, [pc, #48]	; (800fd88 <timeout_isr_+0x288>)
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	4b04      	ldr	r3, [pc, #16]	; (800fd6c <timeout_isr_+0x26c>)
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	701a      	strb	r2, [r3, #0]
#endif
				GPI_TRACE_RETURN_FAST();
 800fd60:	bf00      	nop
 800fd62:	e1db      	b.n	801011c <timeout_isr_+0x61c>
 800fd64:	200012c8 	.word	0x200012c8
 800fd68:	20001308 	.word	0x20001308
 800fd6c:	2000112c 	.word	0x2000112c
 800fd70:	200011e4 	.word	0x200011e4
 800fd74:	20000410 	.word	0x20000410
 800fd78:	200003c4 	.word	0x200003c4
 800fd7c:	431bde83 	.word	0x431bde83
 800fd80:	00f42400 	.word	0x00f42400
 800fd84:	10624dd3 	.word	0x10624dd3
 800fd88:	20000f10 	.word	0x20000f10
 800fd8c:	20001430 	.word	0x20001430
 800fd90:	200014f0 	.word	0x200014f0
 800fd94:	00030d40 	.word	0x00030d40
			}
			else
			{
				s.lbt_rx_on = 0;
 800fd98:	4b9e      	ldr	r3, [pc, #632]	; (8010014 <timeout_isr_+0x514>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				s.lbt_channel_seq_no = 0;
 800fda0:	4b9c      	ldr	r3, [pc, #624]	; (8010014 <timeout_isr_+0x514>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fda8:	2300      	movs	r3, #0
 800fdaa:	623b      	str	r3, [r7, #32]
	if (mask)
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <timeout_isr_+0x2b8>
		LED_GPIO_Port->BRR = mask;
 800fdb2:	4a99      	ldr	r2, [pc, #612]	; (8010018 <timeout_isr_+0x518>)
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	6293      	str	r3, [r2, #40]	; 0x28
				gpi_led_off(LED_RX);
				#if ENERGEST_CONF_ON
					ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800fdb8:	4b98      	ldr	r3, [pc, #608]	; (801001c <timeout_isr_+0x51c>)
 800fdba:	7bdb      	ldrb	r3, [r3, #15]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00d      	beq.n	800fddc <timeout_isr_+0x2dc>
 800fdc0:	4b97      	ldr	r3, [pc, #604]	; (8010020 <timeout_isr_+0x520>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdc6:	4b97      	ldr	r3, [pc, #604]	; (8010024 <timeout_isr_+0x524>)
 800fdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdca:	1ad2      	subs	r2, r2, r3
 800fdcc:	4b96      	ldr	r3, [pc, #600]	; (8010028 <timeout_isr_+0x528>)
 800fdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd0:	4413      	add	r3, r2
 800fdd2:	4a95      	ldr	r2, [pc, #596]	; (8010028 <timeout_isr_+0x528>)
 800fdd4:	63d3      	str	r3, [r2, #60]	; 0x3c
 800fdd6:	4b91      	ldr	r3, [pc, #580]	; (801001c <timeout_isr_+0x51c>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	73da      	strb	r2, [r3, #15]
				#endif
				/* no packets in this slot */
				SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 800fddc:	4b93      	ldr	r3, [pc, #588]	; (801002c <timeout_isr_+0x52c>)
 800fdde:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800fde2:	4a92      	ldr	r2, [pc, #584]	; (801002c <timeout_isr_+0x52c>)
 800fde4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800fde8:	4611      	mov	r1, r2
 800fdea:	4a91      	ldr	r2, [pc, #580]	; (8010030 <timeout_isr_+0x530>)
 800fdec:	fb02 f201 	mul.w	r2, r2, r1
 800fdf0:	4413      	add	r3, r2
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fc f94a 	bl	800c08c <SX1276SetChannel>
		}
	}
	#endif

	#if MX_HEADER_CHECK
	if (s.valid_header)
 800fdf8:	4b86      	ldr	r3, [pc, #536]	; (8010014 <timeout_isr_+0x514>)
 800fdfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f000 8087 	beq.w	800ff12 <timeout_isr_+0x412>
	{
		s.valid_header = 0;
 800fe04:	4b83      	ldr	r3, [pc, #524]	; (8010014 <timeout_isr_+0x514>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		memset( APP_HEADER_FIFO, 0, HASH_HEADER );
 800fe0c:	2204      	movs	r2, #4
 800fe0e:	2100      	movs	r1, #0
 800fe10:	4888      	ldr	r0, [pc, #544]	; (8010034 <timeout_isr_+0x534>)
 800fe12:	f011 fe06 	bl	8021a22 <memset>
		SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ));
 800fe16:	2010      	movs	r0, #16
 800fe18:	f7fc fe28 	bl	800ca6c <SX1276Read>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	4619      	mov	r1, r3
 800fe20:	200d      	movs	r0, #13
 800fe22:	f7fc fe11 	bl	800ca48 <SX1276Write>
		SX1276ReadFifo( APP_HEADER_FIFO, HASH_HEADER );
 800fe26:	2104      	movs	r1, #4
 800fe28:	4882      	ldr	r0, [pc, #520]	; (8010034 <timeout_isr_+0x534>)
 800fe2a:	f7fc fea7 	bl	800cb7c <SX1276ReadFifo>
		uint32_t app_header = APP_HEADER_FIFO[3] << 24 | APP_HEADER_FIFO[2] << 16 | APP_HEADER_FIFO[1] << 8 | APP_HEADER_FIFO[0];
 800fe2e:	4b81      	ldr	r3, [pc, #516]	; (8010034 <timeout_isr_+0x534>)
 800fe30:	78db      	ldrb	r3, [r3, #3]
 800fe32:	061a      	lsls	r2, r3, #24
 800fe34:	4b7f      	ldr	r3, [pc, #508]	; (8010034 <timeout_isr_+0x534>)
 800fe36:	789b      	ldrb	r3, [r3, #2]
 800fe38:	041b      	lsls	r3, r3, #16
 800fe3a:	431a      	orrs	r2, r3
 800fe3c:	4b7d      	ldr	r3, [pc, #500]	; (8010034 <timeout_isr_+0x534>)
 800fe3e:	785b      	ldrb	r3, [r3, #1]
 800fe40:	021b      	lsls	r3, r3, #8
 800fe42:	4313      	orrs	r3, r2
 800fe44:	4a7b      	ldr	r2, [pc, #492]	; (8010034 <timeout_isr_+0x534>)
 800fe46:	7812      	ldrb	r2, [r2, #0]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (app_header == chirp_config.packet_hash)
 800fe4c:	4b77      	ldr	r3, [pc, #476]	; (801002c <timeout_isr_+0x52c>)
 800fe4e:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 800fe52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d151      	bne.n	800fefc <timeout_isr_+0x3fc>
		{
			Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 800fe58:	1d3b      	adds	r3, r7, #4
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fb fe84 	bl	800bb68 <gpi_tick_hybrid_reference>
			s.slow_trigger = r.hybrid_tick + radio.packet_air_time;
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	4b75      	ldr	r3, [pc, #468]	; (8010038 <timeout_isr_+0x538>)
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	4413      	add	r3, r2
 800fe68:	4a6a      	ldr	r2, [pc, #424]	; (8010014 <timeout_isr_+0x514>)
 800fe6a:	60d3      	str	r3, [r2, #12]
			MAIN_TIMER_CC_REG = r.fast_capture + (s.slow_trigger - r.hybrid_tick) * FAST_HYBRID_RATIO;
 800fe6c:	68b9      	ldr	r1, [r7, #8]
 800fe6e:	4b69      	ldr	r3, [pc, #420]	; (8010014 <timeout_isr_+0x514>)
 800fe70:	68da      	ldr	r2, [r3, #12]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	1ad2      	subs	r2, r2, r3
 800fe76:	4b6a      	ldr	r3, [pc, #424]	; (8010020 <timeout_isr_+0x520>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	440a      	add	r2, r1
 800fe7c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 800fe7e:	4b6f      	ldr	r3, [pc, #444]	; (801003c <timeout_isr_+0x53c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2208      	movs	r2, #8
 800fe84:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 5 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 800fe86:	4b6d      	ldr	r3, [pc, #436]	; (801003c <timeout_isr_+0x53c>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	69d9      	ldr	r1, [r3, #28]
 800fe8c:	4b6a      	ldr	r3, [pc, #424]	; (8010038 <timeout_isr_+0x538>)
 800fe8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe90:	4613      	mov	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	4a6a      	ldr	r2, [pc, #424]	; (8010040 <timeout_isr_+0x540>)
 800fe98:	fba2 2303 	umull	r2, r3, r2, r3
 800fe9c:	09da      	lsrs	r2, r3, #7
 800fe9e:	4b67      	ldr	r3, [pc, #412]	; (801003c <timeout_isr_+0x53c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	440a      	add	r2, r1
 800fea4:	615a      	str	r2, [r3, #20]
			s.grid_timer_flag = 0;
 800fea6:	4b5b      	ldr	r3, [pc, #364]	; (8010014 <timeout_isr_+0x514>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	751a      	strb	r2, [r3, #20]
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 800feac:	4b5c      	ldr	r3, [pc, #368]	; (8010020 <timeout_isr_+0x520>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f06f 0202 	mvn.w	r2, #2
 800feb4:	611a      	str	r2, [r3, #16]

			unmask_main_timer(1);
 800feb6:	2001      	movs	r0, #1
 800feb8:	f7fe fd92 	bl	800e9e0 <unmask_main_timer>
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 800febc:	bf00      	nop
 800febe:	4b5f      	ldr	r3, [pc, #380]	; (801003c <timeout_isr_+0x53c>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f003 0308 	and.w	r3, r3, #8
 800fec8:	2b08      	cmp	r3, #8
 800feca:	d1f8      	bne.n	800febe <timeout_isr_+0x3be>
			unmask_slow_timer(1);
 800fecc:	2001      	movs	r0, #1
 800fece:	f7fe fdb1 	bl	800ea34 <unmask_slow_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 800fed2:	4b52      	ldr	r3, [pc, #328]	; (801001c <timeout_isr_+0x51c>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 8122 	beq.w	8010120 <timeout_isr_+0x620>
 800fedc:	4b50      	ldr	r3, [pc, #320]	; (8010020 <timeout_isr_+0x520>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fee2:	4b50      	ldr	r3, [pc, #320]	; (8010024 <timeout_isr_+0x524>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	1ad2      	subs	r2, r2, r3
 800fee8:	4b4f      	ldr	r3, [pc, #316]	; (8010028 <timeout_isr_+0x528>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4413      	add	r3, r2
 800feee:	4a4e      	ldr	r2, [pc, #312]	; (8010028 <timeout_isr_+0x528>)
 800fef0:	6013      	str	r3, [r2, #0]
 800fef2:	4b4a      	ldr	r3, [pc, #296]	; (801001c <timeout_isr_+0x51c>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	701a      	strb	r2, [r3, #0]
#endif
			GPI_TRACE_RETURN_FAST();
 800fef8:	bf00      	nop
 800fefa:	e111      	b.n	8010120 <timeout_isr_+0x620>
		}
		else
		{
			// turn radio off
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800fefc:	2000      	movs	r0, #0
 800fefe:	f7fc fd2b 	bl	800c958 <SX1276SetOpMode>
 800ff02:	2300      	movs	r3, #0
 800ff04:	61fb      	str	r3, [r7, #28]
	if (mask)
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d002      	beq.n	800ff12 <timeout_isr_+0x412>
		LED_GPIO_Port->BRR = mask;
 800ff0c:	4a42      	ldr	r2, [pc, #264]	; (8010018 <timeout_isr_+0x518>)
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	6293      	str	r3, [r2, #40]	; 0x28
	}
	#endif
	// NOTE: being here implies that Rx is active (state = RESYNC or RX_RUNNING)
	// mask interrupts (radio)
	// NOTE: stopping timeout timer is not needed since this is done implicitely below
	SX1276Write( REG_LR_IRQFLAGSMASK, 0xFFFF );
 800ff12:	21ff      	movs	r1, #255	; 0xff
 800ff14:	2011      	movs	r0, #17
 800ff16:	f7fc fd97 	bl	800ca48 <SX1276Write>

	// turn radio off
	SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	f7fc fd1c 	bl	800c958 <SX1276SetOpMode>
 800ff20:	2300      	movs	r3, #0
 800ff22:	61bb      	str	r3, [r7, #24]
	if (mask)
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d002      	beq.n	800ff30 <timeout_isr_+0x430>
		LED_GPIO_Port->BRR = mask;
 800ff2a:	4a3b      	ldr	r2, [pc, #236]	; (8010018 <timeout_isr_+0x518>)
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	6293      	str	r3, [r2, #40]	; 0x28
	gpi_led_off(LED_RX | LED_TX);

	#if MX_VERBOSE_STATISTICS
	if (s.radio_start_timestamp & 1)
 800ff30:	4b38      	ldr	r3, [pc, #224]	; (8010014 <timeout_isr_+0x514>)
 800ff32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff34:	f003 0301 	and.w	r3, r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d00f      	beq.n	800ff5c <timeout_isr_+0x45c>
 800ff3c:	4b38      	ldr	r3, [pc, #224]	; (8010020 <timeout_isr_+0x520>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	{
		mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 800ff42:	4b34      	ldr	r3, [pc, #208]	; (8010014 <timeout_isr_+0x514>)
 800ff44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff46:	1ad2      	subs	r2, r2, r3
 800ff48:	4b3e      	ldr	r3, [pc, #248]	; (8010044 <timeout_isr_+0x544>)
 800ff4a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800ff4e:	4413      	add	r3, r2
 800ff50:	4a3c      	ldr	r2, [pc, #240]	; (8010044 <timeout_isr_+0x544>)
 800ff52:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
		s.radio_start_timestamp = 0;
 800ff56:	4b2f      	ldr	r3, [pc, #188]	; (8010014 <timeout_isr_+0x514>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	#endif

	#if ENERGEST_CONF_ON
		ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 800ff5c:	4b2f      	ldr	r3, [pc, #188]	; (801001c <timeout_isr_+0x51c>)
 800ff5e:	7bdb      	ldrb	r3, [r3, #15]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00d      	beq.n	800ff80 <timeout_isr_+0x480>
 800ff64:	4b2e      	ldr	r3, [pc, #184]	; (8010020 <timeout_isr_+0x520>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff6a:	4b2e      	ldr	r3, [pc, #184]	; (8010024 <timeout_isr_+0x524>)
 800ff6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff6e:	1ad2      	subs	r2, r2, r3
 800ff70:	4b2d      	ldr	r3, [pc, #180]	; (8010028 <timeout_isr_+0x528>)
 800ff72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff74:	4413      	add	r3, r2
 800ff76:	4a2c      	ldr	r2, [pc, #176]	; (8010028 <timeout_isr_+0x528>)
 800ff78:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ff7a:	4b28      	ldr	r3, [pc, #160]	; (801001c <timeout_isr_+0x51c>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	73da      	strb	r2, [r3, #15]
	#endif

	if (s.slot_state != RESYNC)
 800ff80:	4b24      	ldr	r3, [pc, #144]	; (8010014 <timeout_isr_+0x514>)
 800ff82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 80b1 	beq.w	80100ee <timeout_isr_+0x5ee>

		// if Rx window exceeds limit: start RESYNC
		// NOTE: we start RESYNC immediately (instead of saturating) because we probably lost
		// synchronization and hence do not expect to receive something anymore
		// if (s.rx_trigger_offset > RX_TO_GRID_OFFSET + RX_WINDOW_MAX)
		if (s.rx_trigger_offset > radio.rx_to_grid_offset + 10 * radio.rx_window_max)
 800ff8c:	4b21      	ldr	r3, [pc, #132]	; (8010014 <timeout_isr_+0x514>)
 800ff8e:	6a19      	ldr	r1, [r3, #32]
 800ff90:	4b29      	ldr	r3, [pc, #164]	; (8010038 <timeout_isr_+0x538>)
 800ff92:	6918      	ldr	r0, [r3, #16]
 800ff94:	4b28      	ldr	r3, [pc, #160]	; (8010038 <timeout_isr_+0x538>)
 800ff96:	69da      	ldr	r2, [r3, #28]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	4403      	add	r3, r0
 800ffa2:	4299      	cmp	r1, r3
 800ffa4:	f240 8092 	bls.w	80100cc <timeout_isr_+0x5cc>
		{
			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_window_overflow++;
 800ffa8:	4b26      	ldr	r3, [pc, #152]	; (8010044 <timeout_isr_+0x544>)
 800ffaa:	f8b3 387c 	ldrh.w	r3, [r3, #2172]	; 0x87c
 800ffae:	3301      	adds	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	4b24      	ldr	r3, [pc, #144]	; (8010044 <timeout_isr_+0x544>)
 800ffb4:	f8a3 287c 	strh.w	r2, [r3, #2172]	; 0x87c
				mx.stat_counter.num_resync++;
 800ffb8:	4b22      	ldr	r3, [pc, #136]	; (8010044 <timeout_isr_+0x544>)
 800ffba:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	4b20      	ldr	r3, [pc, #128]	; (8010044 <timeout_isr_+0x544>)
 800ffc4:	f8a3 2878 	strh.w	r2, [r3, #2168]	; 0x878
			#endif
			GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx window overflow: %u > %u -> enter RESYNC",
 800ffc8:	bf00      	nop
 800ffca:	2300      	movs	r3, #0
 800ffcc:	617b      	str	r3, [r7, #20]
	if (2 == mode)
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d108      	bne.n	800ffe6 <timeout_isr_+0x4e6>
		s.slot_state = IDLE;
 800ffd4:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <timeout_isr_+0x514>)
 800ffd6:	220c      	movs	r2, #12
 800ffd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 800ffdc:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <timeout_isr_+0x514>)
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ffe4:	e038      	b.n	8010058 <timeout_isr_+0x558>
	else if (1 == mode)
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d108      	bne.n	800fffe <timeout_isr_+0x4fe>
		s.slot_state = RESYNC;
 800ffec:	4b09      	ldr	r3, [pc, #36]	; (8010014 <timeout_isr_+0x514>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 800fff4:	4b07      	ldr	r3, [pc, #28]	; (8010014 <timeout_isr_+0x514>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fffc:	e02c      	b.n	8010058 <timeout_isr_+0x558>
	else if (STOP == s.next_slot_task)
 800fffe:	4b05      	ldr	r3, [pc, #20]	; (8010014 <timeout_isr_+0x514>)
 8010000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010004:	2b02      	cmp	r3, #2
 8010006:	d11f      	bne.n	8010048 <timeout_isr_+0x548>
		s.slot_state = IDLE;
 8010008:	4b02      	ldr	r3, [pc, #8]	; (8010014 <timeout_isr_+0x514>)
 801000a:	220c      	movs	r2, #12
 801000c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010010:	e022      	b.n	8010058 <timeout_isr_+0x558>
 8010012:	bf00      	nop
 8010014:	20000410 	.word	0x20000410
 8010018:	48000800 	.word	0x48000800
 801001c:	2000112c 	.word	0x2000112c
 8010020:	200012c8 	.word	0x200012c8
 8010024:	20001308 	.word	0x20001308
 8010028:	20000f10 	.word	0x20000f10
 801002c:	20001430 	.word	0x20001430
 8010030:	00030d40 	.word	0x00030d40
 8010034:	2000045c 	.word	0x2000045c
 8010038:	200003c4 	.word	0x200003c4
 801003c:	200011e4 	.word	0x200011e4
 8010040:	4325c53f 	.word	0x4325c53f
 8010044:	200014f0 	.word	0x200014f0
		s.slot_state = RESYNC;
 8010048:	4b38      	ldr	r3, [pc, #224]	; (801012c <timeout_isr_+0x62c>)
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8010050:	4b36      	ldr	r3, [pc, #216]	; (801012c <timeout_isr_+0x62c>)
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 8010058:	f7fe fcda 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801005c:	4b34      	ldr	r3, [pc, #208]	; (8010130 <timeout_isr_+0x630>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f06f 0202 	mvn.w	r2, #2
 8010064:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8010066:	f7fe fcfd 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 801006a:	4b32      	ldr	r3, [pc, #200]	; (8010134 <timeout_isr_+0x634>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2201      	movs	r2, #1
 8010070:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8010072:	2001      	movs	r0, #1
 8010074:	f7fe fc8c 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d022      	beq.n	80100c4 <timeout_isr_+0x5c4>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 801007e:	4b2c      	ldr	r3, [pc, #176]	; (8010130 <timeout_isr_+0x630>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010084:	4618      	mov	r0, r3
 8010086:	f7fb fdb9 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 801008a:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 801008c:	4b2a      	ldr	r3, [pc, #168]	; (8010138 <timeout_isr_+0x638>)
 801008e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010090:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8010092:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 8010094:	4b28      	ldr	r3, [pc, #160]	; (8010138 <timeout_isr_+0x638>)
 8010096:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8010098:	4413      	add	r3, r2
 801009a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 801009e:	4a23      	ldr	r2, [pc, #140]	; (801012c <timeout_isr_+0x62c>)
 80100a0:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 80100a2:	f7fe fcb5 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80100a6:	4b22      	ldr	r3, [pc, #136]	; (8010130 <timeout_isr_+0x630>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f06f 0202 	mvn.w	r2, #2
 80100ae:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 80100b0:	4b1f      	ldr	r3, [pc, #124]	; (8010130 <timeout_isr_+0x630>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100b6:	4b1e      	ldr	r3, [pc, #120]	; (8010130 <timeout_isr_+0x630>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80100be:	635a      	str	r2, [r3, #52]	; 0x34
 80100c0:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 80100c4:	2000      	movs	r0, #0
 80100c6:	f7fe fc8b 	bl	800e9e0 <unmask_main_timer>
			// (more precisely: if RESYNC was active before entering current function)
			start_grid_timer();
		}
	}

	PROFILE_ISR("timeout ISR return");
 80100ca:	e010      	b.n	80100ee <timeout_isr_+0x5ee>
			s.next_trigger_tick = s.next_grid_tick -
 80100cc:	4b17      	ldr	r3, [pc, #92]	; (801012c <timeout_isr_+0x62c>)
 80100ce:	685a      	ldr	r2, [r3, #4]
				((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 80100d0:	4b16      	ldr	r3, [pc, #88]	; (801012c <timeout_isr_+0x62c>)
 80100d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100d6:	2b01      	cmp	r3, #1
 80100d8:	d102      	bne.n	80100e0 <timeout_isr_+0x5e0>
 80100da:	4b14      	ldr	r3, [pc, #80]	; (801012c <timeout_isr_+0x62c>)
 80100dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100de:	e001      	b.n	80100e4 <timeout_isr_+0x5e4>
 80100e0:	4b12      	ldr	r3, [pc, #72]	; (801012c <timeout_isr_+0x62c>)
 80100e2:	6a1b      	ldr	r3, [r3, #32]
			s.next_trigger_tick = s.next_grid_tick -
 80100e4:	1ad3      	subs	r3, r2, r3
 80100e6:	4a11      	ldr	r2, [pc, #68]	; (801012c <timeout_isr_+0x62c>)
 80100e8:	6093      	str	r3, [r2, #8]
			start_grid_timer();
 80100ea:	f7fe fd33 	bl	800eb54 <start_grid_timer>
	PROFILE_ISR("timeout ISR return");
 80100ee:	bf00      	nop
#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 80100f0:	4b12      	ldr	r3, [pc, #72]	; (801013c <timeout_isr_+0x63c>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d015      	beq.n	8010124 <timeout_isr_+0x624>
 80100f8:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <timeout_isr_+0x630>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100fe:	4b10      	ldr	r3, [pc, #64]	; (8010140 <timeout_isr_+0x640>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	1ad2      	subs	r2, r2, r3
 8010104:	4b0f      	ldr	r3, [pc, #60]	; (8010144 <timeout_isr_+0x644>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4413      	add	r3, r2
 801010a:	4a0e      	ldr	r2, [pc, #56]	; (8010144 <timeout_isr_+0x644>)
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	4b0b      	ldr	r3, [pc, #44]	; (801013c <timeout_isr_+0x63c>)
 8010110:	2200      	movs	r2, #0
 8010112:	701a      	strb	r2, [r3, #0]
#endif
	GPI_TRACE_RETURN_FAST();
 8010114:	bf00      	nop
 8010116:	e005      	b.n	8010124 <timeout_isr_+0x624>
			GPI_TRACE_RETURN_FAST();
 8010118:	bf00      	nop
 801011a:	e004      	b.n	8010126 <timeout_isr_+0x626>
				GPI_TRACE_RETURN_FAST();
 801011c:	bf00      	nop
 801011e:	e002      	b.n	8010126 <timeout_isr_+0x626>
			GPI_TRACE_RETURN_FAST();
 8010120:	bf00      	nop
 8010122:	e000      	b.n	8010126 <timeout_isr_+0x626>
	GPI_TRACE_RETURN_FAST();
 8010124:	bf00      	nop
}
 8010126:	3734      	adds	r7, #52	; 0x34
 8010128:	46bd      	mov	sp, r7
 801012a:	bd90      	pop	{r4, r7, pc}
 801012c:	20000410 	.word	0x20000410
 8010130:	200012c8 	.word	0x200012c8
 8010134:	200011e4 	.word	0x200011e4
 8010138:	200003c4 	.word	0x200003c4
 801013c:	2000112c 	.word	0x2000112c
 8010140:	20001308 	.word	0x20001308
 8010144:	20000f10 	.word	0x20000f10

08010148 <grid_timer_isr>:

//**************************************************************************************************

// grid timer ISR
// this is one of the central transport layer routines
void LED_ISR(grid_timer_isr, LED_GRID_TIMER_ISR)
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	4b14      	ldr	r3, [pc, #80]	; (80101a0 <grid_timer_isr+0x58>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d008      	beq.n	8010168 <grid_timer_isr+0x20>
 8010156:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <grid_timer_isr+0x5c>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015c:	4a12      	ldr	r2, [pc, #72]	; (80101a8 <grid_timer_isr+0x60>)
 801015e:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
 8010162:	4b0f      	ldr	r3, [pc, #60]	; (80101a0 <grid_timer_isr+0x58>)
 8010164:	2200      	movs	r2, #0
 8010166:	601a      	str	r2, [r3, #0]
 8010168:	2300      	movs	r3, #0
 801016a:	603b      	str	r3, [r7, #0]
	if (mask)
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d005      	beq.n	801017e <grid_timer_isr+0x36>
		LED_GPIO_Port->ODR ^= mask;
 8010172:	4b0e      	ldr	r3, [pc, #56]	; (80101ac <grid_timer_isr+0x64>)
 8010174:	695a      	ldr	r2, [r3, #20]
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	490c      	ldr	r1, [pc, #48]	; (80101ac <grid_timer_isr+0x64>)
 801017a:	4053      	eors	r3, r2
 801017c:	614b      	str	r3, [r1, #20]
 801017e:	f000 f817 	bl	80101b0 <grid_timer_isr_>
 8010182:	2300      	movs	r3, #0
 8010184:	607b      	str	r3, [r7, #4]
	if (mask)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d005      	beq.n	8010198 <grid_timer_isr+0x50>
		LED_GPIO_Port->ODR ^= mask;
 801018c:	4b07      	ldr	r3, [pc, #28]	; (80101ac <grid_timer_isr+0x64>)
 801018e:	695a      	ldr	r2, [r3, #20]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4906      	ldr	r1, [pc, #24]	; (80101ac <grid_timer_isr+0x64>)
 8010194:	4053      	eors	r3, r2
 8010196:	614b      	str	r3, [r1, #20]
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	200003b4 	.word	0x200003b4
 80101a4:	200012c8 	.word	0x200012c8
 80101a8:	200014f0 	.word	0x200014f0
 80101ac:	48000800 	.word	0x48000800

080101b0 <grid_timer_isr_>:
{
 80101b0:	b5b0      	push	{r4, r5, r7, lr}
 80101b2:	b0c8      	sub	sp, #288	; 0x120
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4bbc      	ldr	r3, [pc, #752]	; (80104a8 <grid_timer_isr_+0x2f8>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#if	ENERGEST_CONF_ON
	ENERGEST_ON(ENERGEST_TYPE_IRQ);
 80101bc:	4abb      	ldr	r2, [pc, #748]	; (80104ac <grid_timer_isr_+0x2fc>)
 80101be:	6013      	str	r3, [r2, #0]
 80101c0:	4bbb      	ldr	r3, [pc, #748]	; (80104b0 <grid_timer_isr_+0x300>)
 80101c2:	2201      	movs	r2, #1
 80101c4:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_FUNCTION_FAST();
 80101c6:	bf00      	nop
	PROFILE_ISR("grid timer ISR entry");
 80101c8:	bf00      	nop
	mask_main_timer();
 80101ca:	f7fe fc21 	bl	800ea10 <mask_main_timer>

	//clear IRQ
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80101ce:	4bb6      	ldr	r3, [pc, #728]	; (80104a8 <grid_timer_isr_+0x2f8>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f06f 0202 	mvn.w	r2, #2
 80101d6:	611a      	str	r2, [r3, #16]

	mask_slow_timer();
 80101d8:	f7fe fc44 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 80101dc:	4bb5      	ldr	r3, [pc, #724]	; (80104b4 <grid_timer_isr_+0x304>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2201      	movs	r2, #1
 80101e2:	605a      	str	r2, [r3, #4]

	// if STOP requested: stop
	if (STOP == s.next_slot_task)
 80101e4:	4bb4      	ldr	r3, [pc, #720]	; (80104b8 <grid_timer_isr_+0x308>)
 80101e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d130      	bne.n	8010250 <grid_timer_isr_+0xa0>
	{
		#if MX_VERBOSE_STATISTICS
			mx.stat_counter.slot_off = mx.slot_number;	// the old one (viewpoint: turn off after last processing)
 80101ee:	4bb3      	ldr	r3, [pc, #716]	; (80104bc <grid_timer_isr_+0x30c>)
 80101f0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	4bb1      	ldr	r3, [pc, #708]	; (80104bc <grid_timer_isr_+0x30c>)
 80101f8:	f8a3 289e 	strh.w	r2, [r3, #2206]	; 0x89e
 80101fc:	2300      	movs	r3, #0
 80101fe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	gpi_atomic_set(&(mx.events), BV(event));
 8010202:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8010206:	2201      	movs	r2, #1
 8010208:	fa02 f303 	lsl.w	r3, r2, r3
 801020c:	4aab      	ldr	r2, [pc, #684]	; (80104bc <grid_timer_isr_+0x30c>)
 801020e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801021a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801021e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010222:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010226:	f3bf 8f5f 	dmb	sy
 801022a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801022e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010236:	e851 0f00 	ldrex	r0, [r1]
 801023a:	ea40 0003 	orr.w	r0, r0, r3
 801023e:	e841 0300 	strex	r3, r0, [r1]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1f7      	bne.n	8010236 <grid_timer_isr_+0x86>
 8010246:	f3bf 8f5f 	dmb	sy
		#endif
		set_event(STOPPED);
		GPI_TRACE_MSG_FAST(TRACE_INFO, "transport layer stopped");
 801024a:	bf00      	nop

		GPI_TRACE_RETURN_FAST();
 801024c:	f001 ba95 	b.w	801177a <grid_timer_isr_+0x15ca>
    }

	// if Rx
	if ((RESYNC == s.slot_state) || (RX == s.next_slot_task))
 8010250:	4b99      	ldr	r3, [pc, #612]	; (80104b8 <grid_timer_isr_+0x308>)
 8010252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010256:	2b00      	cmp	r3, #0
 8010258:	d005      	beq.n	8010266 <grid_timer_isr_+0xb6>
 801025a:	4b97      	ldr	r3, [pc, #604]	; (80104b8 <grid_timer_isr_+0x308>)
 801025c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010260:	2b00      	cmp	r3, #0
 8010262:	f040 8210 	bne.w	8010686 <grid_timer_isr_+0x4d6>
	{
		PROFILE_ISR("grid timer ISR start Rx begin");
 8010266:	bf00      	nop

		Gpi_Hybrid_Reference	r;
		Gpi_Fast_Tick_Native 	trigger_tick;
		// Gpi_Slow_Tick_Native	trigger_tick_slow;
		int_fast8_t				late = 1;
 8010268:	2301      	movs	r3, #1
 801026a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

		// compute exact trigger time
		// trigger_tick = gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) + GPI_TICK_US_TO_FAST(ISR_LATENCY_BUFFER);
		// trigger_tick = s.next_grid_tick;
		// trigger_tick = s.hybrid_trigger;
		trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 801026e:	4b8e      	ldr	r3, [pc, #568]	; (80104a8 <grid_timer_isr_+0x2f8>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010274:	4b92      	ldr	r3, [pc, #584]	; (80104c0 <grid_timer_isr_+0x310>)
 8010276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010278:	011b      	lsls	r3, r3, #4
 801027a:	4413      	add	r3, r2
 801027c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		// 	trigger_tick = MAIN_TIMER_CNT_REG;

		// trigger_tick_slow = LP_TIMER_CMP_REG + (Gpi_Slow_Tick_Native)((Gpi_Fast_Tick_Native)(ISR_LATENCY_SLOW) / (Gpi_Fast_Tick_Native)HYBRID_SLOW_RATIO);

		// rx begin
		assert_reset((chirp_config.lora_bw >= 7)&&(chirp_config.lora_bw <= 9));
 8010280:	4b90      	ldr	r3, [pc, #576]	; (80104c4 <grid_timer_isr_+0x314>)
 8010282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010286:	2b06      	cmp	r3, #6
 8010288:	d904      	bls.n	8010294 <grid_timer_isr_+0xe4>
 801028a:	4b8e      	ldr	r3, [pc, #568]	; (80104c4 <grid_timer_isr_+0x314>)
 801028c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010290:	2b09      	cmp	r3, #9
 8010292:	d91c      	bls.n	80102ce <grid_timer_isr_+0x11e>
 8010294:	4b8b      	ldr	r3, [pc, #556]	; (80104c4 <grid_timer_isr_+0x314>)
 8010296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801029a:	2b06      	cmp	r3, #6
 801029c:	d906      	bls.n	80102ac <grid_timer_isr_+0xfc>
 801029e:	4b89      	ldr	r3, [pc, #548]	; (80104c4 <grid_timer_isr_+0x314>)
 80102a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102a4:	2b09      	cmp	r3, #9
 80102a6:	d801      	bhi.n	80102ac <grid_timer_isr_+0xfc>
 80102a8:	2301      	movs	r3, #1
 80102aa:	e000      	b.n	80102ae <grid_timer_isr_+0xfe>
 80102ac:	2300      	movs	r3, #0
 80102ae:	4618      	mov	r0, r3
 80102b0:	f012 f9c4 	bl	802263c <iprintf>
 80102b4:	4b83      	ldr	r3, [pc, #524]	; (80104c4 <grid_timer_isr_+0x314>)
 80102b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ba:	2b06      	cmp	r3, #6
 80102bc:	d907      	bls.n	80102ce <grid_timer_isr_+0x11e>
 80102be:	4b81      	ldr	r3, [pc, #516]	; (80104c4 <grid_timer_isr_+0x314>)
 80102c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102c4:	2b09      	cmp	r3, #9
 80102c6:	d902      	bls.n	80102ce <grid_timer_isr_+0x11e>
  __ASM volatile ("cpsid f" : : : "memory");
 80102c8:	b671      	cpsid	f
 80102ca:	f7fe f997 	bl	800e5fc <NVIC_SystemReset>

		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80102ce:	2033      	movs	r0, #51	; 0x33
 80102d0:	f7fc fbcc 	bl	800ca6c <SX1276Read>
 80102d4:	4603      	mov	r3, r0
 80102d6:	b25b      	sxtb	r3, r3
 80102d8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80102dc:	b25b      	sxtb	r3, r3
 80102de:	f043 0301 	orr.w	r3, r3, #1
 80102e2:	b25b      	sxtb	r3, r3
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	4619      	mov	r1, r3
 80102e8:	2033      	movs	r0, #51	; 0x33
 80102ea:	f7fc fbad 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80102ee:	211d      	movs	r1, #29
 80102f0:	203b      	movs	r0, #59	; 0x3b
 80102f2:	f7fc fba9 	bl	800ca48 <SX1276Write>

		SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80102f6:	2031      	movs	r0, #49	; 0x31
 80102f8:	f7fc fbb8 	bl	800ca6c <SX1276Read>
 80102fc:	4603      	mov	r3, r0
 80102fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010302:	b2db      	uxtb	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	2031      	movs	r0, #49	; 0x31
 8010308:	f7fc fb9e 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801030c:	2100      	movs	r1, #0
 801030e:	2030      	movs	r0, #48	; 0x30
 8010310:	f7fc fb9a 	bl	800ca48 <SX1276Write>
		if(chirp_config.lora_bw != 9)
 8010314:	4b6b      	ldr	r3, [pc, #428]	; (80104c4 <grid_timer_isr_+0x314>)
 8010316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801031a:	2b09      	cmp	r3, #9
 801031c:	d004      	beq.n	8010328 <grid_timer_isr_+0x178>
		{
			SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801031e:	2140      	movs	r1, #64	; 0x40
 8010320:	202f      	movs	r0, #47	; 0x2f
 8010322:	f7fc fb91 	bl	800ca48 <SX1276Write>
 8010326:	e00a      	b.n	801033e <grid_timer_isr_+0x18e>
		}
		else
		{
			SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8010328:	2031      	movs	r0, #49	; 0x31
 801032a:	f7fc fb9f 	bl	800ca6c <SX1276Read>
 801032e:	4603      	mov	r3, r0
 8010330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010334:	b2db      	uxtb	r3, r3
 8010336:	4619      	mov	r1, r3
 8010338:	2031      	movs	r0, #49	; 0x31
 801033a:	f7fc fb85 	bl	800ca48 <SX1276Write>
		}

		if (RESYNC != s.slot_state)
 801033e:	4b5e      	ldr	r3, [pc, #376]	; (80104b8 <grid_timer_isr_+0x308>)
 8010340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010344:	2b00      	cmp	r3, #0
 8010346:	d047      	beq.n	80103d8 <grid_timer_isr_+0x228>
		{
			#if MX_LBT_ACCESS
			trigger_tick += GPI_TICK_US_TO_FAST2(LBT_DELAY_IN_US);
 8010348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801034c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010350:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010354:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			#endif
			// wait until trigger time has been reached
			PROFILE_ISR();
 8010358:	bf00      	nop

			// while (gpi_tick_compare_slow_native(gpi_tick_slow_native(), trigger_tick_slow) < 0)
			// while (gpi_tick_compare_hybrid(gpi_tick_hybrid(), trigger_tick) <= 0)
			while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0)
 801035a:	e002      	b.n	8010362 <grid_timer_isr_+0x1b2>
				late = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8010362:	4b51      	ldr	r3, [pc, #324]	; (80104a8 <grid_timer_isr_+0x2f8>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801036c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010374:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801037c:	1ad3      	subs	r3, r2, r3
 801037e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010382:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010386:	2b00      	cmp	r3, #0
 8010388:	db07      	blt.n	801039a <grid_timer_isr_+0x1ea>
 801038a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801038e:	2b00      	cmp	r3, #0
 8010390:	bf14      	ite	ne
 8010392:	2301      	movne	r3, #1
 8010394:	2300      	moveq	r3, #0
 8010396:	b2db      	uxtb	r3, r3
 8010398:	e001      	b.n	801039e <grid_timer_isr_+0x1ee>
 801039a:	f04f 33ff 	mov.w	r3, #4294967295
			while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0)
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dddc      	ble.n	801035c <grid_timer_isr_+0x1ac>

			PROFILE_ISR();
 80103a2:	bf00      	nop

			// set radio in rx mode
			SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80103a4:	2005      	movs	r0, #5
 80103a6:	f7fc fad7 	bl	800c958 <SX1276SetOpMode>
 80103aa:	2300      	movs	r3, #0
 80103ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (mask)
 80103b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d003      	beq.n	80103c0 <grid_timer_isr_+0x210>
		LED_GPIO_Port->BSRR = mask;
 80103b8:	4a43      	ldr	r2, [pc, #268]	; (80104c8 <grid_timer_isr_+0x318>)
 80103ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103be:	6193      	str	r3, [r2, #24]
			gpi_led_on(LED_RX);

			#if MX_VERBOSE_STATISTICS
				if (late)
 80103c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d007      	beq.n	80103d8 <grid_timer_isr_+0x228>
					mx.stat_counter.num_rx_late++;
 80103c8:	4b3c      	ldr	r3, [pc, #240]	; (80104bc <grid_timer_isr_+0x30c>)
 80103ca:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
 80103ce:	3301      	adds	r3, #1
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	4b3a      	ldr	r3, [pc, #232]	; (80104bc <grid_timer_isr_+0x30c>)
 80103d4:	f8a3 2888 	strh.w	r2, [r3, #2184]	; 0x888
			#endif
		}

		// during RESYNC or if we are late: start manually (immediately)
		if (late)
 80103d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d012      	beq.n	8010406 <grid_timer_isr_+0x256>
		{
			// set radio in rx mode
			// while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) <= 0);
			SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80103e0:	2005      	movs	r0, #5
 80103e2:	f7fc fab9 	bl	800c958 <SX1276SetOpMode>
 80103e6:	2300      	movs	r3, #0
 80103e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (mask)
 80103ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d003      	beq.n	80103fc <grid_timer_isr_+0x24c>
		LED_GPIO_Port->BSRR = mask;
 80103f4:	4a34      	ldr	r2, [pc, #208]	; (80104c8 <grid_timer_isr_+0x318>)
 80103f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103fa:	6193      	str	r3, [r2, #24]
 80103fc:	4b2a      	ldr	r3, [pc, #168]	; (80104a8 <grid_timer_isr_+0x2f8>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			gpi_led_on(LED_RX);
			#if MX_VERBOSE_STATISTICS
				trigger_tick = gpi_tick_fast_native();
 8010402:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			#endif
        }

		#if MX_VERBOSE_STATISTICS
			s.radio_start_timestamp = trigger_tick | 1;
 8010406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801040a:	f043 0301 	orr.w	r3, r3, #1
 801040e:	4a2a      	ldr	r2, [pc, #168]	; (80104b8 <grid_timer_isr_+0x308>)
 8010410:	6353      	str	r3, [r2, #52]	; 0x34
 8010412:	4b25      	ldr	r3, [pc, #148]	; (80104a8 <grid_timer_isr_+0x2f8>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 8010418:	4a24      	ldr	r2, [pc, #144]	; (80104ac <grid_timer_isr_+0x2fc>)
 801041a:	63d3      	str	r3, [r2, #60]	; 0x3c
 801041c:	4b24      	ldr	r3, [pc, #144]	; (80104b0 <grid_timer_isr_+0x300>)
 801041e:	2201      	movs	r2, #1
 8010420:	73da      	strb	r2, [r3, #15]
		#endif

		// unmask IRQs
		// enable RxDone, PayloadCrcError and ValidHeader interrupt
		SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8010422:	218f      	movs	r1, #143	; 0x8f
 8010424:	2011      	movs	r0, #17
 8010426:	f7fc fb0f 	bl	800ca48 <SX1276Write>
											RFLR_IRQFLAGS_TXDONE |
											RFLR_IRQFLAGS_CADDONE |
											RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
											RFLR_IRQFLAGS_CADDETECTED );

		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK &
 801042a:	2040      	movs	r0, #64	; 0x40
 801042c:	f7fc fb1e 	bl	800ca6c <SX1276Read>
 8010430:	4603      	mov	r3, r0
 8010432:	b25b      	sxtb	r3, r3
		RFLR_DIOMAPPING1_DIO3_MASK) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO3_01);
 8010434:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8010438:	b25b      	sxtb	r3, r3
 801043a:	f043 0301 	orr.w	r3, r3, #1
 801043e:	b25b      	sxtb	r3, r3
		SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK &
 8010440:	b2db      	uxtb	r3, r3
 8010442:	4619      	mov	r1, r3
 8010444:	2040      	movs	r0, #64	; 0x40
 8010446:	f7fc faff 	bl	800ca48 <SX1276Write>

		#if MX_HEADER_CHECK
			s.valid_header = 0;
 801044a:	4b1b      	ldr	r3, [pc, #108]	; (80104b8 <grid_timer_isr_+0x308>)
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		#endif

		// allocate rx queue destination slot
        SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8010452:	2100      	movs	r1, #0
 8010454:	200f      	movs	r0, #15
 8010456:	f7fc faf7 	bl	800ca48 <SX1276Write>
		// SX1276Write( REG_LR_FIFOADDRPTR, 0 );

		mx.rx_queue_num_writing = mx.rx_queue_num_written + 1;
 801045a:	4b18      	ldr	r3, [pc, #96]	; (80104bc <grid_timer_isr_+0x30c>)
 801045c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801045e:	3301      	adds	r3, #1
 8010460:	4a16      	ldr	r2, [pc, #88]	; (80104bc <grid_timer_isr_+0x30c>)
 8010462:	6353      	str	r3, [r2, #52]	; 0x34
		s.event_tick_nominal = s.next_grid_tick + radio.packet_air_time;
 8010464:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <grid_timer_isr_+0x308>)
 8010466:	685a      	ldr	r2, [r3, #4]
 8010468:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <grid_timer_isr_+0x310>)
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	4413      	add	r3, r2
 801046e:	4a12      	ldr	r2, [pc, #72]	; (80104b8 <grid_timer_isr_+0x308>)
 8010470:	6013      	str	r3, [r2, #0]

		r = gpi_tick_hybrid_reference();
 8010472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010476:	4618      	mov	r0, r3
 8010478:	f7fb fb76 	bl	800bb68 <gpi_tick_hybrid_reference>

		// if RESYNC: restart grid timer (-> potentially long interval)
		// NOTE: timeout timer is called implicitly while RESYNC
		if (s.slot_state == RESYNC)
 801047c:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <grid_timer_isr_+0x308>)
 801047e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010482:	2b00      	cmp	r3, #0
 8010484:	d122      	bne.n	80104cc <grid_timer_isr_+0x31c>
			// ATTENTION: don't do s.next_grid_tick += MX_SLOT_LENGTH_RESYNC because grid timer is also
			// triggered by frames from interferers (Rx -> SFD -> ... (broken/invalid) -> timeout
			// -> grid timer) and hence current time might be far away from s.next_grid_tick. With
			// s.next_grid_tick += MX_SLOT_LENGTH_RESYNC, s.next_grid_tick could end up in the far
			// future if it gets incremented frequently.
			s.next_grid_tick = r.hybrid_tick + ((chirp_config.mx_slot_length * 5) / 2);
 8010486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010488:	4b0e      	ldr	r3, [pc, #56]	; (80104c4 <grid_timer_isr_+0x314>)
 801048a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	085b      	lsrs	r3, r3, #1
 8010494:	440b      	add	r3, r1
 8010496:	4a08      	ldr	r2, [pc, #32]	; (80104b8 <grid_timer_isr_+0x308>)
 8010498:	6053      	str	r3, [r2, #4]
			s.next_trigger_tick = s.next_grid_tick;
 801049a:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <grid_timer_isr_+0x308>)
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	4a06      	ldr	r2, [pc, #24]	; (80104b8 <grid_timer_isr_+0x308>)
 80104a0:	6093      	str	r3, [r2, #8]
			start_grid_timer();
 80104a2:	f7fe fb57 	bl	800eb54 <start_grid_timer>
			s.slot_state = RX_RUNNING;

			GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "timeout: %lu", (long)gpi_tick_hybrid_to_us(t));
		}

		PROFILE_ISR("grid timer ISR start Rx end");
 80104a6:	e0ea      	b.n	801067e <grid_timer_isr_+0x4ce>
 80104a8:	200012c8 	.word	0x200012c8
 80104ac:	20001308 	.word	0x20001308
 80104b0:	2000112c 	.word	0x2000112c
 80104b4:	200011e4 	.word	0x200011e4
 80104b8:	20000410 	.word	0x20000410
 80104bc:	200014f0 	.word	0x200014f0
 80104c0:	200003c4 	.word	0x200003c4
 80104c4:	20001430 	.word	0x20001430
 80104c8:	48000800 	.word	0x48000800
				s.lbt_rx_on = 1;
 80104cc:	4bb1      	ldr	r3, [pc, #708]	; (8010794 <grid_timer_isr_+0x5e4>)
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				s.lbt_channel_seq_no = 0;
 80104d4:	4baf      	ldr	r3, [pc, #700]	; (8010794 <grid_timer_isr_+0x5e4>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				SX1276Write( REG_LR_MODEMSTAT, SX1276Read( REG_LR_MODEMSTAT ) & ~ RFLR_MODEMSTAT_MODEM_STATUS_SIGNAL_MASK);
 80104dc:	2018      	movs	r0, #24
 80104de:	f7fc fac5 	bl	800ca6c <SX1276Read>
 80104e2:	4603      	mov	r3, r0
 80104e4:	f023 0301 	bic.w	r3, r3, #1
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	4619      	mov	r1, r3
 80104ec:	2018      	movs	r0, #24
 80104ee:	f7fc faab 	bl	800ca48 <SX1276Write>
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 80104f2:	4ba8      	ldr	r3, [pc, #672]	; (8010794 <grid_timer_isr_+0x5e4>)
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	4ba7      	ldr	r3, [pc, #668]	; (8010794 <grid_timer_isr_+0x5e4>)
 80104f8:	6a1b      	ldr	r3, [r3, #32]
 80104fa:	441a      	add	r2, r3
 80104fc:	4ba6      	ldr	r3, [pc, #664]	; (8010798 <grid_timer_isr_+0x5e8>)
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	1ad1      	subs	r1, r2, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us) * CHANNEL_ALTER + 4 * radio.grid_drift_offset + GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 8010502:	4ba6      	ldr	r3, [pc, #664]	; (801079c <grid_timer_isr_+0x5ec>)
 8010504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010506:	4aa6      	ldr	r2, [pc, #664]	; (80107a0 <grid_timer_isr_+0x5f0>)
 8010508:	fba2 2303 	umull	r2, r3, r2, r3
 801050c:	0c9b      	lsrs	r3, r3, #18
 801050e:	4aa5      	ldr	r2, [pc, #660]	; (80107a4 <grid_timer_isr_+0x5f4>)
 8010510:	fb02 f003 	mul.w	r0, r2, r3
 8010514:	4ba1      	ldr	r3, [pc, #644]	; (801079c <grid_timer_isr_+0x5ec>)
 8010516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010518:	4aa3      	ldr	r2, [pc, #652]	; (80107a8 <grid_timer_isr_+0x5f8>)
 801051a:	fba2 2303 	umull	r2, r3, r2, r3
 801051e:	099a      	lsrs	r2, r3, #6
 8010520:	4ba1      	ldr	r3, [pc, #644]	; (80107a8 <grid_timer_isr_+0x5f8>)
 8010522:	fba3 4302 	umull	r4, r3, r3, r2
 8010526:	099b      	lsrs	r3, r3, #6
 8010528:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801052c:	fb04 f303 	mul.w	r3, r4, r3
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8010536:	fb02 f303 	mul.w	r3, r2, r3
 801053a:	4418      	add	r0, r3
 801053c:	4b97      	ldr	r3, [pc, #604]	; (801079c <grid_timer_isr_+0x5ec>)
 801053e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010540:	4b99      	ldr	r3, [pc, #612]	; (80107a8 <grid_timer_isr_+0x5f8>)
 8010542:	fba3 4302 	umull	r4, r3, r3, r2
 8010546:	099b      	lsrs	r3, r3, #6
 8010548:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801054c:	fb04 f303 	mul.w	r3, r4, r3
 8010550:	1ad3      	subs	r3, r2, r3
 8010552:	015b      	lsls	r3, r3, #5
 8010554:	4403      	add	r3, r0
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 8010556:	18ca      	adds	r2, r1, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us) * CHANNEL_ALTER + 4 * radio.grid_drift_offset + GPI_TICK_US_TO_HYBRID2(LBT_DELAY_IN_US);
 8010558:	4b8f      	ldr	r3, [pc, #572]	; (8010798 <grid_timer_isr_+0x5e8>)
 801055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
				t = s.next_grid_tick + s.rx_trigger_offset - radio.rx_to_grid_offset +
 8010560:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010564:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			s.slow_trigger = t;
 801056c:	4a89      	ldr	r2, [pc, #548]	; (8010794 <grid_timer_isr_+0x5e4>)
 801056e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010572:	60d3      	str	r3, [r2, #12]
				s.next_grid_tick_last = s.next_grid_tick;
 8010574:	4b87      	ldr	r3, [pc, #540]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4a86      	ldr	r2, [pc, #536]	; (8010794 <grid_timer_isr_+0x5e4>)
 801057a:	6413      	str	r3, [r2, #64]	; 0x40
				t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset +
 801057c:	4b85      	ldr	r3, [pc, #532]	; (8010794 <grid_timer_isr_+0x5e4>)
 801057e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010580:	4b84      	ldr	r3, [pc, #528]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010582:	6a1b      	ldr	r3, [r3, #32]
 8010584:	441a      	add	r2, r3
 8010586:	4b84      	ldr	r3, [pc, #528]	; (8010798 <grid_timer_isr_+0x5e8>)
 8010588:	691b      	ldr	r3, [r3, #16]
 801058a:	1ad1      	subs	r1, r2, r3
				GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us - radio.isr_latency_buffer + LBT_DELAY_IN_US);
 801058c:	4b83      	ldr	r3, [pc, #524]	; (801079c <grid_timer_isr_+0x5ec>)
 801058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010590:	4b81      	ldr	r3, [pc, #516]	; (8010798 <grid_timer_isr_+0x5e8>)
 8010592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801059a:	3310      	adds	r3, #16
 801059c:	4a80      	ldr	r2, [pc, #512]	; (80107a0 <grid_timer_isr_+0x5f0>)
 801059e:	fba2 2303 	umull	r2, r3, r2, r3
 80105a2:	0c9b      	lsrs	r3, r3, #18
 80105a4:	4a81      	ldr	r2, [pc, #516]	; (80107ac <grid_timer_isr_+0x5fc>)
 80105a6:	fb02 f003 	mul.w	r0, r2, r3
 80105aa:	4b7c      	ldr	r3, [pc, #496]	; (801079c <grid_timer_isr_+0x5ec>)
 80105ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80105ae:	4b7a      	ldr	r3, [pc, #488]	; (8010798 <grid_timer_isr_+0x5e8>)
 80105b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80105b8:	3310      	adds	r3, #16
 80105ba:	4a7b      	ldr	r2, [pc, #492]	; (80107a8 <grid_timer_isr_+0x5f8>)
 80105bc:	fba2 2303 	umull	r2, r3, r2, r3
 80105c0:	099a      	lsrs	r2, r3, #6
 80105c2:	4b79      	ldr	r3, [pc, #484]	; (80107a8 <grid_timer_isr_+0x5f8>)
 80105c4:	fba3 4302 	umull	r4, r3, r3, r2
 80105c8:	099b      	lsrs	r3, r3, #6
 80105ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80105ce:	fb04 f303 	mul.w	r3, r4, r3
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80105d8:	fb02 f303 	mul.w	r3, r2, r3
 80105dc:	4418      	add	r0, r3
 80105de:	4b6f      	ldr	r3, [pc, #444]	; (801079c <grid_timer_isr_+0x5ec>)
 80105e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80105e2:	4b6d      	ldr	r3, [pc, #436]	; (8010798 <grid_timer_isr_+0x5e8>)
 80105e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e6:	1ad3      	subs	r3, r2, r3
 80105e8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80105ec:	3310      	adds	r3, #16
 80105ee:	4a6e      	ldr	r2, [pc, #440]	; (80107a8 <grid_timer_isr_+0x5f8>)
 80105f0:	fba2 4203 	umull	r4, r2, r2, r3
 80105f4:	0992      	lsrs	r2, r2, #6
 80105f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80105fa:	fb04 f202 	mul.w	r2, r4, r2
 80105fe:	1a9a      	subs	r2, r3, r2
 8010600:	0113      	lsls	r3, r2, #4
 8010602:	4403      	add	r3, r0
				t = s.next_grid_tick_last + s.rx_trigger_offset - radio.rx_to_grid_offset +
 8010604:	440b      	add	r3, r1
 8010606:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			MAIN_TIMER_CC_REG = r.fast_capture + (t - r.hybrid_tick) * FAST_HYBRID_RATIO;
 801060a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010612:	1ad2      	subs	r2, r2, r3
 8010614:	4b66      	ldr	r3, [pc, #408]	; (80107b0 <grid_timer_isr_+0x600>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	440a      	add	r2, r1
 801061a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPOK);
 801061c:	4b65      	ldr	r3, [pc, #404]	; (80107b4 <grid_timer_isr_+0x604>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2208      	movs	r2, #8
 8010622:	605a      	str	r2, [r3, #4]
			LP_TIMER_CMP_REG = LP_TIMER_CNT_REG + 10 * radio.max_tb_interval / HYBRID_SLOW_RATIO;
 8010624:	4b63      	ldr	r3, [pc, #396]	; (80107b4 <grid_timer_isr_+0x604>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	69d9      	ldr	r1, [r3, #28]
 801062a:	4b5b      	ldr	r3, [pc, #364]	; (8010798 <grid_timer_isr_+0x5e8>)
 801062c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801062e:	4613      	mov	r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	4413      	add	r3, r2
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	461a      	mov	r2, r3
 8010638:	4b5f      	ldr	r3, [pc, #380]	; (80107b8 <grid_timer_isr_+0x608>)
 801063a:	fba3 2302 	umull	r2, r3, r3, r2
 801063e:	09da      	lsrs	r2, r3, #7
 8010640:	4b5c      	ldr	r3, [pc, #368]	; (80107b4 <grid_timer_isr_+0x604>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	440a      	add	r2, r1
 8010646:	615a      	str	r2, [r3, #20]
			s.grid_timer_flag = 0;
 8010648:	4b52      	ldr	r3, [pc, #328]	; (8010794 <grid_timer_isr_+0x5e4>)
 801064a:	2200      	movs	r2, #0
 801064c:	751a      	strb	r2, [r3, #20]
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801064e:	4b58      	ldr	r3, [pc, #352]	; (80107b0 <grid_timer_isr_+0x600>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f06f 0202 	mvn.w	r2, #2
 8010656:	611a      	str	r2, [r3, #16]
			unmask_main_timer(1);
 8010658:	2001      	movs	r0, #1
 801065a:	f7fe f9c1 	bl	800e9e0 <unmask_main_timer>
			while (!(__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK)));
 801065e:	bf00      	nop
 8010660:	4b54      	ldr	r3, [pc, #336]	; (80107b4 <grid_timer_isr_+0x604>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f003 0308 	and.w	r3, r3, #8
 801066a:	2b08      	cmp	r3, #8
 801066c:	d1f8      	bne.n	8010660 <grid_timer_isr_+0x4b0>
			unmask_slow_timer(1);
 801066e:	2001      	movs	r0, #1
 8010670:	f7fe f9e0 	bl	800ea34 <unmask_slow_timer>
			s.slot_state = RX_RUNNING;
 8010674:	4b47      	ldr	r3, [pc, #284]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010676:	2210      	movs	r2, #16
 8010678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "timeout: %lu", (long)gpi_tick_hybrid_to_us(t));
 801067c:	bf00      	nop
		PROFILE_ISR("grid timer ISR start Rx end");
 801067e:	bf00      	nop
		GPI_TRACE_MSG_FAST(TRACE_INFO, "Rx started");
 8010680:	bf00      	nop
	{
 8010682:	f000 bfc7 	b.w	8011614 <grid_timer_isr_+0x1464>
	}

	// if Tx
	else
	{
		PROFILE_ISR("grid timer ISR start Tx begin");
 8010686:	bf00      	nop

		assert_reset(!(chirp_config.packet_len % sizeof(uint_fast_t)));
 8010688:	4b44      	ldr	r3, [pc, #272]	; (801079c <grid_timer_isr_+0x5ec>)
 801068a:	8adb      	ldrh	r3, [r3, #22]
 801068c:	b29b      	uxth	r3, r3
 801068e:	f003 0303 	and.w	r3, r3, #3
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d018      	beq.n	80106ca <grid_timer_isr_+0x51a>
 8010698:	4b40      	ldr	r3, [pc, #256]	; (801079c <grid_timer_isr_+0x5ec>)
 801069a:	8adb      	ldrh	r3, [r3, #22]
 801069c:	b29b      	uxth	r3, r3
 801069e:	f003 0303 	and.w	r3, r3, #3
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <grid_timer_isr_+0x4fc>
 80106a8:	2301      	movs	r3, #1
 80106aa:	e000      	b.n	80106ae <grid_timer_isr_+0x4fe>
 80106ac:	2300      	movs	r3, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f011 ffc4 	bl	802263c <iprintf>
 80106b4:	4b39      	ldr	r3, [pc, #228]	; (801079c <grid_timer_isr_+0x5ec>)
 80106b6:	8adb      	ldrh	r3, [r3, #22]
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	f003 0303 	and.w	r3, r3, #3
 80106be:	b29b      	uxth	r3, r3
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d002      	beq.n	80106ca <grid_timer_isr_+0x51a>
 80106c4:	b671      	cpsid	f
 80106c6:	f7fd ff99 	bl	800e5fc <NVIC_SystemReset>
		ASSERT_CT(!((uintptr_t)&s.tx_fifo % sizeof(uint_fast_t)), alignment_issue);

		Gpi_Fast_Tick_Native 	trigger_tick;
		// Gpi_Slow_Tick_Native	trigger_tick_slow;
		int_fast8_t				late = 1;
 80106ca:	2301      	movs	r3, #1
 80106cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			uint32_t			 t_ps_us;
			RadioLoRaPacketHandler_t read_value;

			lbt_cca_:

			if (s.lbt_tx_on == CCA_NONE)
 80106d0:	4b30      	ldr	r3, [pc, #192]	; (8010794 <grid_timer_isr_+0x5e4>)
 80106d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f040 81ac 	bne.w	8010a34 <grid_timer_isr_+0x884>
			{
				t_ps_us = (mixer_rand() % LBT_CCA_STEP_NUM) * LBT_CCA_STEP;
 80106dc:	f008 fabc 	bl	8018c58 <mixer_rand>
 80106e0:	4603      	mov	r3, r0
 80106e2:	461a      	mov	r2, r3
 80106e4:	4b35      	ldr	r3, [pc, #212]	; (80107bc <grid_timer_isr_+0x60c>)
 80106e6:	fba3 1302 	umull	r1, r3, r3, r2
 80106ea:	08d9      	lsrs	r1, r3, #3
 80106ec:	460b      	mov	r3, r1
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	440b      	add	r3, r1
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	461a      	mov	r2, r3
 80106fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80106fe:	fb03 f302 	mul.w	r3, r3, r2
 8010702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				if (!s.lbt_channel_seq_no)
 8010706:	4b23      	ldr	r3, [pc, #140]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801070c:	2b00      	cmp	r3, #0
 801070e:	d15d      	bne.n	80107cc <grid_timer_isr_+0x61c>
				{
					s.next_grid_tick_last = s.next_grid_tick;
 8010710:	4b20      	ldr	r3, [pc, #128]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	4a1f      	ldr	r2, [pc, #124]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010716:	6413      	str	r3, [r2, #64]	; 0x40
					s.tx_now_channel = chirp_config.lbt_channel_primary;
 8010718:	4b20      	ldr	r3, [pc, #128]	; (801079c <grid_timer_isr_+0x5ec>)
 801071a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 801071e:	4b1d      	ldr	r3, [pc, #116]	; (8010794 <grid_timer_isr_+0x5e4>)
 8010720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

					SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 8010724:	4b1d      	ldr	r3, [pc, #116]	; (801079c <grid_timer_isr_+0x5ec>)
 8010726:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 801072a:	4a1c      	ldr	r2, [pc, #112]	; (801079c <grid_timer_isr_+0x5ec>)
 801072c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8010730:	4611      	mov	r1, r2
 8010732:	4a23      	ldr	r2, [pc, #140]	; (80107c0 <grid_timer_isr_+0x610>)
 8010734:	fb02 f201 	mul.w	r2, r2, r1
 8010738:	4413      	add	r3, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7fb fca6 	bl	800c08c <SX1276SetChannel>

					t_ps_us = 0;
 8010740:	2300      	movs	r3, #0
 8010742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 8010746:	4b1a      	ldr	r3, [pc, #104]	; (80107b0 <grid_timer_isr_+0x600>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801074c:	4b12      	ldr	r3, [pc, #72]	; (8010798 <grid_timer_isr_+0x5e8>)
 801074e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010750:	011b      	lsls	r3, r3, #4
 8010752:	4413      	add	r3, r2
 8010754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
					PROFILE_ISR();
 8010758:	bf00      	nop
					while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0);
 801075a:	bf00      	nop
 801075c:	4b14      	ldr	r3, [pc, #80]	; (80107b0 <grid_timer_isr_+0x600>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801076a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801076e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801077c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010780:	2b00      	cmp	r3, #0
 8010782:	db1f      	blt.n	80107c4 <grid_timer_isr_+0x614>
 8010784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010788:	2b00      	cmp	r3, #0
 801078a:	bf14      	ite	ne
 801078c:	2301      	movne	r3, #1
 801078e:	2300      	moveq	r3, #0
 8010790:	b2db      	uxtb	r3, r3
 8010792:	e019      	b.n	80107c8 <grid_timer_isr_+0x618>
 8010794:	20000410 	.word	0x20000410
 8010798:	200003c4 	.word	0x200003c4
 801079c:	20001430 	.word	0x20001430
 80107a0:	431bde83 	.word	0x431bde83
 80107a4:	01e84800 	.word	0x01e84800
 80107a8:	10624dd3 	.word	0x10624dd3
 80107ac:	00f42400 	.word	0x00f42400
 80107b0:	200012c8 	.word	0x200012c8
 80107b4:	200011e4 	.word	0x200011e4
 80107b8:	4325c53f 	.word	0x4325c53f
 80107bc:	cccccccd 	.word	0xcccccccd
 80107c0:	00030d40 	.word	0x00030d40
 80107c4:	f04f 33ff 	mov.w	r3, #4294967295
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dbc7      	blt.n	801075c <grid_timer_isr_+0x5ac>
				}

				/* channel is full, skip that channel */
				if (!(lbt_update_channel(0, s.tx_now_channel) & (1 << s.tx_now_channel)))
 80107cc:	4b8c      	ldr	r3, [pc, #560]	; (8010a00 <grid_timer_isr_+0x850>)
 80107ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107d2:	4619      	mov	r1, r3
 80107d4:	2000      	movs	r0, #0
 80107d6:	f7f9 ff2b 	bl	800a630 <lbt_update_channel>
 80107da:	4602      	mov	r2, r0
 80107dc:	4b88      	ldr	r3, [pc, #544]	; (8010a00 <grid_timer_isr_+0x850>)
 80107de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107e2:	4619      	mov	r1, r3
 80107e4:	2301      	movs	r3, #1
 80107e6:	408b      	lsls	r3, r1
 80107e8:	4013      	ands	r3, r2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f040 8093 	bne.w	8010916 <grid_timer_isr_+0x766>
				{
					s.lbt_channel_seq_no ++;
 80107f0:	4b83      	ldr	r3, [pc, #524]	; (8010a00 <grid_timer_isr_+0x850>)
 80107f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107f6:	3301      	adds	r3, #1
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	4b81      	ldr	r3, [pc, #516]	; (8010a00 <grid_timer_isr_+0x850>)
 80107fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

					s.tx_now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + 1 + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 8010800:	4b80      	ldr	r3, [pc, #512]	; (8010a04 <grid_timer_isr_+0x854>)
 8010802:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 8010806:	4b7f      	ldr	r3, [pc, #508]	; (8010a04 <grid_timer_isr_+0x854>)
 8010808:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 801080c:	4b7e      	ldr	r3, [pc, #504]	; (8010a08 <grid_timer_isr_+0x858>)
 801080e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010812:	b29a      	uxth	r2, r3
 8010814:	4b7b      	ldr	r3, [pc, #492]	; (8010a04 <grid_timer_isr_+0x854>)
 8010816:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801081a:	b29b      	uxth	r3, r3
 801081c:	4413      	add	r3, r2
 801081e:	b29a      	uxth	r2, r3
 8010820:	4b77      	ldr	r3, [pc, #476]	; (8010a00 <grid_timer_isr_+0x850>)
 8010822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010826:	b29b      	uxth	r3, r3
 8010828:	4413      	add	r3, r2
 801082a:	b29b      	uxth	r3, r3
 801082c:	3301      	adds	r3, #1
 801082e:	b29a      	uxth	r2, r3
 8010830:	4b74      	ldr	r3, [pc, #464]	; (8010a04 <grid_timer_isr_+0x854>)
 8010832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010834:	f7f9 fe1c 	bl	800a470 <lbt_pesudo_channel>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	4b70      	ldr	r3, [pc, #448]	; (8010a00 <grid_timer_isr_+0x850>)
 801083e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
					SX1276SetChannel(chirp_config.lora_freq + s.tx_now_channel * CHANNEL_STEP);
 8010842:	4b70      	ldr	r3, [pc, #448]	; (8010a04 <grid_timer_isr_+0x854>)
 8010844:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8010848:	4a6d      	ldr	r2, [pc, #436]	; (8010a00 <grid_timer_isr_+0x850>)
 801084a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801084e:	4611      	mov	r1, r2
 8010850:	4a6e      	ldr	r2, [pc, #440]	; (8010a0c <grid_timer_isr_+0x85c>)
 8010852:	fb02 f201 	mul.w	r2, r2, r1
 8010856:	4413      	add	r3, r2
 8010858:	4618      	mov	r0, r3
 801085a:	f7fb fc17 	bl	800c08c <SX1276SetChannel>

					if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 801085e:	4b68      	ldr	r3, [pc, #416]	; (8010a00 <grid_timer_isr_+0x850>)
 8010860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010864:	2b01      	cmp	r3, #1
 8010866:	f200 859f 	bhi.w	80113a8 <grid_timer_isr_+0x11f8>
					{
						s.lbt_tx_on = CCA_NONE;
 801086a:	4b65      	ldr	r3, [pc, #404]	; (8010a00 <grid_timer_isr_+0x850>)
 801086c:	2200      	movs	r2, #0
 801086e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(chirp_config.lbt_detect_duration_us - radio.isr_latency_buffer);
 8010872:	4b67      	ldr	r3, [pc, #412]	; (8010a10 <grid_timer_isr_+0x860>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010878:	4b62      	ldr	r3, [pc, #392]	; (8010a04 <grid_timer_isr_+0x854>)
 801087a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801087c:	4b65      	ldr	r3, [pc, #404]	; (8010a14 <grid_timer_isr_+0x864>)
 801087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	4a65      	ldr	r2, [pc, #404]	; (8010a18 <grid_timer_isr_+0x868>)
 8010884:	fba2 2303 	umull	r2, r3, r2, r3
 8010888:	0c9b      	lsrs	r3, r3, #18
 801088a:	4a64      	ldr	r2, [pc, #400]	; (8010a1c <grid_timer_isr_+0x86c>)
 801088c:	fb02 f003 	mul.w	r0, r2, r3
 8010890:	4b5c      	ldr	r3, [pc, #368]	; (8010a04 <grid_timer_isr_+0x854>)
 8010892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010894:	4b5f      	ldr	r3, [pc, #380]	; (8010a14 <grid_timer_isr_+0x864>)
 8010896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	4a61      	ldr	r2, [pc, #388]	; (8010a20 <grid_timer_isr_+0x870>)
 801089c:	fba2 2303 	umull	r2, r3, r2, r3
 80108a0:	099a      	lsrs	r2, r3, #6
 80108a2:	4b5f      	ldr	r3, [pc, #380]	; (8010a20 <grid_timer_isr_+0x870>)
 80108a4:	fba3 4302 	umull	r4, r3, r3, r2
 80108a8:	099b      	lsrs	r3, r3, #6
 80108aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80108ae:	fb04 f303 	mul.w	r3, r4, r3
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80108b8:	fb02 f303 	mul.w	r3, r2, r3
 80108bc:	4418      	add	r0, r3
 80108be:	4b51      	ldr	r3, [pc, #324]	; (8010a04 <grid_timer_isr_+0x854>)
 80108c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108c2:	4b54      	ldr	r3, [pc, #336]	; (8010a14 <grid_timer_isr_+0x864>)
 80108c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108c6:	1ad2      	subs	r2, r2, r3
 80108c8:	4b55      	ldr	r3, [pc, #340]	; (8010a20 <grid_timer_isr_+0x870>)
 80108ca:	fba3 4302 	umull	r4, r3, r3, r2
 80108ce:	099b      	lsrs	r3, r3, #6
 80108d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80108d4:	fb04 f303 	mul.w	r3, r4, r3
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	011b      	lsls	r3, r3, #4
 80108dc:	18c2      	adds	r2, r0, r3
 80108de:	4b4c      	ldr	r3, [pc, #304]	; (8010a10 <grid_timer_isr_+0x860>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	440a      	add	r2, r1
 80108e4:	635a      	str	r2, [r3, #52]	; 0x34
						unmask_main_timer(1);
 80108e6:	2001      	movs	r0, #1
 80108e8:	f7fe f87a 	bl	800e9e0 <unmask_main_timer>

						#if	ENERGEST_CONF_ON
						ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 80108ec:	4b4d      	ldr	r3, [pc, #308]	; (8010a24 <grid_timer_isr_+0x874>)
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f000 8728 	beq.w	8011746 <grid_timer_isr_+0x1596>
 80108f6:	4b46      	ldr	r3, [pc, #280]	; (8010a10 <grid_timer_isr_+0x860>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108fc:	4b4a      	ldr	r3, [pc, #296]	; (8010a28 <grid_timer_isr_+0x878>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	1ad2      	subs	r2, r2, r3
 8010902:	4b4a      	ldr	r3, [pc, #296]	; (8010a2c <grid_timer_isr_+0x87c>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4413      	add	r3, r2
 8010908:	4a48      	ldr	r2, [pc, #288]	; (8010a2c <grid_timer_isr_+0x87c>)
 801090a:	6013      	str	r3, [r2, #0]
 801090c:	4b45      	ldr	r3, [pc, #276]	; (8010a24 <grid_timer_isr_+0x874>)
 801090e:	2200      	movs	r2, #0
 8010910:	701a      	strb	r2, [r3, #0]
						#endif
						GPI_TRACE_RETURN_FAST();
 8010912:	f000 bf18 	b.w	8011746 <grid_timer_isr_+0x1596>
					{
						goto tx_failed_;
					}
				}

				SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8010916:	2005      	movs	r0, #5
 8010918:	f7fc f81e 	bl	800c958 <SX1276SetOpMode>
 801091c:	2300      	movs	r3, #0
 801091e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if (mask)
 8010922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010926:	2b00      	cmp	r3, #0
 8010928:	d003      	beq.n	8010932 <grid_timer_isr_+0x782>
		LED_GPIO_Port->BSRR = mask;
 801092a:	4a41      	ldr	r2, [pc, #260]	; (8010a30 <grid_timer_isr_+0x880>)
 801092c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010930:	6193      	str	r3, [r2, #24]
 8010932:	4b37      	ldr	r3, [pc, #220]	; (8010a10 <grid_timer_isr_+0x860>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				gpi_led_on(LED_RX);

				#if ENERGEST_CONF_ON
					ENERGEST_ON(ENERGEST_TYPE_LISTEN);
 8010938:	4a3b      	ldr	r2, [pc, #236]	; (8010a28 <grid_timer_isr_+0x878>)
 801093a:	63d3      	str	r3, [r2, #60]	; 0x3c
 801093c:	4b39      	ldr	r3, [pc, #228]	; (8010a24 <grid_timer_isr_+0x874>)
 801093e:	2201      	movs	r2, #1
 8010940:	73da      	strb	r2, [r3, #15]
				#endif

				s.lbt_tx_on = CCA_ON;
 8010942:	4b2f      	ldr	r3, [pc, #188]	; (8010a00 <grid_timer_isr_+0x850>)
 8010944:	2201      	movs	r2, #1
 8010946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				MAIN_TIMER_CC_REG = MAIN_TIMER_CNT_REG + GPI_TICK_US_TO_FAST2(LBT_CCA_TIME + t_ps_us - radio.isr_latency_buffer);
 801094a:	4b31      	ldr	r3, [pc, #196]	; (8010a10 <grid_timer_isr_+0x860>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010950:	4b30      	ldr	r3, [pc, #192]	; (8010a14 <grid_timer_isr_+0x864>)
 8010952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010954:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801095e:	3308      	adds	r3, #8
 8010960:	4a2d      	ldr	r2, [pc, #180]	; (8010a18 <grid_timer_isr_+0x868>)
 8010962:	fba2 2303 	umull	r2, r3, r2, r3
 8010966:	0c9b      	lsrs	r3, r3, #18
 8010968:	4a2c      	ldr	r2, [pc, #176]	; (8010a1c <grid_timer_isr_+0x86c>)
 801096a:	fb02 f003 	mul.w	r0, r2, r3
 801096e:	4b29      	ldr	r3, [pc, #164]	; (8010a14 <grid_timer_isr_+0x864>)
 8010970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010972:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801097c:	3308      	adds	r3, #8
 801097e:	4a28      	ldr	r2, [pc, #160]	; (8010a20 <grid_timer_isr_+0x870>)
 8010980:	fba2 2303 	umull	r2, r3, r2, r3
 8010984:	099a      	lsrs	r2, r3, #6
 8010986:	4b26      	ldr	r3, [pc, #152]	; (8010a20 <grid_timer_isr_+0x870>)
 8010988:	fba3 4302 	umull	r4, r3, r3, r2
 801098c:	099b      	lsrs	r3, r3, #6
 801098e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010992:	fb04 f303 	mul.w	r3, r4, r3
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 801099c:	fb02 f303 	mul.w	r3, r2, r3
 80109a0:	4418      	add	r0, r3
 80109a2:	4b1c      	ldr	r3, [pc, #112]	; (8010a14 <grid_timer_isr_+0x864>)
 80109a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80109b0:	3308      	adds	r3, #8
 80109b2:	4a1b      	ldr	r2, [pc, #108]	; (8010a20 <grid_timer_isr_+0x870>)
 80109b4:	fba2 4203 	umull	r4, r2, r2, r3
 80109b8:	0992      	lsrs	r2, r2, #6
 80109ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80109be:	fb04 f202 	mul.w	r2, r4, r2
 80109c2:	1a9a      	subs	r2, r3, r2
 80109c4:	0113      	lsls	r3, r2, #4
 80109c6:	18c2      	adds	r2, r0, r3
 80109c8:	4b11      	ldr	r3, [pc, #68]	; (8010a10 <grid_timer_isr_+0x860>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	440a      	add	r2, r1
 80109ce:	635a      	str	r2, [r3, #52]	; 0x34

				unmask_main_timer(1);
 80109d0:	2001      	movs	r0, #1
 80109d2:	f7fe f805 	bl	800e9e0 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 80109d6:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <grid_timer_isr_+0x874>)
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 86b5 	beq.w	801174a <grid_timer_isr_+0x159a>
 80109e0:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <grid_timer_isr_+0x860>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109e6:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <grid_timer_isr_+0x878>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	1ad2      	subs	r2, r2, r3
 80109ec:	4b0f      	ldr	r3, [pc, #60]	; (8010a2c <grid_timer_isr_+0x87c>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4413      	add	r3, r2
 80109f2:	4a0e      	ldr	r2, [pc, #56]	; (8010a2c <grid_timer_isr_+0x87c>)
 80109f4:	6013      	str	r3, [r2, #0]
 80109f6:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <grid_timer_isr_+0x874>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	701a      	strb	r2, [r3, #0]
#endif
				GPI_TRACE_RETURN_FAST();
 80109fc:	f000 bea5 	b.w	801174a <grid_timer_isr_+0x159a>
 8010a00:	20000410 	.word	0x20000410
 8010a04:	20001430 	.word	0x20001430
 8010a08:	200014f0 	.word	0x200014f0
 8010a0c:	00030d40 	.word	0x00030d40
 8010a10:	200012c8 	.word	0x200012c8
 8010a14:	200003c4 	.word	0x200003c4
 8010a18:	431bde83 	.word	0x431bde83
 8010a1c:	00f42400 	.word	0x00f42400
 8010a20:	10624dd3 	.word	0x10624dd3
 8010a24:	2000112c 	.word	0x2000112c
 8010a28:	20001308 	.word	0x20001308
 8010a2c:	20000f10 	.word	0x20000f10
 8010a30:	48000800 	.word	0x48000800
			}
			else if (s.lbt_tx_on == CCA_ON)
 8010a34:	4b87      	ldr	r3, [pc, #540]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	f040 81db 	bne.w	8010df6 <grid_timer_isr_+0xc46>
			{
				s.lbt_tx_on = CCA_NONE;
 8010a40:	4b84      	ldr	r3, [pc, #528]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 8010a48:	2000      	movs	r0, #0
 8010a4a:	f7fb ff85 	bl	800c958 <SX1276SetOpMode>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	if (mask)
 8010a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d003      	beq.n	8010a64 <grid_timer_isr_+0x8b4>
		LED_GPIO_Port->BRR = mask;
 8010a5c:	4a7e      	ldr	r2, [pc, #504]	; (8010c58 <grid_timer_isr_+0xaa8>)
 8010a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a62:	6293      	str	r3, [r2, #40]	; 0x28
				gpi_led_off(LED_RX);
				#if ENERGEST_CONF_ON
					ENERGEST_OFF(ENERGEST_TYPE_LISTEN);
 8010a64:	4b7d      	ldr	r3, [pc, #500]	; (8010c5c <grid_timer_isr_+0xaac>)
 8010a66:	7bdb      	ldrb	r3, [r3, #15]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00d      	beq.n	8010a88 <grid_timer_isr_+0x8d8>
 8010a6c:	4b7c      	ldr	r3, [pc, #496]	; (8010c60 <grid_timer_isr_+0xab0>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a72:	4b7c      	ldr	r3, [pc, #496]	; (8010c64 <grid_timer_isr_+0xab4>)
 8010a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a76:	1ad2      	subs	r2, r2, r3
 8010a78:	4b7b      	ldr	r3, [pc, #492]	; (8010c68 <grid_timer_isr_+0xab8>)
 8010a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a7c:	4413      	add	r3, r2
 8010a7e:	4a7a      	ldr	r2, [pc, #488]	; (8010c68 <grid_timer_isr_+0xab8>)
 8010a80:	63d3      	str	r3, [r2, #60]	; 0x3c
 8010a82:	4b76      	ldr	r3, [pc, #472]	; (8010c5c <grid_timer_isr_+0xaac>)
 8010a84:	2200      	movs	r2, #0
 8010a86:	73da      	strb	r2, [r3, #15]
				#endif
				s.lbt_channel_seq_no ++;
 8010a88:	4b72      	ldr	r3, [pc, #456]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a8e:	3301      	adds	r3, #1
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	4b70      	ldr	r3, [pc, #448]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				read_value = gpi_read_rssi(0);
 8010a98:	f107 0314 	add.w	r3, r7, #20
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fc fcbe 	bl	800d420 <gpi_read_rssi>
				if (read_value.RssiValue > s.lbt_sensitivity_in_dbm)
 8010aa4:	f107 0314 	add.w	r3, r7, #20
 8010aa8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010aac:	4b69      	ldr	r3, [pc, #420]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010aae:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	f340 80e8 	ble.w	8010c88 <grid_timer_isr_+0xad8>
				{
					if (s.lbt_channel_seq_no < CHANNEL_ALTER)
 8010ab8:	4b66      	ldr	r3, [pc, #408]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	f200 8478 	bhi.w	80113b4 <grid_timer_isr_+0x1204>
					{
						s.tx_now_channel = lbt_pesudo_channel(chirp_config.lbt_channel_total, chirp_config.lbt_channel_primary, mx.slot_number + 1 + chirp_config.lbt_channel_primary + s.lbt_channel_seq_no, chirp_config.lbt_channel_mask);
 8010ac4:	4b69      	ldr	r3, [pc, #420]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010ac6:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 8010aca:	4b68      	ldr	r3, [pc, #416]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010acc:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 8010ad0:	4b67      	ldr	r3, [pc, #412]	; (8010c70 <grid_timer_isr_+0xac0>)
 8010ad2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	4b64      	ldr	r3, [pc, #400]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010ada:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	4b5b      	ldr	r3, [pc, #364]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	4413      	add	r3, r2
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	3301      	adds	r3, #1
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	4b5d      	ldr	r3, [pc, #372]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010af8:	f7f9 fcba 	bl	800a470 <lbt_pesudo_channel>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	4b54      	ldr	r3, [pc, #336]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

						SX1276SetChannel(chirp_config.lora_freq + s.tx_now_channel * CHANNEL_STEP);
 8010b06:	4b59      	ldr	r3, [pc, #356]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010b08:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8010b0c:	4a51      	ldr	r2, [pc, #324]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b0e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8010b12:	4611      	mov	r1, r2
 8010b14:	4a57      	ldr	r2, [pc, #348]	; (8010c74 <grid_timer_isr_+0xac4>)
 8010b16:	fb02 f201 	mul.w	r2, r2, r1
 8010b1a:	4413      	add	r3, r2
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fb fab5 	bl	800c08c <SX1276SetChannel>

						t_lbt = s.next_grid_tick_last + s.tx_trigger_offset - radio.tx_to_grid_offset + GPI_TICK_US_TO_HYBRID2(chirp_config.lbt_detect_duration_us * s.lbt_channel_seq_no - radio.isr_latency_buffer);
 8010b22:	4b4c      	ldr	r3, [pc, #304]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b26:	4b4b      	ldr	r3, [pc, #300]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2a:	441a      	add	r2, r3
 8010b2c:	4b52      	ldr	r3, [pc, #328]	; (8010c78 <grid_timer_isr_+0xac8>)
 8010b2e:	695b      	ldr	r3, [r3, #20]
 8010b30:	1ad1      	subs	r1, r2, r3
 8010b32:	4b4e      	ldr	r3, [pc, #312]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b36:	4a47      	ldr	r2, [pc, #284]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b38:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010b3c:	fb02 f203 	mul.w	r2, r2, r3
 8010b40:	4b4d      	ldr	r3, [pc, #308]	; (8010c78 <grid_timer_isr_+0xac8>)
 8010b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b44:	1ad3      	subs	r3, r2, r3
 8010b46:	4a4d      	ldr	r2, [pc, #308]	; (8010c7c <grid_timer_isr_+0xacc>)
 8010b48:	fba2 2303 	umull	r2, r3, r2, r3
 8010b4c:	0c9b      	lsrs	r3, r3, #18
 8010b4e:	4a4c      	ldr	r2, [pc, #304]	; (8010c80 <grid_timer_isr_+0xad0>)
 8010b50:	fb02 f003 	mul.w	r0, r2, r3
 8010b54:	4b45      	ldr	r3, [pc, #276]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b58:	4a3e      	ldr	r2, [pc, #248]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b5a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010b5e:	fb02 f203 	mul.w	r2, r2, r3
 8010b62:	4b45      	ldr	r3, [pc, #276]	; (8010c78 <grid_timer_isr_+0xac8>)
 8010b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	4a46      	ldr	r2, [pc, #280]	; (8010c84 <grid_timer_isr_+0xad4>)
 8010b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8010b6e:	099a      	lsrs	r2, r3, #6
 8010b70:	4b44      	ldr	r3, [pc, #272]	; (8010c84 <grid_timer_isr_+0xad4>)
 8010b72:	fba3 4302 	umull	r4, r3, r3, r2
 8010b76:	099b      	lsrs	r3, r3, #6
 8010b78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010b7c:	fb04 f303 	mul.w	r3, r4, r3
 8010b80:	1ad3      	subs	r3, r2, r3
 8010b82:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8010b86:	fb02 f303 	mul.w	r3, r2, r3
 8010b8a:	4418      	add	r0, r3
 8010b8c:	4b37      	ldr	r3, [pc, #220]	; (8010c6c <grid_timer_isr_+0xabc>)
 8010b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b90:	4a30      	ldr	r2, [pc, #192]	; (8010c54 <grid_timer_isr_+0xaa4>)
 8010b92:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010b96:	fb02 f203 	mul.w	r2, r2, r3
 8010b9a:	4b37      	ldr	r3, [pc, #220]	; (8010c78 <grid_timer_isr_+0xac8>)
 8010b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9e:	1ad2      	subs	r2, r2, r3
 8010ba0:	4b38      	ldr	r3, [pc, #224]	; (8010c84 <grid_timer_isr_+0xad4>)
 8010ba2:	fba3 4302 	umull	r4, r3, r3, r2
 8010ba6:	099b      	lsrs	r3, r3, #6
 8010ba8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010bac:	fb04 f303 	mul.w	r3, r4, r3
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	011b      	lsls	r3, r3, #4
 8010bb4:	4403      	add	r3, r0
 8010bb6:	440b      	add	r3, r1
 8010bb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						r_lbt = gpi_tick_hybrid_reference();
 8010bbc:	f107 031c 	add.w	r3, r7, #28
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fa ffd1 	bl	800bb68 <gpi_tick_hybrid_reference>

						MAIN_TIMER_CC_REG = r_lbt.fast_capture + (t_lbt - r_lbt.hybrid_tick) * FAST_HYBRID_RATIO;
 8010bc6:	f107 031c 	add.w	r3, r7, #28
 8010bca:	6859      	ldr	r1, [r3, #4]
 8010bcc:	f107 031c 	add.w	r3, r7, #28
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010bd6:	1ad2      	subs	r2, r2, r3
 8010bd8:	4b21      	ldr	r3, [pc, #132]	; (8010c60 <grid_timer_isr_+0xab0>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	440a      	add	r2, r1
 8010bde:	635a      	str	r2, [r3, #52]	; 0x34

						if (gpi_tick_compare_fast_native(MAIN_TIMER_CC_REG, MAIN_TIMER_CNT_REG) <= 0)
 8010be0:	4b1f      	ldr	r3, [pc, #124]	; (8010c60 <grid_timer_isr_+0xab0>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010be6:	4b1e      	ldr	r3, [pc, #120]	; (8010c60 <grid_timer_isr_+0xab0>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010bf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010c02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	db07      	blt.n	8010c1a <grid_timer_isr_+0xa6a>
 8010c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	bf14      	ite	ne
 8010c12:	2301      	movne	r3, #1
 8010c14:	2300      	moveq	r3, #0
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	e001      	b.n	8010c1e <grid_timer_isr_+0xa6e>
 8010c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dc00      	bgt.n	8010c24 <grid_timer_isr_+0xa74>
						{
							goto lbt_cca_;
 8010c22:	e555      	b.n	80106d0 <grid_timer_isr_+0x520>
						}

						unmask_main_timer(1);
 8010c24:	2001      	movs	r0, #1
 8010c26:	f7fd fedb 	bl	800e9e0 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8010c2a:	4b0c      	ldr	r3, [pc, #48]	; (8010c5c <grid_timer_isr_+0xaac>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 859e 	beq.w	8011770 <grid_timer_isr_+0x15c0>
 8010c34:	4b0a      	ldr	r3, [pc, #40]	; (8010c60 <grid_timer_isr_+0xab0>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <grid_timer_isr_+0xab4>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	1ad2      	subs	r2, r2, r3
 8010c40:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <grid_timer_isr_+0xab8>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4413      	add	r3, r2
 8010c46:	4a08      	ldr	r2, [pc, #32]	; (8010c68 <grid_timer_isr_+0xab8>)
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <grid_timer_isr_+0xaac>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	701a      	strb	r2, [r3, #0]
#endif
						GPI_TRACE_RETURN_FAST();
 8010c50:	f000 bd8e 	b.w	8011770 <grid_timer_isr_+0x15c0>
 8010c54:	20000410 	.word	0x20000410
 8010c58:	48000800 	.word	0x48000800
 8010c5c:	2000112c 	.word	0x2000112c
 8010c60:	200012c8 	.word	0x200012c8
 8010c64:	20001308 	.word	0x20001308
 8010c68:	20000f10 	.word	0x20000f10
 8010c6c:	20001430 	.word	0x20001430
 8010c70:	200014f0 	.word	0x200014f0
 8010c74:	00030d40 	.word	0x00030d40
 8010c78:	200003c4 	.word	0x200003c4
 8010c7c:	431bde83 	.word	0x431bde83
 8010c80:	00f42400 	.word	0x00f42400
 8010c84:	10624dd3 	.word	0x10624dd3
						goto tx_failed_;
					}
				}
				else
				{
					s.lbt_tx_on = CCA_DONE;
 8010c88:	4b74      	ldr	r3, [pc, #464]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					t_lbt = s.next_grid_tick_last + s.tx_trigger_offset - radio.tx_to_grid_offset + GPI_TICK_US_TO_HYBRID2((s.lbt_channel_seq_no - 1) * chirp_config.lbt_detect_duration_us + LBT_DELAY_IN_US - radio.isr_latency_buffer);
 8010c90:	4b72      	ldr	r3, [pc, #456]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c94:	4b71      	ldr	r3, [pc, #452]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c98:	441a      	add	r2, r3
 8010c9a:	4b71      	ldr	r3, [pc, #452]	; (8010e60 <grid_timer_isr_+0xcb0>)
 8010c9c:	695b      	ldr	r3, [r3, #20]
 8010c9e:	1ad1      	subs	r1, r2, r3
 8010ca0:	4b6e      	ldr	r3, [pc, #440]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	461a      	mov	r2, r3
 8010caa:	4b6e      	ldr	r3, [pc, #440]	; (8010e64 <grid_timer_isr_+0xcb4>)
 8010cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cae:	fb03 f202 	mul.w	r2, r3, r2
 8010cb2:	4b6b      	ldr	r3, [pc, #428]	; (8010e60 <grid_timer_isr_+0xcb0>)
 8010cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010cbc:	3310      	adds	r3, #16
 8010cbe:	4a6a      	ldr	r2, [pc, #424]	; (8010e68 <grid_timer_isr_+0xcb8>)
 8010cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc4:	0c9b      	lsrs	r3, r3, #18
 8010cc6:	4a69      	ldr	r2, [pc, #420]	; (8010e6c <grid_timer_isr_+0xcbc>)
 8010cc8:	fb02 f003 	mul.w	r0, r2, r3
 8010ccc:	4b63      	ldr	r3, [pc, #396]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4b63      	ldr	r3, [pc, #396]	; (8010e64 <grid_timer_isr_+0xcb4>)
 8010cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010cda:	fb03 f202 	mul.w	r2, r3, r2
 8010cde:	4b60      	ldr	r3, [pc, #384]	; (8010e60 <grid_timer_isr_+0xcb0>)
 8010ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010ce8:	3310      	adds	r3, #16
 8010cea:	4a61      	ldr	r2, [pc, #388]	; (8010e70 <grid_timer_isr_+0xcc0>)
 8010cec:	fba2 2303 	umull	r2, r3, r2, r3
 8010cf0:	099a      	lsrs	r2, r3, #6
 8010cf2:	4b5f      	ldr	r3, [pc, #380]	; (8010e70 <grid_timer_isr_+0xcc0>)
 8010cf4:	fba3 4302 	umull	r4, r3, r3, r2
 8010cf8:	099b      	lsrs	r3, r3, #6
 8010cfa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010cfe:	fb04 f303 	mul.w	r3, r4, r3
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8010d08:	fb02 f303 	mul.w	r3, r2, r3
 8010d0c:	4418      	add	r0, r3
 8010d0e:	4b53      	ldr	r3, [pc, #332]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d14:	3b01      	subs	r3, #1
 8010d16:	461a      	mov	r2, r3
 8010d18:	4b52      	ldr	r3, [pc, #328]	; (8010e64 <grid_timer_isr_+0xcb4>)
 8010d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d1c:	fb03 f202 	mul.w	r2, r3, r2
 8010d20:	4b4f      	ldr	r3, [pc, #316]	; (8010e60 <grid_timer_isr_+0xcb0>)
 8010d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8010d2a:	3310      	adds	r3, #16
 8010d2c:	4a50      	ldr	r2, [pc, #320]	; (8010e70 <grid_timer_isr_+0xcc0>)
 8010d2e:	fba2 4203 	umull	r4, r2, r2, r3
 8010d32:	0992      	lsrs	r2, r2, #6
 8010d34:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010d38:	fb04 f202 	mul.w	r2, r4, r2
 8010d3c:	1a9a      	subs	r2, r3, r2
 8010d3e:	0113      	lsls	r3, r2, #4
 8010d40:	4403      	add	r3, r0
 8010d42:	440b      	add	r3, r1
 8010d44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
					s.lbt_channel_seq_no = 0;
 8010d48:	4b44      	ldr	r3, [pc, #272]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					r_lbt = gpi_tick_hybrid_reference();
 8010d50:	f107 041c 	add.w	r4, r7, #28
 8010d54:	463b      	mov	r3, r7
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fa ff06 	bl	800bb68 <gpi_tick_hybrid_reference>
 8010d5c:	463a      	mov	r2, r7
 8010d5e:	4623      	mov	r3, r4
 8010d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d64:	e883 0003 	stmia.w	r3, {r0, r1}

					MAIN_TIMER_CC_REG = r_lbt.fast_capture + (t_lbt - r_lbt.hybrid_tick) * FAST_HYBRID_RATIO;
 8010d68:	f107 031c 	add.w	r3, r7, #28
 8010d6c:	6859      	ldr	r1, [r3, #4]
 8010d6e:	f107 031c 	add.w	r3, r7, #28
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010d78:	1ad2      	subs	r2, r2, r3
 8010d7a:	4b3e      	ldr	r3, [pc, #248]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	440a      	add	r2, r1
 8010d80:	635a      	str	r2, [r3, #52]	; 0x34

					if (gpi_tick_compare_fast_native(MAIN_TIMER_CC_REG, MAIN_TIMER_CNT_REG) > 0)
 8010d82:	4b3c      	ldr	r3, [pc, #240]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d88:	4b3a      	ldr	r3, [pc, #232]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d8e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010d96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	db07      	blt.n	8010dbc <grid_timer_isr_+0xc0c>
 8010dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	bf14      	ite	ne
 8010db4:	2301      	movne	r3, #1
 8010db6:	2300      	moveq	r3, #0
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	e001      	b.n	8010dc0 <grid_timer_isr_+0xc10>
 8010dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	dd20      	ble.n	8010e06 <grid_timer_isr_+0xc56>
					{
						unmask_main_timer(1);
 8010dc4:	2001      	movs	r0, #1
 8010dc6:	f7fd fe0b 	bl	800e9e0 <unmask_main_timer>

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 8010dca:	4b2b      	ldr	r3, [pc, #172]	; (8010e78 <grid_timer_isr_+0xcc8>)
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f000 84d0 	beq.w	8011774 <grid_timer_isr_+0x15c4>
 8010dd4:	4b27      	ldr	r3, [pc, #156]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dda:	4b28      	ldr	r3, [pc, #160]	; (8010e7c <grid_timer_isr_+0xccc>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	1ad2      	subs	r2, r2, r3
 8010de0:	4b27      	ldr	r3, [pc, #156]	; (8010e80 <grid_timer_isr_+0xcd0>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4413      	add	r3, r2
 8010de6:	4a26      	ldr	r2, [pc, #152]	; (8010e80 <grid_timer_isr_+0xcd0>)
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	4b23      	ldr	r3, [pc, #140]	; (8010e78 <grid_timer_isr_+0xcc8>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	701a      	strb	r2, [r3, #0]
#endif
						GPI_TRACE_RETURN_FAST();
 8010df0:	bf00      	nop
 8010df2:	f000 bcbf 	b.w	8011774 <grid_timer_isr_+0x15c4>
					}
				}
			}
			else
			{
				s.lbt_tx_on = CCA_NONE;
 8010df6:	4b19      	ldr	r3, [pc, #100]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 8010dfe:	4b17      	ldr	r3, [pc, #92]	; (8010e5c <grid_timer_isr_+0xcac>)
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		// trigger_tick_slow = LP_TIMER_CMP_REG + (Gpi_Slow_Tick_Native)((Gpi_Fast_Tick_Native)(ISR_LATENCY_SLOW) / (Gpi_Fast_Tick_Native)HYBRID_SLOW_RATIO);

		// trigger_tick = gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) + GPI_TICK_US_TO_FAST(ISR_LATENCY_BUFFER);
		// trigger_tick = s.next_grid_tick;
		// trigger_tick = s.hybrid_trigger;
		trigger_tick = MAIN_TIMER_CC_REG + GPI_TICK_US_TO_FAST(radio.isr_latency_buffer);
 8010e06:	4b1b      	ldr	r3, [pc, #108]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e0c:	4b14      	ldr	r3, [pc, #80]	; (8010e60 <grid_timer_isr_+0xcb0>)
 8010e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e10:	011b      	lsls	r3, r3, #4
 8010e12:	4413      	add	r3, r2
 8010e14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		// wait until trigger time has been reached
		PROFILE_ISR();
 8010e18:	bf00      	nop

		// while (gpi_tick_compare_slow_native(gpi_tick_slow_native(), trigger_tick_slow) < 0)
		// while (gpi_tick_compare_hybrid(gpi_tick_hybrid(), trigger_tick) <= 0)
		while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0)
 8010e1a:	e002      	b.n	8010e22 <grid_timer_isr_+0xc72>
			late = 0;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8010e22:	4b14      	ldr	r3, [pc, #80]	; (8010e74 <grid_timer_isr_+0xcc4>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	db1c      	blt.n	8010e84 <grid_timer_isr_+0xcd4>
 8010e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	bf14      	ite	ne
 8010e52:	2301      	movne	r3, #1
 8010e54:	2300      	moveq	r3, #0
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	e016      	b.n	8010e88 <grid_timer_isr_+0xcd8>
 8010e5a:	bf00      	nop
 8010e5c:	20000410 	.word	0x20000410
 8010e60:	200003c4 	.word	0x200003c4
 8010e64:	20001430 	.word	0x20001430
 8010e68:	431bde83 	.word	0x431bde83
 8010e6c:	00f42400 	.word	0x00f42400
 8010e70:	10624dd3 	.word	0x10624dd3
 8010e74:	200012c8 	.word	0x200012c8
 8010e78:	2000112c 	.word	0x2000112c
 8010e7c:	20001308 	.word	0x20001308
 8010e80:	20000f10 	.word	0x20000f10
 8010e84:	f04f 33ff 	mov.w	r3, #4294967295
		while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), trigger_tick) < 0)
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	dbc7      	blt.n	8010e1c <grid_timer_isr_+0xc6c>
		PROFILE_ISR();
 8010e8c:	bf00      	nop

		SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );
 8010e8e:	2003      	movs	r0, #3
 8010e90:	f7fb fd62 	bl	800c958 <SX1276SetOpMode>

		// if we are late: start manually (immediately)
		if (late)
 8010e94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d004      	beq.n	8010ea6 <grid_timer_isr_+0xcf6>
 8010e9c:	4b90      	ldr	r3, [pc, #576]	; (80110e0 <grid_timer_isr_+0xf30>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		{
			// SX1276SetOpMode( RFLR_OPMODE_TRANSMITTER );

			#if MX_VERBOSE_STATISTICS
				trigger_tick = gpi_tick_fast_native();
 8010ea2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			#endif
        }

		// init FIFO
		SX1276Write( REG_LR_PAYLOADLENGTH, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8010ea6:	4b8f      	ldr	r3, [pc, #572]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010ea8:	8a5b      	ldrh	r3, [r3, #18]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	3302      	adds	r3, #2
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	2022      	movs	r0, #34	; 0x22
 8010eb6:	f7fb fdc7 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8010eba:	2033      	movs	r0, #51	; 0x33
 8010ebc:	f7fb fdd6 	bl	800ca6c <SX1276Read>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	b25b      	sxtb	r3, r3
 8010ec4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8010ec8:	b25b      	sxtb	r3, r3
 8010eca:	f043 0301 	orr.w	r3, r3, #1
 8010ece:	b25b      	sxtb	r3, r3
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	2033      	movs	r0, #51	; 0x33
 8010ed6:	f7fb fdb7 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8010eda:	211d      	movs	r1, #29
 8010edc:	203b      	movs	r0, #59	; 0x3b
 8010ede:	f7fb fdb3 	bl	800ca48 <SX1276Write>
		// Full buffer used for Tx
		SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	200e      	movs	r0, #14
 8010ee6:	f7fb fdaf 	bl	800ca48 <SX1276Write>
		SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8010eea:	2100      	movs	r1, #0
 8010eec:	200d      	movs	r0, #13
 8010eee:	f7fb fdab 	bl	800ca48 <SX1276Write>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (mask)
 8010ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <grid_timer_isr_+0xd52>
		LED_GPIO_Port->BSRR = mask;
 8010efc:	4a7a      	ldr	r2, [pc, #488]	; (80110e8 <grid_timer_isr_+0xf38>)
 8010efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f00:	6193      	str	r3, [r2, #24]

		gpi_led_on(LED_TX);
		#if MX_VERBOSE_STATISTICS
			s.radio_start_timestamp = trigger_tick | 1;
 8010f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010f06:	f043 0301 	orr.w	r3, r3, #1
 8010f0a:	4a78      	ldr	r2, [pc, #480]	; (80110ec <grid_timer_isr_+0xf3c>)
 8010f0c:	6353      	str	r3, [r2, #52]	; 0x34
			if (late)
 8010f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d007      	beq.n	8010f26 <grid_timer_isr_+0xd76>
				mx.stat_counter.num_tx_late++;
 8010f16:	4b76      	ldr	r3, [pc, #472]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f18:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	4b73      	ldr	r3, [pc, #460]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f22:	f8a3 288a 	strh.w	r2, [r3, #2186]	; 0x88a
 8010f26:	4b6e      	ldr	r3, [pc, #440]	; (80110e0 <grid_timer_isr_+0xf30>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if ENERGEST_CONF_ON
			ENERGEST_ON(ENERGEST_TYPE_TRANSMIT);
 8010f2c:	4a71      	ldr	r2, [pc, #452]	; (80110f4 <grid_timer_isr_+0xf44>)
 8010f2e:	6393      	str	r3, [r2, #56]	; 0x38
 8010f30:	4b71      	ldr	r3, [pc, #452]	; (80110f8 <grid_timer_isr_+0xf48>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	739a      	strb	r2, [r3, #14]
 8010f36:	4b6a      	ldr	r3, [pc, #424]	; (80110e0 <grid_timer_isr_+0xf30>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		#endif

		#if MX_LBT_ACCESS
			s.tx_on_time = gpi_tick_fast_native();
 8010f3c:	4a6b      	ldr	r2, [pc, #428]	; (80110ec <grid_timer_isr_+0xf3c>)
 8010f3e:	6453      	str	r3, [r2, #68]	; 0x44
		#endif

		// finalize header
		{
			mx.tx_packet->app_header = chirp_config.packet_hash;
 8010f40:	4b6b      	ldr	r3, [pc, #428]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f44:	4a67      	ldr	r2, [pc, #412]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010f46:	f8d2 2052 	ldr.w	r2, [r2, #82]	; 0x52
 8010f4a:	601a      	str	r2, [r3, #0]
			uint16_t slot_number = mx.slot_number + 1;
 8010f4c:	4b68      	ldr	r3, [pc, #416]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f4e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	3301      	adds	r3, #1
 8010f56:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa

			mx.tx_packet->slot_number = slot_number;
 8010f5a:	4b65      	ldr	r3, [pc, #404]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5e:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8010f62:	809a      	strh	r2, [r3, #4]
			mx.tx_packet->flags.all = 0;
 8010f64:	4b62      	ldr	r3, [pc, #392]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f68:	2200      	movs	r2, #0
 8010f6a:	71da      	strb	r2, [r3, #7]

			if ((slot_number < chirp_config.mx_generation_size) && (0 == mx.matrix[slot_number]->birth_slot))
 8010f6c:	4b5d      	ldr	r3, [pc, #372]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010f6e:	885b      	ldrh	r3, [r3, #2]
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d20f      	bcs.n	8010f9a <grid_timer_isr_+0xdea>
 8010f7a:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8010f7e:	4a5c      	ldr	r2, [pc, #368]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f80:	3316      	adds	r3, #22
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	4413      	add	r3, r2
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d105      	bne.n	8010f9a <grid_timer_isr_+0xdea>
			{
				mx.tx_packet->flags.has_next_payload = 1;
 8010f8e:	4b58      	ldr	r3, [pc, #352]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f92:	79d3      	ldrb	r3, [r2, #7]
 8010f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f98:	71d3      	strb	r3, [r2, #7]
			}

			if (chirp_config.mx_generation_size == mx.rank)
 8010f9a:	4b52      	ldr	r3, [pc, #328]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010f9c:	885b      	ldrh	r3, [r3, #2]
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	4b53      	ldr	r3, [pc, #332]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010fa2:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d106      	bne.n	8010fb8 <grid_timer_isr_+0xe08>
			{
				mx.tx_packet->flags.is_full_rank = 1;
 8010faa:	4b51      	ldr	r3, [pc, #324]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fae:	79d3      	ldrb	r3, [r2, #7]
 8010fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb4:	71d3      	strb	r3, [r2, #7]
 8010fb6:	e05f      	b.n	8011078 <grid_timer_isr_+0xec8>
					}
				#endif
            }

			#if MX_REQUEST
			else if (slot_number >= chirp_config.mx_generation_size)
 8010fb8:	4b4a      	ldr	r3, [pc, #296]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010fba:	885b      	ldrh	r3, [r3, #2]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d358      	bcc.n	8011078 <grid_timer_isr_+0xec8>

				// f(x) = 2 ^ (-x) (scaled)
				// -> could be computed directly, but the (small) LUT is the faster variant
				static const uint8_t LUT2[] = {0x3f, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};

				uint8_t  	x = LUT1[MIN(chirp_config.mx_generation_size - mx.rank, NUM_ELEMENTS(LUT1) - 1)];
 8010fc6:	4b47      	ldr	r3, [pc, #284]	; (80110e4 <grid_timer_isr_+0xf34>)
 8010fc8:	885b      	ldrh	r3, [r3, #2]
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b48      	ldr	r3, [pc, #288]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010fd0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010fda:	2324      	movs	r3, #36	; 0x24
 8010fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010fe0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	bf28      	it	cs
 8010fec:	4613      	movcs	r3, r2
 8010fee:	4a43      	ldr	r2, [pc, #268]	; (80110fc <grid_timer_isr_+0xf4c>)
 8010ff0:	5cd3      	ldrb	r3, [r2, r3]
 8010ff2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				uint16_t 	age = slot_number - mx.recent_innovative_slot;
 8010ff6:	4b3e      	ldr	r3, [pc, #248]	; (80110f0 <grid_timer_isr_+0xf40>)
 8010ff8:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8010ffc:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec

				uint8_t	 	rand = mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_RAND;		// prepared on thread level
 8011006:	4b3a      	ldr	r3, [pc, #232]	; (80110f0 <grid_timer_isr_+0xf40>)
 8011008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100a:	4a36      	ldr	r2, [pc, #216]	; (80110e4 <grid_timer_isr_+0xf34>)
 801100c:	7b92      	ldrb	r2, [r2, #14]
 801100e:	4413      	add	r3, r2
 8011010:	7a1b      	ldrb	r3, [r3, #8]
 8011012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011016:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

			#if MX_COORDINATED_TX
				if ((age >= x) || (0 == mx_present_head->mx_num_nodes))
 801101a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801101e:	b29b      	uxth	r3, r3
 8011020:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8011024:	429a      	cmp	r2, r3
 8011026:	d204      	bcs.n	8011032 <grid_timer_isr_+0xe82>
 8011028:	4b35      	ldr	r3, [pc, #212]	; (8011100 <grid_timer_isr_+0xf50>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	885b      	ldrh	r3, [r3, #2]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d122      	bne.n	8011078 <grid_timer_isr_+0xec8>
			#else
				if ((age >= x))
			#endif
				{
					if (rand < LUT2[MIN(mx.request->my_column_pending, NUM_ELEMENTS(LUT2) - 1)])
 8011032:	4b2f      	ldr	r3, [pc, #188]	; (80110f0 <grid_timer_isr_+0xf40>)
 8011034:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011038:	8a1b      	ldrh	r3, [r3, #16]
 801103a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 801103e:	2306      	movs	r3, #6
 8011040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011044:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8011048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801104c:	4293      	cmp	r3, r2
 801104e:	bf28      	it	cs
 8011050:	4613      	movcs	r3, r2
 8011052:	4a2c      	ldr	r2, [pc, #176]	; (8011104 <grid_timer_isr_+0xf54>)
 8011054:	5cd3      	ldrb	r3, [r2, r3]
 8011056:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 801105a:	429a      	cmp	r2, r3
 801105c:	d206      	bcs.n	801106c <grid_timer_isr_+0xebc>
					{
						mx.tx_packet->flags.request_row = 1;
 801105e:	4b24      	ldr	r3, [pc, #144]	; (80110f0 <grid_timer_isr_+0xf40>)
 8011060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011062:	79d3      	ldrb	r3, [r2, #7]
 8011064:	f043 0302 	orr.w	r3, r3, #2
 8011068:	71d3      	strb	r3, [r2, #7]
 801106a:	e005      	b.n	8011078 <grid_timer_isr_+0xec8>
					}
					else
					{
						mx.tx_packet->flags.request_column = 1;
 801106c:	4b20      	ldr	r3, [pc, #128]	; (80110f0 <grid_timer_isr_+0xf40>)
 801106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011070:	79d3      	ldrb	r3, [r2, #7]
 8011072:	f043 0301 	orr.w	r3, r3, #1
 8011076:	71d3      	strb	r3, [r2, #7]
					}
                }
            }
			#endif

			if (chirp_config.primitive == FLOODING)
 8011078:	4b1a      	ldr	r3, [pc, #104]	; (80110e4 <grid_timer_isr_+0xf34>)
 801107a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801107e:	2b01      	cmp	r3, #1
 8011080:	d105      	bne.n	801108e <grid_timer_isr_+0xede>
				mx.tx_packet->flags.all = chirp_config.glossy_task;
 8011082:	4b1b      	ldr	r3, [pc, #108]	; (80110f0 <grid_timer_isr_+0xf40>)
 8011084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011086:	4a17      	ldr	r2, [pc, #92]	; (80110e4 <grid_timer_isr_+0xf34>)
 8011088:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
 801108c:	71da      	strb	r2, [r3, #7]

			write_tx_fifo(&(mx.tx_packet->phy_payload_begin),
 801108e:	4b18      	ldr	r3, [pc, #96]	; (80110f0 <grid_timer_isr_+0xf40>)
 8011090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011092:	4618      	mov	r0, r3
			NULL, offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.coding_vector.pos);
 8011094:	4b13      	ldr	r3, [pc, #76]	; (80110e4 <grid_timer_isr_+0xf34>)
 8011096:	799b      	ldrb	r3, [r3, #6]
			write_tx_fifo(&(mx.tx_packet->phy_payload_begin),
 8011098:	3308      	adds	r3, #8
 801109a:	b2db      	uxtb	r3, r3
 801109c:	461a      	mov	r2, r3
 801109e:	2100      	movs	r1, #0
 80110a0:	f7fd fcf2 	bl	800ea88 <write_tx_fifo>
		}

		if (chirp_config.primitive != FLOODING)
 80110a4:	4b0f      	ldr	r3, [pc, #60]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110a6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	f000 8118 	beq.w	80112e0 <grid_timer_isr_+0x1130>
		// write coding vector and payload
		{
			assert_reset(chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len);
 80110b0:	4b0c      	ldr	r3, [pc, #48]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110b2:	7a1b      	ldrb	r3, [r3, #8]
 80110b4:	461a      	mov	r2, r3
 80110b6:	4b0b      	ldr	r3, [pc, #44]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110b8:	799b      	ldrb	r3, [r3, #6]
 80110ba:	4619      	mov	r1, r3
 80110bc:	4b09      	ldr	r3, [pc, #36]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110be:	79db      	ldrb	r3, [r3, #7]
 80110c0:	440b      	add	r3, r1
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d032      	beq.n	801112c <grid_timer_isr_+0xf7c>
 80110c6:	4b07      	ldr	r3, [pc, #28]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110c8:	7a1b      	ldrb	r3, [r3, #8]
 80110ca:	461a      	mov	r2, r3
 80110cc:	4b05      	ldr	r3, [pc, #20]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110ce:	799b      	ldrb	r3, [r3, #6]
 80110d0:	4619      	mov	r1, r3
 80110d2:	4b04      	ldr	r3, [pc, #16]	; (80110e4 <grid_timer_isr_+0xf34>)
 80110d4:	79db      	ldrb	r3, [r3, #7]
 80110d6:	440b      	add	r3, r1
 80110d8:	429a      	cmp	r2, r3
 80110da:	d115      	bne.n	8011108 <grid_timer_isr_+0xf58>
 80110dc:	2301      	movs	r3, #1
 80110de:	e014      	b.n	801110a <grid_timer_isr_+0xf5a>
 80110e0:	200012c8 	.word	0x200012c8
 80110e4:	20001430 	.word	0x20001430
 80110e8:	48000800 	.word	0x48000800
 80110ec:	20000410 	.word	0x20000410
 80110f0:	200014f0 	.word	0x200014f0
 80110f4:	20001308 	.word	0x20001308
 80110f8:	2000112c 	.word	0x2000112c
 80110fc:	08027000 	.word	0x08027000
 8011100:	20000cc4 	.word	0x20000cc4
 8011104:	08027028 	.word	0x08027028
 8011108:	2300      	movs	r3, #0
 801110a:	4618      	mov	r0, r3
 801110c:	f011 fa96 	bl	802263c <iprintf>
 8011110:	4ba6      	ldr	r3, [pc, #664]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011112:	7a1b      	ldrb	r3, [r3, #8]
 8011114:	461a      	mov	r2, r3
 8011116:	4ba5      	ldr	r3, [pc, #660]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011118:	799b      	ldrb	r3, [r3, #6]
 801111a:	4619      	mov	r1, r3
 801111c:	4ba3      	ldr	r3, [pc, #652]	; (80113ac <grid_timer_isr_+0x11fc>)
 801111e:	79db      	ldrb	r3, [r3, #7]
 8011120:	440b      	add	r3, r1
 8011122:	429a      	cmp	r2, r3
 8011124:	d002      	beq.n	801112c <grid_timer_isr_+0xf7c>
 8011126:	b671      	cpsid	f
 8011128:	f7fd fa68 	bl	800e5fc <NVIC_SystemReset>

			const unsigned int	CHUNK_SIZE = chirp_config.coding_vector.len + chirp_config.payload.len;
 801112c:	4b9f      	ldr	r3, [pc, #636]	; (80113ac <grid_timer_isr_+0x11fc>)
 801112e:	79db      	ldrb	r3, [r3, #7]
 8011130:	461a      	mov	r2, r3
 8011132:	4b9e      	ldr	r3, [pc, #632]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011134:	7a5b      	ldrb	r3, [r3, #9]
 8011136:	4413      	add	r3, r2
 8011138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

			p = &(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]);
 801113c:	4b9c      	ldr	r3, [pc, #624]	; (80113b0 <grid_timer_isr_+0x1200>)
 801113e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011140:	4b9a      	ldr	r3, [pc, #616]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011142:	799b      	ldrb	r3, [r3, #6]
 8011144:	3308      	adds	r3, #8
 8011146:	4413      	add	r3, r2
 8011148:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			// NOTE: we cast const away which is a bit dirty. We need this only to restore
			// sideload's packed version which is such a negligible change that we prefer
			// mx.tx_sideload to appear as const.
			uint8_t	*ps = (uint8_t*)mx.tx_sideload;
 801114c:	4b98      	ldr	r3, [pc, #608]	; (80113b0 <grid_timer_isr_+0x1200>)
 801114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011150:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

			#if MX_REQUEST

				int16_t help_index = mx.request->help_index;
 8011154:	4b96      	ldr	r3, [pc, #600]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011156:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801115a:	895b      	ldrh	r3, [r3, #10]
 801115c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				if (help_index > 0)
 8011160:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 8011164:	2b00      	cmp	r3, #0
 8011166:	dd36      	ble.n	80111d6 <grid_timer_isr_+0x1026>
				{
					help_index--;
 8011168:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801116c:	b29b      	uxth	r3, r3
 801116e:	3b01      	subs	r3, #1
 8011170:	b29b      	uxth	r3, r3
 8011172:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
					if (
						(!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))||!(((uint_fast_t*)p)[help_index / (sizeof(uint_fast_t) * 8)] & mx.request->help_bitmask))
 8011176:	4b8e      	ldr	r3, [pc, #568]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117a:	4a8c      	ldr	r2, [pc, #560]	; (80113ac <grid_timer_isr_+0x11fc>)
 801117c:	7b92      	ldrb	r2, [r2, #14]
 801117e:	4413      	add	r3, r2
 8011180:	7a1b      	ldrb	r3, [r3, #8]
 8011182:	b25b      	sxtb	r3, r3
					if (
 8011184:	2b00      	cmp	r3, #0
 8011186:	da0e      	bge.n	80111a6 <grid_timer_isr_+0xff6>
						(!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))||!(((uint_fast_t*)p)[help_index / (sizeof(uint_fast_t) * 8)] & mx.request->help_bitmask))
 8011188:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801118c:	095b      	lsrs	r3, r3, #5
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011194:	4413      	add	r3, r2
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	4b85      	ldr	r3, [pc, #532]	; (80113b0 <grid_timer_isr_+0x1200>)
 801119a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	4013      	ands	r3, r2
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10c      	bne.n	80111c0 <grid_timer_isr_+0x1010>
						{
						ps = &(mx.matrix[help_index]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 80111a6:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80111aa:	4a81      	ldr	r2, [pc, #516]	; (80113b0 <grid_timer_isr_+0x1200>)
 80111ac:	3316      	adds	r3, #22
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4413      	add	r3, r2
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	4a7d      	ldr	r2, [pc, #500]	; (80113ac <grid_timer_isr_+0x11fc>)
 80111b6:	7e12      	ldrb	r2, [r2, #24]
 80111b8:	4413      	add	r3, r2
 80111ba:	3304      	adds	r3, #4
 80111bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
						}
					mx.request->last_update_slot = mx.slot_number + 1;
 80111c0:	4b7b      	ldr	r3, [pc, #492]	; (80113b0 <grid_timer_isr_+0x1200>)
 80111c2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	4b79      	ldr	r3, [pc, #484]	; (80113b0 <grid_timer_isr_+0x1200>)
 80111ca:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80111ce:	3201      	adds	r2, #1
 80111d0:	b292      	uxth	r2, r2
 80111d2:	811a      	strh	r2, [r3, #8]
 80111d4:	e01f      	b.n	8011216 <grid_timer_isr_+0x1066>
				}
				else if (help_index < 0)
 80111d6:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80111da:	2b00      	cmp	r3, #0
 80111dc:	da1b      	bge.n	8011216 <grid_timer_isr_+0x1066>
				{
					help_index = -help_index - 1;
 80111de:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80111e2:	43db      	mvns	r3, r3
 80111e4:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
					// NOTE: we don't have to check the packet because if there is one ready, then it
					// has been specifically build in response to the pending request. if the packet
					// is not ready, it is right to do the sideload anyway.
					// if (!mx.tx_packet.is_ready || (help_index < mx_get_leading_index(p)))
					{
						ps = &(mx.matrix[help_index]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 80111e8:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 80111ec:	4a70      	ldr	r2, [pc, #448]	; (80113b0 <grid_timer_isr_+0x1200>)
 80111ee:	3316      	adds	r3, #22
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	4413      	add	r3, r2
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	4a6d      	ldr	r2, [pc, #436]	; (80113ac <grid_timer_isr_+0x11fc>)
 80111f8:	7e12      	ldrb	r2, [r2, #24]
 80111fa:	4413      	add	r3, r2
 80111fc:	3304      	adds	r3, #4
 80111fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

						mx.request->last_update_slot = mx.slot_number + 1;
 8011202:	4b6b      	ldr	r3, [pc, #428]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011204:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011208:	b29a      	uxth	r2, r3
 801120a:	4b69      	ldr	r3, [pc, #420]	; (80113b0 <grid_timer_isr_+0x1200>)
 801120c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8011210:	3201      	adds	r2, #1
 8011212:	b292      	uxth	r2, r2
 8011214:	811a      	strh	r2, [r3, #8]
			// NOTE: if it points to rx queue, the format is still packed
			// NOTE: we could also do this when we set mx.tx_sideload (i.e. at a less time critical
			// point), but it is very easy to forget about that. Hence we do it here to avoid
			// programming mistakes.
			// NOTE: the outer condition is resolved at compile time
			if (chirp_config.matrix_payload_8.pos != chirp_config.matrix_payload_8.pos * sizeof(uint_fast_t))
 8011216:	4b65      	ldr	r3, [pc, #404]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011218:	7e9b      	ldrb	r3, [r3, #26]
 801121a:	461a      	mov	r2, r3
 801121c:	4b63      	ldr	r3, [pc, #396]	; (80113ac <grid_timer_isr_+0x11fc>)
 801121e:	7e9b      	ldrb	r3, [r3, #26]
 8011220:	009b      	lsls	r3, r3, #2
 8011222:	429a      	cmp	r2, r3
 8011224:	d015      	beq.n	8011252 <grid_timer_isr_+0x10a2>
			{
				if ((uintptr_t)ps - (uintptr_t)&(mx.matrix[0]->birth_slot) < chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)))
 8011226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801122a:	4a61      	ldr	r2, [pc, #388]	; (80113b0 <grid_timer_isr_+0x1200>)
 801122c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801122e:	1a9a      	subs	r2, r3, r2
 8011230:	4b5e      	ldr	r3, [pc, #376]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011232:	885b      	ldrh	r3, [r3, #2]
 8011234:	b29b      	uxth	r3, r3
 8011236:	4619      	mov	r1, r3
 8011238:	4b5c      	ldr	r3, [pc, #368]	; (80113ac <grid_timer_isr_+0x11fc>)
 801123a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801123c:	b29b      	uxth	r3, r3
 801123e:	3301      	adds	r3, #1
 8011240:	fb03 f301 	mul.w	r3, r3, r1
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	429a      	cmp	r2, r3
 8011248:	d203      	bcs.n	8011252 <grid_timer_isr_+0x10a2>
				{
					wrap_chunk(ps);
 801124a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801124e:	f7fd f983 	bl	800e558 <wrap_chunk>
				}
            }

			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 8011252:	4b57      	ldr	r3, [pc, #348]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011256:	4a55      	ldr	r2, [pc, #340]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011258:	7b92      	ldrb	r2, [r2, #14]
 801125a:	4413      	add	r3, r2
 801125c:	7a1b      	ldrb	r3, [r3, #8]
 801125e:	b25b      	sxtb	r3, r3
 8011260:	2b00      	cmp	r3, #0
 8011262:	db2d      	blt.n	80112c0 <grid_timer_isr_+0x1110>
			{
				assert_reset(NULL != ps);
 8011264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011268:	2b00      	cmp	r3, #0
 801126a:	d110      	bne.n	801128e <grid_timer_isr_+0x10de>
 801126c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <grid_timer_isr_+0x10c8>
 8011274:	2301      	movs	r3, #1
 8011276:	e000      	b.n	801127a <grid_timer_isr_+0x10ca>
 8011278:	2300      	movs	r3, #0
 801127a:	4618      	mov	r0, r3
 801127c:	f011 f9de 	bl	802263c <iprintf>
 8011280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011284:	2b00      	cmp	r3, #0
 8011286:	d102      	bne.n	801128e <grid_timer_isr_+0x10de>
 8011288:	b671      	cpsid	f
 801128a:	f7fd f9b7 	bl	800e5fc <NVIC_SystemReset>

				write_tx_fifo(ps, NULL, CHUNK_SIZE);
 801128e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011292:	b2db      	uxtb	r3, r3
 8011294:	461a      	mov	r2, r3
 8011296:	2100      	movs	r1, #0
 8011298:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801129c:	f7fd fbf4 	bl	800ea88 <write_tx_fifo>

				#if MX_VERBOSE_PACKETS || MX_REQUEST
					// mark the packet as broken since it could be possible that we interrupt
					// prepare_tx_packet() right now, hence writing data may damage the packet
					mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_VALID_MASK;
 80112a0:	4b43      	ldr	r3, [pc, #268]	; (80113b0 <grid_timer_isr_+0x1200>)
 80112a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a4:	4a41      	ldr	r2, [pc, #260]	; (80113ac <grid_timer_isr_+0x11fc>)
 80112a6:	7b92      	ldrb	r2, [r2, #14]
 80112a8:	4413      	add	r3, r2
 80112aa:	7a1a      	ldrb	r2, [r3, #8]
 80112ac:	4b40      	ldr	r3, [pc, #256]	; (80113b0 <grid_timer_isr_+0x1200>)
 80112ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b0:	493e      	ldr	r1, [pc, #248]	; (80113ac <grid_timer_isr_+0x11fc>)
 80112b2:	7b89      	ldrb	r1, [r1, #14]
 80112b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112b8:	b2d2      	uxtb	r2, r2
 80112ba:	440b      	add	r3, r1
 80112bc:	721a      	strb	r2, [r3, #8]
 80112be:	e00f      	b.n	80112e0 <grid_timer_isr_+0x1130>
				// (2) test if zero, (3) write payload only if test is non-zero. However, we
				// write the full chunk at once to gain better performance in the typical case
				// (that is non-zero coding vector). Processing the full chunk at once not only
				// saves the second call, it also keeps the alignment(!). We expect that this way
				// is more efficient with relatively moderate packet sizes as in IEEE 802.15.4.
				if (!write_tx_fifo(p, ps, CHUNK_SIZE))
 80112c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	461a      	mov	r2, r3
 80112c8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80112cc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80112d0:	f7fd fbda 	bl	800ea88 <write_tx_fifo>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d102      	bne.n	80112e0 <grid_timer_isr_+0x1130>
					p = NULL;
 80112da:	2300      	movs	r3, #0
 80112dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			}
		}

		if (chirp_config.primitive != FLOODING)
 80112e0:	4b32      	ldr	r3, [pc, #200]	; (80113ac <grid_timer_isr_+0x11fc>)
 80112e2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d054      	beq.n	8011394 <grid_timer_isr_+0x11e4>
		{
			// write info vector
			if (NULL != p)
 80112ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d050      	beq.n	8011394 <grid_timer_isr_+0x11e4>
			{
				#if MX_REQUEST || MX_SMART_SHUTDOWN_MAP

					assert_reset(chirp_config.info_vector.pos == chirp_config.payload.pos + chirp_config.payload.len);
 80112f2:	4b2e      	ldr	r3, [pc, #184]	; (80113ac <grid_timer_isr_+0x11fc>)
 80112f4:	7a9b      	ldrb	r3, [r3, #10]
 80112f6:	461a      	mov	r2, r3
 80112f8:	4b2c      	ldr	r3, [pc, #176]	; (80113ac <grid_timer_isr_+0x11fc>)
 80112fa:	7a1b      	ldrb	r3, [r3, #8]
 80112fc:	4619      	mov	r1, r3
 80112fe:	4b2b      	ldr	r3, [pc, #172]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011300:	7a5b      	ldrb	r3, [r3, #9]
 8011302:	440b      	add	r3, r1
 8011304:	429a      	cmp	r2, r3
 8011306:	d01e      	beq.n	8011346 <grid_timer_isr_+0x1196>
 8011308:	4b28      	ldr	r3, [pc, #160]	; (80113ac <grid_timer_isr_+0x11fc>)
 801130a:	7a9b      	ldrb	r3, [r3, #10]
 801130c:	461a      	mov	r2, r3
 801130e:	4b27      	ldr	r3, [pc, #156]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011310:	7a1b      	ldrb	r3, [r3, #8]
 8011312:	4619      	mov	r1, r3
 8011314:	4b25      	ldr	r3, [pc, #148]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011316:	7a5b      	ldrb	r3, [r3, #9]
 8011318:	440b      	add	r3, r1
 801131a:	429a      	cmp	r2, r3
 801131c:	d101      	bne.n	8011322 <grid_timer_isr_+0x1172>
 801131e:	2301      	movs	r3, #1
 8011320:	e000      	b.n	8011324 <grid_timer_isr_+0x1174>
 8011322:	2300      	movs	r3, #0
 8011324:	4618      	mov	r0, r3
 8011326:	f011 f989 	bl	802263c <iprintf>
 801132a:	4b20      	ldr	r3, [pc, #128]	; (80113ac <grid_timer_isr_+0x11fc>)
 801132c:	7a9b      	ldrb	r3, [r3, #10]
 801132e:	461a      	mov	r2, r3
 8011330:	4b1e      	ldr	r3, [pc, #120]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011332:	7a1b      	ldrb	r3, [r3, #8]
 8011334:	4619      	mov	r1, r3
 8011336:	4b1d      	ldr	r3, [pc, #116]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011338:	7a5b      	ldrb	r3, [r3, #9]
 801133a:	440b      	add	r3, r1
 801133c:	429a      	cmp	r2, r3
 801133e:	d002      	beq.n	8011346 <grid_timer_isr_+0x1196>
 8011340:	b671      	cpsid	f
 8011342:	f7fd f95b 	bl	800e5fc <NVIC_SystemReset>
							ps = &(mx.request->mask[chirp_config.my_column_mask.pos]);
						else ps = &(mx.request->mask[chirp_config.my_row_mask.pos]);
					#elif MX_SMART_SHUTDOWN_MAP
						ps = (uint8_t *)&(mx.full_rank_map->map_hash[chirp_config.hash.pos + 0]);
					#elif MX_REQUEST
						if (mx.tx_packet->flags.request_column)
 8011346:	4b1a      	ldr	r3, [pc, #104]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134a:	79db      	ldrb	r3, [r3, #7]
 801134c:	f003 0301 	and.w	r3, r3, #1
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00b      	beq.n	801136e <grid_timer_isr_+0x11be>
							ps = &(mx.request->mask[chirp_config.my_column_mask.pos]);
 8011356:	4b16      	ldr	r3, [pc, #88]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011358:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801135c:	4b13      	ldr	r3, [pc, #76]	; (80113ac <grid_timer_isr_+0x11fc>)
 801135e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011362:	3306      	adds	r3, #6
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801136c:	e00a      	b.n	8011384 <grid_timer_isr_+0x11d4>
						else ps = &(mx.request->mask[chirp_config.my_row_mask.pos]);
 801136e:	4b10      	ldr	r3, [pc, #64]	; (80113b0 <grid_timer_isr_+0x1200>)
 8011370:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8011374:	4b0d      	ldr	r3, [pc, #52]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801137a:	3306      	adds	r3, #6
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					#else
						#error inconsistent code
					#endif

					write_tx_fifo(ps, NULL, chirp_config.info_vector.len);
 8011384:	4b09      	ldr	r3, [pc, #36]	; (80113ac <grid_timer_isr_+0x11fc>)
 8011386:	7adb      	ldrb	r3, [r3, #11]
 8011388:	461a      	mov	r2, r3
 801138a:	2100      	movs	r1, #0
 801138c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8011390:	f7fd fb7a 	bl	800ea88 <write_tx_fifo>
				#endif
			}
		}
		// if zero packet: abort transmission
		if ((NULL == p) && (chirp_config.primitive != FLOODING))
 8011394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011398:	2b00      	cmp	r3, #0
 801139a:	d16d      	bne.n	8011478 <grid_timer_isr_+0x12c8>
 801139c:	4b03      	ldr	r3, [pc, #12]	; (80113ac <grid_timer_isr_+0x11fc>)
 801139e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d068      	beq.n	8011478 <grid_timer_isr_+0x12c8>
		{
			#if MX_LBT_ACCESS
				tx_failed_:
 80113a6:	e006      	b.n	80113b6 <grid_timer_isr_+0x1206>
						goto tx_failed_;
 80113a8:	bf00      	nop
 80113aa:	e004      	b.n	80113b6 <grid_timer_isr_+0x1206>
 80113ac:	20001430 	.word	0x20001430
 80113b0:	200014f0 	.word	0x200014f0
						goto tx_failed_;
 80113b4:	bf00      	nop
				s.lbt_tx_on = CCA_NONE;
 80113b6:	4b29      	ldr	r3, [pc, #164]	; (801145c <grid_timer_isr_+0x12ac>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 80113be:	4b27      	ldr	r3, [pc, #156]	; (801145c <grid_timer_isr_+0x12ac>)
 80113c0:	2200      	movs	r2, #0
 80113c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			#endif

			// turn radio off
			SX1276SetOpMode( RFLR_OPMODE_SLEEP );
 80113c6:	2000      	movs	r0, #0
 80113c8:	f7fb fac6 	bl	800c958 <SX1276SetOpMode>
 80113cc:	2300      	movs	r3, #0
 80113ce:	67bb      	str	r3, [r7, #120]	; 0x78
	if (mask)
 80113d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d002      	beq.n	80113dc <grid_timer_isr_+0x122c>
		LED_GPIO_Port->BRR = mask;
 80113d6:	4a22      	ldr	r2, [pc, #136]	; (8011460 <grid_timer_isr_+0x12b0>)
 80113d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113da:	6293      	str	r3, [r2, #40]	; 0x28
 80113dc:	4b21      	ldr	r3, [pc, #132]	; (8011464 <grid_timer_isr_+0x12b4>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

			gpi_led_off(LED_TX);

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.radio_on_time += gpi_tick_fast_native() - s.radio_start_timestamp;
 80113e2:	4b1e      	ldr	r3, [pc, #120]	; (801145c <grid_timer_isr_+0x12ac>)
 80113e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e6:	1ad2      	subs	r2, r2, r3
 80113e8:	4b1f      	ldr	r3, [pc, #124]	; (8011468 <grid_timer_isr_+0x12b8>)
 80113ea:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 80113ee:	4413      	add	r3, r2
 80113f0:	4a1d      	ldr	r2, [pc, #116]	; (8011468 <grid_timer_isr_+0x12b8>)
 80113f2:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
				s.radio_start_timestamp = 0;
 80113f6:	4b19      	ldr	r3, [pc, #100]	; (801145c <grid_timer_isr_+0x12ac>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	635a      	str	r2, [r3, #52]	; 0x34
				mx.stat_counter.num_tx_zero_packet++;
 80113fc:	4b1a      	ldr	r3, [pc, #104]	; (8011468 <grid_timer_isr_+0x12b8>)
 80113fe:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
 8011402:	3301      	adds	r3, #1
 8011404:	b29a      	uxth	r2, r3
 8011406:	4b18      	ldr	r3, [pc, #96]	; (8011468 <grid_timer_isr_+0x12b8>)
 8011408:	f8a3 288c 	strh.w	r2, [r3, #2188]	; 0x88c
			#endif

			#if ENERGEST_CONF_ON
				ENERGEST_OFF(ENERGEST_TYPE_TRANSMIT);
 801140c:	4b17      	ldr	r3, [pc, #92]	; (801146c <grid_timer_isr_+0x12bc>)
 801140e:	7b9b      	ldrb	r3, [r3, #14]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00d      	beq.n	8011430 <grid_timer_isr_+0x1280>
 8011414:	4b13      	ldr	r3, [pc, #76]	; (8011464 <grid_timer_isr_+0x12b4>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801141a:	4b15      	ldr	r3, [pc, #84]	; (8011470 <grid_timer_isr_+0x12c0>)
 801141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801141e:	1ad2      	subs	r2, r2, r3
 8011420:	4b14      	ldr	r3, [pc, #80]	; (8011474 <grid_timer_isr_+0x12c4>)
 8011422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011424:	4413      	add	r3, r2
 8011426:	4a13      	ldr	r2, [pc, #76]	; (8011474 <grid_timer_isr_+0x12c4>)
 8011428:	6393      	str	r3, [r2, #56]	; 0x38
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <grid_timer_isr_+0x12bc>)
 801142c:	2200      	movs	r2, #0
 801142e:	739a      	strb	r2, [r3, #14]
 8011430:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <grid_timer_isr_+0x12b4>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			#endif

			#if MX_LBT_ACCESS
				s.tx_on_time = gpi_tick_fast_native() - s.tx_on_time;
 8011436:	4b09      	ldr	r3, [pc, #36]	; (801145c <grid_timer_isr_+0x12ac>)
 8011438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	4a07      	ldr	r2, [pc, #28]	; (801145c <grid_timer_isr_+0x12ac>)
 801143e:	6453      	str	r3, [r2, #68]	; 0x44
				lbt_update_channel((uint32_t)gpi_tick_hybrid_to_us(s.tx_on_time), s.tx_now_channel);
 8011440:	4b06      	ldr	r3, [pc, #24]	; (801145c <grid_timer_isr_+0x12ac>)
 8011442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011444:	677b      	str	r3, [r7, #116]	; 0x74
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 8011446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011448:	091a      	lsrs	r2, r3, #4
 801144a:	4b04      	ldr	r3, [pc, #16]	; (801145c <grid_timer_isr_+0x12ac>)
 801144c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011450:	4619      	mov	r1, r3
 8011452:	4610      	mov	r0, r2
 8011454:	f7f9 f8ec 	bl	800a630 <lbt_update_channel>
			#endif

			GPI_TRACE_MSG_FAST(TRACE_INFO, "sideload produced zero-packet -> Tx aborted");
 8011458:	bf00      	nop
		if ((NULL == p) && (chirp_config.primitive != FLOODING))
 801145a:	e0c0      	b.n	80115de <grid_timer_isr_+0x142e>
 801145c:	20000410 	.word	0x20000410
 8011460:	48000800 	.word	0x48000800
 8011464:	200012c8 	.word	0x200012c8
 8011468:	200014f0 	.word	0x200014f0
 801146c:	2000112c 	.word	0x2000112c
 8011470:	20001308 	.word	0x20001308
 8011474:	20000f10 	.word	0x20000f10
        }

		else
		{
 8011478:	466b      	mov	r3, sp
 801147a:	461d      	mov	r5, r3
			// update mx.tx_packet to enable evaluation on processing layer
			// NOTE: not all fields are needed for MX_REQUEST,
			// particularly payload could be dropped (e.g. if time is critical)
			// TODO:
			uint8_t Buffer2[chirp_config.phy_payload_size];
 801147c:	4bb4      	ldr	r3, [pc, #720]	; (8011750 <grid_timer_isr_+0x15a0>)
 801147e:	8a5b      	ldrh	r3, [r3, #18]
 8011480:	b298      	uxth	r0, r3
 8011482:	4603      	mov	r3, r0
 8011484:	3b01      	subs	r3, #1
 8011486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801148a:	b281      	uxth	r1, r0
 801148c:	f04f 0200 	mov.w	r2, #0
 8011490:	f04f 0300 	mov.w	r3, #0
 8011494:	f04f 0400 	mov.w	r4, #0
 8011498:	00d4      	lsls	r4, r2, #3
 801149a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801149e:	00cb      	lsls	r3, r1, #3
 80114a0:	b281      	uxth	r1, r0
 80114a2:	f04f 0200 	mov.w	r2, #0
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	f04f 0400 	mov.w	r4, #0
 80114ae:	00d4      	lsls	r4, r2, #3
 80114b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80114b4:	00cb      	lsls	r3, r1, #3
 80114b6:	4603      	mov	r3, r0
 80114b8:	3307      	adds	r3, #7
 80114ba:	08db      	lsrs	r3, r3, #3
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	ebad 0d03 	sub.w	sp, sp, r3
 80114c2:	466b      	mov	r3, sp
 80114c4:	3300      	adds	r3, #0
 80114c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

			SX1276Write( REG_LR_FIFOADDRPTR, 0);
 80114ca:	2100      	movs	r1, #0
 80114cc:	200d      	movs	r0, #13
 80114ce:	f7fb fabb 	bl	800ca48 <SX1276Write>
			SX1276ReadBuffer( 0, Buffer2, chirp_config.phy_payload_size );
 80114d2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80114d6:	4b9e      	ldr	r3, [pc, #632]	; (8011750 <grid_timer_isr_+0x15a0>)
 80114d8:	8a5b      	ldrh	r3, [r3, #18]
 80114da:	b29b      	uxth	r3, r3
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	461a      	mov	r2, r3
 80114e0:	2000      	movs	r0, #0
 80114e2:	f7fb fb07 	bl	800caf4 <SX1276ReadBuffer>
			SX1276Write( REG_LR_FIFOADDRPTR, 0);
 80114e6:	2100      	movs	r1, #0
 80114e8:	200d      	movs	r0, #13
 80114ea:	f7fb faad 	bl	800ca48 <SX1276Write>

			uint16_t code_tail_hash_tx = Chirp_RSHash((uint8_t *)Buffer2, chirp_config.phy_payload_size);
 80114ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80114f2:	4b97      	ldr	r3, [pc, #604]	; (8011750 <grid_timer_isr_+0x15a0>)
 80114f4:	8a5b      	ldrh	r3, [r3, #18]
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	4619      	mov	r1, r3
 80114fa:	4610      	mov	r0, r2
 80114fc:	f00d ff16 	bl	801f32c <Chirp_RSHash>
 8011500:	4603      	mov	r3, r0
 8011502:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			uint8_t hash_code_tx[2];
			hash_code_tx[0] = code_tail_hash_tx >> 8;
 8011506:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 801150a:	0a1b      	lsrs	r3, r3, #8
 801150c:	b29b      	uxth	r3, r3
 801150e:	b2da      	uxtb	r2, r3
 8011510:	f107 0310 	add.w	r3, r7, #16
 8011514:	701a      	strb	r2, [r3, #0]
			hash_code_tx[1] = code_tail_hash_tx;
 8011516:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 801151a:	b2da      	uxtb	r2, r3
 801151c:	f107 0310 	add.w	r3, r7, #16
 8011520:	705a      	strb	r2, [r3, #1]
			SX1276Write( REG_LR_FIFOADDRPTR, chirp_config.phy_payload_size );
 8011522:	4b8b      	ldr	r3, [pc, #556]	; (8011750 <grid_timer_isr_+0x15a0>)
 8011524:	8a5b      	ldrh	r3, [r3, #18]
 8011526:	b29b      	uxth	r3, r3
 8011528:	b2db      	uxtb	r3, r3
 801152a:	4619      	mov	r1, r3
 801152c:	200d      	movs	r0, #13
 801152e:	f7fb fa8b 	bl	800ca48 <SX1276Write>
			write_tx_fifo(hash_code_tx, NULL, HASH_TAIL_CODE);
 8011532:	f107 0310 	add.w	r3, r7, #16
 8011536:	2202      	movs	r2, #2
 8011538:	2100      	movs	r1, #0
 801153a:	4618      	mov	r0, r3
 801153c:	f7fd faa4 	bl	800ea88 <write_tx_fifo>

			// unmask IRQ
			SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8011540:	21f7      	movs	r1, #247	; 0xf7
 8011542:	2011      	movs	r0, #17
 8011544:	f7fb fa80 	bl	800ca48 <SX1276Write>
												RFLR_IRQFLAGS_CADDONE |
												RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
												RFLR_IRQFLAGS_CADDETECTED );

			// DIO0=TxDone
			SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8011548:	2040      	movs	r0, #64	; 0x40
 801154a:	f7fb fa8f 	bl	800ca6c <SX1276Read>
 801154e:	4603      	mov	r3, r0
 8011550:	b25b      	sxtb	r3, r3
 8011552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011556:	b25b      	sxtb	r3, r3
 8011558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801155c:	b25b      	sxtb	r3, r3
 801155e:	b2db      	uxtb	r3, r3
 8011560:	4619      	mov	r1, r3
 8011562:	2040      	movs	r0, #64	; 0x40
 8011564:	f7fb fa70 	bl	800ca48 <SX1276Write>

			gpi_memcpy_dma_aligned(&(mx.tx_packet->phy_payload_begin), Buffer2, chirp_config.phy_payload_size);
 8011568:	4b7a      	ldr	r3, [pc, #488]	; (8011754 <grid_timer_isr_+0x15a4>)
 801156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801156c:	4619      	mov	r1, r3
 801156e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011572:	4a77      	ldr	r2, [pc, #476]	; (8011750 <grid_timer_isr_+0x15a0>)
 8011574:	8a52      	ldrh	r2, [r2, #18]
 8011576:	b292      	uxth	r2, r2
 8011578:	65f9      	str	r1, [r7, #92]	; 0x5c
 801157a:	65bb      	str	r3, [r7, #88]	; 0x58
 801157c:	657a      	str	r2, [r7, #84]	; 0x54
	__builtin_memcpy(dest, src, size);
 801157e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011582:	4610      	mov	r0, r2
 8011584:	4619      	mov	r1, r3
 8011586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011588:	461a      	mov	r2, r3
 801158a:	f010 fa3f 	bl	8021a0c <memcpy>
 801158e:	2302      	movs	r3, #2
 8011590:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	gpi_atomic_set(&(mx.events), BV(event));
 8011594:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011598:	2201      	movs	r2, #1
 801159a:	fa02 f303 	lsl.w	r3, r2, r3
 801159e:	4a6d      	ldr	r2, [pc, #436]	; (8011754 <grid_timer_isr_+0x15a4>)
 80115a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80115a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80115a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115a6:	667b      	str	r3, [r7, #100]	; 0x64
 80115a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80115aa:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("dmb 0xF":::"memory");
 80115ac:	f3bf 8f5f 	dmb	sy
 80115b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80115b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80115b6:	e851 0f00 	ldrex	r0, [r1]
 80115ba:	ea40 0003 	orr.w	r0, r0, r3
 80115be:	e841 0300 	strex	r3, r0, [r1]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d1f7      	bne.n	80115b6 <grid_timer_isr_+0x1406>
 80115c6:	f3bf 8f5f 	dmb	sy

			set_event(TX_READY);

			mx.stat_counter.num_sent++;
 80115ca:	4b62      	ldr	r3, [pc, #392]	; (8011754 <grid_timer_isr_+0x15a4>)
 80115cc:	f8b3 3874 	ldrh.w	r3, [r3, #2164]	; 0x874
 80115d0:	3301      	adds	r3, #1
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	4b5f      	ldr	r3, [pc, #380]	; (8011754 <grid_timer_isr_+0x15a4>)
 80115d6:	f8a3 2874 	strh.w	r2, [r3, #2164]	; 0x874

			GPI_TRACE_MSG_FAST(TRACE_INFO, "Tx started");
 80115da:	bf00      	nop
 80115dc:	46ad      	mov	sp, r5

        }

		s.slot_state = TX_RUNNING;
 80115de:	4b5e      	ldr	r3, [pc, #376]	; (8011758 <grid_timer_isr_+0x15a8>)
 80115e0:	220c      	movs	r2, #12
 80115e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 80115e6:	4b5b      	ldr	r3, [pc, #364]	; (8011754 <grid_timer_isr_+0x15a4>)
 80115e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ea:	4a59      	ldr	r2, [pc, #356]	; (8011750 <grid_timer_isr_+0x15a0>)
 80115ec:	7b92      	ldrb	r2, [r2, #14]
 80115ee:	4413      	add	r3, r2
 80115f0:	7a1a      	ldrb	r2, [r3, #8]
 80115f2:	4b58      	ldr	r3, [pc, #352]	; (8011754 <grid_timer_isr_+0x15a4>)
 80115f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115f6:	4956      	ldr	r1, [pc, #344]	; (8011750 <grid_timer_isr_+0x15a0>)
 80115f8:	7b89      	ldrb	r1, [r1, #14]
 80115fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80115fe:	b2d2      	uxtb	r2, r2
 8011600:	440b      	add	r3, r1
 8011602:	721a      	strb	r2, [r3, #8]
		mx.tx_sideload = NULL;
 8011604:	4b53      	ldr	r3, [pc, #332]	; (8011754 <grid_timer_isr_+0x15a4>)
 8011606:	2200      	movs	r2, #0
 8011608:	645a      	str	r2, [r3, #68]	; 0x44
		s.next_slot_task = RX;
 801160a:	4b53      	ldr	r3, [pc, #332]	; (8011758 <grid_timer_isr_+0x15a8>)
 801160c:	2200      	movs	r2, #0
 801160e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		PROFILE_ISR("grid timer ISR start Tx end");
 8011612:	bf00      	nop
	}

	slot_state_:
	if (RESYNC != s.slot_state)
 8011614:	4b50      	ldr	r3, [pc, #320]	; (8011758 <grid_timer_isr_+0x15a8>)
 8011616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801161a:	2b00      	cmp	r3, #0
 801161c:	d05f      	beq.n	80116de <grid_timer_isr_+0x152e>
	{
		mx.slot_number++;
 801161e:	4b4d      	ldr	r3, [pc, #308]	; (8011754 <grid_timer_isr_+0x15a4>)
 8011620:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8011624:	b29b      	uxth	r3, r3
 8011626:	3301      	adds	r3, #1
 8011628:	b29a      	uxth	r2, r3
 801162a:	4b4a      	ldr	r3, [pc, #296]	; (8011754 <grid_timer_isr_+0x15a4>)
 801162c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8011630:	2301      	movs	r3, #1
 8011632:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	gpi_atomic_set(&(mx.events), BV(event));
 8011636:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801163a:	2201      	movs	r2, #1
 801163c:	fa02 f303 	lsl.w	r3, r2, r3
 8011640:	4a44      	ldr	r2, [pc, #272]	; (8011754 <grid_timer_isr_+0x15a4>)
 8011642:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011644:	64bb      	str	r3, [r7, #72]	; 0x48
 8011646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011648:	647b      	str	r3, [r7, #68]	; 0x44
 801164a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801164c:	643b      	str	r3, [r7, #64]	; 0x40
 801164e:	f3bf 8f5f 	dmb	sy
 8011652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011658:	e851 0f00 	ldrex	r0, [r1]
 801165c:	ea40 0003 	orr.w	r0, r0, r3
 8011660:	e841 0300 	strex	r3, r0, [r1]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1f7      	bne.n	8011658 <grid_timer_isr_+0x14a8>
 8011668:	f3bf 8f5f 	dmb	sy
		set_event(SLOT_UPDATE);

		s.next_grid_tick += chirp_config.mx_slot_length + s.grid_drift / (radio.grid_drift_filter_div * radio.grid_tick_update_div);
 801166c:	4b3a      	ldr	r3, [pc, #232]	; (8011758 <grid_timer_isr_+0x15a8>)
 801166e:	685a      	ldr	r2, [r3, #4]
 8011670:	4b37      	ldr	r3, [pc, #220]	; (8011750 <grid_timer_isr_+0x15a0>)
 8011672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011674:	4938      	ldr	r1, [pc, #224]	; (8011758 <grid_timer_isr_+0x15a8>)
 8011676:	6988      	ldr	r0, [r1, #24]
 8011678:	4938      	ldr	r1, [pc, #224]	; (801175c <grid_timer_isr_+0x15ac>)
 801167a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 801167c:	4c37      	ldr	r4, [pc, #220]	; (801175c <grid_timer_isr_+0x15ac>)
 801167e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 8011680:	fb04 f101 	mul.w	r1, r4, r1
 8011684:	fb90 f1f1 	sdiv	r1, r0, r1
 8011688:	440b      	add	r3, r1
 801168a:	4413      	add	r3, r2
 801168c:	4a32      	ldr	r2, [pc, #200]	; (8011758 <grid_timer_isr_+0x15a8>)
 801168e:	6053      	str	r3, [r2, #4]

		s.hybrid_trigger = s.next_grid_tick;
 8011690:	4b31      	ldr	r3, [pc, #196]	; (8011758 <grid_timer_isr_+0x15a8>)
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4a30      	ldr	r2, [pc, #192]	; (8011758 <grid_timer_isr_+0x15a8>)
 8011696:	6113      	str	r3, [r2, #16]

		s.next_trigger_tick = s.next_grid_tick -
 8011698:	4b2f      	ldr	r3, [pc, #188]	; (8011758 <grid_timer_isr_+0x15a8>)
 801169a:	685a      	ldr	r2, [r3, #4]
			((s.next_slot_task == TX) ? s.tx_trigger_offset : s.rx_trigger_offset);
 801169c:	4b2e      	ldr	r3, [pc, #184]	; (8011758 <grid_timer_isr_+0x15a8>)
 801169e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d102      	bne.n	80116ac <grid_timer_isr_+0x14fc>
 80116a6:	4b2c      	ldr	r3, [pc, #176]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116aa:	e001      	b.n	80116b0 <grid_timer_isr_+0x1500>
 80116ac:	4b2a      	ldr	r3, [pc, #168]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116ae:	6a1b      	ldr	r3, [r3, #32]
		s.next_trigger_tick = s.next_grid_tick -
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	4a29      	ldr	r2, [pc, #164]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116b4:	6093      	str	r3, [r2, #8]
		Gpi_Hybrid_Reference r = gpi_tick_hybrid_reference();
 80116b6:	f107 0308 	add.w	r3, r7, #8
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fa fa54 	bl	800bb68 <gpi_tick_hybrid_reference>

		if (TX_RUNNING == s.slot_state)
 80116c0:	4b25      	ldr	r3, [pc, #148]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116c6:	2b0c      	cmp	r3, #12
 80116c8:	d109      	bne.n	80116de <grid_timer_isr_+0x152e>
		{

			#if MX_LBT_ACCESS
				s.lbt_tx_on = CCA_NONE;
 80116ca:	4b23      	ldr	r3, [pc, #140]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				s.lbt_channel_seq_no = 0;
 80116d2:	4b21      	ldr	r3, [pc, #132]	; (8011758 <grid_timer_isr_+0x15a8>)
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			#endif

			start_grid_timer();
 80116da:	f7fd fa3b 	bl	800eb54 <start_grid_timer>
		}
	}

	GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "slot_state: %d, next_grid: %lu, rx_offset: %u",
 80116de:	bf00      	nop
 80116e0:	2303      	movs	r3, #3
 80116e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	gpi_atomic_set(&(mx.events), BV(event));
 80116e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116ea:	2201      	movs	r2, #1
 80116ec:	fa02 f303 	lsl.w	r3, r2, r3
 80116f0:	4a18      	ldr	r2, [pc, #96]	; (8011754 <grid_timer_isr_+0x15a4>)
 80116f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80116f4:	637b      	str	r3, [r7, #52]	; 0x34
 80116f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f8:	633b      	str	r3, [r7, #48]	; 0x30
 80116fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116fe:	f3bf 8f5f 	dmb	sy
 8011702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011708:	e851 0f00 	ldrex	r0, [r1]
 801170c:	ea40 0003 	orr.w	r0, r0, r3
 8011710:	e841 0300 	strex	r3, r0, [r1]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1f7      	bne.n	8011708 <grid_timer_isr_+0x1558>
 8011718:	f3bf 8f5f 	dmb	sy
	// set general purpose trigger event
	// compared to SLOT_UPDATE, TRIGGER_TICK is generated also during RESYNC periods (once
	// in a while). It can be used for maintenance tasks that are less time critical.
	set_event(TRIGGER_TICK);

	PROFILE_ISR("grid timer ISR return");
 801171c:	bf00      	nop

#if	ENERGEST_CONF_ON
	ENERGEST_OFF(ENERGEST_TYPE_IRQ);
 801171e:	4b10      	ldr	r3, [pc, #64]	; (8011760 <grid_timer_isr_+0x15b0>)
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d028      	beq.n	8011778 <grid_timer_isr_+0x15c8>
	return htim2.Instance->CNT;
 8011726:	4b0f      	ldr	r3, [pc, #60]	; (8011764 <grid_timer_isr_+0x15b4>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801172c:	4b0e      	ldr	r3, [pc, #56]	; (8011768 <grid_timer_isr_+0x15b8>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	1ad2      	subs	r2, r2, r3
 8011732:	4b0e      	ldr	r3, [pc, #56]	; (801176c <grid_timer_isr_+0x15bc>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4413      	add	r3, r2
 8011738:	4a0c      	ldr	r2, [pc, #48]	; (801176c <grid_timer_isr_+0x15bc>)
 801173a:	6013      	str	r3, [r2, #0]
 801173c:	4b08      	ldr	r3, [pc, #32]	; (8011760 <grid_timer_isr_+0x15b0>)
 801173e:	2200      	movs	r2, #0
 8011740:	701a      	strb	r2, [r3, #0]
#endif

	GPI_TRACE_RETURN_FAST();
 8011742:	bf00      	nop
 8011744:	e018      	b.n	8011778 <grid_timer_isr_+0x15c8>
						GPI_TRACE_RETURN_FAST();
 8011746:	bf00      	nop
 8011748:	e017      	b.n	801177a <grid_timer_isr_+0x15ca>
				GPI_TRACE_RETURN_FAST();
 801174a:	bf00      	nop
 801174c:	e015      	b.n	801177a <grid_timer_isr_+0x15ca>
 801174e:	bf00      	nop
 8011750:	20001430 	.word	0x20001430
 8011754:	200014f0 	.word	0x200014f0
 8011758:	20000410 	.word	0x20000410
 801175c:	200003c4 	.word	0x200003c4
 8011760:	2000112c 	.word	0x2000112c
 8011764:	200012c8 	.word	0x200012c8
 8011768:	20001308 	.word	0x20001308
 801176c:	20000f10 	.word	0x20000f10
						GPI_TRACE_RETURN_FAST();
 8011770:	bf00      	nop
 8011772:	e002      	b.n	801177a <grid_timer_isr_+0x15ca>
						GPI_TRACE_RETURN_FAST();
 8011774:	bf00      	nop
 8011776:	e000      	b.n	801177a <grid_timer_isr_+0x15ca>
	GPI_TRACE_RETURN_FAST();
 8011778:	bf00      	nop
}
 801177a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801177e:	46bd      	mov	sp, r7
 8011780:	bdb0      	pop	{r4, r5, r7, pc}
 8011782:	bf00      	nop

08011784 <mixer_transport_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_transport_init()
{
 8011784:	b580      	push	{r7, lr}
 8011786:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8011788:	bf00      	nop

	mixer_transport_initiate_radio();
 801178a:	f7fc ff4b 	bl	800e624 <mixer_transport_initiate_radio>

	#undef PRINT

#endif

	GPI_TRACE_RETURN();
 801178e:	bf00      	nop
}
 8011790:	bd80      	pop	{r7, pc}
	...

08011794 <mixer_transport_arm_initiator>:

//**************************************************************************************************

void mixer_transport_arm_initiator()
{
 8011794:	b480      	push	{r7}
 8011796:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8011798:	bf00      	nop

	s.grid_drift			= 0;
 801179a:	4b0b      	ldr	r3, [pc, #44]	; (80117c8 <mixer_transport_arm_initiator+0x34>)
 801179c:	2200      	movs	r2, #0
 801179e:	619a      	str	r2, [r3, #24]
	s.grid_drift_cumulative = 0;
 80117a0:	4b09      	ldr	r3, [pc, #36]	; (80117c8 <mixer_transport_arm_initiator+0x34>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	61da      	str	r2, [r3, #28]
	s.tx_trigger_offset 	= radio.tx_to_grid_offset;
 80117a6:	4b09      	ldr	r3, [pc, #36]	; (80117cc <mixer_transport_arm_initiator+0x38>)
 80117a8:	695b      	ldr	r3, [r3, #20]
 80117aa:	4a07      	ldr	r2, [pc, #28]	; (80117c8 <mixer_transport_arm_initiator+0x34>)
 80117ac:	6253      	str	r3, [r2, #36]	; 0x24
	s.rx_trigger_offset 	= radio.rx_to_grid_offset + radio.rx_window_max / 2;
 80117ae:	4b07      	ldr	r3, [pc, #28]	; (80117cc <mixer_transport_arm_initiator+0x38>)
 80117b0:	691a      	ldr	r2, [r3, #16]
 80117b2:	4b06      	ldr	r3, [pc, #24]	; (80117cc <mixer_transport_arm_initiator+0x38>)
 80117b4:	69db      	ldr	r3, [r3, #28]
 80117b6:	085b      	lsrs	r3, r3, #1
 80117b8:	4413      	add	r3, r2
 80117ba:	4a03      	ldr	r2, [pc, #12]	; (80117c8 <mixer_transport_arm_initiator+0x34>)
 80117bc:	6213      	str	r3, [r2, #32]


	GPI_TRACE_RETURN();
 80117be:	bf00      	nop
}
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr
 80117c8:	20000410 	.word	0x20000410
 80117cc:	200003c4 	.word	0x200003c4

080117d0 <mixer_transport_start>:

//**************************************************************************************************

void mixer_transport_start()
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b084      	sub	sp, #16
 80117d4:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION_FAST();
 80117d6:	bf00      	nop

	GPI_TRACE_MSG_FAST(TRACE_VERBOSE, "start grid timer");
 80117d8:	bf00      	nop
	if (chirp_config.primitive != FLOODING)
 80117da:	4bad      	ldr	r3, [pc, #692]	; (8011a90 <mixer_transport_start+0x2c0>)
 80117dc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	f000 80d0 	beq.w	8011986 <mixer_transport_start+0x1b6>
	{
	if (mx.tx_sideload)		// if initiator
 80117e6:	4bab      	ldr	r3, [pc, #684]	; (8011a94 <mixer_transport_start+0x2c4>)
 80117e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d065      	beq.n	80118ba <mixer_transport_start+0xea>
 80117ee:	2302      	movs	r3, #2
 80117f0:	60fb      	str	r3, [r7, #12]
	if (2 == mode)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d108      	bne.n	801180a <mixer_transport_start+0x3a>
		s.slot_state = IDLE;
 80117f8:	4ba7      	ldr	r3, [pc, #668]	; (8011a98 <mixer_transport_start+0x2c8>)
 80117fa:	220c      	movs	r2, #12
 80117fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 8011800:	4ba5      	ldr	r3, [pc, #660]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011802:	2201      	movs	r2, #1
 8011804:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011808:	e01d      	b.n	8011846 <mixer_transport_start+0x76>
	else if (1 == mode)
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2b01      	cmp	r3, #1
 801180e:	d108      	bne.n	8011822 <mixer_transport_start+0x52>
		s.slot_state = RESYNC;
 8011810:	4ba1      	ldr	r3, [pc, #644]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011812:	2200      	movs	r2, #0
 8011814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011818:	4b9f      	ldr	r3, [pc, #636]	; (8011a98 <mixer_transport_start+0x2c8>)
 801181a:	2200      	movs	r2, #0
 801181c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011820:	e011      	b.n	8011846 <mixer_transport_start+0x76>
	else if (STOP == s.next_slot_task)
 8011822:	4b9d      	ldr	r3, [pc, #628]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011824:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011828:	2b02      	cmp	r3, #2
 801182a:	d104      	bne.n	8011836 <mixer_transport_start+0x66>
		s.slot_state = IDLE;
 801182c:	4b9a      	ldr	r3, [pc, #616]	; (8011a98 <mixer_transport_start+0x2c8>)
 801182e:	220c      	movs	r2, #12
 8011830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011834:	e007      	b.n	8011846 <mixer_transport_start+0x76>
		s.slot_state = RESYNC;
 8011836:	4b98      	ldr	r3, [pc, #608]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011838:	2200      	movs	r2, #0
 801183a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 801183e:	4b96      	ldr	r3, [pc, #600]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 8011846:	f7fd f8e3 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 801184a:	4b94      	ldr	r3, [pc, #592]	; (8011a9c <mixer_transport_start+0x2cc>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f06f 0202 	mvn.w	r2, #2
 8011852:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8011854:	f7fd f906 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8011858:	4b91      	ldr	r3, [pc, #580]	; (8011aa0 <mixer_transport_start+0x2d0>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2201      	movs	r2, #1
 801185e:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8011860:	2001      	movs	r0, #1
 8011862:	f7fd f895 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d022      	beq.n	80118b2 <mixer_transport_start+0xe2>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 801186c:	4b8b      	ldr	r3, [pc, #556]	; (8011a9c <mixer_transport_start+0x2cc>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011872:	4618      	mov	r0, r3
 8011874:	f7fa f9c2 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 8011878:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 801187a:	4b8a      	ldr	r3, [pc, #552]	; (8011aa4 <mixer_transport_start+0x2d4>)
 801187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801187e:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8011880:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 8011882:	4b88      	ldr	r3, [pc, #544]	; (8011aa4 <mixer_transport_start+0x2d4>)
 8011884:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011886:	4413      	add	r3, r2
 8011888:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 801188c:	4a82      	ldr	r2, [pc, #520]	; (8011a98 <mixer_transport_start+0x2c8>)
 801188e:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 8011890:	f7fd f8be 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011894:	4b81      	ldr	r3, [pc, #516]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f06f 0202 	mvn.w	r2, #2
 801189c:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 801189e:	4b7f      	ldr	r3, [pc, #508]	; (8011a9c <mixer_transport_start+0x2cc>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118a4:	4b7d      	ldr	r3, [pc, #500]	; (8011a9c <mixer_transport_start+0x2cc>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80118ac:	635a      	str	r2, [r3, #52]	; 0x34
 80118ae:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 80118b2:	2000      	movs	r0, #0
 80118b4:	f7fd f894 	bl	800e9e0 <unmask_main_timer>
		if (!node_id_allocate)		// if initiator
			enter_resync(2);
		else
			enter_resync(1);
	}
	GPI_TRACE_RETURN_FAST();
 80118b8:	e144      	b.n	8011b44 <mixer_transport_start+0x374>
 80118ba:	2301      	movs	r3, #1
 80118bc:	60bb      	str	r3, [r7, #8]
	if (2 == mode)
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d108      	bne.n	80118d6 <mixer_transport_start+0x106>
		s.slot_state = IDLE;
 80118c4:	4b74      	ldr	r3, [pc, #464]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118c6:	220c      	movs	r2, #12
 80118c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 80118cc:	4b72      	ldr	r3, [pc, #456]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118ce:	2201      	movs	r2, #1
 80118d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80118d4:	e01d      	b.n	8011912 <mixer_transport_start+0x142>
	else if (1 == mode)
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d108      	bne.n	80118ee <mixer_transport_start+0x11e>
		s.slot_state = RESYNC;
 80118dc:	4b6e      	ldr	r3, [pc, #440]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 80118e4:	4b6c      	ldr	r3, [pc, #432]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80118ec:	e011      	b.n	8011912 <mixer_transport_start+0x142>
	else if (STOP == s.next_slot_task)
 80118ee:	4b6a      	ldr	r3, [pc, #424]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d104      	bne.n	8011902 <mixer_transport_start+0x132>
		s.slot_state = IDLE;
 80118f8:	4b67      	ldr	r3, [pc, #412]	; (8011a98 <mixer_transport_start+0x2c8>)
 80118fa:	220c      	movs	r2, #12
 80118fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011900:	e007      	b.n	8011912 <mixer_transport_start+0x142>
		s.slot_state = RESYNC;
 8011902:	4b65      	ldr	r3, [pc, #404]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011904:	2200      	movs	r2, #0
 8011906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 801190a:	4b63      	ldr	r3, [pc, #396]	; (8011a98 <mixer_transport_start+0x2c8>)
 801190c:	2200      	movs	r2, #0
 801190e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 8011912:	f7fd f87d 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011916:	4b61      	ldr	r3, [pc, #388]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f06f 0202 	mvn.w	r2, #2
 801191e:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8011920:	f7fd f8a0 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8011924:	4b5e      	ldr	r3, [pc, #376]	; (8011aa0 <mixer_transport_start+0x2d0>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2201      	movs	r2, #1
 801192a:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 801192c:	2001      	movs	r0, #1
 801192e:	f7fd f82f 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d022      	beq.n	801197e <mixer_transport_start+0x1ae>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 8011938:	4b58      	ldr	r3, [pc, #352]	; (8011a9c <mixer_transport_start+0x2cc>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193e:	4618      	mov	r0, r3
 8011940:	f7fa f95c 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 8011944:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011946:	4b57      	ldr	r3, [pc, #348]	; (8011aa4 <mixer_transport_start+0x2d4>)
 8011948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801194a:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 801194c:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 801194e:	4b55      	ldr	r3, [pc, #340]	; (8011aa4 <mixer_transport_start+0x2d4>)
 8011950:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011952:	4413      	add	r3, r2
 8011954:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 8011958:	4a4f      	ldr	r2, [pc, #316]	; (8011a98 <mixer_transport_start+0x2c8>)
 801195a:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 801195c:	f7fd f858 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011960:	4b4e      	ldr	r3, [pc, #312]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f06f 0202 	mvn.w	r2, #2
 8011968:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 801196a:	4b4c      	ldr	r3, [pc, #304]	; (8011a9c <mixer_transport_start+0x2cc>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011970:	4b4a      	ldr	r3, [pc, #296]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8011978:	635a      	str	r2, [r3, #52]	; 0x34
 801197a:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 801197e:	2000      	movs	r0, #0
 8011980:	f7fd f82e 	bl	800e9e0 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 8011984:	e0de      	b.n	8011b44 <mixer_transport_start+0x374>
		if (!node_id_allocate)		// if initiator
 8011986:	4b48      	ldr	r3, [pc, #288]	; (8011aa8 <mixer_transport_start+0x2d8>)
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d165      	bne.n	8011a5a <mixer_transport_start+0x28a>
 801198e:	2302      	movs	r3, #2
 8011990:	607b      	str	r3, [r7, #4]
	if (2 == mode)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b02      	cmp	r3, #2
 8011996:	d108      	bne.n	80119aa <mixer_transport_start+0x1da>
		s.slot_state = IDLE;
 8011998:	4b3f      	ldr	r3, [pc, #252]	; (8011a98 <mixer_transport_start+0x2c8>)
 801199a:	220c      	movs	r2, #12
 801199c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 80119a0:	4b3d      	ldr	r3, [pc, #244]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119a2:	2201      	movs	r2, #1
 80119a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80119a8:	e01d      	b.n	80119e6 <mixer_transport_start+0x216>
	else if (1 == mode)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d108      	bne.n	80119c2 <mixer_transport_start+0x1f2>
		s.slot_state = RESYNC;
 80119b0:	4b39      	ldr	r3, [pc, #228]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 80119b8:	4b37      	ldr	r3, [pc, #220]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80119c0:	e011      	b.n	80119e6 <mixer_transport_start+0x216>
	else if (STOP == s.next_slot_task)
 80119c2:	4b35      	ldr	r3, [pc, #212]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d104      	bne.n	80119d6 <mixer_transport_start+0x206>
		s.slot_state = IDLE;
 80119cc:	4b32      	ldr	r3, [pc, #200]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119ce:	220c      	movs	r2, #12
 80119d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80119d4:	e007      	b.n	80119e6 <mixer_transport_start+0x216>
		s.slot_state = RESYNC;
 80119d6:	4b30      	ldr	r3, [pc, #192]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119d8:	2200      	movs	r2, #0
 80119da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 80119de:	4b2e      	ldr	r3, [pc, #184]	; (8011a98 <mixer_transport_start+0x2c8>)
 80119e0:	2200      	movs	r2, #0
 80119e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 80119e6:	f7fd f813 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 80119ea:	4b2c      	ldr	r3, [pc, #176]	; (8011a9c <mixer_transport_start+0x2cc>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f06f 0202 	mvn.w	r2, #2
 80119f2:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 80119f4:	f7fd f836 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 80119f8:	4b29      	ldr	r3, [pc, #164]	; (8011aa0 <mixer_transport_start+0x2d0>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2201      	movs	r2, #1
 80119fe:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8011a00:	2001      	movs	r0, #1
 8011a02:	f7fc ffc5 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d022      	beq.n	8011a52 <mixer_transport_start+0x282>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 8011a0c:	4b23      	ldr	r3, [pc, #140]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fa f8f2 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 8011a18:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011a1a:	4b22      	ldr	r3, [pc, #136]	; (8011aa4 <mixer_transport_start+0x2d4>)
 8011a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a1e:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8011a20:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 8011a22:	4b20      	ldr	r3, [pc, #128]	; (8011aa4 <mixer_transport_start+0x2d4>)
 8011a24:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011a26:	4413      	add	r3, r2
 8011a28:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 8011a2c:	4a1a      	ldr	r2, [pc, #104]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011a2e:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 8011a30:	f7fc ffee 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011a34:	4b19      	ldr	r3, [pc, #100]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f06f 0202 	mvn.w	r2, #2
 8011a3c:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 8011a3e:	4b17      	ldr	r3, [pc, #92]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a44:	4b15      	ldr	r3, [pc, #84]	; (8011a9c <mixer_transport_start+0x2cc>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8011a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8011a4e:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 8011a52:	2000      	movs	r0, #0
 8011a54:	f7fc ffc4 	bl	800e9e0 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 8011a58:	e074      	b.n	8011b44 <mixer_transport_start+0x374>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	603b      	str	r3, [r7, #0]
	if (2 == mode)
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	d108      	bne.n	8011a76 <mixer_transport_start+0x2a6>
		s.slot_state = IDLE;
 8011a64:	4b0c      	ldr	r3, [pc, #48]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011a66:	220c      	movs	r2, #12
 8011a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = TX;
 8011a6c:	4b0a      	ldr	r3, [pc, #40]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011a74:	e02c      	b.n	8011ad0 <mixer_transport_start+0x300>
	else if (1 == mode)
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d117      	bne.n	8011aac <mixer_transport_start+0x2dc>
		s.slot_state = RESYNC;
 8011a7c:	4b06      	ldr	r3, [pc, #24]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011a84:	4b04      	ldr	r3, [pc, #16]	; (8011a98 <mixer_transport_start+0x2c8>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011a8c:	e020      	b.n	8011ad0 <mixer_transport_start+0x300>
 8011a8e:	bf00      	nop
 8011a90:	20001430 	.word	0x20001430
 8011a94:	200014f0 	.word	0x200014f0
 8011a98:	20000410 	.word	0x20000410
 8011a9c:	200012c8 	.word	0x200012c8
 8011aa0:	200011e4 	.word	0x200011e4
 8011aa4:	200003c4 	.word	0x200003c4
 8011aa8:	20000cc1 	.word	0x20000cc1
	else if (STOP == s.next_slot_task)
 8011aac:	4b27      	ldr	r3, [pc, #156]	; (8011b4c <mixer_transport_start+0x37c>)
 8011aae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ab2:	2b02      	cmp	r3, #2
 8011ab4:	d104      	bne.n	8011ac0 <mixer_transport_start+0x2f0>
		s.slot_state = IDLE;
 8011ab6:	4b25      	ldr	r3, [pc, #148]	; (8011b4c <mixer_transport_start+0x37c>)
 8011ab8:	220c      	movs	r2, #12
 8011aba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011abe:	e007      	b.n	8011ad0 <mixer_transport_start+0x300>
		s.slot_state = RESYNC;
 8011ac0:	4b22      	ldr	r3, [pc, #136]	; (8011b4c <mixer_transport_start+0x37c>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		s.next_slot_task = RX;
 8011ac8:	4b20      	ldr	r3, [pc, #128]	; (8011b4c <mixer_transport_start+0x37c>)
 8011aca:	2200      	movs	r2, #0
 8011acc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mask_main_timer();
 8011ad0:	f7fc ff9e 	bl	800ea10 <mask_main_timer>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011ad4:	4b1e      	ldr	r3, [pc, #120]	; (8011b50 <mixer_transport_start+0x380>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f06f 0202 	mvn.w	r2, #2
 8011adc:	611a      	str	r2, [r3, #16]
	mask_slow_timer();
 8011ade:	f7fc ffc1 	bl	800ea64 <mask_slow_timer>
	__HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8011ae2:	4b1c      	ldr	r3, [pc, #112]	; (8011b54 <mixer_transport_start+0x384>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	605a      	str	r2, [r3, #4]
	trigger_main_timer(1);
 8011aea:	2001      	movs	r0, #1
 8011aec:	f7fc ff50 	bl	800e990 <trigger_main_timer>
	if (0 != mode)
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d022      	beq.n	8011b3c <mixer_transport_start+0x36c>
			gpi_tick_fast_to_hybrid(MAIN_TIMER_CC_REG) +
 8011af6:	4b16      	ldr	r3, [pc, #88]	; (8011b50 <mixer_transport_start+0x380>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7fa f87d 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 8011b02:	4602      	mov	r2, r0
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011b04:	4b14      	ldr	r3, [pc, #80]	; (8011b58 <mixer_transport_start+0x388>)
 8011b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b08:	011b      	lsls	r3, r3, #4
			GPI_TICK_US_TO_HYBRID(20) +
 8011b0a:	441a      	add	r2, r3
			radio.tx_to_grid_offset;
 8011b0c:	4b12      	ldr	r3, [pc, #72]	; (8011b58 <mixer_transport_start+0x388>)
 8011b0e:	695b      	ldr	r3, [r3, #20]
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011b10:	4413      	add	r3, r2
 8011b12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
		s.next_grid_tick =
 8011b16:	4a0d      	ldr	r2, [pc, #52]	; (8011b4c <mixer_transport_start+0x37c>)
 8011b18:	6053      	str	r3, [r2, #4]
		mask_main_timer();
 8011b1a:	f7fc ff79 	bl	800ea10 <mask_main_timer>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC1);
 8011b1e:	4b0c      	ldr	r3, [pc, #48]	; (8011b50 <mixer_transport_start+0x380>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f06f 0202 	mvn.w	r2, #2
 8011b26:	611a      	str	r2, [r3, #16]
		MAIN_TIMER_CC_REG += GPI_TICK_US_TO_FAST(20);
 8011b28:	4b09      	ldr	r3, [pc, #36]	; (8011b50 <mixer_transport_start+0x380>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b2e:	4b08      	ldr	r3, [pc, #32]	; (8011b50 <mixer_transport_start+0x380>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8011b36:	635a      	str	r2, [r3, #52]	; 0x34
 8011b38:	f3bf 8f5f 	dmb	sy
	unmask_main_timer(0);
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	f7fc ff4f 	bl	800e9e0 <unmask_main_timer>
	GPI_TRACE_RETURN_FAST();
 8011b42:	bf00      	nop
}
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20000410 	.word	0x20000410
 8011b50:	200012c8 	.word	0x200012c8
 8011b54:	200011e4 	.word	0x200011e4
 8011b58:	200003c4 	.word	0x200003c4

08011b5c <mixer_transport_set_next_slot_task>:

//**************************************************************************************************

int mixer_transport_set_next_slot_task(Slot_Activity next_task)
{
 8011b5c:	b590      	push	{r4, r7, lr}
 8011b5e:	b08f      	sub	sp, #60	; 0x3c
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	4603      	mov	r3, r0
 8011b64:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION_FAST();
 8011b66:	bf00      	nop
	// if next_task == RX: done
	// NOTE: it is the automatic standard selection at the beginning of each slot (with the
	// exception of RESYNC), so we can save the effort. Besides that, DMA ISR is allowed to
	// select TX during start-up phase -> don't overwrite that.
	if (RX != next_task)
 8011b68:	79fb      	ldrb	r3, [r7, #7]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 8083 	beq.w	8011c76 <mixer_transport_set_next_slot_task+0x11a>
		// - the activity-to-grid offset, which is dependent on the selected task
		// - the ISR_LATENCY_BUFFER
		// - the execution time needed for the code block within the gpi_int_lock range below
		// Additionally, hybrid_tick returned by gpi_tick_hybrid_reference() may lie up to one
		// slow tick -- i.e. 1000000 / GPI_SLOW_CLOCK_RATE microseconds -- in the past.
		r = gpi_tick_hybrid_reference();
 8011b70:	f107 030c 	add.w	r3, r7, #12
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7f9 fff7 	bl	800bb68 <gpi_tick_hybrid_reference>
		r.hybrid_tick = s.next_trigger_tick - r.hybrid_tick;
 8011b7a:	4b42      	ldr	r3, [pc, #264]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011b7c:	689a      	ldr	r2, [r3, #8]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	60fb      	str	r3, [r7, #12]
		r.hybrid_tick -=
			MAX(radio.tx_offset_max, radio.rx_to_grid_offset + radio.rx_window_max) +
 8011b84:	4b40      	ldr	r3, [pc, #256]	; (8011c88 <mixer_transport_set_next_slot_task+0x12c>)
 8011b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b88:	637b      	str	r3, [r7, #52]	; 0x34
 8011b8a:	4b3f      	ldr	r3, [pc, #252]	; (8011c88 <mixer_transport_set_next_slot_task+0x12c>)
 8011b8c:	691a      	ldr	r2, [r3, #16]
 8011b8e:	4b3e      	ldr	r3, [pc, #248]	; (8011c88 <mixer_transport_set_next_slot_task+0x12c>)
 8011b90:	69db      	ldr	r3, [r3, #28]
 8011b92:	4413      	add	r3, r2
 8011b94:	633b      	str	r3, [r7, #48]	; 0x30
 8011b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	bf38      	it	cc
 8011b9e:	461a      	movcc	r2, r3
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011ba0:	4b39      	ldr	r3, [pc, #228]	; (8011c88 <mixer_transport_set_next_slot_task+0x12c>)
 8011ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba4:	011b      	lsls	r3, r3, #4
			MAX(radio.tx_offset_max, radio.rx_to_grid_offset + radio.rx_window_max) +
 8011ba6:	4413      	add	r3, r2
			GPI_TICK_US_TO_HYBRID(radio.isr_latency_buffer) +
 8011ba8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
		r.hybrid_tick -=
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	60fb      	str	r3, [r7, #12]
			GPI_TICK_US_TO_HYBRID(1000000 / GPI_SLOW_CLOCK_RATE + 30);
		r.hybrid_tick *= FAST_HYBRID_RATIO;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	60fb      	str	r3, [r7, #12]
		if (r.hybrid_tick > GPI_TICK_FAST_MAX / 2)
			r.fast_capture += GPI_TICK_FAST_MAX / 2;
		else r.fast_capture += r.hybrid_tick;
 8011bb6:	693a      	ldr	r2, [r7, #16]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	4413      	add	r3, r2
 8011bbc:	613b      	str	r3, [r7, #16]
	__ASM volatile
 8011bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8011bc2:	b672      	cpsid	i
 8011bc4:	461c      	mov	r4, r3
 8011bc6:	f3bf 8f5f 	dmb	sy
	return ie;
 8011bca:	4623      	mov	r3, r4

		int ie = gpi_int_lock();
 8011bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		REORDER_BARRIER();

		if ((RESYNC != s.slot_state) || (STOP == next_task))
 8011bce:	4b2d      	ldr	r3, [pc, #180]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d102      	bne.n	8011bde <mixer_transport_set_next_slot_task+0x82>
 8011bd8:	79fb      	ldrb	r3, [r7, #7]
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d142      	bne.n	8011c64 <mixer_transport_set_next_slot_task+0x108>
 8011bde:	4b2b      	ldr	r3, [pc, #172]	; (8011c8c <mixer_transport_set_next_slot_task+0x130>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		{
			if (gpi_tick_compare_fast_native(gpi_tick_fast_native(), r.fast_capture) >= 0)
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8011be8:	627b      	str	r3, [r7, #36]	; 0x24
 8011bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	db06      	blt.n	8011c06 <mixer_transport_set_next_slot_task+0xaa>
 8011bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	bf14      	ite	ne
 8011bfe:	2301      	movne	r3, #1
 8011c00:	2300      	moveq	r3, #0
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	e001      	b.n	8011c0a <mixer_transport_set_next_slot_task+0xae>
 8011c06:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	db02      	blt.n	8011c14 <mixer_transport_set_next_slot_task+0xb8>
				next_task = -1;
 8011c0e:	23ff      	movs	r3, #255	; 0xff
 8011c10:	71fb      	strb	r3, [r7, #7]
 8011c12:	e027      	b.n	8011c64 <mixer_transport_set_next_slot_task+0x108>
 8011c14:	2300      	movs	r3, #0
 8011c16:	623b      	str	r3, [r7, #32]
	if (mask)
 8011c18:	6a3b      	ldr	r3, [r7, #32]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d005      	beq.n	8011c2a <mixer_transport_set_next_slot_task+0xce>
		LED_GPIO_Port->ODR ^= mask;
 8011c1e:	4b1c      	ldr	r3, [pc, #112]	; (8011c90 <mixer_transport_set_next_slot_task+0x134>)
 8011c20:	695a      	ldr	r2, [r3, #20]
 8011c22:	6a3b      	ldr	r3, [r7, #32]
 8011c24:	491a      	ldr	r1, [pc, #104]	; (8011c90 <mixer_transport_set_next_slot_task+0x134>)
 8011c26:	4053      	eors	r3, r2
 8011c28:	614b      	str	r3, [r1, #20]
			{
				// NOTE: next_task == TX or STOP at this point

				gpi_led_toggle(LED_UPDATE_TASK);

				s.next_slot_task = next_task;
 8011c2a:	4a16      	ldr	r2, [pc, #88]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011c2c:	79fb      	ldrb	r3, [r7, #7]
 8011c2e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
				s.next_trigger_tick = s.next_grid_tick - s.tx_trigger_offset;	// also ok for STOP
 8011c32:	4b14      	ldr	r3, [pc, #80]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011c34:	685a      	ldr	r2, [r3, #4]
 8011c36:	4b13      	ldr	r3, [pc, #76]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c3a:	1ad3      	subs	r3, r2, r3
 8011c3c:	4a11      	ldr	r2, [pc, #68]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011c3e:	6093      	str	r3, [r2, #8]

				// if IDLE or RESYNC (RESYNC only if next_task == STOP)
				if (RX_RUNNING != s.slot_state)
 8011c40:	4b10      	ldr	r3, [pc, #64]	; (8011c84 <mixer_transport_set_next_slot_task+0x128>)
 8011c42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c46:	2b10      	cmp	r3, #16
 8011c48:	d001      	beq.n	8011c4e <mixer_transport_set_next_slot_task+0xf2>
					start_grid_timer();
 8011c4a:	f7fc ff83 	bl	800eb54 <start_grid_timer>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	61fb      	str	r3, [r7, #28]
	if (mask)
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <mixer_transport_set_next_slot_task+0x108>
		LED_GPIO_Port->ODR ^= mask;
 8011c58:	4b0d      	ldr	r3, [pc, #52]	; (8011c90 <mixer_transport_set_next_slot_task+0x134>)
 8011c5a:	695a      	ldr	r2, [r3, #20]
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	490c      	ldr	r1, [pc, #48]	; (8011c90 <mixer_transport_set_next_slot_task+0x134>)
 8011c60:	4053      	eors	r3, r2
 8011c62:	614b      	str	r3, [r1, #20]
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	61bb      	str	r3, [r7, #24]
 8011c68:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	f383 8810 	msr	PRIMASK, r3
		GPI_TRACE_MSG(TRACE_WARNING, "!!! WARNING: rx/tx decision was late -> check program, should not happen !!!");
		GPI_TRACE_RETURN(0);
    }
	else
	{
		GPI_TRACE_MSG(TRACE_INFO, "next slot task: %s", (next_task == TX) ? "TX" : ((next_task == RX) ? "RX" : "STOP"));
 8011c76:	bf00      	nop
		GPI_TRACE_RETURN(1);
 8011c78:	2301      	movs	r3, #1
    }
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	373c      	adds	r7, #60	; 0x3c
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd90      	pop	{r4, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	20000410 	.word	0x20000410
 8011c88:	200003c4 	.word	0x200003c4
 8011c8c:	200012c8 	.word	0x200012c8
 8011c90:	48000800 	.word	0x48000800

08011c94 <NVIC_SystemReset>:
{
 8011c94:	b480      	push	{r7}
 8011c96:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011c98:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011c9c:	4b05      	ldr	r3, [pc, #20]	; (8011cb4 <NVIC_SystemReset+0x20>)
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011ca4:	4903      	ldr	r1, [pc, #12]	; (8011cb4 <NVIC_SystemReset+0x20>)
 8011ca6:	4b04      	ldr	r3, [pc, #16]	; (8011cb8 <NVIC_SystemReset+0x24>)
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	60cb      	str	r3, [r1, #12]
 8011cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8011cb0:	bf00      	nop
    __NOP();
 8011cb2:	e7fd      	b.n	8011cb0 <NVIC_SystemReset+0x1c>
 8011cb4:	e000ed00 	.word	0xe000ed00
 8011cb8:	05fa0004 	.word	0x05fa0004

08011cbc <mixer_init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_init(uint8_t node_id)
{
 8011cbc:	b590      	push	{r4, r7, lr}
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION();
 8011cc6:	bf00      	nop

	// set the state to mixer for config the isr functions
	chirp_isr.state = ISR_MIXER;
 8011cc8:	4b93      	ldr	r3, [pc, #588]	; (8011f18 <mixer_init+0x25c>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	701a      	strb	r2, [r3, #0]

	assert_reset(node_id < chirp_config.mx_num_nodes);
 8011cce:	79fb      	ldrb	r3, [r7, #7]
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	4b92      	ldr	r3, [pc, #584]	; (8011f1c <mixer_init+0x260>)
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d316      	bcc.n	8011d0a <mixer_init+0x4e>
 8011cdc:	79fb      	ldrb	r3, [r7, #7]
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	4b8e      	ldr	r3, [pc, #568]	; (8011f1c <mixer_init+0x260>)
 8011ce2:	881b      	ldrh	r3, [r3, #0]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d201      	bcs.n	8011cee <mixer_init+0x32>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <mixer_init+0x34>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f010 fca3 	bl	802263c <iprintf>
 8011cf6:	79fb      	ldrb	r3, [r7, #7]
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	4b88      	ldr	r3, [pc, #544]	; (8011f1c <mixer_init+0x260>)
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d302      	bcc.n	8011d0a <mixer_init+0x4e>
  __ASM volatile ("cpsid f" : : : "memory");
 8011d04:	b671      	cpsid	f
 8011d06:	f7ff ffc5 	bl	8011c94 <NVIC_SystemReset>

	// in case NDEBUG is set
	if (node_id >= chirp_config.mx_num_nodes)
 8011d0a:	79fb      	ldrb	r3, [r7, #7]
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	4b83      	ldr	r3, [pc, #524]	; (8011f1c <mixer_init+0x260>)
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	429a      	cmp	r2, r3
 8011d16:	f080 8268 	bcs.w	80121ea <mixer_init+0x52e>

	#undef PRINT

#endif

    chirp_config.update_slot = 0;
 8011d1a:	4b80      	ldr	r3, [pc, #512]	; (8011f1c <mixer_init+0x260>)
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	mx.rx_queue[0] = (Packet *)malloc((sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])) * (chirp_config.packet_len));
 8011d22:	4b7e      	ldr	r3, [pc, #504]	; (8011f1c <mixer_init+0x260>)
 8011d24:	8adb      	ldrh	r3, [r3, #22]
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f00f fe5e 	bl	80219ec <malloc>
 8011d30:	4603      	mov	r3, r0
 8011d32:	461a      	mov	r2, r3
 8011d34:	4b7a      	ldr	r3, [pc, #488]	; (8011f20 <mixer_init+0x264>)
 8011d36:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])); i++)
 8011d38:	2301      	movs	r3, #1
 8011d3a:	60fb      	str	r3, [r7, #12]
 8011d3c:	e012      	b.n	8011d64 <mixer_init+0xa8>
		mx.rx_queue[i] = (Packet *)&(mx.rx_queue[i-1]->packet_chunk[chirp_config.packet_chunk_len]);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	3b01      	subs	r3, #1
 8011d42:	4a77      	ldr	r2, [pc, #476]	; (8011f20 <mixer_init+0x264>)
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	685a      	ldr	r2, [r3, #4]
 8011d4a:	4b74      	ldr	r3, [pc, #464]	; (8011f1c <mixer_init+0x260>)
 8011d4c:	8a9b      	ldrh	r3, [r3, #20]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	3308      	adds	r3, #8
 8011d52:	441a      	add	r2, r3
 8011d54:	4972      	ldr	r1, [pc, #456]	; (8011f20 <mixer_init+0x264>)
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	440b      	add	r3, r1
 8011d5c:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])); i++)
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3301      	adds	r3, #1
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	d9e9      	bls.n	8011d3e <mixer_init+0x82>
	memset(mx.rx_queue[0], 0, (sizeof(mx.rx_queue) / sizeof(mx.rx_queue[0])) * (chirp_config.packet_len));
 8011d6a:	4b6d      	ldr	r3, [pc, #436]	; (8011f20 <mixer_init+0x264>)
 8011d6c:	6858      	ldr	r0, [r3, #4]
 8011d6e:	4b6b      	ldr	r3, [pc, #428]	; (8011f1c <mixer_init+0x260>)
 8011d70:	8adb      	ldrh	r3, [r3, #22]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	461a      	mov	r2, r3
 8011d78:	2100      	movs	r1, #0
 8011d7a:	f00f fe52 	bl	8021a22 <memset>

	if (chirp_config.primitive != FLOODING)
 8011d7e:	4b67      	ldr	r3, [pc, #412]	; (8011f1c <mixer_init+0x260>)
 8011d80:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d057      	beq.n	8011e38 <mixer_init+0x17c>
	{
	#if INFO_VECTOR_QUEUE
	mx.code_queue[0] = (Packet_info_vector *)malloc((sizeof(mx.code_queue) / sizeof(mx.code_queue[0])) * (chirp_config.coding_vector.len));
 8011d88:	4b64      	ldr	r3, [pc, #400]	; (8011f1c <mixer_init+0x260>)
 8011d8a:	79db      	ldrb	r3, [r3, #7]
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f00f fe2c 	bl	80219ec <malloc>
 8011d94:	4603      	mov	r3, r0
 8011d96:	461a      	mov	r2, r3
 8011d98:	4b61      	ldr	r3, [pc, #388]	; (8011f20 <mixer_init+0x264>)
 8011d9a:	615a      	str	r2, [r3, #20]
	for (i = 1; i < (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])); i++)
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	60fb      	str	r3, [r7, #12]
 8011da0:	e012      	b.n	8011dc8 <mixer_init+0x10c>
		mx.code_queue[i] = (Packet_info_vector *)&(mx.code_queue[i-1]->vector[chirp_config.coding_vector.len]);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	4a5e      	ldr	r2, [pc, #376]	; (8011f20 <mixer_init+0x264>)
 8011da8:	3304      	adds	r3, #4
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	4413      	add	r3, r2
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	4a5a      	ldr	r2, [pc, #360]	; (8011f1c <mixer_init+0x260>)
 8011db2:	79d2      	ldrb	r2, [r2, #7]
 8011db4:	441a      	add	r2, r3
 8011db6:	495a      	ldr	r1, [pc, #360]	; (8011f20 <mixer_init+0x264>)
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	440b      	add	r3, r1
 8011dc0:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])); i++)
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	60fb      	str	r3, [r7, #12]
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2b03      	cmp	r3, #3
 8011dcc:	d9e9      	bls.n	8011da2 <mixer_init+0xe6>
	memset(mx.code_queue[0], 0, (sizeof(mx.code_queue) / sizeof(mx.code_queue[0])) * (chirp_config.coding_vector.len));
 8011dce:	4b54      	ldr	r3, [pc, #336]	; (8011f20 <mixer_init+0x264>)
 8011dd0:	6958      	ldr	r0, [r3, #20]
 8011dd2:	4b52      	ldr	r3, [pc, #328]	; (8011f1c <mixer_init+0x260>)
 8011dd4:	79db      	ldrb	r3, [r3, #7]
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	461a      	mov	r2, r3
 8011dda:	2100      	movs	r1, #0
 8011ddc:	f00f fe21 	bl	8021a22 <memset>

	mx.info_queue[0] = (Packet_info_vector *)malloc((sizeof(mx.info_queue) / sizeof(mx.info_queue[0])) * (chirp_config.info_vector.len));
 8011de0:	4b4e      	ldr	r3, [pc, #312]	; (8011f1c <mixer_init+0x260>)
 8011de2:	7adb      	ldrb	r3, [r3, #11]
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4618      	mov	r0, r3
 8011de8:	f00f fe00 	bl	80219ec <malloc>
 8011dec:	4603      	mov	r3, r0
 8011dee:	461a      	mov	r2, r3
 8011df0:	4b4b      	ldr	r3, [pc, #300]	; (8011f20 <mixer_init+0x264>)
 8011df2:	625a      	str	r2, [r3, #36]	; 0x24
	for (i = 1; i < (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])); i++)
 8011df4:	2301      	movs	r3, #1
 8011df6:	60fb      	str	r3, [r7, #12]
 8011df8:	e012      	b.n	8011e20 <mixer_init+0x164>
		mx.info_queue[i] = (Packet_info_vector *)&(mx.info_queue[i-1]->vector[chirp_config.info_vector.len]);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3b01      	subs	r3, #1
 8011dfe:	4a48      	ldr	r2, [pc, #288]	; (8011f20 <mixer_init+0x264>)
 8011e00:	3308      	adds	r3, #8
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	4413      	add	r3, r2
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	4a44      	ldr	r2, [pc, #272]	; (8011f1c <mixer_init+0x260>)
 8011e0a:	7ad2      	ldrb	r2, [r2, #11]
 8011e0c:	441a      	add	r2, r3
 8011e0e:	4944      	ldr	r1, [pc, #272]	; (8011f20 <mixer_init+0x264>)
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	3308      	adds	r3, #8
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	440b      	add	r3, r1
 8011e18:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])); i++)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b03      	cmp	r3, #3
 8011e24:	d9e9      	bls.n	8011dfa <mixer_init+0x13e>
	memset(mx.info_queue[0], 0, (sizeof(mx.info_queue) / sizeof(mx.info_queue[0])) * (chirp_config.info_vector.len));
 8011e26:	4b3e      	ldr	r3, [pc, #248]	; (8011f20 <mixer_init+0x264>)
 8011e28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011e2a:	4b3c      	ldr	r3, [pc, #240]	; (8011f1c <mixer_init+0x260>)
 8011e2c:	7adb      	ldrb	r3, [r3, #11]
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	461a      	mov	r2, r3
 8011e32:	2100      	movs	r1, #0
 8011e34:	f00f fdf5 	bl	8021a22 <memset>
	#endif
	}

	mx.tx_packet = (Packet *)malloc(chirp_config.packet_len);
 8011e38:	4b38      	ldr	r3, [pc, #224]	; (8011f1c <mixer_init+0x260>)
 8011e3a:	8adb      	ldrh	r3, [r3, #22]
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f00f fdd4 	bl	80219ec <malloc>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461a      	mov	r2, r3
 8011e48:	4b35      	ldr	r3, [pc, #212]	; (8011f20 <mixer_init+0x264>)
 8011e4a:	641a      	str	r2, [r3, #64]	; 0x40
	memset(mx.tx_packet, 0, chirp_config.packet_len);
 8011e4c:	4b34      	ldr	r3, [pc, #208]	; (8011f20 <mixer_init+0x264>)
 8011e4e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011e50:	4b32      	ldr	r3, [pc, #200]	; (8011f1c <mixer_init+0x260>)
 8011e52:	8adb      	ldrh	r3, [r3, #22]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	461a      	mov	r2, r3
 8011e58:	2100      	movs	r1, #0
 8011e5a:	f00f fde2 	bl	8021a22 <memset>

	if (chirp_config.primitive != FLOODING)
 8011e5e:	4b2f      	ldr	r3, [pc, #188]	; (8011f1c <mixer_init+0x260>)
 8011e60:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d042      	beq.n	8011eee <mixer_init+0x232>
	{
	mx.matrix[0] = (Matrix_Row *)malloc(chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8011e68:	4b2c      	ldr	r3, [pc, #176]	; (8011f1c <mixer_init+0x260>)
 8011e6a:	885b      	ldrh	r3, [r3, #2]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	461a      	mov	r2, r3
 8011e70:	4b2a      	ldr	r3, [pc, #168]	; (8011f1c <mixer_init+0x260>)
 8011e72:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	3301      	adds	r3, #1
 8011e78:	fb03 f302 	mul.w	r3, r3, r2
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f00f fdb4 	bl	80219ec <malloc>
 8011e84:	4603      	mov	r3, r0
 8011e86:	461a      	mov	r2, r3
 8011e88:	4b25      	ldr	r3, [pc, #148]	; (8011f20 <mixer_init+0x264>)
 8011e8a:	65da      	str	r2, [r3, #92]	; 0x5c
	for (i = 1; i < chirp_config.mx_generation_size; i++)
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	60fb      	str	r3, [r7, #12]
 8011e90:	e015      	b.n	8011ebe <mixer_init+0x202>
		mx.matrix[i] = (Matrix_Row *)&(mx.matrix[i-1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	4a22      	ldr	r2, [pc, #136]	; (8011f20 <mixer_init+0x264>)
 8011e98:	3316      	adds	r3, #22
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	4413      	add	r3, r2
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	4b1e      	ldr	r3, [pc, #120]	; (8011f1c <mixer_init+0x260>)
 8011ea2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	4413      	add	r3, r2
 8011eaa:	1d1a      	adds	r2, r3, #4
 8011eac:	491c      	ldr	r1, [pc, #112]	; (8011f20 <mixer_init+0x264>)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	3316      	adds	r3, #22
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	440b      	add	r3, r1
 8011eb6:	605a      	str	r2, [r3, #4]
	for (i = 1; i < chirp_config.mx_generation_size; i++)
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	3301      	adds	r3, #1
 8011ebc:	60fb      	str	r3, [r7, #12]
 8011ebe:	4b17      	ldr	r3, [pc, #92]	; (8011f1c <mixer_init+0x260>)
 8011ec0:	885b      	ldrh	r3, [r3, #2]
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d3e2      	bcc.n	8011e92 <mixer_init+0x1d6>
	memset(mx.matrix[0], 0, chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8011ecc:	4b14      	ldr	r3, [pc, #80]	; (8011f20 <mixer_init+0x264>)
 8011ece:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8011ed0:	4b12      	ldr	r3, [pc, #72]	; (8011f1c <mixer_init+0x260>)
 8011ed2:	885b      	ldrh	r3, [r3, #2]
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	4b10      	ldr	r3, [pc, #64]	; (8011f1c <mixer_init+0x260>)
 8011eda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	3301      	adds	r3, #1
 8011ee0:	fb03 f302 	mul.w	r3, r3, r2
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	2100      	movs	r1, #0
 8011eea:	f00f fd9a 	bl	8021a22 <memset>
	}

	mx.history[0] = (Node *)malloc((chirp_config.mx_num_nodes + 3) * (chirp_config.history_len_8));
 8011eee:	4b0b      	ldr	r3, [pc, #44]	; (8011f1c <mixer_init+0x260>)
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	3303      	adds	r3, #3
 8011ef6:	4a09      	ldr	r2, [pc, #36]	; (8011f1c <mixer_init+0x260>)
 8011ef8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8011efa:	b292      	uxth	r2, r2
 8011efc:	fb02 f303 	mul.w	r3, r2, r3
 8011f00:	4618      	mov	r0, r3
 8011f02:	f00f fd73 	bl	80219ec <malloc>
 8011f06:	4603      	mov	r3, r0
 8011f08:	461a      	mov	r2, r3
 8011f0a:	4b05      	ldr	r3, [pc, #20]	; (8011f20 <mixer_init+0x264>)
 8011f0c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
	for (i = 1; i < chirp_config.mx_num_nodes + 3; i++)
 8011f10:	2301      	movs	r3, #1
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	e01b      	b.n	8011f4e <mixer_init+0x292>
 8011f16:	bf00      	nop
 8011f18:	20000cfc 	.word	0x20000cfc
 8011f1c:	20001430 	.word	0x20001430
 8011f20:	200014f0 	.word	0x200014f0
		mx.history[i] = (Node *)&(mx.history[i-1]->row_map_chunk[chirp_config.matrix_coding_vector.len]);
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	4ab2      	ldr	r2, [pc, #712]	; (80121f4 <mixer_init+0x538>)
 8011f2a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011f2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f32:	4bb1      	ldr	r3, [pc, #708]	; (80121f8 <mixer_init+0x53c>)
 8011f34:	7f5b      	ldrb	r3, [r3, #29]
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	4413      	add	r3, r2
 8011f3a:	1d1a      	adds	r2, r3, #4
 8011f3c:	49ad      	ldr	r1, [pc, #692]	; (80121f4 <mixer_init+0x538>)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 1; i < chirp_config.mx_num_nodes + 3; i++)
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	60fb      	str	r3, [r7, #12]
 8011f4e:	4baa      	ldr	r3, [pc, #680]	; (80121f8 <mixer_init+0x53c>)
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	3303      	adds	r3, #3
 8011f56:	461a      	mov	r2, r3
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d3e2      	bcc.n	8011f24 <mixer_init+0x268>
	memset(mx.history[0], 0, (chirp_config.mx_num_nodes + 3) * (chirp_config.history_len_8));
 8011f5e:	4ba5      	ldr	r3, [pc, #660]	; (80121f4 <mixer_init+0x538>)
 8011f60:	f8d3 0468 	ldr.w	r0, [r3, #1128]	; 0x468
 8011f64:	4ba4      	ldr	r3, [pc, #656]	; (80121f8 <mixer_init+0x53c>)
 8011f66:	881b      	ldrh	r3, [r3, #0]
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	3303      	adds	r3, #3
 8011f6c:	4aa2      	ldr	r2, [pc, #648]	; (80121f8 <mixer_init+0x53c>)
 8011f6e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8011f70:	b292      	uxth	r2, r2
 8011f72:	fb02 f303 	mul.w	r3, r2, r3
 8011f76:	461a      	mov	r2, r3
 8011f78:	2100      	movs	r1, #0
 8011f7a:	f00f fd52 	bl	8021a22 <memset>

	mx_absent_head = mx.history[chirp_config.mx_num_nodes + 3 - 3];
 8011f7e:	4b9e      	ldr	r3, [pc, #632]	; (80121f8 <mixer_init+0x53c>)
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	4a9b      	ldr	r2, [pc, #620]	; (80121f4 <mixer_init+0x538>)
 8011f86:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f8e:	4a9b      	ldr	r2, [pc, #620]	; (80121fc <mixer_init+0x540>)
 8011f90:	6013      	str	r3, [r2, #0]
	mx_present_head = mx.history[chirp_config.mx_num_nodes + 3 - 2];
 8011f92:	4b99      	ldr	r3, [pc, #612]	; (80121f8 <mixer_init+0x53c>)
 8011f94:	881b      	ldrh	r3, [r3, #0]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	3301      	adds	r3, #1
 8011f9a:	4a96      	ldr	r2, [pc, #600]	; (80121f4 <mixer_init+0x538>)
 8011f9c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fa4:	4a96      	ldr	r2, [pc, #600]	; (8012200 <mixer_init+0x544>)
 8011fa6:	6013      	str	r3, [r2, #0]
	mx_finished_head = mx.history[chirp_config.mx_num_nodes + 3 - 1];
 8011fa8:	4b93      	ldr	r3, [pc, #588]	; (80121f8 <mixer_init+0x53c>)
 8011faa:	881b      	ldrh	r3, [r3, #0]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	3302      	adds	r3, #2
 8011fb0:	4a90      	ldr	r2, [pc, #576]	; (80121f4 <mixer_init+0x538>)
 8011fb2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8011fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fba:	4a92      	ldr	r2, [pc, #584]	; (8012204 <mixer_init+0x548>)
 8011fbc:	6013      	str	r3, [r2, #0]
	#if MX_SMART_SHUTDOWN
	mx.full_rank_map = (Full_Rank_Map *)malloc(chirp_config.map.len + chirp_config.hash.len);
	#endif

	mx.request = (Request_Data *)malloc(offsetof(Request_Data, mask) + 6 * chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8011fbe:	4b8e      	ldr	r3, [pc, #568]	; (80121f8 <mixer_init+0x53c>)
 8011fc0:	7f5b      	ldrb	r3, [r3, #29]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	005b      	lsls	r3, r3, #1
 8011fc8:	4413      	add	r3, r2
 8011fca:	00db      	lsls	r3, r3, #3
 8011fcc:	3318      	adds	r3, #24
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f00f fd0c 	bl	80219ec <malloc>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	4b86      	ldr	r3, [pc, #536]	; (80121f4 <mixer_init+0x538>)
 8011fda:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

	mixer_transport_init();
 8011fde:	f7ff fbd1 	bl	8011784 <mixer_transport_init>

	mx.rx_queue_num_writing = 0;
 8011fe2:	4b84      	ldr	r3, [pc, #528]	; (80121f4 <mixer_init+0x538>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	635a      	str	r2, [r3, #52]	; 0x34
	mx.rx_queue_num_written = 0;
 8011fe8:	4b82      	ldr	r3, [pc, #520]	; (80121f4 <mixer_init+0x538>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	639a      	str	r2, [r3, #56]	; 0x38
	mx.rx_queue_num_read = 0;
 8011fee:	4b81      	ldr	r3, [pc, #516]	; (80121f4 <mixer_init+0x538>)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	63da      	str	r2, [r3, #60]	; 0x3c

	mx.tx_packet->sender_id = node_id;
 8011ff4:	4b7f      	ldr	r3, [pc, #508]	; (80121f4 <mixer_init+0x538>)
 8011ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff8:	79fa      	ldrb	r2, [r7, #7]
 8011ffa:	719a      	strb	r2, [r3, #6]
	mx.tx_packet->flags.all = 0;
 8011ffc:	4b7d      	ldr	r3, [pc, #500]	; (80121f4 <mixer_init+0x538>)
 8011ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012000:	2200      	movs	r2, #0
 8012002:	71da      	strb	r2, [r3, #7]

	mx.tx_reserve = NULL;
 8012004:	4b7b      	ldr	r3, [pc, #492]	; (80121f4 <mixer_init+0x538>)
 8012006:	2200      	movs	r2, #0
 8012008:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < chirp_config.mx_generation_size; i++)
 801200a:	2300      	movs	r3, #0
 801200c:	60fb      	str	r3, [r7, #12]
 801200e:	e00b      	b.n	8012028 <mixer_init+0x36c>
		mx.matrix[i]->birth_slot = UINT16_MAX;
 8012010:	4a78      	ldr	r2, [pc, #480]	; (80121f4 <mixer_init+0x538>)
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3316      	adds	r3, #22
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	4413      	add	r3, r2
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012020:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < chirp_config.mx_generation_size; i++)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	3301      	adds	r3, #1
 8012026:	60fb      	str	r3, [r7, #12]
 8012028:	4b73      	ldr	r3, [pc, #460]	; (80121f8 <mixer_init+0x53c>)
 801202a:	885b      	ldrh	r3, [r3, #2]
 801202c:	b29b      	uxth	r3, r3
 801202e:	461a      	mov	r2, r3
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	4293      	cmp	r3, r2
 8012034:	d3ec      	bcc.n	8012010 <mixer_init+0x354>

	mx.rank = 0;
 8012036:	4b6f      	ldr	r3, [pc, #444]	; (80121f4 <mixer_init+0x538>)
 8012038:	2200      	movs	r2, #0
 801203a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458

	mx.next_own_row = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 801203e:	4b6e      	ldr	r3, [pc, #440]	; (80121f8 <mixer_init+0x53c>)
 8012040:	885b      	ldrh	r3, [r3, #2]
 8012042:	b29b      	uxth	r3, r3
 8012044:	3b01      	subs	r3, #1
 8012046:	4a6b      	ldr	r2, [pc, #428]	; (80121f4 <mixer_init+0x538>)
 8012048:	3316      	adds	r3, #22
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	685a      	ldr	r2, [r3, #4]
 8012050:	4b69      	ldr	r3, [pc, #420]	; (80121f8 <mixer_init+0x53c>)
 8012052:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012054:	b29b      	uxth	r3, r3
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	4413      	add	r3, r2
 801205a:	3304      	adds	r3, #4
 801205c:	4a65      	ldr	r2, [pc, #404]	; (80121f4 <mixer_init+0x538>)
 801205e:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	mx.recent_innovative_slot = 0;
 8012062:	4b64      	ldr	r3, [pc, #400]	; (80121f4 <mixer_init+0x538>)
 8012064:	2200      	movs	r2, #0
 8012066:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464

	mx.events = 0;
 801206a:	4b62      	ldr	r3, [pc, #392]	; (80121f4 <mixer_init+0x538>)
 801206c:	2200      	movs	r2, #0
 801206e:	601a      	str	r2, [r3, #0]

	memset(&mx.stat_counter, 0, sizeof(mx.stat_counter));
 8012070:	2234      	movs	r2, #52	; 0x34
 8012072:	2100      	movs	r1, #0
 8012074:	4864      	ldr	r0, [pc, #400]	; (8012208 <mixer_init+0x54c>)
 8012076:	f00f fcd4 	bl	8021a22 <memset>

	for (i = 0; i < NUM_ELEMENTS(pt_data); ++i)
 801207a:	2300      	movs	r3, #0
 801207c:	60fb      	str	r3, [r7, #12]
 801207e:	e007      	b.n	8012090 <mixer_init+0x3d4>
		PT_INIT(&pt_data[i]);
 8012080:	4a62      	ldr	r2, [pc, #392]	; (801220c <mixer_init+0x550>)
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2100      	movs	r1, #0
 8012086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < NUM_ELEMENTS(pt_data); ++i)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	3301      	adds	r3, #1
 801208e:	60fb      	str	r3, [r7, #12]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b02      	cmp	r3, #2
 8012094:	d9f4      	bls.n	8012080 <mixer_init+0x3c4>

	#if MX_REQUEST
		memset(mx.request, 0, offsetof(Request_Data, mask) + 6 * chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8012096:	4b57      	ldr	r3, [pc, #348]	; (80121f4 <mixer_init+0x538>)
 8012098:	f8d3 0870 	ldr.w	r0, [r3, #2160]	; 0x870
 801209c:	4b56      	ldr	r3, [pc, #344]	; (80121f8 <mixer_init+0x53c>)
 801209e:	7f5b      	ldrb	r3, [r3, #29]
 80120a0:	461a      	mov	r2, r3
 80120a2:	4613      	mov	r3, r2
 80120a4:	005b      	lsls	r3, r3, #1
 80120a6:	4413      	add	r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	3318      	adds	r3, #24
 80120ac:	461a      	mov	r2, r3
 80120ae:	2100      	movs	r1, #0
 80120b0:	f00f fcb7 	bl	8021a22 <memset>
		memset(&(mx.request->mask[chirp_config.my_row_mask.pos]), -1, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 80120b4:	4b4f      	ldr	r3, [pc, #316]	; (80121f4 <mixer_init+0x538>)
 80120b6:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80120ba:	4b4f      	ldr	r3, [pc, #316]	; (80121f8 <mixer_init+0x53c>)
 80120bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120c0:	3306      	adds	r3, #6
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	18d0      	adds	r0, r2, r3
 80120c6:	4b4c      	ldr	r3, [pc, #304]	; (80121f8 <mixer_init+0x53c>)
 80120c8:	7f5b      	ldrb	r3, [r3, #29]
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	461a      	mov	r2, r3
 80120ce:	f04f 31ff 	mov.w	r1, #4294967295
 80120d2:	f00f fca6 	bl	8021a22 <memset>
		memset(&(mx.request->mask[chirp_config.my_column_mask.pos]), -1, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 80120d6:	4b47      	ldr	r3, [pc, #284]	; (80121f4 <mixer_init+0x538>)
 80120d8:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80120dc:	4b46      	ldr	r3, [pc, #280]	; (80121f8 <mixer_init+0x53c>)
 80120de:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80120e2:	3306      	adds	r3, #6
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	18d0      	adds	r0, r2, r3
 80120e8:	4b43      	ldr	r3, [pc, #268]	; (80121f8 <mixer_init+0x53c>)
 80120ea:	7f5b      	ldrb	r3, [r3, #29]
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	461a      	mov	r2, r3
 80120f0:	f04f 31ff 	mov.w	r1, #4294967295
 80120f4:	f00f fc95 	bl	8021a22 <memset>

		// ATTENTION: signed is important
		int_fast_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 80120f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80120fc:	60bb      	str	r3, [r7, #8]
		for (i = chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t) * 8; i-- > chirp_config.mx_generation_size;)
 80120fe:	4b3e      	ldr	r3, [pc, #248]	; (80121f8 <mixer_init+0x53c>)
 8012100:	7f5b      	ldrb	r3, [r3, #29]
 8012102:	015b      	lsls	r3, r3, #5
 8012104:	60fb      	str	r3, [r7, #12]
 8012106:	e002      	b.n	801210e <mixer_init+0x452>
			mask >>= 1;
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	105b      	asrs	r3, r3, #1
 801210c:	60bb      	str	r3, [r7, #8]
		for (i = chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t) * 8; i-- > chirp_config.mx_generation_size;)
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	1e5a      	subs	r2, r3, #1
 8012112:	60fa      	str	r2, [r7, #12]
 8012114:	4a38      	ldr	r2, [pc, #224]	; (80121f8 <mixer_init+0x53c>)
 8012116:	8852      	ldrh	r2, [r2, #2]
 8012118:	b292      	uxth	r2, r2
 801211a:	4293      	cmp	r3, r2
 801211c:	d8f4      	bhi.n	8012108 <mixer_init+0x44c>
		mx.request->padding_mask = ~(mask << 1);
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	43da      	mvns	r2, r3
 8012124:	4b33      	ldr	r3, [pc, #204]	; (80121f4 <mixer_init+0x538>)
 8012126:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801212a:	615a      	str	r2, [r3, #20]
		GPI_TRACE_MSG(TRACE_VERBOSE, "request padding mask: %0*x",
 801212c:	bf00      	nop
			sizeof(uint_fast_t) * 2, mx.request->padding_mask);

		i = chirp_config.matrix_coding_vector.len - 1;
 801212e:	4b32      	ldr	r3, [pc, #200]	; (80121f8 <mixer_init+0x53c>)
 8012130:	7f5b      	ldrb	r3, [r3, #29]
 8012132:	3b01      	subs	r3, #1
 8012134:	60fb      	str	r3, [r7, #12]
		mx.request->mask[chirp_config.my_row_mask.pos + i] &= mx.request->padding_mask;
 8012136:	4b2f      	ldr	r3, [pc, #188]	; (80121f4 <mixer_init+0x538>)
 8012138:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801213c:	4a2e      	ldr	r2, [pc, #184]	; (80121f8 <mixer_init+0x53c>)
 801213e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012142:	4611      	mov	r1, r2
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	440a      	add	r2, r1
 8012148:	3206      	adds	r2, #6
 801214a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801214e:	4b29      	ldr	r3, [pc, #164]	; (80121f4 <mixer_init+0x538>)
 8012150:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8012154:	6959      	ldr	r1, [r3, #20]
 8012156:	4b27      	ldr	r3, [pc, #156]	; (80121f4 <mixer_init+0x538>)
 8012158:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801215c:	4a26      	ldr	r2, [pc, #152]	; (80121f8 <mixer_init+0x53c>)
 801215e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012162:	4614      	mov	r4, r2
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	4422      	add	r2, r4
 8012168:	4001      	ands	r1, r0
 801216a:	3206      	adds	r2, #6
 801216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mx.request->mask[chirp_config.my_column_mask.pos + i] &= mx.request->padding_mask;
 8012170:	4b20      	ldr	r3, [pc, #128]	; (80121f4 <mixer_init+0x538>)
 8012172:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8012176:	4a20      	ldr	r2, [pc, #128]	; (80121f8 <mixer_init+0x53c>)
 8012178:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801217c:	4611      	mov	r1, r2
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	440a      	add	r2, r1
 8012182:	3206      	adds	r2, #6
 8012184:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012188:	4b1a      	ldr	r3, [pc, #104]	; (80121f4 <mixer_init+0x538>)
 801218a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801218e:	6959      	ldr	r1, [r3, #20]
 8012190:	4b18      	ldr	r3, [pc, #96]	; (80121f4 <mixer_init+0x538>)
 8012192:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8012196:	4a18      	ldr	r2, [pc, #96]	; (80121f8 <mixer_init+0x53c>)
 8012198:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801219c:	4614      	mov	r4, r2
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	4422      	add	r2, r4
 80121a2:	4001      	ands	r1, r0
 80121a4:	3206      	adds	r2, #6
 80121a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	#endif

	#if MX_COORDINATED_TX
		mx_init_history();
 80121aa:	f003 fdc3 	bl	8015d34 <mx_init_history>
	#endif

	mx.rx_queue_num_read = mx.rx_queue_num_written;
 80121ae:	4b11      	ldr	r3, [pc, #68]	; (80121f4 <mixer_init+0x538>)
 80121b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b2:	4a10      	ldr	r2, [pc, #64]	; (80121f4 <mixer_init+0x538>)
 80121b4:	63d3      	str	r3, [r2, #60]	; 0x3c

	mx.slot_number = 0;
 80121b6:	4b0f      	ldr	r3, [pc, #60]	; (80121f4 <mixer_init+0x538>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 80121be:	4b0d      	ldr	r3, [pc, #52]	; (80121f4 <mixer_init+0x538>)
 80121c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c2:	4a0d      	ldr	r2, [pc, #52]	; (80121f8 <mixer_init+0x53c>)
 80121c4:	7b92      	ldrb	r2, [r2, #14]
 80121c6:	4413      	add	r3, r2
 80121c8:	7a1a      	ldrb	r2, [r3, #8]
 80121ca:	4b0a      	ldr	r3, [pc, #40]	; (80121f4 <mixer_init+0x538>)
 80121cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121ce:	490a      	ldr	r1, [pc, #40]	; (80121f8 <mixer_init+0x53c>)
 80121d0:	7b89      	ldrb	r1, [r1, #14]
 80121d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80121d6:	b2d2      	uxtb	r2, r2
 80121d8:	440b      	add	r3, r1
 80121da:	721a      	strb	r2, [r3, #8]

	mx.tx_sideload = NULL;
 80121dc:	4b05      	ldr	r3, [pc, #20]	; (80121f4 <mixer_init+0x538>)
 80121de:	2200      	movs	r2, #0
 80121e0:	645a      	str	r2, [r3, #68]	; 0x44
		#endif
	#endif

	#if ENERGEST_CONF_ON
		// Initialize Energest values.
		energest_init();
 80121e2:	f7fb ffff 	bl	800e1e4 <energest_init>
	#endif

	GPI_TRACE_RETURN();
 80121e6:	bf00      	nop
 80121e8:	e000      	b.n	80121ec <mixer_init+0x530>
		GPI_TRACE_RETURN();
 80121ea:	bf00      	nop
}
 80121ec:	3714      	adds	r7, #20
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd90      	pop	{r4, r7, pc}
 80121f2:	bf00      	nop
 80121f4:	200014f0 	.word	0x200014f0
 80121f8:	20001430 	.word	0x20001430
 80121fc:	20000ce4 	.word	0x20000ce4
 8012200:	20000cc4 	.word	0x20000cc4
 8012204:	20000ce0 	.word	0x20000ce0
 8012208:	20001d64 	.word	0x20001d64
 801220c:	20001e28 	.word	0x20001e28

08012210 <mixer_write>:

//**************************************************************************************************

size_t mixer_write(unsigned int i, const void *msg, size_t size)
{
 8012210:	b590      	push	{r4, r7, lr}
 8012212:	b08d      	sub	sp, #52	; 0x34
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
	GPI_TRACE_FUNCTION();
 801221c:	bf00      	nop

	assert_reset(i < chirp_config.mx_generation_size);
 801221e:	4ba1      	ldr	r3, [pc, #644]	; (80124a4 <mixer_write+0x294>)
 8012220:	885b      	ldrh	r3, [r3, #2]
 8012222:	b29b      	uxth	r3, r3
 8012224:	461a      	mov	r2, r3
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	4293      	cmp	r3, r2
 801222a:	d316      	bcc.n	801225a <mixer_write+0x4a>
 801222c:	4b9d      	ldr	r3, [pc, #628]	; (80124a4 <mixer_write+0x294>)
 801222e:	885b      	ldrh	r3, [r3, #2]
 8012230:	b29b      	uxth	r3, r3
 8012232:	461a      	mov	r2, r3
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4293      	cmp	r3, r2
 8012238:	d201      	bcs.n	801223e <mixer_write+0x2e>
 801223a:	2301      	movs	r3, #1
 801223c:	e000      	b.n	8012240 <mixer_write+0x30>
 801223e:	2300      	movs	r3, #0
 8012240:	4618      	mov	r0, r3
 8012242:	f010 f9fb 	bl	802263c <iprintf>
 8012246:	4b97      	ldr	r3, [pc, #604]	; (80124a4 <mixer_write+0x294>)
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	b29b      	uxth	r3, r3
 801224c:	461a      	mov	r2, r3
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	4293      	cmp	r3, r2
 8012252:	d302      	bcc.n	801225a <mixer_write+0x4a>
 8012254:	b671      	cpsid	f
 8012256:	f7ff fd1d 	bl	8011c94 <NVIC_SystemReset>

	// in case NDEBUG is set
	if (i >= chirp_config.mx_generation_size)
 801225a:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <mixer_write+0x294>)
 801225c:	885b      	ldrh	r3, [r3, #2]
 801225e:	b29b      	uxth	r3, r3
 8012260:	461a      	mov	r2, r3
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	4293      	cmp	r3, r2
 8012266:	d301      	bcc.n	801226c <mixer_write+0x5c>
		GPI_TRACE_RETURN(0);
 8012268:	2300      	movs	r3, #0
 801226a:	e117      	b.n	801249c <mixer_write+0x28c>

	size = MIN(size, chirp_config.matrix_payload_8.len);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012270:	4b8c      	ldr	r3, [pc, #560]	; (80124a4 <mixer_write+0x294>)
 8012272:	7edb      	ldrb	r3, [r3, #27]
 8012274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012278:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227e:	4293      	cmp	r3, r2
 8012280:	bf28      	it	cs
 8012282:	4613      	movcs	r3, r2
 8012284:	607b      	str	r3, [r7, #4]

	gpi_memcpy_dma(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]), msg, size);
 8012286:	4a88      	ldr	r2, [pc, #544]	; (80124a8 <mixer_write+0x298>)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	3316      	adds	r3, #22
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	4413      	add	r3, r2
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	4a84      	ldr	r2, [pc, #528]	; (80124a4 <mixer_write+0x294>)
 8012294:	7e92      	ldrb	r2, [r2, #26]
 8012296:	4413      	add	r3, r2
 8012298:	3304      	adds	r3, #4
 801229a:	61fb      	str	r3, [r7, #28]
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	61bb      	str	r3, [r7, #24]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	617b      	str	r3, [r7, #20]
	__builtin_memcpy(dest, src, size);
 80122a4:	69fa      	ldr	r2, [r7, #28]
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	4610      	mov	r0, r2
 80122aa:	4619      	mov	r1, r3
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	461a      	mov	r2, r3
 80122b0:	f00f fbac 	bl	8021a0c <memcpy>

	uint32_t payload_hash = Chirp_RSHash((uint8_t *)&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]), chirp_config.matrix_payload_8.len - 2);
 80122b4:	4a7c      	ldr	r2, [pc, #496]	; (80124a8 <mixer_write+0x298>)
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	3316      	adds	r3, #22
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4413      	add	r3, r2
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	4a78      	ldr	r2, [pc, #480]	; (80124a4 <mixer_write+0x294>)
 80122c2:	7e92      	ldrb	r2, [r2, #26]
 80122c4:	4413      	add	r3, r2
 80122c6:	1d1a      	adds	r2, r3, #4
 80122c8:	4b76      	ldr	r3, [pc, #472]	; (80124a4 <mixer_write+0x294>)
 80122ca:	7edb      	ldrb	r3, [r3, #27]
 80122cc:	3b02      	subs	r3, #2
 80122ce:	4619      	mov	r1, r3
 80122d0:	4610      	mov	r0, r2
 80122d2:	f00d f82b 	bl	801f32c <Chirp_RSHash>
 80122d6:	4603      	mov	r3, r0
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos + chirp_config.mx_payload_size - 2] = payload_hash >> 8;
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	0a19      	lsrs	r1, r3, #8
 80122de:	4a72      	ldr	r2, [pc, #456]	; (80124a8 <mixer_write+0x298>)
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	3316      	adds	r3, #22
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	4413      	add	r3, r2
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	4b6e      	ldr	r3, [pc, #440]	; (80124a4 <mixer_write+0x294>)
 80122ec:	7e9b      	ldrb	r3, [r3, #26]
 80122ee:	4618      	mov	r0, r3
 80122f0:	4b6c      	ldr	r3, [pc, #432]	; (80124a4 <mixer_write+0x294>)
 80122f2:	889b      	ldrh	r3, [r3, #4]
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	4403      	add	r3, r0
 80122f8:	3b02      	subs	r3, #2
 80122fa:	b2c9      	uxtb	r1, r1
 80122fc:	4413      	add	r3, r2
 80122fe:	460a      	mov	r2, r1
 8012300:	711a      	strb	r2, [r3, #4]
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos + chirp_config.mx_payload_size - 1] = payload_hash;
 8012302:	4a69      	ldr	r2, [pc, #420]	; (80124a8 <mixer_write+0x298>)
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	3316      	adds	r3, #22
 8012308:	009b      	lsls	r3, r3, #2
 801230a:	4413      	add	r3, r2
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	4b65      	ldr	r3, [pc, #404]	; (80124a4 <mixer_write+0x294>)
 8012310:	7e9b      	ldrb	r3, [r3, #26]
 8012312:	4619      	mov	r1, r3
 8012314:	4b63      	ldr	r3, [pc, #396]	; (80124a4 <mixer_write+0x294>)
 8012316:	889b      	ldrh	r3, [r3, #4]
 8012318:	b29b      	uxth	r3, r3
 801231a:	440b      	add	r3, r1
 801231c:	3b01      	subs	r3, #1
 801231e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012320:	b2c9      	uxtb	r1, r1
 8012322:	4413      	add	r3, r2
 8012324:	460a      	mov	r2, r1
 8012326:	711a      	strb	r2, [r3, #4]

	unwrap_row(i);
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f7fc f8fb 	bl	800e524 <unwrap_row>

	memset(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), 0, sizeof(uint_fast_t) * chirp_config.matrix_coding_vector.len);
 801232e:	4a5e      	ldr	r2, [pc, #376]	; (80124a8 <mixer_write+0x298>)
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	3316      	adds	r3, #22
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	4413      	add	r3, r2
 8012338:	685a      	ldr	r2, [r3, #4]
 801233a:	4b5a      	ldr	r3, [pc, #360]	; (80124a4 <mixer_write+0x294>)
 801233c:	7f1b      	ldrb	r3, [r3, #28]
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	4413      	add	r3, r2
 8012342:	1d18      	adds	r0, r3, #4
 8012344:	4b57      	ldr	r3, [pc, #348]	; (80124a4 <mixer_write+0x294>)
 8012346:	7f5b      	ldrb	r3, [r3, #29]
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	461a      	mov	r2, r3
 801234c:	2100      	movs	r1, #0
 801234e:	f00f fb68 	bl	8021a22 <memset>
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] |= 1 << (i % 8);
 8012352:	4a55      	ldr	r2, [pc, #340]	; (80124a8 <mixer_write+0x298>)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	3316      	adds	r3, #22
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4413      	add	r3, r2
 801235c:	6859      	ldr	r1, [r3, #4]
 801235e:	4b51      	ldr	r3, [pc, #324]	; (80124a4 <mixer_write+0x294>)
 8012360:	7e1b      	ldrb	r3, [r3, #24]
 8012362:	4618      	mov	r0, r3
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	08da      	lsrs	r2, r3, #3
 8012368:	1813      	adds	r3, r2, r0
 801236a:	440b      	add	r3, r1
 801236c:	791b      	ldrb	r3, [r3, #4]
 801236e:	b259      	sxtb	r1, r3
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f003 0307 	and.w	r3, r3, #7
 8012376:	2001      	movs	r0, #1
 8012378:	fa00 f303 	lsl.w	r3, r0, r3
 801237c:	b25b      	sxtb	r3, r3
 801237e:	430b      	orrs	r3, r1
 8012380:	b258      	sxtb	r0, r3
 8012382:	4949      	ldr	r1, [pc, #292]	; (80124a8 <mixer_write+0x298>)
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	3316      	adds	r3, #22
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	440b      	add	r3, r1
 801238c:	6859      	ldr	r1, [r3, #4]
 801238e:	4b45      	ldr	r3, [pc, #276]	; (80124a4 <mixer_write+0x294>)
 8012390:	7e1b      	ldrb	r3, [r3, #24]
 8012392:	4413      	add	r3, r2
 8012394:	b2c2      	uxtb	r2, r0
 8012396:	440b      	add	r3, r1
 8012398:	711a      	strb	r2, [r3, #4]
	mx.matrix[i]->birth_slot = 0;
 801239a:	4a43      	ldr	r2, [pc, #268]	; (80124a8 <mixer_write+0x298>)
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	3316      	adds	r3, #22
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4413      	add	r3, r2
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	801a      	strh	r2, [r3, #0]

	mx.rank++;
 80123aa:	4b3f      	ldr	r3, [pc, #252]	; (80124a8 <mixer_write+0x298>)
 80123ac:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80123b0:	3301      	adds	r3, #1
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	4b3c      	ldr	r3, [pc, #240]	; (80124a8 <mixer_write+0x298>)
 80123b6:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458

	if (NULL == mx.tx_reserve)
 80123ba:	4b3b      	ldr	r3, [pc, #236]	; (80124a8 <mixer_write+0x298>)
 80123bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d107      	bne.n	80123d2 <mixer_write+0x1c2>
	{
		mx.tx_reserve = &(mx.matrix[i]->birth_slot);
 80123c2:	4a39      	ldr	r2, [pc, #228]	; (80124a8 <mixer_write+0x298>)
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	3316      	adds	r3, #22
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	4413      	add	r3, r2
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	4a36      	ldr	r2, [pc, #216]	; (80124a8 <mixer_write+0x298>)
 80123d0:	6493      	str	r3, [r2, #72]	; 0x48
	}

	if (mx.next_own_row > &(mx.matrix[i]->birth_slot))
 80123d2:	4b35      	ldr	r3, [pc, #212]	; (80124a8 <mixer_write+0x298>)
 80123d4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80123d8:	4933      	ldr	r1, [pc, #204]	; (80124a8 <mixer_write+0x298>)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	3316      	adds	r3, #22
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	440b      	add	r3, r1
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d908      	bls.n	80123fa <mixer_write+0x1ea>
		mx.next_own_row = &(mx.matrix[i]->birth_slot);
 80123e8:	4a2f      	ldr	r2, [pc, #188]	; (80124a8 <mixer_write+0x298>)
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	3316      	adds	r3, #22
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	4413      	add	r3, r2
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	4a2c      	ldr	r2, [pc, #176]	; (80124a8 <mixer_write+0x298>)
 80123f6:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460

	#if MX_REQUEST
		const unsigned int BITS_PER_WORD = sizeof(uint_fast_t) * 8;
 80123fa:	2320      	movs	r3, #32
 80123fc:	623b      	str	r3, [r7, #32]
		mx.request->mask[chirp_config.my_row_mask.pos + i / BITS_PER_WORD] &= ~(1 << (i % BITS_PER_WORD));
 80123fe:	4b2a      	ldr	r3, [pc, #168]	; (80124a8 <mixer_write+0x298>)
 8012400:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8012404:	4b27      	ldr	r3, [pc, #156]	; (80124a4 <mixer_write+0x294>)
 8012406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801240a:	4618      	mov	r0, r3
 801240c:	68f9      	ldr	r1, [r7, #12]
 801240e:	6a3b      	ldr	r3, [r7, #32]
 8012410:	fbb1 f3f3 	udiv	r3, r1, r3
 8012414:	1819      	adds	r1, r3, r0
 8012416:	3106      	adds	r1, #6
 8012418:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801241c:	68fa      	ldr	r2, [r7, #12]
 801241e:	6a38      	ldr	r0, [r7, #32]
 8012420:	fbb2 f0f0 	udiv	r0, r2, r0
 8012424:	6a3c      	ldr	r4, [r7, #32]
 8012426:	fb04 f000 	mul.w	r0, r4, r0
 801242a:	1a12      	subs	r2, r2, r0
 801242c:	2001      	movs	r0, #1
 801242e:	fa00 f202 	lsl.w	r2, r0, r2
 8012432:	43d2      	mvns	r2, r2
 8012434:	4614      	mov	r4, r2
 8012436:	4a1c      	ldr	r2, [pc, #112]	; (80124a8 <mixer_write+0x298>)
 8012438:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 801243c:	4819      	ldr	r0, [pc, #100]	; (80124a4 <mixer_write+0x294>)
 801243e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8012442:	4403      	add	r3, r0
 8012444:	4021      	ands	r1, r4
 8012446:	3306      	adds	r3, #6
 8012448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		mx.request->mask[chirp_config.my_column_mask.pos + i / BITS_PER_WORD] &= ~(1 << (i % BITS_PER_WORD));
 801244c:	4b16      	ldr	r3, [pc, #88]	; (80124a8 <mixer_write+0x298>)
 801244e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8012452:	4b14      	ldr	r3, [pc, #80]	; (80124a4 <mixer_write+0x294>)
 8012454:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012458:	4618      	mov	r0, r3
 801245a:	68f9      	ldr	r1, [r7, #12]
 801245c:	6a3b      	ldr	r3, [r7, #32]
 801245e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012462:	1819      	adds	r1, r3, r0
 8012464:	3106      	adds	r1, #6
 8012466:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	6a38      	ldr	r0, [r7, #32]
 801246e:	fbb2 f0f0 	udiv	r0, r2, r0
 8012472:	6a3c      	ldr	r4, [r7, #32]
 8012474:	fb04 f000 	mul.w	r0, r4, r0
 8012478:	1a12      	subs	r2, r2, r0
 801247a:	2001      	movs	r0, #1
 801247c:	fa00 f202 	lsl.w	r2, r0, r2
 8012480:	43d2      	mvns	r2, r2
 8012482:	4614      	mov	r4, r2
 8012484:	4a08      	ldr	r2, [pc, #32]	; (80124a8 <mixer_write+0x298>)
 8012486:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 801248a:	4806      	ldr	r0, [pc, #24]	; (80124a4 <mixer_write+0x294>)
 801248c:	f890 0036 	ldrb.w	r0, [r0, #54]	; 0x36
 8012490:	4403      	add	r3, r0
 8012492:	4021      	ands	r1, r4
 8012494:	3306      	adds	r3, #6
 8012496:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	#endif

	GPI_TRACE_RETURN(size);
 801249a:	687b      	ldr	r3, [r7, #4]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3734      	adds	r7, #52	; 0x34
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd90      	pop	{r4, r7, pc}
 80124a4:	20001430 	.word	0x20001430
 80124a8:	200014f0 	.word	0x200014f0

080124ac <mixer_arm>:

//**************************************************************************************************

void mixer_arm(Mixer_Start_Mode mode)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	71fb      	strb	r3, [r7, #7]
	GPI_TRACE_FUNCTION();
 80124b6:	bf00      	nop
	if (chirp_config.primitive != FLOODING)
 80124b8:	4b56      	ldr	r3, [pc, #344]	; (8012614 <mixer_arm+0x168>)
 80124ba:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80124be:	2b01      	cmp	r3, #1
 80124c0:	f000 80a5 	beq.w	801260e <mixer_arm+0x162>
	{
	// mark an empty row (used by rx processing)
	mx.empty_row = NULL;
 80124c4:	4b54      	ldr	r3, [pc, #336]	; (8012618 <mixer_arm+0x16c>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
	if (mx.rank < chirp_config.mx_generation_size)
 80124cc:	4b52      	ldr	r3, [pc, #328]	; (8012618 <mixer_arm+0x16c>)
 80124ce:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80124d2:	4b50      	ldr	r3, [pc, #320]	; (8012614 <mixer_arm+0x168>)
 80124d4:	885b      	ldrh	r3, [r3, #2]
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	429a      	cmp	r2, r3
 80124da:	d226      	bcs.n	801252a <mixer_arm+0x7e>
	{
		Matrix_Row *p = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 80124dc:	4b4d      	ldr	r3, [pc, #308]	; (8012614 <mixer_arm+0x168>)
 80124de:	885b      	ldrh	r3, [r3, #2]
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	3b01      	subs	r3, #1
 80124e4:	4a4c      	ldr	r2, [pc, #304]	; (8012618 <mixer_arm+0x16c>)
 80124e6:	3316      	adds	r3, #22
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	4413      	add	r3, r2
 80124ec:	685a      	ldr	r2, [r3, #4]
 80124ee:	4b49      	ldr	r3, [pc, #292]	; (8012614 <mixer_arm+0x168>)
 80124f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	3304      	adds	r3, #4
 80124fa:	60fb      	str	r3, [r7, #12]
		while (p > 0)
 80124fc:	e012      	b.n	8012524 <mixer_arm+0x78>
		{
			p -= chirp_config.matrix_size_32;
 80124fe:	4b45      	ldr	r3, [pc, #276]	; (8012614 <mixer_arm+0x168>)
 8012500:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012502:	b29b      	uxth	r3, r3
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	425b      	negs	r3, r3
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	4413      	add	r3, r2
 801250c:	60fb      	str	r3, [r7, #12]
			if (UINT16_MAX == p->birth_slot)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012516:	4293      	cmp	r3, r2
 8012518:	d104      	bne.n	8012524 <mixer_arm+0x78>
			{
				mx.empty_row = p;
 801251a:	4a3f      	ldr	r2, [pc, #252]	; (8012618 <mixer_arm+0x16c>)
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
				break;
 8012522:	e002      	b.n	801252a <mixer_arm+0x7e>
		while (p > 0)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1e9      	bne.n	80124fe <mixer_arm+0x52>
			}
		}
	}

	// if initiator: arm TX (instead of RESYNC)
	if (mode & MX_ARM_INITIATOR)
 801252a:	79fb      	ldrb	r3, [r7, #7]
 801252c:	f003 0301 	and.w	r3, r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	d052      	beq.n	80125da <mixer_arm+0x12e>
	{
		assert_reset(NULL != mx.tx_reserve);
 8012534:	4b38      	ldr	r3, [pc, #224]	; (8012618 <mixer_arm+0x16c>)
 8012536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012538:	2b00      	cmp	r3, #0
 801253a:	d110      	bne.n	801255e <mixer_arm+0xb2>
 801253c:	4b36      	ldr	r3, [pc, #216]	; (8012618 <mixer_arm+0x16c>)
 801253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <mixer_arm+0x9c>
 8012544:	2301      	movs	r3, #1
 8012546:	e000      	b.n	801254a <mixer_arm+0x9e>
 8012548:	2300      	movs	r3, #0
 801254a:	4618      	mov	r0, r3
 801254c:	f010 f876 	bl	802263c <iprintf>
 8012550:	4b31      	ldr	r3, [pc, #196]	; (8012618 <mixer_arm+0x16c>)
 8012552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012554:	2b00      	cmp	r3, #0
 8012556:	d102      	bne.n	801255e <mixer_arm+0xb2>
 8012558:	b671      	cpsid	f
 801255a:	f7ff fb9b 	bl	8011c94 <NVIC_SystemReset>

		mx.tx_sideload = &(mx.next_own_row->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 801255e:	4b2e      	ldr	r3, [pc, #184]	; (8012618 <mixer_arm+0x16c>)
 8012560:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8012564:	4a2b      	ldr	r2, [pc, #172]	; (8012614 <mixer_arm+0x168>)
 8012566:	7e12      	ldrb	r2, [r2, #24]
 8012568:	4413      	add	r3, r2
 801256a:	3304      	adds	r3, #4
 801256c:	4a2a      	ldr	r2, [pc, #168]	; (8012618 <mixer_arm+0x16c>)
 801256e:	6453      	str	r3, [r2, #68]	; 0x44

		mx.next_own_row += chirp_config.matrix_size_32;
 8012570:	4b29      	ldr	r3, [pc, #164]	; (8012618 <mixer_arm+0x16c>)
 8012572:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8012576:	4b27      	ldr	r3, [pc, #156]	; (8012614 <mixer_arm+0x168>)
 8012578:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801257a:	b29b      	uxth	r3, r3
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	4a25      	ldr	r2, [pc, #148]	; (8012618 <mixer_arm+0x16c>)
 8012582:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 8012586:	e010      	b.n	80125aa <mixer_arm+0xfe>
		{
			if (0 == mx.next_own_row->birth_slot)
 8012588:	4b23      	ldr	r3, [pc, #140]	; (8012618 <mixer_arm+0x16c>)
 801258a:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 801258e:	881b      	ldrh	r3, [r3, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d01f      	beq.n	80125d4 <mixer_arm+0x128>
				break;

			mx.next_own_row += chirp_config.matrix_size_32;
 8012594:	4b20      	ldr	r3, [pc, #128]	; (8012618 <mixer_arm+0x16c>)
 8012596:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 801259a:	4b1e      	ldr	r3, [pc, #120]	; (8012614 <mixer_arm+0x168>)
 801259c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801259e:	b29b      	uxth	r3, r3
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	4413      	add	r3, r2
 80125a4:	4a1c      	ldr	r2, [pc, #112]	; (8012618 <mixer_arm+0x16c>)
 80125a6:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 80125aa:	4b1b      	ldr	r3, [pc, #108]	; (8012618 <mixer_arm+0x16c>)
 80125ac:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80125b0:	4b18      	ldr	r3, [pc, #96]	; (8012614 <mixer_arm+0x168>)
 80125b2:	885b      	ldrh	r3, [r3, #2]
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	3b01      	subs	r3, #1
 80125b8:	4917      	ldr	r1, [pc, #92]	; (8012618 <mixer_arm+0x16c>)
 80125ba:	3316      	adds	r3, #22
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	440b      	add	r3, r1
 80125c0:	6859      	ldr	r1, [r3, #4]
 80125c2:	4b14      	ldr	r3, [pc, #80]	; (8012614 <mixer_arm+0x168>)
 80125c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	440b      	add	r3, r1
 80125cc:	3304      	adds	r3, #4
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d3da      	bcc.n	8012588 <mixer_arm+0xdc>
 80125d2:	e000      	b.n	80125d6 <mixer_arm+0x12a>
				break;
 80125d4:	bf00      	nop
		}

		mixer_transport_arm_initiator();
 80125d6:	f7ff f8dd 	bl	8011794 <mixer_transport_arm_initiator>
	}

	// launch threads
	// NOTE: this gives all threads the opportunity to init thread-local data
	(void) PT_SCHEDULE(mixer_maintenance());
 80125da:	bf00      	nop
 80125dc:	f006 f992 	bl	8018904 <mixer_maintenance>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b01      	cmp	r3, #1
	(void) PT_SCHEDULE(mixer_update_slot());
 80125e4:	bf00      	nop
 80125e6:	f004 f9b9 	bl	801695c <mixer_update_slot>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b01      	cmp	r3, #1
	(void) PT_SCHEDULE(mixer_process_rx_data());
 80125ee:	bf00      	nop
 80125f0:	f005 f80c 	bl	801760c <mixer_process_rx_data>
 80125f4:	4603      	mov	r3, r0
 80125f6:	2b01      	cmp	r3, #1

	// if sync round: don't update deadline before first packet reception
	// ATTENTION: the way of doing that here is a bit crude. It is associated to the
	// maintenance thread; look there for details.
	if (mode & MX_ARM_INFINITE_SCAN)
 80125f8:	79fb      	ldrb	r3, [r7, #7]
 80125fa:	f003 0302 	and.w	r3, r3, #2
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d004      	beq.n	801260c <mixer_arm+0x160>
		mx.round_deadline_update_slot = 0;
 8012602:	4b05      	ldr	r3, [pc, #20]	; (8012618 <mixer_arm+0x16c>)
 8012604:	2200      	movs	r2, #0
 8012606:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	GPI_TRACE_RETURN();
 801260a:	bf00      	nop
 801260c:	bf00      	nop
	}
}
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	20001430 	.word	0x20001430
 8012618:	200014f0 	.word	0x200014f0

0801261c <mixer_start>:

//**************************************************************************************************

Gpi_Fast_Tick_Extended mixer_start()
{
 801261c:	b590      	push	{r4, r7, lr}
 801261e:	b089      	sub	sp, #36	; 0x24
 8012620:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION_FAST();
 8012622:	bf00      	nop

	mixer_transport_start();
 8012624:	f7ff f8d4 	bl	80117d0 <mixer_transport_start>

	unsigned int event_mask = BV(SLOT_UPDATE) | BV(TRIGGER_TICK);
 8012628:	230a      	movs	r3, #10
 801262a:	61fb      	str	r3, [r7, #28]

	while (event_mask)
 801262c:	e0bd      	b.n	80127aa <mixer_start+0x18e>
	{
		// isolate highest priority pending event
		unsigned int event = mx.events & event_mask;
 801262e:	4b9a      	ldr	r3, [pc, #616]	; (8012898 <mixer_start+0x27c>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	69fa      	ldr	r2, [r7, #28]
 8012634:	4013      	ands	r3, r2
 8012636:	60fb      	str	r3, [r7, #12]
		event &= -event;	// mask LSB
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	425b      	negs	r3, r3
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	4013      	ands	r3, r2
 8012640:	60fb      	str	r3, [r7, #12]

		switch (event)
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2b02      	cmp	r3, #2
 8012646:	d00a      	beq.n	801265e <mixer_start+0x42>
 8012648:	2b08      	cmp	r3, #8
 801264a:	d017      	beq.n	801267c <mixer_start+0x60>
					event_mask = BV(STOPPED);
				break;

			default:
			{
				GPI_TRACE_FLUSH();
 801264c:	bf00      	nop

				if (PT_WAITING == PT_SCHEDULE_STATE(mixer_process_rx_data()))
 801264e:	bf00      	nop
 8012650:	f004 ffdc 	bl	801760c <mixer_process_rx_data>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	f040 80a7 	bne.w	80127aa <mixer_start+0x18e>
 801265c:	e01d      	b.n	801269a <mixer_start+0x7e>
				if (!PT_SCHEDULE(mixer_update_slot()))
 801265e:	bf00      	nop
 8012660:	f004 f97c 	bl	801695c <mixer_update_slot>
 8012664:	4603      	mov	r3, r0
 8012666:	2b01      	cmp	r3, #1
 8012668:	bf94      	ite	ls
 801266a:	2301      	movls	r3, #1
 801266c:	2300      	movhi	r3, #0
 801266e:	b2db      	uxtb	r3, r3
 8012670:	2b00      	cmp	r3, #0
 8012672:	f040 809a 	bne.w	80127aa <mixer_start+0x18e>
					event_mask = BV(STOPPED);
 8012676:	2301      	movs	r3, #1
 8012678:	61fb      	str	r3, [r7, #28]
				break;
 801267a:	e096      	b.n	80127aa <mixer_start+0x18e>
				if (!PT_SCHEDULE(mixer_maintenance()))
 801267c:	bf00      	nop
 801267e:	f006 f941 	bl	8018904 <mixer_maintenance>
 8012682:	4603      	mov	r3, r0
 8012684:	2b01      	cmp	r3, #1
 8012686:	bf94      	ite	ls
 8012688:	2301      	movls	r3, #1
 801268a:	2300      	movhi	r3, #0
 801268c:	b2db      	uxtb	r3, r3
 801268e:	2b00      	cmp	r3, #0
 8012690:	f040 808b 	bne.w	80127aa <mixer_start+0x18e>
					event_mask = BV(STOPPED);
 8012694:	2301      	movs	r3, #1
 8012696:	61fb      	str	r3, [r7, #28]
				break;
 8012698:	e087      	b.n	80127aa <mixer_start+0x18e>
				{
					// after graceful stop has been performed
					if (BV(STOPPED) == event)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d110      	bne.n	80126c2 <mixer_start+0xa6>
					{
						GPI_TRACE_MSG(TRACE_INFO, "interrupts stopped");
 80126a0:	bf00      	nop
						// if deadline reached: set mx.slot_number to last slot
						// NOTE: Since the deadline has been reached, we know that we are there.
						// If we wouldn't update mx.slot_number then it would be possible that
						// some of the stat_counters (slot_off...) get wrong values if node was
						// in RESYNC when stopping.
						if (mx.events & BV(DEADLINE_REACHED))
 80126a2:	4b7d      	ldr	r3, [pc, #500]	; (8012898 <mixer_start+0x27c>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f003 0320 	and.w	r3, r3, #32
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d006      	beq.n	80126bc <mixer_start+0xa0>
						{
							mx.slot_number = chirp_config.mx_round_length;
 80126ae:	4b7b      	ldr	r3, [pc, #492]	; (801289c <mixer_start+0x280>)
 80126b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	4b78      	ldr	r3, [pc, #480]	; (8012898 <mixer_start+0x27c>)
 80126b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						}

						// exit loop
						event_mask = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	61fb      	str	r3, [r7, #28]
						break;
 80126c0:	e073      	b.n	80127aa <mixer_start+0x18e>
  __ASM volatile ("cpsid i" : : : "memory");
 80126c2:	b672      	cpsid	i
                    }

					// enter low-power mode
					gpi_int_disable();
					if (!(mx.events & event_mask))
 80126c4:	4b74      	ldr	r3, [pc, #464]	; (8012898 <mixer_start+0x27c>)
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	4013      	ands	r3, r2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d16b      	bne.n	80127a8 <mixer_start+0x18c>
							ASSERT_CT(IS_POWER_OF_2(FAST_HYBRID_RATIO), FAST_HYBRID_ratio_must_be_power_of_2);

							#if (GPI_TRACE_MODE & GPI_TRACE_MODE_TRACE)
								const int USE_NATIVE = 0;
							#else
								const int USE_NATIVE =
 80126d0:	2301      	movs	r3, #1
 80126d2:	60bb      	str	r3, [r7, #8]
									(Gpi_Fast_Tick_Native)GPI_TICK_FAST_MAX);
							#endif

							Gpi_Hybrid_Tick	time;

							if (USE_NATIVE)
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d004      	beq.n	80126e4 <mixer_start+0xc8>
 80126da:	4b71      	ldr	r3, [pc, #452]	; (80128a0 <mixer_start+0x284>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
								time = gpi_tick_fast_native();
 80126e0:	61bb      	str	r3, [r7, #24]
 80126e2:	e002      	b.n	80126ea <mixer_start+0xce>
							else time = gpi_tick_hybrid();
 80126e4:	f7f9 fa32 	bl	800bb4c <gpi_tick_hybrid>
 80126e8:	61b8      	str	r0, [r7, #24]
						#endif

						#if ENERGEST_CONF_ON
							static unsigned long irq_energest = 0;
							/* Re-enable interrupts and go to sleep atomically. */
							ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80126ea:	4b6e      	ldr	r3, [pc, #440]	; (80128a4 <mixer_start+0x288>)
 80126ec:	79db      	ldrb	r3, [r3, #7]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00d      	beq.n	801270e <mixer_start+0xf2>
 80126f2:	4b6b      	ldr	r3, [pc, #428]	; (80128a0 <mixer_start+0x284>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126f8:	4b6b      	ldr	r3, [pc, #428]	; (80128a8 <mixer_start+0x28c>)
 80126fa:	69db      	ldr	r3, [r3, #28]
 80126fc:	1ad2      	subs	r2, r2, r3
 80126fe:	4b6b      	ldr	r3, [pc, #428]	; (80128ac <mixer_start+0x290>)
 8012700:	69db      	ldr	r3, [r3, #28]
 8012702:	4413      	add	r3, r2
 8012704:	4a69      	ldr	r2, [pc, #420]	; (80128ac <mixer_start+0x290>)
 8012706:	61d3      	str	r3, [r2, #28]
 8012708:	4b66      	ldr	r3, [pc, #408]	; (80128a4 <mixer_start+0x288>)
 801270a:	2200      	movs	r2, #0
 801270c:	71da      	strb	r2, [r3, #7]
 801270e:	4b64      	ldr	r3, [pc, #400]	; (80128a0 <mixer_start+0x284>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
							ENERGEST_ON(ENERGEST_TYPE_LPM);
 8012714:	4a64      	ldr	r2, [pc, #400]	; (80128a8 <mixer_start+0x28c>)
 8012716:	6213      	str	r3, [r2, #32]
 8012718:	4b62      	ldr	r3, [pc, #392]	; (80128a4 <mixer_start+0x288>)
 801271a:	2201      	movs	r2, #1
 801271c:	721a      	strb	r2, [r3, #8]
							/* We only want to measure the processing done in IRQs when we
							are asleep, so we discard the processing time done when we
							were awake. */
							energest_type_set(ENERGEST_TYPE_IRQ, irq_energest);
 801271e:	4b64      	ldr	r3, [pc, #400]	; (80128b0 <mixer_start+0x294>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4619      	mov	r1, r3
 8012724:	2000      	movs	r0, #0
 8012726:	f7fb fdbb 	bl	800e2a0 <energest_type_set>
						#endif

						// enter sleep mode
						// NOTE: reenables interrupts (they serve as wake-up events)
						gpi_sleep();
 801272a:	f7fb fd33 	bl	800e194 <gpi_sleep>
						#if MX_VERBOSE_STATISTICS
							// ATTENTION: time up to here includes execution time of one or more ISRs.
							// To support low-power time measurements, every (relevant) ISR stores
							// the wake-up timestamp on ISR entry (in case it is a wake-up event).
							// This is what we use here.
							if (USE_NATIVE)
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d006      	beq.n	8012742 <mixer_start+0x126>
								time = (Gpi_Fast_Tick_Native)(mx.wake_up_timestamp - time) / FAST_HYBRID_RATIO;
 8012734:	4b58      	ldr	r3, [pc, #352]	; (8012898 <mixer_start+0x27c>)
 8012736:	f8d3 28a8 	ldr.w	r2, [r3, #2216]	; 0x8a8
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	61bb      	str	r3, [r7, #24]
 8012740:	e009      	b.n	8012756 <mixer_start+0x13a>
							else time = gpi_tick_fast_to_hybrid(mx.wake_up_timestamp) - time;
 8012742:	4b55      	ldr	r3, [pc, #340]	; (8012898 <mixer_start+0x27c>)
 8012744:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	; 0x8a8
 8012748:	4618      	mov	r0, r3
 801274a:	f7f9 fa57 	bl	800bbfc <gpi_tick_fast_to_hybrid>
 801274e:	4602      	mov	r2, r0
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	61bb      	str	r3, [r7, #24]
							mx.stat_counter.low_power_time += time;
 8012756:	4b50      	ldr	r3, [pc, #320]	; (8012898 <mixer_start+0x27c>)
 8012758:	f8d3 28a4 	ldr.w	r2, [r3, #2212]	; 0x8a4
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	4413      	add	r3, r2
 8012760:	4a4d      	ldr	r2, [pc, #308]	; (8012898 <mixer_start+0x27c>)
 8012762:	f8c2 38a4 	str.w	r3, [r2, #2212]	; 0x8a4
						#endif

						#if ENERGEST_CONF_ON
							irq_energest = energest_type_time(ENERGEST_TYPE_IRQ);
 8012766:	2000      	movs	r0, #0
 8012768:	f7fb fd66 	bl	800e238 <energest_type_time>
 801276c:	4602      	mov	r2, r0
 801276e:	4b50      	ldr	r3, [pc, #320]	; (80128b0 <mixer_start+0x294>)
 8012770:	601a      	str	r2, [r3, #0]
							ENERGEST_OFF(ENERGEST_TYPE_LPM);
 8012772:	4b4c      	ldr	r3, [pc, #304]	; (80128a4 <mixer_start+0x288>)
 8012774:	7a1b      	ldrb	r3, [r3, #8]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00d      	beq.n	8012796 <mixer_start+0x17a>
 801277a:	4b49      	ldr	r3, [pc, #292]	; (80128a0 <mixer_start+0x284>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012780:	4b49      	ldr	r3, [pc, #292]	; (80128a8 <mixer_start+0x28c>)
 8012782:	6a1b      	ldr	r3, [r3, #32]
 8012784:	1ad2      	subs	r2, r2, r3
 8012786:	4b49      	ldr	r3, [pc, #292]	; (80128ac <mixer_start+0x290>)
 8012788:	6a1b      	ldr	r3, [r3, #32]
 801278a:	4413      	add	r3, r2
 801278c:	4a47      	ldr	r2, [pc, #284]	; (80128ac <mixer_start+0x290>)
 801278e:	6213      	str	r3, [r2, #32]
 8012790:	4b44      	ldr	r3, [pc, #272]	; (80128a4 <mixer_start+0x288>)
 8012792:	2200      	movs	r2, #0
 8012794:	721a      	strb	r2, [r3, #8]
 8012796:	4b42      	ldr	r3, [pc, #264]	; (80128a0 <mixer_start+0x284>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
							ENERGEST_ON(ENERGEST_TYPE_CPU);
 801279c:	4a42      	ldr	r2, [pc, #264]	; (80128a8 <mixer_start+0x28c>)
 801279e:	61d3      	str	r3, [r2, #28]
 80127a0:	4b40      	ldr	r3, [pc, #256]	; (80128a4 <mixer_start+0x288>)
 80127a2:	2201      	movs	r2, #1
 80127a4:	71da      	strb	r2, [r3, #7]
 80127a6:	e000      	b.n	80127aa <mixer_start+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 80127a8:	b662      	cpsie	i
	while (event_mask)
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f47f af3e 	bne.w	801262e <mixer_start+0x12>
			}
		}
	}

	// try to solve (if not done already)
	if (mx.rank < chirp_config.mx_generation_size)
 80127b2:	4b39      	ldr	r3, [pc, #228]	; (8012898 <mixer_start+0x27c>)
 80127b4:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80127b8:	4b38      	ldr	r3, [pc, #224]	; (801289c <mixer_start+0x280>)
 80127ba:	885b      	ldrh	r3, [r3, #2]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	429a      	cmp	r2, r3
 80127c0:	d211      	bcs.n	80127e6 <mixer_start+0x1ca>
	{
		Pt_Context *pt = &pt_data[0];
 80127c2:	4b3c      	ldr	r3, [pc, #240]	; (80128b4 <mixer_start+0x298>)
 80127c4:	617b      	str	r3, [r7, #20]
		PT_INIT(pt);
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2200      	movs	r2, #0
 80127ca:	801a      	strh	r2, [r3, #0]
		while (PT_SCHEDULE(mixer_decode(pt)));
 80127cc:	bf00      	nop
 80127ce:	bf00      	nop
 80127d0:	6978      	ldr	r0, [r7, #20]
 80127d2:	f005 fd4b 	bl	801826c <mixer_decode>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b01      	cmp	r3, #1
 80127da:	bf94      	ite	ls
 80127dc:	2301      	movls	r3, #1
 80127de:	2300      	movhi	r3, #0
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1f3      	bne.n	80127ce <mixer_start+0x1b2>

	// #endif

	#if ENERGEST_CONF_ON

	unsigned long avg_energy1 = ((((unsigned long)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN) + energest_type_time(ENERGEST_TYPE_TRANSMIT)))) / (unsigned long)(chirp_config.mx_period_time_s));
 80127e6:	200f      	movs	r0, #15
 80127e8:	f7fb fd26 	bl	800e238 <energest_type_time>
 80127ec:	4604      	mov	r4, r0
 80127ee:	200e      	movs	r0, #14
 80127f0:	f7fb fd22 	bl	800e238 <energest_type_time>
 80127f4:	4603      	mov	r3, r0
 80127f6:	4423      	add	r3, r4
 80127f8:	607b      	str	r3, [r7, #4]
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	091b      	lsrs	r3, r3, #4
 80127fe:	4a27      	ldr	r2, [pc, #156]	; (801289c <mixer_start+0x280>)
 8012800:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8012804:	b292      	uxth	r2, r2
 8012806:	fbb3 f3f2 	udiv	r3, r3, r2
 801280a:	613b      	str	r3, [r7, #16]

	printf("E 1:%lu.%03lu \n", avg_energy1 / 1000, avg_energy1 % 1000);
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	4a2a      	ldr	r2, [pc, #168]	; (80128b8 <mixer_start+0x29c>)
 8012810:	fba2 2303 	umull	r2, r3, r2, r3
 8012814:	0998      	lsrs	r0, r3, #6
 8012816:	693a      	ldr	r2, [r7, #16]
 8012818:	4b27      	ldr	r3, [pc, #156]	; (80128b8 <mixer_start+0x29c>)
 801281a:	fba3 1302 	umull	r1, r3, r3, r2
 801281e:	099b      	lsrs	r3, r3, #6
 8012820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012824:	fb01 f303 	mul.w	r3, r1, r3
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	461a      	mov	r2, r3
 801282c:	4601      	mov	r1, r0
 801282e:	4823      	ldr	r0, [pc, #140]	; (80128bc <mixer_start+0x2a0>)
 8012830:	f00f ff04 	bl	802263c <iprintf>

	#endif

	free(mx.rx_queue[0]);
 8012834:	4b18      	ldr	r3, [pc, #96]	; (8012898 <mixer_start+0x27c>)
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	4618      	mov	r0, r3
 801283a:	f00f f8df 	bl	80219fc <free>
	if (chirp_config.primitive != FLOODING)
 801283e:	4b17      	ldr	r3, [pc, #92]	; (801289c <mixer_start+0x280>)
 8012840:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012844:	2b01      	cmp	r3, #1
 8012846:	d009      	beq.n	801285c <mixer_start+0x240>
	{
		#if INFO_VECTOR_QUEUE
		free(mx.code_queue[0]);
 8012848:	4b13      	ldr	r3, [pc, #76]	; (8012898 <mixer_start+0x27c>)
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	4618      	mov	r0, r3
 801284e:	f00f f8d5 	bl	80219fc <free>
		free(mx.info_queue[0]);
 8012852:	4b11      	ldr	r3, [pc, #68]	; (8012898 <mixer_start+0x27c>)
 8012854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012856:	4618      	mov	r0, r3
 8012858:	f00f f8d0 	bl	80219fc <free>
		#endif
	}
	free(mx.tx_packet);
 801285c:	4b0e      	ldr	r3, [pc, #56]	; (8012898 <mixer_start+0x27c>)
 801285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012860:	4618      	mov	r0, r3
 8012862:	f00f f8cb 	bl	80219fc <free>
	free(mx.history[0]);
 8012866:	4b0c      	ldr	r3, [pc, #48]	; (8012898 <mixer_start+0x27c>)
 8012868:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 801286c:	4618      	mov	r0, r3
 801286e:	f00f f8c5 	bl	80219fc <free>
	#if MX_SMART_SHUTDOWN
		free(mx.full_rank_map);
	#endif
	if (chirp_config.primitive == FLOODING)
 8012872:	4b0a      	ldr	r3, [pc, #40]	; (801289c <mixer_start+0x280>)
 8012874:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012878:	2b01      	cmp	r3, #1
 801287a:	d105      	bne.n	8012888 <mixer_start+0x26c>
		free(mx.request);
 801287c:	4b06      	ldr	r3, [pc, #24]	; (8012898 <mixer_start+0x27c>)
 801287e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8012882:	4618      	mov	r0, r3
 8012884:	f00f f8ba 	bl	80219fc <free>

	GPI_TRACE_RETURN(mx.round_deadline);
 8012888:	4b03      	ldr	r3, [pc, #12]	; (8012898 <mixer_start+0x27c>)
 801288a:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
}
 801288e:	4618      	mov	r0, r3
 8012890:	4621      	mov	r1, r4
 8012892:	3724      	adds	r7, #36	; 0x24
 8012894:	46bd      	mov	sp, r7
 8012896:	bd90      	pop	{r4, r7, pc}
 8012898:	200014f0 	.word	0x200014f0
 801289c:	20001430 	.word	0x20001430
 80128a0:	200012c8 	.word	0x200012c8
 80128a4:	2000112c 	.word	0x2000112c
 80128a8:	20001308 	.word	0x20001308
 80128ac:	20000f10 	.word	0x20000f10
 80128b0:	20000460 	.word	0x20000460
 80128b4:	20001e28 	.word	0x20001e28
 80128b8:	10624dd3 	.word	0x10624dd3
 80128bc:	0802589c 	.word	0x0802589c

080128c0 <mixer_read>:

//**************************************************************************************************

void* mixer_read(unsigned int i)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
	GPI_TRACE_FUNCTION();
 80128c8:	bf00      	nop

	assert_reset(i < chirp_config.mx_generation_size);
 80128ca:	4b4b      	ldr	r3, [pc, #300]	; (80129f8 <mixer_read+0x138>)
 80128cc:	885b      	ldrh	r3, [r3, #2]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d316      	bcc.n	8012906 <mixer_read+0x46>
 80128d8:	4b47      	ldr	r3, [pc, #284]	; (80129f8 <mixer_read+0x138>)
 80128da:	885b      	ldrh	r3, [r3, #2]
 80128dc:	b29b      	uxth	r3, r3
 80128de:	461a      	mov	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d201      	bcs.n	80128ea <mixer_read+0x2a>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e000      	b.n	80128ec <mixer_read+0x2c>
 80128ea:	2300      	movs	r3, #0
 80128ec:	4618      	mov	r0, r3
 80128ee:	f00f fea5 	bl	802263c <iprintf>
 80128f2:	4b41      	ldr	r3, [pc, #260]	; (80129f8 <mixer_read+0x138>)
 80128f4:	885b      	ldrh	r3, [r3, #2]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	461a      	mov	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4293      	cmp	r3, r2
 80128fe:	d302      	bcc.n	8012906 <mixer_read+0x46>
  __ASM volatile ("cpsid f" : : : "memory");
 8012900:	b671      	cpsid	f
 8012902:	f7ff f9c7 	bl	8011c94 <NVIC_SystemReset>

	// in case NDEBUG is set
	if (i >= chirp_config.mx_generation_size)
 8012906:	4b3c      	ldr	r3, [pc, #240]	; (80129f8 <mixer_read+0x138>)
 8012908:	885b      	ldrh	r3, [r3, #2]
 801290a:	b29b      	uxth	r3, r3
 801290c:	461a      	mov	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4293      	cmp	r3, r2
 8012912:	d301      	bcc.n	8012918 <mixer_read+0x58>
		GPI_TRACE_RETURN((void*)NULL);
 8012914:	2300      	movs	r3, #0
 8012916:	e06b      	b.n	80129f0 <mixer_read+0x130>

	if (UINT16_MAX == mx.matrix[i]->birth_slot)
 8012918:	4a38      	ldr	r2, [pc, #224]	; (80129fc <mixer_read+0x13c>)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	3316      	adds	r3, #22
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	4413      	add	r3, r2
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	881b      	ldrh	r3, [r3, #0]
 8012926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801292a:	4293      	cmp	r3, r2
 801292c:	d101      	bne.n	8012932 <mixer_read+0x72>
		GPI_TRACE_RETURN((void*)NULL);
 801292e:	2300      	movs	r3, #0
 8012930:	e05e      	b.n	80129f0 <mixer_read+0x130>

	uint8_t m = 1 << (i % 8);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f003 0307 	and.w	r3, r3, #7
 8012938:	2201      	movs	r2, #1
 801293a:	fa02 f303 	lsl.w	r3, r2, r3
 801293e:	73fb      	strb	r3, [r7, #15]

	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] ^= m;
 8012940:	4a2e      	ldr	r2, [pc, #184]	; (80129fc <mixer_read+0x13c>)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3316      	adds	r3, #22
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	6859      	ldr	r1, [r3, #4]
 801294c:	4b2a      	ldr	r3, [pc, #168]	; (80129f8 <mixer_read+0x138>)
 801294e:	7e1b      	ldrb	r3, [r3, #24]
 8012950:	4618      	mov	r0, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	08da      	lsrs	r2, r3, #3
 8012956:	1813      	adds	r3, r2, r0
 8012958:	440b      	add	r3, r1
 801295a:	7918      	ldrb	r0, [r3, #4]
 801295c:	4927      	ldr	r1, [pc, #156]	; (80129fc <mixer_read+0x13c>)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3316      	adds	r3, #22
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	440b      	add	r3, r1
 8012966:	6859      	ldr	r1, [r3, #4]
 8012968:	4b23      	ldr	r3, [pc, #140]	; (80129f8 <mixer_read+0x138>)
 801296a:	7e1b      	ldrb	r3, [r3, #24]
 801296c:	4413      	add	r3, r2
 801296e:	7bfa      	ldrb	r2, [r7, #15]
 8012970:	4042      	eors	r2, r0
 8012972:	b2d2      	uxtb	r2, r2
 8012974:	440b      	add	r3, r1
 8012976:	711a      	strb	r2, [r3, #4]
	int_fast16_t k = mx_get_leading_index(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 8012978:	4a20      	ldr	r2, [pc, #128]	; (80129fc <mixer_read+0x13c>)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	3316      	adds	r3, #22
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	4413      	add	r3, r2
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	4a1c      	ldr	r2, [pc, #112]	; (80129f8 <mixer_read+0x138>)
 8012986:	7e12      	ldrb	r2, [r2, #24]
 8012988:	4413      	add	r3, r2
 801298a:	3304      	adds	r3, #4
 801298c:	4618      	mov	r0, r3
 801298e:	f7fb fcff 	bl	800e390 <mx_get_leading_index>
 8012992:	60b8      	str	r0, [r7, #8]
	mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + i / 8] ^= m;
 8012994:	4a19      	ldr	r2, [pc, #100]	; (80129fc <mixer_read+0x13c>)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3316      	adds	r3, #22
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	6859      	ldr	r1, [r3, #4]
 80129a0:	4b15      	ldr	r3, [pc, #84]	; (80129f8 <mixer_read+0x138>)
 80129a2:	7e1b      	ldrb	r3, [r3, #24]
 80129a4:	4618      	mov	r0, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	08da      	lsrs	r2, r3, #3
 80129aa:	1813      	adds	r3, r2, r0
 80129ac:	440b      	add	r3, r1
 80129ae:	7918      	ldrb	r0, [r3, #4]
 80129b0:	4912      	ldr	r1, [pc, #72]	; (80129fc <mixer_read+0x13c>)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3316      	adds	r3, #22
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	440b      	add	r3, r1
 80129ba:	6859      	ldr	r1, [r3, #4]
 80129bc:	4b0e      	ldr	r3, [pc, #56]	; (80129f8 <mixer_read+0x138>)
 80129be:	7e1b      	ldrb	r3, [r3, #24]
 80129c0:	4413      	add	r3, r2
 80129c2:	7bfa      	ldrb	r2, [r7, #15]
 80129c4:	4042      	eors	r2, r0
 80129c6:	b2d2      	uxtb	r2, r2
 80129c8:	440b      	add	r3, r1
 80129ca:	711a      	strb	r2, [r3, #4]

	if (k >= 0)
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	db01      	blt.n	80129d6 <mixer_read+0x116>
		GPI_TRACE_RETURN((void*)NULL);
 80129d2:	2300      	movs	r3, #0
 80129d4:	e00c      	b.n	80129f0 <mixer_read+0x130>

	unwrap_row(i);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f7fb fda4 	bl	800e524 <unwrap_row>

	GPI_TRACE_RETURN(&(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_payload_8.pos]));
 80129dc:	4a07      	ldr	r2, [pc, #28]	; (80129fc <mixer_read+0x13c>)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	3316      	adds	r3, #22
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	4413      	add	r3, r2
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	4a03      	ldr	r2, [pc, #12]	; (80129f8 <mixer_read+0x138>)
 80129ea:	7e92      	ldrb	r2, [r2, #26]
 80129ec:	4413      	add	r3, r2
 80129ee:	3304      	adds	r3, #4
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3710      	adds	r7, #16
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	20001430 	.word	0x20001430
 80129fc:	200014f0 	.word	0x200014f0

08012a00 <NVIC_SystemReset>:
{
 8012a00:	b480      	push	{r7}
 8012a02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012a04:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012a08:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <NVIC_SystemReset+0x20>)
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012a10:	4903      	ldr	r1, [pc, #12]	; (8012a20 <NVIC_SystemReset+0x20>)
 8012a12:	4b04      	ldr	r3, [pc, #16]	; (8012a24 <NVIC_SystemReset+0x24>)
 8012a14:	4313      	orrs	r3, r2
 8012a16:	60cb      	str	r3, [r1, #12]
 8012a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8012a1c:	bf00      	nop
    __NOP();
 8012a1e:	e7fd      	b.n	8012a1c <NVIC_SystemReset+0x1c>
 8012a20:	e000ed00 	.word	0xe000ed00
 8012a24:	05fa0004 	.word	0x05fa0004

08012a28 <PRINT_PACKET>:
#endif

//**************************************************************************************************
//***** Local Functions ****************************************************************************
void PRINT_PACKET(uint8_t *p, uint8_t len, uint8_t Packet)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	460b      	mov	r3, r1
 8012a32:	70fb      	strb	r3, [r7, #3]
 8012a34:	4613      	mov	r3, r2
 8012a36:	70bb      	strb	r3, [r7, #2]
    uint8_t i;
    if (Packet)
 8012a38:	78bb      	ldrb	r3, [r7, #2]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <PRINT_PACKET+0x1e>
        PRINTF("r ");
 8012a3e:	4810      	ldr	r0, [pc, #64]	; (8012a80 <PRINT_PACKET+0x58>)
 8012a40:	f00f fdfc 	bl	802263c <iprintf>
 8012a44:	e002      	b.n	8012a4c <PRINT_PACKET+0x24>
    else
        PRINTF("f ");
 8012a46:	480f      	ldr	r0, [pc, #60]	; (8012a84 <PRINT_PACKET+0x5c>)
 8012a48:	f00f fdf8 	bl	802263c <iprintf>
    for (i = 0; i < len; i++)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	73fb      	strb	r3, [r7, #15]
 8012a50:	e00a      	b.n	8012a68 <PRINT_PACKET+0x40>
        PRINTF("%02x ", ((uint8_t *)p)[i]);
 8012a52:	7bfb      	ldrb	r3, [r7, #15]
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	4413      	add	r3, r2
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	480a      	ldr	r0, [pc, #40]	; (8012a88 <PRINT_PACKET+0x60>)
 8012a5e:	f00f fded 	bl	802263c <iprintf>
    for (i = 0; i < len; i++)
 8012a62:	7bfb      	ldrb	r3, [r7, #15]
 8012a64:	3301      	adds	r3, #1
 8012a66:	73fb      	strb	r3, [r7, #15]
 8012a68:	7bfa      	ldrb	r2, [r7, #15]
 8012a6a:	78fb      	ldrb	r3, [r7, #3]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d3f0      	bcc.n	8012a52 <PRINT_PACKET+0x2a>
    PRINTF("\n");
 8012a70:	200a      	movs	r0, #10
 8012a72:	f00f fdfb 	bl	802266c <putchar>
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	080258ac 	.word	0x080258ac
 8012a84:	080258b0 	.word	0x080258b0
 8012a88:	080258b4 	.word	0x080258b4

08012a8c <clear_data>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void clear_data()
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
    memset(data, 0, sizeof(data));
 8012a90:	2208      	movs	r2, #8
 8012a92:	2100      	movs	r1, #0
 8012a94:	4802      	ldr	r0, [pc, #8]	; (8012aa0 <clear_data+0x14>)
 8012a96:	f00e ffc4 	bl	8021a22 <memset>
}
 8012a9a:	bf00      	nop
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	20000464 	.word	0x20000464

08012aa4 <uart_read_data>:

//**************************************************************************************************

void uart_read_data(uint8_t uart_isr_flag, uint8_t buffer_len)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4603      	mov	r3, r0
 8012aac:	460a      	mov	r2, r1
 8012aae:	71fb      	strb	r3, [r7, #7]
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	71bb      	strb	r3, [r7, #6]
    if (!uart_isr_flag)
 8012ab4:	79fb      	ldrb	r3, [r7, #7]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d11f      	bne.n	8012afa <uart_read_data+0x56>
    {
        /* executed to open uart receive interrupt */
        __HAL_UART_DISABLE(&huart2);
 8012aba:	4b17      	ldr	r3, [pc, #92]	; (8012b18 <uart_read_data+0x74>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	4b15      	ldr	r3, [pc, #84]	; (8012b18 <uart_read_data+0x74>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	f022 0201 	bic.w	r2, r2, #1
 8012ac8:	601a      	str	r2, [r3, #0]
        __HAL_UART_ENABLE(&huart2);
 8012aca:	4b13      	ldr	r3, [pc, #76]	; (8012b18 <uart_read_data+0x74>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	4b11      	ldr	r3, [pc, #68]	; (8012b18 <uart_read_data+0x74>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f042 0201 	orr.w	r2, r2, #1
 8012ad8:	601a      	str	r2, [r3, #0]
        memset(&uartRxBuffer, 0, sizeof(uartRxBuffer));
 8012ada:	2280      	movs	r2, #128	; 0x80
 8012adc:	2100      	movs	r1, #0
 8012ade:	480f      	ldr	r0, [pc, #60]	; (8012b1c <uart_read_data+0x78>)
 8012ae0:	f00e ff9f 	bl	8021a22 <memset>
        HAL_UART_Receive_IT(&huart2, (uint8_t*)uartRxBuffer, buffer_len);
 8012ae4:	79bb      	ldrb	r3, [r7, #6]
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	461a      	mov	r2, r3
 8012aea:	490c      	ldr	r1, [pc, #48]	; (8012b1c <uart_read_data+0x78>)
 8012aec:	480a      	ldr	r0, [pc, #40]	; (8012b18 <uart_read_data+0x74>)
 8012aee:	f7f6 f851 	bl	8008b94 <HAL_UART_Receive_IT>
        uart_read_done = 0;
 8012af2:	4b0b      	ldr	r3, [pc, #44]	; (8012b20 <uart_read_data+0x7c>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	701a      	strb	r2, [r3, #0]
    {
        /* executed from uart interrupt */
        uart_read_done = 1;
        __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
    }
}
 8012af8:	e00a      	b.n	8012b10 <uart_read_data+0x6c>
        uart_read_done = 1;
 8012afa:	4b09      	ldr	r3, [pc, #36]	; (8012b20 <uart_read_data+0x7c>)
 8012afc:	2201      	movs	r2, #1
 8012afe:	701a      	strb	r2, [r3, #0]
        __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8012b00:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <uart_read_data+0x74>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	4b04      	ldr	r3, [pc, #16]	; (8012b18 <uart_read_data+0x74>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f022 0220 	bic.w	r2, r2, #32
 8012b0e:	601a      	str	r2, [r3, #0]
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	2000134c 	.word	0x2000134c
 8012b1c:	20001da4 	.word	0x20001da4
 8012b20:	200022d8 	.word	0x200022d8

08012b24 <uart_read_command>:

//**************************************************************************************************

void uart_read_command(uint8_t *p, uint8_t rxbuffer_len)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	70fb      	strb	r3, [r7, #3]
    memcpy((uint8_t *)p, (uint8_t *)uartRxBuffer, rxbuffer_len);
 8012b30:	78fb      	ldrb	r3, [r7, #3]
 8012b32:	461a      	mov	r2, r3
 8012b34:	4903      	ldr	r1, [pc, #12]	; (8012b44 <uart_read_command+0x20>)
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f00e ff68 	bl	8021a0c <memcpy>
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20001da4 	.word	0x20001da4

08012b48 <chirp_packet_config>:
 * @param mx_generation_size: number of packets (NUM_ELEMENTS(payload_distribution))
 * @param mx_payload_size: length of payload (MX_PAYLOAD_CONF_SIZE)
 * @return: None
 */
void chirp_packet_config(uint8_t mx_num_nodes, uint8_t mx_generation_size, uint8_t mx_payload_size, Disc_Primitive primitive)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	4604      	mov	r4, r0
 8012b50:	4608      	mov	r0, r1
 8012b52:	4611      	mov	r1, r2
 8012b54:	461a      	mov	r2, r3
 8012b56:	4623      	mov	r3, r4
 8012b58:	71fb      	strb	r3, [r7, #7]
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	71bb      	strb	r3, [r7, #6]
 8012b5e:	460b      	mov	r3, r1
 8012b60:	717b      	strb	r3, [r7, #5]
 8012b62:	4613      	mov	r3, r2
 8012b64:	713b      	strb	r3, [r7, #4]
    memset(&chirp_config, 0, offsetof(Chirp_Config, mx_slot_length_in_us));
 8012b66:	2238      	movs	r2, #56	; 0x38
 8012b68:	2100      	movs	r1, #0
 8012b6a:	4883      	ldr	r0, [pc, #524]	; (8012d78 <chirp_packet_config+0x230>)
 8012b6c:	f00e ff59 	bl	8021a22 <memset>
    chirp_config.primitive = primitive;
 8012b70:	4a81      	ldr	r2, [pc, #516]	; (8012d78 <chirp_packet_config+0x230>)
 8012b72:	793b      	ldrb	r3, [r7, #4]
 8012b74:	f882 30bd 	strb.w	r3, [r2, #189]	; 0xbd
    // chirp_config
    chirp_config.mx_num_nodes = mx_num_nodes;
 8012b78:	79fb      	ldrb	r3, [r7, #7]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	4b7e      	ldr	r3, [pc, #504]	; (8012d78 <chirp_packet_config+0x230>)
 8012b7e:	801a      	strh	r2, [r3, #0]
    chirp_config.mx_generation_size = mx_generation_size;
 8012b80:	79bb      	ldrb	r3, [r7, #6]
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	4b7c      	ldr	r3, [pc, #496]	; (8012d78 <chirp_packet_config+0x230>)
 8012b86:	805a      	strh	r2, [r3, #2]
    chirp_config.mx_payload_size = mx_payload_size;
 8012b88:	797b      	ldrb	r3, [r7, #5]
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	4b7a      	ldr	r3, [pc, #488]	; (8012d78 <chirp_packet_config+0x230>)
 8012b8e:	809a      	strh	r2, [r3, #4]

    chirp_config.coding_vector.pos = 0;
 8012b90:	4b79      	ldr	r3, [pc, #484]	; (8012d78 <chirp_packet_config+0x230>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	719a      	strb	r2, [r3, #6]
    chirp_config.coding_vector.len = (chirp_config.mx_generation_size + 7) / 8;
 8012b96:	4b78      	ldr	r3, [pc, #480]	; (8012d78 <chirp_packet_config+0x230>)
 8012b98:	885b      	ldrh	r3, [r3, #2]
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	3307      	adds	r3, #7
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	da00      	bge.n	8012ba4 <chirp_packet_config+0x5c>
 8012ba2:	3307      	adds	r3, #7
 8012ba4:	10db      	asrs	r3, r3, #3
 8012ba6:	b2da      	uxtb	r2, r3
 8012ba8:	4b73      	ldr	r3, [pc, #460]	; (8012d78 <chirp_packet_config+0x230>)
 8012baa:	71da      	strb	r2, [r3, #7]
    chirp_config.payload.pos = chirp_config.coding_vector.pos + chirp_config.coding_vector.len;
 8012bac:	4b72      	ldr	r3, [pc, #456]	; (8012d78 <chirp_packet_config+0x230>)
 8012bae:	799a      	ldrb	r2, [r3, #6]
 8012bb0:	4b71      	ldr	r3, [pc, #452]	; (8012d78 <chirp_packet_config+0x230>)
 8012bb2:	79db      	ldrb	r3, [r3, #7]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b2da      	uxtb	r2, r3
 8012bb8:	4b6f      	ldr	r3, [pc, #444]	; (8012d78 <chirp_packet_config+0x230>)
 8012bba:	721a      	strb	r2, [r3, #8]
    chirp_config.payload.len = chirp_config.mx_payload_size;
 8012bbc:	4b6e      	ldr	r3, [pc, #440]	; (8012d78 <chirp_packet_config+0x230>)
 8012bbe:	889b      	ldrh	r3, [r3, #4]
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	4b6c      	ldr	r3, [pc, #432]	; (8012d78 <chirp_packet_config+0x230>)
 8012bc6:	725a      	strb	r2, [r3, #9]
    chirp_config.info_vector.pos = chirp_config.payload.pos + chirp_config.payload.len;
 8012bc8:	4b6b      	ldr	r3, [pc, #428]	; (8012d78 <chirp_packet_config+0x230>)
 8012bca:	7a1a      	ldrb	r2, [r3, #8]
 8012bcc:	4b6a      	ldr	r3, [pc, #424]	; (8012d78 <chirp_packet_config+0x230>)
 8012bce:	7a5b      	ldrb	r3, [r3, #9]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	4b68      	ldr	r3, [pc, #416]	; (8012d78 <chirp_packet_config+0x230>)
 8012bd6:	729a      	strb	r2, [r3, #10]
    chirp_config.info_vector.len = (chirp_config.mx_generation_size + 7) / 8;
 8012bd8:	4b67      	ldr	r3, [pc, #412]	; (8012d78 <chirp_packet_config+0x230>)
 8012bda:	885b      	ldrh	r3, [r3, #2]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	3307      	adds	r3, #7
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	da00      	bge.n	8012be6 <chirp_packet_config+0x9e>
 8012be4:	3307      	adds	r3, #7
 8012be6:	10db      	asrs	r3, r3, #3
 8012be8:	b2da      	uxtb	r2, r3
 8012bea:	4b63      	ldr	r3, [pc, #396]	; (8012d78 <chirp_packet_config+0x230>)
 8012bec:	72da      	strb	r2, [r3, #11]
    chirp_config._padding_2.pos = chirp_config.info_vector.pos + chirp_config.info_vector.len;
 8012bee:	4b62      	ldr	r3, [pc, #392]	; (8012d78 <chirp_packet_config+0x230>)
 8012bf0:	7a9a      	ldrb	r2, [r3, #10]
 8012bf2:	4b61      	ldr	r3, [pc, #388]	; (8012d78 <chirp_packet_config+0x230>)
 8012bf4:	7adb      	ldrb	r3, [r3, #11]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	b2da      	uxtb	r2, r3
 8012bfa:	4b5f      	ldr	r3, [pc, #380]	; (8012d78 <chirp_packet_config+0x230>)
 8012bfc:	731a      	strb	r2, [r3, #12]
    chirp_config._padding_2.len = PADDING_MAX(0,
 8012bfe:	4b5e      	ldr	r3, [pc, #376]	; (8012d78 <chirp_packet_config+0x230>)
 8012c00:	885b      	ldrh	r3, [r3, #2]
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	3307      	adds	r3, #7
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	da00      	bge.n	8012c0c <chirp_packet_config+0xc4>
 8012c0a:	3307      	adds	r3, #7
 8012c0c:	10db      	asrs	r3, r3, #3
 8012c0e:	425b      	negs	r3, r3
 8012c10:	f003 0203 	and.w	r2, r3, #3
 8012c14:	4b58      	ldr	r3, [pc, #352]	; (8012d78 <chirp_packet_config+0x230>)
 8012c16:	889b      	ldrh	r3, [r3, #4]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	425b      	negs	r3, r3
 8012c1c:	f003 0303 	and.w	r3, r3, #3
 8012c20:	441a      	add	r2, r3
 8012c22:	4b55      	ldr	r3, [pc, #340]	; (8012d78 <chirp_packet_config+0x230>)
 8012c24:	885b      	ldrh	r3, [r3, #2]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	3307      	adds	r3, #7
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	da00      	bge.n	8012c30 <chirp_packet_config+0xe8>
 8012c2e:	3307      	adds	r3, #7
 8012c30:	10db      	asrs	r3, r3, #3
 8012c32:	1ad3      	subs	r3, r2, r3
 8012c34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012c38:	b2da      	uxtb	r2, r3
 8012c3a:	4b4f      	ldr	r3, [pc, #316]	; (8012d78 <chirp_packet_config+0x230>)
 8012c3c:	735a      	strb	r2, [r3, #13]
                            + PADDING_SIZE(chirp_config.mx_payload_size)
            #if (MX_REQUEST || MX_SMART_SHUTDOWN_MAP)
                            - ((chirp_config.mx_generation_size + 7) / 8)
            #endif
                            );
    chirp_config.rand.pos = chirp_config._padding_2.pos + chirp_config._padding_2.len;
 8012c3e:	4b4e      	ldr	r3, [pc, #312]	; (8012d78 <chirp_packet_config+0x230>)
 8012c40:	7b1a      	ldrb	r2, [r3, #12]
 8012c42:	4b4d      	ldr	r3, [pc, #308]	; (8012d78 <chirp_packet_config+0x230>)
 8012c44:	7b5b      	ldrb	r3, [r3, #13]
 8012c46:	4413      	add	r3, r2
 8012c48:	b2da      	uxtb	r2, r3
 8012c4a:	4b4b      	ldr	r3, [pc, #300]	; (8012d78 <chirp_packet_config+0x230>)
 8012c4c:	739a      	strb	r2, [r3, #14]
    chirp_config.rand.len = 1;
 8012c4e:	4b4a      	ldr	r3, [pc, #296]	; (8012d78 <chirp_packet_config+0x230>)
 8012c50:	2201      	movs	r2, #1
 8012c52:	73da      	strb	r2, [r3, #15]
    chirp_config._padding_3.pos = chirp_config.rand.pos + chirp_config.rand.len;
 8012c54:	4b48      	ldr	r3, [pc, #288]	; (8012d78 <chirp_packet_config+0x230>)
 8012c56:	7b9a      	ldrb	r2, [r3, #14]
 8012c58:	4b47      	ldr	r3, [pc, #284]	; (8012d78 <chirp_packet_config+0x230>)
 8012c5a:	7bdb      	ldrb	r3, [r3, #15]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	b2da      	uxtb	r2, r3
 8012c60:	4b45      	ldr	r3, [pc, #276]	; (8012d78 <chirp_packet_config+0x230>)
 8012c62:	741a      	strb	r2, [r3, #16]
    chirp_config._padding_3.len = PADDING_SIZE(
 8012c64:	4b44      	ldr	r3, [pc, #272]	; (8012d78 <chirp_packet_config+0x230>)
 8012c66:	885b      	ldrh	r3, [r3, #2]
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	3307      	adds	r3, #7
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	da00      	bge.n	8012c72 <chirp_packet_config+0x12a>
 8012c70:	3307      	adds	r3, #7
 8012c72:	10db      	asrs	r3, r3, #3
 8012c74:	b2da      	uxtb	r2, r3
 8012c76:	4b40      	ldr	r3, [pc, #256]	; (8012d78 <chirp_packet_config+0x230>)
 8012c78:	889b      	ldrh	r3, [r3, #4]
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	4413      	add	r3, r2
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	4b3d      	ldr	r3, [pc, #244]	; (8012d78 <chirp_packet_config+0x230>)
 8012c84:	885b      	ldrh	r3, [r3, #2]
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	3307      	adds	r3, #7
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	da00      	bge.n	8012c90 <chirp_packet_config+0x148>
 8012c8e:	3307      	adds	r3, #7
 8012c90:	10db      	asrs	r3, r3, #3
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	4413      	add	r3, r2
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	4b37      	ldr	r3, [pc, #220]	; (8012d78 <chirp_packet_config+0x230>)
 8012c9a:	885b      	ldrh	r3, [r3, #2]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	3307      	adds	r3, #7
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	da00      	bge.n	8012ca6 <chirp_packet_config+0x15e>
 8012ca4:	3307      	adds	r3, #7
 8012ca6:	10db      	asrs	r3, r3, #3
 8012ca8:	425b      	negs	r3, r3
 8012caa:	f003 0103 	and.w	r1, r3, #3
 8012cae:	4b32      	ldr	r3, [pc, #200]	; (8012d78 <chirp_packet_config+0x230>)
 8012cb0:	889b      	ldrh	r3, [r3, #4]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	425b      	negs	r3, r3
 8012cb6:	f003 0303 	and.w	r3, r3, #3
 8012cba:	4419      	add	r1, r3
 8012cbc:	4b2e      	ldr	r3, [pc, #184]	; (8012d78 <chirp_packet_config+0x230>)
 8012cbe:	885b      	ldrh	r3, [r3, #2]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	3307      	adds	r3, #7
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	da00      	bge.n	8012cca <chirp_packet_config+0x182>
 8012cc8:	3307      	adds	r3, #7
 8012cca:	10db      	asrs	r3, r3, #3
 8012ccc:	1acb      	subs	r3, r1, r3
 8012cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	4413      	add	r3, r2
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	43db      	mvns	r3, r3
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	f003 0303 	and.w	r3, r3, #3
 8012ce0:	b2da      	uxtb	r2, r3
 8012ce2:	4b25      	ldr	r3, [pc, #148]	; (8012d78 <chirp_packet_config+0x230>)
 8012ce4:	745a      	strb	r2, [r3, #17]
                                    PADDING_SIZE((chirp_config.mx_generation_size + 7) / 8)
                                    + PADDING_SIZE(chirp_config.mx_payload_size)) +
    #endif
#endif
                                1);
    chirp_config.packet_chunk_len = chirp_config.coding_vector.len + chirp_config.payload.len + chirp_config.info_vector.len + chirp_config._padding_2.len + chirp_config.rand.len + chirp_config._padding_3.len;
 8012ce6:	4b24      	ldr	r3, [pc, #144]	; (8012d78 <chirp_packet_config+0x230>)
 8012ce8:	79db      	ldrb	r3, [r3, #7]
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	4b22      	ldr	r3, [pc, #136]	; (8012d78 <chirp_packet_config+0x230>)
 8012cee:	7a5b      	ldrb	r3, [r3, #9]
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	4413      	add	r3, r2
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	4b20      	ldr	r3, [pc, #128]	; (8012d78 <chirp_packet_config+0x230>)
 8012cf8:	7adb      	ldrb	r3, [r3, #11]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4413      	add	r3, r2
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	4b1d      	ldr	r3, [pc, #116]	; (8012d78 <chirp_packet_config+0x230>)
 8012d02:	7b5b      	ldrb	r3, [r3, #13]
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	4413      	add	r3, r2
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	4b1b      	ldr	r3, [pc, #108]	; (8012d78 <chirp_packet_config+0x230>)
 8012d0c:	7bdb      	ldrb	r3, [r3, #15]
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4413      	add	r3, r2
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	4b18      	ldr	r3, [pc, #96]	; (8012d78 <chirp_packet_config+0x230>)
 8012d16:	7c5b      	ldrb	r3, [r3, #17]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	4413      	add	r3, r2
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	4b16      	ldr	r3, [pc, #88]	; (8012d78 <chirp_packet_config+0x230>)
 8012d20:	829a      	strh	r2, [r3, #20]
    chirp_config.phy_payload_size = offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.coding_vector.len + chirp_config.payload.len + chirp_config.info_vector.len;
 8012d22:	4b15      	ldr	r3, [pc, #84]	; (8012d78 <chirp_packet_config+0x230>)
 8012d24:	79db      	ldrb	r3, [r3, #7]
 8012d26:	b29a      	uxth	r2, r3
 8012d28:	4b13      	ldr	r3, [pc, #76]	; (8012d78 <chirp_packet_config+0x230>)
 8012d2a:	7a5b      	ldrb	r3, [r3, #9]
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	4413      	add	r3, r2
 8012d30:	b29a      	uxth	r2, r3
 8012d32:	4b11      	ldr	r3, [pc, #68]	; (8012d78 <chirp_packet_config+0x230>)
 8012d34:	7adb      	ldrb	r3, [r3, #11]
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	4413      	add	r3, r2
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	3308      	adds	r3, #8
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	4b0d      	ldr	r3, [pc, #52]	; (8012d78 <chirp_packet_config+0x230>)
 8012d42:	825a      	strh	r2, [r3, #18]
    chirp_config.packet_len = offsetof(Packet, packet_chunk) - offsetof(Packet, phy_payload_begin) + chirp_config.packet_chunk_len;
 8012d44:	4b0c      	ldr	r3, [pc, #48]	; (8012d78 <chirp_packet_config+0x230>)
 8012d46:	8a9b      	ldrh	r3, [r3, #20]
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	3308      	adds	r3, #8
 8012d4c:	b29a      	uxth	r2, r3
 8012d4e:	4b0a      	ldr	r3, [pc, #40]	; (8012d78 <chirp_packet_config+0x230>)
 8012d50:	82da      	strh	r2, [r3, #22]
    assert_reset(!(chirp_config.packet_len % sizeof(uint_fast_t)));
 8012d52:	4b09      	ldr	r3, [pc, #36]	; (8012d78 <chirp_packet_config+0x230>)
 8012d54:	8adb      	ldrh	r3, [r3, #22]
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	f003 0303 	and.w	r3, r3, #3
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d01b      	beq.n	8012d9a <chirp_packet_config+0x252>
 8012d62:	4b05      	ldr	r3, [pc, #20]	; (8012d78 <chirp_packet_config+0x230>)
 8012d64:	8adb      	ldrh	r3, [r3, #22]
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	f003 0303 	and.w	r3, r3, #3
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d104      	bne.n	8012d7c <chirp_packet_config+0x234>
 8012d72:	2301      	movs	r3, #1
 8012d74:	e003      	b.n	8012d7e <chirp_packet_config+0x236>
 8012d76:	bf00      	nop
 8012d78:	20001430 	.word	0x20001430
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f00f fc5c 	bl	802263c <iprintf>
 8012d84:	4b73      	ldr	r3, [pc, #460]	; (8012f54 <chirp_packet_config+0x40c>)
 8012d86:	8adb      	ldrh	r3, [r3, #22]
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	f003 0303 	and.w	r3, r3, #3
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <chirp_packet_config+0x252>
  __ASM volatile ("cpsid f" : : : "memory");
 8012d94:	b671      	cpsid	f
 8012d96:	f7ff fe33 	bl	8012a00 <NVIC_SystemReset>

    chirp_config.matrix_coding_vector_8.pos = 0;
 8012d9a:	4b6e      	ldr	r3, [pc, #440]	; (8012f54 <chirp_packet_config+0x40c>)
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	761a      	strb	r2, [r3, #24]
    chirp_config.matrix_coding_vector_8.len = chirp_config.coding_vector.len;
 8012da0:	4b6c      	ldr	r3, [pc, #432]	; (8012f54 <chirp_packet_config+0x40c>)
 8012da2:	79da      	ldrb	r2, [r3, #7]
 8012da4:	4b6b      	ldr	r3, [pc, #428]	; (8012f54 <chirp_packet_config+0x40c>)
 8012da6:	765a      	strb	r2, [r3, #25]
    chirp_config.matrix_payload_8.pos = chirp_config.matrix_coding_vector_8.pos + chirp_config.matrix_coding_vector_8.len;
 8012da8:	4b6a      	ldr	r3, [pc, #424]	; (8012f54 <chirp_packet_config+0x40c>)
 8012daa:	7e1a      	ldrb	r2, [r3, #24]
 8012dac:	4b69      	ldr	r3, [pc, #420]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dae:	7e5b      	ldrb	r3, [r3, #25]
 8012db0:	4413      	add	r3, r2
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	4b67      	ldr	r3, [pc, #412]	; (8012f54 <chirp_packet_config+0x40c>)
 8012db6:	769a      	strb	r2, [r3, #26]
    chirp_config.matrix_payload_8.len = chirp_config.payload.len;
 8012db8:	4b66      	ldr	r3, [pc, #408]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dba:	7a5a      	ldrb	r2, [r3, #9]
 8012dbc:	4b65      	ldr	r3, [pc, #404]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dbe:	76da      	strb	r2, [r3, #27]

    chirp_config.matrix_coding_vector.pos = 0;
 8012dc0:	4b64      	ldr	r3, [pc, #400]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	771a      	strb	r2, [r3, #28]
    chirp_config.matrix_coding_vector.len = (chirp_config.mx_generation_size + (sizeof(uint_fast_t) * 8) - 1) / (sizeof(uint_fast_t) * 8);
 8012dc6:	4b63      	ldr	r3, [pc, #396]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dc8:	885b      	ldrh	r3, [r3, #2]
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	331f      	adds	r3, #31
 8012dce:	095b      	lsrs	r3, r3, #5
 8012dd0:	b2da      	uxtb	r2, r3
 8012dd2:	4b60      	ldr	r3, [pc, #384]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dd4:	775a      	strb	r2, [r3, #29]
    chirp_config.matrix_payload.pos = chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len;
 8012dd6:	4b5f      	ldr	r3, [pc, #380]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dd8:	7f1a      	ldrb	r2, [r3, #28]
 8012dda:	4b5e      	ldr	r3, [pc, #376]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ddc:	7f5b      	ldrb	r3, [r3, #29]
 8012dde:	4413      	add	r3, r2
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	4b5c      	ldr	r3, [pc, #368]	; (8012f54 <chirp_packet_config+0x40c>)
 8012de4:	779a      	strb	r2, [r3, #30]
    chirp_config.matrix_payload.len = (chirp_config.mx_payload_size + sizeof(uint_fast_t) - 1) / sizeof(uint_fast_t);
 8012de6:	4b5b      	ldr	r3, [pc, #364]	; (8012f54 <chirp_packet_config+0x40c>)
 8012de8:	889b      	ldrh	r3, [r3, #4]
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	3303      	adds	r3, #3
 8012dee:	089b      	lsrs	r3, r3, #2
 8012df0:	b2da      	uxtb	r2, r3
 8012df2:	4b58      	ldr	r3, [pc, #352]	; (8012f54 <chirp_packet_config+0x40c>)
 8012df4:	77da      	strb	r2, [r3, #31]

    chirp_config.matrix_chunk_8_len = chirp_config.matrix_coding_vector_8.len + chirp_config.matrix_payload_8.len;
 8012df6:	4b57      	ldr	r3, [pc, #348]	; (8012f54 <chirp_packet_config+0x40c>)
 8012df8:	7e5b      	ldrb	r3, [r3, #25]
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	4b55      	ldr	r3, [pc, #340]	; (8012f54 <chirp_packet_config+0x40c>)
 8012dfe:	7edb      	ldrb	r3, [r3, #27]
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	4413      	add	r3, r2
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	4b53      	ldr	r3, [pc, #332]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e08:	841a      	strh	r2, [r3, #32]
    chirp_config.matrix_chunk_32_len = chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len;
 8012e0a:	4b52      	ldr	r3, [pc, #328]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e0c:	7f5b      	ldrb	r3, [r3, #29]
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	4b50      	ldr	r3, [pc, #320]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e12:	7fdb      	ldrb	r3, [r3, #31]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	4413      	add	r3, r2
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	4b4e      	ldr	r3, [pc, #312]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e1c:	845a      	strh	r2, [r3, #34]	; 0x22
    chirp_config.matrix_size_32 = chirp_config.matrix_chunk_32_len + 1;
 8012e1e:	4b4d      	ldr	r3, [pc, #308]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	3301      	adds	r3, #1
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	4b4a      	ldr	r3, [pc, #296]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e2a:	849a      	strh	r2, [r3, #36]	; 0x24

    chirp_config.history_len_8 = offsetof(Node, row_map_chunk) + chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t);
 8012e2c:	4b49      	ldr	r3, [pc, #292]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e2e:	7f5b      	ldrb	r3, [r3, #29]
 8012e30:	3301      	adds	r3, #1
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	4b46      	ldr	r3, [pc, #280]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    uint8_t hash_factor = (((chirp_config.mx_num_nodes + 7) / 8 + chirp_config.info_vector.len - 1) / chirp_config.info_vector.len);
 8012e3c:	4b45      	ldr	r3, [pc, #276]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	3307      	adds	r3, #7
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	da00      	bge.n	8012e4a <chirp_packet_config+0x302>
 8012e48:	3307      	adds	r3, #7
 8012e4a:	10db      	asrs	r3, r3, #3
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	4b41      	ldr	r3, [pc, #260]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e50:	7adb      	ldrb	r3, [r3, #11]
 8012e52:	4413      	add	r3, r2
 8012e54:	3b01      	subs	r3, #1
 8012e56:	4a3f      	ldr	r2, [pc, #252]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e58:	7ad2      	ldrb	r2, [r2, #11]
 8012e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e5e:	73fb      	strb	r3, [r7, #15]
    chirp_config.map.pos = 0;
 8012e60:	4b3c      	ldr	r3, [pc, #240]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e62:	2200      	movs	r2, #0
 8012e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    chirp_config.map.len = hash_factor * chirp_config.info_vector.len;
 8012e68:	4b3a      	ldr	r3, [pc, #232]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e6a:	7adb      	ldrb	r3, [r3, #11]
 8012e6c:	7bfa      	ldrb	r2, [r7, #15]
 8012e6e:	fb12 f303 	smulbb	r3, r2, r3
 8012e72:	b2da      	uxtb	r2, r3
 8012e74:	4b37      	ldr	r3, [pc, #220]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    chirp_config.hash.pos = chirp_config.map.pos + chirp_config.map.len;
 8012e7a:	4b36      	ldr	r3, [pc, #216]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e7c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8012e80:	4b34      	ldr	r3, [pc, #208]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012e86:	4413      	add	r3, r2
 8012e88:	b2da      	uxtb	r2, r3
 8012e8a:	4b32      	ldr	r3, [pc, #200]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    chirp_config.hash.len = chirp_config.info_vector.len;
 8012e90:	4b30      	ldr	r3, [pc, #192]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e92:	7ada      	ldrb	r2, [r3, #11]
 8012e94:	4b2f      	ldr	r3, [pc, #188]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e96:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    chirp_config.row_all_mask.pos = 0;
 8012e9a:	4b2e      	ldr	r3, [pc, #184]	; (8012f54 <chirp_packet_config+0x40c>)
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    chirp_config.row_all_mask.len = chirp_config.matrix_coding_vector.len;
 8012ea2:	4b2c      	ldr	r3, [pc, #176]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ea4:	7f5a      	ldrb	r2, [r3, #29]
 8012ea6:	4b2b      	ldr	r3, [pc, #172]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ea8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    chirp_config.row_any_mask.pos = chirp_config.row_all_mask.pos + chirp_config.row_all_mask.len;
 8012eac:	4b29      	ldr	r3, [pc, #164]	; (8012f54 <chirp_packet_config+0x40c>)
 8012eae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012eb2:	4b28      	ldr	r3, [pc, #160]	; (8012f54 <chirp_packet_config+0x40c>)
 8012eb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eb8:	4413      	add	r3, r2
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	4b25      	ldr	r3, [pc, #148]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ebe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    chirp_config.row_any_mask.len = chirp_config.matrix_coding_vector.len;
 8012ec2:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ec4:	7f5a      	ldrb	r2, [r3, #29]
 8012ec6:	4b23      	ldr	r3, [pc, #140]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ec8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    chirp_config.column_all_mask.pos = chirp_config.row_any_mask.pos + chirp_config.row_any_mask.len;
 8012ecc:	4b21      	ldr	r3, [pc, #132]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ece:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8012ed2:	4b20      	ldr	r3, [pc, #128]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ed8:	4413      	add	r3, r2
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	4b1d      	ldr	r3, [pc, #116]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    chirp_config.column_all_mask.len = chirp_config.matrix_coding_vector.len;
 8012ee2:	4b1c      	ldr	r3, [pc, #112]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ee4:	7f5a      	ldrb	r2, [r3, #29]
 8012ee6:	4b1b      	ldr	r3, [pc, #108]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ee8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    chirp_config.column_any_mask.pos = chirp_config.column_all_mask.pos + chirp_config.column_all_mask.len;
 8012eec:	4b19      	ldr	r3, [pc, #100]	; (8012f54 <chirp_packet_config+0x40c>)
 8012eee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012ef2:	4b18      	ldr	r3, [pc, #96]	; (8012f54 <chirp_packet_config+0x40c>)
 8012ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ef8:	4413      	add	r3, r2
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	4b15      	ldr	r3, [pc, #84]	; (8012f54 <chirp_packet_config+0x40c>)
 8012efe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    chirp_config.column_any_mask.len = chirp_config.matrix_coding_vector.len;
 8012f02:	4b14      	ldr	r3, [pc, #80]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f04:	7f5a      	ldrb	r2, [r3, #29]
 8012f06:	4b13      	ldr	r3, [pc, #76]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f08:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    chirp_config.my_row_mask.pos = chirp_config.column_any_mask.pos + chirp_config.column_any_mask.len;
 8012f0c:	4b11      	ldr	r3, [pc, #68]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f0e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8012f12:	4b10      	ldr	r3, [pc, #64]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f14:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012f18:	4413      	add	r3, r2
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	4b0d      	ldr	r3, [pc, #52]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    chirp_config.my_row_mask.len = chirp_config.matrix_coding_vector.len;
 8012f22:	4b0c      	ldr	r3, [pc, #48]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f24:	7f5a      	ldrb	r2, [r3, #29]
 8012f26:	4b0b      	ldr	r3, [pc, #44]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    chirp_config.my_column_mask.pos = chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len;
 8012f2c:	4b09      	ldr	r3, [pc, #36]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f2e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012f32:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012f38:	4413      	add	r3, r2
 8012f3a:	b2da      	uxtb	r2, r3
 8012f3c:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    chirp_config.my_column_mask.len = chirp_config.matrix_coding_vector.len;
 8012f42:	4b04      	ldr	r3, [pc, #16]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f44:	7f5a      	ldrb	r2, [r3, #29]
 8012f46:	4b03      	ldr	r3, [pc, #12]	; (8012f54 <chirp_packet_config+0x40c>)
 8012f48:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8012f4c:	bf00      	nop
 8012f4e:	3714      	adds	r7, #20
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd90      	pop	{r4, r7, pc}
 8012f54:	20001430 	.word	0x20001430

08012f58 <chirp_slot_config>:
/* slot length is mx_slot_length_in_us microseconds,
needed slot number is mx_round_length,
round is last for mx_period_time_us seconds */
void chirp_slot_config(uint32_t mx_slot_length_in_us, uint16_t mx_round_length, uint32_t period_time_us_plus)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	460b      	mov	r3, r1
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	817b      	strh	r3, [r7, #10]
    uint32_t mx_period_time_us;
    memset(&chirp_config + offsetof(Chirp_Config, mx_slot_length_in_us), 0, offsetof(Chirp_Config, lora_sf) - offsetof(Chirp_Config, mx_slot_length_in_us));
 8012f66:	4b2d      	ldr	r3, [pc, #180]	; (801301c <chirp_slot_config+0xc4>)
 8012f68:	220c      	movs	r2, #12
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f00e fd58 	bl	8021a22 <memset>
    chirp_config.mx_slot_length_in_us = mx_slot_length_in_us;
 8012f72:	4a2b      	ldr	r2, [pc, #172]	; (8013020 <chirp_slot_config+0xc8>)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6393      	str	r3, [r2, #56]	; 0x38
    #if MX_LBT_ACCESS
    chirp_config.mx_slot_length_in_us += chirp_config.lbt_detect_duration_us * CHANNEL_ALTER;
 8012f78:	4b29      	ldr	r3, [pc, #164]	; (8013020 <chirp_slot_config+0xc8>)
 8012f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f7c:	4b28      	ldr	r3, [pc, #160]	; (8013020 <chirp_slot_config+0xc8>)
 8012f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	4413      	add	r3, r2
 8012f84:	4a26      	ldr	r2, [pc, #152]	; (8013020 <chirp_slot_config+0xc8>)
 8012f86:	6393      	str	r3, [r2, #56]	; 0x38
    #endif
    chirp_config.mx_slot_length = GPI_TICK_US_TO_FAST2(chirp_config.mx_slot_length_in_us);
 8012f88:	4b25      	ldr	r3, [pc, #148]	; (8013020 <chirp_slot_config+0xc8>)
 8012f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f8c:	4a25      	ldr	r2, [pc, #148]	; (8013024 <chirp_slot_config+0xcc>)
 8012f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f92:	0c9b      	lsrs	r3, r3, #18
 8012f94:	4a24      	ldr	r2, [pc, #144]	; (8013028 <chirp_slot_config+0xd0>)
 8012f96:	fb02 f103 	mul.w	r1, r2, r3
 8012f9a:	4b21      	ldr	r3, [pc, #132]	; (8013020 <chirp_slot_config+0xc8>)
 8012f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f9e:	4a23      	ldr	r2, [pc, #140]	; (801302c <chirp_slot_config+0xd4>)
 8012fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8012fa4:	099a      	lsrs	r2, r3, #6
 8012fa6:	4b21      	ldr	r3, [pc, #132]	; (801302c <chirp_slot_config+0xd4>)
 8012fa8:	fba3 0302 	umull	r0, r3, r3, r2
 8012fac:	099b      	lsrs	r3, r3, #6
 8012fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012fb2:	fb00 f303 	mul.w	r3, r0, r3
 8012fb6:	1ad3      	subs	r3, r2, r3
 8012fb8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8012fbc:	fb02 f303 	mul.w	r3, r2, r3
 8012fc0:	4419      	add	r1, r3
 8012fc2:	4b17      	ldr	r3, [pc, #92]	; (8013020 <chirp_slot_config+0xc8>)
 8012fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fc6:	4b19      	ldr	r3, [pc, #100]	; (801302c <chirp_slot_config+0xd4>)
 8012fc8:	fba3 0302 	umull	r0, r3, r3, r2
 8012fcc:	099b      	lsrs	r3, r3, #6
 8012fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012fd2:	fb00 f303 	mul.w	r3, r0, r3
 8012fd6:	1ad3      	subs	r3, r2, r3
 8012fd8:	011b      	lsls	r3, r3, #4
 8012fda:	440b      	add	r3, r1
 8012fdc:	4a10      	ldr	r2, [pc, #64]	; (8013020 <chirp_slot_config+0xc8>)
 8012fde:	63d3      	str	r3, [r2, #60]	; 0x3c
    chirp_config.mx_round_length = mx_round_length;
 8012fe0:	4b0f      	ldr	r3, [pc, #60]	; (8013020 <chirp_slot_config+0xc8>)
 8012fe2:	897a      	ldrh	r2, [r7, #10]
 8012fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mx_period_time_us =  chirp_config.mx_slot_length_in_us * mx_round_length + period_time_us_plus;
 8012fe8:	4b0d      	ldr	r3, [pc, #52]	; (8013020 <chirp_slot_config+0xc8>)
 8012fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fec:	897a      	ldrh	r2, [r7, #10]
 8012fee:	fb02 f303 	mul.w	r3, r2, r3
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	617b      	str	r3, [r7, #20]
    chirp_config.mx_period_time_s = (mx_period_time_us + 1000000 - 1) / 1000000;
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8012ffe:	f203 233f 	addw	r3, r3, #575	; 0x23f
 8013002:	4a08      	ldr	r2, [pc, #32]	; (8013024 <chirp_slot_config+0xcc>)
 8013004:	fba2 2303 	umull	r2, r3, r2, r3
 8013008:	0c9b      	lsrs	r3, r3, #18
 801300a:	b29a      	uxth	r2, r3
 801300c:	4b04      	ldr	r3, [pc, #16]	; (8013020 <chirp_slot_config+0xc8>)
 801300e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8013012:	bf00      	nop
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	20003dc0 	.word	0x20003dc0
 8013020:	20001430 	.word	0x20001430
 8013024:	431bde83 	.word	0x431bde83
 8013028:	00f42400 	.word	0x00f42400
 801302c:	10624dd3 	.word	0x10624dd3

08013030 <chirp_radio_config>:

void chirp_radio_config(uint8_t lora_spreading_factor, uint8_t lora_bandwidth, uint8_t lora_codingrate, uint8_t lora_preamble_length, int8_t tx_output_power, uint32_t lora_frequency)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	4604      	mov	r4, r0
 8013038:	4608      	mov	r0, r1
 801303a:	4611      	mov	r1, r2
 801303c:	461a      	mov	r2, r3
 801303e:	4623      	mov	r3, r4
 8013040:	71fb      	strb	r3, [r7, #7]
 8013042:	4603      	mov	r3, r0
 8013044:	71bb      	strb	r3, [r7, #6]
 8013046:	460b      	mov	r3, r1
 8013048:	717b      	strb	r3, [r7, #5]
 801304a:	4613      	mov	r3, r2
 801304c:	713b      	strb	r3, [r7, #4]
    memset(&chirp_config + offsetof(Chirp_Config, lora_sf), 0, sizeof(chirp_config) - offsetof(Chirp_Config, lora_sf));
 801304e:	4b25      	ldr	r3, [pc, #148]	; (80130e4 <chirp_radio_config+0xb4>)
 8013050:	227a      	movs	r2, #122	; 0x7a
 8013052:	2100      	movs	r1, #0
 8013054:	4618      	mov	r0, r3
 8013056:	f00e fce4 	bl	8021a22 <memset>
    chirp_config.lora_sf = lora_spreading_factor;
 801305a:	4a23      	ldr	r2, [pc, #140]	; (80130e8 <chirp_radio_config+0xb8>)
 801305c:	79fb      	ldrb	r3, [r7, #7]
 801305e:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
    chirp_config.lora_bw = lora_bandwidth;
 8013062:	4a21      	ldr	r2, [pc, #132]	; (80130e8 <chirp_radio_config+0xb8>)
 8013064:	79bb      	ldrb	r3, [r7, #6]
 8013066:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    chirp_config.lora_cr = lora_codingrate;
 801306a:	4a1f      	ldr	r2, [pc, #124]	; (80130e8 <chirp_radio_config+0xb8>)
 801306c:	797b      	ldrb	r3, [r7, #5]
 801306e:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    chirp_config.lora_plen = lora_preamble_length;
 8013072:	4a1d      	ldr	r2, [pc, #116]	; (80130e8 <chirp_radio_config+0xb8>)
 8013074:	793b      	ldrb	r3, [r7, #4]
 8013076:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
    chirp_config.lora_tx_pwr = tx_output_power;
 801307a:	4a1b      	ldr	r2, [pc, #108]	; (80130e8 <chirp_radio_config+0xb8>)
 801307c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013080:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    chirp_config.lora_freq = lora_frequency * 1e3; /* kHz -> Hz */
 8013084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013086:	f7ed fa47 	bl	8000518 <__aeabi_ui2d>
 801308a:	f04f 0200 	mov.w	r2, #0
 801308e:	4b17      	ldr	r3, [pc, #92]	; (80130ec <chirp_radio_config+0xbc>)
 8013090:	f7ed fabc 	bl	800060c <__aeabi_dmul>
 8013094:	4603      	mov	r3, r0
 8013096:	460c      	mov	r4, r1
 8013098:	4618      	mov	r0, r3
 801309a:	4621      	mov	r1, r4
 801309c:	f7ed fd8e 	bl	8000bbc <__aeabi_d2uiz>
 80130a0:	4602      	mov	r2, r0
 80130a2:	4b11      	ldr	r3, [pc, #68]	; (80130e8 <chirp_radio_config+0xb8>)
 80130a4:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
    gpi_radio_init();
 80130a8:	f7fa f954 	bl	800d354 <gpi_radio_init>
	#if MX_LBT_ACCESS
    uint32_t symbol_time_us = SX1276GetSymbolTime(chirp_config.lora_sf, chirp_config.lora_bw);
 80130ac:	4b0e      	ldr	r3, [pc, #56]	; (80130e8 <chirp_radio_config+0xb8>)
 80130ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80130b2:	4b0d      	ldr	r3, [pc, #52]	; (80130e8 <chirp_radio_config+0xb8>)
 80130b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130b8:	4619      	mov	r1, r3
 80130ba:	4610      	mov	r0, r2
 80130bc:	f7fa f894 	bl	800d1e8 <SX1276GetSymbolTime>
 80130c0:	60f8      	str	r0, [r7, #12]
    chirp_config.lbt_detect_duration_us = (6 * symbol_time_us >= LBT_DELAY_IN_US) ? 6 * symbol_time_us : LBT_DELAY_IN_US;
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	4613      	mov	r3, r2
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	4413      	add	r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	461a      	mov	r2, r3
 80130ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80130d2:	4293      	cmp	r3, r2
 80130d4:	bf38      	it	cc
 80130d6:	4613      	movcc	r3, r2
 80130d8:	4a03      	ldr	r2, [pc, #12]	; (80130e8 <chirp_radio_config+0xb8>)
 80130da:	65d3      	str	r3, [r2, #92]	; 0x5c
    #endif
}
 80130dc:	bf00      	nop
 80130de:	3714      	adds	r7, #20
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd90      	pop	{r4, r7, pc}
 80130e4:	200046a8 	.word	0x200046a8
 80130e8:	20001430 	.word	0x20001430
 80130ec:	408f4000 	.word	0x408f4000

080130f0 <chirp_payload_distribution>:
 * @description: To allocate payload among nodes according to the type of mixer (dissemination / collection)
 * @param mx_task: MX_DISSEMINATE / MX_COLLECT
 * @return: None
 */
void chirp_payload_distribution(Mixer_Task mx_task)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	4603      	mov	r3, r0
 80130f8:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    chirp_config.disem_copy = 0;
 80130fa:	4b3a      	ldr	r3, [pc, #232]	; (80131e4 <chirp_payload_distribution+0xf4>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    if ((mx_task == MX_DISSEMINATE))
 8013102:	79fb      	ldrb	r3, [r7, #7]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d11d      	bne.n	8013144 <chirp_payload_distribution+0x54>
    {
        payload_distribution = (uint8_t *)malloc(chirp_config.mx_generation_size);
 8013108:	4b36      	ldr	r3, [pc, #216]	; (80131e4 <chirp_payload_distribution+0xf4>)
 801310a:	885b      	ldrh	r3, [r3, #2]
 801310c:	b29b      	uxth	r3, r3
 801310e:	4618      	mov	r0, r3
 8013110:	f00e fc6c 	bl	80219ec <malloc>
 8013114:	4603      	mov	r3, r0
 8013116:	461a      	mov	r2, r3
 8013118:	4b33      	ldr	r3, [pc, #204]	; (80131e8 <chirp_payload_distribution+0xf8>)
 801311a:	601a      	str	r2, [r3, #0]
        /* Only the initiator has packets */
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 801311c:	2300      	movs	r3, #0
 801311e:	73fb      	strb	r3, [r7, #15]
 8013120:	e008      	b.n	8013134 <chirp_payload_distribution+0x44>
            payload_distribution[i] = 0;
 8013122:	4b31      	ldr	r3, [pc, #196]	; (80131e8 <chirp_payload_distribution+0xf8>)
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	7bfb      	ldrb	r3, [r7, #15]
 8013128:	4413      	add	r3, r2
 801312a:	2200      	movs	r2, #0
 801312c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 801312e:	7bfb      	ldrb	r3, [r7, #15]
 8013130:	3301      	adds	r3, #1
 8013132:	73fb      	strb	r3, [r7, #15]
 8013134:	7bfb      	ldrb	r3, [r7, #15]
 8013136:	b29a      	uxth	r2, r3
 8013138:	4b2a      	ldr	r3, [pc, #168]	; (80131e4 <chirp_payload_distribution+0xf4>)
 801313a:	885b      	ldrh	r3, [r3, #2]
 801313c:	b29b      	uxth	r3, r3
 801313e:	429a      	cmp	r2, r3
 8013140:	d3ef      	bcc.n	8013122 <chirp_payload_distribution+0x32>
            payload_distribution[i] = i;

        if ((mx_task == MX_ARRANGE) || (mx_task == CHIRP_START) || (mx_task == CHIRP_CONNECTIVITY))
            chirp_config.disem_copy = 1;
    }
}
 8013142:	e04a      	b.n	80131da <chirp_payload_distribution+0xea>
        assert_reset(chirp_config.mx_num_nodes == chirp_config.mx_generation_size);
 8013144:	4b27      	ldr	r3, [pc, #156]	; (80131e4 <chirp_payload_distribution+0xf4>)
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	b29a      	uxth	r2, r3
 801314a:	4b26      	ldr	r3, [pc, #152]	; (80131e4 <chirp_payload_distribution+0xf4>)
 801314c:	885b      	ldrh	r3, [r3, #2]
 801314e:	b29b      	uxth	r3, r3
 8013150:	429a      	cmp	r2, r3
 8013152:	d018      	beq.n	8013186 <chirp_payload_distribution+0x96>
 8013154:	4b23      	ldr	r3, [pc, #140]	; (80131e4 <chirp_payload_distribution+0xf4>)
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	b29a      	uxth	r2, r3
 801315a:	4b22      	ldr	r3, [pc, #136]	; (80131e4 <chirp_payload_distribution+0xf4>)
 801315c:	885b      	ldrh	r3, [r3, #2]
 801315e:	b29b      	uxth	r3, r3
 8013160:	429a      	cmp	r2, r3
 8013162:	d101      	bne.n	8013168 <chirp_payload_distribution+0x78>
 8013164:	2301      	movs	r3, #1
 8013166:	e000      	b.n	801316a <chirp_payload_distribution+0x7a>
 8013168:	2300      	movs	r3, #0
 801316a:	4618      	mov	r0, r3
 801316c:	f00f fa66 	bl	802263c <iprintf>
 8013170:	4b1c      	ldr	r3, [pc, #112]	; (80131e4 <chirp_payload_distribution+0xf4>)
 8013172:	881b      	ldrh	r3, [r3, #0]
 8013174:	b29a      	uxth	r2, r3
 8013176:	4b1b      	ldr	r3, [pc, #108]	; (80131e4 <chirp_payload_distribution+0xf4>)
 8013178:	885b      	ldrh	r3, [r3, #2]
 801317a:	b29b      	uxth	r3, r3
 801317c:	429a      	cmp	r2, r3
 801317e:	d002      	beq.n	8013186 <chirp_payload_distribution+0x96>
 8013180:	b671      	cpsid	f
 8013182:	f7ff fc3d 	bl	8012a00 <NVIC_SystemReset>
        payload_distribution = (uint8_t *)malloc(chirp_config.mx_num_nodes);
 8013186:	4b17      	ldr	r3, [pc, #92]	; (80131e4 <chirp_payload_distribution+0xf4>)
 8013188:	881b      	ldrh	r3, [r3, #0]
 801318a:	b29b      	uxth	r3, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f00e fc2d 	bl	80219ec <malloc>
 8013192:	4603      	mov	r3, r0
 8013194:	461a      	mov	r2, r3
 8013196:	4b14      	ldr	r3, [pc, #80]	; (80131e8 <chirp_payload_distribution+0xf8>)
 8013198:	601a      	str	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_num_nodes; i++)
 801319a:	2300      	movs	r3, #0
 801319c:	73fb      	strb	r3, [r7, #15]
 801319e:	e008      	b.n	80131b2 <chirp_payload_distribution+0xc2>
            payload_distribution[i] = i;
 80131a0:	4b11      	ldr	r3, [pc, #68]	; (80131e8 <chirp_payload_distribution+0xf8>)
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	7bfb      	ldrb	r3, [r7, #15]
 80131a6:	4413      	add	r3, r2
 80131a8:	7bfa      	ldrb	r2, [r7, #15]
 80131aa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < chirp_config.mx_num_nodes; i++)
 80131ac:	7bfb      	ldrb	r3, [r7, #15]
 80131ae:	3301      	adds	r3, #1
 80131b0:	73fb      	strb	r3, [r7, #15]
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <chirp_payload_distribution+0xf4>)
 80131b8:	881b      	ldrh	r3, [r3, #0]
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	429a      	cmp	r2, r3
 80131be:	d3ef      	bcc.n	80131a0 <chirp_payload_distribution+0xb0>
        if ((mx_task == MX_ARRANGE) || (mx_task == CHIRP_START) || (mx_task == CHIRP_CONNECTIVITY))
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	2b06      	cmp	r3, #6
 80131c4:	d005      	beq.n	80131d2 <chirp_payload_distribution+0xe2>
 80131c6:	79fb      	ldrb	r3, [r7, #7]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <chirp_payload_distribution+0xe2>
 80131cc:	79fb      	ldrb	r3, [r7, #7]
 80131ce:	2b03      	cmp	r3, #3
 80131d0:	d103      	bne.n	80131da <chirp_payload_distribution+0xea>
            chirp_config.disem_copy = 1;
 80131d2:	4b04      	ldr	r3, [pc, #16]	; (80131e4 <chirp_payload_distribution+0xf4>)
 80131d4:	2201      	movs	r2, #1
 80131d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 80131da:	bf00      	nop
 80131dc:	3710      	adds	r7, #16
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	20001430 	.word	0x20001430
 80131e8:	20000cc8 	.word	0x20000cc8

080131ec <chirp_write>:

void chirp_write(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 80131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f0:	b098      	sub	sp, #96	; 0x60
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	4603      	mov	r3, r0
 80131f6:	6039      	str	r1, [r7, #0]
 80131f8:	71fb      	strb	r3, [r7, #7]
 80131fa:	466b      	mov	r3, sp
 80131fc:	4698      	mov	r8, r3
    PRINTF("chirp_write:%lu, %lu\n", node_id, chirp_outl->round_max);
 80131fe:	79f9      	ldrb	r1, [r7, #7]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013206:	b29b      	uxth	r3, r3
 8013208:	461a      	mov	r2, r3
 801320a:	48b6      	ldr	r0, [pc, #728]	; (80134e4 <chirp_write+0x2f8>)
 801320c:	f00f fa16 	bl	802263c <iprintf>

	uint8_t i;
    uint16_t k = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t flash_addr;

    if ((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	2b01      	cmp	r3, #1
 801321c:	d007      	beq.n	801322e <chirp_write+0x42>
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	2b02      	cmp	r3, #2
 8013224:	d003      	beq.n	801322e <chirp_write+0x42>
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	2b04      	cmp	r3, #4
 801322c:	d13e      	bne.n	80132ac <chirp_write+0xc0>
    {
        assert_reset(!(chirp_outl->file_chunk_len % sizeof(uint64_t)));
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013232:	b29b      	uxth	r3, r3
 8013234:	f003 0307 	and.w	r3, r3, #7
 8013238:	b29b      	uxth	r3, r3
 801323a:	2b00      	cmp	r3, #0
 801323c:	d018      	beq.n	8013270 <chirp_write+0x84>
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013242:	b29b      	uxth	r3, r3
 8013244:	f003 0307 	and.w	r3, r3, #7
 8013248:	b29b      	uxth	r3, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d101      	bne.n	8013252 <chirp_write+0x66>
 801324e:	2301      	movs	r3, #1
 8013250:	e000      	b.n	8013254 <chirp_write+0x68>
 8013252:	2300      	movs	r3, #0
 8013254:	4618      	mov	r0, r3
 8013256:	f00f f9f1 	bl	802263c <iprintf>
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801325e:	b29b      	uxth	r3, r3
 8013260:	f003 0307 	and.w	r3, r3, #7
 8013264:	b29b      	uxth	r3, r3
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <chirp_write+0x84>
 801326a:	b671      	cpsid	f
 801326c:	f7ff fbc8 	bl	8012a00 <NVIC_SystemReset>
        assert_reset(!((chirp_outl->payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013276:	f003 0307 	and.w	r3, r3, #7
 801327a:	2b00      	cmp	r3, #0
 801327c:	d016      	beq.n	80132ac <chirp_write+0xc0>
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013284:	f003 0307 	and.w	r3, r3, #7
 8013288:	2b00      	cmp	r3, #0
 801328a:	d101      	bne.n	8013290 <chirp_write+0xa4>
 801328c:	2301      	movs	r3, #1
 801328e:	e000      	b.n	8013292 <chirp_write+0xa6>
 8013290:	2300      	movs	r3, #0
 8013292:	4618      	mov	r0, r3
 8013294:	f00f f9d2 	bl	802263c <iprintf>
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801329e:	f003 0307 	and.w	r3, r3, #7
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <chirp_write+0xc0>
 80132a6:	b671      	cpsid	f
 80132a8:	f7ff fbaa 	bl	8012a00 <NVIC_SystemReset>
    }
    /* file data is read from flash on the other bank */
    uint32_t flash_data[chirp_outl->file_chunk_len / sizeof(uint32_t)];
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	089b      	lsrs	r3, r3, #2
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	461d      	mov	r5, r3
 80132b8:	462b      	mov	r3, r5
 80132ba:	3b01      	subs	r3, #1
 80132bc:	653b      	str	r3, [r7, #80]	; 0x50
 80132be:	4629      	mov	r1, r5
 80132c0:	f04f 0200 	mov.w	r2, #0
 80132c4:	f04f 0300 	mov.w	r3, #0
 80132c8:	f04f 0400 	mov.w	r4, #0
 80132cc:	0154      	lsls	r4, r2, #5
 80132ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80132d2:	014b      	lsls	r3, r1, #5
 80132d4:	4629      	mov	r1, r5
 80132d6:	f04f 0200 	mov.w	r2, #0
 80132da:	f04f 0300 	mov.w	r3, #0
 80132de:	f04f 0400 	mov.w	r4, #0
 80132e2:	0154      	lsls	r4, r2, #5
 80132e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80132e8:	014b      	lsls	r3, r1, #5
 80132ea:	00ab      	lsls	r3, r5, #2
 80132ec:	3303      	adds	r3, #3
 80132ee:	3307      	adds	r3, #7
 80132f0:	08db      	lsrs	r3, r3, #3
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	ebad 0d03 	sub.w	sp, sp, r3
 80132f8:	466b      	mov	r3, sp
 80132fa:	3303      	adds	r3, #3
 80132fc:	089b      	lsrs	r3, r3, #2
 80132fe:	009b      	lsls	r3, r3, #2
 8013300:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t file_data[chirp_outl->payload_len];
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	f893 6039 	ldrb.w	r6, [r3, #57]	; 0x39
 8013308:	4633      	mov	r3, r6
 801330a:	3b01      	subs	r3, #1
 801330c:	64bb      	str	r3, [r7, #72]	; 0x48
 801330e:	b2f1      	uxtb	r1, r6
 8013310:	f04f 0200 	mov.w	r2, #0
 8013314:	f04f 0300 	mov.w	r3, #0
 8013318:	f04f 0400 	mov.w	r4, #0
 801331c:	00d4      	lsls	r4, r2, #3
 801331e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013322:	00cb      	lsls	r3, r1, #3
 8013324:	b2f1      	uxtb	r1, r6
 8013326:	f04f 0200 	mov.w	r2, #0
 801332a:	f04f 0300 	mov.w	r3, #0
 801332e:	f04f 0400 	mov.w	r4, #0
 8013332:	00d4      	lsls	r4, r2, #3
 8013334:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013338:	00cb      	lsls	r3, r1, #3
 801333a:	4633      	mov	r3, r6
 801333c:	3307      	adds	r3, #7
 801333e:	08db      	lsrs	r3, r3, #3
 8013340:	00db      	lsls	r3, r3, #3
 8013342:	ebad 0d03 	sub.w	sp, sp, r3
 8013346:	466b      	mov	r3, sp
 8013348:	3300      	adds	r3, #0
 801334a:	647b      	str	r3, [r7, #68]	; 0x44
    memset(flash_data, 0, sizeof(flash_data));
 801334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801334e:	00aa      	lsls	r2, r5, #2
 8013350:	2100      	movs	r1, #0
 8013352:	4618      	mov	r0, r3
 8013354:	f00e fb65 	bl	8021a22 <memset>
    memset(file_data, 0, sizeof(file_data));
 8013358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801335a:	4632      	mov	r2, r6
 801335c:	2100      	movs	r1, #0
 801335e:	4618      	mov	r0, r3
 8013360:	f00e fb5f 	bl	8021a22 <memset>
    memset(data, 0, DATA_HEADER_LENGTH);
 8013364:	2208      	movs	r2, #8
 8013366:	2100      	movs	r1, #0
 8013368:	485f      	ldr	r0, [pc, #380]	; (80134e8 <chirp_write+0x2fc>)
 801336a:	f00e fb5a 	bl	8021a22 <memset>

    /* MX_DISSEMINATE / MX_COLLECT / CHIRP_TOPO: read file data from flash */
    if (((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO)))
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	2b01      	cmp	r3, #1
 8013374:	d008      	beq.n	8013388 <chirp_write+0x19c>
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	2b02      	cmp	r3, #2
 801337c:	d004      	beq.n	8013388 <chirp_write+0x19c>
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	2b04      	cmp	r3, #4
 8013384:	f040 80cb 	bne.w	801351e <chirp_write+0x332>
    {
        memset(flash_data, 0, sizeof(flash_data));
 8013388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801338a:	00aa      	lsls	r2, r5, #2
 801338c:	2100      	movs	r1, #0
 801338e:	4618      	mov	r0, r3
 8013390:	f00e fb47 	bl	8021a22 <memset>
        if ((chirp_outl->disem_file_index) && (chirp_outl->task == MX_DISSEMINATE))
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801339a:	b29b      	uxth	r3, r3
 801339c:	2b00      	cmp	r3, #0
 801339e:	d057      	beq.n	8013450 <chirp_write+0x264>
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d153      	bne.n	8013450 <chirp_write+0x264>
        {
            if ((!chirp_outl->patch_update))
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d110      	bne.n	80133d4 <chirp_write+0x1e8>
                flash_addr = FLASH_START_BANK2 + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	461a      	mov	r2, r3
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	3b01      	subs	r3, #1
 80133c4:	fb03 f302 	mul.w	r3, r3, r2
 80133c8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80133cc:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80133d0:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 80133d2:	e082      	b.n	80134da <chirp_write+0x2ee>
            else if ((chirp_outl->patch_update) && (!chirp_outl->patch_bank))
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d018      	beq.n	8013410 <chirp_write+0x224>
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d113      	bne.n	8013410 <chirp_write+0x224>
                flash_addr = FLASH_START_BANK1 + chirp_outl->patch_page * FLASH_PAGE + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80133ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80133f2:	02db      	lsls	r3, r3, #11
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80133f8:	b292      	uxth	r2, r2
 80133fa:	4611      	mov	r1, r2
 80133fc:	683a      	ldr	r2, [r7, #0]
 80133fe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8013402:	b292      	uxth	r2, r2
 8013404:	3a01      	subs	r2, #1
 8013406:	fb02 f201 	mul.w	r2, r2, r1
 801340a:	4413      	add	r3, r2
 801340c:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 801340e:	e064      	b.n	80134da <chirp_write+0x2ee>
            else if ((chirp_outl->patch_update) && (chirp_outl->patch_bank))
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8013416:	2b00      	cmp	r3, #0
 8013418:	d05f      	beq.n	80134da <chirp_write+0x2ee>
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8013420:	2b00      	cmp	r3, #0
 8013422:	d05a      	beq.n	80134da <chirp_write+0x2ee>
                flash_addr = FLASH_START_BANK2 + chirp_outl->patch_page * FLASH_PAGE + chirp_outl->file_chunk_len * (chirp_outl->disem_file_index - 1);
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801342a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801342e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013432:	02db      	lsls	r3, r3, #11
 8013434:	683a      	ldr	r2, [r7, #0]
 8013436:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8013438:	b292      	uxth	r2, r2
 801343a:	4611      	mov	r1, r2
 801343c:	683a      	ldr	r2, [r7, #0]
 801343e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8013442:	b292      	uxth	r2, r2
 8013444:	3a01      	subs	r2, #1
 8013446:	fb02 f201 	mul.w	r2, r2, r1
 801344a:	4413      	add	r3, r2
 801344c:	65bb      	str	r3, [r7, #88]	; 0x58
            if ((!chirp_outl->patch_update))
 801344e:	e044      	b.n	80134da <chirp_write+0x2ee>
        }
        else if (((chirp_outl->round > chirp_outl->round_setup) && (chirp_outl->round <= chirp_outl->round_max)))
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013456:	b29a      	uxth	r2, r3
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	795b      	ldrb	r3, [r3, #5]
 801345c:	b29b      	uxth	r3, r3
 801345e:	429a      	cmp	r2, r3
 8013460:	d93c      	bls.n	80134dc <chirp_write+0x2f0>
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013468:	b29a      	uxth	r2, r3
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013470:	b29b      	uxth	r3, r3
 8013472:	429a      	cmp	r2, r3
 8013474:	d832      	bhi.n	80134dc <chirp_write+0x2f0>
        {
            if (chirp_outl->task == MX_COLLECT)
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	2b02      	cmp	r3, #2
 801347c:	d114      	bne.n	80134a8 <chirp_write+0x2bc>
                flash_addr = chirp_outl->collect_addr_start + chirp_outl->file_chunk_len * (chirp_outl->round - chirp_outl->round_setup - 1);
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013484:	683a      	ldr	r2, [r7, #0]
 8013486:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8013488:	b292      	uxth	r2, r2
 801348a:	4611      	mov	r1, r2
 801348c:	683a      	ldr	r2, [r7, #0]
 801348e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8013492:	b292      	uxth	r2, r2
 8013494:	4610      	mov	r0, r2
 8013496:	683a      	ldr	r2, [r7, #0]
 8013498:	7952      	ldrb	r2, [r2, #5]
 801349a:	1a82      	subs	r2, r0, r2
 801349c:	3a01      	subs	r2, #1
 801349e:	fb02 f201 	mul.w	r2, r2, r1
 80134a2:	4413      	add	r3, r2
 80134a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80134a6:	e019      	b.n	80134dc <chirp_write+0x2f0>
            else if (chirp_outl->task == CHIRP_TOPO)
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	2b04      	cmp	r3, #4
 80134ae:	d115      	bne.n	80134dc <chirp_write+0x2f0>
                flash_addr = TOPO_FLASH_ADDRESS + chirp_outl->file_chunk_len * (chirp_outl->round - chirp_outl->round_setup - 1);
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	461a      	mov	r2, r3
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80134be:	b29b      	uxth	r3, r3
 80134c0:	4619      	mov	r1, r3
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	795b      	ldrb	r3, [r3, #5]
 80134c6:	1acb      	subs	r3, r1, r3
 80134c8:	3b01      	subs	r3, #1
 80134ca:	fb03 f302 	mul.w	r3, r3, r2
 80134ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80134d2:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 80134d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80134d8:	e000      	b.n	80134dc <chirp_write+0x2f0>
            if ((!chirp_outl->patch_update))
 80134da:	bf00      	nop
        }

        uint16_t n;
        for (n = 0; n < chirp_outl->file_chunk_len / sizeof(uint32_t); n++)
 80134dc:	2300      	movs	r3, #0
 80134de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80134e2:	e013      	b.n	801350c <chirp_write+0x320>
 80134e4:	080258bc 	.word	0x080258bc
 80134e8:	20000464 	.word	0x20000464
            flash_data[n] = *(__IO uint32_t*)(flash_addr + n * sizeof(uint32_t));
 80134ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80134f0:	009a      	lsls	r2, r3, #2
 80134f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134f4:	4413      	add	r3, r2
 80134f6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80134fa:	6819      	ldr	r1, [r3, #0]
 80134fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (n = 0; n < chirp_outl->file_chunk_len / sizeof(uint32_t); n++)
 8013502:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8013506:	3301      	adds	r3, #1
 8013508:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8013510:	b29b      	uxth	r3, r3
 8013512:	089b      	lsrs	r3, r3, #2
 8013514:	b29b      	uxth	r3, r3
 8013516:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801351a:	429a      	cmp	r2, r3
 801351c:	d3e6      	bcc.n	80134ec <chirp_write+0x300>
    }

    /* All: config packet header including node_id, round No., current task, and proper content corresponded to task */
    data[0] = node_id;
 801351e:	4a93      	ldr	r2, [pc, #588]	; (801376c <chirp_write+0x580>)
 8013520:	79fb      	ldrb	r3, [r7, #7]
 8013522:	7013      	strb	r3, [r2, #0]
    data[1] = chirp_outl->round >> 8;
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801352a:	b29b      	uxth	r3, r3
 801352c:	0a1b      	lsrs	r3, r3, #8
 801352e:	b29b      	uxth	r3, r3
 8013530:	b2da      	uxtb	r2, r3
 8013532:	4b8e      	ldr	r3, [pc, #568]	; (801376c <chirp_write+0x580>)
 8013534:	705a      	strb	r2, [r3, #1]
    data[2] = chirp_outl->round;
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801353c:	b29b      	uxth	r3, r3
 801353e:	b2da      	uxtb	r2, r3
 8013540:	4b8a      	ldr	r3, [pc, #552]	; (801376c <chirp_write+0x580>)
 8013542:	709a      	strb	r2, [r3, #2]
    assert_reset(2 < ROUND_HEADER_LENGTH);
    /* write task index */
    data[DATA_HEADER_LENGTH - 1] = chirp_outl->task;
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	781a      	ldrb	r2, [r3, #0]
 8013548:	4b88      	ldr	r3, [pc, #544]	; (801376c <chirp_write+0x580>)
 801354a:	71da      	strb	r2, [r3, #7]
    k = ROUND_HEADER_LENGTH;
 801354c:	2304      	movs	r3, #4
 801354e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    switch (chirp_outl->task)
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	2b06      	cmp	r3, #6
 8013558:	f200 83e0 	bhi.w	8013d1c <chirp_write+0xb30>
 801355c:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <chirp_write+0x378>)
 801355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013562:	bf00      	nop
 8013564:	08013581 	.word	0x08013581
 8013568:	08013771 	.word	0x08013771
 801356c:	08013771 	.word	0x08013771
 8013570:	08013ab1 	.word	0x08013ab1
 8013574:	08013771 	.word	0x08013771
 8013578:	08013b4f 	.word	0x08013b4f
 801357c:	08013ba9 	.word	0x08013ba9
    {
        case CHIRP_START:
        {
            data[k++] = chirp_outl->round_max >> 8;
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013586:	b29b      	uxth	r3, r3
 8013588:	0a1b      	lsrs	r3, r3, #8
 801358a:	b299      	uxth	r1, r3
 801358c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013596:	461a      	mov	r2, r3
 8013598:	b2c9      	uxtb	r1, r1
 801359a:	4b74      	ldr	r3, [pc, #464]	; (801376c <chirp_write+0x580>)
 801359c:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->round_max;
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80135a4:	b299      	uxth	r1, r3
 80135a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135aa:	1c5a      	adds	r2, r3, #1
 80135ac:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80135b0:	461a      	mov	r2, r3
 80135b2:	b2c9      	uxtb	r1, r1
 80135b4:	4b6d      	ldr	r3, [pc, #436]	; (801376c <chirp_write+0x580>)
 80135b6:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 80135b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135ba:	496c      	ldr	r1, [pc, #432]	; (801376c <chirp_write+0x580>)
 80135bc:	461a      	mov	r2, r3
 80135be:	460b      	mov	r3, r1
 80135c0:	cb03      	ldmia	r3!, {r0, r1}
 80135c2:	6010      	str	r0, [r2, #0]
 80135c4:	6051      	str	r1, [r2, #4]
            k = 0;
 80135c6:	2300      	movs	r3, #0
 80135c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_year >> 8;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	0a1b      	lsrs	r3, r3, #8
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135da:	1c59      	adds	r1, r3, #1
 80135dc:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135e0:	3308      	adds	r3, #8
 80135e2:	b2d1      	uxtb	r1, r2
 80135e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135e6:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_year;
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135ec:	b29a      	uxth	r2, r3
 80135ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80135f2:	1c59      	adds	r1, r3, #1
 80135f4:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80135f8:	3308      	adds	r3, #8
 80135fa:	b2d1      	uxtb	r1, r2
 80135fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135fe:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_month;
 8013600:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013604:	1c5a      	adds	r2, r3, #1
 8013606:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801360a:	3308      	adds	r3, #8
 801360c:	683a      	ldr	r2, [r7, #0]
 801360e:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013614:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_date;
 8013616:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801361a:	1c5a      	adds	r2, r3, #1
 801361c:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013620:	3308      	adds	r3, #8
 8013622:	683a      	ldr	r2, [r7, #0]
 8013624:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8013628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801362a:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_hour;
 801362c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013630:	1c5a      	adds	r2, r3, #1
 8013632:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013636:	3308      	adds	r3, #8
 8013638:	683a      	ldr	r2, [r7, #0]
 801363a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 801363e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013640:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_min;
 8013642:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013646:	1c5a      	adds	r2, r3, #1
 8013648:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801364c:	3308      	adds	r3, #8
 801364e:	683a      	ldr	r2, [r7, #0]
 8013650:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8013654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013656:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->start_sec;
 8013658:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801365c:	1c5a      	adds	r2, r3, #1
 801365e:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013662:	3308      	adds	r3, #8
 8013664:	683a      	ldr	r2, [r7, #0]
 8013666:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 801366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801366c:	54d1      	strb	r1, [r2, r3]

            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_year >> 8;
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 8013674:	b29b      	uxth	r3, r3
 8013676:	0a1b      	lsrs	r3, r3, #8
 8013678:	b29a      	uxth	r2, r3
 801367a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801367e:	1c59      	adds	r1, r3, #1
 8013680:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013684:	3308      	adds	r3, #8
 8013686:	b2d1      	uxtb	r1, r2
 8013688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801368a:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_year;
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 8013692:	b29a      	uxth	r2, r3
 8013694:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013698:	1c59      	adds	r1, r3, #1
 801369a:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801369e:	3308      	adds	r3, #8
 80136a0:	b2d1      	uxtb	r1, r2
 80136a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136a4:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_month;
 80136a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136aa:	1c5a      	adds	r2, r3, #1
 80136ac:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80136b0:	3308      	adds	r3, #8
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 80136b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136ba:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_date;
 80136bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136c0:	1c5a      	adds	r2, r3, #1
 80136c2:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80136c6:	3308      	adds	r3, #8
 80136c8:	683a      	ldr	r2, [r7, #0]
 80136ca:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 80136ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136d0:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_hour;
 80136d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136d6:	1c5a      	adds	r2, r3, #1
 80136d8:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80136dc:	3308      	adds	r3, #8
 80136de:	683a      	ldr	r2, [r7, #0]
 80136e0:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 80136e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136e6:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_min;
 80136e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136ec:	1c5a      	adds	r2, r3, #1
 80136ee:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80136f2:	3308      	adds	r3, #8
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 80136fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136fc:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->end_sec;
 80136fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013702:	1c5a      	adds	r2, r3, #1
 8013704:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013708:	3308      	adds	r3, #8
 801370a:	683a      	ldr	r2, [r7, #0]
 801370c:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
 8013710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013712:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->flash_protection;
 8013714:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013718:	1c5a      	adds	r2, r3, #1
 801371a:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801371e:	3308      	adds	r3, #8
 8013720:	683a      	ldr	r2, [r7, #0]
 8013722:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8013726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013728:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->version_hash >> 8;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013730:	b29b      	uxth	r3, r3
 8013732:	0a1b      	lsrs	r3, r3, #8
 8013734:	b29a      	uxth	r2, r3
 8013736:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801373a:	1c59      	adds	r1, r3, #1
 801373c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013740:	3308      	adds	r3, #8
 8013742:	b2d1      	uxtb	r1, r2
 8013744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013746:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + (k++)] = chirp_outl->version_hash;
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801374e:	b29a      	uxth	r2, r3
 8013750:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013754:	1c59      	adds	r1, r3, #1
 8013756:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801375a:	3308      	adds	r3, #8
 801375c:	b2d1      	uxtb	r1, r2
 801375e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013760:	54d1      	strb	r1, [r2, r3]
            k = 0;
 8013762:	2300      	movs	r3, #0
 8013764:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 8013768:	e2db      	b.n	8013d22 <chirp_write+0xb36>
 801376a:	bf00      	nop
 801376c:	20000464 	.word	0x20000464
        }
        case MX_DISSEMINATE:
        case MX_COLLECT:
        case CHIRP_TOPO:
        {
            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	799b      	ldrb	r3, [r3, #6]
 8013774:	2b01      	cmp	r3, #1
 8013776:	f040 811f 	bne.w	80139b8 <chirp_write+0x7cc>
            {
                /* initiator in dissemination setup: file size, patch config, and old file size (if patch) */
                if ((chirp_outl->disem_file_index == 0) && (!node_id))
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013780:	b29b      	uxth	r3, r3
 8013782:	2b00      	cmp	r3, #0
 8013784:	f040 80e5 	bne.w	8013952 <chirp_write+0x766>
 8013788:	79fb      	ldrb	r3, [r7, #7]
 801378a:	2b00      	cmp	r3, #0
 801378c:	f040 80e1 	bne.w	8013952 <chirp_write+0x766>
                {
                    data[k++] = chirp_outl->disem_file_index >> 8;
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013796:	b29b      	uxth	r3, r3
 8013798:	0a1b      	lsrs	r3, r3, #8
 801379a:	b299      	uxth	r1, r3
 801379c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80137a6:	461a      	mov	r2, r3
 80137a8:	b2c9      	uxtb	r1, r1
 80137aa:	4bbe      	ldr	r3, [pc, #760]	; (8013aa4 <chirp_write+0x8b8>)
 80137ac:	5499      	strb	r1, [r3, r2]
                    data[k++] = chirp_outl->disem_file_index;
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80137b4:	b299      	uxth	r1, r3
 80137b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80137c0:	461a      	mov	r2, r3
 80137c2:	b2c9      	uxtb	r1, r1
 80137c4:	4bb7      	ldr	r3, [pc, #732]	; (8013aa4 <chirp_write+0x8b8>)
 80137c6:	5499      	strb	r1, [r3, r2]
                    memcpy(file_data, data, DATA_HEADER_LENGTH);
 80137c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ca:	49b6      	ldr	r1, [pc, #728]	; (8013aa4 <chirp_write+0x8b8>)
 80137cc:	461a      	mov	r2, r3
 80137ce:	460b      	mov	r3, r1
 80137d0:	cb03      	ldmia	r3!, {r0, r1}
 80137d2:	6010      	str	r0, [r2, #0]
 80137d4:	6051      	str	r1, [r2, #4]
                    k = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    if (chirp_outl->disem_flag)
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f000 815d 	beq.w	8013aa2 <chirp_write+0x8b6>
                    {
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 24;
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137ec:	0e1a      	lsrs	r2, r3, #24
 80137ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80137f2:	1c59      	adds	r1, r3, #1
 80137f4:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80137f8:	3308      	adds	r3, #8
 80137fa:	b2d1      	uxtb	r1, r2
 80137fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137fe:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 16;
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013804:	0c1a      	lsrs	r2, r3, #16
 8013806:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801380a:	1c59      	adds	r1, r3, #1
 801380c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013810:	3308      	adds	r3, #8
 8013812:	b2d1      	uxtb	r1, r2
 8013814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013816:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size >> 8;
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801381c:	0a1a      	lsrs	r2, r3, #8
 801381e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013822:	1c59      	adds	r1, r3, #1
 8013824:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013828:	3308      	adds	r3, #8
 801382a:	b2d1      	uxtb	r1, r2
 801382c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801382e:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_size;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013834:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013838:	1c59      	adds	r1, r3, #1
 801383a:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801383e:	3308      	adds	r3, #8
 8013840:	b2d1      	uxtb	r1, r2
 8013842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013844:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->patch_update;
 8013846:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801384a:	1c5a      	adds	r2, r3, #1
 801384c:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013850:	3308      	adds	r3, #8
 8013852:	683a      	ldr	r2, [r7, #0]
 8013854:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 8013858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801385a:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->patch_bank;
 801385c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013860:	1c5a      	adds	r2, r3, #1
 8013862:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013866:	3308      	adds	r3, #8
 8013868:	683a      	ldr	r2, [r7, #0]
 801386a:	f892 1057 	ldrb.w	r1, [r2, #87]	; 0x57
 801386e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013870:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->version_hash >> 8;
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013878:	b29b      	uxth	r3, r3
 801387a:	0a1b      	lsrs	r3, r3, #8
 801387c:	b29a      	uxth	r2, r3
 801387e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013882:	1c59      	adds	r1, r3, #1
 8013884:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013888:	3308      	adds	r3, #8
 801388a:	b2d1      	uxtb	r1, r2
 801388c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801388e:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->version_hash;
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013896:	b29a      	uxth	r2, r3
 8013898:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801389c:	1c59      	adds	r1, r3, #1
 801389e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80138a2:	3308      	adds	r3, #8
 80138a4:	b2d1      	uxtb	r1, r2
 80138a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138a8:	54d1      	strb	r1, [r2, r3]
                        file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->file_compression;
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	f8d3 2052 	ldr.w	r2, [r3, #82]	; 0x52
 80138b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80138b4:	1c59      	adds	r1, r3, #1
 80138b6:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80138ba:	3308      	adds	r3, #8
 80138bc:	b2d1      	uxtb	r1, r2
 80138be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138c0:	54d1      	strb	r1, [r2, r3]
                        /* k = 9 */
                        memcpy(&(file_data[DATA_HEADER_LENGTH + 9]), &(chirp_outl->firmware_md5[0]), 16);
 80138c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138c4:	f103 0011 	add.w	r0, r3, #17
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	3340      	adds	r3, #64	; 0x40
 80138cc:	2210      	movs	r2, #16
 80138ce:	4619      	mov	r1, r3
 80138d0:	f00e f89c 	bl	8021a0c <memcpy>
                        /* k = 25 */
                        if (chirp_outl->patch_update)
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d035      	beq.n	801394a <chirp_write+0x75e>
                        {
                            k = 28;
 80138de:	231c      	movs	r3, #28
 80138e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 24;
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 80138ea:	0e1a      	lsrs	r2, r3, #24
 80138ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80138f0:	1c59      	adds	r1, r3, #1
 80138f2:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 80138f6:	3308      	adds	r3, #8
 80138f8:	b2d1      	uxtb	r1, r2
 80138fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138fc:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 16;
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 8013904:	0c1a      	lsrs	r2, r3, #16
 8013906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801390a:	1c59      	adds	r1, r3, #1
 801390c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013910:	3308      	adds	r3, #8
 8013912:	b2d1      	uxtb	r1, r2
 8013914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013916:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size >> 8;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 801391e:	0a1a      	lsrs	r2, r3, #8
 8013920:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013924:	1c59      	adds	r1, r3, #1
 8013926:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 801392a:	3308      	adds	r3, #8
 801392c:	b2d1      	uxtb	r1, r2
 801392e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013930:	54d1      	strb	r1, [r2, r3]
                            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->old_firmware_size;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	f8d3 2059 	ldr.w	r2, [r3, #89]	; 0x59
 8013938:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801393c:	1c59      	adds	r1, r3, #1
 801393e:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013942:	3308      	adds	r3, #8
 8013944:	b2d1      	uxtb	r1, r2
 8013946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013948:	54d1      	strb	r1, [r2, r3]
                            /* k = 32 */
                        }
                        k = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    if (chirp_outl->disem_flag)
 8013950:	e0a7      	b.n	8013aa2 <chirp_write+0x8b6>
                    }
                }
                /* if in dissemination / confirm session */
                else if (chirp_outl->disem_file_index)
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013958:	b29b      	uxth	r3, r3
 801395a:	2b00      	cmp	r3, #0
 801395c:	f000 81e0 	beq.w	8013d20 <chirp_write+0xb34>
                {
                    /* in dissemination, only initiator sends packets */
                    if (chirp_outl->disem_flag)
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013966:	2b00      	cmp	r3, #0
 8013968:	d01c      	beq.n	80139a4 <chirp_write+0x7b8>
                    {
                        data[k++] = chirp_outl->disem_file_index >> 8;
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013970:	b29b      	uxth	r3, r3
 8013972:	0a1b      	lsrs	r3, r3, #8
 8013974:	b299      	uxth	r1, r3
 8013976:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801397a:	1c5a      	adds	r2, r3, #1
 801397c:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013980:	461a      	mov	r2, r3
 8013982:	b2c9      	uxtb	r1, r1
 8013984:	4b47      	ldr	r3, [pc, #284]	; (8013aa4 <chirp_write+0x8b8>)
 8013986:	5499      	strb	r1, [r3, r2]
                        data[k++] = chirp_outl->disem_file_index;
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801398e:	b299      	uxth	r1, r3
 8013990:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013994:	1c5a      	adds	r2, r3, #1
 8013996:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 801399a:	461a      	mov	r2, r3
 801399c:	b2c9      	uxtb	r1, r1
 801399e:	4b41      	ldr	r3, [pc, #260]	; (8013aa4 <chirp_write+0x8b8>)
 80139a0:	5499      	strb	r1, [r3, r2]
                    file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->collect_addr_end >> 16;
                    file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->collect_addr_end >> 8;
                    file_data[DATA_HEADER_LENGTH + 7] = chirp_outl->collect_addr_end;
                }
            }
            break;
 80139a2:	e1bd      	b.n	8013d20 <chirp_write+0xb34>
                        data[6] = chirp_outl->disem_flag_full_rank;
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80139aa:	4b3e      	ldr	r3, [pc, #248]	; (8013aa4 <chirp_write+0x8b8>)
 80139ac:	719a      	strb	r2, [r3, #6]
                        chirp_config.disem_copy = 0;
 80139ae:	4b3e      	ldr	r3, [pc, #248]	; (8013aa8 <chirp_write+0x8bc>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            break;
 80139b6:	e1b3      	b.n	8013d20 <chirp_write+0xb34>
            else if ((chirp_outl->arrange_task == MX_COLLECT) && (chirp_outl->round <= chirp_outl->round_setup))
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	799b      	ldrb	r3, [r3, #6]
 80139bc:	2b02      	cmp	r3, #2
 80139be:	f040 81af 	bne.w	8013d20 <chirp_write+0xb34>
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	795b      	ldrb	r3, [r3, #5]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	429a      	cmp	r2, r3
 80139d2:	f200 81a5 	bhi.w	8013d20 <chirp_write+0xb34>
                data[k++] = chirp_outl->round_max >> 8;
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	0a1b      	lsrs	r3, r3, #8
 80139e0:	b299      	uxth	r1, r3
 80139e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80139e6:	1c5a      	adds	r2, r3, #1
 80139e8:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80139ec:	461a      	mov	r2, r3
 80139ee:	b2c9      	uxtb	r1, r1
 80139f0:	4b2c      	ldr	r3, [pc, #176]	; (8013aa4 <chirp_write+0x8b8>)
 80139f2:	5499      	strb	r1, [r3, r2]
                data[k++] = chirp_outl->round_max;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80139fa:	b299      	uxth	r1, r3
 80139fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a00:	1c5a      	adds	r2, r3, #1
 8013a02:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013a06:	461a      	mov	r2, r3
 8013a08:	b2c9      	uxtb	r1, r1
 8013a0a:	4b26      	ldr	r3, [pc, #152]	; (8013aa4 <chirp_write+0x8b8>)
 8013a0c:	5499      	strb	r1, [r3, r2]
                PRINTF("set99:%lu\n", chirp_outl->round_max);
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4619      	mov	r1, r3
 8013a18:	4824      	ldr	r0, [pc, #144]	; (8013aac <chirp_write+0x8c0>)
 8013a1a:	f00e fe0f 	bl	802263c <iprintf>
                memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a20:	4920      	ldr	r1, [pc, #128]	; (8013aa4 <chirp_write+0x8b8>)
 8013a22:	461a      	mov	r2, r3
 8013a24:	460b      	mov	r3, r1
 8013a26:	cb03      	ldmia	r3!, {r0, r1}
 8013a28:	6010      	str	r0, [r2, #0]
 8013a2a:	6051      	str	r1, [r2, #4]
                if (!node_id)
 8013a2c:	79fb      	ldrb	r3, [r7, #7]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f040 8176 	bne.w	8013d20 <chirp_write+0xb34>
                    file_data[DATA_HEADER_LENGTH + 0] = chirp_outl->collect_addr_start >> 24;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013a3a:	0e1b      	lsrs	r3, r3, #24
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a40:	721a      	strb	r2, [r3, #8]
                    file_data[DATA_HEADER_LENGTH + 1] = chirp_outl->collect_addr_start >> 16;
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013a48:	0c1b      	lsrs	r3, r3, #16
 8013a4a:	b2da      	uxtb	r2, r3
 8013a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a4e:	725a      	strb	r2, [r3, #9]
                    file_data[DATA_HEADER_LENGTH + 2] = chirp_outl->collect_addr_start >> 8;
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013a56:	0a1b      	lsrs	r3, r3, #8
 8013a58:	b2da      	uxtb	r2, r3
 8013a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a5c:	729a      	strb	r2, [r3, #10]
                    file_data[DATA_HEADER_LENGTH + 3] = chirp_outl->collect_addr_start;
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8013a64:	b2da      	uxtb	r2, r3
 8013a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a68:	72da      	strb	r2, [r3, #11]
                    file_data[DATA_HEADER_LENGTH + 4] = chirp_outl->collect_addr_end >> 24;
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013a70:	0e1b      	lsrs	r3, r3, #24
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a76:	731a      	strb	r2, [r3, #12]
                    file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->collect_addr_end >> 16;
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013a7e:	0c1b      	lsrs	r3, r3, #16
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a84:	735a      	strb	r2, [r3, #13]
                    file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->collect_addr_end >> 8;
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013a8c:	0a1b      	lsrs	r3, r3, #8
 8013a8e:	b2da      	uxtb	r2, r3
 8013a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a92:	739a      	strb	r2, [r3, #14]
                    file_data[DATA_HEADER_LENGTH + 7] = chirp_outl->collect_addr_end;
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8013a9a:	b2da      	uxtb	r2, r3
 8013a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a9e:	73da      	strb	r2, [r3, #15]
            break;
 8013aa0:	e13e      	b.n	8013d20 <chirp_write+0xb34>
 8013aa2:	e13d      	b.n	8013d20 <chirp_write+0xb34>
 8013aa4:	20000464 	.word	0x20000464
 8013aa8:	20001430 	.word	0x20001430
 8013aac:	080258d4 	.word	0x080258d4
        }
        case CHIRP_CONNECTIVITY:
        {
            /* only initiator writes to the payload */
            data[k++] = chirp_outl->round_max >> 8;
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	0a1b      	lsrs	r3, r3, #8
 8013aba:	b299      	uxth	r1, r3
 8013abc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ac0:	1c5a      	adds	r2, r3, #1
 8013ac2:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	b2c9      	uxtb	r1, r1
 8013aca:	4bb7      	ldr	r3, [pc, #732]	; (8013da8 <chirp_write+0xbbc>)
 8013acc:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->round_max;
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8013ad4:	b299      	uxth	r1, r3
 8013ad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ada:	1c5a      	adds	r2, r3, #1
 8013adc:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	b2c9      	uxtb	r1, r1
 8013ae4:	4bb0      	ldr	r3, [pc, #704]	; (8013da8 <chirp_write+0xbbc>)
 8013ae6:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aea:	49af      	ldr	r1, [pc, #700]	; (8013da8 <chirp_write+0xbbc>)
 8013aec:	461a      	mov	r2, r3
 8013aee:	460b      	mov	r3, r1
 8013af0:	cb03      	ldmia	r3!, {r0, r1}
 8013af2:	6010      	str	r0, [r2, #0]
 8013af4:	6051      	str	r1, [r2, #4]
            file_data[DATA_HEADER_LENGTH] = chirp_outl->sf;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013afe:	721a      	strb	r2, [r3, #8]
            file_data[DATA_HEADER_LENGTH + 1] = chirp_outl->freq >> 24;
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 8013b06:	0e1b      	lsrs	r3, r3, #24
 8013b08:	b2da      	uxtb	r2, r3
 8013b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b0c:	725a      	strb	r2, [r3, #9]
            file_data[DATA_HEADER_LENGTH + 2] = chirp_outl->freq >> 16;
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 8013b14:	0c1b      	lsrs	r3, r3, #16
 8013b16:	b2da      	uxtb	r2, r3
 8013b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b1a:	729a      	strb	r2, [r3, #10]
            file_data[DATA_HEADER_LENGTH + 3] = chirp_outl->freq >> 8;
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 8013b22:	0a1b      	lsrs	r3, r3, #8
 8013b24:	b2da      	uxtb	r2, r3
 8013b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b28:	72da      	strb	r2, [r3, #11]
            file_data[DATA_HEADER_LENGTH + 4] = chirp_outl->freq;
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 8013b30:	b2da      	uxtb	r2, r3
 8013b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b34:	731a      	strb	r2, [r3, #12]
            file_data[DATA_HEADER_LENGTH + 5] = chirp_outl->tx_power;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 8013b3c:	b2da      	uxtb	r2, r3
 8013b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b40:	735a      	strb	r2, [r3, #13]
            file_data[DATA_HEADER_LENGTH + 6] = chirp_outl->topo_payload_len;
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8013b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b4a:	739a      	strb	r2, [r3, #14]
            break;
 8013b4c:	e0e9      	b.n	8013d22 <chirp_write+0xb36>
        }
        case CHIRP_VERSION:
        {
            data[k++] = VERSION_MAJOR;
 8013b4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013b52:	1c5a      	adds	r2, r3, #1
 8013b54:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013b58:	461a      	mov	r2, r3
 8013b5a:	4b94      	ldr	r3, [pc, #592]	; (8013dac <chirp_write+0xbc0>)
 8013b5c:	7819      	ldrb	r1, [r3, #0]
 8013b5e:	4b92      	ldr	r3, [pc, #584]	; (8013da8 <chirp_write+0xbbc>)
 8013b60:	5499      	strb	r1, [r3, r2]
            data[k++] = VERSION_NODE;
 8013b62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013b66:	1c5a      	adds	r2, r3, #1
 8013b68:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	4b90      	ldr	r3, [pc, #576]	; (8013db0 <chirp_write+0xbc4>)
 8013b70:	7819      	ldrb	r1, [r3, #0]
 8013b72:	4b8d      	ldr	r3, [pc, #564]	; (8013da8 <chirp_write+0xbbc>)
 8013b74:	5499      	strb	r1, [r3, r2]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b78:	498b      	ldr	r1, [pc, #556]	; (8013da8 <chirp_write+0xbbc>)
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	cb03      	ldmia	r3!, {r0, r1}
 8013b80:	6010      	str	r0, [r2, #0]
 8013b82:	6051      	str	r1, [r2, #4]
            file_data[DATA_HEADER_LENGTH] = TOS_NODE_ID >> 16;
 8013b84:	4b8b      	ldr	r3, [pc, #556]	; (8013db4 <chirp_write+0xbc8>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	0c1b      	lsrs	r3, r3, #16
 8013b8a:	b2da      	uxtb	r2, r3
 8013b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b8e:	721a      	strb	r2, [r3, #8]
            file_data[DATA_HEADER_LENGTH + 1] = TOS_NODE_ID >> 8;
 8013b90:	4b88      	ldr	r3, [pc, #544]	; (8013db4 <chirp_write+0xbc8>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	0a1b      	lsrs	r3, r3, #8
 8013b96:	b2da      	uxtb	r2, r3
 8013b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b9a:	725a      	strb	r2, [r3, #9]
            file_data[DATA_HEADER_LENGTH + 2] = TOS_NODE_ID;
 8013b9c:	4b85      	ldr	r3, [pc, #532]	; (8013db4 <chirp_write+0xbc8>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba4:	729a      	strb	r2, [r3, #10]
            break;
 8013ba6:	e0bc      	b.n	8013d22 <chirp_write+0xb36>
        }
        case MX_ARRANGE:
        {
            data[1] = chirp_outl->default_slot_num >> 8;
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8013bae:	b29b      	uxth	r3, r3
 8013bb0:	0a1b      	lsrs	r3, r3, #8
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	b2da      	uxtb	r2, r3
 8013bb6:	4b7c      	ldr	r3, [pc, #496]	; (8013da8 <chirp_write+0xbbc>)
 8013bb8:	705a      	strb	r2, [r3, #1]
            data[2] = chirp_outl->default_slot_num;
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	b2da      	uxtb	r2, r3
 8013bc4:	4b78      	ldr	r3, [pc, #480]	; (8013da8 <chirp_write+0xbbc>)
 8013bc6:	709a      	strb	r2, [r3, #2]
            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	799b      	ldrb	r3, [r3, #6]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d109      	bne.n	8013be4 <chirp_write+0x9f8>
            {
                data[0] = chirp_outl->dissem_back_sf;
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013bd6:	4b74      	ldr	r3, [pc, #464]	; (8013da8 <chirp_write+0xbbc>)
 8013bd8:	701a      	strb	r2, [r3, #0]
                data[1] = chirp_outl->dissem_back_slot_num;
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013be0:	4b71      	ldr	r3, [pc, #452]	; (8013da8 <chirp_write+0xbbc>)
 8013be2:	705a      	strb	r2, [r3, #1]
            }
            data[k++] = chirp_outl->default_sf;
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8013bea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013bee:	1c5a      	adds	r2, r3, #1
 8013bf0:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	b2c9      	uxtb	r1, r1
 8013bf8:	4b6b      	ldr	r3, [pc, #428]	; (8013da8 <chirp_write+0xbbc>)
 8013bfa:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->default_payload_len;
 8013bfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c00:	1c5a      	adds	r2, r3, #1
 8013c02:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013c06:	461a      	mov	r2, r3
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	7d99      	ldrb	r1, [r3, #22]
 8013c0c:	4b66      	ldr	r3, [pc, #408]	; (8013da8 <chirp_write+0xbbc>)
 8013c0e:	5499      	strb	r1, [r3, r2]
            data[k++] = chirp_outl->arrange_task;
 8013c10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c14:	1c5a      	adds	r2, r3, #1
 8013c16:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	7999      	ldrb	r1, [r3, #6]
 8013c20:	4b61      	ldr	r3, [pc, #388]	; (8013da8 <chirp_write+0xbbc>)
 8013c22:	5499      	strb	r1, [r3, r2]
            data[ROUND_HEADER_LENGTH - 1] = chirp_outl->default_generate_size;
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	7dda      	ldrb	r2, [r3, #23]
 8013c28:	4b5f      	ldr	r3, [pc, #380]	; (8013da8 <chirp_write+0xbbc>)
 8013c2a:	70da      	strb	r2, [r3, #3]
            memcpy(file_data, data, DATA_HEADER_LENGTH);
 8013c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c2e:	495e      	ldr	r1, [pc, #376]	; (8013da8 <chirp_write+0xbbc>)
 8013c30:	461a      	mov	r2, r3
 8013c32:	460b      	mov	r3, r1
 8013c34:	cb03      	ldmia	r3!, {r0, r1}
 8013c36:	6010      	str	r0, [r2, #0]
 8013c38:	6051      	str	r1, [r2, #4]
            k = 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 24;
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	699b      	ldr	r3, [r3, #24]
 8013c44:	0e1a      	lsrs	r2, r3, #24
 8013c46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c4a:	1c59      	adds	r1, r3, #1
 8013c4c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013c50:	3308      	adds	r3, #8
 8013c52:	b2d1      	uxtb	r1, r2
 8013c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c56:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 16;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	699b      	ldr	r3, [r3, #24]
 8013c5c:	0c1a      	lsrs	r2, r3, #16
 8013c5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c62:	1c59      	adds	r1, r3, #1
 8013c64:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013c68:	3308      	adds	r3, #8
 8013c6a:	b2d1      	uxtb	r1, r2
 8013c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c6e:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0] >> 8;
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	699b      	ldr	r3, [r3, #24]
 8013c74:	0a1a      	lsrs	r2, r3, #8
 8013c76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c7a:	1c59      	adds	r1, r3, #1
 8013c7c:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013c80:	3308      	adds	r3, #8
 8013c82:	b2d1      	uxtb	r1, r2
 8013c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c86:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->firmware_bitmap[0];
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	699a      	ldr	r2, [r3, #24]
 8013c8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c90:	1c59      	adds	r1, r3, #1
 8013c92:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013c96:	3308      	adds	r3, #8
 8013c98:	b2d1      	uxtb	r1, r2
 8013c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c9c:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->default_tp;
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	f993 2015 	ldrsb.w	r2, [r3, #21]
 8013ca4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013ca8:	1c59      	adds	r1, r3, #1
 8013caa:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013cae:	3308      	adds	r3, #8
 8013cb0:	b2d1      	uxtb	r1, r2
 8013cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013cb4:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 24;
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	69db      	ldr	r3, [r3, #28]
 8013cba:	0e1a      	lsrs	r2, r3, #24
 8013cbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013cc0:	1c59      	adds	r1, r3, #1
 8013cc2:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013cc6:	3308      	adds	r3, #8
 8013cc8:	b2d1      	uxtb	r1, r2
 8013cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ccc:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 16;
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	69db      	ldr	r3, [r3, #28]
 8013cd2:	0c1a      	lsrs	r2, r3, #16
 8013cd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013cd8:	1c59      	adds	r1, r3, #1
 8013cda:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013cde:	3308      	adds	r3, #8
 8013ce0:	b2d1      	uxtb	r1, r2
 8013ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ce4:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0] >> 8;
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	69db      	ldr	r3, [r3, #28]
 8013cea:	0a1a      	lsrs	r2, r3, #8
 8013cec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013cf0:	1c59      	adds	r1, r3, #1
 8013cf2:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013cf6:	3308      	adds	r3, #8
 8013cf8:	b2d1      	uxtb	r1, r2
 8013cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013cfc:	54d1      	strb	r1, [r2, r3]
            file_data[DATA_HEADER_LENGTH + k++] = chirp_outl->task_bitmap[0];
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	69da      	ldr	r2, [r3, #28]
 8013d02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013d06:	1c59      	adds	r1, r3, #1
 8013d08:	f8a7 1056 	strh.w	r1, [r7, #86]	; 0x56
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	b2d1      	uxtb	r1, r2
 8013d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d12:	54d1      	strb	r1, [r2, r3]
            k = 0;
 8013d14:	2300      	movs	r3, #0
 8013d16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            break;
 8013d1a:	e002      	b.n	8013d22 <chirp_write+0xb36>
        }
        default:
            break;
 8013d1c:	bf00      	nop
 8013d1e:	e000      	b.n	8013d22 <chirp_write+0xb36>
            break;
 8013d20:	bf00      	nop
    }

    assert_reset(k <= DATA_HEADER_LENGTH);
 8013d22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013d26:	2b08      	cmp	r3, #8
 8013d28:	d910      	bls.n	8013d4c <chirp_write+0xb60>
 8013d2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013d2e:	2b08      	cmp	r3, #8
 8013d30:	d801      	bhi.n	8013d36 <chirp_write+0xb4a>
 8013d32:	2301      	movs	r3, #1
 8013d34:	e000      	b.n	8013d38 <chirp_write+0xb4c>
 8013d36:	2300      	movs	r3, #0
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f00e fc7f 	bl	802263c <iprintf>
 8013d3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013d42:	2b08      	cmp	r3, #8
 8013d44:	d902      	bls.n	8013d4c <chirp_write+0xb60>
 8013d46:	b671      	cpsid	f
 8013d48:	f7fe fe5a 	bl	8012a00 <NVIC_SystemReset>

    for (i = 0; i < chirp_config.mx_generation_size; i++)
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8013d52:	e105      	b.n	8013f60 <chirp_write+0xd74>
    {
        if (payload_distribution[i] == node_id)
 8013d54:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <chirp_write+0xbcc>)
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013d5c:	4413      	add	r3, r2
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	79fa      	ldrb	r2, [r7, #7]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	f040 80f2 	bne.w	8013f4c <chirp_write+0xd60>
        {
            // data[ROUND_HEADER_LENGTH - 1] = i;
            // file_data[ROUND_HEADER_LENGTH - 1] = i;
            switch (chirp_outl->task)
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	2b06      	cmp	r3, #6
 8013d6e:	f200 80ef 	bhi.w	8013f50 <chirp_write+0xd64>
 8013d72:	a201      	add	r2, pc, #4	; (adr r2, 8013d78 <chirp_write+0xb8c>)
 8013d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d78:	08013d95 	.word	0x08013d95
 8013d7c:	08013dbd 	.word	0x08013dbd
 8013d80:	08013e53 	.word	0x08013e53
 8013d84:	08013f11 	.word	0x08013f11
 8013d88:	08013e53 	.word	0x08013e53
 8013d8c:	08013f25 	.word	0x08013f25
 8013d90:	08013f39 	.word	0x08013f39
            {
                case CHIRP_START:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013d94:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013d98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013da0:	461a      	mov	r2, r3
 8013da2:	f7fe fa35 	bl	8012210 <mixer_write>
                    break;
 8013da6:	e0d6      	b.n	8013f56 <chirp_write+0xd6a>
 8013da8:	20000464 	.word	0x20000464
 8013dac:	08026d7c 	.word	0x08026d7c
 8013db0:	08026d7d 	.word	0x08026d7d
 8013db4:	20000000 	.word	0x20000000
 8013db8:	20000cc8 	.word	0x20000cc8
                }
                case MX_DISSEMINATE:
                {
                    if (!chirp_outl->disem_file_index)
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d109      	bne.n	8013ddc <chirp_write+0xbf0>
                        mixer_write(i, file_data, chirp_outl->payload_len);
 8013dc8:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	f7fe fa1b 	bl	8012210 <mixer_write>
                        if (chirp_outl->disem_flag)
                            gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data + i * (chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t), (chirp_outl->payload_len - DATA_HEADER_LENGTH));
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
                        // PRINT_PACKET(file_data + DATA_HEADER_LENGTH, sizeof(file_data) - 8, 0);
                    }
                    break;
 8013dda:	e0bc      	b.n	8013f56 <chirp_write+0xd6a>
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
 8013ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8013de0:	4b67      	ldr	r3, [pc, #412]	; (8013f80 <chirp_write+0xd94>)
 8013de2:	637b      	str	r3, [r7, #52]	; 0x34
 8013de4:	2308      	movs	r3, #8
 8013de6:	633b      	str	r3, [r7, #48]	; 0x30
 8013de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dec:	4610      	mov	r0, r2
 8013dee:	4619      	mov	r1, r3
 8013df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df2:	461a      	mov	r2, r3
 8013df4:	f00d fe0a 	bl	8021a0c <memcpy>
                        if (chirp_outl->disem_flag)
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d01d      	beq.n	8013e3e <chirp_write+0xc52>
                            gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data + i * (chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t), (chirp_outl->payload_len - DATA_HEADER_LENGTH));
 8013e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e04:	f103 0208 	add.w	r2, r3, #8
 8013e08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013e0a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013e0e:	6838      	ldr	r0, [r7, #0]
 8013e10:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8013e14:	3808      	subs	r0, #8
 8013e16:	fb00 f303 	mul.w	r3, r0, r3
 8013e1a:	f023 0303 	bic.w	r3, r3, #3
 8013e1e:	440b      	add	r3, r1
 8013e20:	6839      	ldr	r1, [r7, #0]
 8013e22:	f891 1039 	ldrb.w	r1, [r1, #57]	; 0x39
 8013e26:	3908      	subs	r1, #8
 8013e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e2c:	6279      	str	r1, [r7, #36]	; 0x24
 8013e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e32:	4610      	mov	r0, r2
 8013e34:	4619      	mov	r1, r3
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	461a      	mov	r2, r3
 8013e3a:	f00d fde7 	bl	8021a0c <memcpy>
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
 8013e3e:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f7fe f9e0 	bl	8012210 <mixer_write>
                    break;
 8013e50:	e081      	b.n	8013f56 <chirp_write+0xd6a>
                }
                case MX_COLLECT:
                case CHIRP_TOPO:
                {
                    if (chirp_outl->round <= chirp_outl->round_setup)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	795b      	ldrb	r3, [r3, #5]
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d821      	bhi.n	8013ea8 <chirp_write+0xcbc>
                    {
                        if (chirp_outl->task == MX_COLLECT)
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	2b02      	cmp	r3, #2
 8013e6a:	d109      	bne.n	8013e80 <chirp_write+0xc94>
                            mixer_write(i, file_data, chirp_outl->payload_len);
 8013e6c:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013e78:	461a      	mov	r2, r3
 8013e7a:	f7fe f9c9 	bl	8012210 <mixer_write>
                    {
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
                        gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data, (chirp_outl->payload_len - DATA_HEADER_LENGTH));
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
                    }
                    break;
 8013e7e:	e069      	b.n	8013f54 <chirp_write+0xd68>
                            mixer_write(i, data, MIN(sizeof(data), chirp_outl->payload_len));
 8013e80:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013e84:	2308      	movs	r3, #8
 8013e86:	643b      	str	r3, [r7, #64]	; 0x40
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013e8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013e92:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	bf28      	it	cs
 8013e9c:	4613      	movcs	r3, r2
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	4937      	ldr	r1, [pc, #220]	; (8013f80 <chirp_write+0xd94>)
 8013ea2:	f7fe f9b5 	bl	8012210 <mixer_write>
                    break;
 8013ea6:	e055      	b.n	8013f54 <chirp_write+0xd68>
                    else if (chirp_outl->round > chirp_outl->round_setup)
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	795b      	ldrb	r3, [r3, #5]
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d94c      	bls.n	8013f54 <chirp_write+0xd68>
                        gpi_memcpy_dma((uint8_t *)(file_data), data, DATA_HEADER_LENGTH);
 8013eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ebc:	617b      	str	r3, [r7, #20]
 8013ebe:	4b30      	ldr	r3, [pc, #192]	; (8013f80 <chirp_write+0xd94>)
 8013ec0:	613b      	str	r3, [r7, #16]
 8013ec2:	2308      	movs	r3, #8
 8013ec4:	60fb      	str	r3, [r7, #12]
 8013ec6:	697a      	ldr	r2, [r7, #20]
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	4610      	mov	r0, r2
 8013ecc:	4619      	mov	r1, r3
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	f00d fd9b 	bl	8021a0c <memcpy>
                        gpi_memcpy_dma((uint32_t *)(file_data + DATA_HEADER_LENGTH), flash_data, (chirp_outl->payload_len - DATA_HEADER_LENGTH));
 8013ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ed8:	f103 0208 	add.w	r2, r3, #8
 8013edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ede:	6839      	ldr	r1, [r7, #0]
 8013ee0:	f891 1039 	ldrb.w	r1, [r1, #57]	; 0x39
 8013ee4:	3908      	subs	r1, #8
 8013ee6:	623a      	str	r2, [r7, #32]
 8013ee8:	61fb      	str	r3, [r7, #28]
 8013eea:	61b9      	str	r1, [r7, #24]
 8013eec:	6a3a      	ldr	r2, [r7, #32]
 8013eee:	69fb      	ldr	r3, [r7, #28]
 8013ef0:	4610      	mov	r0, r2
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	f00d fd88 	bl	8021a0c <memcpy>
                        mixer_write(i, (uint8_t *)file_data, chirp_outl->payload_len);
 8013efc:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013f00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f08:	461a      	mov	r2, r3
 8013f0a:	f7fe f981 	bl	8012210 <mixer_write>
                    break;
 8013f0e:	e021      	b.n	8013f54 <chirp_write+0xd68>
                }
                case CHIRP_CONNECTIVITY:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013f10:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013f14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	f7fe f977 	bl	8012210 <mixer_write>
                    break;
 8013f22:	e018      	b.n	8013f56 <chirp_write+0xd6a>
                }
                case CHIRP_VERSION:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013f24:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013f28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f30:	461a      	mov	r2, r3
 8013f32:	f7fe f96d 	bl	8012210 <mixer_write>
                    // mixer_write(i, data, MIN(sizeof(data), chirp_outl->payload_len));
                    break;
 8013f36:	e00e      	b.n	8013f56 <chirp_write+0xd6a>
                }
                case MX_ARRANGE:
                {
                    mixer_write(i, file_data, chirp_outl->payload_len);
 8013f38:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 8013f3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f44:	461a      	mov	r2, r3
 8013f46:	f7fe f963 	bl	8012210 <mixer_write>
                    break;
 8013f4a:	e004      	b.n	8013f56 <chirp_write+0xd6a>
                }
                default:
                    break;
            }
        }
 8013f4c:	bf00      	nop
 8013f4e:	e002      	b.n	8013f56 <chirp_write+0xd6a>
                    break;
 8013f50:	bf00      	nop
 8013f52:	e000      	b.n	8013f56 <chirp_write+0xd6a>
                    break;
 8013f54:	bf00      	nop
    for (i = 0; i < chirp_config.mx_generation_size; i++)
 8013f56:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8013f60:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	4b07      	ldr	r3, [pc, #28]	; (8013f84 <chirp_write+0xd98>)
 8013f68:	885b      	ldrh	r3, [r3, #2]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	f4ff aef1 	bcc.w	8013d54 <chirp_write+0xb68>
 8013f72:	46c5      	mov	sp, r8
    }
}
 8013f74:	bf00      	nop
 8013f76:	3760      	adds	r7, #96	; 0x60
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f7e:	bf00      	nop
 8013f80:	20000464 	.word	0x20000464
 8013f84:	20001430 	.word	0x20001430

08013f88 <chirp_recv>:

uint8_t chirp_recv(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 8013f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	b0a5      	sub	sp, #148	; 0x94
 8013f8e:	af0c      	add	r7, sp, #48	; 0x30
 8013f90:	4603      	mov	r3, r0
 8013f92:	61b9      	str	r1, [r7, #24]
 8013f94:	77fb      	strb	r3, [r7, #31]
 8013f96:	466b      	mov	r3, sp
 8013f98:	4698      	mov	r8, r3
	unsigned int		i;
    uint8_t round_inc = 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    uint8_t round_hash = 0;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    Mixer_Task arrange_task;
    uint8_t k = 0;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t packet_correct = 0;
 8013fac:	2300      	movs	r3, #0
 8013fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint32_t mask_negative[chirp_config.my_column_mask.len];
 8013fb2:	4ba7      	ldr	r3, [pc, #668]	; (8014250 <chirp_recv+0x2c8>)
 8013fb4:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8013fb8:	4603      	mov	r3, r0
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8013fbe:	b2c1      	uxtb	r1, r0
 8013fc0:	f04f 0200 	mov.w	r2, #0
 8013fc4:	f04f 0300 	mov.w	r3, #0
 8013fc8:	f04f 0400 	mov.w	r4, #0
 8013fcc:	0154      	lsls	r4, r2, #5
 8013fce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013fd2:	014b      	lsls	r3, r1, #5
 8013fd4:	b2c1      	uxtb	r1, r0
 8013fd6:	f04f 0200 	mov.w	r2, #0
 8013fda:	f04f 0300 	mov.w	r3, #0
 8013fde:	f04f 0400 	mov.w	r4, #0
 8013fe2:	0154      	lsls	r4, r2, #5
 8013fe4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013fe8:	014b      	lsls	r3, r1, #5
 8013fea:	4603      	mov	r3, r0
 8013fec:	009b      	lsls	r3, r3, #2
 8013fee:	3303      	adds	r3, #3
 8013ff0:	3307      	adds	r3, #7
 8013ff2:	08db      	lsrs	r3, r3, #3
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	ebad 0d03 	sub.w	sp, sp, r3
 8013ffa:	ab0c      	add	r3, sp, #48	; 0x30
 8013ffc:	3303      	adds	r3, #3
 8013ffe:	089b      	lsrs	r3, r3, #2
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t firmware_bitmap_temp[DISSEM_BITMAP_32];
    uint16_t pending;
    if ((chirp_outl->task == MX_DISSEMINATE) || (chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d007      	beq.n	801401c <chirp_recv+0x94>
 801400c:	69bb      	ldr	r3, [r7, #24]
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	2b02      	cmp	r3, #2
 8014012:	d003      	beq.n	801401c <chirp_recv+0x94>
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	2b04      	cmp	r3, #4
 801401a:	d135      	bne.n	8014088 <chirp_recv+0x100>
    {
        assert_reset(!((chirp_outl->payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014022:	f003 0307 	and.w	r3, r3, #7
 8014026:	2b00      	cmp	r3, #0
 8014028:	d016      	beq.n	8014058 <chirp_recv+0xd0>
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014030:	f003 0307 	and.w	r3, r3, #7
 8014034:	2b00      	cmp	r3, #0
 8014036:	d101      	bne.n	801403c <chirp_recv+0xb4>
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <chirp_recv+0xb6>
 801403c:	2300      	movs	r3, #0
 801403e:	4618      	mov	r0, r3
 8014040:	f00e fafc 	bl	802263c <iprintf>
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801404a:	f003 0307 	and.w	r3, r3, #7
 801404e:	2b00      	cmp	r3, #0
 8014050:	d002      	beq.n	8014058 <chirp_recv+0xd0>
 8014052:	b671      	cpsid	f
 8014054:	f7fe fcd4 	bl	8012a00 <NVIC_SystemReset>
        assert_reset(chirp_outl->payload_len > DATA_HEADER_LENGTH + 28);
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801405e:	2b24      	cmp	r3, #36	; 0x24
 8014060:	d812      	bhi.n	8014088 <chirp_recv+0x100>
 8014062:	69bb      	ldr	r3, [r7, #24]
 8014064:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014068:	2b24      	cmp	r3, #36	; 0x24
 801406a:	d901      	bls.n	8014070 <chirp_recv+0xe8>
 801406c:	2301      	movs	r3, #1
 801406e:	e000      	b.n	8014072 <chirp_recv+0xea>
 8014070:	2300      	movs	r3, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f00e fae2 	bl	802263c <iprintf>
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801407e:	2b24      	cmp	r3, #36	; 0x24
 8014080:	d802      	bhi.n	8014088 <chirp_recv+0x100>
 8014082:	b671      	cpsid	f
 8014084:	f7fe fcbc 	bl	8012a00 <NVIC_SystemReset>
    }
    uint32_t file_data[(chirp_outl->payload_len - DATA_HEADER_LENGTH) / sizeof(uint32_t)];
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801408e:	3b08      	subs	r3, #8
 8014090:	089d      	lsrs	r5, r3, #2
 8014092:	462b      	mov	r3, r5
 8014094:	3b01      	subs	r3, #1
 8014096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014098:	4629      	mov	r1, r5
 801409a:	f04f 0200 	mov.w	r2, #0
 801409e:	f04f 0300 	mov.w	r3, #0
 80140a2:	f04f 0400 	mov.w	r4, #0
 80140a6:	0154      	lsls	r4, r2, #5
 80140a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80140ac:	014b      	lsls	r3, r1, #5
 80140ae:	4629      	mov	r1, r5
 80140b0:	f04f 0200 	mov.w	r2, #0
 80140b4:	f04f 0300 	mov.w	r3, #0
 80140b8:	f04f 0400 	mov.w	r4, #0
 80140bc:	0154      	lsls	r4, r2, #5
 80140be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80140c2:	014b      	lsls	r3, r1, #5
 80140c4:	00ab      	lsls	r3, r5, #2
 80140c6:	3303      	adds	r3, #3
 80140c8:	3307      	adds	r3, #7
 80140ca:	08db      	lsrs	r3, r3, #3
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	ebad 0d03 	sub.w	sp, sp, r3
 80140d2:	ab0c      	add	r3, sp, #48	; 0x30
 80140d4:	3303      	adds	r3, #3
 80140d6:	089b      	lsrs	r3, r3, #2
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	64bb      	str	r3, [r7, #72]	; 0x48
    uint16_t file_round;
    uint8_t task_data[chirp_outl->payload_len - DATA_HEADER_LENGTH];
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80140e2:	f1a3 0608 	sub.w	r6, r3, #8
 80140e6:	1e73      	subs	r3, r6, #1
 80140e8:	647b      	str	r3, [r7, #68]	; 0x44
 80140ea:	4633      	mov	r3, r6
 80140ec:	4619      	mov	r1, r3
 80140ee:	f04f 0200 	mov.w	r2, #0
 80140f2:	f04f 0300 	mov.w	r3, #0
 80140f6:	f04f 0400 	mov.w	r4, #0
 80140fa:	00d4      	lsls	r4, r2, #3
 80140fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8014100:	00cb      	lsls	r3, r1, #3
 8014102:	4633      	mov	r3, r6
 8014104:	4619      	mov	r1, r3
 8014106:	f04f 0200 	mov.w	r2, #0
 801410a:	f04f 0300 	mov.w	r3, #0
 801410e:	f04f 0400 	mov.w	r4, #0
 8014112:	00d4      	lsls	r4, r2, #3
 8014114:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8014118:	00cb      	lsls	r3, r1, #3
 801411a:	4633      	mov	r3, r6
 801411c:	3307      	adds	r3, #7
 801411e:	08db      	lsrs	r3, r3, #3
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	ebad 0d03 	sub.w	sp, sp, r3
 8014126:	ab0c      	add	r3, sp, #48	; 0x30
 8014128:	3300      	adds	r3, #0
 801412a:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t receive_payload[chirp_outl->payload_len];
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8014132:	4603      	mov	r3, r0
 8014134:	3b01      	subs	r3, #1
 8014136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014138:	b2c1      	uxtb	r1, r0
 801413a:	f04f 0200 	mov.w	r2, #0
 801413e:	f04f 0300 	mov.w	r3, #0
 8014142:	f04f 0400 	mov.w	r4, #0
 8014146:	00d4      	lsls	r4, r2, #3
 8014148:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801414c:	00cb      	lsls	r3, r1, #3
 801414e:	b2c1      	uxtb	r1, r0
 8014150:	f04f 0200 	mov.w	r2, #0
 8014154:	f04f 0300 	mov.w	r3, #0
 8014158:	f04f 0400 	mov.w	r4, #0
 801415c:	00d4      	lsls	r4, r2, #3
 801415e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8014162:	00cb      	lsls	r3, r1, #3
 8014164:	4603      	mov	r3, r0
 8014166:	3307      	adds	r3, #7
 8014168:	08db      	lsrs	r3, r3, #3
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	ebad 0d03 	sub.w	sp, sp, r3
 8014170:	ab0c      	add	r3, sp, #48	; 0x30
 8014172:	3300      	adds	r3, #0
 8014174:	63bb      	str	r3, [r7, #56]	; 0x38

    if (!node_id)
 8014176:	7ffb      	ldrb	r3, [r7, #31]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d127      	bne.n	80141cc <chirp_recv+0x244>
    {
        PRINTF("-----column_pending = %lu-----\n", mx.request->my_column_pending);
 801417c:	4b35      	ldr	r3, [pc, #212]	; (8014254 <chirp_recv+0x2cc>)
 801417e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014182:	8a1b      	ldrh	r3, [r3, #16]
 8014184:	4619      	mov	r1, r3
 8014186:	4834      	ldr	r0, [pc, #208]	; (8014258 <chirp_recv+0x2d0>)
 8014188:	f00e fa58 	bl	802263c <iprintf>
        if ((chirp_outl->task == MX_COLLECT) && (chirp_outl->round > chirp_outl->round_setup))
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	2b02      	cmp	r3, #2
 8014192:	d10c      	bne.n	80141ae <chirp_recv+0x226>
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801419a:	b29a      	uxth	r2, r3
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	795b      	ldrb	r3, [r3, #5]
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d903      	bls.n	80141ae <chirp_recv+0x226>
            PRINTF("output from initiator (collect):\n");
 80141a6:	482d      	ldr	r0, [pc, #180]	; (801425c <chirp_recv+0x2d4>)
 80141a8:	f00e fad0 	bl	802274c <puts>
 80141ac:	e00e      	b.n	80141cc <chirp_recv+0x244>
        else if (chirp_outl->task == CHIRP_TOPO)
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	2b04      	cmp	r3, #4
 80141b4:	d103      	bne.n	80141be <chirp_recv+0x236>
            PRINTF("output from initiator (topology):\n");
 80141b6:	482a      	ldr	r0, [pc, #168]	; (8014260 <chirp_recv+0x2d8>)
 80141b8:	f00e fac8 	bl	802274c <puts>
 80141bc:	e006      	b.n	80141cc <chirp_recv+0x244>
        else if (chirp_outl->task == CHIRP_VERSION)
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	2b05      	cmp	r3, #5
 80141c4:	d102      	bne.n	80141cc <chirp_recv+0x244>
            PRINTF("output from initiator (version):\n");
 80141c6:	4827      	ldr	r0, [pc, #156]	; (8014264 <chirp_recv+0x2dc>)
 80141c8:	f00e fac0 	bl	802274c <puts>
    }

    if  (chirp_outl->task == MX_DISSEMINATE)
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	f040 80dd 	bne.w	8014390 <chirp_recv+0x408>
    {
        if ((!node_id) && (!chirp_outl->disem_flag))
 80141d6:	7ffb      	ldrb	r3, [r7, #31]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d136      	bne.n	801424a <chirp_recv+0x2c2>
 80141dc:	69bb      	ldr	r3, [r7, #24]
 80141de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d131      	bne.n	801424a <chirp_recv+0x2c2>
        {
            memcpy((uint32_t *)&(firmware_bitmap_temp[0]), (uint32_t *)&(chirp_outl->firmware_bitmap[0]), DISSEM_BITMAP_32 * sizeof(uint32_t));
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	3318      	adds	r3, #24
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < chirp_config.my_column_mask.len; i++)
 80141ee:	2300      	movs	r3, #0
 80141f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80141f2:	e013      	b.n	801421c <chirp_recv+0x294>
                mask_negative[i] = ~mx.request->mask[chirp_config.my_column_mask.pos + i];
 80141f4:	4b17      	ldr	r3, [pc, #92]	; (8014254 <chirp_recv+0x2cc>)
 80141f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80141fa:	4a15      	ldr	r2, [pc, #84]	; (8014250 <chirp_recv+0x2c8>)
 80141fc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8014200:	4611      	mov	r1, r2
 8014202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014204:	440a      	add	r2, r1
 8014206:	3206      	adds	r2, #6
 8014208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801420c:	43d9      	mvns	r1, r3
 801420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (i = 0; i < chirp_config.my_column_mask.len; i++)
 8014216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014218:	3301      	adds	r3, #1
 801421a:	65bb      	str	r3, [r7, #88]	; 0x58
 801421c:	4b0c      	ldr	r3, [pc, #48]	; (8014250 <chirp_recv+0x2c8>)
 801421e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8014222:	461a      	mov	r2, r3
 8014224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014226:	4293      	cmp	r3, r2
 8014228:	d3e4      	bcc.n	80141f4 <chirp_recv+0x26c>
            pending = mx_request_clear((uint32_t *)&(firmware_bitmap_temp[0]), (uint_fast_t *)&(mask_negative[0]), DISSEM_BITMAP_32 * sizeof(uint32_t));
 801422a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801422c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014230:	2204      	movs	r2, #4
 8014232:	4618      	mov	r0, r3
 8014234:	f004 fe40 	bl	8018eb8 <mx_request_clear>
 8014238:	4603      	mov	r3, r0
 801423a:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (pending == 0)
 801423c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801423e:	2b00      	cmp	r3, #0
 8014240:	d103      	bne.n	801424a <chirp_recv+0x2c2>
                chirp_config.full_column = 0;
 8014242:	4b03      	ldr	r3, [pc, #12]	; (8014250 <chirp_recv+0x2c8>)
 8014244:	2200      	movs	r2, #0
 8014246:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        }

        for (i = 0; i < chirp_config.mx_generation_size; i++)
 801424a:	2300      	movs	r3, #0
 801424c:	65bb      	str	r3, [r7, #88]	; 0x58
 801424e:	e086      	b.n	801435e <chirp_recv+0x3d6>
 8014250:	20001430 	.word	0x20001430
 8014254:	200014f0 	.word	0x200014f0
 8014258:	080258e0 	.word	0x080258e0
 801425c:	08025900 	.word	0x08025900
 8014260:	08025924 	.word	0x08025924
 8014264:	08025948 	.word	0x08025948
        {
            void *p = mixer_read(i);
 8014268:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801426a:	f7fe fb29 	bl	80128c0 <mixer_read>
 801426e:	6338      	str	r0, [r7, #48]	; 0x30
            if (NULL != p)
 8014270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014272:	2b00      	cmp	r3, #0
 8014274:	d070      	beq.n	8014358 <chirp_recv+0x3d0>
            {
                memcpy(receive_payload, p, chirp_config.matrix_payload_8.len);
 8014276:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014278:	4b83      	ldr	r3, [pc, #524]	; (8014488 <chirp_recv+0x500>)
 801427a:	7edb      	ldrb	r3, [r3, #27]
 801427c:	461a      	mov	r2, r3
 801427e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014280:	f00d fbc4 	bl	8021a0c <memcpy>
                calu_payload_hash = Chirp_RSHash((uint8_t *)receive_payload, chirp_config.matrix_payload_8.len - 2);
 8014284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014286:	4b80      	ldr	r3, [pc, #512]	; (8014488 <chirp_recv+0x500>)
 8014288:	7edb      	ldrb	r3, [r3, #27]
 801428a:	3b02      	subs	r3, #2
 801428c:	4619      	mov	r1, r3
 801428e:	4610      	mov	r0, r2
 8014290:	f00b f84c 	bl	801f32c <Chirp_RSHash>
 8014294:	4603      	mov	r3, r0
 8014296:	b29a      	uxth	r2, r3
 8014298:	4b7c      	ldr	r3, [pc, #496]	; (801448c <chirp_recv+0x504>)
 801429a:	801a      	strh	r2, [r3, #0]
                rece_hash = receive_payload[chirp_config.matrix_payload_8.len - 2] << 8 | receive_payload[chirp_config.matrix_payload_8.len - 1];
 801429c:	4b7a      	ldr	r3, [pc, #488]	; (8014488 <chirp_recv+0x500>)
 801429e:	7edb      	ldrb	r3, [r3, #27]
 80142a0:	3b02      	subs	r3, #2
 80142a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142a4:	5cd3      	ldrb	r3, [r2, r3]
 80142a6:	021b      	lsls	r3, r3, #8
 80142a8:	b21a      	sxth	r2, r3
 80142aa:	4b77      	ldr	r3, [pc, #476]	; (8014488 <chirp_recv+0x500>)
 80142ac:	7edb      	ldrb	r3, [r3, #27]
 80142ae:	3b01      	subs	r3, #1
 80142b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142b2:	5ccb      	ldrb	r3, [r1, r3]
 80142b4:	b21b      	sxth	r3, r3
 80142b6:	4313      	orrs	r3, r2
 80142b8:	b21b      	sxth	r3, r3
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	4b74      	ldr	r3, [pc, #464]	; (8014490 <chirp_recv+0x508>)
 80142be:	801a      	strh	r2, [r3, #0]
                PRINTF("rece_hash:%lu, %x, %x, %lu\n", i, rece_hash, (uint16_t)calu_payload_hash, chirp_config.matrix_payload_8.len);
 80142c0:	4b73      	ldr	r3, [pc, #460]	; (8014490 <chirp_recv+0x508>)
 80142c2:	881b      	ldrh	r3, [r3, #0]
 80142c4:	461a      	mov	r2, r3
 80142c6:	4b71      	ldr	r3, [pc, #452]	; (801448c <chirp_recv+0x504>)
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	4619      	mov	r1, r3
 80142cc:	4b6e      	ldr	r3, [pc, #440]	; (8014488 <chirp_recv+0x500>)
 80142ce:	7edb      	ldrb	r3, [r3, #27]
 80142d0:	9300      	str	r3, [sp, #0]
 80142d2:	460b      	mov	r3, r1
 80142d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80142d6:	486f      	ldr	r0, [pc, #444]	; (8014494 <chirp_recv+0x50c>)
 80142d8:	f00e f9b0 	bl	802263c <iprintf>
                if (((uint16_t)calu_payload_hash == rece_hash) && (rece_hash))
 80142dc:	4b6b      	ldr	r3, [pc, #428]	; (801448c <chirp_recv+0x504>)
 80142de:	881a      	ldrh	r2, [r3, #0]
 80142e0:	4b6b      	ldr	r3, [pc, #428]	; (8014490 <chirp_recv+0x508>)
 80142e2:	881b      	ldrh	r3, [r3, #0]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d137      	bne.n	8014358 <chirp_recv+0x3d0>
 80142e8:	4b69      	ldr	r3, [pc, #420]	; (8014490 <chirp_recv+0x508>)
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d033      	beq.n	8014358 <chirp_recv+0x3d0>
                {
                    rece_dissem_index = (receive_payload[ROUND_HEADER_LENGTH] << 8 | receive_payload[ROUND_HEADER_LENGTH + 1]);
 80142f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f2:	791b      	ldrb	r3, [r3, #4]
 80142f4:	021b      	lsls	r3, r3, #8
 80142f6:	b21a      	sxth	r2, r3
 80142f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142fa:	795b      	ldrb	r3, [r3, #5]
 80142fc:	b21b      	sxth	r3, r3
 80142fe:	4313      	orrs	r3, r2
 8014300:	b21b      	sxth	r3, r3
 8014302:	b29a      	uxth	r2, r3
 8014304:	4b64      	ldr	r3, [pc, #400]	; (8014498 <chirp_recv+0x510>)
 8014306:	801a      	strh	r2, [r3, #0]
                    if (rece_dissem_index >= chirp_outl->disem_file_max + 1)
 8014308:	4b63      	ldr	r3, [pc, #396]	; (8014498 <chirp_recv+0x510>)
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	461a      	mov	r2, r3
 801430e:	69bb      	ldr	r3, [r7, #24]
 8014310:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014314:	b29b      	uxth	r3, r3
 8014316:	3301      	adds	r3, #1
 8014318:	429a      	cmp	r2, r3
 801431a:	db08      	blt.n	801432e <chirp_recv+0x3a6>
                        chirp_outl->disem_file_index++;
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014322:	b29b      	uxth	r3, r3
 8014324:	3301      	adds	r3, #1
 8014326:	b29a      	uxth	r2, r3
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                    PRINTF("dissem_index:%lu, %lu\n", rece_dissem_index, chirp_outl->disem_file_index);
 801432e:	4b5a      	ldr	r3, [pc, #360]	; (8014498 <chirp_recv+0x510>)
 8014330:	881b      	ldrh	r3, [r3, #0]
 8014332:	4619      	mov	r1, r3
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801433a:	b29b      	uxth	r3, r3
 801433c:	461a      	mov	r2, r3
 801433e:	4857      	ldr	r0, [pc, #348]	; (801449c <chirp_recv+0x514>)
 8014340:	f00e f97c 	bl	802263c <iprintf>
                    round_hash++;
 8014344:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8014348:	3301      	adds	r3, #1
 801434a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                    PRINT_PACKET(p, DATA_HEADER_LENGTH, 1);
 801434e:	2201      	movs	r2, #1
 8014350:	2108      	movs	r1, #8
 8014352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014354:	f7fe fb68 	bl	8012a28 <PRINT_PACKET>
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8014358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801435a:	3301      	adds	r3, #1
 801435c:	65bb      	str	r3, [r7, #88]	; 0x58
 801435e:	4b4a      	ldr	r3, [pc, #296]	; (8014488 <chirp_recv+0x500>)
 8014360:	885b      	ldrh	r3, [r3, #2]
 8014362:	b29b      	uxth	r3, r3
 8014364:	461a      	mov	r2, r3
 8014366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014368:	4293      	cmp	r3, r2
 801436a:	f4ff af7d 	bcc.w	8014268 <chirp_recv+0x2e0>
                }
            }
        }

        if (round_hash == chirp_config.mx_generation_size)
 801436e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8014372:	b29a      	uxth	r2, r3
 8014374:	4b44      	ldr	r3, [pc, #272]	; (8014488 <chirp_recv+0x500>)
 8014376:	885b      	ldrh	r3, [r3, #2]
 8014378:	b29b      	uxth	r3, r3
 801437a:	429a      	cmp	r2, r3
 801437c:	d104      	bne.n	8014388 <chirp_recv+0x400>
            chirp_config.full_rank = 1;
 801437e:	4b42      	ldr	r3, [pc, #264]	; (8014488 <chirp_recv+0x500>)
 8014380:	2201      	movs	r2, #1
 8014382:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8014386:	e003      	b.n	8014390 <chirp_recv+0x408>
        else
        {
            mx.stat_counter.slot_decoded = 0;
 8014388:	4b45      	ldr	r3, [pc, #276]	; (80144a0 <chirp_recv+0x518>)
 801438a:	2200      	movs	r2, #0
 801438c:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
        }
    }
	if (chirp_config.primitive != FLOODING)
 8014390:	4b3d      	ldr	r3, [pc, #244]	; (8014488 <chirp_recv+0x500>)
 8014392:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014396:	2b01      	cmp	r3, #1
 8014398:	d005      	beq.n	80143a6 <chirp_recv+0x41e>
	{
        free(mx.request);
 801439a:	4b41      	ldr	r3, [pc, #260]	; (80144a0 <chirp_recv+0x518>)
 801439c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80143a0:	4618      	mov	r0, r3
 80143a2:	f00d fb2b 	bl	80219fc <free>
    }

    if (((chirp_config.full_rank) && (chirp_outl->task == MX_DISSEMINATE)) || (chirp_outl->task != MX_DISSEMINATE))
 80143a6:	4b38      	ldr	r3, [pc, #224]	; (8014488 <chirp_recv+0x500>)
 80143a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d003      	beq.n	80143b8 <chirp_recv+0x430>
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d004      	beq.n	80143c2 <chirp_recv+0x43a>
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	2b01      	cmp	r3, #1
 80143be:	f000 84fa 	beq.w	8014db6 <chirp_recv+0xe2e>
    {
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 80143c2:	2300      	movs	r3, #0
 80143c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80143c6:	f000 bcee 	b.w	8014da6 <chirp_recv+0xe1e>
        {
            void *p = mixer_read(i);
 80143ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80143cc:	f7fe fa78 	bl	80128c0 <mixer_read>
 80143d0:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (NULL != p)
 80143d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	f000 84e3 	beq.w	8014da0 <chirp_recv+0xe18>
            {
                memcpy(data, p, sizeof(data));
 80143da:	4b32      	ldr	r3, [pc, #200]	; (80144a4 <chirp_recv+0x51c>)
 80143dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143de:	6810      	ldr	r0, [r2, #0]
 80143e0:	6851      	ldr	r1, [r2, #4]
 80143e2:	c303      	stmia	r3!, {r0, r1}
                if (chirp_outl->task != MX_DISSEMINATE)
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	d032      	beq.n	8014452 <chirp_recv+0x4ca>
                {
                    memcpy(receive_payload, p, chirp_config.matrix_payload_8.len);
 80143ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80143ee:	4b26      	ldr	r3, [pc, #152]	; (8014488 <chirp_recv+0x500>)
 80143f0:	7edb      	ldrb	r3, [r3, #27]
 80143f2:	461a      	mov	r2, r3
 80143f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143f6:	f00d fb09 	bl	8021a0c <memcpy>
                    calu_payload_hash = Chirp_RSHash((uint8_t *)receive_payload, chirp_config.matrix_payload_8.len - 2);
 80143fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80143fc:	4b22      	ldr	r3, [pc, #136]	; (8014488 <chirp_recv+0x500>)
 80143fe:	7edb      	ldrb	r3, [r3, #27]
 8014400:	3b02      	subs	r3, #2
 8014402:	4619      	mov	r1, r3
 8014404:	4610      	mov	r0, r2
 8014406:	f00a ff91 	bl	801f32c <Chirp_RSHash>
 801440a:	4603      	mov	r3, r0
 801440c:	b29a      	uxth	r2, r3
 801440e:	4b1f      	ldr	r3, [pc, #124]	; (801448c <chirp_recv+0x504>)
 8014410:	801a      	strh	r2, [r3, #0]
                    rece_hash = receive_payload[chirp_config.matrix_payload_8.len - 2] << 8 | receive_payload[chirp_config.matrix_payload_8.len - 1];
 8014412:	4b1d      	ldr	r3, [pc, #116]	; (8014488 <chirp_recv+0x500>)
 8014414:	7edb      	ldrb	r3, [r3, #27]
 8014416:	3b02      	subs	r3, #2
 8014418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801441a:	5cd3      	ldrb	r3, [r2, r3]
 801441c:	021b      	lsls	r3, r3, #8
 801441e:	b21a      	sxth	r2, r3
 8014420:	4b19      	ldr	r3, [pc, #100]	; (8014488 <chirp_recv+0x500>)
 8014422:	7edb      	ldrb	r3, [r3, #27]
 8014424:	3b01      	subs	r3, #1
 8014426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014428:	5ccb      	ldrb	r3, [r1, r3]
 801442a:	b21b      	sxth	r3, r3
 801442c:	4313      	orrs	r3, r2
 801442e:	b21b      	sxth	r3, r3
 8014430:	b29a      	uxth	r2, r3
 8014432:	4b17      	ldr	r3, [pc, #92]	; (8014490 <chirp_recv+0x508>)
 8014434:	801a      	strh	r2, [r3, #0]
                    PRINTF("rece_hash:%lu, %x, %x, %lu\n", i, rece_hash, (uint16_t)calu_payload_hash, chirp_config.matrix_payload_8.len);
 8014436:	4b16      	ldr	r3, [pc, #88]	; (8014490 <chirp_recv+0x508>)
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	4b13      	ldr	r3, [pc, #76]	; (801448c <chirp_recv+0x504>)
 801443e:	881b      	ldrh	r3, [r3, #0]
 8014440:	4619      	mov	r1, r3
 8014442:	4b11      	ldr	r3, [pc, #68]	; (8014488 <chirp_recv+0x500>)
 8014444:	7edb      	ldrb	r3, [r3, #27]
 8014446:	9300      	str	r3, [sp, #0]
 8014448:	460b      	mov	r3, r1
 801444a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801444c:	4811      	ldr	r0, [pc, #68]	; (8014494 <chirp_recv+0x50c>)
 801444e:	f00e f8f5 	bl	802263c <iprintf>
                }
                // PRINT_PACKET(data, DATA_HEADER_LENGTH, 1);
                packet_correct = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if ((data[DATA_HEADER_LENGTH - 1] == chirp_outl->task))
 8014458:	4b12      	ldr	r3, [pc, #72]	; (80144a4 <chirp_recv+0x51c>)
 801445a:	79da      	ldrb	r2, [r3, #7]
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	429a      	cmp	r2, r3
 8014462:	d128      	bne.n	80144b6 <chirp_recv+0x52e>
                {
                    if ((chirp_outl->task != MX_DISSEMINATE) && ((uint16_t)calu_payload_hash == rece_hash) && (rece_hash))
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	2b01      	cmp	r3, #1
 801446a:	d01d      	beq.n	80144a8 <chirp_recv+0x520>
 801446c:	4b07      	ldr	r3, [pc, #28]	; (801448c <chirp_recv+0x504>)
 801446e:	881a      	ldrh	r2, [r3, #0]
 8014470:	4b07      	ldr	r3, [pc, #28]	; (8014490 <chirp_recv+0x508>)
 8014472:	881b      	ldrh	r3, [r3, #0]
 8014474:	429a      	cmp	r2, r3
 8014476:	d117      	bne.n	80144a8 <chirp_recv+0x520>
 8014478:	4b05      	ldr	r3, [pc, #20]	; (8014490 <chirp_recv+0x508>)
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d013      	beq.n	80144a8 <chirp_recv+0x520>
                        packet_correct = 1;
 8014480:	2301      	movs	r3, #1
 8014482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014486:	e016      	b.n	80144b6 <chirp_recv+0x52e>
 8014488:	20001430 	.word	0x20001430
 801448c:	20001e26 	.word	0x20001e26
 8014490:	20001da0 	.word	0x20001da0
 8014494:	0802596c 	.word	0x0802596c
 8014498:	20000470 	.word	0x20000470
 801449c:	08025988 	.word	0x08025988
 80144a0:	200014f0 	.word	0x200014f0
 80144a4:	20000464 	.word	0x20000464
                    else if (chirp_outl->task == MX_DISSEMINATE)
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d102      	bne.n	80144b6 <chirp_recv+0x52e>
                        packet_correct = 1;
 80144b0:	2301      	movs	r3, #1
 80144b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                }
                if (packet_correct)
 80144b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f000 8470 	beq.w	8014da0 <chirp_recv+0xe18>
                {
                    /* print packet */
                    PRINT_PACKET(data, DATA_HEADER_LENGTH, 1);
 80144c0:	2201      	movs	r2, #1
 80144c2:	2108      	movs	r1, #8
 80144c4:	4880      	ldr	r0, [pc, #512]	; (80146c8 <chirp_recv+0x740>)
 80144c6:	f7fe faaf 	bl	8012a28 <PRINT_PACKET>
                    if (chirp_outl->task != MX_ARRANGE)
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	2b06      	cmp	r3, #6
 80144d0:	d022      	beq.n	8014518 <chirp_recv+0x590>
                    {
                        /* check/adapt round number by message 0 (initiator) */
                        if ((0 == i) && (chirp_outl->payload_len >= 7))
 80144d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d11f      	bne.n	8014518 <chirp_recv+0x590>
 80144d8:	69bb      	ldr	r3, [r7, #24]
 80144da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80144de:	2b06      	cmp	r3, #6
 80144e0:	d91a      	bls.n	8014518 <chirp_recv+0x590>
                        {
                            Generic32	r;
                            r.u8_ll = data[2];
 80144e2:	4b79      	ldr	r3, [pc, #484]	; (80146c8 <chirp_recv+0x740>)
 80144e4:	789b      	ldrb	r3, [r3, #2]
 80144e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                            r.u8_lh = data[1];
 80144ea:	4b77      	ldr	r3, [pc, #476]	; (80146c8 <chirp_recv+0x740>)
 80144ec:	785b      	ldrb	r3, [r3, #1]
 80144ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                            r.u8_hl = 0;
 80144f2:	2300      	movs	r3, #0
 80144f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                            r.u8_hh = 0;
 80144f8:	2300      	movs	r3, #0
 80144fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            if (chirp_outl->round != r.u32)
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014504:	b29b      	uxth	r3, r3
 8014506:	461a      	mov	r2, r3
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	429a      	cmp	r2, r3
 801450c:	d004      	beq.n	8014518 <chirp_recv+0x590>
                                chirp_outl->round = r.u32;
 801450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014510:	b29a      	uxth	r2, r3
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	f8a3 2001 	strh.w	r2, [r3, #1]
                        }
                    }
                    if (chirp_outl->task != MX_DISSEMINATE)
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d002      	beq.n	8014526 <chirp_recv+0x59e>
                        k = ROUND_HEADER_LENGTH;
 8014520:	2304      	movs	r3, #4
 8014522:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                    switch (chirp_outl->task)
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b06      	cmp	r3, #6
 801452c:	f200 8415 	bhi.w	8014d5a <chirp_recv+0xdd2>
 8014530:	a201      	add	r2, pc, #4	; (adr r2, 8014538 <chirp_recv+0x5b0>)
 8014532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014536:	bf00      	nop
 8014538:	08014555 	.word	0x08014555
 801453c:	080146d1 	.word	0x080146d1
 8014540:	08014a89 	.word	0x08014a89
 8014544:	08014be3 	.word	0x08014be3
 8014548:	08014a89 	.word	0x08014a89
 801454c:	08014c45 	.word	0x08014c45
 8014550:	08014c71 	.word	0x08014c71
                    {
                        case CHIRP_START:
                        {
                            if (node_id)
 8014554:	7ffb      	ldrb	r3, [r7, #31]
 8014556:	2b00      	cmp	r3, #0
 8014558:	f000 8401 	beq.w	8014d5e <chirp_recv+0xdd6>
                            {
                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 801455c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014560:	3308      	adds	r3, #8
 8014562:	4632      	mov	r2, r6
 8014564:	4619      	mov	r1, r3
 8014566:	f00d fa51 	bl	8021a0c <memcpy>
                                chirp_outl->start_year = (task_data[0] << 8) | (task_data[1]);
 801456a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	021b      	lsls	r3, r3, #8
 8014570:	b21a      	sxth	r2, r3
 8014572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014574:	785b      	ldrb	r3, [r3, #1]
 8014576:	b21b      	sxth	r3, r3
 8014578:	4313      	orrs	r3, r2
 801457a:	b21b      	sxth	r3, r3
 801457c:	b29a      	uxth	r2, r3
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	851a      	strh	r2, [r3, #40]	; 0x28
                                chirp_outl->start_month = task_data[2];
 8014582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014584:	789a      	ldrb	r2, [r3, #2]
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                chirp_outl->start_date = task_data[3];
 801458c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801458e:	78da      	ldrb	r2, [r3, #3]
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                chirp_outl->start_hour = task_data[4];
 8014596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014598:	791a      	ldrb	r2, [r3, #4]
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                                chirp_outl->start_min = task_data[5];
 80145a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145a2:	795a      	ldrb	r2, [r3, #5]
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                chirp_outl->start_sec = task_data[6];
 80145aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ac:	799a      	ldrb	r2, [r3, #6]
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                chirp_outl->end_year = (task_data[7] << 8) | (task_data[8]);
 80145b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145b6:	79db      	ldrb	r3, [r3, #7]
 80145b8:	021b      	lsls	r3, r3, #8
 80145ba:	b21a      	sxth	r2, r3
 80145bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145be:	7a1b      	ldrb	r3, [r3, #8]
 80145c0:	b21b      	sxth	r3, r3
 80145c2:	4313      	orrs	r3, r2
 80145c4:	b21b      	sxth	r3, r3
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	f8a3 202f 	strh.w	r2, [r3, #47]	; 0x2f
                                chirp_outl->end_month = task_data[9];
 80145ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145d0:	7a5a      	ldrb	r2, [r3, #9]
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                chirp_outl->end_date = task_data[10];
 80145d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145da:	7a9a      	ldrb	r2, [r3, #10]
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                                chirp_outl->end_hour = task_data[11];
 80145e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145e4:	7ada      	ldrb	r2, [r3, #11]
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                chirp_outl->end_min = task_data[12];
 80145ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ee:	7b1a      	ldrb	r2, [r3, #12]
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                chirp_outl->end_sec = task_data[13];
 80145f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f8:	7b5a      	ldrb	r2, [r3, #13]
 80145fa:	69bb      	ldr	r3, [r7, #24]
 80145fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                chirp_outl->flash_protection = task_data[14];
 8014600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014602:	7b9a      	ldrb	r2, [r3, #14]
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                chirp_outl->version_hash = (task_data[15] << 8) | (task_data[16]);
 801460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801460c:	7bdb      	ldrb	r3, [r3, #15]
 801460e:	021b      	lsls	r3, r3, #8
 8014610:	b21a      	sxth	r2, r3
 8014612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014614:	7c1b      	ldrb	r3, [r3, #16]
 8014616:	b21b      	sxth	r3, r3
 8014618:	4313      	orrs	r3, r2
 801461a:	b21b      	sxth	r3, r3
 801461c:	b29a      	uxth	r2, r3
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                                PRINTF("\t receive, START at %lu-%lu-%lu, %lu:%lu:%lu\n\tEnd at %lu-%lu-%lu, %lu:%lu:%lu\n, flash_protection:%lu, v:%x\n", chirp_outl->start_year, chirp_outl->start_month, chirp_outl->start_date, chirp_outl->start_hour, chirp_outl->start_min, chirp_outl->start_sec, chirp_outl->end_year, chirp_outl->end_month, chirp_outl->end_date, chirp_outl->end_hour, chirp_outl->end_min, chirp_outl->end_sec, chirp_outl->flash_protection, chirp_outl->version_hash);
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014628:	b29b      	uxth	r3, r3
 801462a:	469c      	mov	ip, r3
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8014632:	469e      	mov	lr, r3
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801463a:	4699      	mov	r9, r3
 801463c:	69bb      	ldr	r3, [r7, #24]
 801463e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014642:	461c      	mov	r4, r3
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801464a:	617b      	str	r3, [r7, #20]
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8014652:	613b      	str	r3, [r7, #16]
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801465a:	b29b      	uxth	r3, r3
 801465c:	60fb      	str	r3, [r7, #12]
 801465e:	69bb      	ldr	r3, [r7, #24]
 8014660:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014664:	60bb      	str	r3, [r7, #8]
 8014666:	69bb      	ldr	r3, [r7, #24]
 8014668:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801466c:	607b      	str	r3, [r7, #4]
 801466e:	69bb      	ldr	r3, [r7, #24]
 8014670:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8014674:	603b      	str	r3, [r7, #0]
 8014676:	69bb      	ldr	r3, [r7, #24]
 8014678:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801467c:	4618      	mov	r0, r3
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014684:	4619      	mov	r1, r3
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801468c:	461a      	mov	r2, r3
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014694:	b29b      	uxth	r3, r3
 8014696:	930a      	str	r3, [sp, #40]	; 0x28
 8014698:	9209      	str	r2, [sp, #36]	; 0x24
 801469a:	9108      	str	r1, [sp, #32]
 801469c:	9007      	str	r0, [sp, #28]
 801469e:	683a      	ldr	r2, [r7, #0]
 80146a0:	9206      	str	r2, [sp, #24]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	9205      	str	r2, [sp, #20]
 80146a6:	68ba      	ldr	r2, [r7, #8]
 80146a8:	9204      	str	r2, [sp, #16]
 80146aa:	68fa      	ldr	r2, [r7, #12]
 80146ac:	9203      	str	r2, [sp, #12]
 80146ae:	693a      	ldr	r2, [r7, #16]
 80146b0:	9202      	str	r2, [sp, #8]
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	9400      	str	r4, [sp, #0]
 80146b8:	464b      	mov	r3, r9
 80146ba:	4672      	mov	r2, lr
 80146bc:	4661      	mov	r1, ip
 80146be:	4803      	ldr	r0, [pc, #12]	; (80146cc <chirp_recv+0x744>)
 80146c0:	f00d ffbc 	bl	802263c <iprintf>
                            }
                            break;
 80146c4:	e34b      	b.n	8014d5e <chirp_recv+0xdd6>
 80146c6:	bf00      	nop
 80146c8:	20000464 	.word	0x20000464
 80146cc:	080259a0 	.word	0x080259a0
                        }
                        case MX_DISSEMINATE:
                        {
                            /* MX_DISSEMINATE */
                            if (!chirp_outl->disem_file_index)
 80146d0:	69bb      	ldr	r3, [r7, #24]
 80146d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f040 8121 	bne.w	8014920 <chirp_recv+0x998>
                            {
                                if (node_id)
 80146de:	7ffb      	ldrb	r3, [r7, #31]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	f000 833e 	beq.w	8014d62 <chirp_recv+0xdda>
                                {
                                    /* compare / increase the index */
                                    if (chirp_outl->disem_file_index == (data[ROUND_HEADER_LENGTH] << 8 | data[ROUND_HEADER_LENGTH + 1]))
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	4619      	mov	r1, r3
 80146f0:	4bb4      	ldr	r3, [pc, #720]	; (80149c4 <chirp_recv+0xa3c>)
 80146f2:	791b      	ldrb	r3, [r3, #4]
 80146f4:	021b      	lsls	r3, r3, #8
 80146f6:	4ab3      	ldr	r2, [pc, #716]	; (80149c4 <chirp_recv+0xa3c>)
 80146f8:	7952      	ldrb	r2, [r2, #5]
 80146fa:	4313      	orrs	r3, r2
 80146fc:	4299      	cmp	r1, r3
 80146fe:	f040 8330 	bne.w	8014d62 <chirp_recv+0xdda>
                                    {
                                        if (i == 0)
 8014702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014704:	2b00      	cmp	r3, #0
 8014706:	f040 80f1 	bne.w	80148ec <chirp_recv+0x964>
                                        {
                                            memcpy(&(chirp_outl->disem_file_memory[0]), (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(file_data));
 801470a:	69bb      	ldr	r3, [r7, #24]
 801470c:	f8d3 0065 	ldr.w	r0, [r3, #101]	; 0x65
 8014710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014712:	3308      	adds	r3, #8
 8014714:	00aa      	lsls	r2, r5, #2
 8014716:	4619      	mov	r1, r3
 8014718:	f00d f978 	bl	8021a0c <memcpy>

                                            memcpy(data, &(chirp_outl->disem_file_memory[0]), DATA_HEADER_LENGTH + 1);
 801471c:	69bb      	ldr	r3, [r7, #24]
 801471e:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 8014722:	2209      	movs	r2, #9
 8014724:	4619      	mov	r1, r3
 8014726:	48a7      	ldr	r0, [pc, #668]	; (80149c4 <chirp_recv+0xa3c>)
 8014728:	f00d f970 	bl	8021a0c <memcpy>
                                            chirp_outl->firmware_size = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);
 801472c:	4ba5      	ldr	r3, [pc, #660]	; (80149c4 <chirp_recv+0xa3c>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	061a      	lsls	r2, r3, #24
 8014732:	4ba4      	ldr	r3, [pc, #656]	; (80149c4 <chirp_recv+0xa3c>)
 8014734:	785b      	ldrb	r3, [r3, #1]
 8014736:	041b      	lsls	r3, r3, #16
 8014738:	431a      	orrs	r2, r3
 801473a:	4ba2      	ldr	r3, [pc, #648]	; (80149c4 <chirp_recv+0xa3c>)
 801473c:	789b      	ldrb	r3, [r3, #2]
 801473e:	021b      	lsls	r3, r3, #8
 8014740:	4313      	orrs	r3, r2
 8014742:	4aa0      	ldr	r2, [pc, #640]	; (80149c4 <chirp_recv+0xa3c>)
 8014744:	78d2      	ldrb	r2, [r2, #3]
 8014746:	4313      	orrs	r3, r2
 8014748:	461a      	mov	r2, r3
 801474a:	69bb      	ldr	r3, [r7, #24]
 801474c:	63da      	str	r2, [r3, #60]	; 0x3c
                                            chirp_outl->patch_update = data[4];
 801474e:	4b9d      	ldr	r3, [pc, #628]	; (80149c4 <chirp_recv+0xa3c>)
 8014750:	791a      	ldrb	r2, [r3, #4]
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                                            chirp_outl->patch_bank = data[5];
 8014758:	4b9a      	ldr	r3, [pc, #616]	; (80149c4 <chirp_recv+0xa3c>)
 801475a:	795a      	ldrb	r2, [r3, #5]
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                            chirp_outl->disem_file_max = (chirp_outl->firmware_size + chirp_outl->file_chunk_len - 1) / chirp_outl->file_chunk_len  + 1;
 8014762:	69bb      	ldr	r3, [r7, #24]
 8014764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014766:	69ba      	ldr	r2, [r7, #24]
 8014768:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 801476a:	b292      	uxth	r2, r2
 801476c:	4413      	add	r3, r2
 801476e:	3b01      	subs	r3, #1
 8014770:	69ba      	ldr	r2, [r7, #24]
 8014772:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8014774:	b292      	uxth	r2, r2
 8014776:	fbb3 f3f2 	udiv	r3, r3, r2
 801477a:	b29b      	uxth	r3, r3
 801477c:	3301      	adds	r3, #1
 801477e:	b29a      	uxth	r2, r3
 8014780:	69bb      	ldr	r3, [r7, #24]
 8014782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                            chirp_outl->version_hash = (data[6] << 8) | (data[7]);
 8014786:	4b8f      	ldr	r3, [pc, #572]	; (80149c4 <chirp_recv+0xa3c>)
 8014788:	799b      	ldrb	r3, [r3, #6]
 801478a:	021b      	lsls	r3, r3, #8
 801478c:	b21a      	sxth	r2, r3
 801478e:	4b8d      	ldr	r3, [pc, #564]	; (80149c4 <chirp_recv+0xa3c>)
 8014790:	79db      	ldrb	r3, [r3, #7]
 8014792:	b21b      	sxth	r3, r3
 8014794:	4313      	orrs	r3, r2
 8014796:	b21b      	sxth	r3, r3
 8014798:	b29a      	uxth	r2, r3
 801479a:	69bb      	ldr	r3, [r7, #24]
 801479c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                                            chirp_outl->file_compression = data[8];
 80147a0:	4b88      	ldr	r3, [pc, #544]	; (80149c4 <chirp_recv+0xa3c>)
 80147a2:	7a1b      	ldrb	r3, [r3, #8]
 80147a4:	461a      	mov	r2, r3
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
                                            PRINTF("version_hash:%x, %x, %x\n", chirp_outl->version_hash, data[6], data[7]);
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	4619      	mov	r1, r3
 80147b6:	4b83      	ldr	r3, [pc, #524]	; (80149c4 <chirp_recv+0xa3c>)
 80147b8:	799b      	ldrb	r3, [r3, #6]
 80147ba:	461a      	mov	r2, r3
 80147bc:	4b81      	ldr	r3, [pc, #516]	; (80149c4 <chirp_recv+0xa3c>)
 80147be:	79db      	ldrb	r3, [r3, #7]
 80147c0:	4881      	ldr	r0, [pc, #516]	; (80149c8 <chirp_recv+0xa40>)
 80147c2:	f00d ff3b 	bl	802263c <iprintf>
                                            PRINTF("MX_DISSEMINATE: %lu, %lu, %lu, %lu, %lu\n", chirp_outl->firmware_size, chirp_outl->patch_update, chirp_outl->disem_file_max, chirp_outl->file_chunk_len, chirp_outl->file_compression);
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80147d0:	4618      	mov	r0, r3
 80147d2:	69bb      	ldr	r3, [r7, #24]
 80147d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147d8:	b29b      	uxth	r3, r3
 80147da:	461c      	mov	r4, r3
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	461a      	mov	r2, r3
 80147e4:	69bb      	ldr	r3, [r7, #24]
 80147e6:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 80147ea:	9301      	str	r3, [sp, #4]
 80147ec:	9200      	str	r2, [sp, #0]
 80147ee:	4623      	mov	r3, r4
 80147f0:	4602      	mov	r2, r0
 80147f2:	4876      	ldr	r0, [pc, #472]	; (80149cc <chirp_recv+0xa44>)
 80147f4:	f00d ff22 	bl	802263c <iprintf>

                                            memcpy(&(chirp_outl->firmware_md5[0]), (uint8_t *)(p + 17), 16);
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80147fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014800:	3311      	adds	r3, #17
 8014802:	2210      	movs	r2, #16
 8014804:	4619      	mov	r1, r3
 8014806:	f00d f901 	bl	8021a0c <memcpy>
                                            /* update whole firmware */
                                            if ((!chirp_outl->patch_update) && (i == 0))
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014810:	2b00      	cmp	r3, #0
 8014812:	d110      	bne.n	8014836 <chirp_recv+0x8ae>
 8014814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014816:	2b00      	cmp	r3, #0
 8014818:	d10d      	bne.n	8014836 <chirp_recv+0x8ae>
                                            {
                                                menu_preSend(1);
 801481a:	2001      	movs	r0, #1
 801481c:	f008 ff28 	bl	801d670 <menu_preSend>
                                                file_data[0] = chirp_outl->firmware_size;
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014826:	601a      	str	r2, [r3, #0]
                                                // PRINTF("whole firmware_size:%lu\n", chirp_outl->firmware_size);
                                                FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)file_data, 2);
 8014828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801482a:	2202      	movs	r2, #2
 801482c:	4619      	mov	r1, r3
 801482e:	4868      	ldr	r0, [pc, #416]	; (80149d0 <chirp_recv+0xa48>)
 8014830:	f008 f924 	bl	801ca7c <FLASH_If_Write>
                                            {
 8014834:	e05a      	b.n	80148ec <chirp_recv+0x964>
                                            }
                                            /* patch firmware */
                                            else if ((chirp_outl->patch_update) && (i == 0))
 8014836:	69bb      	ldr	r3, [r7, #24]
 8014838:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801483c:	2b00      	cmp	r3, #0
 801483e:	d055      	beq.n	80148ec <chirp_recv+0x964>
 8014840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014842:	2b00      	cmp	r3, #0
 8014844:	d152      	bne.n	80148ec <chirp_recv+0x964>
                                            {
                                                memcpy(data, &(chirp_outl->disem_file_memory[7]), 4);
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 801484c:	331c      	adds	r3, #28
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	461a      	mov	r2, r3
 8014852:	4b5c      	ldr	r3, [pc, #368]	; (80149c4 <chirp_recv+0xa3c>)
 8014854:	601a      	str	r2, [r3, #0]
                                                k = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

                                                chirp_outl->old_firmware_size = (data[k++] << 24) | (data[k++] << 16) | (data[k++] << 8) | (data[k++]);
 801485c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014860:	1c5a      	adds	r2, r3, #1
 8014862:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014866:	461a      	mov	r2, r3
 8014868:	4b56      	ldr	r3, [pc, #344]	; (80149c4 <chirp_recv+0xa3c>)
 801486a:	5c9b      	ldrb	r3, [r3, r2]
 801486c:	061a      	lsls	r2, r3, #24
 801486e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014872:	1c59      	adds	r1, r3, #1
 8014874:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 8014878:	4619      	mov	r1, r3
 801487a:	4b52      	ldr	r3, [pc, #328]	; (80149c4 <chirp_recv+0xa3c>)
 801487c:	5c5b      	ldrb	r3, [r3, r1]
 801487e:	041b      	lsls	r3, r3, #16
 8014880:	431a      	orrs	r2, r3
 8014882:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014886:	1c59      	adds	r1, r3, #1
 8014888:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 801488c:	4619      	mov	r1, r3
 801488e:	4b4d      	ldr	r3, [pc, #308]	; (80149c4 <chirp_recv+0xa3c>)
 8014890:	5c5b      	ldrb	r3, [r3, r1]
 8014892:	021b      	lsls	r3, r3, #8
 8014894:	431a      	orrs	r2, r3
 8014896:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801489a:	1c59      	adds	r1, r3, #1
 801489c:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 80148a0:	4619      	mov	r1, r3
 80148a2:	4b48      	ldr	r3, [pc, #288]	; (80149c4 <chirp_recv+0xa3c>)
 80148a4:	5c5b      	ldrb	r3, [r3, r1]
 80148a6:	4313      	orrs	r3, r2
 80148a8:	461a      	mov	r2, r3
 80148aa:	69bb      	ldr	r3, [r7, #24]
 80148ac:	f8c3 2059 	str.w	r2, [r3, #89]	; 0x59
                                                k = 0;
 80148b0:	2300      	movs	r3, #0
 80148b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
                                                chirp_outl->patch_page = menu_pre_patch(chirp_outl->patch_bank, chirp_outl->old_firmware_size, chirp_outl->firmware_size);
 80148b6:	69bb      	ldr	r3, [r7, #24]
 80148b8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80148bc:	4618      	mov	r0, r3
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148c8:	461a      	mov	r2, r3
 80148ca:	f009 f899 	bl	801da00 <menu_pre_patch>
 80148ce:	4603      	mov	r3, r0
 80148d0:	b2da      	uxtb	r2, r3
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                                                PRINTF("patch:%lu, %lu\n", chirp_outl->old_firmware_size, chirp_outl->patch_page);
 80148d8:	69bb      	ldr	r3, [r7, #24]
 80148da:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80148e4:	461a      	mov	r2, r3
 80148e6:	483b      	ldr	r0, [pc, #236]	; (80149d4 <chirp_recv+0xa4c>)
 80148e8:	f00d fea8 	bl	802263c <iprintf>
                                            }
                                        }
                                        if (i == chirp_outl->generation_size - 1)
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148f2:	3b01      	subs	r3, #1
 80148f4:	461a      	mov	r2, r3
 80148f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80148f8:	4293      	cmp	r3, r2
 80148fa:	f040 8232 	bne.w	8014d62 <chirp_recv+0xdda>
                                        {
                                            chirp_outl->disem_file_index++;
 80148fe:	69bb      	ldr	r3, [r7, #24]
 8014900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014904:	b29b      	uxth	r3, r3
 8014906:	3301      	adds	r3, #1
 8014908:	b29a      	uxth	r2, r3
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                                            chirp_outl->disem_file_index_stay = 0;
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	2200      	movs	r2, #0
 8014914:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8014918:	2200      	movs	r2, #0
 801491a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                                            chirp_outl->disem_file_index_stay = 0;
                                        }
                                    }
                                }
                            }
                            break;
 801491e:	e220      	b.n	8014d62 <chirp_recv+0xdda>
                            else if (chirp_outl->disem_file_index)
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014926:	b29b      	uxth	r3, r3
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 821a 	beq.w	8014d62 <chirp_recv+0xdda>
                                if (node_id)
 801492e:	7ffb      	ldrb	r3, [r7, #31]
 8014930:	2b00      	cmp	r3, #0
 8014932:	f000 8216 	beq.w	8014d62 <chirp_recv+0xdda>
                                    if (chirp_outl->disem_file_index == (data[ROUND_HEADER_LENGTH] << 8 | data[ROUND_HEADER_LENGTH + 1]))
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801493c:	b29b      	uxth	r3, r3
 801493e:	4619      	mov	r1, r3
 8014940:	4b20      	ldr	r3, [pc, #128]	; (80149c4 <chirp_recv+0xa3c>)
 8014942:	791b      	ldrb	r3, [r3, #4]
 8014944:	021b      	lsls	r3, r3, #8
 8014946:	4a1f      	ldr	r2, [pc, #124]	; (80149c4 <chirp_recv+0xa3c>)
 8014948:	7952      	ldrb	r2, [r2, #5]
 801494a:	4313      	orrs	r3, r2
 801494c:	4299      	cmp	r1, r3
 801494e:	f040 8208 	bne.w	8014d62 <chirp_recv+0xdda>
                                        PRINTF("write\n");
 8014952:	4821      	ldr	r0, [pc, #132]	; (80149d8 <chirp_recv+0xa50>)
 8014954:	f00d fefa 	bl	802274c <puts>
                                        memcpy(&(chirp_outl->disem_file_memory[i * sizeof(file_data) / sizeof(uint32_t)]), (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(file_data));
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	f8d3 2065 	ldr.w	r2, [r3, #101]	; 0x65
 801495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014960:	fb03 f305 	mul.w	r3, r3, r5
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	18d0      	adds	r0, r2, r3
 8014968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496a:	3308      	adds	r3, #8
 801496c:	00aa      	lsls	r2, r5, #2
 801496e:	4619      	mov	r1, r3
 8014970:	f00d f84c 	bl	8021a0c <memcpy>
                                        if (i == chirp_outl->generation_size - 1)
 8014974:	69bb      	ldr	r3, [r7, #24]
 8014976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801497a:	3b01      	subs	r3, #1
 801497c:	461a      	mov	r2, r3
 801497e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014980:	4293      	cmp	r3, r2
 8014982:	f040 81ee 	bne.w	8014d62 <chirp_recv+0xdda>
                                            if (!chirp_outl->patch_update)
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801498c:	2b00      	cmp	r3, #0
 801498e:	d125      	bne.n	80149dc <chirp_recv+0xa54>
                                                FLASH_If_Write(FLASH_START_BANK2 + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 8014990:	69bb      	ldr	r3, [r7, #24]
 8014992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014996:	b29b      	uxth	r3, r3
 8014998:	3b01      	subs	r3, #1
 801499a:	69ba      	ldr	r2, [r7, #24]
 801499c:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 801499e:	b292      	uxth	r2, r2
 80149a0:	fb02 f303 	mul.w	r3, r2, r3
 80149a4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80149a8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80149ac:	69ba      	ldr	r2, [r7, #24]
 80149ae:	f8d2 1065 	ldr.w	r1, [r2, #101]	; 0x65
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 80149b6:	b292      	uxth	r2, r2
 80149b8:	0892      	lsrs	r2, r2, #2
 80149ba:	b292      	uxth	r2, r2
 80149bc:	4618      	mov	r0, r3
 80149be:	f008 f85d 	bl	801ca7c <FLASH_If_Write>
 80149c2:	e050      	b.n	8014a66 <chirp_recv+0xade>
 80149c4:	20000464 	.word	0x20000464
 80149c8:	08025a0c 	.word	0x08025a0c
 80149cc:	08025a28 	.word	0x08025a28
 80149d0:	080fe800 	.word	0x080fe800
 80149d4:	08025a54 	.word	0x08025a54
 80149d8:	08025a64 	.word	0x08025a64
                                            else if (chirp_outl->patch_update)
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d03f      	beq.n	8014a66 <chirp_recv+0xade>
                                                if (!chirp_outl->patch_bank)
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d11c      	bne.n	8014a2a <chirp_recv+0xaa2>
                                                    FLASH_If_Write(FLASH_START_BANK1 + chirp_outl->patch_page * FLASH_PAGE + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80149f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80149fa:	02db      	lsls	r3, r3, #11
 80149fc:	69ba      	ldr	r2, [r7, #24]
 80149fe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8014a02:	b292      	uxth	r2, r2
 8014a04:	3a01      	subs	r2, #1
 8014a06:	69b9      	ldr	r1, [r7, #24]
 8014a08:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8014a0a:	b289      	uxth	r1, r1
 8014a0c:	fb01 f202 	mul.w	r2, r1, r2
 8014a10:	1898      	adds	r0, r3, r2
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	f8d3 1065 	ldr.w	r1, [r3, #101]	; 0x65
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	089b      	lsrs	r3, r3, #2
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	461a      	mov	r2, r3
 8014a24:	f008 f82a 	bl	801ca7c <FLASH_If_Write>
 8014a28:	e01d      	b.n	8014a66 <chirp_recv+0xade>
                                                    FLASH_If_Write(FLASH_START_BANK2 + chirp_outl->patch_page * FLASH_PAGE + (chirp_outl->disem_file_index - 1) * chirp_outl->file_chunk_len, (uint32_t *)(chirp_outl->disem_file_memory), chirp_outl->file_chunk_len / sizeof(uint32_t));
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014a30:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8014a34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a38:	02db      	lsls	r3, r3, #11
 8014a3a:	69ba      	ldr	r2, [r7, #24]
 8014a3c:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8014a40:	b292      	uxth	r2, r2
 8014a42:	3a01      	subs	r2, #1
 8014a44:	69b9      	ldr	r1, [r7, #24]
 8014a46:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8014a48:	b289      	uxth	r1, r1
 8014a4a:	fb01 f202 	mul.w	r2, r1, r2
 8014a4e:	1898      	adds	r0, r3, r2
 8014a50:	69bb      	ldr	r3, [r7, #24]
 8014a52:	f8d3 1065 	ldr.w	r1, [r3, #101]	; 0x65
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	089b      	lsrs	r3, r3, #2
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	461a      	mov	r2, r3
 8014a62:	f008 f80b 	bl	801ca7c <FLASH_If_Write>
                                            chirp_outl->disem_file_index++;
 8014a66:	69bb      	ldr	r3, [r7, #24]
 8014a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	3301      	adds	r3, #1
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                                            chirp_outl->disem_file_index_stay = 0;
 8014a78:	69bb      	ldr	r3, [r7, #24]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8014a80:	2200      	movs	r2, #0
 8014a82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                            break;
 8014a86:	e16c      	b.n	8014d62 <chirp_recv+0xdda>
                        }
                        case MX_COLLECT:
                        case CHIRP_TOPO:
                        {
                            /* reconfig chirp_outl (except the initiator) */
                            if (chirp_outl->round <= chirp_outl->round_setup)
 8014a88:	69bb      	ldr	r3, [r7, #24]
 8014a8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	795b      	ldrb	r3, [r3, #5]
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d875      	bhi.n	8014b86 <chirp_recv+0xbfe>
                            {
                                /* MX_COLLECT */
                                /* only initiator indicates the file information */
                                if ((chirp_outl->task == MX_COLLECT) && (node_id) && (i == 0))
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b02      	cmp	r3, #2
 8014aa0:	f040 8161 	bne.w	8014d66 <chirp_recv+0xdde>
 8014aa4:	7ffb      	ldrb	r3, [r7, #31]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f000 815d 	beq.w	8014d66 <chirp_recv+0xdde>
 8014aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	f040 8159 	bne.w	8014d66 <chirp_recv+0xdde>
                                {
                                    PRINTF("MX_COLLECT\n");
 8014ab4:	48ad      	ldr	r0, [pc, #692]	; (8014d6c <chirp_recv+0xde4>)
 8014ab6:	f00d fe49 	bl	802274c <puts>
                                    chirp_outl->round_max = (data[k++] << 8) | (data[k++]);
 8014aba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014abe:	1c5a      	adds	r2, r3, #1
 8014ac0:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	4baa      	ldr	r3, [pc, #680]	; (8014d70 <chirp_recv+0xde8>)
 8014ac8:	5c9b      	ldrb	r3, [r3, r2]
 8014aca:	021b      	lsls	r3, r3, #8
 8014acc:	b21a      	sxth	r2, r3
 8014ace:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014ad2:	1c59      	adds	r1, r3, #1
 8014ad4:	f887 105e 	strb.w	r1, [r7, #94]	; 0x5e
 8014ad8:	4619      	mov	r1, r3
 8014ada:	4ba5      	ldr	r3, [pc, #660]	; (8014d70 <chirp_recv+0xde8>)
 8014adc:	5c5b      	ldrb	r3, [r3, r1]
 8014ade:	b21b      	sxth	r3, r3
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	b21b      	sxth	r3, r3
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	f8a3 2003 	strh.w	r2, [r3, #3]
                                    memcpy(data, p + DATA_HEADER_LENGTH, DATA_HEADER_LENGTH);
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	f103 0208 	add.w	r2, r3, #8
 8014af2:	4b9f      	ldr	r3, [pc, #636]	; (8014d70 <chirp_recv+0xde8>)
 8014af4:	6810      	ldr	r0, [r2, #0]
 8014af6:	6851      	ldr	r1, [r2, #4]
 8014af8:	c303      	stmia	r3!, {r0, r1}
                                    PRINTF("col_max:%lu\n", chirp_outl->round_max);
 8014afa:	69bb      	ldr	r3, [r7, #24]
 8014afc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	4619      	mov	r1, r3
 8014b04:	489b      	ldr	r0, [pc, #620]	; (8014d74 <chirp_recv+0xdec>)
 8014b06:	f00d fd99 	bl	802263c <iprintf>

                                    chirp_outl->collect_addr_start = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | (data[3]);
 8014b0a:	4b99      	ldr	r3, [pc, #612]	; (8014d70 <chirp_recv+0xde8>)
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	061a      	lsls	r2, r3, #24
 8014b10:	4b97      	ldr	r3, [pc, #604]	; (8014d70 <chirp_recv+0xde8>)
 8014b12:	785b      	ldrb	r3, [r3, #1]
 8014b14:	041b      	lsls	r3, r3, #16
 8014b16:	431a      	orrs	r2, r3
 8014b18:	4b95      	ldr	r3, [pc, #596]	; (8014d70 <chirp_recv+0xde8>)
 8014b1a:	789b      	ldrb	r3, [r3, #2]
 8014b1c:	021b      	lsls	r3, r3, #8
 8014b1e:	4313      	orrs	r3, r2
 8014b20:	4a93      	ldr	r2, [pc, #588]	; (8014d70 <chirp_recv+0xde8>)
 8014b22:	78d2      	ldrb	r2, [r2, #3]
 8014b24:	4313      	orrs	r3, r2
 8014b26:	461a      	mov	r2, r3
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	f8c3 2069 	str.w	r2, [r3, #105]	; 0x69
                                    chirp_outl->collect_addr_end = (data[4] << 24) | (data[5] << 16) | (data[6] << 8) | (data[7]);
 8014b2e:	4b90      	ldr	r3, [pc, #576]	; (8014d70 <chirp_recv+0xde8>)
 8014b30:	791b      	ldrb	r3, [r3, #4]
 8014b32:	061a      	lsls	r2, r3, #24
 8014b34:	4b8e      	ldr	r3, [pc, #568]	; (8014d70 <chirp_recv+0xde8>)
 8014b36:	795b      	ldrb	r3, [r3, #5]
 8014b38:	041b      	lsls	r3, r3, #16
 8014b3a:	431a      	orrs	r2, r3
 8014b3c:	4b8c      	ldr	r3, [pc, #560]	; (8014d70 <chirp_recv+0xde8>)
 8014b3e:	799b      	ldrb	r3, [r3, #6]
 8014b40:	021b      	lsls	r3, r3, #8
 8014b42:	4313      	orrs	r3, r2
 8014b44:	4a8a      	ldr	r2, [pc, #552]	; (8014d70 <chirp_recv+0xde8>)
 8014b46:	79d2      	ldrb	r2, [r2, #7]
 8014b48:	4313      	orrs	r3, r2
 8014b4a:	461a      	mov	r2, r3
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	f8c3 206d 	str.w	r2, [r3, #109]	; 0x6d
                                    chirp_outl->collect_length = ((chirp_outl->collect_addr_end - chirp_outl->collect_addr_start + sizeof(uint64_t) - 1) / sizeof(uint64_t)) * sizeof(uint64_t);
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	3307      	adds	r3, #7
 8014b62:	f023 0207 	bic.w	r2, r3, #7
 8014b66:	69bb      	ldr	r3, [r7, #24]
 8014b68:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
                                    PRINTF("addr:%lu, %lu, %lu\n", chirp_outl->collect_addr_start, chirp_outl->collect_addr_end, chirp_outl->collect_length);
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	f8d3 1069 	ldr.w	r1, [r3, #105]	; 0x69
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8014b7e:	487e      	ldr	r0, [pc, #504]	; (8014d78 <chirp_recv+0xdf0>)
 8014b80:	f00d fd5c 	bl	802263c <iprintf>
                                {
                                    memcpy(file_data, p + DATA_HEADER_LENGTH, sizeof(file_data));
                                    PRINT_PACKET(file_data, sizeof(file_data), 0);
                                }
                            }
                            break;
 8014b84:	e0ef      	b.n	8014d66 <chirp_recv+0xdde>
                            else if ((chirp_outl->round > chirp_outl->round_setup) && (chirp_outl->round <= chirp_outl->round_max))
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	795b      	ldrb	r3, [r3, #5]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	429a      	cmp	r2, r3
 8014b96:	f240 80e6 	bls.w	8014d66 <chirp_recv+0xdde>
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014ba0:	b29a      	uxth	r2, r3
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014ba8:	b29b      	uxth	r3, r3
 8014baa:	429a      	cmp	r2, r3
 8014bac:	f200 80db 	bhi.w	8014d66 <chirp_recv+0xdde>
                                if ((chirp_outl->task == MX_COLLECT) || (chirp_outl->task == CHIRP_TOPO))
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d004      	beq.n	8014bc2 <chirp_recv+0xc3a>
 8014bb8:	69bb      	ldr	r3, [r7, #24]
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	2b04      	cmp	r3, #4
 8014bbe:	f040 80d2 	bne.w	8014d66 <chirp_recv+0xdde>
                                    memcpy(file_data, p + DATA_HEADER_LENGTH, sizeof(file_data));
 8014bc2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc6:	3308      	adds	r3, #8
 8014bc8:	00aa      	lsls	r2, r5, #2
 8014bca:	4619      	mov	r1, r3
 8014bcc:	f00c ff1e 	bl	8021a0c <memcpy>
                                    PRINT_PACKET(file_data, sizeof(file_data), 0);
 8014bd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014bd2:	b2eb      	uxtb	r3, r5
 8014bd4:	009b      	lsls	r3, r3, #2
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	2200      	movs	r2, #0
 8014bda:	4619      	mov	r1, r3
 8014bdc:	f7fd ff24 	bl	8012a28 <PRINT_PACKET>
                            break;
 8014be0:	e0c1      	b.n	8014d66 <chirp_recv+0xdde>
                        }
                        case CHIRP_CONNECTIVITY:
                        {
                            if (node_id)
 8014be2:	7ffb      	ldrb	r3, [r7, #31]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f000 80cd 	beq.w	8014d84 <chirp_recv+0xdfc>
                            {
                                PRINTF("CHIRP_CONNECTIVITY\n");
 8014bea:	4864      	ldr	r0, [pc, #400]	; (8014d7c <chirp_recv+0xdf4>)
 8014bec:	f00d fdae 	bl	802274c <puts>

                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 8014bf0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf4:	3308      	adds	r3, #8
 8014bf6:	4632      	mov	r2, r6
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	f00c ff07 	bl	8021a0c <memcpy>
                                chirp_outl->sf = task_data[0];
 8014bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c00:	781a      	ldrb	r2, [r3, #0]
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                                chirp_outl->freq = (task_data[1] << 24) | (task_data[2] << 16) | (task_data[3] << 8) | (task_data[4]);
 8014c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c0a:	785b      	ldrb	r3, [r3, #1]
 8014c0c:	061a      	lsls	r2, r3, #24
 8014c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c10:	789b      	ldrb	r3, [r3, #2]
 8014c12:	041b      	lsls	r3, r3, #16
 8014c14:	431a      	orrs	r2, r3
 8014c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c18:	78db      	ldrb	r3, [r3, #3]
 8014c1a:	021b      	lsls	r3, r3, #8
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c20:	7912      	ldrb	r2, [r2, #4]
 8014c22:	4313      	orrs	r3, r2
 8014c24:	461a      	mov	r2, r3
 8014c26:	69bb      	ldr	r3, [r7, #24]
 8014c28:	f8c3 2076 	str.w	r2, [r3, #118]	; 0x76
                                chirp_outl->tx_power = task_data[5];
 8014c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c2e:	795b      	ldrb	r3, [r3, #5]
 8014c30:	b25a      	sxtb	r2, r3
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                                chirp_outl->topo_payload_len = task_data[6];
 8014c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c3a:	799a      	ldrb	r2, [r3, #6]
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                            }
                            break;
 8014c42:	e09f      	b.n	8014d84 <chirp_recv+0xdfc>
                        }
                        case CHIRP_VERSION:
                        {
                            memcpy(data, p + DATA_HEADER_LENGTH, chirp_outl->payload_len - DATA_HEADER_LENGTH);
 8014c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c46:	f103 0108 	add.w	r1, r3, #8
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014c50:	3b08      	subs	r3, #8
 8014c52:	461a      	mov	r2, r3
 8014c54:	4846      	ldr	r0, [pc, #280]	; (8014d70 <chirp_recv+0xde8>)
 8014c56:	f00c fed9 	bl	8021a0c <memcpy>
                            PRINT_PACKET(data, chirp_outl->payload_len - DATA_HEADER_LENGTH, 0);
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014c60:	3b08      	subs	r3, #8
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	2200      	movs	r2, #0
 8014c66:	4619      	mov	r1, r3
 8014c68:	4841      	ldr	r0, [pc, #260]	; (8014d70 <chirp_recv+0xde8>)
 8014c6a:	f7fd fedd 	bl	8012a28 <PRINT_PACKET>
                            break;
 8014c6e:	e08c      	b.n	8014d8a <chirp_recv+0xe02>
                        }
                        case MX_ARRANGE:
                        {
                            PRINTF("MX_ARRANGE\n");
 8014c70:	4843      	ldr	r0, [pc, #268]	; (8014d80 <chirp_recv+0xdf8>)
 8014c72:	f00d fd6b 	bl	802274c <puts>
                            chirp_outl->arrange_task = data[6];
 8014c76:	4b3e      	ldr	r3, [pc, #248]	; (8014d70 <chirp_recv+0xde8>)
 8014c78:	799a      	ldrb	r2, [r3, #6]
 8014c7a:	69bb      	ldr	r3, [r7, #24]
 8014c7c:	719a      	strb	r2, [r3, #6]
                            if (chirp_outl->arrange_task == MX_DISSEMINATE)
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	799b      	ldrb	r3, [r3, #6]
 8014c82:	2b01      	cmp	r3, #1
 8014c84:	d110      	bne.n	8014ca8 <chirp_recv+0xd20>
                            {
                                chirp_outl->dissem_back_sf = data[0];
 8014c86:	4b3a      	ldr	r3, [pc, #232]	; (8014d70 <chirp_recv+0xde8>)
 8014c88:	781a      	ldrb	r2, [r3, #0]
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	f883 2020 	strb.w	r2, [r3, #32]
                                chirp_outl->dissem_back_slot_num = data[1];
 8014c90:	4b37      	ldr	r3, [pc, #220]	; (8014d70 <chirp_recv+0xde8>)
 8014c92:	785a      	ldrb	r2, [r3, #1]
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                                chirp_outl->default_slot_num = data[2];
 8014c9a:	4b35      	ldr	r3, [pc, #212]	; (8014d70 <chirp_recv+0xde8>)
 8014c9c:	789b      	ldrb	r3, [r3, #2]
 8014c9e:	b29a      	uxth	r2, r3
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	f8a3 200b 	strh.w	r2, [r3, #11]
 8014ca6:	e00c      	b.n	8014cc2 <chirp_recv+0xd3a>
                            }
                            else
                                chirp_outl->default_slot_num = data[1] << 8 | data[2];
 8014ca8:	4b31      	ldr	r3, [pc, #196]	; (8014d70 <chirp_recv+0xde8>)
 8014caa:	785b      	ldrb	r3, [r3, #1]
 8014cac:	021b      	lsls	r3, r3, #8
 8014cae:	b21a      	sxth	r2, r3
 8014cb0:	4b2f      	ldr	r3, [pc, #188]	; (8014d70 <chirp_recv+0xde8>)
 8014cb2:	789b      	ldrb	r3, [r3, #2]
 8014cb4:	b21b      	sxth	r3, r3
 8014cb6:	4313      	orrs	r3, r2
 8014cb8:	b21b      	sxth	r3, r3
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	69bb      	ldr	r3, [r7, #24]
 8014cbe:	f8a3 200b 	strh.w	r2, [r3, #11]
                            /* reconfig chirp_outl (except the initiator) */
                            chirp_outl->default_sf = data[k++];
 8014cc2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014cc6:	1c5a      	adds	r2, r3, #1
 8014cc8:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014ccc:	461a      	mov	r2, r3
 8014cce:	4b28      	ldr	r3, [pc, #160]	; (8014d70 <chirp_recv+0xde8>)
 8014cd0:	5c9b      	ldrb	r3, [r3, r2]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	f8c3 200d 	str.w	r2, [r3, #13]
                            // chirp_outl->round_max = data[k++];
                            chirp_outl->default_payload_len = data[k++];
 8014cda:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014cde:	1c5a      	adds	r2, r3, #1
 8014ce0:	f887 205e 	strb.w	r2, [r7, #94]	; 0x5e
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	4b22      	ldr	r3, [pc, #136]	; (8014d70 <chirp_recv+0xde8>)
 8014ce8:	5c9a      	ldrb	r2, [r3, r2]
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	759a      	strb	r2, [r3, #22]
                            // chirp_outl->round_max = (data[k++] << 8) | (data[k++]);
                            // chirp_outl->arrange_task = data[k++];
                            chirp_outl->default_generate_size = data[ROUND_HEADER_LENGTH - 1];
 8014cee:	4b20      	ldr	r3, [pc, #128]	; (8014d70 <chirp_recv+0xde8>)
 8014cf0:	78da      	ldrb	r2, [r3, #3]
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	75da      	strb	r2, [r3, #23]
                            if (node_id)
 8014cf6:	7ffb      	ldrb	r3, [r7, #31]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d045      	beq.n	8014d88 <chirp_recv+0xe00>
                            {
                                memcpy(task_data, (uint8_t *)(p + DATA_HEADER_LENGTH), sizeof(task_data));
 8014cfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d00:	3308      	adds	r3, #8
 8014d02:	4632      	mov	r2, r6
 8014d04:	4619      	mov	r1, r3
 8014d06:	f00c fe81 	bl	8021a0c <memcpy>
                                chirp_outl->firmware_bitmap[0] = (task_data[0] << 24) | (task_data[1] << 16) | (task_data[2] << 8) | (task_data[3]);
 8014d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	061a      	lsls	r2, r3, #24
 8014d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d12:	785b      	ldrb	r3, [r3, #1]
 8014d14:	041b      	lsls	r3, r3, #16
 8014d16:	431a      	orrs	r2, r3
 8014d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d1a:	789b      	ldrb	r3, [r3, #2]
 8014d1c:	021b      	lsls	r3, r3, #8
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d22:	78d2      	ldrb	r2, [r2, #3]
 8014d24:	4313      	orrs	r3, r2
 8014d26:	461a      	mov	r2, r3
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	619a      	str	r2, [r3, #24]
                                chirp_outl->default_tp = task_data[4];
 8014d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d2e:	791b      	ldrb	r3, [r3, #4]
 8014d30:	b25a      	sxtb	r2, r3
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	755a      	strb	r2, [r3, #21]
                                chirp_outl->task_bitmap[0] = (task_data[5] << 24) | (task_data[6] << 16) | (task_data[7] << 8) | (task_data[8]);
 8014d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d38:	795b      	ldrb	r3, [r3, #5]
 8014d3a:	061a      	lsls	r2, r3, #24
 8014d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d3e:	799b      	ldrb	r3, [r3, #6]
 8014d40:	041b      	lsls	r3, r3, #16
 8014d42:	431a      	orrs	r2, r3
 8014d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d46:	79db      	ldrb	r3, [r3, #7]
 8014d48:	021b      	lsls	r3, r3, #8
 8014d4a:	4313      	orrs	r3, r2
 8014d4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d4e:	7a12      	ldrb	r2, [r2, #8]
 8014d50:	4313      	orrs	r3, r2
 8014d52:	461a      	mov	r2, r3
 8014d54:	69bb      	ldr	r3, [r7, #24]
 8014d56:	61da      	str	r2, [r3, #28]
                            }
                            break;
 8014d58:	e016      	b.n	8014d88 <chirp_recv+0xe00>
                        }
                        default:
                            break;
 8014d5a:	bf00      	nop
 8014d5c:	e015      	b.n	8014d8a <chirp_recv+0xe02>
                            break;
 8014d5e:	bf00      	nop
 8014d60:	e013      	b.n	8014d8a <chirp_recv+0xe02>
                            break;
 8014d62:	bf00      	nop
 8014d64:	e011      	b.n	8014d8a <chirp_recv+0xe02>
                            break;
 8014d66:	bf00      	nop
 8014d68:	e00f      	b.n	8014d8a <chirp_recv+0xe02>
 8014d6a:	bf00      	nop
 8014d6c:	08025a6c 	.word	0x08025a6c
 8014d70:	20000464 	.word	0x20000464
 8014d74:	08025a78 	.word	0x08025a78
 8014d78:	08025a88 	.word	0x08025a88
 8014d7c:	08025a9c 	.word	0x08025a9c
 8014d80:	08025ab0 	.word	0x08025ab0
                            break;
 8014d84:	bf00      	nop
 8014d86:	e000      	b.n	8014d8a <chirp_recv+0xe02>
                            break;
 8014d88:	bf00      	nop
                    }
                    round_inc++;
 8014d8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014d8e:	3301      	adds	r3, #1
 8014d90:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                    PRINTF("roundinc %lu\n", round_inc);
 8014d94:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014d98:	4619      	mov	r1, r3
 8014d9a:	4831      	ldr	r0, [pc, #196]	; (8014e60 <chirp_recv+0xed8>)
 8014d9c:	f00d fc4e 	bl	802263c <iprintf>
        for (i = 0; i < chirp_config.mx_generation_size; i++)
 8014da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014da2:	3301      	adds	r3, #1
 8014da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8014da6:	4b2f      	ldr	r3, [pc, #188]	; (8014e64 <chirp_recv+0xedc>)
 8014da8:	885b      	ldrh	r3, [r3, #2]
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	461a      	mov	r2, r3
 8014dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014db0:	4293      	cmp	r3, r2
 8014db2:	f4ff ab0a 	bcc.w	80143ca <chirp_recv+0x442>
                }
            }
        }
    }
	if (chirp_config.primitive != FLOODING)
 8014db6:	4b2b      	ldr	r3, [pc, #172]	; (8014e64 <chirp_recv+0xedc>)
 8014db8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d007      	beq.n	8014dd0 <chirp_recv+0xe48>
    {
    free(mx.matrix[0]);
 8014dc0:	4b29      	ldr	r3, [pc, #164]	; (8014e68 <chirp_recv+0xee0>)
 8014dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f00c fe19 	bl	80219fc <free>
    mx.matrix[0] = NULL;
 8014dca:	4b27      	ldr	r3, [pc, #156]	; (8014e68 <chirp_recv+0xee0>)
 8014dcc:	2200      	movs	r2, #0
 8014dce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* have received at least a packet */
    if (((chirp_outl->task == MX_COLLECT) ||(chirp_outl->task == CHIRP_TOPO) ||(chirp_outl->task == CHIRP_VERSION)))
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	2b02      	cmp	r3, #2
 8014dd6:	d007      	beq.n	8014de8 <chirp_recv+0xe60>
 8014dd8:	69bb      	ldr	r3, [r7, #24]
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	2b04      	cmp	r3, #4
 8014dde:	d003      	beq.n	8014de8 <chirp_recv+0xe60>
 8014de0:	69bb      	ldr	r3, [r7, #24]
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	2b05      	cmp	r3, #5
 8014de6:	d110      	bne.n	8014e0a <chirp_recv+0xe82>
    {
        if (round_inc > 1)
 8014de8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	d90a      	bls.n	8014e06 <chirp_recv+0xe7e>
        {
            chirp_outl->round++;
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014df6:	b29b      	uxth	r3, r3
 8014df8:	3301      	adds	r3, #1
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	f8a3 2001 	strh.w	r2, [r3, #1]
            return 1;
 8014e02:	2301      	movs	r3, #1
 8014e04:	e026      	b.n	8014e54 <chirp_recv+0xecc>
        }
        else
        {
            return 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	e024      	b.n	8014e54 <chirp_recv+0xecc>
        }

    }
    else
    {
        if (chirp_outl->task == MX_DISSEMINATE)
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d110      	bne.n	8014e34 <chirp_recv+0xeac>
        {
            if (round_hash)
 8014e12:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d00a      	beq.n	8014e30 <chirp_recv+0xea8>
            {
                chirp_outl->round++;
 8014e1a:	69bb      	ldr	r3, [r7, #24]
 8014e1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	3301      	adds	r3, #1
 8014e24:	b29a      	uxth	r2, r3
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	f8a3 2001 	strh.w	r2, [r3, #1]
                return 1;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	e011      	b.n	8014e54 <chirp_recv+0xecc>
            }
            else
            {
                return 0;
 8014e30:	2300      	movs	r3, #0
 8014e32:	e00f      	b.n	8014e54 <chirp_recv+0xecc>
            }
        }
        else
        {
            if (round_inc)
 8014e34:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d00a      	beq.n	8014e52 <chirp_recv+0xeca>
            {
                chirp_outl->round++;
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	3301      	adds	r3, #1
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	f8a3 2001 	strh.w	r2, [r3, #1]
                return 1;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	e000      	b.n	8014e54 <chirp_recv+0xecc>
            }
            /* not received any packet */
            else
            {
                return 0;
 8014e52:	2300      	movs	r3, #0
 8014e54:	46c5      	mov	sp, r8
            }
        }
    }
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3764      	adds	r7, #100	; 0x64
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e60:	08025abc 	.word	0x08025abc
 8014e64:	20001430 	.word	0x20001430
 8014e68:	200014f0 	.word	0x200014f0

08014e6c <chirp_round>:

uint8_t chirp_round(uint8_t node_id, Chirp_Outl *chirp_outl)
{
 8014e6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8014e70:	b09c      	sub	sp, #112	; 0x70
 8014e72:	af02      	add	r7, sp, #8
 8014e74:	4603      	mov	r3, r0
 8014e76:	6039      	str	r1, [r7, #0]
 8014e78:	71fb      	strb	r3, [r7, #7]
    gpi_watchdog_periodic();
 8014e7a:	f7f9 f9a9 	bl	800e1d0 <gpi_watchdog_periodic>
	// Gpi_Fast_Tick_Native deadline;
    Gpi_Fast_Tick_Extended deadline;
    Gpi_Fast_Tick_Native update_period = GPI_TICK_MS_TO_FAST2(((chirp_config.mx_period_time_s * 1000) / 1) - chirp_config.mx_round_length * (chirp_config.mx_slot_length_in_us / 1000));
 8014e7e:	4bbc      	ldr	r3, [pc, #752]	; (8015170 <chirp_round+0x304>)
 8014e80:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	461a      	mov	r2, r3
 8014e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014e8c:	fb03 f302 	mul.w	r3, r3, r2
 8014e90:	4619      	mov	r1, r3
 8014e92:	4bb7      	ldr	r3, [pc, #732]	; (8015170 <chirp_round+0x304>)
 8014e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	4bb4      	ldr	r3, [pc, #720]	; (8015170 <chirp_round+0x304>)
 8014e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ea0:	4ab4      	ldr	r2, [pc, #720]	; (8015174 <chirp_round+0x308>)
 8014ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ea6:	099b      	lsrs	r3, r3, #6
 8014ea8:	fb03 f300 	mul.w	r3, r3, r0
 8014eac:	1acb      	subs	r3, r1, r3
 8014eae:	4ab1      	ldr	r2, [pc, #708]	; (8015174 <chirp_round+0x308>)
 8014eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8014eb4:	099b      	lsrs	r3, r3, #6
 8014eb6:	4ab0      	ldr	r2, [pc, #704]	; (8015178 <chirp_round+0x30c>)
 8014eb8:	fb02 f103 	mul.w	r1, r2, r3
 8014ebc:	4bac      	ldr	r3, [pc, #688]	; (8015170 <chirp_round+0x304>)
 8014ebe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014eca:	fb03 f302 	mul.w	r3, r3, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	4ba7      	ldr	r3, [pc, #668]	; (8015170 <chirp_round+0x304>)
 8014ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	461c      	mov	r4, r3
 8014eda:	4ba5      	ldr	r3, [pc, #660]	; (8015170 <chirp_round+0x304>)
 8014edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ede:	4aa5      	ldr	r2, [pc, #660]	; (8015174 <chirp_round+0x308>)
 8014ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8014ee4:	099b      	lsrs	r3, r3, #6
 8014ee6:	fb03 f304 	mul.w	r3, r3, r4
 8014eea:	1ac2      	subs	r2, r0, r3
 8014eec:	4ba1      	ldr	r3, [pc, #644]	; (8015174 <chirp_round+0x308>)
 8014eee:	fba3 0302 	umull	r0, r3, r3, r2
 8014ef2:	099b      	lsrs	r3, r3, #6
 8014ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ef8:	fb00 f303 	mul.w	r3, r0, r3
 8014efc:	1ad3      	subs	r3, r2, r3
 8014efe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8014f02:	fb02 f303 	mul.w	r3, r2, r3
 8014f06:	440b      	add	r3, r1
 8014f08:	65bb      	str	r3, [r7, #88]	; 0x58

	unsigned int i;
    uint8_t failed_round = 0;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    chirp_outl->round = 1;
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f042 0201 	orr.w	r2, r2, #1
 8014f18:	705a      	strb	r2, [r3, #1]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	709a      	strb	r2, [r3, #2]

    /* set current state as mixer */
	chirp_isr.state = ISR_MIXER;
 8014f1e:	4b97      	ldr	r3, [pc, #604]	; (801517c <chirp_round+0x310>)
 8014f20:	2200      	movs	r2, #0
 8014f22:	701a      	strb	r2, [r3, #0]

	// deadline = gpi_tick_fast_native() + 2 * chirp_config.mx_slot_length;
	// deadline = gpi_tick_fast_native();
	deadline = gpi_tick_fast_extended();
 8014f24:	f7f6 fdde 	bl	800bae4 <gpi_tick_fast_extended>
 8014f28:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    clear_data();
 8014f2c:	f7fd fdae 	bl	8012a8c <clear_data>

    chirp_config.task = chirp_outl->task;
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	781a      	ldrb	r2, [r3, #0]
 8014f34:	4b8e      	ldr	r3, [pc, #568]	; (8015170 <chirp_round+0x304>)
 8014f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	if (chirp_config.primitive != FLOODING)
 8014f3a:	4b8d      	ldr	r3, [pc, #564]	; (8015170 <chirp_round+0x304>)
 8014f3c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d011      	beq.n	8014f68 <chirp_round+0xfc>
        chirp_config.packet_hash = DISC_HEADER;
 8014f44:	4b8a      	ldr	r3, [pc, #552]	; (8015170 <chirp_round+0x304>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8014f4c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8014f50:	2200      	movs	r2, #0
 8014f52:	f042 0212 	orr.w	r2, r2, #18
 8014f56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014f60:	2200      	movs	r2, #0
 8014f62:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8014f66:	e010      	b.n	8014f8a <chirp_round+0x11e>
    else
        chirp_config.packet_hash = FLOODING_HEADER;
 8014f68:	4b81      	ldr	r3, [pc, #516]	; (8015170 <chirp_round+0x304>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8014f70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8014f74:	2200      	movs	r2, #0
 8014f76:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 8014f7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8014f7e:	2200      	movs	r2, #0
 8014f80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014f84:	2200      	movs	r2, #0
 8014f86:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	while (1)
	{
        PRINTF("round:%lu, %lu\n", chirp_outl->round, chirp_outl->round_max);
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	4619      	mov	r1, r3
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	4878      	ldr	r0, [pc, #480]	; (8015180 <chirp_round+0x314>)
 8014fa0:	f00d fb4c 	bl	802263c <iprintf>

        gpi_radio_init();
 8014fa4:	f7f8 f9d6 	bl	800d354 <gpi_radio_init>

        /* init mixer */
        mixer_init(node_id);
 8014fa8:	79fb      	ldrb	r3, [r7, #7]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7fc fe86 	bl	8011cbc <mixer_init>
	return htim2.Instance->CNT;
 8014fb0:	4b74      	ldr	r3, [pc, #464]	; (8015184 <chirp_round+0x318>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        #if ENERGEST_CONF_ON
            ENERGEST_ON(ENERGEST_TYPE_CPU);
 8014fb6:	4a74      	ldr	r2, [pc, #464]	; (8015188 <chirp_round+0x31c>)
 8014fb8:	61d3      	str	r3, [r2, #28]
 8014fba:	4b74      	ldr	r3, [pc, #464]	; (801518c <chirp_round+0x320>)
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	71da      	strb	r2, [r3, #7]
        #endif
        /* except these two task that all nodes need to upload data, others only initiator transmit data */
        if (chirp_config.primitive == DISSEMINATION)
 8014fc0:	4b6b      	ldr	r3, [pc, #428]	; (8015170 <chirp_round+0x304>)
 8014fc2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014fc6:	2b02      	cmp	r3, #2
 8014fc8:	d108      	bne.n	8014fdc <chirp_round+0x170>
        {
            if (!node_id)
 8014fca:	79fb      	ldrb	r3, [r7, #7]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d10a      	bne.n	8014fe6 <chirp_round+0x17a>
                chirp_write(node_id, chirp_outl);
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	6839      	ldr	r1, [r7, #0]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fe f909 	bl	80131ec <chirp_write>
 8014fda:	e004      	b.n	8014fe6 <chirp_round+0x17a>
        }
        else
            chirp_write(node_id, chirp_outl);
 8014fdc:	79fb      	ldrb	r3, [r7, #7]
 8014fde:	6839      	ldr	r1, [r7, #0]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7fe f903 	bl	80131ec <chirp_write>

		/* arm mixer, node 0 = initiator
		start first round with infinite scan
		-> nodes join next available round, does not require simultaneous boot-up */
        mixer_arm(((!node_id) ? MX_ARM_INITIATOR : 0) | ((1 == 0) ? MX_ARM_INFINITE_SCAN : 0));
 8014fe6:	79fb      	ldrb	r3, [r7, #7]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	bf0c      	ite	eq
 8014fec:	2301      	moveq	r3, #1
 8014fee:	2300      	movne	r3, #0
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fd fa5a 	bl	80124ac <mixer_arm>

		/* delay initiator a bit
		-> increase probability that all nodes are ready when initiator starts the round
		-> avoid problems in view of limited deadline accuracy */
		if (!node_id)
 8014ff8:	79fb      	ldrb	r3, [r7, #7]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d124      	bne.n	8015048 <chirp_round+0x1dc>
        {
            /* because other nodes need time to erase pages */
            if ((chirp_outl->task == MX_DISSEMINATE) && (chirp_outl->round == 1))
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	2b01      	cmp	r3, #1
 8015004:	d113      	bne.n	801502e <chirp_round+0x1c2>
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801500c:	b29b      	uxth	r3, r3
 801500e:	2b01      	cmp	r3, #1
 8015010:	d10d      	bne.n	801502e <chirp_round+0x1c2>
                // deadline += GPI_TICK_MS_TO_FAST2(8000);
                deadline += (Gpi_Fast_Tick_Extended)1 * chirp_config.mx_slot_length;
 8015012:	4b57      	ldr	r3, [pc, #348]	; (8015170 <chirp_round+0x304>)
 8015014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015016:	469b      	mov	fp, r3
 8015018:	f04f 0c00 	mov.w	ip, #0
 801501c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8015020:	eb1b 0301 	adds.w	r3, fp, r1
 8015024:	eb4c 0402 	adc.w	r4, ip, r2
 8015028:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 801502c:	e00c      	b.n	8015048 <chirp_round+0x1dc>
            else
                deadline += (Gpi_Fast_Tick_Extended)1 * chirp_config.mx_slot_length;
 801502e:	4b50      	ldr	r3, [pc, #320]	; (8015170 <chirp_round+0x304>)
 8015030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015032:	469b      	mov	fp, r3
 8015034:	f04f 0c00 	mov.w	ip, #0
 8015038:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801503c:	eb1b 0301 	adds.w	r3, fp, r1
 8015040:	eb4c 0402 	adc.w	r4, ip, r2
 8015044:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
        }

		/* start when deadline reached
		ATTENTION: don't delay after the polling loop (-> print before) */
		// while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
        deadline_dog = (chirp_config.mx_period_time_s + 60 - 1) / DOG_PERIOD + 60 / DOG_PERIOD;
 8015048:	4b49      	ldr	r3, [pc, #292]	; (8015170 <chirp_round+0x304>)
 801504a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801504e:	b29b      	uxth	r3, r3
 8015050:	333b      	adds	r3, #59	; 0x3b
 8015052:	4a4f      	ldr	r2, [pc, #316]	; (8015190 <chirp_round+0x324>)
 8015054:	fb82 1203 	smull	r1, r2, r2, r3
 8015058:	10d2      	asrs	r2, r2, #3
 801505a:	17db      	asrs	r3, r3, #31
 801505c:	1ad3      	subs	r3, r2, r3
 801505e:	b29b      	uxth	r3, r3
 8015060:	3303      	adds	r3, #3
 8015062:	b29a      	uxth	r2, r3
 8015064:	4b4b      	ldr	r3, [pc, #300]	; (8015194 <chirp_round+0x328>)
 8015066:	801a      	strh	r2, [r3, #0]
        count_dog = 0;
 8015068:	4b4b      	ldr	r3, [pc, #300]	; (8015198 <chirp_round+0x32c>)
 801506a:	2200      	movs	r2, #0
 801506c:	801a      	strh	r2, [r3, #0]
        PRINTF("dg:%lu\n", deadline_dog);
 801506e:	4b49      	ldr	r3, [pc, #292]	; (8015194 <chirp_round+0x328>)
 8015070:	881b      	ldrh	r3, [r3, #0]
 8015072:	4619      	mov	r1, r3
 8015074:	4849      	ldr	r0, [pc, #292]	; (801519c <chirp_round+0x330>)
 8015076:	f00d fae1 	bl	802263c <iprintf>
        #if MX_LBT_ACCESS
            lbt_check_time();
 801507a:	f7f5 fb33 	bl	800a6e4 <lbt_check_time>
            chirp_isr.state = ISR_MIXER;
 801507e:	4b3f      	ldr	r3, [pc, #252]	; (801517c <chirp_round+0x310>)
 8015080:	2200      	movs	r2, #0
 8015082:	701a      	strb	r2, [r3, #0]
            if (chirp_config.primitive != FLOODING)
 8015084:	4b3a      	ldr	r3, [pc, #232]	; (8015170 <chirp_round+0x304>)
 8015086:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801508a:	2b01      	cmp	r3, #1
 801508c:	d035      	beq.n	80150fa <chirp_round+0x28e>
            {
            chirp_config.lbt_channel_primary = (chirp_config.lbt_channel_primary + 1) % LBT_CHANNEL_NUM;
 801508e:	4b38      	ldr	r3, [pc, #224]	; (8015170 <chirp_round+0x304>)
 8015090:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015094:	1c5a      	adds	r2, r3, #1
 8015096:	4b3e      	ldr	r3, [pc, #248]	; (8015190 <chirp_round+0x324>)
 8015098:	fb83 1302 	smull	r1, r3, r3, r2
 801509c:	1099      	asrs	r1, r3, #2
 801509e:	17d3      	asrs	r3, r2, #31
 80150a0:	1ac9      	subs	r1, r1, r3
 80150a2:	460b      	mov	r3, r1
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	440b      	add	r3, r1
 80150a8:	005b      	lsls	r3, r3, #1
 80150aa:	1ad1      	subs	r1, r2, r3
 80150ac:	b2ca      	uxtb	r2, r1
 80150ae:	4b30      	ldr	r3, [pc, #192]	; (8015170 <chirp_round+0x304>)
 80150b0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            if ((!chirp_outl->disem_flag) && (chirp_outl->task == MX_DISSEMINATE) && (chirp_outl->round >= 2))
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d11d      	bne.n	80150fa <chirp_round+0x28e>
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d119      	bne.n	80150fa <chirp_round+0x28e>
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	d913      	bls.n	80150fa <chirp_round+0x28e>
            {
                chirp_config.lbt_channel_primary = (chirp_config.lbt_channel_primary + LBT_CHANNEL_NUM - 1) % LBT_CHANNEL_NUM;
 80150d2:	4b27      	ldr	r3, [pc, #156]	; (8015170 <chirp_round+0x304>)
 80150d4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80150d8:	f103 0209 	add.w	r2, r3, #9
 80150dc:	4b2c      	ldr	r3, [pc, #176]	; (8015190 <chirp_round+0x324>)
 80150de:	fb83 1302 	smull	r1, r3, r3, r2
 80150e2:	1099      	asrs	r1, r3, #2
 80150e4:	17d3      	asrs	r3, r2, #31
 80150e6:	1ac9      	subs	r1, r1, r3
 80150e8:	460b      	mov	r3, r1
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	440b      	add	r3, r1
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	1ad1      	subs	r1, r2, r3
 80150f2:	b2ca      	uxtb	r2, r1
 80150f4:	4b1e      	ldr	r3, [pc, #120]	; (8015170 <chirp_round+0x304>)
 80150f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            }
            }
            SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 80150fa:	4b1d      	ldr	r3, [pc, #116]	; (8015170 <chirp_round+0x304>)
 80150fc:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8015100:	4a1b      	ldr	r2, [pc, #108]	; (8015170 <chirp_round+0x304>)
 8015102:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8015106:	4611      	mov	r1, r2
 8015108:	4a25      	ldr	r2, [pc, #148]	; (80151a0 <chirp_round+0x334>)
 801510a:	fb02 f201 	mul.w	r2, r2, r1
 801510e:	4413      	add	r3, r2
 8015110:	4618      	mov	r0, r3
 8015112:	f7f6 ffbb 	bl	800c08c <SX1276SetChannel>
            PRINTF("-------lbt_channel_primary:%lu\n", chirp_config.lbt_channel_primary);
 8015116:	4b16      	ldr	r3, [pc, #88]	; (8015170 <chirp_round+0x304>)
 8015118:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801511c:	4619      	mov	r1, r3
 801511e:	4821      	ldr	r0, [pc, #132]	; (80151a4 <chirp_round+0x338>)
 8015120:	f00d fa8c 	bl	802263c <iprintf>
        #endif
		while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 8015124:	bf00      	nop
 8015126:	f7f6 fcdd 	bl	800bae4 <gpi_tick_fast_extended>
 801512a:	4603      	mov	r3, r0
 801512c:	460c      	mov	r4, r1
 801512e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8015132:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8015136:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
_GPI_TICK_COMPARE_FUNCTION(fast_extended, 	Gpi_Fast_Tick_Extended)
 801513a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801513e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8015142:	1ac9      	subs	r1, r1, r3
 8015144:	eb62 0204 	sbc.w	r2, r2, r4
 8015148:	468b      	mov	fp, r1
 801514a:	4694      	mov	ip, r2
 801514c:	e9c7 bc12 	strd	fp, ip, [r7, #72]	; 0x48
 8015150:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8015154:	2b00      	cmp	r3, #0
 8015156:	f174 0300 	sbcs.w	r3, r4, #0
 801515a:	db25      	blt.n	80151a8 <chirp_round+0x33c>
 801515c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015160:	4313      	orrs	r3, r2
 8015162:	2b00      	cmp	r3, #0
 8015164:	bf14      	ite	ne
 8015166:	2301      	movne	r3, #1
 8015168:	2300      	moveq	r3, #0
 801516a:	b2db      	uxtb	r3, r3
 801516c:	e01e      	b.n	80151ac <chirp_round+0x340>
 801516e:	bf00      	nop
 8015170:	20001430 	.word	0x20001430
 8015174:	10624dd3 	.word	0x10624dd3
 8015178:	00f42400 	.word	0x00f42400
 801517c:	20000cfc 	.word	0x20000cfc
 8015180:	08025acc 	.word	0x08025acc
 8015184:	200012c8 	.word	0x200012c8
 8015188:	20001308 	.word	0x20001308
 801518c:	2000112c 	.word	0x2000112c
 8015190:	66666667 	.word	0x66666667
 8015194:	2000046c 	.word	0x2000046c
 8015198:	2000046e 	.word	0x2000046e
 801519c:	08025adc 	.word	0x08025adc
 80151a0:	00030d40 	.word	0x00030d40
 80151a4:	08025ae4 	.word	0x08025ae4
 80151a8:	f04f 33ff 	mov.w	r3, #4294967295
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	dbba      	blt.n	8015126 <chirp_round+0x2ba>
        #if ENERGEST_CONF_ON
            ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80151b0:	4b8a      	ldr	r3, [pc, #552]	; (80153dc <chirp_round+0x570>)
 80151b2:	79db      	ldrb	r3, [r3, #7]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d00d      	beq.n	80151d4 <chirp_round+0x368>
 80151b8:	4b89      	ldr	r3, [pc, #548]	; (80153e0 <chirp_round+0x574>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151be:	4b89      	ldr	r3, [pc, #548]	; (80153e4 <chirp_round+0x578>)
 80151c0:	69db      	ldr	r3, [r3, #28]
 80151c2:	1ad2      	subs	r2, r2, r3
 80151c4:	4b88      	ldr	r3, [pc, #544]	; (80153e8 <chirp_round+0x57c>)
 80151c6:	69db      	ldr	r3, [r3, #28]
 80151c8:	4413      	add	r3, r2
 80151ca:	4a87      	ldr	r2, [pc, #540]	; (80153e8 <chirp_round+0x57c>)
 80151cc:	61d3      	str	r3, [r2, #28]
 80151ce:	4b83      	ldr	r3, [pc, #524]	; (80153dc <chirp_round+0x570>)
 80151d0:	2200      	movs	r2, #0
 80151d2:	71da      	strb	r2, [r3, #7]
        #endif
        /* used in mixer_write, and revalue before mixer round */
        chirp_config.full_rank = 0;
 80151d4:	4b85      	ldr	r3, [pc, #532]	; (80153ec <chirp_round+0x580>)
 80151d6:	2200      	movs	r2, #0
 80151d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        chirp_config.full_column = UINT16_MAX;
 80151dc:	4b83      	ldr	r3, [pc, #524]	; (80153ec <chirp_round+0x580>)
 80151de:	22ff      	movs	r2, #255	; 0xff
 80151e0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
        rece_dissem_index = UINT16_MAX;
 80151e4:	4b82      	ldr	r3, [pc, #520]	; (80153f0 <chirp_round+0x584>)
 80151e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151ea:	801a      	strh	r2, [r3, #0]

        __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 80151ec:	4b81      	ldr	r3, [pc, #516]	; (80153f4 <chirp_round+0x588>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68da      	ldr	r2, [r3, #12]
 80151f2:	4b80      	ldr	r3, [pc, #512]	; (80153f4 <chirp_round+0x588>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f042 0201 	orr.w	r2, r2, #1
 80151fa:	60da      	str	r2, [r3, #12]

		deadline = mixer_start();
 80151fc:	f7fd fa0e 	bl	801261c <mixer_start>
 8015200:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

        __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 8015204:	4b7b      	ldr	r3, [pc, #492]	; (80153f4 <chirp_round+0x588>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	68da      	ldr	r2, [r3, #12]
 801520a:	4b7a      	ldr	r3, [pc, #488]	; (80153f4 <chirp_round+0x588>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	f022 0201 	bic.w	r2, r2, #1
 8015212:	60da      	str	r2, [r3, #12]

        if (chirp_config.primitive != FLOODING)
 8015214:	4b75      	ldr	r3, [pc, #468]	; (80153ec <chirp_round+0x580>)
 8015216:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801521a:	2b01      	cmp	r3, #1
 801521c:	f000 82e6 	beq.w	80157ec <chirp_round+0x980>
        {
        if (chirp_outl->task != MX_DISSEMINATE)
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	2b01      	cmp	r3, #1
 8015226:	d03f      	beq.n	80152a8 <chirp_round+0x43c>
        {
            Stats_value(RX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN)));
 8015228:	200f      	movs	r0, #15
 801522a:	f7f9 f805 	bl	800e238 <energest_type_time>
 801522e:	4603      	mov	r3, r0
 8015230:	63bb      	str	r3, [r7, #56]	; 0x38
		return ticks / (GPI_HYBRID_CLOCK_RATE / 1000000);
 8015232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015234:	091b      	lsrs	r3, r3, #4
 8015236:	4619      	mov	r1, r3
 8015238:	2001      	movs	r0, #1
 801523a:	f7f5 fc3b 	bl	800aab4 <Stats_value>
            Stats_value(TX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_TRANSMIT)));
 801523e:	200e      	movs	r0, #14
 8015240:	f7f8 fffa 	bl	800e238 <energest_type_time>
 8015244:	4603      	mov	r3, r0
 8015246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801524a:	091b      	lsrs	r3, r3, #4
 801524c:	4619      	mov	r1, r3
 801524e:	2002      	movs	r0, #2
 8015250:	f7f5 fc30 	bl	800aab4 <Stats_value>
            Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8015254:	2007      	movs	r0, #7
 8015256:	f7f8 ffef 	bl	800e238 <energest_type_time>
 801525a:	4603      	mov	r3, r0
 801525c:	4619      	mov	r1, r3
 801525e:	2007      	movs	r0, #7
 8015260:	f7f5 fc7a 	bl	800ab58 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 8015264:	2008      	movs	r0, #8
 8015266:	f7f8 ffe7 	bl	800e238 <energest_type_time>
 801526a:	4604      	mov	r4, r0
 801526c:	200e      	movs	r0, #14
 801526e:	f7f8 ffe3 	bl	800e238 <energest_type_time>
 8015272:	4603      	mov	r3, r0
 8015274:	1ae4      	subs	r4, r4, r3
 8015276:	200f      	movs	r0, #15
 8015278:	f7f8 ffde 	bl	800e238 <energest_type_time>
 801527c:	4603      	mov	r3, r0
 801527e:	1ae3      	subs	r3, r4, r3
 8015280:	4619      	mov	r1, r3
 8015282:	2008      	movs	r0, #8
 8015284:	f7f5 fc68 	bl	800ab58 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8015288:	200e      	movs	r0, #14
 801528a:	f7f8 ffd5 	bl	800e238 <energest_type_time>
 801528e:	4603      	mov	r3, r0
 8015290:	4619      	mov	r1, r3
 8015292:	200e      	movs	r0, #14
 8015294:	f7f5 fc60 	bl	800ab58 <Stats_value_debug>
            Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8015298:	200f      	movs	r0, #15
 801529a:	f7f8 ffcd 	bl	800e238 <energest_type_time>
 801529e:	4603      	mov	r3, r0
 80152a0:	4619      	mov	r1, r3
 80152a2:	200f      	movs	r0, #15
 80152a4:	f7f5 fc58 	bl	800ab58 <Stats_value_debug>
        }

        if (!chirp_recv(node_id, chirp_outl))
 80152a8:	79fb      	ldrb	r3, [r7, #7]
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7fe fe6b 	bl	8013f88 <chirp_recv>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d15e      	bne.n	8015376 <chirp_round+0x50a>
        {
            mx.stat_counter.slot_decoded = 0;
 80152b8:	4b4f      	ldr	r3, [pc, #316]	; (80153f8 <chirp_round+0x58c>)
 80152ba:	2200      	movs	r2, #0
 80152bc:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
            /* If in arrange state, none packet has been received, break loop */
            if (chirp_outl->task == MX_ARRANGE)
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	2b06      	cmp	r3, #6
 80152c6:	d101      	bne.n	80152cc <chirp_round+0x460>
            {
                return 0;
 80152c8:	2300      	movs	r3, #0
 80152ca:	e349      	b.n	8015960 <chirp_round+0xaf4>
            }
            else
            {
                failed_round++;
 80152cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80152d0:	3301      	adds	r3, #1
 80152d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                PRINTF("failed:%lu\n", failed_round);
 80152d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80152da:	4619      	mov	r1, r3
 80152dc:	4847      	ldr	r0, [pc, #284]	; (80153fc <chirp_round+0x590>)
 80152de:	f00d f9ad 	bl	802263c <iprintf>
                if (chirp_outl->task == MX_DISSEMINATE)
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d12f      	bne.n	801534a <chirp_round+0x4de>
                {
                    if (failed_round >= 2)
 80152ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d944      	bls.n	801537c <chirp_round+0x510>
                    {
                        Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 80152f2:	4b41      	ldr	r3, [pc, #260]	; (80153f8 <chirp_round+0x58c>)
 80152f4:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 80152f8:	4619      	mov	r1, r3
 80152fa:	2000      	movs	r0, #0
 80152fc:	f7f5 fbda 	bl	800aab4 <Stats_value>
                        Stats_to_Flash(chirp_outl->task);
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	4618      	mov	r0, r3
 8015306:	f7f5 fca3 	bl	800ac50 <Stats_to_Flash>
                        if (((node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max)) || ((!node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 1)))
 801530a:	79fb      	ldrb	r3, [r7, #7]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d009      	beq.n	8015324 <chirp_round+0x4b8>
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015316:	b29a      	uxth	r2, r3
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801531e:	b29b      	uxth	r3, r3
 8015320:	429a      	cmp	r2, r3
 8015322:	d20e      	bcs.n	8015342 <chirp_round+0x4d6>
 8015324:	79fb      	ldrb	r3, [r7, #7]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d10d      	bne.n	8015346 <chirp_round+0x4da>
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015330:	b29b      	uxth	r3, r3
 8015332:	461a      	mov	r2, r3
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801533a:	b29b      	uxth	r3, r3
 801533c:	3301      	adds	r3, #1
 801533e:	429a      	cmp	r2, r3
 8015340:	db01      	blt.n	8015346 <chirp_round+0x4da>
                            return 1;
 8015342:	2301      	movs	r3, #1
 8015344:	e30c      	b.n	8015960 <chirp_round+0xaf4>
                        else
                        {
                            return 0;
 8015346:	2300      	movs	r3, #0
 8015348:	e30a      	b.n	8015960 <chirp_round+0xaf4>
                        }
                    }
                }
                else if ((failed_round >= 1) && (chirp_outl->task != MX_DISSEMINATE))
 801534a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801534e:	2b00      	cmp	r3, #0
 8015350:	d014      	beq.n	801537c <chirp_round+0x510>
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	2b01      	cmp	r3, #1
 8015358:	d010      	beq.n	801537c <chirp_round+0x510>
                {
                    Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 801535a:	4b27      	ldr	r3, [pc, #156]	; (80153f8 <chirp_round+0x58c>)
 801535c:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 8015360:	4619      	mov	r1, r3
 8015362:	2000      	movs	r0, #0
 8015364:	f7f5 fba6 	bl	800aab4 <Stats_value>
                    Stats_to_Flash(chirp_outl->task);
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	781b      	ldrb	r3, [r3, #0]
 801536c:	4618      	mov	r0, r3
 801536e:	f7f5 fc6f 	bl	800ac50 <Stats_to_Flash>
                    return 0;
 8015372:	2300      	movs	r3, #0
 8015374:	e2f4      	b.n	8015960 <chirp_round+0xaf4>
                }
            }
        }
        else
            failed_round = 0;
 8015376:	2300      	movs	r3, #0
 8015378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        if (chirp_outl->task != MX_DISSEMINATE)
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	2b01      	cmp	r3, #1
 8015382:	d006      	beq.n	8015392 <chirp_round+0x526>
            Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 8015384:	4b1c      	ldr	r3, [pc, #112]	; (80153f8 <chirp_round+0x58c>)
 8015386:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 801538a:	4619      	mov	r1, r3
 801538c:	2000      	movs	r0, #0
 801538e:	f7f5 fb91 	bl	800aab4 <Stats_value>

		while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 8015392:	bf00      	nop
 8015394:	f7f6 fba6 	bl	800bae4 <gpi_tick_fast_extended>
 8015398:	4603      	mov	r3, r0
 801539a:	460c      	mov	r4, r1
 801539c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80153a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80153a4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80153a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80153ac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80153b0:	1ac9      	subs	r1, r1, r3
 80153b2:	eb62 0204 	sbc.w	r2, r2, r4
 80153b6:	468b      	mov	fp, r1
 80153b8:	4694      	mov	ip, r2
 80153ba:	e9c7 bc0c 	strd	fp, ip, [r7, #48]	; 0x30
 80153be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	f174 0300 	sbcs.w	r3, r4, #0
 80153c8:	db1a      	blt.n	8015400 <chirp_round+0x594>
 80153ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ce:	4313      	orrs	r3, r2
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	bf14      	ite	ne
 80153d4:	2301      	movne	r3, #1
 80153d6:	2300      	moveq	r3, #0
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	e013      	b.n	8015404 <chirp_round+0x598>
 80153dc:	2000112c 	.word	0x2000112c
 80153e0:	200012c8 	.word	0x200012c8
 80153e4:	20001308 	.word	0x20001308
 80153e8:	20000f10 	.word	0x20000f10
 80153ec:	20001430 	.word	0x20001430
 80153f0:	20000470 	.word	0x20000470
 80153f4:	20001140 	.word	0x20001140
 80153f8:	200014f0 	.word	0x200014f0
 80153fc:	08025b04 	.word	0x08025b04
 8015400:	f04f 33ff 	mov.w	r3, #4294967295
 8015404:	2b00      	cmp	r3, #0
 8015406:	dbc5      	blt.n	8015394 <chirp_round+0x528>

        /* in dissemination, nodes have to send back the results, so switch the configuration between rounds */
        if (chirp_outl->task == MX_DISSEMINATE)
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	781b      	ldrb	r3, [r3, #0]
 801540c:	2b01      	cmp	r3, #1
 801540e:	f040 819f 	bne.w	8015750 <chirp_round+0x8e4>
        {
                chirp_outl->disem_file_index_stay++;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015418:	b29b      	uxth	r3, r3
 801541a:	3301      	adds	r3, #1
 801541c:	b29a      	uxth	r2, r3
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                PRINTF("disem_file_index_stay:%lu\n", chirp_outl->disem_file_index_stay);
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801542a:	b29b      	uxth	r3, r3
 801542c:	4619      	mov	r1, r3
 801542e:	4857      	ldr	r0, [pc, #348]	; (801558c <chirp_round+0x720>)
 8015430:	f00d f904 	bl	802263c <iprintf>
                //     {
                //         return 0;
                //     }
                // }
                /* dissemination session: disseminate files to all nodes */
                if (!chirp_outl->disem_flag)
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801543a:	2b00      	cmp	r3, #0
 801543c:	f040 80b2 	bne.w	80155a4 <chirp_round+0x738>
                {
                    Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8015440:	2007      	movs	r0, #7
 8015442:	f7f8 fef9 	bl	800e238 <energest_type_time>
 8015446:	4603      	mov	r3, r0
 8015448:	4619      	mov	r1, r3
 801544a:	2007      	movs	r0, #7
 801544c:	f7f5 fb84 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 8015450:	2008      	movs	r0, #8
 8015452:	f7f8 fef1 	bl	800e238 <energest_type_time>
 8015456:	4604      	mov	r4, r0
 8015458:	200e      	movs	r0, #14
 801545a:	f7f8 feed 	bl	800e238 <energest_type_time>
 801545e:	4603      	mov	r3, r0
 8015460:	1ae4      	subs	r4, r4, r3
 8015462:	200f      	movs	r0, #15
 8015464:	f7f8 fee8 	bl	800e238 <energest_type_time>
 8015468:	4603      	mov	r3, r0
 801546a:	1ae3      	subs	r3, r4, r3
 801546c:	4619      	mov	r1, r3
 801546e:	2008      	movs	r0, #8
 8015470:	f7f5 fb72 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8015474:	200e      	movs	r0, #14
 8015476:	f7f8 fedf 	bl	800e238 <energest_type_time>
 801547a:	4603      	mov	r3, r0
 801547c:	4619      	mov	r1, r3
 801547e:	200e      	movs	r0, #14
 8015480:	f7f5 fb6a 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8015484:	200f      	movs	r0, #15
 8015486:	f7f8 fed7 	bl	800e238 <energest_type_time>
 801548a:	4603      	mov	r3, r0
 801548c:	4619      	mov	r1, r3
 801548e:	200f      	movs	r0, #15
 8015490:	f7f5 fb62 	bl	800ab58 <Stats_value_debug>
                    free(payload_distribution);
 8015494:	4b3e      	ldr	r3, [pc, #248]	; (8015590 <chirp_round+0x724>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	4618      	mov	r0, r3
 801549a:	f00c faaf 	bl	80219fc <free>
                    chirp_radio_config(chirp_outl->default_sf, 7, 1, 8, chirp_outl->default_tp, chirp_outl->default_freq);
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80154a4:	b2d8      	uxtb	r0, r3
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80154ac:	683a      	ldr	r2, [r7, #0]
 80154ae:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80154b2:	9201      	str	r2, [sp, #4]
 80154b4:	9300      	str	r3, [sp, #0]
 80154b6:	2308      	movs	r3, #8
 80154b8:	2201      	movs	r2, #1
 80154ba:	2107      	movs	r1, #7
 80154bc:	f7fd fdb8 	bl	8013030 <chirp_radio_config>
                    /* If now is confirm, the initiator collect all nodes information about whether they are full rank last round, if so, then send the next file chunk, file index++, else do not increase file index */
                    if ((!node_id) && (chirp_config.full_column == 0))
 80154c0:	79fb      	ldrb	r3, [r7, #7]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d117      	bne.n	80154f6 <chirp_round+0x68a>
 80154c6:	4b33      	ldr	r3, [pc, #204]	; (8015594 <chirp_round+0x728>)
 80154c8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d112      	bne.n	80154f6 <chirp_round+0x68a>
                    {
                        chirp_outl->disem_file_index++;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	3301      	adds	r3, #1
 80154da:	b29a      	uxth	r2, r3
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                        chirp_outl->disem_file_index_stay = 0;
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	2200      	movs	r2, #0
 80154e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80154ea:	2200      	movs	r2, #0
 80154ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
                        PRINTF("full receive\n");
 80154f0:	4829      	ldr	r0, [pc, #164]	; (8015598 <chirp_round+0x72c>)
 80154f2:	f00d f92b 	bl	802274c <puts>
                    }
                    PRINTF("next: disem_flag: %lu, %lu\n", chirp_outl->disem_file_index, chirp_outl->disem_file_max);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	4619      	mov	r1, r3
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015506:	b29b      	uxth	r3, r3
 8015508:	461a      	mov	r2, r3
 801550a:	4824      	ldr	r0, [pc, #144]	; (801559c <chirp_round+0x730>)
 801550c:	f00d f896 	bl	802263c <iprintf>
                    chirp_packet_config(chirp_outl->num_nodes, chirp_outl->generation_size, chirp_outl->payload_len + HASH_TAIL, DISSEMINATION);
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015522:	3302      	adds	r3, #2
 8015524:	b2da      	uxtb	r2, r3
 8015526:	2302      	movs	r3, #2
 8015528:	f7fd fb0e 	bl	8012b48 <chirp_packet_config>
                    chirp_outl->packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801552c:	4b19      	ldr	r3, [pc, #100]	; (8015594 <chirp_round+0x728>)
 801552e:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 8015532:	4b18      	ldr	r3, [pc, #96]	; (8015594 <chirp_round+0x728>)
 8015534:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8015538:	4b16      	ldr	r3, [pc, #88]	; (8015594 <chirp_round+0x728>)
 801553a:	8a5b      	ldrh	r3, [r3, #18]
 801553c:	b29b      	uxth	r3, r3
 801553e:	b2db      	uxtb	r3, r3
 8015540:	3302      	adds	r3, #2
 8015542:	b2db      	uxtb	r3, r3
 8015544:	9301      	str	r3, [sp, #4]
 8015546:	2308      	movs	r3, #8
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	2300      	movs	r3, #0
 801554c:	2201      	movs	r2, #1
 801554e:	f7f7 fd61 	bl	800d014 <SX1276GetPacketTime>
 8015552:	4602      	mov	r2, r0
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	f8c3 2007 	str.w	r2, [r3, #7]
                    chirp_slot_config(chirp_outl->packet_time + 100000, chirp_outl->default_slot_num, 2000000);
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8015560:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8015564:	33a0      	adds	r3, #160	; 0xa0
 8015566:	683a      	ldr	r2, [r7, #0]
 8015568:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 801556c:	b291      	uxth	r1, r2
 801556e:	4a0c      	ldr	r2, [pc, #48]	; (80155a0 <chirp_round+0x734>)
 8015570:	4618      	mov	r0, r3
 8015572:	f7fd fcf1 	bl	8012f58 <chirp_slot_config>
                    chirp_payload_distribution(chirp_outl->task);
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	4618      	mov	r0, r3
 801557c:	f7fd fdb8 	bl	80130f0 <chirp_payload_distribution>
                    chirp_outl->disem_flag = 1;
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	2201      	movs	r2, #1
 8015584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8015588:	e0e2      	b.n	8015750 <chirp_round+0x8e4>
 801558a:	bf00      	nop
 801558c:	08025b10 	.word	0x08025b10
 8015590:	20000cc8 	.word	0x20000cc8
 8015594:	20001430 	.word	0x20001430
 8015598:	08025b2c 	.word	0x08025b2c
 801559c:	08025b3c 	.word	0x08025b3c
 80155a0:	001e8480 	.word	0x001e8480
                }
                /* confirm session: collect all nodes condition (if full rank in last mixer round) */
                else
                {
                    Stats_value(RX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LISTEN)));
 80155a4:	200f      	movs	r0, #15
 80155a6:	f7f8 fe47 	bl	800e238 <energest_type_time>
 80155aa:	4603      	mov	r3, r0
 80155ac:	61fb      	str	r3, [r7, #28]
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	091b      	lsrs	r3, r3, #4
 80155b2:	4619      	mov	r1, r3
 80155b4:	2001      	movs	r0, #1
 80155b6:	f7f5 fa7d 	bl	800aab4 <Stats_value>
                    Stats_value(TX_STATS, (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_TRANSMIT)));
 80155ba:	200e      	movs	r0, #14
 80155bc:	f7f8 fe3c 	bl	800e238 <energest_type_time>
 80155c0:	4603      	mov	r3, r0
 80155c2:	623b      	str	r3, [r7, #32]
 80155c4:	6a3b      	ldr	r3, [r7, #32]
 80155c6:	091b      	lsrs	r3, r3, #4
 80155c8:	4619      	mov	r1, r3
 80155ca:	2002      	movs	r0, #2
 80155cc:	f7f5 fa72 	bl	800aab4 <Stats_value>
                    Stats_value(SLOT_STATS, mx.stat_counter.slot_decoded);
 80155d0:	4bbc      	ldr	r3, [pc, #752]	; (80158c4 <chirp_round+0xa58>)
 80155d2:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
 80155d6:	4619      	mov	r1, r3
 80155d8:	2000      	movs	r0, #0
 80155da:	f7f5 fa6b 	bl	800aab4 <Stats_value>

                    Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 80155de:	2007      	movs	r0, #7
 80155e0:	f7f8 fe2a 	bl	800e238 <energest_type_time>
 80155e4:	4603      	mov	r3, r0
 80155e6:	4619      	mov	r1, r3
 80155e8:	2007      	movs	r0, #7
 80155ea:	f7f5 fab5 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 80155ee:	2008      	movs	r0, #8
 80155f0:	f7f8 fe22 	bl	800e238 <energest_type_time>
 80155f4:	4604      	mov	r4, r0
 80155f6:	200e      	movs	r0, #14
 80155f8:	f7f8 fe1e 	bl	800e238 <energest_type_time>
 80155fc:	4603      	mov	r3, r0
 80155fe:	1ae4      	subs	r4, r4, r3
 8015600:	200f      	movs	r0, #15
 8015602:	f7f8 fe19 	bl	800e238 <energest_type_time>
 8015606:	4603      	mov	r3, r0
 8015608:	1ae3      	subs	r3, r4, r3
 801560a:	4619      	mov	r1, r3
 801560c:	2008      	movs	r0, #8
 801560e:	f7f5 faa3 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8015612:	200e      	movs	r0, #14
 8015614:	f7f8 fe10 	bl	800e238 <energest_type_time>
 8015618:	4603      	mov	r3, r0
 801561a:	4619      	mov	r1, r3
 801561c:	200e      	movs	r0, #14
 801561e:	f7f5 fa9b 	bl	800ab58 <Stats_value_debug>
                    Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8015622:	200f      	movs	r0, #15
 8015624:	f7f8 fe08 	bl	800e238 <energest_type_time>
 8015628:	4603      	mov	r3, r0
 801562a:	4619      	mov	r1, r3
 801562c:	200f      	movs	r0, #15
 801562e:	f7f5 fa93 	bl	800ab58 <Stats_value_debug>
                    PRINTF("ENERGEST_TYPE_LPM:%lu\n", (uint32_t)gpi_tick_hybrid_to_us(energest_type_time(ENERGEST_TYPE_LPM)));
 8015632:	2008      	movs	r0, #8
 8015634:	f7f8 fe00 	bl	800e238 <energest_type_time>
 8015638:	4603      	mov	r3, r0
 801563a:	627b      	str	r3, [r7, #36]	; 0x24
 801563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563e:	091b      	lsrs	r3, r3, #4
 8015640:	4619      	mov	r1, r3
 8015642:	48a1      	ldr	r0, [pc, #644]	; (80158c8 <chirp_round+0xa5c>)
 8015644:	f00c fffa 	bl	802263c <iprintf>

                    free(payload_distribution);
 8015648:	4ba0      	ldr	r3, [pc, #640]	; (80158cc <chirp_round+0xa60>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4618      	mov	r0, r3
 801564e:	f00c f9d5 	bl	80219fc <free>
                    if (chirp_outl->dissem_back_sf)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d00d      	beq.n	8015678 <chirp_round+0x80c>
                        chirp_radio_config(chirp_outl->dissem_back_sf, 7, 1, 8, 14, chirp_outl->default_freq);
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	230e      	movs	r3, #14
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	2308      	movs	r3, #8
 8015670:	2201      	movs	r2, #1
 8015672:	2107      	movs	r1, #7
 8015674:	f7fd fcdc 	bl	8013030 <chirp_radio_config>
                    PRINTF("next: collect disem_flag: %lu, %lu\n", chirp_outl->disem_file_index, chirp_outl->disem_file_max);
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801567e:	b29b      	uxth	r3, r3
 8015680:	4619      	mov	r1, r3
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015688:	b29b      	uxth	r3, r3
 801568a:	461a      	mov	r2, r3
 801568c:	4890      	ldr	r0, [pc, #576]	; (80158d0 <chirp_round+0xa64>)
 801568e:	f00c ffd5 	bl	802263c <iprintf>
                    // chirp_outl->payload_len = DATA_HEADER_LENGTH;
                    chirp_packet_config(chirp_outl->num_nodes, chirp_outl->num_nodes, DATA_HEADER_LENGTH + HASH_TAIL, COLLECTION);
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 801569e:	2303      	movs	r3, #3
 80156a0:	220a      	movs	r2, #10
 80156a2:	f7fd fa51 	bl	8012b48 <chirp_packet_config>
                    chirp_outl->packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 80156a6:	4b8b      	ldr	r3, [pc, #556]	; (80158d4 <chirp_round+0xa68>)
 80156a8:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 80156ac:	4b89      	ldr	r3, [pc, #548]	; (80158d4 <chirp_round+0xa68>)
 80156ae:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80156b2:	4b88      	ldr	r3, [pc, #544]	; (80158d4 <chirp_round+0xa68>)
 80156b4:	8a5b      	ldrh	r3, [r3, #18]
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	3302      	adds	r3, #2
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	9301      	str	r3, [sp, #4]
 80156c0:	2308      	movs	r3, #8
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	2300      	movs	r3, #0
 80156c6:	2201      	movs	r2, #1
 80156c8:	f7f7 fca4 	bl	800d014 <SX1276GetPacketTime>
 80156cc:	4602      	mov	r2, r0
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	f8c3 2007 	str.w	r2, [r3, #7]
                    if (chirp_outl->dissem_back_slot_num == 0)
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d107      	bne.n	80156ee <chirp_round+0x882>
                        chirp_outl->dissem_back_slot_num = chirp_outl->num_nodes * 8;
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80156e4:	00db      	lsls	r3, r3, #3
 80156e6:	b2da      	uxtb	r2, r3
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    chirp_slot_config(chirp_outl->packet_time + 100000, chirp_outl->dissem_back_slot_num, 1500000);
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80156f4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80156f8:	33a0      	adds	r3, #160	; 0xa0
 80156fa:	683a      	ldr	r2, [r7, #0]
 80156fc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8015700:	b291      	uxth	r1, r2
 8015702:	4a75      	ldr	r2, [pc, #468]	; (80158d8 <chirp_round+0xa6c>)
 8015704:	4618      	mov	r0, r3
 8015706:	f7fd fc27 	bl	8012f58 <chirp_slot_config>
                    chirp_payload_distribution(MX_COLLECT);
 801570a:	2002      	movs	r0, #2
 801570c:	f7fd fcf0 	bl	80130f0 <chirp_payload_distribution>
                    chirp_outl->disem_flag = 0;
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	2200      	movs	r2, #0
 8015714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                    /* in confirm, all nodes sends packets */
                    PRINTF("rece_dissem_index:%x\n", rece_dissem_index);
 8015718:	4b70      	ldr	r3, [pc, #448]	; (80158dc <chirp_round+0xa70>)
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	4619      	mov	r1, r3
 801571e:	4870      	ldr	r0, [pc, #448]	; (80158e0 <chirp_round+0xa74>)
 8015720:	f00c ff8c 	bl	802263c <iprintf>

                    if (chirp_outl->disem_file_index > rece_dissem_index)
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801572a:	b29a      	uxth	r2, r3
 801572c:	4b6b      	ldr	r3, [pc, #428]	; (80158dc <chirp_round+0xa70>)
 801572e:	881b      	ldrh	r3, [r3, #0]
 8015730:	429a      	cmp	r2, r3
 8015732:	d90d      	bls.n	8015750 <chirp_round+0x8e4>
                    {
                        PRINTF("full disem_copy\n");
 8015734:	486b      	ldr	r0, [pc, #428]	; (80158e4 <chirp_round+0xa78>)
 8015736:	f00d f809 	bl	802274c <puts>
                        chirp_config.disem_copy = 1;
 801573a:	4b66      	ldr	r3, [pc, #408]	; (80158d4 <chirp_round+0xa68>)
 801573c:	2201      	movs	r2, #1
 801573e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
                        chirp_outl->disem_flag_full_rank = mx.stat_counter.slot_full_rank;
 8015742:	4b60      	ldr	r3, [pc, #384]	; (80158c4 <chirp_round+0xa58>)
 8015744:	f8b3 389a 	ldrh.w	r3, [r3, #2202]	; 0x89a
 8015748:	b2da      	uxtb	r2, r3
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    }
                }
        }

        /* once the round num expired, quit loop */
        if ((chirp_outl->round > chirp_outl->round_max) && (chirp_outl->task != MX_DISSEMINATE))
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015756:	b29a      	uxth	r2, r3
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801575e:	b29b      	uxth	r3, r3
 8015760:	429a      	cmp	r2, r3
 8015762:	d90a      	bls.n	801577a <chirp_round+0x90e>
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	2b01      	cmp	r3, #1
 801576a:	d006      	beq.n	801577a <chirp_round+0x90e>
        {
            Stats_to_Flash(chirp_outl->task);
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	4618      	mov	r0, r3
 8015772:	f7f5 fa6d 	bl	800ac50 <Stats_to_Flash>
            return 1;
 8015776:	2301      	movs	r3, #1
 8015778:	e0f2      	b.n	8015960 <chirp_round+0xaf4>
        }
        /* in collection, break when file is done */
        else if ((chirp_outl->task == MX_DISSEMINATE) && (!chirp_outl->disem_flag))
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	2b01      	cmp	r3, #1
 8015780:	d126      	bne.n	80157d0 <chirp_round+0x964>
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015788:	2b00      	cmp	r3, #0
 801578a:	d121      	bne.n	80157d0 <chirp_round+0x964>
        {
            if ((node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 2))
 801578c:	79fb      	ldrb	r3, [r7, #7]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00d      	beq.n	80157ae <chirp_round+0x942>
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015798:	b29b      	uxth	r3, r3
 801579a:	461a      	mov	r2, r3
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	3302      	adds	r3, #2
 80157a6:	429a      	cmp	r2, r3
 80157a8:	db01      	blt.n	80157ae <chirp_round+0x942>
                return 1;
 80157aa:	2301      	movs	r3, #1
 80157ac:	e0d8      	b.n	8015960 <chirp_round+0xaf4>
            else if ((!node_id) && (chirp_outl->disem_file_index >= chirp_outl->disem_file_max + 1))
 80157ae:	79fb      	ldrb	r3, [r7, #7]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d10d      	bne.n	80157d0 <chirp_round+0x964>
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	461a      	mov	r2, r3
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	3301      	adds	r3, #1
 80157c8:	429a      	cmp	r2, r3
 80157ca:	db01      	blt.n	80157d0 <chirp_round+0x964>
                return 1;
 80157cc:	2301      	movs	r3, #1
 80157ce:	e0c7      	b.n	8015960 <chirp_round+0xaf4>
        }

        deadline += (Gpi_Fast_Tick_Extended)update_period;
 80157d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157d2:	469b      	mov	fp, r3
 80157d4:	f04f 0c00 	mov.w	ip, #0
 80157d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80157dc:	eb1b 0301 	adds.w	r3, fp, r1
 80157e0:	eb4c 0402 	adc.w	r4, ip, r2
 80157e4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 80157e8:	f7ff bbcf 	b.w	8014f8a <chirp_round+0x11e>
        }
        else
        {
            Gpi_Fast_Tick_Native resync_plus =  GPI_TICK_MS_TO_FAST2(((chirp_config.mx_slot_length_in_us * 5 / 2) * (chirp_config.mx_round_length / 2 - 1) / 1000) - chirp_config.mx_round_length * (chirp_config.mx_slot_length_in_us / 1000));
 80157ec:	4b39      	ldr	r3, [pc, #228]	; (80158d4 <chirp_round+0xa68>)
 80157ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157f0:	4613      	mov	r3, r2
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	4413      	add	r3, r2
 80157f6:	085b      	lsrs	r3, r3, #1
 80157f8:	4a36      	ldr	r2, [pc, #216]	; (80158d4 <chirp_round+0xa68>)
 80157fa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80157fe:	b292      	uxth	r2, r2
 8015800:	0852      	lsrs	r2, r2, #1
 8015802:	b292      	uxth	r2, r2
 8015804:	3a01      	subs	r2, #1
 8015806:	fb02 f303 	mul.w	r3, r2, r3
 801580a:	4a37      	ldr	r2, [pc, #220]	; (80158e8 <chirp_round+0xa7c>)
 801580c:	fba2 2303 	umull	r2, r3, r2, r3
 8015810:	099a      	lsrs	r2, r3, #6
 8015812:	4b30      	ldr	r3, [pc, #192]	; (80158d4 <chirp_round+0xa68>)
 8015814:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8015818:	b29b      	uxth	r3, r3
 801581a:	4618      	mov	r0, r3
 801581c:	4b2d      	ldr	r3, [pc, #180]	; (80158d4 <chirp_round+0xa68>)
 801581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015820:	4931      	ldr	r1, [pc, #196]	; (80158e8 <chirp_round+0xa7c>)
 8015822:	fba1 1303 	umull	r1, r3, r1, r3
 8015826:	099b      	lsrs	r3, r3, #6
 8015828:	fb03 f300 	mul.w	r3, r3, r0
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	4a2e      	ldr	r2, [pc, #184]	; (80158e8 <chirp_round+0xa7c>)
 8015830:	fba2 2303 	umull	r2, r3, r2, r3
 8015834:	099b      	lsrs	r3, r3, #6
 8015836:	4a2d      	ldr	r2, [pc, #180]	; (80158ec <chirp_round+0xa80>)
 8015838:	fb02 f103 	mul.w	r1, r2, r3
 801583c:	4b25      	ldr	r3, [pc, #148]	; (80158d4 <chirp_round+0xa68>)
 801583e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015840:	4613      	mov	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4413      	add	r3, r2
 8015846:	085b      	lsrs	r3, r3, #1
 8015848:	4a22      	ldr	r2, [pc, #136]	; (80158d4 <chirp_round+0xa68>)
 801584a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 801584e:	b292      	uxth	r2, r2
 8015850:	0852      	lsrs	r2, r2, #1
 8015852:	b292      	uxth	r2, r2
 8015854:	3a01      	subs	r2, #1
 8015856:	fb02 f303 	mul.w	r3, r2, r3
 801585a:	4a23      	ldr	r2, [pc, #140]	; (80158e8 <chirp_round+0xa7c>)
 801585c:	fba2 2303 	umull	r2, r3, r2, r3
 8015860:	099a      	lsrs	r2, r3, #6
 8015862:	4b1c      	ldr	r3, [pc, #112]	; (80158d4 <chirp_round+0xa68>)
 8015864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8015868:	b29b      	uxth	r3, r3
 801586a:	461c      	mov	r4, r3
 801586c:	4b19      	ldr	r3, [pc, #100]	; (80158d4 <chirp_round+0xa68>)
 801586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015870:	481d      	ldr	r0, [pc, #116]	; (80158e8 <chirp_round+0xa7c>)
 8015872:	fba0 0303 	umull	r0, r3, r0, r3
 8015876:	099b      	lsrs	r3, r3, #6
 8015878:	fb03 f304 	mul.w	r3, r3, r4
 801587c:	1ad2      	subs	r2, r2, r3
 801587e:	4b1a      	ldr	r3, [pc, #104]	; (80158e8 <chirp_round+0xa7c>)
 8015880:	fba3 0302 	umull	r0, r3, r3, r2
 8015884:	099b      	lsrs	r3, r3, #6
 8015886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801588a:	fb00 f303 	mul.w	r3, r0, r3
 801588e:	1ad3      	subs	r3, r2, r3
 8015890:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8015894:	fb02 f303 	mul.w	r3, r2, r3
 8015898:	440b      	add	r3, r1
 801589a:	657b      	str	r3, [r7, #84]	; 0x54
            if (!chirp_config.glossy_task)
 801589c:	4b0d      	ldr	r3, [pc, #52]	; (80158d4 <chirp_round+0xa68>)
 801589e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d124      	bne.n	80158f0 <chirp_round+0xa84>
                deadline += (Gpi_Fast_Tick_Extended)(update_period - resync_plus);
 80158a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80158a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	469b      	mov	fp, r3
 80158ae:	f04f 0c00 	mov.w	ip, #0
 80158b2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80158b6:	eb1b 0301 	adds.w	r3, fp, r1
 80158ba:	eb4c 0402 	adc.w	r4, ip, r2
 80158be:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 80158c2:	e021      	b.n	8015908 <chirp_round+0xa9c>
 80158c4:	200014f0 	.word	0x200014f0
 80158c8:	08025b58 	.word	0x08025b58
 80158cc:	20000cc8 	.word	0x20000cc8
 80158d0:	08025b70 	.word	0x08025b70
 80158d4:	20001430 	.word	0x20001430
 80158d8:	0016e360 	.word	0x0016e360
 80158dc:	20000470 	.word	0x20000470
 80158e0:	08025b94 	.word	0x08025b94
 80158e4:	08025bac 	.word	0x08025bac
 80158e8:	10624dd3 	.word	0x10624dd3
 80158ec:	00f42400 	.word	0x00f42400
            else
                deadline += (Gpi_Fast_Tick_Extended)(update_period);
 80158f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80158f2:	469b      	mov	fp, r3
 80158f4:	f04f 0c00 	mov.w	ip, #0
 80158f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80158fc:	eb1b 0301 	adds.w	r3, fp, r1
 8015900:	eb4c 0402 	adc.w	r4, ip, r2
 8015904:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
            while (gpi_tick_compare_fast_extended(gpi_tick_fast_extended(), deadline) < 0);
 8015908:	bf00      	nop
 801590a:	f7f6 f8eb 	bl	800bae4 <gpi_tick_fast_extended>
 801590e:	4603      	mov	r3, r0
 8015910:	460c      	mov	r4, r1
 8015912:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8015916:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801591a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 801591e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015922:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8015926:	1ac9      	subs	r1, r1, r3
 8015928:	eb62 0204 	sbc.w	r2, r2, r4
 801592c:	468b      	mov	fp, r1
 801592e:	4694      	mov	ip, r2
 8015930:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 8015934:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f174 0300 	sbcs.w	r3, r4, #0
 801593e:	db08      	blt.n	8015952 <chirp_round+0xae6>
 8015940:	693a      	ldr	r2, [r7, #16]
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	4313      	orrs	r3, r2
 8015946:	2b00      	cmp	r3, #0
 8015948:	bf14      	ite	ne
 801594a:	2301      	movne	r3, #1
 801594c:	2300      	moveq	r3, #0
 801594e:	b2db      	uxtb	r3, r3
 8015950:	e001      	b.n	8015956 <chirp_round+0xaea>
 8015952:	f04f 33ff 	mov.w	r3, #4294967295
 8015956:	2b00      	cmp	r3, #0
 8015958:	dbd7      	blt.n	801590a <chirp_round+0xa9e>
            return chirp_config.glossy_task;
 801595a:	4b04      	ldr	r3, [pc, #16]	; (801596c <chirp_round+0xb00>)
 801595c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
        }
	}
}
 8015960:	4618      	mov	r0, r3
 8015962:	3768      	adds	r7, #104	; 0x68
 8015964:	46bd      	mov	sp, r7
 8015966:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801596a:	bf00      	nop
 801596c:	20001430 	.word	0x20001430

08015970 <TIM5_IRQHandler>:

void DOG_TIMER_ISR_NAME(void)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	af00      	add	r7, sp, #0
    PRINTF("d:%lu, %lu\n", count_dog, deadline_dog);
 8015974:	4b17      	ldr	r3, [pc, #92]	; (80159d4 <TIM5_IRQHandler+0x64>)
 8015976:	881b      	ldrh	r3, [r3, #0]
 8015978:	4619      	mov	r1, r3
 801597a:	4b17      	ldr	r3, [pc, #92]	; (80159d8 <TIM5_IRQHandler+0x68>)
 801597c:	881b      	ldrh	r3, [r3, #0]
 801597e:	461a      	mov	r2, r3
 8015980:	4816      	ldr	r0, [pc, #88]	; (80159dc <TIM5_IRQHandler+0x6c>)
 8015982:	f00c fe5b 	bl	802263c <iprintf>
    count_dog++;
 8015986:	4b13      	ldr	r3, [pc, #76]	; (80159d4 <TIM5_IRQHandler+0x64>)
 8015988:	881b      	ldrh	r3, [r3, #0]
 801598a:	3301      	adds	r3, #1
 801598c:	b29a      	uxth	r2, r3
 801598e:	4b11      	ldr	r3, [pc, #68]	; (80159d4 <TIM5_IRQHandler+0x64>)
 8015990:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 8015992:	4b13      	ldr	r3, [pc, #76]	; (80159e0 <TIM5_IRQHandler+0x70>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f06f 0201 	mvn.w	r2, #1
 801599a:	611a      	str	r2, [r3, #16]
	__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 801599c:	4b10      	ldr	r3, [pc, #64]	; (80159e0 <TIM5_IRQHandler+0x70>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	68da      	ldr	r2, [r3, #12]
 80159a2:	4b0f      	ldr	r3, [pc, #60]	; (80159e0 <TIM5_IRQHandler+0x70>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	f022 0201 	bic.w	r2, r2, #1
 80159aa:	60da      	str	r2, [r3, #12]
    if (count_dog > deadline_dog)
 80159ac:	4b09      	ldr	r3, [pc, #36]	; (80159d4 <TIM5_IRQHandler+0x64>)
 80159ae:	881a      	ldrh	r2, [r3, #0]
 80159b0:	4b09      	ldr	r3, [pc, #36]	; (80159d8 <TIM5_IRQHandler+0x68>)
 80159b2:	881b      	ldrh	r3, [r3, #0]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d902      	bls.n	80159be <TIM5_IRQHandler+0x4e>
 80159b8:	b671      	cpsid	f
    {
        __disable_fault_irq();
        NVIC_SystemReset();
 80159ba:	f7fd f821 	bl	8012a00 <NVIC_SystemReset>
    }
    __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 80159be:	4b08      	ldr	r3, [pc, #32]	; (80159e0 <TIM5_IRQHandler+0x70>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	68da      	ldr	r2, [r3, #12]
 80159c4:	4b06      	ldr	r3, [pc, #24]	; (80159e0 <TIM5_IRQHandler+0x70>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f042 0201 	orr.w	r2, r2, #1
 80159cc:	60da      	str	r2, [r3, #12]
}
 80159ce:	bf00      	nop
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	2000046e 	.word	0x2000046e
 80159d8:	2000046c 	.word	0x2000046c
 80159dc:	08025bbc 	.word	0x08025bbc
 80159e0:	20001140 	.word	0x20001140

080159e4 <NVIC_SystemReset>:
{
 80159e4:	b480      	push	{r7}
 80159e6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80159e8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80159ec:	4b05      	ldr	r3, [pc, #20]	; (8015a04 <NVIC_SystemReset+0x20>)
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80159f4:	4903      	ldr	r1, [pc, #12]	; (8015a04 <NVIC_SystemReset+0x20>)
 80159f6:	4b04      	ldr	r3, [pc, #16]	; (8015a08 <NVIC_SystemReset+0x24>)
 80159f8:	4313      	orrs	r3, r2
 80159fa:	60cb      	str	r3, [r1, #12]
 80159fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8015a00:	bf00      	nop
    __NOP();
 8015a02:	e7fd      	b.n	8015a00 <NVIC_SystemReset+0x1c>
 8015a04:	e000ed00 	.word	0xe000ed00
 8015a08:	05fa0004 	.word	0x05fa0004

08015a0c <unlink_node>:
//**************************************************************************************************
//***** Local Functions ****************************************************************************

// remove node from list
static void unlink_node(uint16_t node_id)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b084      	sub	sp, #16
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	4603      	mov	r3, r0
 8015a14:	80fb      	strh	r3, [r7, #6]
	assert_reset(node_id < chirp_config.mx_num_nodes);
 8015a16:	4b3b      	ldr	r3, [pc, #236]	; (8015b04 <unlink_node+0xf8>)
 8015a18:	881b      	ldrh	r3, [r3, #0]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	88fa      	ldrh	r2, [r7, #6]
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d314      	bcc.n	8015a4c <unlink_node+0x40>
 8015a22:	4b38      	ldr	r3, [pc, #224]	; (8015b04 <unlink_node+0xf8>)
 8015a24:	881b      	ldrh	r3, [r3, #0]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	88fa      	ldrh	r2, [r7, #6]
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d201      	bcs.n	8015a32 <unlink_node+0x26>
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e000      	b.n	8015a34 <unlink_node+0x28>
 8015a32:	2300      	movs	r3, #0
 8015a34:	4618      	mov	r0, r3
 8015a36:	f00c fe01 	bl	802263c <iprintf>
 8015a3a:	4b32      	ldr	r3, [pc, #200]	; (8015b04 <unlink_node+0xf8>)
 8015a3c:	881b      	ldrh	r3, [r3, #0]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	88fa      	ldrh	r2, [r7, #6]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d302      	bcc.n	8015a4c <unlink_node+0x40>
  __ASM volatile ("cpsid f" : : : "memory");
 8015a46:	b671      	cpsid	f
 8015a48:	f7ff ffcc 	bl	80159e4 <NVIC_SystemReset>

	Node *list_head = (Node *)mx.history[mx.history[node_id]->list_id + chirp_config.mx_num_nodes];
 8015a4c:	88fb      	ldrh	r3, [r7, #6]
 8015a4e:	4a2e      	ldr	r2, [pc, #184]	; (8015b08 <unlink_node+0xfc>)
 8015a50:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a58:	789b      	ldrb	r3, [r3, #2]
 8015a5a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	461a      	mov	r2, r3
 8015a62:	4b28      	ldr	r3, [pc, #160]	; (8015b04 <unlink_node+0xf8>)
 8015a64:	881b      	ldrh	r3, [r3, #0]
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	4413      	add	r3, r2
 8015a6a:	4a27      	ldr	r2, [pc, #156]	; (8015b08 <unlink_node+0xfc>)
 8015a6c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a74:	60fb      	str	r3, [r7, #12]

	assert_reset(list_head->mx_num_nodes > 0);
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	885b      	ldrh	r3, [r3, #2]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d110      	bne.n	8015aa0 <unlink_node+0x94>
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	885b      	ldrh	r3, [r3, #2]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d001      	beq.n	8015a8a <unlink_node+0x7e>
 8015a86:	2301      	movs	r3, #1
 8015a88:	e000      	b.n	8015a8c <unlink_node+0x80>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f00c fdd5 	bl	802263c <iprintf>
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	885b      	ldrh	r3, [r3, #2]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d102      	bne.n	8015aa0 <unlink_node+0x94>
 8015a9a:	b671      	cpsid	f
 8015a9c:	f7ff ffa2 	bl	80159e4 <NVIC_SystemReset>

	mx.history[mx.history[node_id]->prev]->next = mx.history[node_id]->next;
 8015aa0:	88fb      	ldrh	r3, [r7, #6]
 8015aa2:	4a19      	ldr	r2, [pc, #100]	; (8015b08 <unlink_node+0xfc>)
 8015aa4:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015aac:	88fb      	ldrh	r3, [r7, #6]
 8015aae:	4916      	ldr	r1, [pc, #88]	; (8015b08 <unlink_node+0xfc>)
 8015ab0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	4913      	ldr	r1, [pc, #76]	; (8015b08 <unlink_node+0xfc>)
 8015abc:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015ac4:	7852      	ldrb	r2, [r2, #1]
 8015ac6:	705a      	strb	r2, [r3, #1]
	mx.history[mx.history[node_id]->next]->prev = mx.history[node_id]->prev;
 8015ac8:	88fb      	ldrh	r3, [r7, #6]
 8015aca:	4a0f      	ldr	r2, [pc, #60]	; (8015b08 <unlink_node+0xfc>)
 8015acc:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015ad4:	88fb      	ldrh	r3, [r7, #6]
 8015ad6:	490c      	ldr	r1, [pc, #48]	; (8015b08 <unlink_node+0xfc>)
 8015ad8:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015ae0:	785b      	ldrb	r3, [r3, #1]
 8015ae2:	4909      	ldr	r1, [pc, #36]	; (8015b08 <unlink_node+0xfc>)
 8015ae4:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015aec:	7812      	ldrb	r2, [r2, #0]
 8015aee:	701a      	strb	r2, [r3, #0]

	--(list_head->mx_num_nodes);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	885b      	ldrh	r3, [r3, #2]
 8015af4:	3b01      	subs	r3, #1
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	805a      	strh	r2, [r3, #2]
}
 8015afc:	bf00      	nop
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20001430 	.word	0x20001430
 8015b08:	200014f0 	.word	0x200014f0

08015b0c <append_node>:

//**************************************************************************************************

// insert node at end of list
static void append_node(uint16_t node_id, Node *list_head)
{
 8015b0c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8015b10:	b086      	sub	sp, #24
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	4603      	mov	r3, r0
 8015b16:	6039      	str	r1, [r7, #0]
 8015b18:	80fb      	strh	r3, [r7, #6]
	int i;

	// ATTENTION: list_head is variable; so depending on sizeof(mx.history[0]), ARRAY_INDEX() may
	// generate an expensive division operation. To avoid that, we manually decide what to do.
	// NOTE: the condition checks get resolved at compile time
	if (IS_POWER_OF_2(chirp_config.history_len_8))
 8015b1a:	4b84      	ldr	r3, [pc, #528]	; (8015d2c <append_node+0x220>)
 8015b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d029      	beq.n	8015b78 <append_node+0x6c>
 8015b24:	4b81      	ldr	r3, [pc, #516]	; (8015d2c <append_node+0x220>)
 8015b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	fa1f fb83 	uxth.w	fp, r3
 8015b2e:	f04f 0c00 	mov.w	ip, #0
 8015b32:	4b7e      	ldr	r3, [pc, #504]	; (8015d2c <append_node+0x220>)
 8015b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	f04f 0400 	mov.w	r4, #0
 8015b3e:	425b      	negs	r3, r3
 8015b40:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015b44:	ea0b 0103 	and.w	r1, fp, r3
 8015b48:	ea0c 0204 	and.w	r2, ip, r4
 8015b4c:	4b77      	ldr	r3, [pc, #476]	; (8015d2c <append_node+0x220>)
 8015b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	f04f 0400 	mov.w	r4, #0
 8015b58:	42a2      	cmp	r2, r4
 8015b5a:	bf08      	it	eq
 8015b5c:	4299      	cmpeq	r1, r3
 8015b5e:	d10b      	bne.n	8015b78 <append_node+0x6c>
		head_index = ARRAY_INDEX_SIZE_ADD(list_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	4a73      	ldr	r2, [pc, #460]	; (8015d30 <append_node+0x224>)
 8015b64:	f8d2 2468 	ldr.w	r2, [r2, #1128]	; 0x468
 8015b68:	1a9b      	subs	r3, r3, r2
 8015b6a:	4a70      	ldr	r2, [pc, #448]	; (8015d2c <append_node+0x220>)
 8015b6c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015b6e:	b292      	uxth	r2, r2
 8015b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b74:	75fb      	strb	r3, [r7, #23]
 8015b76:	e019      	b.n	8015bac <append_node+0xa0>
	else if (chirp_config.history_len_8 < 0x100)
 8015b78:	4b6c      	ldr	r3, [pc, #432]	; (8015d2c <append_node+0x220>)
 8015b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	2bff      	cmp	r3, #255	; 0xff
 8015b80:	d814      	bhi.n	8015bac <append_node+0xa0>
		head_index = gpi_divu_16x8((uintptr_t)list_head - (uintptr_t)&(mx.history[0]->prev), chirp_config.history_len_8, 1);
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	4a6a      	ldr	r2, [pc, #424]	; (8015d30 <append_node+0x224>)
 8015b86:	f8d2 2468 	ldr.w	r2, [r2, #1128]	; 0x468
 8015b8a:	1a9b      	subs	r3, r3, r2
 8015b8c:	b29a      	uxth	r2, r3
 8015b8e:	4b67      	ldr	r3, [pc, #412]	; (8015d2c <append_node+0x220>)
 8015b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	82ba      	strh	r2, [r7, #20]
 8015b98:	74fb      	strb	r3, [r7, #19]
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE uint16_t gpi_divu_16x8(uint16_t x, uint8_t d, int accurate)
{
	register uint32_t	r;

	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 8015b9e:	8abb      	ldrh	r3, [r7, #20]
 8015ba0:	7cfa      	ldrb	r2, [r7, #19]
 8015ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ba6:	461c      	mov	r4, r3

	return r;
 8015ba8:	b2a3      	uxth	r3, r4
 8015baa:	75fb      	strb	r3, [r7, #23]
//	else assert_reset(0, "inefficient program, see source code comments");
	assert_reset(IS_POWER_OF_2(chirp_config.history_len_8) || chirp_config.history_len_8 < 0x100);
 8015bac:	4b5f      	ldr	r3, [pc, #380]	; (8015d2c <append_node+0x220>)
 8015bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015bb0:	b29b      	uxth	r3, r3
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d01d      	beq.n	8015bf2 <append_node+0xe6>
 8015bb6:	4b5d      	ldr	r3, [pc, #372]	; (8015d2c <append_node+0x220>)
 8015bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	fa1f fb83 	uxth.w	fp, r3
 8015bc0:	f04f 0c00 	mov.w	ip, #0
 8015bc4:	4b59      	ldr	r3, [pc, #356]	; (8015d2c <append_node+0x220>)
 8015bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	f04f 0400 	mov.w	r4, #0
 8015bd0:	425b      	negs	r3, r3
 8015bd2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015bd6:	ea0b 0103 	and.w	r1, fp, r3
 8015bda:	ea0c 0204 	and.w	r2, ip, r4
 8015bde:	4b53      	ldr	r3, [pc, #332]	; (8015d2c <append_node+0x220>)
 8015be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015be2:	b29b      	uxth	r3, r3
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	f04f 0400 	mov.w	r4, #0
 8015bea:	42a2      	cmp	r2, r4
 8015bec:	bf08      	it	eq
 8015bee:	4299      	cmpeq	r1, r3
 8015bf0:	d05d      	beq.n	8015cae <append_node+0x1a2>
 8015bf2:	4b4e      	ldr	r3, [pc, #312]	; (8015d2c <append_node+0x220>)
 8015bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	2bff      	cmp	r3, #255	; 0xff
 8015bfa:	d958      	bls.n	8015cae <append_node+0x1a2>
 8015bfc:	4b4b      	ldr	r3, [pc, #300]	; (8015d2c <append_node+0x220>)
 8015bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d01d      	beq.n	8015c42 <append_node+0x136>
 8015c06:	4b49      	ldr	r3, [pc, #292]	; (8015d2c <append_node+0x220>)
 8015c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c0a:	b29b      	uxth	r3, r3
 8015c0c:	fa1f fb83 	uxth.w	fp, r3
 8015c10:	f04f 0c00 	mov.w	ip, #0
 8015c14:	4b45      	ldr	r3, [pc, #276]	; (8015d2c <append_node+0x220>)
 8015c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	f04f 0400 	mov.w	r4, #0
 8015c20:	425b      	negs	r3, r3
 8015c22:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015c26:	ea0b 0103 	and.w	r1, fp, r3
 8015c2a:	ea0c 0204 	and.w	r2, ip, r4
 8015c2e:	4b3f      	ldr	r3, [pc, #252]	; (8015d2c <append_node+0x220>)
 8015c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c32:	b29b      	uxth	r3, r3
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	f04f 0400 	mov.w	r4, #0
 8015c3a:	42a2      	cmp	r2, r4
 8015c3c:	bf08      	it	eq
 8015c3e:	4299      	cmpeq	r1, r3
 8015c40:	d004      	beq.n	8015c4c <append_node+0x140>
 8015c42:	4b3a      	ldr	r3, [pc, #232]	; (8015d2c <append_node+0x220>)
 8015c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	2bff      	cmp	r3, #255	; 0xff
 8015c4a:	d801      	bhi.n	8015c50 <append_node+0x144>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	e000      	b.n	8015c52 <append_node+0x146>
 8015c50:	2300      	movs	r3, #0
 8015c52:	4618      	mov	r0, r3
 8015c54:	f00c fcf2 	bl	802263c <iprintf>
 8015c58:	4b34      	ldr	r3, [pc, #208]	; (8015d2c <append_node+0x220>)
 8015c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d01d      	beq.n	8015c9e <append_node+0x192>
 8015c62:	4b32      	ldr	r3, [pc, #200]	; (8015d2c <append_node+0x220>)
 8015c64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	fa1f fb83 	uxth.w	fp, r3
 8015c6c:	f04f 0c00 	mov.w	ip, #0
 8015c70:	4b2e      	ldr	r3, [pc, #184]	; (8015d2c <append_node+0x220>)
 8015c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c74:	b29b      	uxth	r3, r3
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	f04f 0400 	mov.w	r4, #0
 8015c7c:	425b      	negs	r3, r3
 8015c7e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015c82:	ea0b 0103 	and.w	r1, fp, r3
 8015c86:	ea0c 0204 	and.w	r2, ip, r4
 8015c8a:	4b28      	ldr	r3, [pc, #160]	; (8015d2c <append_node+0x220>)
 8015c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c8e:	b29b      	uxth	r3, r3
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	f04f 0400 	mov.w	r4, #0
 8015c96:	42a2      	cmp	r2, r4
 8015c98:	bf08      	it	eq
 8015c9a:	4299      	cmpeq	r1, r3
 8015c9c:	d004      	beq.n	8015ca8 <append_node+0x19c>
 8015c9e:	4b23      	ldr	r3, [pc, #140]	; (8015d2c <append_node+0x220>)
 8015ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	2bff      	cmp	r3, #255	; 0xff
 8015ca6:	d902      	bls.n	8015cae <append_node+0x1a2>
 8015ca8:	b671      	cpsid	f
 8015caa:	f7ff fe9b 	bl	80159e4 <NVIC_SystemReset>

	// link node
	mx.history[node_id]->prev = list_head->prev;
 8015cae:	88fb      	ldrh	r3, [r7, #6]
 8015cb0:	4a1f      	ldr	r2, [pc, #124]	; (8015d30 <append_node+0x224>)
 8015cb2:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cba:	683a      	ldr	r2, [r7, #0]
 8015cbc:	7812      	ldrb	r2, [r2, #0]
 8015cbe:	701a      	strb	r2, [r3, #0]
	mx.history[node_id]->next = head_index;
 8015cc0:	88fb      	ldrh	r3, [r7, #6]
 8015cc2:	4a1b      	ldr	r2, [pc, #108]	; (8015d30 <append_node+0x224>)
 8015cc4:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ccc:	7dfa      	ldrb	r2, [r7, #23]
 8015cce:	705a      	strb	r2, [r3, #1]
	mx.history[list_head->prev]->next = node_id;
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	4a16      	ldr	r2, [pc, #88]	; (8015d30 <append_node+0x224>)
 8015cd6:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cde:	88fa      	ldrh	r2, [r7, #6]
 8015ce0:	b2d2      	uxtb	r2, r2
 8015ce2:	705a      	strb	r2, [r3, #1]
	list_head->prev = node_id;
 8015ce4:	88fb      	ldrh	r3, [r7, #6]
 8015ce6:	b2da      	uxtb	r2, r3
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	701a      	strb	r2, [r3, #0]

	mx.history[node_id]->list_id = head_index - chirp_config.mx_num_nodes;
 8015cec:	4b0f      	ldr	r3, [pc, #60]	; (8015d2c <append_node+0x220>)
 8015cee:	881b      	ldrh	r3, [r3, #0]
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	b2db      	uxtb	r3, r3
 8015cf4:	7dfa      	ldrb	r2, [r7, #23]
 8015cf6:	1ad3      	subs	r3, r2, r3
 8015cf8:	b2d9      	uxtb	r1, r3
 8015cfa:	88fb      	ldrh	r3, [r7, #6]
 8015cfc:	4a0c      	ldr	r2, [pc, #48]	; (8015d30 <append_node+0x224>)
 8015cfe:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015d06:	460b      	mov	r3, r1
 8015d08:	f003 0303 	and.w	r3, r3, #3
 8015d0c:	b2d9      	uxtb	r1, r3
 8015d0e:	7893      	ldrb	r3, [r2, #2]
 8015d10:	f361 0301 	bfi	r3, r1, #0, #2
 8015d14:	7093      	strb	r3, [r2, #2]

	++(list_head->mx_num_nodes);
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	885b      	ldrh	r3, [r3, #2]
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	b29a      	uxth	r2, r3
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	805a      	strh	r2, [r3, #2]
}
 8015d22:	bf00      	nop
 8015d24:	3718      	adds	r7, #24
 8015d26:	46bd      	mov	sp, r7
 8015d28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8015d2c:	20001430 	.word	0x20001430
 8015d30:	200014f0 	.word	0x200014f0

08015d34 <mx_init_history>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mx_init_history()
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0

	GPI_TRACE_FUNCTION();
 8015d3a:	bf00      	nop
	uint16_t	i;

	// Initially all nodes are chained together in the absent list.

	for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	80fb      	strh	r3, [r7, #6]
 8015d40:	e04f      	b.n	8015de2 <mx_init_history+0xae>
	{

		mx.history[i]->prev 		= i - 1;
 8015d42:	88fb      	ldrh	r3, [r7, #6]
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	88fb      	ldrh	r3, [r7, #6]
 8015d48:	496b      	ldr	r1, [pc, #428]	; (8015ef8 <mx_init_history+0x1c4>)
 8015d4a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015d52:	3a01      	subs	r2, #1
 8015d54:	b2d2      	uxtb	r2, r2
 8015d56:	701a      	strb	r2, [r3, #0]
		mx.history[i]->next 		= i + 1;
 8015d58:	88fb      	ldrh	r3, [r7, #6]
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	88fb      	ldrh	r3, [r7, #6]
 8015d5e:	4966      	ldr	r1, [pc, #408]	; (8015ef8 <mx_init_history+0x1c4>)
 8015d60:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015d68:	3201      	adds	r2, #1
 8015d6a:	b2d2      	uxtb	r2, r2
 8015d6c:	705a      	strb	r2, [r3, #1]
		mx.history[i]->value		= 0;
 8015d6e:	88fb      	ldrh	r3, [r7, #6]
 8015d70:	4a61      	ldr	r2, [pc, #388]	; (8015ef8 <mx_init_history+0x1c4>)
 8015d72:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	805a      	strh	r2, [r3, #2]
		mx.history[i]->list_id	= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8) - chirp_config.mx_num_nodes;
 8015d7e:	4b5f      	ldr	r3, [pc, #380]	; (8015efc <mx_init_history+0x1c8>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	461a      	mov	r2, r3
 8015d84:	4b5c      	ldr	r3, [pc, #368]	; (8015ef8 <mx_init_history+0x1c4>)
 8015d86:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	4a5c      	ldr	r2, [pc, #368]	; (8015f00 <mx_init_history+0x1cc>)
 8015d8e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015d90:	b292      	uxth	r2, r2
 8015d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d96:	b2da      	uxtb	r2, r3
 8015d98:	4b59      	ldr	r3, [pc, #356]	; (8015f00 <mx_init_history+0x1cc>)
 8015d9a:	881b      	ldrh	r3, [r3, #0]
 8015d9c:	b29b      	uxth	r3, r3
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	b2d9      	uxtb	r1, r3
 8015da4:	88fb      	ldrh	r3, [r7, #6]
 8015da6:	4a54      	ldr	r2, [pc, #336]	; (8015ef8 <mx_init_history+0x1c4>)
 8015da8:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015db0:	460b      	mov	r3, r1
 8015db2:	f003 0303 	and.w	r3, r3, #3
 8015db6:	b2d9      	uxtb	r1, r3
 8015db8:	7893      	ldrb	r3, [r2, #2]
 8015dba:	f361 0301 	bfi	r3, r1, #0, #2
 8015dbe:	7093      	strb	r3, [r2, #2]

#if MX_REQUEST && (MX_REQUEST_HEURISTIC > 1)
		memset(&(mx.history[i]->row_map_chunk[0]), 0, chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8015dc0:	88fb      	ldrh	r3, [r7, #6]
 8015dc2:	4a4d      	ldr	r2, [pc, #308]	; (8015ef8 <mx_init_history+0x1c4>)
 8015dc4:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dcc:	1d18      	adds	r0, r3, #4
 8015dce:	4b4c      	ldr	r3, [pc, #304]	; (8015f00 <mx_init_history+0x1cc>)
 8015dd0:	7f5b      	ldrb	r3, [r3, #29]
 8015dd2:	009b      	lsls	r3, r3, #2
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	f00b fe23 	bl	8021a22 <memset>
	for (i = 0; i < chirp_config.mx_num_nodes; i++)
 8015ddc:	88fb      	ldrh	r3, [r7, #6]
 8015dde:	3301      	adds	r3, #1
 8015de0:	80fb      	strh	r3, [r7, #6]
 8015de2:	4b47      	ldr	r3, [pc, #284]	; (8015f00 <mx_init_history+0x1cc>)
 8015de4:	881b      	ldrh	r3, [r3, #0]
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	88fa      	ldrh	r2, [r7, #6]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d3a9      	bcc.n	8015d42 <mx_init_history+0xe>
#endif
	}

	mx.history[0]->prev			= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015dee:	4b43      	ldr	r3, [pc, #268]	; (8015efc <mx_init_history+0x1c8>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	461a      	mov	r2, r3
 8015df4:	4b40      	ldr	r3, [pc, #256]	; (8015ef8 <mx_init_history+0x1c4>)
 8015df6:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015dfa:	1ad3      	subs	r3, r2, r3
 8015dfc:	4a40      	ldr	r2, [pc, #256]	; (8015f00 <mx_init_history+0x1cc>)
 8015dfe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015e00:	b292      	uxth	r2, r2
 8015e02:	fbb3 f2f2 	udiv	r2, r3, r2
 8015e06:	4b3c      	ldr	r3, [pc, #240]	; (8015ef8 <mx_init_history+0x1c4>)
 8015e08:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015e0c:	b2d2      	uxtb	r2, r2
 8015e0e:	701a      	strb	r2, [r3, #0]
	mx.history[--i]->next 		= ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015e10:	4b3a      	ldr	r3, [pc, #232]	; (8015efc <mx_init_history+0x1c8>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	461a      	mov	r2, r3
 8015e16:	4b38      	ldr	r3, [pc, #224]	; (8015ef8 <mx_init_history+0x1c4>)
 8015e18:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015e1c:	1ad3      	subs	r3, r2, r3
 8015e1e:	4a38      	ldr	r2, [pc, #224]	; (8015f00 <mx_init_history+0x1cc>)
 8015e20:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015e22:	b292      	uxth	r2, r2
 8015e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e28:	88fb      	ldrh	r3, [r7, #6]
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	80fb      	strh	r3, [r7, #6]
 8015e2e:	88fb      	ldrh	r3, [r7, #6]
 8015e30:	4a31      	ldr	r2, [pc, #196]	; (8015ef8 <mx_init_history+0x1c4>)
 8015e32:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e3a:	b2ca      	uxtb	r2, r1
 8015e3c:	705a      	strb	r2, [r3, #1]

	mx_absent_head->next		= 0;
 8015e3e:	4b2f      	ldr	r3, [pc, #188]	; (8015efc <mx_init_history+0x1c8>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2200      	movs	r2, #0
 8015e44:	705a      	strb	r2, [r3, #1]
	mx_absent_head->prev 		= i;
 8015e46:	4b2d      	ldr	r3, [pc, #180]	; (8015efc <mx_init_history+0x1c8>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	88fa      	ldrh	r2, [r7, #6]
 8015e4c:	b2d2      	uxtb	r2, r2
 8015e4e:	701a      	strb	r2, [r3, #0]
	mx_absent_head->mx_num_nodes 	= ++i;
 8015e50:	88fb      	ldrh	r3, [r7, #6]
 8015e52:	3301      	adds	r3, #1
 8015e54:	80fb      	strh	r3, [r7, #6]
 8015e56:	4b29      	ldr	r3, [pc, #164]	; (8015efc <mx_init_history+0x1c8>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	88fa      	ldrh	r2, [r7, #6]
 8015e5c:	805a      	strh	r2, [r3, #2]

	mx_present_head->next   	= ARRAY_INDEX_SIZE_ADD(mx_present_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015e5e:	4b29      	ldr	r3, [pc, #164]	; (8015f04 <mx_init_history+0x1d0>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	461a      	mov	r2, r3
 8015e64:	4b24      	ldr	r3, [pc, #144]	; (8015ef8 <mx_init_history+0x1c4>)
 8015e66:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	4a24      	ldr	r2, [pc, #144]	; (8015f00 <mx_init_history+0x1cc>)
 8015e6e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015e70:	b292      	uxth	r2, r2
 8015e72:	fbb3 f2f2 	udiv	r2, r3, r2
 8015e76:	4b23      	ldr	r3, [pc, #140]	; (8015f04 <mx_init_history+0x1d0>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	b2d2      	uxtb	r2, r2
 8015e7c:	705a      	strb	r2, [r3, #1]
	mx_present_head->prev   	= ARRAY_INDEX_SIZE_ADD(mx_present_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015e7e:	4b21      	ldr	r3, [pc, #132]	; (8015f04 <mx_init_history+0x1d0>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	461a      	mov	r2, r3
 8015e84:	4b1c      	ldr	r3, [pc, #112]	; (8015ef8 <mx_init_history+0x1c4>)
 8015e86:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	4a1c      	ldr	r2, [pc, #112]	; (8015f00 <mx_init_history+0x1cc>)
 8015e8e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015e90:	b292      	uxth	r2, r2
 8015e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8015e96:	4b1b      	ldr	r3, [pc, #108]	; (8015f04 <mx_init_history+0x1d0>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	b2d2      	uxtb	r2, r2
 8015e9c:	701a      	strb	r2, [r3, #0]
	mx_present_head->mx_num_nodes	= 0;
 8015e9e:	4b19      	ldr	r3, [pc, #100]	; (8015f04 <mx_init_history+0x1d0>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	805a      	strh	r2, [r3, #2]

	mx_finished_head->next  	= ARRAY_INDEX_SIZE_ADD(mx_finished_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015ea6:	4b18      	ldr	r3, [pc, #96]	; (8015f08 <mx_init_history+0x1d4>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	461a      	mov	r2, r3
 8015eac:	4b12      	ldr	r3, [pc, #72]	; (8015ef8 <mx_init_history+0x1c4>)
 8015eae:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015eb2:	1ad3      	subs	r3, r2, r3
 8015eb4:	4a12      	ldr	r2, [pc, #72]	; (8015f00 <mx_init_history+0x1cc>)
 8015eb6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015eb8:	b292      	uxth	r2, r2
 8015eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8015ebe:	4b12      	ldr	r3, [pc, #72]	; (8015f08 <mx_init_history+0x1d4>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	b2d2      	uxtb	r2, r2
 8015ec4:	705a      	strb	r2, [r3, #1]
	mx_finished_head->prev  	= ARRAY_INDEX_SIZE_ADD(mx_finished_head, &(mx.history[0]->prev), chirp_config.history_len_8);
 8015ec6:	4b10      	ldr	r3, [pc, #64]	; (8015f08 <mx_init_history+0x1d4>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	461a      	mov	r2, r3
 8015ecc:	4b0a      	ldr	r3, [pc, #40]	; (8015ef8 <mx_init_history+0x1c4>)
 8015ece:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8015ed2:	1ad3      	subs	r3, r2, r3
 8015ed4:	4a0a      	ldr	r2, [pc, #40]	; (8015f00 <mx_init_history+0x1cc>)
 8015ed6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015ed8:	b292      	uxth	r2, r2
 8015eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8015ede:	4b0a      	ldr	r3, [pc, #40]	; (8015f08 <mx_init_history+0x1d4>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	b2d2      	uxtb	r2, r2
 8015ee4:	701a      	strb	r2, [r3, #0]
	mx_finished_head->mx_num_nodes	= 0;
 8015ee6:	4b08      	ldr	r3, [pc, #32]	; (8015f08 <mx_init_history+0x1d4>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2200      	movs	r2, #0
 8015eec:	805a      	strh	r2, [r3, #2]

	GPI_TRACE_RETURN();
 8015eee:	bf00      	nop
}
 8015ef0:	3708      	adds	r7, #8
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	200014f0 	.word	0x200014f0
 8015efc:	20000ce4 	.word	0x20000ce4
 8015f00:	20001430 	.word	0x20001430
 8015f04:	20000cc4 	.word	0x20000cc4
 8015f08:	20000ce0 	.word	0x20000ce0

08015f0c <mx_update_history>:

//**************************************************************************************************

void mx_update_history(uint16_t node_id, Packet_Flags flags, uint16_t slot_number)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	4603      	mov	r3, r0
 8015f14:	7139      	strb	r1, [r7, #4]
 8015f16:	80fb      	strh	r3, [r7, #6]
 8015f18:	4613      	mov	r3, r2
 8015f1a:	807b      	strh	r3, [r7, #2]
	GPI_TRACE_FUNCTION();
 8015f1c:	bf00      	nop

	mx.history[node_id]->last_slot_number = slot_number;
 8015f1e:	88fb      	ldrh	r3, [r7, #6]
 8015f20:	4a16      	ldr	r2, [pc, #88]	; (8015f7c <mx_update_history+0x70>)
 8015f22:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015f2a:	887b      	ldrh	r3, [r7, #2]
 8015f2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015f30:	b299      	uxth	r1, r3
 8015f32:	8853      	ldrh	r3, [r2, #2]
 8015f34:	f361 038f 	bfi	r3, r1, #2, #14
 8015f38:	8053      	strh	r3, [r2, #2]
		unlink_node(node_id);
		append_node(node_id, mx_absent_head);
	}
	else
#endif
	if (flags.is_full_rank)
 8015f3a:	793b      	ldrb	r3, [r7, #4]
 8015f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015f40:	b2db      	uxtb	r3, r3
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00b      	beq.n	8015f5e <mx_update_history+0x52>
	{
		unlink_node(node_id);
 8015f46:	88fb      	ldrh	r3, [r7, #6]
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7ff fd5f 	bl	8015a0c <unlink_node>
		append_node(node_id, mx_finished_head);
 8015f4e:	4b0c      	ldr	r3, [pc, #48]	; (8015f80 <mx_update_history+0x74>)
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	88fb      	ldrh	r3, [r7, #6]
 8015f54:	4611      	mov	r1, r2
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7ff fdd8 	bl	8015b0c <append_node>
	{
		unlink_node(node_id);
		append_node(node_id, mx_present_head);
    }

	GPI_TRACE_RETURN();
 8015f5c:	e00b      	b.n	8015f76 <mx_update_history+0x6a>
		unlink_node(node_id);
 8015f5e:	88fb      	ldrh	r3, [r7, #6]
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7ff fd53 	bl	8015a0c <unlink_node>
		append_node(node_id, mx_present_head);
 8015f66:	4b07      	ldr	r3, [pc, #28]	; (8015f84 <mx_update_history+0x78>)
 8015f68:	681a      	ldr	r2, [r3, #0]
 8015f6a:	88fb      	ldrh	r3, [r7, #6]
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ff fdcc 	bl	8015b0c <append_node>
	GPI_TRACE_RETURN();
 8015f74:	bf00      	nop
}
 8015f76:	3708      	adds	r7, #8
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	200014f0 	.word	0x200014f0
 8015f80:	20000ce0 	.word	0x20000ce0
 8015f84:	20000cc4 	.word	0x20000cc4

08015f88 <mx_purge_history>:

//**************************************************************************************************

void mx_purge_history()
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 8015f8e:	bf00      	nop

	uint16_t	reference = mx.slot_number << 2;
 8015f90:	4b40      	ldr	r3, [pc, #256]	; (8016094 <mx_purge_history+0x10c>)
 8015f92:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	81fb      	strh	r3, [r7, #14]
	uint16_t 	node, age;

	// assert sizeof(list_id) == 2 bits
	// list_id is not used itself, but the shifts are optimized to produce efficient code
	// NOTE: this is a runtime assertion, but it is completely removed by optimization if valid
	const Node __attribute__((unused)) assert_node = {0, 0, {-1}};
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	703b      	strb	r3, [r7, #0]
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	707b      	strb	r3, [r7, #1]
 8015fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fa8:	807b      	strh	r3, [r7, #2]
	assert_msg(assert_node.list_id == 3, "inconsistent code for sizeof(list_id) != 2 bits");
 8015faa:	78bb      	ldrb	r3, [r7, #2]
 8015fac:	f003 0303 	and.w	r3, r3, #3
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	2b03      	cmp	r3, #3
 8015fb4:	d031      	beq.n	801601a <mx_purge_history+0x92>
 8015fb6:	4b38      	ldr	r3, [pc, #224]	; (8016098 <mx_purge_history+0x110>)
 8015fb8:	685b      	ldr	r3, [r3, #4]
 8015fba:	4938      	ldr	r1, [pc, #224]	; (801609c <mx_purge_history+0x114>)
 8015fbc:	22ec      	movs	r2, #236	; 0xec
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f00b fcfc 	bl	80219bc <__assert>
	// i.e. descending by age (oldest entry comes first)

	// walk through present nodes
	while (mx_present_head->mx_num_nodes)
	{
		node = mx_present_head->next;
 8015fc4:	4b36      	ldr	r3, [pc, #216]	; (80160a0 <mx_purge_history+0x118>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	785b      	ldrb	r3, [r3, #1]
 8015fca:	81bb      	strh	r3, [r7, #12]

		age = reference - (mx.history[node]->last_slot_number << 2);
 8015fcc:	89bb      	ldrh	r3, [r7, #12]
 8015fce:	4a31      	ldr	r2, [pc, #196]	; (8016094 <mx_purge_history+0x10c>)
 8015fd0:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8015fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015fd8:	885b      	ldrh	r3, [r3, #2]
 8015fda:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	89fa      	ldrh	r2, [r7, #14]
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	817b      	strh	r3, [r7, #10]

		uint16_t history_window = 3 * chirp_config.mx_num_nodes;
 8015fea:	4b2e      	ldr	r3, [pc, #184]	; (80160a4 <mx_purge_history+0x11c>)
 8015fec:	881b      	ldrh	r3, [r3, #0]
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	0052      	lsls	r2, r2, #1
 8015ff4:	4413      	add	r3, r2
 8015ff6:	813b      	strh	r3, [r7, #8]
		if (age <= (history_window << 2))
 8015ff8:	897a      	ldrh	r2, [r7, #10]
 8015ffa:	893b      	ldrh	r3, [r7, #8]
 8015ffc:	009b      	lsls	r3, r3, #2
 8015ffe:	429a      	cmp	r2, r3
 8016000:	dd11      	ble.n	8016026 <mx_purge_history+0x9e>
		{
			break;
		}

		GPI_TRACE_MSG(1, "purging node %u (present) from history (age = %u)", node, age >> 2);
 8016002:	bf00      	nop

		unlink_node(node);
 8016004:	89bb      	ldrh	r3, [r7, #12]
 8016006:	4618      	mov	r0, r3
 8016008:	f7ff fd00 	bl	8015a0c <unlink_node>

		append_node(node, mx_absent_head);
 801600c:	4b26      	ldr	r3, [pc, #152]	; (80160a8 <mx_purge_history+0x120>)
 801600e:	681a      	ldr	r2, [r3, #0]
 8016010:	89bb      	ldrh	r3, [r7, #12]
 8016012:	4611      	mov	r1, r2
 8016014:	4618      	mov	r0, r3
 8016016:	f7ff fd79 	bl	8015b0c <append_node>
	while (mx_present_head->mx_num_nodes)
 801601a:	4b21      	ldr	r3, [pc, #132]	; (80160a0 <mx_purge_history+0x118>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	885b      	ldrh	r3, [r3, #2]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1cf      	bne.n	8015fc4 <mx_purge_history+0x3c>
 8016024:	e02b      	b.n	801607e <mx_purge_history+0xf6>
			break;
 8016026:	bf00      	nop
	}

	// walk through finished nodes
	while (mx_finished_head->mx_num_nodes)
 8016028:	e029      	b.n	801607e <mx_purge_history+0xf6>
	{
		node = mx_finished_head->next;
 801602a:	4b20      	ldr	r3, [pc, #128]	; (80160ac <mx_purge_history+0x124>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	785b      	ldrb	r3, [r3, #1]
 8016030:	81bb      	strh	r3, [r7, #12]

		age = reference - (mx.history[node]->last_slot_number << 2);
 8016032:	89bb      	ldrh	r3, [r7, #12]
 8016034:	4a17      	ldr	r2, [pc, #92]	; (8016094 <mx_purge_history+0x10c>)
 8016036:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 801603a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801603e:	885b      	ldrh	r3, [r3, #2]
 8016040:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8016044:	b29b      	uxth	r3, r3
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	b29b      	uxth	r3, r3
 801604a:	89fa      	ldrh	r2, [r7, #14]
 801604c:	1ad3      	subs	r3, r2, r3
 801604e:	817b      	strh	r3, [r7, #10]

		uint16_t history_window_finished = 1 * chirp_config.mx_num_nodes;
 8016050:	4b14      	ldr	r3, [pc, #80]	; (80160a4 <mx_purge_history+0x11c>)
 8016052:	781a      	ldrb	r2, [r3, #0]
 8016054:	785b      	ldrb	r3, [r3, #1]
 8016056:	021b      	lsls	r3, r3, #8
 8016058:	4313      	orrs	r3, r2
 801605a:	80fb      	strh	r3, [r7, #6]
		if (age <= (history_window_finished << 2))
 801605c:	897a      	ldrh	r2, [r7, #10]
 801605e:	88fb      	ldrh	r3, [r7, #6]
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	429a      	cmp	r2, r3
 8016064:	dd11      	ble.n	801608a <mx_purge_history+0x102>
			break;

		GPI_TRACE_MSG(1, "purging node %u (finished) from history (age = %u)", node, age >> 2);
 8016066:	bf00      	nop

		unlink_node(node);
 8016068:	89bb      	ldrh	r3, [r7, #12]
 801606a:	4618      	mov	r0, r3
 801606c:	f7ff fcce 	bl	8015a0c <unlink_node>
		append_node(node, mx_absent_head);
 8016070:	4b0d      	ldr	r3, [pc, #52]	; (80160a8 <mx_purge_history+0x120>)
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	89bb      	ldrh	r3, [r7, #12]
 8016076:	4611      	mov	r1, r2
 8016078:	4618      	mov	r0, r3
 801607a:	f7ff fd47 	bl	8015b0c <append_node>
	while (mx_finished_head->mx_num_nodes)
 801607e:	4b0b      	ldr	r3, [pc, #44]	; (80160ac <mx_purge_history+0x124>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	885b      	ldrh	r3, [r3, #2]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d1d0      	bne.n	801602a <mx_purge_history+0xa2>
	}

	GPI_TRACE_RETURN();
 8016088:	e000      	b.n	801608c <mx_purge_history+0x104>
			break;
 801608a:	bf00      	nop
	GPI_TRACE_RETURN();
 801608c:	bf00      	nop
}
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	200014f0 	.word	0x200014f0
 8016098:	200000a0 	.word	0x200000a0
 801609c:	08025bc8 	.word	0x08025bc8
 80160a0:	20000cc4 	.word	0x20000cc4
 80160a4:	20001430 	.word	0x20001430
 80160a8:	20000ce4 	.word	0x20000ce4
 80160ac:	20000ce0 	.word	0x20000ce0

080160b0 <NVIC_SystemReset>:
{
 80160b0:	b480      	push	{r7}
 80160b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80160b4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80160b8:	4b05      	ldr	r3, [pc, #20]	; (80160d0 <NVIC_SystemReset+0x20>)
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80160c0:	4903      	ldr	r1, [pc, #12]	; (80160d0 <NVIC_SystemReset+0x20>)
 80160c2:	4b04      	ldr	r3, [pc, #16]	; (80160d4 <NVIC_SystemReset+0x24>)
 80160c4:	4313      	orrs	r3, r2
 80160c6:	60cb      	str	r3, [r1, #12]
 80160c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80160cc:	bf00      	nop
    __NOP();
 80160ce:	e7fd      	b.n	80160cc <NVIC_SystemReset+0x1c>
 80160d0:	e000ed00 	.word	0xe000ed00
 80160d4:	05fa0004 	.word	0x05fa0004

080160d8 <trace_packet>:

#if MX_VERBOSE_PACKETS
	#define TRACE_PACKET(p)		trace_packet(p)

static void trace_packet(const Packet *p)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b0d2      	sub	sp, #328	; 0x148
 80160dc:	af02      	add	r7, sp, #8
 80160de:	1d3b      	adds	r3, r7, #4
 80160e0:	6018      	str	r0, [r3, #0]
	char msg[300];
	char *ps = msg;
 80160e2:	f107 030c 	add.w	r3, r7, #12
 80160e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	ASSERT_CT(2 == sizeof(p->slot_number), check_PRI_formats);
	ASSERT_CT(1 == sizeof(p->sender_id), check_PRI_formats);
	ASSERT_CT(1 == sizeof(p->flags), check_PRI_formats);

	#if !(GPI_ARCH_IS_BOARD(TMOTE_FLOCKLAB) || GPI_ARCH_IS_BOARD(TMOTE_INDRIYA))
		ps += sprintf(ps, "# ID:%u ", (int)mx.tx_packet->sender_id + 1);
 80160ea:	4b63      	ldr	r3, [pc, #396]	; (8016278 <trace_packet+0x1a0>)
 80160ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160ee:	799b      	ldrb	r3, [r3, #6]
 80160f0:	3301      	adds	r3, #1
 80160f2:	461a      	mov	r2, r3
 80160f4:	4961      	ldr	r1, [pc, #388]	; (801627c <trace_packet+0x1a4>)
 80160f6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80160fa:	f00c fb97 	bl	802282c <siprintf>
 80160fe:	4603      	mov	r3, r0
 8016100:	461a      	mov	r2, r3
 8016102:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016106:	4413      	add	r3, r2
 8016108:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// node id MSB marks vector bit order (for log parser):
	// 0: LSB first, big-endian
	// 1: LSB first, little-endian
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
		p->slot_number, (uint16_t)(p->sender_id |
 801610c:	1d3b      	adds	r3, r7, #4
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	889b      	ldrh	r3, [r3, #4]
 8016112:	b29b      	uxth	r3, r3
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 8016114:	461a      	mov	r2, r3
		p->slot_number, (uint16_t)(p->sender_id |
 8016116:	1d3b      	adds	r3, r7, #4
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	799b      	ldrb	r3, [r3, #6]
 801611c:	b21b      	sxth	r3, r3
 801611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8016122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8016126:	b21b      	sxth	r3, r3
 8016128:	b29b      	uxth	r3, r3
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 801612a:	4619      	mov	r1, r3
		#elif (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)
			0
		#else
			#error unsupported architecture
		#endif
		), p->flags.all);
 801612c:	1d3b      	adds	r3, r7, #4
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	79db      	ldrb	r3, [r3, #7]
	ps += sprintf(ps, "%04" PRIx16 " - %04" PRIx16 " - %02" PRIx8 " - ",
 8016132:	9300      	str	r3, [sp, #0]
 8016134:	460b      	mov	r3, r1
 8016136:	4952      	ldr	r1, [pc, #328]	; (8016280 <trace_packet+0x1a8>)
 8016138:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801613c:	f00c fb76 	bl	802282c <siprintf>
 8016140:	4603      	mov	r3, r0
 8016142:	461a      	mov	r2, r3
 8016144:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016148:	4413      	add	r3, r2
 801614a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	for (i = 0; i < chirp_config.coding_vector.len; i++)
 801614e:	2300      	movs	r3, #0
 8016150:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016154:	e01b      	b.n	801618e <trace_packet+0xb6>
#if MX_REQUEST || MX_SMART_SHUTDOWN_MAP
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.info_vector.pos + i]);
 8016156:	4b4b      	ldr	r3, [pc, #300]	; (8016284 <trace_packet+0x1ac>)
 8016158:	7a9b      	ldrb	r3, [r3, #10]
 801615a:	461a      	mov	r2, r3
 801615c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016160:	4413      	add	r3, r2
 8016162:	1d3a      	adds	r2, r7, #4
 8016164:	6812      	ldr	r2, [r2, #0]
 8016166:	4413      	add	r3, r2
 8016168:	7a1b      	ldrb	r3, [r3, #8]
 801616a:	461a      	mov	r2, r3
 801616c:	4946      	ldr	r1, [pc, #280]	; (8016288 <trace_packet+0x1b0>)
 801616e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8016172:	f00c fb5b 	bl	802282c <siprintf>
 8016176:	4603      	mov	r3, r0
 8016178:	461a      	mov	r2, r3
 801617a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801617e:	4413      	add	r3, r2
 8016180:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < chirp_config.coding_vector.len; i++)
 8016184:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016188:	3301      	adds	r3, #1
 801618a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801618e:	4b3d      	ldr	r3, [pc, #244]	; (8016284 <trace_packet+0x1ac>)
 8016190:	79db      	ldrb	r3, [r3, #7]
 8016192:	461a      	mov	r2, r3
 8016194:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016198:	4293      	cmp	r3, r2
 801619a:	dbdc      	blt.n	8016156 <trace_packet+0x7e>
#else
		ps += sprintf(ps, "00");
#endif

	ps += sprintf(ps, " - ");
 801619c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80161a0:	4a3a      	ldr	r2, [pc, #232]	; (801628c <trace_packet+0x1b4>)
 80161a2:	6810      	ldr	r0, [r2, #0]
 80161a4:	6018      	str	r0, [r3, #0]
 80161a6:	2303      	movs	r3, #3
 80161a8:	461a      	mov	r2, r3
 80161aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80161ae:	4413      	add	r3, r2
 80161b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	for (i = 0; i < chirp_config.coding_vector.len; i++)
 80161b4:	2300      	movs	r3, #0
 80161b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80161ba:	e01b      	b.n	80161f4 <trace_packet+0x11c>
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.coding_vector.pos + i]);
 80161bc:	4b31      	ldr	r3, [pc, #196]	; (8016284 <trace_packet+0x1ac>)
 80161be:	799b      	ldrb	r3, [r3, #6]
 80161c0:	461a      	mov	r2, r3
 80161c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80161c6:	4413      	add	r3, r2
 80161c8:	1d3a      	adds	r2, r7, #4
 80161ca:	6812      	ldr	r2, [r2, #0]
 80161cc:	4413      	add	r3, r2
 80161ce:	7a1b      	ldrb	r3, [r3, #8]
 80161d0:	461a      	mov	r2, r3
 80161d2:	492d      	ldr	r1, [pc, #180]	; (8016288 <trace_packet+0x1b0>)
 80161d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80161d8:	f00c fb28 	bl	802282c <siprintf>
 80161dc:	4603      	mov	r3, r0
 80161de:	461a      	mov	r2, r3
 80161e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80161e4:	4413      	add	r3, r2
 80161e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < chirp_config.coding_vector.len; i++)
 80161ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80161ee:	3301      	adds	r3, #1
 80161f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80161f4:	4b23      	ldr	r3, [pc, #140]	; (8016284 <trace_packet+0x1ac>)
 80161f6:	79db      	ldrb	r3, [r3, #7]
 80161f8:	461a      	mov	r2, r3
 80161fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80161fe:	4293      	cmp	r3, r2
 8016200:	dbdc      	blt.n	80161bc <trace_packet+0xe4>

	ps += sprintf(ps, " - ");
 8016202:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016206:	4a21      	ldr	r2, [pc, #132]	; (801628c <trace_packet+0x1b4>)
 8016208:	6810      	ldr	r0, [r2, #0]
 801620a:	6018      	str	r0, [r3, #0]
 801620c:	2303      	movs	r3, #3
 801620e:	461a      	mov	r2, r3
 8016210:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016214:	4413      	add	r3, r2
 8016216:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	// for (i = 0; i < sizeof(p->payload); i++)
	// 	ps += sprintf(ps, "%02" PRIx8, p->payload[i]);

	for (i = 0; i < 8; i++)
 801621a:	2300      	movs	r3, #0
 801621c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016220:	e01b      	b.n	801625a <trace_packet+0x182>
	{
		ps += sprintf(ps, "%02" PRIx8, p->packet_chunk[chirp_config.payload.pos + i]);
 8016222:	4b18      	ldr	r3, [pc, #96]	; (8016284 <trace_packet+0x1ac>)
 8016224:	7a1b      	ldrb	r3, [r3, #8]
 8016226:	461a      	mov	r2, r3
 8016228:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801622c:	4413      	add	r3, r2
 801622e:	1d3a      	adds	r2, r7, #4
 8016230:	6812      	ldr	r2, [r2, #0]
 8016232:	4413      	add	r3, r2
 8016234:	7a1b      	ldrb	r3, [r3, #8]
 8016236:	461a      	mov	r2, r3
 8016238:	4913      	ldr	r1, [pc, #76]	; (8016288 <trace_packet+0x1b0>)
 801623a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801623e:	f00c faf5 	bl	802282c <siprintf>
 8016242:	4603      	mov	r3, r0
 8016244:	461a      	mov	r2, r3
 8016246:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801624a:	4413      	add	r3, r2
 801624c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for (i = 0; i < 8; i++)
 8016250:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016254:	3301      	adds	r3, #1
 8016256:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801625a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801625e:	2b07      	cmp	r3, #7
 8016260:	dddf      	ble.n	8016222 <trace_packet+0x14a>
	}

	PRINTF_CHIRP("%s\n", msg);
 8016262:	f107 030c 	add.w	r3, r7, #12
 8016266:	4618      	mov	r0, r3
 8016268:	f00c fa70 	bl	802274c <puts>
}
 801626c:	bf00      	nop
 801626e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	200014f0 	.word	0x200014f0
 801627c:	08025c34 	.word	0x08025c34
 8016280:	08025c40 	.word	0x08025c40
 8016284:	20001430 	.word	0x20001430
 8016288:	08025c5c 	.word	0x08025c5c
 801628c:	08025c64 	.word	0x08025c64

08016290 <clear_event>:

//**************************************************************************************************
//**************************************************************************************************

static inline void clear_event(Event event)
{
 8016290:	b480      	push	{r7}
 8016292:	b087      	sub	sp, #28
 8016294:	af00      	add	r7, sp, #0
 8016296:	4603      	mov	r3, r0
 8016298:	71fb      	strb	r3, [r7, #7]
	gpi_atomic_clear(&mx.events, BV(event));
 801629a:	79fb      	ldrb	r3, [r7, #7]
 801629c:	2201      	movs	r2, #1
 801629e:	fa02 f303 	lsl.w	r3, r2, r3
 80162a2:	4a0e      	ldr	r2, [pc, #56]	; (80162dc <clear_event+0x4c>)
 80162a4:	617a      	str	r2, [r7, #20]
 80162a6:	613b      	str	r3, [r7, #16]
static ALWAYS_INLINE void gpi_atomic_clear(volatile unsigned int *p, unsigned int mask)
{
	// if performance is extremely critical, one can copy the code from gpi_atomic_and()
	// and replace "and" by "bic" instead of manually inverting the mask as done here

	gpi_atomic_and(p, ~mask);
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	43db      	mvns	r3, r3
 80162ac:	697a      	ldr	r2, [r7, #20]
 80162ae:	60fa      	str	r2, [r7, #12]
 80162b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 80162b2:	f3bf 8f5f 	dmb	sy
		__asm__
 80162b6:	68f9      	ldr	r1, [r7, #12]
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	e851 0f00 	ldrex	r0, [r1]
 80162c0:	ea00 0003 	and.w	r0, r0, r3
 80162c4:	e841 0300 	strex	r3, r0, [r1]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d1f7      	bne.n	80162bc <clear_event+0x2c>
 80162cc:	f3bf 8f5f 	dmb	sy
}
 80162d0:	bf00      	nop
 80162d2:	371c      	adds	r7, #28
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr
 80162dc:	200014f0 	.word	0x200014f0

080162e0 <prepare_tx_packet>:
#endif
//**************************************************************************************************
//***** Global Functions ***************************************************************************

static void prepare_tx_packet()
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b09c      	sub	sp, #112	; 0x70
 80162e4:	af00      	add	r7, sp, #0
	GPI_TRACE_FUNCTION();
 80162e6:	bf00      	nop
	PROFILE("prepare_tx_packet() entry");
 80162e8:	bf00      	nop

	const uint16_t	CHUNK_SIZE = chirp_config.coding_vector.len + chirp_config.payload.len;
 80162ea:	4bad      	ldr	r3, [pc, #692]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80162ec:	79db      	ldrb	r3, [r3, #7]
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	4bab      	ldr	r3, [pc, #684]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80162f2:	7a5b      	ldrb	r3, [r3, #9]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	4413      	add	r3, r2
 80162f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	Matrix_Row		*p;
	void			*pp[MEMXOR_BLOCKSIZE];
	int				pp_used = 0;
 80162fc:	2300      	movs	r3, #0
 80162fe:	66bb      	str	r3, [r7, #104]	; 0x68
	int_fast16_t	used = 0;
 8016300:	2300      	movs	r3, #0
 8016302:	667b      	str	r3, [r7, #100]	; 0x64
	#if MX_REQUEST
		Matrix_Row	*help_row = 0;
 8016304:	2300      	movs	r3, #0
 8016306:	663b      	str	r3, [r7, #96]	; 0x60
	#endif

	assert_msg(NULL != mx.tx_reserve, "Tx without data -> must not happen");
 8016308:	4ba6      	ldr	r3, [pc, #664]	; (80165a4 <prepare_tx_packet+0x2c4>)
 801630a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801630c:	2b00      	cmp	r3, #0
 801630e:	d107      	bne.n	8016320 <prepare_tx_packet+0x40>
 8016310:	4ba5      	ldr	r3, [pc, #660]	; (80165a8 <prepare_tx_packet+0x2c8>)
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	49a5      	ldr	r1, [pc, #660]	; (80165ac <prepare_tx_packet+0x2cc>)
 8016316:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801631a:	4618      	mov	r0, r3
 801631c:	f00b fb4e 	bl	80219bc <__assert>

	// clear mx.tx_packet by adding itself to the xor list
	pp[pp_used++] = &(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]);
 8016320:	4ba0      	ldr	r3, [pc, #640]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016322:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8016324:	4b9e      	ldr	r3, [pc, #632]	; (80165a0 <prepare_tx_packet+0x2c0>)
 8016326:	799b      	ldrb	r3, [r3, #6]
 8016328:	4618      	mov	r0, r3
 801632a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801632c:	1c5a      	adds	r2, r3, #1
 801632e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016330:	f100 0208 	add.w	r2, r0, #8
 8016334:	440a      	add	r2, r1
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801633c:	440b      	add	r3, r1
 801633e:	f843 2c64 	str.w	r2, [r3, #-100]

#if !MX_BENCHMARK_NO_SYSTEMATIC_STARTUP

	if (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 8016342:	4b98      	ldr	r3, [pc, #608]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016344:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 8016348:	4b95      	ldr	r3, [pc, #596]	; (80165a0 <prepare_tx_packet+0x2c0>)
 801634a:	885b      	ldrh	r3, [r3, #2]
 801634c:	b29b      	uxth	r3, r3
 801634e:	3b01      	subs	r3, #1
 8016350:	4994      	ldr	r1, [pc, #592]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016352:	3316      	adds	r3, #22
 8016354:	009b      	lsls	r3, r3, #2
 8016356:	440b      	add	r3, r1
 8016358:	6859      	ldr	r1, [r3, #4]
 801635a:	4b91      	ldr	r3, [pc, #580]	; (80165a0 <prepare_tx_packet+0x2c0>)
 801635c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801635e:	b29b      	uxth	r3, r3
 8016360:	009b      	lsls	r3, r3, #2
 8016362:	440b      	add	r3, r1
 8016364:	3304      	adds	r3, #4
 8016366:	429a      	cmp	r2, r3
 8016368:	d252      	bcs.n	8016410 <prepare_tx_packet+0x130>
	{
		p = mx.next_own_row;
 801636a:	4b8e      	ldr	r3, [pc, #568]	; (80165a4 <prepare_tx_packet+0x2c4>)
 801636c:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8016370:	66fb      	str	r3, [r7, #108]	; 0x6c

		// mark that we don't need the reserve
		used++;
 8016372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016374:	3301      	adds	r3, #1
 8016376:	667b      	str	r3, [r7, #100]	; 0x64

		// restore packed version (in place)
		wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 8016378:	4b89      	ldr	r3, [pc, #548]	; (80165a0 <prepare_tx_packet+0x2c0>)
 801637a:	7e1b      	ldrb	r3, [r3, #24]
 801637c:	461a      	mov	r2, r3
 801637e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016380:	4413      	add	r3, r2
 8016382:	3304      	adds	r3, #4
 8016384:	4618      	mov	r0, r3
 8016386:	f7f8 f8e7 	bl	800e558 <wrap_chunk>

		// add it to xor list
		pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 801638a:	4b85      	ldr	r3, [pc, #532]	; (80165a0 <prepare_tx_packet+0x2c0>)
 801638c:	7f1b      	ldrb	r3, [r3, #28]
 801638e:	4619      	mov	r1, r3
 8016390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016392:	1c5a      	adds	r2, r3, #1
 8016394:	66ba      	str	r2, [r7, #104]	; 0x68
 8016396:	008a      	lsls	r2, r1, #2
 8016398:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801639a:	440a      	add	r2, r1
 801639c:	3204      	adds	r2, #4
 801639e:	009b      	lsls	r3, r3, #2
 80163a0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80163a4:	440b      	add	r3, r1
 80163a6:	f843 2c64 	str.w	r2, [r3, #-100]

		// look for next own row
		mx.next_own_row += chirp_config.matrix_size_32;
 80163aa:	4b7e      	ldr	r3, [pc, #504]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163ac:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80163b0:	4b7b      	ldr	r3, [pc, #492]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80163b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163b4:	b29b      	uxth	r3, r3
 80163b6:	009b      	lsls	r3, r3, #2
 80163b8:	4413      	add	r3, r2
 80163ba:	4a7a      	ldr	r2, [pc, #488]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163bc:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 80163c0:	e010      	b.n	80163e4 <prepare_tx_packet+0x104>
		{
			if (0 == mx.next_own_row->birth_slot)
 80163c2:	4b78      	ldr	r3, [pc, #480]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163c4:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 80163c8:	881b      	ldrh	r3, [r3, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d01f      	beq.n	801640e <prepare_tx_packet+0x12e>
				break;
			mx.next_own_row += chirp_config.matrix_size_32;
 80163ce:	4b75      	ldr	r3, [pc, #468]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163d0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80163d4:	4b72      	ldr	r3, [pc, #456]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80163d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163d8:	b29b      	uxth	r3, r3
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	4413      	add	r3, r2
 80163de:	4a71      	ldr	r2, [pc, #452]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163e0:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
		while (mx.next_own_row < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]))
 80163e4:	4b6f      	ldr	r3, [pc, #444]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163e6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
 80163ea:	4b6d      	ldr	r3, [pc, #436]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80163ec:	885b      	ldrh	r3, [r3, #2]
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	3b01      	subs	r3, #1
 80163f2:	496c      	ldr	r1, [pc, #432]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80163f4:	3316      	adds	r3, #22
 80163f6:	009b      	lsls	r3, r3, #2
 80163f8:	440b      	add	r3, r1
 80163fa:	6859      	ldr	r1, [r3, #4]
 80163fc:	4b68      	ldr	r3, [pc, #416]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80163fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016400:	b29b      	uxth	r3, r3
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	440b      	add	r3, r1
 8016406:	3304      	adds	r3, #4
 8016408:	429a      	cmp	r2, r3
 801640a:	d3da      	bcc.n	80163c2 <prepare_tx_packet+0xe2>
 801640c:	e000      	b.n	8016410 <prepare_tx_packet+0x130>
				break;
 801640e:	bf00      	nop
		}
	}

#endif

	if (!used)
 8016410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016412:	2b00      	cmp	r3, #0
 8016414:	f040 81b7 	bne.w	8016786 <prepare_tx_packet+0x4a6>
	{
		#if MX_REQUEST
			if (mx.request->help_index < 0)
 8016418:	4b62      	ldr	r3, [pc, #392]	; (80165a4 <prepare_tx_packet+0x2c4>)
 801641a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801641e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016422:	2b00      	cmp	r3, #0
 8016424:	da0b      	bge.n	801643e <prepare_tx_packet+0x15e>
			{
				help_row = (Matrix_Row *)&(mx.matrix[-mx.request->help_index - 1]->birth_slot);
 8016426:	4b5f      	ldr	r3, [pc, #380]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016428:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801642c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016430:	43db      	mvns	r3, r3
 8016432:	4a5c      	ldr	r2, [pc, #368]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016434:	3316      	adds	r3, #22
 8016436:	009b      	lsls	r3, r3, #2
 8016438:	4413      	add	r3, r2
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	663b      	str	r3, [r7, #96]	; 0x60
			}
		#endif

		// traverse matrix
		for (p = (Matrix_Row *)&(mx.matrix[0]->birth_slot); p < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]); p += chirp_config.matrix_size_32)
 801643e:	4b59      	ldr	r3, [pc, #356]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016442:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016444:	e18c      	b.n	8016760 <prepare_tx_packet+0x480>
		{
			if (UINT16_MAX == p->birth_slot)
 8016446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016448:	881b      	ldrh	r3, [r3, #0]
 801644a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801644e:	4293      	cmp	r3, r2
 8016450:	f000 817a 	beq.w	8016748 <prepare_tx_packet+0x468>
				continue;

			#if MX_REQUEST
				// if row request help index selected: skip all up to that row
				// NOTE: the help row itself will be automatically included by sideload
				if (p <= help_row)
 8016454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016458:	429a      	cmp	r2, r3
 801645a:	f240 8177 	bls.w	801674c <prepare_tx_packet+0x46c>
					continue;
			#endif

			PROFILE("prepare_tx_packet() mixer_rand() begin");
 801645e:	bf00      	nop

			uint16_t r = mixer_rand();
 8016460:	f002 fbfa 	bl	8018c58 <mixer_rand>
 8016464:	4603      	mov	r3, r0
 8016466:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

			PROFILE("prepare_tx_packet() mixer_rand() end");
 801646a:	bf00      	nop

			// choose any available row as reserve, update from time to time
			// -> as reserve sideload and for the case that we select nothing by rolling the dice
			if (!(r & 7))
 801646c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8016470:	f003 0307 	and.w	r3, r3, #7
 8016474:	2b00      	cmp	r3, #0
 8016476:	d102      	bne.n	801647e <prepare_tx_packet+0x19e>
				mx.tx_reserve = p;
 8016478:	4a4a      	ldr	r2, [pc, #296]	; (80165a4 <prepare_tx_packet+0x2c4>)
 801647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801647c:	6493      	str	r3, [r2, #72]	; 0x48
			// include current row?
			{
				static const uint16_t LUT[] = MX_AGE_TO_INCLUDE_PROBABILITY;
				ASSERT_CT(sizeof(LUT) > 0, MX_AGE_TO_INCLUDE_PROBABILITY_is_invalid);

				if (!(r < LUT[MIN(mx.slot_number - p->birth_slot, NUM_ELEMENTS(LUT) - 1)]))
 801647e:	4b49      	ldr	r3, [pc, #292]	; (80165a4 <prepare_tx_packet+0x2c4>)
 8016480:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8016484:	b29b      	uxth	r3, r3
 8016486:	461a      	mov	r2, r3
 8016488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801648a:	881b      	ldrh	r3, [r3, #0]
 801648c:	1ad3      	subs	r3, r2, r3
 801648e:	65bb      	str	r3, [r7, #88]	; 0x58
 8016490:	2300      	movs	r3, #0
 8016492:	657b      	str	r3, [r7, #84]	; 0x54
 8016494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016498:	4293      	cmp	r3, r2
 801649a:	bf28      	it	cs
 801649c:	4613      	movcs	r3, r2
 801649e:	4a44      	ldr	r2, [pc, #272]	; (80165b0 <prepare_tx_packet+0x2d0>)
 80164a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80164a4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80164a8:	429a      	cmp	r2, r3
 80164aa:	f080 8151 	bcs.w	8016750 <prepare_tx_packet+0x470>
					continue;
            }

			// mark that we don't need the reserve
			used++;
 80164ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164b0:	3301      	adds	r3, #1
 80164b2:	667b      	str	r3, [r7, #100]	; 0x64

			// restore packed version (in place)
			wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 80164b4:	4b3a      	ldr	r3, [pc, #232]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80164b6:	7e1b      	ldrb	r3, [r3, #24]
 80164b8:	461a      	mov	r2, r3
 80164ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164bc:	4413      	add	r3, r2
 80164be:	3304      	adds	r3, #4
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f8 f849 	bl	800e558 <wrap_chunk>

			// add it to xor list, work through if needed
			pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 80164c6:	4b36      	ldr	r3, [pc, #216]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80164c8:	7f1b      	ldrb	r3, [r3, #28]
 80164ca:	4619      	mov	r1, r3
 80164cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164ce:	1c5a      	adds	r2, r3, #1
 80164d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80164d2:	008a      	lsls	r2, r1, #2
 80164d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80164d6:	440a      	add	r2, r1
 80164d8:	3204      	adds	r2, #4
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80164e0:	440b      	add	r3, r1
 80164e2:	f843 2c64 	str.w	r2, [r3, #-100]

			if(NUM_ELEMENTS(pp) == pp_used)
 80164e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164e8:	2b08      	cmp	r3, #8
 80164ea:	f040 80bd 	bne.w	8016668 <prepare_tx_packet+0x388>
			{
				PROFILE("prepare_tx_packet() memxor_block(full) begin");
 80164ee:	bf00      	nop

				// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit better
				// code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
				memxor_block(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]), pp, CHUNK_SIZE, NUM_ELEMENTS(pp));
 80164f0:	4b2c      	ldr	r3, [pc, #176]	; (80165a4 <prepare_tx_packet+0x2c4>)
 80164f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80164f4:	4b2a      	ldr	r3, [pc, #168]	; (80165a0 <prepare_tx_packet+0x2c0>)
 80164f6:	799b      	ldrb	r3, [r3, #6]
 80164f8:	3308      	adds	r3, #8
 80164fa:	441a      	add	r2, r3
 80164fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8016500:	653a      	str	r2, [r7, #80]	; 0x50
 8016502:	f107 020c 	add.w	r2, r7, #12
 8016506:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016508:	64bb      	str	r3, [r7, #72]	; 0x48
 801650a:	2308      	movs	r3, #8
 801650c:	647b      	str	r3, [r7, #68]	; 0x44
	union {
		uint16_t	*h;
		uint32_t	*w;
    }				ins;

	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 801650e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016510:	2b08      	cmp	r3, #8
 8016512:	dd0e      	ble.n	8016532 <prepare_tx_packet+0x252>
 8016514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016516:	2b08      	cmp	r3, #8
 8016518:	dc01      	bgt.n	801651e <prepare_tx_packet+0x23e>
 801651a:	2301      	movs	r3, #1
 801651c:	e000      	b.n	8016520 <prepare_tx_packet+0x240>
 801651e:	2300      	movs	r3, #0
 8016520:	4618      	mov	r0, r3
 8016522:	f00c f88b 	bl	802263c <iprintf>
 8016526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016528:	2b08      	cmp	r3, #8
 801652a:	dd02      	ble.n	8016532 <prepare_tx_packet+0x252>
  __ASM volatile ("cpsid f" : : : "memory");
 801652c:	b671      	cpsid	f
 801652e:	f7ff fdbf 	bl	80160b0 <NVIC_SystemReset>

	if ((0 == num_src) || (0 == size))
 8016532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016534:	2b00      	cmp	r3, #0
 8016536:	f000 8094 	beq.w	8016662 <prepare_tx_packet+0x382>
 801653a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801653c:	2b00      	cmp	r3, #0
 801653e:	f000 8090 	beq.w	8016662 <prepare_tx_packet+0x382>
		return;

	// if size - i.e. number of needed loop iterations - is small, the overhead for adapting
	// the machine code exceeds the savings. Therefore we use a more straight-forward version
	// in these situations which is slower per iteration but comes with appropriate less overhead.
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8016542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016544:	2b08      	cmp	r3, #8
 8016546:	d809      	bhi.n	801655c <prepare_tx_packet+0x27c>
 8016548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801654a:	2b07      	cmp	r3, #7
 801654c:	dc06      	bgt.n	801655c <prepare_tx_packet+0x27c>
	{
		memxor_block_straight(dest, src, size, num_src);
 801654e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016552:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016554:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016556:	f7f7 feb5 	bl	800e2c4 <memxor_block_straight>
 801655a:	e082      	b.n	8016662 <prepare_tx_packet+0x382>
		return;
    }

	// adapt machine code to num_src
	if (num_src < MEMXOR_BLOCKSIZE)
 801655c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801655e:	2b07      	cmp	r3, #7
 8016560:	dc56      	bgt.n	8016610 <prepare_tx_packet+0x330>
	{
		// ATTENTION: &memxor_block_core LSB marks ARM Thumb mode,
		// so it must be cleared to get the real address
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8016562:	4b14      	ldr	r3, [pc, #80]	; (80165b4 <prepare_tx_packet+0x2d4>)
 8016564:	f023 0301 	bic.w	r3, r3, #1
 8016568:	607b      	str	r3, [r7, #4]
		// ins.h[1] = reglist;
		// ins.h[45] = reglist;
		// ins.h[3] = reglist & ~0x0010;

		// calculate loop entry point and move load instruction to the right place
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 801656a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801656c:	3301      	adds	r3, #1
 801656e:	0fda      	lsrs	r2, r3, #31
 8016570:	4413      	add	r3, r2
 8016572:	105b      	asrs	r3, r3, #1
 8016574:	009b      	lsls	r3, r3, #2
 8016576:	f1c3 0312 	rsb	r3, r3, #18
 801657a:	643b      	str	r3, [r7, #64]	; 0x40
		if (num_src & 1)
 801657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801657e:	f003 0301 	and.w	r3, r3, #1
 8016582:	2b00      	cmp	r3, #0
 8016584:	d018      	beq.n	80165b8 <prepare_tx_packet+0x2d8>
		{
			loop_start += 2;
 8016586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016588:	3302      	adds	r3, #2
 801658a:	643b      	str	r3, [r7, #64]	; 0x40
			ins.w[loop_start + 1] = ins.w[2];
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	6879      	ldr	r1, [r7, #4]
 8016590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016592:	3301      	adds	r3, #1
 8016594:	009b      	lsls	r3, r3, #2
 8016596:	440b      	add	r3, r1
 8016598:	6892      	ldr	r2, [r2, #8]
 801659a:	601a      	str	r2, [r3, #0]
 801659c:	e013      	b.n	80165c6 <prepare_tx_packet+0x2e6>
 801659e:	bf00      	nop
 80165a0:	20001430 	.word	0x20001430
 80165a4:	200014f0 	.word	0x200014f0
 80165a8:	200000a8 	.word	0x200000a8
 80165ac:	08025c68 	.word	0x08025c68
 80165b0:	08027030 	.word	0x08027030
 80165b4:	20000005 	.word	0x20000005
        }
		else
			ins.w[loop_start] = ins.w[2];
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	6879      	ldr	r1, [r7, #4]
 80165bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165be:	009b      	lsls	r3, r3, #2
 80165c0:	440b      	add	r3, r1
 80165c2:	6892      	ldr	r2, [r2, #8]
 80165c4:	601a      	str	r2, [r3, #0]

		// inject branch to loop entry point
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80165c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80165cc:	3b03      	subs	r3, #3
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	005b      	lsls	r3, r3, #1
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	3208      	adds	r2, #8
 80165d8:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80165dc:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	8013      	strh	r3, [r2, #0]

		// shorten loop
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 80165e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80165ea:	3b16      	subs	r3, #22
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	005b      	lsls	r3, r3, #1
 80165f0:	b29a      	uxth	r2, r3
 80165f2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80165f6:	4013      	ands	r3, r2
 80165f8:	b299      	uxth	r1, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8016600:	4b9f      	ldr	r3, [pc, #636]	; (8016880 <prepare_tx_packet+0x5a0>)
 8016602:	430b      	orrs	r3, r1
 8016604:	b29b      	uxth	r3, r3
 8016606:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8016608:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801660c:	f3bf 8f6f 	isb	sy
		__DMB();
		__ISB();
	}

	// call core loop
	memxor_block_core(dest, src, size);
 8016610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016612:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016614:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016616:	f00e ff33 	bl	8025480 <__memxor_block_core_veneer>

	// restore original machine code
	if (num_src < MEMXOR_BLOCKSIZE)
 801661a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801661c:	2b07      	cmp	r3, #7
 801661e:	dc20      	bgt.n	8016662 <prepare_tx_packet+0x382>
		// for the reason see comment above
		// ins.h[1] = 0x1ff0;
		// ins.h[45] = 0x1ff0;
		// ins.h[3] = 0x1fe0;

		if (num_src & 1)
 8016620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016622:	f003 0301 	and.w	r3, r3, #1
 8016626:	2b00      	cmp	r3, #0
 8016628:	d007      	beq.n	801663a <prepare_tx_packet+0x35a>
			ins.w[loop_start + 1] = 0x0104ea81;
 801662a:	687a      	ldr	r2, [r7, #4]
 801662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801662e:	3301      	adds	r3, #1
 8016630:	009b      	lsls	r3, r3, #2
 8016632:	4413      	add	r3, r2
 8016634:	4a93      	ldr	r2, [pc, #588]	; (8016884 <prepare_tx_packet+0x5a4>)
 8016636:	601a      	str	r2, [r3, #0]
 8016638:	e005      	b.n	8016646 <prepare_tx_packet+0x366>
		else
			ins.w[loop_start] = 0x0103ea81;
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	4413      	add	r3, r2
 8016642:	4a91      	ldr	r2, [pc, #580]	; (8016888 <prepare_tx_packet+0x5a8>)
 8016644:	601a      	str	r2, [r3, #0]

		ins.h[4] = 0xf8d0;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	3308      	adds	r3, #8
 801664a:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 801664e:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	3356      	adds	r3, #86	; 0x56
 8016654:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 8016658:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801665a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801665e:	f3bf 8f6f 	isb	sy

				pp_used = 0;
 8016662:	2300      	movs	r3, #0
 8016664:	66bb      	str	r3, [r7, #104]	; 0x68

				PROFILE("prepare_tx_packet() memxor_block(full) end");
 8016666:	bf00      	nop
			}

			assert_reset(!((offsetof(Packet, packet_chunk) + chirp_config.coding_vector.pos) % sizeof(uint_fast_t)));
 8016668:	4b88      	ldr	r3, [pc, #544]	; (801688c <prepare_tx_packet+0x5ac>)
 801666a:	799b      	ldrb	r3, [r3, #6]
 801666c:	f003 0303 	and.w	r3, r3, #3
 8016670:	2b00      	cmp	r3, #0
 8016672:	d014      	beq.n	801669e <prepare_tx_packet+0x3be>
 8016674:	4b85      	ldr	r3, [pc, #532]	; (801688c <prepare_tx_packet+0x5ac>)
 8016676:	799b      	ldrb	r3, [r3, #6]
 8016678:	f003 0303 	and.w	r3, r3, #3
 801667c:	2b00      	cmp	r3, #0
 801667e:	d101      	bne.n	8016684 <prepare_tx_packet+0x3a4>
 8016680:	2301      	movs	r3, #1
 8016682:	e000      	b.n	8016686 <prepare_tx_packet+0x3a6>
 8016684:	2300      	movs	r3, #0
 8016686:	4618      	mov	r0, r3
 8016688:	f00b ffd8 	bl	802263c <iprintf>
 801668c:	4b7f      	ldr	r3, [pc, #508]	; (801688c <prepare_tx_packet+0x5ac>)
 801668e:	799b      	ldrb	r3, [r3, #6]
 8016690:	f003 0303 	and.w	r3, r3, #3
 8016694:	2b00      	cmp	r3, #0
 8016696:	d002      	beq.n	801669e <prepare_tx_packet+0x3be>
  __ASM volatile ("cpsid f" : : : "memory");
 8016698:	b671      	cpsid	f
 801669a:	f7ff fd09 	bl	80160b0 <NVIC_SystemReset>

			assert_reset(chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len);
 801669e:	4b7b      	ldr	r3, [pc, #492]	; (801688c <prepare_tx_packet+0x5ac>)
 80166a0:	7a1b      	ldrb	r3, [r3, #8]
 80166a2:	461a      	mov	r2, r3
 80166a4:	4b79      	ldr	r3, [pc, #484]	; (801688c <prepare_tx_packet+0x5ac>)
 80166a6:	799b      	ldrb	r3, [r3, #6]
 80166a8:	4619      	mov	r1, r3
 80166aa:	4b78      	ldr	r3, [pc, #480]	; (801688c <prepare_tx_packet+0x5ac>)
 80166ac:	79db      	ldrb	r3, [r3, #7]
 80166ae:	440b      	add	r3, r1
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d01e      	beq.n	80166f2 <prepare_tx_packet+0x412>
 80166b4:	4b75      	ldr	r3, [pc, #468]	; (801688c <prepare_tx_packet+0x5ac>)
 80166b6:	7a1b      	ldrb	r3, [r3, #8]
 80166b8:	461a      	mov	r2, r3
 80166ba:	4b74      	ldr	r3, [pc, #464]	; (801688c <prepare_tx_packet+0x5ac>)
 80166bc:	799b      	ldrb	r3, [r3, #6]
 80166be:	4619      	mov	r1, r3
 80166c0:	4b72      	ldr	r3, [pc, #456]	; (801688c <prepare_tx_packet+0x5ac>)
 80166c2:	79db      	ldrb	r3, [r3, #7]
 80166c4:	440b      	add	r3, r1
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d101      	bne.n	80166ce <prepare_tx_packet+0x3ee>
 80166ca:	2301      	movs	r3, #1
 80166cc:	e000      	b.n	80166d0 <prepare_tx_packet+0x3f0>
 80166ce:	2300      	movs	r3, #0
 80166d0:	4618      	mov	r0, r3
 80166d2:	f00b ffb3 	bl	802263c <iprintf>
 80166d6:	4b6d      	ldr	r3, [pc, #436]	; (801688c <prepare_tx_packet+0x5ac>)
 80166d8:	7a1b      	ldrb	r3, [r3, #8]
 80166da:	461a      	mov	r2, r3
 80166dc:	4b6b      	ldr	r3, [pc, #428]	; (801688c <prepare_tx_packet+0x5ac>)
 80166de:	799b      	ldrb	r3, [r3, #6]
 80166e0:	4619      	mov	r1, r3
 80166e2:	4b6a      	ldr	r3, [pc, #424]	; (801688c <prepare_tx_packet+0x5ac>)
 80166e4:	79db      	ldrb	r3, [r3, #7]
 80166e6:	440b      	add	r3, r1
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d002      	beq.n	80166f2 <prepare_tx_packet+0x412>
 80166ec:	b671      	cpsid	f
 80166ee:	f7ff fcdf 	bl	80160b0 <NVIC_SystemReset>
			assert_reset(chirp_config.matrix_payload_8.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector_8.len);
 80166f2:	4b66      	ldr	r3, [pc, #408]	; (801688c <prepare_tx_packet+0x5ac>)
 80166f4:	7e9b      	ldrb	r3, [r3, #26]
 80166f6:	461a      	mov	r2, r3
 80166f8:	4b64      	ldr	r3, [pc, #400]	; (801688c <prepare_tx_packet+0x5ac>)
 80166fa:	7f1b      	ldrb	r3, [r3, #28]
 80166fc:	4619      	mov	r1, r3
 80166fe:	4b63      	ldr	r3, [pc, #396]	; (801688c <prepare_tx_packet+0x5ac>)
 8016700:	7e5b      	ldrb	r3, [r3, #25]
 8016702:	440b      	add	r3, r1
 8016704:	429a      	cmp	r2, r3
 8016706:	d024      	beq.n	8016752 <prepare_tx_packet+0x472>
 8016708:	4b60      	ldr	r3, [pc, #384]	; (801688c <prepare_tx_packet+0x5ac>)
 801670a:	7e9b      	ldrb	r3, [r3, #26]
 801670c:	461a      	mov	r2, r3
 801670e:	4b5f      	ldr	r3, [pc, #380]	; (801688c <prepare_tx_packet+0x5ac>)
 8016710:	7f1b      	ldrb	r3, [r3, #28]
 8016712:	4619      	mov	r1, r3
 8016714:	4b5d      	ldr	r3, [pc, #372]	; (801688c <prepare_tx_packet+0x5ac>)
 8016716:	7e5b      	ldrb	r3, [r3, #25]
 8016718:	440b      	add	r3, r1
 801671a:	429a      	cmp	r2, r3
 801671c:	d101      	bne.n	8016722 <prepare_tx_packet+0x442>
 801671e:	2301      	movs	r3, #1
 8016720:	e000      	b.n	8016724 <prepare_tx_packet+0x444>
 8016722:	2300      	movs	r3, #0
 8016724:	4618      	mov	r0, r3
 8016726:	f00b ff89 	bl	802263c <iprintf>
 801672a:	4b58      	ldr	r3, [pc, #352]	; (801688c <prepare_tx_packet+0x5ac>)
 801672c:	7e9b      	ldrb	r3, [r3, #26]
 801672e:	461a      	mov	r2, r3
 8016730:	4b56      	ldr	r3, [pc, #344]	; (801688c <prepare_tx_packet+0x5ac>)
 8016732:	7f1b      	ldrb	r3, [r3, #28]
 8016734:	4619      	mov	r1, r3
 8016736:	4b55      	ldr	r3, [pc, #340]	; (801688c <prepare_tx_packet+0x5ac>)
 8016738:	7e5b      	ldrb	r3, [r3, #25]
 801673a:	440b      	add	r3, r1
 801673c:	429a      	cmp	r2, r3
 801673e:	d008      	beq.n	8016752 <prepare_tx_packet+0x472>
 8016740:	b671      	cpsid	f
 8016742:	f7ff fcb5 	bl	80160b0 <NVIC_SystemReset>
 8016746:	e004      	b.n	8016752 <prepare_tx_packet+0x472>
				continue;
 8016748:	bf00      	nop
 801674a:	e002      	b.n	8016752 <prepare_tx_packet+0x472>
					continue;
 801674c:	bf00      	nop
 801674e:	e000      	b.n	8016752 <prepare_tx_packet+0x472>
					continue;
 8016750:	bf00      	nop
		for (p = (Matrix_Row *)&(mx.matrix[0]->birth_slot); p < (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]); p += chirp_config.matrix_size_32)
 8016752:	4b4e      	ldr	r3, [pc, #312]	; (801688c <prepare_tx_packet+0x5ac>)
 8016754:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016756:	b29b      	uxth	r3, r3
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801675c:	4413      	add	r3, r2
 801675e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016760:	4b4a      	ldr	r3, [pc, #296]	; (801688c <prepare_tx_packet+0x5ac>)
 8016762:	885b      	ldrh	r3, [r3, #2]
 8016764:	b29b      	uxth	r3, r3
 8016766:	3b01      	subs	r3, #1
 8016768:	4a49      	ldr	r2, [pc, #292]	; (8016890 <prepare_tx_packet+0x5b0>)
 801676a:	3316      	adds	r3, #22
 801676c:	009b      	lsls	r3, r3, #2
 801676e:	4413      	add	r3, r2
 8016770:	685a      	ldr	r2, [r3, #4]
 8016772:	4b46      	ldr	r3, [pc, #280]	; (801688c <prepare_tx_packet+0x5ac>)
 8016774:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016776:	b29b      	uxth	r3, r3
 8016778:	009b      	lsls	r3, r3, #2
 801677a:	4413      	add	r3, r2
 801677c:	3304      	adds	r3, #4
 801677e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016780:	429a      	cmp	r2, r3
 8016782:	f4ff ae60 	bcc.w	8016446 <prepare_tx_packet+0x166>
	// of high tx probability - a subsequent try to transmit. Since the request situation does not
	// change in this time, there is a good chance that we rebuild the same packet. If this happens,
	// the whole procedure starts again and again and does not end before mx.tx_reserve gets updated.
	// But this never happens if the requested row is the last one in the matrix.
	#if MX_REQUEST
		if (!used && !help_row)
 8016786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016788:	2b00      	cmp	r3, #0
 801678a:	d11e      	bne.n	80167ca <prepare_tx_packet+0x4ea>
 801678c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801678e:	2b00      	cmp	r3, #0
 8016790:	d11b      	bne.n	80167ca <prepare_tx_packet+0x4ea>
		if (!used)
	#endif
	{
		// NOTE: we cast const away which is a bit dirty. We need this only to restore packed
		// version which is such a negligible change that we prefer mx.tx_reserve to appear as const.
		p = (Matrix_Row *)mx.tx_reserve;
 8016792:	4b3f      	ldr	r3, [pc, #252]	; (8016890 <prepare_tx_packet+0x5b0>)
 8016794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016796:	66fb      	str	r3, [r7, #108]	; 0x6c

		// restore packed version (in place)
		wrap_chunk((uint8_t *)&(p->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]));
 8016798:	4b3c      	ldr	r3, [pc, #240]	; (801688c <prepare_tx_packet+0x5ac>)
 801679a:	7e1b      	ldrb	r3, [r3, #24]
 801679c:	461a      	mov	r2, r3
 801679e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167a0:	4413      	add	r3, r2
 80167a2:	3304      	adds	r3, #4
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7f7 fed7 	bl	800e558 <wrap_chunk>

		// add it to xor list
		// NOTE: memcpy instead of memxor would also be possible here,
		// but the situation is not very time critical (xored nothing up to here)
		pp[pp_used++] = &(p->matrix_chunk[chirp_config.matrix_coding_vector.pos]);
 80167aa:	4b38      	ldr	r3, [pc, #224]	; (801688c <prepare_tx_packet+0x5ac>)
 80167ac:	7f1b      	ldrb	r3, [r3, #28]
 80167ae:	4619      	mov	r1, r3
 80167b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167b2:	1c5a      	adds	r2, r3, #1
 80167b4:	66ba      	str	r2, [r7, #104]	; 0x68
 80167b6:	008a      	lsls	r2, r1, #2
 80167b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80167ba:	440a      	add	r2, r1
 80167bc:	3204      	adds	r2, #4
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80167c4:	440b      	add	r3, r1
 80167c6:	f843 2c64 	str.w	r2, [r3, #-100]
	}

	// work through the xor list
	if (pp_used)
 80167ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	f000 80b8 	beq.w	8016942 <prepare_tx_packet+0x662>
	{
		memxor_block(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos]), pp, CHUNK_SIZE, pp_used);
 80167d2:	4b2f      	ldr	r3, [pc, #188]	; (8016890 <prepare_tx_packet+0x5b0>)
 80167d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167d6:	4b2d      	ldr	r3, [pc, #180]	; (801688c <prepare_tx_packet+0x5ac>)
 80167d8:	799b      	ldrb	r3, [r3, #6]
 80167da:	3308      	adds	r3, #8
 80167dc:	441a      	add	r2, r3
 80167de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80167e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80167e4:	f107 020c 	add.w	r2, r7, #12
 80167e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80167ea:	637b      	str	r3, [r7, #52]	; 0x34
 80167ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167ee:	633b      	str	r3, [r7, #48]	; 0x30
	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 80167f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f2:	2b08      	cmp	r3, #8
 80167f4:	dd0e      	ble.n	8016814 <prepare_tx_packet+0x534>
 80167f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f8:	2b08      	cmp	r3, #8
 80167fa:	dc01      	bgt.n	8016800 <prepare_tx_packet+0x520>
 80167fc:	2301      	movs	r3, #1
 80167fe:	e000      	b.n	8016802 <prepare_tx_packet+0x522>
 8016800:	2300      	movs	r3, #0
 8016802:	4618      	mov	r0, r3
 8016804:	f00b ff1a 	bl	802263c <iprintf>
 8016808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801680a:	2b08      	cmp	r3, #8
 801680c:	dd02      	ble.n	8016814 <prepare_tx_packet+0x534>
 801680e:	b671      	cpsid	f
 8016810:	f7ff fc4e 	bl	80160b0 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8016814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016816:	2b00      	cmp	r3, #0
 8016818:	f000 8093 	beq.w	8016942 <prepare_tx_packet+0x662>
 801681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801681e:	2b00      	cmp	r3, #0
 8016820:	f000 808f 	beq.w	8016942 <prepare_tx_packet+0x662>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8016824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016826:	2b08      	cmp	r3, #8
 8016828:	d809      	bhi.n	801683e <prepare_tx_packet+0x55e>
 801682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682c:	2b07      	cmp	r3, #7
 801682e:	dc06      	bgt.n	801683e <prepare_tx_packet+0x55e>
		memxor_block_straight(dest, src, size, num_src);
 8016830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016836:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016838:	f7f7 fd44 	bl	800e2c4 <memxor_block_straight>
	}

	PROFILE("prepare_tx_packet() return");
 801683c:	e081      	b.n	8016942 <prepare_tx_packet+0x662>
	if (num_src < MEMXOR_BLOCKSIZE)
 801683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016840:	2b07      	cmp	r3, #7
 8016842:	dc55      	bgt.n	80168f0 <prepare_tx_packet+0x610>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8016844:	4b13      	ldr	r3, [pc, #76]	; (8016894 <prepare_tx_packet+0x5b4>)
 8016846:	f023 0301 	bic.w	r3, r3, #1
 801684a:	60bb      	str	r3, [r7, #8]
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 801684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801684e:	3301      	adds	r3, #1
 8016850:	0fda      	lsrs	r2, r3, #31
 8016852:	4413      	add	r3, r2
 8016854:	105b      	asrs	r3, r3, #1
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	f1c3 0312 	rsb	r3, r3, #18
 801685c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (num_src & 1)
 801685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	2b00      	cmp	r3, #0
 8016866:	d017      	beq.n	8016898 <prepare_tx_packet+0x5b8>
			loop_start += 2;
 8016868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686a:	3302      	adds	r3, #2
 801686c:	62fb      	str	r3, [r7, #44]	; 0x2c
			ins.w[loop_start + 1] = ins.w[2];
 801686e:	68ba      	ldr	r2, [r7, #8]
 8016870:	68b9      	ldr	r1, [r7, #8]
 8016872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016874:	3301      	adds	r3, #1
 8016876:	009b      	lsls	r3, r3, #2
 8016878:	440b      	add	r3, r1
 801687a:	6892      	ldr	r2, [r2, #8]
 801687c:	601a      	str	r2, [r3, #0]
 801687e:	e012      	b.n	80168a6 <prepare_tx_packet+0x5c6>
 8016880:	ffffa800 	.word	0xffffa800
 8016884:	0104ea81 	.word	0x0104ea81
 8016888:	0103ea81 	.word	0x0103ea81
 801688c:	20001430 	.word	0x20001430
 8016890:	200014f0 	.word	0x200014f0
 8016894:	20000005 	.word	0x20000005
			ins.w[loop_start] = ins.w[2];
 8016898:	68ba      	ldr	r2, [r7, #8]
 801689a:	68b9      	ldr	r1, [r7, #8]
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689e:	009b      	lsls	r3, r3, #2
 80168a0:	440b      	add	r3, r1
 80168a2:	6892      	ldr	r2, [r2, #8]
 80168a4:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80168a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80168ac:	3b03      	subs	r3, #3
 80168ae:	b29b      	uxth	r3, r3
 80168b0:	005b      	lsls	r3, r3, #1
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	68ba      	ldr	r2, [r7, #8]
 80168b6:	3208      	adds	r2, #8
 80168b8:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80168bc:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 80168c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80168ca:	3b16      	subs	r3, #22
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	005b      	lsls	r3, r3, #1
 80168d0:	b29a      	uxth	r2, r3
 80168d2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80168d6:	4013      	ands	r3, r2
 80168d8:	b299      	uxth	r1, r3
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	f103 0256 	add.w	r2, r3, #86	; 0x56
 80168e0:	4b1b      	ldr	r3, [pc, #108]	; (8016950 <prepare_tx_packet+0x670>)
 80168e2:	430b      	orrs	r3, r1
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80168e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80168ec:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 80168f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80168f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80168f6:	f00e fdc3 	bl	8025480 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 80168fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fc:	2b07      	cmp	r3, #7
 80168fe:	dc20      	bgt.n	8016942 <prepare_tx_packet+0x662>
		if (num_src & 1)
 8016900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016902:	f003 0301 	and.w	r3, r3, #1
 8016906:	2b00      	cmp	r3, #0
 8016908:	d007      	beq.n	801691a <prepare_tx_packet+0x63a>
			ins.w[loop_start + 1] = 0x0104ea81;
 801690a:	68ba      	ldr	r2, [r7, #8]
 801690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690e:	3301      	adds	r3, #1
 8016910:	009b      	lsls	r3, r3, #2
 8016912:	4413      	add	r3, r2
 8016914:	4a0f      	ldr	r2, [pc, #60]	; (8016954 <prepare_tx_packet+0x674>)
 8016916:	601a      	str	r2, [r3, #0]
 8016918:	e005      	b.n	8016926 <prepare_tx_packet+0x646>
			ins.w[loop_start] = 0x0103ea81;
 801691a:	68ba      	ldr	r2, [r7, #8]
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	4413      	add	r3, r2
 8016922:	4a0d      	ldr	r2, [pc, #52]	; (8016958 <prepare_tx_packet+0x678>)
 8016924:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	3308      	adds	r3, #8
 801692a:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 801692e:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	3356      	adds	r3, #86	; 0x56
 8016934:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 8016938:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801693a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801693e:	f3bf 8f6f 	isb	sy
 8016942:	bf00      	nop

	TRACE_DUMP(1, "tx_packet:", &(mx.tx_packet->phy_payload_begin), chirp_config.phy_payload_size);
 8016944:	bf00      	nop

	GPI_TRACE_RETURN();
 8016946:	bf00      	nop
}
 8016948:	3770      	adds	r7, #112	; 0x70
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	ffffa800 	.word	0xffffa800
 8016954:	0104ea81 	.word	0x0104ea81
 8016958:	0103ea81 	.word	0x0103ea81

0801695c <mixer_update_slot>:

//**************************************************************************************************

PT_THREAD(mixer_update_slot())
{
 801695c:	b590      	push	{r4, r7, lr}
 801695e:	b0ad      	sub	sp, #180	; 0xb4
 8016960:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_update_slot;
 8016962:	4bb7      	ldr	r3, [pc, #732]	; (8016c40 <mixer_update_slot+0x2e4>)
 8016964:	67fb      	str	r3, [r7, #124]	; 0x7c

	PT_BEGIN(pt);
 8016966:	2301      	movs	r3, #1
 8016968:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801696c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801696e:	881b      	ldrh	r3, [r3, #0]
 8016970:	f240 222e 	movw	r2, #558	; 0x22e
 8016974:	4293      	cmp	r3, r2
 8016976:	d015      	beq.n	80169a4 <mixer_update_slot+0x48>
 8016978:	f240 42f4 	movw	r2, #1268	; 0x4f4
 801697c:	4293      	cmp	r3, r2
 801697e:	f000 8631 	beq.w	80175e4 <mixer_update_slot+0xc88>
 8016982:	2b00      	cmp	r3, #0
 8016984:	f040 8636 	bne.w	80175f4 <mixer_update_slot+0xc98>
 8016988:	bf00      	nop
#endif

	// init variables at thread startup
	// NOTE: approach is useful because thread gets reinitialized (PT_INIT) on each mixer round
#if (MX_COORDINATED_TX || MX_REQUEST)
	rx_queue_num_read_2	= 0;
 801698a:	4bae      	ldr	r3, [pc, #696]	; (8016c44 <mixer_update_slot+0x2e8>)
 801698c:	2200      	movs	r2, #0
 801698e:	601a      	str	r2, [r3, #0]
#endif
#if MX_COORDINATED_TX
	owner 			  = 0;
 8016990:	4bad      	ldr	r3, [pc, #692]	; (8016c48 <mixer_update_slot+0x2ec>)
 8016992:	2200      	movs	r2, #0
 8016994:	801a      	strh	r2, [r3, #0]
	last_owner_update = 0;
 8016996:	4bad      	ldr	r3, [pc, #692]	; (8016c4c <mixer_update_slot+0x2f0>)
 8016998:	2200      	movs	r2, #0
 801699a:	801a      	strh	r2, [r3, #0]
#endif

	while (1)
	{
		PT_WAIT_UNTIL(pt, mx.events & BV(SLOT_UPDATE));
 801699c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801699e:	f240 222e 	movw	r2, #558	; 0x22e
 80169a2:	801a      	strh	r2, [r3, #0]
 80169a4:	4baa      	ldr	r3, [pc, #680]	; (8016c50 <mixer_update_slot+0x2f4>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f003 0302 	and.w	r3, r3, #2
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d103      	bne.n	80169b8 <mixer_update_slot+0x5c>
 80169b0:	bf00      	nop
 80169b2:	2300      	movs	r3, #0
 80169b4:	f000 be26 	b.w	8017604 <mixer_update_slot+0xca8>
		clear_event(SLOT_UPDATE);
 80169b8:	2001      	movs	r0, #1
 80169ba:	f7ff fc69 	bl	8016290 <clear_event>
		if (chirp_config.primitive != FLOODING)
 80169be:	4ba5      	ldr	r3, [pc, #660]	; (8016c54 <mixer_update_slot+0x2f8>)
 80169c0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	f000 85ec 	beq.w	80175a2 <mixer_update_slot+0xc46>
		{
		gpi_watchdog_periodic();
 80169ca:	f7f7 fc01 	bl	800e1d0 <gpi_watchdog_periodic>
		#if MX_VERBOSE_PACKETS
			if (mx.events & BV(TX_READY))
 80169ce:	4ba0      	ldr	r3, [pc, #640]	; (8016c50 <mixer_update_slot+0x2f4>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f003 0304 	and.w	r3, r3, #4
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d007      	beq.n	80169ea <mixer_update_slot+0x8e>
			{
				PRINTF_CHIRP("Tx: ");
 80169da:	489f      	ldr	r0, [pc, #636]	; (8016c58 <mixer_update_slot+0x2fc>)
 80169dc:	f00b fe2e 	bl	802263c <iprintf>

				TRACE_PACKET(&(mx.tx_packet->phy_payload_begin));
 80169e0:	4b9b      	ldr	r3, [pc, #620]	; (8016c50 <mixer_update_slot+0x2f4>)
 80169e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7ff fb77 	bl	80160d8 <trace_packet>

//TRACE_DUMP(1, "my_row_mask:", mx.request.my_row_mask, sizeof(mx.request.my_row_mask));
//TRACE_DUMP(1, "my_column_mask:", mx.request.my_column_mask, sizeof(mx.request.my_column_mask));

		Slot_Activity		next_task;
		uint16_t			p = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

		#if MX_COORDINATED_TX
			Packet_Flags	flags = {0};
 80169f0:	2300      	movs	r3, #0
 80169f2:	703b      	strb	r3, [r7, #0]

		// use local variable since mx.slot_number is volatile (and for performance)
		// NOTE: some pieces of code rely on the assumption that slot_number doesn't change
		// while the thread is active. Although this is true if system runs without overload,
		// we use a local variable to be absolutely safe.
		uint16_t	slot_number = mx.slot_number;
 80169f4:	4b96      	ldr	r3, [pc, #600]	; (8016c50 <mixer_update_slot+0x2f4>)
 80169f6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80169fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		GPI_TRACE_MSG_FAST(TRACE_INFO, "slot %" PRIu16, slot_number);
 80169fe:	bf00      	nop
		PROFILE("mixer_update_slot() begin");
 8016a00:	bf00      	nop
		// maintain request status
		#if MX_REQUEST
			if (slot_number - mx.request->last_update_slot > 3)
 8016a02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016a06:	4a92      	ldr	r2, [pc, #584]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a08:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 8016a0c:	8912      	ldrh	r2, [r2, #8]
 8016a0e:	1a9b      	subs	r3, r3, r2
 8016a10:	2b03      	cmp	r3, #3
 8016a12:	dd0a      	ble.n	8016a2a <mixer_update_slot+0xce>
			{
				mx.request->row_any_pending = 0;
 8016a14:	4b8e      	ldr	r3, [pc, #568]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a16:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	601a      	str	r2, [r3, #0]
				mx.request->column_any_pending = 0;
 8016a1e:	4b8c      	ldr	r3, [pc, #560]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a20:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016a24:	2200      	movs	r2, #0
 8016a26:	605a      	str	r2, [r3, #4]
			else if (mx.events & BV(TX_READY))
			{
				mx_update_request(mx.tx_packet);
			}

			PROFILE("mixer_update_slot() update request status done");
 8016a28:	e00a      	b.n	8016a40 <mixer_update_slot+0xe4>
			else if (mx.events & BV(TX_READY))
 8016a2a:	4b89      	ldr	r3, [pc, #548]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f003 0304 	and.w	r3, r3, #4
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d004      	beq.n	8016a40 <mixer_update_slot+0xe4>
				mx_update_request(mx.tx_packet);
 8016a36:	4b86      	ldr	r3, [pc, #536]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f002 fa7a 	bl	8018f34 <mx_update_request>
			PROFILE("mixer_update_slot() update request status done");
 8016a40:	bf00      	nop
		#endif

		// read rx packet if available and update history
		#if (MX_COORDINATED_TX || MX_REQUEST)
			while (rx_queue_num_read_2 != mx.rx_queue_num_written)
 8016a42:	e068      	b.n	8016b16 <mixer_update_slot+0x1ba>
			{
				PROFILE("mixer_update_slot() update history begin");
 8016a44:	bf00      	nop

				Packet *p = mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)];
 8016a46:	4b7f      	ldr	r3, [pc, #508]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f003 0303 	and.w	r3, r3, #3
 8016a4e:	4a80      	ldr	r2, [pc, #512]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	4413      	add	r3, r2
 8016a54:	685b      	ldr	r3, [r3, #4]
 8016a56:	657b      	str	r3, [r7, #84]	; 0x54

				uint8_t  		sender_id   = p->sender_id;
 8016a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a5a:	799b      	ldrb	r3, [r3, #6]
 8016a5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				#if MX_COORDINATED_TX
					uint16_t	slot_number = p->slot_number;
 8016a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a62:	791a      	ldrb	r2, [r3, #4]
 8016a64:	795b      	ldrb	r3, [r3, #5]
 8016a66:	021b      	lsls	r3, r3, #8
 8016a68:	4313      	orrs	r3, r2
 8016a6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
								flags		= p->flags;
 8016a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a70:	79db      	ldrb	r3, [r3, #7]
 8016a72:	703b      	strb	r3, [r7, #0]
				#endif

				if (sender_id >= chirp_config.mx_num_nodes)
 8016a74:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016a78:	b29a      	uxth	r2, r3
 8016a7a:	4b76      	ldr	r3, [pc, #472]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016a7c:	881b      	ldrh	r3, [r3, #0]
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d305      	bcc.n	8016a90 <mixer_update_slot+0x134>
				{
					// don't do much here, it is handled in Rx processing
					rx_queue_num_read_2++;
 8016a84:	4b6f      	ldr	r3, [pc, #444]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	4a6e      	ldr	r2, [pc, #440]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016a8c:	6013      	str	r3, [r2, #0]
					continue;
 8016a8e:	e042      	b.n	8016b16 <mixer_update_slot+0x1ba>
				}

				#if INFO_VECTOR_QUEUE
					// TP TODO:
					// gpi_memcpy_dma_inline((uint8_t *)&(mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)]->packet_chunk[chirp_config.coding_vector.pos]), (uint8_t *)&(mx.code_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.info_queue)]->vector[0]), chirp_config.coding_vector.len);
					gpi_memcpy_dma_inline((uint8_t *)&(mx.rx_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.rx_queue)]->packet_chunk[chirp_config.info_vector.pos]), (uint8_t *)&(mx.info_queue[rx_queue_num_read_2 % NUM_ELEMENTS(mx.info_queue)]->vector[0]), chirp_config.info_vector.len);
 8016a90:	4b6c      	ldr	r3, [pc, #432]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	f003 0303 	and.w	r3, r3, #3
 8016a98:	4a6d      	ldr	r2, [pc, #436]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	4413      	add	r3, r2
 8016a9e:	685a      	ldr	r2, [r3, #4]
 8016aa0:	4b6c      	ldr	r3, [pc, #432]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016aa2:	7a9b      	ldrb	r3, [r3, #10]
 8016aa4:	3308      	adds	r3, #8
 8016aa6:	441a      	add	r2, r3
 8016aa8:	4b66      	ldr	r3, [pc, #408]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	f003 0303 	and.w	r3, r3, #3
 8016ab0:	4967      	ldr	r1, [pc, #412]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016ab2:	3308      	adds	r3, #8
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	440b      	add	r3, r1
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	4619      	mov	r1, r3
 8016abc:	4b65      	ldr	r3, [pc, #404]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016abe:	7adb      	ldrb	r3, [r3, #11]
 8016ac0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016ac2:	64b9      	str	r1, [r7, #72]	; 0x48
 8016ac4:	647b      	str	r3, [r7, #68]	; 0x44
	__builtin_memcpy(dest, src, size);
 8016ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016aca:	4610      	mov	r0, r2
 8016acc:	4619      	mov	r1, r3
 8016ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	f00a ff9b 	bl	8021a0c <memcpy>
				#endif

				#if MX_REQUEST
					mx_update_request(p);
 8016ad6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016ad8:	f002 fa2c 	bl	8018f34 <mx_update_request>

				// NOTE: since the current thread has higher priority than Rx packet processing,
				// we should never see an overflow here. Nevertheless we test it for safety. If
				// it would happen we would lose some history updates which is not very critical.
				// In addition request data may get hurt which again is not such critical.
				if (mx.rx_queue_num_writing - rx_queue_num_read_2 > NUM_ELEMENTS(mx.rx_queue))
 8016adc:	4b5c      	ldr	r3, [pc, #368]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016ae0:	4b58      	ldr	r3, [pc, #352]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	1ad3      	subs	r3, r2, r3
 8016ae6:	2b04      	cmp	r3, #4
 8016ae8:	d905      	bls.n	8016af6 <mixer_update_slot+0x19a>
				{
					GPI_TRACE_MSG(TRACE_WARNING, "WARNING: rx queue num_read_2 overflow -> check program, should not happen");
 8016aea:	bf00      	nop
					rx_queue_num_read_2 = mx.rx_queue_num_written;
 8016aec:	4b58      	ldr	r3, [pc, #352]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016af0:	4a54      	ldr	r2, [pc, #336]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016af2:	6013      	str	r3, [r2, #0]
					continue;
 8016af4:	e00f      	b.n	8016b16 <mixer_update_slot+0x1ba>
				}
				else rx_queue_num_read_2++;
 8016af6:	4b53      	ldr	r3, [pc, #332]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	3301      	adds	r3, #1
 8016afc:	4a51      	ldr	r2, [pc, #324]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016afe:	6013      	str	r3, [r2, #0]

				#if MX_COORDINATED_TX
					mx_update_history(sender_id, flags, slot_number);
 8016b00:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8016b0a:	7839      	ldrb	r1, [r7, #0]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7ff f9fd 	bl	8015f0c <mx_update_history>
					GPI_TRACE_MSG(TRACE_INFO, "node %u history update", sender_id);
 8016b12:	bf00      	nop
				#endif

				PROFILE("mixer_update_slot() update history end");
 8016b14:	bf00      	nop
			while (rx_queue_num_read_2 != mx.rx_queue_num_written)
 8016b16:	4b4e      	ldr	r3, [pc, #312]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b1a:	4b4a      	ldr	r3, [pc, #296]	; (8016c44 <mixer_update_slot+0x2e8>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d190      	bne.n	8016a44 <mixer_update_slot+0xe8>
			}

		#endif

		PROFILE("mixer_update_slot() tx decision begin");
 8016b22:	bf00      	nop

		// decide what to do in next slot
		do {
			// don't TX as long as we have no data (i.e. we are not initiated)
			if (mx.rank < 1)
 8016b24:	4b4a      	ldr	r3, [pc, #296]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016b26:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	f000 845a 	beq.w	80173e4 <mixer_update_slot+0xa88>
					PT_EXIT(pt);
				}
			#endif

			#if MX_COORDINATED_TX
				uint16_t	density = 1 + mx_present_head->mx_num_nodes + mx_finished_head->mx_num_nodes;
 8016b30:	4b4a      	ldr	r3, [pc, #296]	; (8016c5c <mixer_update_slot+0x300>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	885a      	ldrh	r2, [r3, #2]
 8016b36:	4b4a      	ldr	r3, [pc, #296]	; (8016c60 <mixer_update_slot+0x304>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	885b      	ldrh	r3, [r3, #2]
 8016b3c:	4413      	add	r3, r2
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	3301      	adds	r3, #1
 8016b42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
				// printf("d:%d\n", density);
				assert_reset(density < 256);
 8016b46:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016b4a:	2bff      	cmp	r3, #255	; 0xff
 8016b4c:	d910      	bls.n	8016b70 <mixer_update_slot+0x214>
 8016b4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016b52:	2bff      	cmp	r3, #255	; 0xff
 8016b54:	d801      	bhi.n	8016b5a <mixer_update_slot+0x1fe>
 8016b56:	2301      	movs	r3, #1
 8016b58:	e000      	b.n	8016b5c <mixer_update_slot+0x200>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f00b fd6d 	bl	802263c <iprintf>
 8016b62:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8016b66:	2bff      	cmp	r3, #255	; 0xff
 8016b68:	d902      	bls.n	8016b70 <mixer_update_slot+0x214>
  __ASM volatile ("cpsid f" : : : "memory");
 8016b6a:	b671      	cpsid	f
 8016b6c:	f7ff faa0 	bl	80160b0 <NVIC_SystemReset>
			#endif

			#if MX_REQUEST
				uint16_t __attribute__((unused)) relative_rank = 0;
 8016b70:	2300      	movs	r3, #0
 8016b72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			#endif
			int_fast8_t		is_helper = 0;
 8016b76:	2300      	movs	r3, #0
 8016b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			assert_reset(chirp_config.mx_num_nodes < 256);
 8016b7c:	4b35      	ldr	r3, [pc, #212]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016b7e:	881b      	ldrh	r3, [r3, #0]
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	2bff      	cmp	r3, #255	; 0xff
 8016b84:	d912      	bls.n	8016bac <mixer_update_slot+0x250>
 8016b86:	4b33      	ldr	r3, [pc, #204]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016b88:	881b      	ldrh	r3, [r3, #0]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	2bff      	cmp	r3, #255	; 0xff
 8016b8e:	d801      	bhi.n	8016b94 <mixer_update_slot+0x238>
 8016b90:	2301      	movs	r3, #1
 8016b92:	e000      	b.n	8016b96 <mixer_update_slot+0x23a>
 8016b94:	2300      	movs	r3, #0
 8016b96:	4618      	mov	r0, r3
 8016b98:	f00b fd50 	bl	802263c <iprintf>
 8016b9c:	4b2d      	ldr	r3, [pc, #180]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016b9e:	881b      	ldrh	r3, [r3, #0]
 8016ba0:	b29b      	uxth	r3, r3
 8016ba2:	2bff      	cmp	r3, #255	; 0xff
 8016ba4:	d902      	bls.n	8016bac <mixer_update_slot+0x250>
 8016ba6:	b671      	cpsid	f
 8016ba8:	f7ff fa82 	bl	80160b0 <NVIC_SystemReset>
					// don't process requests during startup phase
					// attention: during startup phase, it is possible that DMA ISR decides to TX
					// (in case of flags.hasNextPayload) if mx.tx_packet is ready. Therefore it is
					// important that mx.tx_packet doesn't get invalidated on thread level during this
					// phase. The condition avoids that this could happen in case of row requests.
					if (mx.slot_number > chirp_config.mx_generation_size)
 8016bac:	4b28      	ldr	r3, [pc, #160]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016bae:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8016bb2:	b29a      	uxth	r2, r3
 8016bb4:	4b27      	ldr	r3, [pc, #156]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016bb6:	885b      	ldrh	r3, [r3, #2]
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	f240 82d1 	bls.w	8017162 <mixer_update_slot+0x806>
				#endif
			{
				PROFILE("mixer_update_slot() tx decision request help 1");
 8016bc0:	bf00      	nop

				uint_fast_t		help_bitmask = 0;
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				uint_fast_t		*pr;

				mx.request->help_index = 0;
 8016bc8:	4b21      	ldr	r3, [pc, #132]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016bca:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016bce:	2200      	movs	r2, #0
 8016bd0:	815a      	strh	r2, [r3, #10]

				// scan column requests
				// start with all_mask
				pr = (uint_fast_t *)&(mx.request->mask[chirp_config.column_all_mask.pos + 0]);
 8016bd2:	4b1f      	ldr	r3, [pc, #124]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016bd4:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016bd8:	4b1e      	ldr	r3, [pc, #120]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bde:	3306      	adds	r3, #6
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	4413      	add	r3, r2
 8016be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while (mx.request->column_any_pending)
 8016be8:	e0d0      	b.n	8016d8c <mixer_update_slot+0x430>
				{
					is_helper = -1;
 8016bea:	f04f 33ff 	mov.w	r3, #4294967295
 8016bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					uint_fast_t		*po = (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + 0]);
 8016bf2:	4b17      	ldr	r3, [pc, #92]	; (8016c50 <mixer_update_slot+0x2f4>)
 8016bf4:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016bf8:	4b16      	ldr	r3, [pc, #88]	; (8016c54 <mixer_update_slot+0x2f8>)
 8016bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016bfe:	3306      	adds	r3, #6
 8016c00:	009b      	lsls	r3, r3, #2
 8016c02:	4413      	add	r3, r2
 8016c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					uint_fast_t		x;

					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016c0c:	1d1a      	adds	r2, r3, #4
 8016c0e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c18:	e03c      	b.n	8016c94 <mixer_update_slot+0x338>
					{
						if (!x)
 8016c1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d120      	bne.n	8016c64 <mixer_update_slot+0x308>
						{
							x = *pr++;		// ATTENTION: dirty in the sense of access violation
 8016c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016c26:	1d1a      	adds	r2, r3, #4
 8016c28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							po++;
 8016c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016c36:	3304      	adds	r3, #4
 8016c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							continue;
 8016c3c:	e02a      	b.n	8016c94 <mixer_update_slot+0x338>
 8016c3e:	bf00      	nop
 8016c40:	20001e28 	.word	0x20001e28
 8016c44:	20000474 	.word	0x20000474
 8016c48:	20000478 	.word	0x20000478
 8016c4c:	2000047a 	.word	0x2000047a
 8016c50:	200014f0 	.word	0x200014f0
 8016c54:	20001430 	.word	0x20001430
 8016c58:	08025c88 	.word	0x08025c88
 8016c5c:	20000cc4 	.word	0x20000cc4
 8016c60:	20000ce0 	.word	0x20000ce0
							#error __BYTE_ORDER__ is invalid
						#endif

						// isolate first set bit
						#if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
							help_bitmask = x & -x;			// isolate LSB
 8016c64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016c68:	425b      	negs	r3, r3
 8016c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016c6e:	4013      	ands	r3, r2
 8016c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#else
							#error TODO						// isolate MSB
						#endif

						// if we can help: exit loop
						if (!(*po & help_bitmask))
 8016c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016c78:	681a      	ldr	r2, [r3, #0]
 8016c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c7e:	4013      	ands	r3, r2
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d01a      	beq.n	8016cba <mixer_update_slot+0x35e>
							break;

						// else clear bit in x
						x &= ~help_bitmask;
 8016c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c88:	43db      	mvns	r3, r3
 8016c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016c8e:	4013      	ands	r3, r2
 8016c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016c94:	4bc2      	ldr	r3, [pc, #776]	; (8016fa0 <mixer_update_slot+0x644>)
 8016c96:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016c9a:	4bc2      	ldr	r3, [pc, #776]	; (8016fa4 <mixer_update_slot+0x648>)
 8016c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	4bc0      	ldr	r3, [pc, #768]	; (8016fa4 <mixer_update_slot+0x648>)
 8016ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ca8:	440b      	add	r3, r1
 8016caa:	3306      	adds	r3, #6
 8016cac:	009b      	lsls	r3, r3, #2
 8016cae:	4413      	add	r3, r2
 8016cb0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d3b0      	bcc.n	8016c1a <mixer_update_slot+0x2be>
 8016cb8:	e000      	b.n	8016cbc <mixer_update_slot+0x360>
							break;
 8016cba:	bf00      	nop
                    }

					// if we can help: continue below
					if (po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]))
 8016cbc:	4bb8      	ldr	r3, [pc, #736]	; (8016fa0 <mixer_update_slot+0x644>)
 8016cbe:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016cc2:	4bb8      	ldr	r3, [pc, #736]	; (8016fa4 <mixer_update_slot+0x648>)
 8016cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016cc8:	4619      	mov	r1, r3
 8016cca:	4bb6      	ldr	r3, [pc, #728]	; (8016fa4 <mixer_update_slot+0x648>)
 8016ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cd0:	440b      	add	r3, r1
 8016cd2:	3306      	adds	r3, #6
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	4413      	add	r3, r2
 8016cd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d232      	bcs.n	8016d46 <mixer_update_slot+0x3ea>
					{
						// NOTE: help_bitmask has only one bit set,
						// so it doesn't matter if we use get_msb() or get_lsb()
						mx.request->help_index = 1 + ARRAY_INDEX_SIZE_ADD(po, &(mx.request->mask[chirp_config.my_row_mask.pos]), sizeof(uint_fast_t) * chirp_config.my_row_mask.len) * sizeof(uint_fast_t) * 8 + gpi_get_msb(help_bitmask);
 8016ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016ce4:	4aae      	ldr	r2, [pc, #696]	; (8016fa0 <mixer_update_slot+0x644>)
 8016ce6:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016cea:	4aae      	ldr	r2, [pc, #696]	; (8016fa4 <mixer_update_slot+0x648>)
 8016cec:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8016cf0:	3206      	adds	r2, #6
 8016cf2:	0092      	lsls	r2, r2, #2
 8016cf4:	440a      	add	r2, r1
 8016cf6:	1a9a      	subs	r2, r3, r2
 8016cf8:	4baa      	ldr	r3, [pc, #680]	; (8016fa4 <mixer_update_slot+0x648>)
 8016cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	015b      	lsls	r3, r3, #5
 8016d08:	b29a      	uxth	r2, r3
 8016d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016d0e:	643b      	str	r3, [r7, #64]	; 0x40
	asm
 8016d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d12:	fab3 f383 	clz	r3, r3
 8016d16:	f1c3 031f 	rsb	r3, r3, #31
 8016d1a:	461c      	mov	r4, r3
	return y;
 8016d1c:	4623      	mov	r3, r4
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	4413      	add	r3, r2
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	3301      	adds	r3, #1
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	4b9d      	ldr	r3, [pc, #628]	; (8016fa0 <mixer_update_slot+0x644>)
 8016d2a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016d2e:	b212      	sxth	r2, r2
 8016d30:	815a      	strh	r2, [r3, #10]
						mx.request->help_bitmask = help_bitmask;
 8016d32:	4b9b      	ldr	r3, [pc, #620]	; (8016fa0 <mixer_update_slot+0x644>)
 8016d34:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016d38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016d3c:	60da      	str	r2, [r3, #12]

						is_helper = 1;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						break;
 8016d44:	e02b      	b.n	8016d9e <mixer_update_slot+0x442>
                    }

					// break after scanning any_mask
					// NOTE: -2 matches position of pr
					if (ARRAY_INDEX_SIZE_ADD(pr, &(mx.request->mask[chirp_config.column_any_mask.pos]), sizeof(uint_fast_t) * chirp_config.column_any_mask.len) - 2 < chirp_config.column_all_mask.len)
 8016d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016d4a:	4a95      	ldr	r2, [pc, #596]	; (8016fa0 <mixer_update_slot+0x644>)
 8016d4c:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016d50:	4a94      	ldr	r2, [pc, #592]	; (8016fa4 <mixer_update_slot+0x648>)
 8016d52:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8016d56:	3206      	adds	r2, #6
 8016d58:	0092      	lsls	r2, r2, #2
 8016d5a:	440a      	add	r2, r1
 8016d5c:	1a9a      	subs	r2, r3, r2
 8016d5e:	4b91      	ldr	r3, [pc, #580]	; (8016fa4 <mixer_update_slot+0x648>)
 8016d60:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016d64:	009b      	lsls	r3, r3, #2
 8016d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d6a:	3b02      	subs	r3, #2
 8016d6c:	4a8d      	ldr	r2, [pc, #564]	; (8016fa4 <mixer_update_slot+0x648>)
 8016d6e:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8016d72:	4293      	cmp	r3, r2
 8016d74:	d312      	bcc.n	8016d9c <mixer_update_slot+0x440>
						break;

					// scan any_mask (after scanning all_mask)
					pr = (uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos + 0]);
 8016d76:	4b8a      	ldr	r3, [pc, #552]	; (8016fa0 <mixer_update_slot+0x644>)
 8016d78:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016d7c:	4b89      	ldr	r3, [pc, #548]	; (8016fa4 <mixer_update_slot+0x648>)
 8016d7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016d82:	3306      	adds	r3, #6
 8016d84:	009b      	lsls	r3, r3, #2
 8016d86:	4413      	add	r3, r2
 8016d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while (mx.request->column_any_pending)
 8016d8c:	4b84      	ldr	r3, [pc, #528]	; (8016fa0 <mixer_update_slot+0x644>)
 8016d8e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f47f af28 	bne.w	8016bea <mixer_update_slot+0x28e>
 8016d9a:	e000      	b.n	8016d9e <mixer_update_slot+0x442>
						break;
 8016d9c:	bf00      	nop
                }

				// scan row requests
				// start with all_mask
				pr = (uint_fast_t *)&(mx.request->mask[chirp_config.row_all_mask.pos + 0]);
 8016d9e:	4b80      	ldr	r3, [pc, #512]	; (8016fa0 <mixer_update_slot+0x644>)
 8016da0:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016da4:	4b7f      	ldr	r3, [pc, #508]	; (8016fa4 <mixer_update_slot+0x648>)
 8016da6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016daa:	3306      	adds	r3, #6
 8016dac:	009b      	lsls	r3, r3, #2
 8016dae:	4413      	add	r3, r2
 8016db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while ((is_helper <= 0) && (mx.request->row_any_pending))
 8016db4:	e0e6      	b.n	8016f84 <mixer_update_slot+0x628>
				{
					is_helper = -1;
 8016db6:	f04f 33ff 	mov.w	r3, #4294967295
 8016dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					uint_fast_t		x;

					uint_fast_t		*po = (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + 0]);
 8016dbe:	4b78      	ldr	r3, [pc, #480]	; (8016fa0 <mixer_update_slot+0x644>)
 8016dc0:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016dc4:	4b77      	ldr	r3, [pc, #476]	; (8016fa4 <mixer_update_slot+0x648>)
 8016dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016dca:	3306      	adds	r3, #6
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	4413      	add	r3, r2
 8016dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016dd8:	1d1a      	adds	r2, r3, #4
 8016dda:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016de4:	e029      	b.n	8016e3a <mixer_update_slot+0x4de>
					{
						if (!x)
 8016de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d10d      	bne.n	8016e0a <mixer_update_slot+0x4ae>
						{
							x = *pr++;		// ATTENTION: dirty in the sense of access violation
 8016dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016df2:	1d1a      	adds	r2, r3, #4
 8016df4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
							po++;
 8016dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e02:	3304      	adds	r3, #4
 8016e04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							continue;
 8016e08:	e017      	b.n	8016e3a <mixer_update_slot+0x4de>
							#error __BYTE_ORDER__ is invalid
						#endif

						// isolate first set bit
						#if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
							help_bitmask = x & -x;			// isolate LSB
 8016e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e0e:	425b      	negs	r3, r3
 8016e10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016e14:	4013      	ands	r3, r2
 8016e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						#else
							#error TODO						// isolate MSB
						#endif

						// if we can help: exit loop
						if (!(*po & help_bitmask))
 8016e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e24:	4013      	ands	r3, r2
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d01a      	beq.n	8016e60 <mixer_update_slot+0x504>
							break;

						// else clear bit in x
						x &= ~help_bitmask;
 8016e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e2e:	43db      	mvns	r3, r3
 8016e30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016e34:	4013      	ands	r3, r2
 8016e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for (x = *pr++; po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]);)
 8016e3a:	4b59      	ldr	r3, [pc, #356]	; (8016fa0 <mixer_update_slot+0x644>)
 8016e3c:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016e40:	4b58      	ldr	r3, [pc, #352]	; (8016fa4 <mixer_update_slot+0x648>)
 8016e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e46:	4619      	mov	r1, r3
 8016e48:	4b56      	ldr	r3, [pc, #344]	; (8016fa4 <mixer_update_slot+0x648>)
 8016e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016e4e:	440b      	add	r3, r1
 8016e50:	3306      	adds	r3, #6
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	4413      	add	r3, r2
 8016e56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d3c3      	bcc.n	8016de6 <mixer_update_slot+0x48a>
 8016e5e:	e000      	b.n	8016e62 <mixer_update_slot+0x506>
							break;
 8016e60:	bf00      	nop
                    }

					// if we can help: continue below
					if (po < (uint_fast_t *)&(mx.request->mask[chirp_config.my_row_mask.pos + chirp_config.my_row_mask.len]))
 8016e62:	4b4f      	ldr	r3, [pc, #316]	; (8016fa0 <mixer_update_slot+0x644>)
 8016e64:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016e68:	4b4e      	ldr	r3, [pc, #312]	; (8016fa4 <mixer_update_slot+0x648>)
 8016e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4b4c      	ldr	r3, [pc, #304]	; (8016fa4 <mixer_update_slot+0x648>)
 8016e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016e76:	440b      	add	r3, r1
 8016e78:	3306      	adds	r3, #6
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	4413      	add	r3, r2
 8016e7e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d25b      	bcs.n	8016f3e <mixer_update_slot+0x5e2>
					{
						// NOTE: help_bitmask has only one bit set,
						// so it doesn't matter if we use get_msb() or get_lsb()

						int16_t help_index = ARRAY_INDEX_SIZE_ADD(po, &(mx.request->mask[chirp_config.my_row_mask.pos]), sizeof(uint_fast_t) * chirp_config.my_row_mask.len) * sizeof(uint_fast_t) * 8 + gpi_get_msb(help_bitmask);
 8016e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e8a:	4a45      	ldr	r2, [pc, #276]	; (8016fa0 <mixer_update_slot+0x644>)
 8016e8c:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016e90:	4a44      	ldr	r2, [pc, #272]	; (8016fa4 <mixer_update_slot+0x648>)
 8016e92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8016e96:	3206      	adds	r2, #6
 8016e98:	0092      	lsls	r2, r2, #2
 8016e9a:	440a      	add	r2, r1
 8016e9c:	1a9a      	subs	r2, r3, r2
 8016e9e:	4b41      	ldr	r3, [pc, #260]	; (8016fa4 <mixer_update_slot+0x648>)
 8016ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8016eaa:	b29b      	uxth	r3, r3
 8016eac:	015b      	lsls	r3, r3, #5
 8016eae:	b29a      	uxth	r2, r3
 8016eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	asm
 8016eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb8:	fab3 f383 	clz	r3, r3
 8016ebc:	f1c3 031f 	rsb	r3, r3, #31
 8016ec0:	461c      	mov	r4, r3
	return y;
 8016ec2:	4623      	mov	r3, r4
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	4413      	add	r3, r2
 8016ec8:	b29b      	uxth	r3, r3
 8016eca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						mx.request->help_index = -(1 + help_index);
 8016ece:	4b34      	ldr	r3, [pc, #208]	; (8016fa0 <mixer_update_slot+0x644>)
 8016ed0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016ed8:	43d2      	mvns	r2, r2
 8016eda:	b212      	sxth	r2, r2
 8016edc:	815a      	strh	r2, [r3, #10]
						mx.request->help_bitmask = help_bitmask;
 8016ede:	4b30      	ldr	r3, [pc, #192]	; (8016fa0 <mixer_update_slot+0x644>)
 8016ee0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016ee4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016ee8:	60da      	str	r2, [r3, #12]

						is_helper = 1;
 8016eea:	2301      	movs	r3, #1
 8016eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

						// invalidate tx packet if it is not able to help
						// NOTE: it is rebuild in this case
						// NOTE: a side effect of this is that the grid timer ISR doesn't
						// need to check the packet before sideloading the helper row
						if (((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 8016ef0:	4b2b      	ldr	r3, [pc, #172]	; (8016fa0 <mixer_update_slot+0x644>)
 8016ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ef4:	4a2b      	ldr	r2, [pc, #172]	; (8016fa4 <mixer_update_slot+0x648>)
 8016ef6:	7b92      	ldrb	r2, [r2, #14]
 8016ef8:	4413      	add	r3, r2
 8016efa:	7a1b      	ldrb	r3, [r3, #8]
 8016efc:	b25b      	sxtb	r3, r3
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	da4c      	bge.n	8016f9c <mixer_update_slot+0x640>
						{
							if (mx_get_leading_index(&(mx.tx_packet->packet_chunk[chirp_config.coding_vector.pos])) <= help_index)
 8016f02:	4b27      	ldr	r3, [pc, #156]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016f06:	4b27      	ldr	r3, [pc, #156]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f08:	799b      	ldrb	r3, [r3, #6]
 8016f0a:	3308      	adds	r3, #8
 8016f0c:	4413      	add	r3, r2
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7f7 fa3e 	bl	800e390 <mx_get_leading_index>
 8016f14:	4602      	mov	r2, r0
 8016f16:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	dc3e      	bgt.n	8016f9c <mixer_update_slot+0x640>
							{
								mx.tx_packet->packet_chunk[chirp_config.rand.pos] &= PACKET_IS_READY_MASK;
 8016f1e:	4b20      	ldr	r3, [pc, #128]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f22:	4a20      	ldr	r2, [pc, #128]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f24:	7b92      	ldrb	r2, [r2, #14]
 8016f26:	4413      	add	r3, r2
 8016f28:	7a1a      	ldrb	r2, [r3, #8]
 8016f2a:	4b1d      	ldr	r3, [pc, #116]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f2e:	491d      	ldr	r1, [pc, #116]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f30:	7b89      	ldrb	r1, [r1, #14]
 8016f32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016f36:	b2d2      	uxtb	r2, r2
 8016f38:	440b      	add	r3, r1
 8016f3a:	721a      	strb	r2, [r3, #8]
							}
                        }

						break;
 8016f3c:	e02e      	b.n	8016f9c <mixer_update_slot+0x640>
                    }

					// break after scanning any_mask
					// NOTE: -2 matches position of pr
					if (ARRAY_INDEX_SIZE_ADD(pr, &(mx.request->mask[chirp_config.row_any_mask.pos]), sizeof(uint_fast_t) * chirp_config.row_any_mask.len) - 2 < chirp_config.row_any_mask.len)
 8016f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016f42:	4a17      	ldr	r2, [pc, #92]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f44:	f8d2 1870 	ldr.w	r1, [r2, #2160]	; 0x870
 8016f48:	4a16      	ldr	r2, [pc, #88]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f4a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8016f4e:	3206      	adds	r2, #6
 8016f50:	0092      	lsls	r2, r2, #2
 8016f52:	440a      	add	r2, r1
 8016f54:	1a9a      	subs	r2, r3, r2
 8016f56:	4b13      	ldr	r3, [pc, #76]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016f5c:	009b      	lsls	r3, r3, #2
 8016f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f62:	3b02      	subs	r3, #2
 8016f64:	4a0f      	ldr	r2, [pc, #60]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f66:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8016f6a:	4293      	cmp	r3, r2
 8016f6c:	d31c      	bcc.n	8016fa8 <mixer_update_slot+0x64c>
						break;

					// scan any_mask (after scanning all_mask)
					pr = &(mx.request->mask[chirp_config.row_any_mask.pos]);
 8016f6e:	4b0c      	ldr	r3, [pc, #48]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f70:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8016f74:	4b0b      	ldr	r3, [pc, #44]	; (8016fa4 <mixer_update_slot+0x648>)
 8016f76:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8016f7a:	3306      	adds	r3, #6
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	4413      	add	r3, r2
 8016f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				while ((is_helper <= 0) && (mx.request->row_any_pending))
 8016f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	dc0e      	bgt.n	8016faa <mixer_update_slot+0x64e>
 8016f8c:	4b04      	ldr	r3, [pc, #16]	; (8016fa0 <mixer_update_slot+0x644>)
 8016f8e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	f47f af0e 	bne.w	8016db6 <mixer_update_slot+0x45a>
                }

				PROFILE("mixer_update_slot() tx decision request help 2");
 8016f9a:	e006      	b.n	8016faa <mixer_update_slot+0x64e>
						break;
 8016f9c:	bf00      	nop
 8016f9e:	e004      	b.n	8016faa <mixer_update_slot+0x64e>
 8016fa0:	200014f0 	.word	0x200014f0
 8016fa4:	20001430 	.word	0x20001430
						break;
 8016fa8:	bf00      	nop
				PROFILE("mixer_update_slot() tx decision request help 2");
 8016faa:	bf00      	nop

				if (is_helper != 0)
 8016fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	f000 80d6 	beq.w	8017162 <mixer_update_slot+0x806>
				{
					assert_reset(chirp_config.mx_num_nodes < 256);
 8016fb6:	4bbd      	ldr	r3, [pc, #756]	; (80172ac <mixer_update_slot+0x950>)
 8016fb8:	881b      	ldrh	r3, [r3, #0]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	2bff      	cmp	r3, #255	; 0xff
 8016fbe:	d912      	bls.n	8016fe6 <mixer_update_slot+0x68a>
 8016fc0:	4bba      	ldr	r3, [pc, #744]	; (80172ac <mixer_update_slot+0x950>)
 8016fc2:	881b      	ldrh	r3, [r3, #0]
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	2bff      	cmp	r3, #255	; 0xff
 8016fc8:	d801      	bhi.n	8016fce <mixer_update_slot+0x672>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	e000      	b.n	8016fd0 <mixer_update_slot+0x674>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f00b fb33 	bl	802263c <iprintf>
 8016fd6:	4bb5      	ldr	r3, [pc, #724]	; (80172ac <mixer_update_slot+0x950>)
 8016fd8:	881b      	ldrh	r3, [r3, #0]
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	2bff      	cmp	r3, #255	; 0xff
 8016fde:	d902      	bls.n	8016fe6 <mixer_update_slot+0x68a>
 8016fe0:	b671      	cpsid	f
 8016fe2:	f7ff f865 	bl	80160b0 <NVIC_SystemReset>

					PROFILE("mixer_update_slot() tx decision request help 3");
 8016fe6:	bf00      	nop

					// relative rank = rank / MX_GENERATION_SIZE,
					// stored in 0.16 signed fixed point format
					relative_rank = gpi_mulu_16x16(mx.rank, 0xffff / chirp_config.mx_generation_size);
 8016fe8:	4bb1      	ldr	r3, [pc, #708]	; (80172b0 <mixer_update_slot+0x954>)
 8016fea:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8016fee:	4baf      	ldr	r3, [pc, #700]	; (80172ac <mixer_update_slot+0x950>)
 8016ff0:	885b      	ldrh	r3, [r3, #2]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	4619      	mov	r1, r3
 8016ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ffa:	fb93 f3f1 	sdiv	r3, r3, r1
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017002:	873b      	strh	r3, [r7, #56]	; 0x38
	return (uint32_t)a * (uint32_t)b;
 8017004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017006:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017008:	fb02 f303 	mul.w	r3, r2, r3
 801700c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

					// n = number of potential helpers
					uint_fast8_t n = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

					// all full rank neighbors can help
					#if MX_COORDINATED_TX
						n += mx_finished_head->mx_num_nodes;
 8017016:	4ba7      	ldr	r3, [pc, #668]	; (80172b4 <mixer_update_slot+0x958>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	885b      	ldrh	r3, [r3, #2]
 801701c:	461a      	mov	r2, r3
 801701e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017022:	4413      	add	r3, r2
 8017024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						GPI_TRACE_MSG(TRACE_VERBOSE, "n_finished: %" PRIuFAST8, n);
 8017028:	bf00      	nop
					#endif

					// if I can help
					if (is_helper >= 0)
 801702a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801702e:	2b00      	cmp	r3, #0
 8017030:	db41      	blt.n	80170b6 <mixer_update_slot+0x75a>
					{
						// add me
						n++;
 8017032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017036:	3301      	adds	r3, #1
 8017038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						GPI_TRACE_MSG(TRACE_VERBOSE, "+me: %" PRIuFAST8, n);
 801703c:	bf00      	nop
							n += 1;
						#elif MX_REQUEST_HEURISTIC == 1
							n += (UINT16_C(3) * mx_present_head->mx_num_nodes + 2) / 4;
						#elif MX_REQUEST_HEURISTIC == 2

							uint_fast16_t i = (ABS(mx.request->help_index) - 1) / (8 * sizeof(uint_fast_t));
 801703e:	4b9c      	ldr	r3, [pc, #624]	; (80172b0 <mixer_update_slot+0x954>)
 8017040:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017044:	895b      	ldrh	r3, [r3, #10]
 8017046:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801704a:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801704e:	2b00      	cmp	r3, #0
 8017050:	bfb8      	it	lt
 8017052:	425b      	neglt	r3, r3
 8017054:	3b01      	subs	r3, #1
 8017056:	095b      	lsrs	r3, r3, #5
 8017058:	673b      	str	r3, [r7, #112]	; 0x70

							GPI_TRACE_MSG(TRACE_VERBOSE, "i: %" PRIdFAST16", m: %" PRIxFAST, i, help_bitmask);
 801705a:	bf00      	nop

							Node *p;
							for (p = mx.history[mx_present_head->next]; p != mx_present_head; p = mx.history[p->next])
 801705c:	4b96      	ldr	r3, [pc, #600]	; (80172b8 <mixer_update_slot+0x95c>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	785b      	ldrb	r3, [r3, #1]
 8017062:	4a93      	ldr	r2, [pc, #588]	; (80172b0 <mixer_update_slot+0x954>)
 8017064:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8017068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801706c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017070:	e01a      	b.n	80170a8 <mixer_update_slot+0x74c>
							{
								if (!(p->row_map_chunk[i] & help_bitmask))
 8017072:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017078:	009b      	lsls	r3, r3, #2
 801707a:	4413      	add	r3, r2
 801707c:	685a      	ldr	r2, [r3, #4]
 801707e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017082:	4013      	ands	r3, r2
 8017084:	2b00      	cmp	r3, #0
 8017086:	d105      	bne.n	8017094 <mixer_update_slot+0x738>
								{
									n++;
 8017088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801708c:	3301      	adds	r3, #1
 801708e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
									GPI_TRACE_MSG(TRACE_VERBOSE, "+node %u: %" PRIuFAST8, (int)ARRAY_INDEX_SIZE_ADD(p, &(mx.history[0]->prev), chirp_config.history_len_8), n);
 8017092:	bf00      	nop
							for (p = mx.history[mx_present_head->next]; p != mx_present_head; p = mx.history[p->next])
 8017094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017098:	785b      	ldrb	r3, [r3, #1]
 801709a:	4a85      	ldr	r2, [pc, #532]	; (80172b0 <mixer_update_slot+0x954>)
 801709c:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 80170a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80170a8:	4b83      	ldr	r3, [pc, #524]	; (80172b8 <mixer_update_slot+0x95c>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d1de      	bne.n	8017072 <mixer_update_slot+0x716>
						// i.e., probably the majority considers the same index; and if I can(not)
						// help than probably they can(not). estimate the majority as 3/4 of us
						// (with rounding)
					}

					GPI_TRACE_MSG(TRACE_VERBOSE, "+heuristic: %" PRIuFAST8, n);
 80170b4:	e00d      	b.n	80170d2 <mixer_update_slot+0x776>
							n += (mx_present_head->mx_num_nodes + 2) / 4;
 80170b6:	4b80      	ldr	r3, [pc, #512]	; (80172b8 <mixer_update_slot+0x95c>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	885b      	ldrh	r3, [r3, #2]
 80170bc:	3302      	adds	r3, #2
 80170be:	2b00      	cmp	r3, #0
 80170c0:	da00      	bge.n	80170c4 <mixer_update_slot+0x768>
 80170c2:	3303      	adds	r3, #3
 80170c4:	109b      	asrs	r3, r3, #2
 80170c6:	461a      	mov	r2, r3
 80170c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80170cc:	4413      	add	r3, r2
 80170ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					GPI_TRACE_MSG(TRACE_VERBOSE, "+heuristic: %" PRIuFAST8, n);
 80170d2:	bf00      	nop

					if (is_helper > 0)
 80170d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80170d8:	2b00      	cmp	r3, #0
 80170da:	dd1c      	ble.n	8017116 <mixer_update_slot+0x7ba>
					{
						// p = 1 / n
						if (n < 2)
 80170dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80170e0:	2b01      	cmp	r3, #1
 80170e2:	d804      	bhi.n	80170ee <mixer_update_slot+0x792>
							p = UINT16_MAX;
 80170e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170e8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					// 0			1					0				1 / (d + 1), evtl. incl. aging
					// +			p+ * rr + (1 - rr)	p+ * rr			p+ = 1 / n
					// -			p- * rr + (1 - rr)	p- * rr			p- = (1 / e) / (d - n)
					// (rr = relative rank, d = density, n = number of helpers, e = Euler's number)

					PROFILE("mixer_update_slot() tx decision request help 4");
 80170ec:	e037      	b.n	801715e <mixer_update_slot+0x802>
						else p = gpi_divu_16x8(UINT16_MAX, n, 0);
 80170ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170f8:	86fa      	strh	r2, [r7, #54]	; 0x36
 80170fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80170fe:	2300      	movs	r3, #0
 8017100:	633b      	str	r3, [r7, #48]	; 0x30
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 8017102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017104:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8017108:	fbb3 f3f2 	udiv	r3, r3, r2
 801710c:	461c      	mov	r4, r3
	return r;
 801710e:	b2a3      	uxth	r3, r4
 8017110:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 8017114:	e023      	b.n	801715e <mixer_update_slot+0x802>
							if ((density - n) < 2)
 8017116:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 801711a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801711e:	1ad3      	subs	r3, r2, r3
 8017120:	2b01      	cmp	r3, #1
 8017122:	d804      	bhi.n	801712e <mixer_update_slot+0x7d2>
								p = 24109;
 8017124:	f645 632d 	movw	r3, #24109	; 0x5e2d
 8017128:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 801712c:	e017      	b.n	801715e <mixer_update_slot+0x802>
							else p = gpi_divu_16x8(24109, density - n, 0);
 801712e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8017132:	b2da      	uxtb	r2, r3
 8017134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017138:	b2db      	uxtb	r3, r3
 801713a:	1ad3      	subs	r3, r2, r3
 801713c:	b2db      	uxtb	r3, r3
 801713e:	f645 622d 	movw	r2, #24109	; 0x5e2d
 8017142:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8017144:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8017148:	2300      	movs	r3, #0
 801714a:	62bb      	str	r3, [r7, #40]	; 0x28
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 801714c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801714e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8017152:	fbb3 f3f2 	udiv	r3, r3, r2
 8017156:	461c      	mov	r4, r3
	return r;
 8017158:	b2a3      	uxth	r3, r4
 801715a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					PROFILE("mixer_update_slot() tx decision request help 4");
 801715e:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "request: is_helper = %" PRIdFAST8", p = %" PRIu16
 8017160:	bf00      	nop
						is_helper, p, relative_rank, n, mx.request->help_index);
				}
			}
			#endif

			PROFILE("mixer_update_slot() tx decision coord");
 8017162:	bf00      	nop
				// NOTE: modulo/division is expensive -> do it more efficient:
				// Instead of dividing, we simply increment owner from slot to slot with manual
				// wrap-around. Some checks ensure that it also works if slot_number jumps (e.g.
				// because of resynchronization).

				uint16_t diff = slot_number - last_owner_update;
 8017164:	4b55      	ldr	r3, [pc, #340]	; (80172bc <mixer_update_slot+0x960>)
 8017166:	881b      	ldrh	r3, [r3, #0]
 8017168:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801716c:	1ad3      	subs	r3, r2, r3
 801716e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

				// limit number of potential loop iterations
				if (diff >= 8 * chirp_config.mx_num_nodes)
 8017172:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8017176:	4b4d      	ldr	r3, [pc, #308]	; (80172ac <mixer_update_slot+0x950>)
 8017178:	881b      	ldrh	r3, [r3, #0]
 801717a:	b29b      	uxth	r3, r3
 801717c:	00db      	lsls	r3, r3, #3
 801717e:	429a      	cmp	r2, r3
 8017180:	db15      	blt.n	80171ae <mixer_update_slot+0x852>
					owner = (slot_number + 1 - 1) % chirp_config.mx_num_nodes;
 8017182:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8017186:	4a49      	ldr	r2, [pc, #292]	; (80172ac <mixer_update_slot+0x950>)
 8017188:	8812      	ldrh	r2, [r2, #0]
 801718a:	b292      	uxth	r2, r2
 801718c:	fb93 f1f2 	sdiv	r1, r3, r2
 8017190:	fb02 f201 	mul.w	r2, r2, r1
 8017194:	1a9b      	subs	r3, r3, r2
 8017196:	b29a      	uxth	r2, r3
 8017198:	4b49      	ldr	r3, [pc, #292]	; (80172c0 <mixer_update_slot+0x964>)
 801719a:	801a      	strh	r2, [r3, #0]
 801719c:	e026      	b.n	80171ec <mixer_update_slot+0x890>
				else
				{
					// skip full wrap-around cycles
					while (diff >= chirp_config.mx_num_nodes)
						diff -= chirp_config.mx_num_nodes;
 801719e:	4b43      	ldr	r3, [pc, #268]	; (80172ac <mixer_update_slot+0x950>)
 80171a0:	881b      	ldrh	r3, [r3, #0]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80171a8:	1ad3      	subs	r3, r2, r3
 80171aa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
					while (diff >= chirp_config.mx_num_nodes)
 80171ae:	4b3f      	ldr	r3, [pc, #252]	; (80172ac <mixer_update_slot+0x950>)
 80171b0:	881b      	ldrh	r3, [r3, #0]
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d2f0      	bcs.n	801719e <mixer_update_slot+0x842>

					// update owner
					owner += diff;
 80171bc:	4b40      	ldr	r3, [pc, #256]	; (80172c0 <mixer_update_slot+0x964>)
 80171be:	881a      	ldrh	r2, [r3, #0]
 80171c0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80171c4:	4413      	add	r3, r2
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	4b3d      	ldr	r3, [pc, #244]	; (80172c0 <mixer_update_slot+0x964>)
 80171ca:	801a      	strh	r2, [r3, #0]
					if (owner >= chirp_config.mx_num_nodes)
 80171cc:	4b37      	ldr	r3, [pc, #220]	; (80172ac <mixer_update_slot+0x950>)
 80171ce:	881b      	ldrh	r3, [r3, #0]
 80171d0:	b29a      	uxth	r2, r3
 80171d2:	4b3b      	ldr	r3, [pc, #236]	; (80172c0 <mixer_update_slot+0x964>)
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d808      	bhi.n	80171ec <mixer_update_slot+0x890>
						owner -= chirp_config.mx_num_nodes;
 80171da:	4b39      	ldr	r3, [pc, #228]	; (80172c0 <mixer_update_slot+0x964>)
 80171dc:	881a      	ldrh	r2, [r3, #0]
 80171de:	4b33      	ldr	r3, [pc, #204]	; (80172ac <mixer_update_slot+0x950>)
 80171e0:	881b      	ldrh	r3, [r3, #0]
 80171e2:	b29b      	uxth	r3, r3
 80171e4:	1ad3      	subs	r3, r2, r3
 80171e6:	b29a      	uxth	r2, r3
 80171e8:	4b35      	ldr	r3, [pc, #212]	; (80172c0 <mixer_update_slot+0x964>)
 80171ea:	801a      	strh	r2, [r3, #0]
                }

				last_owner_update = slot_number;
 80171ec:	4a33      	ldr	r2, [pc, #204]	; (80172bc <mixer_update_slot+0x960>)
 80171ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80171f2:	8013      	strh	r3, [r2, #0]

				GPI_TRACE_MSG(TRACE_VERBOSE, "owner of slot %" PRIu16 ": %" PRIu16, slot_number + 1, owner);
 80171f4:	bf00      	nop

				// if my slot: TX
				if (owner == mx.tx_packet->sender_id)
 80171f6:	4b2e      	ldr	r3, [pc, #184]	; (80172b0 <mixer_update_slot+0x954>)
 80171f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171fa:	799b      	ldrb	r3, [r3, #6]
 80171fc:	b29a      	uxth	r2, r3
 80171fe:	4b30      	ldr	r3, [pc, #192]	; (80172c0 <mixer_update_slot+0x964>)
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	429a      	cmp	r2, r3
 8017204:	d11b      	bne.n	801723e <mixer_update_slot+0x8e2>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: my slot");
 8017206:	bf00      	nop

					#if MX_REQUEST
						// adapt tx probability if request pending
						// -> possibly place our slot at the disposal of other helpers
						// formula: p = p * rr + (1 - rr); p = 0.16, rr = 0.16
						if (is_helper < 0)
 8017208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801720c:	2b00      	cmp	r3, #0
 801720e:	da11      	bge.n	8017234 <mixer_update_slot+0x8d8>
 8017210:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017216:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801721a:	84bb      	strh	r3, [r7, #36]	; 0x24
	return (uint32_t)a * (uint32_t)b;
 801721c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801721e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017220:	fb02 f303 	mul.w	r3, r2, r3
							p = (gpi_mulu_16x16(p, relative_rank) >> 16) - relative_rank;
 8017224:	0c1b      	lsrs	r3, r3, #16
 8017226:	b29a      	uxth	r2, r3
 8017228:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						else
					#endif

					p = UINT16_MAX;
					break;
 8017232:	e0da      	b.n	80173ea <mixer_update_slot+0xa8e>
					p = UINT16_MAX;
 8017234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017238:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 801723c:	e0d5      	b.n	80173ea <mixer_update_slot+0xa8e>

			#endif

			// TX in last slot -> don't TX (except it is our slot)
			#if !MX_BENCHMARK_FULL_RANDOM_TX
			if (mx.events & BV(TX_READY))
 801723e:	4b1c      	ldr	r3, [pc, #112]	; (80172b0 <mixer_update_slot+0x954>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	f003 0304 	and.w	r3, r3, #4
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00e      	beq.n	8017268 <mixer_update_slot+0x90c>
			{
				// with one exception: if we did tx in slot 1 -- i.e. we are the initiator --
				// we also transmit in slot 2 because we know that no other node uses slot 2
				// (in best case they received the first packet in slot 1 and prepare their
				// first tx packet during slot 2)
				if (slot_number == 1)
 801724a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801724e:	2b01      	cmp	r3, #1
 8017250:	d105      	bne.n	801725e <mixer_update_slot+0x902>
				{
					p = UINT16_MAX;
 8017252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017256:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: initiator in slot 2");
 801725a:	bf00      	nop
					break;
 801725c:	e0c5      	b.n	80173ea <mixer_update_slot+0xa8e>
				}

				p = 0;
 801725e:	2300      	movs	r3, #0
 8017260:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: tx in previous slot");
 8017264:	bf00      	nop
				break;
 8017266:	e0c0      	b.n	80173ea <mixer_update_slot+0xa8e>

			#if MX_COORDINATED_TX

				// during start-up phase
				#if !MX_BENCHMARK_NO_COORDINATED_STARTUP
				if (slot_number < chirp_config.mx_generation_size)
 8017268:	4b10      	ldr	r3, [pc, #64]	; (80172ac <mixer_update_slot+0x950>)
 801726a:	885b      	ldrh	r3, [r3, #2]
 801726c:	b29b      	uxth	r3, r3
 801726e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8017272:	429a      	cmp	r2, r3
 8017274:	d240      	bcs.n	80172f8 <mixer_update_slot+0x99c>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: start-up phase");
 8017276:	bf00      	nop
					// }

					// if we are the owner of the next payload: TX
					// NOTE: in start-up phase, the slots are assigned to owners by node IDs
					// *and initial payloads* (i.e. slots can have two owners in this phase).
					if ((slot_number + 1 < chirp_config.mx_generation_size) && (0 == mx.matrix[slot_number + 1]->birth_slot))
 8017278:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801727c:	3301      	adds	r3, #1
 801727e:	4a0b      	ldr	r2, [pc, #44]	; (80172ac <mixer_update_slot+0x950>)
 8017280:	8852      	ldrh	r2, [r2, #2]
 8017282:	b292      	uxth	r2, r2
 8017284:	4293      	cmp	r3, r2
 8017286:	da1d      	bge.n	80172c4 <mixer_update_slot+0x968>
 8017288:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801728c:	3301      	adds	r3, #1
 801728e:	4a08      	ldr	r2, [pc, #32]	; (80172b0 <mixer_update_slot+0x954>)
 8017290:	3316      	adds	r3, #22
 8017292:	009b      	lsls	r3, r3, #2
 8017294:	4413      	add	r3, r2
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	881b      	ldrh	r3, [r3, #0]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d112      	bne.n	80172c4 <mixer_update_slot+0x968>
					{
						GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision: being start-up owner");
 801729e:	bf00      	nop
						p = UINT16_MAX;
 80172a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172a4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						break;
 80172a8:	e09f      	b.n	80173ea <mixer_update_slot+0xa8e>
 80172aa:	bf00      	nop
 80172ac:	20001430 	.word	0x20001430
 80172b0:	200014f0 	.word	0x200014f0
 80172b4:	20000ce0 	.word	0x20000ce0
 80172b8:	20000cc4 	.word	0x20000cc4
 80172bc:	2000047a 	.word	0x2000047a
 80172c0:	20000478 	.word	0x20000478
                    }

					// TX with probability 1 / slot_number, approximated by the shift
					// and lower bounded by 1 / 16
					p = UINT16_MAX >> MIN(gpi_get_msb(slot_number) + 1, 4);
 80172c4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80172c8:	623b      	str	r3, [r7, #32]
	asm
 80172ca:	6a3b      	ldr	r3, [r7, #32]
 80172cc:	fab3 f383 	clz	r3, r3
 80172d0:	f1c3 031f 	rsb	r3, r3, #31
 80172d4:	461c      	mov	r4, r3
	return y;
 80172d6:	4623      	mov	r3, r4
 80172d8:	3301      	adds	r3, #1
 80172da:	667b      	str	r3, [r7, #100]	; 0x64
 80172dc:	2304      	movs	r3, #4
 80172de:	663b      	str	r3, [r7, #96]	; 0x60
 80172e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80172e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80172e4:	4293      	cmp	r3, r2
 80172e6:	bfa8      	it	ge
 80172e8:	4613      	movge	r3, r2
 80172ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172ee:	fa42 f303 	asr.w	r3, r2, r3
 80172f2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 80172f6:	e078      	b.n	80173ea <mixer_update_slot+0xa8e>
                }
				#endif

				// foreign slot
				if (mx.history[owner]->list_id != ARRAY_INDEX_SIZE_ADD(mx_absent_head, &(mx.history[0]->prev), chirp_config.history_len_8) - chirp_config.mx_num_nodes)
 80172f8:	4bb0      	ldr	r3, [pc, #704]	; (80175bc <mixer_update_slot+0xc60>)
 80172fa:	881b      	ldrh	r3, [r3, #0]
 80172fc:	4ab0      	ldr	r2, [pc, #704]	; (80175c0 <mixer_update_slot+0xc64>)
 80172fe:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8017302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017306:	789b      	ldrb	r3, [r3, #2]
 8017308:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801730c:	b2db      	uxtb	r3, r3
 801730e:	4619      	mov	r1, r3
 8017310:	4bac      	ldr	r3, [pc, #688]	; (80175c4 <mixer_update_slot+0xc68>)
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	461a      	mov	r2, r3
 8017316:	4baa      	ldr	r3, [pc, #680]	; (80175c0 <mixer_update_slot+0xc64>)
 8017318:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 801731c:	1ad3      	subs	r3, r2, r3
 801731e:	4aaa      	ldr	r2, [pc, #680]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017320:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8017322:	b292      	uxth	r2, r2
 8017324:	fbb3 f3f2 	udiv	r3, r3, r2
 8017328:	4aa7      	ldr	r2, [pc, #668]	; (80175c8 <mixer_update_slot+0xc6c>)
 801732a:	8812      	ldrh	r2, [r2, #0]
 801732c:	b292      	uxth	r2, r2
 801732e:	1a9b      	subs	r3, r3, r2
 8017330:	4299      	cmp	r1, r3
 8017332:	d016      	beq.n	8017362 <mixer_update_slot+0xa06>
				{
					GPI_TRACE_MSG(TRACE_VERBOSE, "foreign slot");
 8017334:	bf00      	nop

					#if MX_REQUEST
						// adapt tx probability if request pending
						// -> possibly jump in as helper
						// formula: p = p * rr; p = 0.16, rr = 0.16
						if (is_helper != 0)
 8017336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801733a:	2b00      	cmp	r3, #0
 801733c:	d00d      	beq.n	801735a <mixer_update_slot+0x9fe>
 801733e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017342:	83fb      	strh	r3, [r7, #30]
 8017344:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8017348:	83bb      	strh	r3, [r7, #28]
	return (uint32_t)a * (uint32_t)b;
 801734a:	8bfb      	ldrh	r3, [r7, #30]
 801734c:	8bba      	ldrh	r2, [r7, #28]
 801734e:	fb02 f303 	mul.w	r3, r2, r3
							p = gpi_mulu_16x16(p, relative_rank) >> 16;
 8017352:	0c1b      	lsrs	r3, r3, #16
 8017354:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
						else
					#endif

					p = 0;
					break;
 8017358:	e047      	b.n	80173ea <mixer_update_slot+0xa8e>
					p = 0;
 801735a:	2300      	movs	r3, #0
 801735c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
 8017360:	e043      	b.n	80173ea <mixer_update_slot+0xa8e>

			#endif

			// concurrent arbitration slot
			{
				GPI_TRACE_MSG(TRACE_VERBOSE, "concurrent slot");
 8017362:	bf00      	nop

				// if request pending: p has been computed already
				if (is_helper != 0)
 8017364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017368:	2b00      	cmp	r3, #0
 801736a:	d13d      	bne.n	80173e8 <mixer_update_slot+0xa8c>
					break;

				static const uint8_t age_to_tx_LUT[] = MX_AGE_TO_TX_PROBABILITY;
				ASSERT_CT(sizeof(age_to_tx_LUT) > 0, MX_AGE_TO_TX_PROBABILITY_is_invalid);

				uint16_t age = slot_number - mx.recent_innovative_slot;
 801736c:	4b94      	ldr	r3, [pc, #592]	; (80175c0 <mixer_update_slot+0xc64>)
 801736e:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8017372:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8017376:	1ad3      	subs	r3, r2, r3
 8017378:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				// formula to realize:
				// p = 1 / (d + 1) + d / (d + 1) * LUT[age]
				//   = A / B with A := 1 + d * LUT[age] and B := d + 1

				// compute A, store it in 8.8 fixed point format
				p = age_to_tx_LUT[MIN(age, NUM_ELEMENTS(age_to_tx_LUT) - 1)];
 801737c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017380:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8017384:	2300      	movs	r3, #0
 8017386:	66bb      	str	r3, [r7, #104]	; 0x68
 8017388:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801738c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801738e:	4293      	cmp	r3, r2
 8017390:	bf28      	it	cs
 8017392:	4613      	movcs	r3, r2
 8017394:	4a8d      	ldr	r2, [pc, #564]	; (80175cc <mixer_update_slot+0xc70>)
 8017396:	5cd3      	ldrb	r3, [r2, r3]
 8017398:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			#if !MX_COORDINATED_TX
				p <<= 8;
			#else
				p *= density;
 801739c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80173a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80173a4:	fb12 f303 	smulbb	r3, r2, r3
 80173a8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
				p += 0x100;
 80173ac:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80173b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80173b4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

				// compute A / B, store it in 0.16 fixed point format
				p = gpi_divu_16x8(p, density + 1, 0) << 8;
 80173b8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	3301      	adds	r3, #1
 80173c0:	b2da      	uxtb	r2, r3
 80173c2:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80173c6:	837b      	strh	r3, [r7, #26]
 80173c8:	4613      	mov	r3, r2
 80173ca:	767b      	strb	r3, [r7, #25]
 80173cc:	2300      	movs	r3, #0
 80173ce:	617b      	str	r3, [r7, #20]
	asm("udiv %0, %1, %2" : "=r"(r) : "r"(x), "r"(d));
 80173d0:	8b7b      	ldrh	r3, [r7, #26]
 80173d2:	7e7a      	ldrb	r2, [r7, #25]
 80173d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80173d8:	461c      	mov	r4, r3
	return r;
 80173da:	b2a3      	uxth	r3, r4
 80173dc:	021b      	lsls	r3, r3, #8
 80173de:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

				GPI_TRACE_MSG(TRACE_VERBOSE, "tx decision age: %" PRIu16 ", density: %" PRIu16, age, density);
 80173e2:	e002      	b.n	80173ea <mixer_update_slot+0xa8e>
				break;
 80173e4:	bf00      	nop
 80173e6:	e000      	b.n	80173ea <mixer_update_slot+0xa8e>
					break;
 80173e8:	bf00      	nop
			#endif
            }

		} while (0);
		PROFILE("mixer_update_slot() tx decision p done");
 80173ea:	bf00      	nop
		GPI_TRACE_MSG(TRACE_INFO, "tx decision p: %" PRIu16, p);
 80173ec:	bf00      	nop

		next_task = RX;
 80173ee:	2300      	movs	r3, #0
 80173f0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

		if (p && (mixer_rand() <= p))
 80173f4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d00a      	beq.n	8017412 <mixer_update_slot+0xab6>
 80173fc:	f001 fc2c 	bl	8018c58 <mixer_rand>
 8017400:	4603      	mov	r3, r0
 8017402:	461a      	mov	r2, r3
 8017404:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017408:	4293      	cmp	r3, r2
 801740a:	d302      	bcc.n	8017412 <mixer_update_slot+0xab6>
		{
			next_task = TX;
 801740c:	2301      	movs	r3, #1
 801740e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		}

		clear_event(TX_READY);
 8017412:	2002      	movs	r0, #2
 8017414:	f7fe ff3c 	bl	8016290 <clear_event>

		PROFILE("mixer_update_slot() tx decision activate 1");
 8017418:	bf00      	nop

		if (TX == next_task)
 801741a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 801741e:	2b01      	cmp	r3, #1
 8017420:	d125      	bne.n	801746e <mixer_update_slot+0xb12>
		{
			// if TX and packet preparation pending: select short-term transmit data
			// in case there is not enough time to finish the full packet
			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS))
 8017422:	4b67      	ldr	r3, [pc, #412]	; (80175c0 <mixer_update_slot+0xc64>)
 8017424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017426:	4a68      	ldr	r2, [pc, #416]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017428:	7b92      	ldrb	r2, [r2, #14]
 801742a:	4413      	add	r3, r2
 801742c:	7a1b      	ldrb	r3, [r3, #8]
 801742e:	b25b      	sxtb	r3, r3
 8017430:	2b00      	cmp	r3, #0
 8017432:	db1c      	blt.n	801746e <mixer_update_slot+0xb12>
	__ASM volatile
 8017434:	f3ef 8310 	mrs	r3, PRIMASK
 8017438:	b672      	cpsid	i
 801743a:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 801743c:	f3bf 8f5f 	dmb	sy
	return ie;
 8017440:	4623      	mov	r3, r4
			{
				int ie = gpi_int_lock();
 8017442:	65fb      	str	r3, [r7, #92]	; 0x5c

				if (NULL == mx.tx_sideload)
 8017444:	4b5e      	ldr	r3, [pc, #376]	; (80175c0 <mixer_update_slot+0xc64>)
 8017446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017448:	2b00      	cmp	r3, #0
 801744a:	d107      	bne.n	801745c <mixer_update_slot+0xb00>
				{
					mx.tx_sideload = (uint8_t *)&(mx.tx_reserve->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 801744c:	4b5c      	ldr	r3, [pc, #368]	; (80175c0 <mixer_update_slot+0xc64>)
 801744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017450:	4a5d      	ldr	r2, [pc, #372]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017452:	7e12      	ldrb	r2, [r2, #24]
 8017454:	4413      	add	r3, r2
 8017456:	3304      	adds	r3, #4
 8017458:	4a59      	ldr	r2, [pc, #356]	; (80175c0 <mixer_update_slot+0xc64>)
 801745a:	6453      	str	r3, [r2, #68]	; 0x44
 801745c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801745e:	613b      	str	r3, [r7, #16]
 8017460:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
			}
		}

		mixer_transport_set_next_slot_task(next_task);
 801746e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8017472:	4618      	mov	r0, r3
 8017474:	f7fa fb72 	bl	8011b5c <mixer_transport_set_next_slot_task>

		PROFILE("mixer_update_slot() tx decision activate 2");
 8017478:	bf00      	nop
		// valid packet before leaving current thread if next task == TX. Therefore we don't rely
		// on TX_READY because that one is not signaled before our first transmission. Thereafter,
		// TX_READY and !is_ready are quiet equivalent - except for the fact that mx.tx_packet.is_ready
		// may also be reset during tx decision (to enforce assembly of a new packet in response to
		// request processing). Hence, checking is_ready is the right way here.
		if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY) >> PACKET_IS_READY_POS) && (mx.rank > 0))
 801747a:	4b51      	ldr	r3, [pc, #324]	; (80175c0 <mixer_update_slot+0xc64>)
 801747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801747e:	4a52      	ldr	r2, [pc, #328]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017480:	7b92      	ldrb	r2, [r2, #14]
 8017482:	4413      	add	r3, r2
 8017484:	7a1b      	ldrb	r3, [r3, #8]
 8017486:	b25b      	sxtb	r3, r3
 8017488:	2b00      	cmp	r3, #0
 801748a:	f2c0 8085 	blt.w	8017598 <mixer_update_slot+0xc3c>
 801748e:	4b4c      	ldr	r3, [pc, #304]	; (80175c0 <mixer_update_slot+0xc64>)
 8017490:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017494:	2b00      	cmp	r3, #0
 8017496:	d07f      	beq.n	8017598 <mixer_update_slot+0xc3c>
		{
			PROFILE("mixer_update_slot() prepare tx packet begin");
 8017498:	bf00      	nop

			// is_valid is used to detect if the packet may have been hurt by the ISR while preparing it
			mx.tx_packet->packet_chunk[chirp_config.rand.pos] = (mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID_MASK) | (1 << PACKET_IS_VALID_POS);
 801749a:	4b49      	ldr	r3, [pc, #292]	; (80175c0 <mixer_update_slot+0xc64>)
 801749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801749e:	4a4a      	ldr	r2, [pc, #296]	; (80175c8 <mixer_update_slot+0xc6c>)
 80174a0:	7b92      	ldrb	r2, [r2, #14]
 80174a2:	4413      	add	r3, r2
 80174a4:	7a1a      	ldrb	r2, [r3, #8]
 80174a6:	4b46      	ldr	r3, [pc, #280]	; (80175c0 <mixer_update_slot+0xc64>)
 80174a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174aa:	4947      	ldr	r1, [pc, #284]	; (80175c8 <mixer_update_slot+0xc6c>)
 80174ac:	7b89      	ldrb	r1, [r1, #14]
 80174ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80174b2:	b2d2      	uxtb	r2, r2
 80174b4:	440b      	add	r3, r1
 80174b6:	721a      	strb	r2, [r3, #8]

			REORDER_BARRIER();

			prepare_tx_packet();
 80174b8:	f7fe ff12 	bl	80162e0 <prepare_tx_packet>

			REORDER_BARRIER();

			if (!((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID) >> PACKET_IS_VALID_POS))
 80174bc:	4b40      	ldr	r3, [pc, #256]	; (80175c0 <mixer_update_slot+0xc64>)
 80174be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174c0:	4a41      	ldr	r2, [pc, #260]	; (80175c8 <mixer_update_slot+0xc6c>)
 80174c2:	7b92      	ldrb	r2, [r2, #14]
 80174c4:	4413      	add	r3, r2
 80174c6:	7a1b      	ldrb	r3, [r3, #8]
 80174c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d101      	bne.n	80174d4 <mixer_update_slot+0xb78>
				// if mx.tx_packet gets hurt by ISR, then we can not use it. On the other hand we
				// know that next_task TX has been done already, using the sideload (while we
				// prepared the packet, that is why we are here). So the packet is broken, but
				// we don't need it anymore.

				GPI_TRACE_MSG(TRACE_VERBOSE, "tx packet hurt by ISR -> dropped it");
 80174d0:	bf00      	nop
				}

				gpi_int_unlock(ie);
            }

			PROFILE("mixer_update_slot() prepare tx packet end");
 80174d2:	e060      	b.n	8017596 <mixer_update_slot+0xc3a>
				mx.tx_packet->packet_chunk[chirp_config.rand.pos] = (mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_RAND_MASK) | (mixer_rand() & PACKET_RAND_MASK);
 80174d4:	4b3a      	ldr	r3, [pc, #232]	; (80175c0 <mixer_update_slot+0xc64>)
 80174d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174d8:	4a3b      	ldr	r2, [pc, #236]	; (80175c8 <mixer_update_slot+0xc6c>)
 80174da:	7b92      	ldrb	r2, [r2, #14]
 80174dc:	4413      	add	r3, r2
 80174de:	7a1c      	ldrb	r4, [r3, #8]
 80174e0:	f001 fbba 	bl	8018c58 <mixer_rand>
 80174e4:	4603      	mov	r3, r0
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	4323      	orrs	r3, r4
 80174ea:	b2da      	uxtb	r2, r3
 80174ec:	4b34      	ldr	r3, [pc, #208]	; (80175c0 <mixer_update_slot+0xc64>)
 80174ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174f0:	4935      	ldr	r1, [pc, #212]	; (80175c8 <mixer_update_slot+0xc6c>)
 80174f2:	7b89      	ldrb	r1, [r1, #14]
 80174f4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80174f8:	b2d2      	uxtb	r2, r2
 80174fa:	440b      	add	r3, r1
 80174fc:	721a      	strb	r2, [r3, #8]
	__ASM volatile
 80174fe:	f3ef 8310 	mrs	r3, PRIMASK
 8017502:	b672      	cpsid	i
 8017504:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017506:	f3bf 8f5f 	dmb	sy
	return ie;
 801750a:	4623      	mov	r3, r4
				int ie = gpi_int_lock();
 801750c:	65bb      	str	r3, [r7, #88]	; 0x58
				if ((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_VALID) >> PACKET_IS_VALID_POS)
 801750e:	4b2c      	ldr	r3, [pc, #176]	; (80175c0 <mixer_update_slot+0xc64>)
 8017510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017512:	4a2d      	ldr	r2, [pc, #180]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017514:	7b92      	ldrb	r2, [r2, #14]
 8017516:	4413      	add	r3, r2
 8017518:	7a1b      	ldrb	r3, [r3, #8]
 801751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801751e:	2b00      	cmp	r3, #0
 8017520:	d030      	beq.n	8017584 <mixer_update_slot+0xc28>
					mx.tx_packet->packet_chunk[chirp_config.rand.pos] |= PACKET_IS_READY;
 8017522:	4b27      	ldr	r3, [pc, #156]	; (80175c0 <mixer_update_slot+0xc64>)
 8017524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017526:	4a28      	ldr	r2, [pc, #160]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017528:	7b92      	ldrb	r2, [r2, #14]
 801752a:	4413      	add	r3, r2
 801752c:	7a1a      	ldrb	r2, [r3, #8]
 801752e:	4b24      	ldr	r3, [pc, #144]	; (80175c0 <mixer_update_slot+0xc64>)
 8017530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017532:	4925      	ldr	r1, [pc, #148]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017534:	7b89      	ldrb	r1, [r1, #14]
 8017536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801753a:	b2d2      	uxtb	r2, r2
 801753c:	440b      	add	r3, r1
 801753e:	721a      	strb	r2, [r3, #8]
					if (((uintptr_t)mx.tx_sideload - (uintptr_t)&(mx.matrix[0]->birth_slot) < chirp_config.mx_generation_size * ((1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t))) && ((Matrix_Row *)(mx.tx_sideload - chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t)) != mx.empty_row))
 8017540:	4b1f      	ldr	r3, [pc, #124]	; (80175c0 <mixer_update_slot+0xc64>)
 8017542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017544:	461a      	mov	r2, r3
 8017546:	4b1e      	ldr	r3, [pc, #120]	; (80175c0 <mixer_update_slot+0xc64>)
 8017548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801754a:	1ad2      	subs	r2, r2, r3
 801754c:	4b1e      	ldr	r3, [pc, #120]	; (80175c8 <mixer_update_slot+0xc6c>)
 801754e:	885b      	ldrh	r3, [r3, #2]
 8017550:	b29b      	uxth	r3, r3
 8017552:	4619      	mov	r1, r3
 8017554:	4b1c      	ldr	r3, [pc, #112]	; (80175c8 <mixer_update_slot+0xc6c>)
 8017556:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017558:	b29b      	uxth	r3, r3
 801755a:	3301      	adds	r3, #1
 801755c:	fb03 f301 	mul.w	r3, r3, r1
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	429a      	cmp	r2, r3
 8017564:	d20e      	bcs.n	8017584 <mixer_update_slot+0xc28>
 8017566:	4b16      	ldr	r3, [pc, #88]	; (80175c0 <mixer_update_slot+0xc64>)
 8017568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801756a:	4b17      	ldr	r3, [pc, #92]	; (80175c8 <mixer_update_slot+0xc6c>)
 801756c:	7f5b      	ldrb	r3, [r3, #29]
 801756e:	009b      	lsls	r3, r3, #2
 8017570:	425b      	negs	r3, r3
 8017572:	441a      	add	r2, r3
 8017574:	4b12      	ldr	r3, [pc, #72]	; (80175c0 <mixer_update_slot+0xc64>)
 8017576:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801757a:	429a      	cmp	r2, r3
 801757c:	d002      	beq.n	8017584 <mixer_update_slot+0xc28>
							mx.tx_sideload = NULL;
 801757e:	4b10      	ldr	r3, [pc, #64]	; (80175c0 <mixer_update_slot+0xc64>)
 8017580:	2200      	movs	r2, #0
 8017582:	645a      	str	r2, [r3, #68]	; 0x44
 8017584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017586:	60bb      	str	r3, [r7, #8]
 8017588:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f383 8810 	msr	PRIMASK, r3
			PROFILE("mixer_update_slot() prepare tx packet end");
 8017596:	bf00      	nop
        }

		// maintain history
		#if MX_COORDINATED_TX
			mx_purge_history();
 8017598:	f7fe fcf6 	bl	8015f88 <mx_purge_history>
				}
			}
			#endif
		#endif

		PROFILE("mixer_update_slot() end");
 801759c:	bf00      	nop
		PT_WAIT_UNTIL(pt, mx.events & BV(SLOT_UPDATE));
 801759e:	f7ff b9fd 	b.w	801699c <mixer_update_slot+0x40>
    }
	else
	{
		if (mx.events & BV(TX_READY))
 80175a2:	4b07      	ldr	r3, [pc, #28]	; (80175c0 <mixer_update_slot+0xc64>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	f003 0304 	and.w	r3, r3, #4
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d010      	beq.n	80175d0 <mixer_update_slot+0xc74>
		{
			clear_event(TX_READY);
 80175ae:	2002      	movs	r0, #2
 80175b0:	f7fe fe6e 	bl	8016290 <clear_event>
			mixer_transport_set_next_slot_task(RX);
 80175b4:	2000      	movs	r0, #0
 80175b6:	f7fa fad1 	bl	8011b5c <mixer_transport_set_next_slot_task>
 80175ba:	e00c      	b.n	80175d6 <mixer_update_slot+0xc7a>
 80175bc:	20000478 	.word	0x20000478
 80175c0:	200014f0 	.word	0x200014f0
 80175c4:	20000ce4 	.word	0x20000ce4
 80175c8:	20001430 	.word	0x20001430
 80175cc:	08027034 	.word	0x08027034
		}
		else
		{
			mixer_transport_set_next_slot_task(TX);
 80175d0:	2001      	movs	r0, #1
 80175d2:	f7fa fac3 	bl	8011b5c <mixer_transport_set_next_slot_task>
		}
		PT_YIELD(pt);
 80175d6:	2300      	movs	r3, #0
 80175d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80175dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80175de:	f240 42f4 	movw	r2, #1268	; 0x4f4
 80175e2:	801a      	strh	r2, [r3, #0]
 80175e4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	f47f a9d7 	bne.w	801699c <mixer_update_slot+0x40>
 80175ee:	bf00      	nop
 80175f0:	2301      	movs	r3, #1
 80175f2:	e007      	b.n	8017604 <mixer_update_slot+0xca8>
	}
	}
	PT_END(pt);
 80175f4:	2300      	movs	r3, #0
 80175f6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80175fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80175fc:	2200      	movs	r2, #0
 80175fe:	801a      	strh	r2, [r3, #0]
 8017600:	bf00      	nop
 8017602:	2303      	movs	r3, #3
}
 8017604:	4618      	mov	r0, r3
 8017606:	37b4      	adds	r7, #180	; 0xb4
 8017608:	46bd      	mov	sp, r7
 801760a:	bd90      	pop	{r4, r7, pc}

0801760c <mixer_process_rx_data>:

//**************************************************************************************************

PT_THREAD(mixer_process_rx_data())
{
 801760c:	b590      	push	{r4, r7, lr}
 801760e:	b0b9      	sub	sp, #228	; 0xe4
 8017610:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_process_rx_data;
 8017612:	4bad      	ldr	r3, [pc, #692]	; (80178c8 <mixer_process_rx_data+0x2bc>)
 8017614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	const unsigned int PAYLOAD_SHIFT =
		chirp_config.matrix_payload.pos * sizeof(uint_fast_t) - chirp_config.matrix_payload_8.pos;
 8017618:	4bac      	ldr	r3, [pc, #688]	; (80178cc <mixer_process_rx_data+0x2c0>)
 801761a:	7f9b      	ldrb	r3, [r3, #30]
 801761c:	009b      	lsls	r3, r3, #2
 801761e:	4aab      	ldr	r2, [pc, #684]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017620:	7e92      	ldrb	r2, [r2, #26]
	const unsigned int PAYLOAD_SHIFT =
 8017622:	1a9b      	subs	r3, r3, r2
 8017624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	// ATTENTION: ensure that PAYLOAD_SIZE is aligned because memxor_block() may rely on that
	// ATTENTION: don't use sizeof(mx.matrix[0].payload) because it might be too small due to
	// MX_BENCHMARK_PSEUDO_PAYLOAD
	const unsigned int PAYLOAD_SIZE =
		chirp_config.payload.len * sizeof(uint8_t) + PADDING_SIZE(chirp_config.payload.len * sizeof(uint8_t));
 8017628:	4ba8      	ldr	r3, [pc, #672]	; (80178cc <mixer_process_rx_data+0x2c0>)
 801762a:	7a5b      	ldrb	r3, [r3, #9]
 801762c:	461a      	mov	r2, r3
 801762e:	4ba7      	ldr	r3, [pc, #668]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017630:	7a5b      	ldrb	r3, [r3, #9]
 8017632:	425b      	negs	r3, r3
 8017634:	f003 0303 	and.w	r3, r3, #3
	const unsigned int PAYLOAD_SIZE =
 8017638:	4413      	add	r3, r2
 801763a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	PT_BEGIN(pt);
 801763e:	2301      	movs	r3, #1
 8017640:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017648:	881b      	ldrh	r3, [r3, #0]
 801764a:	f240 6256 	movw	r2, #1622	; 0x656
 801764e:	4293      	cmp	r3, r2
 8017650:	f000 8480 	beq.w	8017f54 <mixer_process_rx_data+0x948>
 8017654:	f240 6256 	movw	r2, #1622	; 0x656
 8017658:	4293      	cmp	r3, r2
 801765a:	dc0c      	bgt.n	8017676 <mixer_process_rx_data+0x6a>
 801765c:	f240 520d 	movw	r2, #1293	; 0x50d
 8017660:	4293      	cmp	r3, r2
 8017662:	d01e      	beq.n	80176a2 <mixer_process_rx_data+0x96>
 8017664:	f240 624b 	movw	r2, #1611	; 0x64b
 8017668:	4293      	cmp	r3, r2
 801766a:	f000 845e 	beq.w	8017f2a <mixer_process_rx_data+0x91e>
 801766e:	2b00      	cmp	r3, #0
 8017670:	d011      	beq.n	8017696 <mixer_process_rx_data+0x8a>
 8017672:	f000 bde2 	b.w	801823a <mixer_process_rx_data+0xc2e>
 8017676:	f240 6281 	movw	r2, #1665	; 0x681
 801767a:	4293      	cmp	r3, r2
 801767c:	f000 85ba 	beq.w	80181f4 <mixer_process_rx_data+0xbe8>
 8017680:	f240 6287 	movw	r2, #1671	; 0x687
 8017684:	4293      	cmp	r3, r2
 8017686:	f000 85d0 	beq.w	801822a <mixer_process_rx_data+0xc1e>
 801768a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801768e:	f000 858b 	beq.w	80181a8 <mixer_process_rx_data+0xb9c>
 8017692:	f000 bdd2 	b.w	801823a <mixer_process_rx_data+0xc2e>
 8017696:	bf00      	nop

	while (1)
	{
		PT_WAIT_UNTIL(pt, mx.events & BV(RX_READY));
 8017698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801769c:	f240 520d 	movw	r2, #1293	; 0x50d
 80176a0:	801a      	strh	r2, [r3, #0]
 80176a2:	4b8b      	ldr	r3, [pc, #556]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	f003 0310 	and.w	r3, r3, #16
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d103      	bne.n	80176b6 <mixer_process_rx_data+0xaa>
 80176ae:	bf00      	nop
 80176b0:	2300      	movs	r3, #0
 80176b2:	f000 bdcb 	b.w	801824c <mixer_process_rx_data+0xc40>

		clear_event(RX_READY);
 80176b6:	2004      	movs	r0, #4
 80176b8:	f7fe fdea 	bl	8016290 <clear_event>
		if (chirp_config.primitive != FLOODING)
 80176bc:	4b83      	ldr	r3, [pc, #524]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80176be:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80176c2:	2b01      	cmp	r3, #1
 80176c4:	f000 85a6 	beq.w	8018214 <mixer_process_rx_data+0xc08>
		{
		while (mx.rx_queue_num_read != mx.rx_queue_num_written)
 80176c8:	f000 bd9b 	b.w	8018202 <mixer_process_rx_data+0xbf6>
		{
			PROFILE("mixer_process_rx_data() begin");
 80176cc:	bf00      	nop
			static Packet	*p;
			void			*pp[MEMXOR_BLOCKSIZE];
			unsigned int	pp_used;
			int_fast16_t	i;

			p = mx.rx_queue[mx.rx_queue_num_read % NUM_ELEMENTS(mx.rx_queue)];
 80176ce:	4b80      	ldr	r3, [pc, #512]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 80176d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176d2:	f003 0303 	and.w	r3, r3, #3
 80176d6:	4a7e      	ldr	r2, [pc, #504]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	4413      	add	r3, r2
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	4a7d      	ldr	r2, [pc, #500]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 80176e0:	6013      	str	r3, [r2, #0]

			if (p->sender_id >= chirp_config.mx_num_nodes)
 80176e2:	4b7c      	ldr	r3, [pc, #496]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	799b      	ldrb	r3, [r3, #6]
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	4b78      	ldr	r3, [pc, #480]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80176ec:	881b      	ldrh	r3, [r3, #0]
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d302      	bcc.n	80176fa <mixer_process_rx_data+0xee>
			{
				GPI_TRACE_MSG(TRACE_INFO, "Rx: invalid sender_id %u -> drop packet", p->sender_id);
 80176f4:	bf00      	nop
				goto continue_;
 80176f6:	f000 bd67 	b.w	80181c8 <mixer_process_rx_data+0xbbc>
			}

			TRACE_DUMP(1, "Rx packet:", &(p->phy_payload_begin), chirp_config.phy_payload_size);
 80176fa:	bf00      	nop

			PRINTF_CHIRP("Rx: ");
 80176fc:	4876      	ldr	r0, [pc, #472]	; (80178d8 <mixer_process_rx_data+0x2cc>)
 80176fe:	f00a ff9d 	bl	802263c <iprintf>

			TRACE_PACKET(p);
 8017702:	4b74      	ldr	r3, [pc, #464]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	4618      	mov	r0, r3
 8017708:	f7fe fce6 	bl	80160d8 <trace_packet>

			/* when receive a packet at first time */
			if ((!mx.rank) && (chirp_config.disem_copy))
 801770c:	4b70      	ldr	r3, [pc, #448]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 801770e:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017712:	2b00      	cmp	r3, #0
 8017714:	d128      	bne.n	8017768 <mixer_process_rx_data+0x15c>
 8017716:	4b6d      	ldr	r3, [pc, #436]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017718:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801771c:	2b00      	cmp	r3, #0
 801771e:	d023      	beq.n	8017768 <mixer_process_rx_data+0x15c>
			{
				mixer_write(node_id_allocate, &(p->packet_chunk[chirp_config.payload.pos]), chirp_config.mx_payload_size);
 8017720:	4b6e      	ldr	r3, [pc, #440]	; (80178dc <mixer_process_rx_data+0x2d0>)
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	4618      	mov	r0, r3
 8017726:	4b6b      	ldr	r3, [pc, #428]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017728:	681a      	ldr	r2, [r3, #0]
 801772a:	4b68      	ldr	r3, [pc, #416]	; (80178cc <mixer_process_rx_data+0x2c0>)
 801772c:	7a1b      	ldrb	r3, [r3, #8]
 801772e:	3308      	adds	r3, #8
 8017730:	18d1      	adds	r1, r2, r3
 8017732:	4b66      	ldr	r3, [pc, #408]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017734:	889b      	ldrh	r3, [r3, #4]
 8017736:	b29b      	uxth	r3, r3
 8017738:	461a      	mov	r2, r3
 801773a:	f7fa fd69 	bl	8012210 <mixer_write>
				if (node_id_allocate == chirp_config.mx_generation_size - 1)
 801773e:	4b67      	ldr	r3, [pc, #412]	; (80178dc <mixer_process_rx_data+0x2d0>)
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	461a      	mov	r2, r3
 8017744:	4b61      	ldr	r3, [pc, #388]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017746:	885b      	ldrh	r3, [r3, #2]
 8017748:	b29b      	uxth	r3, r3
 801774a:	3b01      	subs	r3, #1
 801774c:	429a      	cmp	r2, r3
 801774e:	d10b      	bne.n	8017768 <mixer_process_rx_data+0x15c>
					mx.empty_row -= chirp_config.matrix_size_32;
 8017750:	4b5f      	ldr	r3, [pc, #380]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017752:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017756:	4b5d      	ldr	r3, [pc, #372]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017758:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801775a:	b29b      	uxth	r3, r3
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	425b      	negs	r3, r3
 8017760:	4413      	add	r3, r2
 8017762:	4a5b      	ldr	r2, [pc, #364]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017764:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
					}
				}
			#endif

			// if we already have full rank: done
			if (mx.rank >= chirp_config.mx_generation_size)
 8017768:	4b59      	ldr	r3, [pc, #356]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 801776a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 801776e:	4b57      	ldr	r3, [pc, #348]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017770:	885b      	ldrh	r3, [r3, #2]
 8017772:	b29b      	uxth	r3, r3
 8017774:	429a      	cmp	r2, r3
 8017776:	f080 8524 	bcs.w	80181c2 <mixer_process_rx_data+0xbb6>
			{
				goto continue_;
			}

			PROFILE("mixer_process_rx_data() checkpoint 1");
 801777a:	bf00      	nop
			// is vacant, i.e. it may be filled with data without updating mx.tx_sideload afterwards
			// (e.g. in response to a missed CRC check). This is no problem as long as we never set
			// mx.tx_sideload back to an older queue entry than it is (if it points into the queue).
			// If we don't do that, then the ISR ensures that mx.tx_sideload never points to the
			// vacant slot.
			if (mx.tx_sideload == &(p->packet_chunk[chirp_config.coding_vector.pos]))
 801777c:	4b54      	ldr	r3, [pc, #336]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 801777e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017780:	4b54      	ldr	r3, [pc, #336]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017782:	6819      	ldr	r1, [r3, #0]
 8017784:	4b51      	ldr	r3, [pc, #324]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017786:	799b      	ldrb	r3, [r3, #6]
 8017788:	3308      	adds	r3, #8
 801778a:	440b      	add	r3, r1
 801778c:	429a      	cmp	r2, r3
 801778e:	d15a      	bne.n	8017846 <mixer_process_rx_data+0x23a>
				// full rank): copy the packet to this row and use it as sideload
				// NOTE: it is important that we don't simply invalidate mx.tx_sideload because
				// the case that it points to the current packet is standard (except for high load
				// situations). If we invalidate it, there is a significant probability that fast
				// tx update doesn't happen (only if rx processing finishes before next tx slot).
				if (NULL == mx.empty_row)
 8017790:	4b4f      	ldr	r3, [pc, #316]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017792:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017796:	2b00      	cmp	r3, #0
 8017798:	d103      	bne.n	80177a2 <mixer_process_rx_data+0x196>
					pr = NULL;
 801779a:	2300      	movs	r3, #0
 801779c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80177a0:	e02c      	b.n	80177fc <mixer_process_rx_data+0x1f0>
				else
				{
					pr = (uint8_t *)&(mx.empty_row->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos + 0]);
 80177a2:	4b4b      	ldr	r3, [pc, #300]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 80177a4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80177a8:	4a48      	ldr	r2, [pc, #288]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80177aa:	7e12      	ldrb	r2, [r2, #24]
 80177ac:	4413      	add	r3, r2
 80177ae:	3304      	adds	r3, #4
 80177b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					gpi_memcpy_dma_aligned(pr, &(p->packet_chunk[chirp_config.coding_vector.pos]),
 80177b4:	4b47      	ldr	r3, [pc, #284]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 80177b6:	681a      	ldr	r2, [r3, #0]
 80177b8:	4b44      	ldr	r3, [pc, #272]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80177ba:	799b      	ldrb	r3, [r3, #6]
 80177bc:	3308      	adds	r3, #8
 80177be:	441a      	add	r2, r3
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t));
 80177c0:	4b42      	ldr	r3, [pc, #264]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80177c2:	7f5b      	ldrb	r3, [r3, #29]
 80177c4:	4619      	mov	r1, r3
 80177c6:	4b41      	ldr	r3, [pc, #260]	; (80178cc <mixer_process_rx_data+0x2c0>)
 80177c8:	7fdb      	ldrb	r3, [r3, #31]
 80177ca:	440b      	add	r3, r1
					gpi_memcpy_dma_aligned(pr, &(p->packet_chunk[chirp_config.coding_vector.pos]),
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80177d2:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80177d6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80177da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	__builtin_memcpy(dest, src, size);
 80177de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80177e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80177e6:	4610      	mov	r0, r2
 80177e8:	4619      	mov	r1, r3
 80177ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80177ee:	461a      	mov	r2, r3
 80177f0:	f00a f90c 	bl	8021a0c <memcpy>
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#else

					unwrap_chunk(pr);
 80177f4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80177f8:	f7f6 fe0a 	bl	800e410 <unwrap_chunk>
	__ASM volatile
 80177fc:	f3ef 8310 	mrs	r3, PRIMASK
 8017800:	b672      	cpsid	i
 8017802:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017804:	f3bf 8f5f 	dmb	sy
	return ie;
 8017808:	4623      	mov	r3, r4

					#endif
                }

				int ie = gpi_int_lock();
 801780a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

				if (mx.tx_sideload == &(p->packet_chunk[chirp_config.coding_vector.pos]))
 801780e:	4b30      	ldr	r3, [pc, #192]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017812:	4b30      	ldr	r3, [pc, #192]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017814:	6819      	ldr	r1, [r3, #0]
 8017816:	4b2d      	ldr	r3, [pc, #180]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017818:	799b      	ldrb	r3, [r3, #6]
 801781a:	3308      	adds	r3, #8
 801781c:	440b      	add	r3, r1
 801781e:	429a      	cmp	r2, r3
 8017820:	d103      	bne.n	801782a <mixer_process_rx_data+0x21e>
				{
					mx.tx_sideload = pr;
 8017822:	4a2b      	ldr	r2, [pc, #172]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017828:	6453      	str	r3, [r2, #68]	; 0x44
 801782a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801782e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017832:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017836:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801783a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801783e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017842:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
            }

			// align packet elements
			unwrap_chunk(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 8017846:	4b23      	ldr	r3, [pc, #140]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017848:	681a      	ldr	r2, [r3, #0]
 801784a:	4b20      	ldr	r3, [pc, #128]	; (80178cc <mixer_process_rx_data+0x2c0>)
 801784c:	799b      	ldrb	r3, [r3, #6]
 801784e:	3308      	adds	r3, #8
 8017850:	4413      	add	r3, r2
 8017852:	4618      	mov	r0, r3
 8017854:	f7f6 fddc 	bl	800e410 <unwrap_chunk>

			PROFILE("mixer_process_rx_data() checkpoint 2");
 8017858:	bf00      	nop

			// traverse matrix / coding vector
			pp_used = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			while (1)
			{
				PROFILE("mixer_process_rx_data() matrix iteration begin");
 8017860:	bf00      	nop

				// get leading coefficient
				i = mx_get_leading_index(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 8017862:	4b1c      	ldr	r3, [pc, #112]	; (80178d4 <mixer_process_rx_data+0x2c8>)
 8017864:	681a      	ldr	r2, [r3, #0]
 8017866:	4b19      	ldr	r3, [pc, #100]	; (80178cc <mixer_process_rx_data+0x2c0>)
 8017868:	799b      	ldrb	r3, [r3, #6]
 801786a:	3308      	adds	r3, #8
 801786c:	4413      	add	r3, r2
 801786e:	4618      	mov	r0, r3
 8017870:	f7f6 fd8e 	bl	800e390 <mx_get_leading_index>
 8017874:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

				if (i < 0)
 8017878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801787c:	2b00      	cmp	r3, #0
 801787e:	da2f      	bge.n	80178e0 <mixer_process_rx_data+0x2d4>
	__ASM volatile
 8017880:	f3ef 8310 	mrs	r3, PRIMASK
 8017884:	b672      	cpsid	i
 8017886:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017888:	f3bf 8f5f 	dmb	sy
	return ie;
 801788c:	4623      	mov	r3, r4
				{
					// if this is the last received packed: invalidate mx.tx_sideload because the
					// packet was not innovative -> ensures that the prepared tx packet won't
					// get hurt
					{
						int ie = gpi_int_lock();
 801788e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

						if (mx.rx_queue_num_written - mx.rx_queue_num_read == 1)
 8017892:	4b0f      	ldr	r3, [pc, #60]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017896:	4b0e      	ldr	r3, [pc, #56]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 8017898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801789a:	1ad3      	subs	r3, r2, r3
 801789c:	2b01      	cmp	r3, #1
 801789e:	d102      	bne.n	80178a6 <mixer_process_rx_data+0x29a>
							mx.tx_sideload = NULL;
 80178a0:	4b0b      	ldr	r3, [pc, #44]	; (80178d0 <mixer_process_rx_data+0x2c4>)
 80178a2:	2200      	movs	r2, #0
 80178a4:	645a      	str	r2, [r3, #68]	; 0x44
 80178a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80178aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80178ae:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80178b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80178b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80178be:	f383 8810 	msr	PRIMASK, r3

						gpi_int_unlock(ie);
					}

					break;
 80178c2:	f000 bc81 	b.w	80181c8 <mixer_process_rx_data+0xbbc>
 80178c6:	bf00      	nop
 80178c8:	20001e2a 	.word	0x20001e2a
 80178cc:	20001430 	.word	0x20001430
 80178d0:	200014f0 	.word	0x200014f0
 80178d4:	2000047c 	.word	0x2000047c
 80178d8:	08025c90 	.word	0x08025c90
 80178dc:	20000cc1 	.word	0x20000cc1
                }

				// if corresponding row is empty (i.e. packet is innovative): fill it, rank increase
				if (UINT16_MAX == mx.matrix[i]->birth_slot)
 80178e0:	4a90      	ldr	r2, [pc, #576]	; (8017b24 <mixer_process_rx_data+0x518>)
 80178e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80178e6:	3316      	adds	r3, #22
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	4413      	add	r3, r2
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	881b      	ldrh	r3, [r3, #0]
 80178f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178f4:	4293      	cmp	r3, r2
 80178f6:	f040 8342 	bne.w	8017f7e <mixer_process_rx_data+0x972>
				{
					PROFILE("mixer_process_rx_data() new row begin");
 80178fa:	bf00      	nop

					mx.matrix[i]->birth_slot = p->slot_number;
 80178fc:	4b8a      	ldr	r3, [pc, #552]	; (8017b28 <mixer_process_rx_data+0x51c>)
 80178fe:	681a      	ldr	r2, [r3, #0]
 8017900:	4988      	ldr	r1, [pc, #544]	; (8017b24 <mixer_process_rx_data+0x518>)
 8017902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017906:	3316      	adds	r3, #22
 8017908:	009b      	lsls	r3, r3, #2
 801790a:	440b      	add	r3, r1
 801790c:	685b      	ldr	r3, [r3, #4]
 801790e:	8892      	ldrh	r2, [r2, #4]
 8017910:	b292      	uxth	r2, r2
 8017912:	801a      	strh	r2, [r3, #0]

					mx.recent_innovative_slot = p->slot_number;
 8017914:	4b84      	ldr	r3, [pc, #528]	; (8017b28 <mixer_process_rx_data+0x51c>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	889b      	ldrh	r3, [r3, #4]
 801791a:	b29a      	uxth	r2, r3
 801791c:	4b81      	ldr	r3, [pc, #516]	; (8017b24 <mixer_process_rx_data+0x518>)
 801791e:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464

					assert_reset(chirp_config.payload.pos == chirp_config.coding_vector.pos + chirp_config.coding_vector.len);
 8017922:	4b82      	ldr	r3, [pc, #520]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017924:	7a1b      	ldrb	r3, [r3, #8]
 8017926:	461a      	mov	r2, r3
 8017928:	4b80      	ldr	r3, [pc, #512]	; (8017b2c <mixer_process_rx_data+0x520>)
 801792a:	799b      	ldrb	r3, [r3, #6]
 801792c:	4619      	mov	r1, r3
 801792e:	4b7f      	ldr	r3, [pc, #508]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017930:	79db      	ldrb	r3, [r3, #7]
 8017932:	440b      	add	r3, r1
 8017934:	429a      	cmp	r2, r3
 8017936:	d01e      	beq.n	8017976 <mixer_process_rx_data+0x36a>
 8017938:	4b7c      	ldr	r3, [pc, #496]	; (8017b2c <mixer_process_rx_data+0x520>)
 801793a:	7a1b      	ldrb	r3, [r3, #8]
 801793c:	461a      	mov	r2, r3
 801793e:	4b7b      	ldr	r3, [pc, #492]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017940:	799b      	ldrb	r3, [r3, #6]
 8017942:	4619      	mov	r1, r3
 8017944:	4b79      	ldr	r3, [pc, #484]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017946:	79db      	ldrb	r3, [r3, #7]
 8017948:	440b      	add	r3, r1
 801794a:	429a      	cmp	r2, r3
 801794c:	d101      	bne.n	8017952 <mixer_process_rx_data+0x346>
 801794e:	2301      	movs	r3, #1
 8017950:	e000      	b.n	8017954 <mixer_process_rx_data+0x348>
 8017952:	2300      	movs	r3, #0
 8017954:	4618      	mov	r0, r3
 8017956:	f00a fe71 	bl	802263c <iprintf>
 801795a:	4b74      	ldr	r3, [pc, #464]	; (8017b2c <mixer_process_rx_data+0x520>)
 801795c:	7a1b      	ldrb	r3, [r3, #8]
 801795e:	461a      	mov	r2, r3
 8017960:	4b72      	ldr	r3, [pc, #456]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017962:	799b      	ldrb	r3, [r3, #6]
 8017964:	4619      	mov	r1, r3
 8017966:	4b71      	ldr	r3, [pc, #452]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017968:	79db      	ldrb	r3, [r3, #7]
 801796a:	440b      	add	r3, r1
 801796c:	429a      	cmp	r2, r3
 801796e:	d002      	beq.n	8017976 <mixer_process_rx_data+0x36a>
  __ASM volatile ("cpsid f" : : : "memory");
 8017970:	b671      	cpsid	f
 8017972:	f7fe fb9d 	bl	80160b0 <NVIC_SystemReset>
					assert_reset(chirp_config.matrix_payload.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len);
 8017976:	4b6d      	ldr	r3, [pc, #436]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017978:	7f9b      	ldrb	r3, [r3, #30]
 801797a:	461a      	mov	r2, r3
 801797c:	4b6b      	ldr	r3, [pc, #428]	; (8017b2c <mixer_process_rx_data+0x520>)
 801797e:	7f1b      	ldrb	r3, [r3, #28]
 8017980:	4619      	mov	r1, r3
 8017982:	4b6a      	ldr	r3, [pc, #424]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017984:	7f5b      	ldrb	r3, [r3, #29]
 8017986:	440b      	add	r3, r1
 8017988:	429a      	cmp	r2, r3
 801798a:	d01e      	beq.n	80179ca <mixer_process_rx_data+0x3be>
 801798c:	4b67      	ldr	r3, [pc, #412]	; (8017b2c <mixer_process_rx_data+0x520>)
 801798e:	7f9b      	ldrb	r3, [r3, #30]
 8017990:	461a      	mov	r2, r3
 8017992:	4b66      	ldr	r3, [pc, #408]	; (8017b2c <mixer_process_rx_data+0x520>)
 8017994:	7f1b      	ldrb	r3, [r3, #28]
 8017996:	4619      	mov	r1, r3
 8017998:	4b64      	ldr	r3, [pc, #400]	; (8017b2c <mixer_process_rx_data+0x520>)
 801799a:	7f5b      	ldrb	r3, [r3, #29]
 801799c:	440b      	add	r3, r1
 801799e:	429a      	cmp	r2, r3
 80179a0:	d101      	bne.n	80179a6 <mixer_process_rx_data+0x39a>
 80179a2:	2301      	movs	r3, #1
 80179a4:	e000      	b.n	80179a8 <mixer_process_rx_data+0x39c>
 80179a6:	2300      	movs	r3, #0
 80179a8:	4618      	mov	r0, r3
 80179aa:	f00a fe47 	bl	802263c <iprintf>
 80179ae:	4b5f      	ldr	r3, [pc, #380]	; (8017b2c <mixer_process_rx_data+0x520>)
 80179b0:	7f9b      	ldrb	r3, [r3, #30]
 80179b2:	461a      	mov	r2, r3
 80179b4:	4b5d      	ldr	r3, [pc, #372]	; (8017b2c <mixer_process_rx_data+0x520>)
 80179b6:	7f1b      	ldrb	r3, [r3, #28]
 80179b8:	4619      	mov	r1, r3
 80179ba:	4b5c      	ldr	r3, [pc, #368]	; (8017b2c <mixer_process_rx_data+0x520>)
 80179bc:	7f5b      	ldrb	r3, [r3, #29]
 80179be:	440b      	add	r3, r1
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d002      	beq.n	80179ca <mixer_process_rx_data+0x3be>
 80179c4:	b671      	cpsid	f
 80179c6:	f7fe fb73 	bl	80160b0 <NVIC_SystemReset>

					if (pp_used)
 80179ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	f000 80c8 	beq.w	8017b64 <mixer_process_rx_data+0x558>
					{
						memxor_block(&(p->packet_chunk[chirp_config.payload.pos + PAYLOAD_SHIFT]), pp, PAYLOAD_SIZE, pp_used);
 80179d4:	4b54      	ldr	r3, [pc, #336]	; (8017b28 <mixer_process_rx_data+0x51c>)
 80179d6:	681a      	ldr	r2, [r3, #0]
 80179d8:	4b54      	ldr	r3, [pc, #336]	; (8017b2c <mixer_process_rx_data+0x520>)
 80179da:	7a1b      	ldrb	r3, [r3, #8]
 80179dc:	4619      	mov	r1, r3
 80179de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80179e2:	440b      	add	r3, r1
 80179e4:	3308      	adds	r3, #8
 80179e6:	441a      	add	r2, r3
 80179e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80179ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80179f0:	1d3a      	adds	r2, r7, #4
 80179f2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80179f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80179fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80179fe:	67fb      	str	r3, [r7, #124]	; 0x7c
	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 8017a00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a02:	2b08      	cmp	r3, #8
 8017a04:	dd0e      	ble.n	8017a24 <mixer_process_rx_data+0x418>
 8017a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a08:	2b08      	cmp	r3, #8
 8017a0a:	dc01      	bgt.n	8017a10 <mixer_process_rx_data+0x404>
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	e000      	b.n	8017a12 <mixer_process_rx_data+0x406>
 8017a10:	2300      	movs	r3, #0
 8017a12:	4618      	mov	r0, r3
 8017a14:	f00a fe12 	bl	802263c <iprintf>
 8017a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a1a:	2b08      	cmp	r3, #8
 8017a1c:	dd02      	ble.n	8017a24 <mixer_process_rx_data+0x418>
 8017a1e:	b671      	cpsid	f
 8017a20:	f7fe fb46 	bl	80160b0 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8017a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	f000 809c 	beq.w	8017b64 <mixer_process_rx_data+0x558>
 8017a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	f000 8097 	beq.w	8017b64 <mixer_process_rx_data+0x558>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8017a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017a3a:	2b08      	cmp	r3, #8
 8017a3c:	d80c      	bhi.n	8017a58 <mixer_process_rx_data+0x44c>
 8017a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a40:	2b07      	cmp	r3, #7
 8017a42:	dc09      	bgt.n	8017a58 <mixer_process_rx_data+0x44c>
		memxor_block_straight(dest, src, size, num_src);
 8017a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017a4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8017a4e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017a52:	f7f6 fc37 	bl	800e2c4 <memxor_block_straight>
 8017a56:	e085      	b.n	8017b64 <mixer_process_rx_data+0x558>
	if (num_src < MEMXOR_BLOCKSIZE)
 8017a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a5a:	2b07      	cmp	r3, #7
 8017a5c:	dc49      	bgt.n	8017af2 <mixer_process_rx_data+0x4e6>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8017a5e:	4b34      	ldr	r3, [pc, #208]	; (8017b30 <mixer_process_rx_data+0x524>)
 8017a60:	f023 0301 	bic.w	r3, r3, #1
 8017a64:	62bb      	str	r3, [r7, #40]	; 0x28
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8017a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a68:	3301      	adds	r3, #1
 8017a6a:	0fda      	lsrs	r2, r3, #31
 8017a6c:	4413      	add	r3, r2
 8017a6e:	105b      	asrs	r3, r3, #1
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	f1c3 0312 	rsb	r3, r3, #18
 8017a76:	67bb      	str	r3, [r7, #120]	; 0x78
		if (num_src & 1)
 8017a78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a7a:	f003 0301 	and.w	r3, r3, #1
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d00b      	beq.n	8017a9a <mixer_process_rx_data+0x48e>
			loop_start += 2;
 8017a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a84:	3302      	adds	r3, #2
 8017a86:	67bb      	str	r3, [r7, #120]	; 0x78
			ins.w[loop_start + 1] = ins.w[2];
 8017a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a8e:	3301      	adds	r3, #1
 8017a90:	009b      	lsls	r3, r3, #2
 8017a92:	440b      	add	r3, r1
 8017a94:	6892      	ldr	r2, [r2, #8]
 8017a96:	601a      	str	r2, [r3, #0]
 8017a98:	e006      	b.n	8017aa8 <mixer_process_rx_data+0x49c>
			ins.w[loop_start] = ins.w[2];
 8017a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017aa0:	009b      	lsls	r3, r3, #2
 8017aa2:	440b      	add	r3, r1
 8017aa4:	6892      	ldr	r2, [r2, #8]
 8017aa6:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 8017aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017aaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017aae:	3b03      	subs	r3, #3
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	005b      	lsls	r3, r3, #1
 8017ab4:	b29b      	uxth	r3, r3
 8017ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ab8:	3208      	adds	r2, #8
 8017aba:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8017abe:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8017ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ac8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017acc:	3b16      	subs	r3, #22
 8017ace:	b29b      	uxth	r3, r3
 8017ad0:	005b      	lsls	r3, r3, #1
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8017ad8:	4013      	ands	r3, r2
 8017ada:	b299      	uxth	r1, r3
 8017adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ade:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8017ae2:	4b14      	ldr	r3, [pc, #80]	; (8017b34 <mixer_process_rx_data+0x528>)
 8017ae4:	430b      	orrs	r3, r1
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017aea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017aee:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8017af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017af6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8017afa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8017afe:	f00d fcbf 	bl	8025480 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 8017b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017b04:	2b07      	cmp	r3, #7
 8017b06:	dc2d      	bgt.n	8017b64 <mixer_process_rx_data+0x558>
		if (num_src & 1)
 8017b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d014      	beq.n	8017b3c <mixer_process_rx_data+0x530>
			ins.w[loop_start + 1] = 0x0104ea81;
 8017b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017b16:	3301      	adds	r3, #1
 8017b18:	009b      	lsls	r3, r3, #2
 8017b1a:	4413      	add	r3, r2
 8017b1c:	4a06      	ldr	r2, [pc, #24]	; (8017b38 <mixer_process_rx_data+0x52c>)
 8017b1e:	601a      	str	r2, [r3, #0]
 8017b20:	e012      	b.n	8017b48 <mixer_process_rx_data+0x53c>
 8017b22:	bf00      	nop
 8017b24:	200014f0 	.word	0x200014f0
 8017b28:	2000047c 	.word	0x2000047c
 8017b2c:	20001430 	.word	0x20001430
 8017b30:	20000005 	.word	0x20000005
 8017b34:	ffffa800 	.word	0xffffa800
 8017b38:	0104ea81 	.word	0x0104ea81
			ins.w[loop_start] = 0x0103ea81;
 8017b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017b40:	009b      	lsls	r3, r3, #2
 8017b42:	4413      	add	r3, r2
 8017b44:	4aa5      	ldr	r2, [pc, #660]	; (8017ddc <mixer_process_rx_data+0x7d0>)
 8017b46:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 8017b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4a:	3308      	adds	r3, #8
 8017b4c:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8017b50:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8017b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b54:	3356      	adds	r3, #86	; 0x56
 8017b56:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 8017b5a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017b5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017b60:	f3bf 8f6f 	isb	sy
	__ASM volatile
 8017b64:	f3ef 8310 	mrs	r3, PRIMASK
 8017b68:	b672      	cpsid	i
 8017b6a:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017b6c:	f3bf 8f5f 	dmb	sy
	return ie;
 8017b70:	4623      	mov	r3, r4
					// NOTE: at this point the rx queue packet is valid (again) since processing
					// has been done (actually, the rx queue packet will be copied into the row)
					// NOTE: there is no problem if mx.tx_reserve points to current row here
					// because it is not used on ISR level
					{
						int ie = gpi_int_lock();
 8017b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					// TP TODO:
						if ((uintptr_t)mx.tx_sideload - (uintptr_t)mx.rx_queue[0] >= 4 * chirp_config.packet_len)
 8017b76:	4b9a      	ldr	r3, [pc, #616]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b7a:	461a      	mov	r2, r3
 8017b7c:	4b98      	ldr	r3, [pc, #608]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	1ad3      	subs	r3, r2, r3
 8017b82:	4a98      	ldr	r2, [pc, #608]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017b84:	8ad2      	ldrh	r2, [r2, #22]
 8017b86:	b292      	uxth	r2, r2
 8017b88:	0092      	lsls	r2, r2, #2
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	d307      	bcc.n	8017b9e <mixer_process_rx_data+0x592>
							mx.tx_sideload = &(p->packet_chunk[chirp_config.coding_vector.pos]);
 8017b8e:	4b96      	ldr	r3, [pc, #600]	; (8017de8 <mixer_process_rx_data+0x7dc>)
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	4b94      	ldr	r3, [pc, #592]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017b94:	799b      	ldrb	r3, [r3, #6]
 8017b96:	3308      	adds	r3, #8
 8017b98:	4413      	add	r3, r2
 8017b9a:	4a91      	ldr	r2, [pc, #580]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8017b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017ba2:	677b      	str	r3, [r7, #116]	; 0x74
 8017ba4:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017baa:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017bae:	f383 8810 	msr	PRIMASK, r3
	__ASM volatile
 8017bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb6:	b672      	cpsid	i
 8017bb8:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017bba:	f3bf 8f5f 	dmb	sy
	return ie;
 8017bbe:	4623      	mov	r3, r4
					// for the case that assertions are inactive (i.e. NDEBUG).
					// NOTE: assert() sits within the condition body to keep time with interrupts
					// locked as short as possible in the normal case
					#if MX_REQUEST
					{
						int ie = gpi_int_lock();
 8017bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

						if (ABS(mx.request->help_index) - 1 == i)
 8017bc4:	4b86      	ldr	r3, [pc, #536]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017bc6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017bca:	895b      	ldrh	r3, [r3, #10]
 8017bcc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8017bd0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	bfb8      	it	lt
 8017bd8:	425b      	neglt	r3, r3
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d13e      	bne.n	8017c62 <mixer_process_rx_data+0x656>
						{
							{
								assert_reset(ABS(mx.request->help_index) - 1 != i);
 8017be4:	4b7e      	ldr	r3, [pc, #504]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017be6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017bea:	895b      	ldrh	r3, [r3, #10]
 8017bec:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8017bf0:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	bfb8      	it	lt
 8017bf8:	425b      	neglt	r3, r3
 8017bfa:	3b01      	subs	r3, #1
 8017bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d128      	bne.n	8017c56 <mixer_process_rx_data+0x64a>
 8017c04:	4b76      	ldr	r3, [pc, #472]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017c06:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017c0a:	895b      	ldrh	r3, [r3, #10]
 8017c0c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8017c10:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	bfb8      	it	lt
 8017c18:	425b      	neglt	r3, r3
 8017c1a:	3b01      	subs	r3, #1
 8017c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d001      	beq.n	8017c28 <mixer_process_rx_data+0x61c>
 8017c24:	2301      	movs	r3, #1
 8017c26:	e000      	b.n	8017c2a <mixer_process_rx_data+0x61e>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f00a fd06 	bl	802263c <iprintf>
 8017c30:	4b6b      	ldr	r3, [pc, #428]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017c32:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017c36:	895b      	ldrh	r3, [r3, #10]
 8017c38:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8017c3c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	bfb8      	it	lt
 8017c44:	425b      	neglt	r3, r3
 8017c46:	3b01      	subs	r3, #1
 8017c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d102      	bne.n	8017c56 <mixer_process_rx_data+0x64a>
  __ASM volatile ("cpsid f" : : : "memory");
 8017c50:	b671      	cpsid	f
 8017c52:	f7fe fa2d 	bl	80160b0 <NVIC_SystemReset>

								GPI_TRACE_MSG_FAST(TRACE_ERROR, "!!! request help index points to empty row -> check program, must not happen !!!");
 8017c56:	bf00      	nop
							}
							mx.request->help_index = 0;
 8017c58:	4b61      	ldr	r3, [pc, #388]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017c5a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017c5e:	2200      	movs	r2, #0
 8017c60:	815a      	strh	r2, [r3, #10]
 8017c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c66:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("dmb 0xF":::"memory");
 8017c68:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017c72:	f383 8810 	msr	PRIMASK, r3

						gpi_int_unlock(ie);
					}
					#endif

					gpi_memcpy_dma_aligned(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]),
 8017c76:	4a5a      	ldr	r2, [pc, #360]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017c78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017c7c:	3316      	adds	r3, #22
 8017c7e:	009b      	lsls	r3, r3, #2
 8017c80:	4413      	add	r3, r2
 8017c82:	685a      	ldr	r2, [r3, #4]
 8017c84:	4b57      	ldr	r3, [pc, #348]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017c86:	7f1b      	ldrb	r3, [r3, #28]
 8017c88:	009b      	lsls	r3, r3, #2
 8017c8a:	4413      	add	r3, r2
 8017c8c:	1d19      	adds	r1, r3, #4
 8017c8e:	4b56      	ldr	r3, [pc, #344]	; (8017de8 <mixer_process_rx_data+0x7dc>)
 8017c90:	681a      	ldr	r2, [r3, #0]
 8017c92:	4b54      	ldr	r3, [pc, #336]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017c94:	799b      	ldrb	r3, [r3, #6]
 8017c96:	3308      	adds	r3, #8
 8017c98:	441a      	add	r2, r3
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t));
 8017c9a:	4b52      	ldr	r3, [pc, #328]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017c9c:	7f5b      	ldrb	r3, [r3, #29]
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	4b50      	ldr	r3, [pc, #320]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017ca2:	7fdb      	ldrb	r3, [r3, #31]
 8017ca4:	4403      	add	r3, r0
					gpi_memcpy_dma_aligned(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]),
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	66f9      	str	r1, [r7, #108]	; 0x6c
 8017caa:	66ba      	str	r2, [r7, #104]	; 0x68
 8017cac:	667b      	str	r3, [r7, #100]	; 0x64
 8017cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017cb2:	4610      	mov	r0, r2
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017cb8:	461a      	mov	r2, r3
 8017cba:	f009 fea7 	bl	8021a0c <memcpy>
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#endif

					mx.rank++;
 8017cbe:	4b48      	ldr	r3, [pc, #288]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017cc0:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	b29a      	uxth	r2, r3
 8017cc8:	4b45      	ldr	r3, [pc, #276]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017cca:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
					// 2) it may be beneficial if it points to a quite new row
					#if 0	// activate only for special purposes like evaluating most stupid behavior
					if (NULL == mx.tx_reserve)
					#endif

					mx.tx_reserve = (Matrix_Row *)&(mx.matrix[i]->birth_slot);
 8017cce:	4a44      	ldr	r2, [pc, #272]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017cd4:	3316      	adds	r3, #22
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	4413      	add	r3, r2
 8017cda:	685b      	ldr	r3, [r3, #4]
 8017cdc:	4a40      	ldr	r2, [pc, #256]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017cde:	6493      	str	r3, [r2, #72]	; 0x48

					// update mx.empty_row if needed
					// NOTE: mx.empty_row is kept static to avoid expensive search runs everytime
					// an empty row is needed. starting from its last position is much cheaper.
					if (mx.empty_row == (Matrix_Row *)&(mx.matrix[i]->birth_slot))
 8017ce0:	4b3f      	ldr	r3, [pc, #252]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017ce2:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017ce6:	493e      	ldr	r1, [pc, #248]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017cec:	3316      	adds	r3, #22
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	440b      	add	r3, r1
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	f040 8087 	bne.w	8017e08 <mixer_process_rx_data+0x7fc>
					{
						if (chirp_config.mx_generation_size == mx.rank)
 8017cfa:	4b3a      	ldr	r3, [pc, #232]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017cfc:	885b      	ldrh	r3, [r3, #2]
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	4b37      	ldr	r3, [pc, #220]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d02:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017d06:	429a      	cmp	r2, r3
 8017d08:	d118      	bne.n	8017d3c <mixer_process_rx_data+0x730>
						{
							mx.empty_row = NULL;
 8017d0a:	4b35      	ldr	r3, [pc, #212]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 8017d12:	e079      	b.n	8017e08 <mixer_process_rx_data+0x7fc>
						}
						else
						{
							while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
							{
								mx.empty_row -= chirp_config.matrix_size_32;
 8017d14:	4b32      	ldr	r3, [pc, #200]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d16:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017d1a:	4b32      	ldr	r3, [pc, #200]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017d1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	009b      	lsls	r3, r3, #2
 8017d22:	425b      	negs	r3, r3
 8017d24:	4413      	add	r3, r2
 8017d26:	4a2e      	ldr	r2, [pc, #184]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d28:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

								if (UINT16_MAX == mx.empty_row->birth_slot)
 8017d2c:	4b2c      	ldr	r3, [pc, #176]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d2e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017d32:	881b      	ldrh	r3, [r3, #0]
 8017d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d007      	beq.n	8017d4c <mixer_process_rx_data+0x740>
							while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017d3c:	4b28      	ldr	r3, [pc, #160]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d3e:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017d42:	4b27      	ldr	r3, [pc, #156]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d46:	429a      	cmp	r2, r3
 8017d48:	d8e4      	bhi.n	8017d14 <mixer_process_rx_data+0x708>
 8017d4a:	e000      	b.n	8017d4e <mixer_process_rx_data+0x742>
									break;
 8017d4c:	bf00      	nop
							}

							if (mx.empty_row < (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017d4e:	4b24      	ldr	r3, [pc, #144]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d50:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017d54:	4b22      	ldr	r3, [pc, #136]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d22f      	bcs.n	8017dbc <mixer_process_rx_data+0x7b0>
							{
								mx.empty_row = (Matrix_Row *)&(mx.matrix[chirp_config.mx_generation_size - 1]->matrix_chunk[chirp_config.matrix_chunk_32_len]);
 8017d5c:	4b21      	ldr	r3, [pc, #132]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017d5e:	885b      	ldrh	r3, [r3, #2]
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	3b01      	subs	r3, #1
 8017d64:	4a1e      	ldr	r2, [pc, #120]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d66:	3316      	adds	r3, #22
 8017d68:	009b      	lsls	r3, r3, #2
 8017d6a:	4413      	add	r3, r2
 8017d6c:	685a      	ldr	r2, [r3, #4]
 8017d6e:	4b1d      	ldr	r3, [pc, #116]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017d70:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	009b      	lsls	r3, r3, #2
 8017d76:	4413      	add	r3, r2
 8017d78:	3304      	adds	r3, #4
 8017d7a:	4a19      	ldr	r2, [pc, #100]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d7c:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
								while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017d80:	e013      	b.n	8017daa <mixer_process_rx_data+0x79e>
								{
									mx.empty_row -= chirp_config.matrix_size_32;
 8017d82:	4b17      	ldr	r3, [pc, #92]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d84:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017d88:	4b16      	ldr	r3, [pc, #88]	; (8017de4 <mixer_process_rx_data+0x7d8>)
 8017d8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	009b      	lsls	r3, r3, #2
 8017d90:	425b      	negs	r3, r3
 8017d92:	4413      	add	r3, r2
 8017d94:	4a12      	ldr	r2, [pc, #72]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d96:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

									if (UINT16_MAX == mx.empty_row->birth_slot)
 8017d9a:	4b11      	ldr	r3, [pc, #68]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017d9c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8017da0:	881b      	ldrh	r3, [r3, #0]
 8017da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d007      	beq.n	8017dba <mixer_process_rx_data+0x7ae>
								while (mx.empty_row > (Matrix_Row *)&(mx.matrix[0]->birth_slot))
 8017daa:	4b0d      	ldr	r3, [pc, #52]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017dac:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017db0:	4b0b      	ldr	r3, [pc, #44]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d8e4      	bhi.n	8017d82 <mixer_process_rx_data+0x776>
 8017db8:	e000      	b.n	8017dbc <mixer_process_rx_data+0x7b0>
										break;
 8017dba:	bf00      	nop
                                }
                            }

							assert_reset(mx.empty_row >= (Matrix_Row *)&(mx.matrix[0]->birth_slot));
 8017dbc:	4b08      	ldr	r3, [pc, #32]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017dbe:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017dc2:	4b07      	ldr	r3, [pc, #28]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d21e      	bcs.n	8017e08 <mixer_process_rx_data+0x7fc>
 8017dca:	4b05      	ldr	r3, [pc, #20]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017dcc:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017dd0:	4b03      	ldr	r3, [pc, #12]	; (8017de0 <mixer_process_rx_data+0x7d4>)
 8017dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d309      	bcc.n	8017dec <mixer_process_rx_data+0x7e0>
 8017dd8:	2301      	movs	r3, #1
 8017dda:	e008      	b.n	8017dee <mixer_process_rx_data+0x7e2>
 8017ddc:	0103ea81 	.word	0x0103ea81
 8017de0:	200014f0 	.word	0x200014f0
 8017de4:	20001430 	.word	0x20001430
 8017de8:	2000047c 	.word	0x2000047c
 8017dec:	2300      	movs	r3, #0
 8017dee:	4618      	mov	r0, r3
 8017df0:	f00a fc24 	bl	802263c <iprintf>
 8017df4:	4ba7      	ldr	r3, [pc, #668]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017df6:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8017dfa:	4ba6      	ldr	r3, [pc, #664]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d202      	bcs.n	8017e08 <mixer_process_rx_data+0x7fc>
  __ASM volatile ("cpsid f" : : : "memory");
 8017e02:	b671      	cpsid	f
 8017e04:	f7fe f954 	bl	80160b0 <NVIC_SystemReset>
                        }
                    }

					// update request mask
					#if MX_REQUEST
						mx.request->mask[chirp_config.my_row_mask.pos + i / (sizeof(uint_fast_t) * 8)] &=
 8017e08:	4ba2      	ldr	r3, [pc, #648]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e0a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8017e0e:	4ba2      	ldr	r3, [pc, #648]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017e14:	4619      	mov	r1, r3
 8017e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017e1a:	095b      	lsrs	r3, r3, #5
 8017e1c:	4419      	add	r1, r3
 8017e1e:	3106      	adds	r1, #6
 8017e20:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
							~gpi_slu(1, (i % (sizeof(uint_fast_t) * 8)));
 8017e24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017e28:	f002 021f 	and.w	r2, r2, #31
 8017e2c:	2001      	movs	r0, #1
 8017e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8017e32:	43d2      	mvns	r2, r2
 8017e34:	4614      	mov	r4, r2
						mx.request->mask[chirp_config.my_row_mask.pos + i / (sizeof(uint_fast_t) * 8)] &=
 8017e36:	4a97      	ldr	r2, [pc, #604]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e38:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 8017e3c:	4896      	ldr	r0, [pc, #600]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e3e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8017e42:	4403      	add	r3, r0
 8017e44:	4021      	ands	r1, r4
 8017e46:	3306      	adds	r3, #6
 8017e48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						mx.request->my_column_pending =
							mx_request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.my_column_mask.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017e4c:	4b91      	ldr	r3, [pc, #580]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e4e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8017e52:	4b91      	ldr	r3, [pc, #580]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017e58:	3306      	adds	r3, #6
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	18d0      	adds	r0, r2, r3
 8017e5e:	4a8d      	ldr	r2, [pc, #564]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017e64:	3316      	adds	r3, #22
 8017e66:	009b      	lsls	r3, r3, #2
 8017e68:	4413      	add	r3, r2
 8017e6a:	685a      	ldr	r2, [r3, #4]
 8017e6c:	4b8a      	ldr	r3, [pc, #552]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e6e:	7f1b      	ldrb	r3, [r3, #28]
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	4413      	add	r3, r2
 8017e74:	1d19      	adds	r1, r3, #4
 8017e76:	4b88      	ldr	r3, [pc, #544]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e78:	7f5b      	ldrb	r3, [r3, #29]
 8017e7a:	009a      	lsls	r2, r3, #2
						mx.request->my_column_pending =
 8017e7c:	4b85      	ldr	r3, [pc, #532]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e7e:	f8d3 4870 	ldr.w	r4, [r3, #2160]	; 0x870
							mx_request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.my_column_mask.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017e82:	f001 f819 	bl	8018eb8 <mx_request_clear>
 8017e86:	4603      	mov	r3, r0
						mx.request->my_column_pending =
 8017e88:	8223      	strh	r3, [r4, #16]
						if (!mx.request->my_column_pending)
 8017e8a:	4b82      	ldr	r3, [pc, #520]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017e8c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8017e90:	8a1b      	ldrh	r3, [r3, #16]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <mixer_process_rx_data+0x898>
						{
							chirp_config.full_column = 0;
 8017e96:	4b80      	ldr	r3, [pc, #512]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017e98:	2200      	movs	r2, #0
 8017e9a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
							PRINTF_CHIRP("-----column_pending = 0-----\n");
 8017e9e:	487f      	ldr	r0, [pc, #508]	; (801809c <mixer_process_rx_data+0xa90>)
 8017ea0:	f00a fc54 	bl	802274c <puts>
						}

					#endif

					PROFILE("mixer_process_rx_data() new row done");
 8017ea4:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "new row %u, rank: %u", i, mx.rank);
 8017ea6:	bf00      	nop
					TRACE_MATRIX();
 8017ea8:	bf00      	nop

					GPI_TRACE_MSG(TRACE_VERBOSE, "empty row: %d", (NULL == mx.empty_row) ? -1 :  ARRAY_INDEX_SIZE_ADD(mx.empty_row, &(mx.matrix[0]->birth_slot), (1 + chirp_config.matrix_chunk_32_len) * sizeof(uint_fast_t)));
 8017eaa:	bf00      	nop

					// if we reached full rank with current packet: solve (decode)
					// NOTE: this may take some time. Although it would not be very critical if we
					// lose some packets meanwhile, we still yield to transmit something from time
					// to time.
					if (chirp_config.mx_generation_size == mx.rank)
 8017eac:	4b7a      	ldr	r3, [pc, #488]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017eae:	885b      	ldrh	r3, [r3, #2]
 8017eb0:	b29a      	uxth	r2, r3
 8017eb2:	4b78      	ldr	r3, [pc, #480]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017eb4:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	f040 8184 	bne.w	80181c6 <mixer_process_rx_data+0xbba>
					{
						PRINTF_CHIRP("------------full_rank------------:%d\n", mx.slot_number);
 8017ebe:	4b75      	ldr	r3, [pc, #468]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017ec0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8017ec4:	b29b      	uxth	r3, r3
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	4875      	ldr	r0, [pc, #468]	; (80180a0 <mixer_process_rx_data+0xa94>)
 8017eca:	f00a fbb7 	bl	802263c <iprintf>

						static Pt_Context	pt_decode;

						#if MX_VERBOSE_STATISTICS
							mx.stat_counter.slot_full_rank = p->slot_number;
 8017ece:	4b75      	ldr	r3, [pc, #468]	; (80180a4 <mixer_process_rx_data+0xa98>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	889b      	ldrh	r3, [r3, #4]
 8017ed4:	b29a      	uxth	r2, r3
 8017ed6:	4b6f      	ldr	r3, [pc, #444]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017ed8:	f8a3 289a 	strh.w	r2, [r3, #2202]	; 0x89a
	__ASM volatile
 8017edc:	f3ef 8310 	mrs	r3, PRIMASK
 8017ee0:	b672      	cpsid	i
 8017ee2:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8017ee4:	f3bf 8f5f 	dmb	sy
	return ie;
 8017ee8:	4623      	mov	r3, r4
						// anymore after full rank has been reached. If we wouldn't change it here,
						// then it may point to an invalid entry after queue wrap-around.
						// NOTE: gpi_int_lock() is only needed if access to pointers is not atomic
						// (e.g. on 8 bit machines)
						REORDER_BARRIER();		// make sure that mx.rank is written back
						int ie = gpi_int_lock();
 8017eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						{
							if ((mx.tx_packet->packet_chunk[chirp_config.rand.pos] & PACKET_IS_READY)>> PACKET_IS_READY_POS)
 8017eee:	4b69      	ldr	r3, [pc, #420]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ef2:	4a69      	ldr	r2, [pc, #420]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017ef4:	7b92      	ldrb	r2, [r2, #14]
 8017ef6:	4413      	add	r3, r2
 8017ef8:	7a1b      	ldrb	r3, [r3, #8]
 8017efa:	b25b      	sxtb	r3, r3
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	da02      	bge.n	8017f06 <mixer_process_rx_data+0x8fa>
							{
								mx.tx_sideload = NULL;
 8017f00:	4b64      	ldr	r3, [pc, #400]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017f02:	2200      	movs	r2, #0
 8017f04:	645a      	str	r2, [r3, #68]	; 0x44
 8017f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8017f0c:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8017f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f12:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f16:	f383 8810 	msr	PRIMASK, r3
							}
						}
						gpi_int_unlock(ie);

						// yield because packet processing may already have taken some time
						PT_YIELD(pt);
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017f24:	f240 624b 	movw	r2, #1611	; 0x64b
 8017f28:	801a      	strh	r2, [r3, #0]
 8017f2a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d102      	bne.n	8017f38 <mixer_process_rx_data+0x92c>
 8017f32:	bf00      	nop
 8017f34:	2301      	movs	r3, #1
 8017f36:	e189      	b.n	801824c <mixer_process_rx_data+0xc40>

						PROFILE("mixer_process_rx_data() decode begin");
 8017f38:	bf00      	nop
						// start decode thread
						// ATTENTION: don't use PT_SPAWN() because it returns PT_WAITING if child
						// thread yields. Here, we have to make sure that we return PT_YIELDED in
						// this case.
						// PT_SPAWN(pt, &pt_decode, decode(&pt_decode));
						PT_INIT(&pt_decode);
 8017f3a:	4b5b      	ldr	r3, [pc, #364]	; (80180a8 <mixer_process_rx_data+0xa9c>)
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	801a      	strh	r2, [r3, #0]
						while (PT_SCHEDULE(mixer_decode(&pt_decode)))
 8017f40:	bf00      	nop
 8017f42:	e00e      	b.n	8017f62 <mixer_process_rx_data+0x956>
							PT_YIELD(pt);
 8017f44:	2300      	movs	r3, #0
 8017f46:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8017f4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017f4e:	f240 6256 	movw	r2, #1622	; 0x656
 8017f52:	801a      	strh	r2, [r3, #0]
 8017f54:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d102      	bne.n	8017f62 <mixer_process_rx_data+0x956>
 8017f5c:	bf00      	nop
 8017f5e:	2301      	movs	r3, #1
 8017f60:	e174      	b.n	801824c <mixer_process_rx_data+0xc40>
						while (PT_SCHEDULE(mixer_decode(&pt_decode)))
 8017f62:	bf00      	nop
 8017f64:	4850      	ldr	r0, [pc, #320]	; (80180a8 <mixer_process_rx_data+0xa9c>)
 8017f66:	f000 f981 	bl	801826c <mixer_decode>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	2b01      	cmp	r3, #1
 8017f6e:	bf94      	ite	ls
 8017f70:	2301      	movls	r3, #1
 8017f72:	2300      	movhi	r3, #0
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1e4      	bne.n	8017f44 <mixer_process_rx_data+0x938>

						#if MX_SMART_SHUTDOWN_MAP
							update_full_rank_map(NULL);
						#endif

						PROFILE("mixer_process_rx_data() decode end");
 8017f7a:	bf00      	nop
                    }

					break;
 8017f7c:	e123      	b.n	80181c6 <mixer_process_rx_data+0xbba>
				}

				PROFILE("mixer_process_rx_data() matrix iteration checkpoint A");
 8017f7e:	bf00      	nop

				// else substitute
				memxor(&(p->packet_chunk[chirp_config.coding_vector.pos]), &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8017f80:	4b48      	ldr	r3, [pc, #288]	; (80180a4 <mixer_process_rx_data+0xa98>)
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	4b44      	ldr	r3, [pc, #272]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017f86:	799b      	ldrb	r3, [r3, #6]
 8017f88:	3308      	adds	r3, #8
 8017f8a:	18d1      	adds	r1, r2, r3
 8017f8c:	4a41      	ldr	r2, [pc, #260]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017f8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f92:	3316      	adds	r3, #22
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	4413      	add	r3, r2
 8017f98:	685a      	ldr	r2, [r3, #4]
 8017f9a:	4b3f      	ldr	r3, [pc, #252]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017f9c:	7f1b      	ldrb	r3, [r3, #28]
 8017f9e:	009b      	lsls	r3, r3, #2
 8017fa0:	4413      	add	r3, r2
 8017fa2:	1d1a      	adds	r2, r3, #4
 8017fa4:	4b3c      	ldr	r3, [pc, #240]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017fa6:	7f5b      	ldrb	r3, [r3, #29]
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	6539      	str	r1, [r7, #80]	; 0x50
 8017fac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017fae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (0 == size)
 8017fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d018      	beq.n	8017fe8 <mixer_process_rx_data+0x9dc>
	const unsigned int	*s = (const unsigned int*)src;
 8017fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fb8:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned int		*d = (unsigned int*)dest;
 8017fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fbc:	643b      	str	r3, [r7, #64]	; 0x40
	size = (size + sizeof(int) - 1) / sizeof(int);
 8017fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fc0:	3303      	adds	r3, #3
 8017fc2:	089b      	lsrs	r3, r3, #2
 8017fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017fc6:	e00c      	b.n	8017fe2 <mixer_process_rx_data+0x9d6>
		*d++ ^= *s++;
 8017fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fca:	1d1a      	adds	r2, r3, #4
 8017fcc:	647a      	str	r2, [r7, #68]	; 0x44
 8017fce:	6819      	ldr	r1, [r3, #0]
 8017fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fd2:	1d1a      	adds	r2, r3, #4
 8017fd4:	643a      	str	r2, [r7, #64]	; 0x40
 8017fd6:	681a      	ldr	r2, [r3, #0]
 8017fd8:	404a      	eors	r2, r1
 8017fda:	601a      	str	r2, [r3, #0]
	for (; size != 0; --size)
 8017fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fde:	3b01      	subs	r3, #1
 8017fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8017fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d1ef      	bne.n	8017fc8 <mixer_process_rx_data+0x9bc>

				pp[pp_used++] = &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_payload.pos]);
 8017fe8:	4a2a      	ldr	r2, [pc, #168]	; (8018094 <mixer_process_rx_data+0xa88>)
 8017fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017fee:	3316      	adds	r3, #22
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	4413      	add	r3, r2
 8017ff4:	6859      	ldr	r1, [r3, #4]
 8017ff6:	4b28      	ldr	r3, [pc, #160]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8017ff8:	7f9b      	ldrb	r3, [r3, #30]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018000:	1c5a      	adds	r2, r3, #1
 8018002:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8018006:	0082      	lsls	r2, r0, #2
 8018008:	440a      	add	r2, r1
 801800a:	3204      	adds	r2, #4
 801800c:	009b      	lsls	r3, r3, #2
 801800e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8018012:	440b      	add	r3, r1
 8018014:	f843 2cdc 	str.w	r2, [r3, #-220]

				if (NUM_ELEMENTS(pp) == pp_used)
 8018018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801801c:	2b08      	cmp	r3, #8
 801801e:	f040 80cd 	bne.w	80181bc <mixer_process_rx_data+0xbb0>
				{
					// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit
					// better code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
					memxor_block(&(p->packet_chunk[chirp_config.payload.pos + PAYLOAD_SHIFT]), pp, PAYLOAD_SIZE, NUM_ELEMENTS(pp));
 8018022:	4b20      	ldr	r3, [pc, #128]	; (80180a4 <mixer_process_rx_data+0xa98>)
 8018024:	681a      	ldr	r2, [r3, #0]
 8018026:	4b1c      	ldr	r3, [pc, #112]	; (8018098 <mixer_process_rx_data+0xa8c>)
 8018028:	7a1b      	ldrb	r3, [r3, #8]
 801802a:	4619      	mov	r1, r3
 801802c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018030:	440b      	add	r3, r1
 8018032:	3308      	adds	r3, #8
 8018034:	4413      	add	r3, r2
 8018036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018038:	1d3b      	adds	r3, r7, #4
 801803a:	63bb      	str	r3, [r7, #56]	; 0x38
 801803c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018040:	637b      	str	r3, [r7, #52]	; 0x34
 8018042:	2308      	movs	r3, #8
 8018044:	633b      	str	r3, [r7, #48]	; 0x30
	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 8018046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018048:	2b08      	cmp	r3, #8
 801804a:	dd0e      	ble.n	801806a <mixer_process_rx_data+0xa5e>
 801804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804e:	2b08      	cmp	r3, #8
 8018050:	dc01      	bgt.n	8018056 <mixer_process_rx_data+0xa4a>
 8018052:	2301      	movs	r3, #1
 8018054:	e000      	b.n	8018058 <mixer_process_rx_data+0xa4c>
 8018056:	2300      	movs	r3, #0
 8018058:	4618      	mov	r0, r3
 801805a:	f00a faef 	bl	802263c <iprintf>
 801805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018060:	2b08      	cmp	r3, #8
 8018062:	dd02      	ble.n	801806a <mixer_process_rx_data+0xa5e>
  __ASM volatile ("cpsid f" : : : "memory");
 8018064:	b671      	cpsid	f
 8018066:	f7fe f823 	bl	80160b0 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 801806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806c:	2b00      	cmp	r3, #0
 801806e:	f000 8093 	beq.w	8018198 <mixer_process_rx_data+0xb8c>
 8018072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018074:	2b00      	cmp	r3, #0
 8018076:	f000 808f 	beq.w	8018198 <mixer_process_rx_data+0xb8c>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 801807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801807c:	2b08      	cmp	r3, #8
 801807e:	d815      	bhi.n	80180ac <mixer_process_rx_data+0xaa0>
 8018080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018082:	2b07      	cmp	r3, #7
 8018084:	dc12      	bgt.n	80180ac <mixer_process_rx_data+0xaa0>
		memxor_block_straight(dest, src, size, num_src);
 8018086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801808a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801808c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801808e:	f7f6 f919 	bl	800e2c4 <memxor_block_straight>
 8018092:	e081      	b.n	8018198 <mixer_process_rx_data+0xb8c>
 8018094:	200014f0 	.word	0x200014f0
 8018098:	20001430 	.word	0x20001430
 801809c:	08025c98 	.word	0x08025c98
 80180a0:	08025cb8 	.word	0x08025cb8
 80180a4:	2000047c 	.word	0x2000047c
 80180a8:	20000480 	.word	0x20000480
	if (num_src < MEMXOR_BLOCKSIZE)
 80180ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ae:	2b07      	cmp	r3, #7
 80180b0:	dc49      	bgt.n	8018146 <mixer_process_rx_data+0xb3a>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 80180b2:	4b68      	ldr	r3, [pc, #416]	; (8018254 <mixer_process_rx_data+0xc48>)
 80180b4:	f023 0301 	bic.w	r3, r3, #1
 80180b8:	627b      	str	r3, [r7, #36]	; 0x24
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 80180ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180bc:	3301      	adds	r3, #1
 80180be:	0fda      	lsrs	r2, r3, #31
 80180c0:	4413      	add	r3, r2
 80180c2:	105b      	asrs	r3, r3, #1
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	f1c3 0312 	rsb	r3, r3, #18
 80180ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (num_src & 1)
 80180cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ce:	f003 0301 	and.w	r3, r3, #1
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d00b      	beq.n	80180ee <mixer_process_rx_data+0xae2>
			loop_start += 2;
 80180d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d8:	3302      	adds	r3, #2
 80180da:	62fb      	str	r3, [r7, #44]	; 0x2c
			ins.w[loop_start + 1] = ins.w[2];
 80180dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e2:	3301      	adds	r3, #1
 80180e4:	009b      	lsls	r3, r3, #2
 80180e6:	440b      	add	r3, r1
 80180e8:	6892      	ldr	r2, [r2, #8]
 80180ea:	601a      	str	r2, [r3, #0]
 80180ec:	e006      	b.n	80180fc <mixer_process_rx_data+0xaf0>
			ins.w[loop_start] = ins.w[2];
 80180ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180f4:	009b      	lsls	r3, r3, #2
 80180f6:	440b      	add	r3, r1
 80180f8:	6892      	ldr	r2, [r2, #8]
 80180fa:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80180fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018102:	3b03      	subs	r3, #3
 8018104:	b29b      	uxth	r3, r3
 8018106:	005b      	lsls	r3, r3, #1
 8018108:	b29b      	uxth	r3, r3
 801810a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801810c:	3208      	adds	r2, #8
 801810e:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8018112:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8018116:	b29b      	uxth	r3, r3
 8018118:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 801811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018120:	3b16      	subs	r3, #22
 8018122:	b29b      	uxth	r3, r3
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	b29a      	uxth	r2, r3
 8018128:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801812c:	4013      	ands	r3, r2
 801812e:	b299      	uxth	r1, r3
 8018130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018132:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8018136:	4b48      	ldr	r3, [pc, #288]	; (8018258 <mixer_process_rx_data+0xc4c>)
 8018138:	430b      	orrs	r3, r1
 801813a:	b29b      	uxth	r3, r3
 801813c:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801813e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018142:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8018146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801814a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801814c:	f00d f998 	bl	8025480 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 8018150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018152:	2b07      	cmp	r3, #7
 8018154:	dc20      	bgt.n	8018198 <mixer_process_rx_data+0xb8c>
		if (num_src & 1)
 8018156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018158:	f003 0301 	and.w	r3, r3, #1
 801815c:	2b00      	cmp	r3, #0
 801815e:	d007      	beq.n	8018170 <mixer_process_rx_data+0xb64>
			ins.w[loop_start + 1] = 0x0104ea81;
 8018160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018164:	3301      	adds	r3, #1
 8018166:	009b      	lsls	r3, r3, #2
 8018168:	4413      	add	r3, r2
 801816a:	4a3c      	ldr	r2, [pc, #240]	; (801825c <mixer_process_rx_data+0xc50>)
 801816c:	601a      	str	r2, [r3, #0]
 801816e:	e005      	b.n	801817c <mixer_process_rx_data+0xb70>
			ins.w[loop_start] = 0x0103ea81;
 8018170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	4413      	add	r3, r2
 8018178:	4a39      	ldr	r2, [pc, #228]	; (8018260 <mixer_process_rx_data+0xc54>)
 801817a:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 801817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817e:	3308      	adds	r3, #8
 8018180:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8018184:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8018186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018188:	3356      	adds	r3, #86	; 0x56
 801818a:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801818e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8018190:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018194:	f3bf 8f6f 	isb	sy

					// yield after each block to keep thread-level response time small (enough)
					PT_YIELD(pt);
 8018198:	2300      	movs	r3, #0
 801819a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 801819e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80181a2:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80181a6:	801a      	strh	r2, [r3, #0]
 80181a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d102      	bne.n	80181b6 <mixer_process_rx_data+0xbaa>
 80181b0:	bf00      	nop
 80181b2:	2301      	movs	r3, #1
 80181b4:	e04a      	b.n	801824c <mixer_process_rx_data+0xc40>

					pp_used = 0;
 80181b6:	2300      	movs	r3, #0
 80181b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                }

				PROFILE("mixer_process_rx_data() matrix iteration end");
 80181bc:	bf00      	nop
				PROFILE("mixer_process_rx_data() matrix iteration begin");
 80181be:	f7ff bb4f 	b.w	8017860 <mixer_process_rx_data+0x254>
				goto continue_;
 80181c2:	bf00      	nop
 80181c4:	e000      	b.n	80181c8 <mixer_process_rx_data+0xbbc>
					break;
 80181c6:	bf00      	nop
			}

			continue_:

			mx.rx_queue_num_read++;
 80181c8:	4b26      	ldr	r3, [pc, #152]	; (8018264 <mixer_process_rx_data+0xc58>)
 80181ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181cc:	3301      	adds	r3, #1
 80181ce:	4a25      	ldr	r2, [pc, #148]	; (8018264 <mixer_process_rx_data+0xc58>)
 80181d0:	63d3      	str	r3, [r2, #60]	; 0x3c

			#if MX_VERBOSE_STATISTICS
				mx.stat_counter.num_rx_queue_processed++;
 80181d2:	4b24      	ldr	r3, [pc, #144]	; (8018264 <mixer_process_rx_data+0xc58>)
 80181d4:	f8b3 3898 	ldrh.w	r3, [r3, #2200]	; 0x898
 80181d8:	3301      	adds	r3, #1
 80181da:	b29a      	uxth	r2, r3
 80181dc:	4b21      	ldr	r3, [pc, #132]	; (8018264 <mixer_process_rx_data+0xc58>)
 80181de:	f8a3 2898 	strh.w	r2, [r3, #2200]	; 0x898
			#endif

			PROFILE("mixer_process_rx_data() end");
 80181e2:	bf00      	nop
			PT_YIELD(pt);
 80181e4:	2300      	movs	r3, #0
 80181e6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80181ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80181ee:	f240 6281 	movw	r2, #1665	; 0x681
 80181f2:	801a      	strh	r2, [r3, #0]
 80181f4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d102      	bne.n	8018202 <mixer_process_rx_data+0xbf6>
 80181fc:	bf00      	nop
 80181fe:	2301      	movs	r3, #1
 8018200:	e024      	b.n	801824c <mixer_process_rx_data+0xc40>
		while (mx.rx_queue_num_read != mx.rx_queue_num_written)
 8018202:	4b18      	ldr	r3, [pc, #96]	; (8018264 <mixer_process_rx_data+0xc58>)
 8018204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018206:	4b17      	ldr	r3, [pc, #92]	; (8018264 <mixer_process_rx_data+0xc58>)
 8018208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801820a:	429a      	cmp	r2, r3
 801820c:	f47f aa5e 	bne.w	80176cc <mixer_process_rx_data+0xc0>
		PT_WAIT_UNTIL(pt, mx.events & BV(RX_READY));
 8018210:	f7ff ba42 	b.w	8017698 <mixer_process_rx_data+0x8c>
		}
	}
	else
	{
		printf("rx\n");
 8018214:	4814      	ldr	r0, [pc, #80]	; (8018268 <mixer_process_rx_data+0xc5c>)
 8018216:	f00a fa99 	bl	802274c <puts>
		PT_YIELD(pt);
 801821a:	2300      	movs	r3, #0
 801821c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8018220:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018224:	f240 6287 	movw	r2, #1671	; 0x687
 8018228:	801a      	strh	r2, [r3, #0]
 801822a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 801822e:	2b00      	cmp	r3, #0
 8018230:	f47f aa32 	bne.w	8017698 <mixer_process_rx_data+0x8c>
 8018234:	bf00      	nop
 8018236:	2301      	movs	r3, #1
 8018238:	e008      	b.n	801824c <mixer_process_rx_data+0xc40>
	}
	}
	PT_END(pt);
 801823a:	2300      	movs	r3, #0
 801823c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8018240:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018244:	2200      	movs	r2, #0
 8018246:	801a      	strh	r2, [r3, #0]
 8018248:	bf00      	nop
 801824a:	2303      	movs	r3, #3
}
 801824c:	4618      	mov	r0, r3
 801824e:	37e4      	adds	r7, #228	; 0xe4
 8018250:	46bd      	mov	sp, r7
 8018252:	bd90      	pop	{r4, r7, pc}
 8018254:	20000005 	.word	0x20000005
 8018258:	ffffa800 	.word	0xffffa800
 801825c:	0104ea81 	.word	0x0104ea81
 8018260:	0103ea81 	.word	0x0103ea81
 8018264:	200014f0 	.word	0x200014f0
 8018268:	08025ce0 	.word	0x08025ce0

0801826c <mixer_decode>:

//**************************************************************************************************

PT_THREAD(mixer_decode(Pt_Context *pt))
{
 801826c:	b590      	push	{r4, r7, lr}
 801826e:	b0a7      	sub	sp, #156	; 0x9c
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
	int ii = 0;
 8018274:	2300      	movs	r3, #0
 8018276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	PT_BEGIN(pt);
 801827a:	2301      	movs	r3, #1
 801827c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d004      	beq.n	8018292 <mixer_decode+0x26>
 8018288:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 801828c:	f000 830b 	beq.w	80188a6 <mixer_decode+0x63a>
 8018290:	e321      	b.n	80188d6 <mixer_decode+0x66a>
 8018292:	bf00      	nop

	static int_fast16_t		i;

	GPI_TRACE_MSG_FAST(TRACE_INFO, "start decoding...");
 8018294:	bf00      	nop
	PROFILE("mixer_decode() entry");
 8018296:	bf00      	nop

	for (i = chirp_config.mx_generation_size; i-- > 0;)
 8018298:	4ba5      	ldr	r3, [pc, #660]	; (8018530 <mixer_decode+0x2c4>)
 801829a:	885b      	ldrh	r3, [r3, #2]
 801829c:	b29b      	uxth	r3, r3
 801829e:	461a      	mov	r2, r3
 80182a0:	4ba4      	ldr	r3, [pc, #656]	; (8018534 <mixer_decode+0x2c8>)
 80182a2:	601a      	str	r2, [r3, #0]
 80182a4:	e306      	b.n	80188b4 <mixer_decode+0x648>
	{
		const unsigned int	SZB = sizeof(uint_fast_t) * 8;
 80182a6:	2320      	movs	r3, #32
 80182a8:	67fb      	str	r3, [r7, #124]	; 0x7c
		uint_fast_t			k, m, *pcv;

		// check if row is empty
		// ATTENTION: this is needed if decode() called before reaching full rank
		// (e.g. at end of round)
		if (UINT16_MAX == mx.matrix[i]->birth_slot)
 80182aa:	4ba2      	ldr	r3, [pc, #648]	; (8018534 <mixer_decode+0x2c8>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	4aa2      	ldr	r2, [pc, #648]	; (8018538 <mixer_decode+0x2cc>)
 80182b0:	3316      	adds	r3, #22
 80182b2:	009b      	lsls	r3, r3, #2
 80182b4:	4413      	add	r3, r2
 80182b6:	685b      	ldr	r3, [r3, #4]
 80182b8:	881b      	ldrh	r3, [r3, #0]
 80182ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182be:	4293      	cmp	r3, r2
 80182c0:	d100      	bne.n	80182c4 <mixer_decode+0x58>
 80182c2:	e2f7      	b.n	80188b4 <mixer_decode+0x648>
		{
			continue;
		}

		PROFILE("mixer_decode() row begin");
 80182c4:	bf00      	nop
		// inconsistent while solving. The same holds for s_request.help_index.
		// ATTENTION: we have to redo this check after every yield
		// NOTE: there is no problem if s_tx_reserve points into the matrix
		// because it is not used on ISR level
		{
			uint8_t	*p = &(mx.matrix[i]->matrix_chunk_8[chirp_config.matrix_coding_vector_8.pos]);
 80182c6:	4b9b      	ldr	r3, [pc, #620]	; (8018534 <mixer_decode+0x2c8>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	4a9b      	ldr	r2, [pc, #620]	; (8018538 <mixer_decode+0x2cc>)
 80182cc:	3316      	adds	r3, #22
 80182ce:	009b      	lsls	r3, r3, #2
 80182d0:	4413      	add	r3, r2
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	4a96      	ldr	r2, [pc, #600]	; (8018530 <mixer_decode+0x2c4>)
 80182d6:	7e12      	ldrb	r2, [r2, #24]
 80182d8:	4413      	add	r3, r2
 80182da:	3304      	adds	r3, #4
 80182dc:	67bb      	str	r3, [r7, #120]	; 0x78

			COMPUTE_BARRIER(p);
 80182de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
	__ASM volatile
 80182e0:	f3ef 8310 	mrs	r3, PRIMASK
 80182e4:	b672      	cpsid	i
 80182e6:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 80182e8:	f3bf 8f5f 	dmb	sy
	return ie;
 80182ec:	4623      	mov	r3, r4

			int ie = gpi_int_lock();
 80182ee:	677b      	str	r3, [r7, #116]	; 0x74

			if (mx.tx_sideload == p)
 80182f0:	4b91      	ldr	r3, [pc, #580]	; (8018538 <mixer_decode+0x2cc>)
 80182f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d102      	bne.n	8018300 <mixer_decode+0x94>
			{
		PRINTF("NULL 1\n");
				mx.tx_sideload = NULL;
 80182fa:	4b8f      	ldr	r3, [pc, #572]	; (8018538 <mixer_decode+0x2cc>)
 80182fc:	2200      	movs	r2, #0
 80182fe:	645a      	str	r2, [r3, #68]	; 0x44
 8018300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018304:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8018308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801830a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801830c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801830e:	f383 8810 	msr	PRIMASK, r3
	__ASM volatile
 8018312:	f3ef 8310 	mrs	r3, PRIMASK
 8018316:	b672      	cpsid	i
 8018318:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 801831a:	f3bf 8f5f 	dmb	sy
	return ie;
 801831e:	4623      	mov	r3, r4
			}

			gpi_int_unlock(ie);

			#if MX_REQUEST
				ie = gpi_int_lock();
 8018320:	677b      	str	r3, [r7, #116]	; 0x74

				if (ABS(mx.request->help_index) - 1 == i)
 8018322:	4b85      	ldr	r3, [pc, #532]	; (8018538 <mixer_decode+0x2cc>)
 8018324:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018328:	895b      	ldrh	r3, [r3, #10]
 801832a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 801832e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8018332:	2b00      	cmp	r3, #0
 8018334:	bfb8      	it	lt
 8018336:	425b      	neglt	r3, r3
 8018338:	1e5a      	subs	r2, r3, #1
 801833a:	4b7e      	ldr	r3, [pc, #504]	; (8018534 <mixer_decode+0x2c8>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	429a      	cmp	r2, r3
 8018340:	d104      	bne.n	801834c <mixer_decode+0xe0>
					mx.request->help_index = 0;
 8018342:	4b7d      	ldr	r3, [pc, #500]	; (8018538 <mixer_decode+0x2cc>)
 8018344:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018348:	2200      	movs	r2, #0
 801834a:	815a      	strh	r2, [r3, #10]
 801834c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801834e:	667b      	str	r3, [r7, #100]	; 0x64
 8018350:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8018354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018356:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801835a:	f383 8810 	msr	PRIMASK, r3

				gpi_int_unlock(ie);
			#endif
		}

		pp_used = 0;
 801835e:	2300      	movs	r3, #0
 8018360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		k = i + 1;
 8018364:	4b73      	ldr	r3, [pc, #460]	; (8018534 <mixer_decode+0x2c8>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	3301      	adds	r3, #1
 801836a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		pcv = &(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + k / SZB]);
 801836e:	4b71      	ldr	r3, [pc, #452]	; (8018534 <mixer_decode+0x2c8>)
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a71      	ldr	r2, [pc, #452]	; (8018538 <mixer_decode+0x2cc>)
 8018374:	3316      	adds	r3, #22
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	4413      	add	r3, r2
 801837a:	685a      	ldr	r2, [r3, #4]
 801837c:	4b6c      	ldr	r3, [pc, #432]	; (8018530 <mixer_decode+0x2c4>)
 801837e:	7f1b      	ldrb	r3, [r3, #28]
 8018380:	4618      	mov	r0, r3
 8018382:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8018386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018388:	fbb1 f3f3 	udiv	r3, r1, r3
 801838c:	4403      	add	r3, r0
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	4413      	add	r3, r2
 8018392:	3304      	adds	r3, #4
 8018394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		m = *pcv++ & ((-1 << (SZB - 1)) >> ((SZB - 1) - (k % SZB)));
 8018398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801839c:	1d1a      	adds	r2, r3, #4
 801839e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183a6:	3b01      	subs	r3, #1
 80183a8:	f04f 31ff 	mov.w	r1, #4294967295
 80183ac:	4099      	lsls	r1, r3
 80183ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80183b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80183b4:	fbb3 f0f0 	udiv	r0, r3, r0
 80183b8:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80183ba:	fb04 f000 	mul.w	r0, r4, r0
 80183be:	1a1b      	subs	r3, r3, r0
 80183c0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80183c2:	1ac3      	subs	r3, r0, r3
 80183c4:	3b01      	subs	r3, #1
 80183c6:	fa41 f303 	asr.w	r3, r1, r3
 80183ca:	4013      	ands	r3, r2
 80183cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		k &= ~(SZB - 1);
 80183d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183d2:	425b      	negs	r3, r3
 80183d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80183d8:	4013      	ands	r3, r2
 80183da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		while (k < chirp_config.mx_generation_size)
 80183de:	e155      	b.n	801868c <mixer_decode+0x420>
		{
			if (!m)
 80183e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d10e      	bne.n	8018406 <mixer_decode+0x19a>
			{
				m = *pcv++;
 80183e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80183ec:	1d1a      	adds	r2, r3, #4
 80183ee:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				k += SZB;
 80183f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80183fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183fe:	4413      	add	r3, r2
 8018400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				continue;
 8018404:	e142      	b.n	801868c <mixer_decode+0x420>
 8018406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801840a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801840c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801840e:	65bb      	str	r3, [r7, #88]	; 0x58
		asm
 8018410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018412:	2b00      	cmp	r3, #0
 8018414:	bf0e      	itee	eq
 8018416:	3b01      	subeq	r3, #1
 8018418:	fa93 f3a3 	rbitne	r3, r3
 801841c:	fab3 f383 	clzne	r3, r3
 8018420:	461c      	mov	r4, r3
	return y;
 8018422:	4623      	mov	r3, r4
				// point behind the coding vector. This is not critical because
				// we don't use this value (hence we don't catch it in favor of
				// performance), but in the strict sense this is an access violation.
			}

			k += gpi_get_lsb(m);
 8018424:	461a      	mov	r2, r3
 8018426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801842a:	4413      	add	r3, r2
 801842c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			if (k >= chirp_config.mx_generation_size)
 8018430:	4b3f      	ldr	r3, [pc, #252]	; (8018530 <mixer_decode+0x2c4>)
 8018432:	885b      	ldrh	r3, [r3, #2]
 8018434:	b29b      	uxth	r3, r3
 8018436:	461a      	mov	r2, r3
 8018438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801843c:	4293      	cmp	r3, r2
 801843e:	f080 812f 	bcs.w	80186a0 <mixer_decode+0x434>
			}

			// check if row to substitute is empty
			// ATTENTION: this is needed if decode() called before reaching full rank
			// (e.g. at end of round)
			if (UINT16_MAX != mx.matrix[k]->birth_slot)
 8018442:	4a3d      	ldr	r2, [pc, #244]	; (8018538 <mixer_decode+0x2cc>)
 8018444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018448:	3316      	adds	r3, #22
 801844a:	009b      	lsls	r3, r3, #2
 801844c:	4413      	add	r3, r2
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	881b      	ldrh	r3, [r3, #0]
 8018452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018456:	4293      	cmp	r3, r2
 8018458:	f000 8109 	beq.w	801866e <mixer_decode+0x402>
			{
				pp[pp_used++] = &(mx.matrix[k]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]);
 801845c:	4a36      	ldr	r2, [pc, #216]	; (8018538 <mixer_decode+0x2cc>)
 801845e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018462:	3316      	adds	r3, #22
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	4413      	add	r3, r2
 8018468:	6859      	ldr	r1, [r3, #4]
 801846a:	4b31      	ldr	r3, [pc, #196]	; (8018530 <mixer_decode+0x2c4>)
 801846c:	7f1b      	ldrb	r3, [r3, #28]
 801846e:	4618      	mov	r0, r3
 8018470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018474:	1c5a      	adds	r2, r3, #1
 8018476:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801847a:	0082      	lsls	r2, r0, #2
 801847c:	440a      	add	r2, r1
 801847e:	3204      	adds	r2, #4
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8018486:	440b      	add	r3, r1
 8018488:	f843 2c90 	str.w	r2, [r3, #-144]

				if (NUM_ELEMENTS(pp) == pp_used)
 801848c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018490:	2b08      	cmp	r3, #8
 8018492:	f040 80ec 	bne.w	801866e <mixer_decode+0x402>
				{
					assert_reset(chirp_config.matrix_payload.pos == chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len);
 8018496:	4b26      	ldr	r3, [pc, #152]	; (8018530 <mixer_decode+0x2c4>)
 8018498:	7f9b      	ldrb	r3, [r3, #30]
 801849a:	461a      	mov	r2, r3
 801849c:	4b24      	ldr	r3, [pc, #144]	; (8018530 <mixer_decode+0x2c4>)
 801849e:	7f1b      	ldrb	r3, [r3, #28]
 80184a0:	4619      	mov	r1, r3
 80184a2:	4b23      	ldr	r3, [pc, #140]	; (8018530 <mixer_decode+0x2c4>)
 80184a4:	7f5b      	ldrb	r3, [r3, #29]
 80184a6:	440b      	add	r3, r1
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d01e      	beq.n	80184ea <mixer_decode+0x27e>
 80184ac:	4b20      	ldr	r3, [pc, #128]	; (8018530 <mixer_decode+0x2c4>)
 80184ae:	7f9b      	ldrb	r3, [r3, #30]
 80184b0:	461a      	mov	r2, r3
 80184b2:	4b1f      	ldr	r3, [pc, #124]	; (8018530 <mixer_decode+0x2c4>)
 80184b4:	7f1b      	ldrb	r3, [r3, #28]
 80184b6:	4619      	mov	r1, r3
 80184b8:	4b1d      	ldr	r3, [pc, #116]	; (8018530 <mixer_decode+0x2c4>)
 80184ba:	7f5b      	ldrb	r3, [r3, #29]
 80184bc:	440b      	add	r3, r1
 80184be:	429a      	cmp	r2, r3
 80184c0:	d101      	bne.n	80184c6 <mixer_decode+0x25a>
 80184c2:	2301      	movs	r3, #1
 80184c4:	e000      	b.n	80184c8 <mixer_decode+0x25c>
 80184c6:	2300      	movs	r3, #0
 80184c8:	4618      	mov	r0, r3
 80184ca:	f00a f8b7 	bl	802263c <iprintf>
 80184ce:	4b18      	ldr	r3, [pc, #96]	; (8018530 <mixer_decode+0x2c4>)
 80184d0:	7f9b      	ldrb	r3, [r3, #30]
 80184d2:	461a      	mov	r2, r3
 80184d4:	4b16      	ldr	r3, [pc, #88]	; (8018530 <mixer_decode+0x2c4>)
 80184d6:	7f1b      	ldrb	r3, [r3, #28]
 80184d8:	4619      	mov	r1, r3
 80184da:	4b15      	ldr	r3, [pc, #84]	; (8018530 <mixer_decode+0x2c4>)
 80184dc:	7f5b      	ldrb	r3, [r3, #29]
 80184de:	440b      	add	r3, r1
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d002      	beq.n	80184ea <mixer_decode+0x27e>
  __ASM volatile ("cpsid f" : : : "memory");
 80184e4:	b671      	cpsid	f
 80184e6:	f7fd fde3 	bl	80160b0 <NVIC_SystemReset>

					PROFILE("mixer_decode() row memxor_block(full) begin");
 80184ea:	bf00      	nop

					// NOTE: calling with NUM_ELEMENTS(pp) instead of pp_used leads to a bit better
					// code because NUM_ELEMENTS(pp) is a constant (msp430-gcc 4.6.3)
					memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 80184ec:	4b11      	ldr	r3, [pc, #68]	; (8018534 <mixer_decode+0x2c8>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	4a11      	ldr	r2, [pc, #68]	; (8018538 <mixer_decode+0x2cc>)
 80184f2:	3316      	adds	r3, #22
 80184f4:	009b      	lsls	r3, r3, #2
 80184f6:	4413      	add	r3, r2
 80184f8:	685a      	ldr	r2, [r3, #4]
 80184fa:	4b0d      	ldr	r3, [pc, #52]	; (8018530 <mixer_decode+0x2c4>)
 80184fc:	7f1b      	ldrb	r3, [r3, #28]
 80184fe:	009b      	lsls	r3, r3, #2
 8018500:	4413      	add	r3, r2
 8018502:	1d1a      	adds	r2, r3, #4
						(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t), NUM_ELEMENTS(pp));
 8018504:	4b0a      	ldr	r3, [pc, #40]	; (8018530 <mixer_decode+0x2c4>)
 8018506:	7f5b      	ldrb	r3, [r3, #29]
 8018508:	4619      	mov	r1, r3
 801850a:	4b09      	ldr	r3, [pc, #36]	; (8018530 <mixer_decode+0x2c4>)
 801850c:	7fdb      	ldrb	r3, [r3, #31]
 801850e:	440b      	add	r3, r1
					memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 8018510:	009b      	lsls	r3, r3, #2
 8018512:	657a      	str	r2, [r7, #84]	; 0x54
 8018514:	f107 0208 	add.w	r2, r7, #8
 8018518:	653a      	str	r2, [r7, #80]	; 0x50
 801851a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801851c:	2308      	movs	r3, #8
 801851e:	64bb      	str	r3, [r7, #72]	; 0x48
	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 8018520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018522:	2b08      	cmp	r3, #8
 8018524:	dd14      	ble.n	8018550 <mixer_decode+0x2e4>
 8018526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018528:	2b08      	cmp	r3, #8
 801852a:	dc07      	bgt.n	801853c <mixer_decode+0x2d0>
 801852c:	2301      	movs	r3, #1
 801852e:	e006      	b.n	801853e <mixer_decode+0x2d2>
 8018530:	20001430 	.word	0x20001430
 8018534:	20000484 	.word	0x20000484
 8018538:	200014f0 	.word	0x200014f0
 801853c:	2300      	movs	r3, #0
 801853e:	4618      	mov	r0, r3
 8018540:	f00a f87c 	bl	802263c <iprintf>
 8018544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018546:	2b08      	cmp	r3, #8
 8018548:	dd02      	ble.n	8018550 <mixer_decode+0x2e4>
 801854a:	b671      	cpsid	f
 801854c:	f7fd fdb0 	bl	80160b0 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8018550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018552:	2b00      	cmp	r3, #0
 8018554:	f000 8087 	beq.w	8018666 <mixer_decode+0x3fa>
 8018558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801855a:	2b00      	cmp	r3, #0
 801855c:	f000 8083 	beq.w	8018666 <mixer_decode+0x3fa>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8018560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018562:	2b08      	cmp	r3, #8
 8018564:	d809      	bhi.n	801857a <mixer_decode+0x30e>
 8018566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018568:	2b07      	cmp	r3, #7
 801856a:	dc06      	bgt.n	801857a <mixer_decode+0x30e>
		memxor_block_straight(dest, src, size, num_src);
 801856c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801856e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018572:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018574:	f7f5 fea6 	bl	800e2c4 <memxor_block_straight>
 8018578:	e075      	b.n	8018666 <mixer_decode+0x3fa>
	if (num_src < MEMXOR_BLOCKSIZE)
 801857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801857c:	2b07      	cmp	r3, #7
 801857e:	dc49      	bgt.n	8018614 <mixer_decode+0x3a8>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8018580:	4b93      	ldr	r3, [pc, #588]	; (80187d0 <mixer_decode+0x564>)
 8018582:	f023 0301 	bic.w	r3, r3, #1
 8018586:	62bb      	str	r3, [r7, #40]	; 0x28
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 8018588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801858a:	3301      	adds	r3, #1
 801858c:	0fda      	lsrs	r2, r3, #31
 801858e:	4413      	add	r3, r2
 8018590:	105b      	asrs	r3, r3, #1
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	f1c3 0312 	rsb	r3, r3, #18
 8018598:	647b      	str	r3, [r7, #68]	; 0x44
		if (num_src & 1)
 801859a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801859c:	f003 0301 	and.w	r3, r3, #1
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d00b      	beq.n	80185bc <mixer_decode+0x350>
			loop_start += 2;
 80185a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185a6:	3302      	adds	r3, #2
 80185a8:	647b      	str	r3, [r7, #68]	; 0x44
			ins.w[loop_start + 1] = ins.w[2];
 80185aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80185ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185b0:	3301      	adds	r3, #1
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	440b      	add	r3, r1
 80185b6:	6892      	ldr	r2, [r2, #8]
 80185b8:	601a      	str	r2, [r3, #0]
 80185ba:	e006      	b.n	80185ca <mixer_decode+0x35e>
			ins.w[loop_start] = ins.w[2];
 80185bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80185c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185c2:	009b      	lsls	r3, r3, #2
 80185c4:	440b      	add	r3, r1
 80185c6:	6892      	ldr	r2, [r2, #8]
 80185c8:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80185ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80185d0:	3b03      	subs	r3, #3
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	005b      	lsls	r3, r3, #1
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185da:	3208      	adds	r2, #8
 80185dc:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80185e0:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 80185e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80185ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80185ee:	3b16      	subs	r3, #22
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	005b      	lsls	r3, r3, #1
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80185fa:	4013      	ands	r3, r2
 80185fc:	b299      	uxth	r1, r3
 80185fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018600:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8018604:	4b73      	ldr	r3, [pc, #460]	; (80187d4 <mixer_decode+0x568>)
 8018606:	430b      	orrs	r3, r1
 8018608:	b29b      	uxth	r3, r3
 801860a:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801860c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018610:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8018614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018618:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801861a:	f00c ff31 	bl	8025480 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 801861e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018620:	2b07      	cmp	r3, #7
 8018622:	dc20      	bgt.n	8018666 <mixer_decode+0x3fa>
		if (num_src & 1)
 8018624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	d007      	beq.n	801863e <mixer_decode+0x3d2>
			ins.w[loop_start + 1] = 0x0104ea81;
 801862e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018632:	3301      	adds	r3, #1
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	4413      	add	r3, r2
 8018638:	4a67      	ldr	r2, [pc, #412]	; (80187d8 <mixer_decode+0x56c>)
 801863a:	601a      	str	r2, [r3, #0]
 801863c:	e005      	b.n	801864a <mixer_decode+0x3de>
			ins.w[loop_start] = 0x0103ea81;
 801863e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018642:	009b      	lsls	r3, r3, #2
 8018644:	4413      	add	r3, r2
 8018646:	4a65      	ldr	r2, [pc, #404]	; (80187dc <mixer_decode+0x570>)
 8018648:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 801864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864c:	3308      	adds	r3, #8
 801864e:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8018652:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8018654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018656:	3356      	adds	r3, #86	; 0x56
 8018658:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801865c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801865e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018662:	f3bf 8f6f 	isb	sy
						#else
							#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
						#endif
					#endif

					pp_used = 0;
 8018666:	2300      	movs	r3, #0
 8018668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

					PROFILE("mixer_decode() row memxor_block(full) end");
 801866c:	bf00      	nop
				}
			}

			k &= ~(SZB - 1);
 801866e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018670:	425b      	negs	r3, r3
 8018672:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018676:	4013      	ands	r3, r2
 8018678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			m &= m - 1;
 801867c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018680:	3b01      	subs	r3, #1
 8018682:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018686:	4013      	ands	r3, r2
 8018688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		while (k < chirp_config.mx_generation_size)
 801868c:	4b54      	ldr	r3, [pc, #336]	; (80187e0 <mixer_decode+0x574>)
 801868e:	885b      	ldrh	r3, [r3, #2]
 8018690:	b29b      	uxth	r3, r3
 8018692:	461a      	mov	r2, r3
 8018694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018698:	4293      	cmp	r3, r2
 801869a:	f4ff aea1 	bcc.w	80183e0 <mixer_decode+0x174>
 801869e:	e000      	b.n	80186a2 <mixer_decode+0x436>
				break;
 80186a0:	bf00      	nop
		}

		if (pp_used)
 80186a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	f000 80f5 	beq.w	8018896 <mixer_decode+0x62a>
		{
			assert_reset(chirp_config.matrix_payload.pos = chirp_config.matrix_coding_vector.pos + chirp_config.matrix_coding_vector.len);
 80186ac:	4b4c      	ldr	r3, [pc, #304]	; (80187e0 <mixer_decode+0x574>)
 80186ae:	7f1a      	ldrb	r2, [r3, #28]
 80186b0:	4b4b      	ldr	r3, [pc, #300]	; (80187e0 <mixer_decode+0x574>)
 80186b2:	7f5b      	ldrb	r3, [r3, #29]
 80186b4:	4413      	add	r3, r2
 80186b6:	b2da      	uxtb	r2, r3
 80186b8:	4b49      	ldr	r3, [pc, #292]	; (80187e0 <mixer_decode+0x574>)
 80186ba:	779a      	strb	r2, [r3, #30]
 80186bc:	4b48      	ldr	r3, [pc, #288]	; (80187e0 <mixer_decode+0x574>)
 80186be:	7f9b      	ldrb	r3, [r3, #30]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d121      	bne.n	8018708 <mixer_decode+0x49c>
 80186c4:	4b46      	ldr	r3, [pc, #280]	; (80187e0 <mixer_decode+0x574>)
 80186c6:	7f1a      	ldrb	r2, [r3, #28]
 80186c8:	4b45      	ldr	r3, [pc, #276]	; (80187e0 <mixer_decode+0x574>)
 80186ca:	7f5b      	ldrb	r3, [r3, #29]
 80186cc:	4413      	add	r3, r2
 80186ce:	b2da      	uxtb	r2, r3
 80186d0:	4b43      	ldr	r3, [pc, #268]	; (80187e0 <mixer_decode+0x574>)
 80186d2:	779a      	strb	r2, [r3, #30]
 80186d4:	4b42      	ldr	r3, [pc, #264]	; (80187e0 <mixer_decode+0x574>)
 80186d6:	7f9b      	ldrb	r3, [r3, #30]
 80186d8:	4618      	mov	r0, r3
 80186da:	f009 ffaf 	bl	802263c <iprintf>
 80186de:	4b40      	ldr	r3, [pc, #256]	; (80187e0 <mixer_decode+0x574>)
 80186e0:	7f1b      	ldrb	r3, [r3, #28]
 80186e2:	461a      	mov	r2, r3
 80186e4:	4b3e      	ldr	r3, [pc, #248]	; (80187e0 <mixer_decode+0x574>)
 80186e6:	7f5b      	ldrb	r3, [r3, #29]
 80186e8:	4413      	add	r3, r2
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	bf0c      	ite	eq
 80186ee:	2301      	moveq	r3, #1
 80186f0:	2300      	movne	r3, #0
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	461a      	mov	r2, r3
 80186f6:	4b3a      	ldr	r3, [pc, #232]	; (80187e0 <mixer_decode+0x574>)
 80186f8:	779a      	strb	r2, [r3, #30]
 80186fa:	4b39      	ldr	r3, [pc, #228]	; (80187e0 <mixer_decode+0x574>)
 80186fc:	7f9b      	ldrb	r3, [r3, #30]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d002      	beq.n	8018708 <mixer_decode+0x49c>
  __ASM volatile ("cpsid f" : : : "memory");
 8018702:	b671      	cpsid	f
 8018704:	f7fd fcd4 	bl	80160b0 <NVIC_SystemReset>

			memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 8018708:	4b36      	ldr	r3, [pc, #216]	; (80187e4 <mixer_decode+0x578>)
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	4a36      	ldr	r2, [pc, #216]	; (80187e8 <mixer_decode+0x57c>)
 801870e:	3316      	adds	r3, #22
 8018710:	009b      	lsls	r3, r3, #2
 8018712:	4413      	add	r3, r2
 8018714:	685a      	ldr	r2, [r3, #4]
 8018716:	4b32      	ldr	r3, [pc, #200]	; (80187e0 <mixer_decode+0x574>)
 8018718:	7f1b      	ldrb	r3, [r3, #28]
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	4413      	add	r3, r2
 801871e:	1d19      	adds	r1, r3, #4
				(chirp_config.matrix_coding_vector.len + chirp_config.matrix_payload.len) * sizeof(uint_fast_t), pp_used);
 8018720:	4b2f      	ldr	r3, [pc, #188]	; (80187e0 <mixer_decode+0x574>)
 8018722:	7f5b      	ldrb	r3, [r3, #29]
 8018724:	461a      	mov	r2, r3
 8018726:	4b2e      	ldr	r3, [pc, #184]	; (80187e0 <mixer_decode+0x574>)
 8018728:	7fdb      	ldrb	r3, [r3, #31]
 801872a:	4413      	add	r3, r2
			memxor_block(&(mx.matrix[i]->matrix_chunk[chirp_config.matrix_coding_vector.pos + 0]), pp,
 801872c:	009a      	lsls	r2, r3, #2
 801872e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018732:	6439      	str	r1, [r7, #64]	; 0x40
 8018734:	f107 0108 	add.w	r1, r7, #8
 8018738:	63f9      	str	r1, [r7, #60]	; 0x3c
 801873a:	63ba      	str	r2, [r7, #56]	; 0x38
 801873c:	637b      	str	r3, [r7, #52]	; 0x34
	assert_reset(num_src <= MEMXOR_BLOCKSIZE);
 801873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018740:	2b08      	cmp	r3, #8
 8018742:	dd0e      	ble.n	8018762 <mixer_decode+0x4f6>
 8018744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018746:	2b08      	cmp	r3, #8
 8018748:	dc01      	bgt.n	801874e <mixer_decode+0x4e2>
 801874a:	2301      	movs	r3, #1
 801874c:	e000      	b.n	8018750 <mixer_decode+0x4e4>
 801874e:	2300      	movs	r3, #0
 8018750:	4618      	mov	r0, r3
 8018752:	f009 ff73 	bl	802263c <iprintf>
 8018756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018758:	2b08      	cmp	r3, #8
 801875a:	dd02      	ble.n	8018762 <mixer_decode+0x4f6>
 801875c:	b671      	cpsid	f
 801875e:	f7fd fca7 	bl	80160b0 <NVIC_SystemReset>
	if ((0 == num_src) || (0 == size))
 8018762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018764:	2b00      	cmp	r3, #0
 8018766:	f000 8096 	beq.w	8018896 <mixer_decode+0x62a>
 801876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801876c:	2b00      	cmp	r3, #0
 801876e:	f000 8092 	beq.w	8018896 <mixer_decode+0x62a>
	if ((size <= 8) && (num_src < MEMXOR_BLOCKSIZE))
 8018772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018774:	2b08      	cmp	r3, #8
 8018776:	d809      	bhi.n	801878c <mixer_decode+0x520>
 8018778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801877a:	2b07      	cmp	r3, #7
 801877c:	dc06      	bgt.n	801878c <mixer_decode+0x520>
		memxor_block_straight(dest, src, size, num_src);
 801877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018784:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018786:	f7f5 fd9d 	bl	800e2c4 <memxor_block_straight>
					#error MX_BENCHMARK_PSEUDO_PAYLOAD is unsupported on current architecture
				#endif
			#endif
		}

		PROFILE("mixer_decode() row end");
 801878a:	e084      	b.n	8018896 <mixer_decode+0x62a>
	if (num_src < MEMXOR_BLOCKSIZE)
 801878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801878e:	2b07      	cmp	r3, #7
 8018790:	dc58      	bgt.n	8018844 <mixer_decode+0x5d8>
		ins.w = (uint32_t*)((uintptr_t)&memxor_block_core & ~1u);
 8018792:	4b0f      	ldr	r3, [pc, #60]	; (80187d0 <mixer_decode+0x564>)
 8018794:	f023 0301 	bic.w	r3, r3, #1
 8018798:	62fb      	str	r3, [r7, #44]	; 0x2c
		loop_start = 18 - ((num_src + 1) / 2) * 4;
 801879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801879c:	3301      	adds	r3, #1
 801879e:	0fda      	lsrs	r2, r3, #31
 80187a0:	4413      	add	r3, r2
 80187a2:	105b      	asrs	r3, r3, #1
 80187a4:	009b      	lsls	r3, r3, #2
 80187a6:	f1c3 0312 	rsb	r3, r3, #18
 80187aa:	633b      	str	r3, [r7, #48]	; 0x30
		if (num_src & 1)
 80187ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ae:	f003 0301 	and.w	r3, r3, #1
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d01a      	beq.n	80187ec <mixer_decode+0x580>
			loop_start += 2;
 80187b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b8:	3302      	adds	r3, #2
 80187ba:	633b      	str	r3, [r7, #48]	; 0x30
			ins.w[loop_start + 1] = ins.w[2];
 80187bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80187c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c2:	3301      	adds	r3, #1
 80187c4:	009b      	lsls	r3, r3, #2
 80187c6:	440b      	add	r3, r1
 80187c8:	6892      	ldr	r2, [r2, #8]
 80187ca:	601a      	str	r2, [r3, #0]
 80187cc:	e015      	b.n	80187fa <mixer_decode+0x58e>
 80187ce:	bf00      	nop
 80187d0:	20000005 	.word	0x20000005
 80187d4:	ffffa800 	.word	0xffffa800
 80187d8:	0104ea81 	.word	0x0104ea81
 80187dc:	0103ea81 	.word	0x0103ea81
 80187e0:	20001430 	.word	0x20001430
 80187e4:	20000484 	.word	0x20000484
 80187e8:	200014f0 	.word	0x200014f0
			ins.w[loop_start] = ins.w[2];
 80187ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80187f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	440b      	add	r3, r1
 80187f6:	6892      	ldr	r2, [r2, #8]
 80187f8:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xe000 | ((loop_start - 3) * 2);
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018800:	3b03      	subs	r3, #3
 8018802:	b29b      	uxth	r3, r3
 8018804:	005b      	lsls	r3, r3, #1
 8018806:	b29b      	uxth	r3, r3
 8018808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801880a:	3208      	adds	r2, #8
 801880c:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8018810:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8018814:	b29b      	uxth	r3, r3
 8018816:	8013      	strh	r3, [r2, #0]
		ins.h[43] = 0xa800 | (((loop_start - 22) * 2) & 0x07ff);
 8018818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801881e:	3b16      	subs	r3, #22
 8018820:	b29b      	uxth	r3, r3
 8018822:	005b      	lsls	r3, r3, #1
 8018824:	b29a      	uxth	r2, r3
 8018826:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801882a:	4013      	ands	r3, r2
 801882c:	b299      	uxth	r1, r3
 801882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018830:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8018834:	4b2e      	ldr	r3, [pc, #184]	; (80188f0 <mixer_decode+0x684>)
 8018836:	430b      	orrs	r3, r1
 8018838:	b29b      	uxth	r3, r3
 801883a:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801883c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018840:	f3bf 8f6f 	isb	sy
	memxor_block_core(dest, src, size);
 8018844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018848:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801884a:	f00c fe19 	bl	8025480 <__memxor_block_core_veneer>
	if (num_src < MEMXOR_BLOCKSIZE)
 801884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018850:	2b07      	cmp	r3, #7
 8018852:	dc20      	bgt.n	8018896 <mixer_decode+0x62a>
		if (num_src & 1)
 8018854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018856:	f003 0301 	and.w	r3, r3, #1
 801885a:	2b00      	cmp	r3, #0
 801885c:	d007      	beq.n	801886e <mixer_decode+0x602>
			ins.w[loop_start + 1] = 0x0104ea81;
 801885e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018862:	3301      	adds	r3, #1
 8018864:	009b      	lsls	r3, r3, #2
 8018866:	4413      	add	r3, r2
 8018868:	4a22      	ldr	r2, [pc, #136]	; (80188f4 <mixer_decode+0x688>)
 801886a:	601a      	str	r2, [r3, #0]
 801886c:	e005      	b.n	801887a <mixer_decode+0x60e>
			ins.w[loop_start] = 0x0103ea81;
 801886e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018872:	009b      	lsls	r3, r3, #2
 8018874:	4413      	add	r3, r2
 8018876:	4a20      	ldr	r2, [pc, #128]	; (80188f8 <mixer_decode+0x68c>)
 8018878:	601a      	str	r2, [r3, #0]
		ins.h[4] = 0xf8d0;
 801887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887c:	3308      	adds	r3, #8
 801887e:	f64f 02d0 	movw	r2, #63696	; 0xf8d0
 8018882:	801a      	strh	r2, [r3, #0]
		ins.h[43] = 0xafd8;
 8018884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018886:	3356      	adds	r3, #86	; 0x56
 8018888:	f64a 72d8 	movw	r2, #45016	; 0xafd8
 801888c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801888e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018892:	f3bf 8f6f 	isb	sy
 8018896:	bf00      	nop

		// yield after each row to keep thread-level response time small (enough)
		// ATTENTION: matrix has to be in a consistent state at this point
		PT_YIELD(pt);
 8018898:	2300      	movs	r3, #0
 801889a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80188a4:	801a      	strh	r2, [r3, #0]
 80188a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d102      	bne.n	80188b4 <mixer_decode+0x648>
 80188ae:	bf00      	nop
 80188b0:	2301      	movs	r3, #1
 80188b2:	e018      	b.n	80188e6 <mixer_decode+0x67a>
	for (i = chirp_config.mx_generation_size; i-- > 0;)
 80188b4:	4b11      	ldr	r3, [pc, #68]	; (80188fc <mixer_decode+0x690>)
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	1e5a      	subs	r2, r3, #1
 80188ba:	4910      	ldr	r1, [pc, #64]	; (80188fc <mixer_decode+0x690>)
 80188bc:	600a      	str	r2, [r1, #0]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f73f acf1 	bgt.w	80182a6 <mixer_decode+0x3a>
	}

	#if MX_VERBOSE_STATISTICS
		mx.stat_counter.slot_decoded = mx.slot_number;
 80188c4:	4b0e      	ldr	r3, [pc, #56]	; (8018900 <mixer_decode+0x694>)
 80188c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	4b0c      	ldr	r3, [pc, #48]	; (8018900 <mixer_decode+0x694>)
 80188ce:	f8a3 289c 	strh.w	r2, [r3, #2204]	; 0x89c
	#endif

	GPI_TRACE_MSG(TRACE_INFO, "decoding done");
 80188d2:	bf00      	nop

	TRACE_MATRIX();
 80188d4:	bf00      	nop

	PT_END(pt);
 80188d6:	2300      	movs	r3, #0
 80188d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2200      	movs	r2, #0
 80188e0:	801a      	strh	r2, [r3, #0]
 80188e2:	bf00      	nop
 80188e4:	2303      	movs	r3, #3
}
 80188e6:	4618      	mov	r0, r3
 80188e8:	379c      	adds	r7, #156	; 0x9c
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd90      	pop	{r4, r7, pc}
 80188ee:	bf00      	nop
 80188f0:	ffffa800 	.word	0xffffa800
 80188f4:	0104ea81 	.word	0x0104ea81
 80188f8:	0103ea81 	.word	0x0103ea81
 80188fc:	20000484 	.word	0x20000484
 8018900:	200014f0 	.word	0x200014f0

08018904 <mixer_maintenance>:

//**************************************************************************************************

PT_THREAD(mixer_maintenance())
{
 8018904:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8018908:	b094      	sub	sp, #80	; 0x50
 801890a:	af00      	add	r7, sp, #0
	Pt_Context* const	pt = pt_maintenance;
 801890c:	4b95      	ldr	r3, [pc, #596]	; (8018b64 <mixer_maintenance+0x260>)
 801890e:	64fb      	str	r3, [r7, #76]	; 0x4c
	// PRINTF("TRIGGER_TICK\n");

	PT_BEGIN(pt);
 8018910:	2301      	movs	r3, #1
 8018912:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8018916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018918:	881b      	ldrh	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d003      	beq.n	8018926 <mixer_maintenance+0x22>
 801891e:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 8018922:	d017      	beq.n	8018954 <mixer_maintenance+0x50>
 8018924:	e177      	b.n	8018c16 <mixer_maintenance+0x312>
 8018926:	bf00      	nop

	// init variables at thread startup
	// NOTE: approach is useful because thread gets reinitialized (-> PT_INIT) on each mixer round
	// mx.round_deadline = gpi_tick_fast_native() + (GPI_TICK_FAST_MAX / 2);
	mx.round_deadline = gpi_tick_fast_extended() + (GPI_TICK_FAST_MAX / 2);
 8018928:	f7f3 f8dc 	bl	800bae4 <gpi_tick_fast_extended>
 801892c:	460a      	mov	r2, r1
 801892e:	4601      	mov	r1, r0
 8018930:	f111 33ff 	adds.w	r3, r1, #4294967295
 8018934:	f162 4400 	sbc.w	r4, r2, #2147483648	; 0x80000000
 8018938:	4a8b      	ldr	r2, [pc, #556]	; (8018b68 <mixer_maintenance+0x264>)
 801893a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

	mx.round_deadline_update_slot = UINT16_MAX;
 801893e:	4b8a      	ldr	r3, [pc, #552]	; (8018b68 <mixer_maintenance+0x264>)
 8018940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018944:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8018948:	e000      	b.n	801894c <mixer_maintenance+0x48>

	while (1)
	{
 801894a:	bf00      	nop
		PT_WAIT_UNTIL(pt, mx.events & BV(TRIGGER_TICK));
 801894c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801894e:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 8018952:	801a      	strh	r2, [r3, #0]
 8018954:	4b84      	ldr	r3, [pc, #528]	; (8018b68 <mixer_maintenance+0x264>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f003 0308 	and.w	r3, r3, #8
 801895c:	2b00      	cmp	r3, #0
 801895e:	d102      	bne.n	8018966 <mixer_maintenance+0x62>
 8018960:	bf00      	nop
 8018962:	2300      	movs	r3, #0
 8018964:	e15f      	b.n	8018c26 <mixer_maintenance+0x322>

		clear_event(TRIGGER_TICK);
 8018966:	2003      	movs	r0, #3
 8018968:	f7fd fc92 	bl	8016290 <clear_event>
		gpi_watchdog_periodic();
 801896c:	f7f5 fc30 	bl	800e1d0 <gpi_watchdog_periodic>

		// Gpi_Fast_Tick_Native now = gpi_tick_fast_native();
		Gpi_Fast_Tick_Extended now = gpi_tick_fast_extended();
 8018970:	f7f3 f8b8 	bl	800bae4 <gpi_tick_fast_extended>
 8018974:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

		chirp_config.update_slot++;
 8018978:	4b7c      	ldr	r3, [pc, #496]	; (8018b6c <mixer_maintenance+0x268>)
 801897a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801897e:	3301      	adds	r3, #1
 8018980:	b2da      	uxtb	r2, r3
 8018982:	4b7a      	ldr	r3, [pc, #488]	; (8018b6c <mixer_maintenance+0x268>)
 8018984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        PRINTF_CHIRP("l:%llu\n", (mx.round_deadline - now) / 16000000);
 8018988:	4b77      	ldr	r3, [pc, #476]	; (8018b68 <mixer_maintenance+0x264>)
 801898a:	e9d3 1214 	ldrd	r1, r2, [r3, #80]	; 0x50
 801898e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018992:	1ac9      	subs	r1, r1, r3
 8018994:	eb62 0204 	sbc.w	r2, r2, r4
 8018998:	4608      	mov	r0, r1
 801899a:	4611      	mov	r1, r2
 801899c:	4a74      	ldr	r2, [pc, #464]	; (8018b70 <mixer_maintenance+0x26c>)
 801899e:	f04f 0300 	mov.w	r3, #0
 80189a2:	f7e8 f97b 	bl	8000c9c <__aeabi_uldivmod>
 80189a6:	4603      	mov	r3, r0
 80189a8:	460c      	mov	r4, r1
 80189aa:	461a      	mov	r2, r3
 80189ac:	4623      	mov	r3, r4
 80189ae:	4871      	ldr	r0, [pc, #452]	; (8018b74 <mixer_maintenance+0x270>)
 80189b0:	f009 fe44 	bl	802263c <iprintf>

		// monitor round length
		// NOTE: we test once per slot, and STOP executes gracefully at the next slot boundary
		// (or both a bit relaxed during RESYNC). Hence, the timing (e.g. when in the slot is
		// "now"?) is not very critical here.
		if (((mx.slot_number >= chirp_config.mx_round_length) || (gpi_tick_compare_fast_extended(now, mx.round_deadline) >= 0)) || ((chirp_config.task == MX_ARRANGE) && (!mx.rank) && (chirp_config.update_slot >= 6)))
 80189b4:	4b6c      	ldr	r3, [pc, #432]	; (8018b68 <mixer_maintenance+0x264>)
 80189b6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80189ba:	b29a      	uxth	r2, r3
 80189bc:	4b6b      	ldr	r3, [pc, #428]	; (8018b6c <mixer_maintenance+0x268>)
 80189be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80189c2:	b29b      	uxth	r3, r3
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d235      	bcs.n	8018a34 <mixer_maintenance+0x130>
 80189c8:	4b67      	ldr	r3, [pc, #412]	; (8018b68 <mixer_maintenance+0x264>)
 80189ca:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80189ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80189d2:	e9c7 120e 	strd	r1, r2, [r7, #56]	; 0x38
 80189d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80189da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80189de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80189e2:	1ac9      	subs	r1, r1, r3
 80189e4:	eb62 0204 	sbc.w	r2, r2, r4
 80189e8:	468b      	mov	fp, r1
 80189ea:	4694      	mov	ip, r2
 80189ec:	e9c7 bc0e 	strd	fp, ip, [r7, #56]	; 0x38
 80189f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f174 0300 	sbcs.w	r3, r4, #0
 80189fa:	db08      	blt.n	8018a0e <mixer_maintenance+0x10a>
 80189fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a00:	4313      	orrs	r3, r2
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	bf14      	ite	ne
 8018a06:	2301      	movne	r3, #1
 8018a08:	2300      	moveq	r3, #0
 8018a0a:	b2db      	uxtb	r3, r3
 8018a0c:	e001      	b.n	8018a12 <mixer_maintenance+0x10e>
 8018a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	da0e      	bge.n	8018a34 <mixer_maintenance+0x130>
 8018a16:	4b55      	ldr	r3, [pc, #340]	; (8018b6c <mixer_maintenance+0x268>)
 8018a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018a1c:	2b06      	cmp	r3, #6
 8018a1e:	d15f      	bne.n	8018ae0 <mixer_maintenance+0x1dc>
 8018a20:	4b51      	ldr	r3, [pc, #324]	; (8018b68 <mixer_maintenance+0x264>)
 8018a22:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d15a      	bne.n	8018ae0 <mixer_maintenance+0x1dc>
 8018a2a:	4b50      	ldr	r3, [pc, #320]	; (8018b6c <mixer_maintenance+0x268>)
 8018a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018a30:	2b05      	cmp	r3, #5
 8018a32:	d955      	bls.n	8018ae0 <mixer_maintenance+0x1dc>
		{
			mx.slot_number = chirp_config.mx_round_length;
 8018a34:	4b4d      	ldr	r3, [pc, #308]	; (8018b6c <mixer_maintenance+0x268>)
 8018a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018a3a:	b29a      	uxth	r2, r3
 8018a3c:	4b4a      	ldr	r3, [pc, #296]	; (8018b68 <mixer_maintenance+0x264>)
 8018a3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			mx.round_deadline_update_slot = mx.slot_number;
 8018a42:	4b49      	ldr	r3, [pc, #292]	; (8018b68 <mixer_maintenance+0x264>)
 8018a44:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	4b47      	ldr	r3, [pc, #284]	; (8018b68 <mixer_maintenance+0x264>)
 8018a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			mx.round_deadline = now +
				gpi_mulu_32x16to64((Gpi_Fast_Tick_Native)chirp_config.mx_slot_length, (typeof(mx.slot_number))chirp_config.mx_round_length - mx.slot_number);
 8018a50:	4b46      	ldr	r3, [pc, #280]	; (8018b6c <mixer_maintenance+0x268>)
 8018a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a54:	4a45      	ldr	r2, [pc, #276]	; (8018b6c <mixer_maintenance+0x268>)
 8018a56:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8018a5a:	b291      	uxth	r1, r2
 8018a5c:	4a42      	ldr	r2, [pc, #264]	; (8018b68 <mixer_maintenance+0x264>)
 8018a5e:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8018a62:	b292      	uxth	r2, r2
 8018a64:	1a8a      	subs	r2, r1, r2
 8018a66:	b292      	uxth	r2, r2
 8018a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a6a:	4613      	mov	r3, r2
 8018a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
	return gpi_mulu_32x32to64(a, b);
 8018a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a72:	627a      	str	r2, [r7, #36]	; 0x24
 8018a74:	623b      	str	r3, [r7, #32]
	asm
 8018a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a78:	6a3a      	ldr	r2, [r7, #32]
 8018a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8018a7e:	4690      	mov	r8, r2
 8018a80:	4699      	mov	r9, r3
	return result.u64;
 8018a82:	4641      	mov	r1, r8
 8018a84:	464a      	mov	r2, r9
			mx.round_deadline = now +
 8018a86:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018a8a:	185d      	adds	r5, r3, r1
 8018a8c:	eb44 0602 	adc.w	r6, r4, r2
 8018a90:	4a35      	ldr	r2, [pc, #212]	; (8018b68 <mixer_maintenance+0x264>)
 8018a92:	e9c2 5614 	strd	r5, r6, [r2, #80]	; 0x50

			GPI_TRACE_MSG(TRACE_INFO, "max. round length reached -> STOP initiated");
 8018a96:	bf00      	nop
 8018a98:	4b33      	ldr	r3, [pc, #204]	; (8018b68 <mixer_maintenance+0x264>)
 8018a9a:	61fb      	str	r3, [r7, #28]
 8018a9c:	2320      	movs	r3, #32
 8018a9e:	61bb      	str	r3, [r7, #24]
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	617b      	str	r3, [r7, #20]
 8018aa4:	69bb      	ldr	r3, [r7, #24]
 8018aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 8018aa8:	f3bf 8f5f 	dmb	sy
		__asm__
 8018aac:	6979      	ldr	r1, [r7, #20]
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	697a      	ldr	r2, [r7, #20]
 8018ab2:	e851 0f00 	ldrex	r0, [r1]
 8018ab6:	ea40 0003 	orr.w	r0, r0, r3
 8018aba:	e841 0300 	strex	r3, r0, [r1]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d1f7      	bne.n	8018ab2 <mixer_maintenance+0x1ae>
 8018ac2:	f3bf 8f5f 	dmb	sy

			gpi_atomic_set(&mx.events, BV(DEADLINE_REACHED));

			while (!mixer_transport_set_next_slot_task(STOP));
 8018ac6:	bf00      	nop
 8018ac8:	2002      	movs	r0, #2
 8018aca:	f7f9 f847 	bl	8011b5c <mixer_transport_set_next_slot_task>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d0f9      	beq.n	8018ac8 <mixer_maintenance+0x1c4>
			PT_EXIT(pt);
 8018ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	801a      	strh	r2, [r3, #0]
 8018ada:	bf00      	nop
 8018adc:	2302      	movs	r3, #2
 8018ade:	e0a2      	b.n	8018c26 <mixer_maintenance+0x322>
		}
		else if (mx.round_deadline_update_slot != mx.slot_number)
 8018ae0:	4b21      	ldr	r3, [pc, #132]	; (8018b68 <mixer_maintenance+0x264>)
 8018ae2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8018ae6:	4b20      	ldr	r3, [pc, #128]	; (8018b68 <mixer_maintenance+0x264>)
 8018ae8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	429a      	cmp	r2, r3
 8018af0:	f43f af2b 	beq.w	801894a <mixer_maintenance+0x46>
		{
			// ATTENTION: updating round deadline only on slot_number updates is important
			// for right behaviour during RESYNC phases
			assert_reset((GPI_TICK_FAST_MAX / 2) / chirp_config.mx_slot_length >= chirp_config.mx_round_length);
 8018af4:	4b1d      	ldr	r3, [pc, #116]	; (8018b6c <mixer_maintenance+0x268>)
 8018af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018af8:	f04f 0400 	mov.w	r4, #0
 8018afc:	461a      	mov	r2, r3
 8018afe:	4623      	mov	r3, r4
 8018b00:	f04f 30ff 	mov.w	r0, #4294967295
 8018b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b08:	f7e8 f8c8 	bl	8000c9c <__aeabi_uldivmod>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	460c      	mov	r4, r1
 8018b10:	4619      	mov	r1, r3
 8018b12:	4622      	mov	r2, r4
 8018b14:	4b15      	ldr	r3, [pc, #84]	; (8018b6c <mixer_maintenance+0x268>)
 8018b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	f04f 0400 	mov.w	r4, #0
 8018b22:	42a2      	cmp	r2, r4
 8018b24:	bf08      	it	eq
 8018b26:	4299      	cmpeq	r1, r3
 8018b28:	d248      	bcs.n	8018bbc <mixer_maintenance+0x2b8>
 8018b2a:	4b10      	ldr	r3, [pc, #64]	; (8018b6c <mixer_maintenance+0x268>)
 8018b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b2e:	f04f 0400 	mov.w	r4, #0
 8018b32:	461a      	mov	r2, r3
 8018b34:	4623      	mov	r3, r4
 8018b36:	f04f 30ff 	mov.w	r0, #4294967295
 8018b3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b3e:	f7e8 f8ad 	bl	8000c9c <__aeabi_uldivmod>
 8018b42:	4603      	mov	r3, r0
 8018b44:	460c      	mov	r4, r1
 8018b46:	4619      	mov	r1, r3
 8018b48:	4622      	mov	r2, r4
 8018b4a:	4b08      	ldr	r3, [pc, #32]	; (8018b6c <mixer_maintenance+0x268>)
 8018b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018b50:	b29b      	uxth	r3, r3
 8018b52:	b29b      	uxth	r3, r3
 8018b54:	f04f 0400 	mov.w	r4, #0
 8018b58:	42a2      	cmp	r2, r4
 8018b5a:	bf08      	it	eq
 8018b5c:	4299      	cmpeq	r1, r3
 8018b5e:	d30b      	bcc.n	8018b78 <mixer_maintenance+0x274>
 8018b60:	2301      	movs	r3, #1
 8018b62:	e00a      	b.n	8018b7a <mixer_maintenance+0x276>
 8018b64:	20001e2c 	.word	0x20001e2c
 8018b68:	200014f0 	.word	0x200014f0
 8018b6c:	20001430 	.word	0x20001430
 8018b70:	00f42400 	.word	0x00f42400
 8018b74:	08025ce4 	.word	0x08025ce4
 8018b78:	2300      	movs	r3, #0
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f009 fd5e 	bl	802263c <iprintf>
 8018b80:	4b2b      	ldr	r3, [pc, #172]	; (8018c30 <mixer_maintenance+0x32c>)
 8018b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b84:	f04f 0400 	mov.w	r4, #0
 8018b88:	461a      	mov	r2, r3
 8018b8a:	4623      	mov	r3, r4
 8018b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b94:	f7e8 f882 	bl	8000c9c <__aeabi_uldivmod>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	460c      	mov	r4, r1
 8018b9c:	4619      	mov	r1, r3
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	4b23      	ldr	r3, [pc, #140]	; (8018c30 <mixer_maintenance+0x32c>)
 8018ba2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	f04f 0400 	mov.w	r4, #0
 8018bae:	42a2      	cmp	r2, r4
 8018bb0:	bf08      	it	eq
 8018bb2:	4299      	cmpeq	r1, r3
 8018bb4:	d202      	bcs.n	8018bbc <mixer_maintenance+0x2b8>
  __ASM volatile ("cpsid f" : : : "memory");
 8018bb6:	b671      	cpsid	f
 8018bb8:	f7fd fa7a 	bl	80160b0 <NVIC_SystemReset>

			mx.round_deadline_update_slot = mx.slot_number;
 8018bbc:	4b1d      	ldr	r3, [pc, #116]	; (8018c34 <mixer_maintenance+0x330>)
 8018bbe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8018bc2:	b29a      	uxth	r2, r3
 8018bc4:	4b1b      	ldr	r3, [pc, #108]	; (8018c34 <mixer_maintenance+0x330>)
 8018bc6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

			mx.round_deadline = now +
				gpi_mulu_32x16to64((Gpi_Fast_Tick_Native)chirp_config.mx_slot_length, (typeof(mx.slot_number))chirp_config.mx_round_length - mx.slot_number);
 8018bca:	4b19      	ldr	r3, [pc, #100]	; (8018c30 <mixer_maintenance+0x32c>)
 8018bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bce:	4a18      	ldr	r2, [pc, #96]	; (8018c30 <mixer_maintenance+0x32c>)
 8018bd0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8018bd4:	b291      	uxth	r1, r2
 8018bd6:	4a17      	ldr	r2, [pc, #92]	; (8018c34 <mixer_maintenance+0x330>)
 8018bd8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8018bdc:	b292      	uxth	r2, r2
 8018bde:	1a8a      	subs	r2, r1, r2
 8018be0:	b292      	uxth	r2, r2
 8018be2:	60fb      	str	r3, [r7, #12]
 8018be4:	4613      	mov	r3, r2
 8018be6:	817b      	strh	r3, [r7, #10]
	return gpi_mulu_32x32to64(a, b);
 8018be8:	897b      	ldrh	r3, [r7, #10]
 8018bea:	68fa      	ldr	r2, [r7, #12]
 8018bec:	607a      	str	r2, [r7, #4]
 8018bee:	603b      	str	r3, [r7, #0]
	asm
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	683a      	ldr	r2, [r7, #0]
 8018bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8018bf8:	4615      	mov	r5, r2
 8018bfa:	461e      	mov	r6, r3
	return result.u64;
 8018bfc:	4629      	mov	r1, r5
 8018bfe:	4632      	mov	r2, r6
			mx.round_deadline = now +
 8018c00:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018c04:	eb13 0b01 	adds.w	fp, r3, r1
 8018c08:	eb44 0c02 	adc.w	ip, r4, r2
 8018c0c:	4a09      	ldr	r2, [pc, #36]	; (8018c34 <mixer_maintenance+0x330>)
 8018c0e:	e9c2 bc14 	strd	fp, ip, [r2, #80]	; 0x50

			GPI_TRACE_MSG(TRACE_INFO, "round deadline: %lu (%luus from now)",
 8018c12:	bf00      	nop
	{
 8018c14:	e699      	b.n	801894a <mixer_maintenance+0x46>
				PRINTF_CHIRP("profile %u %s %4" PRIu16 ": %" PRIu32 "\n", s_snapshot_index, module_name, line, timestamp);
			}
		#endif
	}

	PT_END(pt);
 8018c16:	2300      	movs	r3, #0
 8018c18:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8018c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c1e:	2200      	movs	r2, #0
 8018c20:	801a      	strh	r2, [r3, #0]
 8018c22:	bf00      	nop
 8018c24:	2303      	movs	r3, #3
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3750      	adds	r7, #80	; 0x50
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8018c30:	20001430 	.word	0x20001430
 8018c34:	200014f0 	.word	0x200014f0

08018c38 <mixer_rand_seed>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void mixer_rand_seed(uint32_t seed)
{
 8018c38:	b480      	push	{r7}
 8018c3a:	b083      	sub	sp, #12
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
	rand_state = seed;
 8018c40:	4a04      	ldr	r2, [pc, #16]	; (8018c54 <mixer_rand_seed+0x1c>)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6013      	str	r3, [r2, #0]
}
 8018c46:	bf00      	nop
 8018c48:	370c      	adds	r7, #12
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c50:	4770      	bx	lr
 8018c52:	bf00      	nop
 8018c54:	200000b0 	.word	0x200000b0

08018c58 <mixer_rand>:

//**************************************************************************************************

// RNG (XorShift)
uint16_t mixer_rand()
{
 8018c58:	b480      	push	{r7}
 8018c5a:	af00      	add	r7, sp, #0
			if (!(++i & 1))
				return rand_state >> 16;

		#endif

		rand_state ^= rand_state << 2;
 8018c5c:	4b0f      	ldr	r3, [pc, #60]	; (8018c9c <mixer_rand+0x44>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	009a      	lsls	r2, r3, #2
 8018c62:	4b0e      	ldr	r3, [pc, #56]	; (8018c9c <mixer_rand+0x44>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	4053      	eors	r3, r2
 8018c68:	4a0c      	ldr	r2, [pc, #48]	; (8018c9c <mixer_rand+0x44>)
 8018c6a:	6013      	str	r3, [r2, #0]
		rand_state ^= rand_state >> 15;
 8018c6c:	4b0b      	ldr	r3, [pc, #44]	; (8018c9c <mixer_rand+0x44>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	0bda      	lsrs	r2, r3, #15
 8018c72:	4b0a      	ldr	r3, [pc, #40]	; (8018c9c <mixer_rand+0x44>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	4053      	eors	r3, r2
 8018c78:	4a08      	ldr	r2, [pc, #32]	; (8018c9c <mixer_rand+0x44>)
 8018c7a:	6013      	str	r3, [r2, #0]
		rand_state ^= rand_state << 17;
 8018c7c:	4b07      	ldr	r3, [pc, #28]	; (8018c9c <mixer_rand+0x44>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	045a      	lsls	r2, r3, #17
 8018c82:	4b06      	ldr	r3, [pc, #24]	; (8018c9c <mixer_rand+0x44>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	4053      	eors	r3, r2
 8018c88:	4a04      	ldr	r2, [pc, #16]	; (8018c9c <mixer_rand+0x44>)
 8018c8a:	6013      	str	r3, [r2, #0]

	#endif

	return rand_state;
 8018c8c:	4b03      	ldr	r3, [pc, #12]	; (8018c9c <mixer_rand+0x44>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	b29b      	uxth	r3, r3
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr
 8018c9c:	200000b0 	.word	0x200000b0

08018ca0 <request_or>:

//**************************************************************************************************
//***** Local Functions ****************************************************************************

static inline void request_or(uint_fast_t *dest, const uint8_t *src, unsigned int size)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b087      	sub	sp, #28
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
	// NOTE: process 8-bit-wise because src may be unaligned

	uint8_t	*pd = (uint8_t*)dest;
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	617b      	str	r3, [r7, #20]

	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018cb0:	e00a      	b.n	8018cc8 <request_or+0x28>
		*pd++ |= *src++;
 8018cb2:	68bb      	ldr	r3, [r7, #8]
 8018cb4:	1c5a      	adds	r2, r3, #1
 8018cb6:	60ba      	str	r2, [r7, #8]
 8018cb8:	7819      	ldrb	r1, [r3, #0]
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	1c5a      	adds	r2, r3, #1
 8018cbe:	617a      	str	r2, [r7, #20]
 8018cc0:	781a      	ldrb	r2, [r3, #0]
 8018cc2:	430a      	orrs	r2, r1
 8018cc4:	b2d2      	uxtb	r2, r2
 8018cc6:	701a      	strb	r2, [r3, #0]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f023 0303 	bic.w	r3, r3, #3
 8018cce:	68fa      	ldr	r2, [r7, #12]
 8018cd0:	4413      	add	r3, r2
 8018cd2:	697a      	ldr	r2, [r7, #20]
 8018cd4:	429a      	cmp	r2, r3
 8018cd6:	d3ec      	bcc.n	8018cb2 <request_or+0x12>
}
 8018cd8:	bf00      	nop
 8018cda:	371c      	adds	r7, #28
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce2:	4770      	bx	lr

08018ce4 <request_and>:

//**************************************************************************************************

static inline void request_and(uint_fast_t *dest, const void *src, unsigned int size)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b087      	sub	sp, #28
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	607a      	str	r2, [r7, #4]
	// NOTE: process 8-bit-wise because src may be unaligned

	uint8_t			*pd = (uint8_t*)dest;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	617b      	str	r3, [r7, #20]
	const uint8_t	*ps = (const uint8_t*)src;
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	613b      	str	r3, [r7, #16]

	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018cf8:	e00a      	b.n	8018d10 <request_and+0x2c>
		*pd++ &= *ps++;
 8018cfa:	693b      	ldr	r3, [r7, #16]
 8018cfc:	1c5a      	adds	r2, r3, #1
 8018cfe:	613a      	str	r2, [r7, #16]
 8018d00:	7819      	ldrb	r1, [r3, #0]
 8018d02:	697b      	ldr	r3, [r7, #20]
 8018d04:	1c5a      	adds	r2, r3, #1
 8018d06:	617a      	str	r2, [r7, #20]
 8018d08:	781a      	ldrb	r2, [r3, #0]
 8018d0a:	400a      	ands	r2, r1
 8018d0c:	b2d2      	uxtb	r2, r2
 8018d0e:	701a      	strb	r2, [r3, #0]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	f023 0303 	bic.w	r3, r3, #3
 8018d16:	68fa      	ldr	r2, [r7, #12]
 8018d18:	4413      	add	r3, r2
 8018d1a:	697a      	ldr	r2, [r7, #20]
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d3ec      	bcc.n	8018cfa <request_and+0x16>
}
 8018d20:	bf00      	nop
 8018d22:	371c      	adds	r7, #28
 8018d24:	46bd      	mov	sp, r7
 8018d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2a:	4770      	bx	lr

08018d2c <update_request_marker>:
	return c;
}

//**************************************************************************************************
static void update_request_marker(Request_Flag flag, const Packet *p)
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b08c      	sub	sp, #48	; 0x30
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	4603      	mov	r3, r0
 8018d34:	6039      	str	r1, [r7, #0]
 8018d36:	71fb      	strb	r3, [r7, #7]
	PROFILE("update_request_marker() begin");
 8018d38:	bf00      	nop

	uint_fast_t *any_mask, *all_mask;
	uint_fast16_t *any_pending;
	if (flag == Request_row)
 8018d3a:	79fb      	ldrb	r3, [r7, #7]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d118      	bne.n	8018d72 <update_request_marker+0x46>
	{
		any_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.row_any_mask.pos + 0]);
 8018d40:	4b5b      	ldr	r3, [pc, #364]	; (8018eb0 <update_request_marker+0x184>)
 8018d42:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018d46:	4b5b      	ldr	r3, [pc, #364]	; (8018eb4 <update_request_marker+0x188>)
 8018d48:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8018d4c:	3306      	adds	r3, #6
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	4413      	add	r3, r2
 8018d52:	62fb      	str	r3, [r7, #44]	; 0x2c
		all_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.row_all_mask.pos + 0]);
 8018d54:	4b56      	ldr	r3, [pc, #344]	; (8018eb0 <update_request_marker+0x184>)
 8018d56:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018d5a:	4b56      	ldr	r3, [pc, #344]	; (8018eb4 <update_request_marker+0x188>)
 8018d5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018d60:	3306      	adds	r3, #6
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	4413      	add	r3, r2
 8018d66:	62bb      	str	r3, [r7, #40]	; 0x28
		any_pending = (uint_fast16_t *)&(mx.request->row_any_pending);
 8018d68:	4b51      	ldr	r3, [pc, #324]	; (8018eb0 <update_request_marker+0x184>)
 8018d6a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8018d70:	e01b      	b.n	8018daa <update_request_marker+0x7e>
	}
	else if(flag == Request_column)
 8018d72:	79fb      	ldrb	r3, [r7, #7]
 8018d74:	2b01      	cmp	r3, #1
 8018d76:	d118      	bne.n	8018daa <update_request_marker+0x7e>
	{
		any_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos + 0]);
 8018d78:	4b4d      	ldr	r3, [pc, #308]	; (8018eb0 <update_request_marker+0x184>)
 8018d7a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018d7e:	4b4d      	ldr	r3, [pc, #308]	; (8018eb4 <update_request_marker+0x188>)
 8018d80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8018d84:	3306      	adds	r3, #6
 8018d86:	009b      	lsls	r3, r3, #2
 8018d88:	4413      	add	r3, r2
 8018d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		all_mask = (uint_fast_t *)&(mx.request->mask[chirp_config.column_all_mask.pos + 0]);
 8018d8c:	4b48      	ldr	r3, [pc, #288]	; (8018eb0 <update_request_marker+0x184>)
 8018d8e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8018d92:	4b48      	ldr	r3, [pc, #288]	; (8018eb4 <update_request_marker+0x188>)
 8018d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018d98:	3306      	adds	r3, #6
 8018d9a:	009b      	lsls	r3, r3, #2
 8018d9c:	4413      	add	r3, r2
 8018d9e:	62bb      	str	r3, [r7, #40]	; 0x28
		any_pending = (uint_fast16_t *)&(mx.request->column_any_pending);
 8018da0:	4b43      	ldr	r3, [pc, #268]	; (8018eb0 <update_request_marker+0x184>)
 8018da2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018da6:	3304      	adds	r3, #4
 8018da8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (!(*any_pending))
 8018daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d12b      	bne.n	8018e0a <update_request_marker+0xde>
	{
		gpi_memcpy_dma_inline(any_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018db2:	4b40      	ldr	r3, [pc, #256]	; (8018eb4 <update_request_marker+0x188>)
 8018db4:	7a9b      	ldrb	r3, [r3, #10]
 8018db6:	3308      	adds	r3, #8
 8018db8:	683a      	ldr	r2, [r7, #0]
 8018dba:	441a      	add	r2, r3
 8018dbc:	4b3d      	ldr	r3, [pc, #244]	; (8018eb4 <update_request_marker+0x188>)
 8018dbe:	7f5b      	ldrb	r3, [r3, #29]
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018dc4:	6179      	str	r1, [r7, #20]
 8018dc6:	613a      	str	r2, [r7, #16]
 8018dc8:	60fb      	str	r3, [r7, #12]
	__builtin_memcpy(dest, src, size);
 8018dca:	697a      	ldr	r2, [r7, #20]
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	4610      	mov	r0, r2
 8018dd0:	4619      	mov	r1, r3
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	461a      	mov	r2, r3
 8018dd6:	f008 fe19 	bl	8021a0c <memcpy>
		gpi_memcpy_dma_inline(all_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018dda:	4b36      	ldr	r3, [pc, #216]	; (8018eb4 <update_request_marker+0x188>)
 8018ddc:	7a9b      	ldrb	r3, [r3, #10]
 8018dde:	3308      	adds	r3, #8
 8018de0:	683a      	ldr	r2, [r7, #0]
 8018de2:	441a      	add	r2, r3
 8018de4:	4b33      	ldr	r3, [pc, #204]	; (8018eb4 <update_request_marker+0x188>)
 8018de6:	7f5b      	ldrb	r3, [r3, #29]
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018dec:	6239      	str	r1, [r7, #32]
 8018dee:	61fa      	str	r2, [r7, #28]
 8018df0:	61bb      	str	r3, [r7, #24]
 8018df2:	6a3a      	ldr	r2, [r7, #32]
 8018df4:	69fb      	ldr	r3, [r7, #28]
 8018df6:	4610      	mov	r0, r2
 8018df8:	4619      	mov	r1, r3
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	461a      	mov	r2, r3
 8018dfe:	f008 fe05 	bl	8021a0c <memcpy>

		*any_pending = 1;	// temporary, will be updated together with following coding vector snoop
 8018e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e04:	2201      	movs	r2, #1
 8018e06:	601a      	str	r2, [r3, #0]
 8018e08:	e017      	b.n	8018e3a <update_request_marker+0x10e>
	}
	else
	{
		request_or (any_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018e0a:	4b2a      	ldr	r3, [pc, #168]	; (8018eb4 <update_request_marker+0x188>)
 8018e0c:	7a9b      	ldrb	r3, [r3, #10]
 8018e0e:	3308      	adds	r3, #8
 8018e10:	683a      	ldr	r2, [r7, #0]
 8018e12:	18d1      	adds	r1, r2, r3
 8018e14:	4b27      	ldr	r3, [pc, #156]	; (8018eb4 <update_request_marker+0x188>)
 8018e16:	7f5b      	ldrb	r3, [r3, #29]
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e1e:	f7ff ff3f 	bl	8018ca0 <request_or>
		request_and(all_mask, &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018e22:	4b24      	ldr	r3, [pc, #144]	; (8018eb4 <update_request_marker+0x188>)
 8018e24:	7a9b      	ldrb	r3, [r3, #10]
 8018e26:	3308      	adds	r3, #8
 8018e28:	683a      	ldr	r2, [r7, #0]
 8018e2a:	18d1      	adds	r1, r2, r3
 8018e2c:	4b21      	ldr	r3, [pc, #132]	; (8018eb4 <update_request_marker+0x188>)
 8018e2e:	7f5b      	ldrb	r3, [r3, #29]
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	461a      	mov	r2, r3
 8018e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e36:	f7ff ff55 	bl	8018ce4 <request_and>
	}

	any_mask[chirp_config.matrix_coding_vector.len - 1] &= mx.request->padding_mask;
 8018e3a:	4b1e      	ldr	r3, [pc, #120]	; (8018eb4 <update_request_marker+0x188>)
 8018e3c:	7f5b      	ldrb	r3, [r3, #29]
 8018e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018e42:	3b01      	subs	r3, #1
 8018e44:	009b      	lsls	r3, r3, #2
 8018e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e48:	4413      	add	r3, r2
 8018e4a:	6819      	ldr	r1, [r3, #0]
 8018e4c:	4b18      	ldr	r3, [pc, #96]	; (8018eb0 <update_request_marker+0x184>)
 8018e4e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018e52:	695a      	ldr	r2, [r3, #20]
 8018e54:	4b17      	ldr	r3, [pc, #92]	; (8018eb4 <update_request_marker+0x188>)
 8018e56:	7f5b      	ldrb	r3, [r3, #29]
 8018e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018e5c:	3b01      	subs	r3, #1
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e62:	4403      	add	r3, r0
 8018e64:	400a      	ands	r2, r1
 8018e66:	601a      	str	r2, [r3, #0]
	all_mask[chirp_config.matrix_coding_vector.len - 1] &= mx.request->padding_mask;
 8018e68:	4b12      	ldr	r3, [pc, #72]	; (8018eb4 <update_request_marker+0x188>)
 8018e6a:	7f5b      	ldrb	r3, [r3, #29]
 8018e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018e70:	3b01      	subs	r3, #1
 8018e72:	009b      	lsls	r3, r3, #2
 8018e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e76:	4413      	add	r3, r2
 8018e78:	6819      	ldr	r1, [r3, #0]
 8018e7a:	4b0d      	ldr	r3, [pc, #52]	; (8018eb0 <update_request_marker+0x184>)
 8018e7c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018e80:	695a      	ldr	r2, [r3, #20]
 8018e82:	4b0c      	ldr	r3, [pc, #48]	; (8018eb4 <update_request_marker+0x188>)
 8018e84:	7f5b      	ldrb	r3, [r3, #29]
 8018e86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018e8a:	3b01      	subs	r3, #1
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e90:	4403      	add	r3, r0
 8018e92:	400a      	ands	r2, r1
 8018e94:	601a      	str	r2, [r3, #0]

	mx.request->last_update_slot = p->slot_number;
 8018e96:	4b06      	ldr	r3, [pc, #24]	; (8018eb0 <update_request_marker+0x184>)
 8018e98:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018e9c:	683a      	ldr	r2, [r7, #0]
 8018e9e:	8892      	ldrh	r2, [r2, #4]
 8018ea0:	b292      	uxth	r2, r2
 8018ea2:	811a      	strh	r2, [r3, #8]

	PROFILE("update_request_marker() end");
 8018ea4:	bf00      	nop
}
 8018ea6:	bf00      	nop
 8018ea8:	3730      	adds	r7, #48	; 0x30
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	200014f0 	.word	0x200014f0
 8018eb4:	20001430 	.word	0x20001430

08018eb8 <mx_request_clear>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

uint16_t mx_request_clear(uint_fast_t *dest, const void *src, unsigned int size)
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b08b      	sub	sp, #44	; 0x2c
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	60b9      	str	r1, [r7, #8]
 8018ec2:	607a      	str	r2, [r7, #4]
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	623b      	str	r3, [r7, #32]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	61fb      	str	r3, [r7, #28]
	uint8_t			*pd = (uint8_t*)dest;
 8018ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed2:	61bb      	str	r3, [r7, #24]
	const uint8_t	*ps = (const uint8_t*)src;
 8018ed4:	6a3b      	ldr	r3, [r7, #32]
 8018ed6:	617b      	str	r3, [r7, #20]
	uint16_t		 c = 0;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	827b      	strh	r3, [r7, #18]
 8018edc:	e019      	b.n	8018f12 <mx_request_clear+0x5a>
		*pd &= ~(*ps++);
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	1c5a      	adds	r2, r3, #1
 8018ee2:	617a      	str	r2, [r7, #20]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	43d9      	mvns	r1, r3
 8018ee8:	69bb      	ldr	r3, [r7, #24]
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	b25a      	sxtb	r2, r3
 8018eee:	b24b      	sxtb	r3, r1
 8018ef0:	4013      	ands	r3, r2
 8018ef2:	b25b      	sxtb	r3, r3
 8018ef4:	b2da      	uxtb	r2, r3
 8018ef6:	69bb      	ldr	r3, [r7, #24]
 8018ef8:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 8018efa:	69bb      	ldr	r3, [r7, #24]
 8018efc:	1c5a      	adds	r2, r3, #1
 8018efe:	61ba      	str	r2, [r7, #24]
 8018f00:	781b      	ldrb	r3, [r3, #0]
 8018f02:	747b      	strb	r3, [r7, #17]
	return gpi_popcnt_lut[x];
 8018f04:	7c7b      	ldrb	r3, [r7, #17]
 8018f06:	4a0a      	ldr	r2, [pc, #40]	; (8018f30 <mx_request_clear+0x78>)
 8018f08:	5cd3      	ldrb	r3, [r2, r3]
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	8a7b      	ldrh	r3, [r7, #18]
 8018f0e:	4413      	add	r3, r2
 8018f10:	827b      	strh	r3, [r7, #18]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8018f12:	69fb      	ldr	r3, [r7, #28]
 8018f14:	f023 0303 	bic.w	r3, r3, #3
 8018f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f1a:	4413      	add	r3, r2
 8018f1c:	69ba      	ldr	r2, [r7, #24]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d3dd      	bcc.n	8018ede <mx_request_clear+0x26>
	return c;
 8018f22:	8a7b      	ldrh	r3, [r7, #18]
	return request_clear(dest, src, size);
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	372c      	adds	r7, #44	; 0x2c
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2e:	4770      	bx	lr
 8018f30:	08026dd4 	.word	0x08026dd4

08018f34 <mx_update_request>:

//**************************************************************************************************

void mx_update_request(const Packet *p)
{
 8018f34:	b590      	push	{r4, r7, lr}
 8018f36:	b097      	sub	sp, #92	; 0x5c
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
	GPI_TRACE_FUNCTION();
 8018f3c:	bf00      	nop
	PROFILE("mx_update_request() begin");
 8018f3e:	bf00      	nop

	if (p != mx.tx_packet)
 8018f40:	4b5d      	ldr	r3, [pc, #372]	; (80190b8 <mx_update_request+0x184>)
 8018f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f44:	687a      	ldr	r2, [r7, #4]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d04c      	beq.n	8018fe4 <mx_update_request+0xb0>
	{
		if (p->flags.request_column)
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	79db      	ldrb	r3, [r3, #7]
 8018f4e:	f003 0301 	and.w	r3, r3, #1
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d004      	beq.n	8018f62 <mx_update_request+0x2e>
			update_request_marker(Request_column, p);
 8018f58:	6879      	ldr	r1, [r7, #4]
 8018f5a:	2001      	movs	r0, #1
 8018f5c:	f7ff fee6 	bl	8018d2c <update_request_marker>
 8018f60:	e00a      	b.n	8018f78 <mx_update_request+0x44>
		else if (p->flags.request_row)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	79db      	ldrb	r3, [r3, #7]
 8018f66:	f003 0302 	and.w	r3, r3, #2
 8018f6a:	b2db      	uxtb	r3, r3
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d003      	beq.n	8018f78 <mx_update_request+0x44>
			update_request_marker(Request_row, p);
 8018f70:	6879      	ldr	r1, [r7, #4]
 8018f72:	2000      	movs	r0, #0
 8018f74:	f7ff feda 	bl	8018d2c <update_request_marker>

		#if MX_REQUEST_HEURISTIC > 1
			if (!(p->flags.request_column || p->flags.is_full_rank))
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	79db      	ldrb	r3, [r3, #7]
 8018f7c:	f003 0301 	and.w	r3, r3, #1
 8018f80:	b2db      	uxtb	r3, r3
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d12e      	bne.n	8018fe4 <mx_update_request+0xb0>
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	79db      	ldrb	r3, [r3, #7]
 8018f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d127      	bne.n	8018fe4 <mx_update_request+0xb0>
				// reasonable), the content of p can change while we are working on it. It would hurt the
				// request information, which is a significant, but not fatal, error. In contrast, we have
				// to make absolutely sure that there are no side effects to memory outside of the request
				// information. This could happen at the following memcpy() if we don't handle sender_id in
				// a save way.
				uint8_t sender_id = p->sender_id;
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	799b      	ldrb	r3, [r3, #6]
 8018f98:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				if (sender_id >= chirp_config.mx_num_nodes)
 8018f9c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018fa0:	b29a      	uxth	r2, r3
 8018fa2:	4b46      	ldr	r3, [pc, #280]	; (80190bc <mx_update_request+0x188>)
 8018fa4:	881b      	ldrh	r3, [r3, #0]
 8018fa6:	b29b      	uxth	r3, r3
 8018fa8:	429a      	cmp	r2, r3
 8018faa:	f080 8148 	bcs.w	801923e <mx_update_request+0x30a>
				{
					return;
				}

				gpi_memcpy_dma_inline(&(mx.history[sender_id]->row_map_chunk[0]), &(p->packet_chunk[chirp_config.info_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018fae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018fb2:	4a41      	ldr	r2, [pc, #260]	; (80190b8 <mx_update_request+0x184>)
 8018fb4:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8018fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018fbc:	1d19      	adds	r1, r3, #4
 8018fbe:	4b3f      	ldr	r3, [pc, #252]	; (80190bc <mx_update_request+0x188>)
 8018fc0:	7a9b      	ldrb	r3, [r3, #10]
 8018fc2:	3308      	adds	r3, #8
 8018fc4:	687a      	ldr	r2, [r7, #4]
 8018fc6:	441a      	add	r2, r3
 8018fc8:	4b3c      	ldr	r3, [pc, #240]	; (80190bc <mx_update_request+0x188>)
 8018fca:	7f5b      	ldrb	r3, [r3, #29]
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	6479      	str	r1, [r7, #68]	; 0x44
 8018fd0:	643a      	str	r2, [r7, #64]	; 0x40
 8018fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fd8:	4610      	mov	r0, r2
 8018fda:	4619      	mov	r1, r3
 8018fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fde:	461a      	mov	r2, r3
 8018fe0:	f008 fd14 	bl	8021a0c <memcpy>
		#endif
	}

	// snoop coding vector and update any_pending data

	if (mx.request->column_any_pending)
 8018fe4:	4b34      	ldr	r3, [pc, #208]	; (80190b8 <mx_update_request+0x184>)
 8018fe6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	f000 809b 	beq.w	8019128 <mx_update_request+0x1f4>
	{
		uint_fast16_t last = mx.request->column_any_pending;
 8018ff2:	4b31      	ldr	r3, [pc, #196]	; (80190b8 <mx_update_request+0x184>)
 8018ff4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	64fb      	str	r3, [r7, #76]	; 0x4c

		mx.request->column_any_pending =
			request_clear((uint_fast_t *)&(mx.request->mask[chirp_config.column_any_mask.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8018ffc:	4b2e      	ldr	r3, [pc, #184]	; (80190b8 <mx_update_request+0x184>)
 8018ffe:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8019002:	4b2e      	ldr	r3, [pc, #184]	; (80190bc <mx_update_request+0x188>)
 8019004:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019008:	3306      	adds	r3, #6
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	18d1      	adds	r1, r2, r3
 801900e:	4b2b      	ldr	r3, [pc, #172]	; (80190bc <mx_update_request+0x188>)
 8019010:	799b      	ldrb	r3, [r3, #6]
 8019012:	3308      	adds	r3, #8
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	441a      	add	r2, r3
 8019018:	4b28      	ldr	r3, [pc, #160]	; (80190bc <mx_update_request+0x188>)
 801901a:	7f5b      	ldrb	r3, [r3, #29]
 801901c:	009b      	lsls	r3, r3, #2
 801901e:	6239      	str	r1, [r7, #32]
 8019020:	61fa      	str	r2, [r7, #28]
 8019022:	61bb      	str	r3, [r7, #24]
	uint8_t			*pd = (uint8_t*)dest;
 8019024:	6a3b      	ldr	r3, [r7, #32]
 8019026:	617b      	str	r3, [r7, #20]
	const uint8_t	*ps = (const uint8_t*)src;
 8019028:	69fb      	ldr	r3, [r7, #28]
 801902a:	613b      	str	r3, [r7, #16]
	uint16_t		 c = 0;
 801902c:	2300      	movs	r3, #0
 801902e:	81fb      	strh	r3, [r7, #14]
 8019030:	e019      	b.n	8019066 <mx_update_request+0x132>
		*pd &= ~(*ps++);
 8019032:	693b      	ldr	r3, [r7, #16]
 8019034:	1c5a      	adds	r2, r3, #1
 8019036:	613a      	str	r2, [r7, #16]
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	43d9      	mvns	r1, r3
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	b25a      	sxtb	r2, r3
 8019042:	b24b      	sxtb	r3, r1
 8019044:	4013      	ands	r3, r2
 8019046:	b25b      	sxtb	r3, r3
 8019048:	b2da      	uxtb	r2, r3
 801904a:	697b      	ldr	r3, [r7, #20]
 801904c:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 801904e:	697b      	ldr	r3, [r7, #20]
 8019050:	1c5a      	adds	r2, r3, #1
 8019052:	617a      	str	r2, [r7, #20]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	737b      	strb	r3, [r7, #13]
 8019058:	7b7b      	ldrb	r3, [r7, #13]
 801905a:	4a19      	ldr	r2, [pc, #100]	; (80190c0 <mx_update_request+0x18c>)
 801905c:	5cd3      	ldrb	r3, [r2, r3]
 801905e:	b29a      	uxth	r2, r3
 8019060:	89fb      	ldrh	r3, [r7, #14]
 8019062:	4413      	add	r3, r2
 8019064:	81fb      	strh	r3, [r7, #14]
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 8019066:	69bb      	ldr	r3, [r7, #24]
 8019068:	f023 0303 	bic.w	r3, r3, #3
 801906c:	6a3a      	ldr	r2, [r7, #32]
 801906e:	4413      	add	r3, r2
 8019070:	697a      	ldr	r2, [r7, #20]
 8019072:	429a      	cmp	r2, r3
 8019074:	d3dd      	bcc.n	8019032 <mx_update_request+0xfe>
	return c;
 8019076:	89fa      	ldrh	r2, [r7, #14]
		mx.request->column_any_pending =
 8019078:	4b0f      	ldr	r3, [pc, #60]	; (80190b8 <mx_update_request+0x184>)
 801907a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801907e:	605a      	str	r2, [r3, #4]
		request_clear(&(mx.request->mask[chirp_config.column_all_mask.pos]), &(p->packet_chunk[chirp_config.coding_vector.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8019080:	4b0d      	ldr	r3, [pc, #52]	; (80190b8 <mx_update_request+0x184>)
 8019082:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8019086:	4b0d      	ldr	r3, [pc, #52]	; (80190bc <mx_update_request+0x188>)
 8019088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801908c:	3306      	adds	r3, #6
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	18d1      	adds	r1, r2, r3
 8019092:	4b0a      	ldr	r3, [pc, #40]	; (80190bc <mx_update_request+0x188>)
 8019094:	799b      	ldrb	r3, [r3, #6]
 8019096:	3308      	adds	r3, #8
 8019098:	687a      	ldr	r2, [r7, #4]
 801909a:	441a      	add	r2, r3
 801909c:	4b07      	ldr	r3, [pc, #28]	; (80190bc <mx_update_request+0x188>)
 801909e:	7f5b      	ldrb	r3, [r3, #29]
 80190a0:	009b      	lsls	r3, r3, #2
 80190a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80190a4:	637a      	str	r2, [r7, #52]	; 0x34
 80190a6:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t			*pd = (uint8_t*)dest;
 80190a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t	*ps = (const uint8_t*)src;
 80190ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t		 c = 0;
 80190b0:	2300      	movs	r3, #0
 80190b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80190b4:	e022      	b.n	80190fc <mx_update_request+0x1c8>
 80190b6:	bf00      	nop
 80190b8:	200014f0 	.word	0x200014f0
 80190bc:	20001430 	.word	0x20001430
 80190c0:	08026dd4 	.word	0x08026dd4
		*pd &= ~(*ps++);
 80190c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c6:	1c5a      	adds	r2, r3, #1
 80190c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	43d9      	mvns	r1, r3
 80190ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	b25a      	sxtb	r2, r3
 80190d4:	b24b      	sxtb	r3, r1
 80190d6:	4013      	ands	r3, r2
 80190d8:	b25b      	sxtb	r3, r3
 80190da:	b2da      	uxtb	r2, r3
 80190dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190de:	701a      	strb	r2, [r3, #0]
		c += gpi_popcnt_8(*pd++);
 80190e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e2:	1c5a      	adds	r2, r3, #1
 80190e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80190e6:	781b      	ldrb	r3, [r3, #0]
 80190e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80190ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80190f0:	4a55      	ldr	r2, [pc, #340]	; (8019248 <mx_update_request+0x314>)
 80190f2:	5cd3      	ldrb	r3, [r2, r3]
 80190f4:	b29a      	uxth	r2, r3
 80190f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190f8:	4413      	add	r3, r2
 80190fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	while (pd < (uint8_t*)&dest[size / sizeof(*dest)])
 80190fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190fe:	f023 0303 	bic.w	r3, r3, #3
 8019102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019104:	4413      	add	r3, r2
 8019106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019108:	429a      	cmp	r2, r3
 801910a:	d3db      	bcc.n	80190c4 <mx_update_request+0x190>

		if (mx.request->column_any_pending != last)
 801910c:	4b4f      	ldr	r3, [pc, #316]	; (801924c <mx_update_request+0x318>)
 801910e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019116:	429a      	cmp	r2, r3
 8019118:	d006      	beq.n	8019128 <mx_update_request+0x1f4>
			mx.request->last_update_slot = p->slot_number;
 801911a:	4b4c      	ldr	r3, [pc, #304]	; (801924c <mx_update_request+0x318>)
 801911c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	8892      	ldrh	r2, [r2, #4]
 8019124:	b292      	uxth	r2, r2
 8019126:	811a      	strh	r2, [r3, #8]
	}

	if (mx.request->row_any_pending)
 8019128:	4b48      	ldr	r3, [pc, #288]	; (801924c <mx_update_request+0x318>)
 801912a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d07f      	beq.n	8019234 <mx_update_request+0x300>
	{
		int_fast16_t i = mx_get_leading_index(&(p->packet_chunk[chirp_config.coding_vector.pos]));
 8019134:	4b46      	ldr	r3, [pc, #280]	; (8019250 <mx_update_request+0x31c>)
 8019136:	799b      	ldrb	r3, [r3, #6]
 8019138:	3308      	adds	r3, #8
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	4413      	add	r3, r2
 801913e:	4618      	mov	r0, r3
 8019140:	f7f5 f926 	bl	800e390 <mx_get_leading_index>
 8019144:	6578      	str	r0, [r7, #84]	; 0x54
		if (i >= 0)
 8019146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019148:	2b00      	cmp	r3, #0
 801914a:	db50      	blt.n	80191ee <mx_update_request+0x2ba>
		{
			uint_fast_t m = gpi_slu(1, i);
 801914c:	2201      	movs	r2, #1
 801914e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019150:	fa02 f303 	lsl.w	r3, r2, r3
 8019154:	64bb      	str	r3, [r7, #72]	; 0x48

			if (mx.request->mask[chirp_config.row_any_mask.pos + i / (sizeof(m) * 8)] & m)
 8019156:	4b3d      	ldr	r3, [pc, #244]	; (801924c <mx_update_request+0x318>)
 8019158:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801915c:	4a3c      	ldr	r2, [pc, #240]	; (8019250 <mx_update_request+0x31c>)
 801915e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8019162:	4611      	mov	r1, r2
 8019164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019166:	0952      	lsrs	r2, r2, #5
 8019168:	440a      	add	r2, r1
 801916a:	3206      	adds	r2, #6
 801916c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019172:	4013      	ands	r3, r2
 8019174:	2b00      	cmp	r3, #0
 8019176:	d03a      	beq.n	80191ee <mx_update_request+0x2ba>
			{
				mx.request->mask[chirp_config.row_any_mask.pos + i / (sizeof(m) * 8)] &= ~m;
 8019178:	4b34      	ldr	r3, [pc, #208]	; (801924c <mx_update_request+0x318>)
 801917a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801917e:	4b34      	ldr	r3, [pc, #208]	; (8019250 <mx_update_request+0x31c>)
 8019180:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8019184:	4619      	mov	r1, r3
 8019186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019188:	095b      	lsrs	r3, r3, #5
 801918a:	4419      	add	r1, r3
 801918c:	3106      	adds	r1, #6
 801918e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8019192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019194:	43d1      	mvns	r1, r2
 8019196:	4a2d      	ldr	r2, [pc, #180]	; (801924c <mx_update_request+0x318>)
 8019198:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 801919c:	4c2c      	ldr	r4, [pc, #176]	; (8019250 <mx_update_request+0x31c>)
 801919e:	f894 402e 	ldrb.w	r4, [r4, #46]	; 0x2e
 80191a2:	4423      	add	r3, r4
 80191a4:	4001      	ands	r1, r0
 80191a6:	3306      	adds	r3, #6
 80191a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				mx.request->mask[chirp_config.row_all_mask.pos + i / (sizeof(m) * 8)] &= ~m;
 80191ac:	4b27      	ldr	r3, [pc, #156]	; (801924c <mx_update_request+0x318>)
 80191ae:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 80191b2:	4b27      	ldr	r3, [pc, #156]	; (8019250 <mx_update_request+0x31c>)
 80191b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80191b8:	4619      	mov	r1, r3
 80191ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191bc:	095b      	lsrs	r3, r3, #5
 80191be:	4419      	add	r1, r3
 80191c0:	3106      	adds	r1, #6
 80191c2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80191c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80191c8:	43d1      	mvns	r1, r2
 80191ca:	4a20      	ldr	r2, [pc, #128]	; (801924c <mx_update_request+0x318>)
 80191cc:	f8d2 2870 	ldr.w	r2, [r2, #2160]	; 0x870
 80191d0:	4c1f      	ldr	r4, [pc, #124]	; (8019250 <mx_update_request+0x31c>)
 80191d2:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
 80191d6:	4423      	add	r3, r4
 80191d8:	4001      	ands	r1, r0
 80191da:	3306      	adds	r3, #6
 80191dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				mx.request->last_update_slot = p->slot_number;
 80191e0:	4b1a      	ldr	r3, [pc, #104]	; (801924c <mx_update_request+0x318>)
 80191e2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	8892      	ldrh	r2, [r2, #4]
 80191ea:	b292      	uxth	r2, r2
 80191ec:	811a      	strh	r2, [r3, #8]
            }
        }

		mx.request->row_any_pending = 0;
 80191ee:	4b17      	ldr	r3, [pc, #92]	; (801924c <mx_update_request+0x318>)
 80191f0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80191f4:	2200      	movs	r2, #0
 80191f6:	601a      	str	r2, [r3, #0]
		for (i = chirp_config.matrix_coding_vector.len; i-- > 0;)
 80191f8:	4b15      	ldr	r3, [pc, #84]	; (8019250 <mx_update_request+0x31c>)
 80191fa:	7f5b      	ldrb	r3, [r3, #29]
 80191fc:	657b      	str	r3, [r7, #84]	; 0x54
 80191fe:	e014      	b.n	801922a <mx_update_request+0x2f6>
		{
			if (mx.request->mask[chirp_config.row_any_mask.pos + i])
 8019200:	4b12      	ldr	r3, [pc, #72]	; (801924c <mx_update_request+0x318>)
 8019202:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019206:	4a12      	ldr	r2, [pc, #72]	; (8019250 <mx_update_request+0x31c>)
 8019208:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 801920c:	4611      	mov	r1, r2
 801920e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019210:	440a      	add	r2, r1
 8019212:	3206      	adds	r2, #6
 8019214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d006      	beq.n	801922a <mx_update_request+0x2f6>
			{
				mx.request->row_any_pending = 1;
 801921c:	4b0b      	ldr	r3, [pc, #44]	; (801924c <mx_update_request+0x318>)
 801921e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8019222:	2201      	movs	r2, #1
 8019224:	601a      	str	r2, [r3, #0]
				break;
 8019226:	bf00      	nop
            }
        }
	}

	PROFILE("mx_update_request() end");
 8019228:	e004      	b.n	8019234 <mx_update_request+0x300>
		for (i = chirp_config.matrix_coding_vector.len; i-- > 0;)
 801922a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801922c:	1e5a      	subs	r2, r3, #1
 801922e:	657a      	str	r2, [r7, #84]	; 0x54
 8019230:	2b00      	cmp	r3, #0
 8019232:	dce5      	bgt.n	8019200 <mx_update_request+0x2cc>
	PROFILE("mx_update_request() end");
 8019234:	bf00      	nop

	TRACE_DUMP(1, "any_row_mask:", &(mx.request->mask[chirp_config.row_any_mask.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8019236:	bf00      	nop
	TRACE_DUMP(1, "any_column_mask:", &(mx.request->mask[chirp_config.column_any_mask.pos]), chirp_config.matrix_coding_vector.len * sizeof(uint_fast_t));
 8019238:	bf00      	nop

	GPI_TRACE_RETURN();
 801923a:	bf00      	nop
 801923c:	e000      	b.n	8019240 <mx_update_request+0x30c>
					return;
 801923e:	bf00      	nop
}
 8019240:	375c      	adds	r7, #92	; 0x5c
 8019242:	46bd      	mov	sp, r7
 8019244:	bd90      	pop	{r4, r7, pc}
 8019246:	bf00      	nop
 8019248:	08026dd4 	.word	0x08026dd4
 801924c:	200014f0 	.word	0x200014f0
 8019250:	20001430 	.word	0x20001430

08019254 <NVIC_SystemReset>:
{
 8019254:	b480      	push	{r7}
 8019256:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8019258:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801925c:	4b05      	ldr	r3, [pc, #20]	; (8019274 <NVIC_SystemReset+0x20>)
 801925e:	68db      	ldr	r3, [r3, #12]
 8019260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8019264:	4903      	ldr	r1, [pc, #12]	; (8019274 <NVIC_SystemReset+0x20>)
 8019266:	4b04      	ldr	r3, [pc, #16]	; (8019278 <NVIC_SystemReset+0x24>)
 8019268:	4313      	orrs	r3, r2
 801926a:	60cb      	str	r3, [r1, #12]
 801926c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8019270:	bf00      	nop
    __NOP();
 8019272:	e7fd      	b.n	8019270 <NVIC_SystemReset+0x1c>
 8019274:	e000ed00 	.word	0xe000ed00
 8019278:	05fa0004 	.word	0x05fa0004

0801927c <BCD2DEC>:
  * @brief  Convert a BCD to a DEC
  * @param  temp: The BCD to be converted
  * @retval The converted DEC
  */
uint8_t BCD2DEC(uint8_t temp)
{
 801927c:	b480      	push	{r7}
 801927e:	b083      	sub	sp, #12
 8019280:	af00      	add	r7, sp, #0
 8019282:	4603      	mov	r3, r0
 8019284:	71fb      	strb	r3, [r7, #7]
  return (temp - 6 * (temp >> 4));
 8019286:	79fb      	ldrb	r3, [r7, #7]
 8019288:	091b      	lsrs	r3, r3, #4
 801928a:	b2db      	uxtb	r3, r3
 801928c:	461a      	mov	r2, r3
 801928e:	009b      	lsls	r3, r3, #2
 8019290:	1ad3      	subs	r3, r2, r3
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	b2da      	uxtb	r2, r3
 8019296:	79fb      	ldrb	r3, [r7, #7]
 8019298:	4413      	add	r3, r2
 801929a:	b2db      	uxtb	r3, r3
}
 801929c:	4618      	mov	r0, r3
 801929e:	370c      	adds	r7, #12
 80192a0:	46bd      	mov	sp, r7
 80192a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a6:	4770      	bx	lr

080192a8 <DEC2BCD>:
  * @brief  Convert a DEC to a BCD
  * @param  temp: The DEC to be converted
  * @retval The converted BCD
  */
uint8_t DEC2BCD(uint8_t temp)
{
 80192a8:	b480      	push	{r7}
 80192aa:	b083      	sub	sp, #12
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	4603      	mov	r3, r0
 80192b0:	71fb      	strb	r3, [r7, #7]
  return (temp + 6 * (temp / 10));
 80192b2:	79fb      	ldrb	r3, [r7, #7]
 80192b4:	4a09      	ldr	r2, [pc, #36]	; (80192dc <DEC2BCD+0x34>)
 80192b6:	fba2 2303 	umull	r2, r3, r2, r3
 80192ba:	08db      	lsrs	r3, r3, #3
 80192bc:	b2db      	uxtb	r3, r3
 80192be:	461a      	mov	r2, r3
 80192c0:	0052      	lsls	r2, r2, #1
 80192c2:	4413      	add	r3, r2
 80192c4:	005b      	lsls	r3, r3, #1
 80192c6:	b2da      	uxtb	r2, r3
 80192c8:	79fb      	ldrb	r3, [r7, #7]
 80192ca:	4413      	add	r3, r2
 80192cc:	b2db      	uxtb	r3, r3
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	370c      	adds	r7, #12
 80192d2:	46bd      	mov	sp, r7
 80192d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d8:	4770      	bx	lr
 80192da:	bf00      	nop
 80192dc:	cccccccd 	.word	0xcccccccd

080192e0 <DS3231_ModifyTime>:
  * @param  second: 00–59
  * @retval None
  */
void DS3231_ModifyTime(uint8_t year, uint8_t month, uint8_t date,
                       uint8_t day, uint8_t hour, uint8_t mintue, uint8_t second)
{
 80192e0:	b590      	push	{r4, r7, lr}
 80192e2:	b089      	sub	sp, #36	; 0x24
 80192e4:	af04      	add	r7, sp, #16
 80192e6:	4604      	mov	r4, r0
 80192e8:	4608      	mov	r0, r1
 80192ea:	4611      	mov	r1, r2
 80192ec:	461a      	mov	r2, r3
 80192ee:	4623      	mov	r3, r4
 80192f0:	71fb      	strb	r3, [r7, #7]
 80192f2:	4603      	mov	r3, r0
 80192f4:	71bb      	strb	r3, [r7, #6]
 80192f6:	460b      	mov	r3, r1
 80192f8:	717b      	strb	r3, [r7, #5]
 80192fa:	4613      	mov	r3, r2
 80192fc:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t DS3231_Databuff[DS3231_TIME_LENGTH];
  uint8_t i;
  DS3231_Databuff[DS3231_memaddr.year] = year;
 80192fe:	2306      	movs	r3, #6
 8019300:	f107 0210 	add.w	r2, r7, #16
 8019304:	4413      	add	r3, r2
 8019306:	79fa      	ldrb	r2, [r7, #7]
 8019308:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.month] = month;
 801930c:	2305      	movs	r3, #5
 801930e:	f107 0210 	add.w	r2, r7, #16
 8019312:	4413      	add	r3, r2
 8019314:	79ba      	ldrb	r2, [r7, #6]
 8019316:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.date] = date;
 801931a:	2304      	movs	r3, #4
 801931c:	f107 0210 	add.w	r2, r7, #16
 8019320:	4413      	add	r3, r2
 8019322:	797a      	ldrb	r2, [r7, #5]
 8019324:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.day] = day;
 8019328:	2303      	movs	r3, #3
 801932a:	f107 0210 	add.w	r2, r7, #16
 801932e:	4413      	add	r3, r2
 8019330:	793a      	ldrb	r2, [r7, #4]
 8019332:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.hour] = hour; //default modem is 24 hour
 8019336:	2302      	movs	r3, #2
 8019338:	f107 0210 	add.w	r2, r7, #16
 801933c:	4413      	add	r3, r2
 801933e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019342:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.min] = mintue;
 8019346:	2301      	movs	r3, #1
 8019348:	f107 0210 	add.w	r2, r7, #16
 801934c:	4413      	add	r3, r2
 801934e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8019352:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.sec] = second;
 8019356:	2300      	movs	r3, #0
 8019358:	f107 0210 	add.w	r2, r7, #16
 801935c:	4413      	add	r3, r2
 801935e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019362:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 8019366:	2300      	movs	r3, #0
 8019368:	73fb      	strb	r3, [r7, #15]
 801936a:	e010      	b.n	801938e <DS3231_ModifyTime+0xae>
    DS3231_Buff[i] = DEC2BCD(DS3231_Databuff[i]);
 801936c:	7bfb      	ldrb	r3, [r7, #15]
 801936e:	f107 0210 	add.w	r2, r7, #16
 8019372:	4413      	add	r3, r2
 8019374:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8019378:	7bfc      	ldrb	r4, [r7, #15]
 801937a:	4618      	mov	r0, r3
 801937c:	f7ff ff94 	bl	80192a8 <DEC2BCD>
 8019380:	4603      	mov	r3, r0
 8019382:	461a      	mov	r2, r3
 8019384:	4b0d      	ldr	r3, [pc, #52]	; (80193bc <DS3231_ModifyTime+0xdc>)
 8019386:	551a      	strb	r2, [r3, r4]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 8019388:	7bfb      	ldrb	r3, [r7, #15]
 801938a:	3301      	adds	r3, #1
 801938c:	73fb      	strb	r3, [r7, #15]
 801938e:	7bfb      	ldrb	r3, [r7, #15]
 8019390:	2b06      	cmp	r3, #6
 8019392:	d9eb      	bls.n	801936c <DS3231_ModifyTime+0x8c>
  while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, 0, I2C_MEMADD_SIZE_8BIT, DS3231_Buff, DS3231_TIME_LENGTH, 0x01) != HAL_OK)
 8019394:	bf00      	nop
 8019396:	2301      	movs	r3, #1
 8019398:	9302      	str	r3, [sp, #8]
 801939a:	2307      	movs	r3, #7
 801939c:	9301      	str	r3, [sp, #4]
 801939e:	4b07      	ldr	r3, [pc, #28]	; (80193bc <DS3231_ModifyTime+0xdc>)
 80193a0:	9300      	str	r3, [sp, #0]
 80193a2:	2301      	movs	r3, #1
 80193a4:	2200      	movs	r2, #0
 80193a6:	21d0      	movs	r1, #208	; 0xd0
 80193a8:	4805      	ldr	r0, [pc, #20]	; (80193c0 <DS3231_ModifyTime+0xe0>)
 80193aa:	f7ea f959 	bl	8003660 <HAL_I2C_Mem_Write>
 80193ae:	4603      	mov	r3, r0
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d1f0      	bne.n	8019396 <DS3231_ModifyTime+0xb6>
    ;
  #endif
}
 80193b4:	bf00      	nop
 80193b6:	3714      	adds	r7, #20
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd90      	pop	{r4, r7, pc}
 80193bc:	20001e30 	.word	0x20001e30
 80193c0:	200010e0 	.word	0x200010e0

080193c4 <DS3231_GetTime>:
  * @brief  Give a command to get RTC time
  * @param  None
  * @retval None
  */
void DS3231_GetTime(void)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af02      	add	r7, sp, #8
  DS3231.flag = 0;
 80193ca:	4b08      	ldr	r3, [pc, #32]	; (80193ec <DS3231_GetTime+0x28>)
 80193cc:	2200      	movs	r2, #0
 80193ce:	741a      	strb	r2, [r3, #16]
  HAL_I2C_Mem_Read_IT(&hi2c2, DS3231_ADD, 0, I2C_MEMADD_SIZE_8BIT, DS3231_Buff, DS3231_REG_LENGTH);
 80193d0:	2313      	movs	r3, #19
 80193d2:	9301      	str	r3, [sp, #4]
 80193d4:	4b06      	ldr	r3, [pc, #24]	; (80193f0 <DS3231_GetTime+0x2c>)
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	2301      	movs	r3, #1
 80193da:	2200      	movs	r2, #0
 80193dc:	21d0      	movs	r1, #208	; 0xd0
 80193de:	4805      	ldr	r0, [pc, #20]	; (80193f4 <DS3231_GetTime+0x30>)
 80193e0:	f7ea fb68 	bl	8003ab4 <HAL_I2C_Mem_Read_IT>
}
 80193e4:	bf00      	nop
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	20001e44 	.word	0x20001e44
 80193f0:	20001e30 	.word	0x20001e30
 80193f4:	200010e0 	.word	0x200010e0

080193f8 <DS3231_ShowTime>:

Chirp_Time DS3231_ShowTime()
{
 80193f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193fa:	b09d      	sub	sp, #116	; 0x74
 80193fc:	af06      	add	r7, sp, #24
 80193fe:	6078      	str	r0, [r7, #4]
  char buffer[50], buff[20];
  Chirp_Time RTC_Time;
  memset(&RTC_Time, 0, sizeof(RTC_Time));
 8019400:	f107 0308 	add.w	r3, r7, #8
 8019404:	2208      	movs	r2, #8
 8019406:	2100      	movs	r1, #0
 8019408:	4618      	mov	r0, r3
 801940a:	f008 fb0a 	bl	8021a22 <memset>
  uint16_t count = 0;
 801940e:	2300      	movs	r3, #0
 8019410:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  while (DS3231.flag == 0)
 8019414:	e01f      	b.n	8019456 <DS3231_ShowTime+0x5e>
  {
    count++;
 8019416:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801941a:	3301      	adds	r3, #1
 801941c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    assert_reset(count < 0xFFFF);
 8019420:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8019424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019428:	4293      	cmp	r3, r2
 801942a:	d114      	bne.n	8019456 <DS3231_ShowTime+0x5e>
 801942c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8019430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019434:	4293      	cmp	r3, r2
 8019436:	d001      	beq.n	801943c <DS3231_ShowTime+0x44>
 8019438:	2301      	movs	r3, #1
 801943a:	e000      	b.n	801943e <DS3231_ShowTime+0x46>
 801943c:	2300      	movs	r3, #0
 801943e:	4618      	mov	r0, r3
 8019440:	f009 f8fc 	bl	802263c <iprintf>
 8019444:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8019448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801944c:	4293      	cmp	r3, r2
 801944e:	d102      	bne.n	8019456 <DS3231_ShowTime+0x5e>
  __ASM volatile ("cpsid f" : : : "memory");
 8019450:	b671      	cpsid	f
 8019452:	f7ff feff 	bl	8019254 <NVIC_SystemReset>
  while (DS3231.flag == 0)
 8019456:	4b54      	ldr	r3, [pc, #336]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019458:	7c1b      	ldrb	r3, [r3, #16]
 801945a:	b2db      	uxtb	r3, r3
 801945c:	2b00      	cmp	r3, #0
 801945e:	d0da      	beq.n	8019416 <DS3231_ShowTime+0x1e>
  }
  DS3231.flag = 0;
 8019460:	4b51      	ldr	r3, [pc, #324]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019462:	2200      	movs	r2, #0
 8019464:	741a      	strb	r2, [r3, #16]
  switch (DS3231.Day)
 8019466:	4b50      	ldr	r3, [pc, #320]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019468:	789b      	ldrb	r3, [r3, #2]
 801946a:	3b01      	subs	r3, #1
 801946c:	2b06      	cmp	r3, #6
 801946e:	d852      	bhi.n	8019516 <DS3231_ShowTime+0x11e>
 8019470:	a201      	add	r2, pc, #4	; (adr r2, 8019478 <DS3231_ShowTime+0x80>)
 8019472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019476:	bf00      	nop
 8019478:	08019495 	.word	0x08019495
 801947c:	080194ad 	.word	0x080194ad
 8019480:	080194bd 	.word	0x080194bd
 8019484:	080194cb 	.word	0x080194cb
 8019488:	080194d9 	.word	0x080194d9
 801948c:	080194f1 	.word	0x080194f1
 8019490:	080194ff 	.word	0x080194ff
  {
  case 1:
    sprintf(buff, "MONDAY");
 8019494:	f107 0310 	add.w	r3, r7, #16
 8019498:	4a44      	ldr	r2, [pc, #272]	; (80195ac <DS3231_ShowTime+0x1b4>)
 801949a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801949e:	6018      	str	r0, [r3, #0]
 80194a0:	3304      	adds	r3, #4
 80194a2:	8019      	strh	r1, [r3, #0]
 80194a4:	3302      	adds	r3, #2
 80194a6:	0c0a      	lsrs	r2, r1, #16
 80194a8:	701a      	strb	r2, [r3, #0]
    break;
 80194aa:	e034      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 2:
    sprintf(buff, "TUESDAY");
 80194ac:	f107 0310 	add.w	r3, r7, #16
 80194b0:	4a3f      	ldr	r2, [pc, #252]	; (80195b0 <DS3231_ShowTime+0x1b8>)
 80194b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194b6:	e883 0003 	stmia.w	r3, {r0, r1}
    break;
 80194ba:	e02c      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 3:
    sprintf(buff, "WEDNESDAY");
 80194bc:	f107 0310 	add.w	r3, r7, #16
 80194c0:	4a3c      	ldr	r2, [pc, #240]	; (80195b4 <DS3231_ShowTime+0x1bc>)
 80194c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80194c4:	c303      	stmia	r3!, {r0, r1}
 80194c6:	801a      	strh	r2, [r3, #0]
    break;
 80194c8:	e025      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 4:
    sprintf(buff, "THURSDAY");
 80194ca:	f107 0310 	add.w	r3, r7, #16
 80194ce:	4a3a      	ldr	r2, [pc, #232]	; (80195b8 <DS3231_ShowTime+0x1c0>)
 80194d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80194d2:	c303      	stmia	r3!, {r0, r1}
 80194d4:	701a      	strb	r2, [r3, #0]
    break;
 80194d6:	e01e      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 5:
    sprintf(buff, "FRIDAY");
 80194d8:	f107 0310 	add.w	r3, r7, #16
 80194dc:	4a37      	ldr	r2, [pc, #220]	; (80195bc <DS3231_ShowTime+0x1c4>)
 80194de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194e2:	6018      	str	r0, [r3, #0]
 80194e4:	3304      	adds	r3, #4
 80194e6:	8019      	strh	r1, [r3, #0]
 80194e8:	3302      	adds	r3, #2
 80194ea:	0c0a      	lsrs	r2, r1, #16
 80194ec:	701a      	strb	r2, [r3, #0]
    break;
 80194ee:	e012      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 6:
    sprintf(buff, "SATURDAY");
 80194f0:	f107 0310 	add.w	r3, r7, #16
 80194f4:	4a32      	ldr	r2, [pc, #200]	; (80195c0 <DS3231_ShowTime+0x1c8>)
 80194f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80194f8:	c303      	stmia	r3!, {r0, r1}
 80194fa:	701a      	strb	r2, [r3, #0]
    break;
 80194fc:	e00b      	b.n	8019516 <DS3231_ShowTime+0x11e>
  case 7:
    sprintf(buff, "SUNDAY");
 80194fe:	f107 0310 	add.w	r3, r7, #16
 8019502:	4a30      	ldr	r2, [pc, #192]	; (80195c4 <DS3231_ShowTime+0x1cc>)
 8019504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019508:	6018      	str	r0, [r3, #0]
 801950a:	3304      	adds	r3, #4
 801950c:	8019      	strh	r1, [r3, #0]
 801950e:	3302      	adds	r3, #2
 8019510:	0c0a      	lsrs	r2, r1, #16
 8019512:	701a      	strb	r2, [r3, #0]
    break;
 8019514:	bf00      	nop
  }
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019516:	4b24      	ldr	r3, [pc, #144]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 801951e:	4b22      	ldr	r3, [pc, #136]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019520:	785b      	ldrb	r3, [r3, #1]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019522:	461e      	mov	r6, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019524:	4b20      	ldr	r3, [pc, #128]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019526:	78db      	ldrb	r3, [r3, #3]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019528:	4619      	mov	r1, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 801952a:	4b1f      	ldr	r3, [pc, #124]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 801952c:	791b      	ldrb	r3, [r3, #4]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 801952e:	461c      	mov	r4, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019530:	4b1d      	ldr	r3, [pc, #116]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019532:	795b      	ldrb	r3, [r3, #5]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 8019534:	461d      	mov	r5, r3
          DS3231.Month, DS3231.Date, buff, DS3231.Hour, DS3231.Minute, DS3231.Second);
 8019536:	4b1c      	ldr	r3, [pc, #112]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019538:	799b      	ldrb	r3, [r3, #6]
  sprintf(buffer, "%02d:%02d:%02d %s %02d:%02d:%02d\r\n", 2000 + DS3231.Year,
 801953a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801953e:	9304      	str	r3, [sp, #16]
 8019540:	9503      	str	r5, [sp, #12]
 8019542:	9402      	str	r4, [sp, #8]
 8019544:	f107 0310 	add.w	r3, r7, #16
 8019548:	9301      	str	r3, [sp, #4]
 801954a:	9100      	str	r1, [sp, #0]
 801954c:	4633      	mov	r3, r6
 801954e:	491e      	ldr	r1, [pc, #120]	; (80195c8 <DS3231_ShowTime+0x1d0>)
 8019550:	f009 f96c 	bl	802282c <siprintf>
  printf("%s", buffer);
 8019554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019558:	4619      	mov	r1, r3
 801955a:	481c      	ldr	r0, [pc, #112]	; (80195cc <DS3231_ShowTime+0x1d4>)
 801955c:	f009 f86e 	bl	802263c <iprintf>
  RTC_Time.chirp_year = 2000 + DS3231.Year;
 8019560:	4b11      	ldr	r3, [pc, #68]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	b29b      	uxth	r3, r3
 8019566:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801956a:	b29b      	uxth	r3, r3
 801956c:	813b      	strh	r3, [r7, #8]
  RTC_Time.chirp_month = DS3231.Month;
 801956e:	4b0e      	ldr	r3, [pc, #56]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019570:	785b      	ldrb	r3, [r3, #1]
 8019572:	72bb      	strb	r3, [r7, #10]
  RTC_Time.chirp_date = DS3231.Date;
 8019574:	4b0c      	ldr	r3, [pc, #48]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019576:	78db      	ldrb	r3, [r3, #3]
 8019578:	72fb      	strb	r3, [r7, #11]
  RTC_Time.chirp_day = DS3231.Day;
 801957a:	4b0b      	ldr	r3, [pc, #44]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 801957c:	789b      	ldrb	r3, [r3, #2]
 801957e:	733b      	strb	r3, [r7, #12]
  RTC_Time.chirp_hour = DS3231.Hour;
 8019580:	4b09      	ldr	r3, [pc, #36]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019582:	791b      	ldrb	r3, [r3, #4]
 8019584:	737b      	strb	r3, [r7, #13]
  RTC_Time.chirp_min = DS3231.Minute;
 8019586:	4b08      	ldr	r3, [pc, #32]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 8019588:	795b      	ldrb	r3, [r3, #5]
 801958a:	73bb      	strb	r3, [r7, #14]
  RTC_Time.chirp_sec = DS3231.Second;
 801958c:	4b06      	ldr	r3, [pc, #24]	; (80195a8 <DS3231_ShowTime+0x1b0>)
 801958e:	799b      	ldrb	r3, [r3, #6]
 8019590:	73fb      	strb	r3, [r7, #15]
  return RTC_Time;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	461a      	mov	r2, r3
 8019596:	f107 0308 	add.w	r3, r7, #8
 801959a:	cb03      	ldmia	r3!, {r0, r1}
 801959c:	6010      	str	r0, [r2, #0]
 801959e:	6051      	str	r1, [r2, #4]
}
 80195a0:	6878      	ldr	r0, [r7, #4]
 80195a2:	375c      	adds	r7, #92	; 0x5c
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195a8:	20001e44 	.word	0x20001e44
 80195ac:	08025d28 	.word	0x08025d28
 80195b0:	08025d30 	.word	0x08025d30
 80195b4:	08025d38 	.word	0x08025d38
 80195b8:	08025d44 	.word	0x08025d44
 80195bc:	08025d50 	.word	0x08025d50
 80195c0:	08025d58 	.word	0x08025d58
 80195c4:	08025d64 	.word	0x08025d64
 80195c8:	08025d6c 	.word	0x08025d6c
 80195cc:	08025d90 	.word	0x08025d90

080195d0 <DS3231_ClearAlarm1_Time>:

void DS3231_ClearAlarm1_Time()
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b086      	sub	sp, #24
 80195d4:	af04      	add	r7, sp, #16
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 80195d6:	2300      	movs	r3, #0
 80195d8:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0;
 80195da:	2300      	movs	r3, #0
 80195dc:	71bb      	strb	r3, [r7, #6]
  while (!alarm_flag)
 80195de:	e069      	b.n	80196b4 <DS3231_ClearAlarm1_Time+0xe4>
  {
    count++;
 80195e0:	79bb      	ldrb	r3, [r7, #6]
 80195e2:	3301      	adds	r3, #1
 80195e4:	71bb      	strb	r3, [r7, #6]
    assert_reset(count < 10);
 80195e6:	79bb      	ldrb	r3, [r7, #6]
 80195e8:	2b09      	cmp	r3, #9
 80195ea:	d90e      	bls.n	801960a <DS3231_ClearAlarm1_Time+0x3a>
 80195ec:	79bb      	ldrb	r3, [r7, #6]
 80195ee:	2b09      	cmp	r3, #9
 80195f0:	d801      	bhi.n	80195f6 <DS3231_ClearAlarm1_Time+0x26>
 80195f2:	2301      	movs	r3, #1
 80195f4:	e000      	b.n	80195f8 <DS3231_ClearAlarm1_Time+0x28>
 80195f6:	2300      	movs	r3, #0
 80195f8:	4618      	mov	r0, r3
 80195fa:	f009 f81f 	bl	802263c <iprintf>
 80195fe:	79bb      	ldrb	r3, [r7, #6]
 8019600:	2b09      	cmp	r3, #9
 8019602:	d902      	bls.n	801960a <DS3231_ClearAlarm1_Time+0x3a>
 8019604:	b671      	cpsid	f
 8019606:	f7ff fe25 	bl	8019254 <NVIC_SystemReset>
    printf("clear alarm\n");
 801960a:	482e      	ldr	r0, [pc, #184]	; (80196c4 <DS3231_ClearAlarm1_Time+0xf4>)
 801960c:	f009 f89e 	bl	802274c <puts>
    /* read control and status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019610:	bf00      	nop
 8019612:	230e      	movs	r3, #14
 8019614:	b29a      	uxth	r2, r3
 8019616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801961a:	9302      	str	r3, [sp, #8]
 801961c:	2302      	movs	r3, #2
 801961e:	9301      	str	r3, [sp, #4]
 8019620:	4b29      	ldr	r3, [pc, #164]	; (80196c8 <DS3231_ClearAlarm1_Time+0xf8>)
 8019622:	9300      	str	r3, [sp, #0]
 8019624:	2301      	movs	r3, #1
 8019626:	21d0      	movs	r1, #208	; 0xd0
 8019628:	4828      	ldr	r0, [pc, #160]	; (80196cc <DS3231_ClearAlarm1_Time+0xfc>)
 801962a:	f7ea f92b 	bl	8003884 <HAL_I2C_Mem_Read>
 801962e:	4603      	mov	r3, r0
 8019630:	2b00      	cmp	r3, #0
 8019632:	d1ee      	bne.n	8019612 <DS3231_ClearAlarm1_Time+0x42>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Control &= 0xFC;
 8019634:	4b26      	ldr	r3, [pc, #152]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 8019636:	7a5b      	ldrb	r3, [r3, #9]
 8019638:	f023 0303 	bic.w	r3, r3, #3
 801963c:	b2da      	uxtb	r2, r3
 801963e:	4b24      	ldr	r3, [pc, #144]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 8019640:	725a      	strb	r2, [r3, #9]
    DS3231.Status &= 0xFC;
 8019642:	4b23      	ldr	r3, [pc, #140]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 8019644:	7a9b      	ldrb	r3, [r3, #10]
 8019646:	f023 0303 	bic.w	r3, r3, #3
 801964a:	b2da      	uxtb	r2, r3
 801964c:	4b20      	ldr	r3, [pc, #128]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 801964e:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019650:	bf00      	nop
 8019652:	230e      	movs	r3, #14
 8019654:	b29a      	uxth	r2, r3
 8019656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801965a:	9302      	str	r3, [sp, #8]
 801965c:	2302      	movs	r3, #2
 801965e:	9301      	str	r3, [sp, #4]
 8019660:	4b19      	ldr	r3, [pc, #100]	; (80196c8 <DS3231_ClearAlarm1_Time+0xf8>)
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	2301      	movs	r3, #1
 8019666:	21d0      	movs	r1, #208	; 0xd0
 8019668:	4818      	ldr	r0, [pc, #96]	; (80196cc <DS3231_ClearAlarm1_Time+0xfc>)
 801966a:	f7e9 fff9 	bl	8003660 <HAL_I2C_Mem_Write>
 801966e:	4603      	mov	r3, r0
 8019670:	2b00      	cmp	r3, #0
 8019672:	d1ee      	bne.n	8019652 <DS3231_ClearAlarm1_Time+0x82>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm Status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019674:	bf00      	nop
 8019676:	230e      	movs	r3, #14
 8019678:	b29a      	uxth	r2, r3
 801967a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801967e:	9302      	str	r3, [sp, #8]
 8019680:	2302      	movs	r3, #2
 8019682:	9301      	str	r3, [sp, #4]
 8019684:	4b10      	ldr	r3, [pc, #64]	; (80196c8 <DS3231_ClearAlarm1_Time+0xf8>)
 8019686:	9300      	str	r3, [sp, #0]
 8019688:	2301      	movs	r3, #1
 801968a:	21d0      	movs	r1, #208	; 0xd0
 801968c:	480f      	ldr	r0, [pc, #60]	; (80196cc <DS3231_ClearAlarm1_Time+0xfc>)
 801968e:	f7ea f8f9 	bl	8003884 <HAL_I2C_Mem_Read>
 8019692:	4603      	mov	r3, r0
 8019694:	2b00      	cmp	r3, #0
 8019696:	d1ee      	bne.n	8019676 <DS3231_ClearAlarm1_Time+0xa6>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((!(DS3231.Control & 0x03)) && (!(DS3231.Status & 0x03)))
 8019698:	4b0d      	ldr	r3, [pc, #52]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 801969a:	7a5b      	ldrb	r3, [r3, #9]
 801969c:	f003 0303 	and.w	r3, r3, #3
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d107      	bne.n	80196b4 <DS3231_ClearAlarm1_Time+0xe4>
 80196a4:	4b0a      	ldr	r3, [pc, #40]	; (80196d0 <DS3231_ClearAlarm1_Time+0x100>)
 80196a6:	7a9b      	ldrb	r3, [r3, #10]
 80196a8:	f003 0303 	and.w	r3, r3, #3
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d101      	bne.n	80196b4 <DS3231_ClearAlarm1_Time+0xe4>
      alarm_flag = 1;
 80196b0:	2301      	movs	r3, #1
 80196b2:	71fb      	strb	r3, [r7, #7]
  while (!alarm_flag)
 80196b4:	79fb      	ldrb	r3, [r7, #7]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d092      	beq.n	80195e0 <DS3231_ClearAlarm1_Time+0x10>
  }
  #endif
}
 80196ba:	bf00      	nop
 80196bc:	3708      	adds	r7, #8
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}
 80196c2:	bf00      	nop
 80196c4:	08025d94 	.word	0x08025d94
 80196c8:	20001e4d 	.word	0x20001e4d
 80196cc:	200010e0 	.word	0x200010e0
 80196d0:	20001e44 	.word	0x20001e44

080196d4 <DS3231_SetAlarm1_Time>:
  * @param  mintue: 00–59
  * @param  second: 00–59
  * @retval None
  */
void DS3231_SetAlarm1_Time(uint8_t date, uint8_t hour, uint8_t mintue, uint8_t second)
{
 80196d4:	b590      	push	{r4, r7, lr}
 80196d6:	b089      	sub	sp, #36	; 0x24
 80196d8:	af04      	add	r7, sp, #16
 80196da:	4604      	mov	r4, r0
 80196dc:	4608      	mov	r0, r1
 80196de:	4611      	mov	r1, r2
 80196e0:	461a      	mov	r2, r3
 80196e2:	4623      	mov	r3, r4
 80196e4:	71fb      	strb	r3, [r7, #7]
 80196e6:	4603      	mov	r3, r0
 80196e8:	71bb      	strb	r3, [r7, #6]
 80196ea:	460b      	mov	r3, r1
 80196ec:	717b      	strb	r3, [r7, #5]
 80196ee:	4613      	mov	r3, r2
 80196f0:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 80196f2:	2300      	movs	r3, #0
 80196f4:	73fb      	strb	r3, [r7, #15]
  uint8_t count = 0;
 80196f6:	2300      	movs	r3, #0
 80196f8:	73bb      	strb	r3, [r7, #14]
  while (!alarm_flag)
 80196fa:	e09d      	b.n	8019838 <DS3231_SetAlarm1_Time+0x164>
  {
    count++;
 80196fc:	7bbb      	ldrb	r3, [r7, #14]
 80196fe:	3301      	adds	r3, #1
 8019700:	73bb      	strb	r3, [r7, #14]
    assert_reset(count < 10);
 8019702:	7bbb      	ldrb	r3, [r7, #14]
 8019704:	2b09      	cmp	r3, #9
 8019706:	d90e      	bls.n	8019726 <DS3231_SetAlarm1_Time+0x52>
 8019708:	7bbb      	ldrb	r3, [r7, #14]
 801970a:	2b09      	cmp	r3, #9
 801970c:	d801      	bhi.n	8019712 <DS3231_SetAlarm1_Time+0x3e>
 801970e:	2301      	movs	r3, #1
 8019710:	e000      	b.n	8019714 <DS3231_SetAlarm1_Time+0x40>
 8019712:	2300      	movs	r3, #0
 8019714:	4618      	mov	r0, r3
 8019716:	f008 ff91 	bl	802263c <iprintf>
 801971a:	7bbb      	ldrb	r3, [r7, #14]
 801971c:	2b09      	cmp	r3, #9
 801971e:	d902      	bls.n	8019726 <DS3231_SetAlarm1_Time+0x52>
 8019720:	b671      	cpsid	f
 8019722:	f7ff fd97 	bl	8019254 <NVIC_SystemReset>
    printf("set alarm\n");
 8019726:	486d      	ldr	r0, [pc, #436]	; (80198dc <DS3231_SetAlarm1_Time+0x208>)
 8019728:	f009 f810 	bl	802274c <puts>
    /* write alarm time */
    DS3231_Buff[DS3231_memaddr.alarm1_dydt] = DEC2BCD(date);
 801972c:	230a      	movs	r3, #10
 801972e:	461c      	mov	r4, r3
 8019730:	79fb      	ldrb	r3, [r7, #7]
 8019732:	4618      	mov	r0, r3
 8019734:	f7ff fdb8 	bl	80192a8 <DEC2BCD>
 8019738:	4603      	mov	r3, r0
 801973a:	461a      	mov	r2, r3
 801973c:	4b68      	ldr	r3, [pc, #416]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 801973e:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_hour] = DEC2BCD(hour);
 8019740:	2309      	movs	r3, #9
 8019742:	461c      	mov	r4, r3
 8019744:	79bb      	ldrb	r3, [r7, #6]
 8019746:	4618      	mov	r0, r3
 8019748:	f7ff fdae 	bl	80192a8 <DEC2BCD>
 801974c:	4603      	mov	r3, r0
 801974e:	461a      	mov	r2, r3
 8019750:	4b63      	ldr	r3, [pc, #396]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 8019752:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_min] = DEC2BCD(mintue);
 8019754:	2308      	movs	r3, #8
 8019756:	461c      	mov	r4, r3
 8019758:	797b      	ldrb	r3, [r7, #5]
 801975a:	4618      	mov	r0, r3
 801975c:	f7ff fda4 	bl	80192a8 <DEC2BCD>
 8019760:	4603      	mov	r3, r0
 8019762:	461a      	mov	r2, r3
 8019764:	4b5e      	ldr	r3, [pc, #376]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 8019766:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_sec] = DEC2BCD(second);
 8019768:	2307      	movs	r3, #7
 801976a:	461c      	mov	r4, r3
 801976c:	793b      	ldrb	r3, [r7, #4]
 801976e:	4618      	mov	r0, r3
 8019770:	f7ff fd9a 	bl	80192a8 <DEC2BCD>
 8019774:	4603      	mov	r3, r0
 8019776:	461a      	mov	r2, r3
 8019778:	4b59      	ldr	r3, [pc, #356]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 801977a:	551a      	strb	r2, [r3, r4]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 801977c:	bf00      	nop
 801977e:	2307      	movs	r3, #7
 8019780:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK)
 8019782:	2307      	movs	r3, #7
 8019784:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 8019786:	4b56      	ldr	r3, [pc, #344]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 8019788:	4413      	add	r3, r2
 801978a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801978e:	9202      	str	r2, [sp, #8]
 8019790:	2204      	movs	r2, #4
 8019792:	9201      	str	r2, [sp, #4]
 8019794:	9300      	str	r3, [sp, #0]
 8019796:	2301      	movs	r3, #1
 8019798:	460a      	mov	r2, r1
 801979a:	21d0      	movs	r1, #208	; 0xd0
 801979c:	4851      	ldr	r0, [pc, #324]	; (80198e4 <DS3231_SetAlarm1_Time+0x210>)
 801979e:	f7e9 ff5f 	bl	8003660 <HAL_I2C_Mem_Write>
 80197a2:	4603      	mov	r3, r0
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d1ea      	bne.n	801977e <DS3231_SetAlarm1_Time+0xaa>
      ;
    /* read alarm time */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80197a8:	bf00      	nop
 80197aa:	2307      	movs	r3, #7
 80197ac:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK);
 80197ae:	2307      	movs	r3, #7
 80197b0:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80197b2:	4b4b      	ldr	r3, [pc, #300]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 80197b4:	4413      	add	r3, r2
 80197b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197ba:	9202      	str	r2, [sp, #8]
 80197bc:	2204      	movs	r2, #4
 80197be:	9201      	str	r2, [sp, #4]
 80197c0:	9300      	str	r3, [sp, #0]
 80197c2:	2301      	movs	r3, #1
 80197c4:	460a      	mov	r2, r1
 80197c6:	21d0      	movs	r1, #208	; 0xd0
 80197c8:	4846      	ldr	r0, [pc, #280]	; (80198e4 <DS3231_SetAlarm1_Time+0x210>)
 80197ca:	f7ea f85b 	bl	8003884 <HAL_I2C_Mem_Read>
 80197ce:	4603      	mov	r3, r0
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d1ea      	bne.n	80197aa <DS3231_SetAlarm1_Time+0xd6>
    /* if alarm time set right, flag as 1 */
    if ((BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_dydt]) == date) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_hour]) == hour) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_min]) == mintue) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_sec]) == second))
 80197d4:	230a      	movs	r3, #10
 80197d6:	461a      	mov	r2, r3
 80197d8:	4b41      	ldr	r3, [pc, #260]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 80197da:	5c9b      	ldrb	r3, [r3, r2]
 80197dc:	4618      	mov	r0, r3
 80197de:	f7ff fd4d 	bl	801927c <BCD2DEC>
 80197e2:	4603      	mov	r3, r0
 80197e4:	461a      	mov	r2, r3
 80197e6:	79fb      	ldrb	r3, [r7, #7]
 80197e8:	4293      	cmp	r3, r2
 80197ea:	d125      	bne.n	8019838 <DS3231_SetAlarm1_Time+0x164>
 80197ec:	2309      	movs	r3, #9
 80197ee:	461a      	mov	r2, r3
 80197f0:	4b3b      	ldr	r3, [pc, #236]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 80197f2:	5c9b      	ldrb	r3, [r3, r2]
 80197f4:	4618      	mov	r0, r3
 80197f6:	f7ff fd41 	bl	801927c <BCD2DEC>
 80197fa:	4603      	mov	r3, r0
 80197fc:	461a      	mov	r2, r3
 80197fe:	79bb      	ldrb	r3, [r7, #6]
 8019800:	4293      	cmp	r3, r2
 8019802:	d119      	bne.n	8019838 <DS3231_SetAlarm1_Time+0x164>
 8019804:	2308      	movs	r3, #8
 8019806:	461a      	mov	r2, r3
 8019808:	4b35      	ldr	r3, [pc, #212]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 801980a:	5c9b      	ldrb	r3, [r3, r2]
 801980c:	4618      	mov	r0, r3
 801980e:	f7ff fd35 	bl	801927c <BCD2DEC>
 8019812:	4603      	mov	r3, r0
 8019814:	461a      	mov	r2, r3
 8019816:	797b      	ldrb	r3, [r7, #5]
 8019818:	4293      	cmp	r3, r2
 801981a:	d10d      	bne.n	8019838 <DS3231_SetAlarm1_Time+0x164>
 801981c:	2307      	movs	r3, #7
 801981e:	461a      	mov	r2, r3
 8019820:	4b2f      	ldr	r3, [pc, #188]	; (80198e0 <DS3231_SetAlarm1_Time+0x20c>)
 8019822:	5c9b      	ldrb	r3, [r3, r2]
 8019824:	4618      	mov	r0, r3
 8019826:	f7ff fd29 	bl	801927c <BCD2DEC>
 801982a:	4603      	mov	r3, r0
 801982c:	461a      	mov	r2, r3
 801982e:	793b      	ldrb	r3, [r7, #4]
 8019830:	4293      	cmp	r3, r2
 8019832:	d101      	bne.n	8019838 <DS3231_SetAlarm1_Time+0x164>
      alarm_flag = 1;
 8019834:	2301      	movs	r3, #1
 8019836:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 8019838:	7bfb      	ldrb	r3, [r7, #15]
 801983a:	2b00      	cmp	r3, #0
 801983c:	f43f af5e 	beq.w	80196fc <DS3231_SetAlarm1_Time+0x28>
  }
  alarm_flag = 0;
 8019840:	2300      	movs	r3, #0
 8019842:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 8019844:	e042      	b.n	80198cc <DS3231_SetAlarm1_Time+0x1f8>
  {
    printf("Enable alarm\n");
 8019846:	4828      	ldr	r0, [pc, #160]	; (80198e8 <DS3231_SetAlarm1_Time+0x214>)
 8019848:	f008 ff80 	bl	802274c <puts>
    // Enable the A1IE and INTCN in Control (0Eh)
    DS3231.Control |= 0x05;
 801984c:	4b27      	ldr	r3, [pc, #156]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 801984e:	7a5b      	ldrb	r3, [r3, #9]
 8019850:	f043 0305 	orr.w	r3, r3, #5
 8019854:	b2da      	uxtb	r2, r3
 8019856:	4b25      	ldr	r3, [pc, #148]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 8019858:	725a      	strb	r2, [r3, #9]
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Status &= 0xFC;
 801985a:	4b24      	ldr	r3, [pc, #144]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 801985c:	7a9b      	ldrb	r3, [r3, #10]
 801985e:	f023 0303 	bic.w	r3, r3, #3
 8019862:	b2da      	uxtb	r2, r3
 8019864:	4b21      	ldr	r3, [pc, #132]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 8019866:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8019868:	bf00      	nop
 801986a:	230e      	movs	r3, #14
 801986c:	b29a      	uxth	r2, r3
 801986e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019872:	9302      	str	r3, [sp, #8]
 8019874:	2302      	movs	r3, #2
 8019876:	9301      	str	r3, [sp, #4]
 8019878:	4b1d      	ldr	r3, [pc, #116]	; (80198f0 <DS3231_SetAlarm1_Time+0x21c>)
 801987a:	9300      	str	r3, [sp, #0]
 801987c:	2301      	movs	r3, #1
 801987e:	21d0      	movs	r1, #208	; 0xd0
 8019880:	4818      	ldr	r0, [pc, #96]	; (80198e4 <DS3231_SetAlarm1_Time+0x210>)
 8019882:	f7e9 feed 	bl	8003660 <HAL_I2C_Mem_Write>
 8019886:	4603      	mov	r3, r0
 8019888:	2b00      	cmp	r3, #0
 801988a:	d1ee      	bne.n	801986a <DS3231_SetAlarm1_Time+0x196>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm enable */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 801988c:	bf00      	nop
 801988e:	230e      	movs	r3, #14
 8019890:	b29a      	uxth	r2, r3
 8019892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019896:	9302      	str	r3, [sp, #8]
 8019898:	2302      	movs	r3, #2
 801989a:	9301      	str	r3, [sp, #4]
 801989c:	4b14      	ldr	r3, [pc, #80]	; (80198f0 <DS3231_SetAlarm1_Time+0x21c>)
 801989e:	9300      	str	r3, [sp, #0]
 80198a0:	2301      	movs	r3, #1
 80198a2:	21d0      	movs	r1, #208	; 0xd0
 80198a4:	480f      	ldr	r0, [pc, #60]	; (80198e4 <DS3231_SetAlarm1_Time+0x210>)
 80198a6:	f7e9 ffed 	bl	8003884 <HAL_I2C_Mem_Read>
 80198aa:	4603      	mov	r3, r0
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d1ee      	bne.n	801988e <DS3231_SetAlarm1_Time+0x1ba>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((DS3231.Control & 0x05) && (!(DS3231.Status & 0x03)))
 80198b0:	4b0e      	ldr	r3, [pc, #56]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 80198b2:	7a5b      	ldrb	r3, [r3, #9]
 80198b4:	f003 0305 	and.w	r3, r3, #5
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d007      	beq.n	80198cc <DS3231_SetAlarm1_Time+0x1f8>
 80198bc:	4b0b      	ldr	r3, [pc, #44]	; (80198ec <DS3231_SetAlarm1_Time+0x218>)
 80198be:	7a9b      	ldrb	r3, [r3, #10]
 80198c0:	f003 0303 	and.w	r3, r3, #3
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d101      	bne.n	80198cc <DS3231_SetAlarm1_Time+0x1f8>
      alarm_flag = 1;
 80198c8:	2301      	movs	r3, #1
 80198ca:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 80198cc:	7bfb      	ldrb	r3, [r7, #15]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d0b9      	beq.n	8019846 <DS3231_SetAlarm1_Time+0x172>
  }
  #endif
}
 80198d2:	bf00      	nop
 80198d4:	3714      	adds	r7, #20
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd90      	pop	{r4, r7, pc}
 80198da:	bf00      	nop
 80198dc:	08025da0 	.word	0x08025da0
 80198e0:	20001e30 	.word	0x20001e30
 80198e4:	200010e0 	.word	0x200010e0
 80198e8:	08025dac 	.word	0x08025dac
 80198ec:	20001e44 	.word	0x20001e44
 80198f0:	20001e4d 	.word	0x20001e4d

080198f4 <HAL_I2C_MemRxCpltCallback>:
  * @brief  IRQ callback of received I2C via HAL_I2C_Mem_Read_IT
  * @param  hi2c
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c2.Instance)
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681a      	ldr	r2, [r3, #0]
 8019900:	4b31      	ldr	r3, [pc, #196]	; (80199c8 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	429a      	cmp	r2, r3
 8019906:	d15b      	bne.n	80199c0 <HAL_I2C_MemRxCpltCallback+0xcc>
  {
    DS3231.flag = 1;
 8019908:	4b30      	ldr	r3, [pc, #192]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 801990a:	2201      	movs	r2, #1
 801990c:	741a      	strb	r2, [r3, #16]
    DS3231.Second = BCD2DEC(DS3231_Buff[DS3231_memaddr.sec]);
 801990e:	2300      	movs	r3, #0
 8019910:	461a      	mov	r2, r3
 8019912:	4b2f      	ldr	r3, [pc, #188]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019914:	5c9b      	ldrb	r3, [r3, r2]
 8019916:	4618      	mov	r0, r3
 8019918:	f7ff fcb0 	bl	801927c <BCD2DEC>
 801991c:	4603      	mov	r3, r0
 801991e:	461a      	mov	r2, r3
 8019920:	4b2a      	ldr	r3, [pc, #168]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019922:	719a      	strb	r2, [r3, #6]
    DS3231.Minute = BCD2DEC(DS3231_Buff[DS3231_memaddr.min]);
 8019924:	2301      	movs	r3, #1
 8019926:	461a      	mov	r2, r3
 8019928:	4b29      	ldr	r3, [pc, #164]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 801992a:	5c9b      	ldrb	r3, [r3, r2]
 801992c:	4618      	mov	r0, r3
 801992e:	f7ff fca5 	bl	801927c <BCD2DEC>
 8019932:	4603      	mov	r3, r0
 8019934:	461a      	mov	r2, r3
 8019936:	4b25      	ldr	r3, [pc, #148]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019938:	715a      	strb	r2, [r3, #5]
    DS3231.Hour = BCD2DEC(DS3231_Buff[DS3231_memaddr.hour]);
 801993a:	2302      	movs	r3, #2
 801993c:	461a      	mov	r2, r3
 801993e:	4b24      	ldr	r3, [pc, #144]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019940:	5c9b      	ldrb	r3, [r3, r2]
 8019942:	4618      	mov	r0, r3
 8019944:	f7ff fc9a 	bl	801927c <BCD2DEC>
 8019948:	4603      	mov	r3, r0
 801994a:	461a      	mov	r2, r3
 801994c:	4b1f      	ldr	r3, [pc, #124]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 801994e:	711a      	strb	r2, [r3, #4]
    DS3231.Day = BCD2DEC(DS3231_Buff[DS3231_memaddr.day]);
 8019950:	2303      	movs	r3, #3
 8019952:	461a      	mov	r2, r3
 8019954:	4b1e      	ldr	r3, [pc, #120]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019956:	5c9b      	ldrb	r3, [r3, r2]
 8019958:	4618      	mov	r0, r3
 801995a:	f7ff fc8f 	bl	801927c <BCD2DEC>
 801995e:	4603      	mov	r3, r0
 8019960:	461a      	mov	r2, r3
 8019962:	4b1a      	ldr	r3, [pc, #104]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019964:	709a      	strb	r2, [r3, #2]
    DS3231.Date = BCD2DEC(DS3231_Buff[DS3231_memaddr.date]);
 8019966:	2304      	movs	r3, #4
 8019968:	461a      	mov	r2, r3
 801996a:	4b19      	ldr	r3, [pc, #100]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 801996c:	5c9b      	ldrb	r3, [r3, r2]
 801996e:	4618      	mov	r0, r3
 8019970:	f7ff fc84 	bl	801927c <BCD2DEC>
 8019974:	4603      	mov	r3, r0
 8019976:	461a      	mov	r2, r3
 8019978:	4b14      	ldr	r3, [pc, #80]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 801997a:	70da      	strb	r2, [r3, #3]
    DS3231.Month = BCD2DEC(DS3231_Buff[DS3231_memaddr.month]);
 801997c:	2305      	movs	r3, #5
 801997e:	461a      	mov	r2, r3
 8019980:	4b13      	ldr	r3, [pc, #76]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019982:	5c9b      	ldrb	r3, [r3, r2]
 8019984:	4618      	mov	r0, r3
 8019986:	f7ff fc79 	bl	801927c <BCD2DEC>
 801998a:	4603      	mov	r3, r0
 801998c:	461a      	mov	r2, r3
 801998e:	4b0f      	ldr	r3, [pc, #60]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 8019990:	705a      	strb	r2, [r3, #1]
    DS3231.Year = BCD2DEC(DS3231_Buff[DS3231_memaddr.year]);
 8019992:	2306      	movs	r3, #6
 8019994:	461a      	mov	r2, r3
 8019996:	4b0e      	ldr	r3, [pc, #56]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8019998:	5c9b      	ldrb	r3, [r3, r2]
 801999a:	4618      	mov	r0, r3
 801999c:	f7ff fc6e 	bl	801927c <BCD2DEC>
 80199a0:	4603      	mov	r3, r0
 80199a2:	461a      	mov	r2, r3
 80199a4:	4b09      	ldr	r3, [pc, #36]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 80199a6:	701a      	strb	r2, [r3, #0]
    DS3231.Control = DS3231_Buff[DS3231_memaddr.control];
 80199a8:	230e      	movs	r3, #14
 80199aa:	461a      	mov	r2, r3
 80199ac:	4b08      	ldr	r3, [pc, #32]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 80199ae:	5c9a      	ldrb	r2, [r3, r2]
 80199b0:	4b06      	ldr	r3, [pc, #24]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 80199b2:	725a      	strb	r2, [r3, #9]
    DS3231.Status = DS3231_Buff[DS3231_memaddr.status];
 80199b4:	230f      	movs	r3, #15
 80199b6:	461a      	mov	r2, r3
 80199b8:	4b05      	ldr	r3, [pc, #20]	; (80199d0 <HAL_I2C_MemRxCpltCallback+0xdc>)
 80199ba:	5c9a      	ldrb	r2, [r3, r2]
 80199bc:	4b03      	ldr	r3, [pc, #12]	; (80199cc <HAL_I2C_MemRxCpltCallback+0xd8>)
 80199be:	729a      	strb	r2, [r3, #10]
  }
}
 80199c0:	bf00      	nop
 80199c2:	3708      	adds	r7, #8
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	200010e0 	.word	0x200010e0
 80199cc:	20001e44 	.word	0x20001e44
 80199d0:	20001e30 	.word	0x20001e30

080199d4 <HAL_I2C_MemTxCpltCallback>:
  * @brief  IRQ callback of transmitted I2C via HAL_I2C_Mem_Write_IT
  * @param  hi2c
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80199d4:	b480      	push	{r7}
 80199d6:	b083      	sub	sp, #12
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c2.Instance)
  {
  }
}
 80199dc:	bf00      	nop
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr

080199e8 <NVIC_SystemReset>:
{
 80199e8:	b480      	push	{r7}
 80199ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80199ec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80199f0:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <NVIC_SystemReset+0x20>)
 80199f2:	68db      	ldr	r3, [r3, #12]
 80199f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80199f8:	4903      	ldr	r1, [pc, #12]	; (8019a08 <NVIC_SystemReset+0x20>)
 80199fa:	4b04      	ldr	r3, [pc, #16]	; (8019a0c <NVIC_SystemReset+0x24>)
 80199fc:	4313      	orrs	r3, r2
 80199fe:	60cb      	str	r3, [r1, #12]
 8019a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8019a04:	bf00      	nop
    __NOP();
 8019a06:	e7fd      	b.n	8019a04 <NVIC_SystemReset+0x1c>
 8019a08:	e000ed00 	.word	0xe000ed00
 8019a0c:	05fa0004 	.word	0x05fa0004

08019a10 <jp_fread>:
};

/**
 * Read a buffer off the stream
 */
static size_t jp_fread(janpatch_ctx *ctx, void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 8019a10:	b590      	push	{r4, r7, lr}
 8019a12:	b087      	sub	sp, #28
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	60f8      	str	r0, [r7, #12]
 8019a18:	60b9      	str	r1, [r7, #8]
 8019a1a:	607a      	str	r2, [r7, #4]
 8019a1c:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a24:	6910      	ldr	r0, [r2, #16]
 8019a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a28:	6951      	ldr	r1, [r2, #20]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	4798      	blx	r3

    size_t bytes_read = ctx->fread(ptr, size, count, buffer->stream);
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8019a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a34:	691b      	ldr	r3, [r3, #16]
 8019a36:	683a      	ldr	r2, [r7, #0]
 8019a38:	6879      	ldr	r1, [r7, #4]
 8019a3a:	68b8      	ldr	r0, [r7, #8]
 8019a3c:	47a0      	blx	r4
 8019a3e:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_read;
 8019a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a42:	695b      	ldr	r3, [r3, #20]
 8019a44:	461a      	mov	r2, r3
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	4413      	add	r3, r2
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a4e:	615a      	str	r2, [r3, #20]

    return bytes_read;
 8019a50:	697b      	ldr	r3, [r7, #20]
}
 8019a52:	4618      	mov	r0, r3
 8019a54:	371c      	adds	r7, #28
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd90      	pop	{r4, r7, pc}

08019a5a <jp_fwrite>:

/**
 * Write a buffer to the stream
 */
static size_t jp_fwrite(janpatch_ctx *ctx, const void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 8019a5a:	b590      	push	{r4, r7, lr}
 8019a5c:	b087      	sub	sp, #28
 8019a5e:	af00      	add	r7, sp, #0
 8019a60:	60f8      	str	r0, [r7, #12]
 8019a62:	60b9      	str	r1, [r7, #8]
 8019a64:	607a      	str	r2, [r7, #4]
 8019a66:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a6e:	6910      	ldr	r0, [r2, #16]
 8019a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a72:	6951      	ldr	r1, [r2, #20]
 8019a74:	2200      	movs	r2, #0
 8019a76:	4798      	blx	r3

    size_t bytes_written = ctx->fwrite(ptr, size, count, buffer->stream);
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a7e:	691b      	ldr	r3, [r3, #16]
 8019a80:	683a      	ldr	r2, [r7, #0]
 8019a82:	6879      	ldr	r1, [r7, #4]
 8019a84:	68b8      	ldr	r0, [r7, #8]
 8019a86:	47a0      	blx	r4
 8019a88:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_written;
 8019a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a8c:	695b      	ldr	r3, [r3, #20]
 8019a8e:	461a      	mov	r2, r3
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	4413      	add	r3, r2
 8019a94:	461a      	mov	r2, r3
 8019a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a98:	615a      	str	r2, [r3, #20]

    return bytes_written;
 8019a9a:	697b      	ldr	r3, [r7, #20]
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	371c      	adds	r7, #28
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd90      	pop	{r4, r7, pc}

08019aa4 <jp_fseek>:

/**
 * Set position of the stream
 */
static int jp_fseek(janpatch_buffer *buffer, long int offset, int origin) {
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b084      	sub	sp, #16
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	60f8      	str	r0, [r7, #12]
 8019aac:	60b9      	str	r1, [r7, #8]
 8019aae:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET) {
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d103      	bne.n	8019abe <jp_fseek+0x1a>
        buffer->position = offset;
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	68ba      	ldr	r2, [r7, #8]
 8019aba:	615a      	str	r2, [r3, #20]
 8019abc:	e010      	b.n	8019ae0 <jp_fseek+0x3c>
    }
    else if (origin == SEEK_CUR) {
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	2b01      	cmp	r3, #1
 8019ac2:	d106      	bne.n	8019ad2 <jp_fseek+0x2e>
        buffer->position += offset;
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	695a      	ldr	r2, [r3, #20]
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	441a      	add	r2, r3
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	615a      	str	r2, [r3, #20]
 8019ad0:	e006      	b.n	8019ae0 <jp_fseek+0x3c>
    }
    else {
        JANPATCH_ERROR("Origin %d not supported in jp_fseek (only SEEK_CUR,SEEK_SET)\n", origin);
 8019ad2:	6879      	ldr	r1, [r7, #4]
 8019ad4:	4805      	ldr	r0, [pc, #20]	; (8019aec <jp_fseek+0x48>)
 8019ad6:	f008 fdb1 	bl	802263c <iprintf>
        return -1;
 8019ada:	f04f 33ff 	mov.w	r3, #4294967295
 8019ade:	e000      	b.n	8019ae2 <jp_fseek+0x3e>
    }
    return 0;
 8019ae0:	2300      	movs	r3, #0
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3710      	adds	r7, #16
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
 8019aea:	bf00      	nop
 8019aec:	08025dbc 	.word	0x08025dbc

08019af0 <jp_getc>:


/**
 * Get a character from the stream
 */
static int jp_getc(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b088      	sub	sp, #32
 8019af4:	af02      	add	r7, sp, #8
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	695b      	ldr	r3, [r3, #20]
 8019afe:	617b      	str	r3, [r7, #20]
    if (position < 0) return -1;
 8019b00:	697b      	ldr	r3, [r7, #20]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	da02      	bge.n	8019b0c <jp_getc+0x1c>
 8019b06:	f04f 33ff 	mov.w	r3, #4294967295
 8019b0a:	e044      	b.n	8019b96 <jp_getc+0xa6>

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 8019b0c:	697a      	ldr	r2, [r7, #20]
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b16:	613b      	str	r3, [r7, #16]

    if (page != buffer->current_page) {
 8019b18:	683b      	ldr	r3, [r7, #0]
 8019b1a:	689b      	ldr	r3, [r3, #8]
 8019b1c:	693a      	ldr	r2, [r7, #16]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d01a      	beq.n	8019b58 <jp_getc+0x68>
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	693a      	ldr	r2, [r7, #16]
 8019b28:	fb02 f303 	mul.w	r3, r2, r3
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	4619      	mov	r1, r3
 8019b30:	6838      	ldr	r0, [r7, #0]
 8019b32:	f7ff ffb7 	bl	8019aa4 <jp_fseek>
        buffer->current_page_size = jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	6819      	ldr	r1, [r3, #0]
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	685a      	ldr	r2, [r3, #4]
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	9300      	str	r3, [sp, #0]
 8019b42:	4613      	mov	r3, r2
 8019b44:	2201      	movs	r2, #1
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f7ff ff62 	bl	8019a10 <jp_fread>
 8019b4c:	4602      	mov	r2, r0
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	693a      	ldr	r2, [r7, #16]
 8019b56:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	683a      	ldr	r2, [r7, #0]
 8019b5c:	6852      	ldr	r2, [r2, #4]
 8019b5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b62:	fb02 f201 	mul.w	r2, r2, r1
 8019b66:	1a9b      	subs	r3, r3, r2
 8019b68:	60fb      	str	r3, [r7, #12]

    if ((size_t)position_in_page >= buffer->current_page_size) {
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	68da      	ldr	r2, [r3, #12]
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d802      	bhi.n	8019b7a <jp_getc+0x8a>
        return EOF;
 8019b74:	f04f 33ff 	mov.w	r3, #4294967295
 8019b78:	e00d      	b.n	8019b96 <jp_getc+0xa6>
    }

    unsigned char b = buffer->buffer[position_in_page];
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	681a      	ldr	r2, [r3, #0]
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	4413      	add	r3, r2
 8019b82:	781b      	ldrb	r3, [r3, #0]
 8019b84:	72fb      	strb	r3, [r7, #11]
    jp_fseek(buffer, position + 1, SEEK_SET);
 8019b86:	697b      	ldr	r3, [r7, #20]
 8019b88:	3301      	adds	r3, #1
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	4619      	mov	r1, r3
 8019b8e:	6838      	ldr	r0, [r7, #0]
 8019b90:	f7ff ff88 	bl	8019aa4 <jp_fseek>
    return b;
 8019b94:	7afb      	ldrb	r3, [r7, #11]
}
 8019b96:	4618      	mov	r0, r3
 8019b98:	3718      	adds	r7, #24
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	bd80      	pop	{r7, pc}

08019b9e <jp_putc>:

/**
 * Write a character to a stream
 */
static int jp_putc(int c, janpatch_ctx* ctx, janpatch_buffer* buffer) {
 8019b9e:	b580      	push	{r7, lr}
 8019ba0:	b08a      	sub	sp, #40	; 0x28
 8019ba2:	af02      	add	r7, sp, #8
 8019ba4:	60f8      	str	r0, [r7, #12]
 8019ba6:	60b9      	str	r1, [r7, #8]
 8019ba8:	607a      	str	r2, [r7, #4]
    long position = buffer->position;
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	695b      	ldr	r3, [r3, #20]
 8019bae:	61fb      	str	r3, [r7, #28]
    if (position < 0) {
 8019bb0:	69fb      	ldr	r3, [r7, #28]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	da02      	bge.n	8019bbc <jp_putc+0x1e>
        return -1;
 8019bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bba:	e06a      	b.n	8019c92 <jp_putc+0xf4>
    }

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 8019bbc:	69fa      	ldr	r2, [r7, #28]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	685b      	ldr	r3, [r3, #4]
 8019bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bc6:	61bb      	str	r3, [r7, #24]

    if (page != buffer->current_page) {
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	689b      	ldr	r3, [r3, #8]
 8019bcc:	69ba      	ldr	r2, [r7, #24]
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d047      	beq.n	8019c62 <jp_putc+0xc4>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	689b      	ldr	r3, [r3, #8]
 8019bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bda:	d026      	beq.n	8019c2a <jp_putc+0x8c>

            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	689b      	ldr	r3, [r3, #8]
 8019be0:	687a      	ldr	r2, [r7, #4]
 8019be2:	6852      	ldr	r2, [r2, #4]
 8019be4:	fb02 f303 	mul.w	r3, r2, r3
 8019be8:	2200      	movs	r2, #0
 8019bea:	4619      	mov	r1, r3
 8019bec:	6878      	ldr	r0, [r7, #4]
 8019bee:	f7ff ff59 	bl	8019aa4 <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	6819      	ldr	r1, [r3, #0]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	68da      	ldr	r2, [r3, #12]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	9300      	str	r3, [sp, #0]
 8019bfe:	4613      	mov	r3, r2
 8019c00:	2201      	movs	r2, #1
 8019c02:	68b8      	ldr	r0, [r7, #8]
 8019c04:	f7ff ff29 	bl	8019a5a <jp_fwrite>

            if (ctx->progress) {
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d00c      	beq.n	8019c2a <jp_putc+0x8c>
                ctx->progress(position * 100 / ctx->max_file_size);
 8019c10:	68bb      	ldr	r3, [r7, #8]
 8019c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c14:	69fa      	ldr	r2, [r7, #28]
 8019c16:	2164      	movs	r1, #100	; 0x64
 8019c18:	fb01 f102 	mul.w	r1, r1, r2
 8019c1c:	68ba      	ldr	r2, [r7, #8]
 8019c1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8019c20:	fb91 f2f2 	sdiv	r2, r1, r2
 8019c24:	b2d2      	uxtb	r2, r2
 8019c26:	4610      	mov	r0, r2
 8019c28:	4798      	blx	r3
            }
        }

        // and read the next page...
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	685b      	ldr	r3, [r3, #4]
 8019c2e:	69ba      	ldr	r2, [r7, #24]
 8019c30:	fb02 f303 	mul.w	r3, r2, r3
 8019c34:	2200      	movs	r2, #0
 8019c36:	4619      	mov	r1, r3
 8019c38:	6878      	ldr	r0, [r7, #4]
 8019c3a:	f7ff ff33 	bl	8019aa4 <jp_fseek>
        jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	6819      	ldr	r1, [r3, #0]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	685a      	ldr	r2, [r3, #4]
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	9300      	str	r3, [sp, #0]
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	2201      	movs	r2, #1
 8019c4e:	68b8      	ldr	r0, [r7, #8]
 8019c50:	f7ff fede 	bl	8019a10 <jp_fread>
        buffer->current_page_size = buffer->size;
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	685a      	ldr	r2, [r3, #4]
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	69ba      	ldr	r2, [r7, #24]
 8019c60:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 8019c62:	69fb      	ldr	r3, [r7, #28]
 8019c64:	687a      	ldr	r2, [r7, #4]
 8019c66:	6852      	ldr	r2, [r2, #4]
 8019c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c6c:	fb02 f201 	mul.w	r2, r2, r1
 8019c70:	1a9b      	subs	r3, r3, r2
 8019c72:	617b      	str	r3, [r7, #20]

    buffer->buffer[position_in_page] = (unsigned char)c;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	697b      	ldr	r3, [r7, #20]
 8019c7a:	4413      	add	r3, r2
 8019c7c:	68fa      	ldr	r2, [r7, #12]
 8019c7e:	b2d2      	uxtb	r2, r2
 8019c80:	701a      	strb	r2, [r3, #0]
    jp_fseek(buffer, position + 1, SEEK_SET);
 8019c82:	69fb      	ldr	r3, [r7, #28]
 8019c84:	3301      	adds	r3, #1
 8019c86:	2200      	movs	r2, #0
 8019c88:	4619      	mov	r1, r3
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f7ff ff0a 	bl	8019aa4 <jp_fseek>

    return 0;
 8019c90:	2300      	movs	r3, #0
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3720      	adds	r7, #32
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}

08019c9a <jp_final_flush>:

static uint32_t jp_final_flush(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 8019c9a:	b580      	push	{r7, lr}
 8019c9c:	b088      	sub	sp, #32
 8019c9e:	af02      	add	r7, sp, #8
 8019ca0:	6078      	str	r0, [r7, #4]
 8019ca2:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	695b      	ldr	r3, [r3, #20]
 8019ca8:	617b      	str	r3, [r7, #20]
    int position_in_page = position % buffer->size;
 8019caa:	697b      	ldr	r3, [r7, #20]
 8019cac:	683a      	ldr	r2, [r7, #0]
 8019cae:	6852      	ldr	r2, [r2, #4]
 8019cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8019cb4:	fb02 f201 	mul.w	r2, r2, r1
 8019cb8:	1a9b      	subs	r3, r3, r2
 8019cba:	613b      	str	r3, [r7, #16]

    uint32_t page = ((unsigned long)position) / buffer->size;
 8019cbc:	697a      	ldr	r2, [r7, #20]
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cc6:	60fb      	str	r3, [r7, #12]

    // if the page has changed we also need to flush the previous page
    // this can happen when the last operation (e.g. jp_putc) has just crossed page boundary
    if (page != buffer->current_page) {
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	689b      	ldr	r3, [r3, #8]
 8019ccc:	68fa      	ldr	r2, [r7, #12]
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	d01a      	beq.n	8019d08 <jp_final_flush+0x6e>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	689b      	ldr	r3, [r3, #8]
 8019cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cda:	d015      	beq.n	8019d08 <jp_final_flush+0x6e>
            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 8019cdc:	683b      	ldr	r3, [r7, #0]
 8019cde:	689b      	ldr	r3, [r3, #8]
 8019ce0:	683a      	ldr	r2, [r7, #0]
 8019ce2:	6852      	ldr	r2, [r2, #4]
 8019ce4:	fb02 f303 	mul.w	r3, r2, r3
 8019ce8:	2200      	movs	r2, #0
 8019cea:	4619      	mov	r1, r3
 8019cec:	6838      	ldr	r0, [r7, #0]
 8019cee:	f7ff fed9 	bl	8019aa4 <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	6819      	ldr	r1, [r3, #0]
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	68da      	ldr	r2, [r3, #12]
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	9300      	str	r3, [sp, #0]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	2201      	movs	r2, #1
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f7ff fea9 	bl	8019a5a <jp_fwrite>
        }
    }

    // flush the new page buffer
    jp_fseek(buffer, page * buffer->size, SEEK_SET);
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	fb02 f303 	mul.w	r3, r2, r3
 8019d12:	2200      	movs	r2, #0
 8019d14:	4619      	mov	r1, r3
 8019d16:	6838      	ldr	r0, [r7, #0]
 8019d18:	f7ff fec4 	bl	8019aa4 <jp_fseek>
    uint32_t last_size = jp_fwrite(ctx, buffer->buffer, 1, position_in_page, buffer);
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	6819      	ldr	r1, [r3, #0]
 8019d20:	693a      	ldr	r2, [r7, #16]
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	9300      	str	r3, [sp, #0]
 8019d26:	4613      	mov	r3, r2
 8019d28:	2201      	movs	r2, #1
 8019d2a:	6878      	ldr	r0, [r7, #4]
 8019d2c:	f7ff fe95 	bl	8019a5a <jp_fwrite>
 8019d30:	60b8      	str	r0, [r7, #8]

    if (ctx->progress) {
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d003      	beq.n	8019d42 <jp_final_flush+0xa8>
        ctx->progress(100);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d3e:	2064      	movs	r0, #100	; 0x64
 8019d40:	4798      	blx	r3
    }
    return last_size;
 8019d42:	68bb      	ldr	r3, [r7, #8]
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	3718      	adds	r7, #24
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bd80      	pop	{r7, pc}

08019d4c <process_mod>:

static void process_mod(janpatch_ctx *ctx, janpatch_buffer *source, janpatch_buffer *patch, janpatch_buffer *target, bool up_source_stream) {
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b086      	sub	sp, #24
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	60f8      	str	r0, [r7, #12]
 8019d54:	60b9      	str	r1, [r7, #8]
 8019d56:	607a      	str	r2, [r7, #4]
 8019d58:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	617b      	str	r3, [r7, #20]
    while (1) {
        cnt++;
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	3301      	adds	r3, #1
 8019d62:	617b      	str	r3, [r7, #20]
        int m = jp_getc(ctx, patch);
 8019d64:	6879      	ldr	r1, [r7, #4]
 8019d66:	68f8      	ldr	r0, [r7, #12]
 8019d68:	f7ff fec2 	bl	8019af0 <jp_getc>
 8019d6c:	6138      	str	r0, [r7, #16]
        if (m == -1) {
 8019d6e:	693b      	ldr	r3, [r7, #16]
 8019d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d74:	d106      	bne.n	8019d84 <process_mod+0x38>
            // End of file stream... rewind 1 character and return, this will yield back to janpatch main function, which will exit
            jp_fseek(source, -1, SEEK_CUR);
 8019d76:	2201      	movs	r2, #1
 8019d78:	f04f 31ff 	mov.w	r1, #4294967295
 8019d7c:	68b8      	ldr	r0, [r7, #8]
 8019d7e:	f7ff fe91 	bl	8019aa4 <jp_fseek>
            return;
 8019d82:	e056      	b.n	8019e32 <process_mod+0xe6>
        }
        // JANPATCH_DEBUG("%02x ", m);
        // so... if it's *NOT* an ESC character, just write it to the target stream
        if (m != JANPATCH_OPERATION_ESC) {
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	2ba7      	cmp	r3, #167	; 0xa7
 8019d88:	d00e      	beq.n	8019da8 <process_mod+0x5c>
            // JANPATCH_DEBUG("NOT ESC\n");
            jp_putc(m, ctx, target);
 8019d8a:	683a      	ldr	r2, [r7, #0]
 8019d8c:	68f9      	ldr	r1, [r7, #12]
 8019d8e:	6938      	ldr	r0, [r7, #16]
 8019d90:	f7ff ff05 	bl	8019b9e <jp_putc>
            if (up_source_stream) {
 8019d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d048      	beq.n	8019e2e <process_mod+0xe2>
                jp_fseek(source, 1, SEEK_CUR); // and up source
 8019d9c:	2201      	movs	r2, #1
 8019d9e:	2101      	movs	r1, #1
 8019da0:	68b8      	ldr	r0, [r7, #8]
 8019da2:	f7ff fe7f 	bl	8019aa4 <jp_fseek>
            }
            continue;
 8019da6:	e042      	b.n	8019e2e <process_mod+0xe2>
        }

        // read the next character to see what we should do
        m = jp_getc(ctx, patch);
 8019da8:	6879      	ldr	r1, [r7, #4]
 8019daa:	68f8      	ldr	r0, [r7, #12]
 8019dac:	f7ff fea0 	bl	8019af0 <jp_getc>
 8019db0:	6138      	str	r0, [r7, #16]
        // JANPATCH_DEBUG("%02x ", m);

        if (m == -1) {
 8019db2:	693b      	ldr	r3, [r7, #16]
 8019db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019db8:	d106      	bne.n	8019dc8 <process_mod+0x7c>
            // End of file stream... rewind 1 character and return, this will yield back to janpatch main function, which will exit
            jp_fseek(source, -1, SEEK_CUR);
 8019dba:	2201      	movs	r2, #1
 8019dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8019dc0:	68b8      	ldr	r0, [r7, #8]
 8019dc2:	f7ff fe6f 	bl	8019aa4 <jp_fseek>
            return;
 8019dc6:	e034      	b.n	8019e32 <process_mod+0xe6>
        }

        // if the character after this is *not* an operator (except ESC)
        if (m == JANPATCH_OPERATION_ESC) {
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	2ba7      	cmp	r3, #167	; 0xa7
 8019dcc:	d10e      	bne.n	8019dec <process_mod+0xa0>
            // JANPATCH_DEBUG("ESC, NEXT CHAR ALSO ESC\n");
            jp_putc(m, ctx, target);
 8019dce:	683a      	ldr	r2, [r7, #0]
 8019dd0:	68f9      	ldr	r1, [r7, #12]
 8019dd2:	6938      	ldr	r0, [r7, #16]
 8019dd4:	f7ff fee3 	bl	8019b9e <jp_putc>
            if (up_source_stream) {
 8019dd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d0be      	beq.n	8019d5e <process_mod+0x12>
                jp_fseek(source, 1, SEEK_CUR);
 8019de0:	2201      	movs	r2, #1
 8019de2:	2101      	movs	r1, #1
 8019de4:	68b8      	ldr	r0, [r7, #8]
 8019de6:	f7ff fe5d 	bl	8019aa4 <jp_fseek>
 8019dea:	e7b8      	b.n	8019d5e <process_mod+0x12>
            }
        }
        else if (m >= 0xA2 && m <= 0xA6) { // character after this is an operator? Then roll back two characters and exit
 8019dec:	693b      	ldr	r3, [r7, #16]
 8019dee:	2ba1      	cmp	r3, #161	; 0xa1
 8019df0:	dd09      	ble.n	8019e06 <process_mod+0xba>
 8019df2:	693b      	ldr	r3, [r7, #16]
 8019df4:	2ba6      	cmp	r3, #166	; 0xa6
 8019df6:	dc06      	bgt.n	8019e06 <process_mod+0xba>
            // JANPATCH_DEBUG("ESC, THEN OPERATOR\n");
            jp_fseek(patch, -2, SEEK_CUR);
 8019df8:	2201      	movs	r2, #1
 8019dfa:	f06f 0101 	mvn.w	r1, #1
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f7ff fe50 	bl	8019aa4 <jp_fseek>
            break;
 8019e04:	e015      	b.n	8019e32 <process_mod+0xe6>
        }
        else { // else... write both the ESC and m
            // JANPATCH_DEBUG("ESC, BUT NO OPERATOR\n");
            jp_putc(JANPATCH_OPERATION_ESC, ctx, target);
 8019e06:	683a      	ldr	r2, [r7, #0]
 8019e08:	68f9      	ldr	r1, [r7, #12]
 8019e0a:	20a7      	movs	r0, #167	; 0xa7
 8019e0c:	f7ff fec7 	bl	8019b9e <jp_putc>
            jp_putc(m, ctx, target);
 8019e10:	683a      	ldr	r2, [r7, #0]
 8019e12:	68f9      	ldr	r1, [r7, #12]
 8019e14:	6938      	ldr	r0, [r7, #16]
 8019e16:	f7ff fec2 	bl	8019b9e <jp_putc>
            if (up_source_stream) {
 8019e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d09d      	beq.n	8019d5e <process_mod+0x12>
                jp_fseek(source, 2, SEEK_CUR); // up source by 2
 8019e22:	2201      	movs	r2, #1
 8019e24:	2102      	movs	r1, #2
 8019e26:	68b8      	ldr	r0, [r7, #8]
 8019e28:	f7ff fe3c 	bl	8019aa4 <jp_fseek>
 8019e2c:	e797      	b.n	8019d5e <process_mod+0x12>
            continue;
 8019e2e:	bf00      	nop
    while (1) {
 8019e30:	e795      	b.n	8019d5e <process_mod+0x12>
            }
        }
    }
}
 8019e32:	3718      	adds	r7, #24
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <find_length>:

static int find_length(janpatch_ctx *ctx, janpatch_buffer *buffer) {
 8019e38:	b590      	push	{r4, r7, lr}
 8019e3a:	b08b      	sub	sp, #44	; 0x2c
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
 8019e40:	6039      	str	r1, [r7, #0]
    * If byte[0] is between 1..251 => use byte[0] + 1
    * If byte[0] is 252 => use ???
    * If byte[0] is 253 => use (byte[1] << 8) + byte[2]
    * If byte[0] is 254 => use (byte[1] << 16) + (byte[2] << 8) + byte[3] (NOT VERIFIED)
    */
    uint8_t l = jp_getc(ctx, buffer);
 8019e42:	6839      	ldr	r1, [r7, #0]
 8019e44:	6878      	ldr	r0, [r7, #4]
 8019e46:	f7ff fe53 	bl	8019af0 <jp_getc>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (l <= 251) {
 8019e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e54:	2bfb      	cmp	r3, #251	; 0xfb
 8019e56:	d803      	bhi.n	8019e60 <find_length+0x28>
        return l + 1;
 8019e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	e050      	b.n	8019f02 <find_length+0xca>
    }
    else if (l == 252) {
 8019e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e64:	2bfc      	cmp	r3, #252	; 0xfc
 8019e66:	d109      	bne.n	8019e7c <find_length+0x44>
        return l + jp_getc(ctx, buffer) + 1;
 8019e68:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8019e6c:	6839      	ldr	r1, [r7, #0]
 8019e6e:	6878      	ldr	r0, [r7, #4]
 8019e70:	f7ff fe3e 	bl	8019af0 <jp_getc>
 8019e74:	4603      	mov	r3, r0
 8019e76:	4423      	add	r3, r4
 8019e78:	3301      	adds	r3, #1
 8019e7a:	e042      	b.n	8019f02 <find_length+0xca>
    }
    else if (l == 253) {
 8019e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e80:	2bfd      	cmp	r3, #253	; 0xfd
 8019e82:	d10f      	bne.n	8019ea4 <find_length+0x6c>
        int lh = (jp_getc(ctx, buffer) << 8), ll = jp_getc(ctx, buffer);
 8019e84:	6839      	ldr	r1, [r7, #0]
 8019e86:	6878      	ldr	r0, [r7, #4]
 8019e88:	f7ff fe32 	bl	8019af0 <jp_getc>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	021b      	lsls	r3, r3, #8
 8019e90:	613b      	str	r3, [r7, #16]
 8019e92:	6839      	ldr	r1, [r7, #0]
 8019e94:	6878      	ldr	r0, [r7, #4]
 8019e96:	f7ff fe2b 	bl	8019af0 <jp_getc>
 8019e9a:	60f8      	str	r0, [r7, #12]
        return lh + ll;
 8019e9c:	693a      	ldr	r2, [r7, #16]
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	4413      	add	r3, r2
 8019ea2:	e02e      	b.n	8019f02 <find_length+0xca>
        // return (jp_getc(ctx, buffer) << 8) + jp_getc(ctx, buffer);
    }
    else if (l == 254) {
 8019ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ea8:	2bfe      	cmp	r3, #254	; 0xfe
 8019eaa:	d121      	bne.n	8019ef0 <find_length+0xb8>
        int hh = (jp_getc(ctx, buffer) << 24), hl = (jp_getc(ctx, buffer) << 16),
 8019eac:	6839      	ldr	r1, [r7, #0]
 8019eae:	6878      	ldr	r0, [r7, #4]
 8019eb0:	f7ff fe1e 	bl	8019af0 <jp_getc>
 8019eb4:	4603      	mov	r3, r0
 8019eb6:	061b      	lsls	r3, r3, #24
 8019eb8:	623b      	str	r3, [r7, #32]
 8019eba:	6839      	ldr	r1, [r7, #0]
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	f7ff fe17 	bl	8019af0 <jp_getc>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	041b      	lsls	r3, r3, #16
 8019ec6:	61fb      	str	r3, [r7, #28]
            lh = (jp_getc(ctx, buffer) << 8), ll = jp_getc(ctx, buffer);
 8019ec8:	6839      	ldr	r1, [r7, #0]
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f7ff fe10 	bl	8019af0 <jp_getc>
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	021b      	lsls	r3, r3, #8
 8019ed4:	61bb      	str	r3, [r7, #24]
 8019ed6:	6839      	ldr	r1, [r7, #0]
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f7ff fe09 	bl	8019af0 <jp_getc>
 8019ede:	6178      	str	r0, [r7, #20]
        return hh + hl + lh + ll;
 8019ee0:	6a3a      	ldr	r2, [r7, #32]
 8019ee2:	69fb      	ldr	r3, [r7, #28]
 8019ee4:	441a      	add	r2, r3
 8019ee6:	69bb      	ldr	r3, [r7, #24]
 8019ee8:	441a      	add	r2, r3
 8019eea:	697b      	ldr	r3, [r7, #20]
 8019eec:	4413      	add	r3, r2
 8019eee:	e008      	b.n	8019f02 <find_length+0xca>
        // return (jp_getc(ctx, buffer) << 24) + (jp_getc(ctx, buffer) << 16) + (jp_getc(ctx, buffer) << 8) + (jp_getc(ctx, buffer));
    }
    else {
        JANPATCH_ERROR("EQL followed by unexpected byte %02x %02x\n", JANPATCH_OPERATION_EQL, l);
 8019ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ef4:	461a      	mov	r2, r3
 8019ef6:	21a3      	movs	r1, #163	; 0xa3
 8019ef8:	4804      	ldr	r0, [pc, #16]	; (8019f0c <find_length+0xd4>)
 8019efa:	f008 fb9f 	bl	802263c <iprintf>
        return -1;
 8019efe:	f04f 33ff 	mov.w	r3, #4294967295
    }

    // it's fine if we get over the end of the stream here, will be caught by the next function
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	372c      	adds	r7, #44	; 0x2c
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd90      	pop	{r4, r7, pc}
 8019f0a:	bf00      	nop
 8019f0c:	08025dfc 	.word	0x08025dfc

08019f10 <janpatch>:

static int janpatch(janpatch_ctx ctx, JANPATCH_STREAM *source, JANPATCH_STREAM *patch, JANPATCH_STREAM *target) {
 8019f10:	b084      	sub	sp, #16
 8019f12:	b580      	push	{r7, lr}
 8019f14:	b088      	sub	sp, #32
 8019f16:	af02      	add	r7, sp, #8
 8019f18:	f107 0c20 	add.w	ip, r7, #32
 8019f1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    ctx.source_buffer.current_page = 0xffffffff;
 8019f20:	f04f 33ff 	mov.w	r3, #4294967295
 8019f24:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.patch_buffer.current_page = 0xffffffff;
 8019f26:	f04f 33ff 	mov.w	r3, #4294967295
 8019f2a:	643b      	str	r3, [r7, #64]	; 0x40
    ctx.target_buffer.current_page = 0xffffffff;
 8019f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f30:	65bb      	str	r3, [r7, #88]	; 0x58

    ctx.source_buffer.position = 0;
 8019f32:	2300      	movs	r3, #0
 8019f34:	637b      	str	r3, [r7, #52]	; 0x34
    ctx.patch_buffer.position = 0;
 8019f36:	2300      	movs	r3, #0
 8019f38:	64fb      	str	r3, [r7, #76]	; 0x4c
    ctx.target_buffer.position = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	667b      	str	r3, [r7, #100]	; 0x64

    ctx.source_buffer.stream = source;
 8019f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f40:	633b      	str	r3, [r7, #48]	; 0x30
    ctx.patch_buffer.stream = patch;
 8019f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f46:	64bb      	str	r3, [r7, #72]	; 0x48
    ctx.target_buffer.stream = target;
 8019f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019f4c:	663b      	str	r3, [r7, #96]	; 0x60

    // look at the size of the source file...
    if (ctx.progress != NULL) {
 8019f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d020      	beq.n	8019f96 <janpatch+0x86>
        ctx.max_file_size = source->file_size;
 8019f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f56:	68db      	ldr	r3, [r3, #12]
 8019f58:	67bb      	str	r3, [r7, #120]	; 0x78
        JANPATCH_DEBUG("Source file page is %ld\n", source->file_size);
 8019f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019f5c:	68db      	ldr	r3, [r3, #12]
 8019f5e:	4619      	mov	r1, r3
 8019f60:	489a      	ldr	r0, [pc, #616]	; (801a1cc <janpatch+0x2bc>)
 8019f62:	f008 fb6b 	bl	802263c <iprintf>
        ctx.fseek(source, 0, SEEK_SET);
 8019f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f68:	2200      	movs	r2, #0
 8019f6a:	2100      	movs	r1, #0
 8019f6c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8019f6e:	4798      	blx	r3

        // and at the size of the patch file
        ctx.max_file_size += patch->file_size;
 8019f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019f72:	461a      	mov	r2, r3
 8019f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019f78:	68db      	ldr	r3, [r3, #12]
 8019f7a:	4413      	add	r3, r2
 8019f7c:	67bb      	str	r3, [r7, #120]	; 0x78
        JANPATCH_DEBUG("Now max file page is %ld\n", ctx.max_file_size);
 8019f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019f80:	4619      	mov	r1, r3
 8019f82:	4893      	ldr	r0, [pc, #588]	; (801a1d0 <janpatch+0x2c0>)
 8019f84:	f008 fb5a 	bl	802263c <iprintf>
        ctx.fseek(patch, 0, SEEK_SET);
 8019f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	2100      	movs	r1, #0
 8019f8e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8019f92:	4798      	blx	r3
 8019f94:	e0f1      	b.n	801a17a <janpatch+0x26a>
    }
    else {
        ctx.progress = NULL;
 8019f96:	2300      	movs	r3, #0
 8019f98:	677b      	str	r3, [r7, #116]	; 0x74
    }

    int c;
    while ((c = jp_getc(&ctx, &ctx.patch_buffer)) != EOF) {
 8019f9a:	e0ee      	b.n	801a17a <janpatch+0x26a>
        if (c == JANPATCH_OPERATION_ESC) {
 8019f9c:	693b      	ldr	r3, [r7, #16]
 8019f9e:	2ba7      	cmp	r3, #167	; 0xa7
 8019fa0:	f040 80df 	bne.w	801a162 <janpatch+0x252>
            switch ((c = jp_getc(&ctx, &ctx.patch_buffer))) {
 8019fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019fa8:	4619      	mov	r1, r3
 8019faa:	f107 0020 	add.w	r0, r7, #32
 8019fae:	f7ff fd9f 	bl	8019af0 <jp_getc>
 8019fb2:	6138      	str	r0, [r7, #16]
 8019fb4:	693b      	ldr	r3, [r7, #16]
 8019fb6:	2ba3      	cmp	r3, #163	; 0xa3
 8019fb8:	d010      	beq.n	8019fdc <janpatch+0xcc>
 8019fba:	2ba3      	cmp	r3, #163	; 0xa3
 8019fbc:	dc06      	bgt.n	8019fcc <janpatch+0xbc>
 8019fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fc2:	f000 80ba 	beq.w	801a13a <janpatch+0x22a>
 8019fc6:	2ba2      	cmp	r3, #162	; 0xa2
 8019fc8:	d06f      	beq.n	801a0aa <janpatch+0x19a>
 8019fca:	e0be      	b.n	801a14a <janpatch+0x23a>
 8019fcc:	2ba5      	cmp	r3, #165	; 0xa5
 8019fce:	d05b      	beq.n	801a088 <janpatch+0x178>
 8019fd0:	2ba5      	cmp	r3, #165	; 0xa5
 8019fd2:	f2c0 8090 	blt.w	801a0f6 <janpatch+0x1e6>
 8019fd6:	2ba6      	cmp	r3, #166	; 0xa6
 8019fd8:	d045      	beq.n	801a066 <janpatch+0x156>
 8019fda:	e0b6      	b.n	801a14a <janpatch+0x23a>
                case JANPATCH_OPERATION_EQL: {
                    int length = find_length(&ctx, &ctx.patch_buffer);
 8019fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	f107 0020 	add.w	r0, r7, #32
 8019fe6:	f7ff ff27 	bl	8019e38 <find_length>
 8019fea:	60b8      	str	r0, [r7, #8]
                    if (length == -1) {
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ff2:	d10a      	bne.n	801a00a <janpatch+0xfa>
                        JANPATCH_ERROR("EQL length invalid\n");
 8019ff4:	4877      	ldr	r0, [pc, #476]	; (801a1d4 <janpatch+0x2c4>)
 8019ff6:	f008 fba9 	bl	802274c <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 8019ffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a000:	4875      	ldr	r0, [pc, #468]	; (801a1d8 <janpatch+0x2c8>)
 801a002:	f008 fb1b 	bl	802263c <iprintf>
                        return 1;
 801a006:	2301      	movs	r3, #1
 801a008:	e0d9      	b.n	801a1be <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("EQL: %d bytes\n", length);
 801a00a:	68b9      	ldr	r1, [r7, #8]
 801a00c:	4873      	ldr	r0, [pc, #460]	; (801a1dc <janpatch+0x2cc>)
 801a00e:	f008 fb15 	bl	802263c <iprintf>

                    for (int ix = 0; ix < length; ix++) {
 801a012:	2300      	movs	r3, #0
 801a014:	617b      	str	r3, [r7, #20]
 801a016:	e021      	b.n	801a05c <janpatch+0x14c>
                        int r = jp_getc(&ctx, &ctx.source_buffer);
 801a018:	f107 0120 	add.w	r1, r7, #32
 801a01c:	f107 0020 	add.w	r0, r7, #32
 801a020:	f7ff fd66 	bl	8019af0 <jp_getc>
 801a024:	6078      	str	r0, [r7, #4]
                        if (r < -1) {
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a02c:	da0b      	bge.n	801a046 <janpatch+0x136>
                            JANPATCH_ERROR("fread returned %d, but expected character\n", r);
 801a02e:	6879      	ldr	r1, [r7, #4]
 801a030:	486b      	ldr	r0, [pc, #428]	; (801a1e0 <janpatch+0x2d0>)
 801a032:	f008 fb03 	bl	802263c <iprintf>
                            JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 801a036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a03a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a03c:	4866      	ldr	r0, [pc, #408]	; (801a1d8 <janpatch+0x2c8>)
 801a03e:	f008 fafd 	bl	802263c <iprintf>
                            return 1;
 801a042:	2301      	movs	r3, #1
 801a044:	e0bb      	b.n	801a1be <janpatch+0x2ae>
                        }

                        jp_putc(r, &ctx, &ctx.target_buffer);
 801a046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a04a:	461a      	mov	r2, r3
 801a04c:	f107 0120 	add.w	r1, r7, #32
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	f7ff fda4 	bl	8019b9e <jp_putc>
                    for (int ix = 0; ix < length; ix++) {
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	3301      	adds	r3, #1
 801a05a:	617b      	str	r3, [r7, #20]
 801a05c:	697a      	ldr	r2, [r7, #20]
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	429a      	cmp	r2, r3
 801a062:	dbd9      	blt.n	801a018 <janpatch+0x108>
                    }

                    break;
 801a064:	e089      	b.n	801a17a <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_MOD: {
                    JANPATCH_DEBUG("MOD: ");
 801a066:	485f      	ldr	r0, [pc, #380]	; (801a1e4 <janpatch+0x2d4>)
 801a068:	f008 fae8 	bl	802263c <iprintf>

                    // MOD means to modify the next series of bytes
                    // so just write everything (until the next ESC sequence) to the target JANPATCH_STREAM
                    // but also up the position in the source JANPATCH_STREAM every time
                    process_mod(&ctx, &ctx.source_buffer, &ctx.patch_buffer, &ctx.target_buffer, true);
 801a06c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801a070:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a074:	2301      	movs	r3, #1
 801a076:	9300      	str	r3, [sp, #0]
 801a078:	460b      	mov	r3, r1
 801a07a:	f107 0120 	add.w	r1, r7, #32
 801a07e:	f107 0020 	add.w	r0, r7, #32
 801a082:	f7ff fe63 	bl	8019d4c <process_mod>
                    break;
 801a086:	e078      	b.n	801a17a <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_INS: {
                    JANPATCH_DEBUG("INS: ");
 801a088:	4857      	ldr	r0, [pc, #348]	; (801a1e8 <janpatch+0x2d8>)
 801a08a:	f008 fad7 	bl	802263c <iprintf>
                    // INS inserts the sequence in the new JANPATCH_STREAM, but does not up the position of the source JANPATCH_STREAM
                    // so just write everything (until the next ESC sequence) to the target JANPATCH_STREAM

                    process_mod(&ctx, &ctx.source_buffer, &ctx.patch_buffer, &ctx.target_buffer, false);
 801a08e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801a092:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a096:	2300      	movs	r3, #0
 801a098:	9300      	str	r3, [sp, #0]
 801a09a:	460b      	mov	r3, r1
 801a09c:	f107 0120 	add.w	r1, r7, #32
 801a0a0:	f107 0020 	add.w	r0, r7, #32
 801a0a4:	f7ff fe52 	bl	8019d4c <process_mod>
                    break;
 801a0a8:	e067      	b.n	801a17a <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_BKT: {
                    // BKT = backtrace, seek back in source JANPATCH_STREAM with X bytes...
                    int length = find_length(&ctx, &ctx.patch_buffer);
 801a0aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	f107 0020 	add.w	r0, r7, #32
 801a0b4:	f7ff fec0 	bl	8019e38 <find_length>
 801a0b8:	6038      	str	r0, [r7, #0]
                    if (length == -1) {
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0c0:	d10a      	bne.n	801a0d8 <janpatch+0x1c8>
                        JANPATCH_ERROR("BKT length invalid\n");
 801a0c2:	484a      	ldr	r0, [pc, #296]	; (801a1ec <janpatch+0x2dc>)
 801a0c4:	f008 fb42 	bl	802274c <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 801a0c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a0ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a0cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a0ce:	4842      	ldr	r0, [pc, #264]	; (801a1d8 <janpatch+0x2c8>)
 801a0d0:	f008 fab4 	bl	802263c <iprintf>
                        return 1;
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	e072      	b.n	801a1be <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("BKT: %d bytes\n", -length);
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	425b      	negs	r3, r3
 801a0dc:	4619      	mov	r1, r3
 801a0de:	4844      	ldr	r0, [pc, #272]	; (801a1f0 <janpatch+0x2e0>)
 801a0e0:	f008 faac 	bl	802263c <iprintf>

                    jp_fseek(&ctx.source_buffer, -length, SEEK_CUR);
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	425b      	negs	r3, r3
 801a0e8:	2201      	movs	r2, #1
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	f107 0020 	add.w	r0, r7, #32
 801a0f0:	f7ff fcd8 	bl	8019aa4 <jp_fseek>

                    break;
 801a0f4:	e041      	b.n	801a17a <janpatch+0x26a>
                }
                case JANPATCH_OPERATION_DEL: {
                    // DEL deletes bytes, so up the source stream with X bytes
                    int length = find_length(&ctx, &ctx.patch_buffer);
 801a0f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a0fa:	4619      	mov	r1, r3
 801a0fc:	f107 0020 	add.w	r0, r7, #32
 801a100:	f7ff fe9a 	bl	8019e38 <find_length>
 801a104:	60f8      	str	r0, [r7, #12]
                    if (length == -1) {
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a10c:	d10a      	bne.n	801a124 <janpatch+0x214>
                        JANPATCH_ERROR("DEL length invalid\n");
 801a10e:	4839      	ldr	r0, [pc, #228]	; (801a1f4 <janpatch+0x2e4>)
 801a110:	f008 fb1c 	bl	802274c <puts>
                        JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 801a114:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a11a:	482f      	ldr	r0, [pc, #188]	; (801a1d8 <janpatch+0x2c8>)
 801a11c:	f008 fa8e 	bl	802263c <iprintf>
                        return 1;
 801a120:	2301      	movs	r3, #1
 801a122:	e04c      	b.n	801a1be <janpatch+0x2ae>
                    }

                    JANPATCH_DEBUG("DEL: %d bytes\n", length);
 801a124:	68f9      	ldr	r1, [r7, #12]
 801a126:	4834      	ldr	r0, [pc, #208]	; (801a1f8 <janpatch+0x2e8>)
 801a128:	f008 fa88 	bl	802263c <iprintf>

                    jp_fseek(&ctx.source_buffer, length, SEEK_CUR);
 801a12c:	2201      	movs	r2, #1
 801a12e:	68f9      	ldr	r1, [r7, #12]
 801a130:	f107 0020 	add.w	r0, r7, #32
 801a134:	f7ff fcb6 	bl	8019aa4 <jp_fseek>
                    break;
 801a138:	e01f      	b.n	801a17a <janpatch+0x26a>
                }
                case -1: {
                    // End of file stream... rewind 1 character and break, this will yield back to main loop
                    jp_fseek(&ctx.source_buffer, -1, SEEK_CUR);
 801a13a:	2201      	movs	r2, #1
 801a13c:	f04f 31ff 	mov.w	r1, #4294967295
 801a140:	f107 0020 	add.w	r0, r7, #32
 801a144:	f7ff fcae 	bl	8019aa4 <jp_fseek>
                    break;
 801a148:	e017      	b.n	801a17a <janpatch+0x26a>
                }
                default: {
                    JANPATCH_ERROR("Unsupported operator %02x\n", c);
 801a14a:	6939      	ldr	r1, [r7, #16]
 801a14c:	482b      	ldr	r0, [pc, #172]	; (801a1fc <janpatch+0x2ec>)
 801a14e:	f008 fa75 	bl	802263c <iprintf>
                    JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 801a152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a158:	481f      	ldr	r0, [pc, #124]	; (801a1d8 <janpatch+0x2c8>)
 801a15a:	f008 fa6f 	bl	802263c <iprintf>
                    return 1;
 801a15e:	2301      	movs	r3, #1
 801a160:	e02d      	b.n	801a1be <janpatch+0x2ae>
                }
            }
        }
        else {
            JANPATCH_ERROR("Expected ESC but got %02x\n", c);
 801a162:	6939      	ldr	r1, [r7, #16]
 801a164:	4826      	ldr	r0, [pc, #152]	; (801a200 <janpatch+0x2f0>)
 801a166:	f008 fa69 	bl	802263c <iprintf>
            JANPATCH_ERROR("Positions are, source=%ld patch=%ld new=%ld\n", ctx.source_buffer.position, ctx.patch_buffer.position, ctx.target_buffer.position);
 801a16a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a16c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a16e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a170:	4819      	ldr	r0, [pc, #100]	; (801a1d8 <janpatch+0x2c8>)
 801a172:	f008 fa63 	bl	802263c <iprintf>

            return 1;
 801a176:	2301      	movs	r3, #1
 801a178:	e021      	b.n	801a1be <janpatch+0x2ae>
    while ((c = jp_getc(&ctx, &ctx.patch_buffer)) != EOF) {
 801a17a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a17e:	4619      	mov	r1, r3
 801a180:	f107 0020 	add.w	r0, r7, #32
 801a184:	f7ff fcb4 	bl	8019af0 <jp_getc>
 801a188:	6138      	str	r0, [r7, #16]
 801a18a:	693b      	ldr	r3, [r7, #16]
 801a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a190:	f47f af04 	bne.w	8019f9c <janpatch+0x8c>
        }
    }

    target->file_size = jp_final_flush(&ctx, &ctx.target_buffer) + (ctx.target_buffer.stream->now_page - ctx.target_buffer.stream->origin_page) * ctx.target_buffer.size;
 801a194:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a198:	4619      	mov	r1, r3
 801a19a:	f107 0020 	add.w	r0, r7, #32
 801a19e:	f7ff fd7c 	bl	8019c9a <jp_final_flush>
 801a1a2:	4601      	mov	r1, r0
 801a1a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a1a6:	689a      	ldr	r2, [r3, #8]
 801a1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	1ad3      	subs	r3, r2, r3
 801a1ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1b0:	fb02 f303 	mul.w	r3, r2, r3
 801a1b4:	18ca      	adds	r2, r1, r3
 801a1b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a1ba:	60da      	str	r2, [r3, #12]

    return 0;
 801a1bc:	2300      	movs	r3, #0
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3718      	adds	r7, #24
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a1c8:	b004      	add	sp, #16
 801a1ca:	4770      	bx	lr
 801a1cc:	08025e28 	.word	0x08025e28
 801a1d0:	08025e44 	.word	0x08025e44
 801a1d4:	08025e60 	.word	0x08025e60
 801a1d8:	08025e74 	.word	0x08025e74
 801a1dc:	08025ea4 	.word	0x08025ea4
 801a1e0:	08025eb4 	.word	0x08025eb4
 801a1e4:	08025ee0 	.word	0x08025ee0
 801a1e8:	08025ee8 	.word	0x08025ee8
 801a1ec:	08025ef0 	.word	0x08025ef0
 801a1f0:	08025f04 	.word	0x08025f04
 801a1f4:	08025f14 	.word	0x08025f14
 801a1f8:	08025f28 	.word	0x08025f28
 801a1fc:	08025f38 	.word	0x08025f38
 801a200:	08025f54 	.word	0x08025f54

0801a204 <Bank1_WRP>:
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */

uint32_t Bank1_WRP(uint32_t strtA_offset, uint32_t endA_offset)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b08e      	sub	sp, #56	; 0x38
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
 801a20c:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_FLASH_PAGE(strtA_offset));
	assert_param(IS_FLASH_PAGE(endA_offset));
	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 801a20e:	f7e8 f883 	bl	8002318 <HAL_FLASH_Unlock>
 801a212:	4603      	mov	r3, r0
 801a214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 801a218:	f7e8 f8b0 	bl	800237c <HAL_FLASH_OB_Unlock>
 801a21c:	4603      	mov	r3, r0
 801a21e:	461a      	mov	r2, r3
 801a220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a224:	4313      	orrs	r3, r2
 801a226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 801a22a:	23aa      	movs	r3, #170	; 0xaa
 801a22c:	61fb      	str	r3, [r7, #28]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 801a22e:	2301      	movs	r3, #1
 801a230:	60fb      	str	r3, [r7, #12]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 801a232:	2300      	movs	r3, #0
 801a234:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPEndOffset = endA_offset;
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	61bb      	str	r3, [r7, #24]
	OptionsBytesStruct1.WRPStartOffset = strtA_offset;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	617b      	str	r3, [r7, #20]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 801a23e:	f107 030c 	add.w	r3, r7, #12
 801a242:	4618      	mov	r0, r3
 801a244:	f7e8 fa16 	bl	8002674 <HAL_FLASHEx_OBProgram>
 801a248:	4603      	mov	r3, r0
 801a24a:	461a      	mov	r2, r3
 801a24c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a250:	4313      	orrs	r3, r2
 801a252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 801a256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d101      	bne.n	801a262 <Bank1_WRP+0x5e>
 801a25e:	2300      	movs	r3, #0
 801a260:	e000      	b.n	801a264 <Bank1_WRP+0x60>
 801a262:	2307      	movs	r3, #7
}
 801a264:	4618      	mov	r0, r3
 801a266:	3738      	adds	r7, #56	; 0x38
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}

0801a26c <Bank1_nWRP>:
  * @brief  Reset the FLASH_WRP1xR status of daemon flash area.
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */
uint32_t Bank1_nWRP( void )
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b08c      	sub	sp, #48	; 0x30
 801a270:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;
	HAL_StatusTypeDef retr;

	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 801a272:	f7e8 f851 	bl	8002318 <HAL_FLASH_Unlock>
 801a276:	4603      	mov	r3, r0
 801a278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 801a27c:	f7e8 f87e 	bl	800237c <HAL_FLASH_OB_Unlock>
 801a280:	4603      	mov	r3, r0
 801a282:	461a      	mov	r2, r3
 801a284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a288:	4313      	orrs	r3, r2
 801a28a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 801a28e:	23aa      	movs	r3, #170	; 0xaa
 801a290:	617b      	str	r3, [r7, #20]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 801a292:	2301      	movs	r3, #1
 801a294:	607b      	str	r3, [r7, #4]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 801a296:	2300      	movs	r3, #0
 801a298:	60bb      	str	r3, [r7, #8]
	OptionsBytesStruct1.WRPEndOffset = 0x00;
 801a29a:	2300      	movs	r3, #0
 801a29c:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPStartOffset = 0xFF;
 801a29e:	23ff      	movs	r3, #255	; 0xff
 801a2a0:	60fb      	str	r3, [r7, #12]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 801a2a2:	1d3b      	adds	r3, r7, #4
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7e8 f9e5 	bl	8002674 <HAL_FLASHEx_OBProgram>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2b2:	4313      	orrs	r3, r2
 801a2b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAB;
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	60bb      	str	r3, [r7, #8]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 801a2bc:	1d3b      	adds	r3, r7, #4
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7e8 f9d8 	bl	8002674 <HAL_FLASHEx_OBProgram>
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2cc:	4313      	orrs	r3, r2
 801a2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 801a2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d101      	bne.n	801a2de <Bank1_nWRP+0x72>
 801a2da:	2300      	movs	r3, #0
 801a2dc:	e000      	b.n	801a2e0 <Bank1_nWRP+0x74>
 801a2de:	2307      	movs	r3, #7
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3730      	adds	r7, #48	; 0x30
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <Bank_WRT_Check>:
 * @description: Read the flag in flash to check if the bank is under write protected, if under WRT, clear the corresponding option bytes and reset the bank to make it effective.
 * @param None
 * @return: None
 */
void Bank_WRT_Check( void )
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b08a      	sub	sp, #40	; 0x28
 801a2ec:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 801a2ee:	f7e8 f813 	bl	8002318 <HAL_FLASH_Unlock>

	/* Unlock the Options Bytes *************************************************/
	HAL_FLASH_OB_Unlock();
 801a2f2:	f7e8 f843 	bl	800237c <HAL_FLASH_OB_Unlock>

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	607b      	str	r3, [r7, #4]
	HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct1);
 801a2fa:	463b      	mov	r3, r7
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	f7e8 fa27 	bl	8002750 <HAL_FLASHEx_OBGetConfig>
	if((OptionsBytesStruct1.WRPStartOffset == 0) && (OptionsBytesStruct1.WRPEndOffset == 0xff))
 801a302:	68bb      	ldr	r3, [r7, #8]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d109      	bne.n	801a31c <Bank_WRT_Check+0x34>
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	2bff      	cmp	r3, #255	; 0xff
 801a30c:	d106      	bne.n	801a31c <Bank_WRT_Check+0x34>
	{
        /* Boot come back from FUT in Bank 2, need to unlock the write protection of flash */
		if (Bank1_nWRP() == HAL_OK)
 801a30e:	f7ff ffad 	bl	801a26c <Bank1_nWRP>
 801a312:	4603      	mov	r3, r0
 801a314:	2b00      	cmp	r3, #0
 801a316:	d101      	bne.n	801a31c <Bank_WRT_Check+0x34>
			HAL_FLASH_OB_Launch();
 801a318:	f7e8 f84c 	bl	80023b4 <HAL_FLASH_OB_Launch>
	}
}
 801a31c:	bf00      	nop
 801a31e:	3728      	adds	r7, #40	; 0x28
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}

0801a324 <the_fseek>:

int the_fseek(Flash_FILE *file, long int offset, int origin)
{
 801a324:	b480      	push	{r7}
 801a326:	b085      	sub	sp, #20
 801a328:	af00      	add	r7, sp, #0
 801a32a:	60f8      	str	r0, [r7, #12]
 801a32c:	60b9      	str	r1, [r7, #8]
 801a32e:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET)
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d107      	bne.n	801a346 <the_fseek+0x22>
    {
        file->now_page = file->origin_page + offset / FLASH_PAGE;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	685a      	ldr	r2, [r3, #4]
 801a33a:	68bb      	ldr	r3, [r7, #8]
 801a33c:	0adb      	lsrs	r3, r3, #11
 801a33e:	441a      	add	r2, r3
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	609a      	str	r2, [r3, #8]
 801a344:	e00d      	b.n	801a362 <the_fseek+0x3e>
    }
    else if (origin == SEEK_CUR)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2b01      	cmp	r3, #1
 801a34a:	d107      	bne.n	801a35c <the_fseek+0x38>
    {
        file->now_page += offset / FLASH_PAGE;
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	689a      	ldr	r2, [r3, #8]
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	0adb      	lsrs	r3, r3, #11
 801a354:	441a      	add	r2, r3
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	609a      	str	r2, [r3, #8]
 801a35a:	e002      	b.n	801a362 <the_fseek+0x3e>
    }
    else
    {
        return -1;
 801a35c:	f04f 33ff 	mov.w	r3, #4294967295
 801a360:	e000      	b.n	801a364 <the_fseek+0x40>
    }
    return 0;
 801a362:	2300      	movs	r3, #0
}
 801a364:	4618      	mov	r0, r3
 801a366:	3714      	adds	r7, #20
 801a368:	46bd      	mov	sp, r7
 801a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a36e:	4770      	bx	lr

0801a370 <the_fwrite>:

size_t the_fwrite(const void *ptr, size_t size, size_t count, Flash_FILE *file)
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b088      	sub	sp, #32
 801a374:	af00      	add	r7, sp, #0
 801a376:	60f8      	str	r0, [r7, #12]
 801a378:	60b9      	str	r1, [r7, #8]
 801a37a:	607a      	str	r2, [r7, #4]
 801a37c:	603b      	str	r3, [r7, #0]
    // uint32_t BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
    uint8_t bank_active = 0;
 801a37e:	2300      	movs	r3, #0
 801a380:	77fb      	strb	r3, [r7, #31]
    /* self update or another bank */
    if (!(file->bank))
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d102      	bne.n	801a390 <the_fwrite+0x20>
        bank_active = 1;
 801a38a:	2301      	movs	r3, #1
 801a38c:	77fb      	strb	r3, [r7, #31]
 801a38e:	e001      	b.n	801a394 <the_fwrite+0x24>
    else
        bank_active = 0;
 801a390:	2300      	movs	r3, #0
 801a392:	77fb      	strb	r3, [r7, #31]

    FLASH_If_Erase_Pages(bank_active, file->now_page);
 801a394:	7ffa      	ldrb	r2, [r7, #31]
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	689b      	ldr	r3, [r3, #8]
 801a39a:	4619      	mov	r1, r3
 801a39c:	4610      	mov	r0, r2
 801a39e:	f002 fae9 	bl	801c974 <FLASH_If_Erase_Pages>
    uint32_t flash_bank_address = (bank_active == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2;
 801a3a2:	7ffb      	ldrb	r3, [r7, #31]
 801a3a4:	2b01      	cmp	r3, #1
 801a3a6:	d102      	bne.n	801a3ae <the_fwrite+0x3e>
 801a3a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a3ac:	e000      	b.n	801a3b0 <the_fwrite+0x40>
 801a3ae:	4b10      	ldr	r3, [pc, #64]	; (801a3f0 <the_fwrite+0x80>)
 801a3b0:	61bb      	str	r3, [r7, #24]
    /* The flash write below is in the double-word form, so we need to ensure the count is multiple of sizeof(uint64_t) */
    /* restore current count */
    size_t temp_count = count;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	617b      	str	r3, [r7, #20]
    if (count % 8)
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	f003 0307 	and.w	r3, r3, #7
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d004      	beq.n	801a3ca <the_fwrite+0x5a>
        count += 8 - (count % 8);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f023 0307 	bic.w	r3, r3, #7
 801a3c6:	3308      	adds	r3, #8
 801a3c8:	607b      	str	r3, [r7, #4]
    FLASH_If_Write(flash_bank_address + file->now_page * FLASH_PAGE, (uint32_t *)ptr, count / sizeof(uint32_t));
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	689b      	ldr	r3, [r3, #8]
 801a3ce:	02da      	lsls	r2, r3, #11
 801a3d0:	69bb      	ldr	r3, [r7, #24]
 801a3d2:	18d0      	adds	r0, r2, r3
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	089b      	lsrs	r3, r3, #2
 801a3d8:	461a      	mov	r2, r3
 801a3da:	68f9      	ldr	r1, [r7, #12]
 801a3dc:	f002 fb4e 	bl	801ca7c <FLASH_If_Write>
    count = temp_count;
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	607b      	str	r3, [r7, #4]
    return count;
 801a3e4:	687b      	ldr	r3, [r7, #4]
}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3720      	adds	r7, #32
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	08080000 	.word	0x08080000

0801a3f4 <the_fread>:

size_t the_fread(void *ptr, size_t size, size_t count, Flash_FILE *file)
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b088      	sub	sp, #32
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	60f8      	str	r0, [r7, #12]
 801a3fc:	60b9      	str	r1, [r7, #8]
 801a3fe:	607a      	str	r2, [r7, #4]
 801a400:	603b      	str	r3, [r7, #0]
    uint8_t bank_active = 0;
 801a402:	2300      	movs	r3, #0
 801a404:	77fb      	strb	r3, [r7, #31]
    /* self update or another bank */
    if (!(file->bank))
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d102      	bne.n	801a414 <the_fread+0x20>
        bank_active = 1;
 801a40e:	2301      	movs	r3, #1
 801a410:	77fb      	strb	r3, [r7, #31]
 801a412:	e001      	b.n	801a418 <the_fread+0x24>
    else
        bank_active = 0;
 801a414:	2300      	movs	r3, #0
 801a416:	77fb      	strb	r3, [r7, #31]

    uint32_t flash_bank_address = (bank_active == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2;
 801a418:	7ffb      	ldrb	r3, [r7, #31]
 801a41a:	2b01      	cmp	r3, #1
 801a41c:	d102      	bne.n	801a424 <the_fread+0x30>
 801a41e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a422:	e000      	b.n	801a426 <the_fread+0x32>
 801a424:	4b12      	ldr	r3, [pc, #72]	; (801a470 <the_fread+0x7c>)
 801a426:	61bb      	str	r3, [r7, #24]

    memcpy((uint32_t *)ptr, (uint32_t *)(flash_bank_address + file->now_page * FLASH_PAGE), count);
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	689b      	ldr	r3, [r3, #8]
 801a42c:	02da      	lsls	r2, r3, #11
 801a42e:	69bb      	ldr	r3, [r7, #24]
 801a430:	4413      	add	r3, r2
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	4619      	mov	r1, r3
 801a436:	68f8      	ldr	r0, [r7, #12]
 801a438:	f007 fae8 	bl	8021a0c <memcpy>
    uint32_t left_count = file->file_size - (file->now_page - file->origin_page) * FLASH_PAGE;
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	68da      	ldr	r2, [r3, #12]
 801a440:	683b      	ldr	r3, [r7, #0]
 801a442:	6899      	ldr	r1, [r3, #8]
 801a444:	683b      	ldr	r3, [r7, #0]
 801a446:	685b      	ldr	r3, [r3, #4]
 801a448:	1acb      	subs	r3, r1, r3
 801a44a:	02db      	lsls	r3, r3, #11
 801a44c:	1ad3      	subs	r3, r2, r3
 801a44e:	617b      	str	r3, [r7, #20]
    // Ensure the real useful bytes are no larger than left bytes
    if ((count > left_count) && (file->file_size))
 801a450:	687a      	ldr	r2, [r7, #4]
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	429a      	cmp	r2, r3
 801a456:	d905      	bls.n	801a464 <the_fread+0x70>
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	68db      	ldr	r3, [r3, #12]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d001      	beq.n	801a464 <the_fread+0x70>
        count = left_count;
 801a460:	697b      	ldr	r3, [r7, #20]
 801a462:	607b      	str	r3, [r7, #4]
    return count;
 801a464:	687b      	ldr	r3, [r7, #4]
}
 801a466:	4618      	mov	r0, r3
 801a468:	3720      	adds	r7, #32
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd80      	pop	{r7, pc}
 801a46e:	bf00      	nop
 801a470:	08080000 	.word	0x08080000

0801a474 <progress>:

static void progress(uint8_t percentage)
{
 801a474:	b580      	push	{r7, lr}
 801a476:	b082      	sub	sp, #8
 801a478:	af00      	add	r7, sp, #0
 801a47a:	4603      	mov	r3, r0
 801a47c:	71fb      	strb	r3, [r7, #7]
    printf("Patch progress: %d%%\n", percentage);
 801a47e:	79fb      	ldrb	r3, [r7, #7]
 801a480:	4619      	mov	r1, r3
 801a482:	4803      	ldr	r0, [pc, #12]	; (801a490 <progress+0x1c>)
 801a484:	f008 f8da 	bl	802263c <iprintf>
}
 801a488:	bf00      	nop
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}
 801a490:	08025f70 	.word	0x08025f70

0801a494 <Filepatch>:

Flash_FILE Filepatch(uint8_t originalBank, uint32_t originalPage, uint32_t originalSize, uint8_t patchBank, uint32_t patchPage, uint32_t patchSize, uint8_t newBank, uint32_t newPage)
{
 801a494:	b590      	push	{r4, r7, lr}
 801a496:	b0bf      	sub	sp, #252	; 0xfc
 801a498:	af16      	add	r7, sp, #88	; 0x58
 801a49a:	60f8      	str	r0, [r7, #12]
 801a49c:	607a      	str	r2, [r7, #4]
 801a49e:	603b      	str	r3, [r7, #0]
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	72fb      	strb	r3, [r7, #11]
    janpatch_ctx ctx = {
 801a4a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a4a8:	225c      	movs	r2, #92	; 0x5c
 801a4aa:	2100      	movs	r1, #0
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f007 fab8 	bl	8021a22 <memset>
        // fread/fwrite buffers for every file, minimum size is 1 byte
        // when you run on an embedded system with block size flash, set it to the size of a block for best performance
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a4b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a4b6:	f007 fa99 	bl	80219ec <malloc>
 801a4ba:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a4bc:	643b      	str	r3, [r7, #64]	; 0x40
 801a4be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a4c2:	647b      	str	r3, [r7, #68]	; 0x44
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a4c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a4c8:	f007 fa90 	bl	80219ec <malloc>
 801a4cc:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a4ce:	65bb      	str	r3, [r7, #88]	; 0x58
 801a4d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a4d4:	65fb      	str	r3, [r7, #92]	; 0x5c
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801a4d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a4da:	f007 fa87 	bl	80219ec <malloc>
 801a4de:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801a4e0:	673b      	str	r3, [r7, #112]	; 0x70
 801a4e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a4e6:	677b      	str	r3, [r7, #116]	; 0x74
 801a4e8:	4b3e      	ldr	r3, [pc, #248]	; (801a5e4 <Filepatch+0x150>)
 801a4ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a4ee:	4b3e      	ldr	r3, [pc, #248]	; (801a5e8 <Filepatch+0x154>)
 801a4f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a4f4:	4b3d      	ldr	r3, [pc, #244]	; (801a5ec <Filepatch+0x158>)
 801a4f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a4fa:	4b3d      	ldr	r3, [pc, #244]	; (801a5f0 <Filepatch+0x15c>)
 801a4fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        &the_fread,
        &the_fwrite,
        &the_fseek,
        &progress};

    Flash_FILE originalFile = {originalBank, originalPage, 0, originalSize};
 801a500:	7afb      	ldrb	r3, [r7, #11]
 801a502:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	637b      	str	r3, [r7, #52]	; 0x34
 801a50a:	2300      	movs	r3, #0
 801a50c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	63fb      	str	r3, [r7, #60]	; 0x3c
    Flash_FILE patchFile = {patchBank, patchPage, 0, patchSize};
 801a512:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a516:	f887 3020 	strb.w	r3, [r7, #32]
 801a51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a51e:	627b      	str	r3, [r7, #36]	; 0x24
 801a520:	2300      	movs	r3, #0
 801a522:	62bb      	str	r3, [r7, #40]	; 0x28
 801a524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a528:	62fb      	str	r3, [r7, #44]	; 0x2c
    Flash_FILE newFile = {newBank, newPage};
 801a52a:	f107 0310 	add.w	r3, r7, #16
 801a52e:	2200      	movs	r2, #0
 801a530:	601a      	str	r2, [r3, #0]
 801a532:	605a      	str	r2, [r3, #4]
 801a534:	609a      	str	r2, [r3, #8]
 801a536:	60da      	str	r2, [r3, #12]
 801a538:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 801a53c:	743b      	strb	r3, [r7, #16]
 801a53e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a542:	617b      	str	r3, [r7, #20]

    printf("originalSize:%lu, %lu\n", originalSize, patchSize);
 801a544:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a548:	6839      	ldr	r1, [r7, #0]
 801a54a:	482a      	ldr	r0, [pc, #168]	; (801a5f4 <Filepatch+0x160>)
 801a54c:	f008 f876 	bl	802263c <iprintf>

    int jpr = janpatch(ctx, &originalFile, &patchFile, &newFile);
 801a550:	f107 0310 	add.w	r3, r7, #16
 801a554:	9315      	str	r3, [sp, #84]	; 0x54
 801a556:	f107 0320 	add.w	r3, r7, #32
 801a55a:	9314      	str	r3, [sp, #80]	; 0x50
 801a55c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a560:	9313      	str	r3, [sp, #76]	; 0x4c
 801a562:	4668      	mov	r0, sp
 801a564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a568:	224c      	movs	r2, #76	; 0x4c
 801a56a:	4619      	mov	r1, r3
 801a56c:	f007 fa4e 	bl	8021a0c <memcpy>
 801a570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a576:	f7ff fccb 	bl	8019f10 <janpatch>
 801a57a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    free(ctx.source_buffer.buffer);
 801a57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a580:	4618      	mov	r0, r3
 801a582:	f007 fa3b 	bl	80219fc <free>
    free(ctx.patch_buffer.buffer);
 801a586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a588:	4618      	mov	r0, r3
 801a58a:	f007 fa37 	bl	80219fc <free>
    free(ctx.target_buffer.buffer);
 801a58e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a590:	4618      	mov	r0, r3
 801a592:	f007 fa33 	bl	80219fc <free>

    printf("size:%lu, %lu, %lu, %lu, %lu, %lu, %lu, %lu\n", newFile.file_size, originalBank, originalPage, originalSize, patchBank, patchSize, newBank, newPage);
 801a596:	69f8      	ldr	r0, [r7, #28]
 801a598:	7afc      	ldrb	r4, [r7, #11]
 801a59a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a59e:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 801a5a2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801a5a6:	9104      	str	r1, [sp, #16]
 801a5a8:	9203      	str	r2, [sp, #12]
 801a5aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a5ae:	9202      	str	r2, [sp, #8]
 801a5b0:	9301      	str	r3, [sp, #4]
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	9300      	str	r3, [sp, #0]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	4622      	mov	r2, r4
 801a5ba:	4601      	mov	r1, r0
 801a5bc:	480e      	ldr	r0, [pc, #56]	; (801a5f8 <Filepatch+0x164>)
 801a5be:	f008 f83d 	bl	802263c <iprintf>

    /* Patch failed, set file size as 0 */
    if (jpr)
 801a5c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d001      	beq.n	801a5ce <Filepatch+0x13a>
        newFile.file_size = 0;
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	61fb      	str	r3, [r7, #28]
    return newFile;
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	461c      	mov	r4, r3
 801a5d2:	f107 0310 	add.w	r3, r7, #16
 801a5d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a5d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801a5dc:	68f8      	ldr	r0, [r7, #12]
 801a5de:	37a4      	adds	r7, #164	; 0xa4
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd90      	pop	{r4, r7, pc}
 801a5e4:	0801a3f5 	.word	0x0801a3f5
 801a5e8:	0801a371 	.word	0x0801a371
 801a5ec:	0801a325 	.word	0x0801a325
 801a5f0:	0801a475 	.word	0x0801a475
 801a5f4:	08025f88 	.word	0x08025f88
 801a5f8:	08025fa0 	.word	0x08025fa0

0801a5fc <FirmwareUpgrade>:

bool FirmwareUpgrade(uint8_t patch_update, uint8_t originalBank, uint32_t originalPage, uint32_t originalSize, uint8_t patchBank, uint32_t patchPage, uint32_t patchSize, uint8_t *md5_code, uint8_t file_compression)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b09a      	sub	sp, #104	; 0x68
 801a600:	af06      	add	r7, sp, #24
 801a602:	60ba      	str	r2, [r7, #8]
 801a604:	607b      	str	r3, [r7, #4]
 801a606:	4603      	mov	r3, r0
 801a608:	73fb      	strb	r3, [r7, #15]
 801a60a:	460b      	mov	r3, r1
 801a60c:	73bb      	strb	r3, [r7, #14]
    printf("FirmwareUpgrade:%lu, %lu, %lu, %lu, %lu, %lu, %lu, %lu\n", patch_update, originalBank, originalPage, originalSize, patchBank, patchPage, patchSize, file_compression);
 801a60e:	7bf9      	ldrb	r1, [r7, #15]
 801a610:	7bb8      	ldrb	r0, [r7, #14]
 801a612:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a616:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801a61a:	9204      	str	r2, [sp, #16]
 801a61c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801a61e:	9203      	str	r2, [sp, #12]
 801a620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a622:	9202      	str	r2, [sp, #8]
 801a624:	9301      	str	r3, [sp, #4]
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	9300      	str	r3, [sp, #0]
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	4602      	mov	r2, r0
 801a62e:	48a4      	ldr	r0, [pc, #656]	; (801a8c0 <FirmwareUpgrade+0x2c4>)
 801a630:	f008 f804 	bl	802263c <iprintf>
    uint8_t i;
    if(file_compression)
 801a634:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801a638:	2b00      	cmp	r3, #0
 801a63a:	f000 8090 	beq.w	801a75e <FirmwareUpgrade+0x162>
        patch daemon: decode file behind patch and move it to the patch location;
        patch FUT: decode file behind patch and move it to the patch location;
        encode for whole firmware:
        decode file behind encode file and move it to the encode location; */
        Flash_FILE encode_file, decode_file;
        encode_file.bank = patch_update?originalBank:1;
 801a63e:	7bfb      	ldrb	r3, [r7, #15]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d001      	beq.n	801a648 <FirmwareUpgrade+0x4c>
 801a644:	7bbb      	ldrb	r3, [r7, #14]
 801a646:	e000      	b.n	801a64a <FirmwareUpgrade+0x4e>
 801a648:	2301      	movs	r3, #1
 801a64a:	f887 3020 	strb.w	r3, [r7, #32]
        encode_file.origin_page = patch_update?patchPage:0;
 801a64e:	7bfb      	ldrb	r3, [r7, #15]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d001      	beq.n	801a658 <FirmwareUpgrade+0x5c>
 801a654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a656:	e000      	b.n	801a65a <FirmwareUpgrade+0x5e>
 801a658:	2300      	movs	r3, #0
 801a65a:	627b      	str	r3, [r7, #36]	; 0x24
        encode_file.file_size = patchSize;
 801a65c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
        decode_file.bank = encode_file.bank;
 801a660:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a664:	743b      	strb	r3, [r7, #16]
        decode_file.origin_page = encode_file.origin_page + (patchSize + FLASH_PAGE - 1) / FLASH_PAGE;
 801a666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a66a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a66e:	0adb      	lsrs	r3, r3, #11
 801a670:	4413      	add	r3, r2
 801a672:	617b      	str	r3, [r7, #20]
        decode_file.file_size = LZSS_decode(&encode_file, &decode_file);
 801a674:	f107 0210 	add.w	r2, r7, #16
 801a678:	f107 0320 	add.w	r3, r7, #32
 801a67c:	4611      	mov	r1, r2
 801a67e:	4618      	mov	r0, r3
 801a680:	f000 fbce 	bl	801ae20 <LZSS_decode>
 801a684:	4603      	mov	r3, r0
 801a686:	61fb      	str	r3, [r7, #28]
        PRINTF("LZSS_decode:%lu\n", decode_file.file_size);
 801a688:	69fb      	ldr	r3, [r7, #28]
 801a68a:	4619      	mov	r1, r3
 801a68c:	488d      	ldr	r0, [pc, #564]	; (801a8c4 <FirmwareUpgrade+0x2c8>)
 801a68e:	f007 ffd5 	bl	802263c <iprintf>
        if(!decode_file.file_size)
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d101      	bne.n	801a69c <FirmwareUpgrade+0xa0>
            return false;
 801a698:	2300      	movs	r3, #0
 801a69a:	e1ce      	b.n	801aa3a <FirmwareUpgrade+0x43e>
        else
        {
            uint8_t flash_erase_bank = decode_file.bank?0:1;
 801a69c:	7c3b      	ldrb	r3, [r7, #16]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	bf0c      	ite	eq
 801a6a2:	2301      	moveq	r3, #1
 801a6a4:	2300      	movne	r3, #0
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            uint32_t flash_copy_addr = decode_file.bank?FLASH_START_BANK2:FLASH_START_BANK1;
 801a6ac:	7c3b      	ldrb	r3, [r7, #16]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d001      	beq.n	801a6b6 <FirmwareUpgrade+0xba>
 801a6b2:	4b85      	ldr	r3, [pc, #532]	; (801a8c8 <FirmwareUpgrade+0x2cc>)
 801a6b4:	e001      	b.n	801a6ba <FirmwareUpgrade+0xbe>
 801a6b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a6ba:	64bb      	str	r3, [r7, #72]	; 0x48
            /* Move the decode file to encode file */
            for (i = 0; i < (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a6bc:	2300      	movs	r3, #0
 801a6be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a6c2:	e020      	b.n	801a706 <FirmwareUpgrade+0x10a>
            {
                FLASH_If_Erase_Pages(flash_erase_bank, encode_file.origin_page + i);
 801a6c4:	f897 004d 	ldrb.w	r0, [r7, #77]	; 0x4d
 801a6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a6ce:	4413      	add	r3, r2
 801a6d0:	4619      	mov	r1, r3
 801a6d2:	f002 f94f 	bl	801c974 <FLASH_If_Erase_Pages>
                Flash_Bank_Copy_Bank(flash_copy_addr + (decode_file.origin_page + i) * FLASH_PAGE, flash_copy_addr + (encode_file.origin_page + i) * FLASH_PAGE, FLASH_PAGE, 0);
 801a6d6:	697a      	ldr	r2, [r7, #20]
 801a6d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a6dc:	4413      	add	r3, r2
 801a6de:	02da      	lsls	r2, r3, #11
 801a6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6e2:	18d0      	adds	r0, r2, r3
 801a6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a6ea:	4413      	add	r3, r2
 801a6ec:	02da      	lsls	r2, r3, #11
 801a6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6f0:	18d1      	adds	r1, r2, r3
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a6f8:	f002 feea 	bl	801d4d0 <Flash_Bank_Copy_Bank>
            for (i = 0; i < (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a6fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a700:	3301      	adds	r3, #1
 801a702:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a706:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a70a:	69fb      	ldr	r3, [r7, #28]
 801a70c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a710:	0adb      	lsrs	r3, r3, #11
 801a712:	429a      	cmp	r2, r3
 801a714:	d3d6      	bcc.n	801a6c4 <FirmwareUpgrade+0xc8>
            }
            /* Erase page to the end of decode file */
            for (i = encode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < decode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a718:	b2da      	uxtb	r2, r3
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a720:	0adb      	lsrs	r3, r3, #11
 801a722:	b2db      	uxtb	r3, r3
 801a724:	4413      	add	r3, r2
 801a726:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a72a:	e00c      	b.n	801a746 <FirmwareUpgrade+0x14a>
                FLASH_If_Erase_Pages(flash_erase_bank, i);
 801a72c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801a730:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a734:	4611      	mov	r1, r2
 801a736:	4618      	mov	r0, r3
 801a738:	f002 f91c 	bl	801c974 <FLASH_If_Erase_Pages>
            for (i = encode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < decode_file.origin_page + (decode_file.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a73c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a740:	3301      	adds	r3, #1
 801a742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a746:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a74a:	6979      	ldr	r1, [r7, #20]
 801a74c:	69fb      	ldr	r3, [r7, #28]
 801a74e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a752:	0adb      	lsrs	r3, r3, #11
 801a754:	440b      	add	r3, r1
 801a756:	429a      	cmp	r2, r3
 801a758:	d3e8      	bcc.n	801a72c <FirmwareUpgrade+0x130>

            patchSize = decode_file.file_size;
 801a75a:	69fb      	ldr	r3, [r7, #28]
 801a75c:	663b      	str	r3, [r7, #96]	; 0x60
    When patching daemon firmware, source file (page 0) and patch file (decided by the size of source file) are located at BANK1, new file (page 0) at BANK2;
    When patching FUT, source file (page 0) and patch file (decided by the size of source file) are located at BANK2, new file (decided by the size of source file and patch file) at BANK2;
    */

    /* 0. The whole process must in bank 1 */
    assert(!READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE));
 801a75e:	4b5b      	ldr	r3, [pc, #364]	; (801a8cc <FirmwareUpgrade+0x2d0>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a766:	2b00      	cmp	r3, #0
 801a768:	d005      	beq.n	801a776 <FirmwareUpgrade+0x17a>
 801a76a:	4b59      	ldr	r3, [pc, #356]	; (801a8d0 <FirmwareUpgrade+0x2d4>)
 801a76c:	4a59      	ldr	r2, [pc, #356]	; (801a8d4 <FirmwareUpgrade+0x2d8>)
 801a76e:	21f7      	movs	r1, #247	; 0xf7
 801a770:	4859      	ldr	r0, [pc, #356]	; (801a8d8 <FirmwareUpgrade+0x2dc>)
 801a772:	f007 f905 	bl	8021980 <__assert_func>
    Flash_FILE newFile;
    uint8_t newPage;
    if (patch_update)
 801a776:	7bfb      	ldrb	r3, [r7, #15]
 801a778:	2b00      	cmp	r3, #0
 801a77a:	f000 808e 	beq.w	801a89a <FirmwareUpgrade+0x29e>
    {
        /* 1. config patch */
        /*The generated new file must located in bank 2, otherwise it may harm the daemon file */
        uint8_t newBank = 1;
 801a77e:	2301      	movs	r3, #1
 801a780:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        /* Original file and patch file are in the same bank, original files (daemon or FUT) are in the first page by default, patch file must after the original file */
        assert_reset((originalBank == patchBank) && (originalPage == 0) && (patchPage >= (originalSize + FLASH_PAGE - 1) / FLASH_PAGE));
 801a784:	7bba      	ldrb	r2, [r7, #14]
 801a786:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d109      	bne.n	801a7a2 <FirmwareUpgrade+0x1a6>
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d106      	bne.n	801a7a2 <FirmwareUpgrade+0x1a6>
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a79a:	0adb      	lsrs	r3, r3, #11
 801a79c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d226      	bcs.n	801a7f0 <FirmwareUpgrade+0x1f4>
 801a7a2:	7bba      	ldrb	r2, [r7, #14]
 801a7a4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a7a8:	429a      	cmp	r2, r3
 801a7aa:	d10b      	bne.n	801a7c4 <FirmwareUpgrade+0x1c8>
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d108      	bne.n	801a7c4 <FirmwareUpgrade+0x1c8>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a7b8:	0adb      	lsrs	r3, r3, #11
 801a7ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d301      	bcc.n	801a7c4 <FirmwareUpgrade+0x1c8>
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	e000      	b.n	801a7c6 <FirmwareUpgrade+0x1ca>
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f007 ff38 	bl	802263c <iprintf>
 801a7cc:	7bba      	ldrb	r2, [r7, #14]
 801a7ce:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a7d2:	429a      	cmp	r2, r3
 801a7d4:	d10c      	bne.n	801a7f0 <FirmwareUpgrade+0x1f4>
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d109      	bne.n	801a7f0 <FirmwareUpgrade+0x1f4>
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a7e2:	0adb      	lsrs	r3, r3, #11
 801a7e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d202      	bcs.n	801a7f0 <FirmwareUpgrade+0x1f4>
  __ASM volatile ("cpsid f" : : : "memory");
 801a7ea:	b671      	cpsid	f
 801a7ec:	f7ff f8fc 	bl	80199e8 <NVIC_SystemReset>
        /* If original file is in bank 1, we patch the daemon, then we generating new file in bank 2 page 0, otherwise in bank 2 page after patch */
        if (!originalBank)
 801a7f0:	7bbb      	ldrb	r3, [r7, #14]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d103      	bne.n	801a7fe <FirmwareUpgrade+0x202>
            newPage = 0;
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801a7fc:	e009      	b.n	801a812 <FirmwareUpgrade+0x216>
        else
            newPage = patchPage + (patchSize + FLASH_PAGE - 1) / FLASH_PAGE;
 801a7fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a800:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a804:	0adb      	lsrs	r3, r3, #11
 801a806:	b2da      	uxtb	r2, r3
 801a808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	4413      	add	r3, r2
 801a80e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        newFile = Filepatch(originalBank, originalPage, originalSize, patchBank, patchPage, patchSize, newBank, newPage);
 801a812:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 801a816:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a81a:	7bb9      	ldrb	r1, [r7, #14]
 801a81c:	9304      	str	r3, [sp, #16]
 801a81e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801a822:	9303      	str	r3, [sp, #12]
 801a824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a826:	9302      	str	r3, [sp, #8]
 801a828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a82a:	9301      	str	r3, [sp, #4]
 801a82c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 801a830:	9300      	str	r3, [sp, #0]
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	68ba      	ldr	r2, [r7, #8]
 801a836:	f7ff fe2d 	bl	801a494 <Filepatch>

        /* 2. check patch result */
        if (newFile.file_size)
 801a83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d006      	beq.n	801a84e <FirmwareUpgrade+0x252>
            PRINTF("Patch success!:%lu, %lu, %lu\n", newFile.file_size, newFile.origin_page, newFile.now_page);
 801a840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a846:	4825      	ldr	r0, [pc, #148]	; (801a8dc <FirmwareUpgrade+0x2e0>)
 801a848:	f007 fef8 	bl	802263c <iprintf>
 801a84c:	e02e      	b.n	801a8ac <FirmwareUpgrade+0x2b0>
        else
        {
            PRINTF("Patch failed!\n");
 801a84e:	4824      	ldr	r0, [pc, #144]	; (801a8e0 <FirmwareUpgrade+0x2e4>)
 801a850:	f007 ff7c 	bl	802274c <puts>
            /* If new file is daemon, erase the whole bank 2, else, erase patch file and new file in bank 2 */
            if (!originalBank)
 801a854:	7bbb      	ldrb	r3, [r7, #14]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d103      	bne.n	801a862 <FirmwareUpgrade+0x266>
                FLASH_If_Erase(0);
 801a85a:	2000      	movs	r0, #0
 801a85c:	f002 f818 	bl	801c890 <FLASH_If_Erase>
 801a860:	e019      	b.n	801a896 <FirmwareUpgrade+0x29a>
            else
            {
                for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a864:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a868:	e00a      	b.n	801a880 <FirmwareUpgrade+0x284>
                {
                    FLASH_If_Erase_Pages(0, i);
 801a86a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a86e:	4619      	mov	r1, r3
 801a870:	2000      	movs	r0, #0
 801a872:	f002 f87f 	bl	801c974 <FLASH_If_Erase_Pages>
                for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a876:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a87a:	3301      	adds	r3, #1
 801a87c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a880:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a884:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801a888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a88a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a88e:	0adb      	lsrs	r3, r3, #11
 801a890:	440b      	add	r3, r1
 801a892:	429a      	cmp	r2, r3
 801a894:	d3e9      	bcc.n	801a86a <FirmwareUpgrade+0x26e>
                }
            }
            return false;
 801a896:	2300      	movs	r3, #0
 801a898:	e0cf      	b.n	801aa3a <FirmwareUpgrade+0x43e>
        }
    }
    else
    {
        newFile.bank = 1;
 801a89a:	2301      	movs	r3, #1
 801a89c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        newFile.file_size = patchSize;
 801a8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a8a2:	643b      	str	r3, [r7, #64]	; 0x40
        newFile.now_page = 0;
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        newFile.origin_page = 0;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* 3. check file integrity */
    PRINTF("Md5 check: %lu\n", newFile.file_size);
 801a8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	480c      	ldr	r0, [pc, #48]	; (801a8e4 <FirmwareUpgrade+0x2e8>)
 801a8b2:	f007 fec3 	bl	802263c <iprintf>
    for (i = 0; i < 16; i++)
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a8bc:	e022      	b.n	801a904 <FirmwareUpgrade+0x308>
 801a8be:	bf00      	nop
 801a8c0:	08025fd0 	.word	0x08025fd0
 801a8c4:	08026008 	.word	0x08026008
 801a8c8:	08080000 	.word	0x08080000
 801a8cc:	40010000 	.word	0x40010000
 801a8d0:	0802601c 	.word	0x0802601c
 801a8d4:	08027038 	.word	0x08027038
 801a8d8:	08026050 	.word	0x08026050
 801a8dc:	08026074 	.word	0x08026074
 801a8e0:	08026094 	.word	0x08026094
 801a8e4:	080260a4 	.word	0x080260a4
    {
        PRINTF("%02X", md5_code[i]);
 801a8e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a8ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a8ee:	4413      	add	r3, r2
 801a8f0:	781b      	ldrb	r3, [r3, #0]
 801a8f2:	4619      	mov	r1, r3
 801a8f4:	4853      	ldr	r0, [pc, #332]	; (801aa44 <FirmwareUpgrade+0x448>)
 801a8f6:	f007 fea1 	bl	802263c <iprintf>
    for (i = 0; i < 16; i++)
 801a8fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a8fe:	3301      	adds	r3, #1
 801a900:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a908:	2b0f      	cmp	r3, #15
 801a90a:	d9ed      	bls.n	801a8e8 <FirmwareUpgrade+0x2ec>
    }
    PRINTF("\n");
 801a90c:	200a      	movs	r0, #10
 801a90e:	f007 fead 	bl	802266c <putchar>

    if (!MD5_File(newFile, md5_code))
 801a912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a914:	9300      	str	r3, [sp, #0]
 801a916:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a91a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a91c:	f001 ff52 	bl	801c7c4 <MD5_File>
 801a920:	4603      	mov	r3, r0
 801a922:	f083 0301 	eor.w	r3, r3, #1
 801a926:	b2db      	uxtb	r3, r3
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d028      	beq.n	801a97e <FirmwareUpgrade+0x382>
    {
        PRINTF("md5 error\n");
 801a92c:	4846      	ldr	r0, [pc, #280]	; (801aa48 <FirmwareUpgrade+0x44c>)
 801a92e:	f007 ff0d 	bl	802274c <puts>
        patching:
        If new file is daemon, erase the whole bank 2, else, erase patch file and new file in bank 2
        no patching:
        erase the whole bank 2
        */
        if ((!originalBank)||(!patch_update))
 801a932:	7bbb      	ldrb	r3, [r7, #14]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d002      	beq.n	801a93e <FirmwareUpgrade+0x342>
 801a938:	7bfb      	ldrb	r3, [r7, #15]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d103      	bne.n	801a946 <FirmwareUpgrade+0x34a>
            FLASH_If_Erase(0);
 801a93e:	2000      	movs	r0, #0
 801a940:	f001 ffa6 	bl	801c890 <FLASH_If_Erase>
 801a944:	e019      	b.n	801a97a <FirmwareUpgrade+0x37e>
        else
        {
            for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a94c:	e00a      	b.n	801a964 <FirmwareUpgrade+0x368>
            {
                FLASH_If_Erase_Pages(0, i);
 801a94e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a952:	4619      	mov	r1, r3
 801a954:	2000      	movs	r0, #0
 801a956:	f002 f80d 	bl	801c974 <FLASH_If_Erase_Pages>
            for (i = patchPage; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a95a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a95e:	3301      	adds	r3, #1
 801a960:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a964:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a968:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801a96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a96e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a972:	0adb      	lsrs	r3, r3, #11
 801a974:	440b      	add	r3, r1
 801a976:	429a      	cmp	r2, r3
 801a978:	d3e9      	bcc.n	801a94e <FirmwareUpgrade+0x352>
            }
        }
        return false;
 801a97a:	2300      	movs	r3, #0
 801a97c:	e05d      	b.n	801aa3a <FirmwareUpgrade+0x43e>
    }
    else
    {
        /* if patching, move the new file */
        if ((originalBank)&&(patch_update))
 801a97e:	7bbb      	ldrb	r3, [r7, #14]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d04c      	beq.n	801aa1e <FirmwareUpgrade+0x422>
 801a984:	7bfb      	ldrb	r3, [r7, #15]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d049      	beq.n	801aa1e <FirmwareUpgrade+0x422>
        {
            /* Move the FUT new firmware to page 0 */
            for (i = 0; i < (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a98a:	2300      	movs	r3, #0
 801a98c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a990:	e020      	b.n	801a9d4 <FirmwareUpgrade+0x3d8>
            {
                FLASH_If_Erase_Pages(0, i);
 801a992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a996:	4619      	mov	r1, r3
 801a998:	2000      	movs	r0, #0
 801a99a:	f001 ffeb 	bl	801c974 <FLASH_If_Erase_Pages>
                Flash_Bank_Copy_Bank(FLASH_START_BANK2 + (newPage + i) * FLASH_PAGE, FLASH_START_BANK2 + i * FLASH_PAGE, FLASH_PAGE, 0);
 801a99e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 801a9a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a9a6:	4413      	add	r3, r2
 801a9a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a9ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a9b0:	02d8      	lsls	r0, r3, #11
 801a9b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a9b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801a9ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a9be:	02d9      	lsls	r1, r3, #11
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a9c6:	f002 fd83 	bl	801d4d0 <Flash_Bank_Copy_Bank>
            for (i = 0; i < (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a9ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a9ce:	3301      	adds	r3, #1
 801a9d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a9d4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801a9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9da:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a9de:	0adb      	lsrs	r3, r3, #11
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d3d6      	bcc.n	801a992 <FirmwareUpgrade+0x396>
            }
            /* Erase page to the end of new FUT */
            for (i = (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9e6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801a9ea:	0adb      	lsrs	r3, r3, #11
 801a9ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801a9f0:	e00a      	b.n	801aa08 <FirmwareUpgrade+0x40c>
                FLASH_If_Erase_Pages(0, i);
 801a9f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801a9f6:	4619      	mov	r1, r3
 801a9f8:	2000      	movs	r0, #0
 801a9fa:	f001 ffbb 	bl	801c974 <FLASH_If_Erase_Pages>
            for (i = (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i < newPage + (newFile.file_size + FLASH_PAGE - 1) / FLASH_PAGE; i++)
 801a9fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801aa02:	3301      	adds	r3, #1
 801aa04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801aa08:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 801aa0c:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 801aa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa12:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801aa16:	0adb      	lsrs	r3, r3, #11
 801aa18:	440b      	add	r3, r1
 801aa1a:	429a      	cmp	r2, r3
 801aa1c:	d3e9      	bcc.n	801a9f2 <FirmwareUpgrade+0x3f6>
        }
    }

    /* 4. Write the size of firmware to bank 2 */
    uint32_t firmware_size_buffer[1];
    firmware_size_buffer[0] = newFile.file_size;
 801aa1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa20:	633b      	str	r3, [r7, #48]	; 0x30
    FLASH_If_Erase_Pages(0, FIRMWARE_PAGE);
 801aa22:	21fd      	movs	r1, #253	; 0xfd
 801aa24:	2000      	movs	r0, #0
 801aa26:	f001 ffa5 	bl	801c974 <FLASH_If_Erase_Pages>
    FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size_buffer, 2);
 801aa2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa2e:	2202      	movs	r2, #2
 801aa30:	4619      	mov	r1, r3
 801aa32:	4806      	ldr	r0, [pc, #24]	; (801aa4c <FirmwareUpgrade+0x450>)
 801aa34:	f002 f822 	bl	801ca7c <FLASH_If_Write>
    return true;
 801aa38:	2301      	movs	r3, #1
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3750      	adds	r7, #80	; 0x50
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	080260b4 	.word	0x080260b4
 801aa48:	080260bc 	.word	0x080260bc
 801aa4c:	080fe800 	.word	0x080fe800

0801aa50 <jp_fread>:
};

/**
 * Read a buffer off the stream
 */
static size_t jp_fread(janpatch_ctx *ctx, void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 801aa50:	b590      	push	{r4, r7, lr}
 801aa52:	b087      	sub	sp, #28
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	60f8      	str	r0, [r7, #12]
 801aa58:	60b9      	str	r1, [r7, #8]
 801aa5a:	607a      	str	r2, [r7, #4]
 801aa5c:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa64:	6910      	ldr	r0, [r2, #16]
 801aa66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa68:	6951      	ldr	r1, [r2, #20]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	4798      	blx	r3

    size_t bytes_read = ctx->fread(ptr, size, count, buffer->stream);
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa74:	691b      	ldr	r3, [r3, #16]
 801aa76:	683a      	ldr	r2, [r7, #0]
 801aa78:	6879      	ldr	r1, [r7, #4]
 801aa7a:	68b8      	ldr	r0, [r7, #8]
 801aa7c:	47a0      	blx	r4
 801aa7e:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_read;
 801aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa82:	695b      	ldr	r3, [r3, #20]
 801aa84:	461a      	mov	r2, r3
 801aa86:	697b      	ldr	r3, [r7, #20]
 801aa88:	4413      	add	r3, r2
 801aa8a:	461a      	mov	r2, r3
 801aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa8e:	615a      	str	r2, [r3, #20]

    return bytes_read;
 801aa90:	697b      	ldr	r3, [r7, #20]
}
 801aa92:	4618      	mov	r0, r3
 801aa94:	371c      	adds	r7, #28
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd90      	pop	{r4, r7, pc}

0801aa9a <jp_fwrite>:

/**
 * Write a buffer to the stream
 */
static size_t jp_fwrite(janpatch_ctx *ctx, const void *ptr, size_t size, size_t count, janpatch_buffer *buffer) {
 801aa9a:	b590      	push	{r4, r7, lr}
 801aa9c:	b087      	sub	sp, #28
 801aa9e:	af00      	add	r7, sp, #0
 801aaa0:	60f8      	str	r0, [r7, #12]
 801aaa2:	60b9      	str	r1, [r7, #8]
 801aaa4:	607a      	str	r2, [r7, #4]
 801aaa6:	603b      	str	r3, [r7, #0]
    ctx->fseek(buffer->stream, buffer->position, SEEK_SET);
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aaac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aaae:	6910      	ldr	r0, [r2, #16]
 801aab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aab2:	6951      	ldr	r1, [r2, #20]
 801aab4:	2200      	movs	r2, #0
 801aab6:	4798      	blx	r3

    size_t bytes_written = ctx->fwrite(ptr, size, count, buffer->stream);
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aabe:	691b      	ldr	r3, [r3, #16]
 801aac0:	683a      	ldr	r2, [r7, #0]
 801aac2:	6879      	ldr	r1, [r7, #4]
 801aac4:	68b8      	ldr	r0, [r7, #8]
 801aac6:	47a0      	blx	r4
 801aac8:	6178      	str	r0, [r7, #20]

    buffer->position += bytes_written;
 801aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aacc:	695b      	ldr	r3, [r3, #20]
 801aace:	461a      	mov	r2, r3
 801aad0:	697b      	ldr	r3, [r7, #20]
 801aad2:	4413      	add	r3, r2
 801aad4:	461a      	mov	r2, r3
 801aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aad8:	615a      	str	r2, [r3, #20]

    return bytes_written;
 801aada:	697b      	ldr	r3, [r7, #20]
}
 801aadc:	4618      	mov	r0, r3
 801aade:	371c      	adds	r7, #28
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd90      	pop	{r4, r7, pc}

0801aae4 <jp_fseek>:

/**
 * Set position of the stream
 */
static int jp_fseek(janpatch_buffer *buffer, long int offset, int origin) {
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b084      	sub	sp, #16
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	60f8      	str	r0, [r7, #12]
 801aaec:	60b9      	str	r1, [r7, #8]
 801aaee:	607a      	str	r2, [r7, #4]
    if (origin == SEEK_SET) {
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d103      	bne.n	801aafe <jp_fseek+0x1a>
        buffer->position = offset;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	68ba      	ldr	r2, [r7, #8]
 801aafa:	615a      	str	r2, [r3, #20]
 801aafc:	e010      	b.n	801ab20 <jp_fseek+0x3c>
    }
    else if (origin == SEEK_CUR) {
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d106      	bne.n	801ab12 <jp_fseek+0x2e>
        buffer->position += offset;
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	695a      	ldr	r2, [r3, #20]
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	441a      	add	r2, r3
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	615a      	str	r2, [r3, #20]
 801ab10:	e006      	b.n	801ab20 <jp_fseek+0x3c>
    }
    else {
        JANPATCH_ERROR("Origin %d not supported in jp_fseek (only SEEK_CUR,SEEK_SET)\n", origin);
 801ab12:	6879      	ldr	r1, [r7, #4]
 801ab14:	4805      	ldr	r0, [pc, #20]	; (801ab2c <jp_fseek+0x48>)
 801ab16:	f007 fd91 	bl	802263c <iprintf>
        return -1;
 801ab1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab1e:	e000      	b.n	801ab22 <jp_fseek+0x3e>
    }
    return 0;
 801ab20:	2300      	movs	r3, #0
}
 801ab22:	4618      	mov	r0, r3
 801ab24:	3710      	adds	r7, #16
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
 801ab2a:	bf00      	nop
 801ab2c:	080260c8 	.word	0x080260c8

0801ab30 <jp_getc>:


/**
 * Get a character from the stream
 */
static int jp_getc(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b088      	sub	sp, #32
 801ab34:	af02      	add	r7, sp, #8
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 801ab3a:	683b      	ldr	r3, [r7, #0]
 801ab3c:	695b      	ldr	r3, [r3, #20]
 801ab3e:	617b      	str	r3, [r7, #20]
    if (position < 0) return -1;
 801ab40:	697b      	ldr	r3, [r7, #20]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	da02      	bge.n	801ab4c <jp_getc+0x1c>
 801ab46:	f04f 33ff 	mov.w	r3, #4294967295
 801ab4a:	e044      	b.n	801abd6 <jp_getc+0xa6>

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 801ab4c:	697a      	ldr	r2, [r7, #20]
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	685b      	ldr	r3, [r3, #4]
 801ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab56:	613b      	str	r3, [r7, #16]

    if (page != buffer->current_page) {
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	689b      	ldr	r3, [r3, #8]
 801ab5c:	693a      	ldr	r2, [r7, #16]
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d01a      	beq.n	801ab98 <jp_getc+0x68>
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	685b      	ldr	r3, [r3, #4]
 801ab66:	693a      	ldr	r2, [r7, #16]
 801ab68:	fb02 f303 	mul.w	r3, r2, r3
 801ab6c:	2200      	movs	r2, #0
 801ab6e:	4619      	mov	r1, r3
 801ab70:	6838      	ldr	r0, [r7, #0]
 801ab72:	f7ff ffb7 	bl	801aae4 <jp_fseek>
        buffer->current_page_size = jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	6819      	ldr	r1, [r3, #0]
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	685a      	ldr	r2, [r3, #4]
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	9300      	str	r3, [sp, #0]
 801ab82:	4613      	mov	r3, r2
 801ab84:	2201      	movs	r2, #1
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f7ff ff62 	bl	801aa50 <jp_fread>
 801ab8c:	4602      	mov	r2, r0
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	693a      	ldr	r2, [r7, #16]
 801ab96:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	6852      	ldr	r2, [r2, #4]
 801ab9e:	fbb3 f1f2 	udiv	r1, r3, r2
 801aba2:	fb02 f201 	mul.w	r2, r2, r1
 801aba6:	1a9b      	subs	r3, r3, r2
 801aba8:	60fb      	str	r3, [r7, #12]

    if ((size_t)position_in_page >= buffer->current_page_size) {
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	68da      	ldr	r2, [r3, #12]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	429a      	cmp	r2, r3
 801abb2:	d802      	bhi.n	801abba <jp_getc+0x8a>
        return EOF;
 801abb4:	f04f 33ff 	mov.w	r3, #4294967295
 801abb8:	e00d      	b.n	801abd6 <jp_getc+0xa6>
    }

    unsigned char b = buffer->buffer[position_in_page];
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	681a      	ldr	r2, [r3, #0]
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	4413      	add	r3, r2
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	72fb      	strb	r3, [r7, #11]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	3301      	adds	r3, #1
 801abca:	2200      	movs	r2, #0
 801abcc:	4619      	mov	r1, r3
 801abce:	6838      	ldr	r0, [r7, #0]
 801abd0:	f7ff ff88 	bl	801aae4 <jp_fseek>
    return b;
 801abd4:	7afb      	ldrb	r3, [r7, #11]
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	3718      	adds	r7, #24
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd80      	pop	{r7, pc}

0801abde <jp_putc>:

/**
 * Write a character to a stream
 */
static int jp_putc(int c, janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801abde:	b580      	push	{r7, lr}
 801abe0:	b08a      	sub	sp, #40	; 0x28
 801abe2:	af02      	add	r7, sp, #8
 801abe4:	60f8      	str	r0, [r7, #12]
 801abe6:	60b9      	str	r1, [r7, #8]
 801abe8:	607a      	str	r2, [r7, #4]
    long position = buffer->position;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	695b      	ldr	r3, [r3, #20]
 801abee:	61fb      	str	r3, [r7, #28]
    if (position < 0) {
 801abf0:	69fb      	ldr	r3, [r7, #28]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	da02      	bge.n	801abfc <jp_putc+0x1e>
        return -1;
 801abf6:	f04f 33ff 	mov.w	r3, #4294967295
 801abfa:	e06a      	b.n	801acd2 <jp_putc+0xf4>
    }

    // calculate the current page...
    uint32_t page = ((unsigned long)position) / buffer->size;
 801abfc:	69fa      	ldr	r2, [r7, #28]
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	685b      	ldr	r3, [r3, #4]
 801ac02:	fbb2 f3f3 	udiv	r3, r2, r3
 801ac06:	61bb      	str	r3, [r7, #24]

    if (page != buffer->current_page) {
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	689b      	ldr	r3, [r3, #8]
 801ac0c:	69ba      	ldr	r2, [r7, #24]
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	d047      	beq.n	801aca2 <jp_putc+0xc4>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	689b      	ldr	r3, [r3, #8]
 801ac16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac1a:	d026      	beq.n	801ac6a <jp_putc+0x8c>

            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	689b      	ldr	r3, [r3, #8]
 801ac20:	687a      	ldr	r2, [r7, #4]
 801ac22:	6852      	ldr	r2, [r2, #4]
 801ac24:	fb02 f303 	mul.w	r3, r2, r3
 801ac28:	2200      	movs	r2, #0
 801ac2a:	4619      	mov	r1, r3
 801ac2c:	6878      	ldr	r0, [r7, #4]
 801ac2e:	f7ff ff59 	bl	801aae4 <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	6819      	ldr	r1, [r3, #0]
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	68da      	ldr	r2, [r3, #12]
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	9300      	str	r3, [sp, #0]
 801ac3e:	4613      	mov	r3, r2
 801ac40:	2201      	movs	r2, #1
 801ac42:	68b8      	ldr	r0, [r7, #8]
 801ac44:	f7ff ff29 	bl	801aa9a <jp_fwrite>

            if (ctx->progress) {
 801ac48:	68bb      	ldr	r3, [r7, #8]
 801ac4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d00c      	beq.n	801ac6a <jp_putc+0x8c>
                ctx->progress(position * 100 / ctx->max_file_size);
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac54:	69fa      	ldr	r2, [r7, #28]
 801ac56:	2164      	movs	r1, #100	; 0x64
 801ac58:	fb01 f102 	mul.w	r1, r1, r2
 801ac5c:	68ba      	ldr	r2, [r7, #8]
 801ac5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801ac60:	fb91 f2f2 	sdiv	r2, r1, r2
 801ac64:	b2d2      	uxtb	r2, r2
 801ac66:	4610      	mov	r0, r2
 801ac68:	4798      	blx	r3
            }
        }

        // and read the next page...
        jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	685b      	ldr	r3, [r3, #4]
 801ac6e:	69ba      	ldr	r2, [r7, #24]
 801ac70:	fb02 f303 	mul.w	r3, r2, r3
 801ac74:	2200      	movs	r2, #0
 801ac76:	4619      	mov	r1, r3
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7ff ff33 	bl	801aae4 <jp_fseek>
        jp_fread(ctx, buffer->buffer, 1, buffer->size, buffer);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	6819      	ldr	r1, [r3, #0]
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	685a      	ldr	r2, [r3, #4]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	9300      	str	r3, [sp, #0]
 801ac8a:	4613      	mov	r3, r2
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	68b8      	ldr	r0, [r7, #8]
 801ac90:	f7ff fede 	bl	801aa50 <jp_fread>
        buffer->current_page_size = buffer->size;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	685a      	ldr	r2, [r3, #4]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	60da      	str	r2, [r3, #12]
        buffer->current_page = page;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	69ba      	ldr	r2, [r7, #24]
 801aca0:	609a      	str	r2, [r3, #8]
    }

    int position_in_page = position % buffer->size;
 801aca2:	69fb      	ldr	r3, [r7, #28]
 801aca4:	687a      	ldr	r2, [r7, #4]
 801aca6:	6852      	ldr	r2, [r2, #4]
 801aca8:	fbb3 f1f2 	udiv	r1, r3, r2
 801acac:	fb02 f201 	mul.w	r2, r2, r1
 801acb0:	1a9b      	subs	r3, r3, r2
 801acb2:	617b      	str	r3, [r7, #20]

    buffer->buffer[position_in_page] = (unsigned char)c;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681a      	ldr	r2, [r3, #0]
 801acb8:	697b      	ldr	r3, [r7, #20]
 801acba:	4413      	add	r3, r2
 801acbc:	68fa      	ldr	r2, [r7, #12]
 801acbe:	b2d2      	uxtb	r2, r2
 801acc0:	701a      	strb	r2, [r3, #0]
    jp_fseek(buffer, position + 1, SEEK_SET);
 801acc2:	69fb      	ldr	r3, [r7, #28]
 801acc4:	3301      	adds	r3, #1
 801acc6:	2200      	movs	r2, #0
 801acc8:	4619      	mov	r1, r3
 801acca:	6878      	ldr	r0, [r7, #4]
 801accc:	f7ff ff0a 	bl	801aae4 <jp_fseek>

    return 0;
 801acd0:	2300      	movs	r3, #0
}
 801acd2:	4618      	mov	r0, r3
 801acd4:	3720      	adds	r7, #32
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}

0801acda <jp_final_flush>:

static uint32_t jp_final_flush(janpatch_ctx* ctx, janpatch_buffer* buffer) {
 801acda:	b580      	push	{r7, lr}
 801acdc:	b088      	sub	sp, #32
 801acde:	af02      	add	r7, sp, #8
 801ace0:	6078      	str	r0, [r7, #4]
 801ace2:	6039      	str	r1, [r7, #0]
    long position = buffer->position;
 801ace4:	683b      	ldr	r3, [r7, #0]
 801ace6:	695b      	ldr	r3, [r3, #20]
 801ace8:	617b      	str	r3, [r7, #20]
    int position_in_page = position % buffer->size;
 801acea:	697b      	ldr	r3, [r7, #20]
 801acec:	683a      	ldr	r2, [r7, #0]
 801acee:	6852      	ldr	r2, [r2, #4]
 801acf0:	fbb3 f1f2 	udiv	r1, r3, r2
 801acf4:	fb02 f201 	mul.w	r2, r2, r1
 801acf8:	1a9b      	subs	r3, r3, r2
 801acfa:	613b      	str	r3, [r7, #16]

    uint32_t page = ((unsigned long)position) / buffer->size;
 801acfc:	697a      	ldr	r2, [r7, #20]
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad06:	60fb      	str	r3, [r7, #12]

    // if the page has changed we also need to flush the previous page
    // this can happen when the last operation (e.g. jp_putc) has just crossed page boundary
    if (page != buffer->current_page) {
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	689b      	ldr	r3, [r3, #8]
 801ad0c:	68fa      	ldr	r2, [r7, #12]
 801ad0e:	429a      	cmp	r2, r3
 801ad10:	d01a      	beq.n	801ad48 <jp_final_flush+0x6e>
        // flush the page buffer...
        if (buffer->current_page != 0xFFFFFFFF) {
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	689b      	ldr	r3, [r3, #8]
 801ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad1a:	d015      	beq.n	801ad48 <jp_final_flush+0x6e>
            jp_fseek(buffer, buffer->current_page * buffer->size, SEEK_SET);
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	689b      	ldr	r3, [r3, #8]
 801ad20:	683a      	ldr	r2, [r7, #0]
 801ad22:	6852      	ldr	r2, [r2, #4]
 801ad24:	fb02 f303 	mul.w	r3, r2, r3
 801ad28:	2200      	movs	r2, #0
 801ad2a:	4619      	mov	r1, r3
 801ad2c:	6838      	ldr	r0, [r7, #0]
 801ad2e:	f7ff fed9 	bl	801aae4 <jp_fseek>
            jp_fwrite(ctx, buffer->buffer, 1, buffer->current_page_size, buffer);
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	6819      	ldr	r1, [r3, #0]
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	68da      	ldr	r2, [r3, #12]
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	9300      	str	r3, [sp, #0]
 801ad3e:	4613      	mov	r3, r2
 801ad40:	2201      	movs	r2, #1
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f7ff fea9 	bl	801aa9a <jp_fwrite>
        }
    }

    // flush the new page buffer
    jp_fseek(buffer, page * buffer->size, SEEK_SET);
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	685b      	ldr	r3, [r3, #4]
 801ad4c:	68fa      	ldr	r2, [r7, #12]
 801ad4e:	fb02 f303 	mul.w	r3, r2, r3
 801ad52:	2200      	movs	r2, #0
 801ad54:	4619      	mov	r1, r3
 801ad56:	6838      	ldr	r0, [r7, #0]
 801ad58:	f7ff fec4 	bl	801aae4 <jp_fseek>
    uint32_t last_size = jp_fwrite(ctx, buffer->buffer, 1, position_in_page, buffer);
 801ad5c:	683b      	ldr	r3, [r7, #0]
 801ad5e:	6819      	ldr	r1, [r3, #0]
 801ad60:	693a      	ldr	r2, [r7, #16]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	9300      	str	r3, [sp, #0]
 801ad66:	4613      	mov	r3, r2
 801ad68:	2201      	movs	r2, #1
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f7ff fe95 	bl	801aa9a <jp_fwrite>
 801ad70:	60b8      	str	r0, [r7, #8]

    if (ctx->progress) {
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d003      	beq.n	801ad82 <jp_final_flush+0xa8>
        ctx->progress(100);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad7e:	2064      	movs	r0, #100	; 0x64
 801ad80:	4798      	blx	r3
    }
    return last_size;
 801ad82:	68bb      	ldr	r3, [r7, #8]
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	3718      	adds	r7, #24
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	bd80      	pop	{r7, pc}

0801ad8c <process_fread>:
		}
	}
	return FALSE;
}

static int process_fread(janpatch_ctx *ctx, janpatch_buffer *source, size_t count, uint8_t *buffer) {
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b086      	sub	sp, #24
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	60f8      	str	r0, [r7, #12]
 801ad94:	60b9      	str	r1, [r7, #8]
 801ad96:	607a      	str	r2, [r7, #4]
 801ad98:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	617b      	str	r3, [r7, #20]
    while (1) {
        int m = jp_getc(ctx, source);
 801ad9e:	68b9      	ldr	r1, [r7, #8]
 801ada0:	68f8      	ldr	r0, [r7, #12]
 801ada2:	f7ff fec5 	bl	801ab30 <jp_getc>
 801ada6:	6138      	str	r0, [r7, #16]
			// printf("m:%lu, %d, %d, %d\n", m, (unsigned char)m, cnt, count);
        if (m == -1) {
 801ada8:	693b      	ldr	r3, [r7, #16]
 801adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adae:	d00d      	beq.n	801adcc <process_fread+0x40>
            // jp_fseek(source, -1, SEEK_CUR);
            break;
        }
        else
        {
            buffer[cnt] = (unsigned char)m;
 801adb0:	683a      	ldr	r2, [r7, #0]
 801adb2:	697b      	ldr	r3, [r7, #20]
 801adb4:	4413      	add	r3, r2
 801adb6:	693a      	ldr	r2, [r7, #16]
 801adb8:	b2d2      	uxtb	r2, r2
 801adba:	701a      	strb	r2, [r3, #0]
        }
        cnt++;
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	3301      	adds	r3, #1
 801adc0:	617b      	str	r3, [r7, #20]
        if (cnt >= count)
 801adc2:	697a      	ldr	r2, [r7, #20]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d202      	bcs.n	801add0 <process_fread+0x44>
    while (1) {
 801adca:	e7e8      	b.n	801ad9e <process_fread+0x12>
            break;
 801adcc:	bf00      	nop
 801adce:	e000      	b.n	801add2 <process_fread+0x46>
            break;
 801add0:	bf00      	nop
    }
    return cnt;
 801add2:	697b      	ldr	r3, [r7, #20]
}
 801add4:	4618      	mov	r0, r3
 801add6:	3718      	adds	r7, #24
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}

0801addc <process_fwrite>:

static int process_fwrite(janpatch_ctx *ctx, janpatch_buffer *target, size_t count, uint8_t *buffer) {
 801addc:	b580      	push	{r7, lr}
 801adde:	b086      	sub	sp, #24
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	60f8      	str	r0, [r7, #12]
 801ade4:	60b9      	str	r1, [r7, #8]
 801ade6:	607a      	str	r2, [r7, #4]
 801ade8:	603b      	str	r3, [r7, #0]
    // it can be that ESC character is actually in the data, but then it's prefixed with another ESC
    // so... we're looking for a lone ESC character
    size_t cnt = 0;
 801adea:	2300      	movs	r3, #0
 801adec:	617b      	str	r3, [r7, #20]
    while (1) {
        uint8_t m = buffer[cnt];
 801adee:	683a      	ldr	r2, [r7, #0]
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	4413      	add	r3, r2
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	74fb      	strb	r3, [r7, #19]
        jp_putc(m, ctx, target);
 801adf8:	7cfb      	ldrb	r3, [r7, #19]
 801adfa:	68ba      	ldr	r2, [r7, #8]
 801adfc:	68f9      	ldr	r1, [r7, #12]
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7ff feed 	bl	801abde <jp_putc>
        cnt++;
 801ae04:	697b      	ldr	r3, [r7, #20]
 801ae06:	3301      	adds	r3, #1
 801ae08:	617b      	str	r3, [r7, #20]
        if (cnt >= count)
 801ae0a:	697a      	ldr	r2, [r7, #20]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	429a      	cmp	r2, r3
 801ae10:	d200      	bcs.n	801ae14 <process_fwrite+0x38>
    while (1) {
 801ae12:	e7ec      	b.n	801adee <process_fwrite+0x12>
            break;
 801ae14:	bf00      	nop
    }
    return cnt;
 801ae16:	697b      	ldr	r3, [r7, #20]
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	3718      	adds	r7, #24
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}

0801ae20 <LZSS_decode>:

	return (ctx.target_buffer.stream->file_size);
}

uint32_t LZSS_decode(Flash_FILE *pbReadFileName, Flash_FILE *pbWriteFileName)
{
 801ae20:	b590      	push	{r4, r7, lr}
 801ae22:	b0a3      	sub	sp, #140	; 0x8c
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
 801ae28:	6039      	str	r1, [r7, #0]
    janpatch_ctx ctx = {
 801ae2a:	f107 030c 	add.w	r3, r7, #12
 801ae2e:	225c      	movs	r2, #92	; 0x5c
 801ae30:	2100      	movs	r1, #0
 801ae32:	4618      	mov	r0, r3
 801ae34:	f006 fdf5 	bl	8021a22 <memset>
        // fread/fwrite buffers for every file, minimum size is 1 byte
        // when you run on an embedded system with block size flash, set it to the size of a block for best performance
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801ae38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801ae3c:	f006 fdd6 	bl	80219ec <malloc>
 801ae40:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801ae42:	60fb      	str	r3, [r7, #12]
 801ae44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ae48:	613b      	str	r3, [r7, #16]
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801ae4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801ae4e:	f006 fdcd 	bl	80219ec <malloc>
 801ae52:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801ae54:	627b      	str	r3, [r7, #36]	; 0x24
 801ae56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
        {(unsigned char *)malloc(FLASH_PAGE), FLASH_PAGE},
 801ae5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801ae60:	f006 fdc4 	bl	80219ec <malloc>
 801ae64:	4603      	mov	r3, r0
    janpatch_ctx ctx = {
 801ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ae68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ae6c:	643b      	str	r3, [r7, #64]	; 0x40
 801ae6e:	4bbe      	ldr	r3, [pc, #760]	; (801b168 <LZSS_decode+0x348>)
 801ae70:	657b      	str	r3, [r7, #84]	; 0x54
 801ae72:	4bbe      	ldr	r3, [pc, #760]	; (801b16c <LZSS_decode+0x34c>)
 801ae74:	65bb      	str	r3, [r7, #88]	; 0x58
 801ae76:	4bbe      	ldr	r3, [pc, #760]	; (801b170 <LZSS_decode+0x350>)
 801ae78:	65fb      	str	r3, [r7, #92]	; 0x5c
        &the_fread,
        &the_fwrite,
        &the_fseek,
		NULL};

    ctx.source_buffer.current_page = 0xffffffff;
 801ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae7e:	617b      	str	r3, [r7, #20]
    ctx.patch_buffer.current_page = 0xffffffff;
 801ae80:	f04f 33ff 	mov.w	r3, #4294967295
 801ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.target_buffer.current_page = 0xffffffff;
 801ae86:	f04f 33ff 	mov.w	r3, #4294967295
 801ae8a:	647b      	str	r3, [r7, #68]	; 0x44

    ctx.source_buffer.position = 0;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	623b      	str	r3, [r7, #32]
    ctx.patch_buffer.position = 0;
 801ae90:	2300      	movs	r3, #0
 801ae92:	63bb      	str	r3, [r7, #56]	; 0x38
    ctx.target_buffer.position = 0;
 801ae94:	2300      	movs	r3, #0
 801ae96:	653b      	str	r3, [r7, #80]	; 0x50

    ctx.source_buffer.stream = pbReadFileName;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	61fb      	str	r3, [r7, #28]
    // ctx.patch_buffer.stream = patch;
    ctx.target_buffer.stream = pbWriteFileName;
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	64fb      	str	r3, [r7, #76]	; 0x4c

	bThreshold = 2;
 801aea0:	4bb4      	ldr	r3, [pc, #720]	; (801b174 <LZSS_decode+0x354>)
 801aea2:	2202      	movs	r2, #2
 801aea4:	701a      	strb	r2, [r3, #0]
	bPreBufSizeBits = 7;
 801aea6:	4bb4      	ldr	r3, [pc, #720]	; (801b178 <LZSS_decode+0x358>)
 801aea8:	2207      	movs	r2, #7
 801aeaa:	701a      	strb	r2, [r3, #0]
	bWindowBufSizeBits = 16 - bPreBufSizeBits;
 801aeac:	4bb2      	ldr	r3, [pc, #712]	; (801b178 <LZSS_decode+0x358>)
 801aeae:	781b      	ldrb	r3, [r3, #0]
 801aeb0:	f1c3 0310 	rsb	r3, r3, #16
 801aeb4:	b2da      	uxtb	r2, r3
 801aeb6:	4bb1      	ldr	r3, [pc, #708]	; (801b17c <LZSS_decode+0x35c>)
 801aeb8:	701a      	strb	r2, [r3, #0]
	wPreBufSize = ((WORD)1 << bPreBufSizeBits) - 1 + bThreshold;
 801aeba:	4baf      	ldr	r3, [pc, #700]	; (801b178 <LZSS_decode+0x358>)
 801aebc:	781b      	ldrb	r3, [r3, #0]
 801aebe:	461a      	mov	r2, r3
 801aec0:	2301      	movs	r3, #1
 801aec2:	4093      	lsls	r3, r2
 801aec4:	b29a      	uxth	r2, r3
 801aec6:	4bab      	ldr	r3, [pc, #684]	; (801b174 <LZSS_decode+0x354>)
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	b29b      	uxth	r3, r3
 801aecc:	4413      	add	r3, r2
 801aece:	b29b      	uxth	r3, r3
 801aed0:	3b01      	subs	r3, #1
 801aed2:	b29a      	uxth	r2, r3
 801aed4:	4baa      	ldr	r3, [pc, #680]	; (801b180 <LZSS_decode+0x360>)
 801aed6:	801a      	strh	r2, [r3, #0]
	wWindowBufSize = ((WORD)1 << bWindowBufSizeBits) - 1 + bThreshold;
 801aed8:	4ba8      	ldr	r3, [pc, #672]	; (801b17c <LZSS_decode+0x35c>)
 801aeda:	781b      	ldrb	r3, [r3, #0]
 801aedc:	461a      	mov	r2, r3
 801aede:	2301      	movs	r3, #1
 801aee0:	4093      	lsls	r3, r2
 801aee2:	b29a      	uxth	r2, r3
 801aee4:	4ba3      	ldr	r3, [pc, #652]	; (801b174 <LZSS_decode+0x354>)
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	4413      	add	r3, r2
 801aeec:	b29b      	uxth	r3, r3
 801aeee:	3b01      	subs	r3, #1
 801aef0:	b29a      	uxth	r2, r3
 801aef2:	4ba4      	ldr	r3, [pc, #656]	; (801b184 <LZSS_decode+0x364>)
 801aef4:	801a      	strh	r2, [r3, #0]

	WORD i, j;
	BYTE bItemNum;
	BYTE bFlag;
	WORD wStart;
	WORD wMatchStringCnt = 0;
 801aef6:	2300      	movs	r3, #0
 801aef8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	WORD wWindowBufCnt = 0;
 801aefc:	2300      	movs	r3, #0
 801aefe:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	Flash_FILE *pfRead = pbReadFileName;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	67fb      	str	r3, [r7, #124]	; 0x7c
	Flash_FILE *pfWrite = pbWriteFileName;
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	67bb      	str	r3, [r7, #120]	; 0x78

    BYTE *bPreBuf = (BYTE *)malloc(1024);
 801af0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801af0e:	f006 fd6d 	bl	80219ec <malloc>
 801af12:	4603      	mov	r3, r0
 801af14:	677b      	str	r3, [r7, #116]	; 0x74
    BYTE *bWindowBuf = (BYTE *)malloc(4196);
 801af16:	f241 0064 	movw	r0, #4196	; 0x1064
 801af1a:	f006 fd67 	bl	80219ec <malloc>
 801af1e:	4603      	mov	r3, r0
 801af20:	673b      	str	r3, [r7, #112]	; 0x70
    BYTE *bMatchString = (BYTE *)malloc(1024);
 801af22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801af26:	f006 fd61 	bl	80219ec <malloc>
 801af2a:	4603      	mov	r3, r0
 801af2c:	66fb      	str	r3, [r7, #108]	; 0x6c

	while (0 != process_fread(&ctx, &ctx.source_buffer, 1, &bFlag))  //先读一个标记字节以确定接下来怎么解压数据
 801af2e:	e0d3      	b.n	801b0d8 <LZSS_decode+0x2b8>
	{
		for (bItemNum = 0; bItemNum < 8; bItemNum++)  //8个项目为一组进行解压
 801af30:	2300      	movs	r3, #0
 801af32:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 801af36:	e0ca      	b.n	801b0ce <LZSS_decode+0x2ae>
		{
			//从标记字节的最高位开始解析，0代表原始数据，1代表(下标，匹配数)解析
			if (0 == (bFlag & ((BYTE)1 << (7 - bItemNum))))
 801af38:	7afb      	ldrb	r3, [r7, #11]
 801af3a:	461a      	mov	r2, r3
 801af3c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801af40:	f1c3 0307 	rsb	r3, r3, #7
 801af44:	fa42 f303 	asr.w	r3, r2, r3
 801af48:	f003 0301 	and.w	r3, r3, #1
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d11d      	bne.n	801af8c <LZSS_decode+0x16c>
			{
				if (process_fread(&ctx, &ctx.source_buffer, 1, bPreBuf) < 1)
 801af50:	f107 010c 	add.w	r1, r7, #12
 801af54:	f107 000c 	add.w	r0, r7, #12
 801af58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af5a:	2201      	movs	r2, #1
 801af5c:	f7ff ff16 	bl	801ad8c <process_fread>
 801af60:	4603      	mov	r3, r0
 801af62:	2b00      	cmp	r3, #0
 801af64:	f340 80c6 	ble.w	801b0f4 <LZSS_decode+0x2d4>
				{
					goto LZSS_decode_out_;
				}
                process_fwrite(&ctx, &ctx.target_buffer, 1, bPreBuf);
 801af68:	f107 030c 	add.w	r3, r7, #12
 801af6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801af70:	f107 000c 	add.w	r0, r7, #12
 801af74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af76:	2201      	movs	r2, #1
 801af78:	f7ff ff30 	bl	801addc <process_fwrite>

				bMatchString[0] = bPreBuf[0];
 801af7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af7e:	781a      	ldrb	r2, [r3, #0]
 801af80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801af82:	701a      	strb	r2, [r3, #0]
				wMatchStringCnt = 1;
 801af84:	2301      	movs	r3, #1
 801af86:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 801af8a:	e04f      	b.n	801b02c <LZSS_decode+0x20c>
			}
			else
			{
				if (process_fread(&ctx, &ctx.source_buffer, 2, bPreBuf) < 2)
 801af8c:	f107 010c 	add.w	r1, r7, #12
 801af90:	f107 000c 	add.w	r0, r7, #12
 801af94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af96:	2202      	movs	r2, #2
 801af98:	f7ff fef8 	bl	801ad8c <process_fread>
 801af9c:	4603      	mov	r3, r0
 801af9e:	2b01      	cmp	r3, #1
 801afa0:	f340 80aa 	ble.w	801b0f8 <LZSS_decode+0x2d8>
				{
					goto LZSS_decode_out_;
				}
				//取出高位的滑动窗口匹配串下标
				wStart = ((WORD)bPreBuf[0] | ((WORD)bPreBuf[1] << 8)) / ((WORD)1 << bPreBufSizeBits);
 801afa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	461a      	mov	r2, r3
 801afaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afac:	3301      	adds	r3, #1
 801afae:	781b      	ldrb	r3, [r3, #0]
 801afb0:	021b      	lsls	r3, r3, #8
 801afb2:	431a      	orrs	r2, r3
 801afb4:	4b70      	ldr	r3, [pc, #448]	; (801b178 <LZSS_decode+0x358>)
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	4619      	mov	r1, r3
 801afba:	2301      	movs	r3, #1
 801afbc:	408b      	lsls	r3, r1
 801afbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801afc2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				//取出低位的匹配长度
				wMatchStringCnt = ((WORD)bPreBuf[0] | ((WORD)bPreBuf[1] << 8)) % ((WORD)1 << bPreBufSizeBits) + bThreshold;
 801afc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afc8:	781b      	ldrb	r3, [r3, #0]
 801afca:	461a      	mov	r2, r3
 801afcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801afce:	3301      	adds	r3, #1
 801afd0:	781b      	ldrb	r3, [r3, #0]
 801afd2:	021b      	lsls	r3, r3, #8
 801afd4:	4313      	orrs	r3, r2
 801afd6:	4a68      	ldr	r2, [pc, #416]	; (801b178 <LZSS_decode+0x358>)
 801afd8:	7812      	ldrb	r2, [r2, #0]
 801afda:	4611      	mov	r1, r2
 801afdc:	2201      	movs	r2, #1
 801afde:	408a      	lsls	r2, r1
 801afe0:	fb93 f1f2 	sdiv	r1, r3, r2
 801afe4:	fb02 f201 	mul.w	r2, r2, r1
 801afe8:	1a9b      	subs	r3, r3, r2
 801afea:	b29a      	uxth	r2, r3
 801afec:	4b61      	ldr	r3, [pc, #388]	; (801b174 <LZSS_decode+0x354>)
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	4413      	add	r3, r2
 801aff4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				//将解压出的数据写入文件
                process_fwrite(&ctx, &ctx.target_buffer, wMatchStringCnt, &bWindowBuf[wStart]);
 801aff8:	f8b7 4082 	ldrh.w	r4, [r7, #130]	; 0x82
 801affc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801b000:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b002:	441a      	add	r2, r3
 801b004:	f107 030c 	add.w	r3, r7, #12
 801b008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801b00c:	f107 000c 	add.w	r0, r7, #12
 801b010:	4613      	mov	r3, r2
 801b012:	4622      	mov	r2, r4
 801b014:	f7ff fee2 	bl	801addc <process_fwrite>
				memcpy(bMatchString, &bWindowBuf[wStart], wMatchStringCnt);
 801b018:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801b01c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b01e:	4413      	add	r3, r2
 801b020:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801b024:	4619      	mov	r1, r3
 801b026:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b028:	f006 fcf0 	bl	8021a0c <memcpy>
			}
			//如果滑动窗口将要溢出，先提前把前面的部分数据移出窗口
			if ((wWindowBufCnt + wMatchStringCnt) > wWindowBufSize)
 801b02c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801b030:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801b034:	4413      	add	r3, r2
 801b036:	4a53      	ldr	r2, [pc, #332]	; (801b184 <LZSS_decode+0x364>)
 801b038:	8812      	ldrh	r2, [r2, #0]
 801b03a:	4293      	cmp	r3, r2
 801b03c:	dd31      	ble.n	801b0a2 <LZSS_decode+0x282>
			{
				j = (wWindowBufCnt + wMatchStringCnt) - wWindowBufSize;
 801b03e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801b042:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801b046:	4413      	add	r3, r2
 801b048:	b29a      	uxth	r2, r3
 801b04a:	4b4e      	ldr	r3, [pc, #312]	; (801b184 <LZSS_decode+0x364>)
 801b04c:	881b      	ldrh	r3, [r3, #0]
 801b04e:	1ad3      	subs	r3, r2, r3
 801b050:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				for (i = 0; i < wWindowBufCnt - j; i++)
 801b054:	2300      	movs	r3, #0
 801b056:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801b05a:	e012      	b.n	801b082 <LZSS_decode+0x262>
				{
					bWindowBuf[i] = bWindowBuf[i + j];
 801b05c:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801b060:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801b064:	4413      	add	r3, r2
 801b066:	461a      	mov	r2, r3
 801b068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b06a:	441a      	add	r2, r3
 801b06c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801b070:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b072:	440b      	add	r3, r1
 801b074:	7812      	ldrb	r2, [r2, #0]
 801b076:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < wWindowBufCnt - j; i++)
 801b078:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801b07c:	3301      	adds	r3, #1
 801b07e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801b082:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801b086:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801b08a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801b08e:	1acb      	subs	r3, r1, r3
 801b090:	429a      	cmp	r2, r3
 801b092:	dbe3      	blt.n	801b05c <LZSS_decode+0x23c>
				}
				wWindowBufCnt -= j;
 801b094:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801b098:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801b09c:	1ad3      	subs	r3, r2, r3
 801b09e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			}

			//将解压处的数据同步写入到滑动窗口
			memcpy(&bWindowBuf[wWindowBufCnt], bMatchString, wMatchStringCnt);
 801b0a2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 801b0a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b0a8:	4413      	add	r3, r2
 801b0aa:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801b0ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f006 fcab 	bl	8021a0c <memcpy>
			wWindowBufCnt += wMatchStringCnt;
 801b0b6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 801b0ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801b0be:	4413      	add	r3, r2
 801b0c0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		for (bItemNum = 0; bItemNum < 8; bItemNum++)  //8个项目为一组进行解压
 801b0c4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 801b0ce:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801b0d2:	2b07      	cmp	r3, #7
 801b0d4:	f67f af30 	bls.w	801af38 <LZSS_decode+0x118>
	while (0 != process_fread(&ctx, &ctx.source_buffer, 1, &bFlag))  //先读一个标记字节以确定接下来怎么解压数据
 801b0d8:	f107 030b 	add.w	r3, r7, #11
 801b0dc:	f107 010c 	add.w	r1, r7, #12
 801b0e0:	f107 000c 	add.w	r0, r7, #12
 801b0e4:	2201      	movs	r2, #1
 801b0e6:	f7ff fe51 	bl	801ad8c <process_fread>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	f47f af1f 	bne.w	801af30 <LZSS_decode+0x110>
			// printf("3wMatchStringCnt:%lu, %lu, %lu\n", wMatchStringCnt, wWindowBufCnt, wWindowBufSize);
		}
	}

LZSS_decode_out_:
 801b0f2:	e002      	b.n	801b0fa <LZSS_decode+0x2da>
					goto LZSS_decode_out_;
 801b0f4:	bf00      	nop
 801b0f6:	e000      	b.n	801b0fa <LZSS_decode+0x2da>
					goto LZSS_decode_out_;
 801b0f8:	bf00      	nop
    ctx.target_buffer.stream->file_size = jp_final_flush(&ctx, &ctx.target_buffer) + (ctx.target_buffer.stream->now_page - ctx.target_buffer.stream->origin_page) * ctx.target_buffer.size;
 801b0fa:	f107 030c 	add.w	r3, r7, #12
 801b0fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801b102:	f107 030c 	add.w	r3, r7, #12
 801b106:	4611      	mov	r1, r2
 801b108:	4618      	mov	r0, r3
 801b10a:	f7ff fde6 	bl	801acda <jp_final_flush>
 801b10e:	4601      	mov	r1, r0
 801b110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b112:	689a      	ldr	r2, [r3, #8]
 801b114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b116:	685b      	ldr	r3, [r3, #4]
 801b118:	1ad3      	subs	r3, r2, r3
 801b11a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b11c:	fb02 f203 	mul.w	r2, r2, r3
 801b120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b122:	440a      	add	r2, r1
 801b124:	60da      	str	r2, [r3, #12]
    printf("target:%lu\n", ctx.target_buffer.stream->file_size);
 801b126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b128:	68db      	ldr	r3, [r3, #12]
 801b12a:	4619      	mov	r1, r3
 801b12c:	4816      	ldr	r0, [pc, #88]	; (801b188 <LZSS_decode+0x368>)
 801b12e:	f007 fa85 	bl	802263c <iprintf>

    free(bPreBuf);
 801b132:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b134:	f006 fc62 	bl	80219fc <free>
    free(bWindowBuf);
 801b138:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801b13a:	f006 fc5f 	bl	80219fc <free>
    free(bMatchString);
 801b13e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b140:	f006 fc5c 	bl	80219fc <free>

    free(ctx.source_buffer.buffer);
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	4618      	mov	r0, r3
 801b148:	f006 fc58 	bl	80219fc <free>
    free(ctx.patch_buffer.buffer);
 801b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b14e:	4618      	mov	r0, r3
 801b150:	f006 fc54 	bl	80219fc <free>
    free(ctx.target_buffer.buffer);
 801b154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b156:	4618      	mov	r0, r3
 801b158:	f006 fc50 	bl	80219fc <free>

	return (ctx.target_buffer.stream->file_size);
 801b15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b15e:	68db      	ldr	r3, [r3, #12]
}
 801b160:	4618      	mov	r0, r3
 801b162:	378c      	adds	r7, #140	; 0x8c
 801b164:	46bd      	mov	sp, r7
 801b166:	bd90      	pop	{r4, r7, pc}
 801b168:	0801a3f5 	.word	0x0801a3f5
 801b16c:	0801a371 	.word	0x0801a371
 801b170:	0801a325 	.word	0x0801a325
 801b174:	20001e58 	.word	0x20001e58
 801b178:	20001e59 	.word	0x20001e59
 801b17c:	20001e5c 	.word	0x20001e5c
 801b180:	20001e60 	.word	0x20001e60
 801b184:	20001e5e 	.word	0x20001e5e
 801b188:	0802627c 	.word	0x0802627c

0801b18c <MD5Init>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void MD5Init(MD5_CTX *context)
{
 801b18c:	b480      	push	{r7}
 801b18e:	b083      	sub	sp, #12
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
	context->count[0] = 0;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	2200      	movs	r2, #0
 801b198:	601a      	str	r2, [r3, #0]
	context->count[1] = 0;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2200      	movs	r2, #0
 801b19e:	605a      	str	r2, [r3, #4]
	context->state[0] = 0x67452301;
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	4a08      	ldr	r2, [pc, #32]	; (801b1c4 <MD5Init+0x38>)
 801b1a4:	609a      	str	r2, [r3, #8]
	context->state[1] = 0xEFCDAB89;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	4a07      	ldr	r2, [pc, #28]	; (801b1c8 <MD5Init+0x3c>)
 801b1aa:	60da      	str	r2, [r3, #12]
	context->state[2] = 0x98BADCFE;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	4a07      	ldr	r2, [pc, #28]	; (801b1cc <MD5Init+0x40>)
 801b1b0:	611a      	str	r2, [r3, #16]
	context->state[3] = 0x10325476;
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	4a06      	ldr	r2, [pc, #24]	; (801b1d0 <MD5Init+0x44>)
 801b1b6:	615a      	str	r2, [r3, #20]
}
 801b1b8:	bf00      	nop
 801b1ba:	370c      	adds	r7, #12
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c2:	4770      	bx	lr
 801b1c4:	67452301 	.word	0x67452301
 801b1c8:	efcdab89 	.word	0xefcdab89
 801b1cc:	98badcfe 	.word	0x98badcfe
 801b1d0:	10325476 	.word	0x10325476

0801b1d4 <MD5Update>:

void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputlen)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b088      	sub	sp, #32
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	60f8      	str	r0, [r7, #12]
 801b1dc:	60b9      	str	r1, [r7, #8]
 801b1de:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	61fb      	str	r3, [r7, #28]
	unsigned int index = 0;
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	61bb      	str	r3, [r7, #24]
	unsigned int partlen = 0;
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	617b      	str	r3, [r7, #20]

	index = (context->count[0] >> 3) & 0x3F;
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	08db      	lsrs	r3, r3, #3
 801b1f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b1f6:	61bb      	str	r3, [r7, #24]
	partlen = 64 - index;
 801b1f8:	69bb      	ldr	r3, [r7, #24]
 801b1fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801b1fe:	617b      	str	r3, [r7, #20]
	context->count[0] += inputlen << 3;
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	681a      	ldr	r2, [r3, #0]
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	00db      	lsls	r3, r3, #3
 801b208:	441a      	add	r2, r3
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	601a      	str	r2, [r3, #0]

	if(context->count[0] < (inputlen << 3))
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	681a      	ldr	r2, [r3, #0]
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	00db      	lsls	r3, r3, #3
 801b216:	429a      	cmp	r2, r3
 801b218:	d204      	bcs.n	801b224 <MD5Update+0x50>
		context->count[1]++;
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	685b      	ldr	r3, [r3, #4]
 801b21e:	1c5a      	adds	r2, r3, #1
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	605a      	str	r2, [r3, #4]
	context->count[1] += inputlen >> 29;
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	685a      	ldr	r2, [r3, #4]
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	0f5b      	lsrs	r3, r3, #29
 801b22c:	441a      	add	r2, r3
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	605a      	str	r2, [r3, #4]

	if(inputlen >= partlen)
 801b232:	687a      	ldr	r2, [r7, #4]
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	429a      	cmp	r2, r3
 801b238:	d328      	bcc.n	801b28c <MD5Update+0xb8>
	{
		memcpy(&context->buffer[index], input,partlen);
 801b23a:	69bb      	ldr	r3, [r7, #24]
 801b23c:	3318      	adds	r3, #24
 801b23e:	68fa      	ldr	r2, [r7, #12]
 801b240:	4413      	add	r3, r2
 801b242:	697a      	ldr	r2, [r7, #20]
 801b244:	68b9      	ldr	r1, [r7, #8]
 801b246:	4618      	mov	r0, r3
 801b248:	f006 fbe0 	bl	8021a0c <memcpy>
		MD5Transform(context->state, context->buffer);
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	f103 0208 	add.w	r2, r3, #8
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	3318      	adds	r3, #24
 801b256:	4619      	mov	r1, r3
 801b258:	4610      	mov	r0, r2
 801b25a:	f000 f8eb 	bl	801b434 <MD5Transform>

		for(i = partlen; i+64 <= inputlen; i+=64)
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	61fb      	str	r3, [r7, #28]
 801b262:	e00b      	b.n	801b27c <MD5Update+0xa8>
			MD5Transform(context->state, &input[i]);
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	f103 0008 	add.w	r0, r3, #8
 801b26a:	68ba      	ldr	r2, [r7, #8]
 801b26c:	69fb      	ldr	r3, [r7, #28]
 801b26e:	4413      	add	r3, r2
 801b270:	4619      	mov	r1, r3
 801b272:	f000 f8df 	bl	801b434 <MD5Transform>
		for(i = partlen; i+64 <= inputlen; i+=64)
 801b276:	69fb      	ldr	r3, [r7, #28]
 801b278:	3340      	adds	r3, #64	; 0x40
 801b27a:	61fb      	str	r3, [r7, #28]
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	3340      	adds	r3, #64	; 0x40
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	429a      	cmp	r2, r3
 801b284:	d2ee      	bcs.n	801b264 <MD5Update+0x90>

		index = 0;
 801b286:	2300      	movs	r3, #0
 801b288:	61bb      	str	r3, [r7, #24]
 801b28a:	e001      	b.n	801b290 <MD5Update+0xbc>
	}
	else
	{
		i = 0;
 801b28c:	2300      	movs	r3, #0
 801b28e:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&context->buffer[index], &input[i], inputlen-i);
 801b290:	69bb      	ldr	r3, [r7, #24]
 801b292:	3318      	adds	r3, #24
 801b294:	68fa      	ldr	r2, [r7, #12]
 801b296:	18d0      	adds	r0, r2, r3
 801b298:	68ba      	ldr	r2, [r7, #8]
 801b29a:	69fb      	ldr	r3, [r7, #28]
 801b29c:	18d1      	adds	r1, r2, r3
 801b29e:	687a      	ldr	r2, [r7, #4]
 801b2a0:	69fb      	ldr	r3, [r7, #28]
 801b2a2:	1ad3      	subs	r3, r2, r3
 801b2a4:	461a      	mov	r2, r3
 801b2a6:	f006 fbb1 	bl	8021a0c <memcpy>
}
 801b2aa:	bf00      	nop
 801b2ac:	3720      	adds	r7, #32
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}
	...

0801b2b4 <MD5Final>:

void MD5Final(MD5_CTX *context, unsigned char digest[16])
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b086      	sub	sp, #24
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
 801b2bc:	6039      	str	r1, [r7, #0]
	unsigned int index = 0,padlen = 0;
 801b2be:	2300      	movs	r3, #0
 801b2c0:	617b      	str	r3, [r7, #20]
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	613b      	str	r3, [r7, #16]
	unsigned char bits[8];

	index = (context->count[0] >> 3) & 0x3F;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	08db      	lsrs	r3, r3, #3
 801b2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2d0:	617b      	str	r3, [r7, #20]
	padlen = (index < 56)?(56-index):(120-index);
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	2b37      	cmp	r3, #55	; 0x37
 801b2d6:	d803      	bhi.n	801b2e0 <MD5Final+0x2c>
 801b2d8:	697b      	ldr	r3, [r7, #20]
 801b2da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801b2de:	e002      	b.n	801b2e6 <MD5Final+0x32>
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 801b2e6:	613b      	str	r3, [r7, #16]
	MD5Encode(bits, context->count, 8);
 801b2e8:	6879      	ldr	r1, [r7, #4]
 801b2ea:	f107 0308 	add.w	r3, r7, #8
 801b2ee:	2208      	movs	r2, #8
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f000 f819 	bl	801b328 <MD5Encode>
	MD5Update(context, PADDING, padlen);
 801b2f6:	693a      	ldr	r2, [r7, #16]
 801b2f8:	490a      	ldr	r1, [pc, #40]	; (801b324 <MD5Final+0x70>)
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	f7ff ff6a 	bl	801b1d4 <MD5Update>
	MD5Update(context, bits, 8);
 801b300:	f107 0308 	add.w	r3, r7, #8
 801b304:	2208      	movs	r2, #8
 801b306:	4619      	mov	r1, r3
 801b308:	6878      	ldr	r0, [r7, #4]
 801b30a:	f7ff ff63 	bl	801b1d4 <MD5Update>
	MD5Encode(digest, context->state, 16);
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	3308      	adds	r3, #8
 801b312:	2210      	movs	r2, #16
 801b314:	4619      	mov	r1, r3
 801b316:	6838      	ldr	r0, [r7, #0]
 801b318:	f000 f806 	bl	801b328 <MD5Encode>
}
 801b31c:	bf00      	nop
 801b31e:	3718      	adds	r7, #24
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}
 801b324:	200000b4 	.word	0x200000b4

0801b328 <MD5Encode>:

void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)
{
 801b328:	b480      	push	{r7}
 801b32a:	b087      	sub	sp, #28
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	60f8      	str	r0, [r7, #12]
 801b330:	60b9      	str	r1, [r7, #8]
 801b332:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801b334:	2300      	movs	r3, #0
 801b336:	617b      	str	r3, [r7, #20]
	unsigned int j = 0;
 801b338:	2300      	movs	r3, #0
 801b33a:	613b      	str	r3, [r7, #16]

	while(j < len)
 801b33c:	e033      	b.n	801b3a6 <MD5Encode+0x7e>
	{
		output[j] = input[i] & 0xFF;
 801b33e:	697b      	ldr	r3, [r7, #20]
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	68ba      	ldr	r2, [r7, #8]
 801b344:	4413      	add	r3, r2
 801b346:	6819      	ldr	r1, [r3, #0]
 801b348:	68fa      	ldr	r2, [r7, #12]
 801b34a:	693b      	ldr	r3, [r7, #16]
 801b34c:	4413      	add	r3, r2
 801b34e:	b2ca      	uxtb	r2, r1
 801b350:	701a      	strb	r2, [r3, #0]
		output[j+1] = (input[i] >> 8) & 0xFF;
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	009b      	lsls	r3, r3, #2
 801b356:	68ba      	ldr	r2, [r7, #8]
 801b358:	4413      	add	r3, r2
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	0a19      	lsrs	r1, r3, #8
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	3301      	adds	r3, #1
 801b362:	68fa      	ldr	r2, [r7, #12]
 801b364:	4413      	add	r3, r2
 801b366:	b2ca      	uxtb	r2, r1
 801b368:	701a      	strb	r2, [r3, #0]
		output[j+2] = (input[i] >> 16) & 0xFF;
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	009b      	lsls	r3, r3, #2
 801b36e:	68ba      	ldr	r2, [r7, #8]
 801b370:	4413      	add	r3, r2
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	0c19      	lsrs	r1, r3, #16
 801b376:	693b      	ldr	r3, [r7, #16]
 801b378:	3302      	adds	r3, #2
 801b37a:	68fa      	ldr	r2, [r7, #12]
 801b37c:	4413      	add	r3, r2
 801b37e:	b2ca      	uxtb	r2, r1
 801b380:	701a      	strb	r2, [r3, #0]
		output[j+3] = (input[i] >> 24) & 0xFF;
 801b382:	697b      	ldr	r3, [r7, #20]
 801b384:	009b      	lsls	r3, r3, #2
 801b386:	68ba      	ldr	r2, [r7, #8]
 801b388:	4413      	add	r3, r2
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	0e19      	lsrs	r1, r3, #24
 801b38e:	693b      	ldr	r3, [r7, #16]
 801b390:	3303      	adds	r3, #3
 801b392:	68fa      	ldr	r2, [r7, #12]
 801b394:	4413      	add	r3, r2
 801b396:	b2ca      	uxtb	r2, r1
 801b398:	701a      	strb	r2, [r3, #0]
		i++;
 801b39a:	697b      	ldr	r3, [r7, #20]
 801b39c:	3301      	adds	r3, #1
 801b39e:	617b      	str	r3, [r7, #20]
		j += 4;
 801b3a0:	693b      	ldr	r3, [r7, #16]
 801b3a2:	3304      	adds	r3, #4
 801b3a4:	613b      	str	r3, [r7, #16]
	while(j < len)
 801b3a6:	693a      	ldr	r2, [r7, #16]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d3c7      	bcc.n	801b33e <MD5Encode+0x16>
	}
}
 801b3ae:	bf00      	nop
 801b3b0:	371c      	adds	r7, #28
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b8:	4770      	bx	lr

0801b3ba <MD5Decode>:

void MD5Decode(unsigned int *output, unsigned char *input, unsigned int len)
{
 801b3ba:	b480      	push	{r7}
 801b3bc:	b087      	sub	sp, #28
 801b3be:	af00      	add	r7, sp, #0
 801b3c0:	60f8      	str	r0, [r7, #12]
 801b3c2:	60b9      	str	r1, [r7, #8]
 801b3c4:	607a      	str	r2, [r7, #4]
	unsigned int i = 0;
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	617b      	str	r3, [r7, #20]
	unsigned int j = 0;
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	613b      	str	r3, [r7, #16]

	while(j < len)
 801b3ce:	e027      	b.n	801b420 <MD5Decode+0x66>
	{
		output[i] = (input[j]) |
 801b3d0:	68ba      	ldr	r2, [r7, #8]
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	4413      	add	r3, r2
 801b3d6:	781b      	ldrb	r3, [r3, #0]
 801b3d8:	4619      	mov	r1, r3
			(input[j+1] << 8) |
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	3301      	adds	r3, #1
 801b3de:	68ba      	ldr	r2, [r7, #8]
 801b3e0:	4413      	add	r3, r2
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	021b      	lsls	r3, r3, #8
		output[i] = (input[j]) |
 801b3e6:	ea41 0203 	orr.w	r2, r1, r3
			(input[j+2] << 16) |
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	3302      	adds	r3, #2
 801b3ee:	68b9      	ldr	r1, [r7, #8]
 801b3f0:	440b      	add	r3, r1
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	041b      	lsls	r3, r3, #16
			(input[j+1] << 8) |
 801b3f6:	431a      	orrs	r2, r3
			(input[j+3] << 24);
 801b3f8:	693b      	ldr	r3, [r7, #16]
 801b3fa:	3303      	adds	r3, #3
 801b3fc:	68b9      	ldr	r1, [r7, #8]
 801b3fe:	440b      	add	r3, r1
 801b400:	781b      	ldrb	r3, [r3, #0]
 801b402:	061b      	lsls	r3, r3, #24
			(input[j+2] << 16) |
 801b404:	ea42 0103 	orr.w	r1, r2, r3
		output[i] = (input[j]) |
 801b408:	697b      	ldr	r3, [r7, #20]
 801b40a:	009b      	lsls	r3, r3, #2
 801b40c:	68fa      	ldr	r2, [r7, #12]
 801b40e:	4413      	add	r3, r2
			(input[j+2] << 16) |
 801b410:	460a      	mov	r2, r1
		output[i] = (input[j]) |
 801b412:	601a      	str	r2, [r3, #0]
		i++;
 801b414:	697b      	ldr	r3, [r7, #20]
 801b416:	3301      	adds	r3, #1
 801b418:	617b      	str	r3, [r7, #20]
		j += 4;
 801b41a:	693b      	ldr	r3, [r7, #16]
 801b41c:	3304      	adds	r3, #4
 801b41e:	613b      	str	r3, [r7, #16]
	while(j < len)
 801b420:	693a      	ldr	r2, [r7, #16]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	429a      	cmp	r2, r3
 801b426:	d3d3      	bcc.n	801b3d0 <MD5Decode+0x16>
	}
}
 801b428:	bf00      	nop
 801b42a:	371c      	adds	r7, #28
 801b42c:	46bd      	mov	sp, r7
 801b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b432:	4770      	bx	lr

0801b434 <MD5Transform>:

void MD5Transform(unsigned int state[4], unsigned char block[64])
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b0c6      	sub	sp, #280	; 0x118
 801b438:	af00      	add	r7, sp, #0
 801b43a:	1d3b      	adds	r3, r7, #4
 801b43c:	6018      	str	r0, [r3, #0]
 801b43e:	463b      	mov	r3, r7
 801b440:	6019      	str	r1, [r3, #0]
	unsigned int a = state[0];
 801b442:	1d3b      	adds	r3, r7, #4
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int b = state[1];
 801b44c:	1d3b      	adds	r3, r7, #4
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	685b      	ldr	r3, [r3, #4]
 801b452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	unsigned int c = state[2];
 801b456:	1d3b      	adds	r3, r7, #4
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	689b      	ldr	r3, [r3, #8]
 801b45c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	unsigned int d = state[3];
 801b460:	1d3b      	adds	r3, r7, #4
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	unsigned int x[64];

	MD5Decode(x,block,64);
 801b46a:	463b      	mov	r3, r7
 801b46c:	f107 0008 	add.w	r0, r7, #8
 801b470:	2240      	movs	r2, #64	; 0x40
 801b472:	6819      	ldr	r1, [r3, #0]
 801b474:	f7ff ffa1 	bl	801b3ba <MD5Decode>

    FF(a, b, c, d, x[0], 7, 0xd76aa478);   /* 1 */
 801b478:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b480:	401a      	ands	r2, r3
 801b482:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b486:	43d9      	mvns	r1, r3
 801b488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b48c:	400b      	ands	r3, r1
 801b48e:	431a      	orrs	r2, r3
 801b490:	f107 0308 	add.w	r3, r7, #8
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	441a      	add	r2, r3
 801b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b49c:	441a      	add	r2, r3
 801b49e:	4bf1      	ldr	r3, [pc, #964]	; (801b864 <MD5Transform+0x430>)
 801b4a0:	4413      	add	r3, r2
 801b4a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b4aa:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b4ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b4b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b4b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b4ba:	4413      	add	r3, r2
 801b4bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[1], 12, 0xe8c7b756);  /* 2 */
 801b4c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b4c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b4c8:	401a      	ands	r2, r3
 801b4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b4ce:	43d9      	mvns	r1, r3
 801b4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b4d4:	400b      	ands	r3, r1
 801b4d6:	431a      	orrs	r2, r3
 801b4d8:	f107 0308 	add.w	r3, r7, #8
 801b4dc:	685b      	ldr	r3, [r3, #4]
 801b4de:	441a      	add	r2, r3
 801b4e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b4e4:	441a      	add	r2, r3
 801b4e6:	4be0      	ldr	r3, [pc, #896]	; (801b868 <MD5Transform+0x434>)
 801b4e8:	4413      	add	r3, r2
 801b4ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b4ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b4f2:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b4f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b4fa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b502:	4413      	add	r3, r2
 801b504:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[2], 17, 0x242070db);  /* 3 */
 801b508:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b510:	401a      	ands	r2, r3
 801b512:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b516:	43d9      	mvns	r1, r3
 801b518:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b51c:	400b      	ands	r3, r1
 801b51e:	431a      	orrs	r2, r3
 801b520:	f107 0308 	add.w	r3, r7, #8
 801b524:	689b      	ldr	r3, [r3, #8]
 801b526:	441a      	add	r2, r3
 801b528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b52c:	441a      	add	r2, r3
 801b52e:	4bcf      	ldr	r3, [pc, #828]	; (801b86c <MD5Transform+0x438>)
 801b530:	4413      	add	r3, r2
 801b532:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b53a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b53e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b542:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b54a:	4413      	add	r3, r2
 801b54c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[3], 22, 0xc1bdceee);  /* 4 */
 801b550:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b558:	401a      	ands	r2, r3
 801b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b55e:	43d9      	mvns	r1, r3
 801b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b564:	400b      	ands	r3, r1
 801b566:	431a      	orrs	r2, r3
 801b568:	f107 0308 	add.w	r3, r7, #8
 801b56c:	68db      	ldr	r3, [r3, #12]
 801b56e:	441a      	add	r2, r3
 801b570:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b574:	441a      	add	r2, r3
 801b576:	4bbe      	ldr	r3, [pc, #760]	; (801b870 <MD5Transform+0x43c>)
 801b578:	4413      	add	r3, r2
 801b57a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b57e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b582:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b586:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b58a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b592:	4413      	add	r3, r2
 801b594:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[4], 7, 0xf57c0faf);   /* 5 */
 801b598:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5a0:	401a      	ands	r2, r3
 801b5a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b5a6:	43d9      	mvns	r1, r3
 801b5a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b5ac:	400b      	ands	r3, r1
 801b5ae:	431a      	orrs	r2, r3
 801b5b0:	f107 0308 	add.w	r3, r7, #8
 801b5b4:	691b      	ldr	r3, [r3, #16]
 801b5b6:	441a      	add	r2, r3
 801b5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5bc:	441a      	add	r2, r3
 801b5be:	4bad      	ldr	r3, [pc, #692]	; (801b874 <MD5Transform+0x440>)
 801b5c0:	4413      	add	r3, r2
 801b5c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5ca:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b5ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b5d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b5d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b5da:	4413      	add	r3, r2
 801b5dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[5], 12, 0x4787c62a);  /* 6 */
 801b5e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b5e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b5e8:	401a      	ands	r2, r3
 801b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b5ee:	43d9      	mvns	r1, r3
 801b5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b5f4:	400b      	ands	r3, r1
 801b5f6:	431a      	orrs	r2, r3
 801b5f8:	f107 0308 	add.w	r3, r7, #8
 801b5fc:	695b      	ldr	r3, [r3, #20]
 801b5fe:	441a      	add	r2, r3
 801b600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b604:	441a      	add	r2, r3
 801b606:	4b9c      	ldr	r3, [pc, #624]	; (801b878 <MD5Transform+0x444>)
 801b608:	4413      	add	r3, r2
 801b60a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b60e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b612:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b616:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b61a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b622:	4413      	add	r3, r2
 801b624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[6], 17, 0xa8304613);  /* 7 */
 801b628:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b630:	401a      	ands	r2, r3
 801b632:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b636:	43d9      	mvns	r1, r3
 801b638:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b63c:	400b      	ands	r3, r1
 801b63e:	431a      	orrs	r2, r3
 801b640:	f107 0308 	add.w	r3, r7, #8
 801b644:	699b      	ldr	r3, [r3, #24]
 801b646:	441a      	add	r2, r3
 801b648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b64c:	441a      	add	r2, r3
 801b64e:	4b8b      	ldr	r3, [pc, #556]	; (801b87c <MD5Transform+0x448>)
 801b650:	4413      	add	r3, r2
 801b652:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b65a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b65e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b662:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b666:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b66a:	4413      	add	r3, r2
 801b66c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[7], 22, 0xfd469501);  /* 8 */
 801b670:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b678:	401a      	ands	r2, r3
 801b67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b67e:	43d9      	mvns	r1, r3
 801b680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b684:	400b      	ands	r3, r1
 801b686:	431a      	orrs	r2, r3
 801b688:	f107 0308 	add.w	r3, r7, #8
 801b68c:	69db      	ldr	r3, [r3, #28]
 801b68e:	441a      	add	r2, r3
 801b690:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b694:	441a      	add	r2, r3
 801b696:	4b7a      	ldr	r3, [pc, #488]	; (801b880 <MD5Transform+0x44c>)
 801b698:	4413      	add	r3, r2
 801b69a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b69e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b6a2:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b6a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b6aa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6b2:	4413      	add	r3, r2
 801b6b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[8], 7, 0x698098d8);   /* 9 */
 801b6b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b6c0:	401a      	ands	r2, r3
 801b6c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b6c6:	43d9      	mvns	r1, r3
 801b6c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b6cc:	400b      	ands	r3, r1
 801b6ce:	431a      	orrs	r2, r3
 801b6d0:	f107 0308 	add.w	r3, r7, #8
 801b6d4:	6a1b      	ldr	r3, [r3, #32]
 801b6d6:	441a      	add	r2, r3
 801b6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b6dc:	441a      	add	r2, r3
 801b6de:	4b69      	ldr	r3, [pc, #420]	; (801b884 <MD5Transform+0x450>)
 801b6e0:	4413      	add	r3, r2
 801b6e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b6ea:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b6ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b6f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b6f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b6fa:	4413      	add	r3, r2
 801b6fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[9], 12, 0x8b44f7af);  /* 10 */
 801b700:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b704:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b708:	401a      	ands	r2, r3
 801b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b70e:	43d9      	mvns	r1, r3
 801b710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b714:	400b      	ands	r3, r1
 801b716:	431a      	orrs	r2, r3
 801b718:	f107 0308 	add.w	r3, r7, #8
 801b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b71e:	441a      	add	r2, r3
 801b720:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b724:	441a      	add	r2, r3
 801b726:	4b58      	ldr	r3, [pc, #352]	; (801b888 <MD5Transform+0x454>)
 801b728:	4413      	add	r3, r2
 801b72a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b72e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b732:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b736:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b73a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b742:	4413      	add	r3, r2
 801b744:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[10], 17, 0xffff5bb1); /* 11 */
 801b748:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b750:	401a      	ands	r2, r3
 801b752:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b756:	43d9      	mvns	r1, r3
 801b758:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b75c:	400b      	ands	r3, r1
 801b75e:	431a      	orrs	r2, r3
 801b760:	f107 0308 	add.w	r3, r7, #8
 801b764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b766:	441a      	add	r2, r3
 801b768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b76c:	4413      	add	r3, r2
 801b76e:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 801b772:	3b4f      	subs	r3, #79	; 0x4f
 801b774:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b77c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b780:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b784:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b788:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b78c:	4413      	add	r3, r2
 801b78e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[11], 22, 0x895cd7be); /* 12 */
 801b792:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b796:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b79a:	401a      	ands	r2, r3
 801b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7a0:	43d9      	mvns	r1, r3
 801b7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b7a6:	400b      	ands	r3, r1
 801b7a8:	431a      	orrs	r2, r3
 801b7aa:	f107 0308 	add.w	r3, r7, #8
 801b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7b0:	441a      	add	r2, r3
 801b7b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b7b6:	441a      	add	r2, r3
 801b7b8:	4b34      	ldr	r3, [pc, #208]	; (801b88c <MD5Transform+0x458>)
 801b7ba:	4413      	add	r3, r2
 801b7bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b7c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b7c4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b7c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b7cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7d4:	4413      	add	r3, r2
 801b7d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    FF(a, b, c, d, x[12], 7, 0x6b901122);  /* 13 */
 801b7da:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b7de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b7e2:	401a      	ands	r2, r3
 801b7e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b7e8:	43d9      	mvns	r1, r3
 801b7ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b7ee:	400b      	ands	r3, r1
 801b7f0:	431a      	orrs	r2, r3
 801b7f2:	f107 0308 	add.w	r3, r7, #8
 801b7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7f8:	441a      	add	r2, r3
 801b7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b7fe:	441a      	add	r2, r3
 801b800:	4b23      	ldr	r3, [pc, #140]	; (801b890 <MD5Transform+0x45c>)
 801b802:	4413      	add	r3, r2
 801b804:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b80c:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b810:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b814:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b818:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b81c:	4413      	add	r3, r2
 801b81e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    FF(d, a, b, c, x[13], 12, 0xfd987193); /* 14 */
 801b822:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b82a:	401a      	ands	r2, r3
 801b82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b830:	43d9      	mvns	r1, r3
 801b832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b836:	400b      	ands	r3, r1
 801b838:	431a      	orrs	r2, r3
 801b83a:	f107 0308 	add.w	r3, r7, #8
 801b83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b840:	441a      	add	r2, r3
 801b842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b846:	441a      	add	r2, r3
 801b848:	4b12      	ldr	r3, [pc, #72]	; (801b894 <MD5Transform+0x460>)
 801b84a:	4413      	add	r3, r2
 801b84c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b854:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b858:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b85c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b860:	e01a      	b.n	801b898 <MD5Transform+0x464>
 801b862:	bf00      	nop
 801b864:	d76aa478 	.word	0xd76aa478
 801b868:	e8c7b756 	.word	0xe8c7b756
 801b86c:	242070db 	.word	0x242070db
 801b870:	c1bdceee 	.word	0xc1bdceee
 801b874:	f57c0faf 	.word	0xf57c0faf
 801b878:	4787c62a 	.word	0x4787c62a
 801b87c:	a8304613 	.word	0xa8304613
 801b880:	fd469501 	.word	0xfd469501
 801b884:	698098d8 	.word	0x698098d8
 801b888:	8b44f7af 	.word	0x8b44f7af
 801b88c:	895cd7be 	.word	0x895cd7be
 801b890:	6b901122 	.word	0x6b901122
 801b894:	fd987193 	.word	0xfd987193
 801b898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b89c:	4413      	add	r3, r2
 801b89e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    FF(c, d, a, b, x[14], 17, 0xa679438e); /* 15 */
 801b8a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8aa:	401a      	ands	r2, r3
 801b8ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b8b0:	43d9      	mvns	r1, r3
 801b8b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b8b6:	400b      	ands	r3, r1
 801b8b8:	431a      	orrs	r2, r3
 801b8ba:	f107 0308 	add.w	r3, r7, #8
 801b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b8c0:	441a      	add	r2, r3
 801b8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8c6:	441a      	add	r2, r3
 801b8c8:	4bf0      	ldr	r3, [pc, #960]	; (801bc8c <MD5Transform+0x858>)
 801b8ca:	4413      	add	r3, r2
 801b8cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8d4:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b8d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b8dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b8e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b8e4:	4413      	add	r3, r2
 801b8e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    FF(b, c, d, a, x[15], 22, 0x49b40821); /* 16 */
 801b8ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b8ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b8f2:	401a      	ands	r2, r3
 801b8f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b8f8:	43d9      	mvns	r1, r3
 801b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8fe:	400b      	ands	r3, r1
 801b900:	431a      	orrs	r2, r3
 801b902:	f107 0308 	add.w	r3, r7, #8
 801b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b908:	441a      	add	r2, r3
 801b90a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b90e:	441a      	add	r2, r3
 801b910:	4bdf      	ldr	r3, [pc, #892]	; (801bc90 <MD5Transform+0x85c>)
 801b912:	4413      	add	r3, r2
 801b914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b918:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b91c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b920:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801b924:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b92c:	4413      	add	r3, r2
 801b92e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 2 */
    GG(a, b, c, d, x[1], 5, 0xf61e2562);   /* 17 */
 801b932:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b93a:	401a      	ands	r2, r3
 801b93c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b940:	43d9      	mvns	r1, r3
 801b942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b946:	400b      	ands	r3, r1
 801b948:	431a      	orrs	r2, r3
 801b94a:	f107 0308 	add.w	r3, r7, #8
 801b94e:	685b      	ldr	r3, [r3, #4]
 801b950:	441a      	add	r2, r3
 801b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b956:	441a      	add	r2, r3
 801b958:	4bce      	ldr	r3, [pc, #824]	; (801bc94 <MD5Transform+0x860>)
 801b95a:	4413      	add	r3, r2
 801b95c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b964:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b968:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801b96c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b970:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b974:	4413      	add	r3, r2
 801b976:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[6], 9, 0xc040b340);   /* 18 */
 801b97a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b982:	401a      	ands	r2, r3
 801b984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b988:	43d9      	mvns	r1, r3
 801b98a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b98e:	400b      	ands	r3, r1
 801b990:	431a      	orrs	r2, r3
 801b992:	f107 0308 	add.w	r3, r7, #8
 801b996:	699b      	ldr	r3, [r3, #24]
 801b998:	441a      	add	r2, r3
 801b99a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b99e:	441a      	add	r2, r3
 801b9a0:	4bbd      	ldr	r3, [pc, #756]	; (801bc98 <MD5Transform+0x864>)
 801b9a2:	4413      	add	r3, r2
 801b9a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b9a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b9ac:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b9b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801b9b4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9bc:	4413      	add	r3, r2
 801b9be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[11], 14, 0x265e5a51); /* 19 */
 801b9c2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b9c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b9ca:	401a      	ands	r2, r3
 801b9cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b9d0:	43d9      	mvns	r1, r3
 801b9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9d6:	400b      	ands	r3, r1
 801b9d8:	431a      	orrs	r2, r3
 801b9da:	f107 0308 	add.w	r3, r7, #8
 801b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9e0:	441a      	add	r2, r3
 801b9e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9e6:	441a      	add	r2, r3
 801b9e8:	4bac      	ldr	r3, [pc, #688]	; (801bc9c <MD5Transform+0x868>)
 801b9ea:	4413      	add	r3, r2
 801b9ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b9f4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b9f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801b9fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801ba00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba04:	4413      	add	r3, r2
 801ba06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[0], 20, 0xe9b6c7aa);  /* 20 */
 801ba0a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba12:	401a      	ands	r2, r3
 801ba14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba18:	43d9      	mvns	r1, r3
 801ba1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba1e:	400b      	ands	r3, r1
 801ba20:	431a      	orrs	r2, r3
 801ba22:	f107 0308 	add.w	r3, r7, #8
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	441a      	add	r2, r3
 801ba2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba2e:	441a      	add	r2, r3
 801ba30:	4b9b      	ldr	r3, [pc, #620]	; (801bca0 <MD5Transform+0x86c>)
 801ba32:	4413      	add	r3, r2
 801ba34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801ba38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba3c:	ea4f 3333 	mov.w	r3, r3, ror #12
 801ba40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801ba44:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801ba48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ba4c:	4413      	add	r3, r2
 801ba4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[5], 5, 0xd62f105d);   /* 21 */
 801ba52:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801ba56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba5a:	401a      	ands	r2, r3
 801ba5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ba60:	43d9      	mvns	r1, r3
 801ba62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ba66:	400b      	ands	r3, r1
 801ba68:	431a      	orrs	r2, r3
 801ba6a:	f107 0308 	add.w	r3, r7, #8
 801ba6e:	695b      	ldr	r3, [r3, #20]
 801ba70:	441a      	add	r2, r3
 801ba72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba76:	441a      	add	r2, r3
 801ba78:	4b8a      	ldr	r3, [pc, #552]	; (801bca4 <MD5Transform+0x870>)
 801ba7a:	4413      	add	r3, r2
 801ba7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801ba80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba84:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801ba88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801ba8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801ba90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ba94:	4413      	add	r3, r2
 801ba96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[10], 9, 0x2441453);   /* 22 */
 801ba9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801baa2:	401a      	ands	r2, r3
 801baa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801baa8:	43d9      	mvns	r1, r3
 801baaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801baae:	400b      	ands	r3, r1
 801bab0:	431a      	orrs	r2, r3
 801bab2:	f107 0308 	add.w	r3, r7, #8
 801bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bab8:	441a      	add	r2, r3
 801baba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801babe:	441a      	add	r2, r3
 801bac0:	4b79      	ldr	r3, [pc, #484]	; (801bca8 <MD5Transform+0x874>)
 801bac2:	4413      	add	r3, r2
 801bac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bacc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801bad0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bad4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801badc:	4413      	add	r3, r2
 801bade:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[15], 14, 0xd8a1e681); /* 23 */
 801bae2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801baea:	401a      	ands	r2, r3
 801baec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801baf0:	43d9      	mvns	r1, r3
 801baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801baf6:	400b      	ands	r3, r1
 801baf8:	431a      	orrs	r2, r3
 801bafa:	f107 0308 	add.w	r3, r7, #8
 801bafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb00:	441a      	add	r2, r3
 801bb02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb06:	441a      	add	r2, r3
 801bb08:	4b68      	ldr	r3, [pc, #416]	; (801bcac <MD5Transform+0x878>)
 801bb0a:	4413      	add	r3, r2
 801bb0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bb10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb14:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801bb18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bb1c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bb20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb24:	4413      	add	r3, r2
 801bb26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[4], 20, 0xe7d3fbc8);  /* 24 */
 801bb2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb32:	401a      	ands	r2, r3
 801bb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb38:	43d9      	mvns	r1, r3
 801bb3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb3e:	400b      	ands	r3, r1
 801bb40:	431a      	orrs	r2, r3
 801bb42:	f107 0308 	add.w	r3, r7, #8
 801bb46:	691b      	ldr	r3, [r3, #16]
 801bb48:	441a      	add	r2, r3
 801bb4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bb4e:	441a      	add	r2, r3
 801bb50:	4b57      	ldr	r3, [pc, #348]	; (801bcb0 <MD5Transform+0x87c>)
 801bb52:	4413      	add	r3, r2
 801bb54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bb58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bb5c:	ea4f 3333 	mov.w	r3, r3, ror #12
 801bb60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bb64:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb6c:	4413      	add	r3, r2
 801bb6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[9], 5, 0x21e1cde6);   /* 25 */
 801bb72:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bb76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb7a:	401a      	ands	r2, r3
 801bb7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb80:	43d9      	mvns	r1, r3
 801bb82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bb86:	400b      	ands	r3, r1
 801bb88:	431a      	orrs	r2, r3
 801bb8a:	f107 0308 	add.w	r3, r7, #8
 801bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb90:	441a      	add	r2, r3
 801bb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb96:	441a      	add	r2, r3
 801bb98:	4b46      	ldr	r3, [pc, #280]	; (801bcb4 <MD5Transform+0x880>)
 801bb9a:	4413      	add	r3, r2
 801bb9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bba4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801bba8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bbac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bbb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bbb4:	4413      	add	r3, r2
 801bbb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[14], 9, 0xc33707d6);  /* 26 */
 801bbba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bbbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bbc2:	401a      	ands	r2, r3
 801bbc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bbc8:	43d9      	mvns	r1, r3
 801bbca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bbce:	400b      	ands	r3, r1
 801bbd0:	431a      	orrs	r2, r3
 801bbd2:	f107 0308 	add.w	r3, r7, #8
 801bbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbd8:	441a      	add	r2, r3
 801bbda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bbde:	441a      	add	r2, r3
 801bbe0:	4b35      	ldr	r3, [pc, #212]	; (801bcb8 <MD5Transform+0x884>)
 801bbe2:	4413      	add	r3, r2
 801bbe4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bbe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bbec:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801bbf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bbf4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbfc:	4413      	add	r3, r2
 801bbfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[3], 14, 0xf4d50d87);  /* 27 */
 801bc02:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bc06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc0a:	401a      	ands	r2, r3
 801bc0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc10:	43d9      	mvns	r1, r3
 801bc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc16:	400b      	ands	r3, r1
 801bc18:	431a      	orrs	r2, r3
 801bc1a:	f107 0308 	add.w	r3, r7, #8
 801bc1e:	68db      	ldr	r3, [r3, #12]
 801bc20:	441a      	add	r2, r3
 801bc22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bc26:	441a      	add	r2, r3
 801bc28:	4b24      	ldr	r3, [pc, #144]	; (801bcbc <MD5Transform+0x888>)
 801bc2a:	4413      	add	r3, r2
 801bc2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bc30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bc34:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801bc38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bc3c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bc40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bc44:	4413      	add	r3, r2
 801bc46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[8], 20, 0x455a14ed);  /* 28 */
 801bc4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc52:	401a      	ands	r2, r3
 801bc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc58:	43d9      	mvns	r1, r3
 801bc5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bc5e:	400b      	ands	r3, r1
 801bc60:	431a      	orrs	r2, r3
 801bc62:	f107 0308 	add.w	r3, r7, #8
 801bc66:	6a1b      	ldr	r3, [r3, #32]
 801bc68:	441a      	add	r2, r3
 801bc6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc6e:	441a      	add	r2, r3
 801bc70:	4b13      	ldr	r3, [pc, #76]	; (801bcc0 <MD5Transform+0x88c>)
 801bc72:	4413      	add	r3, r2
 801bc74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bc78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bc7c:	ea4f 3333 	mov.w	r3, r3, ror #12
 801bc80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bc84:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bc88:	e01c      	b.n	801bcc4 <MD5Transform+0x890>
 801bc8a:	bf00      	nop
 801bc8c:	a679438e 	.word	0xa679438e
 801bc90:	49b40821 	.word	0x49b40821
 801bc94:	f61e2562 	.word	0xf61e2562
 801bc98:	c040b340 	.word	0xc040b340
 801bc9c:	265e5a51 	.word	0x265e5a51
 801bca0:	e9b6c7aa 	.word	0xe9b6c7aa
 801bca4:	d62f105d 	.word	0xd62f105d
 801bca8:	02441453 	.word	0x02441453
 801bcac:	d8a1e681 	.word	0xd8a1e681
 801bcb0:	e7d3fbc8 	.word	0xe7d3fbc8
 801bcb4:	21e1cde6 	.word	0x21e1cde6
 801bcb8:	c33707d6 	.word	0xc33707d6
 801bcbc:	f4d50d87 	.word	0xf4d50d87
 801bcc0:	455a14ed 	.word	0x455a14ed
 801bcc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bcc8:	4413      	add	r3, r2
 801bcca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GG(a, b, c, d, x[13], 5, 0xa9e3e905);  /* 29 */
 801bcce:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bcd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bcd6:	401a      	ands	r2, r3
 801bcd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bcdc:	43d9      	mvns	r1, r3
 801bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bce2:	400b      	ands	r3, r1
 801bce4:	431a      	orrs	r2, r3
 801bce6:	f107 0308 	add.w	r3, r7, #8
 801bcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcec:	441a      	add	r2, r3
 801bcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bcf2:	441a      	add	r2, r3
 801bcf4:	4bef      	ldr	r3, [pc, #956]	; (801c0b4 <MD5Transform+0xc80>)
 801bcf6:	4413      	add	r3, r2
 801bcf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd00:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801bd04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bd08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bd0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd10:	4413      	add	r3, r2
 801bd12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GG(d, a, b, c, x[2], 9, 0xfcefa3f8);   /* 30 */
 801bd16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd1e:	401a      	ands	r2, r3
 801bd20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd24:	43d9      	mvns	r1, r3
 801bd26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd2a:	400b      	ands	r3, r1
 801bd2c:	431a      	orrs	r2, r3
 801bd2e:	f107 0308 	add.w	r3, r7, #8
 801bd32:	689b      	ldr	r3, [r3, #8]
 801bd34:	441a      	add	r2, r3
 801bd36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bd3a:	441a      	add	r2, r3
 801bd3c:	4bde      	ldr	r3, [pc, #888]	; (801c0b8 <MD5Transform+0xc84>)
 801bd3e:	4413      	add	r3, r2
 801bd40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bd44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bd48:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801bd4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bd50:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd58:	4413      	add	r3, r2
 801bd5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GG(c, d, a, b, x[7], 14, 0x676f02d9);  /* 31 */
 801bd5e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bd62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd66:	401a      	ands	r2, r3
 801bd68:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bd6c:	43d9      	mvns	r1, r3
 801bd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd72:	400b      	ands	r3, r1
 801bd74:	431a      	orrs	r2, r3
 801bd76:	f107 0308 	add.w	r3, r7, #8
 801bd7a:	69db      	ldr	r3, [r3, #28]
 801bd7c:	441a      	add	r2, r3
 801bd7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd82:	441a      	add	r2, r3
 801bd84:	4bcd      	ldr	r3, [pc, #820]	; (801c0bc <MD5Transform+0xc88>)
 801bd86:	4413      	add	r3, r2
 801bd88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bd8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bd90:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801bd94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bd98:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bd9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bda0:	4413      	add	r3, r2
 801bda2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GG(b, c, d, a, x[12], 20, 0x8d2a4c8a); /* 32 */
 801bda6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bdae:	401a      	ands	r2, r3
 801bdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bdb4:	43d9      	mvns	r1, r3
 801bdb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bdba:	400b      	ands	r3, r1
 801bdbc:	431a      	orrs	r2, r3
 801bdbe:	f107 0308 	add.w	r3, r7, #8
 801bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdc4:	441a      	add	r2, r3
 801bdc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bdca:	441a      	add	r2, r3
 801bdcc:	4bbc      	ldr	r3, [pc, #752]	; (801c0c0 <MD5Transform+0xc8c>)
 801bdce:	4413      	add	r3, r2
 801bdd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bdd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bdd8:	ea4f 3333 	mov.w	r3, r3, ror #12
 801bddc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bde0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bde8:	4413      	add	r3, r2
 801bdea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 3 */
    HH(a, b, c, d, x[5], 4, 0xfffa3942);   /* 33 */
 801bdee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bdf6:	405a      	eors	r2, r3
 801bdf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bdfc:	405a      	eors	r2, r3
 801bdfe:	f107 0308 	add.w	r3, r7, #8
 801be02:	695b      	ldr	r3, [r3, #20]
 801be04:	441a      	add	r2, r3
 801be06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be0a:	4413      	add	r3, r2
 801be0c:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 801be10:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 801be14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801be18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be1c:	ea4f 7333 	mov.w	r3, r3, ror #28
 801be20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801be24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801be28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be2c:	4413      	add	r3, r2
 801be2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[8], 11, 0x8771f681);  /* 34 */
 801be32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801be36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be3a:	405a      	eors	r2, r3
 801be3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be40:	405a      	eors	r2, r3
 801be42:	f107 0308 	add.w	r3, r7, #8
 801be46:	6a1b      	ldr	r3, [r3, #32]
 801be48:	441a      	add	r2, r3
 801be4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be4e:	441a      	add	r2, r3
 801be50:	4b9c      	ldr	r3, [pc, #624]	; (801c0c4 <MD5Transform+0xc90>)
 801be52:	4413      	add	r3, r2
 801be54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801be58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801be5c:	ea4f 5373 	mov.w	r3, r3, ror #21
 801be60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801be64:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801be68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be6c:	4413      	add	r3, r2
 801be6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[11], 16, 0x6d9d6122); /* 35 */
 801be72:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be7a:	405a      	eors	r2, r3
 801be7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801be80:	405a      	eors	r2, r3
 801be82:	f107 0308 	add.w	r3, r7, #8
 801be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be88:	441a      	add	r2, r3
 801be8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be8e:	441a      	add	r2, r3
 801be90:	4b8d      	ldr	r3, [pc, #564]	; (801c0c8 <MD5Transform+0xc94>)
 801be92:	4413      	add	r3, r2
 801be94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801be98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801be9c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bea4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bea8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801beac:	4413      	add	r3, r2
 801beae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[14], 23, 0xfde5380c); /* 36 */
 801beb2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801beb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801beba:	405a      	eors	r2, r3
 801bebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bec0:	405a      	eors	r2, r3
 801bec2:	f107 0308 	add.w	r3, r7, #8
 801bec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bec8:	441a      	add	r2, r3
 801beca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bece:	441a      	add	r2, r3
 801bed0:	4b7e      	ldr	r3, [pc, #504]	; (801c0cc <MD5Transform+0xc98>)
 801bed2:	4413      	add	r3, r2
 801bed4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bed8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bedc:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bee4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801beec:	4413      	add	r3, r2
 801beee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[1], 4, 0xa4beea44);   /* 37 */
 801bef2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801befa:	405a      	eors	r2, r3
 801befc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf00:	405a      	eors	r2, r3
 801bf02:	f107 0308 	add.w	r3, r7, #8
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	441a      	add	r2, r3
 801bf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf0e:	441a      	add	r2, r3
 801bf10:	4b6f      	ldr	r3, [pc, #444]	; (801c0d0 <MD5Transform+0xc9c>)
 801bf12:	4413      	add	r3, r2
 801bf14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf1c:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bf20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801bf24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bf28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf2c:	4413      	add	r3, r2
 801bf2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[4], 11, 0x4bdecfa9);  /* 38 */
 801bf32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bf36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf3a:	405a      	eors	r2, r3
 801bf3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf40:	405a      	eors	r2, r3
 801bf42:	f107 0308 	add.w	r3, r7, #8
 801bf46:	691b      	ldr	r3, [r3, #16]
 801bf48:	441a      	add	r2, r3
 801bf4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf4e:	441a      	add	r2, r3
 801bf50:	4b60      	ldr	r3, [pc, #384]	; (801c0d4 <MD5Transform+0xca0>)
 801bf52:	4413      	add	r3, r2
 801bf54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bf58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bf5c:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bf60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801bf64:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bf68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf6c:	4413      	add	r3, r2
 801bf6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[7], 16, 0xf6bb4b60);  /* 39 */
 801bf72:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf7a:	405a      	eors	r2, r3
 801bf7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bf80:	405a      	eors	r2, r3
 801bf82:	f107 0308 	add.w	r3, r7, #8
 801bf86:	69db      	ldr	r3, [r3, #28]
 801bf88:	441a      	add	r2, r3
 801bf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf8e:	441a      	add	r2, r3
 801bf90:	4b51      	ldr	r3, [pc, #324]	; (801c0d8 <MD5Transform+0xca4>)
 801bf92:	4413      	add	r3, r2
 801bf94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bf98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bf9c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bfa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801bfa4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bfa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bfac:	4413      	add	r3, r2
 801bfae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[10], 23, 0xbebfbc70); /* 40 */
 801bfb2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801bfb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bfba:	405a      	eors	r2, r3
 801bfbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bfc0:	405a      	eors	r2, r3
 801bfc2:	f107 0308 	add.w	r3, r7, #8
 801bfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfc8:	441a      	add	r2, r3
 801bfca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bfce:	441a      	add	r2, r3
 801bfd0:	4b42      	ldr	r3, [pc, #264]	; (801c0dc <MD5Transform+0xca8>)
 801bfd2:	4413      	add	r3, r2
 801bfd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bfd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bfdc:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bfe0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801bfe4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bfec:	4413      	add	r3, r2
 801bfee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[13], 4, 0x289b7ec6);  /* 41 */
 801bff2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801bff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801bffa:	405a      	eors	r2, r3
 801bffc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c000:	405a      	eors	r2, r3
 801c002:	f107 0308 	add.w	r3, r7, #8
 801c006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c008:	441a      	add	r2, r3
 801c00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c00e:	441a      	add	r2, r3
 801c010:	4b33      	ldr	r3, [pc, #204]	; (801c0e0 <MD5Transform+0xcac>)
 801c012:	4413      	add	r3, r2
 801c014:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c01c:	ea4f 7333 	mov.w	r3, r3, ror #28
 801c020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c024:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c028:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c02c:	4413      	add	r3, r2
 801c02e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[0], 11, 0xeaa127fa);  /* 42 */
 801c032:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c03a:	405a      	eors	r2, r3
 801c03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c040:	405a      	eors	r2, r3
 801c042:	f107 0308 	add.w	r3, r7, #8
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	441a      	add	r2, r3
 801c04a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c04e:	441a      	add	r2, r3
 801c050:	4b24      	ldr	r3, [pc, #144]	; (801c0e4 <MD5Transform+0xcb0>)
 801c052:	4413      	add	r3, r2
 801c054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c05c:	ea4f 5373 	mov.w	r3, r3, ror #21
 801c060:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c064:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c06c:	4413      	add	r3, r2
 801c06e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[3], 16, 0xd4ef3085);  /* 43 */
 801c072:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c07a:	405a      	eors	r2, r3
 801c07c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c080:	405a      	eors	r2, r3
 801c082:	f107 0308 	add.w	r3, r7, #8
 801c086:	68db      	ldr	r3, [r3, #12]
 801c088:	441a      	add	r2, r3
 801c08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c08e:	441a      	add	r2, r3
 801c090:	4b15      	ldr	r3, [pc, #84]	; (801c0e8 <MD5Transform+0xcb4>)
 801c092:	4413      	add	r3, r2
 801c094:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c09c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c0a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c0a4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c0a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c0ac:	4413      	add	r3, r2
 801c0ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c0b2:	e01b      	b.n	801c0ec <MD5Transform+0xcb8>
 801c0b4:	a9e3e905 	.word	0xa9e3e905
 801c0b8:	fcefa3f8 	.word	0xfcefa3f8
 801c0bc:	676f02d9 	.word	0x676f02d9
 801c0c0:	8d2a4c8a 	.word	0x8d2a4c8a
 801c0c4:	8771f681 	.word	0x8771f681
 801c0c8:	6d9d6122 	.word	0x6d9d6122
 801c0cc:	fde5380c 	.word	0xfde5380c
 801c0d0:	a4beea44 	.word	0xa4beea44
 801c0d4:	4bdecfa9 	.word	0x4bdecfa9
 801c0d8:	f6bb4b60 	.word	0xf6bb4b60
 801c0dc:	bebfbc70 	.word	0xbebfbc70
 801c0e0:	289b7ec6 	.word	0x289b7ec6
 801c0e4:	eaa127fa 	.word	0xeaa127fa
 801c0e8:	d4ef3085 	.word	0xd4ef3085
    HH(b, c, d, a, x[6], 23, 0x4881d05);   /* 44 */
 801c0ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c0f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c0f4:	405a      	eors	r2, r3
 801c0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c0fa:	405a      	eors	r2, r3
 801c0fc:	f107 0308 	add.w	r3, r7, #8
 801c100:	699b      	ldr	r3, [r3, #24]
 801c102:	441a      	add	r2, r3
 801c104:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c108:	441a      	add	r2, r3
 801c10a:	4bf0      	ldr	r3, [pc, #960]	; (801c4cc <MD5Transform+0x1098>)
 801c10c:	4413      	add	r3, r2
 801c10e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c112:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c116:	ea4f 2373 	mov.w	r3, r3, ror #9
 801c11a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c11e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c126:	4413      	add	r3, r2
 801c128:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HH(a, b, c, d, x[9], 4, 0xd9d4d039);   /* 45 */
 801c12c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c134:	405a      	eors	r2, r3
 801c136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c13a:	405a      	eors	r2, r3
 801c13c:	f107 0308 	add.w	r3, r7, #8
 801c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c142:	441a      	add	r2, r3
 801c144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c148:	441a      	add	r2, r3
 801c14a:	4be1      	ldr	r3, [pc, #900]	; (801c4d0 <MD5Transform+0x109c>)
 801c14c:	4413      	add	r3, r2
 801c14e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c156:	ea4f 7333 	mov.w	r3, r3, ror #28
 801c15a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c15e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c162:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c166:	4413      	add	r3, r2
 801c168:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HH(d, a, b, c, x[12], 11, 0xe6db99e5); /* 46 */
 801c16c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c170:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c174:	405a      	eors	r2, r3
 801c176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c17a:	405a      	eors	r2, r3
 801c17c:	f107 0308 	add.w	r3, r7, #8
 801c180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c182:	441a      	add	r2, r3
 801c184:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c188:	441a      	add	r2, r3
 801c18a:	4bd2      	ldr	r3, [pc, #840]	; (801c4d4 <MD5Transform+0x10a0>)
 801c18c:	4413      	add	r3, r2
 801c18e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c192:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c196:	ea4f 5373 	mov.w	r3, r3, ror #21
 801c19a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c19e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c1a6:	4413      	add	r3, r2
 801c1a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    HH(c, d, a, b, x[15], 16, 0x1fa27cf8); /* 47 */
 801c1ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c1b4:	405a      	eors	r2, r3
 801c1b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c1ba:	405a      	eors	r2, r3
 801c1bc:	f107 0308 	add.w	r3, r7, #8
 801c1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c1c2:	441a      	add	r2, r3
 801c1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c1c8:	441a      	add	r2, r3
 801c1ca:	4bc3      	ldr	r3, [pc, #780]	; (801c4d8 <MD5Transform+0x10a4>)
 801c1cc:	4413      	add	r3, r2
 801c1ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c1d6:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c1da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c1de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c1e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c1e6:	4413      	add	r3, r2
 801c1e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HH(b, c, d, a, x[2], 23, 0xc4ac5665);  /* 48 */
 801c1ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c1f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c1f4:	405a      	eors	r2, r3
 801c1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c1fa:	405a      	eors	r2, r3
 801c1fc:	f107 0308 	add.w	r3, r7, #8
 801c200:	689b      	ldr	r3, [r3, #8]
 801c202:	441a      	add	r2, r3
 801c204:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c208:	441a      	add	r2, r3
 801c20a:	4bb4      	ldr	r3, [pc, #720]	; (801c4dc <MD5Transform+0x10a8>)
 801c20c:	4413      	add	r3, r2
 801c20e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c216:	ea4f 2373 	mov.w	r3, r3, ror #9
 801c21a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c21e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c226:	4413      	add	r3, r2
 801c228:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Round 4 */
    II(a, b, c, d, x[0], 6, 0xf4292244);   /* 49 */
 801c22c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c230:	43da      	mvns	r2, r3
 801c232:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c236:	431a      	orrs	r2, r3
 801c238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c23c:	405a      	eors	r2, r3
 801c23e:	f107 0308 	add.w	r3, r7, #8
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	441a      	add	r2, r3
 801c246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c24a:	441a      	add	r2, r3
 801c24c:	4ba4      	ldr	r3, [pc, #656]	; (801c4e0 <MD5Transform+0x10ac>)
 801c24e:	4413      	add	r3, r2
 801c250:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c258:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c25c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c260:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c264:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c268:	4413      	add	r3, r2
 801c26a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[7], 10, 0x432aff97);  /* 50 */
 801c26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c272:	43da      	mvns	r2, r3
 801c274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c278:	431a      	orrs	r2, r3
 801c27a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c27e:	405a      	eors	r2, r3
 801c280:	f107 0308 	add.w	r3, r7, #8
 801c284:	69db      	ldr	r3, [r3, #28]
 801c286:	441a      	add	r2, r3
 801c288:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c28c:	441a      	add	r2, r3
 801c28e:	4b95      	ldr	r3, [pc, #596]	; (801c4e4 <MD5Transform+0x10b0>)
 801c290:	4413      	add	r3, r2
 801c292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c29a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c29e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c2a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2aa:	4413      	add	r3, r2
 801c2ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[14], 15, 0xab9423a7); /* 51 */
 801c2b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c2b4:	43da      	mvns	r2, r3
 801c2b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c2ba:	431a      	orrs	r2, r3
 801c2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2c0:	405a      	eors	r2, r3
 801c2c2:	f107 0308 	add.w	r3, r7, #8
 801c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2c8:	441a      	add	r2, r3
 801c2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c2ce:	441a      	add	r2, r3
 801c2d0:	4b85      	ldr	r3, [pc, #532]	; (801c4e8 <MD5Transform+0x10b4>)
 801c2d2:	4413      	add	r3, r2
 801c2d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c2dc:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c2e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c2e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c2e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c2ec:	4413      	add	r3, r2
 801c2ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[5], 21, 0xfc93a039);  /* 52 */
 801c2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2f6:	43da      	mvns	r2, r3
 801c2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c2fc:	431a      	orrs	r2, r3
 801c2fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c302:	405a      	eors	r2, r3
 801c304:	f107 0308 	add.w	r3, r7, #8
 801c308:	695b      	ldr	r3, [r3, #20]
 801c30a:	441a      	add	r2, r3
 801c30c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c310:	441a      	add	r2, r3
 801c312:	4b76      	ldr	r3, [pc, #472]	; (801c4ec <MD5Transform+0x10b8>)
 801c314:	4413      	add	r3, r2
 801c316:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c31a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c31e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c322:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c326:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c32a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c32e:	4413      	add	r3, r2
 801c330:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[12], 6, 0x655b59c3);  /* 53 */
 801c334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c338:	43da      	mvns	r2, r3
 801c33a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c33e:	431a      	orrs	r2, r3
 801c340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c344:	405a      	eors	r2, r3
 801c346:	f107 0308 	add.w	r3, r7, #8
 801c34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c34c:	441a      	add	r2, r3
 801c34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c352:	441a      	add	r2, r3
 801c354:	4b66      	ldr	r3, [pc, #408]	; (801c4f0 <MD5Transform+0x10bc>)
 801c356:	4413      	add	r3, r2
 801c358:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c360:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c364:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c368:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c36c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c370:	4413      	add	r3, r2
 801c372:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[3], 10, 0x8f0ccc92);  /* 54 */
 801c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c37a:	43da      	mvns	r2, r3
 801c37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c380:	431a      	orrs	r2, r3
 801c382:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c386:	405a      	eors	r2, r3
 801c388:	f107 0308 	add.w	r3, r7, #8
 801c38c:	68db      	ldr	r3, [r3, #12]
 801c38e:	441a      	add	r2, r3
 801c390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c394:	441a      	add	r2, r3
 801c396:	4b57      	ldr	r3, [pc, #348]	; (801c4f4 <MD5Transform+0x10c0>)
 801c398:	4413      	add	r3, r2
 801c39a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c39e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c3a2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c3a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c3aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c3b2:	4413      	add	r3, r2
 801c3b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[10], 15, 0xffeff47d); /* 55 */
 801c3b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c3bc:	43da      	mvns	r2, r3
 801c3be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c3c2:	431a      	orrs	r2, r3
 801c3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c3c8:	405a      	eors	r2, r3
 801c3ca:	f107 0308 	add.w	r3, r7, #8
 801c3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3d0:	441a      	add	r2, r3
 801c3d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c3d6:	4413      	add	r3, r2
 801c3d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c3dc:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 801c3e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c3e8:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c3ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c3f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c3f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c3f8:	4413      	add	r3, r2
 801c3fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[1], 21, 0x85845dd1);  /* 56 */
 801c3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c402:	43da      	mvns	r2, r3
 801c404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c408:	431a      	orrs	r2, r3
 801c40a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c40e:	405a      	eors	r2, r3
 801c410:	f107 0308 	add.w	r3, r7, #8
 801c414:	685b      	ldr	r3, [r3, #4]
 801c416:	441a      	add	r2, r3
 801c418:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c41c:	441a      	add	r2, r3
 801c41e:	4b36      	ldr	r3, [pc, #216]	; (801c4f8 <MD5Transform+0x10c4>)
 801c420:	4413      	add	r3, r2
 801c422:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c426:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c42a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c42e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c432:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c43a:	4413      	add	r3, r2
 801c43c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[8], 6, 0x6fa87e4f);   /* 57 */
 801c440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c444:	43da      	mvns	r2, r3
 801c446:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c44a:	431a      	orrs	r2, r3
 801c44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c450:	405a      	eors	r2, r3
 801c452:	f107 0308 	add.w	r3, r7, #8
 801c456:	6a1b      	ldr	r3, [r3, #32]
 801c458:	441a      	add	r2, r3
 801c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c45e:	441a      	add	r2, r3
 801c460:	4b26      	ldr	r3, [pc, #152]	; (801c4fc <MD5Transform+0x10c8>)
 801c462:	4413      	add	r3, r2
 801c464:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c46c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c470:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c474:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c478:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c47c:	4413      	add	r3, r2
 801c47e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[15], 10, 0xfe2ce6e0); /* 58 */
 801c482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c486:	43da      	mvns	r2, r3
 801c488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c48c:	431a      	orrs	r2, r3
 801c48e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c492:	405a      	eors	r2, r3
 801c494:	f107 0308 	add.w	r3, r7, #8
 801c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c49a:	441a      	add	r2, r3
 801c49c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c4a0:	441a      	add	r2, r3
 801c4a2:	4b17      	ldr	r3, [pc, #92]	; (801c500 <MD5Transform+0x10cc>)
 801c4a4:	4413      	add	r3, r2
 801c4a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c4aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c4ae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c4b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c4b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c4be:	4413      	add	r3, r2
 801c4c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[6], 15, 0xa3014314);  /* 59 */
 801c4c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c4c8:	43da      	mvns	r2, r3
 801c4ca:	e01b      	b.n	801c504 <MD5Transform+0x10d0>
 801c4cc:	04881d05 	.word	0x04881d05
 801c4d0:	d9d4d039 	.word	0xd9d4d039
 801c4d4:	e6db99e5 	.word	0xe6db99e5
 801c4d8:	1fa27cf8 	.word	0x1fa27cf8
 801c4dc:	c4ac5665 	.word	0xc4ac5665
 801c4e0:	f4292244 	.word	0xf4292244
 801c4e4:	432aff97 	.word	0x432aff97
 801c4e8:	ab9423a7 	.word	0xab9423a7
 801c4ec:	fc93a039 	.word	0xfc93a039
 801c4f0:	655b59c3 	.word	0x655b59c3
 801c4f4:	8f0ccc92 	.word	0x8f0ccc92
 801c4f8:	85845dd1 	.word	0x85845dd1
 801c4fc:	6fa87e4f 	.word	0x6fa87e4f
 801c500:	fe2ce6e0 	.word	0xfe2ce6e0
 801c504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c508:	431a      	orrs	r2, r3
 801c50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c50e:	405a      	eors	r2, r3
 801c510:	f107 0308 	add.w	r3, r7, #8
 801c514:	699b      	ldr	r3, [r3, #24]
 801c516:	441a      	add	r2, r3
 801c518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c51c:	441a      	add	r2, r3
 801c51e:	4b72      	ldr	r3, [pc, #456]	; (801c6e8 <MD5Transform+0x12b4>)
 801c520:	4413      	add	r3, r2
 801c522:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c52a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c52e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c532:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c53a:	4413      	add	r3, r2
 801c53c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[13], 21, 0x4e0811a1); /* 60 */
 801c540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c544:	43da      	mvns	r2, r3
 801c546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c54a:	431a      	orrs	r2, r3
 801c54c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c550:	405a      	eors	r2, r3
 801c552:	f107 0308 	add.w	r3, r7, #8
 801c556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c558:	441a      	add	r2, r3
 801c55a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c55e:	441a      	add	r2, r3
 801c560:	4b62      	ldr	r3, [pc, #392]	; (801c6ec <MD5Transform+0x12b8>)
 801c562:	4413      	add	r3, r2
 801c564:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c568:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c56c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c570:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c574:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c57c:	4413      	add	r3, r2
 801c57e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    II(a, b, c, d, x[4], 6, 0xf7537e82);   /* 61 */
 801c582:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c586:	43da      	mvns	r2, r3
 801c588:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c58c:	431a      	orrs	r2, r3
 801c58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c592:	405a      	eors	r2, r3
 801c594:	f107 0308 	add.w	r3, r7, #8
 801c598:	691b      	ldr	r3, [r3, #16]
 801c59a:	441a      	add	r2, r3
 801c59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c5a0:	441a      	add	r2, r3
 801c5a2:	4b53      	ldr	r3, [pc, #332]	; (801c6f0 <MD5Transform+0x12bc>)
 801c5a4:	4413      	add	r3, r2
 801c5a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c5ae:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c5b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801c5b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c5ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c5be:	4413      	add	r3, r2
 801c5c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    II(d, a, b, c, x[11], 10, 0xbd3af235); /* 62 */
 801c5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c5c8:	43da      	mvns	r2, r3
 801c5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c5ce:	431a      	orrs	r2, r3
 801c5d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c5d4:	405a      	eors	r2, r3
 801c5d6:	f107 0308 	add.w	r3, r7, #8
 801c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5dc:	441a      	add	r2, r3
 801c5de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c5e2:	441a      	add	r2, r3
 801c5e4:	4b43      	ldr	r3, [pc, #268]	; (801c6f4 <MD5Transform+0x12c0>)
 801c5e6:	4413      	add	r3, r2
 801c5e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c5ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c5f0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c5f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801c5f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c600:	4413      	add	r3, r2
 801c602:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    II(c, d, a, b, x[2], 15, 0x2ad7d2bb);  /* 63 */
 801c606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c60a:	43da      	mvns	r2, r3
 801c60c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c610:	431a      	orrs	r2, r3
 801c612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c616:	405a      	eors	r2, r3
 801c618:	f107 0308 	add.w	r3, r7, #8
 801c61c:	689b      	ldr	r3, [r3, #8]
 801c61e:	441a      	add	r2, r3
 801c620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c624:	441a      	add	r2, r3
 801c626:	4b34      	ldr	r3, [pc, #208]	; (801c6f8 <MD5Transform+0x12c4>)
 801c628:	4413      	add	r3, r2
 801c62a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c62e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c632:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c63a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c63e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c642:	4413      	add	r3, r2
 801c644:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    II(b, c, d, a, x[9], 21, 0xeb86d391);  /* 64 */
 801c648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c64c:	43da      	mvns	r2, r3
 801c64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c652:	431a      	orrs	r2, r3
 801c654:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c658:	405a      	eors	r2, r3
 801c65a:	f107 0308 	add.w	r3, r7, #8
 801c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c660:	441a      	add	r2, r3
 801c662:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c666:	441a      	add	r2, r3
 801c668:	4b24      	ldr	r3, [pc, #144]	; (801c6fc <MD5Transform+0x12c8>)
 801c66a:	4413      	add	r3, r2
 801c66c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c670:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c674:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c678:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801c67c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c684:	4413      	add	r3, r2
 801c686:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    state[0] += a;
 801c68a:	1d3b      	adds	r3, r7, #4
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	681a      	ldr	r2, [r3, #0]
 801c690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c694:	441a      	add	r2, r3
 801c696:	1d3b      	adds	r3, r7, #4
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	601a      	str	r2, [r3, #0]
    state[1] += b;
 801c69c:	1d3b      	adds	r3, r7, #4
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	3304      	adds	r3, #4
 801c6a2:	6819      	ldr	r1, [r3, #0]
 801c6a4:	1d3b      	adds	r3, r7, #4
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	3304      	adds	r3, #4
 801c6aa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c6ae:	440a      	add	r2, r1
 801c6b0:	601a      	str	r2, [r3, #0]
    state[2] += c;
 801c6b2:	1d3b      	adds	r3, r7, #4
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	3308      	adds	r3, #8
 801c6b8:	6819      	ldr	r1, [r3, #0]
 801c6ba:	1d3b      	adds	r3, r7, #4
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	3308      	adds	r3, #8
 801c6c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801c6c4:	440a      	add	r2, r1
 801c6c6:	601a      	str	r2, [r3, #0]
    state[3] += d;
 801c6c8:	1d3b      	adds	r3, r7, #4
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	330c      	adds	r3, #12
 801c6ce:	6819      	ldr	r1, [r3, #0]
 801c6d0:	1d3b      	adds	r3, r7, #4
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	330c      	adds	r3, #12
 801c6d6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c6da:	440a      	add	r2, r1
 801c6dc:	601a      	str	r2, [r3, #0]
}
 801c6de:	bf00      	nop
 801c6e0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}
 801c6e8:	a3014314 	.word	0xa3014314
 801c6ec:	4e0811a1 	.word	0x4e0811a1
 801c6f0:	f7537e82 	.word	0xf7537e82
 801c6f4:	bd3af235 	.word	0xbd3af235
 801c6f8:	2ad7d2bb 	.word	0x2ad7d2bb
 801c6fc:	eb86d391 	.word	0xeb86d391

0801c700 <MD5_File_Compute>:
 * @param  file_path
 * @param  md5_str
 * @return 0: ok, -1: fail
 */
int MD5_File_Compute(Flash_FILE *file, uint8_t *md5_value)
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b09a      	sub	sp, #104	; 0x68
 801c704:	af00      	add	r7, sp, #0
 801c706:	6078      	str	r0, [r7, #4]
 801c708:	6039      	str	r1, [r7, #0]
	int i;
	int fd;
	size_t ret;
	uint8_t *data;
    data = (uint8_t *)malloc(FLASH_PAGE);
 801c70a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801c70e:	f005 f96d 	bl	80219ec <malloc>
 801c712:	4603      	mov	r3, r0
 801c714:	667b      	str	r3, [r7, #100]	; 0x64
	MD5_CTX md5;

	// init md5
	MD5Init(&md5);
 801c716:	f107 0308 	add.w	r3, r7, #8
 801c71a:	4618      	mov	r0, r3
 801c71c:	f7fe fd36 	bl	801b18c <MD5Init>

//**************************************************************************************************

static ALWAYS_INLINE Gpi_Fast_Tick_Native gpi_tick_fast_native()
{
	return htim2.Instance->CNT;
 801c720:	4b24      	ldr	r3, [pc, #144]	; (801c7b4 <MD5_File_Compute+0xb4>)
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	#if ENERGEST_CONF_ON
		ENERGEST_ON(ENERGEST_TYPE_FLASH_VERIFY);
 801c726:	4a24      	ldr	r2, [pc, #144]	; (801c7b8 <MD5_File_Compute+0xb8>)
 801c728:	6353      	str	r3, [r2, #52]	; 0x34
 801c72a:	4b24      	ldr	r3, [pc, #144]	; (801c7bc <MD5_File_Compute+0xbc>)
 801c72c:	2201      	movs	r2, #1
 801c72e:	735a      	strb	r2, [r3, #13]
	#endif
	the_fseek(file, 0, SEEK_SET);
 801c730:	2200      	movs	r2, #0
 801c732:	2100      	movs	r1, #0
 801c734:	6878      	ldr	r0, [r7, #4]
 801c736:	f7fd fdf5 	bl	801a324 <the_fseek>
	while (1)
	{
		ret = the_fread(data, 1, FLASH_PAGE, file);
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c740:	2101      	movs	r1, #1
 801c742:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801c744:	f7fd fe56 	bl	801a3f4 <the_fread>
 801c748:	6638      	str	r0, [r7, #96]	; 0x60
        the_fseek(file, FLASH_PAGE, SEEK_CUR);
 801c74a:	2201      	movs	r2, #1
 801c74c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801c750:	6878      	ldr	r0, [r7, #4]
 801c752:	f7fd fde7 	bl	801a324 <the_fseek>

		MD5Update(&md5, data, ret);
 801c756:	f107 0308 	add.w	r3, r7, #8
 801c75a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c75c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801c75e:	4618      	mov	r0, r3
 801c760:	f7fe fd38 	bl	801b1d4 <MD5Update>

		if (0 == ret || ret < FLASH_PAGE)
 801c764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c766:	2b00      	cmp	r3, #0
 801c768:	d003      	beq.n	801c772 <MD5_File_Compute+0x72>
 801c76a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c76c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c770:	d2e3      	bcs.n	801c73a <MD5_File_Compute+0x3a>
		{
			free(data);
 801c772:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801c774:	f005 f942 	bl	80219fc <free>
			break;
 801c778:	bf00      	nop
		}
	}

	MD5Final(&md5, md5_value);
 801c77a:	f107 0308 	add.w	r3, r7, #8
 801c77e:	6839      	ldr	r1, [r7, #0]
 801c780:	4618      	mov	r0, r3
 801c782:	f7fe fd97 	bl	801b2b4 <MD5Final>
	#if ENERGEST_CONF_ON
		ENERGEST_OFF(ENERGEST_TYPE_FLASH_VERIFY);
 801c786:	4b0d      	ldr	r3, [pc, #52]	; (801c7bc <MD5_File_Compute+0xbc>)
 801c788:	7b5b      	ldrb	r3, [r3, #13]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d00d      	beq.n	801c7aa <MD5_File_Compute+0xaa>
 801c78e:	4b09      	ldr	r3, [pc, #36]	; (801c7b4 <MD5_File_Compute+0xb4>)
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c794:	4b08      	ldr	r3, [pc, #32]	; (801c7b8 <MD5_File_Compute+0xb8>)
 801c796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c798:	1ad2      	subs	r2, r2, r3
 801c79a:	4b09      	ldr	r3, [pc, #36]	; (801c7c0 <MD5_File_Compute+0xc0>)
 801c79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c79e:	4413      	add	r3, r2
 801c7a0:	4a07      	ldr	r2, [pc, #28]	; (801c7c0 <MD5_File_Compute+0xc0>)
 801c7a2:	6353      	str	r3, [r2, #52]	; 0x34
 801c7a4:	4b05      	ldr	r3, [pc, #20]	; (801c7bc <MD5_File_Compute+0xbc>)
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	735a      	strb	r2, [r3, #13]
	#endif
	return 0;
 801c7aa:	2300      	movs	r3, #0
}
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	3768      	adds	r7, #104	; 0x68
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}
 801c7b4:	200012c8 	.word	0x200012c8
 801c7b8:	20001308 	.word	0x20001308
 801c7bc:	2000112c 	.word	0x2000112c
 801c7c0:	20000f10 	.word	0x20000f10

0801c7c4 <MD5_File>:

bool MD5_File(Flash_FILE md5File, uint8_t *md5_check)
{
 801c7c4:	b590      	push	{r4, r7, lr}
 801c7c6:	b08b      	sub	sp, #44	; 0x2c
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	463c      	mov	r4, r7
 801c7cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int ret;
    PRINTF_CHIRP("MD5 File size:%lu\n", md5File.file_size);
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	4619      	mov	r1, r3
 801c7d4:	4829      	ldr	r0, [pc, #164]	; (801c87c <MD5_File+0xb8>)
 801c7d6:	f005 ff31 	bl	802263c <iprintf>
	uint8_t md5_value[MD5_SIZE];

	// test file md5
	ret = MD5_File_Compute(&md5File, md5_value);
 801c7da:	f107 0210 	add.w	r2, r7, #16
 801c7de:	463b      	mov	r3, r7
 801c7e0:	4611      	mov	r1, r2
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7ff ff8c 	bl	801c700 <MD5_File_Compute>
 801c7e8:	6238      	str	r0, [r7, #32]
	if (0 == ret)
 801c7ea:	6a3b      	ldr	r3, [r7, #32]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d11d      	bne.n	801c82c <MD5_File+0x68>
	{
		PRINTF_CHIRP("MD5 value:\n");
 801c7f0:	4823      	ldr	r0, [pc, #140]	; (801c880 <MD5_File+0xbc>)
 801c7f2:	f005 ffab 	bl	802274c <puts>
		for(uint8_t i = 0; i < MD5_SIZE; i++)
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c7fc:	e00f      	b.n	801c81e <MD5_File+0x5a>
			PRINTF_CHIRP("%02X", md5_value[i]);
 801c7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c806:	4413      	add	r3, r2
 801c808:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801c80c:	4619      	mov	r1, r3
 801c80e:	481d      	ldr	r0, [pc, #116]	; (801c884 <MD5_File+0xc0>)
 801c810:	f005 ff14 	bl	802263c <iprintf>
		for(uint8_t i = 0; i < MD5_SIZE; i++)
 801c814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c818:	3301      	adds	r3, #1
 801c81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c822:	2b0f      	cmp	r3, #15
 801c824:	d9eb      	bls.n	801c7fe <MD5_File+0x3a>
		PRINTF_CHIRP("\n");
 801c826:	200a      	movs	r0, #10
 801c828:	f005 ff20 	bl	802266c <putchar>
	}

	for (uint8_t i = 0; i < MD5_SIZE; i++)
 801c82c:	2300      	movs	r3, #0
 801c82e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c832:	e017      	b.n	801c864 <MD5_File+0xa0>
	{
		if (md5_check[i] != md5_value[i])
 801c834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c83a:	4413      	add	r3, r2
 801c83c:	781a      	ldrb	r2, [r3, #0]
 801c83e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c842:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801c846:	440b      	add	r3, r1
 801c848:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801c84c:	429a      	cmp	r2, r3
 801c84e:	d004      	beq.n	801c85a <MD5_File+0x96>
		{
			PRINTF_CHIRP("MD5 check wrong\n");
 801c850:	480d      	ldr	r0, [pc, #52]	; (801c888 <MD5_File+0xc4>)
 801c852:	f005 ff7b 	bl	802274c <puts>
			return false;
 801c856:	2300      	movs	r3, #0
 801c858:	e00c      	b.n	801c874 <MD5_File+0xb0>
	for (uint8_t i = 0; i < MD5_SIZE; i++)
 801c85a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c85e:	3301      	adds	r3, #1
 801c860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c868:	2b0f      	cmp	r3, #15
 801c86a:	d9e3      	bls.n	801c834 <MD5_File+0x70>
		}
	}
	PRINTF_CHIRP("MD5 check right\n");
 801c86c:	4807      	ldr	r0, [pc, #28]	; (801c88c <MD5_File+0xc8>)
 801c86e:	f005 ff6d 	bl	802274c <puts>
	return true;
 801c872:	2301      	movs	r3, #1
}
 801c874:	4618      	mov	r0, r3
 801c876:	372c      	adds	r7, #44	; 0x2c
 801c878:	46bd      	mov	sp, r7
 801c87a:	bd90      	pop	{r4, r7, pc}
 801c87c:	0802643c 	.word	0x0802643c
 801c880:	08026450 	.word	0x08026450
 801c884:	0802645c 	.word	0x0802645c
 801c888:	08026464 	.word	0x08026464
 801c88c:	08026474 	.word	0x08026474

0801c890 <FLASH_If_Erase>:
  * @param  bank_active: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t bank_active)
{
 801c890:	b580      	push	{r7, lr}
 801c892:	b08a      	sub	sp, #40	; 0x28
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  gpi_watchdog_periodic();
 801c898:	f7f1 fc9a 	bl	800e1d0 <gpi_watchdog_periodic>
  uint32_t bank_to_erase, error = 0;
 801c89c:	2300      	movs	r3, #0
 801c89e:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (bank_active == 0)
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d102      	bne.n	801c8b2 <FLASH_If_Erase+0x22>
  {
    bank_to_erase = FLASH_BANK_2;
 801c8ac:	2302      	movs	r3, #2
 801c8ae:	627b      	str	r3, [r7, #36]	; 0x24
 801c8b0:	e001      	b.n	801c8b6 <FLASH_If_Erase+0x26>
  }
  else
  {
    bank_to_erase = FLASH_BANK_1;
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	627b      	str	r3, [r7, #36]	; 0x24
	return htim2.Instance->CNT;
 801c8b6:	4b2b      	ldr	r3, [pc, #172]	; (801c964 <FLASH_If_Erase+0xd4>)
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
  #if ENERGEST_CONF_ON
    ENERGEST_ON(ENERGEST_TYPE_FLASH_ERASE);
 801c8bc:	4a2a      	ldr	r2, [pc, #168]	; (801c968 <FLASH_If_Erase+0xd8>)
 801c8be:	6313      	str	r3, [r2, #48]	; 0x30
 801c8c0:	4b2a      	ldr	r3, [pc, #168]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	731a      	strb	r2, [r3, #12]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801c8c6:	4b29      	ldr	r3, [pc, #164]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c8c8:	79db      	ldrb	r3, [r3, #7]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d00d      	beq.n	801c8ea <FLASH_If_Erase+0x5a>
 801c8ce:	4b25      	ldr	r3, [pc, #148]	; (801c964 <FLASH_If_Erase+0xd4>)
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c8d4:	4b24      	ldr	r3, [pc, #144]	; (801c968 <FLASH_If_Erase+0xd8>)
 801c8d6:	69db      	ldr	r3, [r3, #28]
 801c8d8:	1ad2      	subs	r2, r2, r3
 801c8da:	4b25      	ldr	r3, [pc, #148]	; (801c970 <FLASH_If_Erase+0xe0>)
 801c8dc:	69db      	ldr	r3, [r3, #28]
 801c8de:	4413      	add	r3, r2
 801c8e0:	4a23      	ldr	r2, [pc, #140]	; (801c970 <FLASH_If_Erase+0xe0>)
 801c8e2:	61d3      	str	r3, [r2, #28]
 801c8e4:	4b21      	ldr	r3, [pc, #132]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801c8ea:	f7e5 fd15 	bl	8002318 <HAL_FLASH_Unlock>

  pEraseInit.Banks = bank_to_erase;
 801c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8f0:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = 255;
 801c8f2:	23ff      	movs	r3, #255	; 0xff
 801c8f4:	61bb      	str	r3, [r7, #24]
  pEraseInit.Page = 0;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	617b      	str	r3, [r7, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 801c8fa:	2301      	movs	r3, #1
 801c8fc:	60fb      	str	r3, [r7, #12]

  status = HAL_FLASHEx_Erase(&pEraseInit, &error);
 801c8fe:	f107 021c 	add.w	r2, r7, #28
 801c902:	f107 030c 	add.w	r3, r7, #12
 801c906:	4611      	mov	r1, r2
 801c908:	4618      	mov	r0, r3
 801c90a:	f7e5 fe11 	bl	8002530 <HAL_FLASHEx_Erase>
 801c90e:	4603      	mov	r3, r0
 801c910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801c914:	f7e5 fd22 	bl	800235c <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    ENERGEST_OFF(ENERGEST_TYPE_FLASH_ERASE);
 801c918:	4b14      	ldr	r3, [pc, #80]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c91a:	7b1b      	ldrb	r3, [r3, #12]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d00d      	beq.n	801c93c <FLASH_If_Erase+0xac>
 801c920:	4b10      	ldr	r3, [pc, #64]	; (801c964 <FLASH_If_Erase+0xd4>)
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c926:	4b10      	ldr	r3, [pc, #64]	; (801c968 <FLASH_If_Erase+0xd8>)
 801c928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c92a:	1ad2      	subs	r2, r2, r3
 801c92c:	4b10      	ldr	r3, [pc, #64]	; (801c970 <FLASH_If_Erase+0xe0>)
 801c92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c930:	4413      	add	r3, r2
 801c932:	4a0f      	ldr	r2, [pc, #60]	; (801c970 <FLASH_If_Erase+0xe0>)
 801c934:	6313      	str	r3, [r2, #48]	; 0x30
 801c936:	4b0d      	ldr	r3, [pc, #52]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c938:	2200      	movs	r2, #0
 801c93a:	731a      	strb	r2, [r3, #12]
 801c93c:	4b09      	ldr	r3, [pc, #36]	; (801c964 <FLASH_If_Erase+0xd4>)
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801c942:	4a09      	ldr	r2, [pc, #36]	; (801c968 <FLASH_If_Erase+0xd8>)
 801c944:	61d3      	str	r3, [r2, #28]
 801c946:	4b09      	ldr	r3, [pc, #36]	; (801c96c <FLASH_If_Erase+0xdc>)
 801c948:	2201      	movs	r2, #1
 801c94a:	71da      	strb	r2, [r3, #7]
  #endif
  if (status != HAL_OK)
 801c94c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c950:	2b00      	cmp	r3, #0
 801c952:	d001      	beq.n	801c958 <FLASH_If_Erase+0xc8>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 801c954:	2301      	movs	r3, #1
 801c956:	e000      	b.n	801c95a <FLASH_If_Erase+0xca>
  }

  return FLASHIF_OK;
 801c958:	2300      	movs	r3, #0
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3728      	adds	r7, #40	; 0x28
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd80      	pop	{r7, pc}
 801c962:	bf00      	nop
 801c964:	200012c8 	.word	0x200012c8
 801c968:	20001308 	.word	0x20001308
 801c96c:	2000112c 	.word	0x2000112c
 801c970:	20000f10 	.word	0x20000f10

0801c974 <FLASH_If_Erase_Pages>:

//**************************************************************************************************

uint32_t FLASH_If_Erase_Pages(uint32_t bank_active, uint32_t page)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b08a      	sub	sp, #40	; 0x28
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
 801c97c:	6039      	str	r1, [r7, #0]
  gpi_watchdog_periodic();
 801c97e:	f7f1 fc27 	bl	800e1d0 <gpi_watchdog_periodic>
  uint32_t bank_to_erase, error = 0;
 801c982:	2300      	movs	r3, #0
 801c984:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 801c986:	2300      	movs	r3, #0
 801c988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (bank_active == 0)
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d102      	bne.n	801c998 <FLASH_If_Erase_Pages+0x24>
  {
    bank_to_erase = FLASH_BANK_2;
 801c992:	2302      	movs	r3, #2
 801c994:	627b      	str	r3, [r7, #36]	; 0x24
 801c996:	e001      	b.n	801c99c <FLASH_If_Erase_Pages+0x28>
  }
  else
  {
    bank_to_erase = FLASH_BANK_1;
 801c998:	2301      	movs	r3, #1
 801c99a:	627b      	str	r3, [r7, #36]	; 0x24
 801c99c:	4b2a      	ldr	r3, [pc, #168]	; (801ca48 <FLASH_If_Erase_Pages+0xd4>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }

  #if ENERGEST_CONF_ON
    ENERGEST_ON(ENERGEST_TYPE_FLASH_ERASE);
 801c9a2:	4a2a      	ldr	r2, [pc, #168]	; (801ca4c <FLASH_If_Erase_Pages+0xd8>)
 801c9a4:	6313      	str	r3, [r2, #48]	; 0x30
 801c9a6:	4b2a      	ldr	r3, [pc, #168]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801c9a8:	2201      	movs	r2, #1
 801c9aa:	731a      	strb	r2, [r3, #12]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801c9ac:	4b28      	ldr	r3, [pc, #160]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801c9ae:	79db      	ldrb	r3, [r3, #7]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d00d      	beq.n	801c9d0 <FLASH_If_Erase_Pages+0x5c>
 801c9b4:	4b24      	ldr	r3, [pc, #144]	; (801ca48 <FLASH_If_Erase_Pages+0xd4>)
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c9ba:	4b24      	ldr	r3, [pc, #144]	; (801ca4c <FLASH_If_Erase_Pages+0xd8>)
 801c9bc:	69db      	ldr	r3, [r3, #28]
 801c9be:	1ad2      	subs	r2, r2, r3
 801c9c0:	4b24      	ldr	r3, [pc, #144]	; (801ca54 <FLASH_If_Erase_Pages+0xe0>)
 801c9c2:	69db      	ldr	r3, [r3, #28]
 801c9c4:	4413      	add	r3, r2
 801c9c6:	4a23      	ldr	r2, [pc, #140]	; (801ca54 <FLASH_If_Erase_Pages+0xe0>)
 801c9c8:	61d3      	str	r3, [r2, #28]
 801c9ca:	4b21      	ldr	r3, [pc, #132]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801c9cc:	2200      	movs	r2, #0
 801c9ce:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801c9d0:	f7e5 fca2 	bl	8002318 <HAL_FLASH_Unlock>

  pEraseInit.Banks = bank_to_erase;
 801c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9d6:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = 1;
 801c9d8:	2301      	movs	r3, #1
 801c9da:	61bb      	str	r3, [r7, #24]
  pEraseInit.Page = page;
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	617b      	str	r3, [r7, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	60fb      	str	r3, [r7, #12]

  status = HAL_FLASHEx_Erase(&pEraseInit, &error);
 801c9e4:	f107 021c 	add.w	r2, r7, #28
 801c9e8:	f107 030c 	add.w	r3, r7, #12
 801c9ec:	4611      	mov	r1, r2
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7e5 fd9e 	bl	8002530 <HAL_FLASHEx_Erase>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801c9fa:	f7e5 fcaf 	bl	800235c <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    ENERGEST_OFF(ENERGEST_TYPE_FLASH_ERASE);
 801c9fe:	4b14      	ldr	r3, [pc, #80]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801ca00:	7b1b      	ldrb	r3, [r3, #12]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d00d      	beq.n	801ca22 <FLASH_If_Erase_Pages+0xae>
 801ca06:	4b10      	ldr	r3, [pc, #64]	; (801ca48 <FLASH_If_Erase_Pages+0xd4>)
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ca0c:	4b0f      	ldr	r3, [pc, #60]	; (801ca4c <FLASH_If_Erase_Pages+0xd8>)
 801ca0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca10:	1ad2      	subs	r2, r2, r3
 801ca12:	4b10      	ldr	r3, [pc, #64]	; (801ca54 <FLASH_If_Erase_Pages+0xe0>)
 801ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca16:	4413      	add	r3, r2
 801ca18:	4a0e      	ldr	r2, [pc, #56]	; (801ca54 <FLASH_If_Erase_Pages+0xe0>)
 801ca1a:	6313      	str	r3, [r2, #48]	; 0x30
 801ca1c:	4b0c      	ldr	r3, [pc, #48]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801ca1e:	2200      	movs	r2, #0
 801ca20:	731a      	strb	r2, [r3, #12]
 801ca22:	4b09      	ldr	r3, [pc, #36]	; (801ca48 <FLASH_If_Erase_Pages+0xd4>)
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801ca28:	4a08      	ldr	r2, [pc, #32]	; (801ca4c <FLASH_If_Erase_Pages+0xd8>)
 801ca2a:	61d3      	str	r3, [r2, #28]
 801ca2c:	4b08      	ldr	r3, [pc, #32]	; (801ca50 <FLASH_If_Erase_Pages+0xdc>)
 801ca2e:	2201      	movs	r2, #1
 801ca30:	71da      	strb	r2, [r3, #7]
  #endif
  if (status != HAL_OK)
 801ca32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d001      	beq.n	801ca3e <FLASH_If_Erase_Pages+0xca>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	e000      	b.n	801ca40 <FLASH_If_Erase_Pages+0xcc>
  }

  return FLASHIF_OK;
 801ca3e:	2300      	movs	r3, #0
}
 801ca40:	4618      	mov	r0, r3
 801ca42:	3728      	adds	r7, #40	; 0x28
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	200012c8 	.word	0x200012c8
 801ca4c:	20001308 	.word	0x20001308
 801ca50:	2000112c 	.word	0x2000112c
 801ca54:	20000f10 	.word	0x20000f10

0801ca58 <FLASH_If_Check_old>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK: user flash area successfully erased
  *         other: error occurred
  */
uint32_t FLASH_If_Check_old(uint32_t start)
{
 801ca58:	b480      	push	{r7}
 801ca5a:	b083      	sub	sp, #12
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASHIF_EMPTY;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	0e1b      	lsrs	r3, r3, #24
 801ca66:	2b20      	cmp	r3, #32
 801ca68:	d001      	beq.n	801ca6e <FLASH_If_Check_old+0x16>
 801ca6a:	2306      	movs	r3, #6
 801ca6c:	e000      	b.n	801ca70 <FLASH_If_Check_old+0x18>

  return FLASHIF_OK;
 801ca6e:	2300      	movs	r3, #0
}
 801ca70:	4618      	mov	r0, r3
 801ca72:	370c      	adds	r7, #12
 801ca74:	46bd      	mov	sp, r7
 801ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca7a:	4770      	bx	lr

0801ca7c <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 801ca7c:	b590      	push	{r4, r7, lr}
 801ca7e:	b087      	sub	sp, #28
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	60f8      	str	r0, [r7, #12]
 801ca84:	60b9      	str	r1, [r7, #8]
 801ca86:	607a      	str	r2, [r7, #4]
  gpi_watchdog_periodic();
 801ca88:	f7f1 fba2 	bl	800e1d0 <gpi_watchdog_periodic>
  uint32_t status = FLASHIF_OK;
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 801ca90:	2300      	movs	r3, #0
 801ca92:	613b      	str	r3, [r7, #16]

  #if ENERGEST_CONF_ON
    if (destination >= FLASH_START_BANK2)
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	4a4a      	ldr	r2, [pc, #296]	; (801cbc0 <FLASH_If_Write+0x144>)
 801ca98:	4293      	cmp	r3, r2
 801ca9a:	d908      	bls.n	801caae <FLASH_If_Write+0x32>
 801ca9c:	4b49      	ldr	r3, [pc, #292]	; (801cbc4 <FLASH_If_Write+0x148>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE_BANK2);
 801caa2:	4a49      	ldr	r2, [pc, #292]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801caa4:	62d3      	str	r3, [r2, #44]	; 0x2c
 801caa6:	4b49      	ldr	r3, [pc, #292]	; (801cbcc <FLASH_If_Write+0x150>)
 801caa8:	2201      	movs	r2, #1
 801caaa:	72da      	strb	r2, [r3, #11]
 801caac:	e007      	b.n	801cabe <FLASH_If_Write+0x42>
 801caae:	4b45      	ldr	r3, [pc, #276]	; (801cbc4 <FLASH_If_Write+0x148>)
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    else
      ENERGEST_ON(ENERGEST_TYPE_FLASH_WRITE_BANK1);
 801cab4:	4a44      	ldr	r2, [pc, #272]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801cab6:	6293      	str	r3, [r2, #40]	; 0x28
 801cab8:	4b44      	ldr	r3, [pc, #272]	; (801cbcc <FLASH_If_Write+0x150>)
 801caba:	2201      	movs	r2, #1
 801cabc:	729a      	strb	r2, [r3, #10]
    ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801cabe:	4b43      	ldr	r3, [pc, #268]	; (801cbcc <FLASH_If_Write+0x150>)
 801cac0:	79db      	ldrb	r3, [r3, #7]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d00d      	beq.n	801cae2 <FLASH_If_Write+0x66>
 801cac6:	4b3f      	ldr	r3, [pc, #252]	; (801cbc4 <FLASH_If_Write+0x148>)
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cacc:	4b3e      	ldr	r3, [pc, #248]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801cace:	69db      	ldr	r3, [r3, #28]
 801cad0:	1ad2      	subs	r2, r2, r3
 801cad2:	4b3f      	ldr	r3, [pc, #252]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cad4:	69db      	ldr	r3, [r3, #28]
 801cad6:	4413      	add	r3, r2
 801cad8:	4a3d      	ldr	r2, [pc, #244]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cada:	61d3      	str	r3, [r2, #28]
 801cadc:	4b3b      	ldr	r3, [pc, #236]	; (801cbcc <FLASH_If_Write+0x150>)
 801cade:	2200      	movs	r2, #0
 801cae0:	71da      	strb	r2, [r3, #7]
  #endif
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 801cae2:	f7e5 fc19 	bl	8002318 <HAL_FLASH_Unlock>

  /* DataLength must be a multiple of 64 bit */
  for (i = 0; (i < length / 2) && (destination <= (USER_FLASH_END_ADDRESS - 8)); i++)
 801cae6:	2300      	movs	r3, #0
 801cae8:	613b      	str	r3, [r7, #16]
 801caea:	e028      	b.n	801cb3e <FLASH_If_Write+0xc2>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source + 2*i))) == HAL_OK)
 801caec:	693b      	ldr	r3, [r7, #16]
 801caee:	00db      	lsls	r3, r3, #3
 801caf0:	68ba      	ldr	r2, [r7, #8]
 801caf2:	4413      	add	r3, r2
 801caf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 801caf8:	461a      	mov	r2, r3
 801cafa:	4623      	mov	r3, r4
 801cafc:	68f9      	ldr	r1, [r7, #12]
 801cafe:	2000      	movs	r0, #0
 801cb00:	f7e5 fb9e 	bl	8002240 <HAL_FLASH_Program>
 801cb04:	4603      	mov	r3, r0
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d113      	bne.n	801cb32 <FLASH_If_Write+0xb6>
    {
      /* Check the written value */
      if (*(uint64_t*)destination != *(uint64_t *)(p_source + 2*i))
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	e9d3 1200 	ldrd	r1, r2, [r3]
 801cb10:	693b      	ldr	r3, [r7, #16]
 801cb12:	00db      	lsls	r3, r3, #3
 801cb14:	68b8      	ldr	r0, [r7, #8]
 801cb16:	4403      	add	r3, r0
 801cb18:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cb1c:	42a2      	cmp	r2, r4
 801cb1e:	bf08      	it	eq
 801cb20:	4299      	cmpeq	r1, r3
 801cb22:	d002      	beq.n	801cb2a <FLASH_If_Write+0xae>
      {
        /* Flash content doesn't match SRAM content */
        status = FLASHIF_WRITINGCTRL_ERROR;
 801cb24:	2302      	movs	r3, #2
 801cb26:	617b      	str	r3, [r7, #20]
        break;
 801cb28:	e012      	b.n	801cb50 <FLASH_If_Write+0xd4>
      }
      /* Increment FLASH destination address */
      destination += 8;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	3308      	adds	r3, #8
 801cb2e:	60fb      	str	r3, [r7, #12]
 801cb30:	e002      	b.n	801cb38 <FLASH_If_Write+0xbc>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      status = FLASHIF_WRITING_ERROR;
 801cb32:	2303      	movs	r3, #3
 801cb34:	617b      	str	r3, [r7, #20]
      break;
 801cb36:	e00b      	b.n	801cb50 <FLASH_If_Write+0xd4>
  for (i = 0; (i < length / 2) && (destination <= (USER_FLASH_END_ADDRESS - 8)); i++)
 801cb38:	693b      	ldr	r3, [r7, #16]
 801cb3a:	3301      	adds	r3, #1
 801cb3c:	613b      	str	r3, [r7, #16]
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	085b      	lsrs	r3, r3, #1
 801cb42:	693a      	ldr	r2, [r7, #16]
 801cb44:	429a      	cmp	r2, r3
 801cb46:	d203      	bcs.n	801cb50 <FLASH_If_Write+0xd4>
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	4a22      	ldr	r2, [pc, #136]	; (801cbd4 <FLASH_If_Write+0x158>)
 801cb4c:	4293      	cmp	r3, r2
 801cb4e:	d9cd      	bls.n	801caec <FLASH_If_Write+0x70>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 801cb50:	f7e5 fc04 	bl	800235c <HAL_FLASH_Lock>
  #if ENERGEST_CONF_ON
    if (destination >= FLASH_START_BANK2)
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	4a1a      	ldr	r2, [pc, #104]	; (801cbc0 <FLASH_If_Write+0x144>)
 801cb58:	4293      	cmp	r3, r2
 801cb5a:	d924      	bls.n	801cba6 <FLASH_If_Write+0x12a>
      ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE_BANK2);
 801cb5c:	4b1b      	ldr	r3, [pc, #108]	; (801cbcc <FLASH_If_Write+0x150>)
 801cb5e:	7adb      	ldrb	r3, [r3, #11]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d00e      	beq.n	801cb82 <FLASH_If_Write+0x106>
 801cb64:	4b17      	ldr	r3, [pc, #92]	; (801cbc4 <FLASH_If_Write+0x148>)
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cb6a:	4b17      	ldr	r3, [pc, #92]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb6e:	1ad2      	subs	r2, r2, r3
 801cb70:	4b17      	ldr	r3, [pc, #92]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb74:	4413      	add	r3, r2
 801cb76:	4a16      	ldr	r2, [pc, #88]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cb78:	62d3      	str	r3, [r2, #44]	; 0x2c
 801cb7a:	4b14      	ldr	r3, [pc, #80]	; (801cbcc <FLASH_If_Write+0x150>)
 801cb7c:	2200      	movs	r2, #0
 801cb7e:	72da      	strb	r2, [r3, #11]
 801cb80:	e011      	b.n	801cba6 <FLASH_If_Write+0x12a>
    else
      ENERGEST_OFF(ENERGEST_TYPE_FLASH_WRITE_BANK1);
 801cb82:	4b12      	ldr	r3, [pc, #72]	; (801cbcc <FLASH_If_Write+0x150>)
 801cb84:	7a9b      	ldrb	r3, [r3, #10]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d00d      	beq.n	801cba6 <FLASH_If_Write+0x12a>
 801cb8a:	4b0e      	ldr	r3, [pc, #56]	; (801cbc4 <FLASH_If_Write+0x148>)
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cb90:	4b0d      	ldr	r3, [pc, #52]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801cb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb94:	1ad2      	subs	r2, r2, r3
 801cb96:	4b0e      	ldr	r3, [pc, #56]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb9a:	4413      	add	r3, r2
 801cb9c:	4a0c      	ldr	r2, [pc, #48]	; (801cbd0 <FLASH_If_Write+0x154>)
 801cb9e:	6293      	str	r3, [r2, #40]	; 0x28
 801cba0:	4b0a      	ldr	r3, [pc, #40]	; (801cbcc <FLASH_If_Write+0x150>)
 801cba2:	2200      	movs	r2, #0
 801cba4:	729a      	strb	r2, [r3, #10]
 801cba6:	4b07      	ldr	r3, [pc, #28]	; (801cbc4 <FLASH_If_Write+0x148>)
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ENERGEST_ON(ENERGEST_TYPE_CPU);
 801cbac:	4a06      	ldr	r2, [pc, #24]	; (801cbc8 <FLASH_If_Write+0x14c>)
 801cbae:	61d3      	str	r3, [r2, #28]
 801cbb0:	4b06      	ldr	r3, [pc, #24]	; (801cbcc <FLASH_If_Write+0x150>)
 801cbb2:	2201      	movs	r2, #1
 801cbb4:	71da      	strb	r2, [r3, #7]
  #endif
  return status;
 801cbb6:	697b      	ldr	r3, [r7, #20]
}
 801cbb8:	4618      	mov	r0, r3
 801cbba:	371c      	adds	r7, #28
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	bd90      	pop	{r4, r7, pc}
 801cbc0:	0807ffff 	.word	0x0807ffff
 801cbc4:	200012c8 	.word	0x200012c8
 801cbc8:	20001308 	.word	0x20001308
 801cbcc:	2000112c 	.word	0x2000112c
 801cbd0:	20000f10 	.word	0x20000f10
 801cbd4:	080ffff8 	.word	0x080ffff8

0801cbd8 <LL_FLASH_IsActiveFlag_BSY>:
  FLASH_CHK_OK = 0,
  FLASH_CHK_EMPTY
};

__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_BSY(FLASH_TypeDef *FLASHx)
{
 801cbd8:	b480      	push	{r7}
 801cbda:	b083      	sub	sp, #12
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(FLASHx->SR, FLASH_SR_BSY) == (FLASH_SR_BSY));
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	691b      	ldr	r3, [r3, #16]
 801cbe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbec:	bf0c      	ite	eq
 801cbee:	2301      	moveq	r3, #1
 801cbf0:	2300      	movne	r3, #0
 801cbf2:	b2db      	uxtb	r3, r3
}
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	370c      	adds	r7, #12
 801cbf8:	46bd      	mov	sp, r7
 801cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbfe:	4770      	bx	lr

0801cc00 <LL_FLASH_SET_OBL_Launch>:
  /* Set the OBL_Launch bit to launch the option byte loading */
__STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
{
 801cc00:	b480      	push	{r7}
 801cc02:	b083      	sub	sp, #12
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	695b      	ldr	r3, [r3, #20]
 801cc0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	615a      	str	r2, [r3, #20]
}
 801cc14:	bf00      	nop
 801cc16:	370c      	adds	r7, #12
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc1e:	4770      	bx	lr

0801cc20 <LL_FLASH_Lock>:
__STATIC_INLINE void LL_FLASH_Lock(FLASH_TypeDef *FLASHx)
{
 801cc20:	b480      	push	{r7}
 801cc22:	b083      	sub	sp, #12
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_LOCK);
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	695b      	ldr	r3, [r3, #20]
 801cc2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	615a      	str	r2, [r3, #20]
}
 801cc34:	bf00      	nop
 801cc36:	370c      	adds	r7, #12
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3e:	4770      	bx	lr

0801cc40 <LL_FLASH_LockState>:
/*read flash's states of lock or unlock*/
__STATIC_INLINE uint32_t LL_FLASH_LockState(FLASH_TypeDef *FLASHx)
{
 801cc40:	b480      	push	{r7}
 801cc42:	b083      	sub	sp, #12
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	6078      	str	r0, [r7, #4]
	return READ_BIT(FLASHx->CR,FLASH_CR_LOCK);
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	695b      	ldr	r3, [r3, #20]
 801cc4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 801cc50:	4618      	mov	r0, r3
 801cc52:	370c      	adds	r7, #12
 801cc54:	46bd      	mov	sp, r7
 801cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc5a:	4770      	bx	lr

0801cc5c <LL_FLASh_SetKey>:
/*set key for flash*/
__STATIC_INLINE void LL_FLASh_SetKey(FLASH_TypeDef *FLASHx,uint32_t key)
{
 801cc5c:	b480      	push	{r7}
 801cc5e:	b083      	sub	sp, #12
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
 801cc64:	6039      	str	r1, [r7, #0]
	WRITE_REG(FLASHx->KEYR,key);
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	683a      	ldr	r2, [r7, #0]
 801cc6a:	609a      	str	r2, [r3, #8]
}
 801cc6c:	bf00      	nop
 801cc6e:	370c      	adds	r7, #12
 801cc70:	46bd      	mov	sp, r7
 801cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc76:	4770      	bx	lr

0801cc78 <LL_FLASH_EnableProgram>:

/*EnableProgram*/
__STATIC_INLINE void LL_FLASH_EnableProgram(FLASH_TypeDef *FLASHx)
{
 801cc78:	b480      	push	{r7}
 801cc7a:	b083      	sub	sp, #12
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR,FLASH_CR_PG);
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	695b      	ldr	r3, [r3, #20]
 801cc84:	f043 0201 	orr.w	r2, r3, #1
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	615a      	str	r2, [r3, #20]
}
 801cc8c:	bf00      	nop
 801cc8e:	370c      	adds	r7, #12
 801cc90:	46bd      	mov	sp, r7
 801cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc96:	4770      	bx	lr

0801cc98 <LL_FLASH_DisenableProgram>:
/*DisenableProgram*/
__STATIC_INLINE void LL_FLASH_DisenableProgram(FLASH_TypeDef *FLASHx)
{
 801cc98:	b480      	push	{r7}
 801cc9a:	b083      	sub	sp, #12
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(FLASHx->CR,FLASH_CR_PG);
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	695b      	ldr	r3, [r3, #20]
 801cca4:	f023 0201 	bic.w	r2, r3, #1
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	615a      	str	r2, [r3, #20]
}
 801ccac:	bf00      	nop
 801ccae:	370c      	adds	r7, #12
 801ccb0:	46bd      	mov	sp, r7
 801ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccb6:	4770      	bx	lr

0801ccb8 <LL_FLASH_PageErase>:
uint8_t LL_Flash_Unlock(void);
uint32_t FLASH_If_Check(uint32_t start);
uint8_t LL_FLASH_OB_Unlock(void);

uint8_t LL_FLASH_PageErase(uint16_t PageNumber)
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b084      	sub	sp, #16
 801ccbc:	af00      	add	r7, sp, #0
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	80fb      	strh	r3, [r7, #6]
	uint32_t BankActive;
	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801ccc2:	4b29      	ldr	r3, [pc, #164]	; (801cd68 <LL_FLASH_PageErase+0xb0>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ccca:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 801cccc:	f000 f968 	bl	801cfa0 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 801ccd0:	bf00      	nop
 801ccd2:	4826      	ldr	r0, [pc, #152]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801ccd4:	f7ff ff80 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801ccd8:	4603      	mov	r3, r0
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d1f9      	bne.n	801ccd2 <LL_FLASH_PageErase+0x1a>
	{
	}
	if(PageNumber>200)
 801ccde:	88fb      	ldrh	r3, [r7, #6]
 801cce0:	2bc8      	cmp	r3, #200	; 0xc8
 801cce2:	d93b      	bls.n	801cd5c <LL_FLASH_PageErase+0xa4>
	{
		SET_BIT(FLASH->CR, FLASH_CR_PER);        //enable flash earse
 801cce4:	4b21      	ldr	r3, [pc, #132]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cce6:	695b      	ldr	r3, [r3, #20]
 801cce8:	4a20      	ldr	r2, [pc, #128]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801ccea:	f043 0302 	orr.w	r3, r3, #2
 801ccee:	6153      	str	r3, [r2, #20]
		if(BankActive == 0)                      //bank1 is active
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d106      	bne.n	801cd04 <LL_FLASH_PageErase+0x4c>
		{
			CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);   //earse bank1
 801ccf6:	4b1d      	ldr	r3, [pc, #116]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801ccf8:	695b      	ldr	r3, [r3, #20]
 801ccfa:	4a1c      	ldr	r2, [pc, #112]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801ccfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cd00:	6153      	str	r3, [r2, #20]
 801cd02:	e005      	b.n	801cd10 <LL_FLASH_PageErase+0x58>
		}
		else                                     //bank2 is active
		{
			SET_BIT(FLASH->CR, FLASH_CR_BKER);     //earse bank2
 801cd04:	4b19      	ldr	r3, [pc, #100]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd06:	695b      	ldr	r3, [r3, #20]
 801cd08:	4a18      	ldr	r2, [pc, #96]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801cd0e:	6153      	str	r3, [r2, #20]
		}
	  SET_BIT(FLASH->CR, (PageNumber << 3));   //set page to earse
 801cd10:	4b16      	ldr	r3, [pc, #88]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd12:	695b      	ldr	r3, [r3, #20]
 801cd14:	88fa      	ldrh	r2, [r7, #6]
 801cd16:	00d2      	lsls	r2, r2, #3
 801cd18:	4611      	mov	r1, r2
 801cd1a:	4a14      	ldr	r2, [pc, #80]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd1c:	430b      	orrs	r3, r1
 801cd1e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);       //start earsing...
 801cd20:	4b12      	ldr	r3, [pc, #72]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd22:	695b      	ldr	r3, [r3, #20]
 801cd24:	4a11      	ldr	r2, [pc, #68]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cd2a:	6153      	str	r3, [r2, #20]
		while (LL_FLASH_IsActiveFlag_BSY(FLASH)) //wait for flash operation complete
 801cd2c:	bf00      	nop
 801cd2e:	480f      	ldr	r0, [pc, #60]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd30:	f7ff ff52 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cd34:	4603      	mov	r3, r0
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d1f9      	bne.n	801cd2e <LL_FLASH_PageErase+0x76>
	  {
	  }
		CLEAR_BIT(FLASH->CR, FLASH_CR_PNB);      //clear page to earse
 801cd3a:	4b0c      	ldr	r3, [pc, #48]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd3c:	695b      	ldr	r3, [r3, #20]
 801cd3e:	4a0b      	ldr	r2, [pc, #44]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801cd44:	6153      	str	r3, [r2, #20]
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);      //disable flash earse
 801cd46:	4b09      	ldr	r3, [pc, #36]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd48:	695b      	ldr	r3, [r3, #20]
 801cd4a:	4a08      	ldr	r2, [pc, #32]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd4c:	f023 0302 	bic.w	r3, r3, #2
 801cd50:	6153      	str	r3, [r2, #20]
	else
	{
		return LL_ERROR;
	}

	LL_FLASH_Lock(FLASH);
 801cd52:	4806      	ldr	r0, [pc, #24]	; (801cd6c <LL_FLASH_PageErase+0xb4>)
 801cd54:	f7ff ff64 	bl	801cc20 <LL_FLASH_Lock>
	return LL_OK;
 801cd58:	2300      	movs	r3, #0
 801cd5a:	e000      	b.n	801cd5e <LL_FLASH_PageErase+0xa6>
		return LL_ERROR;
 801cd5c:	2301      	movs	r3, #1
}
 801cd5e:	4618      	mov	r0, r3
 801cd60:	3710      	adds	r7, #16
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}
 801cd66:	bf00      	nop
 801cd68:	40010000 	.word	0x40010000
 801cd6c:	40022000 	.word	0x40022000

0801cd70 <LL_FLASH_Program64>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint8_t LL_FLASH_Program64(uint32_t faddr,uint32_t* pData)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b084      	sub	sp, #16
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
 801cd78:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 801cd7e:	f000 f90f 	bl	801cfa0 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801cd82:	bf00      	nop
 801cd84:	4818      	ldr	r0, [pc, #96]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cd86:	f7ff ff27 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d1f9      	bne.n	801cd84 <LL_FLASH_Program64+0x14>
	{
	}
	LL_FLASH_EnableProgram(FLASH);              //flash program enable
 801cd90:	4815      	ldr	r0, [pc, #84]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cd92:	f7ff ff71 	bl	801cc78 <LL_FLASH_EnableProgram>
	/* Program the double word */
  *(__IO uint32_t*)faddr = *pData;            //program 4 bytes, little endian
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	683a      	ldr	r2, [r7, #0]
 801cd9a:	6812      	ldr	r2, [r2, #0]
 801cd9c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(faddr+4) = *(pData+1);
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	3304      	adds	r3, #4
 801cda2:	461a      	mov	r2, r3
 801cda4:	683b      	ldr	r3, [r7, #0]
 801cda6:	685b      	ldr	r3, [r3, #4]
 801cda8:	6013      	str	r3, [r2, #0]

	prog_bit = FLASH_CR_PG;
 801cdaa:	2301      	movs	r3, #1
 801cdac:	60fb      	str	r3, [r7, #12]
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801cdae:	bf00      	nop
 801cdb0:	480d      	ldr	r0, [pc, #52]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cdb2:	f7ff ff11 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1f9      	bne.n	801cdb0 <LL_FLASH_Program64+0x40>
	{
	}
	if(prog_bit!=0)
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d006      	beq.n	801cdd0 <LL_FLASH_Program64+0x60>
	{
		CLEAR_BIT(FLASH->CR,prog_bit);
 801cdc2:	4b09      	ldr	r3, [pc, #36]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cdc4:	695a      	ldr	r2, [r3, #20]
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	43db      	mvns	r3, r3
 801cdca:	4907      	ldr	r1, [pc, #28]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cdcc:	4013      	ands	r3, r2
 801cdce:	614b      	str	r3, [r1, #20]
	}
	LL_FLASH_DisenableProgram(FLASH);
 801cdd0:	4805      	ldr	r0, [pc, #20]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cdd2:	f7ff ff61 	bl	801cc98 <LL_FLASH_DisenableProgram>
	LL_FLASH_Lock(FLASH);
 801cdd6:	4804      	ldr	r0, [pc, #16]	; (801cde8 <LL_FLASH_Program64+0x78>)
 801cdd8:	f7ff ff22 	bl	801cc20 <LL_FLASH_Lock>
	return LL_OK;
 801cddc:	2300      	movs	r3, #0
}
 801cdde:	4618      	mov	r0, r3
 801cde0:	3710      	adds	r7, #16
 801cde2:	46bd      	mov	sp, r7
 801cde4:	bd80      	pop	{r7, pc}
 801cde6:	bf00      	nop
 801cde8:	40022000 	.word	0x40022000

0801cdec <LL_FLASH_Program64s>:

uint8_t LL_FLASH_Program64s(uint32_t destination, uint32_t* pData,uint16_t DataLen)
{
 801cdec:	b590      	push	{r4, r7, lr}
 801cdee:	b087      	sub	sp, #28
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	60f8      	str	r0, [r7, #12]
 801cdf4:	60b9      	str	r1, [r7, #8]
 801cdf6:	4613      	mov	r3, r2
 801cdf8:	80fb      	strh	r3, [r7, #6]
	uint32_t prog_bit = 0;
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	613b      	str	r3, [r7, #16]
	uint16_t i = 0;
 801cdfe:	2300      	movs	r3, #0
 801ce00:	82fb      	strh	r3, [r7, #22]
	LL_Flash_Unlock();
 801ce02:	f000 f8cd 	bl	801cfa0 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))       //wait for flash operation complete
 801ce06:	bf00      	nop
 801ce08:	482c      	ldr	r0, [pc, #176]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce0a:	f7ff fee5 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d1f9      	bne.n	801ce08 <LL_FLASH_Program64s+0x1c>
  {
	}
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 801ce14:	2300      	movs	r3, #0
 801ce16:	82fb      	strh	r3, [r7, #22]
 801ce18:	e03e      	b.n	801ce98 <LL_FLASH_Program64s+0xac>
	{
		LL_FLASH_EnableProgram(FLASH);              //flash program enable
 801ce1a:	4828      	ldr	r0, [pc, #160]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce1c:	f7ff ff2c 	bl	801cc78 <LL_FLASH_EnableProgram>
		while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801ce20:	bf00      	nop
 801ce22:	4826      	ldr	r0, [pc, #152]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce24:	f7ff fed8 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d1f9      	bne.n	801ce22 <LL_FLASH_Program64s+0x36>
	  {
	  }
	  /* Program the double word */
    *(__IO uint32_t*)(destination) = *(pData+2*i);            //program 4 bytes, little endian
 801ce2e:	8afb      	ldrh	r3, [r7, #22]
 801ce30:	00db      	lsls	r3, r3, #3
 801ce32:	461a      	mov	r2, r3
 801ce34:	68bb      	ldr	r3, [r7, #8]
 801ce36:	441a      	add	r2, r3
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	6812      	ldr	r2, [r2, #0]
 801ce3c:	601a      	str	r2, [r3, #0]
    *(__IO uint32_t*)(destination+4) = *(pData+2*i+1);
 801ce3e:	8afb      	ldrh	r3, [r7, #22]
 801ce40:	00db      	lsls	r3, r3, #3
 801ce42:	3304      	adds	r3, #4
 801ce44:	68ba      	ldr	r2, [r7, #8]
 801ce46:	4413      	add	r3, r2
 801ce48:	68fa      	ldr	r2, [r7, #12]
 801ce4a:	3204      	adds	r2, #4
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	6013      	str	r3, [r2, #0]
		if(*(uint64_t*)destination==*(uint64_t*)(pData+2*i))
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	e9d3 1200 	ldrd	r1, r2, [r3]
 801ce56:	8afb      	ldrh	r3, [r7, #22]
 801ce58:	00db      	lsls	r3, r3, #3
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	4403      	add	r3, r0
 801ce60:	e9d3 3400 	ldrd	r3, r4, [r3]
 801ce64:	42a2      	cmp	r2, r4
 801ce66:	bf08      	it	eq
 801ce68:	4299      	cmpeq	r1, r3
 801ce6a:	d10c      	bne.n	801ce86 <LL_FLASH_Program64s+0x9a>
		{
			destination += 8;
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	3308      	adds	r3, #8
 801ce70:	60fb      	str	r3, [r7, #12]
		  prog_bit = FLASH_CR_PG;
 801ce72:	2301      	movs	r3, #1
 801ce74:	613b      	str	r3, [r7, #16]
			CLEAR_BIT(FLASH->CR,prog_bit);
 801ce76:	4b11      	ldr	r3, [pc, #68]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce78:	695a      	ldr	r2, [r3, #20]
 801ce7a:	693b      	ldr	r3, [r7, #16]
 801ce7c:	43db      	mvns	r3, r3
 801ce7e:	490f      	ldr	r1, [pc, #60]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce80:	4013      	ands	r3, r2
 801ce82:	614b      	str	r3, [r1, #20]
 801ce84:	e002      	b.n	801ce8c <LL_FLASH_Program64s+0xa0>
		}
		else
		  i = i-1;
 801ce86:	8afb      	ldrh	r3, [r7, #22]
 801ce88:	3b01      	subs	r3, #1
 801ce8a:	82fb      	strh	r3, [r7, #22]
		LL_FLASH_DisenableProgram(FLASH);
 801ce8c:	480b      	ldr	r0, [pc, #44]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ce8e:	f7ff ff03 	bl	801cc98 <LL_FLASH_DisenableProgram>
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 801ce92:	8afb      	ldrh	r3, [r7, #22]
 801ce94:	3301      	adds	r3, #1
 801ce96:	82fb      	strh	r3, [r7, #22]
 801ce98:	88fb      	ldrh	r3, [r7, #6]
 801ce9a:	085b      	lsrs	r3, r3, #1
 801ce9c:	b29b      	uxth	r3, r3
 801ce9e:	8afa      	ldrh	r2, [r7, #22]
 801cea0:	429a      	cmp	r2, r3
 801cea2:	d203      	bcs.n	801ceac <LL_FLASH_Program64s+0xc0>
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	4a06      	ldr	r2, [pc, #24]	; (801cec0 <LL_FLASH_Program64s+0xd4>)
 801cea8:	4293      	cmp	r3, r2
 801ceaa:	d9b6      	bls.n	801ce1a <LL_FLASH_Program64s+0x2e>
	}
	LL_FLASH_Lock(FLASH);
 801ceac:	4803      	ldr	r0, [pc, #12]	; (801cebc <LL_FLASH_Program64s+0xd0>)
 801ceae:	f7ff feb7 	bl	801cc20 <LL_FLASH_Lock>
	return LL_OK;
 801ceb2:	2300      	movs	r3, #0
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	371c      	adds	r7, #28
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	bd90      	pop	{r4, r7, pc}
 801cebc:	40022000 	.word	0x40022000
 801cec0:	0807fff8 	.word	0x0807fff8

0801cec4 <STMFLASH_Read32>:

uint32_t STMFLASH_Read32( uint32_t faddr )
{
 801cec4:	b480      	push	{r7}
 801cec6:	b083      	sub	sp, #12
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	6078      	str	r0, [r7, #4]
  return *(__IO uint32_t*)faddr;
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
}
 801ced0:	4618      	mov	r0, r3
 801ced2:	370c      	adds	r7, #12
 801ced4:	46bd      	mov	sp, r7
 801ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceda:	4770      	bx	lr

0801cedc <STMFLASH_BankSwitch>:

uint8_t STMFLASH_BankSwitch(void)
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b082      	sub	sp, #8
 801cee0:	af00      	add	r7, sp, #0
	uint8_t result;
	uint32_t BankActive = 0;
 801cee2:	2300      	movs	r3, #0
 801cee4:	603b      	str	r3, [r7, #0]

	LL_FLASH_Lock(FLASH);
 801cee6:	482c      	ldr	r0, [pc, #176]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cee8:	f7ff fe9a 	bl	801cc20 <LL_FLASH_Lock>
	/* Clear OPTVERR bit set on virgin samples */
	if((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { SET_BIT(FLASH->ECCR, ((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }

  if((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { WRITE_REG(FLASH->SR, ((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }
 801ceec:	4b2a      	ldr	r3, [pc, #168]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801ceee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801cef2:	611a      	str	r2, [r3, #16]

	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801cef4:	4b29      	ldr	r3, [pc, #164]	; (801cf9c <STMFLASH_BankSwitch+0xc0>)
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cefc:	603b      	str	r3, [r7, #0]
  result = LL_Flash_Unlock();
 801cefe:	f000 f84f 	bl	801cfa0 <LL_Flash_Unlock>
 801cf02:	4603      	mov	r3, r0
 801cf04:	71fb      	strb	r3, [r7, #7]

	if( result == LL_OK)
 801cf06:	79fb      	ldrb	r3, [r7, #7]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d140      	bne.n	801cf8e <STMFLASH_BankSwitch+0xb2>
	{
		  result = LL_FLASH_OB_Unlock();
 801cf0c:	f000 f868 	bl	801cfe0 <LL_FLASH_OB_Unlock>
 801cf10:	4603      	mov	r3, r0
 801cf12:	71fb      	strb	r3, [r7, #7]
		  if((READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == RESET))
 801cf14:	4b20      	ldr	r3, [pc, #128]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf16:	695b      	ldr	r3, [r3, #20]
 801cf18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d116      	bne.n	801cf4e <STMFLASH_BankSwitch+0x72>
			{
				  while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801cf20:	bf00      	nop
 801cf22:	481d      	ldr	r0, [pc, #116]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf24:	f7ff fe58 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d1f9      	bne.n	801cf22 <STMFLASH_BankSwitch+0x46>
					{
					}
					/* When no firmware at bank2, board is working at bank1 with BFB2 flag set. So BFB2 flag should be clear by checking bank (when FUT is at bank 1)instead of BFB2. */
					if (BankActive != 0)
 801cf2e:	683b      	ldr	r3, [r7, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d006      	beq.n	801cf42 <STMFLASH_BankSwitch+0x66>
					{
						CLEAR_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 801cf34:	4b18      	ldr	r3, [pc, #96]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf36:	6a1b      	ldr	r3, [r3, #32]
 801cf38:	4a17      	ldr	r2, [pc, #92]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cf3e:	6213      	str	r3, [r2, #32]
 801cf40:	e005      	b.n	801cf4e <STMFLASH_BankSwitch+0x72>
					}
					else
					{
						SET_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 801cf42:	4b15      	ldr	r3, [pc, #84]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf44:	6a1b      	ldr	r3, [r3, #32]
 801cf46:	4a14      	ldr	r2, [pc, #80]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf4c:	6213      	str	r3, [r2, #32]
					}
			}
			/* Set OPTSTRT Bit */
			SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 801cf4e:	4b12      	ldr	r3, [pc, #72]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf50:	695b      	ldr	r3, [r3, #20]
 801cf52:	4a11      	ldr	r2, [pc, #68]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cf58:	6153      	str	r3, [r2, #20]
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801cf5a:	bf00      	nop
 801cf5c:	480e      	ldr	r0, [pc, #56]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf5e:	f7ff fe3b 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cf62:	4603      	mov	r3, r0
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d1f9      	bne.n	801cf5c <STMFLASH_BankSwitch+0x80>
			{
			}
			/* If the option byte program operation is completed, disable the OPTSTRT Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 801cf68:	4b0b      	ldr	r3, [pc, #44]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf6a:	695b      	ldr	r3, [r3, #20]
 801cf6c:	4a0a      	ldr	r2, [pc, #40]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801cf72:	6153      	str	r3, [r2, #20]

			/* Set the bit to force the option byte reloading */
			if (result == LL_OK)
 801cf74:	79fb      	ldrb	r3, [r7, #7]
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d102      	bne.n	801cf80 <STMFLASH_BankSwitch+0xa4>
			{
				LL_FLASH_SET_OBL_Launch(FLASH);
 801cf7a:	4807      	ldr	r0, [pc, #28]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf7c:	f7ff fe40 	bl	801cc00 <LL_FLASH_SET_OBL_Launch>
			}
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 801cf80:	bf00      	nop
 801cf82:	4805      	ldr	r0, [pc, #20]	; (801cf98 <STMFLASH_BankSwitch+0xbc>)
 801cf84:	f7ff fe28 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cf88:	4603      	mov	r3, r0
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d1f9      	bne.n	801cf82 <STMFLASH_BankSwitch+0xa6>
			{
			}
	}
	return result;
 801cf8e:	79fb      	ldrb	r3, [r7, #7]
}
 801cf90:	4618      	mov	r0, r3
 801cf92:	3708      	adds	r7, #8
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	40022000 	.word	0x40022000
 801cf9c:	40010000 	.word	0x40010000

0801cfa0 <LL_Flash_Unlock>:

uint8_t LL_Flash_Unlock(void)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	af00      	add	r7, sp, #0
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 801cfa4:	bf00      	nop
 801cfa6:	480b      	ldr	r0, [pc, #44]	; (801cfd4 <LL_Flash_Unlock+0x34>)
 801cfa8:	f7ff fe16 	bl	801cbd8 <LL_FLASH_IsActiveFlag_BSY>
 801cfac:	4603      	mov	r3, r0
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d1f9      	bne.n	801cfa6 <LL_Flash_Unlock+0x6>
	{
	}
	if (LL_FLASH_LockState(FLASH)!=0)
 801cfb2:	4808      	ldr	r0, [pc, #32]	; (801cfd4 <LL_Flash_Unlock+0x34>)
 801cfb4:	f7ff fe44 	bl	801cc40 <LL_FLASH_LockState>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d007      	beq.n	801cfce <LL_Flash_Unlock+0x2e>
	{
		LL_FLASh_SetKey(FLASH,FLASH_KEY1);
 801cfbe:	4906      	ldr	r1, [pc, #24]	; (801cfd8 <LL_Flash_Unlock+0x38>)
 801cfc0:	4804      	ldr	r0, [pc, #16]	; (801cfd4 <LL_Flash_Unlock+0x34>)
 801cfc2:	f7ff fe4b 	bl	801cc5c <LL_FLASh_SetKey>
		LL_FLASh_SetKey(FLASH,FLASH_KEY2);
 801cfc6:	4905      	ldr	r1, [pc, #20]	; (801cfdc <LL_Flash_Unlock+0x3c>)
 801cfc8:	4802      	ldr	r0, [pc, #8]	; (801cfd4 <LL_Flash_Unlock+0x34>)
 801cfca:	f7ff fe47 	bl	801cc5c <LL_FLASh_SetKey>
	}
	return LL_OK;
 801cfce:	2300      	movs	r3, #0
}
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	bd80      	pop	{r7, pc}
 801cfd4:	40022000 	.word	0x40022000
 801cfd8:	45670123 	.word	0x45670123
 801cfdc:	cdef89ab 	.word	0xcdef89ab

0801cfe0 <LL_FLASH_OB_Unlock>:
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASH_CHK_EMPTY;
  return FLASH_CHK_OK;
}
uint8_t LL_FLASH_OB_Unlock(void)
{
 801cfe0:	b480      	push	{r7}
 801cfe2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != RESET)
 801cfe4:	4b09      	ldr	r3, [pc, #36]	; (801d00c <LL_FLASH_OB_Unlock+0x2c>)
 801cfe6:	695b      	ldr	r3, [r3, #20]
 801cfe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d007      	beq.n	801d000 <LL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);//allow programming
 801cff0:	4b06      	ldr	r3, [pc, #24]	; (801d00c <LL_FLASH_OB_Unlock+0x2c>)
 801cff2:	4a07      	ldr	r2, [pc, #28]	; (801d010 <LL_FLASH_OB_Unlock+0x30>)
 801cff4:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);//allow erasing
 801cff6:	4b05      	ldr	r3, [pc, #20]	; (801d00c <LL_FLASH_OB_Unlock+0x2c>)
 801cff8:	4a06      	ldr	r2, [pc, #24]	; (801d014 <LL_FLASH_OB_Unlock+0x34>)
 801cffa:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return LL_ERROR;
  }
  return LL_OK;
 801cffc:	2300      	movs	r3, #0
 801cffe:	e000      	b.n	801d002 <LL_FLASH_OB_Unlock+0x22>
    return LL_ERROR;
 801d000:	2301      	movs	r3, #1
}
 801d002:	4618      	mov	r0, r3
 801d004:	46bd      	mov	sp, r7
 801d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d00a:	4770      	bx	lr
 801d00c:	40022000 	.word	0x40022000
 801d010:	08192a3b 	.word	0x08192a3b
 801d014:	4c5d6e7f 	.word	0x4c5d6e7f

0801d018 <NVIC_SystemReset>:
{
 801d018:	b480      	push	{r7}
 801d01a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801d01c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801d020:	4b05      	ldr	r3, [pc, #20]	; (801d038 <NVIC_SystemReset+0x20>)
 801d022:	68db      	ldr	r3, [r3, #12]
 801d024:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801d028:	4903      	ldr	r1, [pc, #12]	; (801d038 <NVIC_SystemReset+0x20>)
 801d02a:	4b04      	ldr	r3, [pc, #16]	; (801d03c <NVIC_SystemReset+0x24>)
 801d02c:	4313      	orrs	r3, r2
 801d02e:	60cb      	str	r3, [r1, #12]
 801d030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801d034:	bf00      	nop
    __NOP();
 801d036:	e7fd      	b.n	801d034 <NVIC_SystemReset+0x1c>
 801d038:	e000ed00 	.word	0xe000ed00
 801d03c:	05fa0004 	.word	0x05fa0004

0801d040 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
static void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 801d040:	b480      	push	{r7}
 801d042:	b087      	sub	sp, #28
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
 801d048:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 801d04a:	4b25      	ldr	r3, [pc, #148]	; (801d0e0 <Int2Str+0xa0>)
 801d04c:	613b      	str	r3, [r7, #16]
 801d04e:	2300      	movs	r3, #0
 801d050:	60fb      	str	r3, [r7, #12]
 801d052:	2300      	movs	r3, #0
 801d054:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 801d056:	2300      	movs	r3, #0
 801d058:	617b      	str	r3, [r7, #20]
 801d05a:	e038      	b.n	801d0ce <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 801d05c:	683a      	ldr	r2, [r7, #0]
 801d05e:	693b      	ldr	r3, [r7, #16]
 801d060:	fbb2 f3f3 	udiv	r3, r2, r3
 801d064:	b2da      	uxtb	r2, r3
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	1c59      	adds	r1, r3, #1
 801d06a:	60f9      	str	r1, [r7, #12]
 801d06c:	6879      	ldr	r1, [r7, #4]
 801d06e:	440b      	add	r3, r1
 801d070:	3230      	adds	r2, #48	; 0x30
 801d072:	b2d2      	uxtb	r2, r2
 801d074:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 801d076:	683b      	ldr	r3, [r7, #0]
 801d078:	693a      	ldr	r2, [r7, #16]
 801d07a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d07e:	6939      	ldr	r1, [r7, #16]
 801d080:	fb01 f202 	mul.w	r2, r1, r2
 801d084:	1a9b      	subs	r3, r3, r2
 801d086:	603b      	str	r3, [r7, #0]
    divider /= 10;
 801d088:	693b      	ldr	r3, [r7, #16]
 801d08a:	4a16      	ldr	r2, [pc, #88]	; (801d0e4 <Int2Str+0xa4>)
 801d08c:	fba2 2303 	umull	r2, r3, r2, r3
 801d090:	08db      	lsrs	r3, r3, #3
 801d092:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	3b01      	subs	r3, #1
 801d098:	687a      	ldr	r2, [r7, #4]
 801d09a:	4413      	add	r3, r2
 801d09c:	781b      	ldrb	r3, [r3, #0]
 801d09e:	2b30      	cmp	r3, #48	; 0x30
 801d0a0:	bf0c      	ite	eq
 801d0a2:	2301      	moveq	r3, #1
 801d0a4:	2300      	movne	r3, #0
 801d0a6:	b2da      	uxtb	r2, r3
 801d0a8:	68bb      	ldr	r3, [r7, #8]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	bf0c      	ite	eq
 801d0ae:	2301      	moveq	r3, #1
 801d0b0:	2300      	movne	r3, #0
 801d0b2:	b2db      	uxtb	r3, r3
 801d0b4:	4013      	ands	r3, r2
 801d0b6:	b2db      	uxtb	r3, r3
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d002      	beq.n	801d0c2 <Int2Str+0x82>
    {
      pos = 0;
 801d0bc:	2300      	movs	r3, #0
 801d0be:	60fb      	str	r3, [r7, #12]
 801d0c0:	e002      	b.n	801d0c8 <Int2Str+0x88>
    }
    else
    {
      status++;
 801d0c2:	68bb      	ldr	r3, [r7, #8]
 801d0c4:	3301      	adds	r3, #1
 801d0c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 801d0c8:	697b      	ldr	r3, [r7, #20]
 801d0ca:	3301      	adds	r3, #1
 801d0cc:	617b      	str	r3, [r7, #20]
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	2b09      	cmp	r3, #9
 801d0d2:	d9c3      	bls.n	801d05c <Int2Str+0x1c>
    }
  }
}
 801d0d4:	bf00      	nop
 801d0d6:	371c      	adds	r7, #28
 801d0d8:	46bd      	mov	sp, r7
 801d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0de:	4770      	bx	lr
 801d0e0:	3b9aca00 	.word	0x3b9aca00
 801d0e4:	cccccccd 	.word	0xcccccccd

0801d0e8 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
static uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 801d0e8:	b480      	push	{r7}
 801d0ea:	b087      	sub	sp, #28
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
 801d0f0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	617b      	str	r3, [r7, #20]
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 801d0fa:	2300      	movs	r3, #0
 801d0fc:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	781b      	ldrb	r3, [r3, #0]
 801d102:	2b30      	cmp	r3, #48	; 0x30
 801d104:	f040 80d7 	bne.w	801d2b6 <Str2Int+0x1ce>
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	3301      	adds	r3, #1
 801d10c:	781b      	ldrb	r3, [r3, #0]
 801d10e:	2b78      	cmp	r3, #120	; 0x78
 801d110:	d005      	beq.n	801d11e <Str2Int+0x36>
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	3301      	adds	r3, #1
 801d116:	781b      	ldrb	r3, [r3, #0]
 801d118:	2b58      	cmp	r3, #88	; 0x58
 801d11a:	f040 80cc 	bne.w	801d2b6 <Str2Int+0x1ce>
  {
    i = 2;
 801d11e:	2302      	movs	r3, #2
 801d120:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 801d122:	e057      	b.n	801d1d4 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 801d124:	687a      	ldr	r2, [r7, #4]
 801d126:	697b      	ldr	r3, [r7, #20]
 801d128:	4413      	add	r3, r2
 801d12a:	781b      	ldrb	r3, [r3, #0]
 801d12c:	2b40      	cmp	r3, #64	; 0x40
 801d12e:	d905      	bls.n	801d13c <Str2Int+0x54>
 801d130:	687a      	ldr	r2, [r7, #4]
 801d132:	697b      	ldr	r3, [r7, #20]
 801d134:	4413      	add	r3, r2
 801d136:	781b      	ldrb	r3, [r3, #0]
 801d138:	2b46      	cmp	r3, #70	; 0x46
 801d13a:	d917      	bls.n	801d16c <Str2Int+0x84>
 801d13c:	687a      	ldr	r2, [r7, #4]
 801d13e:	697b      	ldr	r3, [r7, #20]
 801d140:	4413      	add	r3, r2
 801d142:	781b      	ldrb	r3, [r3, #0]
 801d144:	2b60      	cmp	r3, #96	; 0x60
 801d146:	d905      	bls.n	801d154 <Str2Int+0x6c>
 801d148:	687a      	ldr	r2, [r7, #4]
 801d14a:	697b      	ldr	r3, [r7, #20]
 801d14c:	4413      	add	r3, r2
 801d14e:	781b      	ldrb	r3, [r3, #0]
 801d150:	2b66      	cmp	r3, #102	; 0x66
 801d152:	d90b      	bls.n	801d16c <Str2Int+0x84>
 801d154:	687a      	ldr	r2, [r7, #4]
 801d156:	697b      	ldr	r3, [r7, #20]
 801d158:	4413      	add	r3, r2
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	2b2f      	cmp	r3, #47	; 0x2f
 801d15e:	d936      	bls.n	801d1ce <Str2Int+0xe6>
 801d160:	687a      	ldr	r2, [r7, #4]
 801d162:	697b      	ldr	r3, [r7, #20]
 801d164:	4413      	add	r3, r2
 801d166:	781b      	ldrb	r3, [r3, #0]
 801d168:	2b39      	cmp	r3, #57	; 0x39
 801d16a:	d830      	bhi.n	801d1ce <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	011b      	lsls	r3, r3, #4
 801d170:	6879      	ldr	r1, [r7, #4]
 801d172:	697a      	ldr	r2, [r7, #20]
 801d174:	440a      	add	r2, r1
 801d176:	7812      	ldrb	r2, [r2, #0]
 801d178:	2a2f      	cmp	r2, #47	; 0x2f
 801d17a:	d90b      	bls.n	801d194 <Str2Int+0xac>
 801d17c:	6879      	ldr	r1, [r7, #4]
 801d17e:	697a      	ldr	r2, [r7, #20]
 801d180:	440a      	add	r2, r1
 801d182:	7812      	ldrb	r2, [r2, #0]
 801d184:	2a39      	cmp	r2, #57	; 0x39
 801d186:	d805      	bhi.n	801d194 <Str2Int+0xac>
 801d188:	6879      	ldr	r1, [r7, #4]
 801d18a:	697a      	ldr	r2, [r7, #20]
 801d18c:	440a      	add	r2, r1
 801d18e:	7812      	ldrb	r2, [r2, #0]
 801d190:	3a30      	subs	r2, #48	; 0x30
 801d192:	e016      	b.n	801d1c2 <Str2Int+0xda>
 801d194:	6879      	ldr	r1, [r7, #4]
 801d196:	697a      	ldr	r2, [r7, #20]
 801d198:	440a      	add	r2, r1
 801d19a:	7812      	ldrb	r2, [r2, #0]
 801d19c:	2a40      	cmp	r2, #64	; 0x40
 801d19e:	d90b      	bls.n	801d1b8 <Str2Int+0xd0>
 801d1a0:	6879      	ldr	r1, [r7, #4]
 801d1a2:	697a      	ldr	r2, [r7, #20]
 801d1a4:	440a      	add	r2, r1
 801d1a6:	7812      	ldrb	r2, [r2, #0]
 801d1a8:	2a46      	cmp	r2, #70	; 0x46
 801d1aa:	d805      	bhi.n	801d1b8 <Str2Int+0xd0>
 801d1ac:	6879      	ldr	r1, [r7, #4]
 801d1ae:	697a      	ldr	r2, [r7, #20]
 801d1b0:	440a      	add	r2, r1
 801d1b2:	7812      	ldrb	r2, [r2, #0]
 801d1b4:	3a37      	subs	r2, #55	; 0x37
 801d1b6:	e004      	b.n	801d1c2 <Str2Int+0xda>
 801d1b8:	6879      	ldr	r1, [r7, #4]
 801d1ba:	697a      	ldr	r2, [r7, #20]
 801d1bc:	440a      	add	r2, r1
 801d1be:	7812      	ldrb	r2, [r2, #0]
 801d1c0:	3a57      	subs	r2, #87	; 0x57
 801d1c2:	4413      	add	r3, r2
 801d1c4:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 801d1c6:	697b      	ldr	r3, [r7, #20]
 801d1c8:	3301      	adds	r3, #1
 801d1ca:	617b      	str	r3, [r7, #20]
 801d1cc:	e002      	b.n	801d1d4 <Str2Int+0xec>
        res = 0;
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	613b      	str	r3, [r7, #16]
        break;
 801d1d2:	e008      	b.n	801d1e6 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	2b0a      	cmp	r3, #10
 801d1d8:	d805      	bhi.n	801d1e6 <Str2Int+0xfe>
 801d1da:	687a      	ldr	r2, [r7, #4]
 801d1dc:	697b      	ldr	r3, [r7, #20]
 801d1de:	4413      	add	r3, r2
 801d1e0:	781b      	ldrb	r3, [r3, #0]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d19e      	bne.n	801d124 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 801d1e6:	687a      	ldr	r2, [r7, #4]
 801d1e8:	697b      	ldr	r3, [r7, #20]
 801d1ea:	4413      	add	r3, r2
 801d1ec:	781b      	ldrb	r3, [r3, #0]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d167      	bne.n	801d2c2 <Str2Int+0x1da>
    {
      *p_intnum = val;
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	68fa      	ldr	r2, [r7, #12]
 801d1f6:	601a      	str	r2, [r3, #0]
      res = 1;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 801d1fc:	e061      	b.n	801d2c2 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 801d1fe:	687a      	ldr	r2, [r7, #4]
 801d200:	697b      	ldr	r3, [r7, #20]
 801d202:	4413      	add	r3, r2
 801d204:	781b      	ldrb	r3, [r3, #0]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d105      	bne.n	801d216 <Str2Int+0x12e>
      {
        *p_intnum = val;
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	68fa      	ldr	r2, [r7, #12]
 801d20e:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 801d210:	2301      	movs	r3, #1
 801d212:	613b      	str	r3, [r7, #16]
 801d214:	e04c      	b.n	801d2b0 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 801d216:	687a      	ldr	r2, [r7, #4]
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	4413      	add	r3, r2
 801d21c:	781b      	ldrb	r3, [r3, #0]
 801d21e:	2b6b      	cmp	r3, #107	; 0x6b
 801d220:	d005      	beq.n	801d22e <Str2Int+0x146>
 801d222:	687a      	ldr	r2, [r7, #4]
 801d224:	697b      	ldr	r3, [r7, #20]
 801d226:	4413      	add	r3, r2
 801d228:	781b      	ldrb	r3, [r3, #0]
 801d22a:	2b4b      	cmp	r3, #75	; 0x4b
 801d22c:	d10b      	bne.n	801d246 <Str2Int+0x15e>
 801d22e:	697b      	ldr	r3, [r7, #20]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d008      	beq.n	801d246 <Str2Int+0x15e>
      {
        val = val << 10;
 801d234:	68fb      	ldr	r3, [r7, #12]
 801d236:	029b      	lsls	r3, r3, #10
 801d238:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 801d23a:	683b      	ldr	r3, [r7, #0]
 801d23c:	68fa      	ldr	r2, [r7, #12]
 801d23e:	601a      	str	r2, [r3, #0]
        res = 1;
 801d240:	2301      	movs	r3, #1
 801d242:	613b      	str	r3, [r7, #16]
 801d244:	e034      	b.n	801d2b0 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 801d246:	687a      	ldr	r2, [r7, #4]
 801d248:	697b      	ldr	r3, [r7, #20]
 801d24a:	4413      	add	r3, r2
 801d24c:	781b      	ldrb	r3, [r3, #0]
 801d24e:	2b6d      	cmp	r3, #109	; 0x6d
 801d250:	d005      	beq.n	801d25e <Str2Int+0x176>
 801d252:	687a      	ldr	r2, [r7, #4]
 801d254:	697b      	ldr	r3, [r7, #20]
 801d256:	4413      	add	r3, r2
 801d258:	781b      	ldrb	r3, [r3, #0]
 801d25a:	2b4d      	cmp	r3, #77	; 0x4d
 801d25c:	d10b      	bne.n	801d276 <Str2Int+0x18e>
 801d25e:	697b      	ldr	r3, [r7, #20]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d008      	beq.n	801d276 <Str2Int+0x18e>
      {
        val = val << 20;
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	051b      	lsls	r3, r3, #20
 801d268:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 801d26a:	683b      	ldr	r3, [r7, #0]
 801d26c:	68fa      	ldr	r2, [r7, #12]
 801d26e:	601a      	str	r2, [r3, #0]
        res = 1;
 801d270:	2301      	movs	r3, #1
 801d272:	613b      	str	r3, [r7, #16]
 801d274:	e01c      	b.n	801d2b0 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 801d276:	687a      	ldr	r2, [r7, #4]
 801d278:	697b      	ldr	r3, [r7, #20]
 801d27a:	4413      	add	r3, r2
 801d27c:	781b      	ldrb	r3, [r3, #0]
 801d27e:	2b2f      	cmp	r3, #47	; 0x2f
 801d280:	d913      	bls.n	801d2aa <Str2Int+0x1c2>
 801d282:	687a      	ldr	r2, [r7, #4]
 801d284:	697b      	ldr	r3, [r7, #20]
 801d286:	4413      	add	r3, r2
 801d288:	781b      	ldrb	r3, [r3, #0]
 801d28a:	2b39      	cmp	r3, #57	; 0x39
 801d28c:	d80d      	bhi.n	801d2aa <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 801d28e:	68fa      	ldr	r2, [r7, #12]
 801d290:	4613      	mov	r3, r2
 801d292:	009b      	lsls	r3, r3, #2
 801d294:	4413      	add	r3, r2
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	4619      	mov	r1, r3
 801d29a:	687a      	ldr	r2, [r7, #4]
 801d29c:	697b      	ldr	r3, [r7, #20]
 801d29e:	4413      	add	r3, r2
 801d2a0:	781b      	ldrb	r3, [r3, #0]
 801d2a2:	440b      	add	r3, r1
 801d2a4:	3b30      	subs	r3, #48	; 0x30
 801d2a6:	60fb      	str	r3, [r7, #12]
 801d2a8:	e002      	b.n	801d2b0 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	613b      	str	r3, [r7, #16]
        break;
 801d2ae:	e008      	b.n	801d2c2 <Str2Int+0x1da>
      }
      i++;
 801d2b0:	697b      	ldr	r3, [r7, #20]
 801d2b2:	3301      	adds	r3, #1
 801d2b4:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 801d2b6:	697b      	ldr	r3, [r7, #20]
 801d2b8:	2b0a      	cmp	r3, #10
 801d2ba:	d802      	bhi.n	801d2c2 <Str2Int+0x1da>
 801d2bc:	693b      	ldr	r3, [r7, #16]
 801d2be:	2b01      	cmp	r3, #1
 801d2c0:	d19d      	bne.n	801d1fe <Str2Int+0x116>
    }
  }

  return res;
 801d2c2:	693b      	ldr	r3, [r7, #16]
}
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	371c      	adds	r7, #28
 801d2c8:	46bd      	mov	sp, r7
 801d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2ce:	4770      	bx	lr

0801d2d0 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
static void Serial_PutString(uint8_t *p_string)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b084      	sub	sp, #16
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 801d2d8:	2300      	movs	r3, #0
 801d2da:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 801d2dc:	e002      	b.n	801d2e4 <Serial_PutString+0x14>
  {
    length++;
 801d2de:	89fb      	ldrh	r3, [r7, #14]
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 801d2e4:	89fb      	ldrh	r3, [r7, #14]
 801d2e6:	687a      	ldr	r2, [r7, #4]
 801d2e8:	4413      	add	r3, r2
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d1f6      	bne.n	801d2de <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UART_Handle, p_string, length, TX_TIMEOUT);
 801d2f0:	89fa      	ldrh	r2, [r7, #14]
 801d2f2:	2364      	movs	r3, #100	; 0x64
 801d2f4:	6879      	ldr	r1, [r7, #4]
 801d2f6:	4803      	ldr	r0, [pc, #12]	; (801d304 <Serial_PutString+0x34>)
 801d2f8:	f7eb fafb 	bl	80088f2 <HAL_UART_Transmit>
}
 801d2fc:	bf00      	nop
 801d2fe:	3710      	adds	r7, #16
 801d300:	46bd      	mov	sp, r7
 801d302:	bd80      	pop	{r7, pc}
 801d304:	2000134c 	.word	0x2000134c

0801d308 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
static HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	b082      	sub	sp, #8
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	4603      	mov	r3, r0
 801d310:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UART_Handle.gState == HAL_UART_STATE_TIMEOUT )
 801d312:	4b0a      	ldr	r3, [pc, #40]	; (801d33c <Serial_PutByte+0x34>)
 801d314:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801d318:	b2db      	uxtb	r3, r3
 801d31a:	2ba0      	cmp	r3, #160	; 0xa0
 801d31c:	d103      	bne.n	801d326 <Serial_PutByte+0x1e>
  {
    UART_Handle.gState = HAL_UART_STATE_READY;
 801d31e:	4b07      	ldr	r3, [pc, #28]	; (801d33c <Serial_PutByte+0x34>)
 801d320:	2220      	movs	r2, #32
 801d322:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }
  return HAL_UART_Transmit(&UART_Handle, &param, 1, TX_TIMEOUT);
 801d326:	1df9      	adds	r1, r7, #7
 801d328:	2364      	movs	r3, #100	; 0x64
 801d32a:	2201      	movs	r2, #1
 801d32c:	4803      	ldr	r0, [pc, #12]	; (801d33c <Serial_PutByte+0x34>)
 801d32e:	f7eb fae0 	bl	80088f2 <HAL_UART_Transmit>
 801d332:	4603      	mov	r3, r0
}
 801d334:	4618      	mov	r0, r3
 801d336:	3708      	adds	r7, #8
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}
 801d33c:	2000134c 	.word	0x2000134c

0801d340 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b088      	sub	sp, #32
 801d344:	af00      	add	r7, sp, #0
 801d346:	60f8      	str	r0, [r7, #12]
 801d348:	60b9      	str	r1, [r7, #8]
 801d34a:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 801d34c:	2300      	movs	r3, #0
 801d34e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 801d350:	68bb      	ldr	r3, [r7, #8]
 801d352:	2200      	movs	r2, #0
 801d354:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UART_Handle, &char1, 1, timeout);
 801d356:	f107 0113 	add.w	r1, r7, #19
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	2201      	movs	r2, #1
 801d35e:	4847      	ldr	r0, [pc, #284]	; (801d47c <ReceivePacket+0x13c>)
 801d360:	f7eb fb54 	bl	8008a0c <HAL_UART_Receive>
 801d364:	4603      	mov	r3, r0
 801d366:	76fb      	strb	r3, [r7, #27]
  while (UART_Handle.RxState == HAL_UART_STATE_BUSY_RX);
 801d368:	bf00      	nop
 801d36a:	4b44      	ldr	r3, [pc, #272]	; (801d47c <ReceivePacket+0x13c>)
 801d36c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801d370:	b2db      	uxtb	r3, r3
 801d372:	2b22      	cmp	r3, #34	; 0x22
 801d374:	d0f9      	beq.n	801d36a <ReceivePacket+0x2a>

  if (status == HAL_OK)
 801d376:	7efb      	ldrb	r3, [r7, #27]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d177      	bne.n	801d46c <ReceivePacket+0x12c>
  {
    switch (char1)
 801d37c:	7cfb      	ldrb	r3, [r7, #19]
 801d37e:	2b04      	cmp	r3, #4
 801d380:	d02d      	beq.n	801d3de <ReceivePacket+0x9e>
 801d382:	2b04      	cmp	r3, #4
 801d384:	dc04      	bgt.n	801d390 <ReceivePacket+0x50>
 801d386:	2b01      	cmp	r3, #1
 801d388:	d009      	beq.n	801d39e <ReceivePacket+0x5e>
 801d38a:	2b02      	cmp	r3, #2
 801d38c:	d00a      	beq.n	801d3a4 <ReceivePacket+0x64>
 801d38e:	e023      	b.n	801d3d8 <ReceivePacket+0x98>
 801d390:	2b41      	cmp	r3, #65	; 0x41
 801d392:	d01e      	beq.n	801d3d2 <ReceivePacket+0x92>
 801d394:	2b61      	cmp	r3, #97	; 0x61
 801d396:	d01c      	beq.n	801d3d2 <ReceivePacket+0x92>
 801d398:	2b18      	cmp	r3, #24
 801d39a:	d007      	beq.n	801d3ac <ReceivePacket+0x6c>
 801d39c:	e01c      	b.n	801d3d8 <ReceivePacket+0x98>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 801d39e:	2380      	movs	r3, #128	; 0x80
 801d3a0:	61fb      	str	r3, [r7, #28]
        break;
 801d3a2:	e01d      	b.n	801d3e0 <ReceivePacket+0xa0>
      case STX:
        packet_size = PACKET_1K_SIZE;
 801d3a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d3a8:	61fb      	str	r3, [r7, #28]
        break;
 801d3aa:	e019      	b.n	801d3e0 <ReceivePacket+0xa0>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UART_Handle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 801d3ac:	f107 0113 	add.w	r1, r7, #19
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	2201      	movs	r2, #1
 801d3b4:	4831      	ldr	r0, [pc, #196]	; (801d47c <ReceivePacket+0x13c>)
 801d3b6:	f7eb fb29 	bl	8008a0c <HAL_UART_Receive>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d105      	bne.n	801d3cc <ReceivePacket+0x8c>
 801d3c0:	7cfb      	ldrb	r3, [r7, #19]
 801d3c2:	2b18      	cmp	r3, #24
 801d3c4:	d102      	bne.n	801d3cc <ReceivePacket+0x8c>
        {
          packet_size = 2;
 801d3c6:	2302      	movs	r3, #2
 801d3c8:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 801d3ca:	e009      	b.n	801d3e0 <ReceivePacket+0xa0>
          status = HAL_ERROR;
 801d3cc:	2301      	movs	r3, #1
 801d3ce:	76fb      	strb	r3, [r7, #27]
        break;
 801d3d0:	e006      	b.n	801d3e0 <ReceivePacket+0xa0>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 801d3d2:	2302      	movs	r3, #2
 801d3d4:	76fb      	strb	r3, [r7, #27]
        break;
 801d3d6:	e003      	b.n	801d3e0 <ReceivePacket+0xa0>
      default:
        status = HAL_ERROR;
 801d3d8:	2301      	movs	r3, #1
 801d3da:	76fb      	strb	r3, [r7, #27]
        break;
 801d3dc:	e000      	b.n	801d3e0 <ReceivePacket+0xa0>
        break;
 801d3de:	bf00      	nop
    }
    *p_data = char1;
 801d3e0:	7cfa      	ldrb	r2, [r7, #19]
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )//data frame
 801d3e6:	69fb      	ldr	r3, [r7, #28]
 801d3e8:	2b7f      	cmp	r3, #127	; 0x7f
 801d3ea:	d93f      	bls.n	801d46c <ReceivePacket+0x12c>
    {
      status = HAL_UART_Receive(&UART_Handle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	1c99      	adds	r1, r3, #2
 801d3f0:	69fb      	ldr	r3, [r7, #28]
 801d3f2:	b29b      	uxth	r3, r3
 801d3f4:	3304      	adds	r3, #4
 801d3f6:	b29a      	uxth	r2, r3
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	4820      	ldr	r0, [pc, #128]	; (801d47c <ReceivePacket+0x13c>)
 801d3fc:	f7eb fb06 	bl	8008a0c <HAL_UART_Receive>
 801d400:	4603      	mov	r3, r0
 801d402:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 801d404:	7efb      	ldrb	r3, [r7, #27]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d12e      	bne.n	801d468 <ReceivePacket+0x128>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	3302      	adds	r3, #2
 801d40e:	781a      	ldrb	r2, [r3, #0]
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	3303      	adds	r3, #3
 801d414:	781b      	ldrb	r3, [r3, #0]
 801d416:	43db      	mvns	r3, r3
 801d418:	b2db      	uxtb	r3, r3
 801d41a:	429a      	cmp	r2, r3
 801d41c:	d004      	beq.n	801d428 <ReceivePacket+0xe8>
        {
          packet_size = 0;
 801d41e:	2300      	movs	r3, #0
 801d420:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 801d422:	2301      	movs	r3, #1
 801d424:	76fb      	strb	r3, [r7, #27]
 801d426:	e021      	b.n	801d46c <ReceivePacket+0x12c>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 801d428:	69fb      	ldr	r3, [r7, #28]
 801d42a:	3304      	adds	r3, #4
 801d42c:	68fa      	ldr	r2, [r7, #12]
 801d42e:	4413      	add	r3, r2
 801d430:	781b      	ldrb	r3, [r3, #0]
 801d432:	021b      	lsls	r3, r3, #8
 801d434:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 801d436:	69fb      	ldr	r3, [r7, #28]
 801d438:	3305      	adds	r3, #5
 801d43a:	68fa      	ldr	r2, [r7, #12]
 801d43c:	4413      	add	r3, r2
 801d43e:	781b      	ldrb	r3, [r3, #0]
 801d440:	461a      	mov	r2, r3
 801d442:	697b      	ldr	r3, [r7, #20]
 801d444:	4413      	add	r3, r2
 801d446:	617b      	str	r3, [r7, #20]

          if (HAL_CRC_Calculate(&CRC_Handle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	3304      	adds	r3, #4
 801d44c:	69fa      	ldr	r2, [r7, #28]
 801d44e:	4619      	mov	r1, r3
 801d450:	480b      	ldr	r0, [pc, #44]	; (801d480 <ReceivePacket+0x140>)
 801d452:	f7e4 fce9 	bl	8001e28 <HAL_CRC_Calculate>
 801d456:	4602      	mov	r2, r0
 801d458:	697b      	ldr	r3, [r7, #20]
 801d45a:	4293      	cmp	r3, r2
 801d45c:	d006      	beq.n	801d46c <ReceivePacket+0x12c>
          {
            packet_size = 0;
 801d45e:	2300      	movs	r3, #0
 801d460:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 801d462:	2301      	movs	r3, #1
 801d464:	76fb      	strb	r3, [r7, #27]
 801d466:	e001      	b.n	801d46c <ReceivePacket+0x12c>
          }
        }
      }
      else
      {
        packet_size = 0;
 801d468:	2300      	movs	r3, #0
 801d46a:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 801d46c:	68bb      	ldr	r3, [r7, #8]
 801d46e:	69fa      	ldr	r2, [r7, #28]
 801d470:	601a      	str	r2, [r3, #0]
  return status;
 801d472:	7efb      	ldrb	r3, [r7, #27]
}
 801d474:	4618      	mov	r0, r3
 801d476:	3720      	adds	r7, #32
 801d478:	46bd      	mov	sp, r7
 801d47a:	bd80      	pop	{r7, pc}
 801d47c:	2000134c 	.word	0x2000134c
 801d480:	2000121c 	.word	0x2000121c

0801d484 <CheckOtherBank>:
 * @description: verify if the file is STM32 boot file (begin with 0x20)
 * @param
 * @return: state of the verification
 */
static uint32_t CheckOtherBank( void )
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b082      	sub	sp, #8
 801d488:	af00      	add	r7, sp, #0
  uint32_t result;
  result = FLASH_If_Check_old((BankActive == 1) ? FLASH_START_BANK1 : FLASH_START_BANK2);
 801d48a:	4b0d      	ldr	r3, [pc, #52]	; (801d4c0 <CheckOtherBank+0x3c>)
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	2b01      	cmp	r3, #1
 801d490:	d102      	bne.n	801d498 <CheckOtherBank+0x14>
 801d492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801d496:	e000      	b.n	801d49a <CheckOtherBank+0x16>
 801d498:	4b0a      	ldr	r3, [pc, #40]	; (801d4c4 <CheckOtherBank+0x40>)
 801d49a:	4618      	mov	r0, r3
 801d49c:	f7ff fadc 	bl	801ca58 <FLASH_If_Check_old>
 801d4a0:	6078      	str	r0, [r7, #4]
  if (result == FLASHIF_OK)
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d103      	bne.n	801d4b0 <CheckOtherBank+0x2c>
    Serial_PutString((uint8_t *)"Success!\r\n\n");
 801d4a8:	4807      	ldr	r0, [pc, #28]	; (801d4c8 <CheckOtherBank+0x44>)
 801d4aa:	f7ff ff11 	bl	801d2d0 <Serial_PutString>
 801d4ae:	e002      	b.n	801d4b6 <CheckOtherBank+0x32>
  else
    Serial_PutString((uint8_t *)"Failure!\r\n\n");
 801d4b0:	4806      	ldr	r0, [pc, #24]	; (801d4cc <CheckOtherBank+0x48>)
 801d4b2:	f7ff ff0d 	bl	801d2d0 <Serial_PutString>
  return result;
 801d4b6:	687b      	ldr	r3, [r7, #4]
}
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	3708      	adds	r7, #8
 801d4bc:	46bd      	mov	sp, r7
 801d4be:	bd80      	pop	{r7, pc}
 801d4c0:	20000488 	.word	0x20000488
 801d4c4:	08080000 	.word	0x08080000
 801d4c8:	08026638 	.word	0x08026638
 801d4cc:	08026644 	.word	0x08026644

0801d4d0 <Flash_Bank_Copy_Bank>:
  * @brief  Copy firmware to another bank
  * @param  None
  * @retval None
  */
void Flash_Bank_Copy_Bank(uint32_t FLASH_SRC, uint32_t FLASH_DEST, uint32_t firmware_size, uint8_t bank)
{
 801d4d0:	b590      	push	{r4, r7, lr}
 801d4d2:	b0c9      	sub	sp, #292	; 0x124
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	f107 040c 	add.w	r4, r7, #12
 801d4da:	6020      	str	r0, [r4, #0]
 801d4dc:	f107 0008 	add.w	r0, r7, #8
 801d4e0:	6001      	str	r1, [r0, #0]
 801d4e2:	1d39      	adds	r1, r7, #4
 801d4e4:	600a      	str	r2, [r1, #0]
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	1cfb      	adds	r3, r7, #3
 801d4ea:	701a      	strb	r2, [r3, #0]
  uint32_t n, round;
  // uint32_t FLASH_SRC, FLASH_DEST, FIRMWARE_SIZE;
  uint32_t firmware_file_buffer[64];

  /* erase another bank */
  if (bank)
 801d4ec:	1cfb      	adds	r3, r7, #3
 801d4ee:	781b      	ldrb	r3, [r3, #0]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d002      	beq.n	801d4fa <Flash_Bank_Copy_Bank+0x2a>
    menu_preSend(1);
 801d4f4:	2001      	movs	r0, #1
 801d4f6:	f000 f8bb 	bl	801d670 <menu_preSend>
  // else
  //   menu_preSend(0);

  round = (firmware_size + sizeof(firmware_file_buffer) - 1) / sizeof(firmware_file_buffer);
 801d4fa:	1d3b      	adds	r3, r7, #4
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	33ff      	adds	r3, #255	; 0xff
 801d500:	0a1b      	lsrs	r3, r3, #8
 801d502:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  PRINTF("copy round:%lu, %lu\n", round, firmware_size);
 801d506:	1d3b      	adds	r3, r7, #4
 801d508:	681a      	ldr	r2, [r3, #0]
 801d50a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801d50e:	482a      	ldr	r0, [pc, #168]	; (801d5b8 <Flash_Bank_Copy_Bank+0xe8>)
 801d510:	f005 f894 	bl	802263c <iprintf>
  for (n = round; n > 0; n--)
 801d514:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801d518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801d51c:	e02f      	b.n	801d57e <Flash_Bank_Copy_Bank+0xae>
  {
    PRINTF("%lu, ", (n - 1));
 801d51e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d522:	3b01      	subs	r3, #1
 801d524:	4619      	mov	r1, r3
 801d526:	4825      	ldr	r0, [pc, #148]	; (801d5bc <Flash_Bank_Copy_Bank+0xec>)
 801d528:	f005 f888 	bl	802263c <iprintf>
    memcpy(firmware_file_buffer, (__IO uint32_t*)(FLASH_SRC + (n - 1) * sizeof(firmware_file_buffer)), sizeof(firmware_file_buffer));
 801d52c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d530:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
 801d534:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801d538:	021a      	lsls	r2, r3, #8
 801d53a:	f107 030c 	add.w	r3, r7, #12
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	4413      	add	r3, r2
 801d542:	4619      	mov	r1, r3
 801d544:	f107 0318 	add.w	r3, r7, #24
 801d548:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d54c:	4618      	mov	r0, r3
 801d54e:	f004 fa5d 	bl	8021a0c <memcpy>

    FLASH_If_Write(FLASH_DEST + (n - 1) * sizeof(firmware_file_buffer), (uint32_t *)(firmware_file_buffer), sizeof(firmware_file_buffer) / sizeof(uint32_t));
 801d552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d556:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
 801d55a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801d55e:	021a      	lsls	r2, r3, #8
 801d560:	f107 0308 	add.w	r3, r7, #8
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	4413      	add	r3, r2
 801d568:	f107 0118 	add.w	r1, r7, #24
 801d56c:	2240      	movs	r2, #64	; 0x40
 801d56e:	4618      	mov	r0, r3
 801d570:	f7ff fa84 	bl	801ca7c <FLASH_If_Write>
  for (n = round; n > 0; n--)
 801d574:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d578:	3b01      	subs	r3, #1
 801d57a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801d57e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d582:	2b00      	cmp	r3, #0
 801d584:	d1cb      	bne.n	801d51e <Flash_Bank_Copy_Bank+0x4e>
  }
  PRINTF("\n");
 801d586:	200a      	movs	r0, #10
 801d588:	f005 f870 	bl	802266c <putchar>

  if (bank)
 801d58c:	1cfb      	adds	r3, r7, #3
 801d58e:	781b      	ldrb	r3, [r3, #0]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d00b      	beq.n	801d5ac <Flash_Bank_Copy_Bank+0xdc>
  {
    uint32_t firmware_size_buffer[1];
    firmware_size_buffer[0] = firmware_size;
 801d594:	f107 0314 	add.w	r3, r7, #20
 801d598:	1d3a      	adds	r2, r7, #4
 801d59a:	6812      	ldr	r2, [r2, #0]
 801d59c:	601a      	str	r2, [r3, #0]
    FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size_buffer, 2);
 801d59e:	f107 0314 	add.w	r3, r7, #20
 801d5a2:	2202      	movs	r2, #2
 801d5a4:	4619      	mov	r1, r3
 801d5a6:	4806      	ldr	r0, [pc, #24]	; (801d5c0 <Flash_Bank_Copy_Bank+0xf0>)
 801d5a8:	f7ff fa68 	bl	801ca7c <FLASH_If_Write>
  }
}
 801d5ac:	bf00      	nop
 801d5ae:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd90      	pop	{r4, r7, pc}
 801d5b6:	bf00      	nop
 801d5b8:	08026650 	.word	0x08026650
 801d5bc:	08026668 	.word	0x08026668
 801d5c0:	080fe800 	.word	0x080fe800

0801d5c4 <menu_bank>:
  * @brief  Indicate current bank
  * @param  None
  * @retval None
  */
void menu_bank(void)
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b084      	sub	sp, #16
 801d5c8:	af00      	add	r7, sp, #0
  /* Test from which bank the program runs */
  BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 801d5ca:	4b1e      	ldr	r3, [pc, #120]	; (801d644 <menu_bank+0x80>)
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5d2:	4a1d      	ldr	r2, [pc, #116]	; (801d648 <menu_bank+0x84>)
 801d5d4:	6013      	str	r3, [r2, #0]

  Serial_PutString((uint8_t *)"\r\n========__DATE__ __TIME__ = " __DATE__ " " __TIME__ " ============\r\n\n");
 801d5d6:	481d      	ldr	r0, [pc, #116]	; (801d64c <menu_bank+0x88>)
 801d5d8:	f7ff fe7a 	bl	801d2d0 <Serial_PutString>
  printf("\r\n========version: %x-%x ========\r\n\n", VERSION_MAJOR, VERSION_NODE);
 801d5dc:	4b1c      	ldr	r3, [pc, #112]	; (801d650 <menu_bank+0x8c>)
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	4619      	mov	r1, r3
 801d5e2:	4b1c      	ldr	r3, [pc, #112]	; (801d654 <menu_bank+0x90>)
 801d5e4:	781b      	ldrb	r3, [r3, #0]
 801d5e6:	461a      	mov	r2, r3
 801d5e8:	481b      	ldr	r0, [pc, #108]	; (801d658 <menu_bank+0x94>)
 801d5ea:	f005 f827 	bl	802263c <iprintf>
	if (BankActive == 0)
 801d5ee:	4b16      	ldr	r3, [pc, #88]	; (801d648 <menu_bank+0x84>)
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d103      	bne.n	801d5fe <menu_bank+0x3a>
  {
    Serial_PutString((uint8_t *)"\tSystem running from STM32L476 *Bank 1*  \r\n\n");
 801d5f6:	4819      	ldr	r0, [pc, #100]	; (801d65c <menu_bank+0x98>)
 801d5f8:	f7ff fe6a 	bl	801d2d0 <Serial_PutString>

  // if ( OBConfig.USERConfig & OB_BFB2_ENABLE ) /* BANK2 active for boot */
  //   Serial_PutString((uint8_t *)"\tSystem ROM bank selection active  \r\n\n");
  // else
  //   Serial_PutString((uint8_t *)"\tSystem ROM bank selection deactivated \r\n\n");
}
 801d5fc:	e01e      	b.n	801d63c <menu_bank+0x78>
    Serial_PutString((uint8_t *)"\tSystem running from STM32L476 *Bank 2*  \r\n\n");
 801d5fe:	4818      	ldr	r0, [pc, #96]	; (801d660 <menu_bank+0x9c>)
 801d600:	f7ff fe66 	bl	801d2d0 <Serial_PutString>
    uint32_t firmware_size = *(__IO uint32_t*)(FIRMWARE_FLASH_ADDRESS_1);
 801d604:	4b17      	ldr	r3, [pc, #92]	; (801d664 <menu_bank+0xa0>)
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	60fb      	str	r3, [r7, #12]
    PRINTF("firmware_size:%lu\n", firmware_size);
 801d60a:	68f9      	ldr	r1, [r7, #12]
 801d60c:	4816      	ldr	r0, [pc, #88]	; (801d668 <menu_bank+0xa4>)
 801d60e:	f005 f815 	bl	802263c <iprintf>
    if ((firmware_size < 0x100000) && (firmware_size))
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d618:	d209      	bcs.n	801d62e <menu_bank+0x6a>
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d006      	beq.n	801d62e <menu_bank+0x6a>
      Flash_Bank_Copy_Bank(FLASH_START_BANK1, FLASH_START_BANK2, firmware_size, 1);
 801d620:	2301      	movs	r3, #1
 801d622:	68fa      	ldr	r2, [r7, #12]
 801d624:	4911      	ldr	r1, [pc, #68]	; (801d66c <menu_bank+0xa8>)
 801d626:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801d62a:	f7ff ff51 	bl	801d4d0 <Flash_Bank_Copy_Bank>
    DS3231_GetTime();
 801d62e:	f7fb fec9 	bl	80193c4 <DS3231_GetTime>
    DS3231_ShowTime();
 801d632:	463b      	mov	r3, r7
 801d634:	4618      	mov	r0, r3
 801d636:	f7fb fedf 	bl	80193f8 <DS3231_ShowTime>
    while(1);
 801d63a:	e7fe      	b.n	801d63a <menu_bank+0x76>
}
 801d63c:	3710      	adds	r7, #16
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}
 801d642:	bf00      	nop
 801d644:	40010000 	.word	0x40010000
 801d648:	20000488 	.word	0x20000488
 801d64c:	08026670 	.word	0x08026670
 801d650:	08026d7c 	.word	0x08026d7c
 801d654:	08026d7d 	.word	0x08026d7d
 801d658:	080266b4 	.word	0x080266b4
 801d65c:	080266dc 	.word	0x080266dc
 801d660:	0802670c 	.word	0x0802670c
 801d664:	0807e800 	.word	0x0807e800
 801d668:	0802673c 	.word	0x0802673c
 801d66c:	08080000 	.word	0x08080000

0801d670 <menu_preSend>:
  * @brief  Erase the Flash bank and clear the protection
  * @param  None
  * @retval None
  */
void menu_preSend(uint8_t bank)
{
 801d670:	b580      	push	{r7, lr}
 801d672:	b082      	sub	sp, #8
 801d674:	af00      	add	r7, sp, #0
 801d676:	4603      	mov	r3, r0
 801d678:	71fb      	strb	r3, [r7, #7]
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UART_Handle);
 801d67a:	4b12      	ldr	r3, [pc, #72]	; (801d6c4 <menu_preSend+0x54>)
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	8b1b      	ldrh	r3, [r3, #24]
 801d680:	b29a      	uxth	r2, r3
 801d682:	4b10      	ldr	r3, [pc, #64]	; (801d6c4 <menu_preSend+0x54>)
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	f042 0208 	orr.w	r2, r2, #8
 801d68a:	b292      	uxth	r2, r2
 801d68c:	831a      	strh	r2, [r3, #24]
 801d68e:	4b0d      	ldr	r3, [pc, #52]	; (801d6c4 <menu_preSend+0x54>)
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	8b1b      	ldrh	r3, [r3, #24]
 801d694:	b29a      	uxth	r2, r3
 801d696:	4b0b      	ldr	r3, [pc, #44]	; (801d6c4 <menu_preSend+0x54>)
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	f042 0210 	orr.w	r2, r2, #16
 801d69e:	b292      	uxth	r2, r2
 801d6a0:	831a      	strh	r2, [r3, #24]
  __HAL_UART_CLEAR_IT(&UART_Handle, UART_CLEAR_OREF);
 801d6a2:	4b08      	ldr	r3, [pc, #32]	; (801d6c4 <menu_preSend+0x54>)
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	2208      	movs	r2, #8
 801d6a8:	621a      	str	r2, [r3, #32]
  if (bank)
 801d6aa:	79fb      	ldrb	r3, [r7, #7]
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	d004      	beq.n	801d6ba <menu_preSend+0x4a>
    FLASH_If_Erase(BankActive);
 801d6b0:	4b05      	ldr	r3, [pc, #20]	; (801d6c8 <menu_preSend+0x58>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7ff f8eb 	bl	801c890 <FLASH_If_Erase>
}
 801d6ba:	bf00      	nop
 801d6bc:	3708      	adds	r7, #8
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	bd80      	pop	{r7, pc}
 801d6c2:	bf00      	nop
 801d6c4:	2000134c 	.word	0x2000134c
 801d6c8:	20000488 	.word	0x20000488

0801d6cc <menu_serialDownload>:
  * @brief  Download a file via serial port. Should be used after menu_preSend.
  * @param  offset_page: The download offset page of the flash (0-255)
  * @retval size: The file size
  */
uint32_t menu_serialDownload(uint32_t offset_page, uint8_t bank_update)
{
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b088      	sub	sp, #32
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	460b      	mov	r3, r1
 801d6d6:	70fb      	strb	r3, [r7, #3]
  gpi_watchdog_periodic();
 801d6d8:	f7f0 fd7a 	bl	800e1d0 <gpi_watchdog_periodic>
  uint8_t number[11] = {0};
 801d6dc:	f107 0310 	add.w	r3, r7, #16
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	601a      	str	r2, [r3, #0]
 801d6e4:	605a      	str	r2, [r3, #4]
 801d6e6:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	60fb      	str	r3, [r7, #12]
  COM_StatusTypeDef result;

  uint32_t bank_active;

  /* if update bank1 ("0"), set bank_active as "1" to write file to FLASH_START_BANK1 */
  if (!bank_update)
 801d6ee:	78fb      	ldrb	r3, [r7, #3]
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	d102      	bne.n	801d6fa <menu_serialDownload+0x2e>
    bank_active = 1;
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	61fb      	str	r3, [r7, #28]
 801d6f8:	e001      	b.n	801d6fe <menu_serialDownload+0x32>
  else
    bank_active = 0;
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	61fb      	str	r3, [r7, #28]

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 801d6fe:	481a      	ldr	r0, [pc, #104]	; (801d768 <menu_serialDownload+0x9c>)
 801d700:	f7ff fde6 	bl	801d2d0 <Serial_PutString>
  result = COM_ABORT;
 801d704:	2302      	movs	r3, #2
 801d706:	76fb      	strb	r3, [r7, #27]
  do
  {
    result = menu_ymodem_receive( &size, bank_active, FLASH_PAGE * offset_page);
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	02da      	lsls	r2, r3, #11
 801d70c:	f107 030c 	add.w	r3, r7, #12
 801d710:	69f9      	ldr	r1, [r7, #28]
 801d712:	4618      	mov	r0, r3
 801d714:	f000 f834 	bl	801d780 <menu_ymodem_receive>
 801d718:	4603      	mov	r3, r0
 801d71a:	76fb      	strb	r3, [r7, #27]
  } while (result != COM_OK);
 801d71c:	7efb      	ldrb	r3, [r7, #27]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d1f2      	bne.n	801d708 <menu_serialDownload+0x3c>
  // result = menu_ymodem_receive( &size, bank_active, FLASH_PAGE * offset_page);
  if (result == COM_OK)
 801d722:	7efb      	ldrb	r3, [r7, #27]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d11a      	bne.n	801d75e <menu_serialDownload+0x92>
  {
    /* Reporting */
    Serial_PutString((uint8_t *) "\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 801d728:	4810      	ldr	r0, [pc, #64]	; (801d76c <menu_serialDownload+0xa0>)
 801d72a:	f7ff fdd1 	bl	801d2d0 <Serial_PutString>
    Serial_PutString(aFileName);
 801d72e:	4810      	ldr	r0, [pc, #64]	; (801d770 <menu_serialDownload+0xa4>)
 801d730:	f7ff fdce 	bl	801d2d0 <Serial_PutString>
    Int2Str(number, size);
 801d734:	68fa      	ldr	r2, [r7, #12]
 801d736:	f107 0310 	add.w	r3, r7, #16
 801d73a:	4611      	mov	r1, r2
 801d73c:	4618      	mov	r0, r3
 801d73e:	f7ff fc7f 	bl	801d040 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 801d742:	480c      	ldr	r0, [pc, #48]	; (801d774 <menu_serialDownload+0xa8>)
 801d744:	f7ff fdc4 	bl	801d2d0 <Serial_PutString>
    Serial_PutString(number);
 801d748:	f107 0310 	add.w	r3, r7, #16
 801d74c:	4618      	mov	r0, r3
 801d74e:	f7ff fdbf 	bl	801d2d0 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 801d752:	4809      	ldr	r0, [pc, #36]	; (801d778 <menu_serialDownload+0xac>)
 801d754:	f7ff fdbc 	bl	801d2d0 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 801d758:	4808      	ldr	r0, [pc, #32]	; (801d77c <menu_serialDownload+0xb0>)
 801d75a:	f7ff fdb9 	bl	801d2d0 <Serial_PutString>
  //   Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
  // else if (result == COM_ABORT)
  //   Serial_PutString((uint8_t *)"\n\rAborted by user.\n\r");
  // else
  //   Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  return size;
 801d75e:	68fb      	ldr	r3, [r7, #12]
}
 801d760:	4618      	mov	r0, r3
 801d762:	3720      	adds	r7, #32
 801d764:	46bd      	mov	sp, r7
 801d766:	bd80      	pop	{r7, pc}
 801d768:	08026750 	.word	0x08026750
 801d76c:	0802678c 	.word	0x0802678c
 801d770:	20002298 	.word	0x20002298
 801d774:	080267e0 	.word	0x080267e0
 801d778:	080267ec 	.word	0x080267ec
 801d77c:	080267f8 	.word	0x080267f8

0801d780 <menu_ymodem_receive>:
  * @param  bank The actual active bank
  * @param  offset The offset of the flash
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef menu_ymodem_receive( uint32_t *p_size, uint32_t bank, uint32_t offset)
{
 801d780:	b580      	push	{r7, lr}
 801d782:	b094      	sub	sp, #80	; 0x50
 801d784:	af00      	add	r7, sp, #0
 801d786:	60f8      	str	r0, [r7, #12]
 801d788:	60b9      	str	r1, [r7, #8]
 801d78a:	607a      	str	r2, [r7, #4]
  gpi_watchdog_periodic();
 801d78c:	f7f0 fd20 	bl	800e1d0 <gpi_watchdog_periodic>
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 801d790:	2300      	movs	r3, #0
 801d792:	64bb      	str	r3, [r7, #72]	; 0x48
 801d794:	2300      	movs	r3, #0
 801d796:	643b      	str	r3, [r7, #64]	; 0x40
 801d798:	2300      	movs	r3, #0
 801d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 801d79c:	2300      	movs	r3, #0
 801d79e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801d7a2:	4b92      	ldr	r3, [pc, #584]	; (801d9ec <menu_ymodem_receive+0x26c>)
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	4a91      	ldr	r2, [pc, #580]	; (801d9ec <menu_ymodem_receive+0x26c>)
 801d7a8:	f043 0302 	orr.w	r3, r3, #2
 801d7ac:	6013      	str	r3, [r2, #0]

  /* Initialize flashdestination variable */
  if (bank == 1 )
 801d7ae:	68bb      	ldr	r3, [r7, #8]
 801d7b0:	2b01      	cmp	r3, #1
 801d7b2:	d104      	bne.n	801d7be <menu_ymodem_receive+0x3e>
  {
    flashdestination = FLASH_START_BANK1 + offset;
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801d7ba:	63bb      	str	r3, [r7, #56]	; 0x38
 801d7bc:	e102      	b.n	801d9c4 <menu_ymodem_receive+0x244>
  }
  else
  {
    flashdestination = FLASH_START_BANK2 + offset;
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801d7c4:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 801d7c8:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  while ((session_done == 0) && (result == COM_OK))
 801d7ca:	e0fb      	b.n	801d9c4 <menu_ymodem_receive+0x244>
  {
    packets_received = 0;
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    file_done = 0;
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	647b      	str	r3, [r7, #68]	; 0x44
    while ((file_done == 0) && (result == COM_OK))
 801d7d6:	e0ed      	b.n	801d9b4 <menu_ymodem_receive+0x234>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 801d7d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d7e0:	4619      	mov	r1, r3
 801d7e2:	4883      	ldr	r0, [pc, #524]	; (801d9f0 <menu_ymodem_receive+0x270>)
 801d7e4:	f7ff fdac 	bl	801d340 <ReceivePacket>
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d003      	beq.n	801d7f6 <menu_ymodem_receive+0x76>
 801d7ee:	2b02      	cmp	r3, #2
 801d7f0:	f000 80bf 	beq.w	801d972 <menu_ymodem_receive+0x1f2>
 801d7f4:	e0c7      	b.n	801d986 <menu_ymodem_receive+0x206>
      {
        case HAL_OK:
          errors = 0;
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	643b      	str	r3, [r7, #64]	; 0x40
          switch (packet_length)
 801d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	d008      	beq.n	801d812 <menu_ymodem_receive+0x92>
 801d800:	2b02      	cmp	r3, #2
 801d802:	d10c      	bne.n	801d81e <menu_ymodem_receive+0x9e>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 801d804:	2006      	movs	r0, #6
 801d806:	f7ff fd7f 	bl	801d308 <Serial_PutByte>
              result = COM_ABORT;
 801d80a:	2302      	movs	r3, #2
 801d80c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
              break;
 801d810:	e0ae      	b.n	801d970 <menu_ymodem_receive+0x1f0>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 801d812:	2006      	movs	r0, #6
 801d814:	f7ff fd78 	bl	801d308 <Serial_PutByte>
              file_done = 1;
 801d818:	2301      	movs	r3, #1
 801d81a:	647b      	str	r3, [r7, #68]	; 0x44
              break;
 801d81c:	e0a8      	b.n	801d970 <menu_ymodem_receive+0x1f0>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 801d81e:	4b74      	ldr	r3, [pc, #464]	; (801d9f0 <menu_ymodem_receive+0x270>)
 801d820:	789b      	ldrb	r3, [r3, #2]
 801d822:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801d826:	429a      	cmp	r2, r3
 801d828:	d003      	beq.n	801d832 <menu_ymodem_receive+0xb2>
              {
                Serial_PutByte(NAK);
 801d82a:	2015      	movs	r0, #21
 801d82c:	f7ff fd6c 	bl	801d308 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 801d830:	e09d      	b.n	801d96e <menu_ymodem_receive+0x1ee>
                if (packets_received == 0)
 801d832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d836:	2b00      	cmp	r3, #0
 801d838:	d175      	bne.n	801d926 <menu_ymodem_receive+0x1a6>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 801d83a:	4b6d      	ldr	r3, [pc, #436]	; (801d9f0 <menu_ymodem_receive+0x270>)
 801d83c:	791b      	ldrb	r3, [r3, #4]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d069      	beq.n	801d916 <menu_ymodem_receive+0x196>
                    i = 0;
 801d842:	2300      	movs	r3, #0
 801d844:	64fb      	str	r3, [r7, #76]	; 0x4c
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 801d846:	4b6b      	ldr	r3, [pc, #428]	; (801d9f4 <menu_ymodem_receive+0x274>)
 801d848:	637b      	str	r3, [r7, #52]	; 0x34
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 801d84a:	e008      	b.n	801d85e <menu_ymodem_receive+0xde>
                      aFileName[i++] = *file_ptr++;
 801d84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d84e:	1c53      	adds	r3, r2, #1
 801d850:	637b      	str	r3, [r7, #52]	; 0x34
 801d852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d854:	1c59      	adds	r1, r3, #1
 801d856:	64f9      	str	r1, [r7, #76]	; 0x4c
 801d858:	7811      	ldrb	r1, [r2, #0]
 801d85a:	4a67      	ldr	r2, [pc, #412]	; (801d9f8 <menu_ymodem_receive+0x278>)
 801d85c:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 801d85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d860:	781b      	ldrb	r3, [r3, #0]
 801d862:	2b00      	cmp	r3, #0
 801d864:	d002      	beq.n	801d86c <menu_ymodem_receive+0xec>
 801d866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d868:	2b3f      	cmp	r3, #63	; 0x3f
 801d86a:	d9ef      	bls.n	801d84c <menu_ymodem_receive+0xcc>
                    aFileName[i++] = '\0';
 801d86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d86e:	1c5a      	adds	r2, r3, #1
 801d870:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d872:	4a61      	ldr	r2, [pc, #388]	; (801d9f8 <menu_ymodem_receive+0x278>)
 801d874:	2100      	movs	r1, #0
 801d876:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 801d878:	2300      	movs	r3, #0
 801d87a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    file_ptr ++;
 801d87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d87e:	3301      	adds	r3, #1
 801d880:	637b      	str	r3, [r7, #52]	; 0x34
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 801d882:	e00b      	b.n	801d89c <menu_ymodem_receive+0x11c>
                      file_size[i++] = *file_ptr++;
 801d884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d886:	1c53      	adds	r3, r2, #1
 801d888:	637b      	str	r3, [r7, #52]	; 0x34
 801d88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d88c:	1c59      	adds	r1, r3, #1
 801d88e:	64f9      	str	r1, [r7, #76]	; 0x4c
 801d890:	7812      	ldrb	r2, [r2, #0]
 801d892:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801d896:	440b      	add	r3, r1
 801d898:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 801d89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d89e:	781b      	ldrb	r3, [r3, #0]
 801d8a0:	2b20      	cmp	r3, #32
 801d8a2:	d002      	beq.n	801d8aa <menu_ymodem_receive+0x12a>
 801d8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8a6:	2b0f      	cmp	r3, #15
 801d8a8:	d9ec      	bls.n	801d884 <menu_ymodem_receive+0x104>
                    file_size[i++] = '\0';
 801d8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8ac:	1c5a      	adds	r2, r3, #1
 801d8ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d8b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d8b4:	4413      	add	r3, r2
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 801d8bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d8c0:	f107 0314 	add.w	r3, r7, #20
 801d8c4:	4611      	mov	r1, r2
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	f7ff fc0e 	bl	801d0e8 <Str2Int>
                    *p_size = filesize;
 801d8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	601a      	str	r2, [r3, #0]
                    if (*p_size > (FLASH_START_BANK2 - FLASH_START_BANK1))
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801d8da:	d915      	bls.n	801d908 <menu_ymodem_receive+0x188>
                      tmp = CA;
 801d8dc:	2318      	movs	r3, #24
 801d8de:	74fb      	strb	r3, [r7, #19]
                      HAL_UART_Transmit(&UART_Handle, &tmp, 1, NAK_TIMEOUT);
 801d8e0:	f107 0113 	add.w	r1, r7, #19
 801d8e4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	4844      	ldr	r0, [pc, #272]	; (801d9fc <menu_ymodem_receive+0x27c>)
 801d8ec:	f7eb f801 	bl	80088f2 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UART_Handle, &tmp, 1, NAK_TIMEOUT);
 801d8f0:	f107 0113 	add.w	r1, r7, #19
 801d8f4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d8f8:	2201      	movs	r2, #1
 801d8fa:	4840      	ldr	r0, [pc, #256]	; (801d9fc <menu_ymodem_receive+0x27c>)
 801d8fc:	f7ea fff9 	bl	80088f2 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 801d900:	2305      	movs	r3, #5
 801d902:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801d906:	e02b      	b.n	801d960 <menu_ymodem_receive+0x1e0>
                      Serial_PutByte(ACK);
 801d908:	2006      	movs	r0, #6
 801d90a:	f7ff fcfd 	bl	801d308 <Serial_PutByte>
                      Serial_PutByte(CRC16);
 801d90e:	2043      	movs	r0, #67	; 0x43
 801d910:	f7ff fcfa 	bl	801d308 <Serial_PutByte>
 801d914:	e024      	b.n	801d960 <menu_ymodem_receive+0x1e0>
                    Serial_PutByte(ACK);
 801d916:	2006      	movs	r0, #6
 801d918:	f7ff fcf6 	bl	801d308 <Serial_PutByte>
                    file_done = 1;
 801d91c:	2301      	movs	r3, #1
 801d91e:	647b      	str	r3, [r7, #68]	; 0x44
                    session_done = 1;
 801d920:	2301      	movs	r3, #1
 801d922:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 801d924:	e024      	b.n	801d970 <menu_ymodem_receive+0x1f0>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 801d926:	4b33      	ldr	r3, [pc, #204]	; (801d9f4 <menu_ymodem_receive+0x274>)
 801d928:	62fb      	str	r3, [r7, #44]	; 0x2c
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length / 4) == FLASHIF_OK)
 801d92a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d92e:	089b      	lsrs	r3, r3, #2
 801d930:	461a      	mov	r2, r3
 801d932:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d934:	f7ff f8a2 	bl	801ca7c <FLASH_If_Write>
 801d938:	4603      	mov	r3, r0
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d107      	bne.n	801d94e <menu_ymodem_receive+0x1ce>
                    flashdestination += packet_length;
 801d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d942:	4413      	add	r3, r2
 801d944:	63bb      	str	r3, [r7, #56]	; 0x38
                    Serial_PutByte(ACK);
 801d946:	2006      	movs	r0, #6
 801d948:	f7ff fcde 	bl	801d308 <Serial_PutByte>
 801d94c:	e008      	b.n	801d960 <menu_ymodem_receive+0x1e0>
                    Serial_PutByte(CA);
 801d94e:	2018      	movs	r0, #24
 801d950:	f7ff fcda 	bl	801d308 <Serial_PutByte>
                    Serial_PutByte(CA);
 801d954:	2018      	movs	r0, #24
 801d956:	f7ff fcd7 	bl	801d308 <Serial_PutByte>
                    result = COM_DATA;
 801d95a:	2304      	movs	r3, #4
 801d95c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                packets_received ++;
 801d960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d964:	3301      	adds	r3, #1
 801d966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                session_begin = 1;
 801d96a:	2301      	movs	r3, #1
 801d96c:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 801d96e:	bf00      	nop
          }
          break;
 801d970:	e020      	b.n	801d9b4 <menu_ymodem_receive+0x234>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 801d972:	2018      	movs	r0, #24
 801d974:	f7ff fcc8 	bl	801d308 <Serial_PutByte>
          Serial_PutByte(CA);
 801d978:	2018      	movs	r0, #24
 801d97a:	f7ff fcc5 	bl	801d308 <Serial_PutByte>
          result = COM_ABORT;
 801d97e:	2302      	movs	r3, #2
 801d980:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
          break;
 801d984:	e016      	b.n	801d9b4 <menu_ymodem_receive+0x234>
        default:
          if (session_begin > 0)
 801d986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d002      	beq.n	801d992 <menu_ymodem_receive+0x212>
          {
            errors ++;
 801d98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d98e:	3301      	adds	r3, #1
 801d990:	643b      	str	r3, [r7, #64]	; 0x40
          }
          if (errors > MAX_ERRORS)
 801d992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d994:	2b0a      	cmp	r3, #10
 801d996:	d909      	bls.n	801d9ac <menu_ymodem_receive+0x22c>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 801d998:	2018      	movs	r0, #24
 801d99a:	f7ff fcb5 	bl	801d308 <Serial_PutByte>
            Serial_PutByte(CA);
 801d99e:	2018      	movs	r0, #24
 801d9a0:	f7ff fcb2 	bl	801d308 <Serial_PutByte>
            result = COM_ABORT;
 801d9a4:	2302      	movs	r3, #2
 801d9a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801d9aa:	e002      	b.n	801d9b2 <menu_ymodem_receive+0x232>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 801d9ac:	2043      	movs	r0, #67	; 0x43
 801d9ae:	f7ff fcab 	bl	801d308 <Serial_PutByte>
          }
          break;
 801d9b2:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 801d9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d104      	bne.n	801d9c4 <menu_ymodem_receive+0x244>
 801d9ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f43f af0a 	beq.w	801d7d8 <menu_ymodem_receive+0x58>
  while ((session_done == 0) && (result == COM_OK))
 801d9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d104      	bne.n	801d9d4 <menu_ymodem_receive+0x254>
 801d9ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	f43f aefc 	beq.w	801d7cc <menu_ymodem_receive+0x4c>
      }
    }
  }
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801d9d4:	4b05      	ldr	r3, [pc, #20]	; (801d9ec <menu_ymodem_receive+0x26c>)
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	4a04      	ldr	r2, [pc, #16]	; (801d9ec <menu_ymodem_receive+0x26c>)
 801d9da:	f023 0302 	bic.w	r3, r3, #2
 801d9de:	6013      	str	r3, [r2, #0]

  return result;
 801d9e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	3750      	adds	r7, #80	; 0x50
 801d9e8:	46bd      	mov	sp, r7
 801d9ea:	bd80      	pop	{r7, pc}
 801d9ec:	e000e010 	.word	0xe000e010
 801d9f0:	20001e68 	.word	0x20001e68
 801d9f4:	20001e6c 	.word	0x20001e6c
 801d9f8:	20002298 	.word	0x20002298
 801d9fc:	2000134c 	.word	0x2000134c

0801da00 <menu_pre_patch>:

//**************************************************************************************************

uint8_t menu_pre_patch(uint8_t patch_bank, uint32_t old_firmware_size, uint32_t patch_firmware_size)
{
 801da00:	b580      	push	{r7, lr}
 801da02:	b086      	sub	sp, #24
 801da04:	af00      	add	r7, sp, #0
 801da06:	4603      	mov	r3, r0
 801da08:	60b9      	str	r1, [r7, #8]
 801da0a:	607a      	str	r2, [r7, #4]
 801da0c:	73fb      	strb	r3, [r7, #15]
  /* Prepare for download files */
  menu_preSend(0);
 801da0e:	2000      	movs	r0, #0
 801da10:	f7ff fe2e 	bl	801d670 <menu_preSend>

  /* chose the place to write patch file */
  uint8_t patch_page = (old_firmware_size + FLASH_PAGE - 1) / FLASH_PAGE + 5;
 801da14:	68bb      	ldr	r3, [r7, #8]
 801da16:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801da1a:	0adb      	lsrs	r3, r3, #11
 801da1c:	b2db      	uxtb	r3, r3
 801da1e:	3305      	adds	r3, #5
 801da20:	75bb      	strb	r3, [r7, #22]
  uint8_t patch_used_page = (patch_firmware_size + FLASH_PAGE - 1) / FLASH_PAGE;
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801da28:	0adb      	lsrs	r3, r3, #11
 801da2a:	757b      	strb	r3, [r7, #21]

  /* erase flash pages that may be used */
  uint8_t i;

  if (!patch_bank)
 801da2c:	7bfb      	ldrb	r3, [r7, #15]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	d111      	bne.n	801da56 <menu_pre_patch+0x56>
  {
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801da32:	7dbb      	ldrb	r3, [r7, #22]
 801da34:	75fb      	strb	r3, [r7, #23]
 801da36:	e007      	b.n	801da48 <menu_pre_patch+0x48>
      FLASH_If_Erase_Pages(1, i);
 801da38:	7dfb      	ldrb	r3, [r7, #23]
 801da3a:	4619      	mov	r1, r3
 801da3c:	2001      	movs	r0, #1
 801da3e:	f7fe ff99 	bl	801c974 <FLASH_If_Erase_Pages>
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801da42:	7dfb      	ldrb	r3, [r7, #23]
 801da44:	3301      	adds	r3, #1
 801da46:	75fb      	strb	r3, [r7, #23]
 801da48:	7dfa      	ldrb	r2, [r7, #23]
 801da4a:	7db9      	ldrb	r1, [r7, #22]
 801da4c:	7d7b      	ldrb	r3, [r7, #21]
 801da4e:	440b      	add	r3, r1
 801da50:	429a      	cmp	r2, r3
 801da52:	dbf1      	blt.n	801da38 <menu_pre_patch+0x38>
 801da54:	e010      	b.n	801da78 <menu_pre_patch+0x78>
  }
  else
  {
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801da56:	7dbb      	ldrb	r3, [r7, #22]
 801da58:	75fb      	strb	r3, [r7, #23]
 801da5a:	e007      	b.n	801da6c <menu_pre_patch+0x6c>
      FLASH_If_Erase_Pages(0, i);
 801da5c:	7dfb      	ldrb	r3, [r7, #23]
 801da5e:	4619      	mov	r1, r3
 801da60:	2000      	movs	r0, #0
 801da62:	f7fe ff87 	bl	801c974 <FLASH_If_Erase_Pages>
    for (i = patch_page; i < patch_page + patch_used_page; i++)
 801da66:	7dfb      	ldrb	r3, [r7, #23]
 801da68:	3301      	adds	r3, #1
 801da6a:	75fb      	strb	r3, [r7, #23]
 801da6c:	7dfa      	ldrb	r2, [r7, #23]
 801da6e:	7db9      	ldrb	r1, [r7, #22]
 801da70:	7d7b      	ldrb	r3, [r7, #21]
 801da72:	440b      	add	r3, r1
 801da74:	429a      	cmp	r2, r3
 801da76:	dbf1      	blt.n	801da5c <menu_pre_patch+0x5c>
  }

  return patch_page;
 801da78:	7dbb      	ldrb	r3, [r7, #22]
}
 801da7a:	4618      	mov	r0, r3
 801da7c:	3718      	adds	r7, #24
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}

0801da82 <menu_initiator_read_file>:
 * @description: read file through Ymodem and set the file at the other bank 0 page
 * @param
 * @return: size of the downloaded file
 */
uint32_t menu_initiator_read_file(void)
{
 801da82:	b580      	push	{r7, lr}
 801da84:	b082      	sub	sp, #8
 801da86:	af00      	add	r7, sp, #0
  /* initiator needs to erase bank2 */
  /* erase bank2 */
  FLASH_If_Erase(0);
 801da88:	2000      	movs	r0, #0
 801da8a:	f7fe ff01 	bl	801c890 <FLASH_If_Erase>
  /* write file to bank2 */
  uint32_t size = menu_serialDownload(0, 1);
 801da8e:	2101      	movs	r1, #1
 801da90:	2000      	movs	r0, #0
 801da92:	f7ff fe1b 	bl	801d6cc <menu_serialDownload>
 801da96:	6078      	str	r0, [r7, #4]
  CheckOtherBank();
 801da98:	f7ff fcf4 	bl	801d484 <CheckOtherBank>
  return size;
 801da9c:	687b      	ldr	r3, [r7, #4]
}
 801da9e:	4618      	mov	r0, r3
 801daa0:	3708      	adds	r7, #8
 801daa2:	46bd      	mov	sp, r7
 801daa4:	bd80      	pop	{r7, pc}
	...

0801daa8 <menu_wait_task>:
 * @description: To chose the task according through serial input
 * @param
 * @return: None
 */
uint8_t menu_wait_task(Chirp_Outl *chirp_outl)
{
 801daa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daaa:	b099      	sub	sp, #100	; 0x64
 801daac:	af06      	add	r7, sp, #24
 801daae:	6078      	str	r0, [r7, #4]
  uint8_t default_generate_size;
  int8_t default_tp;
  uint16_t default_slot_num;
  uint8_t dissem_back_sf;
  uint8_t dissem_back_slot_num;
  uint8_t task_wait = 0;
 801dab0:	2300      	movs	r3, #0
 801dab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  uint8_t task[28 + DISSEM_BITMAP_32 * 8 + DISSEM_BITMAP_32 * 8 + 1];
  PRINTF("\nTask list:\n%lu: CHIRP_START\n%lu: MX_DISSEMINATE\n%lu: MX_COLLECT\n%lu: CHIRP_CONNECTIVITY\n%lu: CHIRP_TOPO\n%lu: CHIRP_VERSION\n", CHIRP_START, MX_DISSEMINATE, MX_COLLECT, CHIRP_CONNECTIVITY, CHIRP_TOPO, CHIRP_VERSION);
 801dab6:	2305      	movs	r3, #5
 801dab8:	9302      	str	r3, [sp, #8]
 801daba:	2304      	movs	r3, #4
 801dabc:	9301      	str	r3, [sp, #4]
 801dabe:	2303      	movs	r3, #3
 801dac0:	9300      	str	r3, [sp, #0]
 801dac2:	2302      	movs	r3, #2
 801dac4:	2201      	movs	r2, #1
 801dac6:	2100      	movs	r1, #0
 801dac8:	48c7      	ldr	r0, [pc, #796]	; (801dde8 <menu_wait_task+0x340>)
 801daca:	f004 fdb7 	bl	802263c <iprintf>

  HAL_StatusTypeDef status;

  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801dace:	4bc7      	ldr	r3, [pc, #796]	; (801ddec <menu_wait_task+0x344>)
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	4ac6      	ldr	r2, [pc, #792]	; (801ddec <menu_wait_task+0x344>)
 801dad4:	f043 0302 	orr.w	r3, r3, #2
 801dad8:	6013      	str	r3, [r2, #0]
  do
  {
    status = HAL_TIMEOUT;
 801dada:	2303      	movs	r3, #3
 801dadc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    while(status != HAL_OK)
 801dae0:	e040      	b.n	801db64 <menu_wait_task+0xbc>
    {
      gpi_watchdog_periodic();
 801dae2:	f7f0 fb75 	bl	800e1d0 <gpi_watchdog_periodic>
      /* initiator sleep for 60 s after 1 seconds not receiving any task */
      task_wait++;
 801dae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801daea:	3301      	adds	r3, #1
 801daec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if (task_wait > 1)
 801daf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801daf4:	2b01      	cmp	r3, #1
 801daf6:	d920      	bls.n	801db3a <menu_wait_task+0x92>
      {
        __HAL_UART_DISABLE(&huart2);
 801daf8:	4bbd      	ldr	r3, [pc, #756]	; (801ddf0 <menu_wait_task+0x348>)
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	681a      	ldr	r2, [r3, #0]
 801dafe:	4bbc      	ldr	r3, [pc, #752]	; (801ddf0 <menu_wait_task+0x348>)
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	f022 0201 	bic.w	r2, r2, #1
 801db06:	601a      	str	r2, [r3, #0]
        SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801db08:	4bb8      	ldr	r3, [pc, #736]	; (801ddec <menu_wait_task+0x344>)
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	4ab7      	ldr	r2, [pc, #732]	; (801ddec <menu_wait_task+0x344>)
 801db0e:	f023 0302 	bic.w	r3, r3, #2
 801db12:	6013      	str	r3, [r2, #0]
        task_wait = 0;
 801db14:	2300      	movs	r3, #0
 801db16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 801db1a:	4bb4      	ldr	r3, [pc, #720]	; (801ddec <menu_wait_task+0x344>)
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	4ab3      	ldr	r2, [pc, #716]	; (801ddec <menu_wait_task+0x344>)
 801db20:	f043 0302 	orr.w	r3, r3, #2
 801db24:	6013      	str	r3, [r2, #0]
        __HAL_UART_ENABLE(&huart2);
 801db26:	4bb2      	ldr	r3, [pc, #712]	; (801ddf0 <menu_wait_task+0x348>)
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	681a      	ldr	r2, [r3, #0]
 801db2c:	4bb0      	ldr	r3, [pc, #704]	; (801ddf0 <menu_wait_task+0x348>)
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	f042 0201 	orr.w	r2, r2, #1
 801db34:	601a      	str	r2, [r3, #0]
        return 0;
 801db36:	2300      	movs	r3, #0
 801db38:	e23b      	b.n	801dfb2 <menu_wait_task+0x50a>
      }
      PRINTF("Input initiator task:\n");
 801db3a:	48ae      	ldr	r0, [pc, #696]	; (801ddf4 <menu_wait_task+0x34c>)
 801db3c:	f004 fe06 	bl	802274c <puts>
      // 0,07,100
      status = HAL_UART_Receive(&UART_Handle, &task, sizeof(task), DOWNLOAD_TIMEOUT);
 801db40:	f107 010c 	add.w	r1, r7, #12
 801db44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801db48:	222d      	movs	r2, #45	; 0x2d
 801db4a:	48a9      	ldr	r0, [pc, #676]	; (801ddf0 <menu_wait_task+0x348>)
 801db4c:	f7ea ff5e 	bl	8008a0c <HAL_UART_Receive>
 801db50:	4603      	mov	r3, r0
 801db52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      while (UART_Handle.RxState == HAL_UART_STATE_BUSY_RX);
 801db56:	bf00      	nop
 801db58:	4ba5      	ldr	r3, [pc, #660]	; (801ddf0 <menu_wait_task+0x348>)
 801db5a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 801db5e:	b2db      	uxtb	r3, r3
 801db60:	2b22      	cmp	r3, #34	; 0x22
 801db62:	d0f9      	beq.n	801db58 <menu_wait_task+0xb0>
    while(status != HAL_OK)
 801db64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d1ba      	bne.n	801dae2 <menu_wait_task+0x3a>
    }
    mx_task = task[0] - '0';
 801db6c:	7b3b      	ldrb	r3, [r7, #12]
 801db6e:	3b30      	subs	r3, #48	; 0x30
 801db70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    default_sf = (task[2] - '0') * 10 + task[3] - '0';
 801db74:	7bbb      	ldrb	r3, [r7, #14]
 801db76:	461a      	mov	r2, r3
 801db78:	0092      	lsls	r2, r2, #2
 801db7a:	4413      	add	r3, r2
 801db7c:	005b      	lsls	r3, r3, #1
 801db7e:	b2da      	uxtb	r2, r3
 801db80:	7bfb      	ldrb	r3, [r7, #15]
 801db82:	4413      	add	r3, r2
 801db84:	b2db      	uxtb	r3, r3
 801db86:	3b10      	subs	r3, #16
 801db88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    default_payload_len = (task[5] - '0') * 100 + (task[6] - '0') * 10 + task[7] - '0';
 801db8c:	7c7b      	ldrb	r3, [r7, #17]
 801db8e:	461a      	mov	r2, r3
 801db90:	0092      	lsls	r2, r2, #2
 801db92:	4413      	add	r3, r2
 801db94:	461a      	mov	r2, r3
 801db96:	0091      	lsls	r1, r2, #2
 801db98:	461a      	mov	r2, r3
 801db9a:	460b      	mov	r3, r1
 801db9c:	4413      	add	r3, r2
 801db9e:	009b      	lsls	r3, r3, #2
 801dba0:	b2da      	uxtb	r2, r3
 801dba2:	7cbb      	ldrb	r3, [r7, #18]
 801dba4:	4619      	mov	r1, r3
 801dba6:	0089      	lsls	r1, r1, #2
 801dba8:	440b      	add	r3, r1
 801dbaa:	005b      	lsls	r3, r3, #1
 801dbac:	b2db      	uxtb	r3, r3
 801dbae:	4413      	add	r3, r2
 801dbb0:	b2da      	uxtb	r2, r3
 801dbb2:	7cfb      	ldrb	r3, [r7, #19]
 801dbb4:	4413      	add	r3, r2
 801dbb6:	b2db      	uxtb	r3, r3
 801dbb8:	3330      	adds	r3, #48	; 0x30
 801dbba:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    default_generate_size = (task[9] - '0') * 100 + (task[10] - '0') * 10 + task[11] - '0';
 801dbbe:	7d7b      	ldrb	r3, [r7, #21]
 801dbc0:	461a      	mov	r2, r3
 801dbc2:	0092      	lsls	r2, r2, #2
 801dbc4:	4413      	add	r3, r2
 801dbc6:	461a      	mov	r2, r3
 801dbc8:	0091      	lsls	r1, r2, #2
 801dbca:	461a      	mov	r2, r3
 801dbcc:	460b      	mov	r3, r1
 801dbce:	4413      	add	r3, r2
 801dbd0:	009b      	lsls	r3, r3, #2
 801dbd2:	b2da      	uxtb	r2, r3
 801dbd4:	7dbb      	ldrb	r3, [r7, #22]
 801dbd6:	4619      	mov	r1, r3
 801dbd8:	0089      	lsls	r1, r1, #2
 801dbda:	440b      	add	r3, r1
 801dbdc:	005b      	lsls	r3, r3, #1
 801dbde:	b2db      	uxtb	r3, r3
 801dbe0:	4413      	add	r3, r2
 801dbe2:	b2da      	uxtb	r2, r3
 801dbe4:	7dfb      	ldrb	r3, [r7, #23]
 801dbe6:	4413      	add	r3, r2
 801dbe8:	b2db      	uxtb	r3, r3
 801dbea:	3330      	adds	r3, #48	; 0x30
 801dbec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    default_slot_num = (task[13] - '0') * 1000 + (task[14] - '0') * 100 + (task[15] - '0') * 10 + (task[16] - '0');
 801dbf0:	7e7b      	ldrb	r3, [r7, #25]
 801dbf2:	3b30      	subs	r3, #48	; 0x30
 801dbf4:	b29b      	uxth	r3, r3
 801dbf6:	461a      	mov	r2, r3
 801dbf8:	0152      	lsls	r2, r2, #5
 801dbfa:	1ad2      	subs	r2, r2, r3
 801dbfc:	0092      	lsls	r2, r2, #2
 801dbfe:	4413      	add	r3, r2
 801dc00:	00db      	lsls	r3, r3, #3
 801dc02:	b29a      	uxth	r2, r3
 801dc04:	7ebb      	ldrb	r3, [r7, #26]
 801dc06:	3b30      	subs	r3, #48	; 0x30
 801dc08:	b29b      	uxth	r3, r3
 801dc0a:	4619      	mov	r1, r3
 801dc0c:	0089      	lsls	r1, r1, #2
 801dc0e:	440b      	add	r3, r1
 801dc10:	4619      	mov	r1, r3
 801dc12:	0088      	lsls	r0, r1, #2
 801dc14:	4619      	mov	r1, r3
 801dc16:	4603      	mov	r3, r0
 801dc18:	440b      	add	r3, r1
 801dc1a:	009b      	lsls	r3, r3, #2
 801dc1c:	b29b      	uxth	r3, r3
 801dc1e:	4413      	add	r3, r2
 801dc20:	b29a      	uxth	r2, r3
 801dc22:	7efb      	ldrb	r3, [r7, #27]
 801dc24:	3b30      	subs	r3, #48	; 0x30
 801dc26:	b29b      	uxth	r3, r3
 801dc28:	4619      	mov	r1, r3
 801dc2a:	0089      	lsls	r1, r1, #2
 801dc2c:	440b      	add	r3, r1
 801dc2e:	005b      	lsls	r3, r3, #1
 801dc30:	b29b      	uxth	r3, r3
 801dc32:	4413      	add	r3, r2
 801dc34:	b29a      	uxth	r2, r3
 801dc36:	7f3b      	ldrb	r3, [r7, #28]
 801dc38:	b29b      	uxth	r3, r3
 801dc3a:	4413      	add	r3, r2
 801dc3c:	b29b      	uxth	r3, r3
 801dc3e:	3b30      	subs	r3, #48	; 0x30
 801dc40:	87fb      	strh	r3, [r7, #62]	; 0x3e
    dissem_back_sf = (task[18] - '0') * 10 + task[19] - '0';
 801dc42:	7fbb      	ldrb	r3, [r7, #30]
 801dc44:	461a      	mov	r2, r3
 801dc46:	0092      	lsls	r2, r2, #2
 801dc48:	4413      	add	r3, r2
 801dc4a:	005b      	lsls	r3, r3, #1
 801dc4c:	b2da      	uxtb	r2, r3
 801dc4e:	7ffb      	ldrb	r3, [r7, #31]
 801dc50:	4413      	add	r3, r2
 801dc52:	b2db      	uxtb	r3, r3
 801dc54:	3b10      	subs	r3, #16
 801dc56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    dissem_back_slot_num = (task[21] - '0') * 100 + (task[22] - '0') * 10 + task[23] - '0';
 801dc5a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801dc5e:	461a      	mov	r2, r3
 801dc60:	0092      	lsls	r2, r2, #2
 801dc62:	4413      	add	r3, r2
 801dc64:	461a      	mov	r2, r3
 801dc66:	0091      	lsls	r1, r2, #2
 801dc68:	461a      	mov	r2, r3
 801dc6a:	460b      	mov	r3, r1
 801dc6c:	4413      	add	r3, r2
 801dc6e:	009b      	lsls	r3, r3, #2
 801dc70:	b2da      	uxtb	r2, r3
 801dc72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dc76:	4619      	mov	r1, r3
 801dc78:	0089      	lsls	r1, r1, #2
 801dc7a:	440b      	add	r3, r1
 801dc7c:	005b      	lsls	r3, r3, #1
 801dc7e:	b2db      	uxtb	r3, r3
 801dc80:	4413      	add	r3, r2
 801dc82:	b2da      	uxtb	r2, r3
 801dc84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801dc88:	4413      	add	r3, r2
 801dc8a:	b2db      	uxtb	r3, r3
 801dc8c:	3330      	adds	r3, #48	; 0x30
 801dc8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    default_tp = (task[25] - '0') * 10 + (task[26] - '0');
 801dc92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801dc96:	3b30      	subs	r3, #48	; 0x30
 801dc98:	b2db      	uxtb	r3, r3
 801dc9a:	461a      	mov	r2, r3
 801dc9c:	0092      	lsls	r2, r2, #2
 801dc9e:	4413      	add	r3, r2
 801dca0:	005b      	lsls	r3, r3, #1
 801dca2:	b2da      	uxtb	r2, r3
 801dca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dca8:	4413      	add	r3, r2
 801dcaa:	b2db      	uxtb	r3, r3
 801dcac:	3b30      	subs	r3, #48	; 0x30
 801dcae:	b2db      	uxtb	r3, r3
 801dcb0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint8_t i, data;
    memset((uint32_t *)&(chirp_outl->firmware_bitmap[0]), 0, DISSEM_BITMAP_32 * sizeof(uint32_t));
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	3318      	adds	r3, #24
 801dcb8:	2204      	movs	r2, #4
 801dcba:	2100      	movs	r1, #0
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	f003 feb0 	bl	8021a22 <memset>
    memset((uint32_t *)&(chirp_outl->task_bitmap[0]), 0, DISSEM_BITMAP_32 * sizeof(uint32_t));
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	331c      	adds	r3, #28
 801dcc6:	2204      	movs	r2, #4
 801dcc8:	2100      	movs	r1, #0
 801dcca:	4618      	mov	r0, r3
 801dccc:	f003 fea9 	bl	8021a22 <memset>
    for (i = 28; i < 28 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801dcd0:	231c      	movs	r3, #28
 801dcd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801dcd6:	e062      	b.n	801dd9e <menu_wait_task+0x2f6>
    {
      data = task[i];
 801dcd8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801dcdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801dce0:	4413      	add	r3, r2
 801dce2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801dce6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      if ((data >= '0') && (data <= '9'))
 801dcea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801dcee:	2b2f      	cmp	r3, #47	; 0x2f
 801dcf0:	d909      	bls.n	801dd06 <menu_wait_task+0x25e>
 801dcf2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801dcf6:	2b39      	cmp	r3, #57	; 0x39
 801dcf8:	d805      	bhi.n	801dd06 <menu_wait_task+0x25e>
        data = data - '0';
 801dcfa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801dcfe:	3b30      	subs	r3, #48	; 0x30
 801dd00:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801dd04:	e004      	b.n	801dd10 <menu_wait_task+0x268>
      else
        data = 10 + data - 'A';
 801dd06:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801dd0a:	3b37      	subs	r3, #55	; 0x37
 801dd0c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      chirp_outl->firmware_bitmap[(i - 28) / 8] += data * pow(0x10, sizeof(uint32_t) * 2 - 1 - ((i - 28) % (sizeof(uint32_t) * 2)));
 801dd10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7e2 fc0f 	bl	8000538 <__aeabi_i2d>
 801dd1a:	4604      	mov	r4, r0
 801dd1c:	460d      	mov	r5, r1
 801dd1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801dd22:	3b1c      	subs	r3, #28
 801dd24:	43db      	mvns	r3, r3
 801dd26:	f003 0307 	and.w	r3, r3, #7
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f7e2 fbf4 	bl	8000518 <__aeabi_ui2d>
 801dd30:	4602      	mov	r2, r0
 801dd32:	460b      	mov	r3, r1
 801dd34:	ec43 2b11 	vmov	d1, r2, r3
 801dd38:	ed9f 0b29 	vldr	d0, [pc, #164]	; 801dde0 <menu_wait_task+0x338>
 801dd3c:	f006 fb38 	bl	80243b0 <pow>
 801dd40:	ec53 2b10 	vmov	r2, r3, d0
 801dd44:	4620      	mov	r0, r4
 801dd46:	4629      	mov	r1, r5
 801dd48:	f7e2 fc60 	bl	800060c <__aeabi_dmul>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	460c      	mov	r4, r1
 801dd50:	461d      	mov	r5, r3
 801dd52:	4626      	mov	r6, r4
 801dd54:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801dd58:	3b1c      	subs	r3, #28
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	da00      	bge.n	801dd60 <menu_wait_task+0x2b8>
 801dd5e:	3307      	adds	r3, #7
 801dd60:	10db      	asrs	r3, r3, #3
 801dd62:	461c      	mov	r4, r3
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	1da2      	adds	r2, r4, #6
 801dd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	f7e2 fbd3 	bl	8000518 <__aeabi_ui2d>
 801dd72:	4602      	mov	r2, r0
 801dd74:	460b      	mov	r3, r1
 801dd76:	4628      	mov	r0, r5
 801dd78:	4631      	mov	r1, r6
 801dd7a:	f7e2 fa91 	bl	80002a0 <__adddf3>
 801dd7e:	4602      	mov	r2, r0
 801dd80:	460b      	mov	r3, r1
 801dd82:	4610      	mov	r0, r2
 801dd84:	4619      	mov	r1, r3
 801dd86:	f7e2 ff19 	bl	8000bbc <__aeabi_d2uiz>
 801dd8a:	4601      	mov	r1, r0
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	1da2      	adds	r2, r4, #6
 801dd90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 28; i < 28 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801dd94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801dd98:	3301      	adds	r3, #1
 801dd9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801dd9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801dda2:	2b23      	cmp	r3, #35	; 0x23
 801dda4:	d998      	bls.n	801dcd8 <menu_wait_task+0x230>
    }
    for (i = 37; i < 37 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801dda6:	2325      	movs	r3, #37	; 0x25
 801dda8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801ddac:	e072      	b.n	801de94 <menu_wait_task+0x3ec>
    {
      data = task[i];
 801ddae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ddb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ddb6:	4413      	add	r3, r2
 801ddb8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801ddbc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      if ((data >= '0') && (data <= '9'))
 801ddc0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ddc4:	2b2f      	cmp	r3, #47	; 0x2f
 801ddc6:	d917      	bls.n	801ddf8 <menu_wait_task+0x350>
 801ddc8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ddcc:	2b39      	cmp	r3, #57	; 0x39
 801ddce:	d813      	bhi.n	801ddf8 <menu_wait_task+0x350>
        data = data - '0';
 801ddd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ddd4:	3b30      	subs	r3, #48	; 0x30
 801ddd6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 801ddda:	e012      	b.n	801de02 <menu_wait_task+0x35a>
 801dddc:	f3af 8000 	nop.w
 801dde0:	00000000 	.word	0x00000000
 801dde4:	40300000 	.word	0x40300000
 801dde8:	08026810 	.word	0x08026810
 801ddec:	e000e010 	.word	0xe000e010
 801ddf0:	2000134c 	.word	0x2000134c
 801ddf4:	08026890 	.word	0x08026890
      else
        data = 10 + data - 'A';
 801ddf8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ddfc:	3b37      	subs	r3, #55	; 0x37
 801ddfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      chirp_outl->task_bitmap[(i - 37) / 8] += data * pow(0x10, sizeof(uint32_t) * 2 - 1 - ((i - 37) % (sizeof(uint32_t) * 2)));
 801de02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801de06:	4618      	mov	r0, r3
 801de08:	f7e2 fb96 	bl	8000538 <__aeabi_i2d>
 801de0c:	4604      	mov	r4, r0
 801de0e:	460d      	mov	r5, r1
 801de10:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801de14:	3b25      	subs	r3, #37	; 0x25
 801de16:	43db      	mvns	r3, r3
 801de18:	f003 0307 	and.w	r3, r3, #7
 801de1c:	4618      	mov	r0, r3
 801de1e:	f7e2 fb7b 	bl	8000518 <__aeabi_ui2d>
 801de22:	4602      	mov	r2, r0
 801de24:	460b      	mov	r3, r1
 801de26:	ec43 2b11 	vmov	d1, r2, r3
 801de2a:	ed9f 0b65 	vldr	d0, [pc, #404]	; 801dfc0 <menu_wait_task+0x518>
 801de2e:	f006 fabf 	bl	80243b0 <pow>
 801de32:	ec53 2b10 	vmov	r2, r3, d0
 801de36:	4620      	mov	r0, r4
 801de38:	4629      	mov	r1, r5
 801de3a:	f7e2 fbe7 	bl	800060c <__aeabi_dmul>
 801de3e:	4603      	mov	r3, r0
 801de40:	460c      	mov	r4, r1
 801de42:	461d      	mov	r5, r3
 801de44:	4626      	mov	r6, r4
 801de46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801de4a:	3b25      	subs	r3, #37	; 0x25
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	da00      	bge.n	801de52 <menu_wait_task+0x3aa>
 801de50:	3307      	adds	r3, #7
 801de52:	10db      	asrs	r3, r3, #3
 801de54:	461c      	mov	r4, r3
 801de56:	687a      	ldr	r2, [r7, #4]
 801de58:	1da3      	adds	r3, r4, #6
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	4413      	add	r3, r2
 801de5e:	685b      	ldr	r3, [r3, #4]
 801de60:	4618      	mov	r0, r3
 801de62:	f7e2 fb59 	bl	8000518 <__aeabi_ui2d>
 801de66:	4602      	mov	r2, r0
 801de68:	460b      	mov	r3, r1
 801de6a:	4628      	mov	r0, r5
 801de6c:	4631      	mov	r1, r6
 801de6e:	f7e2 fa17 	bl	80002a0 <__adddf3>
 801de72:	4602      	mov	r2, r0
 801de74:	460b      	mov	r3, r1
 801de76:	4610      	mov	r0, r2
 801de78:	4619      	mov	r1, r3
 801de7a:	f7e2 fe9f 	bl	8000bbc <__aeabi_d2uiz>
 801de7e:	4601      	mov	r1, r0
 801de80:	687a      	ldr	r2, [r7, #4]
 801de82:	1da3      	adds	r3, r4, #6
 801de84:	009b      	lsls	r3, r3, #2
 801de86:	4413      	add	r3, r2
 801de88:	6059      	str	r1, [r3, #4]
    for (i = 37; i < 37 + DISSEM_BITMAP_32 * sizeof(uint32_t) * 2; i++)
 801de8a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801de8e:	3301      	adds	r3, #1
 801de90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801de94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801de98:	2b2c      	cmp	r3, #44	; 0x2c
 801de9a:	d988      	bls.n	801ddae <menu_wait_task+0x306>
    }
  } while ((mx_task > MX_TASK_LAST) || (mx_task < MX_TASK_FIRST));
 801de9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801dea0:	2b05      	cmp	r3, #5
 801dea2:	f63f ae1a 	bhi.w	801dada <menu_wait_task+0x32>

  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801dea6:	4b48      	ldr	r3, [pc, #288]	; (801dfc8 <menu_wait_task+0x520>)
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	4a47      	ldr	r2, [pc, #284]	; (801dfc8 <menu_wait_task+0x520>)
 801deac:	f023 0302 	bic.w	r3, r3, #2
 801deb0:	6013      	str	r3, [r2, #0]

  PRINTF("Select: ");
 801deb2:	4846      	ldr	r0, [pc, #280]	; (801dfcc <menu_wait_task+0x524>)
 801deb4:	f004 fbc2 	bl	802263c <iprintf>

  chirp_outl->arrange_task = (Mixer_Task )mx_task;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801debe:	719a      	strb	r2, [r3, #6]
  chirp_outl->default_sf = default_sf;
 801dec0:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	f8c3 200d 	str.w	r2, [r3, #13]
  chirp_outl->default_tp = default_tp;
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801ded0:	755a      	strb	r2, [r3, #21]
  chirp_outl->default_payload_len = default_payload_len;
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 801ded8:	759a      	strb	r2, [r3, #22]
  chirp_outl->default_generate_size = default_generate_size;
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801dee0:	75da      	strb	r2, [r3, #23]
  chirp_outl->default_slot_num = default_slot_num;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dee6:	f8a3 200b 	strh.w	r2, [r3, #11]
  chirp_outl->dissem_back_sf = dissem_back_sf;
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 801def0:	f883 2020 	strb.w	r2, [r3, #32]
  chirp_outl->dissem_back_slot_num = dissem_back_slot_num;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801defa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  PRINTF("default sf:%lu, %lu, %lu, %lu, %lu, %lu, %lu, %02x, %02x\n", chirp_outl->default_sf, chirp_outl->default_tp, chirp_outl->default_payload_len, chirp_outl->default_generate_size, chirp_outl->default_slot_num, chirp_outl->dissem_back_sf, chirp_outl->dissem_back_slot_num, chirp_outl->firmware_bitmap[0], chirp_outl->task_bitmap[0]);
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	f8d3 100d 	ldr.w	r1, [r3, #13]
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801df0a:	469c      	mov	ip, r3
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	7d9b      	ldrb	r3, [r3, #22]
 801df10:	469e      	mov	lr, r3
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	7ddb      	ldrb	r3, [r3, #23]
 801df16:	4618      	mov	r0, r3
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801df1e:	b29b      	uxth	r3, r3
 801df20:	461c      	mov	r4, r3
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	f893 3020 	ldrb.w	r3, [r3, #32]
 801df28:	461d      	mov	r5, r3
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801df30:	461e      	mov	r6, r3
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	699b      	ldr	r3, [r3, #24]
 801df36:	687a      	ldr	r2, [r7, #4]
 801df38:	69d2      	ldr	r2, [r2, #28]
 801df3a:	9205      	str	r2, [sp, #20]
 801df3c:	9304      	str	r3, [sp, #16]
 801df3e:	9603      	str	r6, [sp, #12]
 801df40:	9502      	str	r5, [sp, #8]
 801df42:	9401      	str	r4, [sp, #4]
 801df44:	9000      	str	r0, [sp, #0]
 801df46:	4673      	mov	r3, lr
 801df48:	4662      	mov	r2, ip
 801df4a:	4821      	ldr	r0, [pc, #132]	; (801dfd0 <menu_wait_task+0x528>)
 801df4c:	f004 fb76 	bl	802263c <iprintf>
  switch (mx_task)
 801df50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801df54:	2b05      	cmp	r3, #5
 801df56:	d827      	bhi.n	801dfa8 <menu_wait_task+0x500>
 801df58:	a201      	add	r2, pc, #4	; (adr r2, 801df60 <menu_wait_task+0x4b8>)
 801df5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df5e:	bf00      	nop
 801df60:	0801df79 	.word	0x0801df79
 801df64:	0801df81 	.word	0x0801df81
 801df68:	0801df89 	.word	0x0801df89
 801df6c:	0801df91 	.word	0x0801df91
 801df70:	0801df99 	.word	0x0801df99
 801df74:	0801dfa1 	.word	0x0801dfa1
  {
    case CHIRP_START:
    {
      PRINTF("CHIRP_START\n");
 801df78:	4816      	ldr	r0, [pc, #88]	; (801dfd4 <menu_wait_task+0x52c>)
 801df7a:	f004 fbe7 	bl	802274c <puts>
      break;
 801df7e:	e017      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    case MX_DISSEMINATE:
    {
      PRINTF("MX_DISSEMINATE\n");
 801df80:	4815      	ldr	r0, [pc, #84]	; (801dfd8 <menu_wait_task+0x530>)
 801df82:	f004 fbe3 	bl	802274c <puts>
      break;
 801df86:	e013      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    case MX_COLLECT:
    {
      PRINTF("MX_COLLECT\n");
 801df88:	4814      	ldr	r0, [pc, #80]	; (801dfdc <menu_wait_task+0x534>)
 801df8a:	f004 fbdf 	bl	802274c <puts>
      break;
 801df8e:	e00f      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    case CHIRP_CONNECTIVITY:
    {
      PRINTF("CHIRP_CONNECTIVITY\n");
 801df90:	4813      	ldr	r0, [pc, #76]	; (801dfe0 <menu_wait_task+0x538>)
 801df92:	f004 fbdb 	bl	802274c <puts>
      break;
 801df96:	e00b      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    case CHIRP_TOPO:
    {
      PRINTF("CHIRP_TOPO\n");
 801df98:	4812      	ldr	r0, [pc, #72]	; (801dfe4 <menu_wait_task+0x53c>)
 801df9a:	f004 fbd7 	bl	802274c <puts>
      break;
 801df9e:	e007      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    case CHIRP_VERSION:
    {
      PRINTF("CHIRP_VERSION\n");
 801dfa0:	4811      	ldr	r0, [pc, #68]	; (801dfe8 <menu_wait_task+0x540>)
 801dfa2:	f004 fbd3 	bl	802274c <puts>
      break;
 801dfa6:	e003      	b.n	801dfb0 <menu_wait_task+0x508>
    }
    default:
      PRINTF("WRONG TASK\n");
 801dfa8:	4810      	ldr	r0, [pc, #64]	; (801dfec <menu_wait_task+0x544>)
 801dfaa:	f004 fbcf 	bl	802274c <puts>
      break;
 801dfae:	bf00      	nop
  }
  return 1;
 801dfb0:	2301      	movs	r3, #1
}
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	374c      	adds	r7, #76	; 0x4c
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfba:	bf00      	nop
 801dfbc:	f3af 8000 	nop.w
 801dfc0:	00000000 	.word	0x00000000
 801dfc4:	40300000 	.word	0x40300000
 801dfc8:	e000e010 	.word	0xe000e010
 801dfcc:	080268a8 	.word	0x080268a8
 801dfd0:	080268b4 	.word	0x080268b4
 801dfd4:	080268f0 	.word	0x080268f0
 801dfd8:	080268fc 	.word	0x080268fc
 801dfdc:	0802690c 	.word	0x0802690c
 801dfe0:	08026918 	.word	0x08026918
 801dfe4:	0802692c 	.word	0x0802692c
 801dfe8:	08026938 	.word	0x08026938
 801dfec:	08026948 	.word	0x08026948

0801dff0 <chirp_controller_read_command>:
  * @brief  Controller node waits for task parameters
  * @param  chirp_outl: config outline, related to each task
  * @retval none
  */
void chirp_controller_read_command(Chirp_Outl *chirp_outl)
{
 801dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dff4:	b096      	sub	sp, #88	; 0x58
 801dff6:	af0c      	add	r7, sp, #48	; 0x30
 801dff8:	6178      	str	r0, [r7, #20]
  uint8_t rxbuffer_len;
  uint8_t k = 0;
 801dffa:	2300      	movs	r3, #0
 801dffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t i, data;
  uint8_t pow_num;

  switch (chirp_outl->arrange_task)
 801e000:	697b      	ldr	r3, [r7, #20]
 801e002:	799b      	ldrb	r3, [r3, #6]
 801e004:	2b03      	cmp	r3, #3
 801e006:	d81b      	bhi.n	801e040 <chirp_controller_read_command+0x50>
 801e008:	a201      	add	r2, pc, #4	; (adr r2, 801e010 <chirp_controller_read_command+0x20>)
 801e00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e00e:	bf00      	nop
 801e010:	0801e021 	.word	0x0801e021
 801e014:	0801e029 	.word	0x0801e029
 801e018:	0801e031 	.word	0x0801e031
 801e01c:	0801e039 	.word	0x0801e039
  {
      case CHIRP_START:
      {
          rxbuffer_len = 46;
 801e020:	232e      	movs	r3, #46	; 0x2e
 801e022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801e026:	e00c      	b.n	801e042 <chirp_controller_read_command+0x52>
      }
      case MX_DISSEMINATE:
      {
          rxbuffer_len = 55;
 801e028:	2337      	movs	r3, #55	; 0x37
 801e02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801e02e:	e008      	b.n	801e042 <chirp_controller_read_command+0x52>
      }
      case MX_COLLECT:
      {
          rxbuffer_len = 17;
 801e030:	2311      	movs	r3, #17
 801e032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801e036:	e004      	b.n	801e042 <chirp_controller_read_command+0x52>
      }
      case CHIRP_CONNECTIVITY:
      {
          rxbuffer_len = 17;
 801e038:	2311      	movs	r3, #17
 801e03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 801e03e:	e000      	b.n	801e042 <chirp_controller_read_command+0x52>
      }
      default:
          break;
 801e040:	bf00      	nop
  }

  uart_read_data(0, rxbuffer_len);
 801e042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e046:	4619      	mov	r1, r3
 801e048:	2000      	movs	r0, #0
 801e04a:	f7f4 fd2b 	bl	8012aa4 <uart_read_data>
  PRINTF("\nWaiting for parameter(s)...\n");
 801e04e:	48d4      	ldr	r0, [pc, #848]	; (801e3a0 <chirp_controller_read_command+0x3b0>)
 801e050:	f004 fb7c 	bl	802274c <puts>

  while(!uart_read_done);
 801e054:	bf00      	nop
 801e056:	4bd3      	ldr	r3, [pc, #844]	; (801e3a4 <chirp_controller_read_command+0x3b4>)
 801e058:	781b      	ldrb	r3, [r3, #0]
 801e05a:	b2db      	uxtb	r3, r3
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d0fa      	beq.n	801e056 <chirp_controller_read_command+0x66>

  uint8_t *command_buffer = (uint8_t *)malloc(rxbuffer_len);
 801e060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e064:	4618      	mov	r0, r3
 801e066:	f003 fcc1 	bl	80219ec <malloc>
 801e06a:	4603      	mov	r3, r0
 801e06c:	61fb      	str	r3, [r7, #28]
  uart_read_command(command_buffer, rxbuffer_len);
 801e06e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e072:	4619      	mov	r1, r3
 801e074:	69f8      	ldr	r0, [r7, #28]
 801e076:	f7f4 fd55 	bl	8012b24 <uart_read_command>

  switch (chirp_outl->arrange_task)
 801e07a:	697b      	ldr	r3, [r7, #20]
 801e07c:	799b      	ldrb	r3, [r3, #6]
 801e07e:	2b03      	cmp	r3, #3
 801e080:	f201 8141 	bhi.w	801f306 <chirp_controller_read_command+0x1316>
 801e084:	a201      	add	r2, pc, #4	; (adr r2, 801e08c <chirp_controller_read_command+0x9c>)
 801e086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e08a:	bf00      	nop
 801e08c:	0801e09d 	.word	0x0801e09d
 801e090:	0801e949 	.word	0x0801e949
 801e094:	0801ee73 	.word	0x0801ee73
 801e098:	0801f02f 	.word	0x0801f02f
  {
      case CHIRP_START:
      {
        chirp_outl->version_hash = 0;
 801e09c:	697b      	ldr	r3, [r7, #20]
 801e09e:	2200      	movs	r2, #0
 801e0a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801e0a4:	2200      	movs	r2, #0
 801e0a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        // "2020,12,31,15,18,20,2020,12,31,16,18,20,0,6A75" 0: upgrade, 1: user, 6A75:version
        memset(&(chirp_outl->start_year), 0, offsetof(Chirp_Outl, flash_protection) - offsetof(Chirp_Outl, start_year));
 801e0aa:	697b      	ldr	r3, [r7, #20]
 801e0ac:	3328      	adds	r3, #40	; 0x28
 801e0ae:	220e      	movs	r2, #14
 801e0b0:	2100      	movs	r1, #0
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	f003 fcb5 	bl	8021a22 <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e0be:	e3ec      	b.n	801e89a <chirp_controller_read_command+0x8aa>
        {
          data = (uint8_t)command_buffer[k++];
 801e0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e0c4:	1c5a      	adds	r2, r3, #1
 801e0c6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801e0ca:	461a      	mov	r2, r3
 801e0cc:	69fb      	ldr	r3, [r7, #28]
 801e0ce:	4413      	add	r3, r2
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801e0d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0da:	2b2f      	cmp	r3, #47	; 0x2f
 801e0dc:	d903      	bls.n	801e0e6 <chirp_controller_read_command+0xf6>
 801e0de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0e2:	2b39      	cmp	r3, #57	; 0x39
 801e0e4:	d909      	bls.n	801e0fa <chirp_controller_read_command+0x10a>
 801e0e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0ea:	2b40      	cmp	r3, #64	; 0x40
 801e0ec:	f240 83d0 	bls.w	801e890 <chirp_controller_read_command+0x8a0>
 801e0f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e0f4:	2b46      	cmp	r3, #70	; 0x46
 801e0f6:	f200 83cb 	bhi.w	801e890 <chirp_controller_read_command+0x8a0>
          {
            if (i < 4)
 801e0fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e0fe:	2b03      	cmp	r3, #3
 801e100:	d83d      	bhi.n	801e17e <chirp_controller_read_command+0x18e>
            {
              data =  data - '0';
 801e102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e106:	3b30      	subs	r3, #48	; 0x30
 801e108:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 3;
 801e10c:	2303      	movs	r3, #3
 801e10e:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_year += data * pow(10,(pow_num-i));
 801e110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e114:	4618      	mov	r0, r3
 801e116:	f7e2 fa0f 	bl	8000538 <__aeabi_i2d>
 801e11a:	4604      	mov	r4, r0
 801e11c:	460d      	mov	r5, r1
 801e11e:	7efa      	ldrb	r2, [r7, #27]
 801e120:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e124:	1ad3      	subs	r3, r2, r3
 801e126:	4618      	mov	r0, r3
 801e128:	f7e2 fa06 	bl	8000538 <__aeabi_i2d>
 801e12c:	4602      	mov	r2, r0
 801e12e:	460b      	mov	r3, r1
 801e130:	ec43 2b11 	vmov	d1, r2, r3
 801e134:	ed9f 0b98 	vldr	d0, [pc, #608]	; 801e398 <chirp_controller_read_command+0x3a8>
 801e138:	f006 f93a 	bl	80243b0 <pow>
 801e13c:	ec53 2b10 	vmov	r2, r3, d0
 801e140:	4620      	mov	r0, r4
 801e142:	4629      	mov	r1, r5
 801e144:	f7e2 fa62 	bl	800060c <__aeabi_dmul>
 801e148:	4603      	mov	r3, r0
 801e14a:	460c      	mov	r4, r1
 801e14c:	4625      	mov	r5, r4
 801e14e:	461c      	mov	r4, r3
 801e150:	697b      	ldr	r3, [r7, #20]
 801e152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e154:	b29b      	uxth	r3, r3
 801e156:	4618      	mov	r0, r3
 801e158:	f7e2 f9ee 	bl	8000538 <__aeabi_i2d>
 801e15c:	4602      	mov	r2, r0
 801e15e:	460b      	mov	r3, r1
 801e160:	4620      	mov	r0, r4
 801e162:	4629      	mov	r1, r5
 801e164:	f7e2 f89c 	bl	80002a0 <__adddf3>
 801e168:	4603      	mov	r3, r0
 801e16a:	460c      	mov	r4, r1
 801e16c:	4618      	mov	r0, r3
 801e16e:	4621      	mov	r1, r4
 801e170:	f7e2 fd24 	bl	8000bbc <__aeabi_d2uiz>
 801e174:	4603      	mov	r3, r0
 801e176:	b29a      	uxth	r2, r3
 801e178:	697b      	ldr	r3, [r7, #20]
 801e17a:	851a      	strh	r2, [r3, #40]	; 0x28
 801e17c:	e388      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 7)
 801e17e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e182:	2b06      	cmp	r3, #6
 801e184:	d83e      	bhi.n	801e204 <chirp_controller_read_command+0x214>
            {
              data =  data - '0';
 801e186:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e18a:	3b30      	subs	r3, #48	; 0x30
 801e18c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 6;
 801e190:	2306      	movs	r3, #6
 801e192:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_month += data * pow(10,(pow_num-i));
 801e194:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e198:	4618      	mov	r0, r3
 801e19a:	f7e2 f9cd 	bl	8000538 <__aeabi_i2d>
 801e19e:	4604      	mov	r4, r0
 801e1a0:	460d      	mov	r5, r1
 801e1a2:	7efa      	ldrb	r2, [r7, #27]
 801e1a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e1a8:	1ad3      	subs	r3, r2, r3
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f7e2 f9c4 	bl	8000538 <__aeabi_i2d>
 801e1b0:	4602      	mov	r2, r0
 801e1b2:	460b      	mov	r3, r1
 801e1b4:	ec43 2b11 	vmov	d1, r2, r3
 801e1b8:	ed9f 0b77 	vldr	d0, [pc, #476]	; 801e398 <chirp_controller_read_command+0x3a8>
 801e1bc:	f006 f8f8 	bl	80243b0 <pow>
 801e1c0:	ec53 2b10 	vmov	r2, r3, d0
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	4629      	mov	r1, r5
 801e1c8:	f7e2 fa20 	bl	800060c <__aeabi_dmul>
 801e1cc:	4603      	mov	r3, r0
 801e1ce:	460c      	mov	r4, r1
 801e1d0:	4625      	mov	r5, r4
 801e1d2:	461c      	mov	r4, r3
 801e1d4:	697b      	ldr	r3, [r7, #20]
 801e1d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801e1da:	4618      	mov	r0, r3
 801e1dc:	f7e2 f9ac 	bl	8000538 <__aeabi_i2d>
 801e1e0:	4602      	mov	r2, r0
 801e1e2:	460b      	mov	r3, r1
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	4629      	mov	r1, r5
 801e1e8:	f7e2 f85a 	bl	80002a0 <__adddf3>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	460c      	mov	r4, r1
 801e1f0:	4618      	mov	r0, r3
 801e1f2:	4621      	mov	r1, r4
 801e1f4:	f7e2 fce2 	bl	8000bbc <__aeabi_d2uiz>
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	b2da      	uxtb	r2, r3
 801e1fc:	697b      	ldr	r3, [r7, #20]
 801e1fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 801e202:	e345      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 10)
 801e204:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e208:	2b09      	cmp	r3, #9
 801e20a:	d83e      	bhi.n	801e28a <chirp_controller_read_command+0x29a>
            {
              data =  data - '0';
 801e20c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e210:	3b30      	subs	r3, #48	; 0x30
 801e212:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 9;
 801e216:	2309      	movs	r3, #9
 801e218:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_date += data * pow(10,(pow_num-i));
 801e21a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e21e:	4618      	mov	r0, r3
 801e220:	f7e2 f98a 	bl	8000538 <__aeabi_i2d>
 801e224:	4604      	mov	r4, r0
 801e226:	460d      	mov	r5, r1
 801e228:	7efa      	ldrb	r2, [r7, #27]
 801e22a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e22e:	1ad3      	subs	r3, r2, r3
 801e230:	4618      	mov	r0, r3
 801e232:	f7e2 f981 	bl	8000538 <__aeabi_i2d>
 801e236:	4602      	mov	r2, r0
 801e238:	460b      	mov	r3, r1
 801e23a:	ec43 2b11 	vmov	d1, r2, r3
 801e23e:	ed9f 0b56 	vldr	d0, [pc, #344]	; 801e398 <chirp_controller_read_command+0x3a8>
 801e242:	f006 f8b5 	bl	80243b0 <pow>
 801e246:	ec53 2b10 	vmov	r2, r3, d0
 801e24a:	4620      	mov	r0, r4
 801e24c:	4629      	mov	r1, r5
 801e24e:	f7e2 f9dd 	bl	800060c <__aeabi_dmul>
 801e252:	4603      	mov	r3, r0
 801e254:	460c      	mov	r4, r1
 801e256:	4625      	mov	r5, r4
 801e258:	461c      	mov	r4, r3
 801e25a:	697b      	ldr	r3, [r7, #20]
 801e25c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801e260:	4618      	mov	r0, r3
 801e262:	f7e2 f969 	bl	8000538 <__aeabi_i2d>
 801e266:	4602      	mov	r2, r0
 801e268:	460b      	mov	r3, r1
 801e26a:	4620      	mov	r0, r4
 801e26c:	4629      	mov	r1, r5
 801e26e:	f7e2 f817 	bl	80002a0 <__adddf3>
 801e272:	4603      	mov	r3, r0
 801e274:	460c      	mov	r4, r1
 801e276:	4618      	mov	r0, r3
 801e278:	4621      	mov	r1, r4
 801e27a:	f7e2 fc9f 	bl	8000bbc <__aeabi_d2uiz>
 801e27e:	4603      	mov	r3, r0
 801e280:	b2da      	uxtb	r2, r3
 801e282:	697b      	ldr	r3, [r7, #20]
 801e284:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 801e288:	e302      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 13)
 801e28a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e28e:	2b0c      	cmp	r3, #12
 801e290:	d83e      	bhi.n	801e310 <chirp_controller_read_command+0x320>
            {
              data =  data - '0';
 801e292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e296:	3b30      	subs	r3, #48	; 0x30
 801e298:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 12;
 801e29c:	230c      	movs	r3, #12
 801e29e:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_hour += data * pow(10,(pow_num-i));
 801e2a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e2a4:	4618      	mov	r0, r3
 801e2a6:	f7e2 f947 	bl	8000538 <__aeabi_i2d>
 801e2aa:	4604      	mov	r4, r0
 801e2ac:	460d      	mov	r5, r1
 801e2ae:	7efa      	ldrb	r2, [r7, #27]
 801e2b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e2b4:	1ad3      	subs	r3, r2, r3
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7e2 f93e 	bl	8000538 <__aeabi_i2d>
 801e2bc:	4602      	mov	r2, r0
 801e2be:	460b      	mov	r3, r1
 801e2c0:	ec43 2b11 	vmov	d1, r2, r3
 801e2c4:	ed9f 0b34 	vldr	d0, [pc, #208]	; 801e398 <chirp_controller_read_command+0x3a8>
 801e2c8:	f006 f872 	bl	80243b0 <pow>
 801e2cc:	ec53 2b10 	vmov	r2, r3, d0
 801e2d0:	4620      	mov	r0, r4
 801e2d2:	4629      	mov	r1, r5
 801e2d4:	f7e2 f99a 	bl	800060c <__aeabi_dmul>
 801e2d8:	4603      	mov	r3, r0
 801e2da:	460c      	mov	r4, r1
 801e2dc:	4625      	mov	r5, r4
 801e2de:	461c      	mov	r4, r3
 801e2e0:	697b      	ldr	r3, [r7, #20]
 801e2e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	f7e2 f926 	bl	8000538 <__aeabi_i2d>
 801e2ec:	4602      	mov	r2, r0
 801e2ee:	460b      	mov	r3, r1
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	4629      	mov	r1, r5
 801e2f4:	f7e1 ffd4 	bl	80002a0 <__adddf3>
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	460c      	mov	r4, r1
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	4621      	mov	r1, r4
 801e300:	f7e2 fc5c 	bl	8000bbc <__aeabi_d2uiz>
 801e304:	4603      	mov	r3, r0
 801e306:	b2da      	uxtb	r2, r3
 801e308:	697b      	ldr	r3, [r7, #20]
 801e30a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801e30e:	e2bf      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 16)
 801e310:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e314:	2b0f      	cmp	r3, #15
 801e316:	d847      	bhi.n	801e3a8 <chirp_controller_read_command+0x3b8>
            {
              data =  data - '0';
 801e318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e31c:	3b30      	subs	r3, #48	; 0x30
 801e31e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 15;
 801e322:	230f      	movs	r3, #15
 801e324:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_min += data * pow(10,(pow_num-i));
 801e326:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7e2 f904 	bl	8000538 <__aeabi_i2d>
 801e330:	4604      	mov	r4, r0
 801e332:	460d      	mov	r5, r1
 801e334:	7efa      	ldrb	r2, [r7, #27]
 801e336:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e33a:	1ad3      	subs	r3, r2, r3
 801e33c:	4618      	mov	r0, r3
 801e33e:	f7e2 f8fb 	bl	8000538 <__aeabi_i2d>
 801e342:	4602      	mov	r2, r0
 801e344:	460b      	mov	r3, r1
 801e346:	ec43 2b11 	vmov	d1, r2, r3
 801e34a:	ed9f 0b13 	vldr	d0, [pc, #76]	; 801e398 <chirp_controller_read_command+0x3a8>
 801e34e:	f006 f82f 	bl	80243b0 <pow>
 801e352:	ec53 2b10 	vmov	r2, r3, d0
 801e356:	4620      	mov	r0, r4
 801e358:	4629      	mov	r1, r5
 801e35a:	f7e2 f957 	bl	800060c <__aeabi_dmul>
 801e35e:	4603      	mov	r3, r0
 801e360:	460c      	mov	r4, r1
 801e362:	4625      	mov	r5, r4
 801e364:	461c      	mov	r4, r3
 801e366:	697b      	ldr	r3, [r7, #20]
 801e368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7e2 f8e3 	bl	8000538 <__aeabi_i2d>
 801e372:	4602      	mov	r2, r0
 801e374:	460b      	mov	r3, r1
 801e376:	4620      	mov	r0, r4
 801e378:	4629      	mov	r1, r5
 801e37a:	f7e1 ff91 	bl	80002a0 <__adddf3>
 801e37e:	4603      	mov	r3, r0
 801e380:	460c      	mov	r4, r1
 801e382:	4618      	mov	r0, r3
 801e384:	4621      	mov	r1, r4
 801e386:	f7e2 fc19 	bl	8000bbc <__aeabi_d2uiz>
 801e38a:	4603      	mov	r3, r0
 801e38c:	b2da      	uxtb	r2, r3
 801e38e:	697b      	ldr	r3, [r7, #20]
 801e390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801e394:	e27c      	b.n	801e890 <chirp_controller_read_command+0x8a0>
 801e396:	bf00      	nop
 801e398:	00000000 	.word	0x00000000
 801e39c:	40240000 	.word	0x40240000
 801e3a0:	08026954 	.word	0x08026954
 801e3a4:	200022d8 	.word	0x200022d8
            }
            else if (i < 19)
 801e3a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e3ac:	2b12      	cmp	r3, #18
 801e3ae:	d83e      	bhi.n	801e42e <chirp_controller_read_command+0x43e>
            {
              data =  data - '0';
 801e3b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e3b4:	3b30      	subs	r3, #48	; 0x30
 801e3b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 18;
 801e3ba:	2312      	movs	r3, #18
 801e3bc:	76fb      	strb	r3, [r7, #27]
              chirp_outl->start_sec += data * pow(10,(pow_num-i));
 801e3be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	f7e2 f8b8 	bl	8000538 <__aeabi_i2d>
 801e3c8:	4604      	mov	r4, r0
 801e3ca:	460d      	mov	r5, r1
 801e3cc:	7efa      	ldrb	r2, [r7, #27]
 801e3ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e3d2:	1ad3      	subs	r3, r2, r3
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	f7e2 f8af 	bl	8000538 <__aeabi_i2d>
 801e3da:	4602      	mov	r2, r0
 801e3dc:	460b      	mov	r3, r1
 801e3de:	ec43 2b11 	vmov	d1, r2, r3
 801e3e2:	ed9f 0bdd 	vldr	d0, [pc, #884]	; 801e758 <chirp_controller_read_command+0x768>
 801e3e6:	f005 ffe3 	bl	80243b0 <pow>
 801e3ea:	ec53 2b10 	vmov	r2, r3, d0
 801e3ee:	4620      	mov	r0, r4
 801e3f0:	4629      	mov	r1, r5
 801e3f2:	f7e2 f90b 	bl	800060c <__aeabi_dmul>
 801e3f6:	4603      	mov	r3, r0
 801e3f8:	460c      	mov	r4, r1
 801e3fa:	4625      	mov	r5, r4
 801e3fc:	461c      	mov	r4, r3
 801e3fe:	697b      	ldr	r3, [r7, #20]
 801e400:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e404:	4618      	mov	r0, r3
 801e406:	f7e2 f897 	bl	8000538 <__aeabi_i2d>
 801e40a:	4602      	mov	r2, r0
 801e40c:	460b      	mov	r3, r1
 801e40e:	4620      	mov	r0, r4
 801e410:	4629      	mov	r1, r5
 801e412:	f7e1 ff45 	bl	80002a0 <__adddf3>
 801e416:	4603      	mov	r3, r0
 801e418:	460c      	mov	r4, r1
 801e41a:	4618      	mov	r0, r3
 801e41c:	4621      	mov	r1, r4
 801e41e:	f7e2 fbcd 	bl	8000bbc <__aeabi_d2uiz>
 801e422:	4603      	mov	r3, r0
 801e424:	b2da      	uxtb	r2, r3
 801e426:	697b      	ldr	r3, [r7, #20]
 801e428:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 801e42c:	e230      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 24)
 801e42e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e432:	2b17      	cmp	r3, #23
 801e434:	d83f      	bhi.n	801e4b6 <chirp_controller_read_command+0x4c6>
            {
              data =  data - '0';
 801e436:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e43a:	3b30      	subs	r3, #48	; 0x30
 801e43c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 23;
 801e440:	2317      	movs	r3, #23
 801e442:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_year += data * pow(10,(pow_num-i));
 801e444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e448:	4618      	mov	r0, r3
 801e44a:	f7e2 f875 	bl	8000538 <__aeabi_i2d>
 801e44e:	4604      	mov	r4, r0
 801e450:	460d      	mov	r5, r1
 801e452:	7efa      	ldrb	r2, [r7, #27]
 801e454:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e458:	1ad3      	subs	r3, r2, r3
 801e45a:	4618      	mov	r0, r3
 801e45c:	f7e2 f86c 	bl	8000538 <__aeabi_i2d>
 801e460:	4602      	mov	r2, r0
 801e462:	460b      	mov	r3, r1
 801e464:	ec43 2b11 	vmov	d1, r2, r3
 801e468:	ed9f 0bbb 	vldr	d0, [pc, #748]	; 801e758 <chirp_controller_read_command+0x768>
 801e46c:	f005 ffa0 	bl	80243b0 <pow>
 801e470:	ec53 2b10 	vmov	r2, r3, d0
 801e474:	4620      	mov	r0, r4
 801e476:	4629      	mov	r1, r5
 801e478:	f7e2 f8c8 	bl	800060c <__aeabi_dmul>
 801e47c:	4603      	mov	r3, r0
 801e47e:	460c      	mov	r4, r1
 801e480:	4625      	mov	r5, r4
 801e482:	461c      	mov	r4, r3
 801e484:	697b      	ldr	r3, [r7, #20]
 801e486:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801e48a:	b29b      	uxth	r3, r3
 801e48c:	4618      	mov	r0, r3
 801e48e:	f7e2 f853 	bl	8000538 <__aeabi_i2d>
 801e492:	4602      	mov	r2, r0
 801e494:	460b      	mov	r3, r1
 801e496:	4620      	mov	r0, r4
 801e498:	4629      	mov	r1, r5
 801e49a:	f7e1 ff01 	bl	80002a0 <__adddf3>
 801e49e:	4603      	mov	r3, r0
 801e4a0:	460c      	mov	r4, r1
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	4621      	mov	r1, r4
 801e4a6:	f7e2 fb89 	bl	8000bbc <__aeabi_d2uiz>
 801e4aa:	4603      	mov	r3, r0
 801e4ac:	b29a      	uxth	r2, r3
 801e4ae:	697b      	ldr	r3, [r7, #20]
 801e4b0:	f8a3 202f 	strh.w	r2, [r3, #47]	; 0x2f
 801e4b4:	e1ec      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 27)
 801e4b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e4ba:	2b1a      	cmp	r3, #26
 801e4bc:	d83e      	bhi.n	801e53c <chirp_controller_read_command+0x54c>
            {
              data =  data - '0';
 801e4be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e4c2:	3b30      	subs	r3, #48	; 0x30
 801e4c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 26;
 801e4c8:	231a      	movs	r3, #26
 801e4ca:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_month += data * pow(10,(pow_num-i));
 801e4cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7e2 f831 	bl	8000538 <__aeabi_i2d>
 801e4d6:	4604      	mov	r4, r0
 801e4d8:	460d      	mov	r5, r1
 801e4da:	7efa      	ldrb	r2, [r7, #27]
 801e4dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e4e0:	1ad3      	subs	r3, r2, r3
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	f7e2 f828 	bl	8000538 <__aeabi_i2d>
 801e4e8:	4602      	mov	r2, r0
 801e4ea:	460b      	mov	r3, r1
 801e4ec:	ec43 2b11 	vmov	d1, r2, r3
 801e4f0:	ed9f 0b99 	vldr	d0, [pc, #612]	; 801e758 <chirp_controller_read_command+0x768>
 801e4f4:	f005 ff5c 	bl	80243b0 <pow>
 801e4f8:	ec53 2b10 	vmov	r2, r3, d0
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	4629      	mov	r1, r5
 801e500:	f7e2 f884 	bl	800060c <__aeabi_dmul>
 801e504:	4603      	mov	r3, r0
 801e506:	460c      	mov	r4, r1
 801e508:	4625      	mov	r5, r4
 801e50a:	461c      	mov	r4, r3
 801e50c:	697b      	ldr	r3, [r7, #20]
 801e50e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e512:	4618      	mov	r0, r3
 801e514:	f7e2 f810 	bl	8000538 <__aeabi_i2d>
 801e518:	4602      	mov	r2, r0
 801e51a:	460b      	mov	r3, r1
 801e51c:	4620      	mov	r0, r4
 801e51e:	4629      	mov	r1, r5
 801e520:	f7e1 febe 	bl	80002a0 <__adddf3>
 801e524:	4603      	mov	r3, r0
 801e526:	460c      	mov	r4, r1
 801e528:	4618      	mov	r0, r3
 801e52a:	4621      	mov	r1, r4
 801e52c:	f7e2 fb46 	bl	8000bbc <__aeabi_d2uiz>
 801e530:	4603      	mov	r3, r0
 801e532:	b2da      	uxtb	r2, r3
 801e534:	697b      	ldr	r3, [r7, #20]
 801e536:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801e53a:	e1a9      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 30)
 801e53c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e540:	2b1d      	cmp	r3, #29
 801e542:	d83e      	bhi.n	801e5c2 <chirp_controller_read_command+0x5d2>
            {
              data =  data - '0';
 801e544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e548:	3b30      	subs	r3, #48	; 0x30
 801e54a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 29;
 801e54e:	231d      	movs	r3, #29
 801e550:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_date += data * pow(10,(pow_num-i));
 801e552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e556:	4618      	mov	r0, r3
 801e558:	f7e1 ffee 	bl	8000538 <__aeabi_i2d>
 801e55c:	4604      	mov	r4, r0
 801e55e:	460d      	mov	r5, r1
 801e560:	7efa      	ldrb	r2, [r7, #27]
 801e562:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e566:	1ad3      	subs	r3, r2, r3
 801e568:	4618      	mov	r0, r3
 801e56a:	f7e1 ffe5 	bl	8000538 <__aeabi_i2d>
 801e56e:	4602      	mov	r2, r0
 801e570:	460b      	mov	r3, r1
 801e572:	ec43 2b11 	vmov	d1, r2, r3
 801e576:	ed9f 0b78 	vldr	d0, [pc, #480]	; 801e758 <chirp_controller_read_command+0x768>
 801e57a:	f005 ff19 	bl	80243b0 <pow>
 801e57e:	ec53 2b10 	vmov	r2, r3, d0
 801e582:	4620      	mov	r0, r4
 801e584:	4629      	mov	r1, r5
 801e586:	f7e2 f841 	bl	800060c <__aeabi_dmul>
 801e58a:	4603      	mov	r3, r0
 801e58c:	460c      	mov	r4, r1
 801e58e:	4625      	mov	r5, r4
 801e590:	461c      	mov	r4, r3
 801e592:	697b      	ldr	r3, [r7, #20]
 801e594:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801e598:	4618      	mov	r0, r3
 801e59a:	f7e1 ffcd 	bl	8000538 <__aeabi_i2d>
 801e59e:	4602      	mov	r2, r0
 801e5a0:	460b      	mov	r3, r1
 801e5a2:	4620      	mov	r0, r4
 801e5a4:	4629      	mov	r1, r5
 801e5a6:	f7e1 fe7b 	bl	80002a0 <__adddf3>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	460c      	mov	r4, r1
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	4621      	mov	r1, r4
 801e5b2:	f7e2 fb03 	bl	8000bbc <__aeabi_d2uiz>
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	b2da      	uxtb	r2, r3
 801e5ba:	697b      	ldr	r3, [r7, #20]
 801e5bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 801e5c0:	e166      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 33)
 801e5c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e5c6:	2b20      	cmp	r3, #32
 801e5c8:	d83e      	bhi.n	801e648 <chirp_controller_read_command+0x658>
            {
              data =  data - '0';
 801e5ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e5ce:	3b30      	subs	r3, #48	; 0x30
 801e5d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 32;
 801e5d4:	2320      	movs	r3, #32
 801e5d6:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_hour += data * pow(10,(pow_num-i));
 801e5d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e5dc:	4618      	mov	r0, r3
 801e5de:	f7e1 ffab 	bl	8000538 <__aeabi_i2d>
 801e5e2:	4604      	mov	r4, r0
 801e5e4:	460d      	mov	r5, r1
 801e5e6:	7efa      	ldrb	r2, [r7, #27]
 801e5e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e5ec:	1ad3      	subs	r3, r2, r3
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	f7e1 ffa2 	bl	8000538 <__aeabi_i2d>
 801e5f4:	4602      	mov	r2, r0
 801e5f6:	460b      	mov	r3, r1
 801e5f8:	ec43 2b11 	vmov	d1, r2, r3
 801e5fc:	ed9f 0b56 	vldr	d0, [pc, #344]	; 801e758 <chirp_controller_read_command+0x768>
 801e600:	f005 fed6 	bl	80243b0 <pow>
 801e604:	ec53 2b10 	vmov	r2, r3, d0
 801e608:	4620      	mov	r0, r4
 801e60a:	4629      	mov	r1, r5
 801e60c:	f7e1 fffe 	bl	800060c <__aeabi_dmul>
 801e610:	4603      	mov	r3, r0
 801e612:	460c      	mov	r4, r1
 801e614:	4625      	mov	r5, r4
 801e616:	461c      	mov	r4, r3
 801e618:	697b      	ldr	r3, [r7, #20]
 801e61a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801e61e:	4618      	mov	r0, r3
 801e620:	f7e1 ff8a 	bl	8000538 <__aeabi_i2d>
 801e624:	4602      	mov	r2, r0
 801e626:	460b      	mov	r3, r1
 801e628:	4620      	mov	r0, r4
 801e62a:	4629      	mov	r1, r5
 801e62c:	f7e1 fe38 	bl	80002a0 <__adddf3>
 801e630:	4603      	mov	r3, r0
 801e632:	460c      	mov	r4, r1
 801e634:	4618      	mov	r0, r3
 801e636:	4621      	mov	r1, r4
 801e638:	f7e2 fac0 	bl	8000bbc <__aeabi_d2uiz>
 801e63c:	4603      	mov	r3, r0
 801e63e:	b2da      	uxtb	r2, r3
 801e640:	697b      	ldr	r3, [r7, #20]
 801e642:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 801e646:	e123      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 36)
 801e648:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e64c:	2b23      	cmp	r3, #35	; 0x23
 801e64e:	d83e      	bhi.n	801e6ce <chirp_controller_read_command+0x6de>
            {
              data =  data - '0';
 801e650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e654:	3b30      	subs	r3, #48	; 0x30
 801e656:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 35;
 801e65a:	2323      	movs	r3, #35	; 0x23
 801e65c:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_min += data * pow(10,(pow_num-i));
 801e65e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e662:	4618      	mov	r0, r3
 801e664:	f7e1 ff68 	bl	8000538 <__aeabi_i2d>
 801e668:	4604      	mov	r4, r0
 801e66a:	460d      	mov	r5, r1
 801e66c:	7efa      	ldrb	r2, [r7, #27]
 801e66e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e672:	1ad3      	subs	r3, r2, r3
 801e674:	4618      	mov	r0, r3
 801e676:	f7e1 ff5f 	bl	8000538 <__aeabi_i2d>
 801e67a:	4602      	mov	r2, r0
 801e67c:	460b      	mov	r3, r1
 801e67e:	ec43 2b11 	vmov	d1, r2, r3
 801e682:	ed9f 0b35 	vldr	d0, [pc, #212]	; 801e758 <chirp_controller_read_command+0x768>
 801e686:	f005 fe93 	bl	80243b0 <pow>
 801e68a:	ec53 2b10 	vmov	r2, r3, d0
 801e68e:	4620      	mov	r0, r4
 801e690:	4629      	mov	r1, r5
 801e692:	f7e1 ffbb 	bl	800060c <__aeabi_dmul>
 801e696:	4603      	mov	r3, r0
 801e698:	460c      	mov	r4, r1
 801e69a:	4625      	mov	r5, r4
 801e69c:	461c      	mov	r4, r3
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f7e1 ff47 	bl	8000538 <__aeabi_i2d>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	460b      	mov	r3, r1
 801e6ae:	4620      	mov	r0, r4
 801e6b0:	4629      	mov	r1, r5
 801e6b2:	f7e1 fdf5 	bl	80002a0 <__adddf3>
 801e6b6:	4603      	mov	r3, r0
 801e6b8:	460c      	mov	r4, r1
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	4621      	mov	r1, r4
 801e6be:	f7e2 fa7d 	bl	8000bbc <__aeabi_d2uiz>
 801e6c2:	4603      	mov	r3, r0
 801e6c4:	b2da      	uxtb	r2, r3
 801e6c6:	697b      	ldr	r3, [r7, #20]
 801e6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801e6cc:	e0e0      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 39)
 801e6ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e6d2:	2b26      	cmp	r3, #38	; 0x26
 801e6d4:	d848      	bhi.n	801e768 <chirp_controller_read_command+0x778>
            {
              data =  data - '0';
 801e6d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6da:	3b30      	subs	r3, #48	; 0x30
 801e6dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 38;
 801e6e0:	2326      	movs	r3, #38	; 0x26
 801e6e2:	76fb      	strb	r3, [r7, #27]
              chirp_outl->end_sec += data * pow(10,(pow_num-i));
 801e6e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	f7e1 ff25 	bl	8000538 <__aeabi_i2d>
 801e6ee:	4604      	mov	r4, r0
 801e6f0:	460d      	mov	r5, r1
 801e6f2:	7efa      	ldrb	r2, [r7, #27]
 801e6f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e6f8:	1ad3      	subs	r3, r2, r3
 801e6fa:	4618      	mov	r0, r3
 801e6fc:	f7e1 ff1c 	bl	8000538 <__aeabi_i2d>
 801e700:	4602      	mov	r2, r0
 801e702:	460b      	mov	r3, r1
 801e704:	ec43 2b11 	vmov	d1, r2, r3
 801e708:	ed9f 0b13 	vldr	d0, [pc, #76]	; 801e758 <chirp_controller_read_command+0x768>
 801e70c:	f005 fe50 	bl	80243b0 <pow>
 801e710:	ec53 2b10 	vmov	r2, r3, d0
 801e714:	4620      	mov	r0, r4
 801e716:	4629      	mov	r1, r5
 801e718:	f7e1 ff78 	bl	800060c <__aeabi_dmul>
 801e71c:	4603      	mov	r3, r0
 801e71e:	460c      	mov	r4, r1
 801e720:	4625      	mov	r5, r4
 801e722:	461c      	mov	r4, r3
 801e724:	697b      	ldr	r3, [r7, #20]
 801e726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e72a:	4618      	mov	r0, r3
 801e72c:	f7e1 ff04 	bl	8000538 <__aeabi_i2d>
 801e730:	4602      	mov	r2, r0
 801e732:	460b      	mov	r3, r1
 801e734:	4620      	mov	r0, r4
 801e736:	4629      	mov	r1, r5
 801e738:	f7e1 fdb2 	bl	80002a0 <__adddf3>
 801e73c:	4603      	mov	r3, r0
 801e73e:	460c      	mov	r4, r1
 801e740:	4618      	mov	r0, r3
 801e742:	4621      	mov	r1, r4
 801e744:	f7e2 fa3a 	bl	8000bbc <__aeabi_d2uiz>
 801e748:	4603      	mov	r3, r0
 801e74a:	b2da      	uxtb	r2, r3
 801e74c:	697b      	ldr	r3, [r7, #20]
 801e74e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801e752:	e09d      	b.n	801e890 <chirp_controller_read_command+0x8a0>
 801e754:	f3af 8000 	nop.w
 801e758:	00000000 	.word	0x00000000
 801e75c:	40240000 	.word	0x40240000
 801e760:	00000000 	.word	0x00000000
 801e764:	40300000 	.word	0x40300000
            }
            else if (i < 41)
 801e768:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e76c:	2b28      	cmp	r3, #40	; 0x28
 801e76e:	d83e      	bhi.n	801e7ee <chirp_controller_read_command+0x7fe>
            {
              data =  data - '0';
 801e770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e774:	3b30      	subs	r3, #48	; 0x30
 801e776:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 40;
 801e77a:	2328      	movs	r3, #40	; 0x28
 801e77c:	76fb      	strb	r3, [r7, #27]
              chirp_outl->flash_protection += data * pow(10,(pow_num-i));
 801e77e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e782:	4618      	mov	r0, r3
 801e784:	f7e1 fed8 	bl	8000538 <__aeabi_i2d>
 801e788:	4604      	mov	r4, r0
 801e78a:	460d      	mov	r5, r1
 801e78c:	7efa      	ldrb	r2, [r7, #27]
 801e78e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e792:	1ad3      	subs	r3, r2, r3
 801e794:	4618      	mov	r0, r3
 801e796:	f7e1 fecf 	bl	8000538 <__aeabi_i2d>
 801e79a:	4602      	mov	r2, r0
 801e79c:	460b      	mov	r3, r1
 801e79e:	ec43 2b11 	vmov	d1, r2, r3
 801e7a2:	ed1f 0b13 	vldr	d0, [pc, #-76]	; 801e758 <chirp_controller_read_command+0x768>
 801e7a6:	f005 fe03 	bl	80243b0 <pow>
 801e7aa:	ec53 2b10 	vmov	r2, r3, d0
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	4629      	mov	r1, r5
 801e7b2:	f7e1 ff2b 	bl	800060c <__aeabi_dmul>
 801e7b6:	4603      	mov	r3, r0
 801e7b8:	460c      	mov	r4, r1
 801e7ba:	4625      	mov	r5, r4
 801e7bc:	461c      	mov	r4, r3
 801e7be:	697b      	ldr	r3, [r7, #20]
 801e7c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801e7c4:	4618      	mov	r0, r3
 801e7c6:	f7e1 feb7 	bl	8000538 <__aeabi_i2d>
 801e7ca:	4602      	mov	r2, r0
 801e7cc:	460b      	mov	r3, r1
 801e7ce:	4620      	mov	r0, r4
 801e7d0:	4629      	mov	r1, r5
 801e7d2:	f7e1 fd65 	bl	80002a0 <__adddf3>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	460c      	mov	r4, r1
 801e7da:	4618      	mov	r0, r3
 801e7dc:	4621      	mov	r1, r4
 801e7de:	f7e2 f9ed 	bl	8000bbc <__aeabi_d2uiz>
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	b2da      	uxtb	r2, r3
 801e7e6:	697b      	ldr	r3, [r7, #20]
 801e7e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 801e7ec:	e050      	b.n	801e890 <chirp_controller_read_command+0x8a0>
            }
            else if (i < 46)
 801e7ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e7f2:	2b2d      	cmp	r3, #45	; 0x2d
 801e7f4:	d84c      	bhi.n	801e890 <chirp_controller_read_command+0x8a0>
            {
              if ((data >= '0') && (data <= '9'))
 801e7f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e7fa:	2b2f      	cmp	r3, #47	; 0x2f
 801e7fc:	d909      	bls.n	801e812 <chirp_controller_read_command+0x822>
 801e7fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e802:	2b39      	cmp	r3, #57	; 0x39
 801e804:	d805      	bhi.n	801e812 <chirp_controller_read_command+0x822>
                data = data - '0';
 801e806:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e80a:	3b30      	subs	r3, #48	; 0x30
 801e80c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e810:	e004      	b.n	801e81c <chirp_controller_read_command+0x82c>
              else
                data = 10 + data - 'A';
 801e812:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e816:	3b37      	subs	r3, #55	; 0x37
 801e818:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 45;
 801e81c:	232d      	movs	r3, #45	; 0x2d
 801e81e:	76fb      	strb	r3, [r7, #27]
              chirp_outl->version_hash += data * pow(16,(pow_num-i));
 801e820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e824:	4618      	mov	r0, r3
 801e826:	f7e1 fe87 	bl	8000538 <__aeabi_i2d>
 801e82a:	4604      	mov	r4, r0
 801e82c:	460d      	mov	r5, r1
 801e82e:	7efa      	ldrb	r2, [r7, #27]
 801e830:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e834:	1ad3      	subs	r3, r2, r3
 801e836:	4618      	mov	r0, r3
 801e838:	f7e1 fe7e 	bl	8000538 <__aeabi_i2d>
 801e83c:	4602      	mov	r2, r0
 801e83e:	460b      	mov	r3, r1
 801e840:	ec43 2b11 	vmov	d1, r2, r3
 801e844:	ed1f 0b3a 	vldr	d0, [pc, #-232]	; 801e760 <chirp_controller_read_command+0x770>
 801e848:	f005 fdb2 	bl	80243b0 <pow>
 801e84c:	ec53 2b10 	vmov	r2, r3, d0
 801e850:	4620      	mov	r0, r4
 801e852:	4629      	mov	r1, r5
 801e854:	f7e1 feda 	bl	800060c <__aeabi_dmul>
 801e858:	4603      	mov	r3, r0
 801e85a:	460c      	mov	r4, r1
 801e85c:	4625      	mov	r5, r4
 801e85e:	461c      	mov	r4, r3
 801e860:	697b      	ldr	r3, [r7, #20]
 801e862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e866:	b29b      	uxth	r3, r3
 801e868:	4618      	mov	r0, r3
 801e86a:	f7e1 fe65 	bl	8000538 <__aeabi_i2d>
 801e86e:	4602      	mov	r2, r0
 801e870:	460b      	mov	r3, r1
 801e872:	4620      	mov	r0, r4
 801e874:	4629      	mov	r1, r5
 801e876:	f7e1 fd13 	bl	80002a0 <__adddf3>
 801e87a:	4603      	mov	r3, r0
 801e87c:	460c      	mov	r4, r1
 801e87e:	4618      	mov	r0, r3
 801e880:	4621      	mov	r1, r4
 801e882:	f7e2 f99b 	bl	8000bbc <__aeabi_d2uiz>
 801e886:	4603      	mov	r3, r0
 801e888:	b29a      	uxth	r2, r3
 801e88a:	697b      	ldr	r3, [r7, #20]
 801e88c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        for (i = 0; i < rxbuffer_len; i++)
 801e890:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e894:	3301      	adds	r3, #1
 801e896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e89a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801e89e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e8a2:	429a      	cmp	r2, r3
 801e8a4:	f4ff ac0c 	bcc.w	801e0c0 <chirp_controller_read_command+0xd0>
            }
          }
        }

        PRINTF("\tSTART at %lu-%lu-%lu, %lu:%lu:%lu\n\tEnd at %lu-%lu-%lu, %lu:%lu:%lu\n, start user:%lu, ver:%x\n", chirp_outl->start_year, chirp_outl->start_month, chirp_outl->start_date, chirp_outl->start_hour, chirp_outl->start_min, chirp_outl->start_sec, chirp_outl->end_year, chirp_outl->end_month, chirp_outl->end_date, chirp_outl->end_hour, chirp_outl->end_min, chirp_outl->end_sec, chirp_outl->flash_protection, chirp_outl->version_hash);
 801e8a8:	697b      	ldr	r3, [r7, #20]
 801e8aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e8ac:	b29b      	uxth	r3, r3
 801e8ae:	469c      	mov	ip, r3
 801e8b0:	697b      	ldr	r3, [r7, #20]
 801e8b2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801e8b6:	469e      	mov	lr, r3
 801e8b8:	697b      	ldr	r3, [r7, #20]
 801e8ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801e8be:	4698      	mov	r8, r3
 801e8c0:	697b      	ldr	r3, [r7, #20]
 801e8c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e8c6:	461a      	mov	r2, r3
 801e8c8:	697b      	ldr	r3, [r7, #20]
 801e8ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e8ce:	4619      	mov	r1, r3
 801e8d0:	697b      	ldr	r3, [r7, #20]
 801e8d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	697b      	ldr	r3, [r7, #20]
 801e8da:	f8b3 302f 	ldrh.w	r3, [r3, #47]	; 0x2f
 801e8de:	b29b      	uxth	r3, r3
 801e8e0:	461c      	mov	r4, r3
 801e8e2:	697b      	ldr	r3, [r7, #20]
 801e8e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e8e8:	461d      	mov	r5, r3
 801e8ea:	697b      	ldr	r3, [r7, #20]
 801e8ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801e8f0:	461e      	mov	r6, r3
 801e8f2:	697b      	ldr	r3, [r7, #20]
 801e8f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801e8f8:	613b      	str	r3, [r7, #16]
 801e8fa:	697b      	ldr	r3, [r7, #20]
 801e8fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e900:	60fb      	str	r3, [r7, #12]
 801e902:	697b      	ldr	r3, [r7, #20]
 801e904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e908:	60bb      	str	r3, [r7, #8]
 801e90a:	697b      	ldr	r3, [r7, #20]
 801e90c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801e910:	607b      	str	r3, [r7, #4]
 801e912:	697b      	ldr	r3, [r7, #20]
 801e914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e918:	b29b      	uxth	r3, r3
 801e91a:	930a      	str	r3, [sp, #40]	; 0x28
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	9309      	str	r3, [sp, #36]	; 0x24
 801e920:	68bb      	ldr	r3, [r7, #8]
 801e922:	9308      	str	r3, [sp, #32]
 801e924:	68fb      	ldr	r3, [r7, #12]
 801e926:	9307      	str	r3, [sp, #28]
 801e928:	693b      	ldr	r3, [r7, #16]
 801e92a:	9306      	str	r3, [sp, #24]
 801e92c:	9605      	str	r6, [sp, #20]
 801e92e:	9504      	str	r5, [sp, #16]
 801e930:	9403      	str	r4, [sp, #12]
 801e932:	9002      	str	r0, [sp, #8]
 801e934:	9101      	str	r1, [sp, #4]
 801e936:	9200      	str	r2, [sp, #0]
 801e938:	4643      	mov	r3, r8
 801e93a:	4672      	mov	r2, lr
 801e93c:	4661      	mov	r1, ip
 801e93e:	48d8      	ldr	r0, [pc, #864]	; (801eca0 <chirp_controller_read_command+0xcb0>)
 801e940:	f003 fe7c 	bl	802263c <iprintf>
        break;
 801e944:	f000 bce2 	b.w	801f30c <chirp_controller_read_command+0x131c>
      case MX_DISSEMINATE:
      {
        /* ("0,0,00000,00000,6A75": update whole firmware, "1,0,7f800,7f500,6A75": patch firmware of bank1, "1,1,7f800,7f500,6A75": patch firmware of bank2) */
        /* hash code is 0x6A75 */
        /* 87BA9B1B68BFE39666AAB255A1049CC7, md5 of the new file */
        memset(&(chirp_outl->firmware_size), 0, offsetof(Chirp_Outl, collect_addr_start) - offsetof(Chirp_Outl, firmware_size));
 801e948:	697b      	ldr	r3, [r7, #20]
 801e94a:	333c      	adds	r3, #60	; 0x3c
 801e94c:	222d      	movs	r2, #45	; 0x2d
 801e94e:	2100      	movs	r1, #0
 801e950:	4618      	mov	r0, r3
 801e952:	f003 f866 	bl	8021a22 <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801e956:	2300      	movs	r3, #0
 801e958:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801e95c:	e240      	b.n	801ede0 <chirp_controller_read_command+0xdf0>
        {
          data = (uint8_t)command_buffer[k++];
 801e95e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e962:	1c5a      	adds	r2, r3, #1
 801e964:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801e968:	461a      	mov	r2, r3
 801e96a:	69fb      	ldr	r3, [r7, #28]
 801e96c:	4413      	add	r3, r2
 801e96e:	781b      	ldrb	r3, [r3, #0]
 801e970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801e974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e978:	2b2f      	cmp	r3, #47	; 0x2f
 801e97a:	d903      	bls.n	801e984 <chirp_controller_read_command+0x994>
 801e97c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e980:	2b39      	cmp	r3, #57	; 0x39
 801e982:	d909      	bls.n	801e998 <chirp_controller_read_command+0x9a8>
 801e984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e988:	2b40      	cmp	r3, #64	; 0x40
 801e98a:	f240 8224 	bls.w	801edd6 <chirp_controller_read_command+0xde6>
 801e98e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e992:	2b46      	cmp	r3, #70	; 0x46
 801e994:	f200 821f 	bhi.w	801edd6 <chirp_controller_read_command+0xde6>
          {
            if (i < 1)
 801e998:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d13e      	bne.n	801ea1e <chirp_controller_read_command+0xa2e>
            {
              data =  data - '0';
 801e9a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9a4:	3b30      	subs	r3, #48	; 0x30
 801e9a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 0;
 801e9aa:	2300      	movs	r3, #0
 801e9ac:	76fb      	strb	r3, [r7, #27]
              chirp_outl->patch_update += data * pow(10,(pow_num-i));
 801e9ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	f7e1 fdc0 	bl	8000538 <__aeabi_i2d>
 801e9b8:	4604      	mov	r4, r0
 801e9ba:	460d      	mov	r5, r1
 801e9bc:	7efa      	ldrb	r2, [r7, #27]
 801e9be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801e9c2:	1ad3      	subs	r3, r2, r3
 801e9c4:	4618      	mov	r0, r3
 801e9c6:	f7e1 fdb7 	bl	8000538 <__aeabi_i2d>
 801e9ca:	4602      	mov	r2, r0
 801e9cc:	460b      	mov	r3, r1
 801e9ce:	ec43 2b11 	vmov	d1, r2, r3
 801e9d2:	ed9f 0baf 	vldr	d0, [pc, #700]	; 801ec90 <chirp_controller_read_command+0xca0>
 801e9d6:	f005 fceb 	bl	80243b0 <pow>
 801e9da:	ec53 2b10 	vmov	r2, r3, d0
 801e9de:	4620      	mov	r0, r4
 801e9e0:	4629      	mov	r1, r5
 801e9e2:	f7e1 fe13 	bl	800060c <__aeabi_dmul>
 801e9e6:	4603      	mov	r3, r0
 801e9e8:	460c      	mov	r4, r1
 801e9ea:	4625      	mov	r5, r4
 801e9ec:	461c      	mov	r4, r3
 801e9ee:	697b      	ldr	r3, [r7, #20]
 801e9f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	f7e1 fd9f 	bl	8000538 <__aeabi_i2d>
 801e9fa:	4602      	mov	r2, r0
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	4620      	mov	r0, r4
 801ea00:	4629      	mov	r1, r5
 801ea02:	f7e1 fc4d 	bl	80002a0 <__adddf3>
 801ea06:	4603      	mov	r3, r0
 801ea08:	460c      	mov	r4, r1
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	4621      	mov	r1, r4
 801ea0e:	f7e2 f8d5 	bl	8000bbc <__aeabi_d2uiz>
 801ea12:	4603      	mov	r3, r0
 801ea14:	b2da      	uxtb	r2, r3
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801ea1c:	e1db      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 3)
 801ea1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ea22:	2b02      	cmp	r3, #2
 801ea24:	d83e      	bhi.n	801eaa4 <chirp_controller_read_command+0xab4>
            {
              data =  data - '0';
 801ea26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea2a:	3b30      	subs	r3, #48	; 0x30
 801ea2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 2;
 801ea30:	2302      	movs	r3, #2
 801ea32:	76fb      	strb	r3, [r7, #27]
              chirp_outl->patch_bank += data * pow(10,(pow_num-i));
 801ea34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f7e1 fd7d 	bl	8000538 <__aeabi_i2d>
 801ea3e:	4604      	mov	r4, r0
 801ea40:	460d      	mov	r5, r1
 801ea42:	7efa      	ldrb	r2, [r7, #27]
 801ea44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ea48:	1ad3      	subs	r3, r2, r3
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	f7e1 fd74 	bl	8000538 <__aeabi_i2d>
 801ea50:	4602      	mov	r2, r0
 801ea52:	460b      	mov	r3, r1
 801ea54:	ec43 2b11 	vmov	d1, r2, r3
 801ea58:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 801ec90 <chirp_controller_read_command+0xca0>
 801ea5c:	f005 fca8 	bl	80243b0 <pow>
 801ea60:	ec53 2b10 	vmov	r2, r3, d0
 801ea64:	4620      	mov	r0, r4
 801ea66:	4629      	mov	r1, r5
 801ea68:	f7e1 fdd0 	bl	800060c <__aeabi_dmul>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	460c      	mov	r4, r1
 801ea70:	4625      	mov	r5, r4
 801ea72:	461c      	mov	r4, r3
 801ea74:	697b      	ldr	r3, [r7, #20]
 801ea76:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801ea7a:	4618      	mov	r0, r3
 801ea7c:	f7e1 fd5c 	bl	8000538 <__aeabi_i2d>
 801ea80:	4602      	mov	r2, r0
 801ea82:	460b      	mov	r3, r1
 801ea84:	4620      	mov	r0, r4
 801ea86:	4629      	mov	r1, r5
 801ea88:	f7e1 fc0a 	bl	80002a0 <__adddf3>
 801ea8c:	4603      	mov	r3, r0
 801ea8e:	460c      	mov	r4, r1
 801ea90:	4618      	mov	r0, r3
 801ea92:	4621      	mov	r1, r4
 801ea94:	f7e2 f892 	bl	8000bbc <__aeabi_d2uiz>
 801ea98:	4603      	mov	r3, r0
 801ea9a:	b2da      	uxtb	r2, r3
 801ea9c:	697b      	ldr	r3, [r7, #20]
 801ea9e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 801eaa2:	e198      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 5)
 801eaa4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eaa8:	2b04      	cmp	r3, #4
 801eaaa:	d83d      	bhi.n	801eb28 <chirp_controller_read_command+0xb38>
            {
              data =  data - '0';
 801eaac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eab0:	3b30      	subs	r3, #48	; 0x30
 801eab2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              pow_num = 4;
 801eab6:	2304      	movs	r3, #4
 801eab8:	76fb      	strb	r3, [r7, #27]
              chirp_outl->file_compression += data * pow(10,(pow_num-i));
 801eaba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eabe:	4618      	mov	r0, r3
 801eac0:	f7e1 fd3a 	bl	8000538 <__aeabi_i2d>
 801eac4:	4604      	mov	r4, r0
 801eac6:	460d      	mov	r5, r1
 801eac8:	7efa      	ldrb	r2, [r7, #27]
 801eaca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eace:	1ad3      	subs	r3, r2, r3
 801ead0:	4618      	mov	r0, r3
 801ead2:	f7e1 fd31 	bl	8000538 <__aeabi_i2d>
 801ead6:	4602      	mov	r2, r0
 801ead8:	460b      	mov	r3, r1
 801eada:	ec43 2b11 	vmov	d1, r2, r3
 801eade:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801ec90 <chirp_controller_read_command+0xca0>
 801eae2:	f005 fc65 	bl	80243b0 <pow>
 801eae6:	ec53 2b10 	vmov	r2, r3, d0
 801eaea:	4620      	mov	r0, r4
 801eaec:	4629      	mov	r1, r5
 801eaee:	f7e1 fd8d 	bl	800060c <__aeabi_dmul>
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	460c      	mov	r4, r1
 801eaf6:	4625      	mov	r5, r4
 801eaf8:	461c      	mov	r4, r3
 801eafa:	697b      	ldr	r3, [r7, #20]
 801eafc:	f8d3 3052 	ldr.w	r3, [r3, #82]	; 0x52
 801eb00:	4618      	mov	r0, r3
 801eb02:	f7e1 fd09 	bl	8000518 <__aeabi_ui2d>
 801eb06:	4602      	mov	r2, r0
 801eb08:	460b      	mov	r3, r1
 801eb0a:	4620      	mov	r0, r4
 801eb0c:	4629      	mov	r1, r5
 801eb0e:	f7e1 fbc7 	bl	80002a0 <__adddf3>
 801eb12:	4603      	mov	r3, r0
 801eb14:	460c      	mov	r4, r1
 801eb16:	4618      	mov	r0, r3
 801eb18:	4621      	mov	r1, r4
 801eb1a:	f7e2 f84f 	bl	8000bbc <__aeabi_d2uiz>
 801eb1e:	4602      	mov	r2, r0
 801eb20:	697b      	ldr	r3, [r7, #20]
 801eb22:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
 801eb26:	e156      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 11)
 801eb28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eb2c:	2b0a      	cmp	r3, #10
 801eb2e:	d84b      	bhi.n	801ebc8 <chirp_controller_read_command+0xbd8>
            {
              pow_num = 10;
 801eb30:	230a      	movs	r3, #10
 801eb32:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801eb34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb38:	2b2f      	cmp	r3, #47	; 0x2f
 801eb3a:	d909      	bls.n	801eb50 <chirp_controller_read_command+0xb60>
 801eb3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb40:	2b39      	cmp	r3, #57	; 0x39
 801eb42:	d805      	bhi.n	801eb50 <chirp_controller_read_command+0xb60>
                data = data - '0';
 801eb44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb48:	3b30      	subs	r3, #48	; 0x30
 801eb4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801eb4e:	e004      	b.n	801eb5a <chirp_controller_read_command+0xb6a>
              else
                data = 10 + data - 'A';
 801eb50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb54:	3b37      	subs	r3, #55	; 0x37
 801eb56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->old_firmware_size += data * pow(16,(pow_num-i));
 801eb5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eb5e:	4618      	mov	r0, r3
 801eb60:	f7e1 fcea 	bl	8000538 <__aeabi_i2d>
 801eb64:	4604      	mov	r4, r0
 801eb66:	460d      	mov	r5, r1
 801eb68:	7efa      	ldrb	r2, [r7, #27]
 801eb6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eb6e:	1ad3      	subs	r3, r2, r3
 801eb70:	4618      	mov	r0, r3
 801eb72:	f7e1 fce1 	bl	8000538 <__aeabi_i2d>
 801eb76:	4602      	mov	r2, r0
 801eb78:	460b      	mov	r3, r1
 801eb7a:	ec43 2b11 	vmov	d1, r2, r3
 801eb7e:	ed9f 0b46 	vldr	d0, [pc, #280]	; 801ec98 <chirp_controller_read_command+0xca8>
 801eb82:	f005 fc15 	bl	80243b0 <pow>
 801eb86:	ec53 2b10 	vmov	r2, r3, d0
 801eb8a:	4620      	mov	r0, r4
 801eb8c:	4629      	mov	r1, r5
 801eb8e:	f7e1 fd3d 	bl	800060c <__aeabi_dmul>
 801eb92:	4603      	mov	r3, r0
 801eb94:	460c      	mov	r4, r1
 801eb96:	4625      	mov	r5, r4
 801eb98:	461c      	mov	r4, r3
 801eb9a:	697b      	ldr	r3, [r7, #20]
 801eb9c:	f8d3 3059 	ldr.w	r3, [r3, #89]	; 0x59
 801eba0:	4618      	mov	r0, r3
 801eba2:	f7e1 fcb9 	bl	8000518 <__aeabi_ui2d>
 801eba6:	4602      	mov	r2, r0
 801eba8:	460b      	mov	r3, r1
 801ebaa:	4620      	mov	r0, r4
 801ebac:	4629      	mov	r1, r5
 801ebae:	f7e1 fb77 	bl	80002a0 <__adddf3>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	460c      	mov	r4, r1
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	4621      	mov	r1, r4
 801ebba:	f7e1 ffff 	bl	8000bbc <__aeabi_d2uiz>
 801ebbe:	4602      	mov	r2, r0
 801ebc0:	697b      	ldr	r3, [r7, #20]
 801ebc2:	f8c3 2059 	str.w	r2, [r3, #89]	; 0x59
 801ebc6:	e106      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 17)
 801ebc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ebcc:	2b10      	cmp	r3, #16
 801ebce:	d849      	bhi.n	801ec64 <chirp_controller_read_command+0xc74>
            {
              pow_num = 16;
 801ebd0:	2310      	movs	r3, #16
 801ebd2:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801ebd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebd8:	2b2f      	cmp	r3, #47	; 0x2f
 801ebda:	d909      	bls.n	801ebf0 <chirp_controller_read_command+0xc00>
 801ebdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebe0:	2b39      	cmp	r3, #57	; 0x39
 801ebe2:	d805      	bhi.n	801ebf0 <chirp_controller_read_command+0xc00>
                data = data - '0';
 801ebe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebe8:	3b30      	subs	r3, #48	; 0x30
 801ebea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ebee:	e004      	b.n	801ebfa <chirp_controller_read_command+0xc0a>
              else
                data = 10 + data - 'A';
 801ebf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebf4:	3b37      	subs	r3, #55	; 0x37
 801ebf6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->firmware_size += data * pow(16,(pow_num-i));
 801ebfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebfe:	4618      	mov	r0, r3
 801ec00:	f7e1 fc9a 	bl	8000538 <__aeabi_i2d>
 801ec04:	4604      	mov	r4, r0
 801ec06:	460d      	mov	r5, r1
 801ec08:	7efa      	ldrb	r2, [r7, #27]
 801ec0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ec0e:	1ad3      	subs	r3, r2, r3
 801ec10:	4618      	mov	r0, r3
 801ec12:	f7e1 fc91 	bl	8000538 <__aeabi_i2d>
 801ec16:	4602      	mov	r2, r0
 801ec18:	460b      	mov	r3, r1
 801ec1a:	ec43 2b11 	vmov	d1, r2, r3
 801ec1e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801ec98 <chirp_controller_read_command+0xca8>
 801ec22:	f005 fbc5 	bl	80243b0 <pow>
 801ec26:	ec53 2b10 	vmov	r2, r3, d0
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	4629      	mov	r1, r5
 801ec2e:	f7e1 fced 	bl	800060c <__aeabi_dmul>
 801ec32:	4603      	mov	r3, r0
 801ec34:	460c      	mov	r4, r1
 801ec36:	4625      	mov	r5, r4
 801ec38:	461c      	mov	r4, r3
 801ec3a:	697b      	ldr	r3, [r7, #20]
 801ec3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ec3e:	4618      	mov	r0, r3
 801ec40:	f7e1 fc6a 	bl	8000518 <__aeabi_ui2d>
 801ec44:	4602      	mov	r2, r0
 801ec46:	460b      	mov	r3, r1
 801ec48:	4620      	mov	r0, r4
 801ec4a:	4629      	mov	r1, r5
 801ec4c:	f7e1 fb28 	bl	80002a0 <__adddf3>
 801ec50:	4603      	mov	r3, r0
 801ec52:	460c      	mov	r4, r1
 801ec54:	4618      	mov	r0, r3
 801ec56:	4621      	mov	r1, r4
 801ec58:	f7e1 ffb0 	bl	8000bbc <__aeabi_d2uiz>
 801ec5c:	4602      	mov	r2, r0
 801ec5e:	697b      	ldr	r3, [r7, #20]
 801ec60:	63da      	str	r2, [r3, #60]	; 0x3c
 801ec62:	e0b8      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 22)
 801ec64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ec68:	2b15      	cmp	r3, #21
 801ec6a:	d859      	bhi.n	801ed20 <chirp_controller_read_command+0xd30>
            {
              pow_num = 21;
 801ec6c:	2315      	movs	r3, #21
 801ec6e:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801ec70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec74:	2b2f      	cmp	r3, #47	; 0x2f
 801ec76:	d915      	bls.n	801eca4 <chirp_controller_read_command+0xcb4>
 801ec78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec7c:	2b39      	cmp	r3, #57	; 0x39
 801ec7e:	d811      	bhi.n	801eca4 <chirp_controller_read_command+0xcb4>
                data = data - '0';
 801ec80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec84:	3b30      	subs	r3, #48	; 0x30
 801ec86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ec8a:	e010      	b.n	801ecae <chirp_controller_read_command+0xcbe>
 801ec8c:	f3af 8000 	nop.w
 801ec90:	00000000 	.word	0x00000000
 801ec94:	40240000 	.word	0x40240000
 801ec98:	00000000 	.word	0x00000000
 801ec9c:	40300000 	.word	0x40300000
 801eca0:	08026974 	.word	0x08026974
              else
                data = 10 + data - 'A';
 801eca4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eca8:	3b37      	subs	r3, #55	; 0x37
 801ecaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->version_hash += data * pow(16,(pow_num-i));
 801ecae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f7e1 fc40 	bl	8000538 <__aeabi_i2d>
 801ecb8:	4604      	mov	r4, r0
 801ecba:	460d      	mov	r5, r1
 801ecbc:	7efa      	ldrb	r2, [r7, #27]
 801ecbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ecc2:	1ad3      	subs	r3, r2, r3
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	f7e1 fc37 	bl	8000538 <__aeabi_i2d>
 801ecca:	4602      	mov	r2, r0
 801eccc:	460b      	mov	r3, r1
 801ecce:	ec43 2b11 	vmov	d1, r2, r3
 801ecd2:	ed9f 0bdf 	vldr	d0, [pc, #892]	; 801f050 <chirp_controller_read_command+0x1060>
 801ecd6:	f005 fb6b 	bl	80243b0 <pow>
 801ecda:	ec53 2b10 	vmov	r2, r3, d0
 801ecde:	4620      	mov	r0, r4
 801ece0:	4629      	mov	r1, r5
 801ece2:	f7e1 fc93 	bl	800060c <__aeabi_dmul>
 801ece6:	4603      	mov	r3, r0
 801ece8:	460c      	mov	r4, r1
 801ecea:	4625      	mov	r5, r4
 801ecec:	461c      	mov	r4, r3
 801ecee:	697b      	ldr	r3, [r7, #20]
 801ecf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801ecf4:	b29b      	uxth	r3, r3
 801ecf6:	4618      	mov	r0, r3
 801ecf8:	f7e1 fc1e 	bl	8000538 <__aeabi_i2d>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	460b      	mov	r3, r1
 801ed00:	4620      	mov	r0, r4
 801ed02:	4629      	mov	r1, r5
 801ed04:	f7e1 facc 	bl	80002a0 <__adddf3>
 801ed08:	4603      	mov	r3, r0
 801ed0a:	460c      	mov	r4, r1
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	4621      	mov	r1, r4
 801ed10:	f7e1 ff54 	bl	8000bbc <__aeabi_d2uiz>
 801ed14:	4603      	mov	r3, r0
 801ed16:	b29a      	uxth	r2, r3
 801ed18:	697b      	ldr	r3, [r7, #20]
 801ed1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801ed1e:	e05a      	b.n	801edd6 <chirp_controller_read_command+0xde6>
            }
            else if (i < 55)
 801ed20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ed24:	2b36      	cmp	r3, #54	; 0x36
 801ed26:	d856      	bhi.n	801edd6 <chirp_controller_read_command+0xde6>
            {
              if ((data >= '0') && (data <= '9'))
 801ed28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed2c:	2b2f      	cmp	r3, #47	; 0x2f
 801ed2e:	d909      	bls.n	801ed44 <chirp_controller_read_command+0xd54>
 801ed30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed34:	2b39      	cmp	r3, #57	; 0x39
 801ed36:	d805      	bhi.n	801ed44 <chirp_controller_read_command+0xd54>
                data = data - '0';
 801ed38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed3c:	3b30      	subs	r3, #48	; 0x30
 801ed3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ed42:	e004      	b.n	801ed4e <chirp_controller_read_command+0xd5e>
              else
                data = 10 + data - 'A';
 801ed44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed48:	3b37      	subs	r3, #55	; 0x37
 801ed4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->firmware_md5[(i - 23) / 2] += data * pow(16,((i - 22) % 2));
 801ed4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ed52:	4618      	mov	r0, r3
 801ed54:	f7e1 fbf0 	bl	8000538 <__aeabi_i2d>
 801ed58:	4604      	mov	r4, r0
 801ed5a:	460d      	mov	r5, r1
 801ed5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ed60:	3b16      	subs	r3, #22
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	f003 0301 	and.w	r3, r3, #1
 801ed68:	bfb8      	it	lt
 801ed6a:	425b      	neglt	r3, r3
 801ed6c:	4618      	mov	r0, r3
 801ed6e:	f7e1 fbe3 	bl	8000538 <__aeabi_i2d>
 801ed72:	4602      	mov	r2, r0
 801ed74:	460b      	mov	r3, r1
 801ed76:	ec43 2b11 	vmov	d1, r2, r3
 801ed7a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 801f050 <chirp_controller_read_command+0x1060>
 801ed7e:	f005 fb17 	bl	80243b0 <pow>
 801ed82:	ec53 2b10 	vmov	r2, r3, d0
 801ed86:	4620      	mov	r0, r4
 801ed88:	4629      	mov	r1, r5
 801ed8a:	f7e1 fc3f 	bl	800060c <__aeabi_dmul>
 801ed8e:	4603      	mov	r3, r0
 801ed90:	460c      	mov	r4, r1
 801ed92:	461d      	mov	r5, r3
 801ed94:	4626      	mov	r6, r4
 801ed96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ed9a:	3b17      	subs	r3, #23
 801ed9c:	0fda      	lsrs	r2, r3, #31
 801ed9e:	4413      	add	r3, r2
 801eda0:	105b      	asrs	r3, r3, #1
 801eda2:	461c      	mov	r4, r3
 801eda4:	697b      	ldr	r3, [r7, #20]
 801eda6:	4423      	add	r3, r4
 801eda8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801edac:	4618      	mov	r0, r3
 801edae:	f7e1 fbc3 	bl	8000538 <__aeabi_i2d>
 801edb2:	4602      	mov	r2, r0
 801edb4:	460b      	mov	r3, r1
 801edb6:	4628      	mov	r0, r5
 801edb8:	4631      	mov	r1, r6
 801edba:	f7e1 fa71 	bl	80002a0 <__adddf3>
 801edbe:	4602      	mov	r2, r0
 801edc0:	460b      	mov	r3, r1
 801edc2:	4610      	mov	r0, r2
 801edc4:	4619      	mov	r1, r3
 801edc6:	f7e1 fef9 	bl	8000bbc <__aeabi_d2uiz>
 801edca:	4603      	mov	r3, r0
 801edcc:	b2da      	uxtb	r2, r3
 801edce:	697b      	ldr	r3, [r7, #20]
 801edd0:	4423      	add	r3, r4
 801edd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        for (i = 0; i < rxbuffer_len; i++)
 801edd6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801edda:	3301      	adds	r3, #1
 801eddc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ede0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ede8:	429a      	cmp	r2, r3
 801edea:	f4ff adb8 	bcc.w	801e95e <chirp_controller_read_command+0x96e>
            }
          }
        }
        PRINTF("MX_DISSEMINATE:%lu, %lu, %lu, %lu, %lu, %lu\n", chirp_outl->patch_update, chirp_outl->patch_bank, chirp_outl->old_firmware_size, chirp_outl->firmware_size, chirp_outl->version_hash, chirp_outl->file_compression);
 801edee:	697b      	ldr	r3, [r7, #20]
 801edf0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801edf4:	461c      	mov	r4, r3
 801edf6:	697b      	ldr	r3, [r7, #20]
 801edf8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 801edfc:	461d      	mov	r5, r3
 801edfe:	697b      	ldr	r3, [r7, #20]
 801ee00:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ee08:	697a      	ldr	r2, [r7, #20]
 801ee0a:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 801ee0e:	b292      	uxth	r2, r2
 801ee10:	4610      	mov	r0, r2
 801ee12:	697a      	ldr	r2, [r7, #20]
 801ee14:	f8d2 2052 	ldr.w	r2, [r2, #82]	; 0x52
 801ee18:	9202      	str	r2, [sp, #8]
 801ee1a:	9001      	str	r0, [sp, #4]
 801ee1c:	9300      	str	r3, [sp, #0]
 801ee1e:	460b      	mov	r3, r1
 801ee20:	462a      	mov	r2, r5
 801ee22:	4621      	mov	r1, r4
 801ee24:	488c      	ldr	r0, [pc, #560]	; (801f058 <chirp_controller_read_command+0x1068>)
 801ee26:	f003 fc09 	bl	802263c <iprintf>
        for (i = 0; i < 16; i++)
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ee30:	e00e      	b.n	801ee50 <chirp_controller_read_command+0xe60>
        {
          PRINTF("%02X", chirp_outl->firmware_md5[i]);
 801ee32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ee36:	697a      	ldr	r2, [r7, #20]
 801ee38:	4413      	add	r3, r2
 801ee3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ee3e:	4619      	mov	r1, r3
 801ee40:	4886      	ldr	r0, [pc, #536]	; (801f05c <chirp_controller_read_command+0x106c>)
 801ee42:	f003 fbfb 	bl	802263c <iprintf>
        for (i = 0; i < 16; i++)
 801ee46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ee4a:	3301      	adds	r3, #1
 801ee4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ee50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ee54:	2b0f      	cmp	r3, #15
 801ee56:	d9ec      	bls.n	801ee32 <chirp_controller_read_command+0xe42>
        }
        PRINTF("\n");
 801ee58:	200a      	movs	r0, #10
 801ee5a:	f003 fc07 	bl	802266c <putchar>
        if (!chirp_outl->patch_update)
 801ee5e:	697b      	ldr	r3, [r7, #20]
 801ee60:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	f040 8250 	bne.w	801f30a <chirp_controller_read_command+0x131a>
        {
          menu_preSend(1);
 801ee6a:	2001      	movs	r0, #1
 801ee6c:	f7fe fc00 	bl	801d670 <menu_preSend>
        }
        break;
 801ee70:	e24b      	b.n	801f30a <chirp_controller_read_command+0x131a>
      }
      case MX_COLLECT:
      {
        // "0807F800,08080000"
        memset(&(chirp_outl->collect_addr_start), 0, offsetof(Chirp_Outl, sf) - offsetof(Chirp_Outl, collect_addr_start));
 801ee72:	697b      	ldr	r3, [r7, #20]
 801ee74:	3369      	adds	r3, #105	; 0x69
 801ee76:	220c      	movs	r2, #12
 801ee78:	2100      	movs	r1, #0
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	f002 fdd1 	bl	8021a22 <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801ee80:	2300      	movs	r3, #0
 801ee82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ee86:	e0c0      	b.n	801f00a <chirp_controller_read_command+0x101a>
        {
          data = (uint8_t)command_buffer[k++];
 801ee88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ee8c:	1c5a      	adds	r2, r3, #1
 801ee8e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ee92:	461a      	mov	r2, r3
 801ee94:	69fb      	ldr	r3, [r7, #28]
 801ee96:	4413      	add	r3, r2
 801ee98:	781b      	ldrb	r3, [r3, #0]
 801ee9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= '0') && (data <= '9')) || ((data >= 'A') && (data <= 'F')))
 801ee9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eea2:	2b2f      	cmp	r3, #47	; 0x2f
 801eea4:	d903      	bls.n	801eeae <chirp_controller_read_command+0xebe>
 801eea6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eeaa:	2b39      	cmp	r3, #57	; 0x39
 801eeac:	d909      	bls.n	801eec2 <chirp_controller_read_command+0xed2>
 801eeae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eeb2:	2b40      	cmp	r3, #64	; 0x40
 801eeb4:	f240 80a4 	bls.w	801f000 <chirp_controller_read_command+0x1010>
 801eeb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eebc:	2b46      	cmp	r3, #70	; 0x46
 801eebe:	f200 809f 	bhi.w	801f000 <chirp_controller_read_command+0x1010>
          {
            if (i < 8)
 801eec2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801eec6:	2b07      	cmp	r3, #7
 801eec8:	d84b      	bhi.n	801ef62 <chirp_controller_read_command+0xf72>
            {
              pow_num = 7;
 801eeca:	2307      	movs	r3, #7
 801eecc:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801eece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eed2:	2b2f      	cmp	r3, #47	; 0x2f
 801eed4:	d909      	bls.n	801eeea <chirp_controller_read_command+0xefa>
 801eed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eeda:	2b39      	cmp	r3, #57	; 0x39
 801eedc:	d805      	bhi.n	801eeea <chirp_controller_read_command+0xefa>
                data = data - '0';
 801eede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eee2:	3b30      	subs	r3, #48	; 0x30
 801eee4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801eee8:	e004      	b.n	801eef4 <chirp_controller_read_command+0xf04>
              else
                data = 10 + data - 'A';
 801eeea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eeee:	3b37      	subs	r3, #55	; 0x37
 801eef0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->collect_addr_start += data * pow(16,(pow_num-i));
 801eef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801eef8:	4618      	mov	r0, r3
 801eefa:	f7e1 fb1d 	bl	8000538 <__aeabi_i2d>
 801eefe:	4604      	mov	r4, r0
 801ef00:	460d      	mov	r5, r1
 801ef02:	7efa      	ldrb	r2, [r7, #27]
 801ef04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ef08:	1ad3      	subs	r3, r2, r3
 801ef0a:	4618      	mov	r0, r3
 801ef0c:	f7e1 fb14 	bl	8000538 <__aeabi_i2d>
 801ef10:	4602      	mov	r2, r0
 801ef12:	460b      	mov	r3, r1
 801ef14:	ec43 2b11 	vmov	d1, r2, r3
 801ef18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801f050 <chirp_controller_read_command+0x1060>
 801ef1c:	f005 fa48 	bl	80243b0 <pow>
 801ef20:	ec53 2b10 	vmov	r2, r3, d0
 801ef24:	4620      	mov	r0, r4
 801ef26:	4629      	mov	r1, r5
 801ef28:	f7e1 fb70 	bl	800060c <__aeabi_dmul>
 801ef2c:	4603      	mov	r3, r0
 801ef2e:	460c      	mov	r4, r1
 801ef30:	4625      	mov	r5, r4
 801ef32:	461c      	mov	r4, r3
 801ef34:	697b      	ldr	r3, [r7, #20]
 801ef36:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f7e1 faec 	bl	8000518 <__aeabi_ui2d>
 801ef40:	4602      	mov	r2, r0
 801ef42:	460b      	mov	r3, r1
 801ef44:	4620      	mov	r0, r4
 801ef46:	4629      	mov	r1, r5
 801ef48:	f7e1 f9aa 	bl	80002a0 <__adddf3>
 801ef4c:	4603      	mov	r3, r0
 801ef4e:	460c      	mov	r4, r1
 801ef50:	4618      	mov	r0, r3
 801ef52:	4621      	mov	r1, r4
 801ef54:	f7e1 fe32 	bl	8000bbc <__aeabi_d2uiz>
 801ef58:	4602      	mov	r2, r0
 801ef5a:	697b      	ldr	r3, [r7, #20]
 801ef5c:	f8c3 2069 	str.w	r2, [r3, #105]	; 0x69
 801ef60:	e04e      	b.n	801f000 <chirp_controller_read_command+0x1010>
            }
            else if (i < 17) /* Frequency */
 801ef62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ef66:	2b10      	cmp	r3, #16
 801ef68:	d84a      	bhi.n	801f000 <chirp_controller_read_command+0x1010>
            {
              pow_num = 16;
 801ef6a:	2310      	movs	r3, #16
 801ef6c:	76fb      	strb	r3, [r7, #27]
              if ((data >= '0') && (data <= '9'))
 801ef6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ef72:	2b2f      	cmp	r3, #47	; 0x2f
 801ef74:	d909      	bls.n	801ef8a <chirp_controller_read_command+0xf9a>
 801ef76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ef7a:	2b39      	cmp	r3, #57	; 0x39
 801ef7c:	d805      	bhi.n	801ef8a <chirp_controller_read_command+0xf9a>
                data = data - '0';
 801ef7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ef82:	3b30      	subs	r3, #48	; 0x30
 801ef84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ef88:	e004      	b.n	801ef94 <chirp_controller_read_command+0xfa4>
              else
                data = 10 + data - 'A';
 801ef8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ef8e:	3b37      	subs	r3, #55	; 0x37
 801ef90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
              chirp_outl->collect_addr_end += data * pow(16,(pow_num-i));
 801ef94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ef98:	4618      	mov	r0, r3
 801ef9a:	f7e1 facd 	bl	8000538 <__aeabi_i2d>
 801ef9e:	4604      	mov	r4, r0
 801efa0:	460d      	mov	r5, r1
 801efa2:	7efa      	ldrb	r2, [r7, #27]
 801efa4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801efa8:	1ad3      	subs	r3, r2, r3
 801efaa:	4618      	mov	r0, r3
 801efac:	f7e1 fac4 	bl	8000538 <__aeabi_i2d>
 801efb0:	4602      	mov	r2, r0
 801efb2:	460b      	mov	r3, r1
 801efb4:	ec43 2b11 	vmov	d1, r2, r3
 801efb8:	ed9f 0b25 	vldr	d0, [pc, #148]	; 801f050 <chirp_controller_read_command+0x1060>
 801efbc:	f005 f9f8 	bl	80243b0 <pow>
 801efc0:	ec53 2b10 	vmov	r2, r3, d0
 801efc4:	4620      	mov	r0, r4
 801efc6:	4629      	mov	r1, r5
 801efc8:	f7e1 fb20 	bl	800060c <__aeabi_dmul>
 801efcc:	4603      	mov	r3, r0
 801efce:	460c      	mov	r4, r1
 801efd0:	4625      	mov	r5, r4
 801efd2:	461c      	mov	r4, r3
 801efd4:	697b      	ldr	r3, [r7, #20]
 801efd6:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801efda:	4618      	mov	r0, r3
 801efdc:	f7e1 fa9c 	bl	8000518 <__aeabi_ui2d>
 801efe0:	4602      	mov	r2, r0
 801efe2:	460b      	mov	r3, r1
 801efe4:	4620      	mov	r0, r4
 801efe6:	4629      	mov	r1, r5
 801efe8:	f7e1 f95a 	bl	80002a0 <__adddf3>
 801efec:	4603      	mov	r3, r0
 801efee:	460c      	mov	r4, r1
 801eff0:	4618      	mov	r0, r3
 801eff2:	4621      	mov	r1, r4
 801eff4:	f7e1 fde2 	bl	8000bbc <__aeabi_d2uiz>
 801eff8:	4602      	mov	r2, r0
 801effa:	697b      	ldr	r3, [r7, #20]
 801effc:	f8c3 206d 	str.w	r2, [r3, #109]	; 0x6d
        for (i = 0; i < rxbuffer_len; i++)
 801f000:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f004:	3301      	adds	r3, #1
 801f006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801f00a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801f00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f012:	429a      	cmp	r2, r3
 801f014:	f4ff af38 	bcc.w	801ee88 <chirp_controller_read_command+0xe98>
            }
          }
        }

        PRINTF("Start address: 0x%x, End address: 0x%x\n", chirp_outl->collect_addr_start, chirp_outl->collect_addr_end);
 801f018:	697b      	ldr	r3, [r7, #20]
 801f01a:	f8d3 1069 	ldr.w	r1, [r3, #105]	; 0x69
 801f01e:	697b      	ldr	r3, [r7, #20]
 801f020:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 801f024:	461a      	mov	r2, r3
 801f026:	480e      	ldr	r0, [pc, #56]	; (801f060 <chirp_controller_read_command+0x1070>)
 801f028:	f003 fb08 	bl	802263c <iprintf>
        break;
 801f02c:	e16e      	b.n	801f30c <chirp_controller_read_command+0x131c>
      }
      case CHIRP_CONNECTIVITY:
      {
        // "09,478600,-01"
        uint8_t tx_sign = 0;
 801f02e:	2300      	movs	r3, #0
 801f030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        memset(&(chirp_outl->sf), 0, offsetof(Chirp_Outl, chirp_energy) - offsetof(Chirp_Outl, sf));
 801f034:	697b      	ldr	r3, [r7, #20]
 801f036:	3375      	adds	r3, #117	; 0x75
 801f038:	2207      	movs	r2, #7
 801f03a:	2100      	movs	r1, #0
 801f03c:	4618      	mov	r0, r3
 801f03e:	f002 fcf0 	bl	8021a22 <memset>
        for (i = 0; i < rxbuffer_len; i++)
 801f042:	2300      	movs	r3, #0
 801f044:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801f048:	e134      	b.n	801f2b4 <chirp_controller_read_command+0x12c4>
 801f04a:	bf00      	nop
 801f04c:	f3af 8000 	nop.w
 801f050:	00000000 	.word	0x00000000
 801f054:	40300000 	.word	0x40300000
 801f058:	080269d4 	.word	0x080269d4
 801f05c:	08026a04 	.word	0x08026a04
 801f060:	08026a0c 	.word	0x08026a0c
        {
          data = (uint8_t)command_buffer[k++] - '0';
 801f064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f068:	1c5a      	adds	r2, r3, #1
 801f06a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801f06e:	461a      	mov	r2, r3
 801f070:	69fb      	ldr	r3, [r7, #28]
 801f072:	4413      	add	r3, r2
 801f074:	781b      	ldrb	r3, [r3, #0]
 801f076:	3b30      	subs	r3, #48	; 0x30
 801f078:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          if (((data >= 0) && (data <= 9)) || (data == (uint8_t)('-' - '0')) || (data == (uint8_t)('+' - '0')))
 801f07c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f080:	2b09      	cmp	r3, #9
 801f082:	d908      	bls.n	801f096 <chirp_controller_read_command+0x10a6>
 801f084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f088:	2bfd      	cmp	r3, #253	; 0xfd
 801f08a:	d004      	beq.n	801f096 <chirp_controller_read_command+0x10a6>
 801f08c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f090:	2bfb      	cmp	r3, #251	; 0xfb
 801f092:	f040 810a 	bne.w	801f2aa <chirp_controller_read_command+0x12ba>
          {
            if (i < 2) /* SF */
 801f096:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f09a:	2b01      	cmp	r3, #1
 801f09c:	d839      	bhi.n	801f112 <chirp_controller_read_command+0x1122>
            {
              pow_num = 1;
 801f09e:	2301      	movs	r3, #1
 801f0a0:	76fb      	strb	r3, [r7, #27]
              chirp_outl->sf += data * pow(10,(pow_num-i));
 801f0a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f0a6:	4618      	mov	r0, r3
 801f0a8:	f7e1 fa46 	bl	8000538 <__aeabi_i2d>
 801f0ac:	4604      	mov	r4, r0
 801f0ae:	460d      	mov	r5, r1
 801f0b0:	7efa      	ldrb	r2, [r7, #27]
 801f0b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f0b6:	1ad3      	subs	r3, r2, r3
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f7e1 fa3d 	bl	8000538 <__aeabi_i2d>
 801f0be:	4602      	mov	r2, r0
 801f0c0:	460b      	mov	r3, r1
 801f0c2:	ec43 2b11 	vmov	d1, r2, r3
 801f0c6:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801f320 <chirp_controller_read_command+0x1330>
 801f0ca:	f005 f971 	bl	80243b0 <pow>
 801f0ce:	ec53 2b10 	vmov	r2, r3, d0
 801f0d2:	4620      	mov	r0, r4
 801f0d4:	4629      	mov	r1, r5
 801f0d6:	f7e1 fa99 	bl	800060c <__aeabi_dmul>
 801f0da:	4603      	mov	r3, r0
 801f0dc:	460c      	mov	r4, r1
 801f0de:	4625      	mov	r5, r4
 801f0e0:	461c      	mov	r4, r3
 801f0e2:	697b      	ldr	r3, [r7, #20]
 801f0e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	f7e1 fa25 	bl	8000538 <__aeabi_i2d>
 801f0ee:	4602      	mov	r2, r0
 801f0f0:	460b      	mov	r3, r1
 801f0f2:	4620      	mov	r0, r4
 801f0f4:	4629      	mov	r1, r5
 801f0f6:	f7e1 f8d3 	bl	80002a0 <__adddf3>
 801f0fa:	4603      	mov	r3, r0
 801f0fc:	460c      	mov	r4, r1
 801f0fe:	4618      	mov	r0, r3
 801f100:	4621      	mov	r1, r4
 801f102:	f7e1 fd5b 	bl	8000bbc <__aeabi_d2uiz>
 801f106:	4603      	mov	r3, r0
 801f108:	b2da      	uxtb	r2, r3
 801f10a:	697b      	ldr	r3, [r7, #20]
 801f10c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801f110:	e0cb      	b.n	801f2aa <chirp_controller_read_command+0x12ba>
            }
            else if (i < 9) /* Frequency */
 801f112:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f116:	2b08      	cmp	r3, #8
 801f118:	d838      	bhi.n	801f18c <chirp_controller_read_command+0x119c>
            {
              pow_num = 8;
 801f11a:	2308      	movs	r3, #8
 801f11c:	76fb      	strb	r3, [r7, #27]
              chirp_outl->freq += data * pow(10,(pow_num-i));
 801f11e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f122:	4618      	mov	r0, r3
 801f124:	f7e1 fa08 	bl	8000538 <__aeabi_i2d>
 801f128:	4604      	mov	r4, r0
 801f12a:	460d      	mov	r5, r1
 801f12c:	7efa      	ldrb	r2, [r7, #27]
 801f12e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f132:	1ad3      	subs	r3, r2, r3
 801f134:	4618      	mov	r0, r3
 801f136:	f7e1 f9ff 	bl	8000538 <__aeabi_i2d>
 801f13a:	4602      	mov	r2, r0
 801f13c:	460b      	mov	r3, r1
 801f13e:	ec43 2b11 	vmov	d1, r2, r3
 801f142:	ed9f 0b77 	vldr	d0, [pc, #476]	; 801f320 <chirp_controller_read_command+0x1330>
 801f146:	f005 f933 	bl	80243b0 <pow>
 801f14a:	ec53 2b10 	vmov	r2, r3, d0
 801f14e:	4620      	mov	r0, r4
 801f150:	4629      	mov	r1, r5
 801f152:	f7e1 fa5b 	bl	800060c <__aeabi_dmul>
 801f156:	4603      	mov	r3, r0
 801f158:	460c      	mov	r4, r1
 801f15a:	4625      	mov	r5, r4
 801f15c:	461c      	mov	r4, r3
 801f15e:	697b      	ldr	r3, [r7, #20]
 801f160:	f8d3 3076 	ldr.w	r3, [r3, #118]	; 0x76
 801f164:	4618      	mov	r0, r3
 801f166:	f7e1 f9d7 	bl	8000518 <__aeabi_ui2d>
 801f16a:	4602      	mov	r2, r0
 801f16c:	460b      	mov	r3, r1
 801f16e:	4620      	mov	r0, r4
 801f170:	4629      	mov	r1, r5
 801f172:	f7e1 f895 	bl	80002a0 <__adddf3>
 801f176:	4603      	mov	r3, r0
 801f178:	460c      	mov	r4, r1
 801f17a:	4618      	mov	r0, r3
 801f17c:	4621      	mov	r1, r4
 801f17e:	f7e1 fd1d 	bl	8000bbc <__aeabi_d2uiz>
 801f182:	4602      	mov	r2, r0
 801f184:	697b      	ldr	r3, [r7, #20]
 801f186:	f8c3 2076 	str.w	r2, [r3, #118]	; 0x76
 801f18a:	e08e      	b.n	801f2aa <chirp_controller_read_command+0x12ba>
            }
            else if (i < 13) /* Tx power */
 801f18c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f190:	2b0c      	cmp	r3, #12
 801f192:	d84d      	bhi.n	801f230 <chirp_controller_read_command+0x1240>
            {
              pow_num = 12;
 801f194:	230c      	movs	r3, #12
 801f196:	76fb      	strb	r3, [r7, #27]
              if (i < 11)
 801f198:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f19c:	2b0a      	cmp	r3, #10
 801f19e:	d80f      	bhi.n	801f1c0 <chirp_controller_read_command+0x11d0>
              {
                if (data == (uint8_t)('-' - '0'))
 801f1a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f1a4:	2bfd      	cmp	r3, #253	; 0xfd
 801f1a6:	d103      	bne.n	801f1b0 <chirp_controller_read_command+0x11c0>
                  tx_sign = 0;
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801f1ae:	e07c      	b.n	801f2aa <chirp_controller_read_command+0x12ba>
                else if (data == (uint8_t)('+' - '0'))
 801f1b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f1b4:	2bfb      	cmp	r3, #251	; 0xfb
 801f1b6:	d178      	bne.n	801f2aa <chirp_controller_read_command+0x12ba>
                  tx_sign = 1;
 801f1b8:	2301      	movs	r3, #1
 801f1ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801f1be:	e074      	b.n	801f2aa <chirp_controller_read_command+0x12ba>
              }
              else
                chirp_outl->tx_power += data * pow(10,(pow_num-i));
 801f1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f7e1 f9b7 	bl	8000538 <__aeabi_i2d>
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	460d      	mov	r5, r1
 801f1ce:	7efa      	ldrb	r2, [r7, #27]
 801f1d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f1d4:	1ad3      	subs	r3, r2, r3
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f7e1 f9ae 	bl	8000538 <__aeabi_i2d>
 801f1dc:	4602      	mov	r2, r0
 801f1de:	460b      	mov	r3, r1
 801f1e0:	ec43 2b11 	vmov	d1, r2, r3
 801f1e4:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 801f320 <chirp_controller_read_command+0x1330>
 801f1e8:	f005 f8e2 	bl	80243b0 <pow>
 801f1ec:	ec53 2b10 	vmov	r2, r3, d0
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	4629      	mov	r1, r5
 801f1f4:	f7e1 fa0a 	bl	800060c <__aeabi_dmul>
 801f1f8:	4603      	mov	r3, r0
 801f1fa:	460c      	mov	r4, r1
 801f1fc:	4625      	mov	r5, r4
 801f1fe:	461c      	mov	r4, r3
 801f200:	697b      	ldr	r3, [r7, #20]
 801f202:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801f206:	4618      	mov	r0, r3
 801f208:	f7e1 f996 	bl	8000538 <__aeabi_i2d>
 801f20c:	4602      	mov	r2, r0
 801f20e:	460b      	mov	r3, r1
 801f210:	4620      	mov	r0, r4
 801f212:	4629      	mov	r1, r5
 801f214:	f7e1 f844 	bl	80002a0 <__adddf3>
 801f218:	4603      	mov	r3, r0
 801f21a:	460c      	mov	r4, r1
 801f21c:	4618      	mov	r0, r3
 801f21e:	4621      	mov	r1, r4
 801f220:	f7e1 fca4 	bl	8000b6c <__aeabi_d2iz>
 801f224:	4603      	mov	r3, r0
 801f226:	b25a      	sxtb	r2, r3
 801f228:	697b      	ldr	r3, [r7, #20]
 801f22a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 801f22e:	e03c      	b.n	801f2aa <chirp_controller_read_command+0x12ba>
            }
            else if (i < 17) /* Frequency */
 801f230:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f234:	2b10      	cmp	r3, #16
 801f236:	d838      	bhi.n	801f2aa <chirp_controller_read_command+0x12ba>
            {
              pow_num = 16;
 801f238:	2310      	movs	r3, #16
 801f23a:	76fb      	strb	r3, [r7, #27]
              chirp_outl->topo_payload_len += data * pow(10,(pow_num-i));
 801f23c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f240:	4618      	mov	r0, r3
 801f242:	f7e1 f979 	bl	8000538 <__aeabi_i2d>
 801f246:	4604      	mov	r4, r0
 801f248:	460d      	mov	r5, r1
 801f24a:	7efa      	ldrb	r2, [r7, #27]
 801f24c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f250:	1ad3      	subs	r3, r2, r3
 801f252:	4618      	mov	r0, r3
 801f254:	f7e1 f970 	bl	8000538 <__aeabi_i2d>
 801f258:	4602      	mov	r2, r0
 801f25a:	460b      	mov	r3, r1
 801f25c:	ec43 2b11 	vmov	d1, r2, r3
 801f260:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 801f320 <chirp_controller_read_command+0x1330>
 801f264:	f005 f8a4 	bl	80243b0 <pow>
 801f268:	ec53 2b10 	vmov	r2, r3, d0
 801f26c:	4620      	mov	r0, r4
 801f26e:	4629      	mov	r1, r5
 801f270:	f7e1 f9cc 	bl	800060c <__aeabi_dmul>
 801f274:	4603      	mov	r3, r0
 801f276:	460c      	mov	r4, r1
 801f278:	4625      	mov	r5, r4
 801f27a:	461c      	mov	r4, r3
 801f27c:	697b      	ldr	r3, [r7, #20]
 801f27e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801f282:	4618      	mov	r0, r3
 801f284:	f7e1 f958 	bl	8000538 <__aeabi_i2d>
 801f288:	4602      	mov	r2, r0
 801f28a:	460b      	mov	r3, r1
 801f28c:	4620      	mov	r0, r4
 801f28e:	4629      	mov	r1, r5
 801f290:	f7e1 f806 	bl	80002a0 <__adddf3>
 801f294:	4603      	mov	r3, r0
 801f296:	460c      	mov	r4, r1
 801f298:	4618      	mov	r0, r3
 801f29a:	4621      	mov	r1, r4
 801f29c:	f7e1 fc8e 	bl	8000bbc <__aeabi_d2uiz>
 801f2a0:	4603      	mov	r3, r0
 801f2a2:	b2da      	uxtb	r2, r3
 801f2a4:	697b      	ldr	r3, [r7, #20]
 801f2a6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        for (i = 0; i < rxbuffer_len; i++)
 801f2aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f2ae:	3301      	adds	r3, #1
 801f2b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801f2b4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f2bc:	429a      	cmp	r2, r3
 801f2be:	f4ff aed1 	bcc.w	801f064 <chirp_controller_read_command+0x1074>
            }
          }
        }

        if (!tx_sign)
 801f2c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d109      	bne.n	801f2de <chirp_controller_read_command+0x12ee>
          chirp_outl->tx_power = 0 - chirp_outl->tx_power;
 801f2ca:	697b      	ldr	r3, [r7, #20]
 801f2cc:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801f2d0:	b2db      	uxtb	r3, r3
 801f2d2:	425b      	negs	r3, r3
 801f2d4:	b2db      	uxtb	r3, r3
 801f2d6:	b25a      	sxtb	r2, r3
 801f2d8:	697b      	ldr	r3, [r7, #20]
 801f2da:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

        PRINTF("Spreading factor: %lu, Frequency at: %lu kHz, Tx power: %d, topo_payload_len: %d\n", chirp_outl->sf, chirp_outl->freq, chirp_outl->tx_power, chirp_outl->topo_payload_len);
 801f2de:	697b      	ldr	r3, [r7, #20]
 801f2e0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	697b      	ldr	r3, [r7, #20]
 801f2e8:	f8d3 2076 	ldr.w	r2, [r3, #118]	; 0x76
 801f2ec:	697b      	ldr	r3, [r7, #20]
 801f2ee:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 801f2f2:	4618      	mov	r0, r3
 801f2f4:	697b      	ldr	r3, [r7, #20]
 801f2f6:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 801f2fa:	9300      	str	r3, [sp, #0]
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	480a      	ldr	r0, [pc, #40]	; (801f328 <chirp_controller_read_command+0x1338>)
 801f300:	f003 f99c 	bl	802263c <iprintf>
        break;
 801f304:	e002      	b.n	801f30c <chirp_controller_read_command+0x131c>
      }
      default:
        break;
 801f306:	bf00      	nop
 801f308:	e000      	b.n	801f30c <chirp_controller_read_command+0x131c>
        break;
 801f30a:	bf00      	nop
  }
  free(command_buffer);
 801f30c:	69f8      	ldr	r0, [r7, #28]
 801f30e:	f002 fb75 	bl	80219fc <free>
}
 801f312:	bf00      	nop
 801f314:	3728      	adds	r7, #40	; 0x28
 801f316:	46bd      	mov	sp, r7
 801f318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f31c:	f3af 8000 	nop.w
 801f320:	00000000 	.word	0x00000000
 801f324:	40240000 	.word	0x40240000
 801f328:	08026a34 	.word	0x08026a34

0801f32c <Chirp_RSHash>:

uint32_t Chirp_RSHash(uint8_t* str, uint32_t len)
{
 801f32c:	b480      	push	{r7}
 801f32e:	b087      	sub	sp, #28
 801f330:	af00      	add	r7, sp, #0
 801f332:	6078      	str	r0, [r7, #4]
 801f334:	6039      	str	r1, [r7, #0]
    uint32_t b    = 378551;
 801f336:	4b15      	ldr	r3, [pc, #84]	; (801f38c <Chirp_RSHash+0x60>)
 801f338:	60bb      	str	r3, [r7, #8]
    uint32_t a    = 63689;
 801f33a:	f64f 03c9 	movw	r3, #63689	; 0xf8c9
 801f33e:	617b      	str	r3, [r7, #20]
    uint32_t hash = 0;
 801f340:	2300      	movs	r3, #0
 801f342:	613b      	str	r3, [r7, #16]
    uint32_t i    = 0;
 801f344:	2300      	movs	r3, #0
 801f346:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < len; str++, i++)
 801f348:	2300      	movs	r3, #0
 801f34a:	60fb      	str	r3, [r7, #12]
 801f34c:	e012      	b.n	801f374 <Chirp_RSHash+0x48>
    {
      hash = hash * a + (*str);
 801f34e:	693b      	ldr	r3, [r7, #16]
 801f350:	697a      	ldr	r2, [r7, #20]
 801f352:	fb02 f303 	mul.w	r3, r2, r3
 801f356:	687a      	ldr	r2, [r7, #4]
 801f358:	7812      	ldrb	r2, [r2, #0]
 801f35a:	4413      	add	r3, r2
 801f35c:	613b      	str	r3, [r7, #16]
      a    = a * b;
 801f35e:	697b      	ldr	r3, [r7, #20]
 801f360:	68ba      	ldr	r2, [r7, #8]
 801f362:	fb02 f303 	mul.w	r3, r2, r3
 801f366:	617b      	str	r3, [r7, #20]
    for(i = 0; i < len; str++, i++)
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	3301      	adds	r3, #1
 801f36c:	607b      	str	r3, [r7, #4]
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	3301      	adds	r3, #1
 801f372:	60fb      	str	r3, [r7, #12]
 801f374:	68fa      	ldr	r2, [r7, #12]
 801f376:	683b      	ldr	r3, [r7, #0]
 801f378:	429a      	cmp	r2, r3
 801f37a:	d3e8      	bcc.n	801f34e <Chirp_RSHash+0x22>
    }

    return hash;
 801f37c:	693b      	ldr	r3, [r7, #16]
}
 801f37e:	4618      	mov	r0, r3
 801f380:	371c      	adds	r7, #28
 801f382:	46bd      	mov	sp, r7
 801f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f388:	4770      	bx	lr
 801f38a:	bf00      	nop
 801f38c:	0005c6b7 	.word	0x0005c6b7

0801f390 <chirp_start>:
    // printf("a[i]:%lu, %lu\n", a[i], i);
  }
}

void chirp_start(uint8_t node_id, uint8_t network_num_nodes)
{
 801f390:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f392:	b0ed      	sub	sp, #436	; 0x1b4
 801f394:	af06      	add	r7, sp, #24
 801f396:	4602      	mov	r2, r0
 801f398:	f107 030f 	add.w	r3, r7, #15
 801f39c:	701a      	strb	r2, [r3, #0]
 801f39e:	f107 030e 	add.w	r3, r7, #14
 801f3a2:	460a      	mov	r2, r1
 801f3a4:	701a      	strb	r2, [r3, #0]
  gpi_watchdog_periodic();
 801f3a6:	f7ee ff13 	bl	800e1d0 <gpi_watchdog_periodic>
	Chirp_Outl chirp_outl;
  memset(&chirp_outl, 0, sizeof(Chirp_Outl));
 801f3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f3ae:	22f4      	movs	r2, #244	; 0xf4
 801f3b0:	2100      	movs	r1, #0
 801f3b2:	4618      	mov	r0, r3
 801f3b4:	f002 fb35 	bl	8021a22 <memset>
  chirp_outl.default_freq = LORABAND;
 801f3b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f3bc:	2200      	movs	r2, #0
 801f3be:	f062 021f 	orn	r2, r2, #31
 801f3c2:	745a      	strb	r2, [r3, #17]
 801f3c4:	2200      	movs	r2, #0
 801f3c6:	f042 0204 	orr.w	r2, r2, #4
 801f3ca:	749a      	strb	r2, [r3, #18]
 801f3cc:	2200      	movs	r2, #0
 801f3ce:	f042 0207 	orr.w	r2, r2, #7
 801f3d2:	74da      	strb	r2, [r3, #19]
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	751a      	strb	r2, [r3, #20]

  #if MX_LBT_ACCESS
    memset(&chirp_config.lbt_init_time, 0, sizeof(chirp_config.lbt_init_time));
 801f3d8:	2208      	movs	r2, #8
 801f3da:	2100      	movs	r1, #0
 801f3dc:	48b1      	ldr	r0, [pc, #708]	; (801f6a4 <chirp_start+0x314>)
 801f3de:	f002 fb20 	bl	8021a22 <memset>
    chirp_config.lbt_channel_total = LBT_CHANNEL_NUM;
 801f3e2:	4bb1      	ldr	r3, [pc, #708]	; (801f6a8 <chirp_start+0x318>)
 801f3e4:	220a      	movs	r2, #10
 801f3e6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    int32_t mask = 1 << (sizeof(uint_fast_t) * 8 - 1);
 801f3ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f3ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    uint32_t m;
    for (m = sizeof(uint32_t) * 8; m-- > chirp_config.lbt_channel_total;)
 801f3f2:	2320      	movs	r3, #32
 801f3f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 801f3f8:	e004      	b.n	801f404 <chirp_start+0x74>
        mask >>= 1;
 801f3fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801f3fe:	105b      	asrs	r3, r3, #1
 801f400:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    for (m = sizeof(uint32_t) * 8; m-- > chirp_config.lbt_channel_total;)
 801f404:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801f408:	1e5a      	subs	r2, r3, #1
 801f40a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 801f40e:	4aa6      	ldr	r2, [pc, #664]	; (801f6a8 <chirp_start+0x318>)
 801f410:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 801f414:	4293      	cmp	r3, r2
 801f416:	d8f0      	bhi.n	801f3fa <chirp_start+0x6a>
    chirp_config.lbt_channel_mask = ~(mask << 1);
 801f418:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801f41c:	005b      	lsls	r3, r3, #1
 801f41e:	43db      	mvns	r3, r3
 801f420:	461a      	mov	r2, r3
 801f422:	4ba1      	ldr	r3, [pc, #644]	; (801f6a8 <chirp_start+0x318>)
 801f424:	659a      	str	r2, [r3, #88]	; 0x58
  Chirp_Time ds3231_time;
  time_t diff;
  time_t sleep_sec;

  Chirp_Time gps_time;
  chirp_config.lbt_channel_primary = 0;
 801f426:	4ba0      	ldr	r3, [pc, #640]	; (801f6a8 <chirp_start+0x318>)
 801f428:	2200      	movs	r2, #0
 801f42a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  uint8_t sync_channel_id = 0;
 801f42e:	2300      	movs	r3, #0
 801f430:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  sync_channel_id = gps_time.chirp_min % LBT_CHANNEL_NUM;
 801f434:	f107 0314 	add.w	r3, r7, #20
 801f438:	799a      	ldrb	r2, [r3, #6]
 801f43a:	4b9c      	ldr	r3, [pc, #624]	; (801f6ac <chirp_start+0x31c>)
 801f43c:	fba3 1302 	umull	r1, r3, r3, r2
 801f440:	08d9      	lsrs	r1, r3, #3
 801f442:	460b      	mov	r3, r1
 801f444:	009b      	lsls	r3, r3, #2
 801f446:	440b      	add	r3, r1
 801f448:	005b      	lsls	r3, r3, #1
 801f44a:	1ad3      	subs	r3, r2, r3
 801f44c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  chirp_outl.glossy_gps_on = 1;
 801f450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f454:	2201      	movs	r2, #1
 801f456:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  #if GPS_DATA
  GPS_Sleep(60);
 801f45a:	203c      	movs	r0, #60	; 0x3c
 801f45c:	f7ea ffa4 	bl	800a3a8 <GPS_Sleep>
  gps_time = GPS_Get_Time();
 801f460:	f107 0314 	add.w	r3, r7, #20
 801f464:	4618      	mov	r0, r3
 801f466:	f7ea fdef 	bl	800a048 <GPS_Get_Time>

  // gps_time = GPS_Get_Time();

  #endif

  PRINTF("---------Chirpbox---------\n");
 801f46a:	4891      	ldr	r0, [pc, #580]	; (801f6b0 <chirp_start+0x320>)
 801f46c:	f003 f96e 	bl	802274c <puts>
	while (1)
	{
    #if ENERGEST_CONF_ON
      energest_init();
 801f470:	f7ee feb8 	bl	800e1e4 <energest_init>
      memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 801f474:	2228      	movs	r2, #40	; 0x28
 801f476:	2100      	movs	r1, #0
 801f478:	488e      	ldr	r0, [pc, #568]	; (801f6b4 <chirp_start+0x324>)
 801f47a:	f002 fad2 	bl	8021a22 <memset>
 801f47e:	4b8e      	ldr	r3, [pc, #568]	; (801f6b8 <chirp_start+0x328>)
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801f484:	4a8d      	ldr	r2, [pc, #564]	; (801f6bc <chirp_start+0x32c>)
 801f486:	61d3      	str	r3, [r2, #28]
 801f488:	4b8d      	ldr	r3, [pc, #564]	; (801f6c0 <chirp_start+0x330>)
 801f48a:	2201      	movs	r2, #1
 801f48c:	71da      	strb	r2, [r3, #7]
    #endif
    // just finish a task
    if (chirp_config.glossy_task == 2)
 801f48e:	4b86      	ldr	r3, [pc, #536]	; (801f6a8 <chirp_start+0x318>)
 801f490:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f494:	2b02      	cmp	r3, #2
 801f496:	f040 808d 	bne.w	801f5b4 <chirp_start+0x224>
    {
      DS3231_GetTime();
 801f49a:	f7f9 ff93 	bl	80193c4 <DS3231_GetTime>
      /* Set alarm */
      ds3231_time = DS3231_ShowTime();
 801f49e:	f107 041c 	add.w	r4, r7, #28
 801f4a2:	463b      	mov	r3, r7
 801f4a4:	4618      	mov	r0, r3
 801f4a6:	f7f9 ffa7 	bl	80193f8 <DS3231_ShowTime>
 801f4aa:	463a      	mov	r2, r7
 801f4ac:	4623      	mov	r3, r4
 801f4ae:	6810      	ldr	r0, [r2, #0]
 801f4b0:	6851      	ldr	r1, [r2, #4]
 801f4b2:	c303      	stmia	r3!, {r0, r1}
      sync_channel_id = (ds3231_time.chirp_min+1) % LBT_CHANNEL_NUM;
 801f4b4:	f107 031c 	add.w	r3, r7, #28
 801f4b8:	799b      	ldrb	r3, [r3, #6]
 801f4ba:	1c5a      	adds	r2, r3, #1
 801f4bc:	4b81      	ldr	r3, [pc, #516]	; (801f6c4 <chirp_start+0x334>)
 801f4be:	fb83 1302 	smull	r1, r3, r3, r2
 801f4c2:	1099      	asrs	r1, r3, #2
 801f4c4:	17d3      	asrs	r3, r2, #31
 801f4c6:	1ac9      	subs	r1, r1, r3
 801f4c8:	460b      	mov	r3, r1
 801f4ca:	009b      	lsls	r3, r3, #2
 801f4cc:	440b      	add	r3, r1
 801f4ce:	005b      	lsls	r3, r3, #1
 801f4d0:	1ad1      	subs	r1, r2, r3
 801f4d2:	460b      	mov	r3, r1
 801f4d4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
      if (node_id)
 801f4d8:	f107 030f 	add.w	r3, r7, #15
 801f4dc:	781b      	ldrb	r3, [r3, #0]
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d047      	beq.n	801f572 <chirp_start+0x1e2>
      {
        diff = GPS_Diff(&ds3231_time, 1970, 1, 1, 0, 0, 0);
 801f4e2:	f107 001c 	add.w	r0, r7, #28
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	9302      	str	r3, [sp, #8]
 801f4ea:	2300      	movs	r3, #0
 801f4ec:	9301      	str	r3, [sp, #4]
 801f4ee:	2300      	movs	r3, #0
 801f4f0:	9300      	str	r3, [sp, #0]
 801f4f2:	2301      	movs	r3, #1
 801f4f4:	2201      	movs	r2, #1
 801f4f6:	f240 71b2 	movw	r1, #1970	; 0x7b2
 801f4fa:	f7ea fe61 	bl	800a1c0 <GPS_Diff>
 801f4fe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f502:	e9c3 0100 	strd	r0, r1, [r3]
        sleep_sec = 60 - (time_t)(0 - diff) % 60;
 801f506:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f50a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801f50e:	4258      	negs	r0, r3
 801f510:	eb64 0144 	sbc.w	r1, r4, r4, lsl #1
 801f514:	f04f 023c 	mov.w	r2, #60	; 0x3c
 801f518:	f04f 0300 	mov.w	r3, #0
 801f51c:	f7e1 fb6e 	bl	8000bfc <__aeabi_ldivmod>
 801f520:	461c      	mov	r4, r3
 801f522:	4613      	mov	r3, r2
 801f524:	4619      	mov	r1, r3
 801f526:	4622      	mov	r2, r4
 801f528:	f04f 033c 	mov.w	r3, #60	; 0x3c
 801f52c:	f04f 0400 	mov.w	r4, #0
 801f530:	1a5b      	subs	r3, r3, r1
 801f532:	eb64 0402 	sbc.w	r4, r4, r2
 801f536:	461d      	mov	r5, r3
 801f538:	4626      	mov	r6, r4
 801f53a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f53e:	e9c3 5600 	strd	r5, r6, [r3]
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f542:	4b5f      	ldr	r3, [pc, #380]	; (801f6c0 <chirp_start+0x330>)
 801f544:	79db      	ldrb	r3, [r3, #7]
 801f546:	2b00      	cmp	r3, #0
 801f548:	d00d      	beq.n	801f566 <chirp_start+0x1d6>
 801f54a:	4b5b      	ldr	r3, [pc, #364]	; (801f6b8 <chirp_start+0x328>)
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f550:	4b5a      	ldr	r3, [pc, #360]	; (801f6bc <chirp_start+0x32c>)
 801f552:	69db      	ldr	r3, [r3, #28]
 801f554:	1ad2      	subs	r2, r2, r3
 801f556:	4b5c      	ldr	r3, [pc, #368]	; (801f6c8 <chirp_start+0x338>)
 801f558:	69db      	ldr	r3, [r3, #28]
 801f55a:	4413      	add	r3, r2
 801f55c:	4a5a      	ldr	r2, [pc, #360]	; (801f6c8 <chirp_start+0x338>)
 801f55e:	61d3      	str	r3, [r2, #28]
 801f560:	4b57      	ldr	r3, [pc, #348]	; (801f6c0 <chirp_start+0x330>)
 801f562:	2200      	movs	r2, #0
 801f564:	71da      	strb	r2, [r3, #7]
        #endif
        RTC_Waiting_Count(sleep_sec);
 801f566:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f56a:	4618      	mov	r0, r3
 801f56c:	f7eb f9ea 	bl	800a944 <RTC_Waiting_Count>
 801f570:	e002      	b.n	801f578 <chirp_start+0x1e8>
      }
      else
      {
          GPS_Sleep(60);
 801f572:	203c      	movs	r0, #60	; 0x3c
 801f574:	f7ea ff18 	bl	800a3a8 <GPS_Sleep>
 801f578:	4b4f      	ldr	r3, [pc, #316]	; (801f6b8 <chirp_start+0x328>)
 801f57a:	681b      	ldr	r3, [r3, #0]
 801f57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      }
    #if ENERGEST_CONF_ON
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801f57e:	4a4f      	ldr	r2, [pc, #316]	; (801f6bc <chirp_start+0x32c>)
 801f580:	61d3      	str	r3, [r2, #28]
 801f582:	4b4f      	ldr	r3, [pc, #316]	; (801f6c0 <chirp_start+0x330>)
 801f584:	2201      	movs	r2, #1
 801f586:	71da      	strb	r2, [r3, #7]
      energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(sleep_sec));
 801f588:	2009      	movs	r0, #9
 801f58a:	f7ee fe55 	bl	800e238 <energest_type_time>
 801f58e:	4601      	mov	r1, r0
 801f590:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f594:	4a4d      	ldr	r2, [pc, #308]	; (801f6cc <chirp_start+0x33c>)
 801f596:	fb02 f303 	mul.w	r3, r2, r3
 801f59a:	440b      	add	r3, r1
 801f59c:	4619      	mov	r1, r3
 801f59e:	2009      	movs	r0, #9
 801f5a0:	f7ee fe7e 	bl	800e2a0 <energest_type_set>
      Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801f5a4:	2009      	movs	r0, #9
 801f5a6:	f7ee fe47 	bl	800e238 <energest_type_time>
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	2009      	movs	r0, #9
 801f5b0:	f7eb fad2 	bl	800ab58 <Stats_value_debug>
    #endif
    }

		/* MX_GLOSSY (sync) */
		chirp_outl.task = MX_GLOSSY;
 801f5b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5b8:	2207      	movs	r2, #7
 801f5ba:	701a      	strb	r2, [r3, #0]
		chirp_outl.arrange_task = MX_GLOSSY;
 801f5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5c0:	2207      	movs	r2, #7
 801f5c2:	719a      	strb	r2, [r3, #6]

		PRINTF("---------MX_GLOSSY---------\n");
 801f5c4:	4842      	ldr	r0, [pc, #264]	; (801f6d0 <chirp_start+0x340>)
 801f5c6:	f003 f8c1 	bl	802274c <puts>
		// TODO: glossy without mixer payload
		chirp_outl.num_nodes = network_num_nodes;
 801f5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5ce:	f107 020e 	add.w	r2, r7, #14
 801f5d2:	7812      	ldrb	r2, [r2, #0]
 801f5d4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		chirp_outl.generation_size = 0;
 801f5d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5dc:	2200      	movs	r2, #0
 801f5de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		chirp_outl.payload_len = 0;
 801f5e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5e6:	2200      	movs	r2, #0
 801f5e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		chirp_outl.round_setup = 0;
 801f5ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	715a      	strb	r2, [r3, #5]
		chirp_outl.round_max = 0;
 801f5f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f5f8:	2200      	movs	r2, #0
 801f5fa:	70da      	strb	r2, [r3, #3]
 801f5fc:	2200      	movs	r2, #0
 801f5fe:	711a      	strb	r2, [r3, #4]
		chirp_outl.file_chunk_len = 0;
 801f600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f604:	2200      	movs	r2, #0
 801f606:	875a      	strh	r2, [r3, #58]	; 0x3a

		chirp_radio_config(12, 7, 1, 8, 14, chirp_outl.default_freq);
 801f608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f60c:	f8d3 3011 	ldr.w	r3, [r3, #17]
 801f610:	9301      	str	r3, [sp, #4]
 801f612:	230e      	movs	r3, #14
 801f614:	9300      	str	r3, [sp, #0]
 801f616:	2308      	movs	r3, #8
 801f618:	2201      	movs	r2, #1
 801f61a:	2107      	movs	r1, #7
 801f61c:	200c      	movs	r0, #12
 801f61e:	f7f3 fd07 	bl	8013030 <chirp_radio_config>
		chirp_packet_config(chirp_outl.num_nodes, 0, 0, FLOODING);
 801f622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f626:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801f62a:	2301      	movs	r3, #1
 801f62c:	2200      	movs	r2, #0
 801f62e:	2100      	movs	r1, #0
 801f630:	f7f3 fa8a 	bl	8012b48 <chirp_packet_config>
    chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, 8);
 801f634:	4b1c      	ldr	r3, [pc, #112]	; (801f6a8 <chirp_start+0x318>)
 801f636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f63a:	4618      	mov	r0, r3
 801f63c:	4b1a      	ldr	r3, [pc, #104]	; (801f6a8 <chirp_start+0x318>)
 801f63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f642:	4619      	mov	r1, r3
 801f644:	2308      	movs	r3, #8
 801f646:	9301      	str	r3, [sp, #4]
 801f648:	2308      	movs	r3, #8
 801f64a:	9300      	str	r3, [sp, #0]
 801f64c:	2300      	movs	r3, #0
 801f64e:	2201      	movs	r2, #1
 801f650:	f7ed fce0 	bl	800d014 <SX1276GetPacketTime>
 801f654:	4603      	mov	r3, r0
 801f656:	461a      	mov	r2, r3
 801f658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f65c:	f8c3 2007 	str.w	r2, [r3, #7]
    chirp_slot_config(chirp_outl.packet_time + 100000, 12, 10000000);
 801f660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f664:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801f668:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801f66c:	33a0      	adds	r3, #160	; 0xa0
 801f66e:	4a19      	ldr	r2, [pc, #100]	; (801f6d4 <chirp_start+0x344>)
 801f670:	210c      	movs	r1, #12
 801f672:	4618      	mov	r0, r3
 801f674:	f7f3 fc70 	bl	8012f58 <chirp_slot_config>

    chirp_config.glossy_task = 0;
 801f678:	4b0b      	ldr	r3, [pc, #44]	; (801f6a8 <chirp_start+0x318>)
 801f67a:	2200      	movs	r2, #0
 801f67c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    if (!node_id)
 801f680:	f107 030f 	add.w	r3, r7, #15
 801f684:	781b      	ldrb	r3, [r3, #0]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d12a      	bne.n	801f6e0 <chirp_start+0x350>
    {
      if (!menu_wait_task(&chirp_outl))
 801f68a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f68e:	4618      	mov	r0, r3
 801f690:	f7fe fa0a 	bl	801daa8 <menu_wait_task>
 801f694:	4603      	mov	r3, r0
 801f696:	2b00      	cmp	r3, #0
 801f698:	d11e      	bne.n	801f6d8 <chirp_start+0x348>
        chirp_config.glossy_task = 1;
 801f69a:	4b03      	ldr	r3, [pc, #12]	; (801f6a8 <chirp_start+0x318>)
 801f69c:	2201      	movs	r2, #1
 801f69e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 801f6a2:	e01d      	b.n	801f6e0 <chirp_start+0x350>
 801f6a4:	20001494 	.word	0x20001494
 801f6a8:	20001430 	.word	0x20001430
 801f6ac:	cccccccd 	.word	0xcccccccd
 801f6b0:	08026a88 	.word	0x08026a88
 801f6b4:	20000d00 	.word	0x20000d00
 801f6b8:	200012c8 	.word	0x200012c8
 801f6bc:	20001308 	.word	0x20001308
 801f6c0:	2000112c 	.word	0x2000112c
 801f6c4:	66666667 	.word	0x66666667
 801f6c8:	20000f10 	.word	0x20000f10
 801f6cc:	00f42400 	.word	0x00f42400
 801f6d0:	08026aa4 	.word	0x08026aa4
 801f6d4:	00989680 	.word	0x00989680
      else
        chirp_config.glossy_task = 2;
 801f6d8:	4bb9      	ldr	r3, [pc, #740]	; (801f9c0 <chirp_start+0x630>)
 801f6da:	2202      	movs	r2, #2
 801f6dc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    }

    PRINTF("chirp_config.glossy_task:%lu\n", chirp_config.glossy_task);
 801f6e0:	4bb7      	ldr	r3, [pc, #732]	; (801f9c0 <chirp_start+0x630>)
 801f6e2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f6e6:	4619      	mov	r1, r3
 801f6e8:	48b6      	ldr	r0, [pc, #728]	; (801f9c4 <chirp_start+0x634>)
 801f6ea:	f002 ffa7 	bl	802263c <iprintf>
    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f6ee:	4bb6      	ldr	r3, [pc, #728]	; (801f9c8 <chirp_start+0x638>)
 801f6f0:	79db      	ldrb	r3, [r3, #7]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d00d      	beq.n	801f712 <chirp_start+0x382>
 801f6f6:	4bb5      	ldr	r3, [pc, #724]	; (801f9cc <chirp_start+0x63c>)
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f6fc:	4bb4      	ldr	r3, [pc, #720]	; (801f9d0 <chirp_start+0x640>)
 801f6fe:	69db      	ldr	r3, [r3, #28]
 801f700:	1ad2      	subs	r2, r2, r3
 801f702:	4bb4      	ldr	r3, [pc, #720]	; (801f9d4 <chirp_start+0x644>)
 801f704:	69db      	ldr	r3, [r3, #28]
 801f706:	4413      	add	r3, r2
 801f708:	4ab2      	ldr	r2, [pc, #712]	; (801f9d4 <chirp_start+0x644>)
 801f70a:	61d3      	str	r3, [r2, #28]
 801f70c:	4bae      	ldr	r3, [pc, #696]	; (801f9c8 <chirp_start+0x638>)
 801f70e:	2200      	movs	r2, #0
 801f710:	71da      	strb	r2, [r3, #7]
      Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801f712:	2007      	movs	r0, #7
 801f714:	f7ee fd90 	bl	800e238 <energest_type_time>
 801f718:	4603      	mov	r3, r0
 801f71a:	4619      	mov	r1, r3
 801f71c:	2007      	movs	r0, #7
 801f71e:	f7eb fa1b 	bl	800ab58 <Stats_value_debug>
    #endif
    sync_channel_id = 0;
 801f722:	2300      	movs	r3, #0
 801f724:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
    chirp_config.lbt_channel_primary = sync_channel_id;
 801f728:	4aa5      	ldr	r2, [pc, #660]	; (801f9c0 <chirp_start+0x630>)
 801f72a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 801f72e:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
    SX1276SetChannel(chirp_config.lora_freq + chirp_config.lbt_channel_primary * CHANNEL_STEP);
 801f732:	4ba3      	ldr	r3, [pc, #652]	; (801f9c0 <chirp_start+0x630>)
 801f734:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 801f738:	4aa1      	ldr	r2, [pc, #644]	; (801f9c0 <chirp_start+0x630>)
 801f73a:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801f73e:	4611      	mov	r1, r2
 801f740:	4aa5      	ldr	r2, [pc, #660]	; (801f9d8 <chirp_start+0x648>)
 801f742:	fb02 f201 	mul.w	r2, r2, r1
 801f746:	4413      	add	r3, r2
 801f748:	4618      	mov	r0, r3
 801f74a:	f7ec fc9f 	bl	800c08c <SX1276SetChannel>
    // no task
		if (chirp_round(node_id, &chirp_outl) != 2)
 801f74e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801f752:	f107 030f 	add.w	r3, r7, #15
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	4611      	mov	r1, r2
 801f75a:	4618      	mov	r0, r3
 801f75c:	f7f5 fb86 	bl	8014e6c <chirp_round>
 801f760:	4603      	mov	r3, r0
 801f762:	2b02      	cmp	r3, #2
 801f764:	f000 8142 	beq.w	801f9ec <chirp_start+0x65c>
		{
        sync_channel_id = (sync_channel_id+1) % LBT_CHANNEL_NUM;
 801f768:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 801f76c:	1c5a      	adds	r2, r3, #1
 801f76e:	4b9b      	ldr	r3, [pc, #620]	; (801f9dc <chirp_start+0x64c>)
 801f770:	fb83 1302 	smull	r1, r3, r3, r2
 801f774:	1099      	asrs	r1, r3, #2
 801f776:	17d3      	asrs	r3, r2, #31
 801f778:	1ac9      	subs	r1, r1, r3
 801f77a:	460b      	mov	r3, r1
 801f77c:	009b      	lsls	r3, r3, #2
 801f77e:	440b      	add	r3, r1
 801f780:	005b      	lsls	r3, r3, #1
 801f782:	1ad1      	subs	r1, r2, r3
 801f784:	460b      	mov	r3, r1
 801f786:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801f78a:	4b8f      	ldr	r3, [pc, #572]	; (801f9c8 <chirp_start+0x638>)
 801f78c:	79db      	ldrb	r3, [r3, #7]
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d00d      	beq.n	801f7ae <chirp_start+0x41e>
 801f792:	4b8e      	ldr	r3, [pc, #568]	; (801f9cc <chirp_start+0x63c>)
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f798:	4b8d      	ldr	r3, [pc, #564]	; (801f9d0 <chirp_start+0x640>)
 801f79a:	69db      	ldr	r3, [r3, #28]
 801f79c:	1ad2      	subs	r2, r2, r3
 801f79e:	4b8d      	ldr	r3, [pc, #564]	; (801f9d4 <chirp_start+0x644>)
 801f7a0:	69db      	ldr	r3, [r3, #28]
 801f7a2:	4413      	add	r3, r2
 801f7a4:	4a8b      	ldr	r2, [pc, #556]	; (801f9d4 <chirp_start+0x644>)
 801f7a6:	61d3      	str	r3, [r2, #28]
 801f7a8:	4b87      	ldr	r3, [pc, #540]	; (801f9c8 <chirp_start+0x638>)
 801f7aa:	2200      	movs	r2, #0
 801f7ac:	71da      	strb	r2, [r3, #7]
          ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801f7ae:	4b86      	ldr	r3, [pc, #536]	; (801f9c8 <chirp_start+0x638>)
 801f7b0:	7a1b      	ldrb	r3, [r3, #8]
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d00d      	beq.n	801f7d2 <chirp_start+0x442>
 801f7b6:	4b85      	ldr	r3, [pc, #532]	; (801f9cc <chirp_start+0x63c>)
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f7bc:	4b84      	ldr	r3, [pc, #528]	; (801f9d0 <chirp_start+0x640>)
 801f7be:	6a1b      	ldr	r3, [r3, #32]
 801f7c0:	1ad2      	subs	r2, r2, r3
 801f7c2:	4b84      	ldr	r3, [pc, #528]	; (801f9d4 <chirp_start+0x644>)
 801f7c4:	6a1b      	ldr	r3, [r3, #32]
 801f7c6:	4413      	add	r3, r2
 801f7c8:	4a82      	ldr	r2, [pc, #520]	; (801f9d4 <chirp_start+0x644>)
 801f7ca:	6213      	str	r3, [r2, #32]
 801f7cc:	4b7e      	ldr	r3, [pc, #504]	; (801f9c8 <chirp_start+0x638>)
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	721a      	strb	r2, [r3, #8]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801f7d2:	2007      	movs	r0, #7
 801f7d4:	f7ee fd30 	bl	800e238 <energest_type_time>
 801f7d8:	4603      	mov	r3, r0
 801f7da:	4619      	mov	r1, r3
 801f7dc:	2007      	movs	r0, #7
 801f7de:	f7eb f9bb 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 801f7e2:	2008      	movs	r0, #8
 801f7e4:	f7ee fd28 	bl	800e238 <energest_type_time>
 801f7e8:	4604      	mov	r4, r0
 801f7ea:	200e      	movs	r0, #14
 801f7ec:	f7ee fd24 	bl	800e238 <energest_type_time>
 801f7f0:	4603      	mov	r3, r0
 801f7f2:	1ae4      	subs	r4, r4, r3
 801f7f4:	200f      	movs	r0, #15
 801f7f6:	f7ee fd1f 	bl	800e238 <energest_type_time>
 801f7fa:	4603      	mov	r3, r0
 801f7fc:	1ae3      	subs	r3, r4, r3
 801f7fe:	4619      	mov	r1, r3
 801f800:	2008      	movs	r0, #8
 801f802:	f7eb f9a9 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 801f806:	200e      	movs	r0, #14
 801f808:	f7ee fd16 	bl	800e238 <energest_type_time>
 801f80c:	4603      	mov	r3, r0
 801f80e:	4619      	mov	r1, r3
 801f810:	200e      	movs	r0, #14
 801f812:	f7eb f9a1 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 801f816:	200f      	movs	r0, #15
 801f818:	f7ee fd0e 	bl	800e238 <energest_type_time>
 801f81c:	4603      	mov	r3, r0
 801f81e:	4619      	mov	r1, r3
 801f820:	200f      	movs	r0, #15
 801f822:	f7eb f999 	bl	800ab58 <Stats_value_debug>
        #endif
        PRINTF("chirp_round:%lu\n", chirp_config.glossy_task);
 801f826:	4b66      	ldr	r3, [pc, #408]	; (801f9c0 <chirp_start+0x630>)
 801f828:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f82c:	4619      	mov	r1, r3
 801f82e:	486c      	ldr	r0, [pc, #432]	; (801f9e0 <chirp_start+0x650>)
 801f830:	f002 ff04 	bl	802263c <iprintf>
        if (!node_id)
 801f834:	f107 030f 	add.w	r3, r7, #15
 801f838:	781b      	ldrb	r3, [r3, #0]
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d103      	bne.n	801f846 <chirp_start+0x4b6>
        {
          GPS_Sleep(60);
 801f83e:	203c      	movs	r0, #60	; 0x3c
 801f840:	f7ea fdb2 	bl	800a3a8 <GPS_Sleep>
 801f844:	e087      	b.n	801f956 <chirp_start+0x5c6>
        }
        else
        {
          // this time glossy no task but sync true
          if (chirp_config.glossy_task)
 801f846:	4b5e      	ldr	r3, [pc, #376]	; (801f9c0 <chirp_start+0x630>)
 801f848:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d011      	beq.n	801f874 <chirp_start+0x4e4>
          {
            chirp_outl.glossy_resync = 0;
 801f850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f854:	2200      	movs	r2, #0
 801f856:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            // close gps if on
            if (chirp_outl.glossy_gps_on)
 801f85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f85e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f862:	2b00      	cmp	r3, #0
 801f864:	d006      	beq.n	801f874 <chirp_start+0x4e4>
            {
              chirp_outl.glossy_gps_on = 0;
 801f866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f86a:	2200      	movs	r2, #0
 801f86c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
              #if GPS_DATA
                GPS_Off();
 801f870:	f7ea fbb6 	bl	8009fe0 <GPS_Off>
              #endif
            }
          }
          // long time no glossy, open the gps
          if (!chirp_config.glossy_task)
 801f874:	4b52      	ldr	r3, [pc, #328]	; (801f9c0 <chirp_start+0x630>)
 801f876:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d11f      	bne.n	801f8be <chirp_start+0x52e>
          {
            chirp_outl.glossy_resync++;
 801f87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f882:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801f886:	3301      	adds	r3, #1
 801f888:	b2da      	uxtb	r2, r3
 801f88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f88e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            if ((chirp_outl.glossy_resync >= 5) && (!chirp_outl.glossy_gps_on))
 801f892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f896:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801f89a:	2b04      	cmp	r3, #4
 801f89c:	d90f      	bls.n	801f8be <chirp_start+0x52e>
 801f89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f8a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d109      	bne.n	801f8be <chirp_start+0x52e>
            {
              chirp_outl.glossy_gps_on = 1;
 801f8aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f8ae:	2201      	movs	r2, #1
 801f8b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
              GPS_On();
 801f8b4:	f7ea fb80 	bl	8009fb8 <GPS_On>
              GPS_Waiting_PPS(10);
 801f8b8:	200a      	movs	r0, #10
 801f8ba:	f7ea fcdd 	bl	800a278 <GPS_Waiting_PPS>
            //   sync_channel_id = (sync_channel_id+1) % LBT_CHANNEL_NUM;
            // }
          }

          // wait on each 60 seconds
          if (chirp_outl.glossy_gps_on)
 801f8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f8c2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d003      	beq.n	801f8d2 <chirp_start+0x542>
          {
            GPS_Sleep(60);
 801f8ca:	203c      	movs	r0, #60	; 0x3c
 801f8cc:	f7ea fd6c 	bl	800a3a8 <GPS_Sleep>
 801f8d0:	e041      	b.n	801f956 <chirp_start+0x5c6>
          }
          else
          {
            // RTC_Waiting_Count(60 - chirp_config.mx_period_time_s - 2);
            DS3231_GetTime();
 801f8d2:	f7f9 fd77 	bl	80193c4 <DS3231_GetTime>
            /* Set alarm */
            ds3231_time = DS3231_ShowTime();
 801f8d6:	f107 041c 	add.w	r4, r7, #28
 801f8da:	463b      	mov	r3, r7
 801f8dc:	4618      	mov	r0, r3
 801f8de:	f7f9 fd8b 	bl	80193f8 <DS3231_ShowTime>
 801f8e2:	463a      	mov	r2, r7
 801f8e4:	4623      	mov	r3, r4
 801f8e6:	6810      	ldr	r0, [r2, #0]
 801f8e8:	6851      	ldr	r1, [r2, #4]
 801f8ea:	c303      	stmia	r3!, {r0, r1}
            diff = GPS_Diff(&ds3231_time, 1970, 1, 1, 0, 0, 0);
 801f8ec:	f107 001c 	add.w	r0, r7, #28
 801f8f0:	2300      	movs	r3, #0
 801f8f2:	9302      	str	r3, [sp, #8]
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	9301      	str	r3, [sp, #4]
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	9300      	str	r3, [sp, #0]
 801f8fc:	2301      	movs	r3, #1
 801f8fe:	2201      	movs	r2, #1
 801f900:	f240 71b2 	movw	r1, #1970	; 0x7b2
 801f904:	f7ea fc5c 	bl	800a1c0 <GPS_Diff>
 801f908:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f90c:	e9c3 0100 	strd	r0, r1, [r3]
            sleep_sec = 60 - (time_t)(0 - diff) % 60;
 801f910:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801f914:	e9d3 3400 	ldrd	r3, r4, [r3]
 801f918:	4258      	negs	r0, r3
 801f91a:	eb64 0144 	sbc.w	r1, r4, r4, lsl #1
 801f91e:	f04f 023c 	mov.w	r2, #60	; 0x3c
 801f922:	f04f 0300 	mov.w	r3, #0
 801f926:	f7e1 f969 	bl	8000bfc <__aeabi_ldivmod>
 801f92a:	461c      	mov	r4, r3
 801f92c:	4613      	mov	r3, r2
 801f92e:	4619      	mov	r1, r3
 801f930:	4622      	mov	r2, r4
 801f932:	f04f 033c 	mov.w	r3, #60	; 0x3c
 801f936:	f04f 0400 	mov.w	r4, #0
 801f93a:	1a5b      	subs	r3, r3, r1
 801f93c:	eb64 0402 	sbc.w	r4, r4, r2
 801f940:	461d      	mov	r5, r3
 801f942:	4626      	mov	r6, r4
 801f944:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801f948:	e9c3 5600 	strd	r5, r6, [r3]
            RTC_Waiting_Count(sleep_sec);
 801f94c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801f950:	4618      	mov	r0, r3
 801f952:	f7ea fff7 	bl	800a944 <RTC_Waiting_Count>
          }
        }
        #if ENERGEST_CONF_ON
          energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(60 - chirp_config.mx_period_time_s - 2));
 801f956:	2009      	movs	r0, #9
 801f958:	f7ee fc6e 	bl	800e238 <energest_type_time>
 801f95c:	4602      	mov	r2, r0
 801f95e:	4b18      	ldr	r3, [pc, #96]	; (801f9c0 <chirp_start+0x630>)
 801f960:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801f964:	b29b      	uxth	r3, r3
 801f966:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 801f96a:	4619      	mov	r1, r3
 801f96c:	4b1d      	ldr	r3, [pc, #116]	; (801f9e4 <chirp_start+0x654>)
 801f96e:	fb03 f301 	mul.w	r3, r3, r1
 801f972:	4413      	add	r3, r2
 801f974:	4619      	mov	r1, r3
 801f976:	2009      	movs	r0, #9
 801f978:	f7ee fc92 	bl	800e2a0 <energest_type_set>
          Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801f97c:	2009      	movs	r0, #9
 801f97e:	f7ee fc5b 	bl	800e238 <energest_type_time>
 801f982:	4603      	mov	r3, r0
 801f984:	4619      	mov	r1, r3
 801f986:	2009      	movs	r0, #9
 801f988:	f7eb f8e6 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[0]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801f98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f990:	4a15      	ldr	r2, [pc, #84]	; (801f9e8 <chirp_start+0x658>)
 801f992:	4614      	mov	r4, r2
 801f994:	f103 067c 	add.w	r6, r3, #124	; 0x7c
 801f998:	f104 0c20 	add.w	ip, r4, #32
 801f99c:	4635      	mov	r5, r6
 801f99e:	4623      	mov	r3, r4
 801f9a0:	6818      	ldr	r0, [r3, #0]
 801f9a2:	6859      	ldr	r1, [r3, #4]
 801f9a4:	689a      	ldr	r2, [r3, #8]
 801f9a6:	68db      	ldr	r3, [r3, #12]
 801f9a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f9aa:	3410      	adds	r4, #16
 801f9ac:	3610      	adds	r6, #16
 801f9ae:	4564      	cmp	r4, ip
 801f9b0:	d1f4      	bne.n	801f99c <chirp_start+0x60c>
 801f9b2:	4633      	mov	r3, r6
 801f9b4:	4622      	mov	r2, r4
 801f9b6:	6810      	ldr	r0, [r2, #0]
 801f9b8:	6851      	ldr	r1, [r2, #4]
 801f9ba:	c303      	stmia	r3!, {r0, r1}
 801f9bc:	e1b2      	b.n	801fd24 <chirp_start+0x994>
 801f9be:	bf00      	nop
 801f9c0:	20001430 	.word	0x20001430
 801f9c4:	08026ac0 	.word	0x08026ac0
 801f9c8:	2000112c 	.word	0x2000112c
 801f9cc:	200012c8 	.word	0x200012c8
 801f9d0:	20001308 	.word	0x20001308
 801f9d4:	20000f10 	.word	0x20000f10
 801f9d8:	00030d40 	.word	0x00030d40
 801f9dc:	66666667 	.word	0x66666667
 801f9e0:	08026ae0 	.word	0x08026ae0
 801f9e4:	00f42400 	.word	0x00f42400
 801f9e8:	20000d00 	.word	0x20000d00
        #endif
    }
    // have a task to do
    else
    {
      PRINTF("glossy_task == 2\n");
 801f9ec:	48c3      	ldr	r0, [pc, #780]	; (801fcfc <chirp_start+0x96c>)
 801f9ee:	f002 fead 	bl	802274c <puts>
      chirp_outl.glossy_resync = 0;
 801f9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      if ((chirp_outl.glossy_gps_on) && (node_id))
 801f9fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d00b      	beq.n	801fa20 <chirp_start+0x690>
 801fa08:	f107 030f 	add.w	r3, r7, #15
 801fa0c:	781b      	ldrb	r3, [r3, #0]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d006      	beq.n	801fa20 <chirp_start+0x690>
      {
        chirp_outl.glossy_gps_on = 0;
 801fa12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fa16:	2200      	movs	r2, #0
 801fa18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        #if GPS_DATA
          GPS_Off();
 801fa1c:	f7ea fae0 	bl	8009fe0 <GPS_Off>
        #endif
      }
      #if ENERGEST_CONF_ON
        ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801fa20:	4bb7      	ldr	r3, [pc, #732]	; (801fd00 <chirp_start+0x970>)
 801fa22:	79db      	ldrb	r3, [r3, #7]
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d00d      	beq.n	801fa44 <chirp_start+0x6b4>
 801fa28:	4bb6      	ldr	r3, [pc, #728]	; (801fd04 <chirp_start+0x974>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fa2e:	4bb6      	ldr	r3, [pc, #728]	; (801fd08 <chirp_start+0x978>)
 801fa30:	69db      	ldr	r3, [r3, #28]
 801fa32:	1ad2      	subs	r2, r2, r3
 801fa34:	4bb5      	ldr	r3, [pc, #724]	; (801fd0c <chirp_start+0x97c>)
 801fa36:	69db      	ldr	r3, [r3, #28]
 801fa38:	4413      	add	r3, r2
 801fa3a:	4ab4      	ldr	r2, [pc, #720]	; (801fd0c <chirp_start+0x97c>)
 801fa3c:	61d3      	str	r3, [r2, #28]
 801fa3e:	4bb0      	ldr	r3, [pc, #704]	; (801fd00 <chirp_start+0x970>)
 801fa40:	2200      	movs	r2, #0
 801fa42:	71da      	strb	r2, [r3, #7]
        ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801fa44:	4bae      	ldr	r3, [pc, #696]	; (801fd00 <chirp_start+0x970>)
 801fa46:	7a1b      	ldrb	r3, [r3, #8]
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d00d      	beq.n	801fa68 <chirp_start+0x6d8>
 801fa4c:	4bad      	ldr	r3, [pc, #692]	; (801fd04 <chirp_start+0x974>)
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fa52:	4bad      	ldr	r3, [pc, #692]	; (801fd08 <chirp_start+0x978>)
 801fa54:	6a1b      	ldr	r3, [r3, #32]
 801fa56:	1ad2      	subs	r2, r2, r3
 801fa58:	4bac      	ldr	r3, [pc, #688]	; (801fd0c <chirp_start+0x97c>)
 801fa5a:	6a1b      	ldr	r3, [r3, #32]
 801fa5c:	4413      	add	r3, r2
 801fa5e:	4aab      	ldr	r2, [pc, #684]	; (801fd0c <chirp_start+0x97c>)
 801fa60:	6213      	str	r3, [r2, #32]
 801fa62:	4ba7      	ldr	r3, [pc, #668]	; (801fd00 <chirp_start+0x970>)
 801fa64:	2200      	movs	r2, #0
 801fa66:	721a      	strb	r2, [r3, #8]
        Stats_value_debug(ENERGEST_TYPE_LPM, energest_type_time(ENERGEST_TYPE_LPM) - energest_type_time(ENERGEST_TYPE_TRANSMIT) - energest_type_time(ENERGEST_TYPE_LISTEN));
 801fa68:	2008      	movs	r0, #8
 801fa6a:	f7ee fbe5 	bl	800e238 <energest_type_time>
 801fa6e:	4604      	mov	r4, r0
 801fa70:	200e      	movs	r0, #14
 801fa72:	f7ee fbe1 	bl	800e238 <energest_type_time>
 801fa76:	4603      	mov	r3, r0
 801fa78:	1ae4      	subs	r4, r4, r3
 801fa7a:	200f      	movs	r0, #15
 801fa7c:	f7ee fbdc 	bl	800e238 <energest_type_time>
 801fa80:	4603      	mov	r3, r0
 801fa82:	1ae3      	subs	r3, r4, r3
 801fa84:	4619      	mov	r1, r3
 801fa86:	2008      	movs	r0, #8
 801fa88:	f7eb f866 	bl	800ab58 <Stats_value_debug>
        Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 801fa8c:	200e      	movs	r0, #14
 801fa8e:	f7ee fbd3 	bl	800e238 <energest_type_time>
 801fa92:	4603      	mov	r3, r0
 801fa94:	4619      	mov	r1, r3
 801fa96:	200e      	movs	r0, #14
 801fa98:	f7eb f85e 	bl	800ab58 <Stats_value_debug>
        Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 801fa9c:	200f      	movs	r0, #15
 801fa9e:	f7ee fbcb 	bl	800e238 <energest_type_time>
 801faa2:	4603      	mov	r3, r0
 801faa4:	4619      	mov	r1, r3
 801faa6:	200f      	movs	r0, #15
 801faa8:	f7eb f856 	bl	800ab58 <Stats_value_debug>
      //   RTC_Waiting_Count(60 - chirp_config.mx_period_time_s - 2);
      // else
      //   GPS_Sleep(60);

		/* default mode is MX_ARRANGE (task arrangement) */
		chirp_outl.task = MX_ARRANGE;
 801faac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fab0:	2206      	movs	r2, #6
 801fab2:	701a      	strb	r2, [r3, #0]
    if (node_id)
 801fab4:	f107 030f 	add.w	r3, r7, #15
 801fab8:	781b      	ldrb	r3, [r3, #0]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d003      	beq.n	801fac6 <chirp_start+0x736>
      chirp_outl.arrange_task = MX_ARRANGE;
 801fabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fac2:	2206      	movs	r2, #6
 801fac4:	719a      	strb	r2, [r3, #6]

      #if ENERGEST_CONF_ON
        energest_type_set(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP) + GPI_TICK_S_TO_FAST(60 - chirp_config.mx_period_time_s - 2));
 801fac6:	2009      	movs	r0, #9
 801fac8:	f7ee fbb6 	bl	800e238 <energest_type_time>
 801facc:	4602      	mov	r2, r0
 801face:	4b90      	ldr	r3, [pc, #576]	; (801fd10 <chirp_start+0x980>)
 801fad0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 801fada:	4619      	mov	r1, r3
 801fadc:	4b8d      	ldr	r3, [pc, #564]	; (801fd14 <chirp_start+0x984>)
 801fade:	fb03 f301 	mul.w	r3, r3, r1
 801fae2:	4413      	add	r3, r2
 801fae4:	4619      	mov	r1, r3
 801fae6:	2009      	movs	r0, #9
 801fae8:	f7ee fbda 	bl	800e2a0 <energest_type_set>
 801faec:	4b85      	ldr	r3, [pc, #532]	; (801fd04 <chirp_start+0x974>)
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ENERGEST_ON(ENERGEST_TYPE_CPU);
 801faf2:	4a85      	ldr	r2, [pc, #532]	; (801fd08 <chirp_start+0x978>)
 801faf4:	61d3      	str	r3, [r2, #28]
 801faf6:	4b82      	ldr	r3, [pc, #520]	; (801fd00 <chirp_start+0x970>)
 801faf8:	2201      	movs	r2, #1
 801fafa:	71da      	strb	r2, [r3, #7]
      #endif
		PRINTF("---------MX_ARRANGE---------\n");
 801fafc:	4886      	ldr	r0, [pc, #536]	; (801fd18 <chirp_start+0x988>)
 801fafe:	f002 fe25 	bl	802274c <puts>
		// TODO: tune those parameters
		chirp_outl.num_nodes = network_num_nodes;
 801fb02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb06:	f107 020e 	add.w	r2, r7, #14
 801fb0a:	7812      	ldrb	r2, [r2, #0]
 801fb0c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		chirp_outl.generation_size = network_num_nodes;
 801fb10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb14:	f107 020e 	add.w	r2, r7, #14
 801fb18:	7812      	ldrb	r2, [r2, #0]
 801fb1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		chirp_outl.payload_len = DATA_HEADER_LENGTH + 5 + 4;
 801fb1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb22:	2211      	movs	r2, #17
 801fb24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		chirp_outl.round_setup = 1;
 801fb28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb2c:	2201      	movs	r2, #1
 801fb2e:	715a      	strb	r2, [r3, #5]
		chirp_outl.round_max = 1;
 801fb30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb34:	2200      	movs	r2, #0
 801fb36:	f042 0201 	orr.w	r2, r2, #1
 801fb3a:	70da      	strb	r2, [r3, #3]
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	711a      	strb	r2, [r3, #4]
		chirp_outl.file_chunk_len = 0;
 801fb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb44:	2200      	movs	r2, #0
 801fb46:	875a      	strh	r2, [r3, #58]	; 0x3a

		chirp_radio_config(11, 7, 1, 8, 14, chirp_outl.default_freq);
 801fb48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb4c:	f8d3 3011 	ldr.w	r3, [r3, #17]
 801fb50:	9301      	str	r3, [sp, #4]
 801fb52:	230e      	movs	r3, #14
 801fb54:	9300      	str	r3, [sp, #0]
 801fb56:	2308      	movs	r3, #8
 801fb58:	2201      	movs	r2, #1
 801fb5a:	2107      	movs	r1, #7
 801fb5c:	200b      	movs	r0, #11
 801fb5e:	f7f3 fa67 	bl	8013030 <chirp_radio_config>
		chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len + HASH_TAIL, DISSEMINATION);
 801fb62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb66:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801fb6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb6e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 801fb72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fb76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801fb7a:	3302      	adds	r3, #2
 801fb7c:	b2da      	uxtb	r2, r3
 801fb7e:	2302      	movs	r3, #2
 801fb80:	f7f2 ffe2 	bl	8012b48 <chirp_packet_config>
    chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801fb84:	4b62      	ldr	r3, [pc, #392]	; (801fd10 <chirp_start+0x980>)
 801fb86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fb8a:	4618      	mov	r0, r3
 801fb8c:	4b60      	ldr	r3, [pc, #384]	; (801fd10 <chirp_start+0x980>)
 801fb8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fb92:	4619      	mov	r1, r3
 801fb94:	4b5e      	ldr	r3, [pc, #376]	; (801fd10 <chirp_start+0x980>)
 801fb96:	8a5b      	ldrh	r3, [r3, #18]
 801fb98:	b29b      	uxth	r3, r3
 801fb9a:	3302      	adds	r3, #2
 801fb9c:	9301      	str	r3, [sp, #4]
 801fb9e:	2308      	movs	r3, #8
 801fba0:	9300      	str	r3, [sp, #0]
 801fba2:	2300      	movs	r3, #0
 801fba4:	2201      	movs	r2, #1
 801fba6:	f7ed fa35 	bl	800d014 <SX1276GetPacketTime>
 801fbaa:	4603      	mov	r3, r0
 801fbac:	461a      	mov	r2, r3
 801fbae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fbb2:	f8c3 2007 	str.w	r2, [r3, #7]
    chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.num_nodes * 3, 1500000);
 801fbb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fbba:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801fbbe:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801fbc2:	33a0      	adds	r3, #160	; 0xa0
 801fbc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fbc8:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 801fbcc:	b292      	uxth	r2, r2
 801fbce:	4611      	mov	r1, r2
 801fbd0:	0049      	lsls	r1, r1, #1
 801fbd2:	440a      	add	r2, r1
 801fbd4:	b291      	uxth	r1, r2
 801fbd6:	4a51      	ldr	r2, [pc, #324]	; (801fd1c <chirp_start+0x98c>)
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7f3 f9bd 	bl	8012f58 <chirp_slot_config>
		chirp_payload_distribution(chirp_outl.task);
 801fbde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fbe2:	781b      	ldrb	r3, [r3, #0]
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	f7f3 fa83 	bl	80130f0 <chirp_payload_distribution>
    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801fbea:	4b45      	ldr	r3, [pc, #276]	; (801fd00 <chirp_start+0x970>)
 801fbec:	79db      	ldrb	r3, [r3, #7]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d00d      	beq.n	801fc0e <chirp_start+0x87e>
 801fbf2:	4b44      	ldr	r3, [pc, #272]	; (801fd04 <chirp_start+0x974>)
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fbf8:	4b43      	ldr	r3, [pc, #268]	; (801fd08 <chirp_start+0x978>)
 801fbfa:	69db      	ldr	r3, [r3, #28]
 801fbfc:	1ad2      	subs	r2, r2, r3
 801fbfe:	4b43      	ldr	r3, [pc, #268]	; (801fd0c <chirp_start+0x97c>)
 801fc00:	69db      	ldr	r3, [r3, #28]
 801fc02:	4413      	add	r3, r2
 801fc04:	4a41      	ldr	r2, [pc, #260]	; (801fd0c <chirp_start+0x97c>)
 801fc06:	61d3      	str	r3, [r2, #28]
 801fc08:	4b3d      	ldr	r3, [pc, #244]	; (801fd00 <chirp_start+0x970>)
 801fc0a:	2200      	movs	r2, #0
 801fc0c:	71da      	strb	r2, [r3, #7]
      Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 801fc0e:	2007      	movs	r0, #7
 801fc10:	f7ee fb12 	bl	800e238 <energest_type_time>
 801fc14:	4603      	mov	r3, r0
 801fc16:	4619      	mov	r1, r3
 801fc18:	2007      	movs	r0, #7
 801fc1a:	f7ea ff9d 	bl	800ab58 <Stats_value_debug>
      Stats_value_debug(ENERGEST_TYPE_STOP, energest_type_time(ENERGEST_TYPE_STOP));
 801fc1e:	2009      	movs	r0, #9
 801fc20:	f7ee fb0a 	bl	800e238 <energest_type_time>
 801fc24:	4603      	mov	r3, r0
 801fc26:	4619      	mov	r1, r3
 801fc28:	2009      	movs	r0, #9
 801fc2a:	f7ea ff95 	bl	800ab58 <Stats_value_debug>
      memcpy((uint32_t *)(&chirp_outl.chirp_energy[0]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 801fc2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc32:	4a3b      	ldr	r2, [pc, #236]	; (801fd20 <chirp_start+0x990>)
 801fc34:	4614      	mov	r4, r2
 801fc36:	f103 067c 	add.w	r6, r3, #124	; 0x7c
 801fc3a:	f104 0c20 	add.w	ip, r4, #32
 801fc3e:	4635      	mov	r5, r6
 801fc40:	4623      	mov	r3, r4
 801fc42:	6818      	ldr	r0, [r3, #0]
 801fc44:	6859      	ldr	r1, [r3, #4]
 801fc46:	689a      	ldr	r2, [r3, #8]
 801fc48:	68db      	ldr	r3, [r3, #12]
 801fc4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801fc4c:	3410      	adds	r4, #16
 801fc4e:	3610      	adds	r6, #16
 801fc50:	4564      	cmp	r4, ip
 801fc52:	d1f4      	bne.n	801fc3e <chirp_start+0x8ae>
 801fc54:	4633      	mov	r3, r6
 801fc56:	4622      	mov	r2, r4
 801fc58:	6810      	ldr	r0, [r2, #0]
 801fc5a:	6851      	ldr	r1, [r2, #4]
 801fc5c:	c303      	stmia	r3!, {r0, r1}
      memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 801fc5e:	2228      	movs	r2, #40	; 0x28
 801fc60:	2100      	movs	r1, #0
 801fc62:	482f      	ldr	r0, [pc, #188]	; (801fd20 <chirp_start+0x990>)
 801fc64:	f001 fedd 	bl	8021a22 <memset>
    #endif
		if (!chirp_round(node_id, &chirp_outl))
 801fc68:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fc6c:	f107 030f 	add.w	r3, r7, #15
 801fc70:	781b      	ldrb	r3, [r3, #0]
 801fc72:	4611      	mov	r1, r2
 801fc74:	4618      	mov	r0, r3
 801fc76:	f7f5 f8f9 	bl	8014e6c <chirp_round>
 801fc7a:	4603      	mov	r3, r0
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d107      	bne.n	801fc90 <chirp_start+0x900>
    {
      chirp_outl.task = MX_ARRANGE;
 801fc80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc84:	2206      	movs	r2, #6
 801fc86:	701a      	strb	r2, [r3, #0]
      chirp_outl.arrange_task = MX_ARRANGE;
 801fc88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fc8c:	2206      	movs	r2, #6
 801fc8e:	719a      	strb	r2, [r3, #6]
    }

    #if ENERGEST_CONF_ON
      ENERGEST_OFF(ENERGEST_TYPE_CPU);
 801fc90:	4b1b      	ldr	r3, [pc, #108]	; (801fd00 <chirp_start+0x970>)
 801fc92:	79db      	ldrb	r3, [r3, #7]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d00d      	beq.n	801fcb4 <chirp_start+0x924>
 801fc98:	4b1a      	ldr	r3, [pc, #104]	; (801fd04 <chirp_start+0x974>)
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fc9e:	4b1a      	ldr	r3, [pc, #104]	; (801fd08 <chirp_start+0x978>)
 801fca0:	69db      	ldr	r3, [r3, #28]
 801fca2:	1ad2      	subs	r2, r2, r3
 801fca4:	4b19      	ldr	r3, [pc, #100]	; (801fd0c <chirp_start+0x97c>)
 801fca6:	69db      	ldr	r3, [r3, #28]
 801fca8:	4413      	add	r3, r2
 801fcaa:	4a18      	ldr	r2, [pc, #96]	; (801fd0c <chirp_start+0x97c>)
 801fcac:	61d3      	str	r3, [r2, #28]
 801fcae:	4b14      	ldr	r3, [pc, #80]	; (801fd00 <chirp_start+0x970>)
 801fcb0:	2200      	movs	r2, #0
 801fcb2:	71da      	strb	r2, [r3, #7]
      ENERGEST_OFF(ENERGEST_TYPE_LPM);
 801fcb4:	4b12      	ldr	r3, [pc, #72]	; (801fd00 <chirp_start+0x970>)
 801fcb6:	7a1b      	ldrb	r3, [r3, #8]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d00d      	beq.n	801fcd8 <chirp_start+0x948>
 801fcbc:	4b11      	ldr	r3, [pc, #68]	; (801fd04 <chirp_start+0x974>)
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801fcc2:	4b11      	ldr	r3, [pc, #68]	; (801fd08 <chirp_start+0x978>)
 801fcc4:	6a1b      	ldr	r3, [r3, #32]
 801fcc6:	1ad2      	subs	r2, r2, r3
 801fcc8:	4b10      	ldr	r3, [pc, #64]	; (801fd0c <chirp_start+0x97c>)
 801fcca:	6a1b      	ldr	r3, [r3, #32]
 801fccc:	4413      	add	r3, r2
 801fcce:	4a0f      	ldr	r2, [pc, #60]	; (801fd0c <chirp_start+0x97c>)
 801fcd0:	6213      	str	r3, [r2, #32]
 801fcd2:	4b0b      	ldr	r3, [pc, #44]	; (801fd00 <chirp_start+0x970>)
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	721a      	strb	r2, [r3, #8]
 801fcd8:	4b0a      	ldr	r3, [pc, #40]	; (801fd04 <chirp_start+0x974>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ENERGEST_ON(ENERGEST_TYPE_CPU);
 801fcde:	4a0a      	ldr	r2, [pc, #40]	; (801fd08 <chirp_start+0x978>)
 801fce0:	61d3      	str	r3, [r2, #28]
 801fce2:	4b07      	ldr	r3, [pc, #28]	; (801fd00 <chirp_start+0x970>)
 801fce4:	2201      	movs	r2, #1
 801fce6:	71da      	strb	r2, [r3, #7]
      if (chirp_outl.arrange_task == MX_DISSEMINATE)
 801fce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fcec:	799b      	ldrb	r3, [r3, #6]
 801fcee:	2b01      	cmp	r3, #1
 801fcf0:	d118      	bne.n	801fd24 <chirp_start+0x994>
      {
        FLASH_If_Erase_Pages(1, DAEMON_DEBUG_PAGE);
 801fcf2:	21f9      	movs	r1, #249	; 0xf9
 801fcf4:	2001      	movs	r0, #1
 801fcf6:	f7fc fe3d 	bl	801c974 <FLASH_If_Erase_Pages>
 801fcfa:	e013      	b.n	801fd24 <chirp_start+0x994>
 801fcfc:	08026af4 	.word	0x08026af4
 801fd00:	2000112c 	.word	0x2000112c
 801fd04:	200012c8 	.word	0x200012c8
 801fd08:	20001308 	.word	0x20001308
 801fd0c:	20000f10 	.word	0x20000f10
 801fd10:	20001430 	.word	0x20001430
 801fd14:	00f42400 	.word	0x00f42400
 801fd18:	08026b08 	.word	0x08026b08
 801fd1c:	0016e360 	.word	0x0016e360
 801fd20:	20000d00 	.word	0x20000d00
      }
    #endif
    }
		/* into the assigned task */
		chirp_outl.task = chirp_outl.arrange_task;
 801fd24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd28:	799a      	ldrb	r2, [r3, #6]
 801fd2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd2e:	701a      	strb	r2, [r3, #0]
    memset(&chirp_stats_all, 0, sizeof(chirp_stats_all));
 801fd30:	223c      	movs	r2, #60	; 0x3c
 801fd32:	2100      	movs	r1, #0
 801fd34:	48ac      	ldr	r0, [pc, #688]	; (801ffe8 <chirp_start+0xc58>)
 801fd36:	f001 fe74 	bl	8021a22 <memset>
    #if MX_LBT_ACCESS
      memset(&chirp_config.lbt_channel_time_stats_us, 0, sizeof(chirp_config.lbt_channel_time_stats_us));
 801fd3a:	2228      	movs	r2, #40	; 0x28
 801fd3c:	2100      	movs	r1, #0
 801fd3e:	48ab      	ldr	r0, [pc, #684]	; (801ffec <chirp_start+0xc5c>)
 801fd40:	f001 fe6f 	bl	8021a22 <memset>
    #endif

		Gpi_Fast_Tick_Native deadline;
    if (chirp_outl.task == MX_DISSEMINATE)
 801fd44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd48:	781b      	ldrb	r3, [r3, #0]
 801fd4a:	2b01      	cmp	r3, #1
 801fd4c:	d107      	bne.n	801fd5e <chirp_start+0x9ce>
 801fd4e:	4ba8      	ldr	r3, [pc, #672]	; (801fff0 <chirp_start+0xc60>)
 801fd50:	681b      	ldr	r3, [r3, #0]
 801fd52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      deadline = gpi_tick_fast_native() + GPI_TICK_MS_TO_FAST(20000);
 801fd54:	4ba7      	ldr	r3, [pc, #668]	; (801fff4 <chirp_start+0xc64>)
 801fd56:	4413      	add	r3, r2
 801fd58:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801fd5c:	e006      	b.n	801fd6c <chirp_start+0x9dc>
 801fd5e:	4ba4      	ldr	r3, [pc, #656]	; (801fff0 <chirp_start+0xc60>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    else
      deadline = gpi_tick_fast_native() + GPI_TICK_MS_TO_FAST(5000);
 801fd64:	4ba4      	ldr	r3, [pc, #656]	; (801fff8 <chirp_start+0xc68>)
 801fd66:	4413      	add	r3, r2
 801fd68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    uint32_t task_bitmap_temp = chirp_outl.task_bitmap[0];
 801fd6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fd70:	69db      	ldr	r3, [r3, #28]
 801fd72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    uint8_t task_node_id = 0;
 801fd76:	2300      	movs	r3, #0
 801fd78:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    uint8_t task_lsb;
    while(task_bitmap_temp)
 801fd7c:	e02c      	b.n	801fdd8 <chirp_start+0xa48>
 801fd7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801fd82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801fd86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801fd8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		asm
 801fd8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	bf0e      	itee	eq
 801fd96:	3b01      	subeq	r3, #1
 801fd98:	fa93 f3a3 	rbitne	r3, r3
 801fd9c:	fab3 f383 	clzne	r3, r3
 801fda0:	461c      	mov	r4, r3
	return y;
 801fda2:	4623      	mov	r3, r4
    {
      task_lsb = gpi_get_lsb_32(task_bitmap_temp);
 801fda4:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      // PRINTF("task_bitmap_temp:%02x, %lu\n", task_bitmap_temp, task_lsb);
      if (task_lsb == node_id)
 801fda8:	f107 030f 	add.w	r3, r7, #15
 801fdac:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 801fdb0:	781b      	ldrb	r3, [r3, #0]
 801fdb2:	429a      	cmp	r2, r3
 801fdb4:	d015      	beq.n	801fde2 <chirp_start+0xa52>
        break;
      task_bitmap_temp &= ~(1 << task_lsb);
 801fdb6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 801fdba:	2201      	movs	r2, #1
 801fdbc:	fa02 f303 	lsl.w	r3, r2, r3
 801fdc0:	43db      	mvns	r3, r3
 801fdc2:	461a      	mov	r2, r3
 801fdc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801fdc8:	4013      	ands	r3, r2
 801fdca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      task_node_id++;
 801fdce:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 801fdd2:	3301      	adds	r3, #1
 801fdd4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
    while(task_bitmap_temp)
 801fdd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d1ce      	bne.n	801fd7e <chirp_start+0x9ee>
 801fde0:	e000      	b.n	801fde4 <chirp_start+0xa54>
        break;
 801fde2:	bf00      	nop
    }
    uint32_t task_node_num = gpi_popcnt_32(chirp_outl.task_bitmap[0]);
 801fde4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fde8:	69db      	ldr	r3, [r3, #28]
 801fdea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801fdee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801fdf2:	b29b      	uxth	r3, r3
 801fdf4:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fdf8:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801fdfc:	b2db      	uxtb	r3, r3
 801fdfe:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	return gpi_popcnt_lut[x];
 801fe02:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 801fe06:	4a7d      	ldr	r2, [pc, #500]	; (801fffc <chirp_start+0xc6c>)
 801fe08:	5cd3      	ldrb	r3, [r2, r3]
 801fe0a:	4619      	mov	r1, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fe0c:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 801fe10:	0a1b      	lsrs	r3, r3, #8
 801fe12:	b29b      	uxth	r3, r3
 801fe14:	b2db      	uxtb	r3, r3
 801fe16:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
	return gpi_popcnt_lut[x];
 801fe1a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 801fe1e:	4a77      	ldr	r2, [pc, #476]	; (801fffc <chirp_start+0xc6c>)
 801fe20:	5cd3      	ldrb	r3, [r2, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fe22:	18ca      	adds	r2, r1, r3
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801fe24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801fe28:	0c1b      	lsrs	r3, r3, #16
 801fe2a:	b29b      	uxth	r3, r3
 801fe2c:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fe30:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 801fe34:	b2db      	uxtb	r3, r3
 801fe36:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
	return gpi_popcnt_lut[x];
 801fe3a:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 801fe3e:	496f      	ldr	r1, [pc, #444]	; (801fffc <chirp_start+0xc6c>)
 801fe40:	5ccb      	ldrb	r3, [r1, r3]
 801fe42:	4618      	mov	r0, r3
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fe44:	f8b7 314a 	ldrh.w	r3, [r7, #330]	; 0x14a
 801fe48:	0a1b      	lsrs	r3, r3, #8
 801fe4a:	b29b      	uxth	r3, r3
 801fe4c:	b2db      	uxtb	r3, r3
 801fe4e:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
	return gpi_popcnt_lut[x];
 801fe52:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 801fe56:	4969      	ldr	r1, [pc, #420]	; (801fffc <chirp_start+0xc6c>)
 801fe58:	5ccb      	ldrb	r3, [r1, r3]
	return gpi_popcnt_8(x & 0xFF) + gpi_popcnt_8(x >> 8);
 801fe5a:	4403      	add	r3, r0
	return gpi_popcnt_16(x & 0xFFFF) + gpi_popcnt_16(x >> 16);
 801fe5c:	4413      	add	r3, r2
 801fe5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    // PRINTF("task_node_id:%lu, %lu\n", task_node_id, task_node_num);
    gpi_watchdog_periodic();
 801fe62:	f7ee f9b5 	bl	800e1d0 <gpi_watchdog_periodic>
		switch (chirp_outl.task)
 801fe66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe6a:	781b      	ldrb	r3, [r3, #0]
 801fe6c:	2b05      	cmp	r3, #5
 801fe6e:	f201 8428 	bhi.w	80216c2 <chirp_start+0x2332>
 801fe72:	a201      	add	r2, pc, #4	; (adr r2, 801fe78 <chirp_start+0xae8>)
 801fe74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe78:	0801fe91 	.word	0x0801fe91
 801fe7c:	080203ff 	.word	0x080203ff
 801fe80:	080208b7 	.word	0x080208b7
 801fe84:	08020d39 	.word	0x08020d39
 801fe88:	0802116b 	.word	0x0802116b
 801fe8c:	08021539 	.word	0x08021539
		{
			case CHIRP_START:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 801fe90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe94:	f8d3 300d 	ldr.w	r3, [r3, #13]
 801fe98:	b2d8      	uxtb	r0, r3
 801fe9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fe9e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801fea2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801fea6:	f8d2 2011 	ldr.w	r2, [r2, #17]
 801feaa:	9201      	str	r2, [sp, #4]
 801feac:	9300      	str	r3, [sp, #0]
 801feae:	2308      	movs	r3, #8
 801feb0:	2201      	movs	r2, #1
 801feb2:	2107      	movs	r1, #7
 801feb4:	f7f3 f8bc 	bl	8013030 <chirp_radio_config>

				TRACE_MSG("---------CHIRP_START---------\n");
 801feb8:	4851      	ldr	r0, [pc, #324]	; (8020000 <chirp_start+0xc70>)
 801feba:	f002 fc47 	bl	802274c <puts>
 801febe:	4b51      	ldr	r3, [pc, #324]	; (8020004 <chirp_start+0xc74>)
 801fec0:	4a51      	ldr	r2, [pc, #324]	; (8020008 <chirp_start+0xc78>)
 801fec2:	f240 51d7 	movw	r1, #1495	; 0x5d7
 801fec6:	4618      	mov	r0, r3
 801fec8:	f001 fc62 	bl	8021790 <trace_store_msg>
 801fecc:	f001 fce2 	bl	8021894 <trace_to_flash>
				chirp_outl.num_nodes = network_num_nodes;
 801fed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fed4:	f107 020e 	add.w	r2, r7, #14
 801fed8:	7812      	ldrb	r2, [r2, #0]
 801feda:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = network_num_nodes;
 801fede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fee2:	f107 020e 	add.w	r2, r7, #14
 801fee6:	7812      	ldrb	r2, [r2, #0]
 801fee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = offsetof(Chirp_Outl, num_nodes) - offsetof(Chirp_Outl, start_year) + DATA_HEADER_LENGTH + 2;
 801feec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fef0:	2219      	movs	r2, #25
 801fef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 801fef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fefa:	2201      	movs	r2, #1
 801fefc:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = chirp_outl.round_setup;
 801fefe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff02:	795b      	ldrb	r3, [r3, #5]
 801ff04:	b29a      	uxth	r2, r3
 801ff06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff0a:	f8a3 2003 	strh.w	r2, [r3, #3]
        chirp_outl.version_hash = 0;
 801ff0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff12:	2200      	movs	r2, #0
 801ff14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				if (!node_id)
 801ff18:	f107 030f 	add.w	r3, r7, #15
 801ff1c:	781b      	ldrb	r3, [r3, #0]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d104      	bne.n	801ff2c <chirp_start+0xb9c>
				{
					chirp_controller_read_command(&chirp_outl);
 801ff22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff26:	4618      	mov	r0, r3
 801ff28:	f7fe f862 	bl	801dff0 <chirp_controller_read_command>
				}
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, DISSEMINATION);
 801ff2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff30:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 801ff34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff38:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 801ff3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ff44:	3302      	adds	r3, #2
 801ff46:	b2da      	uxtb	r2, r3
 801ff48:	2302      	movs	r3, #2
 801ff4a:	f7f2 fdfd 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 801ff4e:	4b2f      	ldr	r3, [pc, #188]	; (802000c <chirp_start+0xc7c>)
 801ff50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ff54:	4618      	mov	r0, r3
 801ff56:	4b2d      	ldr	r3, [pc, #180]	; (802000c <chirp_start+0xc7c>)
 801ff58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ff5c:	4619      	mov	r1, r3
 801ff5e:	4b2b      	ldr	r3, [pc, #172]	; (802000c <chirp_start+0xc7c>)
 801ff60:	8a5b      	ldrh	r3, [r3, #18]
 801ff62:	b29b      	uxth	r3, r3
 801ff64:	3302      	adds	r3, #2
 801ff66:	9301      	str	r3, [sp, #4]
 801ff68:	2308      	movs	r3, #8
 801ff6a:	9300      	str	r3, [sp, #0]
 801ff6c:	2300      	movs	r3, #0
 801ff6e:	2201      	movs	r2, #1
 801ff70:	f7ed f850 	bl	800d014 <SX1276GetPacketTime>
 801ff74:	4603      	mov	r3, r0
 801ff76:	461a      	mov	r2, r3
 801ff78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff7c:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 801ff80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ff84:	f8d3 3007 	ldr.w	r3, [r3, #7]
 801ff88:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 801ff8c:	33a0      	adds	r3, #160	; 0xa0
 801ff8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ff92:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 801ff96:	b291      	uxth	r1, r2
 801ff98:	4a1d      	ldr	r2, [pc, #116]	; (8020010 <chirp_start+0xc80>)
 801ff9a:	4618      	mov	r0, r3
 801ff9c:	f7f2 ffdc 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 801ffa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ffa4:	781b      	ldrb	r3, [r3, #0]
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7f3 f8a2 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 801ffac:	bf00      	nop
 801ffae:	4b10      	ldr	r3, [pc, #64]	; (801fff0 <chirp_start+0xc60>)
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffb4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801ffb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801ffbc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
_GPI_TICK_COMPARE_FUNCTION(fast_native, 	Gpi_Fast_Tick_Native)
 801ffc0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801ffc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801ffc8:	1ad3      	subs	r3, r2, r3
 801ffca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801ffce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	db1e      	blt.n	8020014 <chirp_start+0xc84>
 801ffd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	bf14      	ite	ne
 801ffde:	2301      	movne	r3, #1
 801ffe0:	2300      	moveq	r3, #0
 801ffe2:	b2db      	uxtb	r3, r3
 801ffe4:	e018      	b.n	8020018 <chirp_start+0xc88>
 801ffe6:	bf00      	nop
 801ffe8:	20000d28 	.word	0x20000d28
 801ffec:	200014c4 	.word	0x200014c4
 801fff0:	200012c8 	.word	0x200012c8
 801fff4:	1312d000 	.word	0x1312d000
 801fff8:	04c4b400 	.word	0x04c4b400
 801fffc:	08026dd4 	.word	0x08026dd4
 8020000:	08026b28 	.word	0x08026b28
 8020004:	08026b59 	.word	0x08026b59
 8020008:	08026b60 	.word	0x08026b60
 802000c:	20001430 	.word	0x20001430
 8020010:	0016e360 	.word	0x0016e360
 8020014:	f04f 33ff 	mov.w	r3, #4294967295
 8020018:	2b00      	cmp	r3, #0
 802001a:	dbc8      	blt.n	801ffae <chirp_start+0xc1e>
				// chirp_round(node_id, &chirp_outl);

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 802001c:	4b83      	ldr	r3, [pc, #524]	; (802022c <chirp_start+0xe9c>)
 802001e:	79db      	ldrb	r3, [r3, #7]
 8020020:	2b00      	cmp	r3, #0
 8020022:	d00d      	beq.n	8020040 <chirp_start+0xcb0>
 8020024:	4b82      	ldr	r3, [pc, #520]	; (8020230 <chirp_start+0xea0>)
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802002a:	4b82      	ldr	r3, [pc, #520]	; (8020234 <chirp_start+0xea4>)
 802002c:	69db      	ldr	r3, [r3, #28]
 802002e:	1ad2      	subs	r2, r2, r3
 8020030:	4b81      	ldr	r3, [pc, #516]	; (8020238 <chirp_start+0xea8>)
 8020032:	69db      	ldr	r3, [r3, #28]
 8020034:	4413      	add	r3, r2
 8020036:	4a80      	ldr	r2, [pc, #512]	; (8020238 <chirp_start+0xea8>)
 8020038:	61d3      	str	r3, [r2, #28]
 802003a:	4b7c      	ldr	r3, [pc, #496]	; (802022c <chirp_start+0xe9c>)
 802003c:	2200      	movs	r2, #0
 802003e:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020040:	2007      	movs	r0, #7
 8020042:	f7ee f8f9 	bl	800e238 <energest_type_time>
 8020046:	4603      	mov	r3, r0
 8020048:	4619      	mov	r1, r3
 802004a:	2007      	movs	r0, #7
 802004c:	f7ea fd84 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020054:	4a79      	ldr	r2, [pc, #484]	; (802023c <chirp_start+0xeac>)
 8020056:	4614      	mov	r4, r2
 8020058:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 802005c:	f104 0c20 	add.w	ip, r4, #32
 8020060:	4635      	mov	r5, r6
 8020062:	4623      	mov	r3, r4
 8020064:	6818      	ldr	r0, [r3, #0]
 8020066:	6859      	ldr	r1, [r3, #4]
 8020068:	689a      	ldr	r2, [r3, #8]
 802006a:	68db      	ldr	r3, [r3, #12]
 802006c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802006e:	3410      	adds	r4, #16
 8020070:	3610      	adds	r6, #16
 8020072:	4564      	cmp	r4, ip
 8020074:	d1f4      	bne.n	8020060 <chirp_start+0xcd0>
 8020076:	4633      	mov	r3, r6
 8020078:	4622      	mov	r2, r4
 802007a:	6810      	ldr	r0, [r2, #0]
 802007c:	6851      	ldr	r1, [r2, #4]
 802007e:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020080:	2228      	movs	r2, #40	; 0x28
 8020082:	2100      	movs	r1, #0
 8020084:	486d      	ldr	r0, [pc, #436]	; (802023c <chirp_start+0xeac>)
 8020086:	f001 fccc 	bl	8021a22 <memset>
        #endif
        if (!chirp_round(node_id, &chirp_outl))
 802008a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802008e:	f107 030f 	add.w	r3, r7, #15
 8020092:	781b      	ldrb	r3, [r3, #0]
 8020094:	4611      	mov	r1, r2
 8020096:	4618      	mov	r0, r3
 8020098:	f7f4 fee8 	bl	8014e6c <chirp_round>
 802009c:	4603      	mov	r3, r0
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d106      	bne.n	80200b0 <chirp_start+0xd20>
        {
          free(payload_distribution);
 80200a2:	4b67      	ldr	r3, [pc, #412]	; (8020240 <chirp_start+0xeb0>)
 80200a4:	681b      	ldr	r3, [r3, #0]
 80200a6:	4618      	mov	r0, r3
 80200a8:	f001 fca8 	bl	80219fc <free>
          break;
 80200ac:	f001 bb10 	b.w	80216d0 <chirp_start+0x2340>
        }
				free(payload_distribution);
 80200b0:	4b63      	ldr	r3, [pc, #396]	; (8020240 <chirp_start+0xeb0>)
 80200b2:	681b      	ldr	r3, [r3, #0]
 80200b4:	4618      	mov	r0, r3
 80200b6:	f001 fca1 	bl	80219fc <free>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80200ba:	4b5c      	ldr	r3, [pc, #368]	; (802022c <chirp_start+0xe9c>)
 80200bc:	79db      	ldrb	r3, [r3, #7]
 80200be:	2b00      	cmp	r3, #0
 80200c0:	d00d      	beq.n	80200de <chirp_start+0xd4e>
 80200c2:	4b5b      	ldr	r3, [pc, #364]	; (8020230 <chirp_start+0xea0>)
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80200c8:	4b5a      	ldr	r3, [pc, #360]	; (8020234 <chirp_start+0xea4>)
 80200ca:	69db      	ldr	r3, [r3, #28]
 80200cc:	1ad2      	subs	r2, r2, r3
 80200ce:	4b5a      	ldr	r3, [pc, #360]	; (8020238 <chirp_start+0xea8>)
 80200d0:	69db      	ldr	r3, [r3, #28]
 80200d2:	4413      	add	r3, r2
 80200d4:	4a58      	ldr	r2, [pc, #352]	; (8020238 <chirp_start+0xea8>)
 80200d6:	61d3      	str	r3, [r2, #28]
 80200d8:	4b54      	ldr	r3, [pc, #336]	; (802022c <chirp_start+0xe9c>)
 80200da:	2200      	movs	r2, #0
 80200dc:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 80200de:	2007      	movs	r0, #7
 80200e0:	f7ee f8aa 	bl	800e238 <energest_type_time>
 80200e4:	4603      	mov	r3, r0
 80200e6:	4619      	mov	r1, r3
 80200e8:	2007      	movs	r0, #7
 80200ea:	f7ea fd35 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 80200ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80200f2:	4a52      	ldr	r2, [pc, #328]	; (802023c <chirp_start+0xeac>)
 80200f4:	4614      	mov	r4, r2
 80200f6:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 80200fa:	f104 0c20 	add.w	ip, r4, #32
 80200fe:	4635      	mov	r5, r6
 8020100:	4623      	mov	r3, r4
 8020102:	6818      	ldr	r0, [r3, #0]
 8020104:	6859      	ldr	r1, [r3, #4]
 8020106:	689a      	ldr	r2, [r3, #8]
 8020108:	68db      	ldr	r3, [r3, #12]
 802010a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802010c:	3410      	adds	r4, #16
 802010e:	3610      	adds	r6, #16
 8020110:	4564      	cmp	r4, ip
 8020112:	d1f4      	bne.n	80200fe <chirp_start+0xd6e>
 8020114:	4633      	mov	r3, r6
 8020116:	4622      	mov	r2, r4
 8020118:	6810      	ldr	r0, [r2, #0]
 802011a:	6851      	ldr	r1, [r2, #4]
 802011c:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 802011e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020122:	781b      	ldrb	r3, [r3, #0]
 8020124:	461a      	mov	r2, r3
 8020126:	4613      	mov	r3, r2
 8020128:	005b      	lsls	r3, r3, #1
 802012a:	4413      	add	r3, r2
 802012c:	019b      	lsls	r3, r3, #6
 802012e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8020132:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 8020136:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802013a:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 802013e:	220a      	movs	r2, #10
 8020140:	4618      	mov	r0, r3
 8020142:	f7fc fc9b 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 8020146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802014a:	781b      	ldrb	r3, [r3, #0]
 802014c:	461a      	mov	r2, r3
 802014e:	4613      	mov	r3, r2
 8020150:	005b      	lsls	r3, r3, #1
 8020152:	4413      	add	r3, r2
 8020154:	019b      	lsls	r3, r3, #6
 8020156:	461a      	mov	r2, r3
 8020158:	4b3a      	ldr	r3, [pc, #232]	; (8020244 <chirp_start+0xeb4>)
 802015a:	4413      	add	r3, r2
 802015c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020160:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8020164:	220a      	movs	r2, #10
 8020166:	4618      	mov	r0, r3
 8020168:	f7fc fc88 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 802016c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020170:	781b      	ldrb	r3, [r3, #0]
 8020172:	461a      	mov	r2, r3
 8020174:	4613      	mov	r3, r2
 8020176:	005b      	lsls	r3, r3, #1
 8020178:	4413      	add	r3, r2
 802017a:	019b      	lsls	r3, r3, #6
 802017c:	461a      	mov	r2, r3
 802017e:	4b32      	ldr	r3, [pc, #200]	; (8020248 <chirp_start+0xeb8>)
 8020180:	4413      	add	r3, r2
 8020182:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020186:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 802018a:	220a      	movs	r2, #10
 802018c:	4618      	mov	r0, r3
 802018e:	f7fc fc75 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8020192:	21f8      	movs	r1, #248	; 0xf8
 8020194:	2001      	movs	r0, #1
 8020196:	f7fc fbed 	bl	801c974 <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 802019a:	220a      	movs	r2, #10
 802019c:	492b      	ldr	r1, [pc, #172]	; (802024c <chirp_start+0xebc>)
 802019e:	482c      	ldr	r0, [pc, #176]	; (8020250 <chirp_start+0xec0>)
 80201a0:	f7fc fc6c 	bl	801ca7c <FLASH_If_Write>
        #endif

				#if GPS_DATA
          // gps_time = GPS_Get_Time();
          // time_t diff = GPS_Diff(&gps_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
          DS3231_GetTime();
 80201a4:	f7f9 f90e 	bl	80193c4 <DS3231_GetTime>
          ds3231_time = DS3231_ShowTime();
 80201a8:	f107 041c 	add.w	r4, r7, #28
 80201ac:	463b      	mov	r3, r7
 80201ae:	4618      	mov	r0, r3
 80201b0:	f7f9 f922 	bl	80193f8 <DS3231_ShowTime>
 80201b4:	463a      	mov	r2, r7
 80201b6:	4623      	mov	r3, r4
 80201b8:	6810      	ldr	r0, [r2, #0]
 80201ba:	6851      	ldr	r1, [r2, #4]
 80201bc:	c303      	stmia	r3!, {r0, r1}
          diff = GPS_Diff(&ds3231_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
 80201be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201c2:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 80201c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201c8:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 80201cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201d0:	f893 602b 	ldrb.w	r6, [r3, #43]	; 0x2b
 80201d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80201d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80201dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80201e0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80201e4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80201e8:	f891 102e 	ldrb.w	r1, [r1, #46]	; 0x2e
 80201ec:	f107 001c 	add.w	r0, r7, #28
 80201f0:	9102      	str	r1, [sp, #8]
 80201f2:	9201      	str	r2, [sp, #4]
 80201f4:	9300      	str	r3, [sp, #0]
 80201f6:	4633      	mov	r3, r6
 80201f8:	462a      	mov	r2, r5
 80201fa:	4621      	mov	r1, r4
 80201fc:	f7e9 ffe0 	bl	800a1c0 <GPS_Diff>
 8020200:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020204:	e9c3 0100 	strd	r0, r1, [r3]
          assert_reset(diff > 5);
 8020208:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 802020c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020210:	2b06      	cmp	r3, #6
 8020212:	f174 0300 	sbcs.w	r3, r4, #0
 8020216:	da2c      	bge.n	8020272 <chirp_start+0xee2>
 8020218:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 802021c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020220:	2b06      	cmp	r3, #6
 8020222:	f174 0300 	sbcs.w	r3, r4, #0
 8020226:	db15      	blt.n	8020254 <chirp_start+0xec4>
 8020228:	2301      	movs	r3, #1
 802022a:	e014      	b.n	8020256 <chirp_start+0xec6>
 802022c:	2000112c 	.word	0x2000112c
 8020230:	200012c8 	.word	0x200012c8
 8020234:	20001308 	.word	0x20001308
 8020238:	20000f10 	.word	0x20000f10
 802023c:	20000d00 	.word	0x20000d00
 8020240:	20000cc8 	.word	0x20000cc8
 8020244:	0807c840 	.word	0x0807c840
 8020248:	0807c880 	.word	0x0807c880
 802024c:	2000149c 	.word	0x2000149c
 8020250:	0807c000 	.word	0x0807c000
 8020254:	2300      	movs	r3, #0
 8020256:	4618      	mov	r0, r3
 8020258:	f002 f9f0 	bl	802263c <iprintf>
 802025c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8020260:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020264:	2b06      	cmp	r3, #6
 8020266:	f174 0300 	sbcs.w	r3, r4, #0
 802026a:	da02      	bge.n	8020272 <chirp_start+0xee2>
  __ASM volatile ("cpsid f" : : : "memory");
 802026c:	b671      	cpsid	f
 802026e:	f7fc fed3 	bl	801d018 <NVIC_SystemReset>
          if (((chirp_outl.version_hash == ((VERSION_MAJOR << 8) | (VERSION_NODE)))) && (chirp_outl.firmware_bitmap[node_id / 32] & (1 << (node_id % 32))))
 8020272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 802027a:	4619      	mov	r1, r3
 802027c:	4bd2      	ldr	r3, [pc, #840]	; (80205c8 <chirp_start+0x1238>)
 802027e:	781b      	ldrb	r3, [r3, #0]
 8020280:	021b      	lsls	r3, r3, #8
 8020282:	4ad2      	ldr	r2, [pc, #840]	; (80205cc <chirp_start+0x123c>)
 8020284:	7812      	ldrb	r2, [r2, #0]
 8020286:	4313      	orrs	r3, r2
 8020288:	4299      	cmp	r1, r3
 802028a:	f041 821d 	bne.w	80216c8 <chirp_start+0x2338>
 802028e:	f107 030f 	add.w	r3, r7, #15
 8020292:	781b      	ldrb	r3, [r3, #0]
 8020294:	095b      	lsrs	r3, r3, #5
 8020296:	b2db      	uxtb	r3, r3
 8020298:	461a      	mov	r2, r3
 802029a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802029e:	3206      	adds	r2, #6
 80202a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80202a4:	f107 020f 	add.w	r2, r7, #15
 80202a8:	7812      	ldrb	r2, [r2, #0]
 80202aa:	f002 021f 	and.w	r2, r2, #31
 80202ae:	2101      	movs	r1, #1
 80202b0:	fa01 f202 	lsl.w	r2, r1, r2
 80202b4:	4013      	ands	r3, r2
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	f001 8206 	beq.w	80216c8 <chirp_start+0x2338>
          {
            /* erase the user flash page */
            FLASH_If_Erase_Pages(0, 255);
 80202bc:	21ff      	movs	r1, #255	; 0xff
 80202be:	2000      	movs	r0, #0
 80202c0:	f7fc fb58 	bl	801c974 <FLASH_If_Erase_Pages>

            DS3231_GetTime();
 80202c4:	f7f9 f87e 	bl	80193c4 <DS3231_GetTime>
            /* Set alarm */
            TRACE_MSG("date:%lu, %lu, %lu, %lu\n", chirp_outl.end_date, chirp_outl.end_hour, chirp_outl.end_min, chirp_outl.end_sec);
 80202c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80202d0:	4619      	mov	r1, r3
 80202d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80202da:	461a      	mov	r2, r3
 80202dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80202e4:	4618      	mov	r0, r3
 80202e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80202ee:	9300      	str	r3, [sp, #0]
 80202f0:	4603      	mov	r3, r0
 80202f2:	48b7      	ldr	r0, [pc, #732]	; (80205d0 <chirp_start+0x1240>)
 80202f4:	f002 f9a2 	bl	802263c <iprintf>
 80202f8:	48b6      	ldr	r0, [pc, #728]	; (80205d4 <chirp_start+0x1244>)
 80202fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80202fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8020302:	461c      	mov	r4, r3
 8020304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020308:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 802030c:	461a      	mov	r2, r3
 802030e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020316:	4619      	mov	r1, r3
 8020318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802031c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020320:	9302      	str	r3, [sp, #8]
 8020322:	9101      	str	r1, [sp, #4]
 8020324:	9200      	str	r2, [sp, #0]
 8020326:	4623      	mov	r3, r4
 8020328:	4aa9      	ldr	r2, [pc, #676]	; (80205d0 <chirp_start+0x1240>)
 802032a:	f240 610f 	movw	r1, #1551	; 0x60f
 802032e:	f001 fa2f 	bl	8021790 <trace_store_msg>
 8020332:	f001 faaf 	bl	8021894 <trace_to_flash>
            ds3231_time = DS3231_ShowTime();
 8020336:	f107 041c 	add.w	r4, r7, #28
 802033a:	463b      	mov	r3, r7
 802033c:	4618      	mov	r0, r3
 802033e:	f7f9 f85b 	bl	80193f8 <DS3231_ShowTime>
 8020342:	463a      	mov	r2, r7
 8020344:	4623      	mov	r3, r4
 8020346:	6810      	ldr	r0, [r2, #0]
 8020348:	6851      	ldr	r1, [r2, #4]
 802034a:	c303      	stmia	r3!, {r0, r1}
            DS3231_SetAlarm1_Time(chirp_outl.end_date, chirp_outl.end_hour, chirp_outl.end_min, chirp_outl.end_sec);
 802034c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020350:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
 8020354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020358:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
 802035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020360:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8020364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802036c:	f7f9 f9b2 	bl	80196d4 <DS3231_SetAlarm1_Time>
            /* Waiting for bank switch */
            // GPS_Waiting(chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
            diff = GPS_Diff(&ds3231_time, chirp_outl.start_year, chirp_outl.start_month, chirp_outl.start_date, chirp_outl.start_hour, chirp_outl.start_min, chirp_outl.start_sec);
 8020370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020374:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 8020376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802037a:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 802037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020382:	f893 602b 	ldrb.w	r6, [r3, #43]	; 0x2b
 8020386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802038a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802038e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020392:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8020396:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802039a:	f891 102e 	ldrb.w	r1, [r1, #46]	; 0x2e
 802039e:	f107 001c 	add.w	r0, r7, #28
 80203a2:	9102      	str	r1, [sp, #8]
 80203a4:	9201      	str	r2, [sp, #4]
 80203a6:	9300      	str	r3, [sp, #0]
 80203a8:	4633      	mov	r3, r6
 80203aa:	462a      	mov	r2, r5
 80203ac:	4621      	mov	r1, r4
 80203ae:	f7e9 ff07 	bl	800a1c0 <GPS_Diff>
 80203b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80203b6:	e9c3 0100 	strd	r0, r1, [r3]
            RTC_Waiting_Count(diff);
 80203ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80203be:	4618      	mov	r0, r3
 80203c0:	f7ea fac0 	bl	800a944 <RTC_Waiting_Count>
            TRACE_MSG("---------CHIRP_BANK---------\n");
 80203c4:	4884      	ldr	r0, [pc, #528]	; (80205d8 <chirp_start+0x1248>)
 80203c6:	f002 f9c1 	bl	802274c <puts>
 80203ca:	4b82      	ldr	r3, [pc, #520]	; (80205d4 <chirp_start+0x1244>)
 80203cc:	4a83      	ldr	r2, [pc, #524]	; (80205dc <chirp_start+0x124c>)
 80203ce:	f240 6116 	movw	r1, #1558	; 0x616
 80203d2:	4618      	mov	r0, r3
 80203d4:	f001 f9dc 	bl	8021790 <trace_store_msg>
 80203d8:	f001 fa5c 	bl	8021894 <trace_to_flash>
            #if BANK_1_RUN
            /* flash protect */
            if (chirp_outl.flash_protection)
 80203dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80203e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80203e4:	2b00      	cmp	r3, #0
 80203e6:	d004      	beq.n	80203f2 <chirp_start+0x1062>
              Bank1_WRP(0, 255);
 80203e8:	21ff      	movs	r1, #255	; 0xff
 80203ea:	2000      	movs	r0, #0
 80203ec:	f7f9 ff0a 	bl	801a204 <Bank1_WRP>
 80203f0:	e001      	b.n	80203f6 <chirp_start+0x1066>
            else
              Bank1_nWRP();
 80203f2:	f7f9 ff3b 	bl	801a26c <Bank1_nWRP>
            #endif
            /* switch to bank2 */
            STMFLASH_BankSwitch();
 80203f6:	f7fc fd71 	bl	801cedc <STMFLASH_BankSwitch>
          }
				#endif
				break;
 80203fa:	f001 b965 	b.w	80216c8 <chirp_start+0x2338>
			}
			case MX_DISSEMINATE:
			{
        if ((chirp_outl.task_bitmap[node_id / 32] & (1 << (node_id % 32))))
 80203fe:	f107 030f 	add.w	r3, r7, #15
 8020402:	781b      	ldrb	r3, [r3, #0]
 8020404:	095b      	lsrs	r3, r3, #5
 8020406:	b2db      	uxtb	r3, r3
 8020408:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802040c:	3306      	adds	r3, #6
 802040e:	009b      	lsls	r3, r3, #2
 8020410:	4413      	add	r3, r2
 8020412:	685b      	ldr	r3, [r3, #4]
 8020414:	f107 020f 	add.w	r2, r7, #15
 8020418:	7812      	ldrb	r2, [r2, #0]
 802041a:	f002 021f 	and.w	r2, r2, #31
 802041e:	2101      	movs	r1, #1
 8020420:	fa01 f202 	lsl.w	r2, r1, r2
 8020424:	4013      	ands	r3, r2
 8020426:	2b00      	cmp	r3, #0
 8020428:	f001 8151 	beq.w	80216ce <chirp_start+0x233e>
        {
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 802042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020430:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8020434:	b2d8      	uxtb	r0, r3
 8020436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802043a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 802043e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020442:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8020446:	9201      	str	r2, [sp, #4]
 8020448:	9300      	str	r3, [sp, #0]
 802044a:	2308      	movs	r3, #8
 802044c:	2201      	movs	r2, #1
 802044e:	2107      	movs	r1, #7
 8020450:	f7f2 fdee 	bl	8013030 <chirp_radio_config>
        chirp_outl.disem_file_index = 0;
 8020454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020458:	2200      	movs	r2, #0
 802045a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
        chirp_outl.disem_file_max = UINT16_MAX / 2;
 802045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020462:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        chirp_outl.disem_file_index_stay = 0;
 802046a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802046e:	2200      	movs	r2, #0
 8020470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        chirp_outl.version_hash = 0;
 8020474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020478:	2200      	movs	r2, #0
 802047a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        memset(chirp_outl.firmware_md5, 0, sizeof(chirp_outl.firmware_md5));
 802047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020482:	3340      	adds	r3, #64	; 0x40
 8020484:	2210      	movs	r2, #16
 8020486:	2100      	movs	r1, #0
 8020488:	4618      	mov	r0, r3
 802048a:	f001 faca 	bl	8021a22 <memset>
				TRACE_MSG("---------MX_DISSEMINATE---------\n");
 802048e:	4854      	ldr	r0, [pc, #336]	; (80205e0 <chirp_start+0x1250>)
 8020490:	f002 f95c 	bl	802274c <puts>
 8020494:	4b4f      	ldr	r3, [pc, #316]	; (80205d4 <chirp_start+0x1244>)
 8020496:	4a53      	ldr	r2, [pc, #332]	; (80205e4 <chirp_start+0x1254>)
 8020498:	f240 612e 	movw	r1, #1582	; 0x62e
 802049c:	4618      	mov	r0, r3
 802049e:	f001 f977 	bl	8021790 <trace_store_msg>
 80204a2:	f001 f9f7 	bl	8021894 <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = task_node_num;
 80204a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80204aa:	b2da      	uxtb	r2, r3
 80204ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.default_generate_size;
 80204b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204b8:	7dda      	ldrb	r2, [r3, #23]
 80204ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 80204c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204c6:	7d9a      	ldrb	r2, [r3, #22]
 80204c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        assert_reset(chirp_outl.payload_len > DATA_HEADER_LENGTH + 28);
 80204d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80204d8:	2b24      	cmp	r3, #36	; 0x24
 80204da:	d814      	bhi.n	8020506 <chirp_start+0x1176>
 80204dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80204e4:	2b24      	cmp	r3, #36	; 0x24
 80204e6:	d901      	bls.n	80204ec <chirp_start+0x115c>
 80204e8:	2301      	movs	r3, #1
 80204ea:	e000      	b.n	80204ee <chirp_start+0x115e>
 80204ec:	2300      	movs	r3, #0
 80204ee:	4618      	mov	r0, r3
 80204f0:	f002 f8a4 	bl	802263c <iprintf>
 80204f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80204f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80204fc:	2b24      	cmp	r3, #36	; 0x24
 80204fe:	d802      	bhi.n	8020506 <chirp_start+0x1176>
 8020500:	b671      	cpsid	f
 8020502:	f7fc fd89 	bl	801d018 <NVIC_SystemReset>
				assert_reset(!((chirp_outl.payload_len - DATA_HEADER_LENGTH) % sizeof(uint64_t)));
 8020506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802050a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802050e:	f003 0307 	and.w	r3, r3, #7
 8020512:	2b00      	cmp	r3, #0
 8020514:	d018      	beq.n	8020548 <chirp_start+0x11b8>
 8020516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802051a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802051e:	f003 0307 	and.w	r3, r3, #7
 8020522:	2b00      	cmp	r3, #0
 8020524:	d101      	bne.n	802052a <chirp_start+0x119a>
 8020526:	2301      	movs	r3, #1
 8020528:	e000      	b.n	802052c <chirp_start+0x119c>
 802052a:	2300      	movs	r3, #0
 802052c:	4618      	mov	r0, r3
 802052e:	f002 f885 	bl	802263c <iprintf>
 8020532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802053a:	f003 0307 	and.w	r3, r3, #7
 802053e:	2b00      	cmp	r3, #0
 8020540:	d002      	beq.n	8020548 <chirp_start+0x11b8>
 8020542:	b671      	cpsid	f
 8020544:	f7fc fd68 	bl	801d018 <NVIC_SystemReset>
				chirp_outl.round_setup = 1;
 8020548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802054c:	2201      	movs	r2, #1
 802054e:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = UINT16_MAX;
 8020550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020554:	f04f 32ff 	mov.w	r2, #4294967295
 8020558:	70da      	strb	r2, [r3, #3]
 802055a:	f04f 32ff 	mov.w	r2, #4294967295
 802055e:	711a      	strb	r2, [r3, #4]
				chirp_outl.file_chunk_len = chirp_outl.generation_size * (chirp_outl.payload_len - DATA_HEADER_LENGTH);
 8020560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020568:	b29a      	uxth	r2, r3
 802056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802056e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020572:	3b08      	subs	r3, #8
 8020574:	b29b      	uxth	r3, r3
 8020576:	fb12 f303 	smulbb	r3, r2, r3
 802057a:	b29a      	uxth	r2, r3
 802057c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020580:	875a      	strh	r2, [r3, #58]	; 0x3a
        chirp_outl.disem_file_memory = (uint32_t *)malloc(chirp_outl.file_chunk_len);
 8020582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020586:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020588:	4618      	mov	r0, r3
 802058a:	f001 fa2f 	bl	80219ec <malloc>
 802058e:	4603      	mov	r3, r0
 8020590:	461a      	mov	r2, r3
 8020592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020596:	f8c3 2065 	str.w	r2, [r3, #101]	; 0x65
        if (!node_id)
 802059a:	f107 030f 	add.w	r3, r7, #15
 802059e:	781b      	ldrb	r3, [r3, #0]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	f040 809e 	bne.w	80206e2 <chirp_start+0x1352>
				{
					chirp_controller_read_command(&chirp_outl);
 80205a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205aa:	4618      	mov	r0, r3
 80205ac:	f7fd fd20 	bl	801dff0 <chirp_controller_read_command>
					uint32_t flash_length;
					if (!chirp_outl.patch_update)
 80205b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	d115      	bne.n	80205e8 <chirp_start+0x1258>
						flash_length = menu_initiator_read_file();
 80205bc:	f7fd fa61 	bl	801da82 <menu_initiator_read_file>
 80205c0:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 80205c4:	e033      	b.n	802062e <chirp_start+0x129e>
 80205c6:	bf00      	nop
 80205c8:	08026d7c 	.word	0x08026d7c
 80205cc:	08026d7d 	.word	0x08026d7d
 80205d0:	08026b80 	.word	0x08026b80
 80205d4:	08026b59 	.word	0x08026b59
 80205d8:	08026b9c 	.word	0x08026b9c
 80205dc:	08026bbc 	.word	0x08026bbc
 80205e0:	08026bdc 	.word	0x08026bdc
 80205e4:	08026c00 	.word	0x08026c00
					else
					{
						/* patch bank1, means update self firmware */
						chirp_outl.patch_page = menu_pre_patch(chirp_outl.patch_bank, chirp_outl.old_firmware_size, chirp_outl.firmware_size);
 80205e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205ec:	f893 0057 	ldrb.w	r0, [r3, #87]	; 0x57
 80205f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205f4:	f8d3 1059 	ldr.w	r1, [r3, #89]	; 0x59
 80205f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80205fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80205fe:	461a      	mov	r2, r3
 8020600:	f7fd f9fe 	bl	801da00 <menu_pre_patch>
 8020604:	4603      	mov	r3, r0
 8020606:	461a      	mov	r2, r3
 8020608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802060c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
						flash_length = menu_serialDownload(chirp_outl.patch_page, chirp_outl.patch_bank);
 8020610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020614:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8020618:	461a      	mov	r2, r3
 802061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802061e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8020622:	4619      	mov	r1, r3
 8020624:	4610      	mov	r0, r2
 8020626:	f7fd f851 	bl	801d6cc <menu_serialDownload>
 802062a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
					}
					chirp_outl.firmware_size = flash_length;
 802062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020632:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8020636:	63da      	str	r2, [r3, #60]	; 0x3c
					uint32_t firmware_size[1];
					firmware_size[0] = chirp_outl.firmware_size;
 8020638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802063c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802063e:	f107 0310 	add.w	r3, r7, #16
 8020642:	601a      	str	r2, [r3, #0]
          FLASH_If_Erase_Pages(0, 253);
 8020644:	21fd      	movs	r1, #253	; 0xfd
 8020646:	2000      	movs	r0, #0
 8020648:	f7fc f994 	bl	801c974 <FLASH_If_Erase_Pages>
					FLASH_If_Write(FIRMWARE_FLASH_ADDRESS_2, (uint32_t *)firmware_size, 2);
 802064c:	f107 0310 	add.w	r3, r7, #16
 8020650:	2202      	movs	r2, #2
 8020652:	4619      	mov	r1, r3
 8020654:	48d0      	ldr	r0, [pc, #832]	; (8020998 <chirp_start+0x1608>)
 8020656:	f7fc fa11 	bl	801ca7c <FLASH_If_Write>

          chirp_outl.disem_file_max = (chirp_outl.firmware_size + chirp_outl.file_chunk_len - 1) / chirp_outl.file_chunk_len + 1;
 802065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802065e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020660:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020664:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8020666:	4413      	add	r3, r2
 8020668:	3b01      	subs	r3, #1
 802066a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802066e:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8020670:	fbb3 f3f2 	udiv	r3, r3, r2
 8020674:	b29b      	uxth	r3, r3
 8020676:	3301      	adds	r3, #1
 8020678:	b29a      	uxth	r2, r3
 802067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802067e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					TRACE_MSG("file size:%lu, %lu, %lu, %lu\n", flash_length, chirp_outl.disem_file_max, chirp_outl.file_chunk_len, chirp_outl.payload_len - DATA_HEADER_LENGTH );
 8020682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 802068a:	461a      	mov	r2, r3
 802068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020690:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020692:	4619      	mov	r1, r3
 8020694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802069c:	3b08      	subs	r3, #8
 802069e:	9300      	str	r3, [sp, #0]
 80206a0:	460b      	mov	r3, r1
 80206a2:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80206a6:	48bd      	ldr	r0, [pc, #756]	; (802099c <chirp_start+0x160c>)
 80206a8:	f001 ffc8 	bl	802263c <iprintf>
 80206ac:	48bc      	ldr	r0, [pc, #752]	; (80209a0 <chirp_start+0x1610>)
 80206ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80206b6:	461a      	mov	r2, r3
 80206b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80206be:	4619      	mov	r1, r3
 80206c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80206c8:	3b08      	subs	r3, #8
 80206ca:	9302      	str	r3, [sp, #8]
 80206cc:	9101      	str	r1, [sp, #4]
 80206ce:	9200      	str	r2, [sp, #0]
 80206d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80206d4:	4ab1      	ldr	r2, [pc, #708]	; (802099c <chirp_start+0x160c>)
 80206d6:	f240 614c 	movw	r1, #1612	; 0x64c
 80206da:	f001 f859 	bl	8021790 <trace_store_msg>
 80206de:	f001 f8d9 	bl	8021894 <trace_to_flash>
				}
        chirp_outl.disem_flag = 1;
 80206e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206e6:	2201      	movs	r2, #1
 80206e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len + HASH_TAIL, DISSEMINATION);
 80206ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206f0:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 80206f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80206f8:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80206fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020704:	3302      	adds	r3, #2
 8020706:	b2da      	uxtb	r2, r3
 8020708:	2302      	movs	r3, #2
 802070a:	f7f2 fa1d 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 802070e:	4ba5      	ldr	r3, [pc, #660]	; (80209a4 <chirp_start+0x1614>)
 8020710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020714:	4618      	mov	r0, r3
 8020716:	4ba3      	ldr	r3, [pc, #652]	; (80209a4 <chirp_start+0x1614>)
 8020718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802071c:	4619      	mov	r1, r3
 802071e:	4ba1      	ldr	r3, [pc, #644]	; (80209a4 <chirp_start+0x1614>)
 8020720:	8a5b      	ldrh	r3, [r3, #18]
 8020722:	b29b      	uxth	r3, r3
 8020724:	3302      	adds	r3, #2
 8020726:	9301      	str	r3, [sp, #4]
 8020728:	2308      	movs	r3, #8
 802072a:	9300      	str	r3, [sp, #0]
 802072c:	2300      	movs	r3, #0
 802072e:	2201      	movs	r2, #1
 8020730:	f7ec fc70 	bl	800d014 <SX1276GetPacketTime>
 8020734:	4603      	mov	r3, r0
 8020736:	461a      	mov	r2, r3
 8020738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802073c:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 2000000);
 8020740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020744:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8020748:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 802074c:	33a0      	adds	r3, #160	; 0xa0
 802074e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020752:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8020756:	b291      	uxth	r1, r2
 8020758:	4a93      	ldr	r2, [pc, #588]	; (80209a8 <chirp_start+0x1618>)
 802075a:	4618      	mov	r0, r3
 802075c:	f7f2 fbfc 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8020760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020764:	781b      	ldrb	r3, [r3, #0]
 8020766:	4618      	mov	r0, r3
 8020768:	f7f2 fcc2 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 802076c:	bf00      	nop
 802076e:	4b8f      	ldr	r3, [pc, #572]	; (80209ac <chirp_start+0x161c>)
 8020770:	681b      	ldr	r3, [r3, #0]
 8020772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020774:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8020778:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 802077c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8020780:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8020784:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8020788:	1ad3      	subs	r3, r2, r3
 802078a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802078e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8020792:	2b00      	cmp	r3, #0
 8020794:	db07      	blt.n	80207a6 <chirp_start+0x1416>
 8020796:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 802079a:	2b00      	cmp	r3, #0
 802079c:	bf14      	ite	ne
 802079e:	2301      	movne	r3, #1
 80207a0:	2300      	moveq	r3, #0
 80207a2:	b2db      	uxtb	r3, r3
 80207a4:	e001      	b.n	80207aa <chirp_start+0x141a>
 80207a6:	f04f 33ff 	mov.w	r3, #4294967295
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	dbdf      	blt.n	802076e <chirp_start+0x13de>
				// chirp_round(node_id, &chirp_outl);
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80207ae:	4b80      	ldr	r3, [pc, #512]	; (80209b0 <chirp_start+0x1620>)
 80207b0:	79db      	ldrb	r3, [r3, #7]
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d00d      	beq.n	80207d2 <chirp_start+0x1442>
 80207b6:	4b7d      	ldr	r3, [pc, #500]	; (80209ac <chirp_start+0x161c>)
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80207bc:	4b7d      	ldr	r3, [pc, #500]	; (80209b4 <chirp_start+0x1624>)
 80207be:	69db      	ldr	r3, [r3, #28]
 80207c0:	1ad2      	subs	r2, r2, r3
 80207c2:	4b7d      	ldr	r3, [pc, #500]	; (80209b8 <chirp_start+0x1628>)
 80207c4:	69db      	ldr	r3, [r3, #28]
 80207c6:	4413      	add	r3, r2
 80207c8:	4a7b      	ldr	r2, [pc, #492]	; (80209b8 <chirp_start+0x1628>)
 80207ca:	61d3      	str	r3, [r2, #28]
 80207cc:	4b78      	ldr	r3, [pc, #480]	; (80209b0 <chirp_start+0x1620>)
 80207ce:	2200      	movs	r2, #0
 80207d0:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 80207d2:	2007      	movs	r0, #7
 80207d4:	f7ed fd30 	bl	800e238 <energest_type_time>
 80207d8:	4603      	mov	r3, r0
 80207da:	4619      	mov	r1, r3
 80207dc:	2007      	movs	r0, #7
 80207de:	f7ea f9bb 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 80207e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80207e6:	4a75      	ldr	r2, [pc, #468]	; (80209bc <chirp_start+0x162c>)
 80207e8:	4614      	mov	r4, r2
 80207ea:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 80207ee:	f104 0c20 	add.w	ip, r4, #32
 80207f2:	4635      	mov	r5, r6
 80207f4:	4623      	mov	r3, r4
 80207f6:	6818      	ldr	r0, [r3, #0]
 80207f8:	6859      	ldr	r1, [r3, #4]
 80207fa:	689a      	ldr	r2, [r3, #8]
 80207fc:	68db      	ldr	r3, [r3, #12]
 80207fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020800:	3410      	adds	r4, #16
 8020802:	3610      	adds	r6, #16
 8020804:	4564      	cmp	r4, ip
 8020806:	d1f4      	bne.n	80207f2 <chirp_start+0x1462>
 8020808:	4633      	mov	r3, r6
 802080a:	4622      	mov	r2, r4
 802080c:	6810      	ldr	r0, [r2, #0]
 802080e:	6851      	ldr	r1, [r2, #4]
 8020810:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020812:	2228      	movs	r2, #40	; 0x28
 8020814:	2100      	movs	r1, #0
 8020816:	4869      	ldr	r0, [pc, #420]	; (80209bc <chirp_start+0x162c>)
 8020818:	f001 f903 	bl	8021a22 <memset>
        #endif
        if (!chirp_round(task_node_id, &chirp_outl))
 802081c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020820:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8020824:	4611      	mov	r1, r2
 8020826:	4618      	mov	r0, r3
 8020828:	f7f4 fb20 	bl	8014e6c <chirp_round>
 802082c:	4603      	mov	r3, r0
 802082e:	2b00      	cmp	r3, #0
 8020830:	d109      	bne.n	8020846 <chirp_start+0x14b6>
        {
          free(payload_distribution);
 8020832:	4b63      	ldr	r3, [pc, #396]	; (80209c0 <chirp_start+0x1630>)
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	4618      	mov	r0, r3
 8020838:	f001 f8e0 	bl	80219fc <free>
          FLASH_If_Erase(0);
 802083c:	2000      	movs	r0, #0
 802083e:	f7fc f827 	bl	801c890 <FLASH_If_Erase>
          break;
 8020842:	f000 bf45 	b.w	80216d0 <chirp_start+0x2340>
        }
				free(payload_distribution);
 8020846:	4b5e      	ldr	r3, [pc, #376]	; (80209c0 <chirp_start+0x1630>)
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	4618      	mov	r0, r3
 802084c:	f001 f8d6 	bl	80219fc <free>
        free(chirp_outl.disem_file_memory);
 8020850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020854:	f8d3 3065 	ldr.w	r3, [r3, #101]	; 0x65
 8020858:	4618      	mov	r0, r3
 802085a:	f001 f8cf 	bl	80219fc <free>
        if(!FirmwareUpgrade(chirp_outl.patch_update, chirp_outl.patch_bank, 0, chirp_outl.old_firmware_size, chirp_outl.patch_bank, chirp_outl.patch_page, chirp_outl.firmware_size, chirp_outl.firmware_md5, chirp_outl.file_compression));
 802085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020862:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8020866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802086a:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 802086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020872:	f8d3 5059 	ldr.w	r5, [r3, #89]	; 0x59
 8020876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802087a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 802087e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020882:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8020886:	4616      	mov	r6, r2
 8020888:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802088c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802088e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020892:	f8d1 1052 	ldr.w	r1, [r1, #82]	; 0x52
 8020896:	b2c9      	uxtb	r1, r1
 8020898:	9104      	str	r1, [sp, #16]
 802089a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802089e:	3140      	adds	r1, #64	; 0x40
 80208a0:	9103      	str	r1, [sp, #12]
 80208a2:	9202      	str	r2, [sp, #8]
 80208a4:	9601      	str	r6, [sp, #4]
 80208a6:	9300      	str	r3, [sp, #0]
 80208a8:	462b      	mov	r3, r5
 80208aa:	2200      	movs	r2, #0
 80208ac:	4621      	mov	r1, r4
 80208ae:	f7f9 fea5 	bl	801a5fc <FirmwareUpgrade>
          break;
 80208b2:	f000 bf0d 	b.w	80216d0 <chirp_start+0x2340>
        }
				break;
			}
			case MX_COLLECT:
			{
        if ((chirp_outl.task_bitmap[node_id / 32] & (1 << (node_id % 32))))
 80208b6:	f107 030f 	add.w	r3, r7, #15
 80208ba:	781b      	ldrb	r3, [r3, #0]
 80208bc:	095b      	lsrs	r3, r3, #5
 80208be:	b2db      	uxtb	r3, r3
 80208c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80208c4:	3306      	adds	r3, #6
 80208c6:	009b      	lsls	r3, r3, #2
 80208c8:	4413      	add	r3, r2
 80208ca:	685b      	ldr	r3, [r3, #4]
 80208cc:	f107 020f 	add.w	r2, r7, #15
 80208d0:	7812      	ldrb	r2, [r2, #0]
 80208d2:	f002 021f 	and.w	r2, r2, #31
 80208d6:	2101      	movs	r1, #1
 80208d8:	fa01 f202 	lsl.w	r2, r1, r2
 80208dc:	4013      	ands	r3, r2
 80208de:	2b00      	cmp	r3, #0
 80208e0:	f000 8196 	beq.w	8020c10 <chirp_start+0x1880>
        {
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 80208e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80208e8:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80208ec:	b2d8      	uxtb	r0, r3
 80208ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80208f2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80208f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80208fa:	f8d2 2011 	ldr.w	r2, [r2, #17]
 80208fe:	9201      	str	r2, [sp, #4]
 8020900:	9300      	str	r3, [sp, #0]
 8020902:	2308      	movs	r3, #8
 8020904:	2201      	movs	r2, #1
 8020906:	2107      	movs	r1, #7
 8020908:	f7f2 fb92 	bl	8013030 <chirp_radio_config>

				TRACE_MSG("---------MX_COLLECT---------\n");
 802090c:	482d      	ldr	r0, [pc, #180]	; (80209c4 <chirp_start+0x1634>)
 802090e:	f001 ff1d 	bl	802274c <puts>
 8020912:	4b23      	ldr	r3, [pc, #140]	; (80209a0 <chirp_start+0x1610>)
 8020914:	4a2c      	ldr	r2, [pc, #176]	; (80209c8 <chirp_start+0x1638>)
 8020916:	f240 617f 	movw	r1, #1663	; 0x67f
 802091a:	4618      	mov	r0, r3
 802091c:	f000 ff38 	bl	8021790 <trace_store_msg>
 8020920:	f000 ffb8 	bl	8021894 <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = task_node_num;
 8020924:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8020928:	b2da      	uxtb	r2, r3
 802092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802092e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 8020932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020936:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 802093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802093e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 8020942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020946:	7d9a      	ldrb	r2, [r3, #22]
 8020948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802094c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_max = UINT16_MAX;
 8020950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020954:	f04f 32ff 	mov.w	r2, #4294967295
 8020958:	70da      	strb	r2, [r3, #3]
 802095a:	f04f 32ff 	mov.w	r2, #4294967295
 802095e:	711a      	strb	r2, [r3, #4]
				chirp_outl.round_setup = 1;
 8020960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020964:	2201      	movs	r2, #1
 8020966:	715a      	strb	r2, [r3, #5]
				chirp_outl.file_chunk_len = chirp_outl.payload_len - DATA_HEADER_LENGTH;
 8020968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802096c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020970:	b29b      	uxth	r3, r3
 8020972:	3b08      	subs	r3, #8
 8020974:	b29a      	uxth	r2, r3
 8020976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802097a:	875a      	strh	r2, [r3, #58]	; 0x3a
        assert_reset(chirp_outl.payload_len > DATA_HEADER_LENGTH + 8);
 802097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020984:	2b10      	cmp	r3, #16
 8020986:	d82e      	bhi.n	80209e6 <chirp_start+0x1656>
 8020988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802098c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020990:	2b10      	cmp	r3, #16
 8020992:	d91b      	bls.n	80209cc <chirp_start+0x163c>
 8020994:	2301      	movs	r3, #1
 8020996:	e01a      	b.n	80209ce <chirp_start+0x163e>
 8020998:	080fe800 	.word	0x080fe800
 802099c:	08026c24 	.word	0x08026c24
 80209a0:	08026b59 	.word	0x08026b59
 80209a4:	20001430 	.word	0x20001430
 80209a8:	001e8480 	.word	0x001e8480
 80209ac:	200012c8 	.word	0x200012c8
 80209b0:	2000112c 	.word	0x2000112c
 80209b4:	20001308 	.word	0x20001308
 80209b8:	20000f10 	.word	0x20000f10
 80209bc:	20000d00 	.word	0x20000d00
 80209c0:	20000cc8 	.word	0x20000cc8
 80209c4:	08026c44 	.word	0x08026c44
 80209c8:	08026c64 	.word	0x08026c64
 80209cc:	2300      	movs	r3, #0
 80209ce:	4618      	mov	r0, r3
 80209d0:	f001 fe34 	bl	802263c <iprintf>
 80209d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80209dc:	2b10      	cmp	r3, #16
 80209de:	d802      	bhi.n	80209e6 <chirp_start+0x1656>
 80209e0:	b671      	cpsid	f
 80209e2:	f7fc fb19 	bl	801d018 <NVIC_SystemReset>
				assert_reset(!(chirp_outl.file_chunk_len % sizeof(uint64_t)));
 80209e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80209ec:	f003 0307 	and.w	r3, r3, #7
 80209f0:	b29b      	uxth	r3, r3
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d018      	beq.n	8020a28 <chirp_start+0x1698>
 80209f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80209fc:	f003 0307 	and.w	r3, r3, #7
 8020a00:	b29b      	uxth	r3, r3
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d101      	bne.n	8020a0a <chirp_start+0x167a>
 8020a06:	2301      	movs	r3, #1
 8020a08:	e000      	b.n	8020a0c <chirp_start+0x167c>
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	4618      	mov	r0, r3
 8020a0e:	f001 fe15 	bl	802263c <iprintf>
 8020a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a16:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8020a18:	f003 0307 	and.w	r3, r3, #7
 8020a1c:	b29b      	uxth	r3, r3
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d002      	beq.n	8020a28 <chirp_start+0x1698>
 8020a22:	b671      	cpsid	f
 8020a24:	f7fc faf8 	bl	801d018 <NVIC_SystemReset>
				if (!node_id)
 8020a28:	f107 030f 	add.w	r3, r7, #15
 8020a2c:	781b      	ldrb	r3, [r3, #0]
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d136      	bne.n	8020aa0 <chirp_start+0x1710>
				{
					chirp_controller_read_command(&chirp_outl);
 8020a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a36:	4618      	mov	r0, r3
 8020a38:	f7fd fada 	bl	801dff0 <chirp_controller_read_command>
					chirp_outl.collect_length = ((chirp_outl.collect_addr_end - chirp_outl.collect_addr_start + sizeof(uint64_t) - 1) / sizeof(uint64_t)) * sizeof(uint64_t);
 8020a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a40:	f8d3 206d 	ldr.w	r2, [r3, #109]	; 0x6d
 8020a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a48:	f8d3 3069 	ldr.w	r3, [r3, #105]	; 0x69
 8020a4c:	1ad3      	subs	r3, r2, r3
 8020a4e:	3307      	adds	r3, #7
 8020a50:	f023 0207 	bic.w	r2, r3, #7
 8020a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a58:	f8c3 2071 	str.w	r2, [r3, #113]	; 0x71
					chirp_outl.round_max = chirp_outl.round_setup + (chirp_outl.collect_length + chirp_outl.file_chunk_len - 1) / chirp_outl.file_chunk_len;
 8020a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a60:	795b      	ldrb	r3, [r3, #5]
 8020a62:	b29a      	uxth	r2, r3
 8020a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a68:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8020a6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020a70:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8020a72:	440b      	add	r3, r1
 8020a74:	3b01      	subs	r3, #1
 8020a76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8020a7a:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8020a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a80:	b29b      	uxth	r3, r3
 8020a82:	4413      	add	r3, r2
 8020a84:	b29a      	uxth	r2, r3
 8020a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a8a:	f8a3 2003 	strh.w	r2, [r3, #3]
					PRINTF("set:%lu\n", chirp_outl.round_max);
 8020a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a92:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8020a96:	b29b      	uxth	r3, r3
 8020a98:	4619      	mov	r1, r3
 8020a9a:	4899      	ldr	r0, [pc, #612]	; (8020d00 <chirp_start+0x1970>)
 8020a9c:	f001 fdce 	bl	802263c <iprintf>
				}
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 8020aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020aa4:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8020aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020aac:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8020ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ab4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020ab8:	3302      	adds	r3, #2
 8020aba:	b2da      	uxtb	r2, r3
 8020abc:	2303      	movs	r3, #3
 8020abe:	f7f2 f843 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020ac2:	4b90      	ldr	r3, [pc, #576]	; (8020d04 <chirp_start+0x1974>)
 8020ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020ac8:	4618      	mov	r0, r3
 8020aca:	4b8e      	ldr	r3, [pc, #568]	; (8020d04 <chirp_start+0x1974>)
 8020acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020ad0:	4619      	mov	r1, r3
 8020ad2:	4b8c      	ldr	r3, [pc, #560]	; (8020d04 <chirp_start+0x1974>)
 8020ad4:	8a5b      	ldrh	r3, [r3, #18]
 8020ad6:	b29b      	uxth	r3, r3
 8020ad8:	3302      	adds	r3, #2
 8020ada:	9301      	str	r3, [sp, #4]
 8020adc:	2308      	movs	r3, #8
 8020ade:	9300      	str	r3, [sp, #0]
 8020ae0:	2300      	movs	r3, #0
 8020ae2:	2201      	movs	r2, #1
 8020ae4:	f7ec fa96 	bl	800d014 <SX1276GetPacketTime>
 8020ae8:	4603      	mov	r3, r0
 8020aea:	461a      	mov	r2, r3
 8020aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020af0:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 8020af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020af8:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8020afc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8020b00:	33a0      	adds	r3, #160	; 0xa0
 8020b02:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020b06:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8020b0a:	b291      	uxth	r1, r2
 8020b0c:	4a7e      	ldr	r2, [pc, #504]	; (8020d08 <chirp_start+0x1978>)
 8020b0e:	4618      	mov	r0, r3
 8020b10:	f7f2 fa22 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8020b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b18:	781b      	ldrb	r3, [r3, #0]
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	f7f2 fae8 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 8020b20:	bf00      	nop
 8020b22:	4b7a      	ldr	r3, [pc, #488]	; (8020d0c <chirp_start+0x197c>)
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8020b2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8020b34:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8020b38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8020b3c:	1ad3      	subs	r3, r2, r3
 8020b3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8020b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020b46:	2b00      	cmp	r3, #0
 8020b48:	db07      	blt.n	8020b5a <chirp_start+0x17ca>
 8020b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	bf14      	ite	ne
 8020b52:	2301      	movne	r3, #1
 8020b54:	2300      	moveq	r3, #0
 8020b56:	b2db      	uxtb	r3, r3
 8020b58:	e001      	b.n	8020b5e <chirp_start+0x17ce>
 8020b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	dbdf      	blt.n	8020b22 <chirp_start+0x1792>
        PRINTF("set88:%lu\n", chirp_outl.round_max);
 8020b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020b66:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8020b6a:	b29b      	uxth	r3, r3
 8020b6c:	4619      	mov	r1, r3
 8020b6e:	4868      	ldr	r0, [pc, #416]	; (8020d10 <chirp_start+0x1980>)
 8020b70:	f001 fd64 	bl	802263c <iprintf>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020b74:	4b67      	ldr	r3, [pc, #412]	; (8020d14 <chirp_start+0x1984>)
 8020b76:	79db      	ldrb	r3, [r3, #7]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d00d      	beq.n	8020b98 <chirp_start+0x1808>
 8020b7c:	4b63      	ldr	r3, [pc, #396]	; (8020d0c <chirp_start+0x197c>)
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020b82:	4b65      	ldr	r3, [pc, #404]	; (8020d18 <chirp_start+0x1988>)
 8020b84:	69db      	ldr	r3, [r3, #28]
 8020b86:	1ad2      	subs	r2, r2, r3
 8020b88:	4b64      	ldr	r3, [pc, #400]	; (8020d1c <chirp_start+0x198c>)
 8020b8a:	69db      	ldr	r3, [r3, #28]
 8020b8c:	4413      	add	r3, r2
 8020b8e:	4a63      	ldr	r2, [pc, #396]	; (8020d1c <chirp_start+0x198c>)
 8020b90:	61d3      	str	r3, [r2, #28]
 8020b92:	4b60      	ldr	r3, [pc, #384]	; (8020d14 <chirp_start+0x1984>)
 8020b94:	2200      	movs	r2, #0
 8020b96:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020b98:	2007      	movs	r0, #7
 8020b9a:	f7ed fb4d 	bl	800e238 <energest_type_time>
 8020b9e:	4603      	mov	r3, r0
 8020ba0:	4619      	mov	r1, r3
 8020ba2:	2007      	movs	r0, #7
 8020ba4:	f7e9 ffd8 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bac:	4a5c      	ldr	r2, [pc, #368]	; (8020d20 <chirp_start+0x1990>)
 8020bae:	4614      	mov	r4, r2
 8020bb0:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020bb4:	f104 0c20 	add.w	ip, r4, #32
 8020bb8:	4635      	mov	r5, r6
 8020bba:	4623      	mov	r3, r4
 8020bbc:	6818      	ldr	r0, [r3, #0]
 8020bbe:	6859      	ldr	r1, [r3, #4]
 8020bc0:	689a      	ldr	r2, [r3, #8]
 8020bc2:	68db      	ldr	r3, [r3, #12]
 8020bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020bc6:	3410      	adds	r4, #16
 8020bc8:	3610      	adds	r6, #16
 8020bca:	4564      	cmp	r4, ip
 8020bcc:	d1f4      	bne.n	8020bb8 <chirp_start+0x1828>
 8020bce:	4633      	mov	r3, r6
 8020bd0:	4622      	mov	r2, r4
 8020bd2:	6810      	ldr	r0, [r2, #0]
 8020bd4:	6851      	ldr	r1, [r2, #4]
 8020bd6:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020bd8:	2228      	movs	r2, #40	; 0x28
 8020bda:	2100      	movs	r1, #0
 8020bdc:	4850      	ldr	r0, [pc, #320]	; (8020d20 <chirp_start+0x1990>)
 8020bde:	f000 ff20 	bl	8021a22 <memset>
        #endif
				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(task_node_id, &chirp_outl))
 8020be2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020be6:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8020bea:	4611      	mov	r1, r2
 8020bec:	4618      	mov	r0, r3
 8020bee:	f7f4 f93d 	bl	8014e6c <chirp_round>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d106      	bne.n	8020c06 <chirp_start+0x1876>
        {
          free(payload_distribution);
 8020bf8:	4b4a      	ldr	r3, [pc, #296]	; (8020d24 <chirp_start+0x1994>)
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	4618      	mov	r0, r3
 8020bfe:	f000 fefd 	bl	80219fc <free>
          break;
 8020c02:	f000 bd65 	b.w	80216d0 <chirp_start+0x2340>
        }
				free(payload_distribution);
 8020c06:	4b47      	ldr	r3, [pc, #284]	; (8020d24 <chirp_start+0x1994>)
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	4618      	mov	r0, r3
 8020c0c:	f000 fef6 	bl	80219fc <free>
        }
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020c10:	4b40      	ldr	r3, [pc, #256]	; (8020d14 <chirp_start+0x1984>)
 8020c12:	79db      	ldrb	r3, [r3, #7]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d00d      	beq.n	8020c34 <chirp_start+0x18a4>
 8020c18:	4b3c      	ldr	r3, [pc, #240]	; (8020d0c <chirp_start+0x197c>)
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020c1e:	4b3e      	ldr	r3, [pc, #248]	; (8020d18 <chirp_start+0x1988>)
 8020c20:	69db      	ldr	r3, [r3, #28]
 8020c22:	1ad2      	subs	r2, r2, r3
 8020c24:	4b3d      	ldr	r3, [pc, #244]	; (8020d1c <chirp_start+0x198c>)
 8020c26:	69db      	ldr	r3, [r3, #28]
 8020c28:	4413      	add	r3, r2
 8020c2a:	4a3c      	ldr	r2, [pc, #240]	; (8020d1c <chirp_start+0x198c>)
 8020c2c:	61d3      	str	r3, [r2, #28]
 8020c2e:	4b39      	ldr	r3, [pc, #228]	; (8020d14 <chirp_start+0x1984>)
 8020c30:	2200      	movs	r2, #0
 8020c32:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020c34:	2007      	movs	r0, #7
 8020c36:	f7ed faff 	bl	800e238 <energest_type_time>
 8020c3a:	4603      	mov	r3, r0
 8020c3c:	4619      	mov	r1, r3
 8020c3e:	2007      	movs	r0, #7
 8020c40:	f7e9 ff8a 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c48:	4a35      	ldr	r2, [pc, #212]	; (8020d20 <chirp_start+0x1990>)
 8020c4a:	4614      	mov	r4, r2
 8020c4c:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 8020c50:	f104 0c20 	add.w	ip, r4, #32
 8020c54:	4635      	mov	r5, r6
 8020c56:	4623      	mov	r3, r4
 8020c58:	6818      	ldr	r0, [r3, #0]
 8020c5a:	6859      	ldr	r1, [r3, #4]
 8020c5c:	689a      	ldr	r2, [r3, #8]
 8020c5e:	68db      	ldr	r3, [r3, #12]
 8020c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020c62:	3410      	adds	r4, #16
 8020c64:	3610      	adds	r6, #16
 8020c66:	4564      	cmp	r4, ip
 8020c68:	d1f4      	bne.n	8020c54 <chirp_start+0x18c4>
 8020c6a:	4633      	mov	r3, r6
 8020c6c:	4622      	mov	r2, r4
 8020c6e:	6810      	ldr	r0, [r2, #0]
 8020c70:	6851      	ldr	r1, [r2, #4]
 8020c72:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 8020c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c78:	781b      	ldrb	r3, [r3, #0]
 8020c7a:	461a      	mov	r2, r3
 8020c7c:	4613      	mov	r3, r2
 8020c7e:	005b      	lsls	r3, r3, #1
 8020c80:	4413      	add	r3, r2
 8020c82:	019b      	lsls	r3, r3, #6
 8020c84:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8020c88:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 8020c8c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020c90:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8020c94:	220a      	movs	r2, #10
 8020c96:	4618      	mov	r0, r3
 8020c98:	f7fb fef0 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 8020c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ca0:	781b      	ldrb	r3, [r3, #0]
 8020ca2:	461a      	mov	r2, r3
 8020ca4:	4613      	mov	r3, r2
 8020ca6:	005b      	lsls	r3, r3, #1
 8020ca8:	4413      	add	r3, r2
 8020caa:	019b      	lsls	r3, r3, #6
 8020cac:	461a      	mov	r2, r3
 8020cae:	4b1e      	ldr	r3, [pc, #120]	; (8020d28 <chirp_start+0x1998>)
 8020cb0:	4413      	add	r3, r2
 8020cb2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020cb6:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8020cba:	220a      	movs	r2, #10
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	f7fb fedd 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 8020cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020cc6:	781b      	ldrb	r3, [r3, #0]
 8020cc8:	461a      	mov	r2, r3
 8020cca:	4613      	mov	r3, r2
 8020ccc:	005b      	lsls	r3, r3, #1
 8020cce:	4413      	add	r3, r2
 8020cd0:	019b      	lsls	r3, r3, #6
 8020cd2:	461a      	mov	r2, r3
 8020cd4:	4b15      	ldr	r3, [pc, #84]	; (8020d2c <chirp_start+0x199c>)
 8020cd6:	4413      	add	r3, r2
 8020cd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020cdc:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 8020ce0:	220a      	movs	r2, #10
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	f7fb feca 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8020ce8:	21f8      	movs	r1, #248	; 0xf8
 8020cea:	2001      	movs	r0, #1
 8020cec:	f7fb fe42 	bl	801c974 <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 8020cf0:	220a      	movs	r2, #10
 8020cf2:	490f      	ldr	r1, [pc, #60]	; (8020d30 <chirp_start+0x19a0>)
 8020cf4:	480f      	ldr	r0, [pc, #60]	; (8020d34 <chirp_start+0x19a4>)
 8020cf6:	f7fb fec1 	bl	801ca7c <FLASH_If_Write>
        #endif
				break;
 8020cfa:	f000 bce9 	b.w	80216d0 <chirp_start+0x2340>
 8020cfe:	bf00      	nop
 8020d00:	08026c84 	.word	0x08026c84
 8020d04:	20001430 	.word	0x20001430
 8020d08:	0016e360 	.word	0x0016e360
 8020d0c:	200012c8 	.word	0x200012c8
 8020d10:	08026c90 	.word	0x08026c90
 8020d14:	2000112c 	.word	0x2000112c
 8020d18:	20001308 	.word	0x20001308
 8020d1c:	20000f10 	.word	0x20000f10
 8020d20:	20000d00 	.word	0x20000d00
 8020d24:	20000cc8 	.word	0x20000cc8
 8020d28:	0807c840 	.word	0x0807c840
 8020d2c:	0807c880 	.word	0x0807c880
 8020d30:	2000149c 	.word	0x2000149c
 8020d34:	0807c000 	.word	0x0807c000
			}
			case CHIRP_CONNECTIVITY:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 8020d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d3c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8020d40:	b2d8      	uxtb	r0, r3
 8020d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d46:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8020d4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020d4e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8020d52:	9201      	str	r2, [sp, #4]
 8020d54:	9300      	str	r3, [sp, #0]
 8020d56:	2308      	movs	r3, #8
 8020d58:	2201      	movs	r2, #1
 8020d5a:	2107      	movs	r1, #7
 8020d5c:	f7f2 f968 	bl	8013030 <chirp_radio_config>

				TRACE_MSG("---------CHIRP_CONNECTIVITY---------\n");
 8020d60:	4899      	ldr	r0, [pc, #612]	; (8020fc8 <chirp_start+0x1c38>)
 8020d62:	f001 fcf3 	bl	802274c <puts>
 8020d66:	4b99      	ldr	r3, [pc, #612]	; (8020fcc <chirp_start+0x1c3c>)
 8020d68:	4a99      	ldr	r2, [pc, #612]	; (8020fd0 <chirp_start+0x1c40>)
 8020d6a:	f240 61b5 	movw	r1, #1717	; 0x6b5
 8020d6e:	4618      	mov	r0, r3
 8020d70:	f000 fd0e 	bl	8021790 <trace_store_msg>
 8020d74:	f000 fd8e 	bl	8021894 <trace_to_flash>
				chirp_outl.num_nodes = network_num_nodes;
 8020d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d7c:	f107 020e 	add.w	r2, r7, #14
 8020d80:	7812      	ldrb	r2, [r2, #0]
 8020d82:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = network_num_nodes;
 8020d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d8a:	f107 020e 	add.w	r2, r7, #14
 8020d8e:	7812      	ldrb	r2, [r2, #0]
 8020d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = DATA_HEADER_LENGTH + 7;
 8020d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d98:	220f      	movs	r2, #15
 8020d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 8020d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da2:	2201      	movs	r2, #1
 8020da4:	715a      	strb	r2, [r3, #5]
				chirp_outl.round_max = chirp_outl.round_setup;
 8020da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020daa:	795b      	ldrb	r3, [r3, #5]
 8020dac:	b29a      	uxth	r2, r3
 8020dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020db2:	f8a3 2003 	strh.w	r2, [r3, #3]
				if (!node_id)
 8020db6:	f107 030f 	add.w	r3, r7, #15
 8020dba:	781b      	ldrb	r3, [r3, #0]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d104      	bne.n	8020dca <chirp_start+0x1a3a>
					chirp_controller_read_command(&chirp_outl);
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	f7fd f913 	bl	801dff0 <chirp_controller_read_command>
				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, DISSEMINATION);
 8020dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dce:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 8020dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dd6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8020dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020de2:	3302      	adds	r3, #2
 8020de4:	b2da      	uxtb	r2, r3
 8020de6:	2302      	movs	r3, #2
 8020de8:	f7f1 feae 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 8020dec:	4b79      	ldr	r3, [pc, #484]	; (8020fd4 <chirp_start+0x1c44>)
 8020dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020df2:	4618      	mov	r0, r3
 8020df4:	4b77      	ldr	r3, [pc, #476]	; (8020fd4 <chirp_start+0x1c44>)
 8020df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020dfa:	4619      	mov	r1, r3
 8020dfc:	4b75      	ldr	r3, [pc, #468]	; (8020fd4 <chirp_start+0x1c44>)
 8020dfe:	8a5b      	ldrh	r3, [r3, #18]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3302      	adds	r3, #2
 8020e04:	9301      	str	r3, [sp, #4]
 8020e06:	2308      	movs	r3, #8
 8020e08:	9300      	str	r3, [sp, #0]
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	2201      	movs	r2, #1
 8020e0e:	f7ec f901 	bl	800d014 <SX1276GetPacketTime>
 8020e12:	4603      	mov	r3, r0
 8020e14:	461a      	mov	r2, r3
 8020e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e1a:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 8020e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e22:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8020e26:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8020e2a:	33a0      	adds	r3, #160	; 0xa0
 8020e2c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020e30:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8020e34:	b291      	uxth	r1, r2
 8020e36:	4a68      	ldr	r2, [pc, #416]	; (8020fd8 <chirp_start+0x1c48>)
 8020e38:	4618      	mov	r0, r3
 8020e3a:	f7f2 f88d 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8020e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e42:	781b      	ldrb	r3, [r3, #0]
 8020e44:	4618      	mov	r0, r3
 8020e46:	f7f2 f953 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 8020e4a:	bf00      	nop
 8020e4c:	4b63      	ldr	r3, [pc, #396]	; (8020fdc <chirp_start+0x1c4c>)
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8020e56:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8020e5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8020e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020e66:	1ad3      	subs	r3, r2, r3
 8020e68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8020e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	db07      	blt.n	8020e84 <chirp_start+0x1af4>
 8020e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	bf14      	ite	ne
 8020e7c:	2301      	movne	r3, #1
 8020e7e:	2300      	moveq	r3, #0
 8020e80:	b2db      	uxtb	r3, r3
 8020e82:	e001      	b.n	8020e88 <chirp_start+0x1af8>
 8020e84:	f04f 33ff 	mov.w	r3, #4294967295
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	dbdf      	blt.n	8020e4c <chirp_start+0x1abc>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020e8c:	4b54      	ldr	r3, [pc, #336]	; (8020fe0 <chirp_start+0x1c50>)
 8020e8e:	79db      	ldrb	r3, [r3, #7]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d00d      	beq.n	8020eb0 <chirp_start+0x1b20>
 8020e94:	4b51      	ldr	r3, [pc, #324]	; (8020fdc <chirp_start+0x1c4c>)
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020e9a:	4b52      	ldr	r3, [pc, #328]	; (8020fe4 <chirp_start+0x1c54>)
 8020e9c:	69db      	ldr	r3, [r3, #28]
 8020e9e:	1ad2      	subs	r2, r2, r3
 8020ea0:	4b51      	ldr	r3, [pc, #324]	; (8020fe8 <chirp_start+0x1c58>)
 8020ea2:	69db      	ldr	r3, [r3, #28]
 8020ea4:	4413      	add	r3, r2
 8020ea6:	4a50      	ldr	r2, [pc, #320]	; (8020fe8 <chirp_start+0x1c58>)
 8020ea8:	61d3      	str	r3, [r2, #28]
 8020eaa:	4b4d      	ldr	r3, [pc, #308]	; (8020fe0 <chirp_start+0x1c50>)
 8020eac:	2200      	movs	r2, #0
 8020eae:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8020eb0:	2007      	movs	r0, #7
 8020eb2:	f7ed f9c1 	bl	800e238 <energest_type_time>
 8020eb6:	4603      	mov	r3, r0
 8020eb8:	4619      	mov	r1, r3
 8020eba:	2007      	movs	r0, #7
 8020ebc:	f7e9 fe4c 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8020ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ec4:	4a49      	ldr	r2, [pc, #292]	; (8020fec <chirp_start+0x1c5c>)
 8020ec6:	4614      	mov	r4, r2
 8020ec8:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 8020ecc:	f104 0c20 	add.w	ip, r4, #32
 8020ed0:	4635      	mov	r5, r6
 8020ed2:	4623      	mov	r3, r4
 8020ed4:	6818      	ldr	r0, [r3, #0]
 8020ed6:	6859      	ldr	r1, [r3, #4]
 8020ed8:	689a      	ldr	r2, [r3, #8]
 8020eda:	68db      	ldr	r3, [r3, #12]
 8020edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020ede:	3410      	adds	r4, #16
 8020ee0:	3610      	adds	r6, #16
 8020ee2:	4564      	cmp	r4, ip
 8020ee4:	d1f4      	bne.n	8020ed0 <chirp_start+0x1b40>
 8020ee6:	4633      	mov	r3, r6
 8020ee8:	4622      	mov	r2, r4
 8020eea:	6810      	ldr	r0, [r2, #0]
 8020eec:	6851      	ldr	r1, [r2, #4]
 8020eee:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8020ef0:	2228      	movs	r2, #40	; 0x28
 8020ef2:	2100      	movs	r1, #0
 8020ef4:	483d      	ldr	r0, [pc, #244]	; (8020fec <chirp_start+0x1c5c>)
 8020ef6:	f000 fd94 	bl	8021a22 <memset>
        #endif

				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 8020efa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020efe:	f107 030f 	add.w	r3, r7, #15
 8020f02:	781b      	ldrb	r3, [r3, #0]
 8020f04:	4611      	mov	r1, r2
 8020f06:	4618      	mov	r0, r3
 8020f08:	f7f3 ffb0 	bl	8014e6c <chirp_round>
 8020f0c:	4603      	mov	r3, r0
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d105      	bne.n	8020f1e <chirp_start+0x1b8e>
        {
          free(payload_distribution);
 8020f12:	4b37      	ldr	r3, [pc, #220]	; (8020ff0 <chirp_start+0x1c60>)
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	4618      	mov	r0, r3
 8020f18:	f000 fd70 	bl	80219fc <free>
          break;
 8020f1c:	e3d8      	b.n	80216d0 <chirp_start+0x2340>
        }

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 8020f1e:	4b30      	ldr	r3, [pc, #192]	; (8020fe0 <chirp_start+0x1c50>)
 8020f20:	79db      	ldrb	r3, [r3, #7]
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d00d      	beq.n	8020f42 <chirp_start+0x1bb2>
 8020f26:	4b2d      	ldr	r3, [pc, #180]	; (8020fdc <chirp_start+0x1c4c>)
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020f2c:	4b2d      	ldr	r3, [pc, #180]	; (8020fe4 <chirp_start+0x1c54>)
 8020f2e:	69db      	ldr	r3, [r3, #28]
 8020f30:	1ad2      	subs	r2, r2, r3
 8020f32:	4b2d      	ldr	r3, [pc, #180]	; (8020fe8 <chirp_start+0x1c58>)
 8020f34:	69db      	ldr	r3, [r3, #28]
 8020f36:	4413      	add	r3, r2
 8020f38:	4a2b      	ldr	r2, [pc, #172]	; (8020fe8 <chirp_start+0x1c58>)
 8020f3a:	61d3      	str	r3, [r2, #28]
 8020f3c:	4b28      	ldr	r3, [pc, #160]	; (8020fe0 <chirp_start+0x1c50>)
 8020f3e:	2200      	movs	r2, #0
 8020f40:	71da      	strb	r2, [r3, #7]
          ENERGEST_OFF(ENERGEST_TYPE_LPM);
 8020f42:	4b27      	ldr	r3, [pc, #156]	; (8020fe0 <chirp_start+0x1c50>)
 8020f44:	7a1b      	ldrb	r3, [r3, #8]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d00d      	beq.n	8020f66 <chirp_start+0x1bd6>
 8020f4a:	4b24      	ldr	r3, [pc, #144]	; (8020fdc <chirp_start+0x1c4c>)
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020f50:	4b24      	ldr	r3, [pc, #144]	; (8020fe4 <chirp_start+0x1c54>)
 8020f52:	6a1b      	ldr	r3, [r3, #32]
 8020f54:	1ad2      	subs	r2, r2, r3
 8020f56:	4b24      	ldr	r3, [pc, #144]	; (8020fe8 <chirp_start+0x1c58>)
 8020f58:	6a1b      	ldr	r3, [r3, #32]
 8020f5a:	4413      	add	r3, r2
 8020f5c:	4a22      	ldr	r2, [pc, #136]	; (8020fe8 <chirp_start+0x1c58>)
 8020f5e:	6213      	str	r3, [r2, #32]
 8020f60:	4b1f      	ldr	r3, [pc, #124]	; (8020fe0 <chirp_start+0x1c50>)
 8020f62:	2200      	movs	r2, #0
 8020f64:	721a      	strb	r2, [r3, #8]
 8020f66:	4b1d      	ldr	r3, [pc, #116]	; (8020fdc <chirp_start+0x1c4c>)
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
          ENERGEST_ON(ENERGEST_TYPE_CPU);
 8020f6c:	4a1d      	ldr	r2, [pc, #116]	; (8020fe4 <chirp_start+0x1c54>)
 8020f6e:	61d3      	str	r3, [r2, #28]
 8020f70:	4b1b      	ldr	r3, [pc, #108]	; (8020fe0 <chirp_start+0x1c50>)
 8020f72:	2201      	movs	r2, #1
 8020f74:	71da      	strb	r2, [r3, #7]
        #endif

        chirp_radio_config(chirp_outl.sf, 7, 1, 8, chirp_outl.tx_power, chirp_outl.freq);
 8020f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f7a:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
 8020f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f82:	f993 307a 	ldrsb.w	r3, [r3, #122]	; 0x7a
 8020f86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8020f8a:	f8d2 2076 	ldr.w	r2, [r2, #118]	; 0x76
 8020f8e:	9201      	str	r2, [sp, #4]
 8020f90:	9300      	str	r3, [sp, #0]
 8020f92:	2308      	movs	r3, #8
 8020f94:	2201      	movs	r2, #1
 8020f96:	2107      	movs	r1, #7
 8020f98:	f7f2 f84a 	bl	8013030 <chirp_radio_config>
        topo_init(network_num_nodes, node_id, chirp_outl.sf, chirp_outl.topo_payload_len);
 8020f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020fa0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8020fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020fa8:	f893 407b 	ldrb.w	r4, [r3, #123]	; 0x7b
 8020fac:	f107 030f 	add.w	r3, r7, #15
 8020fb0:	7819      	ldrb	r1, [r3, #0]
 8020fb2:	f107 030e 	add.w	r3, r7, #14
 8020fb6:	7818      	ldrb	r0, [r3, #0]
 8020fb8:	4623      	mov	r3, r4
 8020fba:	f7e9 ff31 	bl	800ae20 <topo_init>
        uint8_t i;
        for (i = 0; i < network_num_nodes; i++)
 8020fbe:	2300      	movs	r3, #0
 8020fc0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8020fc4:	e030      	b.n	8021028 <chirp_start+0x1c98>
 8020fc6:	bf00      	nop
 8020fc8:	08026c9c 	.word	0x08026c9c
 8020fcc:	08026b59 	.word	0x08026b59
 8020fd0:	08026cc4 	.word	0x08026cc4
 8020fd4:	20001430 	.word	0x20001430
 8020fd8:	0016e360 	.word	0x0016e360
 8020fdc:	200012c8 	.word	0x200012c8
 8020fe0:	2000112c 	.word	0x2000112c
 8020fe4:	20001308 	.word	0x20001308
 8020fe8:	20000f10 	.word	0x20000f10
 8020fec:	20000d00 	.word	0x20000d00
 8020ff0:	20000cc8 	.word	0x20000cc8
        {
          // #if GPS_DATA
          // GPS_Sleep(10);
          // #endif
          RTC_Waiting_Count_Sleep(5);
 8020ff4:	2005      	movs	r0, #5
 8020ff6:	f7e9 fcdb 	bl	800a9b0 <RTC_Waiting_Count_Sleep>
          topo_round_robin(node_id, chirp_outl.num_nodes, i, deadline);
 8020ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ffe:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8021002:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8021006:	f04f 0400 	mov.w	r4, #0
 802100a:	f897 5177 	ldrb.w	r5, [r7, #375]	; 0x177
 802100e:	f107 020f 	add.w	r2, r7, #15
 8021012:	7810      	ldrb	r0, [r2, #0]
 8021014:	e9cd 3400 	strd	r3, r4, [sp]
 8021018:	462a      	mov	r2, r5
 802101a:	f7e9 ff9b 	bl	800af54 <topo_round_robin>
        for (i = 0; i < network_num_nodes; i++)
 802101e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8021022:	3301      	adds	r3, #1
 8021024:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8021028:	f107 030e 	add.w	r3, r7, #14
 802102c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8021030:	781b      	ldrb	r3, [r3, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d3de      	bcc.n	8020ff4 <chirp_start+0x1c64>
        }
				topo_result(chirp_outl.num_nodes);
 8021036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802103a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 802103e:	4618      	mov	r0, r3
 8021040:	f7ea fa6a 	bl	800b518 <topo_result>
				free(payload_distribution);
 8021044:	4bc9      	ldr	r3, [pc, #804]	; (802136c <chirp_start+0x1fdc>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	4618      	mov	r0, r3
 802104a:	f000 fcd7 	bl	80219fc <free>
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 802104e:	4bc8      	ldr	r3, [pc, #800]	; (8021370 <chirp_start+0x1fe0>)
 8021050:	79db      	ldrb	r3, [r3, #7]
 8021052:	2b00      	cmp	r3, #0
 8021054:	d00d      	beq.n	8021072 <chirp_start+0x1ce2>
 8021056:	4bc7      	ldr	r3, [pc, #796]	; (8021374 <chirp_start+0x1fe4>)
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802105c:	4bc6      	ldr	r3, [pc, #792]	; (8021378 <chirp_start+0x1fe8>)
 802105e:	69db      	ldr	r3, [r3, #28]
 8021060:	1ad2      	subs	r2, r2, r3
 8021062:	4bc6      	ldr	r3, [pc, #792]	; (802137c <chirp_start+0x1fec>)
 8021064:	69db      	ldr	r3, [r3, #28]
 8021066:	4413      	add	r3, r2
 8021068:	4ac4      	ldr	r2, [pc, #784]	; (802137c <chirp_start+0x1fec>)
 802106a:	61d3      	str	r3, [r2, #28]
 802106c:	4bc0      	ldr	r3, [pc, #768]	; (8021370 <chirp_start+0x1fe0>)
 802106e:	2200      	movs	r2, #0
 8021070:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8021072:	2007      	movs	r0, #7
 8021074:	f7ed f8e0 	bl	800e238 <energest_type_time>
 8021078:	4603      	mov	r3, r0
 802107a:	4619      	mov	r1, r3
 802107c:	2007      	movs	r0, #7
 802107e:	f7e9 fd6b 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_TRANSMIT, energest_type_time(ENERGEST_TYPE_TRANSMIT));
 8021082:	200e      	movs	r0, #14
 8021084:	f7ed f8d8 	bl	800e238 <energest_type_time>
 8021088:	4603      	mov	r3, r0
 802108a:	4619      	mov	r1, r3
 802108c:	200e      	movs	r0, #14
 802108e:	f7e9 fd63 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_LISTEN, energest_type_time(ENERGEST_TYPE_LISTEN));
 8021092:	200f      	movs	r0, #15
 8021094:	f7ed f8d0 	bl	800e238 <energest_type_time>
 8021098:	4603      	mov	r3, r0
 802109a:	4619      	mov	r1, r3
 802109c:	200f      	movs	r0, #15
 802109e:	f7e9 fd5b 	bl	800ab58 <Stats_value_debug>
          Stats_value_debug(ENERGEST_TYPE_FLASH_WRITE_BANK1, energest_type_time(ENERGEST_TYPE_FLASH_WRITE_BANK1));
 80210a2:	200a      	movs	r0, #10
 80210a4:	f7ed f8c8 	bl	800e238 <energest_type_time>
 80210a8:	4603      	mov	r3, r0
 80210aa:	4619      	mov	r1, r3
 80210ac:	200a      	movs	r0, #10
 80210ae:	f7e9 fd53 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 80210b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210b6:	4ab2      	ldr	r2, [pc, #712]	; (8021380 <chirp_start+0x1ff0>)
 80210b8:	4614      	mov	r4, r2
 80210ba:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 80210be:	f104 0c20 	add.w	ip, r4, #32
 80210c2:	4635      	mov	r5, r6
 80210c4:	4623      	mov	r3, r4
 80210c6:	6818      	ldr	r0, [r3, #0]
 80210c8:	6859      	ldr	r1, [r3, #4]
 80210ca:	689a      	ldr	r2, [r3, #8]
 80210cc:	68db      	ldr	r3, [r3, #12]
 80210ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80210d0:	3410      	adds	r4, #16
 80210d2:	3610      	adds	r6, #16
 80210d4:	4564      	cmp	r4, ip
 80210d6:	d1f4      	bne.n	80210c2 <chirp_start+0x1d32>
 80210d8:	4633      	mov	r3, r6
 80210da:	4622      	mov	r2, r4
 80210dc:	6810      	ldr	r0, [r2, #0]
 80210de:	6851      	ldr	r1, [r2, #4]
 80210e0:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 80210e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210e6:	781b      	ldrb	r3, [r3, #0]
 80210e8:	461a      	mov	r2, r3
 80210ea:	4613      	mov	r3, r2
 80210ec:	005b      	lsls	r3, r3, #1
 80210ee:	4413      	add	r3, r2
 80210f0:	019b      	lsls	r3, r3, #6
 80210f2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80210f6:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 80210fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80210fe:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8021102:	220a      	movs	r2, #10
 8021104:	4618      	mov	r0, r3
 8021106:	f7fb fcb9 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 802110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802110e:	781b      	ldrb	r3, [r3, #0]
 8021110:	461a      	mov	r2, r3
 8021112:	4613      	mov	r3, r2
 8021114:	005b      	lsls	r3, r3, #1
 8021116:	4413      	add	r3, r2
 8021118:	019b      	lsls	r3, r3, #6
 802111a:	461a      	mov	r2, r3
 802111c:	4b99      	ldr	r3, [pc, #612]	; (8021384 <chirp_start+0x1ff4>)
 802111e:	4413      	add	r3, r2
 8021120:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021124:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 8021128:	220a      	movs	r2, #10
 802112a:	4618      	mov	r0, r3
 802112c:	f7fb fca6 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 8021130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021134:	781b      	ldrb	r3, [r3, #0]
 8021136:	461a      	mov	r2, r3
 8021138:	4613      	mov	r3, r2
 802113a:	005b      	lsls	r3, r3, #1
 802113c:	4413      	add	r3, r2
 802113e:	019b      	lsls	r3, r3, #6
 8021140:	461a      	mov	r2, r3
 8021142:	4b91      	ldr	r3, [pc, #580]	; (8021388 <chirp_start+0x1ff8>)
 8021144:	4413      	add	r3, r2
 8021146:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802114a:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 802114e:	220a      	movs	r2, #10
 8021150:	4618      	mov	r0, r3
 8021152:	f7fb fc93 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8021156:	21f8      	movs	r1, #248	; 0xf8
 8021158:	2001      	movs	r0, #1
 802115a:	f7fb fc0b 	bl	801c974 <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 802115e:	220a      	movs	r2, #10
 8021160:	498a      	ldr	r1, [pc, #552]	; (802138c <chirp_start+0x1ffc>)
 8021162:	488b      	ldr	r0, [pc, #556]	; (8021390 <chirp_start+0x2000>)
 8021164:	f7fb fc8a 	bl	801ca7c <FLASH_If_Write>
        #endif
				break;
 8021168:	e2b2      	b.n	80216d0 <chirp_start+0x2340>
			}
			case CHIRP_TOPO:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 802116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802116e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8021172:	b2d8      	uxtb	r0, r3
 8021174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021178:	f993 3015 	ldrsb.w	r3, [r3, #21]
 802117c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021180:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8021184:	9201      	str	r2, [sp, #4]
 8021186:	9300      	str	r3, [sp, #0]
 8021188:	2308      	movs	r3, #8
 802118a:	2201      	movs	r2, #1
 802118c:	2107      	movs	r1, #7
 802118e:	f7f1 ff4f 	bl	8013030 <chirp_radio_config>

				TRACE_MSG("---------CHIRP_TOPO---------\n");
 8021192:	4880      	ldr	r0, [pc, #512]	; (8021394 <chirp_start+0x2004>)
 8021194:	f001 fada 	bl	802274c <puts>
 8021198:	4b7f      	ldr	r3, [pc, #508]	; (8021398 <chirp_start+0x2008>)
 802119a:	4a80      	ldr	r2, [pc, #512]	; (802139c <chirp_start+0x200c>)
 802119c:	f240 61f7 	movw	r1, #1783	; 0x6f7
 80211a0:	4618      	mov	r0, r3
 80211a2:	f000 faf5 	bl	8021790 <trace_store_msg>
 80211a6:	f000 fb75 	bl	8021894 <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = network_num_nodes;
 80211aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211ae:	f107 020e 	add.w	r2, r7, #14
 80211b2:	7812      	ldrb	r2, [r2, #0]
 80211b4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 80211b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211bc:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80211c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = chirp_outl.default_payload_len;
 80211c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211cc:	7d9a      	ldrb	r2, [r3, #22]
 80211ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 0;
 80211d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211da:	2200      	movs	r2, #0
 80211dc:	715a      	strb	r2, [r3, #5]
				chirp_outl.file_chunk_len = chirp_outl.payload_len - DATA_HEADER_LENGTH;
 80211de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80211e6:	b29b      	uxth	r3, r3
 80211e8:	3b08      	subs	r3, #8
 80211ea:	b29a      	uxth	r2, r3
 80211ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211f0:	875a      	strh	r2, [r3, #58]	; 0x3a
        assert_reset(chirp_outl.payload_len > DATA_HEADER_LENGTH);
 80211f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80211f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80211fa:	2b08      	cmp	r3, #8
 80211fc:	d814      	bhi.n	8021228 <chirp_start+0x1e98>
 80211fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8021206:	2b08      	cmp	r3, #8
 8021208:	d901      	bls.n	802120e <chirp_start+0x1e7e>
 802120a:	2301      	movs	r3, #1
 802120c:	e000      	b.n	8021210 <chirp_start+0x1e80>
 802120e:	2300      	movs	r3, #0
 8021210:	4618      	mov	r0, r3
 8021212:	f001 fa13 	bl	802263c <iprintf>
 8021216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802121a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802121e:	2b08      	cmp	r3, #8
 8021220:	d802      	bhi.n	8021228 <chirp_start+0x1e98>
 8021222:	b671      	cpsid	f
 8021224:	f7fb fef8 	bl	801d018 <NVIC_SystemReset>
				assert_reset(!(chirp_outl.file_chunk_len % sizeof(uint64_t)));
 8021228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802122c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802122e:	f003 0307 	and.w	r3, r3, #7
 8021232:	b29b      	uxth	r3, r3
 8021234:	2b00      	cmp	r3, #0
 8021236:	d018      	beq.n	802126a <chirp_start+0x1eda>
 8021238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802123c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802123e:	f003 0307 	and.w	r3, r3, #7
 8021242:	b29b      	uxth	r3, r3
 8021244:	2b00      	cmp	r3, #0
 8021246:	d101      	bne.n	802124c <chirp_start+0x1ebc>
 8021248:	2301      	movs	r3, #1
 802124a:	e000      	b.n	802124e <chirp_start+0x1ebe>
 802124c:	2300      	movs	r3, #0
 802124e:	4618      	mov	r0, r3
 8021250:	f001 f9f4 	bl	802263c <iprintf>
 8021254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021258:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 802125a:	f003 0307 	and.w	r3, r3, #7
 802125e:	b29b      	uxth	r3, r3
 8021260:	2b00      	cmp	r3, #0
 8021262:	d002      	beq.n	802126a <chirp_start+0x1eda>
 8021264:	b671      	cpsid	f
 8021266:	f7fb fed7 	bl	801d018 <NVIC_SystemReset>

				uint16_t file_size = (((chirp_outl.num_nodes + 1) / 2) * 2) * sizeof(uint32_t);
 802126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802126e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8021272:	3301      	adds	r3, #1
 8021274:	0fda      	lsrs	r2, r3, #31
 8021276:	4413      	add	r3, r2
 8021278:	105b      	asrs	r3, r3, #1
 802127a:	b29b      	uxth	r3, r3
 802127c:	00db      	lsls	r3, r3, #3
 802127e:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
				chirp_outl.round_max = chirp_outl.round_setup + (file_size + chirp_outl.file_chunk_len - 1)/ chirp_outl.file_chunk_len;
 8021282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021286:	795b      	ldrb	r3, [r3, #5]
 8021288:	b29a      	uxth	r2, r3
 802128a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 802128e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8021292:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 8021294:	440b      	add	r3, r1
 8021296:	3b01      	subs	r3, #1
 8021298:	f107 0124 	add.w	r1, r7, #36	; 0x24
 802129c:	8f49      	ldrh	r1, [r1, #58]	; 0x3a
 802129e:	fb93 f3f1 	sdiv	r3, r3, r1
 80212a2:	b29b      	uxth	r3, r3
 80212a4:	4413      	add	r3, r2
 80212a6:	b29a      	uxth	r2, r3
 80212a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80212ac:	f8a3 2003 	strh.w	r2, [r3, #3]

				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 80212b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80212b4:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 80212b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80212bc:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80212c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80212c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80212c8:	3302      	adds	r3, #2
 80212ca:	b2da      	uxtb	r2, r3
 80212cc:	2303      	movs	r3, #3
 80212ce:	f7f1 fc3b 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 80212d2:	4b33      	ldr	r3, [pc, #204]	; (80213a0 <chirp_start+0x2010>)
 80212d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80212d8:	4618      	mov	r0, r3
 80212da:	4b31      	ldr	r3, [pc, #196]	; (80213a0 <chirp_start+0x2010>)
 80212dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80212e0:	4619      	mov	r1, r3
 80212e2:	4b2f      	ldr	r3, [pc, #188]	; (80213a0 <chirp_start+0x2010>)
 80212e4:	8a5b      	ldrh	r3, [r3, #18]
 80212e6:	b29b      	uxth	r3, r3
 80212e8:	3302      	adds	r3, #2
 80212ea:	9301      	str	r3, [sp, #4]
 80212ec:	2308      	movs	r3, #8
 80212ee:	9300      	str	r3, [sp, #0]
 80212f0:	2300      	movs	r3, #0
 80212f2:	2201      	movs	r2, #1
 80212f4:	f7eb fe8e 	bl	800d014 <SX1276GetPacketTime>
 80212f8:	4603      	mov	r3, r0
 80212fa:	461a      	mov	r2, r3
 80212fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021300:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 8021304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021308:	f8d3 3007 	ldr.w	r3, [r3, #7]
 802130c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8021310:	33a0      	adds	r3, #160	; 0xa0
 8021312:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021316:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 802131a:	b291      	uxth	r1, r2
 802131c:	4a21      	ldr	r2, [pc, #132]	; (80213a4 <chirp_start+0x2014>)
 802131e:	4618      	mov	r0, r3
 8021320:	f7f1 fe1a 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8021324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021328:	781b      	ldrb	r3, [r3, #0]
 802132a:	4618      	mov	r0, r3
 802132c:	f7f1 fee0 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 8021330:	bf00      	nop
 8021332:	4b10      	ldr	r3, [pc, #64]	; (8021374 <chirp_start+0x1fe4>)
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 802133c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8021340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8021344:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8021348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802134c:	1ad3      	subs	r3, r2, r3
 802134e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8021352:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021356:	2b00      	cmp	r3, #0
 8021358:	db26      	blt.n	80213a8 <chirp_start+0x2018>
 802135a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802135e:	2b00      	cmp	r3, #0
 8021360:	bf14      	ite	ne
 8021362:	2301      	movne	r3, #1
 8021364:	2300      	moveq	r3, #0
 8021366:	b2db      	uxtb	r3, r3
 8021368:	e020      	b.n	80213ac <chirp_start+0x201c>
 802136a:	bf00      	nop
 802136c:	20000cc8 	.word	0x20000cc8
 8021370:	2000112c 	.word	0x2000112c
 8021374:	200012c8 	.word	0x200012c8
 8021378:	20001308 	.word	0x20001308
 802137c:	20000f10 	.word	0x20000f10
 8021380:	20000d00 	.word	0x20000d00
 8021384:	0807c840 	.word	0x0807c840
 8021388:	0807c880 	.word	0x0807c880
 802138c:	2000149c 	.word	0x2000149c
 8021390:	0807c000 	.word	0x0807c000
 8021394:	08026cec 	.word	0x08026cec
 8021398:	08026b59 	.word	0x08026b59
 802139c:	08026d0c 	.word	0x08026d0c
 80213a0:	20001430 	.word	0x20001430
 80213a4:	0016e360 	.word	0x0016e360
 80213a8:	f04f 33ff 	mov.w	r3, #4294967295
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	dbc0      	blt.n	8021332 <chirp_start+0x1fa2>

        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 80213b0:	4bc8      	ldr	r3, [pc, #800]	; (80216d4 <chirp_start+0x2344>)
 80213b2:	79db      	ldrb	r3, [r3, #7]
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d00d      	beq.n	80213d4 <chirp_start+0x2044>
 80213b8:	4bc7      	ldr	r3, [pc, #796]	; (80216d8 <chirp_start+0x2348>)
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80213be:	4bc7      	ldr	r3, [pc, #796]	; (80216dc <chirp_start+0x234c>)
 80213c0:	69db      	ldr	r3, [r3, #28]
 80213c2:	1ad2      	subs	r2, r2, r3
 80213c4:	4bc6      	ldr	r3, [pc, #792]	; (80216e0 <chirp_start+0x2350>)
 80213c6:	69db      	ldr	r3, [r3, #28]
 80213c8:	4413      	add	r3, r2
 80213ca:	4ac5      	ldr	r2, [pc, #788]	; (80216e0 <chirp_start+0x2350>)
 80213cc:	61d3      	str	r3, [r2, #28]
 80213ce:	4bc1      	ldr	r3, [pc, #772]	; (80216d4 <chirp_start+0x2344>)
 80213d0:	2200      	movs	r2, #0
 80213d2:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 80213d4:	2007      	movs	r0, #7
 80213d6:	f7ec ff2f 	bl	800e238 <energest_type_time>
 80213da:	4603      	mov	r3, r0
 80213dc:	4619      	mov	r1, r3
 80213de:	2007      	movs	r0, #7
 80213e0:	f7e9 fbba 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[1]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 80213e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80213e8:	4abe      	ldr	r2, [pc, #760]	; (80216e4 <chirp_start+0x2354>)
 80213ea:	4614      	mov	r4, r2
 80213ec:	f103 06a4 	add.w	r6, r3, #164	; 0xa4
 80213f0:	f104 0c20 	add.w	ip, r4, #32
 80213f4:	4635      	mov	r5, r6
 80213f6:	4623      	mov	r3, r4
 80213f8:	6818      	ldr	r0, [r3, #0]
 80213fa:	6859      	ldr	r1, [r3, #4]
 80213fc:	689a      	ldr	r2, [r3, #8]
 80213fe:	68db      	ldr	r3, [r3, #12]
 8021400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021402:	3410      	adds	r4, #16
 8021404:	3610      	adds	r6, #16
 8021406:	4564      	cmp	r4, ip
 8021408:	d1f4      	bne.n	80213f4 <chirp_start+0x2064>
 802140a:	4633      	mov	r3, r6
 802140c:	4622      	mov	r2, r4
 802140e:	6810      	ldr	r0, [r2, #0]
 8021410:	6851      	ldr	r1, [r2, #4]
 8021412:	c303      	stmia	r3!, {r0, r1}
          memset(&chirp_stats_all_debug, 0, sizeof(chirp_stats_all_debug));
 8021414:	2228      	movs	r2, #40	; 0x28
 8021416:	2100      	movs	r1, #0
 8021418:	48b2      	ldr	r0, [pc, #712]	; (80216e4 <chirp_start+0x2354>)
 802141a:	f000 fb02 	bl	8021a22 <memset>
        #endif

				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 802141e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021422:	f107 030f 	add.w	r3, r7, #15
 8021426:	781b      	ldrb	r3, [r3, #0]
 8021428:	4611      	mov	r1, r2
 802142a:	4618      	mov	r0, r3
 802142c:	f7f3 fd1e 	bl	8014e6c <chirp_round>
 8021430:	4603      	mov	r3, r0
 8021432:	2b00      	cmp	r3, #0
 8021434:	d105      	bne.n	8021442 <chirp_start+0x20b2>
        {
          free(payload_distribution);
 8021436:	4bac      	ldr	r3, [pc, #688]	; (80216e8 <chirp_start+0x2358>)
 8021438:	681b      	ldr	r3, [r3, #0]
 802143a:	4618      	mov	r0, r3
 802143c:	f000 fade 	bl	80219fc <free>
          break;
 8021440:	e146      	b.n	80216d0 <chirp_start+0x2340>
        }
				free(payload_distribution);
 8021442:	4ba9      	ldr	r3, [pc, #676]	; (80216e8 <chirp_start+0x2358>)
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	4618      	mov	r0, r3
 8021448:	f000 fad8 	bl	80219fc <free>
        #if ENERGEST_CONF_ON
          ENERGEST_OFF(ENERGEST_TYPE_CPU);
 802144c:	4ba1      	ldr	r3, [pc, #644]	; (80216d4 <chirp_start+0x2344>)
 802144e:	79db      	ldrb	r3, [r3, #7]
 8021450:	2b00      	cmp	r3, #0
 8021452:	d00d      	beq.n	8021470 <chirp_start+0x20e0>
 8021454:	4ba0      	ldr	r3, [pc, #640]	; (80216d8 <chirp_start+0x2348>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802145a:	4ba0      	ldr	r3, [pc, #640]	; (80216dc <chirp_start+0x234c>)
 802145c:	69db      	ldr	r3, [r3, #28]
 802145e:	1ad2      	subs	r2, r2, r3
 8021460:	4b9f      	ldr	r3, [pc, #636]	; (80216e0 <chirp_start+0x2350>)
 8021462:	69db      	ldr	r3, [r3, #28]
 8021464:	4413      	add	r3, r2
 8021466:	4a9e      	ldr	r2, [pc, #632]	; (80216e0 <chirp_start+0x2350>)
 8021468:	61d3      	str	r3, [r2, #28]
 802146a:	4b9a      	ldr	r3, [pc, #616]	; (80216d4 <chirp_start+0x2344>)
 802146c:	2200      	movs	r2, #0
 802146e:	71da      	strb	r2, [r3, #7]
          Stats_value_debug(ENERGEST_TYPE_CPU, energest_type_time(ENERGEST_TYPE_CPU));
 8021470:	2007      	movs	r0, #7
 8021472:	f7ec fee1 	bl	800e238 <energest_type_time>
 8021476:	4603      	mov	r3, r0
 8021478:	4619      	mov	r1, r3
 802147a:	2007      	movs	r0, #7
 802147c:	f7e9 fb6c 	bl	800ab58 <Stats_value_debug>
          memcpy((uint32_t *)(&chirp_outl.chirp_energy[2]), (uint32_t *)(&chirp_stats_all_debug), sizeof(chirp_stats_all_debug));
 8021480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021484:	4a97      	ldr	r2, [pc, #604]	; (80216e4 <chirp_start+0x2354>)
 8021486:	4614      	mov	r4, r2
 8021488:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
 802148c:	f104 0c20 	add.w	ip, r4, #32
 8021490:	4635      	mov	r5, r6
 8021492:	4623      	mov	r3, r4
 8021494:	6818      	ldr	r0, [r3, #0]
 8021496:	6859      	ldr	r1, [r3, #4]
 8021498:	689a      	ldr	r2, [r3, #8]
 802149a:	68db      	ldr	r3, [r3, #12]
 802149c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802149e:	3410      	adds	r4, #16
 80214a0:	3610      	adds	r6, #16
 80214a2:	4564      	cmp	r4, ip
 80214a4:	d1f4      	bne.n	8021490 <chirp_start+0x2100>
 80214a6:	4633      	mov	r3, r6
 80214a8:	4622      	mov	r2, r4
 80214aa:	6810      	ldr	r0, [r2, #0]
 80214ac:	6851      	ldr	r1, [r2, #4]
 80214ae:	c303      	stmia	r3!, {r0, r1}
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192, (uint32_t *)(&chirp_outl.chirp_energy[0]), sizeof(chirp_outl.chirp_energy[0]) / sizeof(uint32_t));
 80214b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80214b4:	781b      	ldrb	r3, [r3, #0]
 80214b6:	461a      	mov	r2, r3
 80214b8:	4613      	mov	r3, r2
 80214ba:	005b      	lsls	r3, r3, #1
 80214bc:	4413      	add	r3, r2
 80214be:	019b      	lsls	r3, r3, #6
 80214c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80214c4:	f503 23f9 	add.w	r3, r3, #509952	; 0x7c800
 80214c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80214cc:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 80214d0:	220a      	movs	r2, #10
 80214d2:	4618      	mov	r0, r3
 80214d4:	f7fb fad2 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64, (uint32_t *)(&chirp_outl.chirp_energy[1]), sizeof(chirp_outl.chirp_energy[1]) / sizeof(uint32_t));
 80214d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80214dc:	781b      	ldrb	r3, [r3, #0]
 80214de:	461a      	mov	r2, r3
 80214e0:	4613      	mov	r3, r2
 80214e2:	005b      	lsls	r3, r3, #1
 80214e4:	4413      	add	r3, r2
 80214e6:	019b      	lsls	r3, r3, #6
 80214e8:	461a      	mov	r2, r3
 80214ea:	4b80      	ldr	r3, [pc, #512]	; (80216ec <chirp_start+0x235c>)
 80214ec:	4413      	add	r3, r2
 80214ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80214f2:	f102 01a4 	add.w	r1, r2, #164	; 0xa4
 80214f6:	220a      	movs	r2, #10
 80214f8:	4618      	mov	r0, r3
 80214fa:	f7fb fabf 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Write(DAEMON_DEBUG_FLASH_ADDRESS + chirp_outl.task * DAEMON_DEBUG_ENERGY_LEN_192 + DAEMON_DEBUG_ENERGY_LEN_64 * 2, (uint32_t *)(&chirp_outl.chirp_energy[2]), sizeof(chirp_outl.chirp_energy[2]) / sizeof(uint32_t));
 80214fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021502:	781b      	ldrb	r3, [r3, #0]
 8021504:	461a      	mov	r2, r3
 8021506:	4613      	mov	r3, r2
 8021508:	005b      	lsls	r3, r3, #1
 802150a:	4413      	add	r3, r2
 802150c:	019b      	lsls	r3, r3, #6
 802150e:	461a      	mov	r2, r3
 8021510:	4b77      	ldr	r3, [pc, #476]	; (80216f0 <chirp_start+0x2360>)
 8021512:	4413      	add	r3, r2
 8021514:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021518:	f102 01cc 	add.w	r1, r2, #204	; 0xcc
 802151c:	220a      	movs	r2, #10
 802151e:	4618      	mov	r0, r3
 8021520:	f7fb faac 	bl	801ca7c <FLASH_If_Write>
          FLASH_If_Erase_Pages(1, DAEMON_LBT_PAGE);
 8021524:	21f8      	movs	r1, #248	; 0xf8
 8021526:	2001      	movs	r0, #1
 8021528:	f7fb fa24 	bl	801c974 <FLASH_If_Erase_Pages>
          FLASH_If_Write(DAEMON_DEBUG_LBT_ADDRESS, (uint32_t *)&chirp_config.lbt_channel_time_us[0], ((LBT_CHANNEL_NUM + 1) / 2) * sizeof(uint64_t) / sizeof(uint32_t));
 802152c:	220a      	movs	r2, #10
 802152e:	4971      	ldr	r1, [pc, #452]	; (80216f4 <chirp_start+0x2364>)
 8021530:	4871      	ldr	r0, [pc, #452]	; (80216f8 <chirp_start+0x2368>)
 8021532:	f7fb faa3 	bl	801ca7c <FLASH_If_Write>
        #endif
				break;
 8021536:	e0cb      	b.n	80216d0 <chirp_start+0x2340>
			}
			case CHIRP_VERSION:
			{
				chirp_radio_config(chirp_outl.default_sf, 7, 1, 8, chirp_outl.default_tp, chirp_outl.default_freq);
 8021538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802153c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8021540:	b2d8      	uxtb	r0, r3
 8021542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021546:	f993 3015 	ldrsb.w	r3, [r3, #21]
 802154a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802154e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8021552:	9201      	str	r2, [sp, #4]
 8021554:	9300      	str	r3, [sp, #0]
 8021556:	2308      	movs	r3, #8
 8021558:	2201      	movs	r2, #1
 802155a:	2107      	movs	r1, #7
 802155c:	f7f1 fd68 	bl	8013030 <chirp_radio_config>

				TRACE_MSG("---------CHIRP_VERSION---------\n");
 8021560:	4866      	ldr	r0, [pc, #408]	; (80216fc <chirp_start+0x236c>)
 8021562:	f001 f8f3 	bl	802274c <puts>
 8021566:	4b66      	ldr	r3, [pc, #408]	; (8021700 <chirp_start+0x2370>)
 8021568:	4a66      	ldr	r2, [pc, #408]	; (8021704 <chirp_start+0x2374>)
 802156a:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 802156e:	4618      	mov	r0, r3
 8021570:	f000 f90e 	bl	8021790 <trace_store_msg>
 8021574:	f000 f98e 	bl	8021894 <trace_to_flash>
				// TODO: tune those parameters
				chirp_outl.num_nodes = network_num_nodes;
 8021578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802157c:	f107 020e 	add.w	r2, r7, #14
 8021580:	7812      	ldrb	r2, [r2, #0]
 8021582:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				chirp_outl.generation_size = chirp_outl.num_nodes;
 8021586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802158a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 802158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				chirp_outl.payload_len = DATA_HEADER_LENGTH + 3;
 8021596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802159a:	220b      	movs	r2, #11
 802159c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				chirp_outl.round_setup = 1;
 80215a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215a4:	2201      	movs	r2, #1
 80215a6:	715a      	strb	r2, [r3, #5]

				uint16_t file_size = (((chirp_outl.num_nodes + 1) / 2) * 2) * sizeof(uint32_t);
 80215a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80215b0:	3301      	adds	r3, #1
 80215b2:	0fda      	lsrs	r2, r3, #31
 80215b4:	4413      	add	r3, r2
 80215b6:	105b      	asrs	r3, r3, #1
 80215b8:	b29b      	uxth	r3, r3
 80215ba:	00db      	lsls	r3, r3, #3
 80215bc:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
				chirp_outl.round_max = chirp_outl.round_setup;
 80215c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215c4:	795b      	ldrb	r3, [r3, #5]
 80215c6:	b29a      	uxth	r2, r3
 80215c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215cc:	f8a3 2003 	strh.w	r2, [r3, #3]

				chirp_packet_config(chirp_outl.num_nodes, chirp_outl.generation_size, chirp_outl.payload_len+ HASH_TAIL, COLLECTION);
 80215d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215d4:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
 80215d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215dc:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80215e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80215e8:	3302      	adds	r3, #2
 80215ea:	b2da      	uxtb	r2, r3
 80215ec:	2303      	movs	r3, #3
 80215ee:	f7f1 faab 	bl	8012b48 <chirp_packet_config>
        chirp_outl.packet_time = SX1276GetPacketTime(chirp_config.lora_sf, chirp_config.lora_bw, 1, 0, 8, chirp_config.phy_payload_size + HASH_TAIL_CODE);
 80215f2:	4b45      	ldr	r3, [pc, #276]	; (8021708 <chirp_start+0x2378>)
 80215f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80215f8:	4618      	mov	r0, r3
 80215fa:	4b43      	ldr	r3, [pc, #268]	; (8021708 <chirp_start+0x2378>)
 80215fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021600:	4619      	mov	r1, r3
 8021602:	4b41      	ldr	r3, [pc, #260]	; (8021708 <chirp_start+0x2378>)
 8021604:	8a5b      	ldrh	r3, [r3, #18]
 8021606:	b29b      	uxth	r3, r3
 8021608:	3302      	adds	r3, #2
 802160a:	9301      	str	r3, [sp, #4]
 802160c:	2308      	movs	r3, #8
 802160e:	9300      	str	r3, [sp, #0]
 8021610:	2300      	movs	r3, #0
 8021612:	2201      	movs	r2, #1
 8021614:	f7eb fcfe 	bl	800d014 <SX1276GetPacketTime>
 8021618:	4603      	mov	r3, r0
 802161a:	461a      	mov	r2, r3
 802161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021620:	f8c3 2007 	str.w	r2, [r3, #7]
        chirp_slot_config(chirp_outl.packet_time + 100000, chirp_outl.default_slot_num, 1500000);
 8021624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021628:	f8d3 3007 	ldr.w	r3, [r3, #7]
 802162c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8021630:	33a0      	adds	r3, #160	; 0xa0
 8021632:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021636:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 802163a:	b291      	uxth	r1, r2
 802163c:	4a33      	ldr	r2, [pc, #204]	; (802170c <chirp_start+0x237c>)
 802163e:	4618      	mov	r0, r3
 8021640:	f7f1 fc8a 	bl	8012f58 <chirp_slot_config>
				chirp_payload_distribution(chirp_outl.task);
 8021644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021648:	781b      	ldrb	r3, [r3, #0]
 802164a:	4618      	mov	r0, r3
 802164c:	f7f1 fd50 	bl	80130f0 <chirp_payload_distribution>
        while (gpi_tick_compare_fast_native(gpi_tick_fast_native(), deadline) < 0);
 8021650:	bf00      	nop
 8021652:	4b21      	ldr	r3, [pc, #132]	; (80216d8 <chirp_start+0x2348>)
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021658:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802165c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8021660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8021664:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8021668:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802166c:	1ad3      	subs	r3, r2, r3
 802166e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8021672:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8021676:	2b00      	cmp	r3, #0
 8021678:	db07      	blt.n	802168a <chirp_start+0x22fa>
 802167a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802167e:	2b00      	cmp	r3, #0
 8021680:	bf14      	ite	ne
 8021682:	2301      	movne	r3, #1
 8021684:	2300      	moveq	r3, #0
 8021686:	b2db      	uxtb	r3, r3
 8021688:	e001      	b.n	802168e <chirp_start+0x22fe>
 802168a:	f04f 33ff 	mov.w	r3, #4294967295
 802168e:	2b00      	cmp	r3, #0
 8021690:	dbdf      	blt.n	8021652 <chirp_start+0x22c2>
				// chirp_round(node_id, &chirp_outl);
        if (!chirp_round(node_id, &chirp_outl))
 8021692:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8021696:	f107 030f 	add.w	r3, r7, #15
 802169a:	781b      	ldrb	r3, [r3, #0]
 802169c:	4611      	mov	r1, r2
 802169e:	4618      	mov	r0, r3
 80216a0:	f7f3 fbe4 	bl	8014e6c <chirp_round>
 80216a4:	4603      	mov	r3, r0
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	d105      	bne.n	80216b6 <chirp_start+0x2326>
        {
          free(payload_distribution);
 80216aa:	4b0f      	ldr	r3, [pc, #60]	; (80216e8 <chirp_start+0x2358>)
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	4618      	mov	r0, r3
 80216b0:	f000 f9a4 	bl	80219fc <free>
          break;
 80216b4:	e00c      	b.n	80216d0 <chirp_start+0x2340>
        }
				free(payload_distribution);
 80216b6:	4b0c      	ldr	r3, [pc, #48]	; (80216e8 <chirp_start+0x2358>)
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	4618      	mov	r0, r3
 80216bc:	f000 f99e 	bl	80219fc <free>
				break;
 80216c0:	e006      	b.n	80216d0 <chirp_start+0x2340>
			}
			default:
				break;
 80216c2:	bf00      	nop
 80216c4:	f7fd bed4 	b.w	801f470 <chirp_start+0xe0>
				break;
 80216c8:	bf00      	nop
 80216ca:	f7fd bed1 	b.w	801f470 <chirp_start+0xe0>
				break;
 80216ce:	bf00      	nop
	{
 80216d0:	f7fd bece 	b.w	801f470 <chirp_start+0xe0>
 80216d4:	2000112c 	.word	0x2000112c
 80216d8:	200012c8 	.word	0x200012c8
 80216dc:	20001308 	.word	0x20001308
 80216e0:	20000f10 	.word	0x20000f10
 80216e4:	20000d00 	.word	0x20000d00
 80216e8:	20000cc8 	.word	0x20000cc8
 80216ec:	0807c840 	.word	0x0807c840
 80216f0:	0807c880 	.word	0x0807c880
 80216f4:	2000149c 	.word	0x2000149c
 80216f8:	0807c000 	.word	0x0807c000
 80216fc:	08026d2c 	.word	0x08026d2c
 8021700:	08026b59 	.word	0x08026b59
 8021704:	08026d4c 	.word	0x08026d4c
 8021708:	20001430 	.word	0x20001430
 802170c:	0016e360 	.word	0x0016e360

08021710 <Reset_Handler>:
					)
				}
#endif

void Reset_Handler(void)
{
 8021710:	b580      	push	{r7, lr}
 8021712:	b082      	sub	sp, #8
 8021714:	af00      	add	r7, sp, #0
					__ASM volatile
 8021716:	f8df d060 	ldr.w	sp, [pc, #96]	; 8021778 <LoopForever+0x10>
 802171a:	2100      	movs	r1, #0
 802171c:	e003      	b.n	8021726 <LoopCopyDataInit>

0802171e <CopyDataInit>:
 802171e:	4b17      	ldr	r3, [pc, #92]	; (802177c <LoopForever+0x14>)
 8021720:	585b      	ldr	r3, [r3, r1]
 8021722:	5043      	str	r3, [r0, r1]
 8021724:	3104      	adds	r1, #4

08021726 <LoopCopyDataInit>:
 8021726:	4816      	ldr	r0, [pc, #88]	; (8021780 <LoopForever+0x18>)
 8021728:	4b16      	ldr	r3, [pc, #88]	; (8021784 <LoopForever+0x1c>)
 802172a:	1842      	adds	r2, r0, r1
 802172c:	429a      	cmp	r2, r3
 802172e:	d3f6      	bcc.n	802171e <CopyDataInit>
 8021730:	4a15      	ldr	r2, [pc, #84]	; (8021788 <LoopForever+0x20>)
 8021732:	e002      	b.n	802173a <LoopFillZerobss>

08021734 <FillZerobss>:
 8021734:	2300      	movs	r3, #0
 8021736:	f842 3b04 	str.w	r3, [r2], #4

0802173a <LoopFillZerobss>:
 802173a:	4b14      	ldr	r3, [pc, #80]	; (802178c <LoopForever+0x24>)
 802173c:	429a      	cmp	r2, r3
 802173e:	d3f9      	bcc.n	8021734 <FillZerobss>
	#if defined ( __GNUC__ )
		BEFORE_MAIN();
		SystemInit();
 8021740:	f7e0 f91a 	bl	8001978 <SystemInit>
	#else
		SystemInit();
	#endif
	/* Only examine JUMP when in bank 2 */
	uint32_t BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8021744:	4b0b      	ldr	r3, [pc, #44]	; (8021774 <LoopForever+0xc>)
 8021746:	681b      	ldr	r3, [r3, #0]
 8021748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802174c:	607b      	str	r3, [r7, #4]
	if (((BankActive != 0) && (TOGGLE_RESET_EXTI_CALLBACK() == FLAG_WRT_OK)) || (BankActive == 0))
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	2b00      	cmp	r3, #0
 8021752:	d004      	beq.n	802175e <LoopFillZerobss+0x24>
 8021754:	f003 fe98 	bl	8025488 <_etext>
 8021758:	4603      	mov	r3, r0
 802175a:	2b00      	cmp	r3, #0
 802175c:	d002      	beq.n	8021764 <LoopFillZerobss+0x2a>
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d102      	bne.n	802176a <LoopForever+0x2>
					__ASM volatile
 8021764:	f7df fd9e 	bl	80012a4 <main>

08021768 <LoopForever>:
 8021768:	e7fe      	b.n	8021768 <LoopForever>
		INTO_MAIN();
}
 802176a:	bf00      	nop
 802176c:	3708      	adds	r7, #8
 802176e:	46bd      	mov	sp, r7
 8021770:	bd80      	pop	{r7, pc}
 8021772:	bf00      	nop
 8021774:	40010000 	.word	0x40010000
 8021778:	20018000 	.word	0x20018000
 802177c:	080277a0 	.word	0x080277a0
 8021780:	20000000 	.word	0x20000000
 8021784:	20000328 	.word	0x20000328
 8021788:	20000328 	.word	0x20000328
 802178c:	200022e0 	.word	0x200022e0

08021790 <trace_store_msg>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void trace_store_msg(const char* file_name, const int file_line, const char* fmt, ...)
{
 8021790:	b40c      	push	{r2, r3}
 8021792:	b590      	push	{r4, r7, lr}
 8021794:	b08d      	sub	sp, #52	; 0x34
 8021796:	af00      	add	r7, sp, #0
 8021798:	6078      	str	r0, [r7, #4]
 802179a:	6039      	str	r1, [r7, #0]
	__ASM volatile
 802179c:	f3ef 8310 	mrs	r3, PRIMASK
 80217a0:	b672      	cpsid	i
 80217a2:	461c      	mov	r4, r3
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80217a4:	f3bf 8f5f 	dmb	sy
	return ie;
 80217a8:	4623      	mov	r3, r4
	Trace_Msg *msg;
	unsigned int num_writing;
	int	ie;

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 80217aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    num_writing = s_msg_queue_num_writing++;
 80217ac:	4b35      	ldr	r3, [pc, #212]	; (8021884 <trace_store_msg+0xf4>)
 80217ae:	681b      	ldr	r3, [r3, #0]
 80217b0:	1c5a      	adds	r2, r3, #1
 80217b2:	4934      	ldr	r1, [pc, #208]	; (8021884 <trace_store_msg+0xf4>)
 80217b4:	600a      	str	r2, [r1, #0]
 80217b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80217b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217ba:	61fb      	str	r3, [r7, #28]
 80217bc:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80217c0:	69fb      	ldr	r3, [r7, #28]
 80217c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80217c4:	69bb      	ldr	r3, [r7, #24]
 80217c6:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
    /* copy to the queue */
	msg = &s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS];
 80217ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217cc:	f003 030f 	and.w	r3, r3, #15
 80217d0:	01db      	lsls	r3, r3, #7
 80217d2:	4a2d      	ldr	r2, [pc, #180]	; (8021888 <trace_store_msg+0xf8>)
 80217d4:	4413      	add	r3, r2
 80217d6:	627b      	str	r3, [r7, #36]	; 0x24
    memset((Trace_Msg *)&s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS], 0, sizeof(Trace_Msg));
 80217d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217da:	f003 030f 	and.w	r3, r3, #15
 80217de:	01db      	lsls	r3, r3, #7
 80217e0:	4a29      	ldr	r2, [pc, #164]	; (8021888 <trace_store_msg+0xf8>)
 80217e2:	4413      	add	r3, r2
 80217e4:	2280      	movs	r2, #128	; 0x80
 80217e6:	2100      	movs	r1, #0
 80217e8:	4618      	mov	r0, r3
 80217ea:	f000 f91a 	bl	8021a22 <memset>

    memcpy(msg->file_name, file_name, sizeof(msg->file_name));
 80217ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217f0:	220e      	movs	r2, #14
 80217f2:	6879      	ldr	r1, [r7, #4]
 80217f4:	4618      	mov	r0, r3
 80217f6:	f000 f909 	bl	8021a0c <memcpy>
    msg->file_line = file_line;
 80217fa:	683b      	ldr	r3, [r7, #0]
 80217fc:	b29a      	uxth	r2, r3
 80217fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021800:	81da      	strh	r2, [r3, #14]
    memcpy(msg->arguments, fmt, sizeof(msg->arguments));
 8021802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021804:	3310      	adds	r3, #16
 8021806:	2240      	movs	r2, #64	; 0x40
 8021808:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802180a:	4618      	mov	r0, r3
 802180c:	f000 f8fe 	bl	8021a0c <memcpy>

    /* save parameters */
    va_list va;
    va_start(va, fmt);
 8021810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8021814:	60fb      	str	r3, [r7, #12]
    size_t va_size_max = (uintptr_t)_estack - (uintptr_t)(va.__ap);
 8021816:	4b1d      	ldr	r3, [pc, #116]	; (802188c <trace_store_msg+0xfc>)
 8021818:	68fa      	ldr	r2, [r7, #12]
 802181a:	1a9b      	subs	r3, r3, r2
 802181c:	623b      	str	r3, [r7, #32]
    if (sizeof(msg->var_args) > va_size_max)
 802181e:	6a3b      	ldr	r3, [r7, #32]
 8021820:	2b2f      	cmp	r3, #47	; 0x2f
 8021822:	d807      	bhi.n	8021834 <trace_store_msg+0xa4>
        memcpy(msg->var_args, va.__ap, va_size_max);
 8021824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021826:	3350      	adds	r3, #80	; 0x50
 8021828:	68f9      	ldr	r1, [r7, #12]
 802182a:	6a3a      	ldr	r2, [r7, #32]
 802182c:	4618      	mov	r0, r3
 802182e:	f000 f8ed 	bl	8021a0c <memcpy>
 8021832:	e006      	b.n	8021842 <trace_store_msg+0xb2>
    else memcpy(msg->var_args, va.__ap, sizeof(msg->var_args));
 8021834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021836:	3350      	adds	r3, #80	; 0x50
 8021838:	68f9      	ldr	r1, [r7, #12]
 802183a:	2230      	movs	r2, #48	; 0x30
 802183c:	4618      	mov	r0, r3
 802183e:	f000 f8e5 	bl	8021a0c <memcpy>
	__ASM volatile
 8021842:	f3ef 8310 	mrs	r3, PRIMASK
 8021846:	b672      	cpsid	i
 8021848:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 802184a:	f3bf 8f5f 	dmb	sy
	return ie;
 802184e:	4623      	mov	r3, r4
    va_end(va);

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 8021850:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (s_msg_queue_num_written == num_writing)
 8021852:	4b0f      	ldr	r3, [pc, #60]	; (8021890 <trace_store_msg+0x100>)
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021858:	429a      	cmp	r2, r3
 802185a:	d103      	bne.n	8021864 <trace_store_msg+0xd4>
		s_msg_queue_num_written = s_msg_queue_num_writing;
 802185c:	4b09      	ldr	r3, [pc, #36]	; (8021884 <trace_store_msg+0xf4>)
 802185e:	681b      	ldr	r3, [r3, #0]
 8021860:	4a0b      	ldr	r2, [pc, #44]	; (8021890 <trace_store_msg+0x100>)
 8021862:	6013      	str	r3, [r2, #0]
 8021864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021866:	617b      	str	r3, [r7, #20]
 8021868:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 802186c:	697b      	ldr	r3, [r7, #20]
 802186e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021870:	693b      	ldr	r3, [r7, #16]
 8021872:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 8021876:	bf00      	nop
 8021878:	3734      	adds	r7, #52	; 0x34
 802187a:	46bd      	mov	sp, r7
 802187c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8021880:	b002      	add	sp, #8
 8021882:	4770      	bx	lr
 8021884:	20000c90 	.word	0x20000c90
 8021888:	2000048c 	.word	0x2000048c
 802188c:	20018000 	.word	0x20018000
 8021890:	20000c8c 	.word	0x20000c8c

08021894 <trace_to_flash>:

void trace_to_flash()
{
 8021894:	b590      	push	{r4, r7, lr}
 8021896:	b085      	sub	sp, #20
 8021898:	af00      	add	r7, sp, #0
	uint8_t	num_read_start;
    int8_t i, k = 0;
 802189a:	2300      	movs	r3, #0
 802189c:	737b      	strb	r3, [r7, #13]
	__ASM volatile
 802189e:	f3ef 8310 	mrs	r3, PRIMASK
 80218a2:	b672      	cpsid	i
 80218a4:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 80218a6:	f3bf 8f5f 	dmb	sy
	return ie;
 80218aa:	4623      	mov	r3, r4
	int	ie;
	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 80218ac:	60bb      	str	r3, [r7, #8]

    // erase flash
    LL_FLASH_PageErase(TRACE_PAGE);
 80218ae:	20fa      	movs	r0, #250	; 0xfa
 80218b0:	f7fb fa02 	bl	801ccb8 <LL_FLASH_PageErase>

    /* loop the queue */
    num_read_start = (uint8_t)(s_msg_queue_num_written % TRACE_BUFFER_ELEMENTS) - 1;
 80218b4:	4b30      	ldr	r3, [pc, #192]	; (8021978 <trace_to_flash+0xe4>)
 80218b6:	681b      	ldr	r3, [r3, #0]
 80218b8:	b2db      	uxtb	r3, r3
 80218ba:	f003 030f 	and.w	r3, r3, #15
 80218be:	b2db      	uxtb	r3, r3
 80218c0:	3b01      	subs	r3, #1
 80218c2:	73fb      	strb	r3, [r7, #15]
    if (num_read_start == 0xFF)
 80218c4:	7bfb      	ldrb	r3, [r7, #15]
 80218c6:	2bff      	cmp	r3, #255	; 0xff
 80218c8:	d101      	bne.n	80218ce <trace_to_flash+0x3a>
        num_read_start = TRACE_BUFFER_ELEMENTS - 1;
 80218ca:	230f      	movs	r3, #15
 80218cc:	73fb      	strb	r3, [r7, #15]
    for (i = num_read_start; i >= 0; i--, k++)
 80218ce:	7bfb      	ldrb	r3, [r7, #15]
 80218d0:	73bb      	strb	r3, [r7, #14]
 80218d2:	e01b      	b.n	802190c <trace_to_flash+0x78>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 80218d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80218d8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80218dc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80218e0:	01d8      	lsls	r0, r3, #7
 80218e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218e6:	01db      	lsls	r3, r3, #7
 80218e8:	4a24      	ldr	r2, [pc, #144]	; (802197c <trace_to_flash+0xe8>)
 80218ea:	4413      	add	r3, r2
 80218ec:	2220      	movs	r2, #32
 80218ee:	4619      	mov	r1, r3
 80218f0:	f7fb fa7c 	bl	801cdec <LL_FLASH_Program64s>
    for (i = num_read_start; i >= 0; i--, k++)
 80218f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218f8:	b2db      	uxtb	r3, r3
 80218fa:	3b01      	subs	r3, #1
 80218fc:	b2db      	uxtb	r3, r3
 80218fe:	73bb      	strb	r3, [r7, #14]
 8021900:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8021904:	b2db      	uxtb	r3, r3
 8021906:	3301      	adds	r3, #1
 8021908:	b2db      	uxtb	r3, r3
 802190a:	737b      	strb	r3, [r7, #13]
 802190c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021910:	2b00      	cmp	r3, #0
 8021912:	dadf      	bge.n	80218d4 <trace_to_flash+0x40>
    }
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 8021914:	230f      	movs	r3, #15
 8021916:	73bb      	strb	r3, [r7, #14]
 8021918:	e01b      	b.n	8021952 <trace_to_flash+0xbe>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 802191a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802191e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021922:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8021926:	01d8      	lsls	r0, r3, #7
 8021928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802192c:	01db      	lsls	r3, r3, #7
 802192e:	4a13      	ldr	r2, [pc, #76]	; (802197c <trace_to_flash+0xe8>)
 8021930:	4413      	add	r3, r2
 8021932:	2220      	movs	r2, #32
 8021934:	4619      	mov	r1, r3
 8021936:	f7fb fa59 	bl	801cdec <LL_FLASH_Program64s>
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 802193a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802193e:	b2db      	uxtb	r3, r3
 8021940:	3b01      	subs	r3, #1
 8021942:	b2db      	uxtb	r3, r3
 8021944:	73bb      	strb	r3, [r7, #14]
 8021946:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802194a:	b2db      	uxtb	r3, r3
 802194c:	3301      	adds	r3, #1
 802194e:	b2db      	uxtb	r3, r3
 8021950:	737b      	strb	r3, [r7, #13]
 8021952:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8021956:	7bfb      	ldrb	r3, [r7, #15]
 8021958:	429a      	cmp	r2, r3
 802195a:	dcde      	bgt.n	802191a <trace_to_flash+0x86>
 802195c:	68bb      	ldr	r3, [r7, #8]
 802195e:	607b      	str	r3, [r7, #4]
 8021960:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021968:	683b      	ldr	r3, [r7, #0]
 802196a:	f383 8810 	msr	PRIMASK, r3
    }

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 802196e:	bf00      	nop
 8021970:	3714      	adds	r7, #20
 8021972:	46bd      	mov	sp, r7
 8021974:	bd90      	pop	{r4, r7, pc}
 8021976:	bf00      	nop
 8021978:	20000c8c 	.word	0x20000c8c
 802197c:	2000048c 	.word	0x2000048c

08021980 <__assert_func>:
 8021980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021982:	461c      	mov	r4, r3
 8021984:	4b09      	ldr	r3, [pc, #36]	; (80219ac <__assert_func+0x2c>)
 8021986:	681b      	ldr	r3, [r3, #0]
 8021988:	4605      	mov	r5, r0
 802198a:	68d8      	ldr	r0, [r3, #12]
 802198c:	b152      	cbz	r2, 80219a4 <__assert_func+0x24>
 802198e:	4b08      	ldr	r3, [pc, #32]	; (80219b0 <__assert_func+0x30>)
 8021990:	9100      	str	r1, [sp, #0]
 8021992:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021996:	4907      	ldr	r1, [pc, #28]	; (80219b4 <__assert_func+0x34>)
 8021998:	462b      	mov	r3, r5
 802199a:	4622      	mov	r2, r4
 802199c:	f000 f814 	bl	80219c8 <fiprintf>
 80219a0:	f001 faf6 	bl	8022f90 <abort>
 80219a4:	4b04      	ldr	r3, [pc, #16]	; (80219b8 <__assert_func+0x38>)
 80219a6:	461a      	mov	r2, r3
 80219a8:	e7f2      	b.n	8021990 <__assert_func+0x10>
 80219aa:	bf00      	nop
 80219ac:	200000f4 	.word	0x200000f4
 80219b0:	08027048 	.word	0x08027048
 80219b4:	08027055 	.word	0x08027055
 80219b8:	08027083 	.word	0x08027083

080219bc <__assert>:
 80219bc:	b508      	push	{r3, lr}
 80219be:	4613      	mov	r3, r2
 80219c0:	2200      	movs	r2, #0
 80219c2:	f7ff ffdd 	bl	8021980 <__assert_func>
	...

080219c8 <fiprintf>:
 80219c8:	b40e      	push	{r1, r2, r3}
 80219ca:	b503      	push	{r0, r1, lr}
 80219cc:	4601      	mov	r1, r0
 80219ce:	ab03      	add	r3, sp, #12
 80219d0:	4805      	ldr	r0, [pc, #20]	; (80219e8 <fiprintf+0x20>)
 80219d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80219d6:	6800      	ldr	r0, [r0, #0]
 80219d8:	9301      	str	r3, [sp, #4]
 80219da:	f000 fb91 	bl	8022100 <_vfiprintf_r>
 80219de:	b002      	add	sp, #8
 80219e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80219e4:	b003      	add	sp, #12
 80219e6:	4770      	bx	lr
 80219e8:	200000f4 	.word	0x200000f4

080219ec <malloc>:
 80219ec:	4b02      	ldr	r3, [pc, #8]	; (80219f8 <malloc+0xc>)
 80219ee:	4601      	mov	r1, r0
 80219f0:	6818      	ldr	r0, [r3, #0]
 80219f2:	f000 bb01 	b.w	8021ff8 <_malloc_r>
 80219f6:	bf00      	nop
 80219f8:	200000f4 	.word	0x200000f4

080219fc <free>:
 80219fc:	4b02      	ldr	r3, [pc, #8]	; (8021a08 <free+0xc>)
 80219fe:	4601      	mov	r1, r0
 8021a00:	6818      	ldr	r0, [r3, #0]
 8021a02:	f000 baab 	b.w	8021f5c <_free_r>
 8021a06:	bf00      	nop
 8021a08:	200000f4 	.word	0x200000f4

08021a0c <memcpy>:
 8021a0c:	b510      	push	{r4, lr}
 8021a0e:	1e43      	subs	r3, r0, #1
 8021a10:	440a      	add	r2, r1
 8021a12:	4291      	cmp	r1, r2
 8021a14:	d100      	bne.n	8021a18 <memcpy+0xc>
 8021a16:	bd10      	pop	{r4, pc}
 8021a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021a20:	e7f7      	b.n	8021a12 <memcpy+0x6>

08021a22 <memset>:
 8021a22:	4402      	add	r2, r0
 8021a24:	4603      	mov	r3, r0
 8021a26:	4293      	cmp	r3, r2
 8021a28:	d100      	bne.n	8021a2c <memset+0xa>
 8021a2a:	4770      	bx	lr
 8021a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8021a30:	e7f9      	b.n	8021a26 <memset+0x4>
	...

08021a34 <validate_structure>:
 8021a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a36:	6801      	ldr	r1, [r0, #0]
 8021a38:	293b      	cmp	r1, #59	; 0x3b
 8021a3a:	4604      	mov	r4, r0
 8021a3c:	d911      	bls.n	8021a62 <validate_structure+0x2e>
 8021a3e:	223c      	movs	r2, #60	; 0x3c
 8021a40:	4668      	mov	r0, sp
 8021a42:	f001 faac 	bl	8022f9e <div>
 8021a46:	9a01      	ldr	r2, [sp, #4]
 8021a48:	6863      	ldr	r3, [r4, #4]
 8021a4a:	9900      	ldr	r1, [sp, #0]
 8021a4c:	2a00      	cmp	r2, #0
 8021a4e:	440b      	add	r3, r1
 8021a50:	6063      	str	r3, [r4, #4]
 8021a52:	bfbb      	ittet	lt
 8021a54:	323c      	addlt	r2, #60	; 0x3c
 8021a56:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021a5a:	6022      	strge	r2, [r4, #0]
 8021a5c:	6022      	strlt	r2, [r4, #0]
 8021a5e:	bfb8      	it	lt
 8021a60:	6063      	strlt	r3, [r4, #4]
 8021a62:	6861      	ldr	r1, [r4, #4]
 8021a64:	293b      	cmp	r1, #59	; 0x3b
 8021a66:	d911      	bls.n	8021a8c <validate_structure+0x58>
 8021a68:	223c      	movs	r2, #60	; 0x3c
 8021a6a:	4668      	mov	r0, sp
 8021a6c:	f001 fa97 	bl	8022f9e <div>
 8021a70:	9a01      	ldr	r2, [sp, #4]
 8021a72:	68a3      	ldr	r3, [r4, #8]
 8021a74:	9900      	ldr	r1, [sp, #0]
 8021a76:	2a00      	cmp	r2, #0
 8021a78:	440b      	add	r3, r1
 8021a7a:	60a3      	str	r3, [r4, #8]
 8021a7c:	bfbb      	ittet	lt
 8021a7e:	323c      	addlt	r2, #60	; 0x3c
 8021a80:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021a84:	6062      	strge	r2, [r4, #4]
 8021a86:	6062      	strlt	r2, [r4, #4]
 8021a88:	bfb8      	it	lt
 8021a8a:	60a3      	strlt	r3, [r4, #8]
 8021a8c:	68a1      	ldr	r1, [r4, #8]
 8021a8e:	2917      	cmp	r1, #23
 8021a90:	d911      	bls.n	8021ab6 <validate_structure+0x82>
 8021a92:	2218      	movs	r2, #24
 8021a94:	4668      	mov	r0, sp
 8021a96:	f001 fa82 	bl	8022f9e <div>
 8021a9a:	9a01      	ldr	r2, [sp, #4]
 8021a9c:	68e3      	ldr	r3, [r4, #12]
 8021a9e:	9900      	ldr	r1, [sp, #0]
 8021aa0:	2a00      	cmp	r2, #0
 8021aa2:	440b      	add	r3, r1
 8021aa4:	60e3      	str	r3, [r4, #12]
 8021aa6:	bfbb      	ittet	lt
 8021aa8:	3218      	addlt	r2, #24
 8021aaa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021aae:	60a2      	strge	r2, [r4, #8]
 8021ab0:	60a2      	strlt	r2, [r4, #8]
 8021ab2:	bfb8      	it	lt
 8021ab4:	60e3      	strlt	r3, [r4, #12]
 8021ab6:	6921      	ldr	r1, [r4, #16]
 8021ab8:	290b      	cmp	r1, #11
 8021aba:	d911      	bls.n	8021ae0 <validate_structure+0xac>
 8021abc:	220c      	movs	r2, #12
 8021abe:	4668      	mov	r0, sp
 8021ac0:	f001 fa6d 	bl	8022f9e <div>
 8021ac4:	9a01      	ldr	r2, [sp, #4]
 8021ac6:	6963      	ldr	r3, [r4, #20]
 8021ac8:	9900      	ldr	r1, [sp, #0]
 8021aca:	2a00      	cmp	r2, #0
 8021acc:	440b      	add	r3, r1
 8021ace:	6163      	str	r3, [r4, #20]
 8021ad0:	bfbb      	ittet	lt
 8021ad2:	320c      	addlt	r2, #12
 8021ad4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8021ad8:	6122      	strge	r2, [r4, #16]
 8021ada:	6122      	strlt	r2, [r4, #16]
 8021adc:	bfb8      	it	lt
 8021ade:	6163      	strlt	r3, [r4, #20]
 8021ae0:	6963      	ldr	r3, [r4, #20]
 8021ae2:	0799      	lsls	r1, r3, #30
 8021ae4:	d120      	bne.n	8021b28 <validate_structure+0xf4>
 8021ae6:	2164      	movs	r1, #100	; 0x64
 8021ae8:	fb93 f2f1 	sdiv	r2, r3, r1
 8021aec:	fb01 3212 	mls	r2, r1, r2, r3
 8021af0:	b9e2      	cbnz	r2, 8021b2c <validate_structure+0xf8>
 8021af2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8021af6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021afa:	fb93 f2f1 	sdiv	r2, r3, r1
 8021afe:	fb01 3312 	mls	r3, r1, r2, r3
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	bf14      	ite	ne
 8021b06:	231c      	movne	r3, #28
 8021b08:	231d      	moveq	r3, #29
 8021b0a:	68e2      	ldr	r2, [r4, #12]
 8021b0c:	2a00      	cmp	r2, #0
 8021b0e:	dc0f      	bgt.n	8021b30 <validate_structure+0xfc>
 8021b10:	4f34      	ldr	r7, [pc, #208]	; (8021be4 <validate_structure+0x1b0>)
 8021b12:	260b      	movs	r6, #11
 8021b14:	2064      	movs	r0, #100	; 0x64
 8021b16:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8021b1a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8021b1e:	f1bc 0f00 	cmp.w	ip, #0
 8021b22:	dd14      	ble.n	8021b4e <validate_structure+0x11a>
 8021b24:	b003      	add	sp, #12
 8021b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b28:	231c      	movs	r3, #28
 8021b2a:	e7ee      	b.n	8021b0a <validate_structure+0xd6>
 8021b2c:	231d      	movs	r3, #29
 8021b2e:	e7ec      	b.n	8021b0a <validate_structure+0xd6>
 8021b30:	4f2c      	ldr	r7, [pc, #176]	; (8021be4 <validate_structure+0x1b0>)
 8021b32:	f04f 0c00 	mov.w	ip, #0
 8021b36:	2564      	movs	r5, #100	; 0x64
 8021b38:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8021b3c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8021b40:	2a01      	cmp	r2, #1
 8021b42:	d02f      	beq.n	8021ba4 <validate_structure+0x170>
 8021b44:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8021b48:	4281      	cmp	r1, r0
 8021b4a:	dc2e      	bgt.n	8021baa <validate_structure+0x176>
 8021b4c:	e7ea      	b.n	8021b24 <validate_structure+0xf0>
 8021b4e:	6921      	ldr	r1, [r4, #16]
 8021b50:	3901      	subs	r1, #1
 8021b52:	6121      	str	r1, [r4, #16]
 8021b54:	3101      	adds	r1, #1
 8021b56:	d114      	bne.n	8021b82 <validate_structure+0x14e>
 8021b58:	6963      	ldr	r3, [r4, #20]
 8021b5a:	1e59      	subs	r1, r3, #1
 8021b5c:	078a      	lsls	r2, r1, #30
 8021b5e:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8021b62:	d117      	bne.n	8021b94 <validate_structure+0x160>
 8021b64:	fb91 f2f0 	sdiv	r2, r1, r0
 8021b68:	fb00 1112 	mls	r1, r0, r2, r1
 8021b6c:	b9a1      	cbnz	r1, 8021b98 <validate_structure+0x164>
 8021b6e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8021b72:	fb93 f2f5 	sdiv	r2, r3, r5
 8021b76:	fb05 3312 	mls	r3, r5, r2, r3
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	bf14      	ite	ne
 8021b7e:	231c      	movne	r3, #28
 8021b80:	231d      	moveq	r3, #29
 8021b82:	6922      	ldr	r2, [r4, #16]
 8021b84:	2a01      	cmp	r2, #1
 8021b86:	bf14      	ite	ne
 8021b88:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8021b8c:	461a      	moveq	r2, r3
 8021b8e:	4462      	add	r2, ip
 8021b90:	60e2      	str	r2, [r4, #12]
 8021b92:	e7c2      	b.n	8021b1a <validate_structure+0xe6>
 8021b94:	231c      	movs	r3, #28
 8021b96:	e7f4      	b.n	8021b82 <validate_structure+0x14e>
 8021b98:	231d      	movs	r3, #29
 8021b9a:	e7f2      	b.n	8021b82 <validate_structure+0x14e>
 8021b9c:	231c      	movs	r3, #28
 8021b9e:	e7cd      	b.n	8021b3c <validate_structure+0x108>
 8021ba0:	231d      	movs	r3, #29
 8021ba2:	e7cb      	b.n	8021b3c <validate_structure+0x108>
 8021ba4:	428b      	cmp	r3, r1
 8021ba6:	dabd      	bge.n	8021b24 <validate_structure+0xf0>
 8021ba8:	4618      	mov	r0, r3
 8021baa:	3201      	adds	r2, #1
 8021bac:	1a09      	subs	r1, r1, r0
 8021bae:	2a0c      	cmp	r2, #12
 8021bb0:	60e1      	str	r1, [r4, #12]
 8021bb2:	6122      	str	r2, [r4, #16]
 8021bb4:	d1c2      	bne.n	8021b3c <validate_structure+0x108>
 8021bb6:	6963      	ldr	r3, [r4, #20]
 8021bb8:	1c5a      	adds	r2, r3, #1
 8021bba:	0791      	lsls	r1, r2, #30
 8021bbc:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8021bc0:	d1ec      	bne.n	8021b9c <validate_structure+0x168>
 8021bc2:	fb92 f1f5 	sdiv	r1, r2, r5
 8021bc6:	fb05 2211 	mls	r2, r5, r1, r2
 8021bca:	2a00      	cmp	r2, #0
 8021bcc:	d1e8      	bne.n	8021ba0 <validate_structure+0x16c>
 8021bce:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8021bd2:	fb93 f2f6 	sdiv	r2, r3, r6
 8021bd6:	fb06 3312 	mls	r3, r6, r2, r3
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	bf14      	ite	ne
 8021bde:	231c      	movne	r3, #28
 8021be0:	231d      	moveq	r3, #29
 8021be2:	e7ab      	b.n	8021b3c <validate_structure+0x108>
 8021be4:	08027088 	.word	0x08027088

08021be8 <mktime>:
 8021be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bec:	b089      	sub	sp, #36	; 0x24
 8021bee:	4606      	mov	r6, r0
 8021bf0:	f001 fba8 	bl	8023344 <__gettzinfo>
 8021bf4:	4680      	mov	r8, r0
 8021bf6:	4630      	mov	r0, r6
 8021bf8:	f7ff ff1c 	bl	8021a34 <validate_structure>
 8021bfc:	e9d6 3000 	ldrd	r3, r0, [r6]
 8021c00:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8021c04:	fb0a 3a00 	mla	sl, sl, r0, r3
 8021c08:	68b0      	ldr	r0, [r6, #8]
 8021c0a:	4abe      	ldr	r2, [pc, #760]	; (8021f04 <mktime+0x31c>)
 8021c0c:	6975      	ldr	r5, [r6, #20]
 8021c0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8021c12:	fb03 aa00 	mla	sl, r3, r0, sl
 8021c16:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8021c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021c1e:	3c01      	subs	r4, #1
 8021c20:	2b01      	cmp	r3, #1
 8021c22:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8021c26:	4414      	add	r4, r2
 8021c28:	dd11      	ble.n	8021c4e <mktime+0x66>
 8021c2a:	07a9      	lsls	r1, r5, #30
 8021c2c:	d10f      	bne.n	8021c4e <mktime+0x66>
 8021c2e:	2264      	movs	r2, #100	; 0x64
 8021c30:	fb95 f3f2 	sdiv	r3, r5, r2
 8021c34:	fb02 5313 	mls	r3, r2, r3, r5
 8021c38:	b943      	cbnz	r3, 8021c4c <mktime+0x64>
 8021c3a:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8021c3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021c42:	fb91 f3f2 	sdiv	r3, r1, r2
 8021c46:	fb02 1313 	mls	r3, r2, r3, r1
 8021c4a:	b903      	cbnz	r3, 8021c4e <mktime+0x66>
 8021c4c:	3401      	adds	r4, #1
 8021c4e:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 8021c52:	3310      	adds	r3, #16
 8021c54:	f644 6220 	movw	r2, #20000	; 0x4e20
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	61f4      	str	r4, [r6, #28]
 8021c5c:	f200 8179 	bhi.w	8021f52 <mktime+0x36a>
 8021c60:	2d46      	cmp	r5, #70	; 0x46
 8021c62:	f340 8084 	ble.w	8021d6e <mktime+0x186>
 8021c66:	2346      	movs	r3, #70	; 0x46
 8021c68:	f240 176d 	movw	r7, #365	; 0x16d
 8021c6c:	2164      	movs	r1, #100	; 0x64
 8021c6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021c72:	079a      	lsls	r2, r3, #30
 8021c74:	d175      	bne.n	8021d62 <mktime+0x17a>
 8021c76:	fb93 f2f1 	sdiv	r2, r3, r1
 8021c7a:	fb01 3212 	mls	r2, r1, r2, r3
 8021c7e:	2a00      	cmp	r2, #0
 8021c80:	d172      	bne.n	8021d68 <mktime+0x180>
 8021c82:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8021c86:	fb9c f2f0 	sdiv	r2, ip, r0
 8021c8a:	fb00 c212 	mls	r2, r0, r2, ip
 8021c8e:	2a00      	cmp	r2, #0
 8021c90:	bf14      	ite	ne
 8021c92:	463a      	movne	r2, r7
 8021c94:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8021c98:	3301      	adds	r3, #1
 8021c9a:	429d      	cmp	r5, r3
 8021c9c:	4414      	add	r4, r2
 8021c9e:	d1e8      	bne.n	8021c72 <mktime+0x8a>
 8021ca0:	4b99      	ldr	r3, [pc, #612]	; (8021f08 <mktime+0x320>)
 8021ca2:	4363      	muls	r3, r4
 8021ca4:	eb1a 0103 	adds.w	r1, sl, r3
 8021ca8:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8021cac:	e9cd 1200 	strd	r1, r2, [sp]
 8021cb0:	f000 ff28 	bl	8022b04 <__tz_lock>
 8021cb4:	f000 ff28 	bl	8022b08 <_tzset_unlocked>
 8021cb8:	4b94      	ldr	r3, [pc, #592]	; (8021f0c <mktime+0x324>)
 8021cba:	f8d3 9000 	ldr.w	r9, [r3]
 8021cbe:	f1b9 0f00 	cmp.w	r9, #0
 8021cc2:	d045      	beq.n	8021d50 <mktime+0x168>
 8021cc4:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8021cc8:	6970      	ldr	r0, [r6, #20]
 8021cca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021cce:	464f      	mov	r7, r9
 8021cd0:	2f01      	cmp	r7, #1
 8021cd2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021cd6:	bfa8      	it	ge
 8021cd8:	2701      	movge	r7, #1
 8021cda:	4283      	cmp	r3, r0
 8021cdc:	f040 8089 	bne.w	8021df2 <mktime+0x20a>
 8021ce0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8021ce4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8021ce8:	460a      	mov	r2, r1
 8021cea:	17cb      	asrs	r3, r1, #31
 8021cec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8021cf0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8021cf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021cf8:	1a12      	subs	r2, r2, r0
 8021cfa:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 8021cfe:	4692      	mov	sl, r2
 8021d00:	469b      	mov	fp, r3
 8021d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021d06:	4552      	cmp	r2, sl
 8021d08:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8021d0c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8021d10:	da76      	bge.n	8021e00 <mktime+0x218>
 8021d12:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8021d16:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021d1a:	ebb2 0a0a 	subs.w	sl, r2, sl
 8021d1e:	eb63 0b0b 	sbc.w	fp, r3, fp
 8021d22:	f8d8 3000 	ldr.w	r3, [r8]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d079      	beq.n	8021e1e <mktime+0x236>
 8021d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021d2e:	4552      	cmp	r2, sl
 8021d30:	eb73 030b 	sbcs.w	r3, r3, fp
 8021d34:	db07      	blt.n	8021d46 <mktime+0x15e>
 8021d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021d3a:	e9dd ab00 	ldrd	sl, fp, [sp]
 8021d3e:	4592      	cmp	sl, r2
 8021d40:	eb7b 0303 	sbcs.w	r3, fp, r3
 8021d44:	db71      	blt.n	8021e2a <mktime+0x242>
 8021d46:	f1b9 0f00 	cmp.w	r9, #0
 8021d4a:	f04f 0900 	mov.w	r9, #0
 8021d4e:	da71      	bge.n	8021e34 <mktime+0x24c>
 8021d50:	e9dd ab00 	ldrd	sl, fp, [sp]
 8021d54:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8021d58:	eb1a 0a03 	adds.w	sl, sl, r3
 8021d5c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8021d60:	e0b4      	b.n	8021ecc <mktime+0x2e4>
 8021d62:	f240 126d 	movw	r2, #365	; 0x16d
 8021d66:	e797      	b.n	8021c98 <mktime+0xb0>
 8021d68:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8021d6c:	e794      	b.n	8021c98 <mktime+0xb0>
 8021d6e:	d097      	beq.n	8021ca0 <mktime+0xb8>
 8021d70:	2345      	movs	r3, #69	; 0x45
 8021d72:	f240 176d 	movw	r7, #365	; 0x16d
 8021d76:	2164      	movs	r1, #100	; 0x64
 8021d78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021d7c:	e012      	b.n	8021da4 <mktime+0x1bc>
 8021d7e:	bb62      	cbnz	r2, 8021dda <mktime+0x1f2>
 8021d80:	fb93 f2f1 	sdiv	r2, r3, r1
 8021d84:	fb01 3212 	mls	r2, r1, r2, r3
 8021d88:	bb52      	cbnz	r2, 8021de0 <mktime+0x1f8>
 8021d8a:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8021d8e:	fb9c f2f0 	sdiv	r2, ip, r0
 8021d92:	fb00 c212 	mls	r2, r0, r2, ip
 8021d96:	2a00      	cmp	r2, #0
 8021d98:	bf14      	ite	ne
 8021d9a:	463a      	movne	r2, r7
 8021d9c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8021da0:	1aa4      	subs	r4, r4, r2
 8021da2:	3b01      	subs	r3, #1
 8021da4:	429d      	cmp	r5, r3
 8021da6:	f003 0203 	and.w	r2, r3, #3
 8021daa:	dbe8      	blt.n	8021d7e <mktime+0x196>
 8021dac:	b9da      	cbnz	r2, 8021de6 <mktime+0x1fe>
 8021dae:	2264      	movs	r2, #100	; 0x64
 8021db0:	fb95 f3f2 	sdiv	r3, r5, r2
 8021db4:	fb02 5313 	mls	r3, r2, r3, r5
 8021db8:	b9c3      	cbnz	r3, 8021dec <mktime+0x204>
 8021dba:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 8021dbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021dc2:	fb91 f3f2 	sdiv	r3, r1, r2
 8021dc6:	fb02 1313 	mls	r3, r2, r3, r1
 8021dca:	2b00      	cmp	r3, #0
 8021dcc:	f240 136d 	movw	r3, #365	; 0x16d
 8021dd0:	bf08      	it	eq
 8021dd2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8021dd6:	1ae4      	subs	r4, r4, r3
 8021dd8:	e762      	b.n	8021ca0 <mktime+0xb8>
 8021dda:	f240 126d 	movw	r2, #365	; 0x16d
 8021dde:	e7df      	b.n	8021da0 <mktime+0x1b8>
 8021de0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8021de4:	e7dc      	b.n	8021da0 <mktime+0x1b8>
 8021de6:	f240 136d 	movw	r3, #365	; 0x16d
 8021dea:	e7f4      	b.n	8021dd6 <mktime+0x1ee>
 8021dec:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8021df0:	e7f1      	b.n	8021dd6 <mktime+0x1ee>
 8021df2:	f000 fddf 	bl	80229b4 <__tzcalc_limits>
 8021df6:	2800      	cmp	r0, #0
 8021df8:	f47f af72 	bne.w	8021ce0 <mktime+0xf8>
 8021dfc:	46b9      	mov	r9, r7
 8021dfe:	e057      	b.n	8021eb0 <mktime+0x2c8>
 8021e00:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8021e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021e08:	ebb2 020a 	subs.w	r2, r2, sl
 8021e0c:	eb63 030b 	sbc.w	r3, r3, fp
 8021e10:	e9dd ab00 	ldrd	sl, fp, [sp]
 8021e14:	4592      	cmp	sl, r2
 8021e16:	eb7b 0303 	sbcs.w	r3, fp, r3
 8021e1a:	dbef      	blt.n	8021dfc <mktime+0x214>
 8021e1c:	e779      	b.n	8021d12 <mktime+0x12a>
 8021e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021e22:	4552      	cmp	r2, sl
 8021e24:	eb73 030b 	sbcs.w	r3, r3, fp
 8021e28:	db85      	blt.n	8021d36 <mktime+0x14e>
 8021e2a:	f1b9 0f00 	cmp.w	r9, #0
 8021e2e:	db43      	blt.n	8021eb8 <mktime+0x2d0>
 8021e30:	f04f 0901 	mov.w	r9, #1
 8021e34:	ea87 0709 	eor.w	r7, r7, r9
 8021e38:	2f01      	cmp	r7, #1
 8021e3a:	d139      	bne.n	8021eb0 <mktime+0x2c8>
 8021e3c:	1a40      	subs	r0, r0, r1
 8021e3e:	f1b9 0f00 	cmp.w	r9, #0
 8021e42:	d100      	bne.n	8021e46 <mktime+0x25e>
 8021e44:	4240      	negs	r0, r0
 8021e46:	6833      	ldr	r3, [r6, #0]
 8021e48:	4403      	add	r3, r0
 8021e4a:	6033      	str	r3, [r6, #0]
 8021e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021e50:	1812      	adds	r2, r2, r0
 8021e52:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8021e56:	e9cd 2300 	strd	r2, r3, [sp]
 8021e5a:	4630      	mov	r0, r6
 8021e5c:	68f2      	ldr	r2, [r6, #12]
 8021e5e:	9202      	str	r2, [sp, #8]
 8021e60:	f7ff fde8 	bl	8021a34 <validate_structure>
 8021e64:	68f3      	ldr	r3, [r6, #12]
 8021e66:	9a02      	ldr	r2, [sp, #8]
 8021e68:	1a9b      	subs	r3, r3, r2
 8021e6a:	d021      	beq.n	8021eb0 <mktime+0x2c8>
 8021e6c:	2b01      	cmp	r3, #1
 8021e6e:	dc40      	bgt.n	8021ef2 <mktime+0x30a>
 8021e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e74:	bfa8      	it	ge
 8021e76:	461f      	movge	r7, r3
 8021e78:	69f3      	ldr	r3, [r6, #28]
 8021e7a:	443c      	add	r4, r7
 8021e7c:	18ff      	adds	r7, r7, r3
 8021e7e:	d547      	bpl.n	8021f10 <mktime+0x328>
 8021e80:	1e6a      	subs	r2, r5, #1
 8021e82:	0791      	lsls	r1, r2, #30
 8021e84:	d138      	bne.n	8021ef8 <mktime+0x310>
 8021e86:	2164      	movs	r1, #100	; 0x64
 8021e88:	fb92 f3f1 	sdiv	r3, r2, r1
 8021e8c:	fb01 2313 	mls	r3, r1, r3, r2
 8021e90:	bbab      	cbnz	r3, 8021efe <mktime+0x316>
 8021e92:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8021e96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021e9a:	fb95 f3f2 	sdiv	r3, r5, r2
 8021e9e:	fb02 5513 	mls	r5, r2, r3, r5
 8021ea2:	2d00      	cmp	r5, #0
 8021ea4:	f240 136d 	movw	r3, #365	; 0x16d
 8021ea8:	bf18      	it	ne
 8021eaa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8021eae:	61f3      	str	r3, [r6, #28]
 8021eb0:	f1b9 0f01 	cmp.w	r9, #1
 8021eb4:	f47f af4c 	bne.w	8021d50 <mktime+0x168>
 8021eb8:	e9dd ab00 	ldrd	sl, fp, [sp]
 8021ebc:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8021ec0:	eb1a 0a03 	adds.w	sl, sl, r3
 8021ec4:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8021ec8:	f04f 0901 	mov.w	r9, #1
 8021ecc:	f000 fe1b 	bl	8022b06 <__tz_unlock>
 8021ed0:	3404      	adds	r4, #4
 8021ed2:	2307      	movs	r3, #7
 8021ed4:	fb94 f3f3 	sdiv	r3, r4, r3
 8021ed8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021edc:	1ae4      	subs	r4, r4, r3
 8021ede:	bf48      	it	mi
 8021ee0:	3407      	addmi	r4, #7
 8021ee2:	f8c6 9020 	str.w	r9, [r6, #32]
 8021ee6:	61b4      	str	r4, [r6, #24]
 8021ee8:	4650      	mov	r0, sl
 8021eea:	4659      	mov	r1, fp
 8021eec:	b009      	add	sp, #36	; 0x24
 8021eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8021ef6:	e7bf      	b.n	8021e78 <mktime+0x290>
 8021ef8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8021efc:	e7d7      	b.n	8021eae <mktime+0x2c6>
 8021efe:	f240 136d 	movw	r3, #365	; 0x16d
 8021f02:	e7d4      	b.n	8021eae <mktime+0x2c6>
 8021f04:	080270b8 	.word	0x080270b8
 8021f08:	00015180 	.word	0x00015180
 8021f0c:	20000cb8 	.word	0x20000cb8
 8021f10:	07ab      	lsls	r3, r5, #30
 8021f12:	d118      	bne.n	8021f46 <mktime+0x35e>
 8021f14:	2264      	movs	r2, #100	; 0x64
 8021f16:	fb95 f3f2 	sdiv	r3, r5, r2
 8021f1a:	fb02 5313 	mls	r3, r2, r3, r5
 8021f1e:	b9ab      	cbnz	r3, 8021f4c <mktime+0x364>
 8021f20:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8021f24:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021f28:	fb95 f3f2 	sdiv	r3, r5, r2
 8021f2c:	fb02 5513 	mls	r5, r2, r3, r5
 8021f30:	2d00      	cmp	r5, #0
 8021f32:	f240 136d 	movw	r3, #365	; 0x16d
 8021f36:	bf08      	it	eq
 8021f38:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8021f3c:	429f      	cmp	r7, r3
 8021f3e:	bfa8      	it	ge
 8021f40:	1aff      	subge	r7, r7, r3
 8021f42:	61f7      	str	r7, [r6, #28]
 8021f44:	e7b4      	b.n	8021eb0 <mktime+0x2c8>
 8021f46:	f240 136d 	movw	r3, #365	; 0x16d
 8021f4a:	e7f7      	b.n	8021f3c <mktime+0x354>
 8021f4c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8021f50:	e7f4      	b.n	8021f3c <mktime+0x354>
 8021f52:	f04f 3aff 	mov.w	sl, #4294967295
 8021f56:	f04f 3bff 	mov.w	fp, #4294967295
 8021f5a:	e7c5      	b.n	8021ee8 <mktime+0x300>

08021f5c <_free_r>:
 8021f5c:	b538      	push	{r3, r4, r5, lr}
 8021f5e:	4605      	mov	r5, r0
 8021f60:	2900      	cmp	r1, #0
 8021f62:	d045      	beq.n	8021ff0 <_free_r+0x94>
 8021f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f68:	1f0c      	subs	r4, r1, #4
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	bfb8      	it	lt
 8021f6e:	18e4      	addlt	r4, r4, r3
 8021f70:	f001 fa8d 	bl	802348e <__malloc_lock>
 8021f74:	4a1f      	ldr	r2, [pc, #124]	; (8021ff4 <_free_r+0x98>)
 8021f76:	6813      	ldr	r3, [r2, #0]
 8021f78:	4610      	mov	r0, r2
 8021f7a:	b933      	cbnz	r3, 8021f8a <_free_r+0x2e>
 8021f7c:	6063      	str	r3, [r4, #4]
 8021f7e:	6014      	str	r4, [r2, #0]
 8021f80:	4628      	mov	r0, r5
 8021f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f86:	f001 ba83 	b.w	8023490 <__malloc_unlock>
 8021f8a:	42a3      	cmp	r3, r4
 8021f8c:	d90c      	bls.n	8021fa8 <_free_r+0x4c>
 8021f8e:	6821      	ldr	r1, [r4, #0]
 8021f90:	1862      	adds	r2, r4, r1
 8021f92:	4293      	cmp	r3, r2
 8021f94:	bf04      	itt	eq
 8021f96:	681a      	ldreq	r2, [r3, #0]
 8021f98:	685b      	ldreq	r3, [r3, #4]
 8021f9a:	6063      	str	r3, [r4, #4]
 8021f9c:	bf04      	itt	eq
 8021f9e:	1852      	addeq	r2, r2, r1
 8021fa0:	6022      	streq	r2, [r4, #0]
 8021fa2:	6004      	str	r4, [r0, #0]
 8021fa4:	e7ec      	b.n	8021f80 <_free_r+0x24>
 8021fa6:	4613      	mov	r3, r2
 8021fa8:	685a      	ldr	r2, [r3, #4]
 8021faa:	b10a      	cbz	r2, 8021fb0 <_free_r+0x54>
 8021fac:	42a2      	cmp	r2, r4
 8021fae:	d9fa      	bls.n	8021fa6 <_free_r+0x4a>
 8021fb0:	6819      	ldr	r1, [r3, #0]
 8021fb2:	1858      	adds	r0, r3, r1
 8021fb4:	42a0      	cmp	r0, r4
 8021fb6:	d10b      	bne.n	8021fd0 <_free_r+0x74>
 8021fb8:	6820      	ldr	r0, [r4, #0]
 8021fba:	4401      	add	r1, r0
 8021fbc:	1858      	adds	r0, r3, r1
 8021fbe:	4282      	cmp	r2, r0
 8021fc0:	6019      	str	r1, [r3, #0]
 8021fc2:	d1dd      	bne.n	8021f80 <_free_r+0x24>
 8021fc4:	6810      	ldr	r0, [r2, #0]
 8021fc6:	6852      	ldr	r2, [r2, #4]
 8021fc8:	605a      	str	r2, [r3, #4]
 8021fca:	4401      	add	r1, r0
 8021fcc:	6019      	str	r1, [r3, #0]
 8021fce:	e7d7      	b.n	8021f80 <_free_r+0x24>
 8021fd0:	d902      	bls.n	8021fd8 <_free_r+0x7c>
 8021fd2:	230c      	movs	r3, #12
 8021fd4:	602b      	str	r3, [r5, #0]
 8021fd6:	e7d3      	b.n	8021f80 <_free_r+0x24>
 8021fd8:	6820      	ldr	r0, [r4, #0]
 8021fda:	1821      	adds	r1, r4, r0
 8021fdc:	428a      	cmp	r2, r1
 8021fde:	bf04      	itt	eq
 8021fe0:	6811      	ldreq	r1, [r2, #0]
 8021fe2:	6852      	ldreq	r2, [r2, #4]
 8021fe4:	6062      	str	r2, [r4, #4]
 8021fe6:	bf04      	itt	eq
 8021fe8:	1809      	addeq	r1, r1, r0
 8021fea:	6021      	streq	r1, [r4, #0]
 8021fec:	605c      	str	r4, [r3, #4]
 8021fee:	e7c7      	b.n	8021f80 <_free_r+0x24>
 8021ff0:	bd38      	pop	{r3, r4, r5, pc}
 8021ff2:	bf00      	nop
 8021ff4:	20000c94 	.word	0x20000c94

08021ff8 <_malloc_r>:
 8021ff8:	b570      	push	{r4, r5, r6, lr}
 8021ffa:	1ccd      	adds	r5, r1, #3
 8021ffc:	f025 0503 	bic.w	r5, r5, #3
 8022000:	3508      	adds	r5, #8
 8022002:	2d0c      	cmp	r5, #12
 8022004:	bf38      	it	cc
 8022006:	250c      	movcc	r5, #12
 8022008:	2d00      	cmp	r5, #0
 802200a:	4606      	mov	r6, r0
 802200c:	db01      	blt.n	8022012 <_malloc_r+0x1a>
 802200e:	42a9      	cmp	r1, r5
 8022010:	d903      	bls.n	802201a <_malloc_r+0x22>
 8022012:	230c      	movs	r3, #12
 8022014:	6033      	str	r3, [r6, #0]
 8022016:	2000      	movs	r0, #0
 8022018:	bd70      	pop	{r4, r5, r6, pc}
 802201a:	f001 fa38 	bl	802348e <__malloc_lock>
 802201e:	4a21      	ldr	r2, [pc, #132]	; (80220a4 <_malloc_r+0xac>)
 8022020:	6814      	ldr	r4, [r2, #0]
 8022022:	4621      	mov	r1, r4
 8022024:	b991      	cbnz	r1, 802204c <_malloc_r+0x54>
 8022026:	4c20      	ldr	r4, [pc, #128]	; (80220a8 <_malloc_r+0xb0>)
 8022028:	6823      	ldr	r3, [r4, #0]
 802202a:	b91b      	cbnz	r3, 8022034 <_malloc_r+0x3c>
 802202c:	4630      	mov	r0, r6
 802202e:	f000 fbed 	bl	802280c <_sbrk_r>
 8022032:	6020      	str	r0, [r4, #0]
 8022034:	4629      	mov	r1, r5
 8022036:	4630      	mov	r0, r6
 8022038:	f000 fbe8 	bl	802280c <_sbrk_r>
 802203c:	1c43      	adds	r3, r0, #1
 802203e:	d124      	bne.n	802208a <_malloc_r+0x92>
 8022040:	230c      	movs	r3, #12
 8022042:	6033      	str	r3, [r6, #0]
 8022044:	4630      	mov	r0, r6
 8022046:	f001 fa23 	bl	8023490 <__malloc_unlock>
 802204a:	e7e4      	b.n	8022016 <_malloc_r+0x1e>
 802204c:	680b      	ldr	r3, [r1, #0]
 802204e:	1b5b      	subs	r3, r3, r5
 8022050:	d418      	bmi.n	8022084 <_malloc_r+0x8c>
 8022052:	2b0b      	cmp	r3, #11
 8022054:	d90f      	bls.n	8022076 <_malloc_r+0x7e>
 8022056:	600b      	str	r3, [r1, #0]
 8022058:	50cd      	str	r5, [r1, r3]
 802205a:	18cc      	adds	r4, r1, r3
 802205c:	4630      	mov	r0, r6
 802205e:	f001 fa17 	bl	8023490 <__malloc_unlock>
 8022062:	f104 000b 	add.w	r0, r4, #11
 8022066:	1d23      	adds	r3, r4, #4
 8022068:	f020 0007 	bic.w	r0, r0, #7
 802206c:	1ac3      	subs	r3, r0, r3
 802206e:	d0d3      	beq.n	8022018 <_malloc_r+0x20>
 8022070:	425a      	negs	r2, r3
 8022072:	50e2      	str	r2, [r4, r3]
 8022074:	e7d0      	b.n	8022018 <_malloc_r+0x20>
 8022076:	428c      	cmp	r4, r1
 8022078:	684b      	ldr	r3, [r1, #4]
 802207a:	bf16      	itet	ne
 802207c:	6063      	strne	r3, [r4, #4]
 802207e:	6013      	streq	r3, [r2, #0]
 8022080:	460c      	movne	r4, r1
 8022082:	e7eb      	b.n	802205c <_malloc_r+0x64>
 8022084:	460c      	mov	r4, r1
 8022086:	6849      	ldr	r1, [r1, #4]
 8022088:	e7cc      	b.n	8022024 <_malloc_r+0x2c>
 802208a:	1cc4      	adds	r4, r0, #3
 802208c:	f024 0403 	bic.w	r4, r4, #3
 8022090:	42a0      	cmp	r0, r4
 8022092:	d005      	beq.n	80220a0 <_malloc_r+0xa8>
 8022094:	1a21      	subs	r1, r4, r0
 8022096:	4630      	mov	r0, r6
 8022098:	f000 fbb8 	bl	802280c <_sbrk_r>
 802209c:	3001      	adds	r0, #1
 802209e:	d0cf      	beq.n	8022040 <_malloc_r+0x48>
 80220a0:	6025      	str	r5, [r4, #0]
 80220a2:	e7db      	b.n	802205c <_malloc_r+0x64>
 80220a4:	20000c94 	.word	0x20000c94
 80220a8:	20000c98 	.word	0x20000c98

080220ac <__sfputc_r>:
 80220ac:	6893      	ldr	r3, [r2, #8]
 80220ae:	3b01      	subs	r3, #1
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	b410      	push	{r4}
 80220b4:	6093      	str	r3, [r2, #8]
 80220b6:	da08      	bge.n	80220ca <__sfputc_r+0x1e>
 80220b8:	6994      	ldr	r4, [r2, #24]
 80220ba:	42a3      	cmp	r3, r4
 80220bc:	db01      	blt.n	80220c2 <__sfputc_r+0x16>
 80220be:	290a      	cmp	r1, #10
 80220c0:	d103      	bne.n	80220ca <__sfputc_r+0x1e>
 80220c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220c6:	f000 bea3 	b.w	8022e10 <__swbuf_r>
 80220ca:	6813      	ldr	r3, [r2, #0]
 80220cc:	1c58      	adds	r0, r3, #1
 80220ce:	6010      	str	r0, [r2, #0]
 80220d0:	7019      	strb	r1, [r3, #0]
 80220d2:	4608      	mov	r0, r1
 80220d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220d8:	4770      	bx	lr

080220da <__sfputs_r>:
 80220da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220dc:	4606      	mov	r6, r0
 80220de:	460f      	mov	r7, r1
 80220e0:	4614      	mov	r4, r2
 80220e2:	18d5      	adds	r5, r2, r3
 80220e4:	42ac      	cmp	r4, r5
 80220e6:	d101      	bne.n	80220ec <__sfputs_r+0x12>
 80220e8:	2000      	movs	r0, #0
 80220ea:	e007      	b.n	80220fc <__sfputs_r+0x22>
 80220ec:	463a      	mov	r2, r7
 80220ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80220f2:	4630      	mov	r0, r6
 80220f4:	f7ff ffda 	bl	80220ac <__sfputc_r>
 80220f8:	1c43      	adds	r3, r0, #1
 80220fa:	d1f3      	bne.n	80220e4 <__sfputs_r+0xa>
 80220fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022100 <_vfiprintf_r>:
 8022100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022104:	460c      	mov	r4, r1
 8022106:	b09d      	sub	sp, #116	; 0x74
 8022108:	4617      	mov	r7, r2
 802210a:	461d      	mov	r5, r3
 802210c:	4606      	mov	r6, r0
 802210e:	b118      	cbz	r0, 8022118 <_vfiprintf_r+0x18>
 8022110:	6983      	ldr	r3, [r0, #24]
 8022112:	b90b      	cbnz	r3, 8022118 <_vfiprintf_r+0x18>
 8022114:	f001 f848 	bl	80231a8 <__sinit>
 8022118:	4b7c      	ldr	r3, [pc, #496]	; (802230c <_vfiprintf_r+0x20c>)
 802211a:	429c      	cmp	r4, r3
 802211c:	d158      	bne.n	80221d0 <_vfiprintf_r+0xd0>
 802211e:	6874      	ldr	r4, [r6, #4]
 8022120:	89a3      	ldrh	r3, [r4, #12]
 8022122:	0718      	lsls	r0, r3, #28
 8022124:	d55e      	bpl.n	80221e4 <_vfiprintf_r+0xe4>
 8022126:	6923      	ldr	r3, [r4, #16]
 8022128:	2b00      	cmp	r3, #0
 802212a:	d05b      	beq.n	80221e4 <_vfiprintf_r+0xe4>
 802212c:	2300      	movs	r3, #0
 802212e:	9309      	str	r3, [sp, #36]	; 0x24
 8022130:	2320      	movs	r3, #32
 8022132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022136:	2330      	movs	r3, #48	; 0x30
 8022138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802213c:	9503      	str	r5, [sp, #12]
 802213e:	f04f 0b01 	mov.w	fp, #1
 8022142:	46b8      	mov	r8, r7
 8022144:	4645      	mov	r5, r8
 8022146:	f815 3b01 	ldrb.w	r3, [r5], #1
 802214a:	b10b      	cbz	r3, 8022150 <_vfiprintf_r+0x50>
 802214c:	2b25      	cmp	r3, #37	; 0x25
 802214e:	d154      	bne.n	80221fa <_vfiprintf_r+0xfa>
 8022150:	ebb8 0a07 	subs.w	sl, r8, r7
 8022154:	d00b      	beq.n	802216e <_vfiprintf_r+0x6e>
 8022156:	4653      	mov	r3, sl
 8022158:	463a      	mov	r2, r7
 802215a:	4621      	mov	r1, r4
 802215c:	4630      	mov	r0, r6
 802215e:	f7ff ffbc 	bl	80220da <__sfputs_r>
 8022162:	3001      	adds	r0, #1
 8022164:	f000 80c2 	beq.w	80222ec <_vfiprintf_r+0x1ec>
 8022168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802216a:	4453      	add	r3, sl
 802216c:	9309      	str	r3, [sp, #36]	; 0x24
 802216e:	f898 3000 	ldrb.w	r3, [r8]
 8022172:	2b00      	cmp	r3, #0
 8022174:	f000 80ba 	beq.w	80222ec <_vfiprintf_r+0x1ec>
 8022178:	2300      	movs	r3, #0
 802217a:	f04f 32ff 	mov.w	r2, #4294967295
 802217e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022182:	9304      	str	r3, [sp, #16]
 8022184:	9307      	str	r3, [sp, #28]
 8022186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802218a:	931a      	str	r3, [sp, #104]	; 0x68
 802218c:	46a8      	mov	r8, r5
 802218e:	2205      	movs	r2, #5
 8022190:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022194:	485e      	ldr	r0, [pc, #376]	; (8022310 <_vfiprintf_r+0x210>)
 8022196:	f7de f81b 	bl	80001d0 <memchr>
 802219a:	9b04      	ldr	r3, [sp, #16]
 802219c:	bb78      	cbnz	r0, 80221fe <_vfiprintf_r+0xfe>
 802219e:	06d9      	lsls	r1, r3, #27
 80221a0:	bf44      	itt	mi
 80221a2:	2220      	movmi	r2, #32
 80221a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80221a8:	071a      	lsls	r2, r3, #28
 80221aa:	bf44      	itt	mi
 80221ac:	222b      	movmi	r2, #43	; 0x2b
 80221ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80221b2:	782a      	ldrb	r2, [r5, #0]
 80221b4:	2a2a      	cmp	r2, #42	; 0x2a
 80221b6:	d02a      	beq.n	802220e <_vfiprintf_r+0x10e>
 80221b8:	9a07      	ldr	r2, [sp, #28]
 80221ba:	46a8      	mov	r8, r5
 80221bc:	2000      	movs	r0, #0
 80221be:	250a      	movs	r5, #10
 80221c0:	4641      	mov	r1, r8
 80221c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80221c6:	3b30      	subs	r3, #48	; 0x30
 80221c8:	2b09      	cmp	r3, #9
 80221ca:	d969      	bls.n	80222a0 <_vfiprintf_r+0x1a0>
 80221cc:	b360      	cbz	r0, 8022228 <_vfiprintf_r+0x128>
 80221ce:	e024      	b.n	802221a <_vfiprintf_r+0x11a>
 80221d0:	4b50      	ldr	r3, [pc, #320]	; (8022314 <_vfiprintf_r+0x214>)
 80221d2:	429c      	cmp	r4, r3
 80221d4:	d101      	bne.n	80221da <_vfiprintf_r+0xda>
 80221d6:	68b4      	ldr	r4, [r6, #8]
 80221d8:	e7a2      	b.n	8022120 <_vfiprintf_r+0x20>
 80221da:	4b4f      	ldr	r3, [pc, #316]	; (8022318 <_vfiprintf_r+0x218>)
 80221dc:	429c      	cmp	r4, r3
 80221de:	bf08      	it	eq
 80221e0:	68f4      	ldreq	r4, [r6, #12]
 80221e2:	e79d      	b.n	8022120 <_vfiprintf_r+0x20>
 80221e4:	4621      	mov	r1, r4
 80221e6:	4630      	mov	r0, r6
 80221e8:	f000 fe64 	bl	8022eb4 <__swsetup_r>
 80221ec:	2800      	cmp	r0, #0
 80221ee:	d09d      	beq.n	802212c <_vfiprintf_r+0x2c>
 80221f0:	f04f 30ff 	mov.w	r0, #4294967295
 80221f4:	b01d      	add	sp, #116	; 0x74
 80221f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221fa:	46a8      	mov	r8, r5
 80221fc:	e7a2      	b.n	8022144 <_vfiprintf_r+0x44>
 80221fe:	4a44      	ldr	r2, [pc, #272]	; (8022310 <_vfiprintf_r+0x210>)
 8022200:	1a80      	subs	r0, r0, r2
 8022202:	fa0b f000 	lsl.w	r0, fp, r0
 8022206:	4318      	orrs	r0, r3
 8022208:	9004      	str	r0, [sp, #16]
 802220a:	4645      	mov	r5, r8
 802220c:	e7be      	b.n	802218c <_vfiprintf_r+0x8c>
 802220e:	9a03      	ldr	r2, [sp, #12]
 8022210:	1d11      	adds	r1, r2, #4
 8022212:	6812      	ldr	r2, [r2, #0]
 8022214:	9103      	str	r1, [sp, #12]
 8022216:	2a00      	cmp	r2, #0
 8022218:	db01      	blt.n	802221e <_vfiprintf_r+0x11e>
 802221a:	9207      	str	r2, [sp, #28]
 802221c:	e004      	b.n	8022228 <_vfiprintf_r+0x128>
 802221e:	4252      	negs	r2, r2
 8022220:	f043 0302 	orr.w	r3, r3, #2
 8022224:	9207      	str	r2, [sp, #28]
 8022226:	9304      	str	r3, [sp, #16]
 8022228:	f898 3000 	ldrb.w	r3, [r8]
 802222c:	2b2e      	cmp	r3, #46	; 0x2e
 802222e:	d10e      	bne.n	802224e <_vfiprintf_r+0x14e>
 8022230:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022234:	2b2a      	cmp	r3, #42	; 0x2a
 8022236:	d138      	bne.n	80222aa <_vfiprintf_r+0x1aa>
 8022238:	9b03      	ldr	r3, [sp, #12]
 802223a:	1d1a      	adds	r2, r3, #4
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	9203      	str	r2, [sp, #12]
 8022240:	2b00      	cmp	r3, #0
 8022242:	bfb8      	it	lt
 8022244:	f04f 33ff 	movlt.w	r3, #4294967295
 8022248:	f108 0802 	add.w	r8, r8, #2
 802224c:	9305      	str	r3, [sp, #20]
 802224e:	4d33      	ldr	r5, [pc, #204]	; (802231c <_vfiprintf_r+0x21c>)
 8022250:	f898 1000 	ldrb.w	r1, [r8]
 8022254:	2203      	movs	r2, #3
 8022256:	4628      	mov	r0, r5
 8022258:	f7dd ffba 	bl	80001d0 <memchr>
 802225c:	b140      	cbz	r0, 8022270 <_vfiprintf_r+0x170>
 802225e:	2340      	movs	r3, #64	; 0x40
 8022260:	1b40      	subs	r0, r0, r5
 8022262:	fa03 f000 	lsl.w	r0, r3, r0
 8022266:	9b04      	ldr	r3, [sp, #16]
 8022268:	4303      	orrs	r3, r0
 802226a:	f108 0801 	add.w	r8, r8, #1
 802226e:	9304      	str	r3, [sp, #16]
 8022270:	f898 1000 	ldrb.w	r1, [r8]
 8022274:	482a      	ldr	r0, [pc, #168]	; (8022320 <_vfiprintf_r+0x220>)
 8022276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802227a:	2206      	movs	r2, #6
 802227c:	f108 0701 	add.w	r7, r8, #1
 8022280:	f7dd ffa6 	bl	80001d0 <memchr>
 8022284:	2800      	cmp	r0, #0
 8022286:	d037      	beq.n	80222f8 <_vfiprintf_r+0x1f8>
 8022288:	4b26      	ldr	r3, [pc, #152]	; (8022324 <_vfiprintf_r+0x224>)
 802228a:	bb1b      	cbnz	r3, 80222d4 <_vfiprintf_r+0x1d4>
 802228c:	9b03      	ldr	r3, [sp, #12]
 802228e:	3307      	adds	r3, #7
 8022290:	f023 0307 	bic.w	r3, r3, #7
 8022294:	3308      	adds	r3, #8
 8022296:	9303      	str	r3, [sp, #12]
 8022298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802229a:	444b      	add	r3, r9
 802229c:	9309      	str	r3, [sp, #36]	; 0x24
 802229e:	e750      	b.n	8022142 <_vfiprintf_r+0x42>
 80222a0:	fb05 3202 	mla	r2, r5, r2, r3
 80222a4:	2001      	movs	r0, #1
 80222a6:	4688      	mov	r8, r1
 80222a8:	e78a      	b.n	80221c0 <_vfiprintf_r+0xc0>
 80222aa:	2300      	movs	r3, #0
 80222ac:	f108 0801 	add.w	r8, r8, #1
 80222b0:	9305      	str	r3, [sp, #20]
 80222b2:	4619      	mov	r1, r3
 80222b4:	250a      	movs	r5, #10
 80222b6:	4640      	mov	r0, r8
 80222b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222bc:	3a30      	subs	r2, #48	; 0x30
 80222be:	2a09      	cmp	r2, #9
 80222c0:	d903      	bls.n	80222ca <_vfiprintf_r+0x1ca>
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d0c3      	beq.n	802224e <_vfiprintf_r+0x14e>
 80222c6:	9105      	str	r1, [sp, #20]
 80222c8:	e7c1      	b.n	802224e <_vfiprintf_r+0x14e>
 80222ca:	fb05 2101 	mla	r1, r5, r1, r2
 80222ce:	2301      	movs	r3, #1
 80222d0:	4680      	mov	r8, r0
 80222d2:	e7f0      	b.n	80222b6 <_vfiprintf_r+0x1b6>
 80222d4:	ab03      	add	r3, sp, #12
 80222d6:	9300      	str	r3, [sp, #0]
 80222d8:	4622      	mov	r2, r4
 80222da:	4b13      	ldr	r3, [pc, #76]	; (8022328 <_vfiprintf_r+0x228>)
 80222dc:	a904      	add	r1, sp, #16
 80222de:	4630      	mov	r0, r6
 80222e0:	f3af 8000 	nop.w
 80222e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80222e8:	4681      	mov	r9, r0
 80222ea:	d1d5      	bne.n	8022298 <_vfiprintf_r+0x198>
 80222ec:	89a3      	ldrh	r3, [r4, #12]
 80222ee:	065b      	lsls	r3, r3, #25
 80222f0:	f53f af7e 	bmi.w	80221f0 <_vfiprintf_r+0xf0>
 80222f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222f6:	e77d      	b.n	80221f4 <_vfiprintf_r+0xf4>
 80222f8:	ab03      	add	r3, sp, #12
 80222fa:	9300      	str	r3, [sp, #0]
 80222fc:	4622      	mov	r2, r4
 80222fe:	4b0a      	ldr	r3, [pc, #40]	; (8022328 <_vfiprintf_r+0x228>)
 8022300:	a904      	add	r1, sp, #16
 8022302:	4630      	mov	r0, r6
 8022304:	f000 f888 	bl	8022418 <_printf_i>
 8022308:	e7ec      	b.n	80222e4 <_vfiprintf_r+0x1e4>
 802230a:	bf00      	nop
 802230c:	08027178 	.word	0x08027178
 8022310:	080270e8 	.word	0x080270e8
 8022314:	08027198 	.word	0x08027198
 8022318:	08027158 	.word	0x08027158
 802231c:	080270ee 	.word	0x080270ee
 8022320:	080270f2 	.word	0x080270f2
 8022324:	00000000 	.word	0x00000000
 8022328:	080220db 	.word	0x080220db

0802232c <_printf_common>:
 802232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022330:	4691      	mov	r9, r2
 8022332:	461f      	mov	r7, r3
 8022334:	688a      	ldr	r2, [r1, #8]
 8022336:	690b      	ldr	r3, [r1, #16]
 8022338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802233c:	4293      	cmp	r3, r2
 802233e:	bfb8      	it	lt
 8022340:	4613      	movlt	r3, r2
 8022342:	f8c9 3000 	str.w	r3, [r9]
 8022346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802234a:	4606      	mov	r6, r0
 802234c:	460c      	mov	r4, r1
 802234e:	b112      	cbz	r2, 8022356 <_printf_common+0x2a>
 8022350:	3301      	adds	r3, #1
 8022352:	f8c9 3000 	str.w	r3, [r9]
 8022356:	6823      	ldr	r3, [r4, #0]
 8022358:	0699      	lsls	r1, r3, #26
 802235a:	bf42      	ittt	mi
 802235c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022360:	3302      	addmi	r3, #2
 8022362:	f8c9 3000 	strmi.w	r3, [r9]
 8022366:	6825      	ldr	r5, [r4, #0]
 8022368:	f015 0506 	ands.w	r5, r5, #6
 802236c:	d107      	bne.n	802237e <_printf_common+0x52>
 802236e:	f104 0a19 	add.w	sl, r4, #25
 8022372:	68e3      	ldr	r3, [r4, #12]
 8022374:	f8d9 2000 	ldr.w	r2, [r9]
 8022378:	1a9b      	subs	r3, r3, r2
 802237a:	42ab      	cmp	r3, r5
 802237c:	dc28      	bgt.n	80223d0 <_printf_common+0xa4>
 802237e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022382:	6822      	ldr	r2, [r4, #0]
 8022384:	3300      	adds	r3, #0
 8022386:	bf18      	it	ne
 8022388:	2301      	movne	r3, #1
 802238a:	0692      	lsls	r2, r2, #26
 802238c:	d42d      	bmi.n	80223ea <_printf_common+0xbe>
 802238e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022392:	4639      	mov	r1, r7
 8022394:	4630      	mov	r0, r6
 8022396:	47c0      	blx	r8
 8022398:	3001      	adds	r0, #1
 802239a:	d020      	beq.n	80223de <_printf_common+0xb2>
 802239c:	6823      	ldr	r3, [r4, #0]
 802239e:	68e5      	ldr	r5, [r4, #12]
 80223a0:	f8d9 2000 	ldr.w	r2, [r9]
 80223a4:	f003 0306 	and.w	r3, r3, #6
 80223a8:	2b04      	cmp	r3, #4
 80223aa:	bf08      	it	eq
 80223ac:	1aad      	subeq	r5, r5, r2
 80223ae:	68a3      	ldr	r3, [r4, #8]
 80223b0:	6922      	ldr	r2, [r4, #16]
 80223b2:	bf0c      	ite	eq
 80223b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80223b8:	2500      	movne	r5, #0
 80223ba:	4293      	cmp	r3, r2
 80223bc:	bfc4      	itt	gt
 80223be:	1a9b      	subgt	r3, r3, r2
 80223c0:	18ed      	addgt	r5, r5, r3
 80223c2:	f04f 0900 	mov.w	r9, #0
 80223c6:	341a      	adds	r4, #26
 80223c8:	454d      	cmp	r5, r9
 80223ca:	d11a      	bne.n	8022402 <_printf_common+0xd6>
 80223cc:	2000      	movs	r0, #0
 80223ce:	e008      	b.n	80223e2 <_printf_common+0xb6>
 80223d0:	2301      	movs	r3, #1
 80223d2:	4652      	mov	r2, sl
 80223d4:	4639      	mov	r1, r7
 80223d6:	4630      	mov	r0, r6
 80223d8:	47c0      	blx	r8
 80223da:	3001      	adds	r0, #1
 80223dc:	d103      	bne.n	80223e6 <_printf_common+0xba>
 80223de:	f04f 30ff 	mov.w	r0, #4294967295
 80223e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223e6:	3501      	adds	r5, #1
 80223e8:	e7c3      	b.n	8022372 <_printf_common+0x46>
 80223ea:	18e1      	adds	r1, r4, r3
 80223ec:	1c5a      	adds	r2, r3, #1
 80223ee:	2030      	movs	r0, #48	; 0x30
 80223f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80223f4:	4422      	add	r2, r4
 80223f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80223fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80223fe:	3302      	adds	r3, #2
 8022400:	e7c5      	b.n	802238e <_printf_common+0x62>
 8022402:	2301      	movs	r3, #1
 8022404:	4622      	mov	r2, r4
 8022406:	4639      	mov	r1, r7
 8022408:	4630      	mov	r0, r6
 802240a:	47c0      	blx	r8
 802240c:	3001      	adds	r0, #1
 802240e:	d0e6      	beq.n	80223de <_printf_common+0xb2>
 8022410:	f109 0901 	add.w	r9, r9, #1
 8022414:	e7d8      	b.n	80223c8 <_printf_common+0x9c>
	...

08022418 <_printf_i>:
 8022418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802241c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022420:	460c      	mov	r4, r1
 8022422:	7e09      	ldrb	r1, [r1, #24]
 8022424:	b085      	sub	sp, #20
 8022426:	296e      	cmp	r1, #110	; 0x6e
 8022428:	4617      	mov	r7, r2
 802242a:	4606      	mov	r6, r0
 802242c:	4698      	mov	r8, r3
 802242e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022430:	f000 80b3 	beq.w	802259a <_printf_i+0x182>
 8022434:	d822      	bhi.n	802247c <_printf_i+0x64>
 8022436:	2963      	cmp	r1, #99	; 0x63
 8022438:	d036      	beq.n	80224a8 <_printf_i+0x90>
 802243a:	d80a      	bhi.n	8022452 <_printf_i+0x3a>
 802243c:	2900      	cmp	r1, #0
 802243e:	f000 80b9 	beq.w	80225b4 <_printf_i+0x19c>
 8022442:	2958      	cmp	r1, #88	; 0x58
 8022444:	f000 8083 	beq.w	802254e <_printf_i+0x136>
 8022448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802244c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022450:	e032      	b.n	80224b8 <_printf_i+0xa0>
 8022452:	2964      	cmp	r1, #100	; 0x64
 8022454:	d001      	beq.n	802245a <_printf_i+0x42>
 8022456:	2969      	cmp	r1, #105	; 0x69
 8022458:	d1f6      	bne.n	8022448 <_printf_i+0x30>
 802245a:	6820      	ldr	r0, [r4, #0]
 802245c:	6813      	ldr	r3, [r2, #0]
 802245e:	0605      	lsls	r5, r0, #24
 8022460:	f103 0104 	add.w	r1, r3, #4
 8022464:	d52a      	bpl.n	80224bc <_printf_i+0xa4>
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	6011      	str	r1, [r2, #0]
 802246a:	2b00      	cmp	r3, #0
 802246c:	da03      	bge.n	8022476 <_printf_i+0x5e>
 802246e:	222d      	movs	r2, #45	; 0x2d
 8022470:	425b      	negs	r3, r3
 8022472:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022476:	486f      	ldr	r0, [pc, #444]	; (8022634 <_printf_i+0x21c>)
 8022478:	220a      	movs	r2, #10
 802247a:	e039      	b.n	80224f0 <_printf_i+0xd8>
 802247c:	2973      	cmp	r1, #115	; 0x73
 802247e:	f000 809d 	beq.w	80225bc <_printf_i+0x1a4>
 8022482:	d808      	bhi.n	8022496 <_printf_i+0x7e>
 8022484:	296f      	cmp	r1, #111	; 0x6f
 8022486:	d020      	beq.n	80224ca <_printf_i+0xb2>
 8022488:	2970      	cmp	r1, #112	; 0x70
 802248a:	d1dd      	bne.n	8022448 <_printf_i+0x30>
 802248c:	6823      	ldr	r3, [r4, #0]
 802248e:	f043 0320 	orr.w	r3, r3, #32
 8022492:	6023      	str	r3, [r4, #0]
 8022494:	e003      	b.n	802249e <_printf_i+0x86>
 8022496:	2975      	cmp	r1, #117	; 0x75
 8022498:	d017      	beq.n	80224ca <_printf_i+0xb2>
 802249a:	2978      	cmp	r1, #120	; 0x78
 802249c:	d1d4      	bne.n	8022448 <_printf_i+0x30>
 802249e:	2378      	movs	r3, #120	; 0x78
 80224a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80224a4:	4864      	ldr	r0, [pc, #400]	; (8022638 <_printf_i+0x220>)
 80224a6:	e055      	b.n	8022554 <_printf_i+0x13c>
 80224a8:	6813      	ldr	r3, [r2, #0]
 80224aa:	1d19      	adds	r1, r3, #4
 80224ac:	681b      	ldr	r3, [r3, #0]
 80224ae:	6011      	str	r1, [r2, #0]
 80224b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80224b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80224b8:	2301      	movs	r3, #1
 80224ba:	e08c      	b.n	80225d6 <_printf_i+0x1be>
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	6011      	str	r1, [r2, #0]
 80224c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80224c4:	bf18      	it	ne
 80224c6:	b21b      	sxthne	r3, r3
 80224c8:	e7cf      	b.n	802246a <_printf_i+0x52>
 80224ca:	6813      	ldr	r3, [r2, #0]
 80224cc:	6825      	ldr	r5, [r4, #0]
 80224ce:	1d18      	adds	r0, r3, #4
 80224d0:	6010      	str	r0, [r2, #0]
 80224d2:	0628      	lsls	r0, r5, #24
 80224d4:	d501      	bpl.n	80224da <_printf_i+0xc2>
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	e002      	b.n	80224e0 <_printf_i+0xc8>
 80224da:	0668      	lsls	r0, r5, #25
 80224dc:	d5fb      	bpl.n	80224d6 <_printf_i+0xbe>
 80224de:	881b      	ldrh	r3, [r3, #0]
 80224e0:	4854      	ldr	r0, [pc, #336]	; (8022634 <_printf_i+0x21c>)
 80224e2:	296f      	cmp	r1, #111	; 0x6f
 80224e4:	bf14      	ite	ne
 80224e6:	220a      	movne	r2, #10
 80224e8:	2208      	moveq	r2, #8
 80224ea:	2100      	movs	r1, #0
 80224ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80224f0:	6865      	ldr	r5, [r4, #4]
 80224f2:	60a5      	str	r5, [r4, #8]
 80224f4:	2d00      	cmp	r5, #0
 80224f6:	f2c0 8095 	blt.w	8022624 <_printf_i+0x20c>
 80224fa:	6821      	ldr	r1, [r4, #0]
 80224fc:	f021 0104 	bic.w	r1, r1, #4
 8022500:	6021      	str	r1, [r4, #0]
 8022502:	2b00      	cmp	r3, #0
 8022504:	d13d      	bne.n	8022582 <_printf_i+0x16a>
 8022506:	2d00      	cmp	r5, #0
 8022508:	f040 808e 	bne.w	8022628 <_printf_i+0x210>
 802250c:	4665      	mov	r5, ip
 802250e:	2a08      	cmp	r2, #8
 8022510:	d10b      	bne.n	802252a <_printf_i+0x112>
 8022512:	6823      	ldr	r3, [r4, #0]
 8022514:	07db      	lsls	r3, r3, #31
 8022516:	d508      	bpl.n	802252a <_printf_i+0x112>
 8022518:	6923      	ldr	r3, [r4, #16]
 802251a:	6862      	ldr	r2, [r4, #4]
 802251c:	429a      	cmp	r2, r3
 802251e:	bfde      	ittt	le
 8022520:	2330      	movle	r3, #48	; 0x30
 8022522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022526:	f105 35ff 	addle.w	r5, r5, #4294967295
 802252a:	ebac 0305 	sub.w	r3, ip, r5
 802252e:	6123      	str	r3, [r4, #16]
 8022530:	f8cd 8000 	str.w	r8, [sp]
 8022534:	463b      	mov	r3, r7
 8022536:	aa03      	add	r2, sp, #12
 8022538:	4621      	mov	r1, r4
 802253a:	4630      	mov	r0, r6
 802253c:	f7ff fef6 	bl	802232c <_printf_common>
 8022540:	3001      	adds	r0, #1
 8022542:	d14d      	bne.n	80225e0 <_printf_i+0x1c8>
 8022544:	f04f 30ff 	mov.w	r0, #4294967295
 8022548:	b005      	add	sp, #20
 802254a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802254e:	4839      	ldr	r0, [pc, #228]	; (8022634 <_printf_i+0x21c>)
 8022550:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022554:	6813      	ldr	r3, [r2, #0]
 8022556:	6821      	ldr	r1, [r4, #0]
 8022558:	1d1d      	adds	r5, r3, #4
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	6015      	str	r5, [r2, #0]
 802255e:	060a      	lsls	r2, r1, #24
 8022560:	d50b      	bpl.n	802257a <_printf_i+0x162>
 8022562:	07ca      	lsls	r2, r1, #31
 8022564:	bf44      	itt	mi
 8022566:	f041 0120 	orrmi.w	r1, r1, #32
 802256a:	6021      	strmi	r1, [r4, #0]
 802256c:	b91b      	cbnz	r3, 8022576 <_printf_i+0x15e>
 802256e:	6822      	ldr	r2, [r4, #0]
 8022570:	f022 0220 	bic.w	r2, r2, #32
 8022574:	6022      	str	r2, [r4, #0]
 8022576:	2210      	movs	r2, #16
 8022578:	e7b7      	b.n	80224ea <_printf_i+0xd2>
 802257a:	064d      	lsls	r5, r1, #25
 802257c:	bf48      	it	mi
 802257e:	b29b      	uxthmi	r3, r3
 8022580:	e7ef      	b.n	8022562 <_printf_i+0x14a>
 8022582:	4665      	mov	r5, ip
 8022584:	fbb3 f1f2 	udiv	r1, r3, r2
 8022588:	fb02 3311 	mls	r3, r2, r1, r3
 802258c:	5cc3      	ldrb	r3, [r0, r3]
 802258e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022592:	460b      	mov	r3, r1
 8022594:	2900      	cmp	r1, #0
 8022596:	d1f5      	bne.n	8022584 <_printf_i+0x16c>
 8022598:	e7b9      	b.n	802250e <_printf_i+0xf6>
 802259a:	6813      	ldr	r3, [r2, #0]
 802259c:	6825      	ldr	r5, [r4, #0]
 802259e:	6961      	ldr	r1, [r4, #20]
 80225a0:	1d18      	adds	r0, r3, #4
 80225a2:	6010      	str	r0, [r2, #0]
 80225a4:	0628      	lsls	r0, r5, #24
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	d501      	bpl.n	80225ae <_printf_i+0x196>
 80225aa:	6019      	str	r1, [r3, #0]
 80225ac:	e002      	b.n	80225b4 <_printf_i+0x19c>
 80225ae:	066a      	lsls	r2, r5, #25
 80225b0:	d5fb      	bpl.n	80225aa <_printf_i+0x192>
 80225b2:	8019      	strh	r1, [r3, #0]
 80225b4:	2300      	movs	r3, #0
 80225b6:	6123      	str	r3, [r4, #16]
 80225b8:	4665      	mov	r5, ip
 80225ba:	e7b9      	b.n	8022530 <_printf_i+0x118>
 80225bc:	6813      	ldr	r3, [r2, #0]
 80225be:	1d19      	adds	r1, r3, #4
 80225c0:	6011      	str	r1, [r2, #0]
 80225c2:	681d      	ldr	r5, [r3, #0]
 80225c4:	6862      	ldr	r2, [r4, #4]
 80225c6:	2100      	movs	r1, #0
 80225c8:	4628      	mov	r0, r5
 80225ca:	f7dd fe01 	bl	80001d0 <memchr>
 80225ce:	b108      	cbz	r0, 80225d4 <_printf_i+0x1bc>
 80225d0:	1b40      	subs	r0, r0, r5
 80225d2:	6060      	str	r0, [r4, #4]
 80225d4:	6863      	ldr	r3, [r4, #4]
 80225d6:	6123      	str	r3, [r4, #16]
 80225d8:	2300      	movs	r3, #0
 80225da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225de:	e7a7      	b.n	8022530 <_printf_i+0x118>
 80225e0:	6923      	ldr	r3, [r4, #16]
 80225e2:	462a      	mov	r2, r5
 80225e4:	4639      	mov	r1, r7
 80225e6:	4630      	mov	r0, r6
 80225e8:	47c0      	blx	r8
 80225ea:	3001      	adds	r0, #1
 80225ec:	d0aa      	beq.n	8022544 <_printf_i+0x12c>
 80225ee:	6823      	ldr	r3, [r4, #0]
 80225f0:	079b      	lsls	r3, r3, #30
 80225f2:	d413      	bmi.n	802261c <_printf_i+0x204>
 80225f4:	68e0      	ldr	r0, [r4, #12]
 80225f6:	9b03      	ldr	r3, [sp, #12]
 80225f8:	4298      	cmp	r0, r3
 80225fa:	bfb8      	it	lt
 80225fc:	4618      	movlt	r0, r3
 80225fe:	e7a3      	b.n	8022548 <_printf_i+0x130>
 8022600:	2301      	movs	r3, #1
 8022602:	464a      	mov	r2, r9
 8022604:	4639      	mov	r1, r7
 8022606:	4630      	mov	r0, r6
 8022608:	47c0      	blx	r8
 802260a:	3001      	adds	r0, #1
 802260c:	d09a      	beq.n	8022544 <_printf_i+0x12c>
 802260e:	3501      	adds	r5, #1
 8022610:	68e3      	ldr	r3, [r4, #12]
 8022612:	9a03      	ldr	r2, [sp, #12]
 8022614:	1a9b      	subs	r3, r3, r2
 8022616:	42ab      	cmp	r3, r5
 8022618:	dcf2      	bgt.n	8022600 <_printf_i+0x1e8>
 802261a:	e7eb      	b.n	80225f4 <_printf_i+0x1dc>
 802261c:	2500      	movs	r5, #0
 802261e:	f104 0919 	add.w	r9, r4, #25
 8022622:	e7f5      	b.n	8022610 <_printf_i+0x1f8>
 8022624:	2b00      	cmp	r3, #0
 8022626:	d1ac      	bne.n	8022582 <_printf_i+0x16a>
 8022628:	7803      	ldrb	r3, [r0, #0]
 802262a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802262e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022632:	e76c      	b.n	802250e <_printf_i+0xf6>
 8022634:	080270f9 	.word	0x080270f9
 8022638:	0802710a 	.word	0x0802710a

0802263c <iprintf>:
 802263c:	b40f      	push	{r0, r1, r2, r3}
 802263e:	4b0a      	ldr	r3, [pc, #40]	; (8022668 <iprintf+0x2c>)
 8022640:	b513      	push	{r0, r1, r4, lr}
 8022642:	681c      	ldr	r4, [r3, #0]
 8022644:	b124      	cbz	r4, 8022650 <iprintf+0x14>
 8022646:	69a3      	ldr	r3, [r4, #24]
 8022648:	b913      	cbnz	r3, 8022650 <iprintf+0x14>
 802264a:	4620      	mov	r0, r4
 802264c:	f000 fdac 	bl	80231a8 <__sinit>
 8022650:	ab05      	add	r3, sp, #20
 8022652:	9a04      	ldr	r2, [sp, #16]
 8022654:	68a1      	ldr	r1, [r4, #8]
 8022656:	9301      	str	r3, [sp, #4]
 8022658:	4620      	mov	r0, r4
 802265a:	f7ff fd51 	bl	8022100 <_vfiprintf_r>
 802265e:	b002      	add	sp, #8
 8022660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022664:	b004      	add	sp, #16
 8022666:	4770      	bx	lr
 8022668:	200000f4 	.word	0x200000f4

0802266c <putchar>:
 802266c:	b538      	push	{r3, r4, r5, lr}
 802266e:	4b08      	ldr	r3, [pc, #32]	; (8022690 <putchar+0x24>)
 8022670:	681c      	ldr	r4, [r3, #0]
 8022672:	4605      	mov	r5, r0
 8022674:	b124      	cbz	r4, 8022680 <putchar+0x14>
 8022676:	69a3      	ldr	r3, [r4, #24]
 8022678:	b913      	cbnz	r3, 8022680 <putchar+0x14>
 802267a:	4620      	mov	r0, r4
 802267c:	f000 fd94 	bl	80231a8 <__sinit>
 8022680:	68a2      	ldr	r2, [r4, #8]
 8022682:	4629      	mov	r1, r5
 8022684:	4620      	mov	r0, r4
 8022686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802268a:	f001 b87b 	b.w	8023784 <_putc_r>
 802268e:	bf00      	nop
 8022690:	200000f4 	.word	0x200000f4

08022694 <_puts_r>:
 8022694:	b570      	push	{r4, r5, r6, lr}
 8022696:	460e      	mov	r6, r1
 8022698:	4605      	mov	r5, r0
 802269a:	b118      	cbz	r0, 80226a4 <_puts_r+0x10>
 802269c:	6983      	ldr	r3, [r0, #24]
 802269e:	b90b      	cbnz	r3, 80226a4 <_puts_r+0x10>
 80226a0:	f000 fd82 	bl	80231a8 <__sinit>
 80226a4:	69ab      	ldr	r3, [r5, #24]
 80226a6:	68ac      	ldr	r4, [r5, #8]
 80226a8:	b913      	cbnz	r3, 80226b0 <_puts_r+0x1c>
 80226aa:	4628      	mov	r0, r5
 80226ac:	f000 fd7c 	bl	80231a8 <__sinit>
 80226b0:	4b23      	ldr	r3, [pc, #140]	; (8022740 <_puts_r+0xac>)
 80226b2:	429c      	cmp	r4, r3
 80226b4:	d117      	bne.n	80226e6 <_puts_r+0x52>
 80226b6:	686c      	ldr	r4, [r5, #4]
 80226b8:	89a3      	ldrh	r3, [r4, #12]
 80226ba:	071b      	lsls	r3, r3, #28
 80226bc:	d51d      	bpl.n	80226fa <_puts_r+0x66>
 80226be:	6923      	ldr	r3, [r4, #16]
 80226c0:	b1db      	cbz	r3, 80226fa <_puts_r+0x66>
 80226c2:	3e01      	subs	r6, #1
 80226c4:	68a3      	ldr	r3, [r4, #8]
 80226c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80226ca:	3b01      	subs	r3, #1
 80226cc:	60a3      	str	r3, [r4, #8]
 80226ce:	b9e9      	cbnz	r1, 802270c <_puts_r+0x78>
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	da2e      	bge.n	8022732 <_puts_r+0x9e>
 80226d4:	4622      	mov	r2, r4
 80226d6:	210a      	movs	r1, #10
 80226d8:	4628      	mov	r0, r5
 80226da:	f000 fb99 	bl	8022e10 <__swbuf_r>
 80226de:	3001      	adds	r0, #1
 80226e0:	d011      	beq.n	8022706 <_puts_r+0x72>
 80226e2:	200a      	movs	r0, #10
 80226e4:	e011      	b.n	802270a <_puts_r+0x76>
 80226e6:	4b17      	ldr	r3, [pc, #92]	; (8022744 <_puts_r+0xb0>)
 80226e8:	429c      	cmp	r4, r3
 80226ea:	d101      	bne.n	80226f0 <_puts_r+0x5c>
 80226ec:	68ac      	ldr	r4, [r5, #8]
 80226ee:	e7e3      	b.n	80226b8 <_puts_r+0x24>
 80226f0:	4b15      	ldr	r3, [pc, #84]	; (8022748 <_puts_r+0xb4>)
 80226f2:	429c      	cmp	r4, r3
 80226f4:	bf08      	it	eq
 80226f6:	68ec      	ldreq	r4, [r5, #12]
 80226f8:	e7de      	b.n	80226b8 <_puts_r+0x24>
 80226fa:	4621      	mov	r1, r4
 80226fc:	4628      	mov	r0, r5
 80226fe:	f000 fbd9 	bl	8022eb4 <__swsetup_r>
 8022702:	2800      	cmp	r0, #0
 8022704:	d0dd      	beq.n	80226c2 <_puts_r+0x2e>
 8022706:	f04f 30ff 	mov.w	r0, #4294967295
 802270a:	bd70      	pop	{r4, r5, r6, pc}
 802270c:	2b00      	cmp	r3, #0
 802270e:	da04      	bge.n	802271a <_puts_r+0x86>
 8022710:	69a2      	ldr	r2, [r4, #24]
 8022712:	429a      	cmp	r2, r3
 8022714:	dc06      	bgt.n	8022724 <_puts_r+0x90>
 8022716:	290a      	cmp	r1, #10
 8022718:	d004      	beq.n	8022724 <_puts_r+0x90>
 802271a:	6823      	ldr	r3, [r4, #0]
 802271c:	1c5a      	adds	r2, r3, #1
 802271e:	6022      	str	r2, [r4, #0]
 8022720:	7019      	strb	r1, [r3, #0]
 8022722:	e7cf      	b.n	80226c4 <_puts_r+0x30>
 8022724:	4622      	mov	r2, r4
 8022726:	4628      	mov	r0, r5
 8022728:	f000 fb72 	bl	8022e10 <__swbuf_r>
 802272c:	3001      	adds	r0, #1
 802272e:	d1c9      	bne.n	80226c4 <_puts_r+0x30>
 8022730:	e7e9      	b.n	8022706 <_puts_r+0x72>
 8022732:	6823      	ldr	r3, [r4, #0]
 8022734:	200a      	movs	r0, #10
 8022736:	1c5a      	adds	r2, r3, #1
 8022738:	6022      	str	r2, [r4, #0]
 802273a:	7018      	strb	r0, [r3, #0]
 802273c:	e7e5      	b.n	802270a <_puts_r+0x76>
 802273e:	bf00      	nop
 8022740:	08027178 	.word	0x08027178
 8022744:	08027198 	.word	0x08027198
 8022748:	08027158 	.word	0x08027158

0802274c <puts>:
 802274c:	4b02      	ldr	r3, [pc, #8]	; (8022758 <puts+0xc>)
 802274e:	4601      	mov	r1, r0
 8022750:	6818      	ldr	r0, [r3, #0]
 8022752:	f7ff bf9f 	b.w	8022694 <_puts_r>
 8022756:	bf00      	nop
 8022758:	200000f4 	.word	0x200000f4

0802275c <srand>:
 802275c:	b538      	push	{r3, r4, r5, lr}
 802275e:	4b0d      	ldr	r3, [pc, #52]	; (8022794 <srand+0x38>)
 8022760:	681c      	ldr	r4, [r3, #0]
 8022762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022764:	4605      	mov	r5, r0
 8022766:	b97b      	cbnz	r3, 8022788 <srand+0x2c>
 8022768:	2018      	movs	r0, #24
 802276a:	f7ff f93f 	bl	80219ec <malloc>
 802276e:	4a0a      	ldr	r2, [pc, #40]	; (8022798 <srand+0x3c>)
 8022770:	4b0a      	ldr	r3, [pc, #40]	; (802279c <srand+0x40>)
 8022772:	63a0      	str	r0, [r4, #56]	; 0x38
 8022774:	e9c0 2300 	strd	r2, r3, [r0]
 8022778:	4b09      	ldr	r3, [pc, #36]	; (80227a0 <srand+0x44>)
 802277a:	6083      	str	r3, [r0, #8]
 802277c:	230b      	movs	r3, #11
 802277e:	8183      	strh	r3, [r0, #12]
 8022780:	2201      	movs	r2, #1
 8022782:	2300      	movs	r3, #0
 8022784:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802278a:	2200      	movs	r2, #0
 802278c:	611d      	str	r5, [r3, #16]
 802278e:	615a      	str	r2, [r3, #20]
 8022790:	bd38      	pop	{r3, r4, r5, pc}
 8022792:	bf00      	nop
 8022794:	200000f4 	.word	0x200000f4
 8022798:	abcd330e 	.word	0xabcd330e
 802279c:	e66d1234 	.word	0xe66d1234
 80227a0:	0005deec 	.word	0x0005deec

080227a4 <rand>:
 80227a4:	b538      	push	{r3, r4, r5, lr}
 80227a6:	4b13      	ldr	r3, [pc, #76]	; (80227f4 <rand+0x50>)
 80227a8:	681c      	ldr	r4, [r3, #0]
 80227aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80227ac:	b97b      	cbnz	r3, 80227ce <rand+0x2a>
 80227ae:	2018      	movs	r0, #24
 80227b0:	f7ff f91c 	bl	80219ec <malloc>
 80227b4:	4a10      	ldr	r2, [pc, #64]	; (80227f8 <rand+0x54>)
 80227b6:	4b11      	ldr	r3, [pc, #68]	; (80227fc <rand+0x58>)
 80227b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80227ba:	e9c0 2300 	strd	r2, r3, [r0]
 80227be:	4b10      	ldr	r3, [pc, #64]	; (8022800 <rand+0x5c>)
 80227c0:	6083      	str	r3, [r0, #8]
 80227c2:	230b      	movs	r3, #11
 80227c4:	8183      	strh	r3, [r0, #12]
 80227c6:	2201      	movs	r2, #1
 80227c8:	2300      	movs	r3, #0
 80227ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80227ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80227d0:	480c      	ldr	r0, [pc, #48]	; (8022804 <rand+0x60>)
 80227d2:	690a      	ldr	r2, [r1, #16]
 80227d4:	694b      	ldr	r3, [r1, #20]
 80227d6:	4c0c      	ldr	r4, [pc, #48]	; (8022808 <rand+0x64>)
 80227d8:	4350      	muls	r0, r2
 80227da:	fb04 0003 	mla	r0, r4, r3, r0
 80227de:	fba2 2304 	umull	r2, r3, r2, r4
 80227e2:	4403      	add	r3, r0
 80227e4:	1c54      	adds	r4, r2, #1
 80227e6:	f143 0500 	adc.w	r5, r3, #0
 80227ea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80227ee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80227f2:	bd38      	pop	{r3, r4, r5, pc}
 80227f4:	200000f4 	.word	0x200000f4
 80227f8:	abcd330e 	.word	0xabcd330e
 80227fc:	e66d1234 	.word	0xe66d1234
 8022800:	0005deec 	.word	0x0005deec
 8022804:	5851f42d 	.word	0x5851f42d
 8022808:	4c957f2d 	.word	0x4c957f2d

0802280c <_sbrk_r>:
 802280c:	b538      	push	{r3, r4, r5, lr}
 802280e:	4c06      	ldr	r4, [pc, #24]	; (8022828 <_sbrk_r+0x1c>)
 8022810:	2300      	movs	r3, #0
 8022812:	4605      	mov	r5, r0
 8022814:	4608      	mov	r0, r1
 8022816:	6023      	str	r3, [r4, #0]
 8022818:	f7df f84c 	bl	80018b4 <_sbrk>
 802281c:	1c43      	adds	r3, r0, #1
 802281e:	d102      	bne.n	8022826 <_sbrk_r+0x1a>
 8022820:	6823      	ldr	r3, [r4, #0]
 8022822:	b103      	cbz	r3, 8022826 <_sbrk_r+0x1a>
 8022824:	602b      	str	r3, [r5, #0]
 8022826:	bd38      	pop	{r3, r4, r5, pc}
 8022828:	200022dc 	.word	0x200022dc

0802282c <siprintf>:
 802282c:	b40e      	push	{r1, r2, r3}
 802282e:	b500      	push	{lr}
 8022830:	b09c      	sub	sp, #112	; 0x70
 8022832:	ab1d      	add	r3, sp, #116	; 0x74
 8022834:	9002      	str	r0, [sp, #8]
 8022836:	9006      	str	r0, [sp, #24]
 8022838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802283c:	4809      	ldr	r0, [pc, #36]	; (8022864 <siprintf+0x38>)
 802283e:	9107      	str	r1, [sp, #28]
 8022840:	9104      	str	r1, [sp, #16]
 8022842:	4909      	ldr	r1, [pc, #36]	; (8022868 <siprintf+0x3c>)
 8022844:	f853 2b04 	ldr.w	r2, [r3], #4
 8022848:	9105      	str	r1, [sp, #20]
 802284a:	6800      	ldr	r0, [r0, #0]
 802284c:	9301      	str	r3, [sp, #4]
 802284e:	a902      	add	r1, sp, #8
 8022850:	f000 fea0 	bl	8023594 <_svfiprintf_r>
 8022854:	9b02      	ldr	r3, [sp, #8]
 8022856:	2200      	movs	r2, #0
 8022858:	701a      	strb	r2, [r3, #0]
 802285a:	b01c      	add	sp, #112	; 0x70
 802285c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022860:	b003      	add	sp, #12
 8022862:	4770      	bx	lr
 8022864:	200000f4 	.word	0x200000f4
 8022868:	ffff0208 	.word	0xffff0208

0802286c <_strtol_l.isra.0>:
 802286c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022870:	4680      	mov	r8, r0
 8022872:	4689      	mov	r9, r1
 8022874:	4692      	mov	sl, r2
 8022876:	461e      	mov	r6, r3
 8022878:	460f      	mov	r7, r1
 802287a:	463d      	mov	r5, r7
 802287c:	9808      	ldr	r0, [sp, #32]
 802287e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022882:	f000 fd63 	bl	802334c <__locale_ctype_ptr_l>
 8022886:	4420      	add	r0, r4
 8022888:	7843      	ldrb	r3, [r0, #1]
 802288a:	f013 0308 	ands.w	r3, r3, #8
 802288e:	d132      	bne.n	80228f6 <_strtol_l.isra.0+0x8a>
 8022890:	2c2d      	cmp	r4, #45	; 0x2d
 8022892:	d132      	bne.n	80228fa <_strtol_l.isra.0+0x8e>
 8022894:	787c      	ldrb	r4, [r7, #1]
 8022896:	1cbd      	adds	r5, r7, #2
 8022898:	2201      	movs	r2, #1
 802289a:	2e00      	cmp	r6, #0
 802289c:	d05d      	beq.n	802295a <_strtol_l.isra.0+0xee>
 802289e:	2e10      	cmp	r6, #16
 80228a0:	d109      	bne.n	80228b6 <_strtol_l.isra.0+0x4a>
 80228a2:	2c30      	cmp	r4, #48	; 0x30
 80228a4:	d107      	bne.n	80228b6 <_strtol_l.isra.0+0x4a>
 80228a6:	782b      	ldrb	r3, [r5, #0]
 80228a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80228ac:	2b58      	cmp	r3, #88	; 0x58
 80228ae:	d14f      	bne.n	8022950 <_strtol_l.isra.0+0xe4>
 80228b0:	786c      	ldrb	r4, [r5, #1]
 80228b2:	2610      	movs	r6, #16
 80228b4:	3502      	adds	r5, #2
 80228b6:	2a00      	cmp	r2, #0
 80228b8:	bf14      	ite	ne
 80228ba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80228be:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80228c2:	2700      	movs	r7, #0
 80228c4:	fbb1 fcf6 	udiv	ip, r1, r6
 80228c8:	4638      	mov	r0, r7
 80228ca:	fb06 1e1c 	mls	lr, r6, ip, r1
 80228ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80228d2:	2b09      	cmp	r3, #9
 80228d4:	d817      	bhi.n	8022906 <_strtol_l.isra.0+0x9a>
 80228d6:	461c      	mov	r4, r3
 80228d8:	42a6      	cmp	r6, r4
 80228da:	dd23      	ble.n	8022924 <_strtol_l.isra.0+0xb8>
 80228dc:	1c7b      	adds	r3, r7, #1
 80228de:	d007      	beq.n	80228f0 <_strtol_l.isra.0+0x84>
 80228e0:	4584      	cmp	ip, r0
 80228e2:	d31c      	bcc.n	802291e <_strtol_l.isra.0+0xb2>
 80228e4:	d101      	bne.n	80228ea <_strtol_l.isra.0+0x7e>
 80228e6:	45a6      	cmp	lr, r4
 80228e8:	db19      	blt.n	802291e <_strtol_l.isra.0+0xb2>
 80228ea:	fb00 4006 	mla	r0, r0, r6, r4
 80228ee:	2701      	movs	r7, #1
 80228f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80228f4:	e7eb      	b.n	80228ce <_strtol_l.isra.0+0x62>
 80228f6:	462f      	mov	r7, r5
 80228f8:	e7bf      	b.n	802287a <_strtol_l.isra.0+0xe>
 80228fa:	2c2b      	cmp	r4, #43	; 0x2b
 80228fc:	bf04      	itt	eq
 80228fe:	1cbd      	addeq	r5, r7, #2
 8022900:	787c      	ldrbeq	r4, [r7, #1]
 8022902:	461a      	mov	r2, r3
 8022904:	e7c9      	b.n	802289a <_strtol_l.isra.0+0x2e>
 8022906:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802290a:	2b19      	cmp	r3, #25
 802290c:	d801      	bhi.n	8022912 <_strtol_l.isra.0+0xa6>
 802290e:	3c37      	subs	r4, #55	; 0x37
 8022910:	e7e2      	b.n	80228d8 <_strtol_l.isra.0+0x6c>
 8022912:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8022916:	2b19      	cmp	r3, #25
 8022918:	d804      	bhi.n	8022924 <_strtol_l.isra.0+0xb8>
 802291a:	3c57      	subs	r4, #87	; 0x57
 802291c:	e7dc      	b.n	80228d8 <_strtol_l.isra.0+0x6c>
 802291e:	f04f 37ff 	mov.w	r7, #4294967295
 8022922:	e7e5      	b.n	80228f0 <_strtol_l.isra.0+0x84>
 8022924:	1c7b      	adds	r3, r7, #1
 8022926:	d108      	bne.n	802293a <_strtol_l.isra.0+0xce>
 8022928:	2322      	movs	r3, #34	; 0x22
 802292a:	f8c8 3000 	str.w	r3, [r8]
 802292e:	4608      	mov	r0, r1
 8022930:	f1ba 0f00 	cmp.w	sl, #0
 8022934:	d107      	bne.n	8022946 <_strtol_l.isra.0+0xda>
 8022936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802293a:	b102      	cbz	r2, 802293e <_strtol_l.isra.0+0xd2>
 802293c:	4240      	negs	r0, r0
 802293e:	f1ba 0f00 	cmp.w	sl, #0
 8022942:	d0f8      	beq.n	8022936 <_strtol_l.isra.0+0xca>
 8022944:	b10f      	cbz	r7, 802294a <_strtol_l.isra.0+0xde>
 8022946:	f105 39ff 	add.w	r9, r5, #4294967295
 802294a:	f8ca 9000 	str.w	r9, [sl]
 802294e:	e7f2      	b.n	8022936 <_strtol_l.isra.0+0xca>
 8022950:	2430      	movs	r4, #48	; 0x30
 8022952:	2e00      	cmp	r6, #0
 8022954:	d1af      	bne.n	80228b6 <_strtol_l.isra.0+0x4a>
 8022956:	2608      	movs	r6, #8
 8022958:	e7ad      	b.n	80228b6 <_strtol_l.isra.0+0x4a>
 802295a:	2c30      	cmp	r4, #48	; 0x30
 802295c:	d0a3      	beq.n	80228a6 <_strtol_l.isra.0+0x3a>
 802295e:	260a      	movs	r6, #10
 8022960:	e7a9      	b.n	80228b6 <_strtol_l.isra.0+0x4a>
	...

08022964 <_strtol_r>:
 8022964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022966:	4c06      	ldr	r4, [pc, #24]	; (8022980 <_strtol_r+0x1c>)
 8022968:	4d06      	ldr	r5, [pc, #24]	; (8022984 <_strtol_r+0x20>)
 802296a:	6824      	ldr	r4, [r4, #0]
 802296c:	6a24      	ldr	r4, [r4, #32]
 802296e:	2c00      	cmp	r4, #0
 8022970:	bf08      	it	eq
 8022972:	462c      	moveq	r4, r5
 8022974:	9400      	str	r4, [sp, #0]
 8022976:	f7ff ff79 	bl	802286c <_strtol_l.isra.0>
 802297a:	b003      	add	sp, #12
 802297c:	bd30      	pop	{r4, r5, pc}
 802297e:	bf00      	nop
 8022980:	200000f4 	.word	0x200000f4
 8022984:	200001b8 	.word	0x200001b8

08022988 <strtol>:
 8022988:	4b08      	ldr	r3, [pc, #32]	; (80229ac <strtol+0x24>)
 802298a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802298c:	681c      	ldr	r4, [r3, #0]
 802298e:	4d08      	ldr	r5, [pc, #32]	; (80229b0 <strtol+0x28>)
 8022990:	6a23      	ldr	r3, [r4, #32]
 8022992:	2b00      	cmp	r3, #0
 8022994:	bf08      	it	eq
 8022996:	462b      	moveq	r3, r5
 8022998:	9300      	str	r3, [sp, #0]
 802299a:	4613      	mov	r3, r2
 802299c:	460a      	mov	r2, r1
 802299e:	4601      	mov	r1, r0
 80229a0:	4620      	mov	r0, r4
 80229a2:	f7ff ff63 	bl	802286c <_strtol_l.isra.0>
 80229a6:	b003      	add	sp, #12
 80229a8:	bd30      	pop	{r4, r5, pc}
 80229aa:	bf00      	nop
 80229ac:	200000f4 	.word	0x200000f4
 80229b0:	200001b8 	.word	0x200001b8

080229b4 <__tzcalc_limits>:
 80229b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b8:	4680      	mov	r8, r0
 80229ba:	f000 fcc3 	bl	8023344 <__gettzinfo>
 80229be:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80229c2:	4598      	cmp	r8, r3
 80229c4:	f340 8098 	ble.w	8022af8 <__tzcalc_limits+0x144>
 80229c8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80229cc:	4443      	add	r3, r8
 80229ce:	109b      	asrs	r3, r3, #2
 80229d0:	f240 126d 	movw	r2, #365	; 0x16d
 80229d4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80229d8:	fb02 3505 	mla	r5, r2, r5, r3
 80229dc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80229e0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80229e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80229e8:	441d      	add	r5, r3
 80229ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80229ee:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80229f2:	fb98 f7f3 	sdiv	r7, r8, r3
 80229f6:	fb03 8717 	mls	r7, r3, r7, r8
 80229fa:	4442      	add	r2, r8
 80229fc:	fab7 fc87 	clz	ip, r7
 8022a00:	fb92 f2f3 	sdiv	r2, r2, r3
 8022a04:	f008 0303 	and.w	r3, r8, #3
 8022a08:	4415      	add	r5, r2
 8022a0a:	2264      	movs	r2, #100	; 0x64
 8022a0c:	f8c0 8004 	str.w	r8, [r0, #4]
 8022a10:	fb98 f6f2 	sdiv	r6, r8, r2
 8022a14:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a18:	fb02 8616 	mls	r6, r2, r6, r8
 8022a1c:	4604      	mov	r4, r0
 8022a1e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8022a22:	9300      	str	r3, [sp, #0]
 8022a24:	f04f 0e07 	mov.w	lr, #7
 8022a28:	7a22      	ldrb	r2, [r4, #8]
 8022a2a:	6963      	ldr	r3, [r4, #20]
 8022a2c:	2a4a      	cmp	r2, #74	; 0x4a
 8022a2e:	d128      	bne.n	8022a82 <__tzcalc_limits+0xce>
 8022a30:	9900      	ldr	r1, [sp, #0]
 8022a32:	18ea      	adds	r2, r5, r3
 8022a34:	b901      	cbnz	r1, 8022a38 <__tzcalc_limits+0x84>
 8022a36:	b906      	cbnz	r6, 8022a3a <__tzcalc_limits+0x86>
 8022a38:	bb0f      	cbnz	r7, 8022a7e <__tzcalc_limits+0xca>
 8022a3a:	2b3b      	cmp	r3, #59	; 0x3b
 8022a3c:	bfd4      	ite	le
 8022a3e:	2300      	movle	r3, #0
 8022a40:	2301      	movgt	r3, #1
 8022a42:	4413      	add	r3, r2
 8022a44:	1e5a      	subs	r2, r3, #1
 8022a46:	69a3      	ldr	r3, [r4, #24]
 8022a48:	492c      	ldr	r1, [pc, #176]	; (8022afc <__tzcalc_limits+0x148>)
 8022a4a:	fb01 3202 	mla	r2, r1, r2, r3
 8022a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022a50:	4413      	add	r3, r2
 8022a52:	461a      	mov	r2, r3
 8022a54:	17db      	asrs	r3, r3, #31
 8022a56:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8022a5a:	3428      	adds	r4, #40	; 0x28
 8022a5c:	45a3      	cmp	fp, r4
 8022a5e:	d1e3      	bne.n	8022a28 <__tzcalc_limits+0x74>
 8022a60:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8022a64:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8022a68:	4294      	cmp	r4, r2
 8022a6a:	eb75 0303 	sbcs.w	r3, r5, r3
 8022a6e:	bfb4      	ite	lt
 8022a70:	2301      	movlt	r3, #1
 8022a72:	2300      	movge	r3, #0
 8022a74:	6003      	str	r3, [r0, #0]
 8022a76:	2001      	movs	r0, #1
 8022a78:	b003      	add	sp, #12
 8022a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a7e:	2300      	movs	r3, #0
 8022a80:	e7df      	b.n	8022a42 <__tzcalc_limits+0x8e>
 8022a82:	2a44      	cmp	r2, #68	; 0x44
 8022a84:	d101      	bne.n	8022a8a <__tzcalc_limits+0xd6>
 8022a86:	18ea      	adds	r2, r5, r3
 8022a88:	e7dd      	b.n	8022a46 <__tzcalc_limits+0x92>
 8022a8a:	9a00      	ldr	r2, [sp, #0]
 8022a8c:	bb72      	cbnz	r2, 8022aec <__tzcalc_limits+0x138>
 8022a8e:	2e00      	cmp	r6, #0
 8022a90:	bf0c      	ite	eq
 8022a92:	46e1      	moveq	r9, ip
 8022a94:	f04f 0901 	movne.w	r9, #1
 8022a98:	2230      	movs	r2, #48	; 0x30
 8022a9a:	fb02 f909 	mul.w	r9, r2, r9
 8022a9e:	68e2      	ldr	r2, [r4, #12]
 8022aa0:	9201      	str	r2, [sp, #4]
 8022aa2:	f04f 0800 	mov.w	r8, #0
 8022aa6:	462a      	mov	r2, r5
 8022aa8:	f108 0801 	add.w	r8, r8, #1
 8022aac:	4914      	ldr	r1, [pc, #80]	; (8022b00 <__tzcalc_limits+0x14c>)
 8022aae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8022ab2:	448a      	add	sl, r1
 8022ab4:	9901      	ldr	r1, [sp, #4]
 8022ab6:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8022aba:	4541      	cmp	r1, r8
 8022abc:	dc18      	bgt.n	8022af0 <__tzcalc_limits+0x13c>
 8022abe:	f102 0804 	add.w	r8, r2, #4
 8022ac2:	fb98 f9fe 	sdiv	r9, r8, lr
 8022ac6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8022aca:	eba8 0909 	sub.w	r9, r8, r9
 8022ace:	ebb3 0909 	subs.w	r9, r3, r9
 8022ad2:	6923      	ldr	r3, [r4, #16]
 8022ad4:	f103 33ff 	add.w	r3, r3, #4294967295
 8022ad8:	bf48      	it	mi
 8022ada:	f109 0907 	addmi.w	r9, r9, #7
 8022ade:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8022ae2:	444b      	add	r3, r9
 8022ae4:	4553      	cmp	r3, sl
 8022ae6:	da05      	bge.n	8022af4 <__tzcalc_limits+0x140>
 8022ae8:	441a      	add	r2, r3
 8022aea:	e7ac      	b.n	8022a46 <__tzcalc_limits+0x92>
 8022aec:	46e1      	mov	r9, ip
 8022aee:	e7d3      	b.n	8022a98 <__tzcalc_limits+0xe4>
 8022af0:	4452      	add	r2, sl
 8022af2:	e7d9      	b.n	8022aa8 <__tzcalc_limits+0xf4>
 8022af4:	3b07      	subs	r3, #7
 8022af6:	e7f5      	b.n	8022ae4 <__tzcalc_limits+0x130>
 8022af8:	2000      	movs	r0, #0
 8022afa:	e7bd      	b.n	8022a78 <__tzcalc_limits+0xc4>
 8022afc:	00015180 	.word	0x00015180
 8022b00:	080271c4 	.word	0x080271c4

08022b04 <__tz_lock>:
 8022b04:	4770      	bx	lr

08022b06 <__tz_unlock>:
 8022b06:	4770      	bx	lr

08022b08 <_tzset_unlocked>:
 8022b08:	4b01      	ldr	r3, [pc, #4]	; (8022b10 <_tzset_unlocked+0x8>)
 8022b0a:	6818      	ldr	r0, [r3, #0]
 8022b0c:	f000 b802 	b.w	8022b14 <_tzset_unlocked_r>
 8022b10:	200000f4 	.word	0x200000f4

08022b14 <_tzset_unlocked_r>:
 8022b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b18:	b08d      	sub	sp, #52	; 0x34
 8022b1a:	4607      	mov	r7, r0
 8022b1c:	f000 fc12 	bl	8023344 <__gettzinfo>
 8022b20:	49af      	ldr	r1, [pc, #700]	; (8022de0 <_tzset_unlocked_r+0x2cc>)
 8022b22:	4eb0      	ldr	r6, [pc, #704]	; (8022de4 <_tzset_unlocked_r+0x2d0>)
 8022b24:	4605      	mov	r5, r0
 8022b26:	4638      	mov	r0, r7
 8022b28:	f000 fc04 	bl	8023334 <_getenv_r>
 8022b2c:	4604      	mov	r4, r0
 8022b2e:	b970      	cbnz	r0, 8022b4e <_tzset_unlocked_r+0x3a>
 8022b30:	4bad      	ldr	r3, [pc, #692]	; (8022de8 <_tzset_unlocked_r+0x2d4>)
 8022b32:	4aae      	ldr	r2, [pc, #696]	; (8022dec <_tzset_unlocked_r+0x2d8>)
 8022b34:	6018      	str	r0, [r3, #0]
 8022b36:	4bae      	ldr	r3, [pc, #696]	; (8022df0 <_tzset_unlocked_r+0x2dc>)
 8022b38:	6018      	str	r0, [r3, #0]
 8022b3a:	4bae      	ldr	r3, [pc, #696]	; (8022df4 <_tzset_unlocked_r+0x2e0>)
 8022b3c:	6830      	ldr	r0, [r6, #0]
 8022b3e:	e9c3 2200 	strd	r2, r2, [r3]
 8022b42:	f7fe ff5b 	bl	80219fc <free>
 8022b46:	6034      	str	r4, [r6, #0]
 8022b48:	b00d      	add	sp, #52	; 0x34
 8022b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b4e:	6831      	ldr	r1, [r6, #0]
 8022b50:	2900      	cmp	r1, #0
 8022b52:	d15f      	bne.n	8022c14 <_tzset_unlocked_r+0x100>
 8022b54:	6830      	ldr	r0, [r6, #0]
 8022b56:	f7fe ff51 	bl	80219fc <free>
 8022b5a:	4620      	mov	r0, r4
 8022b5c:	f7dd fb92 	bl	8000284 <strlen>
 8022b60:	1c41      	adds	r1, r0, #1
 8022b62:	4638      	mov	r0, r7
 8022b64:	f7ff fa48 	bl	8021ff8 <_malloc_r>
 8022b68:	6030      	str	r0, [r6, #0]
 8022b6a:	2800      	cmp	r0, #0
 8022b6c:	d157      	bne.n	8022c1e <_tzset_unlocked_r+0x10a>
 8022b6e:	7823      	ldrb	r3, [r4, #0]
 8022b70:	4aa1      	ldr	r2, [pc, #644]	; (8022df8 <_tzset_unlocked_r+0x2e4>)
 8022b72:	49a2      	ldr	r1, [pc, #648]	; (8022dfc <_tzset_unlocked_r+0x2e8>)
 8022b74:	2b3a      	cmp	r3, #58	; 0x3a
 8022b76:	bf08      	it	eq
 8022b78:	3401      	addeq	r4, #1
 8022b7a:	ae0a      	add	r6, sp, #40	; 0x28
 8022b7c:	4633      	mov	r3, r6
 8022b7e:	4620      	mov	r0, r4
 8022b80:	f000 fe7a 	bl	8023878 <siscanf>
 8022b84:	2800      	cmp	r0, #0
 8022b86:	dddf      	ble.n	8022b48 <_tzset_unlocked_r+0x34>
 8022b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b8a:	18e7      	adds	r7, r4, r3
 8022b8c:	5ce3      	ldrb	r3, [r4, r3]
 8022b8e:	2b2d      	cmp	r3, #45	; 0x2d
 8022b90:	d149      	bne.n	8022c26 <_tzset_unlocked_r+0x112>
 8022b92:	3701      	adds	r7, #1
 8022b94:	f04f 34ff 	mov.w	r4, #4294967295
 8022b98:	f10d 0a20 	add.w	sl, sp, #32
 8022b9c:	f10d 0b1e 	add.w	fp, sp, #30
 8022ba0:	f04f 0800 	mov.w	r8, #0
 8022ba4:	9603      	str	r6, [sp, #12]
 8022ba6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8022baa:	f8cd b000 	str.w	fp, [sp]
 8022bae:	4633      	mov	r3, r6
 8022bb0:	aa07      	add	r2, sp, #28
 8022bb2:	4993      	ldr	r1, [pc, #588]	; (8022e00 <_tzset_unlocked_r+0x2ec>)
 8022bb4:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022bb8:	4638      	mov	r0, r7
 8022bba:	f8ad 8020 	strh.w	r8, [sp, #32]
 8022bbe:	f000 fe5b 	bl	8023878 <siscanf>
 8022bc2:	4540      	cmp	r0, r8
 8022bc4:	ddc0      	ble.n	8022b48 <_tzset_unlocked_r+0x34>
 8022bc6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022bca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022bce:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8022e0c <_tzset_unlocked_r+0x2f8>
 8022bd2:	213c      	movs	r1, #60	; 0x3c
 8022bd4:	fb01 2203 	mla	r2, r1, r3, r2
 8022bd8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022bdc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022be0:	fb01 2303 	mla	r3, r1, r3, r2
 8022be4:	435c      	muls	r4, r3
 8022be6:	62ac      	str	r4, [r5, #40]	; 0x28
 8022be8:	4c82      	ldr	r4, [pc, #520]	; (8022df4 <_tzset_unlocked_r+0x2e0>)
 8022bea:	4b83      	ldr	r3, [pc, #524]	; (8022df8 <_tzset_unlocked_r+0x2e4>)
 8022bec:	6023      	str	r3, [r4, #0]
 8022bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bf0:	4982      	ldr	r1, [pc, #520]	; (8022dfc <_tzset_unlocked_r+0x2e8>)
 8022bf2:	441f      	add	r7, r3
 8022bf4:	464a      	mov	r2, r9
 8022bf6:	4633      	mov	r3, r6
 8022bf8:	4638      	mov	r0, r7
 8022bfa:	f000 fe3d 	bl	8023878 <siscanf>
 8022bfe:	4540      	cmp	r0, r8
 8022c00:	dc16      	bgt.n	8022c30 <_tzset_unlocked_r+0x11c>
 8022c02:	6823      	ldr	r3, [r4, #0]
 8022c04:	6063      	str	r3, [r4, #4]
 8022c06:	4b78      	ldr	r3, [pc, #480]	; (8022de8 <_tzset_unlocked_r+0x2d4>)
 8022c08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022c0a:	601a      	str	r2, [r3, #0]
 8022c0c:	4b78      	ldr	r3, [pc, #480]	; (8022df0 <_tzset_unlocked_r+0x2dc>)
 8022c0e:	f8c3 8000 	str.w	r8, [r3]
 8022c12:	e799      	b.n	8022b48 <_tzset_unlocked_r+0x34>
 8022c14:	f7dd fb2c 	bl	8000270 <strcmp>
 8022c18:	2800      	cmp	r0, #0
 8022c1a:	d095      	beq.n	8022b48 <_tzset_unlocked_r+0x34>
 8022c1c:	e79a      	b.n	8022b54 <_tzset_unlocked_r+0x40>
 8022c1e:	4621      	mov	r1, r4
 8022c20:	f000 fe99 	bl	8023956 <strcpy>
 8022c24:	e7a3      	b.n	8022b6e <_tzset_unlocked_r+0x5a>
 8022c26:	2b2b      	cmp	r3, #43	; 0x2b
 8022c28:	bf08      	it	eq
 8022c2a:	3701      	addeq	r7, #1
 8022c2c:	2401      	movs	r4, #1
 8022c2e:	e7b3      	b.n	8022b98 <_tzset_unlocked_r+0x84>
 8022c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c32:	f8c4 9004 	str.w	r9, [r4, #4]
 8022c36:	18fc      	adds	r4, r7, r3
 8022c38:	5cfb      	ldrb	r3, [r7, r3]
 8022c3a:	2b2d      	cmp	r3, #45	; 0x2d
 8022c3c:	f040 808b 	bne.w	8022d56 <_tzset_unlocked_r+0x242>
 8022c40:	3401      	adds	r4, #1
 8022c42:	f04f 37ff 	mov.w	r7, #4294967295
 8022c46:	2300      	movs	r3, #0
 8022c48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022c4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c50:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022c54:	930a      	str	r3, [sp, #40]	; 0x28
 8022c56:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022c5a:	e9cd b600 	strd	fp, r6, [sp]
 8022c5e:	4633      	mov	r3, r6
 8022c60:	aa07      	add	r2, sp, #28
 8022c62:	4967      	ldr	r1, [pc, #412]	; (8022e00 <_tzset_unlocked_r+0x2ec>)
 8022c64:	4620      	mov	r0, r4
 8022c66:	f000 fe07 	bl	8023878 <siscanf>
 8022c6a:	2800      	cmp	r0, #0
 8022c6c:	dc78      	bgt.n	8022d60 <_tzset_unlocked_r+0x24c>
 8022c6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8022c70:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8022c74:	652b      	str	r3, [r5, #80]	; 0x50
 8022c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c78:	462f      	mov	r7, r5
 8022c7a:	441c      	add	r4, r3
 8022c7c:	f04f 0900 	mov.w	r9, #0
 8022c80:	7823      	ldrb	r3, [r4, #0]
 8022c82:	2b2c      	cmp	r3, #44	; 0x2c
 8022c84:	bf08      	it	eq
 8022c86:	3401      	addeq	r4, #1
 8022c88:	f894 8000 	ldrb.w	r8, [r4]
 8022c8c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022c90:	d179      	bne.n	8022d86 <_tzset_unlocked_r+0x272>
 8022c92:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8022c96:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8022c9a:	ab09      	add	r3, sp, #36	; 0x24
 8022c9c:	9300      	str	r3, [sp, #0]
 8022c9e:	9603      	str	r6, [sp, #12]
 8022ca0:	4633      	mov	r3, r6
 8022ca2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8022ca6:	4957      	ldr	r1, [pc, #348]	; (8022e04 <_tzset_unlocked_r+0x2f0>)
 8022ca8:	4620      	mov	r0, r4
 8022caa:	f000 fde5 	bl	8023878 <siscanf>
 8022cae:	2803      	cmp	r0, #3
 8022cb0:	f47f af4a 	bne.w	8022b48 <_tzset_unlocked_r+0x34>
 8022cb4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8022cb8:	1e4b      	subs	r3, r1, #1
 8022cba:	2b0b      	cmp	r3, #11
 8022cbc:	f63f af44 	bhi.w	8022b48 <_tzset_unlocked_r+0x34>
 8022cc0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022cc4:	1e53      	subs	r3, r2, #1
 8022cc6:	2b04      	cmp	r3, #4
 8022cc8:	f63f af3e 	bhi.w	8022b48 <_tzset_unlocked_r+0x34>
 8022ccc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8022cd0:	2b06      	cmp	r3, #6
 8022cd2:	f63f af39 	bhi.w	8022b48 <_tzset_unlocked_r+0x34>
 8022cd6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8022cda:	f887 8008 	strb.w	r8, [r7, #8]
 8022cde:	617b      	str	r3, [r7, #20]
 8022ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ce2:	eb04 0803 	add.w	r8, r4, r3
 8022ce6:	2302      	movs	r3, #2
 8022ce8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022cec:	2300      	movs	r3, #0
 8022cee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022cf2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8022cf8:	f898 3000 	ldrb.w	r3, [r8]
 8022cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8022cfe:	d109      	bne.n	8022d14 <_tzset_unlocked_r+0x200>
 8022d00:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022d04:	e9cd b600 	strd	fp, r6, [sp]
 8022d08:	4633      	mov	r3, r6
 8022d0a:	aa07      	add	r2, sp, #28
 8022d0c:	493e      	ldr	r1, [pc, #248]	; (8022e08 <_tzset_unlocked_r+0x2f4>)
 8022d0e:	4640      	mov	r0, r8
 8022d10:	f000 fdb2 	bl	8023878 <siscanf>
 8022d14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022d18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d1c:	213c      	movs	r1, #60	; 0x3c
 8022d1e:	fb01 2203 	mla	r2, r1, r3, r2
 8022d22:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022d2a:	fb01 2303 	mla	r3, r1, r3, r2
 8022d2e:	61bb      	str	r3, [r7, #24]
 8022d30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022d32:	3728      	adds	r7, #40	; 0x28
 8022d34:	4444      	add	r4, r8
 8022d36:	f1b9 0f00 	cmp.w	r9, #0
 8022d3a:	d021      	beq.n	8022d80 <_tzset_unlocked_r+0x26c>
 8022d3c:	6868      	ldr	r0, [r5, #4]
 8022d3e:	f7ff fe39 	bl	80229b4 <__tzcalc_limits>
 8022d42:	4b29      	ldr	r3, [pc, #164]	; (8022de8 <_tzset_unlocked_r+0x2d4>)
 8022d44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022d46:	601a      	str	r2, [r3, #0]
 8022d48:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8022d4a:	1a9b      	subs	r3, r3, r2
 8022d4c:	4a28      	ldr	r2, [pc, #160]	; (8022df0 <_tzset_unlocked_r+0x2dc>)
 8022d4e:	bf18      	it	ne
 8022d50:	2301      	movne	r3, #1
 8022d52:	6013      	str	r3, [r2, #0]
 8022d54:	e6f8      	b.n	8022b48 <_tzset_unlocked_r+0x34>
 8022d56:	2b2b      	cmp	r3, #43	; 0x2b
 8022d58:	bf08      	it	eq
 8022d5a:	3401      	addeq	r4, #1
 8022d5c:	2701      	movs	r7, #1
 8022d5e:	e772      	b.n	8022c46 <_tzset_unlocked_r+0x132>
 8022d60:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022d64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d68:	213c      	movs	r1, #60	; 0x3c
 8022d6a:	fb01 2203 	mla	r2, r1, r3, r2
 8022d6e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022d76:	fb01 2303 	mla	r3, r1, r3, r2
 8022d7a:	435f      	muls	r7, r3
 8022d7c:	652f      	str	r7, [r5, #80]	; 0x50
 8022d7e:	e77a      	b.n	8022c76 <_tzset_unlocked_r+0x162>
 8022d80:	f04f 0901 	mov.w	r9, #1
 8022d84:	e77c      	b.n	8022c80 <_tzset_unlocked_r+0x16c>
 8022d86:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8022d8a:	bf06      	itte	eq
 8022d8c:	3401      	addeq	r4, #1
 8022d8e:	4643      	moveq	r3, r8
 8022d90:	2344      	movne	r3, #68	; 0x44
 8022d92:	220a      	movs	r2, #10
 8022d94:	a90b      	add	r1, sp, #44	; 0x2c
 8022d96:	4620      	mov	r0, r4
 8022d98:	9305      	str	r3, [sp, #20]
 8022d9a:	f000 fe83 	bl	8023aa4 <strtoul>
 8022d9e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022da2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8022da6:	45a0      	cmp	r8, r4
 8022da8:	9b05      	ldr	r3, [sp, #20]
 8022daa:	d114      	bne.n	8022dd6 <_tzset_unlocked_r+0x2c2>
 8022dac:	234d      	movs	r3, #77	; 0x4d
 8022dae:	f1b9 0f00 	cmp.w	r9, #0
 8022db2:	d107      	bne.n	8022dc4 <_tzset_unlocked_r+0x2b0>
 8022db4:	722b      	strb	r3, [r5, #8]
 8022db6:	2103      	movs	r1, #3
 8022db8:	2302      	movs	r3, #2
 8022dba:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022dbe:	f8c5 9014 	str.w	r9, [r5, #20]
 8022dc2:	e790      	b.n	8022ce6 <_tzset_unlocked_r+0x1d2>
 8022dc4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8022dc8:	220b      	movs	r2, #11
 8022dca:	2301      	movs	r3, #1
 8022dcc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022dd4:	e787      	b.n	8022ce6 <_tzset_unlocked_r+0x1d2>
 8022dd6:	b280      	uxth	r0, r0
 8022dd8:	723b      	strb	r3, [r7, #8]
 8022dda:	6178      	str	r0, [r7, #20]
 8022ddc:	e783      	b.n	8022ce6 <_tzset_unlocked_r+0x1d2>
 8022dde:	bf00      	nop
 8022de0:	0802711b 	.word	0x0802711b
 8022de4:	20000cb4 	.word	0x20000cb4
 8022de8:	20000cbc 	.word	0x20000cbc
 8022dec:	0802711e 	.word	0x0802711e
 8022df0:	20000cb8 	.word	0x20000cb8
 8022df4:	20000158 	.word	0x20000158
 8022df8:	20000ca7 	.word	0x20000ca7
 8022dfc:	08027122 	.word	0x08027122
 8022e00:	08027145 	.word	0x08027145
 8022e04:	08027131 	.word	0x08027131
 8022e08:	08027144 	.word	0x08027144
 8022e0c:	20000c9c 	.word	0x20000c9c

08022e10 <__swbuf_r>:
 8022e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e12:	460e      	mov	r6, r1
 8022e14:	4614      	mov	r4, r2
 8022e16:	4605      	mov	r5, r0
 8022e18:	b118      	cbz	r0, 8022e22 <__swbuf_r+0x12>
 8022e1a:	6983      	ldr	r3, [r0, #24]
 8022e1c:	b90b      	cbnz	r3, 8022e22 <__swbuf_r+0x12>
 8022e1e:	f000 f9c3 	bl	80231a8 <__sinit>
 8022e22:	4b21      	ldr	r3, [pc, #132]	; (8022ea8 <__swbuf_r+0x98>)
 8022e24:	429c      	cmp	r4, r3
 8022e26:	d12a      	bne.n	8022e7e <__swbuf_r+0x6e>
 8022e28:	686c      	ldr	r4, [r5, #4]
 8022e2a:	69a3      	ldr	r3, [r4, #24]
 8022e2c:	60a3      	str	r3, [r4, #8]
 8022e2e:	89a3      	ldrh	r3, [r4, #12]
 8022e30:	071a      	lsls	r2, r3, #28
 8022e32:	d52e      	bpl.n	8022e92 <__swbuf_r+0x82>
 8022e34:	6923      	ldr	r3, [r4, #16]
 8022e36:	b363      	cbz	r3, 8022e92 <__swbuf_r+0x82>
 8022e38:	6923      	ldr	r3, [r4, #16]
 8022e3a:	6820      	ldr	r0, [r4, #0]
 8022e3c:	1ac0      	subs	r0, r0, r3
 8022e3e:	6963      	ldr	r3, [r4, #20]
 8022e40:	b2f6      	uxtb	r6, r6
 8022e42:	4283      	cmp	r3, r0
 8022e44:	4637      	mov	r7, r6
 8022e46:	dc04      	bgt.n	8022e52 <__swbuf_r+0x42>
 8022e48:	4621      	mov	r1, r4
 8022e4a:	4628      	mov	r0, r5
 8022e4c:	f000 f942 	bl	80230d4 <_fflush_r>
 8022e50:	bb28      	cbnz	r0, 8022e9e <__swbuf_r+0x8e>
 8022e52:	68a3      	ldr	r3, [r4, #8]
 8022e54:	3b01      	subs	r3, #1
 8022e56:	60a3      	str	r3, [r4, #8]
 8022e58:	6823      	ldr	r3, [r4, #0]
 8022e5a:	1c5a      	adds	r2, r3, #1
 8022e5c:	6022      	str	r2, [r4, #0]
 8022e5e:	701e      	strb	r6, [r3, #0]
 8022e60:	6963      	ldr	r3, [r4, #20]
 8022e62:	3001      	adds	r0, #1
 8022e64:	4283      	cmp	r3, r0
 8022e66:	d004      	beq.n	8022e72 <__swbuf_r+0x62>
 8022e68:	89a3      	ldrh	r3, [r4, #12]
 8022e6a:	07db      	lsls	r3, r3, #31
 8022e6c:	d519      	bpl.n	8022ea2 <__swbuf_r+0x92>
 8022e6e:	2e0a      	cmp	r6, #10
 8022e70:	d117      	bne.n	8022ea2 <__swbuf_r+0x92>
 8022e72:	4621      	mov	r1, r4
 8022e74:	4628      	mov	r0, r5
 8022e76:	f000 f92d 	bl	80230d4 <_fflush_r>
 8022e7a:	b190      	cbz	r0, 8022ea2 <__swbuf_r+0x92>
 8022e7c:	e00f      	b.n	8022e9e <__swbuf_r+0x8e>
 8022e7e:	4b0b      	ldr	r3, [pc, #44]	; (8022eac <__swbuf_r+0x9c>)
 8022e80:	429c      	cmp	r4, r3
 8022e82:	d101      	bne.n	8022e88 <__swbuf_r+0x78>
 8022e84:	68ac      	ldr	r4, [r5, #8]
 8022e86:	e7d0      	b.n	8022e2a <__swbuf_r+0x1a>
 8022e88:	4b09      	ldr	r3, [pc, #36]	; (8022eb0 <__swbuf_r+0xa0>)
 8022e8a:	429c      	cmp	r4, r3
 8022e8c:	bf08      	it	eq
 8022e8e:	68ec      	ldreq	r4, [r5, #12]
 8022e90:	e7cb      	b.n	8022e2a <__swbuf_r+0x1a>
 8022e92:	4621      	mov	r1, r4
 8022e94:	4628      	mov	r0, r5
 8022e96:	f000 f80d 	bl	8022eb4 <__swsetup_r>
 8022e9a:	2800      	cmp	r0, #0
 8022e9c:	d0cc      	beq.n	8022e38 <__swbuf_r+0x28>
 8022e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8022ea2:	4638      	mov	r0, r7
 8022ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ea6:	bf00      	nop
 8022ea8:	08027178 	.word	0x08027178
 8022eac:	08027198 	.word	0x08027198
 8022eb0:	08027158 	.word	0x08027158

08022eb4 <__swsetup_r>:
 8022eb4:	4b32      	ldr	r3, [pc, #200]	; (8022f80 <__swsetup_r+0xcc>)
 8022eb6:	b570      	push	{r4, r5, r6, lr}
 8022eb8:	681d      	ldr	r5, [r3, #0]
 8022eba:	4606      	mov	r6, r0
 8022ebc:	460c      	mov	r4, r1
 8022ebe:	b125      	cbz	r5, 8022eca <__swsetup_r+0x16>
 8022ec0:	69ab      	ldr	r3, [r5, #24]
 8022ec2:	b913      	cbnz	r3, 8022eca <__swsetup_r+0x16>
 8022ec4:	4628      	mov	r0, r5
 8022ec6:	f000 f96f 	bl	80231a8 <__sinit>
 8022eca:	4b2e      	ldr	r3, [pc, #184]	; (8022f84 <__swsetup_r+0xd0>)
 8022ecc:	429c      	cmp	r4, r3
 8022ece:	d10f      	bne.n	8022ef0 <__swsetup_r+0x3c>
 8022ed0:	686c      	ldr	r4, [r5, #4]
 8022ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ed6:	b29a      	uxth	r2, r3
 8022ed8:	0715      	lsls	r5, r2, #28
 8022eda:	d42c      	bmi.n	8022f36 <__swsetup_r+0x82>
 8022edc:	06d0      	lsls	r0, r2, #27
 8022ede:	d411      	bmi.n	8022f04 <__swsetup_r+0x50>
 8022ee0:	2209      	movs	r2, #9
 8022ee2:	6032      	str	r2, [r6, #0]
 8022ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ee8:	81a3      	strh	r3, [r4, #12]
 8022eea:	f04f 30ff 	mov.w	r0, #4294967295
 8022eee:	e03e      	b.n	8022f6e <__swsetup_r+0xba>
 8022ef0:	4b25      	ldr	r3, [pc, #148]	; (8022f88 <__swsetup_r+0xd4>)
 8022ef2:	429c      	cmp	r4, r3
 8022ef4:	d101      	bne.n	8022efa <__swsetup_r+0x46>
 8022ef6:	68ac      	ldr	r4, [r5, #8]
 8022ef8:	e7eb      	b.n	8022ed2 <__swsetup_r+0x1e>
 8022efa:	4b24      	ldr	r3, [pc, #144]	; (8022f8c <__swsetup_r+0xd8>)
 8022efc:	429c      	cmp	r4, r3
 8022efe:	bf08      	it	eq
 8022f00:	68ec      	ldreq	r4, [r5, #12]
 8022f02:	e7e6      	b.n	8022ed2 <__swsetup_r+0x1e>
 8022f04:	0751      	lsls	r1, r2, #29
 8022f06:	d512      	bpl.n	8022f2e <__swsetup_r+0x7a>
 8022f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f0a:	b141      	cbz	r1, 8022f1e <__swsetup_r+0x6a>
 8022f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022f10:	4299      	cmp	r1, r3
 8022f12:	d002      	beq.n	8022f1a <__swsetup_r+0x66>
 8022f14:	4630      	mov	r0, r6
 8022f16:	f7ff f821 	bl	8021f5c <_free_r>
 8022f1a:	2300      	movs	r3, #0
 8022f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8022f1e:	89a3      	ldrh	r3, [r4, #12]
 8022f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022f24:	81a3      	strh	r3, [r4, #12]
 8022f26:	2300      	movs	r3, #0
 8022f28:	6063      	str	r3, [r4, #4]
 8022f2a:	6923      	ldr	r3, [r4, #16]
 8022f2c:	6023      	str	r3, [r4, #0]
 8022f2e:	89a3      	ldrh	r3, [r4, #12]
 8022f30:	f043 0308 	orr.w	r3, r3, #8
 8022f34:	81a3      	strh	r3, [r4, #12]
 8022f36:	6923      	ldr	r3, [r4, #16]
 8022f38:	b94b      	cbnz	r3, 8022f4e <__swsetup_r+0x9a>
 8022f3a:	89a3      	ldrh	r3, [r4, #12]
 8022f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022f44:	d003      	beq.n	8022f4e <__swsetup_r+0x9a>
 8022f46:	4621      	mov	r1, r4
 8022f48:	4630      	mov	r0, r6
 8022f4a:	f000 fa35 	bl	80233b8 <__smakebuf_r>
 8022f4e:	89a2      	ldrh	r2, [r4, #12]
 8022f50:	f012 0301 	ands.w	r3, r2, #1
 8022f54:	d00c      	beq.n	8022f70 <__swsetup_r+0xbc>
 8022f56:	2300      	movs	r3, #0
 8022f58:	60a3      	str	r3, [r4, #8]
 8022f5a:	6963      	ldr	r3, [r4, #20]
 8022f5c:	425b      	negs	r3, r3
 8022f5e:	61a3      	str	r3, [r4, #24]
 8022f60:	6923      	ldr	r3, [r4, #16]
 8022f62:	b953      	cbnz	r3, 8022f7a <__swsetup_r+0xc6>
 8022f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022f6c:	d1ba      	bne.n	8022ee4 <__swsetup_r+0x30>
 8022f6e:	bd70      	pop	{r4, r5, r6, pc}
 8022f70:	0792      	lsls	r2, r2, #30
 8022f72:	bf58      	it	pl
 8022f74:	6963      	ldrpl	r3, [r4, #20]
 8022f76:	60a3      	str	r3, [r4, #8]
 8022f78:	e7f2      	b.n	8022f60 <__swsetup_r+0xac>
 8022f7a:	2000      	movs	r0, #0
 8022f7c:	e7f7      	b.n	8022f6e <__swsetup_r+0xba>
 8022f7e:	bf00      	nop
 8022f80:	200000f4 	.word	0x200000f4
 8022f84:	08027178 	.word	0x08027178
 8022f88:	08027198 	.word	0x08027198
 8022f8c:	08027158 	.word	0x08027158

08022f90 <abort>:
 8022f90:	b508      	push	{r3, lr}
 8022f92:	2006      	movs	r0, #6
 8022f94:	f000 fc54 	bl	8023840 <raise>
 8022f98:	2001      	movs	r0, #1
 8022f9a:	f7de fc81 	bl	80018a0 <_exit>

08022f9e <div>:
 8022f9e:	2900      	cmp	r1, #0
 8022fa0:	b510      	push	{r4, lr}
 8022fa2:	fb91 f4f2 	sdiv	r4, r1, r2
 8022fa6:	fb02 1314 	mls	r3, r2, r4, r1
 8022faa:	db06      	blt.n	8022fba <div+0x1c>
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	da01      	bge.n	8022fb4 <div+0x16>
 8022fb0:	3401      	adds	r4, #1
 8022fb2:	1a9b      	subs	r3, r3, r2
 8022fb4:	e9c0 4300 	strd	r4, r3, [r0]
 8022fb8:	bd10      	pop	{r4, pc}
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	bfc4      	itt	gt
 8022fbe:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8022fc2:	189b      	addgt	r3, r3, r2
 8022fc4:	e7f6      	b.n	8022fb4 <div+0x16>
	...

08022fc8 <__sflush_r>:
 8022fc8:	898a      	ldrh	r2, [r1, #12]
 8022fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fce:	4605      	mov	r5, r0
 8022fd0:	0710      	lsls	r0, r2, #28
 8022fd2:	460c      	mov	r4, r1
 8022fd4:	d458      	bmi.n	8023088 <__sflush_r+0xc0>
 8022fd6:	684b      	ldr	r3, [r1, #4]
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	dc05      	bgt.n	8022fe8 <__sflush_r+0x20>
 8022fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	dc02      	bgt.n	8022fe8 <__sflush_r+0x20>
 8022fe2:	2000      	movs	r0, #0
 8022fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022fea:	2e00      	cmp	r6, #0
 8022fec:	d0f9      	beq.n	8022fe2 <__sflush_r+0x1a>
 8022fee:	2300      	movs	r3, #0
 8022ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022ff4:	682f      	ldr	r7, [r5, #0]
 8022ff6:	6a21      	ldr	r1, [r4, #32]
 8022ff8:	602b      	str	r3, [r5, #0]
 8022ffa:	d032      	beq.n	8023062 <__sflush_r+0x9a>
 8022ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022ffe:	89a3      	ldrh	r3, [r4, #12]
 8023000:	075a      	lsls	r2, r3, #29
 8023002:	d505      	bpl.n	8023010 <__sflush_r+0x48>
 8023004:	6863      	ldr	r3, [r4, #4]
 8023006:	1ac0      	subs	r0, r0, r3
 8023008:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802300a:	b10b      	cbz	r3, 8023010 <__sflush_r+0x48>
 802300c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802300e:	1ac0      	subs	r0, r0, r3
 8023010:	2300      	movs	r3, #0
 8023012:	4602      	mov	r2, r0
 8023014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023016:	6a21      	ldr	r1, [r4, #32]
 8023018:	4628      	mov	r0, r5
 802301a:	47b0      	blx	r6
 802301c:	1c43      	adds	r3, r0, #1
 802301e:	89a3      	ldrh	r3, [r4, #12]
 8023020:	d106      	bne.n	8023030 <__sflush_r+0x68>
 8023022:	6829      	ldr	r1, [r5, #0]
 8023024:	291d      	cmp	r1, #29
 8023026:	d848      	bhi.n	80230ba <__sflush_r+0xf2>
 8023028:	4a29      	ldr	r2, [pc, #164]	; (80230d0 <__sflush_r+0x108>)
 802302a:	40ca      	lsrs	r2, r1
 802302c:	07d6      	lsls	r6, r2, #31
 802302e:	d544      	bpl.n	80230ba <__sflush_r+0xf2>
 8023030:	2200      	movs	r2, #0
 8023032:	6062      	str	r2, [r4, #4]
 8023034:	04d9      	lsls	r1, r3, #19
 8023036:	6922      	ldr	r2, [r4, #16]
 8023038:	6022      	str	r2, [r4, #0]
 802303a:	d504      	bpl.n	8023046 <__sflush_r+0x7e>
 802303c:	1c42      	adds	r2, r0, #1
 802303e:	d101      	bne.n	8023044 <__sflush_r+0x7c>
 8023040:	682b      	ldr	r3, [r5, #0]
 8023042:	b903      	cbnz	r3, 8023046 <__sflush_r+0x7e>
 8023044:	6560      	str	r0, [r4, #84]	; 0x54
 8023046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023048:	602f      	str	r7, [r5, #0]
 802304a:	2900      	cmp	r1, #0
 802304c:	d0c9      	beq.n	8022fe2 <__sflush_r+0x1a>
 802304e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023052:	4299      	cmp	r1, r3
 8023054:	d002      	beq.n	802305c <__sflush_r+0x94>
 8023056:	4628      	mov	r0, r5
 8023058:	f7fe ff80 	bl	8021f5c <_free_r>
 802305c:	2000      	movs	r0, #0
 802305e:	6360      	str	r0, [r4, #52]	; 0x34
 8023060:	e7c0      	b.n	8022fe4 <__sflush_r+0x1c>
 8023062:	2301      	movs	r3, #1
 8023064:	4628      	mov	r0, r5
 8023066:	47b0      	blx	r6
 8023068:	1c41      	adds	r1, r0, #1
 802306a:	d1c8      	bne.n	8022ffe <__sflush_r+0x36>
 802306c:	682b      	ldr	r3, [r5, #0]
 802306e:	2b00      	cmp	r3, #0
 8023070:	d0c5      	beq.n	8022ffe <__sflush_r+0x36>
 8023072:	2b1d      	cmp	r3, #29
 8023074:	d001      	beq.n	802307a <__sflush_r+0xb2>
 8023076:	2b16      	cmp	r3, #22
 8023078:	d101      	bne.n	802307e <__sflush_r+0xb6>
 802307a:	602f      	str	r7, [r5, #0]
 802307c:	e7b1      	b.n	8022fe2 <__sflush_r+0x1a>
 802307e:	89a3      	ldrh	r3, [r4, #12]
 8023080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023084:	81a3      	strh	r3, [r4, #12]
 8023086:	e7ad      	b.n	8022fe4 <__sflush_r+0x1c>
 8023088:	690f      	ldr	r7, [r1, #16]
 802308a:	2f00      	cmp	r7, #0
 802308c:	d0a9      	beq.n	8022fe2 <__sflush_r+0x1a>
 802308e:	0793      	lsls	r3, r2, #30
 8023090:	680e      	ldr	r6, [r1, #0]
 8023092:	bf08      	it	eq
 8023094:	694b      	ldreq	r3, [r1, #20]
 8023096:	600f      	str	r7, [r1, #0]
 8023098:	bf18      	it	ne
 802309a:	2300      	movne	r3, #0
 802309c:	eba6 0807 	sub.w	r8, r6, r7
 80230a0:	608b      	str	r3, [r1, #8]
 80230a2:	f1b8 0f00 	cmp.w	r8, #0
 80230a6:	dd9c      	ble.n	8022fe2 <__sflush_r+0x1a>
 80230a8:	4643      	mov	r3, r8
 80230aa:	463a      	mov	r2, r7
 80230ac:	6a21      	ldr	r1, [r4, #32]
 80230ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80230b0:	4628      	mov	r0, r5
 80230b2:	47b0      	blx	r6
 80230b4:	2800      	cmp	r0, #0
 80230b6:	dc06      	bgt.n	80230c6 <__sflush_r+0xfe>
 80230b8:	89a3      	ldrh	r3, [r4, #12]
 80230ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230be:	81a3      	strh	r3, [r4, #12]
 80230c0:	f04f 30ff 	mov.w	r0, #4294967295
 80230c4:	e78e      	b.n	8022fe4 <__sflush_r+0x1c>
 80230c6:	4407      	add	r7, r0
 80230c8:	eba8 0800 	sub.w	r8, r8, r0
 80230cc:	e7e9      	b.n	80230a2 <__sflush_r+0xda>
 80230ce:	bf00      	nop
 80230d0:	20400001 	.word	0x20400001

080230d4 <_fflush_r>:
 80230d4:	b538      	push	{r3, r4, r5, lr}
 80230d6:	690b      	ldr	r3, [r1, #16]
 80230d8:	4605      	mov	r5, r0
 80230da:	460c      	mov	r4, r1
 80230dc:	b1db      	cbz	r3, 8023116 <_fflush_r+0x42>
 80230de:	b118      	cbz	r0, 80230e8 <_fflush_r+0x14>
 80230e0:	6983      	ldr	r3, [r0, #24]
 80230e2:	b90b      	cbnz	r3, 80230e8 <_fflush_r+0x14>
 80230e4:	f000 f860 	bl	80231a8 <__sinit>
 80230e8:	4b0c      	ldr	r3, [pc, #48]	; (802311c <_fflush_r+0x48>)
 80230ea:	429c      	cmp	r4, r3
 80230ec:	d109      	bne.n	8023102 <_fflush_r+0x2e>
 80230ee:	686c      	ldr	r4, [r5, #4]
 80230f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230f4:	b17b      	cbz	r3, 8023116 <_fflush_r+0x42>
 80230f6:	4621      	mov	r1, r4
 80230f8:	4628      	mov	r0, r5
 80230fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80230fe:	f7ff bf63 	b.w	8022fc8 <__sflush_r>
 8023102:	4b07      	ldr	r3, [pc, #28]	; (8023120 <_fflush_r+0x4c>)
 8023104:	429c      	cmp	r4, r3
 8023106:	d101      	bne.n	802310c <_fflush_r+0x38>
 8023108:	68ac      	ldr	r4, [r5, #8]
 802310a:	e7f1      	b.n	80230f0 <_fflush_r+0x1c>
 802310c:	4b05      	ldr	r3, [pc, #20]	; (8023124 <_fflush_r+0x50>)
 802310e:	429c      	cmp	r4, r3
 8023110:	bf08      	it	eq
 8023112:	68ec      	ldreq	r4, [r5, #12]
 8023114:	e7ec      	b.n	80230f0 <_fflush_r+0x1c>
 8023116:	2000      	movs	r0, #0
 8023118:	bd38      	pop	{r3, r4, r5, pc}
 802311a:	bf00      	nop
 802311c:	08027178 	.word	0x08027178
 8023120:	08027198 	.word	0x08027198
 8023124:	08027158 	.word	0x08027158

08023128 <std>:
 8023128:	2300      	movs	r3, #0
 802312a:	b510      	push	{r4, lr}
 802312c:	4604      	mov	r4, r0
 802312e:	e9c0 3300 	strd	r3, r3, [r0]
 8023132:	6083      	str	r3, [r0, #8]
 8023134:	8181      	strh	r1, [r0, #12]
 8023136:	6643      	str	r3, [r0, #100]	; 0x64
 8023138:	81c2      	strh	r2, [r0, #14]
 802313a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802313e:	6183      	str	r3, [r0, #24]
 8023140:	4619      	mov	r1, r3
 8023142:	2208      	movs	r2, #8
 8023144:	305c      	adds	r0, #92	; 0x5c
 8023146:	f7fe fc6c 	bl	8021a22 <memset>
 802314a:	4b05      	ldr	r3, [pc, #20]	; (8023160 <std+0x38>)
 802314c:	6263      	str	r3, [r4, #36]	; 0x24
 802314e:	4b05      	ldr	r3, [pc, #20]	; (8023164 <std+0x3c>)
 8023150:	62a3      	str	r3, [r4, #40]	; 0x28
 8023152:	4b05      	ldr	r3, [pc, #20]	; (8023168 <std+0x40>)
 8023154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023156:	4b05      	ldr	r3, [pc, #20]	; (802316c <std+0x44>)
 8023158:	6224      	str	r4, [r4, #32]
 802315a:	6323      	str	r3, [r4, #48]	; 0x30
 802315c:	bd10      	pop	{r4, pc}
 802315e:	bf00      	nop
 8023160:	080238cd 	.word	0x080238cd
 8023164:	080238f3 	.word	0x080238f3
 8023168:	0802392b 	.word	0x0802392b
 802316c:	0802394f 	.word	0x0802394f

08023170 <_cleanup_r>:
 8023170:	4901      	ldr	r1, [pc, #4]	; (8023178 <_cleanup_r+0x8>)
 8023172:	f000 b885 	b.w	8023280 <_fwalk_reent>
 8023176:	bf00      	nop
 8023178:	080230d5 	.word	0x080230d5

0802317c <__sfmoreglue>:
 802317c:	b570      	push	{r4, r5, r6, lr}
 802317e:	1e4a      	subs	r2, r1, #1
 8023180:	2568      	movs	r5, #104	; 0x68
 8023182:	4355      	muls	r5, r2
 8023184:	460e      	mov	r6, r1
 8023186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802318a:	f7fe ff35 	bl	8021ff8 <_malloc_r>
 802318e:	4604      	mov	r4, r0
 8023190:	b140      	cbz	r0, 80231a4 <__sfmoreglue+0x28>
 8023192:	2100      	movs	r1, #0
 8023194:	e9c0 1600 	strd	r1, r6, [r0]
 8023198:	300c      	adds	r0, #12
 802319a:	60a0      	str	r0, [r4, #8]
 802319c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80231a0:	f7fe fc3f 	bl	8021a22 <memset>
 80231a4:	4620      	mov	r0, r4
 80231a6:	bd70      	pop	{r4, r5, r6, pc}

080231a8 <__sinit>:
 80231a8:	6983      	ldr	r3, [r0, #24]
 80231aa:	b510      	push	{r4, lr}
 80231ac:	4604      	mov	r4, r0
 80231ae:	bb33      	cbnz	r3, 80231fe <__sinit+0x56>
 80231b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80231b4:	6503      	str	r3, [r0, #80]	; 0x50
 80231b6:	4b12      	ldr	r3, [pc, #72]	; (8023200 <__sinit+0x58>)
 80231b8:	4a12      	ldr	r2, [pc, #72]	; (8023204 <__sinit+0x5c>)
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	6282      	str	r2, [r0, #40]	; 0x28
 80231be:	4298      	cmp	r0, r3
 80231c0:	bf04      	itt	eq
 80231c2:	2301      	moveq	r3, #1
 80231c4:	6183      	streq	r3, [r0, #24]
 80231c6:	f000 f81f 	bl	8023208 <__sfp>
 80231ca:	6060      	str	r0, [r4, #4]
 80231cc:	4620      	mov	r0, r4
 80231ce:	f000 f81b 	bl	8023208 <__sfp>
 80231d2:	60a0      	str	r0, [r4, #8]
 80231d4:	4620      	mov	r0, r4
 80231d6:	f000 f817 	bl	8023208 <__sfp>
 80231da:	2200      	movs	r2, #0
 80231dc:	60e0      	str	r0, [r4, #12]
 80231de:	2104      	movs	r1, #4
 80231e0:	6860      	ldr	r0, [r4, #4]
 80231e2:	f7ff ffa1 	bl	8023128 <std>
 80231e6:	2201      	movs	r2, #1
 80231e8:	2109      	movs	r1, #9
 80231ea:	68a0      	ldr	r0, [r4, #8]
 80231ec:	f7ff ff9c 	bl	8023128 <std>
 80231f0:	2202      	movs	r2, #2
 80231f2:	2112      	movs	r1, #18
 80231f4:	68e0      	ldr	r0, [r4, #12]
 80231f6:	f7ff ff97 	bl	8023128 <std>
 80231fa:	2301      	movs	r3, #1
 80231fc:	61a3      	str	r3, [r4, #24]
 80231fe:	bd10      	pop	{r4, pc}
 8023200:	08027084 	.word	0x08027084
 8023204:	08023171 	.word	0x08023171

08023208 <__sfp>:
 8023208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802320a:	4b1b      	ldr	r3, [pc, #108]	; (8023278 <__sfp+0x70>)
 802320c:	681e      	ldr	r6, [r3, #0]
 802320e:	69b3      	ldr	r3, [r6, #24]
 8023210:	4607      	mov	r7, r0
 8023212:	b913      	cbnz	r3, 802321a <__sfp+0x12>
 8023214:	4630      	mov	r0, r6
 8023216:	f7ff ffc7 	bl	80231a8 <__sinit>
 802321a:	3648      	adds	r6, #72	; 0x48
 802321c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023220:	3b01      	subs	r3, #1
 8023222:	d503      	bpl.n	802322c <__sfp+0x24>
 8023224:	6833      	ldr	r3, [r6, #0]
 8023226:	b133      	cbz	r3, 8023236 <__sfp+0x2e>
 8023228:	6836      	ldr	r6, [r6, #0]
 802322a:	e7f7      	b.n	802321c <__sfp+0x14>
 802322c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023230:	b16d      	cbz	r5, 802324e <__sfp+0x46>
 8023232:	3468      	adds	r4, #104	; 0x68
 8023234:	e7f4      	b.n	8023220 <__sfp+0x18>
 8023236:	2104      	movs	r1, #4
 8023238:	4638      	mov	r0, r7
 802323a:	f7ff ff9f 	bl	802317c <__sfmoreglue>
 802323e:	6030      	str	r0, [r6, #0]
 8023240:	2800      	cmp	r0, #0
 8023242:	d1f1      	bne.n	8023228 <__sfp+0x20>
 8023244:	230c      	movs	r3, #12
 8023246:	603b      	str	r3, [r7, #0]
 8023248:	4604      	mov	r4, r0
 802324a:	4620      	mov	r0, r4
 802324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802324e:	4b0b      	ldr	r3, [pc, #44]	; (802327c <__sfp+0x74>)
 8023250:	6665      	str	r5, [r4, #100]	; 0x64
 8023252:	e9c4 5500 	strd	r5, r5, [r4]
 8023256:	60a5      	str	r5, [r4, #8]
 8023258:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802325c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8023260:	2208      	movs	r2, #8
 8023262:	4629      	mov	r1, r5
 8023264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023268:	f7fe fbdb 	bl	8021a22 <memset>
 802326c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023274:	e7e9      	b.n	802324a <__sfp+0x42>
 8023276:	bf00      	nop
 8023278:	08027084 	.word	0x08027084
 802327c:	ffff0001 	.word	0xffff0001

08023280 <_fwalk_reent>:
 8023280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023284:	4680      	mov	r8, r0
 8023286:	4689      	mov	r9, r1
 8023288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802328c:	2600      	movs	r6, #0
 802328e:	b914      	cbnz	r4, 8023296 <_fwalk_reent+0x16>
 8023290:	4630      	mov	r0, r6
 8023292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023296:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802329a:	3f01      	subs	r7, #1
 802329c:	d501      	bpl.n	80232a2 <_fwalk_reent+0x22>
 802329e:	6824      	ldr	r4, [r4, #0]
 80232a0:	e7f5      	b.n	802328e <_fwalk_reent+0xe>
 80232a2:	89ab      	ldrh	r3, [r5, #12]
 80232a4:	2b01      	cmp	r3, #1
 80232a6:	d907      	bls.n	80232b8 <_fwalk_reent+0x38>
 80232a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80232ac:	3301      	adds	r3, #1
 80232ae:	d003      	beq.n	80232b8 <_fwalk_reent+0x38>
 80232b0:	4629      	mov	r1, r5
 80232b2:	4640      	mov	r0, r8
 80232b4:	47c8      	blx	r9
 80232b6:	4306      	orrs	r6, r0
 80232b8:	3568      	adds	r5, #104	; 0x68
 80232ba:	e7ee      	b.n	802329a <_fwalk_reent+0x1a>

080232bc <_findenv_r>:
 80232bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c0:	4607      	mov	r7, r0
 80232c2:	468b      	mov	fp, r1
 80232c4:	4690      	mov	r8, r2
 80232c6:	f000 fc33 	bl	8023b30 <__env_lock>
 80232ca:	4b19      	ldr	r3, [pc, #100]	; (8023330 <_findenv_r+0x74>)
 80232cc:	681d      	ldr	r5, [r3, #0]
 80232ce:	469a      	mov	sl, r3
 80232d0:	b13d      	cbz	r5, 80232e2 <_findenv_r+0x26>
 80232d2:	465c      	mov	r4, fp
 80232d4:	4623      	mov	r3, r4
 80232d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232da:	b32a      	cbz	r2, 8023328 <_findenv_r+0x6c>
 80232dc:	2a3d      	cmp	r2, #61	; 0x3d
 80232de:	461c      	mov	r4, r3
 80232e0:	d1f8      	bne.n	80232d4 <_findenv_r+0x18>
 80232e2:	4638      	mov	r0, r7
 80232e4:	f000 fc25 	bl	8023b32 <__env_unlock>
 80232e8:	2000      	movs	r0, #0
 80232ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ee:	464d      	mov	r5, r9
 80232f0:	46a9      	mov	r9, r5
 80232f2:	f859 0b04 	ldr.w	r0, [r9], #4
 80232f6:	2800      	cmp	r0, #0
 80232f8:	d0f3      	beq.n	80232e2 <_findenv_r+0x26>
 80232fa:	4622      	mov	r2, r4
 80232fc:	4659      	mov	r1, fp
 80232fe:	f000 fb32 	bl	8023966 <strncmp>
 8023302:	2800      	cmp	r0, #0
 8023304:	d1f3      	bne.n	80232ee <_findenv_r+0x32>
 8023306:	f859 3c04 	ldr.w	r3, [r9, #-4]
 802330a:	191e      	adds	r6, r3, r4
 802330c:	5d1b      	ldrb	r3, [r3, r4]
 802330e:	2b3d      	cmp	r3, #61	; 0x3d
 8023310:	d1ed      	bne.n	80232ee <_findenv_r+0x32>
 8023312:	f8da 3000 	ldr.w	r3, [sl]
 8023316:	1aed      	subs	r5, r5, r3
 8023318:	10ad      	asrs	r5, r5, #2
 802331a:	4638      	mov	r0, r7
 802331c:	f8c8 5000 	str.w	r5, [r8]
 8023320:	f000 fc07 	bl	8023b32 <__env_unlock>
 8023324:	1c70      	adds	r0, r6, #1
 8023326:	e7e0      	b.n	80232ea <_findenv_r+0x2e>
 8023328:	eba4 040b 	sub.w	r4, r4, fp
 802332c:	e7e0      	b.n	80232f0 <_findenv_r+0x34>
 802332e:	bf00      	nop
 8023330:	20000064 	.word	0x20000064

08023334 <_getenv_r>:
 8023334:	b507      	push	{r0, r1, r2, lr}
 8023336:	aa01      	add	r2, sp, #4
 8023338:	f7ff ffc0 	bl	80232bc <_findenv_r>
 802333c:	b003      	add	sp, #12
 802333e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08023344 <__gettzinfo>:
 8023344:	4800      	ldr	r0, [pc, #0]	; (8023348 <__gettzinfo+0x4>)
 8023346:	4770      	bx	lr
 8023348:	20000160 	.word	0x20000160

0802334c <__locale_ctype_ptr_l>:
 802334c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8023350:	4770      	bx	lr
	...

08023354 <__locale_ctype_ptr>:
 8023354:	4b04      	ldr	r3, [pc, #16]	; (8023368 <__locale_ctype_ptr+0x14>)
 8023356:	4a05      	ldr	r2, [pc, #20]	; (802336c <__locale_ctype_ptr+0x18>)
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	6a1b      	ldr	r3, [r3, #32]
 802335c:	2b00      	cmp	r3, #0
 802335e:	bf08      	it	eq
 8023360:	4613      	moveq	r3, r2
 8023362:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8023366:	4770      	bx	lr
 8023368:	200000f4 	.word	0x200000f4
 802336c:	200001b8 	.word	0x200001b8

08023370 <__swhatbuf_r>:
 8023370:	b570      	push	{r4, r5, r6, lr}
 8023372:	460e      	mov	r6, r1
 8023374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023378:	2900      	cmp	r1, #0
 802337a:	b096      	sub	sp, #88	; 0x58
 802337c:	4614      	mov	r4, r2
 802337e:	461d      	mov	r5, r3
 8023380:	da07      	bge.n	8023392 <__swhatbuf_r+0x22>
 8023382:	2300      	movs	r3, #0
 8023384:	602b      	str	r3, [r5, #0]
 8023386:	89b3      	ldrh	r3, [r6, #12]
 8023388:	061a      	lsls	r2, r3, #24
 802338a:	d410      	bmi.n	80233ae <__swhatbuf_r+0x3e>
 802338c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023390:	e00e      	b.n	80233b0 <__swhatbuf_r+0x40>
 8023392:	466a      	mov	r2, sp
 8023394:	f000 fbce 	bl	8023b34 <_fstat_r>
 8023398:	2800      	cmp	r0, #0
 802339a:	dbf2      	blt.n	8023382 <__swhatbuf_r+0x12>
 802339c:	9a01      	ldr	r2, [sp, #4]
 802339e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80233a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80233a6:	425a      	negs	r2, r3
 80233a8:	415a      	adcs	r2, r3
 80233aa:	602a      	str	r2, [r5, #0]
 80233ac:	e7ee      	b.n	802338c <__swhatbuf_r+0x1c>
 80233ae:	2340      	movs	r3, #64	; 0x40
 80233b0:	2000      	movs	r0, #0
 80233b2:	6023      	str	r3, [r4, #0]
 80233b4:	b016      	add	sp, #88	; 0x58
 80233b6:	bd70      	pop	{r4, r5, r6, pc}

080233b8 <__smakebuf_r>:
 80233b8:	898b      	ldrh	r3, [r1, #12]
 80233ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80233bc:	079d      	lsls	r5, r3, #30
 80233be:	4606      	mov	r6, r0
 80233c0:	460c      	mov	r4, r1
 80233c2:	d507      	bpl.n	80233d4 <__smakebuf_r+0x1c>
 80233c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80233c8:	6023      	str	r3, [r4, #0]
 80233ca:	6123      	str	r3, [r4, #16]
 80233cc:	2301      	movs	r3, #1
 80233ce:	6163      	str	r3, [r4, #20]
 80233d0:	b002      	add	sp, #8
 80233d2:	bd70      	pop	{r4, r5, r6, pc}
 80233d4:	ab01      	add	r3, sp, #4
 80233d6:	466a      	mov	r2, sp
 80233d8:	f7ff ffca 	bl	8023370 <__swhatbuf_r>
 80233dc:	9900      	ldr	r1, [sp, #0]
 80233de:	4605      	mov	r5, r0
 80233e0:	4630      	mov	r0, r6
 80233e2:	f7fe fe09 	bl	8021ff8 <_malloc_r>
 80233e6:	b948      	cbnz	r0, 80233fc <__smakebuf_r+0x44>
 80233e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233ec:	059a      	lsls	r2, r3, #22
 80233ee:	d4ef      	bmi.n	80233d0 <__smakebuf_r+0x18>
 80233f0:	f023 0303 	bic.w	r3, r3, #3
 80233f4:	f043 0302 	orr.w	r3, r3, #2
 80233f8:	81a3      	strh	r3, [r4, #12]
 80233fa:	e7e3      	b.n	80233c4 <__smakebuf_r+0xc>
 80233fc:	4b0d      	ldr	r3, [pc, #52]	; (8023434 <__smakebuf_r+0x7c>)
 80233fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8023400:	89a3      	ldrh	r3, [r4, #12]
 8023402:	6020      	str	r0, [r4, #0]
 8023404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023408:	81a3      	strh	r3, [r4, #12]
 802340a:	9b00      	ldr	r3, [sp, #0]
 802340c:	6163      	str	r3, [r4, #20]
 802340e:	9b01      	ldr	r3, [sp, #4]
 8023410:	6120      	str	r0, [r4, #16]
 8023412:	b15b      	cbz	r3, 802342c <__smakebuf_r+0x74>
 8023414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023418:	4630      	mov	r0, r6
 802341a:	f000 fb9d 	bl	8023b58 <_isatty_r>
 802341e:	b128      	cbz	r0, 802342c <__smakebuf_r+0x74>
 8023420:	89a3      	ldrh	r3, [r4, #12]
 8023422:	f023 0303 	bic.w	r3, r3, #3
 8023426:	f043 0301 	orr.w	r3, r3, #1
 802342a:	81a3      	strh	r3, [r4, #12]
 802342c:	89a3      	ldrh	r3, [r4, #12]
 802342e:	431d      	orrs	r5, r3
 8023430:	81a5      	strh	r5, [r4, #12]
 8023432:	e7cd      	b.n	80233d0 <__smakebuf_r+0x18>
 8023434:	08023171 	.word	0x08023171

08023438 <__ascii_mbtowc>:
 8023438:	b082      	sub	sp, #8
 802343a:	b901      	cbnz	r1, 802343e <__ascii_mbtowc+0x6>
 802343c:	a901      	add	r1, sp, #4
 802343e:	b142      	cbz	r2, 8023452 <__ascii_mbtowc+0x1a>
 8023440:	b14b      	cbz	r3, 8023456 <__ascii_mbtowc+0x1e>
 8023442:	7813      	ldrb	r3, [r2, #0]
 8023444:	600b      	str	r3, [r1, #0]
 8023446:	7812      	ldrb	r2, [r2, #0]
 8023448:	1c10      	adds	r0, r2, #0
 802344a:	bf18      	it	ne
 802344c:	2001      	movne	r0, #1
 802344e:	b002      	add	sp, #8
 8023450:	4770      	bx	lr
 8023452:	4610      	mov	r0, r2
 8023454:	e7fb      	b.n	802344e <__ascii_mbtowc+0x16>
 8023456:	f06f 0001 	mvn.w	r0, #1
 802345a:	e7f8      	b.n	802344e <__ascii_mbtowc+0x16>

0802345c <memmove>:
 802345c:	4288      	cmp	r0, r1
 802345e:	b510      	push	{r4, lr}
 8023460:	eb01 0302 	add.w	r3, r1, r2
 8023464:	d807      	bhi.n	8023476 <memmove+0x1a>
 8023466:	1e42      	subs	r2, r0, #1
 8023468:	4299      	cmp	r1, r3
 802346a:	d00a      	beq.n	8023482 <memmove+0x26>
 802346c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023470:	f802 4f01 	strb.w	r4, [r2, #1]!
 8023474:	e7f8      	b.n	8023468 <memmove+0xc>
 8023476:	4283      	cmp	r3, r0
 8023478:	d9f5      	bls.n	8023466 <memmove+0xa>
 802347a:	1881      	adds	r1, r0, r2
 802347c:	1ad2      	subs	r2, r2, r3
 802347e:	42d3      	cmn	r3, r2
 8023480:	d100      	bne.n	8023484 <memmove+0x28>
 8023482:	bd10      	pop	{r4, pc}
 8023484:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023488:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802348c:	e7f7      	b.n	802347e <memmove+0x22>

0802348e <__malloc_lock>:
 802348e:	4770      	bx	lr

08023490 <__malloc_unlock>:
 8023490:	4770      	bx	lr

08023492 <_realloc_r>:
 8023492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023494:	4607      	mov	r7, r0
 8023496:	4614      	mov	r4, r2
 8023498:	460e      	mov	r6, r1
 802349a:	b921      	cbnz	r1, 80234a6 <_realloc_r+0x14>
 802349c:	4611      	mov	r1, r2
 802349e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80234a2:	f7fe bda9 	b.w	8021ff8 <_malloc_r>
 80234a6:	b922      	cbnz	r2, 80234b2 <_realloc_r+0x20>
 80234a8:	f7fe fd58 	bl	8021f5c <_free_r>
 80234ac:	4625      	mov	r5, r4
 80234ae:	4628      	mov	r0, r5
 80234b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80234b2:	f000 fb73 	bl	8023b9c <_malloc_usable_size_r>
 80234b6:	42a0      	cmp	r0, r4
 80234b8:	d20f      	bcs.n	80234da <_realloc_r+0x48>
 80234ba:	4621      	mov	r1, r4
 80234bc:	4638      	mov	r0, r7
 80234be:	f7fe fd9b 	bl	8021ff8 <_malloc_r>
 80234c2:	4605      	mov	r5, r0
 80234c4:	2800      	cmp	r0, #0
 80234c6:	d0f2      	beq.n	80234ae <_realloc_r+0x1c>
 80234c8:	4631      	mov	r1, r6
 80234ca:	4622      	mov	r2, r4
 80234cc:	f7fe fa9e 	bl	8021a0c <memcpy>
 80234d0:	4631      	mov	r1, r6
 80234d2:	4638      	mov	r0, r7
 80234d4:	f7fe fd42 	bl	8021f5c <_free_r>
 80234d8:	e7e9      	b.n	80234ae <_realloc_r+0x1c>
 80234da:	4635      	mov	r5, r6
 80234dc:	e7e7      	b.n	80234ae <_realloc_r+0x1c>

080234de <__ssputs_r>:
 80234de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234e2:	688e      	ldr	r6, [r1, #8]
 80234e4:	429e      	cmp	r6, r3
 80234e6:	4682      	mov	sl, r0
 80234e8:	460c      	mov	r4, r1
 80234ea:	4690      	mov	r8, r2
 80234ec:	4699      	mov	r9, r3
 80234ee:	d837      	bhi.n	8023560 <__ssputs_r+0x82>
 80234f0:	898a      	ldrh	r2, [r1, #12]
 80234f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80234f6:	d031      	beq.n	802355c <__ssputs_r+0x7e>
 80234f8:	6825      	ldr	r5, [r4, #0]
 80234fa:	6909      	ldr	r1, [r1, #16]
 80234fc:	1a6f      	subs	r7, r5, r1
 80234fe:	6965      	ldr	r5, [r4, #20]
 8023500:	2302      	movs	r3, #2
 8023502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023506:	fb95 f5f3 	sdiv	r5, r5, r3
 802350a:	f109 0301 	add.w	r3, r9, #1
 802350e:	443b      	add	r3, r7
 8023510:	429d      	cmp	r5, r3
 8023512:	bf38      	it	cc
 8023514:	461d      	movcc	r5, r3
 8023516:	0553      	lsls	r3, r2, #21
 8023518:	d530      	bpl.n	802357c <__ssputs_r+0x9e>
 802351a:	4629      	mov	r1, r5
 802351c:	f7fe fd6c 	bl	8021ff8 <_malloc_r>
 8023520:	4606      	mov	r6, r0
 8023522:	b950      	cbnz	r0, 802353a <__ssputs_r+0x5c>
 8023524:	230c      	movs	r3, #12
 8023526:	f8ca 3000 	str.w	r3, [sl]
 802352a:	89a3      	ldrh	r3, [r4, #12]
 802352c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023530:	81a3      	strh	r3, [r4, #12]
 8023532:	f04f 30ff 	mov.w	r0, #4294967295
 8023536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802353a:	463a      	mov	r2, r7
 802353c:	6921      	ldr	r1, [r4, #16]
 802353e:	f7fe fa65 	bl	8021a0c <memcpy>
 8023542:	89a3      	ldrh	r3, [r4, #12]
 8023544:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802354c:	81a3      	strh	r3, [r4, #12]
 802354e:	6126      	str	r6, [r4, #16]
 8023550:	6165      	str	r5, [r4, #20]
 8023552:	443e      	add	r6, r7
 8023554:	1bed      	subs	r5, r5, r7
 8023556:	6026      	str	r6, [r4, #0]
 8023558:	60a5      	str	r5, [r4, #8]
 802355a:	464e      	mov	r6, r9
 802355c:	454e      	cmp	r6, r9
 802355e:	d900      	bls.n	8023562 <__ssputs_r+0x84>
 8023560:	464e      	mov	r6, r9
 8023562:	4632      	mov	r2, r6
 8023564:	4641      	mov	r1, r8
 8023566:	6820      	ldr	r0, [r4, #0]
 8023568:	f7ff ff78 	bl	802345c <memmove>
 802356c:	68a3      	ldr	r3, [r4, #8]
 802356e:	1b9b      	subs	r3, r3, r6
 8023570:	60a3      	str	r3, [r4, #8]
 8023572:	6823      	ldr	r3, [r4, #0]
 8023574:	441e      	add	r6, r3
 8023576:	6026      	str	r6, [r4, #0]
 8023578:	2000      	movs	r0, #0
 802357a:	e7dc      	b.n	8023536 <__ssputs_r+0x58>
 802357c:	462a      	mov	r2, r5
 802357e:	f7ff ff88 	bl	8023492 <_realloc_r>
 8023582:	4606      	mov	r6, r0
 8023584:	2800      	cmp	r0, #0
 8023586:	d1e2      	bne.n	802354e <__ssputs_r+0x70>
 8023588:	6921      	ldr	r1, [r4, #16]
 802358a:	4650      	mov	r0, sl
 802358c:	f7fe fce6 	bl	8021f5c <_free_r>
 8023590:	e7c8      	b.n	8023524 <__ssputs_r+0x46>
	...

08023594 <_svfiprintf_r>:
 8023594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023598:	461d      	mov	r5, r3
 802359a:	898b      	ldrh	r3, [r1, #12]
 802359c:	061f      	lsls	r7, r3, #24
 802359e:	b09d      	sub	sp, #116	; 0x74
 80235a0:	4680      	mov	r8, r0
 80235a2:	460c      	mov	r4, r1
 80235a4:	4616      	mov	r6, r2
 80235a6:	d50f      	bpl.n	80235c8 <_svfiprintf_r+0x34>
 80235a8:	690b      	ldr	r3, [r1, #16]
 80235aa:	b96b      	cbnz	r3, 80235c8 <_svfiprintf_r+0x34>
 80235ac:	2140      	movs	r1, #64	; 0x40
 80235ae:	f7fe fd23 	bl	8021ff8 <_malloc_r>
 80235b2:	6020      	str	r0, [r4, #0]
 80235b4:	6120      	str	r0, [r4, #16]
 80235b6:	b928      	cbnz	r0, 80235c4 <_svfiprintf_r+0x30>
 80235b8:	230c      	movs	r3, #12
 80235ba:	f8c8 3000 	str.w	r3, [r8]
 80235be:	f04f 30ff 	mov.w	r0, #4294967295
 80235c2:	e0c8      	b.n	8023756 <_svfiprintf_r+0x1c2>
 80235c4:	2340      	movs	r3, #64	; 0x40
 80235c6:	6163      	str	r3, [r4, #20]
 80235c8:	2300      	movs	r3, #0
 80235ca:	9309      	str	r3, [sp, #36]	; 0x24
 80235cc:	2320      	movs	r3, #32
 80235ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235d2:	2330      	movs	r3, #48	; 0x30
 80235d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235d8:	9503      	str	r5, [sp, #12]
 80235da:	f04f 0b01 	mov.w	fp, #1
 80235de:	4637      	mov	r7, r6
 80235e0:	463d      	mov	r5, r7
 80235e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80235e6:	b10b      	cbz	r3, 80235ec <_svfiprintf_r+0x58>
 80235e8:	2b25      	cmp	r3, #37	; 0x25
 80235ea:	d13e      	bne.n	802366a <_svfiprintf_r+0xd6>
 80235ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80235f0:	d00b      	beq.n	802360a <_svfiprintf_r+0x76>
 80235f2:	4653      	mov	r3, sl
 80235f4:	4632      	mov	r2, r6
 80235f6:	4621      	mov	r1, r4
 80235f8:	4640      	mov	r0, r8
 80235fa:	f7ff ff70 	bl	80234de <__ssputs_r>
 80235fe:	3001      	adds	r0, #1
 8023600:	f000 80a4 	beq.w	802374c <_svfiprintf_r+0x1b8>
 8023604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023606:	4453      	add	r3, sl
 8023608:	9309      	str	r3, [sp, #36]	; 0x24
 802360a:	783b      	ldrb	r3, [r7, #0]
 802360c:	2b00      	cmp	r3, #0
 802360e:	f000 809d 	beq.w	802374c <_svfiprintf_r+0x1b8>
 8023612:	2300      	movs	r3, #0
 8023614:	f04f 32ff 	mov.w	r2, #4294967295
 8023618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802361c:	9304      	str	r3, [sp, #16]
 802361e:	9307      	str	r3, [sp, #28]
 8023620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023624:	931a      	str	r3, [sp, #104]	; 0x68
 8023626:	462f      	mov	r7, r5
 8023628:	2205      	movs	r2, #5
 802362a:	f817 1b01 	ldrb.w	r1, [r7], #1
 802362e:	4850      	ldr	r0, [pc, #320]	; (8023770 <_svfiprintf_r+0x1dc>)
 8023630:	f7dc fdce 	bl	80001d0 <memchr>
 8023634:	9b04      	ldr	r3, [sp, #16]
 8023636:	b9d0      	cbnz	r0, 802366e <_svfiprintf_r+0xda>
 8023638:	06d9      	lsls	r1, r3, #27
 802363a:	bf44      	itt	mi
 802363c:	2220      	movmi	r2, #32
 802363e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023642:	071a      	lsls	r2, r3, #28
 8023644:	bf44      	itt	mi
 8023646:	222b      	movmi	r2, #43	; 0x2b
 8023648:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802364c:	782a      	ldrb	r2, [r5, #0]
 802364e:	2a2a      	cmp	r2, #42	; 0x2a
 8023650:	d015      	beq.n	802367e <_svfiprintf_r+0xea>
 8023652:	9a07      	ldr	r2, [sp, #28]
 8023654:	462f      	mov	r7, r5
 8023656:	2000      	movs	r0, #0
 8023658:	250a      	movs	r5, #10
 802365a:	4639      	mov	r1, r7
 802365c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023660:	3b30      	subs	r3, #48	; 0x30
 8023662:	2b09      	cmp	r3, #9
 8023664:	d94d      	bls.n	8023702 <_svfiprintf_r+0x16e>
 8023666:	b1b8      	cbz	r0, 8023698 <_svfiprintf_r+0x104>
 8023668:	e00f      	b.n	802368a <_svfiprintf_r+0xf6>
 802366a:	462f      	mov	r7, r5
 802366c:	e7b8      	b.n	80235e0 <_svfiprintf_r+0x4c>
 802366e:	4a40      	ldr	r2, [pc, #256]	; (8023770 <_svfiprintf_r+0x1dc>)
 8023670:	1a80      	subs	r0, r0, r2
 8023672:	fa0b f000 	lsl.w	r0, fp, r0
 8023676:	4318      	orrs	r0, r3
 8023678:	9004      	str	r0, [sp, #16]
 802367a:	463d      	mov	r5, r7
 802367c:	e7d3      	b.n	8023626 <_svfiprintf_r+0x92>
 802367e:	9a03      	ldr	r2, [sp, #12]
 8023680:	1d11      	adds	r1, r2, #4
 8023682:	6812      	ldr	r2, [r2, #0]
 8023684:	9103      	str	r1, [sp, #12]
 8023686:	2a00      	cmp	r2, #0
 8023688:	db01      	blt.n	802368e <_svfiprintf_r+0xfa>
 802368a:	9207      	str	r2, [sp, #28]
 802368c:	e004      	b.n	8023698 <_svfiprintf_r+0x104>
 802368e:	4252      	negs	r2, r2
 8023690:	f043 0302 	orr.w	r3, r3, #2
 8023694:	9207      	str	r2, [sp, #28]
 8023696:	9304      	str	r3, [sp, #16]
 8023698:	783b      	ldrb	r3, [r7, #0]
 802369a:	2b2e      	cmp	r3, #46	; 0x2e
 802369c:	d10c      	bne.n	80236b8 <_svfiprintf_r+0x124>
 802369e:	787b      	ldrb	r3, [r7, #1]
 80236a0:	2b2a      	cmp	r3, #42	; 0x2a
 80236a2:	d133      	bne.n	802370c <_svfiprintf_r+0x178>
 80236a4:	9b03      	ldr	r3, [sp, #12]
 80236a6:	1d1a      	adds	r2, r3, #4
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	9203      	str	r2, [sp, #12]
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	bfb8      	it	lt
 80236b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80236b4:	3702      	adds	r7, #2
 80236b6:	9305      	str	r3, [sp, #20]
 80236b8:	4d2e      	ldr	r5, [pc, #184]	; (8023774 <_svfiprintf_r+0x1e0>)
 80236ba:	7839      	ldrb	r1, [r7, #0]
 80236bc:	2203      	movs	r2, #3
 80236be:	4628      	mov	r0, r5
 80236c0:	f7dc fd86 	bl	80001d0 <memchr>
 80236c4:	b138      	cbz	r0, 80236d6 <_svfiprintf_r+0x142>
 80236c6:	2340      	movs	r3, #64	; 0x40
 80236c8:	1b40      	subs	r0, r0, r5
 80236ca:	fa03 f000 	lsl.w	r0, r3, r0
 80236ce:	9b04      	ldr	r3, [sp, #16]
 80236d0:	4303      	orrs	r3, r0
 80236d2:	3701      	adds	r7, #1
 80236d4:	9304      	str	r3, [sp, #16]
 80236d6:	7839      	ldrb	r1, [r7, #0]
 80236d8:	4827      	ldr	r0, [pc, #156]	; (8023778 <_svfiprintf_r+0x1e4>)
 80236da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80236de:	2206      	movs	r2, #6
 80236e0:	1c7e      	adds	r6, r7, #1
 80236e2:	f7dc fd75 	bl	80001d0 <memchr>
 80236e6:	2800      	cmp	r0, #0
 80236e8:	d038      	beq.n	802375c <_svfiprintf_r+0x1c8>
 80236ea:	4b24      	ldr	r3, [pc, #144]	; (802377c <_svfiprintf_r+0x1e8>)
 80236ec:	bb13      	cbnz	r3, 8023734 <_svfiprintf_r+0x1a0>
 80236ee:	9b03      	ldr	r3, [sp, #12]
 80236f0:	3307      	adds	r3, #7
 80236f2:	f023 0307 	bic.w	r3, r3, #7
 80236f6:	3308      	adds	r3, #8
 80236f8:	9303      	str	r3, [sp, #12]
 80236fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236fc:	444b      	add	r3, r9
 80236fe:	9309      	str	r3, [sp, #36]	; 0x24
 8023700:	e76d      	b.n	80235de <_svfiprintf_r+0x4a>
 8023702:	fb05 3202 	mla	r2, r5, r2, r3
 8023706:	2001      	movs	r0, #1
 8023708:	460f      	mov	r7, r1
 802370a:	e7a6      	b.n	802365a <_svfiprintf_r+0xc6>
 802370c:	2300      	movs	r3, #0
 802370e:	3701      	adds	r7, #1
 8023710:	9305      	str	r3, [sp, #20]
 8023712:	4619      	mov	r1, r3
 8023714:	250a      	movs	r5, #10
 8023716:	4638      	mov	r0, r7
 8023718:	f810 2b01 	ldrb.w	r2, [r0], #1
 802371c:	3a30      	subs	r2, #48	; 0x30
 802371e:	2a09      	cmp	r2, #9
 8023720:	d903      	bls.n	802372a <_svfiprintf_r+0x196>
 8023722:	2b00      	cmp	r3, #0
 8023724:	d0c8      	beq.n	80236b8 <_svfiprintf_r+0x124>
 8023726:	9105      	str	r1, [sp, #20]
 8023728:	e7c6      	b.n	80236b8 <_svfiprintf_r+0x124>
 802372a:	fb05 2101 	mla	r1, r5, r1, r2
 802372e:	2301      	movs	r3, #1
 8023730:	4607      	mov	r7, r0
 8023732:	e7f0      	b.n	8023716 <_svfiprintf_r+0x182>
 8023734:	ab03      	add	r3, sp, #12
 8023736:	9300      	str	r3, [sp, #0]
 8023738:	4622      	mov	r2, r4
 802373a:	4b11      	ldr	r3, [pc, #68]	; (8023780 <_svfiprintf_r+0x1ec>)
 802373c:	a904      	add	r1, sp, #16
 802373e:	4640      	mov	r0, r8
 8023740:	f3af 8000 	nop.w
 8023744:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023748:	4681      	mov	r9, r0
 802374a:	d1d6      	bne.n	80236fa <_svfiprintf_r+0x166>
 802374c:	89a3      	ldrh	r3, [r4, #12]
 802374e:	065b      	lsls	r3, r3, #25
 8023750:	f53f af35 	bmi.w	80235be <_svfiprintf_r+0x2a>
 8023754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023756:	b01d      	add	sp, #116	; 0x74
 8023758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802375c:	ab03      	add	r3, sp, #12
 802375e:	9300      	str	r3, [sp, #0]
 8023760:	4622      	mov	r2, r4
 8023762:	4b07      	ldr	r3, [pc, #28]	; (8023780 <_svfiprintf_r+0x1ec>)
 8023764:	a904      	add	r1, sp, #16
 8023766:	4640      	mov	r0, r8
 8023768:	f7fe fe56 	bl	8022418 <_printf_i>
 802376c:	e7ea      	b.n	8023744 <_svfiprintf_r+0x1b0>
 802376e:	bf00      	nop
 8023770:	080270e8 	.word	0x080270e8
 8023774:	080270ee 	.word	0x080270ee
 8023778:	080270f2 	.word	0x080270f2
 802377c:	00000000 	.word	0x00000000
 8023780:	080234df 	.word	0x080234df

08023784 <_putc_r>:
 8023784:	b570      	push	{r4, r5, r6, lr}
 8023786:	460d      	mov	r5, r1
 8023788:	4614      	mov	r4, r2
 802378a:	4606      	mov	r6, r0
 802378c:	b118      	cbz	r0, 8023796 <_putc_r+0x12>
 802378e:	6983      	ldr	r3, [r0, #24]
 8023790:	b90b      	cbnz	r3, 8023796 <_putc_r+0x12>
 8023792:	f7ff fd09 	bl	80231a8 <__sinit>
 8023796:	4b13      	ldr	r3, [pc, #76]	; (80237e4 <_putc_r+0x60>)
 8023798:	429c      	cmp	r4, r3
 802379a:	d112      	bne.n	80237c2 <_putc_r+0x3e>
 802379c:	6874      	ldr	r4, [r6, #4]
 802379e:	68a3      	ldr	r3, [r4, #8]
 80237a0:	3b01      	subs	r3, #1
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	60a3      	str	r3, [r4, #8]
 80237a6:	da16      	bge.n	80237d6 <_putc_r+0x52>
 80237a8:	69a2      	ldr	r2, [r4, #24]
 80237aa:	4293      	cmp	r3, r2
 80237ac:	db02      	blt.n	80237b4 <_putc_r+0x30>
 80237ae:	b2eb      	uxtb	r3, r5
 80237b0:	2b0a      	cmp	r3, #10
 80237b2:	d110      	bne.n	80237d6 <_putc_r+0x52>
 80237b4:	4622      	mov	r2, r4
 80237b6:	4629      	mov	r1, r5
 80237b8:	4630      	mov	r0, r6
 80237ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80237be:	f7ff bb27 	b.w	8022e10 <__swbuf_r>
 80237c2:	4b09      	ldr	r3, [pc, #36]	; (80237e8 <_putc_r+0x64>)
 80237c4:	429c      	cmp	r4, r3
 80237c6:	d101      	bne.n	80237cc <_putc_r+0x48>
 80237c8:	68b4      	ldr	r4, [r6, #8]
 80237ca:	e7e8      	b.n	802379e <_putc_r+0x1a>
 80237cc:	4b07      	ldr	r3, [pc, #28]	; (80237ec <_putc_r+0x68>)
 80237ce:	429c      	cmp	r4, r3
 80237d0:	bf08      	it	eq
 80237d2:	68f4      	ldreq	r4, [r6, #12]
 80237d4:	e7e3      	b.n	802379e <_putc_r+0x1a>
 80237d6:	6823      	ldr	r3, [r4, #0]
 80237d8:	1c5a      	adds	r2, r3, #1
 80237da:	6022      	str	r2, [r4, #0]
 80237dc:	701d      	strb	r5, [r3, #0]
 80237de:	b2e8      	uxtb	r0, r5
 80237e0:	bd70      	pop	{r4, r5, r6, pc}
 80237e2:	bf00      	nop
 80237e4:	08027178 	.word	0x08027178
 80237e8:	08027198 	.word	0x08027198
 80237ec:	08027158 	.word	0x08027158

080237f0 <_raise_r>:
 80237f0:	291f      	cmp	r1, #31
 80237f2:	b538      	push	{r3, r4, r5, lr}
 80237f4:	4604      	mov	r4, r0
 80237f6:	460d      	mov	r5, r1
 80237f8:	d904      	bls.n	8023804 <_raise_r+0x14>
 80237fa:	2316      	movs	r3, #22
 80237fc:	6003      	str	r3, [r0, #0]
 80237fe:	f04f 30ff 	mov.w	r0, #4294967295
 8023802:	bd38      	pop	{r3, r4, r5, pc}
 8023804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023806:	b112      	cbz	r2, 802380e <_raise_r+0x1e>
 8023808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802380c:	b94b      	cbnz	r3, 8023822 <_raise_r+0x32>
 802380e:	4620      	mov	r0, r4
 8023810:	f000 f830 	bl	8023874 <_getpid_r>
 8023814:	462a      	mov	r2, r5
 8023816:	4601      	mov	r1, r0
 8023818:	4620      	mov	r0, r4
 802381a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802381e:	f000 b817 	b.w	8023850 <_kill_r>
 8023822:	2b01      	cmp	r3, #1
 8023824:	d00a      	beq.n	802383c <_raise_r+0x4c>
 8023826:	1c59      	adds	r1, r3, #1
 8023828:	d103      	bne.n	8023832 <_raise_r+0x42>
 802382a:	2316      	movs	r3, #22
 802382c:	6003      	str	r3, [r0, #0]
 802382e:	2001      	movs	r0, #1
 8023830:	e7e7      	b.n	8023802 <_raise_r+0x12>
 8023832:	2400      	movs	r4, #0
 8023834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023838:	4628      	mov	r0, r5
 802383a:	4798      	blx	r3
 802383c:	2000      	movs	r0, #0
 802383e:	e7e0      	b.n	8023802 <_raise_r+0x12>

08023840 <raise>:
 8023840:	4b02      	ldr	r3, [pc, #8]	; (802384c <raise+0xc>)
 8023842:	4601      	mov	r1, r0
 8023844:	6818      	ldr	r0, [r3, #0]
 8023846:	f7ff bfd3 	b.w	80237f0 <_raise_r>
 802384a:	bf00      	nop
 802384c:	200000f4 	.word	0x200000f4

08023850 <_kill_r>:
 8023850:	b538      	push	{r3, r4, r5, lr}
 8023852:	4c07      	ldr	r4, [pc, #28]	; (8023870 <_kill_r+0x20>)
 8023854:	2300      	movs	r3, #0
 8023856:	4605      	mov	r5, r0
 8023858:	4608      	mov	r0, r1
 802385a:	4611      	mov	r1, r2
 802385c:	6023      	str	r3, [r4, #0]
 802385e:	f7de f80d 	bl	800187c <_kill>
 8023862:	1c43      	adds	r3, r0, #1
 8023864:	d102      	bne.n	802386c <_kill_r+0x1c>
 8023866:	6823      	ldr	r3, [r4, #0]
 8023868:	b103      	cbz	r3, 802386c <_kill_r+0x1c>
 802386a:	602b      	str	r3, [r5, #0]
 802386c:	bd38      	pop	{r3, r4, r5, pc}
 802386e:	bf00      	nop
 8023870:	200022dc 	.word	0x200022dc

08023874 <_getpid_r>:
 8023874:	f7dd bffa 	b.w	800186c <_getpid>

08023878 <siscanf>:
 8023878:	b40e      	push	{r1, r2, r3}
 802387a:	b530      	push	{r4, r5, lr}
 802387c:	b09c      	sub	sp, #112	; 0x70
 802387e:	ac1f      	add	r4, sp, #124	; 0x7c
 8023880:	f44f 7201 	mov.w	r2, #516	; 0x204
 8023884:	f854 5b04 	ldr.w	r5, [r4], #4
 8023888:	f8ad 2014 	strh.w	r2, [sp, #20]
 802388c:	9002      	str	r0, [sp, #8]
 802388e:	9006      	str	r0, [sp, #24]
 8023890:	f7dc fcf8 	bl	8000284 <strlen>
 8023894:	4b0b      	ldr	r3, [pc, #44]	; (80238c4 <siscanf+0x4c>)
 8023896:	9003      	str	r0, [sp, #12]
 8023898:	9007      	str	r0, [sp, #28]
 802389a:	930b      	str	r3, [sp, #44]	; 0x2c
 802389c:	480a      	ldr	r0, [pc, #40]	; (80238c8 <siscanf+0x50>)
 802389e:	9401      	str	r4, [sp, #4]
 80238a0:	2300      	movs	r3, #0
 80238a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80238a4:	9314      	str	r3, [sp, #80]	; 0x50
 80238a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80238aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80238ae:	462a      	mov	r2, r5
 80238b0:	4623      	mov	r3, r4
 80238b2:	a902      	add	r1, sp, #8
 80238b4:	6800      	ldr	r0, [r0, #0]
 80238b6:	f000 f9d3 	bl	8023c60 <__ssvfiscanf_r>
 80238ba:	b01c      	add	sp, #112	; 0x70
 80238bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80238c0:	b003      	add	sp, #12
 80238c2:	4770      	bx	lr
 80238c4:	080238ef 	.word	0x080238ef
 80238c8:	200000f4 	.word	0x200000f4

080238cc <__sread>:
 80238cc:	b510      	push	{r4, lr}
 80238ce:	460c      	mov	r4, r1
 80238d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238d4:	f000 fc6c 	bl	80241b0 <_read_r>
 80238d8:	2800      	cmp	r0, #0
 80238da:	bfab      	itete	ge
 80238dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80238de:	89a3      	ldrhlt	r3, [r4, #12]
 80238e0:	181b      	addge	r3, r3, r0
 80238e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80238e6:	bfac      	ite	ge
 80238e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80238ea:	81a3      	strhlt	r3, [r4, #12]
 80238ec:	bd10      	pop	{r4, pc}

080238ee <__seofread>:
 80238ee:	2000      	movs	r0, #0
 80238f0:	4770      	bx	lr

080238f2 <__swrite>:
 80238f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238f6:	461f      	mov	r7, r3
 80238f8:	898b      	ldrh	r3, [r1, #12]
 80238fa:	05db      	lsls	r3, r3, #23
 80238fc:	4605      	mov	r5, r0
 80238fe:	460c      	mov	r4, r1
 8023900:	4616      	mov	r6, r2
 8023902:	d505      	bpl.n	8023910 <__swrite+0x1e>
 8023904:	2302      	movs	r3, #2
 8023906:	2200      	movs	r2, #0
 8023908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802390c:	f000 f934 	bl	8023b78 <_lseek_r>
 8023910:	89a3      	ldrh	r3, [r4, #12]
 8023912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802391a:	81a3      	strh	r3, [r4, #12]
 802391c:	4632      	mov	r2, r6
 802391e:	463b      	mov	r3, r7
 8023920:	4628      	mov	r0, r5
 8023922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023926:	f000 b8e1 	b.w	8023aec <_write_r>

0802392a <__sseek>:
 802392a:	b510      	push	{r4, lr}
 802392c:	460c      	mov	r4, r1
 802392e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023932:	f000 f921 	bl	8023b78 <_lseek_r>
 8023936:	1c43      	adds	r3, r0, #1
 8023938:	89a3      	ldrh	r3, [r4, #12]
 802393a:	bf15      	itete	ne
 802393c:	6560      	strne	r0, [r4, #84]	; 0x54
 802393e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023946:	81a3      	strheq	r3, [r4, #12]
 8023948:	bf18      	it	ne
 802394a:	81a3      	strhne	r3, [r4, #12]
 802394c:	bd10      	pop	{r4, pc}

0802394e <__sclose>:
 802394e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023952:	f000 b8dd 	b.w	8023b10 <_close_r>

08023956 <strcpy>:
 8023956:	4603      	mov	r3, r0
 8023958:	f811 2b01 	ldrb.w	r2, [r1], #1
 802395c:	f803 2b01 	strb.w	r2, [r3], #1
 8023960:	2a00      	cmp	r2, #0
 8023962:	d1f9      	bne.n	8023958 <strcpy+0x2>
 8023964:	4770      	bx	lr

08023966 <strncmp>:
 8023966:	b510      	push	{r4, lr}
 8023968:	b16a      	cbz	r2, 8023986 <strncmp+0x20>
 802396a:	3901      	subs	r1, #1
 802396c:	1884      	adds	r4, r0, r2
 802396e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023972:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023976:	4293      	cmp	r3, r2
 8023978:	d103      	bne.n	8023982 <strncmp+0x1c>
 802397a:	42a0      	cmp	r0, r4
 802397c:	d001      	beq.n	8023982 <strncmp+0x1c>
 802397e:	2b00      	cmp	r3, #0
 8023980:	d1f5      	bne.n	802396e <strncmp+0x8>
 8023982:	1a98      	subs	r0, r3, r2
 8023984:	bd10      	pop	{r4, pc}
 8023986:	4610      	mov	r0, r2
 8023988:	e7fc      	b.n	8023984 <strncmp+0x1e>

0802398a <_strtoul_l.isra.0>:
 802398a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802398e:	4680      	mov	r8, r0
 8023990:	4689      	mov	r9, r1
 8023992:	4692      	mov	sl, r2
 8023994:	461e      	mov	r6, r3
 8023996:	460f      	mov	r7, r1
 8023998:	463d      	mov	r5, r7
 802399a:	9808      	ldr	r0, [sp, #32]
 802399c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80239a0:	f7ff fcd4 	bl	802334c <__locale_ctype_ptr_l>
 80239a4:	4420      	add	r0, r4
 80239a6:	7843      	ldrb	r3, [r0, #1]
 80239a8:	f013 0308 	ands.w	r3, r3, #8
 80239ac:	d130      	bne.n	8023a10 <_strtoul_l.isra.0+0x86>
 80239ae:	2c2d      	cmp	r4, #45	; 0x2d
 80239b0:	d130      	bne.n	8023a14 <_strtoul_l.isra.0+0x8a>
 80239b2:	787c      	ldrb	r4, [r7, #1]
 80239b4:	1cbd      	adds	r5, r7, #2
 80239b6:	2101      	movs	r1, #1
 80239b8:	2e00      	cmp	r6, #0
 80239ba:	d05c      	beq.n	8023a76 <_strtoul_l.isra.0+0xec>
 80239bc:	2e10      	cmp	r6, #16
 80239be:	d109      	bne.n	80239d4 <_strtoul_l.isra.0+0x4a>
 80239c0:	2c30      	cmp	r4, #48	; 0x30
 80239c2:	d107      	bne.n	80239d4 <_strtoul_l.isra.0+0x4a>
 80239c4:	782b      	ldrb	r3, [r5, #0]
 80239c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80239ca:	2b58      	cmp	r3, #88	; 0x58
 80239cc:	d14e      	bne.n	8023a6c <_strtoul_l.isra.0+0xe2>
 80239ce:	786c      	ldrb	r4, [r5, #1]
 80239d0:	2610      	movs	r6, #16
 80239d2:	3502      	adds	r5, #2
 80239d4:	f04f 32ff 	mov.w	r2, #4294967295
 80239d8:	2300      	movs	r3, #0
 80239da:	fbb2 f2f6 	udiv	r2, r2, r6
 80239de:	fb06 fc02 	mul.w	ip, r6, r2
 80239e2:	ea6f 0c0c 	mvn.w	ip, ip
 80239e6:	4618      	mov	r0, r3
 80239e8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80239ec:	2f09      	cmp	r7, #9
 80239ee:	d817      	bhi.n	8023a20 <_strtoul_l.isra.0+0x96>
 80239f0:	463c      	mov	r4, r7
 80239f2:	42a6      	cmp	r6, r4
 80239f4:	dd23      	ble.n	8023a3e <_strtoul_l.isra.0+0xb4>
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	db1e      	blt.n	8023a38 <_strtoul_l.isra.0+0xae>
 80239fa:	4282      	cmp	r2, r0
 80239fc:	d31c      	bcc.n	8023a38 <_strtoul_l.isra.0+0xae>
 80239fe:	d101      	bne.n	8023a04 <_strtoul_l.isra.0+0x7a>
 8023a00:	45a4      	cmp	ip, r4
 8023a02:	db19      	blt.n	8023a38 <_strtoul_l.isra.0+0xae>
 8023a04:	fb00 4006 	mla	r0, r0, r6, r4
 8023a08:	2301      	movs	r3, #1
 8023a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023a0e:	e7eb      	b.n	80239e8 <_strtoul_l.isra.0+0x5e>
 8023a10:	462f      	mov	r7, r5
 8023a12:	e7c1      	b.n	8023998 <_strtoul_l.isra.0+0xe>
 8023a14:	2c2b      	cmp	r4, #43	; 0x2b
 8023a16:	bf04      	itt	eq
 8023a18:	1cbd      	addeq	r5, r7, #2
 8023a1a:	787c      	ldrbeq	r4, [r7, #1]
 8023a1c:	4619      	mov	r1, r3
 8023a1e:	e7cb      	b.n	80239b8 <_strtoul_l.isra.0+0x2e>
 8023a20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8023a24:	2f19      	cmp	r7, #25
 8023a26:	d801      	bhi.n	8023a2c <_strtoul_l.isra.0+0xa2>
 8023a28:	3c37      	subs	r4, #55	; 0x37
 8023a2a:	e7e2      	b.n	80239f2 <_strtoul_l.isra.0+0x68>
 8023a2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8023a30:	2f19      	cmp	r7, #25
 8023a32:	d804      	bhi.n	8023a3e <_strtoul_l.isra.0+0xb4>
 8023a34:	3c57      	subs	r4, #87	; 0x57
 8023a36:	e7dc      	b.n	80239f2 <_strtoul_l.isra.0+0x68>
 8023a38:	f04f 33ff 	mov.w	r3, #4294967295
 8023a3c:	e7e5      	b.n	8023a0a <_strtoul_l.isra.0+0x80>
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	da09      	bge.n	8023a56 <_strtoul_l.isra.0+0xcc>
 8023a42:	2322      	movs	r3, #34	; 0x22
 8023a44:	f8c8 3000 	str.w	r3, [r8]
 8023a48:	f04f 30ff 	mov.w	r0, #4294967295
 8023a4c:	f1ba 0f00 	cmp.w	sl, #0
 8023a50:	d107      	bne.n	8023a62 <_strtoul_l.isra.0+0xd8>
 8023a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023a56:	b101      	cbz	r1, 8023a5a <_strtoul_l.isra.0+0xd0>
 8023a58:	4240      	negs	r0, r0
 8023a5a:	f1ba 0f00 	cmp.w	sl, #0
 8023a5e:	d0f8      	beq.n	8023a52 <_strtoul_l.isra.0+0xc8>
 8023a60:	b10b      	cbz	r3, 8023a66 <_strtoul_l.isra.0+0xdc>
 8023a62:	f105 39ff 	add.w	r9, r5, #4294967295
 8023a66:	f8ca 9000 	str.w	r9, [sl]
 8023a6a:	e7f2      	b.n	8023a52 <_strtoul_l.isra.0+0xc8>
 8023a6c:	2430      	movs	r4, #48	; 0x30
 8023a6e:	2e00      	cmp	r6, #0
 8023a70:	d1b0      	bne.n	80239d4 <_strtoul_l.isra.0+0x4a>
 8023a72:	2608      	movs	r6, #8
 8023a74:	e7ae      	b.n	80239d4 <_strtoul_l.isra.0+0x4a>
 8023a76:	2c30      	cmp	r4, #48	; 0x30
 8023a78:	d0a4      	beq.n	80239c4 <_strtoul_l.isra.0+0x3a>
 8023a7a:	260a      	movs	r6, #10
 8023a7c:	e7aa      	b.n	80239d4 <_strtoul_l.isra.0+0x4a>
	...

08023a80 <_strtoul_r>:
 8023a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a82:	4c06      	ldr	r4, [pc, #24]	; (8023a9c <_strtoul_r+0x1c>)
 8023a84:	4d06      	ldr	r5, [pc, #24]	; (8023aa0 <_strtoul_r+0x20>)
 8023a86:	6824      	ldr	r4, [r4, #0]
 8023a88:	6a24      	ldr	r4, [r4, #32]
 8023a8a:	2c00      	cmp	r4, #0
 8023a8c:	bf08      	it	eq
 8023a8e:	462c      	moveq	r4, r5
 8023a90:	9400      	str	r4, [sp, #0]
 8023a92:	f7ff ff7a 	bl	802398a <_strtoul_l.isra.0>
 8023a96:	b003      	add	sp, #12
 8023a98:	bd30      	pop	{r4, r5, pc}
 8023a9a:	bf00      	nop
 8023a9c:	200000f4 	.word	0x200000f4
 8023aa0:	200001b8 	.word	0x200001b8

08023aa4 <strtoul>:
 8023aa4:	4b08      	ldr	r3, [pc, #32]	; (8023ac8 <strtoul+0x24>)
 8023aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023aa8:	681c      	ldr	r4, [r3, #0]
 8023aaa:	4d08      	ldr	r5, [pc, #32]	; (8023acc <strtoul+0x28>)
 8023aac:	6a23      	ldr	r3, [r4, #32]
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	bf08      	it	eq
 8023ab2:	462b      	moveq	r3, r5
 8023ab4:	9300      	str	r3, [sp, #0]
 8023ab6:	4613      	mov	r3, r2
 8023ab8:	460a      	mov	r2, r1
 8023aba:	4601      	mov	r1, r0
 8023abc:	4620      	mov	r0, r4
 8023abe:	f7ff ff64 	bl	802398a <_strtoul_l.isra.0>
 8023ac2:	b003      	add	sp, #12
 8023ac4:	bd30      	pop	{r4, r5, pc}
 8023ac6:	bf00      	nop
 8023ac8:	200000f4 	.word	0x200000f4
 8023acc:	200001b8 	.word	0x200001b8

08023ad0 <__ascii_wctomb>:
 8023ad0:	b149      	cbz	r1, 8023ae6 <__ascii_wctomb+0x16>
 8023ad2:	2aff      	cmp	r2, #255	; 0xff
 8023ad4:	bf85      	ittet	hi
 8023ad6:	238a      	movhi	r3, #138	; 0x8a
 8023ad8:	6003      	strhi	r3, [r0, #0]
 8023ada:	700a      	strbls	r2, [r1, #0]
 8023adc:	f04f 30ff 	movhi.w	r0, #4294967295
 8023ae0:	bf98      	it	ls
 8023ae2:	2001      	movls	r0, #1
 8023ae4:	4770      	bx	lr
 8023ae6:	4608      	mov	r0, r1
 8023ae8:	4770      	bx	lr
	...

08023aec <_write_r>:
 8023aec:	b538      	push	{r3, r4, r5, lr}
 8023aee:	4c07      	ldr	r4, [pc, #28]	; (8023b0c <_write_r+0x20>)
 8023af0:	4605      	mov	r5, r0
 8023af2:	4608      	mov	r0, r1
 8023af4:	4611      	mov	r1, r2
 8023af6:	2200      	movs	r2, #0
 8023af8:	6022      	str	r2, [r4, #0]
 8023afa:	461a      	mov	r2, r3
 8023afc:	f7ea f9c0 	bl	800de80 <_write>
 8023b00:	1c43      	adds	r3, r0, #1
 8023b02:	d102      	bne.n	8023b0a <_write_r+0x1e>
 8023b04:	6823      	ldr	r3, [r4, #0]
 8023b06:	b103      	cbz	r3, 8023b0a <_write_r+0x1e>
 8023b08:	602b      	str	r3, [r5, #0]
 8023b0a:	bd38      	pop	{r3, r4, r5, pc}
 8023b0c:	200022dc 	.word	0x200022dc

08023b10 <_close_r>:
 8023b10:	b538      	push	{r3, r4, r5, lr}
 8023b12:	4c06      	ldr	r4, [pc, #24]	; (8023b2c <_close_r+0x1c>)
 8023b14:	2300      	movs	r3, #0
 8023b16:	4605      	mov	r5, r0
 8023b18:	4608      	mov	r0, r1
 8023b1a:	6023      	str	r3, [r4, #0]
 8023b1c:	f7dd fef8 	bl	8001910 <_close>
 8023b20:	1c43      	adds	r3, r0, #1
 8023b22:	d102      	bne.n	8023b2a <_close_r+0x1a>
 8023b24:	6823      	ldr	r3, [r4, #0]
 8023b26:	b103      	cbz	r3, 8023b2a <_close_r+0x1a>
 8023b28:	602b      	str	r3, [r5, #0]
 8023b2a:	bd38      	pop	{r3, r4, r5, pc}
 8023b2c:	200022dc 	.word	0x200022dc

08023b30 <__env_lock>:
 8023b30:	4770      	bx	lr

08023b32 <__env_unlock>:
 8023b32:	4770      	bx	lr

08023b34 <_fstat_r>:
 8023b34:	b538      	push	{r3, r4, r5, lr}
 8023b36:	4c07      	ldr	r4, [pc, #28]	; (8023b54 <_fstat_r+0x20>)
 8023b38:	2300      	movs	r3, #0
 8023b3a:	4605      	mov	r5, r0
 8023b3c:	4608      	mov	r0, r1
 8023b3e:	4611      	mov	r1, r2
 8023b40:	6023      	str	r3, [r4, #0]
 8023b42:	f7dd fef1 	bl	8001928 <_fstat>
 8023b46:	1c43      	adds	r3, r0, #1
 8023b48:	d102      	bne.n	8023b50 <_fstat_r+0x1c>
 8023b4a:	6823      	ldr	r3, [r4, #0]
 8023b4c:	b103      	cbz	r3, 8023b50 <_fstat_r+0x1c>
 8023b4e:	602b      	str	r3, [r5, #0]
 8023b50:	bd38      	pop	{r3, r4, r5, pc}
 8023b52:	bf00      	nop
 8023b54:	200022dc 	.word	0x200022dc

08023b58 <_isatty_r>:
 8023b58:	b538      	push	{r3, r4, r5, lr}
 8023b5a:	4c06      	ldr	r4, [pc, #24]	; (8023b74 <_isatty_r+0x1c>)
 8023b5c:	2300      	movs	r3, #0
 8023b5e:	4605      	mov	r5, r0
 8023b60:	4608      	mov	r0, r1
 8023b62:	6023      	str	r3, [r4, #0]
 8023b64:	f7dd fef0 	bl	8001948 <_isatty>
 8023b68:	1c43      	adds	r3, r0, #1
 8023b6a:	d102      	bne.n	8023b72 <_isatty_r+0x1a>
 8023b6c:	6823      	ldr	r3, [r4, #0]
 8023b6e:	b103      	cbz	r3, 8023b72 <_isatty_r+0x1a>
 8023b70:	602b      	str	r3, [r5, #0]
 8023b72:	bd38      	pop	{r3, r4, r5, pc}
 8023b74:	200022dc 	.word	0x200022dc

08023b78 <_lseek_r>:
 8023b78:	b538      	push	{r3, r4, r5, lr}
 8023b7a:	4c07      	ldr	r4, [pc, #28]	; (8023b98 <_lseek_r+0x20>)
 8023b7c:	4605      	mov	r5, r0
 8023b7e:	4608      	mov	r0, r1
 8023b80:	4611      	mov	r1, r2
 8023b82:	2200      	movs	r2, #0
 8023b84:	6022      	str	r2, [r4, #0]
 8023b86:	461a      	mov	r2, r3
 8023b88:	f7dd fee9 	bl	800195e <_lseek>
 8023b8c:	1c43      	adds	r3, r0, #1
 8023b8e:	d102      	bne.n	8023b96 <_lseek_r+0x1e>
 8023b90:	6823      	ldr	r3, [r4, #0]
 8023b92:	b103      	cbz	r3, 8023b96 <_lseek_r+0x1e>
 8023b94:	602b      	str	r3, [r5, #0]
 8023b96:	bd38      	pop	{r3, r4, r5, pc}
 8023b98:	200022dc 	.word	0x200022dc

08023b9c <_malloc_usable_size_r>:
 8023b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ba0:	1f18      	subs	r0, r3, #4
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	bfbc      	itt	lt
 8023ba6:	580b      	ldrlt	r3, [r1, r0]
 8023ba8:	18c0      	addlt	r0, r0, r3
 8023baa:	4770      	bx	lr

08023bac <_sungetc_r>:
 8023bac:	b538      	push	{r3, r4, r5, lr}
 8023bae:	1c4b      	adds	r3, r1, #1
 8023bb0:	4614      	mov	r4, r2
 8023bb2:	d103      	bne.n	8023bbc <_sungetc_r+0x10>
 8023bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8023bb8:	4628      	mov	r0, r5
 8023bba:	bd38      	pop	{r3, r4, r5, pc}
 8023bbc:	8993      	ldrh	r3, [r2, #12]
 8023bbe:	f023 0320 	bic.w	r3, r3, #32
 8023bc2:	8193      	strh	r3, [r2, #12]
 8023bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023bc6:	6852      	ldr	r2, [r2, #4]
 8023bc8:	b2cd      	uxtb	r5, r1
 8023bca:	b18b      	cbz	r3, 8023bf0 <_sungetc_r+0x44>
 8023bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023bce:	4293      	cmp	r3, r2
 8023bd0:	dd08      	ble.n	8023be4 <_sungetc_r+0x38>
 8023bd2:	6823      	ldr	r3, [r4, #0]
 8023bd4:	1e5a      	subs	r2, r3, #1
 8023bd6:	6022      	str	r2, [r4, #0]
 8023bd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023bdc:	6863      	ldr	r3, [r4, #4]
 8023bde:	3301      	adds	r3, #1
 8023be0:	6063      	str	r3, [r4, #4]
 8023be2:	e7e9      	b.n	8023bb8 <_sungetc_r+0xc>
 8023be4:	4621      	mov	r1, r4
 8023be6:	f000 fb27 	bl	8024238 <__submore>
 8023bea:	2800      	cmp	r0, #0
 8023bec:	d0f1      	beq.n	8023bd2 <_sungetc_r+0x26>
 8023bee:	e7e1      	b.n	8023bb4 <_sungetc_r+0x8>
 8023bf0:	6921      	ldr	r1, [r4, #16]
 8023bf2:	6823      	ldr	r3, [r4, #0]
 8023bf4:	b151      	cbz	r1, 8023c0c <_sungetc_r+0x60>
 8023bf6:	4299      	cmp	r1, r3
 8023bf8:	d208      	bcs.n	8023c0c <_sungetc_r+0x60>
 8023bfa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023bfe:	42a9      	cmp	r1, r5
 8023c00:	d104      	bne.n	8023c0c <_sungetc_r+0x60>
 8023c02:	3b01      	subs	r3, #1
 8023c04:	3201      	adds	r2, #1
 8023c06:	6023      	str	r3, [r4, #0]
 8023c08:	6062      	str	r2, [r4, #4]
 8023c0a:	e7d5      	b.n	8023bb8 <_sungetc_r+0xc>
 8023c0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8023c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c14:	6363      	str	r3, [r4, #52]	; 0x34
 8023c16:	2303      	movs	r3, #3
 8023c18:	63a3      	str	r3, [r4, #56]	; 0x38
 8023c1a:	4623      	mov	r3, r4
 8023c1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023c20:	6023      	str	r3, [r4, #0]
 8023c22:	2301      	movs	r3, #1
 8023c24:	e7dc      	b.n	8023be0 <_sungetc_r+0x34>

08023c26 <__ssrefill_r>:
 8023c26:	b510      	push	{r4, lr}
 8023c28:	460c      	mov	r4, r1
 8023c2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023c2c:	b169      	cbz	r1, 8023c4a <__ssrefill_r+0x24>
 8023c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c32:	4299      	cmp	r1, r3
 8023c34:	d001      	beq.n	8023c3a <__ssrefill_r+0x14>
 8023c36:	f7fe f991 	bl	8021f5c <_free_r>
 8023c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023c3c:	6063      	str	r3, [r4, #4]
 8023c3e:	2000      	movs	r0, #0
 8023c40:	6360      	str	r0, [r4, #52]	; 0x34
 8023c42:	b113      	cbz	r3, 8023c4a <__ssrefill_r+0x24>
 8023c44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023c46:	6023      	str	r3, [r4, #0]
 8023c48:	bd10      	pop	{r4, pc}
 8023c4a:	6923      	ldr	r3, [r4, #16]
 8023c4c:	6023      	str	r3, [r4, #0]
 8023c4e:	2300      	movs	r3, #0
 8023c50:	6063      	str	r3, [r4, #4]
 8023c52:	89a3      	ldrh	r3, [r4, #12]
 8023c54:	f043 0320 	orr.w	r3, r3, #32
 8023c58:	81a3      	strh	r3, [r4, #12]
 8023c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8023c5e:	e7f3      	b.n	8023c48 <__ssrefill_r+0x22>

08023c60 <__ssvfiscanf_r>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023c68:	460c      	mov	r4, r1
 8023c6a:	2100      	movs	r1, #0
 8023c6c:	9144      	str	r1, [sp, #272]	; 0x110
 8023c6e:	9145      	str	r1, [sp, #276]	; 0x114
 8023c70:	499f      	ldr	r1, [pc, #636]	; (8023ef0 <__ssvfiscanf_r+0x290>)
 8023c72:	91a0      	str	r1, [sp, #640]	; 0x280
 8023c74:	f10d 0804 	add.w	r8, sp, #4
 8023c78:	499e      	ldr	r1, [pc, #632]	; (8023ef4 <__ssvfiscanf_r+0x294>)
 8023c7a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8023ef8 <__ssvfiscanf_r+0x298>
 8023c7e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023c82:	4606      	mov	r6, r0
 8023c84:	4692      	mov	sl, r2
 8023c86:	91a1      	str	r1, [sp, #644]	; 0x284
 8023c88:	9300      	str	r3, [sp, #0]
 8023c8a:	270a      	movs	r7, #10
 8023c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	f000 812a 	beq.w	8023eea <__ssvfiscanf_r+0x28a>
 8023c96:	4655      	mov	r5, sl
 8023c98:	f7ff fb5c 	bl	8023354 <__locale_ctype_ptr>
 8023c9c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8023ca0:	4458      	add	r0, fp
 8023ca2:	7843      	ldrb	r3, [r0, #1]
 8023ca4:	f013 0308 	ands.w	r3, r3, #8
 8023ca8:	d01c      	beq.n	8023ce4 <__ssvfiscanf_r+0x84>
 8023caa:	6863      	ldr	r3, [r4, #4]
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	dd12      	ble.n	8023cd6 <__ssvfiscanf_r+0x76>
 8023cb0:	f7ff fb50 	bl	8023354 <__locale_ctype_ptr>
 8023cb4:	6823      	ldr	r3, [r4, #0]
 8023cb6:	781a      	ldrb	r2, [r3, #0]
 8023cb8:	4410      	add	r0, r2
 8023cba:	7842      	ldrb	r2, [r0, #1]
 8023cbc:	0712      	lsls	r2, r2, #28
 8023cbe:	d401      	bmi.n	8023cc4 <__ssvfiscanf_r+0x64>
 8023cc0:	46aa      	mov	sl, r5
 8023cc2:	e7e3      	b.n	8023c8c <__ssvfiscanf_r+0x2c>
 8023cc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023cc6:	3201      	adds	r2, #1
 8023cc8:	9245      	str	r2, [sp, #276]	; 0x114
 8023cca:	6862      	ldr	r2, [r4, #4]
 8023ccc:	3301      	adds	r3, #1
 8023cce:	3a01      	subs	r2, #1
 8023cd0:	6062      	str	r2, [r4, #4]
 8023cd2:	6023      	str	r3, [r4, #0]
 8023cd4:	e7e9      	b.n	8023caa <__ssvfiscanf_r+0x4a>
 8023cd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023cd8:	4621      	mov	r1, r4
 8023cda:	4630      	mov	r0, r6
 8023cdc:	4798      	blx	r3
 8023cde:	2800      	cmp	r0, #0
 8023ce0:	d0e6      	beq.n	8023cb0 <__ssvfiscanf_r+0x50>
 8023ce2:	e7ed      	b.n	8023cc0 <__ssvfiscanf_r+0x60>
 8023ce4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8023ce8:	f040 8082 	bne.w	8023df0 <__ssvfiscanf_r+0x190>
 8023cec:	9343      	str	r3, [sp, #268]	; 0x10c
 8023cee:	9341      	str	r3, [sp, #260]	; 0x104
 8023cf0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8023cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8023cf6:	d103      	bne.n	8023d00 <__ssvfiscanf_r+0xa0>
 8023cf8:	2310      	movs	r3, #16
 8023cfa:	9341      	str	r3, [sp, #260]	; 0x104
 8023cfc:	f10a 0502 	add.w	r5, sl, #2
 8023d00:	46aa      	mov	sl, r5
 8023d02:	f815 1b01 	ldrb.w	r1, [r5], #1
 8023d06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8023d0a:	2a09      	cmp	r2, #9
 8023d0c:	d922      	bls.n	8023d54 <__ssvfiscanf_r+0xf4>
 8023d0e:	2203      	movs	r2, #3
 8023d10:	4879      	ldr	r0, [pc, #484]	; (8023ef8 <__ssvfiscanf_r+0x298>)
 8023d12:	f7dc fa5d 	bl	80001d0 <memchr>
 8023d16:	b138      	cbz	r0, 8023d28 <__ssvfiscanf_r+0xc8>
 8023d18:	eba0 0309 	sub.w	r3, r0, r9
 8023d1c:	2001      	movs	r0, #1
 8023d1e:	4098      	lsls	r0, r3
 8023d20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023d22:	4318      	orrs	r0, r3
 8023d24:	9041      	str	r0, [sp, #260]	; 0x104
 8023d26:	46aa      	mov	sl, r5
 8023d28:	f89a 3000 	ldrb.w	r3, [sl]
 8023d2c:	2b67      	cmp	r3, #103	; 0x67
 8023d2e:	f10a 0501 	add.w	r5, sl, #1
 8023d32:	d82b      	bhi.n	8023d8c <__ssvfiscanf_r+0x12c>
 8023d34:	2b65      	cmp	r3, #101	; 0x65
 8023d36:	f080 809f 	bcs.w	8023e78 <__ssvfiscanf_r+0x218>
 8023d3a:	2b47      	cmp	r3, #71	; 0x47
 8023d3c:	d810      	bhi.n	8023d60 <__ssvfiscanf_r+0x100>
 8023d3e:	2b45      	cmp	r3, #69	; 0x45
 8023d40:	f080 809a 	bcs.w	8023e78 <__ssvfiscanf_r+0x218>
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d06c      	beq.n	8023e22 <__ssvfiscanf_r+0x1c2>
 8023d48:	2b25      	cmp	r3, #37	; 0x25
 8023d4a:	d051      	beq.n	8023df0 <__ssvfiscanf_r+0x190>
 8023d4c:	2303      	movs	r3, #3
 8023d4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8023d50:	9742      	str	r7, [sp, #264]	; 0x108
 8023d52:	e027      	b.n	8023da4 <__ssvfiscanf_r+0x144>
 8023d54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023d56:	fb07 1303 	mla	r3, r7, r3, r1
 8023d5a:	3b30      	subs	r3, #48	; 0x30
 8023d5c:	9343      	str	r3, [sp, #268]	; 0x10c
 8023d5e:	e7cf      	b.n	8023d00 <__ssvfiscanf_r+0xa0>
 8023d60:	2b5b      	cmp	r3, #91	; 0x5b
 8023d62:	d06a      	beq.n	8023e3a <__ssvfiscanf_r+0x1da>
 8023d64:	d80c      	bhi.n	8023d80 <__ssvfiscanf_r+0x120>
 8023d66:	2b58      	cmp	r3, #88	; 0x58
 8023d68:	d1f0      	bne.n	8023d4c <__ssvfiscanf_r+0xec>
 8023d6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023d70:	9241      	str	r2, [sp, #260]	; 0x104
 8023d72:	2210      	movs	r2, #16
 8023d74:	9242      	str	r2, [sp, #264]	; 0x108
 8023d76:	2b6e      	cmp	r3, #110	; 0x6e
 8023d78:	bf8c      	ite	hi
 8023d7a:	2304      	movhi	r3, #4
 8023d7c:	2303      	movls	r3, #3
 8023d7e:	e010      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023d80:	2b63      	cmp	r3, #99	; 0x63
 8023d82:	d065      	beq.n	8023e50 <__ssvfiscanf_r+0x1f0>
 8023d84:	2b64      	cmp	r3, #100	; 0x64
 8023d86:	d1e1      	bne.n	8023d4c <__ssvfiscanf_r+0xec>
 8023d88:	9742      	str	r7, [sp, #264]	; 0x108
 8023d8a:	e7f4      	b.n	8023d76 <__ssvfiscanf_r+0x116>
 8023d8c:	2b70      	cmp	r3, #112	; 0x70
 8023d8e:	d04b      	beq.n	8023e28 <__ssvfiscanf_r+0x1c8>
 8023d90:	d826      	bhi.n	8023de0 <__ssvfiscanf_r+0x180>
 8023d92:	2b6e      	cmp	r3, #110	; 0x6e
 8023d94:	d062      	beq.n	8023e5c <__ssvfiscanf_r+0x1fc>
 8023d96:	d84c      	bhi.n	8023e32 <__ssvfiscanf_r+0x1d2>
 8023d98:	2b69      	cmp	r3, #105	; 0x69
 8023d9a:	d1d7      	bne.n	8023d4c <__ssvfiscanf_r+0xec>
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	9342      	str	r3, [sp, #264]	; 0x108
 8023da0:	2303      	movs	r3, #3
 8023da2:	9347      	str	r3, [sp, #284]	; 0x11c
 8023da4:	6863      	ldr	r3, [r4, #4]
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	dd68      	ble.n	8023e7c <__ssvfiscanf_r+0x21c>
 8023daa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023dac:	0659      	lsls	r1, r3, #25
 8023dae:	d407      	bmi.n	8023dc0 <__ssvfiscanf_r+0x160>
 8023db0:	f7ff fad0 	bl	8023354 <__locale_ctype_ptr>
 8023db4:	6823      	ldr	r3, [r4, #0]
 8023db6:	781a      	ldrb	r2, [r3, #0]
 8023db8:	4410      	add	r0, r2
 8023dba:	7842      	ldrb	r2, [r0, #1]
 8023dbc:	0712      	lsls	r2, r2, #28
 8023dbe:	d464      	bmi.n	8023e8a <__ssvfiscanf_r+0x22a>
 8023dc0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023dc2:	2b02      	cmp	r3, #2
 8023dc4:	dc73      	bgt.n	8023eae <__ssvfiscanf_r+0x24e>
 8023dc6:	466b      	mov	r3, sp
 8023dc8:	4622      	mov	r2, r4
 8023dca:	a941      	add	r1, sp, #260	; 0x104
 8023dcc:	4630      	mov	r0, r6
 8023dce:	f000 f897 	bl	8023f00 <_scanf_chars>
 8023dd2:	2801      	cmp	r0, #1
 8023dd4:	f000 8089 	beq.w	8023eea <__ssvfiscanf_r+0x28a>
 8023dd8:	2802      	cmp	r0, #2
 8023dda:	f47f af71 	bne.w	8023cc0 <__ssvfiscanf_r+0x60>
 8023dde:	e01d      	b.n	8023e1c <__ssvfiscanf_r+0x1bc>
 8023de0:	2b75      	cmp	r3, #117	; 0x75
 8023de2:	d0d1      	beq.n	8023d88 <__ssvfiscanf_r+0x128>
 8023de4:	2b78      	cmp	r3, #120	; 0x78
 8023de6:	d0c0      	beq.n	8023d6a <__ssvfiscanf_r+0x10a>
 8023de8:	2b73      	cmp	r3, #115	; 0x73
 8023dea:	d1af      	bne.n	8023d4c <__ssvfiscanf_r+0xec>
 8023dec:	2302      	movs	r3, #2
 8023dee:	e7d8      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023df0:	6863      	ldr	r3, [r4, #4]
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	dd0c      	ble.n	8023e10 <__ssvfiscanf_r+0x1b0>
 8023df6:	6823      	ldr	r3, [r4, #0]
 8023df8:	781a      	ldrb	r2, [r3, #0]
 8023dfa:	455a      	cmp	r2, fp
 8023dfc:	d175      	bne.n	8023eea <__ssvfiscanf_r+0x28a>
 8023dfe:	3301      	adds	r3, #1
 8023e00:	6862      	ldr	r2, [r4, #4]
 8023e02:	6023      	str	r3, [r4, #0]
 8023e04:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8023e06:	3a01      	subs	r2, #1
 8023e08:	3301      	adds	r3, #1
 8023e0a:	6062      	str	r2, [r4, #4]
 8023e0c:	9345      	str	r3, [sp, #276]	; 0x114
 8023e0e:	e757      	b.n	8023cc0 <__ssvfiscanf_r+0x60>
 8023e10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023e12:	4621      	mov	r1, r4
 8023e14:	4630      	mov	r0, r6
 8023e16:	4798      	blx	r3
 8023e18:	2800      	cmp	r0, #0
 8023e1a:	d0ec      	beq.n	8023df6 <__ssvfiscanf_r+0x196>
 8023e1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023e1e:	2800      	cmp	r0, #0
 8023e20:	d159      	bne.n	8023ed6 <__ssvfiscanf_r+0x276>
 8023e22:	f04f 30ff 	mov.w	r0, #4294967295
 8023e26:	e05c      	b.n	8023ee2 <__ssvfiscanf_r+0x282>
 8023e28:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023e2a:	f042 0220 	orr.w	r2, r2, #32
 8023e2e:	9241      	str	r2, [sp, #260]	; 0x104
 8023e30:	e79b      	b.n	8023d6a <__ssvfiscanf_r+0x10a>
 8023e32:	2308      	movs	r3, #8
 8023e34:	9342      	str	r3, [sp, #264]	; 0x108
 8023e36:	2304      	movs	r3, #4
 8023e38:	e7b3      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023e3a:	4629      	mov	r1, r5
 8023e3c:	4640      	mov	r0, r8
 8023e3e:	f000 f9c9 	bl	80241d4 <__sccl>
 8023e42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e48:	9341      	str	r3, [sp, #260]	; 0x104
 8023e4a:	4605      	mov	r5, r0
 8023e4c:	2301      	movs	r3, #1
 8023e4e:	e7a8      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023e50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023e56:	9341      	str	r3, [sp, #260]	; 0x104
 8023e58:	2300      	movs	r3, #0
 8023e5a:	e7a2      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023e5c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8023e5e:	06c3      	lsls	r3, r0, #27
 8023e60:	f53f af2e 	bmi.w	8023cc0 <__ssvfiscanf_r+0x60>
 8023e64:	9b00      	ldr	r3, [sp, #0]
 8023e66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023e68:	1d19      	adds	r1, r3, #4
 8023e6a:	9100      	str	r1, [sp, #0]
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	07c0      	lsls	r0, r0, #31
 8023e70:	bf4c      	ite	mi
 8023e72:	801a      	strhmi	r2, [r3, #0]
 8023e74:	601a      	strpl	r2, [r3, #0]
 8023e76:	e723      	b.n	8023cc0 <__ssvfiscanf_r+0x60>
 8023e78:	2305      	movs	r3, #5
 8023e7a:	e792      	b.n	8023da2 <__ssvfiscanf_r+0x142>
 8023e7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023e7e:	4621      	mov	r1, r4
 8023e80:	4630      	mov	r0, r6
 8023e82:	4798      	blx	r3
 8023e84:	2800      	cmp	r0, #0
 8023e86:	d090      	beq.n	8023daa <__ssvfiscanf_r+0x14a>
 8023e88:	e7c8      	b.n	8023e1c <__ssvfiscanf_r+0x1bc>
 8023e8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023e8c:	3201      	adds	r2, #1
 8023e8e:	9245      	str	r2, [sp, #276]	; 0x114
 8023e90:	6862      	ldr	r2, [r4, #4]
 8023e92:	3a01      	subs	r2, #1
 8023e94:	2a00      	cmp	r2, #0
 8023e96:	6062      	str	r2, [r4, #4]
 8023e98:	dd02      	ble.n	8023ea0 <__ssvfiscanf_r+0x240>
 8023e9a:	3301      	adds	r3, #1
 8023e9c:	6023      	str	r3, [r4, #0]
 8023e9e:	e787      	b.n	8023db0 <__ssvfiscanf_r+0x150>
 8023ea0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023ea2:	4621      	mov	r1, r4
 8023ea4:	4630      	mov	r0, r6
 8023ea6:	4798      	blx	r3
 8023ea8:	2800      	cmp	r0, #0
 8023eaa:	d081      	beq.n	8023db0 <__ssvfiscanf_r+0x150>
 8023eac:	e7b6      	b.n	8023e1c <__ssvfiscanf_r+0x1bc>
 8023eae:	2b04      	cmp	r3, #4
 8023eb0:	dc06      	bgt.n	8023ec0 <__ssvfiscanf_r+0x260>
 8023eb2:	466b      	mov	r3, sp
 8023eb4:	4622      	mov	r2, r4
 8023eb6:	a941      	add	r1, sp, #260	; 0x104
 8023eb8:	4630      	mov	r0, r6
 8023eba:	f000 f885 	bl	8023fc8 <_scanf_i>
 8023ebe:	e788      	b.n	8023dd2 <__ssvfiscanf_r+0x172>
 8023ec0:	4b0e      	ldr	r3, [pc, #56]	; (8023efc <__ssvfiscanf_r+0x29c>)
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	f43f aefc 	beq.w	8023cc0 <__ssvfiscanf_r+0x60>
 8023ec8:	466b      	mov	r3, sp
 8023eca:	4622      	mov	r2, r4
 8023ecc:	a941      	add	r1, sp, #260	; 0x104
 8023ece:	4630      	mov	r0, r6
 8023ed0:	f3af 8000 	nop.w
 8023ed4:	e77d      	b.n	8023dd2 <__ssvfiscanf_r+0x172>
 8023ed6:	89a3      	ldrh	r3, [r4, #12]
 8023ed8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023edc:	bf18      	it	ne
 8023ede:	f04f 30ff 	movne.w	r0, #4294967295
 8023ee2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eea:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023eec:	e7f9      	b.n	8023ee2 <__ssvfiscanf_r+0x282>
 8023eee:	bf00      	nop
 8023ef0:	08023bad 	.word	0x08023bad
 8023ef4:	08023c27 	.word	0x08023c27
 8023ef8:	080270ee 	.word	0x080270ee
 8023efc:	00000000 	.word	0x00000000

08023f00 <_scanf_chars>:
 8023f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f04:	4615      	mov	r5, r2
 8023f06:	688a      	ldr	r2, [r1, #8]
 8023f08:	4680      	mov	r8, r0
 8023f0a:	460c      	mov	r4, r1
 8023f0c:	b932      	cbnz	r2, 8023f1c <_scanf_chars+0x1c>
 8023f0e:	698a      	ldr	r2, [r1, #24]
 8023f10:	2a00      	cmp	r2, #0
 8023f12:	bf14      	ite	ne
 8023f14:	f04f 32ff 	movne.w	r2, #4294967295
 8023f18:	2201      	moveq	r2, #1
 8023f1a:	608a      	str	r2, [r1, #8]
 8023f1c:	6822      	ldr	r2, [r4, #0]
 8023f1e:	06d1      	lsls	r1, r2, #27
 8023f20:	bf5f      	itttt	pl
 8023f22:	681a      	ldrpl	r2, [r3, #0]
 8023f24:	1d11      	addpl	r1, r2, #4
 8023f26:	6019      	strpl	r1, [r3, #0]
 8023f28:	6817      	ldrpl	r7, [r2, #0]
 8023f2a:	2600      	movs	r6, #0
 8023f2c:	69a3      	ldr	r3, [r4, #24]
 8023f2e:	b1db      	cbz	r3, 8023f68 <_scanf_chars+0x68>
 8023f30:	2b01      	cmp	r3, #1
 8023f32:	d107      	bne.n	8023f44 <_scanf_chars+0x44>
 8023f34:	682b      	ldr	r3, [r5, #0]
 8023f36:	6962      	ldr	r2, [r4, #20]
 8023f38:	781b      	ldrb	r3, [r3, #0]
 8023f3a:	5cd3      	ldrb	r3, [r2, r3]
 8023f3c:	b9a3      	cbnz	r3, 8023f68 <_scanf_chars+0x68>
 8023f3e:	2e00      	cmp	r6, #0
 8023f40:	d132      	bne.n	8023fa8 <_scanf_chars+0xa8>
 8023f42:	e006      	b.n	8023f52 <_scanf_chars+0x52>
 8023f44:	2b02      	cmp	r3, #2
 8023f46:	d007      	beq.n	8023f58 <_scanf_chars+0x58>
 8023f48:	2e00      	cmp	r6, #0
 8023f4a:	d12d      	bne.n	8023fa8 <_scanf_chars+0xa8>
 8023f4c:	69a3      	ldr	r3, [r4, #24]
 8023f4e:	2b01      	cmp	r3, #1
 8023f50:	d12a      	bne.n	8023fa8 <_scanf_chars+0xa8>
 8023f52:	2001      	movs	r0, #1
 8023f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f58:	f7ff f9fc 	bl	8023354 <__locale_ctype_ptr>
 8023f5c:	682b      	ldr	r3, [r5, #0]
 8023f5e:	781b      	ldrb	r3, [r3, #0]
 8023f60:	4418      	add	r0, r3
 8023f62:	7843      	ldrb	r3, [r0, #1]
 8023f64:	071b      	lsls	r3, r3, #28
 8023f66:	d4ef      	bmi.n	8023f48 <_scanf_chars+0x48>
 8023f68:	6823      	ldr	r3, [r4, #0]
 8023f6a:	06da      	lsls	r2, r3, #27
 8023f6c:	bf5e      	ittt	pl
 8023f6e:	682b      	ldrpl	r3, [r5, #0]
 8023f70:	781b      	ldrbpl	r3, [r3, #0]
 8023f72:	703b      	strbpl	r3, [r7, #0]
 8023f74:	682a      	ldr	r2, [r5, #0]
 8023f76:	686b      	ldr	r3, [r5, #4]
 8023f78:	f102 0201 	add.w	r2, r2, #1
 8023f7c:	602a      	str	r2, [r5, #0]
 8023f7e:	68a2      	ldr	r2, [r4, #8]
 8023f80:	f103 33ff 	add.w	r3, r3, #4294967295
 8023f84:	f102 32ff 	add.w	r2, r2, #4294967295
 8023f88:	606b      	str	r3, [r5, #4]
 8023f8a:	f106 0601 	add.w	r6, r6, #1
 8023f8e:	bf58      	it	pl
 8023f90:	3701      	addpl	r7, #1
 8023f92:	60a2      	str	r2, [r4, #8]
 8023f94:	b142      	cbz	r2, 8023fa8 <_scanf_chars+0xa8>
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	dcc8      	bgt.n	8023f2c <_scanf_chars+0x2c>
 8023f9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023f9e:	4629      	mov	r1, r5
 8023fa0:	4640      	mov	r0, r8
 8023fa2:	4798      	blx	r3
 8023fa4:	2800      	cmp	r0, #0
 8023fa6:	d0c1      	beq.n	8023f2c <_scanf_chars+0x2c>
 8023fa8:	6823      	ldr	r3, [r4, #0]
 8023faa:	f013 0310 	ands.w	r3, r3, #16
 8023fae:	d105      	bne.n	8023fbc <_scanf_chars+0xbc>
 8023fb0:	68e2      	ldr	r2, [r4, #12]
 8023fb2:	3201      	adds	r2, #1
 8023fb4:	60e2      	str	r2, [r4, #12]
 8023fb6:	69a2      	ldr	r2, [r4, #24]
 8023fb8:	b102      	cbz	r2, 8023fbc <_scanf_chars+0xbc>
 8023fba:	703b      	strb	r3, [r7, #0]
 8023fbc:	6923      	ldr	r3, [r4, #16]
 8023fbe:	441e      	add	r6, r3
 8023fc0:	6126      	str	r6, [r4, #16]
 8023fc2:	2000      	movs	r0, #0
 8023fc4:	e7c6      	b.n	8023f54 <_scanf_chars+0x54>
	...

08023fc8 <_scanf_i>:
 8023fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fcc:	469a      	mov	sl, r3
 8023fce:	4b74      	ldr	r3, [pc, #464]	; (80241a0 <_scanf_i+0x1d8>)
 8023fd0:	460c      	mov	r4, r1
 8023fd2:	4683      	mov	fp, r0
 8023fd4:	4616      	mov	r6, r2
 8023fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023fda:	b087      	sub	sp, #28
 8023fdc:	ab03      	add	r3, sp, #12
 8023fde:	68a7      	ldr	r7, [r4, #8]
 8023fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023fe4:	4b6f      	ldr	r3, [pc, #444]	; (80241a4 <_scanf_i+0x1dc>)
 8023fe6:	69a1      	ldr	r1, [r4, #24]
 8023fe8:	4a6f      	ldr	r2, [pc, #444]	; (80241a8 <_scanf_i+0x1e0>)
 8023fea:	2903      	cmp	r1, #3
 8023fec:	bf08      	it	eq
 8023fee:	461a      	moveq	r2, r3
 8023ff0:	1e7b      	subs	r3, r7, #1
 8023ff2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8023ff6:	bf84      	itt	hi
 8023ff8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8023ffc:	60a3      	strhi	r3, [r4, #8]
 8023ffe:	6823      	ldr	r3, [r4, #0]
 8024000:	9200      	str	r2, [sp, #0]
 8024002:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024006:	bf88      	it	hi
 8024008:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802400c:	f104 091c 	add.w	r9, r4, #28
 8024010:	6023      	str	r3, [r4, #0]
 8024012:	bf8c      	ite	hi
 8024014:	197f      	addhi	r7, r7, r5
 8024016:	2700      	movls	r7, #0
 8024018:	464b      	mov	r3, r9
 802401a:	f04f 0800 	mov.w	r8, #0
 802401e:	9301      	str	r3, [sp, #4]
 8024020:	6831      	ldr	r1, [r6, #0]
 8024022:	ab03      	add	r3, sp, #12
 8024024:	2202      	movs	r2, #2
 8024026:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802402a:	7809      	ldrb	r1, [r1, #0]
 802402c:	f7dc f8d0 	bl	80001d0 <memchr>
 8024030:	9b01      	ldr	r3, [sp, #4]
 8024032:	b330      	cbz	r0, 8024082 <_scanf_i+0xba>
 8024034:	f1b8 0f01 	cmp.w	r8, #1
 8024038:	d15a      	bne.n	80240f0 <_scanf_i+0x128>
 802403a:	6862      	ldr	r2, [r4, #4]
 802403c:	b92a      	cbnz	r2, 802404a <_scanf_i+0x82>
 802403e:	6822      	ldr	r2, [r4, #0]
 8024040:	2108      	movs	r1, #8
 8024042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024046:	6061      	str	r1, [r4, #4]
 8024048:	6022      	str	r2, [r4, #0]
 802404a:	6822      	ldr	r2, [r4, #0]
 802404c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8024050:	6022      	str	r2, [r4, #0]
 8024052:	68a2      	ldr	r2, [r4, #8]
 8024054:	1e51      	subs	r1, r2, #1
 8024056:	60a1      	str	r1, [r4, #8]
 8024058:	b19a      	cbz	r2, 8024082 <_scanf_i+0xba>
 802405a:	6832      	ldr	r2, [r6, #0]
 802405c:	1c51      	adds	r1, r2, #1
 802405e:	6031      	str	r1, [r6, #0]
 8024060:	7812      	ldrb	r2, [r2, #0]
 8024062:	701a      	strb	r2, [r3, #0]
 8024064:	1c5d      	adds	r5, r3, #1
 8024066:	6873      	ldr	r3, [r6, #4]
 8024068:	3b01      	subs	r3, #1
 802406a:	2b00      	cmp	r3, #0
 802406c:	6073      	str	r3, [r6, #4]
 802406e:	dc07      	bgt.n	8024080 <_scanf_i+0xb8>
 8024070:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024074:	4631      	mov	r1, r6
 8024076:	4658      	mov	r0, fp
 8024078:	4798      	blx	r3
 802407a:	2800      	cmp	r0, #0
 802407c:	f040 8086 	bne.w	802418c <_scanf_i+0x1c4>
 8024080:	462b      	mov	r3, r5
 8024082:	f108 0801 	add.w	r8, r8, #1
 8024086:	f1b8 0f03 	cmp.w	r8, #3
 802408a:	d1c8      	bne.n	802401e <_scanf_i+0x56>
 802408c:	6862      	ldr	r2, [r4, #4]
 802408e:	b90a      	cbnz	r2, 8024094 <_scanf_i+0xcc>
 8024090:	220a      	movs	r2, #10
 8024092:	6062      	str	r2, [r4, #4]
 8024094:	6862      	ldr	r2, [r4, #4]
 8024096:	4945      	ldr	r1, [pc, #276]	; (80241ac <_scanf_i+0x1e4>)
 8024098:	6960      	ldr	r0, [r4, #20]
 802409a:	9301      	str	r3, [sp, #4]
 802409c:	1a89      	subs	r1, r1, r2
 802409e:	f000 f899 	bl	80241d4 <__sccl>
 80240a2:	9b01      	ldr	r3, [sp, #4]
 80240a4:	f04f 0800 	mov.w	r8, #0
 80240a8:	461d      	mov	r5, r3
 80240aa:	68a3      	ldr	r3, [r4, #8]
 80240ac:	6822      	ldr	r2, [r4, #0]
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d03a      	beq.n	8024128 <_scanf_i+0x160>
 80240b2:	6831      	ldr	r1, [r6, #0]
 80240b4:	6960      	ldr	r0, [r4, #20]
 80240b6:	f891 c000 	ldrb.w	ip, [r1]
 80240ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80240be:	2800      	cmp	r0, #0
 80240c0:	d032      	beq.n	8024128 <_scanf_i+0x160>
 80240c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80240c6:	d121      	bne.n	802410c <_scanf_i+0x144>
 80240c8:	0510      	lsls	r0, r2, #20
 80240ca:	d51f      	bpl.n	802410c <_scanf_i+0x144>
 80240cc:	f108 0801 	add.w	r8, r8, #1
 80240d0:	b117      	cbz	r7, 80240d8 <_scanf_i+0x110>
 80240d2:	3301      	adds	r3, #1
 80240d4:	3f01      	subs	r7, #1
 80240d6:	60a3      	str	r3, [r4, #8]
 80240d8:	6873      	ldr	r3, [r6, #4]
 80240da:	3b01      	subs	r3, #1
 80240dc:	2b00      	cmp	r3, #0
 80240de:	6073      	str	r3, [r6, #4]
 80240e0:	dd1b      	ble.n	802411a <_scanf_i+0x152>
 80240e2:	6833      	ldr	r3, [r6, #0]
 80240e4:	3301      	adds	r3, #1
 80240e6:	6033      	str	r3, [r6, #0]
 80240e8:	68a3      	ldr	r3, [r4, #8]
 80240ea:	3b01      	subs	r3, #1
 80240ec:	60a3      	str	r3, [r4, #8]
 80240ee:	e7dc      	b.n	80240aa <_scanf_i+0xe2>
 80240f0:	f1b8 0f02 	cmp.w	r8, #2
 80240f4:	d1ad      	bne.n	8024052 <_scanf_i+0x8a>
 80240f6:	6822      	ldr	r2, [r4, #0]
 80240f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80240fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8024100:	d1bf      	bne.n	8024082 <_scanf_i+0xba>
 8024102:	2110      	movs	r1, #16
 8024104:	6061      	str	r1, [r4, #4]
 8024106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802410a:	e7a1      	b.n	8024050 <_scanf_i+0x88>
 802410c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8024110:	6022      	str	r2, [r4, #0]
 8024112:	780b      	ldrb	r3, [r1, #0]
 8024114:	702b      	strb	r3, [r5, #0]
 8024116:	3501      	adds	r5, #1
 8024118:	e7de      	b.n	80240d8 <_scanf_i+0x110>
 802411a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802411e:	4631      	mov	r1, r6
 8024120:	4658      	mov	r0, fp
 8024122:	4798      	blx	r3
 8024124:	2800      	cmp	r0, #0
 8024126:	d0df      	beq.n	80240e8 <_scanf_i+0x120>
 8024128:	6823      	ldr	r3, [r4, #0]
 802412a:	05d9      	lsls	r1, r3, #23
 802412c:	d50c      	bpl.n	8024148 <_scanf_i+0x180>
 802412e:	454d      	cmp	r5, r9
 8024130:	d908      	bls.n	8024144 <_scanf_i+0x17c>
 8024132:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802413a:	4632      	mov	r2, r6
 802413c:	4658      	mov	r0, fp
 802413e:	4798      	blx	r3
 8024140:	1e6f      	subs	r7, r5, #1
 8024142:	463d      	mov	r5, r7
 8024144:	454d      	cmp	r5, r9
 8024146:	d029      	beq.n	802419c <_scanf_i+0x1d4>
 8024148:	6822      	ldr	r2, [r4, #0]
 802414a:	f012 0210 	ands.w	r2, r2, #16
 802414e:	d113      	bne.n	8024178 <_scanf_i+0x1b0>
 8024150:	702a      	strb	r2, [r5, #0]
 8024152:	6863      	ldr	r3, [r4, #4]
 8024154:	9e00      	ldr	r6, [sp, #0]
 8024156:	4649      	mov	r1, r9
 8024158:	4658      	mov	r0, fp
 802415a:	47b0      	blx	r6
 802415c:	f8da 3000 	ldr.w	r3, [sl]
 8024160:	6821      	ldr	r1, [r4, #0]
 8024162:	1d1a      	adds	r2, r3, #4
 8024164:	f8ca 2000 	str.w	r2, [sl]
 8024168:	f011 0f20 	tst.w	r1, #32
 802416c:	681b      	ldr	r3, [r3, #0]
 802416e:	d010      	beq.n	8024192 <_scanf_i+0x1ca>
 8024170:	6018      	str	r0, [r3, #0]
 8024172:	68e3      	ldr	r3, [r4, #12]
 8024174:	3301      	adds	r3, #1
 8024176:	60e3      	str	r3, [r4, #12]
 8024178:	eba5 0509 	sub.w	r5, r5, r9
 802417c:	44a8      	add	r8, r5
 802417e:	6925      	ldr	r5, [r4, #16]
 8024180:	4445      	add	r5, r8
 8024182:	6125      	str	r5, [r4, #16]
 8024184:	2000      	movs	r0, #0
 8024186:	b007      	add	sp, #28
 8024188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802418c:	f04f 0800 	mov.w	r8, #0
 8024190:	e7ca      	b.n	8024128 <_scanf_i+0x160>
 8024192:	07ca      	lsls	r2, r1, #31
 8024194:	bf4c      	ite	mi
 8024196:	8018      	strhmi	r0, [r3, #0]
 8024198:	6018      	strpl	r0, [r3, #0]
 802419a:	e7ea      	b.n	8024172 <_scanf_i+0x1aa>
 802419c:	2001      	movs	r0, #1
 802419e:	e7f2      	b.n	8024186 <_scanf_i+0x1be>
 80241a0:	08026d70 	.word	0x08026d70
 80241a4:	08022965 	.word	0x08022965
 80241a8:	08023a81 	.word	0x08023a81
 80241ac:	08027335 	.word	0x08027335

080241b0 <_read_r>:
 80241b0:	b538      	push	{r3, r4, r5, lr}
 80241b2:	4c07      	ldr	r4, [pc, #28]	; (80241d0 <_read_r+0x20>)
 80241b4:	4605      	mov	r5, r0
 80241b6:	4608      	mov	r0, r1
 80241b8:	4611      	mov	r1, r2
 80241ba:	2200      	movs	r2, #0
 80241bc:	6022      	str	r2, [r4, #0]
 80241be:	461a      	mov	r2, r3
 80241c0:	f7e9 fe36 	bl	800de30 <_read>
 80241c4:	1c43      	adds	r3, r0, #1
 80241c6:	d102      	bne.n	80241ce <_read_r+0x1e>
 80241c8:	6823      	ldr	r3, [r4, #0]
 80241ca:	b103      	cbz	r3, 80241ce <_read_r+0x1e>
 80241cc:	602b      	str	r3, [r5, #0]
 80241ce:	bd38      	pop	{r3, r4, r5, pc}
 80241d0:	200022dc 	.word	0x200022dc

080241d4 <__sccl>:
 80241d4:	b570      	push	{r4, r5, r6, lr}
 80241d6:	780b      	ldrb	r3, [r1, #0]
 80241d8:	2b5e      	cmp	r3, #94	; 0x5e
 80241da:	bf13      	iteet	ne
 80241dc:	1c4a      	addne	r2, r1, #1
 80241de:	1c8a      	addeq	r2, r1, #2
 80241e0:	784b      	ldrbeq	r3, [r1, #1]
 80241e2:	2100      	movne	r1, #0
 80241e4:	bf08      	it	eq
 80241e6:	2101      	moveq	r1, #1
 80241e8:	1e44      	subs	r4, r0, #1
 80241ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80241ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80241f2:	42ac      	cmp	r4, r5
 80241f4:	d1fb      	bne.n	80241ee <__sccl+0x1a>
 80241f6:	b913      	cbnz	r3, 80241fe <__sccl+0x2a>
 80241f8:	3a01      	subs	r2, #1
 80241fa:	4610      	mov	r0, r2
 80241fc:	bd70      	pop	{r4, r5, r6, pc}
 80241fe:	f081 0401 	eor.w	r4, r1, #1
 8024202:	54c4      	strb	r4, [r0, r3]
 8024204:	1c51      	adds	r1, r2, #1
 8024206:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 802420a:	2d2d      	cmp	r5, #45	; 0x2d
 802420c:	f101 36ff 	add.w	r6, r1, #4294967295
 8024210:	460a      	mov	r2, r1
 8024212:	d006      	beq.n	8024222 <__sccl+0x4e>
 8024214:	2d5d      	cmp	r5, #93	; 0x5d
 8024216:	d0f0      	beq.n	80241fa <__sccl+0x26>
 8024218:	b90d      	cbnz	r5, 802421e <__sccl+0x4a>
 802421a:	4632      	mov	r2, r6
 802421c:	e7ed      	b.n	80241fa <__sccl+0x26>
 802421e:	462b      	mov	r3, r5
 8024220:	e7ef      	b.n	8024202 <__sccl+0x2e>
 8024222:	780e      	ldrb	r6, [r1, #0]
 8024224:	2e5d      	cmp	r6, #93	; 0x5d
 8024226:	d0fa      	beq.n	802421e <__sccl+0x4a>
 8024228:	42b3      	cmp	r3, r6
 802422a:	dcf8      	bgt.n	802421e <__sccl+0x4a>
 802422c:	3301      	adds	r3, #1
 802422e:	429e      	cmp	r6, r3
 8024230:	54c4      	strb	r4, [r0, r3]
 8024232:	dcfb      	bgt.n	802422c <__sccl+0x58>
 8024234:	3102      	adds	r1, #2
 8024236:	e7e6      	b.n	8024206 <__sccl+0x32>

08024238 <__submore>:
 8024238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802423c:	460c      	mov	r4, r1
 802423e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024244:	4299      	cmp	r1, r3
 8024246:	d11d      	bne.n	8024284 <__submore+0x4c>
 8024248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802424c:	f7fd fed4 	bl	8021ff8 <_malloc_r>
 8024250:	b918      	cbnz	r0, 802425a <__submore+0x22>
 8024252:	f04f 30ff 	mov.w	r0, #4294967295
 8024256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802425a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802425e:	63a3      	str	r3, [r4, #56]	; 0x38
 8024260:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8024264:	6360      	str	r0, [r4, #52]	; 0x34
 8024266:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802426a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802426e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8024272:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8024276:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802427a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802427e:	6020      	str	r0, [r4, #0]
 8024280:	2000      	movs	r0, #0
 8024282:	e7e8      	b.n	8024256 <__submore+0x1e>
 8024284:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8024286:	0077      	lsls	r7, r6, #1
 8024288:	463a      	mov	r2, r7
 802428a:	f7ff f902 	bl	8023492 <_realloc_r>
 802428e:	4605      	mov	r5, r0
 8024290:	2800      	cmp	r0, #0
 8024292:	d0de      	beq.n	8024252 <__submore+0x1a>
 8024294:	eb00 0806 	add.w	r8, r0, r6
 8024298:	4601      	mov	r1, r0
 802429a:	4632      	mov	r2, r6
 802429c:	4640      	mov	r0, r8
 802429e:	f7fd fbb5 	bl	8021a0c <memcpy>
 80242a2:	f8c4 8000 	str.w	r8, [r4]
 80242a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80242aa:	e7e9      	b.n	8024280 <__submore+0x48>
 80242ac:	0000      	movs	r0, r0
	...

080242b0 <ceil>:
 80242b0:	ec51 0b10 	vmov	r0, r1, d0
 80242b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80242bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80242c0:	2e13      	cmp	r6, #19
 80242c2:	460c      	mov	r4, r1
 80242c4:	ee10 5a10 	vmov	r5, s0
 80242c8:	4680      	mov	r8, r0
 80242ca:	dc30      	bgt.n	802432e <ceil+0x7e>
 80242cc:	2e00      	cmp	r6, #0
 80242ce:	da12      	bge.n	80242f6 <ceil+0x46>
 80242d0:	a333      	add	r3, pc, #204	; (adr r3, 80243a0 <ceil+0xf0>)
 80242d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242d6:	f7db ffe3 	bl	80002a0 <__adddf3>
 80242da:	2200      	movs	r2, #0
 80242dc:	2300      	movs	r3, #0
 80242de:	f7dc fc25 	bl	8000b2c <__aeabi_dcmpgt>
 80242e2:	b128      	cbz	r0, 80242f0 <ceil+0x40>
 80242e4:	2c00      	cmp	r4, #0
 80242e6:	db55      	blt.n	8024394 <ceil+0xe4>
 80242e8:	432c      	orrs	r4, r5
 80242ea:	d057      	beq.n	802439c <ceil+0xec>
 80242ec:	4c2e      	ldr	r4, [pc, #184]	; (80243a8 <ceil+0xf8>)
 80242ee:	2500      	movs	r5, #0
 80242f0:	4621      	mov	r1, r4
 80242f2:	4628      	mov	r0, r5
 80242f4:	e025      	b.n	8024342 <ceil+0x92>
 80242f6:	4f2d      	ldr	r7, [pc, #180]	; (80243ac <ceil+0xfc>)
 80242f8:	4137      	asrs	r7, r6
 80242fa:	ea01 0307 	and.w	r3, r1, r7
 80242fe:	4303      	orrs	r3, r0
 8024300:	d01f      	beq.n	8024342 <ceil+0x92>
 8024302:	a327      	add	r3, pc, #156	; (adr r3, 80243a0 <ceil+0xf0>)
 8024304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024308:	f7db ffca 	bl	80002a0 <__adddf3>
 802430c:	2200      	movs	r2, #0
 802430e:	2300      	movs	r3, #0
 8024310:	f7dc fc0c 	bl	8000b2c <__aeabi_dcmpgt>
 8024314:	2800      	cmp	r0, #0
 8024316:	d0eb      	beq.n	80242f0 <ceil+0x40>
 8024318:	2c00      	cmp	r4, #0
 802431a:	bfc2      	ittt	gt
 802431c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8024320:	fa43 f606 	asrgt.w	r6, r3, r6
 8024324:	19a4      	addgt	r4, r4, r6
 8024326:	ea24 0407 	bic.w	r4, r4, r7
 802432a:	2500      	movs	r5, #0
 802432c:	e7e0      	b.n	80242f0 <ceil+0x40>
 802432e:	2e33      	cmp	r6, #51	; 0x33
 8024330:	dd0b      	ble.n	802434a <ceil+0x9a>
 8024332:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024336:	d104      	bne.n	8024342 <ceil+0x92>
 8024338:	ee10 2a10 	vmov	r2, s0
 802433c:	460b      	mov	r3, r1
 802433e:	f7db ffaf 	bl	80002a0 <__adddf3>
 8024342:	ec41 0b10 	vmov	d0, r0, r1
 8024346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802434a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802434e:	f04f 33ff 	mov.w	r3, #4294967295
 8024352:	fa23 f707 	lsr.w	r7, r3, r7
 8024356:	4207      	tst	r7, r0
 8024358:	d0f3      	beq.n	8024342 <ceil+0x92>
 802435a:	a311      	add	r3, pc, #68	; (adr r3, 80243a0 <ceil+0xf0>)
 802435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024360:	f7db ff9e 	bl	80002a0 <__adddf3>
 8024364:	2200      	movs	r2, #0
 8024366:	2300      	movs	r3, #0
 8024368:	f7dc fbe0 	bl	8000b2c <__aeabi_dcmpgt>
 802436c:	2800      	cmp	r0, #0
 802436e:	d0bf      	beq.n	80242f0 <ceil+0x40>
 8024370:	2c00      	cmp	r4, #0
 8024372:	dd02      	ble.n	802437a <ceil+0xca>
 8024374:	2e14      	cmp	r6, #20
 8024376:	d103      	bne.n	8024380 <ceil+0xd0>
 8024378:	3401      	adds	r4, #1
 802437a:	ea25 0507 	bic.w	r5, r5, r7
 802437e:	e7b7      	b.n	80242f0 <ceil+0x40>
 8024380:	2301      	movs	r3, #1
 8024382:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024386:	fa03 f606 	lsl.w	r6, r3, r6
 802438a:	4435      	add	r5, r6
 802438c:	4545      	cmp	r5, r8
 802438e:	bf38      	it	cc
 8024390:	18e4      	addcc	r4, r4, r3
 8024392:	e7f2      	b.n	802437a <ceil+0xca>
 8024394:	2500      	movs	r5, #0
 8024396:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802439a:	e7a9      	b.n	80242f0 <ceil+0x40>
 802439c:	4625      	mov	r5, r4
 802439e:	e7a7      	b.n	80242f0 <ceil+0x40>
 80243a0:	8800759c 	.word	0x8800759c
 80243a4:	7e37e43c 	.word	0x7e37e43c
 80243a8:	3ff00000 	.word	0x3ff00000
 80243ac:	000fffff 	.word	0x000fffff

080243b0 <pow>:
 80243b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243b4:	ed2d 8b04 	vpush	{d8-d9}
 80243b8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 802468c <pow+0x2dc>
 80243bc:	b08d      	sub	sp, #52	; 0x34
 80243be:	ec57 6b10 	vmov	r6, r7, d0
 80243c2:	ec55 4b11 	vmov	r4, r5, d1
 80243c6:	f000 f963 	bl	8024690 <__ieee754_pow>
 80243ca:	f999 3000 	ldrsb.w	r3, [r9]
 80243ce:	9300      	str	r3, [sp, #0]
 80243d0:	3301      	adds	r3, #1
 80243d2:	eeb0 8a40 	vmov.f32	s16, s0
 80243d6:	eef0 8a60 	vmov.f32	s17, s1
 80243da:	46c8      	mov	r8, r9
 80243dc:	d05f      	beq.n	802449e <pow+0xee>
 80243de:	4622      	mov	r2, r4
 80243e0:	462b      	mov	r3, r5
 80243e2:	4620      	mov	r0, r4
 80243e4:	4629      	mov	r1, r5
 80243e6:	f7dc fbab 	bl	8000b40 <__aeabi_dcmpun>
 80243ea:	4683      	mov	fp, r0
 80243ec:	2800      	cmp	r0, #0
 80243ee:	d156      	bne.n	802449e <pow+0xee>
 80243f0:	4632      	mov	r2, r6
 80243f2:	463b      	mov	r3, r7
 80243f4:	4630      	mov	r0, r6
 80243f6:	4639      	mov	r1, r7
 80243f8:	f7dc fba2 	bl	8000b40 <__aeabi_dcmpun>
 80243fc:	9001      	str	r0, [sp, #4]
 80243fe:	b1e8      	cbz	r0, 802443c <pow+0x8c>
 8024400:	2200      	movs	r2, #0
 8024402:	2300      	movs	r3, #0
 8024404:	4620      	mov	r0, r4
 8024406:	4629      	mov	r1, r5
 8024408:	f7dc fb68 	bl	8000adc <__aeabi_dcmpeq>
 802440c:	2800      	cmp	r0, #0
 802440e:	d046      	beq.n	802449e <pow+0xee>
 8024410:	2301      	movs	r3, #1
 8024412:	9302      	str	r3, [sp, #8]
 8024414:	4b96      	ldr	r3, [pc, #600]	; (8024670 <pow+0x2c0>)
 8024416:	9303      	str	r3, [sp, #12]
 8024418:	4b96      	ldr	r3, [pc, #600]	; (8024674 <pow+0x2c4>)
 802441a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802441e:	2200      	movs	r2, #0
 8024420:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024424:	9b00      	ldr	r3, [sp, #0]
 8024426:	2b02      	cmp	r3, #2
 8024428:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802442c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8024430:	d033      	beq.n	802449a <pow+0xea>
 8024432:	a802      	add	r0, sp, #8
 8024434:	f000 fefb 	bl	802522e <matherr>
 8024438:	bb48      	cbnz	r0, 802448e <pow+0xde>
 802443a:	e05d      	b.n	80244f8 <pow+0x148>
 802443c:	f04f 0a00 	mov.w	sl, #0
 8024440:	f04f 0b00 	mov.w	fp, #0
 8024444:	4652      	mov	r2, sl
 8024446:	465b      	mov	r3, fp
 8024448:	4630      	mov	r0, r6
 802444a:	4639      	mov	r1, r7
 802444c:	f7dc fb46 	bl	8000adc <__aeabi_dcmpeq>
 8024450:	ec4b ab19 	vmov	d9, sl, fp
 8024454:	2800      	cmp	r0, #0
 8024456:	d054      	beq.n	8024502 <pow+0x152>
 8024458:	4652      	mov	r2, sl
 802445a:	465b      	mov	r3, fp
 802445c:	4620      	mov	r0, r4
 802445e:	4629      	mov	r1, r5
 8024460:	f7dc fb3c 	bl	8000adc <__aeabi_dcmpeq>
 8024464:	4680      	mov	r8, r0
 8024466:	b318      	cbz	r0, 80244b0 <pow+0x100>
 8024468:	2301      	movs	r3, #1
 802446a:	9302      	str	r3, [sp, #8]
 802446c:	4b80      	ldr	r3, [pc, #512]	; (8024670 <pow+0x2c0>)
 802446e:	9303      	str	r3, [sp, #12]
 8024470:	9b01      	ldr	r3, [sp, #4]
 8024472:	930a      	str	r3, [sp, #40]	; 0x28
 8024474:	9b00      	ldr	r3, [sp, #0]
 8024476:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802447a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802447e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8024482:	2b00      	cmp	r3, #0
 8024484:	d0d5      	beq.n	8024432 <pow+0x82>
 8024486:	4b7b      	ldr	r3, [pc, #492]	; (8024674 <pow+0x2c4>)
 8024488:	2200      	movs	r2, #0
 802448a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802448e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024490:	b11b      	cbz	r3, 802449a <pow+0xea>
 8024492:	f000 ffe3 	bl	802545c <__errno>
 8024496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024498:	6003      	str	r3, [r0, #0]
 802449a:	ed9d 8b08 	vldr	d8, [sp, #32]
 802449e:	eeb0 0a48 	vmov.f32	s0, s16
 80244a2:	eef0 0a68 	vmov.f32	s1, s17
 80244a6:	b00d      	add	sp, #52	; 0x34
 80244a8:	ecbd 8b04 	vpop	{d8-d9}
 80244ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244b0:	ec45 4b10 	vmov	d0, r4, r5
 80244b4:	f000 feb3 	bl	802521e <finite>
 80244b8:	2800      	cmp	r0, #0
 80244ba:	d0f0      	beq.n	802449e <pow+0xee>
 80244bc:	4652      	mov	r2, sl
 80244be:	465b      	mov	r3, fp
 80244c0:	4620      	mov	r0, r4
 80244c2:	4629      	mov	r1, r5
 80244c4:	f7dc fb14 	bl	8000af0 <__aeabi_dcmplt>
 80244c8:	2800      	cmp	r0, #0
 80244ca:	d0e8      	beq.n	802449e <pow+0xee>
 80244cc:	2301      	movs	r3, #1
 80244ce:	9302      	str	r3, [sp, #8]
 80244d0:	4b67      	ldr	r3, [pc, #412]	; (8024670 <pow+0x2c0>)
 80244d2:	9303      	str	r3, [sp, #12]
 80244d4:	f999 3000 	ldrsb.w	r3, [r9]
 80244d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80244dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80244e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80244e4:	b913      	cbnz	r3, 80244ec <pow+0x13c>
 80244e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80244ea:	e7a2      	b.n	8024432 <pow+0x82>
 80244ec:	4962      	ldr	r1, [pc, #392]	; (8024678 <pow+0x2c8>)
 80244ee:	2000      	movs	r0, #0
 80244f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80244f4:	2b02      	cmp	r3, #2
 80244f6:	d19c      	bne.n	8024432 <pow+0x82>
 80244f8:	f000 ffb0 	bl	802545c <__errno>
 80244fc:	2321      	movs	r3, #33	; 0x21
 80244fe:	6003      	str	r3, [r0, #0]
 8024500:	e7c5      	b.n	802448e <pow+0xde>
 8024502:	eeb0 0a48 	vmov.f32	s0, s16
 8024506:	eef0 0a68 	vmov.f32	s1, s17
 802450a:	f000 fe88 	bl	802521e <finite>
 802450e:	9000      	str	r0, [sp, #0]
 8024510:	2800      	cmp	r0, #0
 8024512:	f040 8081 	bne.w	8024618 <pow+0x268>
 8024516:	ec47 6b10 	vmov	d0, r6, r7
 802451a:	f000 fe80 	bl	802521e <finite>
 802451e:	2800      	cmp	r0, #0
 8024520:	d07a      	beq.n	8024618 <pow+0x268>
 8024522:	ec45 4b10 	vmov	d0, r4, r5
 8024526:	f000 fe7a 	bl	802521e <finite>
 802452a:	2800      	cmp	r0, #0
 802452c:	d074      	beq.n	8024618 <pow+0x268>
 802452e:	ec53 2b18 	vmov	r2, r3, d8
 8024532:	ee18 0a10 	vmov	r0, s16
 8024536:	4619      	mov	r1, r3
 8024538:	f7dc fb02 	bl	8000b40 <__aeabi_dcmpun>
 802453c:	f999 9000 	ldrsb.w	r9, [r9]
 8024540:	4b4b      	ldr	r3, [pc, #300]	; (8024670 <pow+0x2c0>)
 8024542:	b1b0      	cbz	r0, 8024572 <pow+0x1c2>
 8024544:	2201      	movs	r2, #1
 8024546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802454a:	9b00      	ldr	r3, [sp, #0]
 802454c:	930a      	str	r3, [sp, #40]	; 0x28
 802454e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8024552:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8024556:	f1b9 0f00 	cmp.w	r9, #0
 802455a:	d0c4      	beq.n	80244e6 <pow+0x136>
 802455c:	4652      	mov	r2, sl
 802455e:	465b      	mov	r3, fp
 8024560:	4650      	mov	r0, sl
 8024562:	4659      	mov	r1, fp
 8024564:	f7dc f97c 	bl	8000860 <__aeabi_ddiv>
 8024568:	f1b9 0f02 	cmp.w	r9, #2
 802456c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024570:	e7c1      	b.n	80244f6 <pow+0x146>
 8024572:	2203      	movs	r2, #3
 8024574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024578:	900a      	str	r0, [sp, #40]	; 0x28
 802457a:	4629      	mov	r1, r5
 802457c:	4620      	mov	r0, r4
 802457e:	2200      	movs	r2, #0
 8024580:	4b3e      	ldr	r3, [pc, #248]	; (802467c <pow+0x2cc>)
 8024582:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8024586:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802458a:	f7dc f83f 	bl	800060c <__aeabi_dmul>
 802458e:	4604      	mov	r4, r0
 8024590:	460d      	mov	r5, r1
 8024592:	f1b9 0f00 	cmp.w	r9, #0
 8024596:	d124      	bne.n	80245e2 <pow+0x232>
 8024598:	4b39      	ldr	r3, [pc, #228]	; (8024680 <pow+0x2d0>)
 802459a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802459e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80245a2:	4630      	mov	r0, r6
 80245a4:	4652      	mov	r2, sl
 80245a6:	465b      	mov	r3, fp
 80245a8:	4639      	mov	r1, r7
 80245aa:	f7dc faa1 	bl	8000af0 <__aeabi_dcmplt>
 80245ae:	2800      	cmp	r0, #0
 80245b0:	d056      	beq.n	8024660 <pow+0x2b0>
 80245b2:	ec45 4b10 	vmov	d0, r4, r5
 80245b6:	f000 fe47 	bl	8025248 <rint>
 80245ba:	4622      	mov	r2, r4
 80245bc:	462b      	mov	r3, r5
 80245be:	ec51 0b10 	vmov	r0, r1, d0
 80245c2:	f7dc fa8b 	bl	8000adc <__aeabi_dcmpeq>
 80245c6:	b920      	cbnz	r0, 80245d2 <pow+0x222>
 80245c8:	4b2e      	ldr	r3, [pc, #184]	; (8024684 <pow+0x2d4>)
 80245ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80245ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80245d2:	f998 3000 	ldrsb.w	r3, [r8]
 80245d6:	2b02      	cmp	r3, #2
 80245d8:	d142      	bne.n	8024660 <pow+0x2b0>
 80245da:	f000 ff3f 	bl	802545c <__errno>
 80245de:	2322      	movs	r3, #34	; 0x22
 80245e0:	e78d      	b.n	80244fe <pow+0x14e>
 80245e2:	4b29      	ldr	r3, [pc, #164]	; (8024688 <pow+0x2d8>)
 80245e4:	2200      	movs	r2, #0
 80245e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80245ea:	4630      	mov	r0, r6
 80245ec:	4652      	mov	r2, sl
 80245ee:	465b      	mov	r3, fp
 80245f0:	4639      	mov	r1, r7
 80245f2:	f7dc fa7d 	bl	8000af0 <__aeabi_dcmplt>
 80245f6:	2800      	cmp	r0, #0
 80245f8:	d0eb      	beq.n	80245d2 <pow+0x222>
 80245fa:	ec45 4b10 	vmov	d0, r4, r5
 80245fe:	f000 fe23 	bl	8025248 <rint>
 8024602:	4622      	mov	r2, r4
 8024604:	462b      	mov	r3, r5
 8024606:	ec51 0b10 	vmov	r0, r1, d0
 802460a:	f7dc fa67 	bl	8000adc <__aeabi_dcmpeq>
 802460e:	2800      	cmp	r0, #0
 8024610:	d1df      	bne.n	80245d2 <pow+0x222>
 8024612:	2200      	movs	r2, #0
 8024614:	4b18      	ldr	r3, [pc, #96]	; (8024678 <pow+0x2c8>)
 8024616:	e7da      	b.n	80245ce <pow+0x21e>
 8024618:	2200      	movs	r2, #0
 802461a:	2300      	movs	r3, #0
 802461c:	ec51 0b18 	vmov	r0, r1, d8
 8024620:	f7dc fa5c 	bl	8000adc <__aeabi_dcmpeq>
 8024624:	2800      	cmp	r0, #0
 8024626:	f43f af3a 	beq.w	802449e <pow+0xee>
 802462a:	ec47 6b10 	vmov	d0, r6, r7
 802462e:	f000 fdf6 	bl	802521e <finite>
 8024632:	2800      	cmp	r0, #0
 8024634:	f43f af33 	beq.w	802449e <pow+0xee>
 8024638:	ec45 4b10 	vmov	d0, r4, r5
 802463c:	f000 fdef 	bl	802521e <finite>
 8024640:	2800      	cmp	r0, #0
 8024642:	f43f af2c 	beq.w	802449e <pow+0xee>
 8024646:	2304      	movs	r3, #4
 8024648:	9302      	str	r3, [sp, #8]
 802464a:	4b09      	ldr	r3, [pc, #36]	; (8024670 <pow+0x2c0>)
 802464c:	9303      	str	r3, [sp, #12]
 802464e:	2300      	movs	r3, #0
 8024650:	930a      	str	r3, [sp, #40]	; 0x28
 8024652:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8024656:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802465a:	ed8d 9b08 	vstr	d9, [sp, #32]
 802465e:	e7b8      	b.n	80245d2 <pow+0x222>
 8024660:	a802      	add	r0, sp, #8
 8024662:	f000 fde4 	bl	802522e <matherr>
 8024666:	2800      	cmp	r0, #0
 8024668:	f47f af11 	bne.w	802448e <pow+0xde>
 802466c:	e7b5      	b.n	80245da <pow+0x22a>
 802466e:	bf00      	nop
 8024670:	08027340 	.word	0x08027340
 8024674:	3ff00000 	.word	0x3ff00000
 8024678:	fff00000 	.word	0xfff00000
 802467c:	3fe00000 	.word	0x3fe00000
 8024680:	47efffff 	.word	0x47efffff
 8024684:	c7efffff 	.word	0xc7efffff
 8024688:	7ff00000 	.word	0x7ff00000
 802468c:	20000324 	.word	0x20000324

08024690 <__ieee754_pow>:
 8024690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024694:	b091      	sub	sp, #68	; 0x44
 8024696:	ed8d 1b00 	vstr	d1, [sp]
 802469a:	e9dd 2900 	ldrd	r2, r9, [sp]
 802469e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80246a2:	ea58 0302 	orrs.w	r3, r8, r2
 80246a6:	ec57 6b10 	vmov	r6, r7, d0
 80246aa:	f000 84be 	beq.w	802502a <__ieee754_pow+0x99a>
 80246ae:	4b7a      	ldr	r3, [pc, #488]	; (8024898 <__ieee754_pow+0x208>)
 80246b0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80246b4:	429c      	cmp	r4, r3
 80246b6:	463d      	mov	r5, r7
 80246b8:	ee10 aa10 	vmov	sl, s0
 80246bc:	dc09      	bgt.n	80246d2 <__ieee754_pow+0x42>
 80246be:	d103      	bne.n	80246c8 <__ieee754_pow+0x38>
 80246c0:	b93e      	cbnz	r6, 80246d2 <__ieee754_pow+0x42>
 80246c2:	45a0      	cmp	r8, r4
 80246c4:	dc0d      	bgt.n	80246e2 <__ieee754_pow+0x52>
 80246c6:	e001      	b.n	80246cc <__ieee754_pow+0x3c>
 80246c8:	4598      	cmp	r8, r3
 80246ca:	dc02      	bgt.n	80246d2 <__ieee754_pow+0x42>
 80246cc:	4598      	cmp	r8, r3
 80246ce:	d10e      	bne.n	80246ee <__ieee754_pow+0x5e>
 80246d0:	b16a      	cbz	r2, 80246ee <__ieee754_pow+0x5e>
 80246d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80246d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80246da:	ea54 030a 	orrs.w	r3, r4, sl
 80246de:	f000 84a4 	beq.w	802502a <__ieee754_pow+0x99a>
 80246e2:	486e      	ldr	r0, [pc, #440]	; (802489c <__ieee754_pow+0x20c>)
 80246e4:	b011      	add	sp, #68	; 0x44
 80246e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246ea:	f000 bda5 	b.w	8025238 <nan>
 80246ee:	2d00      	cmp	r5, #0
 80246f0:	da53      	bge.n	802479a <__ieee754_pow+0x10a>
 80246f2:	4b6b      	ldr	r3, [pc, #428]	; (80248a0 <__ieee754_pow+0x210>)
 80246f4:	4598      	cmp	r8, r3
 80246f6:	dc4d      	bgt.n	8024794 <__ieee754_pow+0x104>
 80246f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80246fc:	4598      	cmp	r8, r3
 80246fe:	dd4c      	ble.n	802479a <__ieee754_pow+0x10a>
 8024700:	ea4f 5328 	mov.w	r3, r8, asr #20
 8024704:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024708:	2b14      	cmp	r3, #20
 802470a:	dd26      	ble.n	802475a <__ieee754_pow+0xca>
 802470c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8024710:	fa22 f103 	lsr.w	r1, r2, r3
 8024714:	fa01 f303 	lsl.w	r3, r1, r3
 8024718:	4293      	cmp	r3, r2
 802471a:	d13e      	bne.n	802479a <__ieee754_pow+0x10a>
 802471c:	f001 0101 	and.w	r1, r1, #1
 8024720:	f1c1 0b02 	rsb	fp, r1, #2
 8024724:	2a00      	cmp	r2, #0
 8024726:	d15b      	bne.n	80247e0 <__ieee754_pow+0x150>
 8024728:	4b5b      	ldr	r3, [pc, #364]	; (8024898 <__ieee754_pow+0x208>)
 802472a:	4598      	cmp	r8, r3
 802472c:	d124      	bne.n	8024778 <__ieee754_pow+0xe8>
 802472e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8024732:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8024736:	ea53 030a 	orrs.w	r3, r3, sl
 802473a:	f000 8476 	beq.w	802502a <__ieee754_pow+0x99a>
 802473e:	4b59      	ldr	r3, [pc, #356]	; (80248a4 <__ieee754_pow+0x214>)
 8024740:	429c      	cmp	r4, r3
 8024742:	dd2d      	ble.n	80247a0 <__ieee754_pow+0x110>
 8024744:	f1b9 0f00 	cmp.w	r9, #0
 8024748:	f280 8473 	bge.w	8025032 <__ieee754_pow+0x9a2>
 802474c:	2000      	movs	r0, #0
 802474e:	2100      	movs	r1, #0
 8024750:	ec41 0b10 	vmov	d0, r0, r1
 8024754:	b011      	add	sp, #68	; 0x44
 8024756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802475a:	2a00      	cmp	r2, #0
 802475c:	d13e      	bne.n	80247dc <__ieee754_pow+0x14c>
 802475e:	f1c3 0314 	rsb	r3, r3, #20
 8024762:	fa48 f103 	asr.w	r1, r8, r3
 8024766:	fa01 f303 	lsl.w	r3, r1, r3
 802476a:	4543      	cmp	r3, r8
 802476c:	f040 8469 	bne.w	8025042 <__ieee754_pow+0x9b2>
 8024770:	f001 0101 	and.w	r1, r1, #1
 8024774:	f1c1 0b02 	rsb	fp, r1, #2
 8024778:	4b4b      	ldr	r3, [pc, #300]	; (80248a8 <__ieee754_pow+0x218>)
 802477a:	4598      	cmp	r8, r3
 802477c:	d118      	bne.n	80247b0 <__ieee754_pow+0x120>
 802477e:	f1b9 0f00 	cmp.w	r9, #0
 8024782:	f280 845a 	bge.w	802503a <__ieee754_pow+0x9aa>
 8024786:	4948      	ldr	r1, [pc, #288]	; (80248a8 <__ieee754_pow+0x218>)
 8024788:	4632      	mov	r2, r6
 802478a:	463b      	mov	r3, r7
 802478c:	2000      	movs	r0, #0
 802478e:	f7dc f867 	bl	8000860 <__aeabi_ddiv>
 8024792:	e7dd      	b.n	8024750 <__ieee754_pow+0xc0>
 8024794:	f04f 0b02 	mov.w	fp, #2
 8024798:	e7c4      	b.n	8024724 <__ieee754_pow+0x94>
 802479a:	f04f 0b00 	mov.w	fp, #0
 802479e:	e7c1      	b.n	8024724 <__ieee754_pow+0x94>
 80247a0:	f1b9 0f00 	cmp.w	r9, #0
 80247a4:	dad2      	bge.n	802474c <__ieee754_pow+0xbc>
 80247a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80247aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80247ae:	e7cf      	b.n	8024750 <__ieee754_pow+0xc0>
 80247b0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80247b4:	d106      	bne.n	80247c4 <__ieee754_pow+0x134>
 80247b6:	4632      	mov	r2, r6
 80247b8:	463b      	mov	r3, r7
 80247ba:	4610      	mov	r0, r2
 80247bc:	4619      	mov	r1, r3
 80247be:	f7db ff25 	bl	800060c <__aeabi_dmul>
 80247c2:	e7c5      	b.n	8024750 <__ieee754_pow+0xc0>
 80247c4:	4b39      	ldr	r3, [pc, #228]	; (80248ac <__ieee754_pow+0x21c>)
 80247c6:	4599      	cmp	r9, r3
 80247c8:	d10a      	bne.n	80247e0 <__ieee754_pow+0x150>
 80247ca:	2d00      	cmp	r5, #0
 80247cc:	db08      	blt.n	80247e0 <__ieee754_pow+0x150>
 80247ce:	ec47 6b10 	vmov	d0, r6, r7
 80247d2:	b011      	add	sp, #68	; 0x44
 80247d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247d8:	f000 bc68 	b.w	80250ac <__ieee754_sqrt>
 80247dc:	f04f 0b00 	mov.w	fp, #0
 80247e0:	ec47 6b10 	vmov	d0, r6, r7
 80247e4:	f000 fd12 	bl	802520c <fabs>
 80247e8:	ec51 0b10 	vmov	r0, r1, d0
 80247ec:	f1ba 0f00 	cmp.w	sl, #0
 80247f0:	d127      	bne.n	8024842 <__ieee754_pow+0x1b2>
 80247f2:	b124      	cbz	r4, 80247fe <__ieee754_pow+0x16e>
 80247f4:	4b2c      	ldr	r3, [pc, #176]	; (80248a8 <__ieee754_pow+0x218>)
 80247f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80247fa:	429a      	cmp	r2, r3
 80247fc:	d121      	bne.n	8024842 <__ieee754_pow+0x1b2>
 80247fe:	f1b9 0f00 	cmp.w	r9, #0
 8024802:	da05      	bge.n	8024810 <__ieee754_pow+0x180>
 8024804:	4602      	mov	r2, r0
 8024806:	460b      	mov	r3, r1
 8024808:	2000      	movs	r0, #0
 802480a:	4927      	ldr	r1, [pc, #156]	; (80248a8 <__ieee754_pow+0x218>)
 802480c:	f7dc f828 	bl	8000860 <__aeabi_ddiv>
 8024810:	2d00      	cmp	r5, #0
 8024812:	da9d      	bge.n	8024750 <__ieee754_pow+0xc0>
 8024814:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8024818:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802481c:	ea54 030b 	orrs.w	r3, r4, fp
 8024820:	d108      	bne.n	8024834 <__ieee754_pow+0x1a4>
 8024822:	4602      	mov	r2, r0
 8024824:	460b      	mov	r3, r1
 8024826:	4610      	mov	r0, r2
 8024828:	4619      	mov	r1, r3
 802482a:	f7db fd37 	bl	800029c <__aeabi_dsub>
 802482e:	4602      	mov	r2, r0
 8024830:	460b      	mov	r3, r1
 8024832:	e7ac      	b.n	802478e <__ieee754_pow+0xfe>
 8024834:	f1bb 0f01 	cmp.w	fp, #1
 8024838:	d18a      	bne.n	8024750 <__ieee754_pow+0xc0>
 802483a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802483e:	4619      	mov	r1, r3
 8024840:	e786      	b.n	8024750 <__ieee754_pow+0xc0>
 8024842:	0fed      	lsrs	r5, r5, #31
 8024844:	1e6b      	subs	r3, r5, #1
 8024846:	930d      	str	r3, [sp, #52]	; 0x34
 8024848:	ea5b 0303 	orrs.w	r3, fp, r3
 802484c:	d102      	bne.n	8024854 <__ieee754_pow+0x1c4>
 802484e:	4632      	mov	r2, r6
 8024850:	463b      	mov	r3, r7
 8024852:	e7e8      	b.n	8024826 <__ieee754_pow+0x196>
 8024854:	4b16      	ldr	r3, [pc, #88]	; (80248b0 <__ieee754_pow+0x220>)
 8024856:	4598      	cmp	r8, r3
 8024858:	f340 80fe 	ble.w	8024a58 <__ieee754_pow+0x3c8>
 802485c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8024860:	4598      	cmp	r8, r3
 8024862:	dd0a      	ble.n	802487a <__ieee754_pow+0x1ea>
 8024864:	4b0f      	ldr	r3, [pc, #60]	; (80248a4 <__ieee754_pow+0x214>)
 8024866:	429c      	cmp	r4, r3
 8024868:	dc0d      	bgt.n	8024886 <__ieee754_pow+0x1f6>
 802486a:	f1b9 0f00 	cmp.w	r9, #0
 802486e:	f6bf af6d 	bge.w	802474c <__ieee754_pow+0xbc>
 8024872:	a307      	add	r3, pc, #28	; (adr r3, 8024890 <__ieee754_pow+0x200>)
 8024874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024878:	e79f      	b.n	80247ba <__ieee754_pow+0x12a>
 802487a:	4b0e      	ldr	r3, [pc, #56]	; (80248b4 <__ieee754_pow+0x224>)
 802487c:	429c      	cmp	r4, r3
 802487e:	ddf4      	ble.n	802486a <__ieee754_pow+0x1da>
 8024880:	4b09      	ldr	r3, [pc, #36]	; (80248a8 <__ieee754_pow+0x218>)
 8024882:	429c      	cmp	r4, r3
 8024884:	dd18      	ble.n	80248b8 <__ieee754_pow+0x228>
 8024886:	f1b9 0f00 	cmp.w	r9, #0
 802488a:	dcf2      	bgt.n	8024872 <__ieee754_pow+0x1e2>
 802488c:	e75e      	b.n	802474c <__ieee754_pow+0xbc>
 802488e:	bf00      	nop
 8024890:	8800759c 	.word	0x8800759c
 8024894:	7e37e43c 	.word	0x7e37e43c
 8024898:	7ff00000 	.word	0x7ff00000
 802489c:	08027083 	.word	0x08027083
 80248a0:	433fffff 	.word	0x433fffff
 80248a4:	3fefffff 	.word	0x3fefffff
 80248a8:	3ff00000 	.word	0x3ff00000
 80248ac:	3fe00000 	.word	0x3fe00000
 80248b0:	41e00000 	.word	0x41e00000
 80248b4:	3feffffe 	.word	0x3feffffe
 80248b8:	2200      	movs	r2, #0
 80248ba:	4b63      	ldr	r3, [pc, #396]	; (8024a48 <__ieee754_pow+0x3b8>)
 80248bc:	f7db fcee 	bl	800029c <__aeabi_dsub>
 80248c0:	a355      	add	r3, pc, #340	; (adr r3, 8024a18 <__ieee754_pow+0x388>)
 80248c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248c6:	4604      	mov	r4, r0
 80248c8:	460d      	mov	r5, r1
 80248ca:	f7db fe9f 	bl	800060c <__aeabi_dmul>
 80248ce:	a354      	add	r3, pc, #336	; (adr r3, 8024a20 <__ieee754_pow+0x390>)
 80248d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248d4:	4606      	mov	r6, r0
 80248d6:	460f      	mov	r7, r1
 80248d8:	4620      	mov	r0, r4
 80248da:	4629      	mov	r1, r5
 80248dc:	f7db fe96 	bl	800060c <__aeabi_dmul>
 80248e0:	2200      	movs	r2, #0
 80248e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80248e6:	4b59      	ldr	r3, [pc, #356]	; (8024a4c <__ieee754_pow+0x3bc>)
 80248e8:	4620      	mov	r0, r4
 80248ea:	4629      	mov	r1, r5
 80248ec:	f7db fe8e 	bl	800060c <__aeabi_dmul>
 80248f0:	4602      	mov	r2, r0
 80248f2:	460b      	mov	r3, r1
 80248f4:	a14c      	add	r1, pc, #304	; (adr r1, 8024a28 <__ieee754_pow+0x398>)
 80248f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80248fa:	f7db fccf 	bl	800029c <__aeabi_dsub>
 80248fe:	4622      	mov	r2, r4
 8024900:	462b      	mov	r3, r5
 8024902:	f7db fe83 	bl	800060c <__aeabi_dmul>
 8024906:	4602      	mov	r2, r0
 8024908:	460b      	mov	r3, r1
 802490a:	2000      	movs	r0, #0
 802490c:	4950      	ldr	r1, [pc, #320]	; (8024a50 <__ieee754_pow+0x3c0>)
 802490e:	f7db fcc5 	bl	800029c <__aeabi_dsub>
 8024912:	4622      	mov	r2, r4
 8024914:	462b      	mov	r3, r5
 8024916:	4680      	mov	r8, r0
 8024918:	4689      	mov	r9, r1
 802491a:	4620      	mov	r0, r4
 802491c:	4629      	mov	r1, r5
 802491e:	f7db fe75 	bl	800060c <__aeabi_dmul>
 8024922:	4602      	mov	r2, r0
 8024924:	460b      	mov	r3, r1
 8024926:	4640      	mov	r0, r8
 8024928:	4649      	mov	r1, r9
 802492a:	f7db fe6f 	bl	800060c <__aeabi_dmul>
 802492e:	a340      	add	r3, pc, #256	; (adr r3, 8024a30 <__ieee754_pow+0x3a0>)
 8024930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024934:	f7db fe6a 	bl	800060c <__aeabi_dmul>
 8024938:	4602      	mov	r2, r0
 802493a:	460b      	mov	r3, r1
 802493c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024940:	f7db fcac 	bl	800029c <__aeabi_dsub>
 8024944:	4602      	mov	r2, r0
 8024946:	460b      	mov	r3, r1
 8024948:	4604      	mov	r4, r0
 802494a:	460d      	mov	r5, r1
 802494c:	4630      	mov	r0, r6
 802494e:	4639      	mov	r1, r7
 8024950:	f7db fca6 	bl	80002a0 <__adddf3>
 8024954:	2000      	movs	r0, #0
 8024956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802495a:	4632      	mov	r2, r6
 802495c:	463b      	mov	r3, r7
 802495e:	f7db fc9d 	bl	800029c <__aeabi_dsub>
 8024962:	4602      	mov	r2, r0
 8024964:	460b      	mov	r3, r1
 8024966:	4620      	mov	r0, r4
 8024968:	4629      	mov	r1, r5
 802496a:	f7db fc97 	bl	800029c <__aeabi_dsub>
 802496e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024970:	f10b 33ff 	add.w	r3, fp, #4294967295
 8024974:	4313      	orrs	r3, r2
 8024976:	4606      	mov	r6, r0
 8024978:	460f      	mov	r7, r1
 802497a:	f040 81eb 	bne.w	8024d54 <__ieee754_pow+0x6c4>
 802497e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024a38 <__ieee754_pow+0x3a8>
 8024982:	e9dd 4500 	ldrd	r4, r5, [sp]
 8024986:	2400      	movs	r4, #0
 8024988:	4622      	mov	r2, r4
 802498a:	462b      	mov	r3, r5
 802498c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024994:	f7db fc82 	bl	800029c <__aeabi_dsub>
 8024998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802499c:	f7db fe36 	bl	800060c <__aeabi_dmul>
 80249a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80249a4:	4680      	mov	r8, r0
 80249a6:	4689      	mov	r9, r1
 80249a8:	4630      	mov	r0, r6
 80249aa:	4639      	mov	r1, r7
 80249ac:	f7db fe2e 	bl	800060c <__aeabi_dmul>
 80249b0:	4602      	mov	r2, r0
 80249b2:	460b      	mov	r3, r1
 80249b4:	4640      	mov	r0, r8
 80249b6:	4649      	mov	r1, r9
 80249b8:	f7db fc72 	bl	80002a0 <__adddf3>
 80249bc:	4622      	mov	r2, r4
 80249be:	462b      	mov	r3, r5
 80249c0:	4680      	mov	r8, r0
 80249c2:	4689      	mov	r9, r1
 80249c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80249c8:	f7db fe20 	bl	800060c <__aeabi_dmul>
 80249cc:	460b      	mov	r3, r1
 80249ce:	4604      	mov	r4, r0
 80249d0:	460d      	mov	r5, r1
 80249d2:	4602      	mov	r2, r0
 80249d4:	4649      	mov	r1, r9
 80249d6:	4640      	mov	r0, r8
 80249d8:	e9cd 4500 	strd	r4, r5, [sp]
 80249dc:	f7db fc60 	bl	80002a0 <__adddf3>
 80249e0:	4b1c      	ldr	r3, [pc, #112]	; (8024a54 <__ieee754_pow+0x3c4>)
 80249e2:	4299      	cmp	r1, r3
 80249e4:	4606      	mov	r6, r0
 80249e6:	460f      	mov	r7, r1
 80249e8:	468b      	mov	fp, r1
 80249ea:	f340 82f7 	ble.w	8024fdc <__ieee754_pow+0x94c>
 80249ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80249f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80249f6:	4303      	orrs	r3, r0
 80249f8:	f000 81ea 	beq.w	8024dd0 <__ieee754_pow+0x740>
 80249fc:	a310      	add	r3, pc, #64	; (adr r3, 8024a40 <__ieee754_pow+0x3b0>)
 80249fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024a06:	f7db fe01 	bl	800060c <__aeabi_dmul>
 8024a0a:	a30d      	add	r3, pc, #52	; (adr r3, 8024a40 <__ieee754_pow+0x3b0>)
 8024a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a10:	e6d5      	b.n	80247be <__ieee754_pow+0x12e>
 8024a12:	bf00      	nop
 8024a14:	f3af 8000 	nop.w
 8024a18:	60000000 	.word	0x60000000
 8024a1c:	3ff71547 	.word	0x3ff71547
 8024a20:	f85ddf44 	.word	0xf85ddf44
 8024a24:	3e54ae0b 	.word	0x3e54ae0b
 8024a28:	55555555 	.word	0x55555555
 8024a2c:	3fd55555 	.word	0x3fd55555
 8024a30:	652b82fe 	.word	0x652b82fe
 8024a34:	3ff71547 	.word	0x3ff71547
 8024a38:	00000000 	.word	0x00000000
 8024a3c:	bff00000 	.word	0xbff00000
 8024a40:	8800759c 	.word	0x8800759c
 8024a44:	7e37e43c 	.word	0x7e37e43c
 8024a48:	3ff00000 	.word	0x3ff00000
 8024a4c:	3fd00000 	.word	0x3fd00000
 8024a50:	3fe00000 	.word	0x3fe00000
 8024a54:	408fffff 	.word	0x408fffff
 8024a58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024a5c:	f04f 0200 	mov.w	r2, #0
 8024a60:	da05      	bge.n	8024a6e <__ieee754_pow+0x3de>
 8024a62:	4bd3      	ldr	r3, [pc, #844]	; (8024db0 <__ieee754_pow+0x720>)
 8024a64:	f7db fdd2 	bl	800060c <__aeabi_dmul>
 8024a68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8024a6c:	460c      	mov	r4, r1
 8024a6e:	1523      	asrs	r3, r4, #20
 8024a70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024a74:	4413      	add	r3, r2
 8024a76:	9309      	str	r3, [sp, #36]	; 0x24
 8024a78:	4bce      	ldr	r3, [pc, #824]	; (8024db4 <__ieee754_pow+0x724>)
 8024a7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8024a7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8024a82:	429c      	cmp	r4, r3
 8024a84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8024a88:	dd08      	ble.n	8024a9c <__ieee754_pow+0x40c>
 8024a8a:	4bcb      	ldr	r3, [pc, #812]	; (8024db8 <__ieee754_pow+0x728>)
 8024a8c:	429c      	cmp	r4, r3
 8024a8e:	f340 815e 	ble.w	8024d4e <__ieee754_pow+0x6be>
 8024a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a94:	3301      	adds	r3, #1
 8024a96:	9309      	str	r3, [sp, #36]	; 0x24
 8024a98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8024a9c:	f04f 0a00 	mov.w	sl, #0
 8024aa0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8024aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8024aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024aa8:	4bc4      	ldr	r3, [pc, #784]	; (8024dbc <__ieee754_pow+0x72c>)
 8024aaa:	4413      	add	r3, r2
 8024aac:	ed93 7b00 	vldr	d7, [r3]
 8024ab0:	4629      	mov	r1, r5
 8024ab2:	ec53 2b17 	vmov	r2, r3, d7
 8024ab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8024aba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8024abe:	f7db fbed 	bl	800029c <__aeabi_dsub>
 8024ac2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024ac6:	4606      	mov	r6, r0
 8024ac8:	460f      	mov	r7, r1
 8024aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024ace:	f7db fbe7 	bl	80002a0 <__adddf3>
 8024ad2:	4602      	mov	r2, r0
 8024ad4:	460b      	mov	r3, r1
 8024ad6:	2000      	movs	r0, #0
 8024ad8:	49b9      	ldr	r1, [pc, #740]	; (8024dc0 <__ieee754_pow+0x730>)
 8024ada:	f7db fec1 	bl	8000860 <__aeabi_ddiv>
 8024ade:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8024ae2:	4602      	mov	r2, r0
 8024ae4:	460b      	mov	r3, r1
 8024ae6:	4630      	mov	r0, r6
 8024ae8:	4639      	mov	r1, r7
 8024aea:	f7db fd8f 	bl	800060c <__aeabi_dmul>
 8024aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024af2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8024af6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024afa:	2300      	movs	r3, #0
 8024afc:	9302      	str	r3, [sp, #8]
 8024afe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8024b02:	106d      	asrs	r5, r5, #1
 8024b04:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8024b08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8024b12:	4640      	mov	r0, r8
 8024b14:	4649      	mov	r1, r9
 8024b16:	4614      	mov	r4, r2
 8024b18:	461d      	mov	r5, r3
 8024b1a:	f7db fd77 	bl	800060c <__aeabi_dmul>
 8024b1e:	4602      	mov	r2, r0
 8024b20:	460b      	mov	r3, r1
 8024b22:	4630      	mov	r0, r6
 8024b24:	4639      	mov	r1, r7
 8024b26:	f7db fbb9 	bl	800029c <__aeabi_dsub>
 8024b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024b2e:	4606      	mov	r6, r0
 8024b30:	460f      	mov	r7, r1
 8024b32:	4620      	mov	r0, r4
 8024b34:	4629      	mov	r1, r5
 8024b36:	f7db fbb1 	bl	800029c <__aeabi_dsub>
 8024b3a:	4602      	mov	r2, r0
 8024b3c:	460b      	mov	r3, r1
 8024b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024b42:	f7db fbab 	bl	800029c <__aeabi_dsub>
 8024b46:	4642      	mov	r2, r8
 8024b48:	464b      	mov	r3, r9
 8024b4a:	f7db fd5f 	bl	800060c <__aeabi_dmul>
 8024b4e:	4602      	mov	r2, r0
 8024b50:	460b      	mov	r3, r1
 8024b52:	4630      	mov	r0, r6
 8024b54:	4639      	mov	r1, r7
 8024b56:	f7db fba1 	bl	800029c <__aeabi_dsub>
 8024b5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8024b5e:	f7db fd55 	bl	800060c <__aeabi_dmul>
 8024b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024b66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024b6a:	4610      	mov	r0, r2
 8024b6c:	4619      	mov	r1, r3
 8024b6e:	f7db fd4d 	bl	800060c <__aeabi_dmul>
 8024b72:	a37b      	add	r3, pc, #492	; (adr r3, 8024d60 <__ieee754_pow+0x6d0>)
 8024b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b78:	4604      	mov	r4, r0
 8024b7a:	460d      	mov	r5, r1
 8024b7c:	f7db fd46 	bl	800060c <__aeabi_dmul>
 8024b80:	a379      	add	r3, pc, #484	; (adr r3, 8024d68 <__ieee754_pow+0x6d8>)
 8024b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b86:	f7db fb8b 	bl	80002a0 <__adddf3>
 8024b8a:	4622      	mov	r2, r4
 8024b8c:	462b      	mov	r3, r5
 8024b8e:	f7db fd3d 	bl	800060c <__aeabi_dmul>
 8024b92:	a377      	add	r3, pc, #476	; (adr r3, 8024d70 <__ieee754_pow+0x6e0>)
 8024b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b98:	f7db fb82 	bl	80002a0 <__adddf3>
 8024b9c:	4622      	mov	r2, r4
 8024b9e:	462b      	mov	r3, r5
 8024ba0:	f7db fd34 	bl	800060c <__aeabi_dmul>
 8024ba4:	a374      	add	r3, pc, #464	; (adr r3, 8024d78 <__ieee754_pow+0x6e8>)
 8024ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024baa:	f7db fb79 	bl	80002a0 <__adddf3>
 8024bae:	4622      	mov	r2, r4
 8024bb0:	462b      	mov	r3, r5
 8024bb2:	f7db fd2b 	bl	800060c <__aeabi_dmul>
 8024bb6:	a372      	add	r3, pc, #456	; (adr r3, 8024d80 <__ieee754_pow+0x6f0>)
 8024bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bbc:	f7db fb70 	bl	80002a0 <__adddf3>
 8024bc0:	4622      	mov	r2, r4
 8024bc2:	462b      	mov	r3, r5
 8024bc4:	f7db fd22 	bl	800060c <__aeabi_dmul>
 8024bc8:	a36f      	add	r3, pc, #444	; (adr r3, 8024d88 <__ieee754_pow+0x6f8>)
 8024bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bce:	f7db fb67 	bl	80002a0 <__adddf3>
 8024bd2:	4622      	mov	r2, r4
 8024bd4:	4606      	mov	r6, r0
 8024bd6:	460f      	mov	r7, r1
 8024bd8:	462b      	mov	r3, r5
 8024bda:	4620      	mov	r0, r4
 8024bdc:	4629      	mov	r1, r5
 8024bde:	f7db fd15 	bl	800060c <__aeabi_dmul>
 8024be2:	4602      	mov	r2, r0
 8024be4:	460b      	mov	r3, r1
 8024be6:	4630      	mov	r0, r6
 8024be8:	4639      	mov	r1, r7
 8024bea:	f7db fd0f 	bl	800060c <__aeabi_dmul>
 8024bee:	4642      	mov	r2, r8
 8024bf0:	4604      	mov	r4, r0
 8024bf2:	460d      	mov	r5, r1
 8024bf4:	464b      	mov	r3, r9
 8024bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024bfa:	f7db fb51 	bl	80002a0 <__adddf3>
 8024bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024c02:	f7db fd03 	bl	800060c <__aeabi_dmul>
 8024c06:	4622      	mov	r2, r4
 8024c08:	462b      	mov	r3, r5
 8024c0a:	f7db fb49 	bl	80002a0 <__adddf3>
 8024c0e:	4642      	mov	r2, r8
 8024c10:	4606      	mov	r6, r0
 8024c12:	460f      	mov	r7, r1
 8024c14:	464b      	mov	r3, r9
 8024c16:	4640      	mov	r0, r8
 8024c18:	4649      	mov	r1, r9
 8024c1a:	f7db fcf7 	bl	800060c <__aeabi_dmul>
 8024c1e:	2200      	movs	r2, #0
 8024c20:	4b68      	ldr	r3, [pc, #416]	; (8024dc4 <__ieee754_pow+0x734>)
 8024c22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8024c26:	f7db fb3b 	bl	80002a0 <__adddf3>
 8024c2a:	4632      	mov	r2, r6
 8024c2c:	463b      	mov	r3, r7
 8024c2e:	f7db fb37 	bl	80002a0 <__adddf3>
 8024c32:	9802      	ldr	r0, [sp, #8]
 8024c34:	460d      	mov	r5, r1
 8024c36:	4604      	mov	r4, r0
 8024c38:	4602      	mov	r2, r0
 8024c3a:	460b      	mov	r3, r1
 8024c3c:	4640      	mov	r0, r8
 8024c3e:	4649      	mov	r1, r9
 8024c40:	f7db fce4 	bl	800060c <__aeabi_dmul>
 8024c44:	2200      	movs	r2, #0
 8024c46:	4680      	mov	r8, r0
 8024c48:	4689      	mov	r9, r1
 8024c4a:	4b5e      	ldr	r3, [pc, #376]	; (8024dc4 <__ieee754_pow+0x734>)
 8024c4c:	4620      	mov	r0, r4
 8024c4e:	4629      	mov	r1, r5
 8024c50:	f7db fb24 	bl	800029c <__aeabi_dsub>
 8024c54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024c58:	f7db fb20 	bl	800029c <__aeabi_dsub>
 8024c5c:	4602      	mov	r2, r0
 8024c5e:	460b      	mov	r3, r1
 8024c60:	4630      	mov	r0, r6
 8024c62:	4639      	mov	r1, r7
 8024c64:	f7db fb1a 	bl	800029c <__aeabi_dsub>
 8024c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024c6c:	f7db fcce 	bl	800060c <__aeabi_dmul>
 8024c70:	4622      	mov	r2, r4
 8024c72:	4606      	mov	r6, r0
 8024c74:	460f      	mov	r7, r1
 8024c76:	462b      	mov	r3, r5
 8024c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024c7c:	f7db fcc6 	bl	800060c <__aeabi_dmul>
 8024c80:	4602      	mov	r2, r0
 8024c82:	460b      	mov	r3, r1
 8024c84:	4630      	mov	r0, r6
 8024c86:	4639      	mov	r1, r7
 8024c88:	f7db fb0a 	bl	80002a0 <__adddf3>
 8024c8c:	4606      	mov	r6, r0
 8024c8e:	460f      	mov	r7, r1
 8024c90:	4602      	mov	r2, r0
 8024c92:	460b      	mov	r3, r1
 8024c94:	4640      	mov	r0, r8
 8024c96:	4649      	mov	r1, r9
 8024c98:	f7db fb02 	bl	80002a0 <__adddf3>
 8024c9c:	9802      	ldr	r0, [sp, #8]
 8024c9e:	a33c      	add	r3, pc, #240	; (adr r3, 8024d90 <__ieee754_pow+0x700>)
 8024ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ca4:	4604      	mov	r4, r0
 8024ca6:	460d      	mov	r5, r1
 8024ca8:	f7db fcb0 	bl	800060c <__aeabi_dmul>
 8024cac:	4642      	mov	r2, r8
 8024cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024cb2:	464b      	mov	r3, r9
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	4629      	mov	r1, r5
 8024cb8:	f7db faf0 	bl	800029c <__aeabi_dsub>
 8024cbc:	4602      	mov	r2, r0
 8024cbe:	460b      	mov	r3, r1
 8024cc0:	4630      	mov	r0, r6
 8024cc2:	4639      	mov	r1, r7
 8024cc4:	f7db faea 	bl	800029c <__aeabi_dsub>
 8024cc8:	a333      	add	r3, pc, #204	; (adr r3, 8024d98 <__ieee754_pow+0x708>)
 8024cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cce:	f7db fc9d 	bl	800060c <__aeabi_dmul>
 8024cd2:	a333      	add	r3, pc, #204	; (adr r3, 8024da0 <__ieee754_pow+0x710>)
 8024cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cd8:	4606      	mov	r6, r0
 8024cda:	460f      	mov	r7, r1
 8024cdc:	4620      	mov	r0, r4
 8024cde:	4629      	mov	r1, r5
 8024ce0:	f7db fc94 	bl	800060c <__aeabi_dmul>
 8024ce4:	4602      	mov	r2, r0
 8024ce6:	460b      	mov	r3, r1
 8024ce8:	4630      	mov	r0, r6
 8024cea:	4639      	mov	r1, r7
 8024cec:	f7db fad8 	bl	80002a0 <__adddf3>
 8024cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024cf2:	4b35      	ldr	r3, [pc, #212]	; (8024dc8 <__ieee754_pow+0x738>)
 8024cf4:	4413      	add	r3, r2
 8024cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cfa:	f7db fad1 	bl	80002a0 <__adddf3>
 8024cfe:	4604      	mov	r4, r0
 8024d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024d02:	460d      	mov	r5, r1
 8024d04:	f7db fc18 	bl	8000538 <__aeabi_i2d>
 8024d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024d0a:	4b30      	ldr	r3, [pc, #192]	; (8024dcc <__ieee754_pow+0x73c>)
 8024d0c:	4413      	add	r3, r2
 8024d0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024d12:	4606      	mov	r6, r0
 8024d14:	460f      	mov	r7, r1
 8024d16:	4622      	mov	r2, r4
 8024d18:	462b      	mov	r3, r5
 8024d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024d1e:	f7db fabf 	bl	80002a0 <__adddf3>
 8024d22:	4642      	mov	r2, r8
 8024d24:	464b      	mov	r3, r9
 8024d26:	f7db fabb 	bl	80002a0 <__adddf3>
 8024d2a:	4632      	mov	r2, r6
 8024d2c:	463b      	mov	r3, r7
 8024d2e:	f7db fab7 	bl	80002a0 <__adddf3>
 8024d32:	9802      	ldr	r0, [sp, #8]
 8024d34:	4632      	mov	r2, r6
 8024d36:	463b      	mov	r3, r7
 8024d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024d3c:	f7db faae 	bl	800029c <__aeabi_dsub>
 8024d40:	4642      	mov	r2, r8
 8024d42:	464b      	mov	r3, r9
 8024d44:	f7db faaa 	bl	800029c <__aeabi_dsub>
 8024d48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8024d4c:	e607      	b.n	802495e <__ieee754_pow+0x2ce>
 8024d4e:	f04f 0a01 	mov.w	sl, #1
 8024d52:	e6a5      	b.n	8024aa0 <__ieee754_pow+0x410>
 8024d54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024da8 <__ieee754_pow+0x718>
 8024d58:	e613      	b.n	8024982 <__ieee754_pow+0x2f2>
 8024d5a:	bf00      	nop
 8024d5c:	f3af 8000 	nop.w
 8024d60:	4a454eef 	.word	0x4a454eef
 8024d64:	3fca7e28 	.word	0x3fca7e28
 8024d68:	93c9db65 	.word	0x93c9db65
 8024d6c:	3fcd864a 	.word	0x3fcd864a
 8024d70:	a91d4101 	.word	0xa91d4101
 8024d74:	3fd17460 	.word	0x3fd17460
 8024d78:	518f264d 	.word	0x518f264d
 8024d7c:	3fd55555 	.word	0x3fd55555
 8024d80:	db6fabff 	.word	0xdb6fabff
 8024d84:	3fdb6db6 	.word	0x3fdb6db6
 8024d88:	33333303 	.word	0x33333303
 8024d8c:	3fe33333 	.word	0x3fe33333
 8024d90:	e0000000 	.word	0xe0000000
 8024d94:	3feec709 	.word	0x3feec709
 8024d98:	dc3a03fd 	.word	0xdc3a03fd
 8024d9c:	3feec709 	.word	0x3feec709
 8024da0:	145b01f5 	.word	0x145b01f5
 8024da4:	be3e2fe0 	.word	0xbe3e2fe0
 8024da8:	00000000 	.word	0x00000000
 8024dac:	3ff00000 	.word	0x3ff00000
 8024db0:	43400000 	.word	0x43400000
 8024db4:	0003988e 	.word	0x0003988e
 8024db8:	000bb679 	.word	0x000bb679
 8024dbc:	08027348 	.word	0x08027348
 8024dc0:	3ff00000 	.word	0x3ff00000
 8024dc4:	40080000 	.word	0x40080000
 8024dc8:	08027368 	.word	0x08027368
 8024dcc:	08027358 	.word	0x08027358
 8024dd0:	a3b4      	add	r3, pc, #720	; (adr r3, 80250a4 <__ieee754_pow+0xa14>)
 8024dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dd6:	4640      	mov	r0, r8
 8024dd8:	4649      	mov	r1, r9
 8024dda:	f7db fa61 	bl	80002a0 <__adddf3>
 8024dde:	4622      	mov	r2, r4
 8024de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024de4:	462b      	mov	r3, r5
 8024de6:	4630      	mov	r0, r6
 8024de8:	4639      	mov	r1, r7
 8024dea:	f7db fa57 	bl	800029c <__aeabi_dsub>
 8024dee:	4602      	mov	r2, r0
 8024df0:	460b      	mov	r3, r1
 8024df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024df6:	f7db fe99 	bl	8000b2c <__aeabi_dcmpgt>
 8024dfa:	2800      	cmp	r0, #0
 8024dfc:	f47f adfe 	bne.w	80249fc <__ieee754_pow+0x36c>
 8024e00:	4aa3      	ldr	r2, [pc, #652]	; (8025090 <__ieee754_pow+0xa00>)
 8024e02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024e06:	4293      	cmp	r3, r2
 8024e08:	f340 810a 	ble.w	8025020 <__ieee754_pow+0x990>
 8024e0c:	151b      	asrs	r3, r3, #20
 8024e0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8024e12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8024e16:	fa4a f303 	asr.w	r3, sl, r3
 8024e1a:	445b      	add	r3, fp
 8024e1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024e20:	4e9c      	ldr	r6, [pc, #624]	; (8025094 <__ieee754_pow+0xa04>)
 8024e22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8024e26:	4116      	asrs	r6, r2
 8024e28:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024e2c:	2000      	movs	r0, #0
 8024e2e:	ea23 0106 	bic.w	r1, r3, r6
 8024e32:	f1c2 0214 	rsb	r2, r2, #20
 8024e36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8024e3a:	fa4a fa02 	asr.w	sl, sl, r2
 8024e3e:	f1bb 0f00 	cmp.w	fp, #0
 8024e42:	4602      	mov	r2, r0
 8024e44:	460b      	mov	r3, r1
 8024e46:	4620      	mov	r0, r4
 8024e48:	4629      	mov	r1, r5
 8024e4a:	bfb8      	it	lt
 8024e4c:	f1ca 0a00 	rsblt	sl, sl, #0
 8024e50:	f7db fa24 	bl	800029c <__aeabi_dsub>
 8024e54:	e9cd 0100 	strd	r0, r1, [sp]
 8024e58:	4642      	mov	r2, r8
 8024e5a:	464b      	mov	r3, r9
 8024e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024e60:	f7db fa1e 	bl	80002a0 <__adddf3>
 8024e64:	2000      	movs	r0, #0
 8024e66:	a378      	add	r3, pc, #480	; (adr r3, 8025048 <__ieee754_pow+0x9b8>)
 8024e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e6c:	4604      	mov	r4, r0
 8024e6e:	460d      	mov	r5, r1
 8024e70:	f7db fbcc 	bl	800060c <__aeabi_dmul>
 8024e74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024e78:	4606      	mov	r6, r0
 8024e7a:	460f      	mov	r7, r1
 8024e7c:	4620      	mov	r0, r4
 8024e7e:	4629      	mov	r1, r5
 8024e80:	f7db fa0c 	bl	800029c <__aeabi_dsub>
 8024e84:	4602      	mov	r2, r0
 8024e86:	460b      	mov	r3, r1
 8024e88:	4640      	mov	r0, r8
 8024e8a:	4649      	mov	r1, r9
 8024e8c:	f7db fa06 	bl	800029c <__aeabi_dsub>
 8024e90:	a36f      	add	r3, pc, #444	; (adr r3, 8025050 <__ieee754_pow+0x9c0>)
 8024e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e96:	f7db fbb9 	bl	800060c <__aeabi_dmul>
 8024e9a:	a36f      	add	r3, pc, #444	; (adr r3, 8025058 <__ieee754_pow+0x9c8>)
 8024e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ea0:	4680      	mov	r8, r0
 8024ea2:	4689      	mov	r9, r1
 8024ea4:	4620      	mov	r0, r4
 8024ea6:	4629      	mov	r1, r5
 8024ea8:	f7db fbb0 	bl	800060c <__aeabi_dmul>
 8024eac:	4602      	mov	r2, r0
 8024eae:	460b      	mov	r3, r1
 8024eb0:	4640      	mov	r0, r8
 8024eb2:	4649      	mov	r1, r9
 8024eb4:	f7db f9f4 	bl	80002a0 <__adddf3>
 8024eb8:	4604      	mov	r4, r0
 8024eba:	460d      	mov	r5, r1
 8024ebc:	4602      	mov	r2, r0
 8024ebe:	460b      	mov	r3, r1
 8024ec0:	4630      	mov	r0, r6
 8024ec2:	4639      	mov	r1, r7
 8024ec4:	f7db f9ec 	bl	80002a0 <__adddf3>
 8024ec8:	4632      	mov	r2, r6
 8024eca:	463b      	mov	r3, r7
 8024ecc:	4680      	mov	r8, r0
 8024ece:	4689      	mov	r9, r1
 8024ed0:	f7db f9e4 	bl	800029c <__aeabi_dsub>
 8024ed4:	4602      	mov	r2, r0
 8024ed6:	460b      	mov	r3, r1
 8024ed8:	4620      	mov	r0, r4
 8024eda:	4629      	mov	r1, r5
 8024edc:	f7db f9de 	bl	800029c <__aeabi_dsub>
 8024ee0:	4642      	mov	r2, r8
 8024ee2:	4606      	mov	r6, r0
 8024ee4:	460f      	mov	r7, r1
 8024ee6:	464b      	mov	r3, r9
 8024ee8:	4640      	mov	r0, r8
 8024eea:	4649      	mov	r1, r9
 8024eec:	f7db fb8e 	bl	800060c <__aeabi_dmul>
 8024ef0:	a35b      	add	r3, pc, #364	; (adr r3, 8025060 <__ieee754_pow+0x9d0>)
 8024ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ef6:	4604      	mov	r4, r0
 8024ef8:	460d      	mov	r5, r1
 8024efa:	f7db fb87 	bl	800060c <__aeabi_dmul>
 8024efe:	a35a      	add	r3, pc, #360	; (adr r3, 8025068 <__ieee754_pow+0x9d8>)
 8024f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f04:	f7db f9ca 	bl	800029c <__aeabi_dsub>
 8024f08:	4622      	mov	r2, r4
 8024f0a:	462b      	mov	r3, r5
 8024f0c:	f7db fb7e 	bl	800060c <__aeabi_dmul>
 8024f10:	a357      	add	r3, pc, #348	; (adr r3, 8025070 <__ieee754_pow+0x9e0>)
 8024f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f16:	f7db f9c3 	bl	80002a0 <__adddf3>
 8024f1a:	4622      	mov	r2, r4
 8024f1c:	462b      	mov	r3, r5
 8024f1e:	f7db fb75 	bl	800060c <__aeabi_dmul>
 8024f22:	a355      	add	r3, pc, #340	; (adr r3, 8025078 <__ieee754_pow+0x9e8>)
 8024f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f28:	f7db f9b8 	bl	800029c <__aeabi_dsub>
 8024f2c:	4622      	mov	r2, r4
 8024f2e:	462b      	mov	r3, r5
 8024f30:	f7db fb6c 	bl	800060c <__aeabi_dmul>
 8024f34:	a352      	add	r3, pc, #328	; (adr r3, 8025080 <__ieee754_pow+0x9f0>)
 8024f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f3a:	f7db f9b1 	bl	80002a0 <__adddf3>
 8024f3e:	4622      	mov	r2, r4
 8024f40:	462b      	mov	r3, r5
 8024f42:	f7db fb63 	bl	800060c <__aeabi_dmul>
 8024f46:	4602      	mov	r2, r0
 8024f48:	460b      	mov	r3, r1
 8024f4a:	4640      	mov	r0, r8
 8024f4c:	4649      	mov	r1, r9
 8024f4e:	f7db f9a5 	bl	800029c <__aeabi_dsub>
 8024f52:	4604      	mov	r4, r0
 8024f54:	460d      	mov	r5, r1
 8024f56:	4602      	mov	r2, r0
 8024f58:	460b      	mov	r3, r1
 8024f5a:	4640      	mov	r0, r8
 8024f5c:	4649      	mov	r1, r9
 8024f5e:	f7db fb55 	bl	800060c <__aeabi_dmul>
 8024f62:	2200      	movs	r2, #0
 8024f64:	e9cd 0100 	strd	r0, r1, [sp]
 8024f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024f6c:	4620      	mov	r0, r4
 8024f6e:	4629      	mov	r1, r5
 8024f70:	f7db f994 	bl	800029c <__aeabi_dsub>
 8024f74:	4602      	mov	r2, r0
 8024f76:	460b      	mov	r3, r1
 8024f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024f7c:	f7db fc70 	bl	8000860 <__aeabi_ddiv>
 8024f80:	4632      	mov	r2, r6
 8024f82:	4604      	mov	r4, r0
 8024f84:	460d      	mov	r5, r1
 8024f86:	463b      	mov	r3, r7
 8024f88:	4640      	mov	r0, r8
 8024f8a:	4649      	mov	r1, r9
 8024f8c:	f7db fb3e 	bl	800060c <__aeabi_dmul>
 8024f90:	4632      	mov	r2, r6
 8024f92:	463b      	mov	r3, r7
 8024f94:	f7db f984 	bl	80002a0 <__adddf3>
 8024f98:	4602      	mov	r2, r0
 8024f9a:	460b      	mov	r3, r1
 8024f9c:	4620      	mov	r0, r4
 8024f9e:	4629      	mov	r1, r5
 8024fa0:	f7db f97c 	bl	800029c <__aeabi_dsub>
 8024fa4:	4642      	mov	r2, r8
 8024fa6:	464b      	mov	r3, r9
 8024fa8:	f7db f978 	bl	800029c <__aeabi_dsub>
 8024fac:	4602      	mov	r2, r0
 8024fae:	460b      	mov	r3, r1
 8024fb0:	2000      	movs	r0, #0
 8024fb2:	4939      	ldr	r1, [pc, #228]	; (8025098 <__ieee754_pow+0xa08>)
 8024fb4:	f7db f972 	bl	800029c <__aeabi_dsub>
 8024fb8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8024fbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024fc0:	4602      	mov	r2, r0
 8024fc2:	460b      	mov	r3, r1
 8024fc4:	da2f      	bge.n	8025026 <__ieee754_pow+0x996>
 8024fc6:	4650      	mov	r0, sl
 8024fc8:	ec43 2b10 	vmov	d0, r2, r3
 8024fcc:	f000 f9c0 	bl	8025350 <scalbn>
 8024fd0:	ec51 0b10 	vmov	r0, r1, d0
 8024fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024fd8:	f7ff bbf1 	b.w	80247be <__ieee754_pow+0x12e>
 8024fdc:	4b2f      	ldr	r3, [pc, #188]	; (802509c <__ieee754_pow+0xa0c>)
 8024fde:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024fe2:	429e      	cmp	r6, r3
 8024fe4:	f77f af0c 	ble.w	8024e00 <__ieee754_pow+0x770>
 8024fe8:	4b2d      	ldr	r3, [pc, #180]	; (80250a0 <__ieee754_pow+0xa10>)
 8024fea:	440b      	add	r3, r1
 8024fec:	4303      	orrs	r3, r0
 8024fee:	d00b      	beq.n	8025008 <__ieee754_pow+0x978>
 8024ff0:	a325      	add	r3, pc, #148	; (adr r3, 8025088 <__ieee754_pow+0x9f8>)
 8024ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024ffa:	f7db fb07 	bl	800060c <__aeabi_dmul>
 8024ffe:	a322      	add	r3, pc, #136	; (adr r3, 8025088 <__ieee754_pow+0x9f8>)
 8025000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025004:	f7ff bbdb 	b.w	80247be <__ieee754_pow+0x12e>
 8025008:	4622      	mov	r2, r4
 802500a:	462b      	mov	r3, r5
 802500c:	f7db f946 	bl	800029c <__aeabi_dsub>
 8025010:	4642      	mov	r2, r8
 8025012:	464b      	mov	r3, r9
 8025014:	f7db fd80 	bl	8000b18 <__aeabi_dcmpge>
 8025018:	2800      	cmp	r0, #0
 802501a:	f43f aef1 	beq.w	8024e00 <__ieee754_pow+0x770>
 802501e:	e7e7      	b.n	8024ff0 <__ieee754_pow+0x960>
 8025020:	f04f 0a00 	mov.w	sl, #0
 8025024:	e718      	b.n	8024e58 <__ieee754_pow+0x7c8>
 8025026:	4621      	mov	r1, r4
 8025028:	e7d4      	b.n	8024fd4 <__ieee754_pow+0x944>
 802502a:	2000      	movs	r0, #0
 802502c:	491a      	ldr	r1, [pc, #104]	; (8025098 <__ieee754_pow+0xa08>)
 802502e:	f7ff bb8f 	b.w	8024750 <__ieee754_pow+0xc0>
 8025032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025036:	f7ff bb8b 	b.w	8024750 <__ieee754_pow+0xc0>
 802503a:	4630      	mov	r0, r6
 802503c:	4639      	mov	r1, r7
 802503e:	f7ff bb87 	b.w	8024750 <__ieee754_pow+0xc0>
 8025042:	4693      	mov	fp, r2
 8025044:	f7ff bb98 	b.w	8024778 <__ieee754_pow+0xe8>
 8025048:	00000000 	.word	0x00000000
 802504c:	3fe62e43 	.word	0x3fe62e43
 8025050:	fefa39ef 	.word	0xfefa39ef
 8025054:	3fe62e42 	.word	0x3fe62e42
 8025058:	0ca86c39 	.word	0x0ca86c39
 802505c:	be205c61 	.word	0xbe205c61
 8025060:	72bea4d0 	.word	0x72bea4d0
 8025064:	3e663769 	.word	0x3e663769
 8025068:	c5d26bf1 	.word	0xc5d26bf1
 802506c:	3ebbbd41 	.word	0x3ebbbd41
 8025070:	af25de2c 	.word	0xaf25de2c
 8025074:	3f11566a 	.word	0x3f11566a
 8025078:	16bebd93 	.word	0x16bebd93
 802507c:	3f66c16c 	.word	0x3f66c16c
 8025080:	5555553e 	.word	0x5555553e
 8025084:	3fc55555 	.word	0x3fc55555
 8025088:	c2f8f359 	.word	0xc2f8f359
 802508c:	01a56e1f 	.word	0x01a56e1f
 8025090:	3fe00000 	.word	0x3fe00000
 8025094:	000fffff 	.word	0x000fffff
 8025098:	3ff00000 	.word	0x3ff00000
 802509c:	4090cbff 	.word	0x4090cbff
 80250a0:	3f6f3400 	.word	0x3f6f3400
 80250a4:	652b82fe 	.word	0x652b82fe
 80250a8:	3c971547 	.word	0x3c971547

080250ac <__ieee754_sqrt>:
 80250ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250b0:	4955      	ldr	r1, [pc, #340]	; (8025208 <__ieee754_sqrt+0x15c>)
 80250b2:	ec55 4b10 	vmov	r4, r5, d0
 80250b6:	43a9      	bics	r1, r5
 80250b8:	462b      	mov	r3, r5
 80250ba:	462a      	mov	r2, r5
 80250bc:	d112      	bne.n	80250e4 <__ieee754_sqrt+0x38>
 80250be:	ee10 2a10 	vmov	r2, s0
 80250c2:	ee10 0a10 	vmov	r0, s0
 80250c6:	4629      	mov	r1, r5
 80250c8:	f7db faa0 	bl	800060c <__aeabi_dmul>
 80250cc:	4602      	mov	r2, r0
 80250ce:	460b      	mov	r3, r1
 80250d0:	4620      	mov	r0, r4
 80250d2:	4629      	mov	r1, r5
 80250d4:	f7db f8e4 	bl	80002a0 <__adddf3>
 80250d8:	4604      	mov	r4, r0
 80250da:	460d      	mov	r5, r1
 80250dc:	ec45 4b10 	vmov	d0, r4, r5
 80250e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80250e4:	2d00      	cmp	r5, #0
 80250e6:	ee10 0a10 	vmov	r0, s0
 80250ea:	4621      	mov	r1, r4
 80250ec:	dc0f      	bgt.n	802510e <__ieee754_sqrt+0x62>
 80250ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80250f2:	4330      	orrs	r0, r6
 80250f4:	d0f2      	beq.n	80250dc <__ieee754_sqrt+0x30>
 80250f6:	b155      	cbz	r5, 802510e <__ieee754_sqrt+0x62>
 80250f8:	ee10 2a10 	vmov	r2, s0
 80250fc:	4620      	mov	r0, r4
 80250fe:	4629      	mov	r1, r5
 8025100:	f7db f8cc 	bl	800029c <__aeabi_dsub>
 8025104:	4602      	mov	r2, r0
 8025106:	460b      	mov	r3, r1
 8025108:	f7db fbaa 	bl	8000860 <__aeabi_ddiv>
 802510c:	e7e4      	b.n	80250d8 <__ieee754_sqrt+0x2c>
 802510e:	151b      	asrs	r3, r3, #20
 8025110:	d073      	beq.n	80251fa <__ieee754_sqrt+0x14e>
 8025112:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025116:	07dd      	lsls	r5, r3, #31
 8025118:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802511c:	bf48      	it	mi
 802511e:	0fc8      	lsrmi	r0, r1, #31
 8025120:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8025124:	bf44      	itt	mi
 8025126:	0049      	lslmi	r1, r1, #1
 8025128:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802512c:	2500      	movs	r5, #0
 802512e:	1058      	asrs	r0, r3, #1
 8025130:	0fcb      	lsrs	r3, r1, #31
 8025132:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8025136:	0049      	lsls	r1, r1, #1
 8025138:	2316      	movs	r3, #22
 802513a:	462c      	mov	r4, r5
 802513c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8025140:	19a7      	adds	r7, r4, r6
 8025142:	4297      	cmp	r7, r2
 8025144:	bfde      	ittt	le
 8025146:	19bc      	addle	r4, r7, r6
 8025148:	1bd2      	suble	r2, r2, r7
 802514a:	19ad      	addle	r5, r5, r6
 802514c:	0fcf      	lsrs	r7, r1, #31
 802514e:	3b01      	subs	r3, #1
 8025150:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8025154:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025158:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802515c:	d1f0      	bne.n	8025140 <__ieee754_sqrt+0x94>
 802515e:	f04f 0c20 	mov.w	ip, #32
 8025162:	469e      	mov	lr, r3
 8025164:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8025168:	42a2      	cmp	r2, r4
 802516a:	eb06 070e 	add.w	r7, r6, lr
 802516e:	dc02      	bgt.n	8025176 <__ieee754_sqrt+0xca>
 8025170:	d112      	bne.n	8025198 <__ieee754_sqrt+0xec>
 8025172:	428f      	cmp	r7, r1
 8025174:	d810      	bhi.n	8025198 <__ieee754_sqrt+0xec>
 8025176:	2f00      	cmp	r7, #0
 8025178:	eb07 0e06 	add.w	lr, r7, r6
 802517c:	da42      	bge.n	8025204 <__ieee754_sqrt+0x158>
 802517e:	f1be 0f00 	cmp.w	lr, #0
 8025182:	db3f      	blt.n	8025204 <__ieee754_sqrt+0x158>
 8025184:	f104 0801 	add.w	r8, r4, #1
 8025188:	1b12      	subs	r2, r2, r4
 802518a:	428f      	cmp	r7, r1
 802518c:	bf88      	it	hi
 802518e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8025192:	1bc9      	subs	r1, r1, r7
 8025194:	4433      	add	r3, r6
 8025196:	4644      	mov	r4, r8
 8025198:	0052      	lsls	r2, r2, #1
 802519a:	f1bc 0c01 	subs.w	ip, ip, #1
 802519e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80251a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80251a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80251aa:	d1dd      	bne.n	8025168 <__ieee754_sqrt+0xbc>
 80251ac:	430a      	orrs	r2, r1
 80251ae:	d006      	beq.n	80251be <__ieee754_sqrt+0x112>
 80251b0:	1c5c      	adds	r4, r3, #1
 80251b2:	bf13      	iteet	ne
 80251b4:	3301      	addne	r3, #1
 80251b6:	3501      	addeq	r5, #1
 80251b8:	4663      	moveq	r3, ip
 80251ba:	f023 0301 	bicne.w	r3, r3, #1
 80251be:	106a      	asrs	r2, r5, #1
 80251c0:	085b      	lsrs	r3, r3, #1
 80251c2:	07e9      	lsls	r1, r5, #31
 80251c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80251c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80251cc:	bf48      	it	mi
 80251ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80251d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80251d6:	461c      	mov	r4, r3
 80251d8:	e780      	b.n	80250dc <__ieee754_sqrt+0x30>
 80251da:	0aca      	lsrs	r2, r1, #11
 80251dc:	3815      	subs	r0, #21
 80251de:	0549      	lsls	r1, r1, #21
 80251e0:	2a00      	cmp	r2, #0
 80251e2:	d0fa      	beq.n	80251da <__ieee754_sqrt+0x12e>
 80251e4:	02d6      	lsls	r6, r2, #11
 80251e6:	d50a      	bpl.n	80251fe <__ieee754_sqrt+0x152>
 80251e8:	f1c3 0420 	rsb	r4, r3, #32
 80251ec:	fa21 f404 	lsr.w	r4, r1, r4
 80251f0:	1e5d      	subs	r5, r3, #1
 80251f2:	4099      	lsls	r1, r3
 80251f4:	4322      	orrs	r2, r4
 80251f6:	1b43      	subs	r3, r0, r5
 80251f8:	e78b      	b.n	8025112 <__ieee754_sqrt+0x66>
 80251fa:	4618      	mov	r0, r3
 80251fc:	e7f0      	b.n	80251e0 <__ieee754_sqrt+0x134>
 80251fe:	0052      	lsls	r2, r2, #1
 8025200:	3301      	adds	r3, #1
 8025202:	e7ef      	b.n	80251e4 <__ieee754_sqrt+0x138>
 8025204:	46a0      	mov	r8, r4
 8025206:	e7bf      	b.n	8025188 <__ieee754_sqrt+0xdc>
 8025208:	7ff00000 	.word	0x7ff00000

0802520c <fabs>:
 802520c:	ec51 0b10 	vmov	r0, r1, d0
 8025210:	ee10 2a10 	vmov	r2, s0
 8025214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025218:	ec43 2b10 	vmov	d0, r2, r3
 802521c:	4770      	bx	lr

0802521e <finite>:
 802521e:	ee10 3a90 	vmov	r3, s1
 8025222:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8025226:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802522a:	0fc0      	lsrs	r0, r0, #31
 802522c:	4770      	bx	lr

0802522e <matherr>:
 802522e:	2000      	movs	r0, #0
 8025230:	4770      	bx	lr
 8025232:	0000      	movs	r0, r0
 8025234:	0000      	movs	r0, r0
	...

08025238 <nan>:
 8025238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8025240 <nan+0x8>
 802523c:	4770      	bx	lr
 802523e:	bf00      	nop
 8025240:	00000000 	.word	0x00000000
 8025244:	7ff80000 	.word	0x7ff80000

08025248 <rint>:
 8025248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802524a:	ec51 0b10 	vmov	r0, r1, d0
 802524e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025252:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8025256:	2e13      	cmp	r6, #19
 8025258:	460b      	mov	r3, r1
 802525a:	ee10 4a10 	vmov	r4, s0
 802525e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8025262:	dc56      	bgt.n	8025312 <rint+0xca>
 8025264:	2e00      	cmp	r6, #0
 8025266:	da2b      	bge.n	80252c0 <rint+0x78>
 8025268:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802526c:	4302      	orrs	r2, r0
 802526e:	d023      	beq.n	80252b8 <rint+0x70>
 8025270:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8025274:	4302      	orrs	r2, r0
 8025276:	4254      	negs	r4, r2
 8025278:	4314      	orrs	r4, r2
 802527a:	0c4b      	lsrs	r3, r1, #17
 802527c:	0b24      	lsrs	r4, r4, #12
 802527e:	045b      	lsls	r3, r3, #17
 8025280:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8025284:	ea44 0103 	orr.w	r1, r4, r3
 8025288:	460b      	mov	r3, r1
 802528a:	492f      	ldr	r1, [pc, #188]	; (8025348 <rint+0x100>)
 802528c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8025290:	e9d1 6700 	ldrd	r6, r7, [r1]
 8025294:	4602      	mov	r2, r0
 8025296:	4639      	mov	r1, r7
 8025298:	4630      	mov	r0, r6
 802529a:	f7db f801 	bl	80002a0 <__adddf3>
 802529e:	e9cd 0100 	strd	r0, r1, [sp]
 80252a2:	463b      	mov	r3, r7
 80252a4:	4632      	mov	r2, r6
 80252a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80252aa:	f7da fff7 	bl	800029c <__aeabi_dsub>
 80252ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80252b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80252b6:	4639      	mov	r1, r7
 80252b8:	ec41 0b10 	vmov	d0, r0, r1
 80252bc:	b003      	add	sp, #12
 80252be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252c0:	4a22      	ldr	r2, [pc, #136]	; (802534c <rint+0x104>)
 80252c2:	4132      	asrs	r2, r6
 80252c4:	ea01 0702 	and.w	r7, r1, r2
 80252c8:	4307      	orrs	r7, r0
 80252ca:	d0f5      	beq.n	80252b8 <rint+0x70>
 80252cc:	0852      	lsrs	r2, r2, #1
 80252ce:	4011      	ands	r1, r2
 80252d0:	430c      	orrs	r4, r1
 80252d2:	d00b      	beq.n	80252ec <rint+0xa4>
 80252d4:	ea23 0202 	bic.w	r2, r3, r2
 80252d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80252dc:	2e13      	cmp	r6, #19
 80252de:	fa43 f306 	asr.w	r3, r3, r6
 80252e2:	bf0c      	ite	eq
 80252e4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80252e8:	2400      	movne	r4, #0
 80252ea:	4313      	orrs	r3, r2
 80252ec:	4916      	ldr	r1, [pc, #88]	; (8025348 <rint+0x100>)
 80252ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80252f2:	4622      	mov	r2, r4
 80252f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80252f8:	4620      	mov	r0, r4
 80252fa:	4629      	mov	r1, r5
 80252fc:	f7da ffd0 	bl	80002a0 <__adddf3>
 8025300:	e9cd 0100 	strd	r0, r1, [sp]
 8025304:	4622      	mov	r2, r4
 8025306:	462b      	mov	r3, r5
 8025308:	e9dd 0100 	ldrd	r0, r1, [sp]
 802530c:	f7da ffc6 	bl	800029c <__aeabi_dsub>
 8025310:	e7d2      	b.n	80252b8 <rint+0x70>
 8025312:	2e33      	cmp	r6, #51	; 0x33
 8025314:	dd07      	ble.n	8025326 <rint+0xde>
 8025316:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802531a:	d1cd      	bne.n	80252b8 <rint+0x70>
 802531c:	ee10 2a10 	vmov	r2, s0
 8025320:	f7da ffbe 	bl	80002a0 <__adddf3>
 8025324:	e7c8      	b.n	80252b8 <rint+0x70>
 8025326:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802532a:	f04f 32ff 	mov.w	r2, #4294967295
 802532e:	40f2      	lsrs	r2, r6
 8025330:	4210      	tst	r0, r2
 8025332:	d0c1      	beq.n	80252b8 <rint+0x70>
 8025334:	0852      	lsrs	r2, r2, #1
 8025336:	4210      	tst	r0, r2
 8025338:	bf1f      	itttt	ne
 802533a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802533e:	ea20 0202 	bicne.w	r2, r0, r2
 8025342:	4134      	asrne	r4, r6
 8025344:	4314      	orrne	r4, r2
 8025346:	e7d1      	b.n	80252ec <rint+0xa4>
 8025348:	08027378 	.word	0x08027378
 802534c:	000fffff 	.word	0x000fffff

08025350 <scalbn>:
 8025350:	b570      	push	{r4, r5, r6, lr}
 8025352:	ec55 4b10 	vmov	r4, r5, d0
 8025356:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802535a:	4606      	mov	r6, r0
 802535c:	462b      	mov	r3, r5
 802535e:	b9aa      	cbnz	r2, 802538c <scalbn+0x3c>
 8025360:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025364:	4323      	orrs	r3, r4
 8025366:	d03b      	beq.n	80253e0 <scalbn+0x90>
 8025368:	4b31      	ldr	r3, [pc, #196]	; (8025430 <scalbn+0xe0>)
 802536a:	4629      	mov	r1, r5
 802536c:	2200      	movs	r2, #0
 802536e:	ee10 0a10 	vmov	r0, s0
 8025372:	f7db f94b 	bl	800060c <__aeabi_dmul>
 8025376:	4b2f      	ldr	r3, [pc, #188]	; (8025434 <scalbn+0xe4>)
 8025378:	429e      	cmp	r6, r3
 802537a:	4604      	mov	r4, r0
 802537c:	460d      	mov	r5, r1
 802537e:	da12      	bge.n	80253a6 <scalbn+0x56>
 8025380:	a327      	add	r3, pc, #156	; (adr r3, 8025420 <scalbn+0xd0>)
 8025382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025386:	f7db f941 	bl	800060c <__aeabi_dmul>
 802538a:	e009      	b.n	80253a0 <scalbn+0x50>
 802538c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025390:	428a      	cmp	r2, r1
 8025392:	d10c      	bne.n	80253ae <scalbn+0x5e>
 8025394:	ee10 2a10 	vmov	r2, s0
 8025398:	4620      	mov	r0, r4
 802539a:	4629      	mov	r1, r5
 802539c:	f7da ff80 	bl	80002a0 <__adddf3>
 80253a0:	4604      	mov	r4, r0
 80253a2:	460d      	mov	r5, r1
 80253a4:	e01c      	b.n	80253e0 <scalbn+0x90>
 80253a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80253aa:	460b      	mov	r3, r1
 80253ac:	3a36      	subs	r2, #54	; 0x36
 80253ae:	4432      	add	r2, r6
 80253b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80253b4:	428a      	cmp	r2, r1
 80253b6:	dd0b      	ble.n	80253d0 <scalbn+0x80>
 80253b8:	ec45 4b11 	vmov	d1, r4, r5
 80253bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8025428 <scalbn+0xd8>
 80253c0:	f000 f83c 	bl	802543c <copysign>
 80253c4:	a318      	add	r3, pc, #96	; (adr r3, 8025428 <scalbn+0xd8>)
 80253c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253ca:	ec51 0b10 	vmov	r0, r1, d0
 80253ce:	e7da      	b.n	8025386 <scalbn+0x36>
 80253d0:	2a00      	cmp	r2, #0
 80253d2:	dd08      	ble.n	80253e6 <scalbn+0x96>
 80253d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80253d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80253dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80253e0:	ec45 4b10 	vmov	d0, r4, r5
 80253e4:	bd70      	pop	{r4, r5, r6, pc}
 80253e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80253ea:	da0d      	bge.n	8025408 <scalbn+0xb8>
 80253ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80253f0:	429e      	cmp	r6, r3
 80253f2:	ec45 4b11 	vmov	d1, r4, r5
 80253f6:	dce1      	bgt.n	80253bc <scalbn+0x6c>
 80253f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8025420 <scalbn+0xd0>
 80253fc:	f000 f81e 	bl	802543c <copysign>
 8025400:	a307      	add	r3, pc, #28	; (adr r3, 8025420 <scalbn+0xd0>)
 8025402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025406:	e7e0      	b.n	80253ca <scalbn+0x7a>
 8025408:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802540c:	3236      	adds	r2, #54	; 0x36
 802540e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025412:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025416:	4620      	mov	r0, r4
 8025418:	4629      	mov	r1, r5
 802541a:	2200      	movs	r2, #0
 802541c:	4b06      	ldr	r3, [pc, #24]	; (8025438 <scalbn+0xe8>)
 802541e:	e7b2      	b.n	8025386 <scalbn+0x36>
 8025420:	c2f8f359 	.word	0xc2f8f359
 8025424:	01a56e1f 	.word	0x01a56e1f
 8025428:	8800759c 	.word	0x8800759c
 802542c:	7e37e43c 	.word	0x7e37e43c
 8025430:	43500000 	.word	0x43500000
 8025434:	ffff3cb0 	.word	0xffff3cb0
 8025438:	3c900000 	.word	0x3c900000

0802543c <copysign>:
 802543c:	ec51 0b10 	vmov	r0, r1, d0
 8025440:	ee11 0a90 	vmov	r0, s3
 8025444:	ee10 2a10 	vmov	r2, s0
 8025448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802544c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8025450:	ea41 0300 	orr.w	r3, r1, r0
 8025454:	ec43 2b10 	vmov	d0, r2, r3
 8025458:	4770      	bx	lr
	...

0802545c <__errno>:
 802545c:	4b01      	ldr	r3, [pc, #4]	; (8025464 <__errno+0x8>)
 802545e:	6818      	ldr	r0, [r3, #0]
 8025460:	4770      	bx	lr
 8025462:	bf00      	nop
 8025464:	200000f4 	.word	0x200000f4

08025468 <_init>:
 8025468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802546a:	bf00      	nop
 802546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802546e:	bc08      	pop	{r3}
 8025470:	469e      	mov	lr, r3
 8025472:	4770      	bx	lr

08025474 <_fini>:
 8025474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025476:	bf00      	nop
 8025478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802547a:	bc08      	pop	{r3}
 802547c:	469e      	mov	lr, r3
 802547e:	4770      	bx	lr

08025480 <__memxor_block_core_veneer>:
 8025480:	f85f f000 	ldr.w	pc, [pc]	; 8025484 <__memxor_block_core_veneer+0x4>
 8025484:	20000005 	.word	0x20000005

Disassembly of section .ARM.__at_0x08000534:

08025488 <TOGGLE_RESET_EXTI_CALLBACK>:
{
 8025488:	b580      	push	{r7, lr}
 802548a:	b084      	sub	sp, #16
 802548c:	af00      	add	r7, sp, #0
	unsigned short state=FLAG_WRT_ERR;
 802548e:	230f      	movs	r3, #15
 8025490:	81fb      	strh	r3, [r7, #14]
	unsigned int JumpFlag[2] = {0};
 8025492:	1d3b      	adds	r3, r7, #4
 8025494:	2200      	movs	r2, #0
 8025496:	601a      	str	r2, [r3, #0]
 8025498:	605a      	str	r2, [r3, #4]
	if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_N_FLAG)
 802549a:	4819      	ldr	r0, [pc, #100]	; (8025500 <_etext+0x78>)
 802549c:	f7f7 fd12 	bl	801cec4 <STMFLASH_Read32>
 80254a0:	4603      	mov	r3, r0
 80254a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80254a6:	d111      	bne.n	80254cc <TOGGLE_RESET_EXTI_CALLBACK+0x44>
		JumpFlag[0] = JUMP_FLAG;
 80254a8:	4b16      	ldr	r3, [pc, #88]	; (8025504 <_etext+0x7c>)
 80254aa:	607b      	str	r3, [r7, #4]
		JumpFlag[1] = JUMP_FLAG;
 80254ac:	4b15      	ldr	r3, [pc, #84]	; (8025504 <_etext+0x7c>)
 80254ae:	60bb      	str	r3, [r7, #8]
		if(LL_FLASH_Program64(JUMP_FLAG_ADDRESS, (uint32_t *)&JumpFlag)!=LL_OK)
 80254b0:	1d3b      	adds	r3, r7, #4
 80254b2:	4619      	mov	r1, r3
 80254b4:	4812      	ldr	r0, [pc, #72]	; (8025500 <_etext+0x78>)
 80254b6:	f7f7 fc5b 	bl	801cd70 <LL_FLASH_Program64>
 80254ba:	4603      	mov	r3, r0
 80254bc:	2b00      	cmp	r3, #0
 80254be:	d002      	beq.n	80254c6 <TOGGLE_RESET_EXTI_CALLBACK+0x3e>
			state = FLAG_WRT_ERR;//Write Error
 80254c0:	230f      	movs	r3, #15
 80254c2:	81fb      	strh	r3, [r7, #14]
 80254c4:	e016      	b.n	80254f4 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = FLAG_WRT_OK;//Write Ok
 80254c6:	2300      	movs	r3, #0
 80254c8:	81fb      	strh	r3, [r7, #14]
 80254ca:	e013      	b.n	80254f4 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
	else if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_FLAG)
 80254cc:	480c      	ldr	r0, [pc, #48]	; (8025500 <_etext+0x78>)
 80254ce:	f7f7 fcf9 	bl	801cec4 <STMFLASH_Read32>
 80254d2:	4602      	mov	r2, r0
 80254d4:	4b0b      	ldr	r3, [pc, #44]	; (8025504 <_etext+0x7c>)
 80254d6:	429a      	cmp	r2, r3
 80254d8:	d10c      	bne.n	80254f4 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
		LL_FLASH_PageErase(254);
 80254da:	20fe      	movs	r0, #254	; 0xfe
 80254dc:	f7f7 fbec 	bl	801ccb8 <LL_FLASH_PageErase>
		if (STMFLASH_BankSwitch() != LL_OK)
 80254e0:	f7f7 fcfc 	bl	801cedc <STMFLASH_BankSwitch>
 80254e4:	4603      	mov	r3, r0
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	d002      	beq.n	80254f0 <TOGGLE_RESET_EXTI_CALLBACK+0x68>
			state = BANK_TOGGLE_ERR;//Jump Error
 80254ea:	231f      	movs	r3, #31
 80254ec:	81fb      	strh	r3, [r7, #14]
 80254ee:	e001      	b.n	80254f4 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = BANK_TOGGLE_OK;//Jump OK
 80254f0:	2310      	movs	r3, #16
 80254f2:	81fb      	strh	r3, [r7, #14]
	return state;
 80254f4:	89fb      	ldrh	r3, [r7, #14]
 80254f6:	b2db      	uxtb	r3, r3
}
 80254f8:	4618      	mov	r0, r3
 80254fa:	3710      	adds	r7, #16
 80254fc:	46bd      	mov	sp, r7
 80254fe:	bd80      	pop	{r7, pc}
 8025500:	0807f7f8 	.word	0x0807f7f8
 8025504:	4a554d50 	.word	0x4a554d50
