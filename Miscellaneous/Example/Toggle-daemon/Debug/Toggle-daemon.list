
Toggle-daemon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.__at_0x08000534 00000080  08008e10  08008e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e8  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08009278  08009278  00020090  2**0
                  CONTENTS
  5 .ARM          00000008  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08009280  08009280  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000090  20000000  08009290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000005dc  20000090  08009320  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00005404  2000066c  08009320  0002066c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031a1f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000511e  00000000  00000000  00051adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001bc0  00000000  00000000  00056c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019d8  00000000  00000000  000587c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00032731  00000000  00000000  0005a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001dab3  00000000  00000000  0008c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00121354  00000000  00000000  000aa37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001cb6d0  2**0
                  CONTENTS, READONLY
 21 gpi_profile_info 0000000c  00000000  00000000  001cb74c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00007c10  00000000  00000000  001cb758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008df4 	.word	0x08008df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008df4 	.word	0x08008df4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <node_id_restore>:
 * @description: Read hardware id
 * @param None
 * @return: None
 */
static void node_id_restore(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	device_id[0] = DEVICE_ID_REG0;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <node_id_restore+0x44>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <node_id_restore+0x48>)
 800057a:	6013      	str	r3, [r2, #0]
	device_id[1] = DEVICE_ID_REG1;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <node_id_restore+0x4c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <node_id_restore+0x48>)
 8000582:	6053      	str	r3, [r2, #4]
	device_id[2] = DEVICE_ID_REG2;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <node_id_restore+0x50>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <node_id_restore+0x48>)
 800058a:	6093      	str	r3, [r2, #8]

	(*(uint32_t *)node_mac) = DEVICE_ID_REG1;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <node_id_restore+0x4c>)
 800058e:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <node_id_restore+0x54>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6013      	str	r3, [r2, #0]
	(*(((uint32_t *)node_mac) + 1)) = DEVICE_ID_REG2 + DEVICE_ID_REG0;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <node_id_restore+0x50>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <node_id_restore+0x44>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	490a      	ldr	r1, [pc, #40]	; (80005c8 <node_id_restore+0x58>)
 800059e:	4413      	add	r3, r2
 80005a0:	600b      	str	r3, [r1, #0]
	// stm_node_id = (uint32_t)(DEVICE_ID_REG0);
	TOS_NODE_ID = (uint32_t)(DEVICE_ID_REG0);
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <node_id_restore+0x44>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <node_id_restore+0x5c>)
 80005a8:	6013      	str	r3, [r2, #0]
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	1fff7590 	.word	0x1fff7590
 80005b8:	20000104 	.word	0x20000104
 80005bc:	1fff7594 	.word	0x1fff7594
 80005c0:	1fff7598 	.word	0x1fff7598
 80005c4:	20000110 	.word	0x20000110
 80005c8:	20000114 	.word	0x20000114
 80005cc:	20000000 	.word	0x20000000

080005d0 <hardware_init>:
 * @description: Initialization with hardware based on HAL library, peripherals, GPS, interrupt, System clock, radio, node id allocation and rand seed.
 * @param None
 * @return: node_id
 */
void hardware_init()
{
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af04      	add	r7, sp, #16
	uint8_t task[1];
	HAL_StatusTypeDef status;

	HAL_Init();
 80005d6:	f000 fbd5 	bl	8000d84 <HAL_Init>
	gpi_platform_init();
 80005da:	f006 ffcb 	bl	8007574 <gpi_platform_init>

#if BANK_1_RUN
	/* Only when the board is stable (eg, after a long time of getting GPS signal), the flash option bytes can be changed. Otherwise, readout protection will be triggered, when the voltage of the external power supply falls below the power down threshold.
	*/
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80005de:	4b4c      	ldr	r3, [pc, #304]	; (8000710 <hardware_init+0x140>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <hardware_init+0x140>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6013      	str	r3, [r2, #0]
	HAL_Delay(5000);
 80005ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ee:	f000 fc15 	bl	8000e1c <HAL_Delay>
	Bank_WRT_Check();
 80005f2:	f007 fa9f 	bl	8007b34 <Bank_WRT_Check>
#endif

	/* Disable SysTick Interrupt */
	HAL_SuspendTick();
 80005f6:	f000 fc2f 	bl	8000e58 <HAL_SuspendTick>

	// menu_bank();
	PRINTF("\nDaemon for testing switch bank\n");
 80005fa:	4846      	ldr	r0, [pc, #280]	; (8000714 <hardware_init+0x144>)
 80005fc:	f008 f896 	bl	800872c <puts>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000600:	b662      	cpsie	i

	gpi_int_enable();

	/* init RF transceiver */
	node_id_restore();
 8000602:	f7ff ffb5 	bl	8000570 <node_id_restore>

	PRINTF("\tStarting node 0x%X \n", TOS_NODE_ID);
 8000606:	4b44      	ldr	r3, [pc, #272]	; (8000718 <hardware_init+0x148>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4843      	ldr	r0, [pc, #268]	; (800071c <hardware_init+0x14c>)
 800060e:	f008 f819 	bl	8008644 <iprintf>

	DS3231_ClearAlarm1_Time();
 8000612:	f007 f89f 	bl	8007754 <DS3231_ClearAlarm1_Time>

	Chirp_Time gps_time;
	memset(&gps_time, 0, sizeof(gps_time));
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2208      	movs	r2, #8
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f007 fc99 	bl	8007f54 <memset>

	gps_time.chirp_year = 2021;
 8000622:	f240 73e5 	movw	r3, #2021	; 0x7e5
 8000626:	80bb      	strh	r3, [r7, #4]
	gps_time.chirp_month = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	71bb      	strb	r3, [r7, #6]
	gps_time.chirp_date = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
	gps_time.chirp_day = 5;
 8000630:	2305      	movs	r3, #5
 8000632:	723b      	strb	r3, [r7, #8]
	gps_time.chirp_hour = 12;
 8000634:	230c      	movs	r3, #12
 8000636:	727b      	strb	r3, [r7, #9]
	gps_time.chirp_min = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	72bb      	strb	r3, [r7, #10]
	gps_time.chirp_sec = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	72fb      	strb	r3, [r7, #11]


	status = HAL_TIMEOUT;
 8000640:	2303      	movs	r3, #3
 8000642:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000644:	e013      	b.n	800066e <hardware_init+0x9e>
	{
		PRINTF("Input initiator task: \n1: w WRT\t2: wo WRT\n");
 8000646:	4836      	ldr	r0, [pc, #216]	; (8000720 <hardware_init+0x150>)
 8000648:	f008 f870 	bl	800872c <puts>
		status = HAL_UART_Receive(&UART_Handle, &task, sizeof(task), DOWNLOAD_TIMEOUT);
 800064c:	f107 010c 	add.w	r1, r7, #12
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	2201      	movs	r2, #1
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <hardware_init+0x154>)
 8000658:	f005 fc05 	bl	8005e66 <HAL_UART_Receive>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
		while (UART_Handle.RxState == HAL_UART_STATE_BUSY_RX)
 8000660:	bf00      	nop
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <hardware_init+0x154>)
 8000664:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b22      	cmp	r3, #34	; 0x22
 800066c:	d0f9      	beq.n	8000662 <hardware_init+0x92>
	while (status != HAL_OK)
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e8      	bne.n	8000646 <hardware_init+0x76>
			;
	}
	if ((task[0] - '0') == 1)
 8000674:	7b3b      	ldrb	r3, [r7, #12]
 8000676:	2b31      	cmp	r3, #49	; 0x31
 8000678:	d122      	bne.n	80006c0 <hardware_init+0xf0>
	{
		printf("Switch bank with WRT!\n");
 800067a:	482b      	ldr	r0, [pc, #172]	; (8000728 <hardware_init+0x158>)
 800067c:	f008 f856 	bl	800872c <puts>
		DS3231_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	3330      	adds	r3, #48	; 0x30
 8000686:	b2d8      	uxtb	r0, r3
 8000688:	79bc      	ldrb	r4, [r7, #6]
 800068a:	79fd      	ldrb	r5, [r7, #7]
 800068c:	7a3e      	ldrb	r6, [r7, #8]
 800068e:	7a7b      	ldrb	r3, [r7, #9]
 8000690:	7aba      	ldrb	r2, [r7, #10]
 8000692:	7af9      	ldrb	r1, [r7, #11]
 8000694:	9102      	str	r1, [sp, #8]
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	4633      	mov	r3, r6
 800069c:	462a      	mov	r2, r5
 800069e:	4621      	mov	r1, r4
 80006a0:	f006 ffe6 	bl	8007670 <DS3231_ModifyTime>
		// set alarm after 5 seconds
		DS3231_SetAlarm1_Time(gps_time.chirp_date, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec + 5);
 80006a4:	79f8      	ldrb	r0, [r7, #7]
 80006a6:	7a79      	ldrb	r1, [r7, #9]
 80006a8:	7aba      	ldrb	r2, [r7, #10]
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	3305      	adds	r3, #5
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f007 f8c8 	bl	8007844 <DS3231_SetAlarm1_Time>
		Bank1_WRP(0, 255);
 80006b4:	21ff      	movs	r1, #255	; 0xff
 80006b6:	2000      	movs	r0, #0
 80006b8:	f007 f9ca 	bl	8007a50 <Bank1_WRP>

		/* switch to bank2 */
		STMFLASH_BankSwitch();
 80006bc:	f007 fb6c 	bl	8007d98 <STMFLASH_BankSwitch>
	}
	if ((task[0] - '0') == 2)
 80006c0:	7b3b      	ldrb	r3, [r7, #12]
 80006c2:	2b32      	cmp	r3, #50	; 0x32
 80006c4:	d120      	bne.n	8000708 <hardware_init+0x138>
	{
		printf("Switch bank without WRT!\n");
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <hardware_init+0x15c>)
 80006c8:	f008 f830 	bl	800872c <puts>
		DS3231_ModifyTime(gps_time.chirp_year - 2000, gps_time.chirp_month, gps_time.chirp_date, gps_time.chirp_day, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec);
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	3330      	adds	r3, #48	; 0x30
 80006d2:	b2d8      	uxtb	r0, r3
 80006d4:	79bc      	ldrb	r4, [r7, #6]
 80006d6:	79fd      	ldrb	r5, [r7, #7]
 80006d8:	7a3e      	ldrb	r6, [r7, #8]
 80006da:	7a7b      	ldrb	r3, [r7, #9]
 80006dc:	7aba      	ldrb	r2, [r7, #10]
 80006de:	7af9      	ldrb	r1, [r7, #11]
 80006e0:	9102      	str	r1, [sp, #8]
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	4633      	mov	r3, r6
 80006e8:	462a      	mov	r2, r5
 80006ea:	4621      	mov	r1, r4
 80006ec:	f006 ffc0 	bl	8007670 <DS3231_ModifyTime>
		// set alarm after 5 seconds
		DS3231_SetAlarm1_Time(gps_time.chirp_date, gps_time.chirp_hour, gps_time.chirp_min, gps_time.chirp_sec + 5);
 80006f0:	79f8      	ldrb	r0, [r7, #7]
 80006f2:	7a79      	ldrb	r1, [r7, #9]
 80006f4:	7aba      	ldrb	r2, [r7, #10]
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	3305      	adds	r3, #5
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f007 f8a2 	bl	8007844 <DS3231_SetAlarm1_Time>
		Bank1_nWRP();
 8000700:	f007 f9da 	bl	8007ab8 <Bank1_nWRP>

		/* switch to bank2 */
		STMFLASH_BankSwitch();
 8000704:	f007 fb48 	bl	8007d98 <STMFLASH_BankSwitch>
	}
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	e000e010 	.word	0xe000e010
 8000714:	08009044 	.word	0x08009044
 8000718:	20000000 	.word	0x20000000
 800071c:	08009064 	.word	0x08009064
 8000720:	0800907c 	.word	0x0800907c
 8000724:	20000560 	.word	0x20000560
 8000728:	080090a8 	.word	0x080090a8
 800072c:	080090c0 	.word	0x080090c0

08000730 <main>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	/****************************** HARDWARE INITIALIZATION ***************************/
	hardware_init();
 8000734:	f7ff ff4c 	bl	80005d0 <hardware_init>

	return 0;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}

0800073e <_Error_Handler>:

//**************************************************************************************************
void _Error_Handler(char *file, int line)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8000748:	e7fe      	b.n	8000748 <_Error_Handler+0xa>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <HAL_MspInit+0x98>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <HAL_MspInit+0x98>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	; 0x60
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <HAL_MspInit+0x98>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_MspInit+0x98>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <HAL_MspInit+0x98>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	; 0x58
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_MspInit+0x98>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 fc5e 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	f06f 000b 	mvn.w	r0, #11
 8000790:	f000 fc63 	bl	800105a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	f06f 000a 	mvn.w	r0, #10
 800079c:	f000 fc5d 	bl	800105a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	f06f 0009 	mvn.w	r0, #9
 80007a8:	f000 fc57 	bl	800105a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	f06f 0004 	mvn.w	r0, #4
 80007b4:	f000 fc51 	bl	800105a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	f06f 0003 	mvn.w	r0, #3
 80007c0:	f000 fc4b 	bl	800105a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f06f 0001 	mvn.w	r0, #1
 80007cc:	f000 fc45 	bl	800105a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 fc3f 	bl	800105a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f8:	d114      	bne.n	8000824 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	201c      	movs	r0, #28
 8000818:	f000 fc1f 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800081c:	201c      	movs	r0, #28
 800081e:	f000 fc38 	bl	8001092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000822:	e018      	b.n	8000856 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_TIM_Base_MspInit+0x7c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d113      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6593      	str	r3, [r2, #88]	; 0x58
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x78>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2032      	movs	r0, #50	; 0x32
 800084c:	f000 fc05 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000850:	2032      	movs	r0, #50	; 0x32
 8000852:	f000 fc1e 	bl	8001092 <HAL_NVIC_EnableIRQ>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	40000c00 	.word	0x40000c00

08000868 <HAL_LPTIM_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */
  }
}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  if(hlptim->Instance==LPTIM1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_LPTIM_MspInit+0x44>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d113      	bne.n	80008a2 <HAL_LPTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_LPTIM_MspInit+0x48>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <HAL_LPTIM_MspInit+0x48>)
 8000880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_LPTIM_MspInit+0x48>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2041      	movs	r0, #65	; 0x41
 8000898:	f000 fbdf 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800089c:	2041      	movs	r0, #65	; 0x41
 800089e:	f000 fbf8 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40007c00 	.word	0x40007c00
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a30      	ldr	r2, [pc, #192]	; (8000984 <HAL_UART_MspInit+0xd0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d125      	bne.n	8000912 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <HAL_UART_MspInit+0xd4>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <HAL_UART_MspInit+0xd4>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	6593      	str	r3, [r2, #88]	; 0x58
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <HAL_UART_MspInit+0xd4>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008de:	230c      	movs	r3, #12
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f001 f9b8 	bl	8001c70 <HAL_GPIO_Init>

	/* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2026      	movs	r0, #38	; 0x26
 8000906:	f000 fba8 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800090a:	2026      	movs	r0, #38	; 0x26
 800090c:	f000 fbc1 	bl	8001092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000910:	e034      	b.n	800097c <HAL_UART_MspInit+0xc8>
  else if(huart->Instance==USART3)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_UART_MspInit+0xd8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d12f      	bne.n	800097c <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_UART_MspInit+0xd4>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_UART_MspInit+0xd4>)
 8000922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000926:	6593      	str	r3, [r2, #88]	; 0x58
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_MspInit+0xd4>)
 800092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_UART_MspInit+0xd4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_UART_MspInit+0xd4>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0xd4>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800094c:	2330      	movs	r3, #48	; 0x30
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <HAL_UART_MspInit+0xdc>)
 8000968:	f001 f982 	bl	8001c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	2027      	movs	r0, #39	; 0x27
 8000972:	f000 fb72 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000976:	2027      	movs	r0, #39	; 0x27
 8000978:	f000 fb8b 	bl	8001092 <HAL_NVIC_EnableIRQ>
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000
 800098c:	40004800 	.word	0x40004800
 8000990:	48000800 	.word	0x48000800

08000994 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_UART_MspDeInit+0x5c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10e      	bne.n	80009c4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_UART_MspDeInit+0x60>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_UART_MspDeInit+0x60>)
 80009ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 80009b2:	210c      	movs	r1, #12
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f001 fb06 	bl	8001fc8 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80009bc:	2026      	movs	r0, #38	; 0x26
 80009be:	f000 fb76 	bl	80010ae <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 80009c2:	e011      	b.n	80009e8 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <HAL_UART_MspDeInit+0x64>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10c      	bne.n	80009e8 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART3_CLK_DISABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_UART_MspDeInit+0x60>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_UART_MspDeInit+0x60>)
 80009d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, USART3_TX_Pin|USART3_RX_Pin);
 80009da:	2130      	movs	r1, #48	; 0x30
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <HAL_UART_MspDeInit+0x68>)
 80009de:	f001 faf3 	bl	8001fc8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80009e2:	2027      	movs	r0, #39	; 0x27
 80009e4:	f000 fb63 	bl	80010ae <HAL_NVIC_DisableIRQ>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40004800 	.word	0x40004800
 80009fc:	48000800 	.word	0x48000800

08000a00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_RTC_MspInit+0x3c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d10f      	bne.n	8000a32 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_RTC_MspInit+0x40>)
 8000a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_RTC_MspInit+0x40>)
 8000a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 fb17 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 fb30 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40002800 	.word	0x40002800
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_CRC_MspInit+0x38>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10b      	bne.n	8000a6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_CRC_MspInit+0x3c>)
 8000a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <HAL_CRC_MspInit+0x3c>)
 8000a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a60:	6493      	str	r3, [r2, #72]	; 0x48
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <HAL_CRC_MspInit+0x3c>)
 8000a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023000 	.word	0x40023000
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <HAL_I2C_MspInit+0x9c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d138      	bne.n	8000b18 <HAL_I2C_MspInit+0x94>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <HAL_I2C_MspInit+0xa4>)
 8000adc:	f001 f8c8 	bl	8001c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aea:	6593      	str	r3, [r2, #88]	; 0x58
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_I2C_MspInit+0xa0>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2021      	movs	r0, #33	; 0x21
 8000afe:	f000 faac 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b02:	2021      	movs	r0, #33	; 0x21
 8000b04:	f000 fac5 	bl	8001092 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2022      	movs	r0, #34	; 0x22
 8000b0e:	f000 faa4 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b12:	2022      	movs	r0, #34	; 0x22
 8000b14:	f000 fabd 	bl	8001092 <HAL_NVIC_EnableIRQ>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40005800 	.word	0x40005800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <HAL_GPIO_EXTI_Callback>:
  }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
  HW_GPIO_IrqHandler( GPIO_Pin );
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 f995 	bl	8006e68 <HW_GPIO_IrqHandler>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f94d 	bl	8000de8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000b4e:	f000 fac8 	bl	80010e2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART2_IRQHandler+0x10>)
 8000b5e:	f005 fa45 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000560 	.word	0x20000560

08000b6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USART3_IRQHandler+0x10>)
 8000b72:	f005 fa3b 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000026c 	.word	0x2000026c

08000b80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <I2C2_EV_IRQHandler+0x10>)
 8000b86:	f001 fe05 	bl	8002794 <HAL_I2C_EV_IRQHandler>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200002f4 	.word	0x200002f4

08000b94 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <I2C2_ER_IRQHandler+0x10>)
 8000b9a:	f001 fe15 	bl	80027c8 <HAL_I2C_ER_IRQHandler>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200002f4 	.word	0x200002f4

08000ba8 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line[15:0] interrupts.
*/
void EXTI0_IRQHandler( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fb1b 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f001 fb14 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f001 fb0d 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	f001 fb06 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8000be4:	2010      	movs	r0, #16
 8000be6:	f001 faff 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8000bf2:	2020      	movs	r0, #32
 8000bf4:	f001 faf8 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8000bf8:	2040      	movs	r0, #64	; 0x40
 8000bfa:	f001 faf5 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8000bfe:	2080      	movs	r0, #128	; 0x80
 8000c00:	f001 faf2 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8000c04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c08:	f001 faee 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8000c0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c10:	f001 faea 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8000c1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c20:	f001 fae2 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8000c24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c28:	f001 fade 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8000c2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c30:	f001 fada 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8000c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c38:	f001 fad6 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8000c3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c40:	f001 fad2 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8000c44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c48:	f001 face 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_sbrk>:
//	}
//	return len;
//}

caddr_t _sbrk(int incr)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x16>
		heap_end = &end;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <_sbrk+0x50>)
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <_sbrk+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <_sbrk+0x50>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <_sbrk+0x50>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	466a      	mov	r2, sp
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d905      	bls.n	8000c86 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <_sbrk+0x58>)
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	e006      	b.n	8000c94 <_sbrk+0x44>
	}

	heap_end += incr;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <_sbrk+0x50>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <_sbrk+0x50>)
 8000c90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	200000ac 	.word	0x200000ac
 8000ca4:	20000670 	.word	0x20000670
 8000ca8:	20000668 	.word	0x20000668

08000cac <_close>:

int _close(int file)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd4:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_isatty>:

int _isatty(int file)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <SystemInit+0x64>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <SystemInit+0x64>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <SystemInit+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <SystemInit+0x68>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <SystemInit+0x68>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <SystemInit+0x68>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <SystemInit+0x68>)
 8000d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <SystemInit+0x68>)
 8000d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SystemInit+0x68>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <SystemInit+0x68>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <SystemInit+0x68>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SystemInit+0x64>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f955 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fcd4 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_InitTick+0x30>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_InitTick+0x34>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	099b      	lsrs	r3, r3, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f980 	bl	80010ca <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	f000 f942 	bl	800105a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000004 	.word	0x20000004
 8000de4:	10624dd3 	.word	0x10624dd3

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick++;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_IncTick+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x18>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	20000120 	.word	0x20000120

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000120 	.word	0x20000120

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d002      	beq.n	8000e3c <HAL_Delay+0x20>
  {
    wait++;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000e3c:	bf00      	nop
 8000e3e:	f7ff ffe1 	bl	8000e04 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d8f7      	bhi.n	8000e3e <HAL_Delay+0x22>
  {
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_SuspendTick+0x1c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_SuspendTick+0x1c>)
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <NVIC_EnableIRQ+0x30>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <NVIC_DisableIRQ+0x30>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	3320      	adds	r3, #32
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0b      	bge.n	8000f70 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <NVIC_SetPriority+0x4c>)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	3b04      	subs	r3, #4
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6e:	e009      	b.n	8000f84 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <NVIC_SetPriority+0x50>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff13 	bl	8000e78 <NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff28 	bl	8000ec0 <NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff1b 	bl	8000edc <NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff27 	bl	8000f10 <NVIC_DisableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff94 	bl	8001000 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010e6:	f000 f802 	bl	80010ee <HAL_SYSTICK_Callback>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e054      	b.n	80011b8 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7f5b      	ldrb	r3, [r3, #29]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fc90 	bl	8000a44 <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	791b      	ldrb	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <HAL_CRC_Init+0xc4>)
 8001138:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0218 	bic.w	r2, r2, #24
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	e00c      	b.n	8001166 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	461a      	mov	r2, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f834 	bl	80011c4 <HAL_CRCEx_Polynomial_Set>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e028      	b.n	80011b8 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	795b      	ldrb	r3, [r3, #5]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d105      	bne.n	800117a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	e004      	b.n	8001184 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6912      	ldr	r2, [r2, #16]
 8001182:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	04c11db7 	.word	0x04c11db7

080011c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011d0:	231f      	movs	r3, #31
 80011d2:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)) {}
 80011d4:	bf00      	nop
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <HAL_CRCEx_Polynomial_Set+0x2a>
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	617a      	str	r2, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f3      	bne.n	80011d6 <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b18      	cmp	r3, #24
 80011f2:	d844      	bhi.n	800127e <HAL_CRCEx_Polynomial_Set+0xba>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <HAL_CRCEx_Polynomial_Set+0x38>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800127f 	.word	0x0800127f
 8001200:	0800127f 	.word	0x0800127f
 8001204:	0800127f 	.word	0x0800127f
 8001208:	0800127f 	.word	0x0800127f
 800120c:	0800127f 	.word	0x0800127f
 8001210:	0800127f 	.word	0x0800127f
 8001214:	0800127f 	.word	0x0800127f
 8001218:	0800127f 	.word	0x0800127f
 800121c:	08001275 	.word	0x08001275
 8001220:	0800127f 	.word	0x0800127f
 8001224:	0800127f 	.word	0x0800127f
 8001228:	0800127f 	.word	0x0800127f
 800122c:	0800127f 	.word	0x0800127f
 8001230:	0800127f 	.word	0x0800127f
 8001234:	0800127f 	.word	0x0800127f
 8001238:	0800127f 	.word	0x0800127f
 800123c:	0800126b 	.word	0x0800126b
 8001240:	0800127f 	.word	0x0800127f
 8001244:	0800127f 	.word	0x0800127f
 8001248:	0800127f 	.word	0x0800127f
 800124c:	0800127f 	.word	0x0800127f
 8001250:	0800127f 	.word	0x0800127f
 8001254:	0800127f 	.word	0x0800127f
 8001258:	0800127f 	.word	0x0800127f
 800125c:	08001261 	.word	0x08001261
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b06      	cmp	r3, #6
 8001264:	d90d      	bls.n	8001282 <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e01f      	b.n	80012aa <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b07      	cmp	r3, #7
 800126e:	d90a      	bls.n	8001286 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e01a      	b.n	80012aa <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	d907      	bls.n	800128a <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e015      	b.n	80012aa <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                        
 800127e:	bf00      	nop
 8001280:	e004      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800128a:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f023 0118 	bic.w	r1, r3, #24
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d005      	beq.n	80012dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2204      	movs	r2, #4
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e029      	b.n	8001330 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 020e 	bic.w	r2, r2, #14
 80012ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f003 021c 	and.w	r2, r3, #28
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
    }
  }
  return status;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_FLASH_Unlock+0x38>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da0b      	bge.n	8001366 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_FLASH_Unlock+0x38>)
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_FLASH_Unlock+0x3c>)
 8001352:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_FLASH_Unlock+0x38>)
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_FLASH_Unlock+0x40>)
 8001358:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_FLASH_Unlock+0x38>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da01      	bge.n	8001366 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40022000 	.word	0x40022000
 8001378:	45670123 	.word	0x45670123
 800137c:	cdef89ab 	.word	0xcdef89ab

08001380 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_FLASH_OB_Unlock+0x2c>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d007      	beq.n	80013a0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_FLASH_OB_Unlock+0x2c>)
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_FLASH_OB_Unlock+0x30>)
 8001394:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_FLASH_OB_Unlock+0x2c>)
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_FLASH_OB_Unlock+0x34>)
 800139a:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40022000 	.word	0x40022000
 80013b0:	08192a3b 	.word	0x08192a3b
 80013b4:	4c5d6e7f 	.word	0x4c5d6e7f

080013b8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_FLASH_OB_Launch+0x20>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <HAL_FLASH_OB_Launch+0x20>)
 80013c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013c6:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80013c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013cc:	f000 f806 	bl	80013dc <FLASH_WaitForLastOperation>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff fd0e 	bl	8000e04 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80013ea:	e00d      	b.n	8001408 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f2:	d009      	beq.n	8001408 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80013f4:	f7ff fd06 	bl	8000e04 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d801      	bhi.n	8001408 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e03f      	b.n	8001488 <FLASH_WaitForLastOperation+0xac>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d0ea      	beq.n	80013ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800141e:	4013      	ands	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4313      	orrs	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01e      	beq.n	8001474 <FLASH_WaitForLastOperation+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <FLASH_WaitForLastOperation+0xb8>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4313      	orrs	r3, r2
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <FLASH_WaitForLastOperation+0xb8>)
 8001440:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <FLASH_WaitForLastOperation+0x80>
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001458:	4313      	orrs	r3, r2
 800145a:	618b      	str	r3, [r1, #24]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <FLASH_WaitForLastOperation+0x94>
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800146e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e009      	b.n	8001488 <FLASH_WaitForLastOperation+0xac>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d102      	bne.n	8001486 <FLASH_WaitForLastOperation+0xaa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <FLASH_WaitForLastOperation+0xb4>)
 8001482:	2201      	movs	r2, #1
 8001484:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40022000 	.word	0x40022000
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <HAL_FLASHEx_OBProgram+0xd8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_FLASHEx_OBProgram+0x18>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e05a      	b.n	8001566 <HAL_FLASHEx_OBProgram+0xce>
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_FLASHEx_OBProgram+0xd8>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
  
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_FLASHEx_OBProgram+0xd8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00d      	beq.n	80014e4 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6858      	ldr	r0, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f000 f89b 	bl	8001610 <FLASH_OB_WRPConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
    }
    
  }
  
  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f8ef 	bl	80016d8 <FLASH_OB_RDPConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f000 f90a 	bl	8001734 <FLASH_OB_UserConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d013      	beq.n	800155e <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	429a      	cmp	r2, r3
 8001540:	d00d      	beq.n	800155e <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69d8      	ldr	r0, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a19      	ldr	r1, [r3, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	461a      	mov	r2, r3
 8001550:	f000 f9e8 	bl	8001924 <FLASH_OB_PCROPConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_FLASHEx_OBProgram+0xd8>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]

  return status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2206      	movs	r2, #6
 8001580:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_FLASHEx_OBGetConfig+0x2e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d007      	beq.n	80015a2 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8001596:	2b02      	cmp	r3, #2
 8001598:	d003      	beq.n	80015a2 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d10f      	bne.n	80015c2 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f043 0201 	orr.w	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6858      	ldr	r0, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f103 0108 	add.w	r1, r3, #8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	330c      	adds	r3, #12
 80015bc:	461a      	mov	r2, r3
 80015be:	f000 fa5b 	bl	8001a78 <FLASH_OB_GetWRP>
  }
  
  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80015c2:	f000 faa3 	bl	8001b0c <FLASH_OB_GetRDP>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
  
  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80015cc:	f000 fab8 	bl	8001b40 <FLASH_OB_GetUser>
 80015d0:	4602      	mov	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d003      	beq.n	80015e6 <HAL_FLASHEx_OBGetConfig+0x72>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d110      	bne.n	8001608 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif    
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f043 0208 	orr.w	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f103 001c 	add.w	r0, r3, #28
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0120 	add.w	r1, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3324      	adds	r3, #36	; 0x24
 8001602:	461a      	mov	r2, r3
 8001604:	f000 fab0 	bl	8001b68 <FLASH_OB_GetPCROP>
  }
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1) 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f7ff fedc 	bl	80013dc <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d14c      	bne.n	80016c8 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10b      	bne.n	800164c <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END), 
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0419      	lsls	r1, r3, #16
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	430b      	orrs	r3, r1
 8001644:	4923      	ldr	r1, [pc, #140]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001646:	4313      	orrs	r3, r2
 8001648:	62cb      	str	r3, [r1, #44]	; 0x2c
 800164a:	e02b      	b.n	80016a4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10b      	bne.n	800166a <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END), 
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0419      	lsls	r1, r3, #16
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	430b      	orrs	r3, r1
 8001662:	491c      	ldr	r1, [pc, #112]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	630b      	str	r3, [r1, #48]	; 0x30
 8001668:	e01c      	b.n	80016a4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d10b      	bne.n	8001688 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END), 
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0419      	lsls	r1, r3, #16
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	430b      	orrs	r3, r1
 8001680:	4914      	ldr	r1, [pc, #80]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001686:	e00d      	b.n	80016a4 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d10a      	bne.n	80016a4 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END), 
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 8001690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001692:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0419      	lsls	r1, r3, #16
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016b4:	f7ff fe92 	bl	80013dc <FLASH_WaitForLastOperation>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <FLASH_OB_WRPConfig+0xc4>)
 80016c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80016c6:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016e4:	f7ff fe7a 	bl	80013dc <FLASH_WaitForLastOperation>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <FLASH_OB_RDPConfig+0x4e>
  { 
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4313      	orrs	r3, r2
 8001700:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800170e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001712:	f7ff fe63 	bl	80013dc <FLASH_WaitForLastOperation>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <FLASH_OB_RDPConfig+0x58>)
 8001720:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001724:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40022000 	.word	0x40022000

08001734 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25). 
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001746:	f24c 3050 	movw	r0, #50000	; 0xc350
 800174a:	f7ff fe47 	bl	80013dc <FLASH_WaitForLastOperation>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80de 	bne.w	8001916 <FLASH_OB_UserConfig+0x1e2>
  { 
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));
    
      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001776:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));
    
      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));
    
      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));
    
      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));
    
      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));
    
      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));
    
      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));
    
      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001848:	613b      	str	r3, [r7, #16]
    }

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));
    
      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001866:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));
    
      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001884:	613b      	str	r3, [r7, #16]
#endif
    }
#endif
    
    if((UserType & OB_USER_nBOOT1) != 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));
    
      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018a2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));
    
      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c0:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));
    
      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018de:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif
    
    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	490d      	ldr	r1, [pc, #52]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	620b      	str	r3, [r1, #32]
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001902:	f7ff fd6b 	bl	80013dc <FLASH_WaitForLastOperation>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <FLASH_OB_UserConfig+0x1ec>)
 8001910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001914:	6153      	str	r3, [r2, #20]
  }

  return status;            
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40022000 	.word	0x40022000

08001924 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank 
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001934:	f7ff fd52 	bl	80013dc <FLASH_WaitForLastOperation>
 8001938:	4603      	mov	r3, r0
 800193a:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 808a 	bne.w	8001a58 <FLASH_OB_PCROPConfig+0x134>
  {
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <FLASH_OB_PCROPConfig+0x140>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d114      	bne.n	800197a <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8001950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001954:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <FLASH_OB_PCROPConfig+0x144>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195e:	4293      	cmp	r3, r2
 8001960:	d008      	beq.n	8001974 <FLASH_OB_PCROPConfig+0x50>
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <FLASH_OB_PCROPConfig+0x144>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	085a      	lsrs	r2, r3, #1
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <FLASH_OB_PCROPConfig+0x148>)
 800196c:	4013      	ands	r3, r2
 800196e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001972:	e000      	b.n	8001976 <FLASH_OB_PCROPConfig+0x52>
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <FLASH_OB_PCROPConfig+0x14c>)
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e013      	b.n	80019a2 <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <FLASH_OB_PCROPConfig+0x144>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001982:	4293      	cmp	r3, r2
 8001984:	d008      	beq.n	8001998 <FLASH_OB_PCROPConfig+0x74>
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <FLASH_OB_PCROPConfig+0x144>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	085a      	lsrs	r2, r3, #1
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <FLASH_OB_PCROPConfig+0x148>)
 8001990:	4013      	ands	r3, r2
 8001992:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001996:	e000      	b.n	800199a <FLASH_OB_PCROPConfig+0x76>
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <FLASH_OB_PCROPConfig+0x14c>)
 800199a:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800199c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019a0:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d11a      	bne.n	80019e2 <FLASH_OB_PCROPConfig+0xbe>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	08db      	lsrs	r3, r3, #3
 80019b4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	492d      	ldr	r1, [pc, #180]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	624b      	str	r3, [r1, #36]	; 0x24
        
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	4926      	ldr	r1, [pc, #152]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	628b      	str	r3, [r1, #40]	; 0x28
 80019e0:	e01e      	b.n	8001a20 <FLASH_OB_PCROPConfig+0xfc>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d119      	bne.n	8001a20 <FLASH_OB_PCROPConfig+0xfc>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	491d      	ldr	r1, [pc, #116]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	644b      	str	r3, [r1, #68]	; 0x44
        
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }
    
    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	4911      	ldr	r1, [pc, #68]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	628b      	str	r3, [r1, #40]	; 0x28
    
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3e:	6153      	str	r3, [r2, #20]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a44:	f7ff fcca 	bl	80013dc <FLASH_WaitForLastOperation>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <FLASH_OB_PCROPConfig+0x150>)
 8001a52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001a56:	6153      	str	r3, [r2, #20]
  }
  
  return status;
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40010000 	.word	0x40010000
 8001a68:	1fff75e0 	.word	0x1fff75e0
 8001a6c:	001ffe00 	.word	0x001ffe00
 8001a70:	08080000 	.word	0x08080000
 8001a74:	40022000 	.word	0x40022000

08001a78 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8001aa0:	e02b      	b.n	8001afa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10b      	bne.n	8001ac0 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	e01c      	b.n	8001afa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d10b      	bne.n	8001ade <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	e00d      	b.n	8001afa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d10a      	bne.n	8001afa <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <FLASH_OB_GetWRP+0x90>)
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000

08001b0c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <FLASH_OB_GetRDP+0x30>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2baa      	cmp	r3, #170	; 0xaa
 8001b1e:	d004      	beq.n	8001b2a <FLASH_OB_GetRDP+0x1e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2bcc      	cmp	r3, #204	; 0xcc
 8001b24:	d001      	beq.n	8001b2a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8001b26:	23bb      	movs	r3, #187	; 0xbb
 8001b28:	e002      	b.n	8001b30 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <FLASH_OB_GetRDP+0x30>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	b2db      	uxtb	r3, r3
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40022000 	.word	0x40022000

08001b40 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),  
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27). 
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <FLASH_OB_GetUser+0x24>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b52:	607b      	str	r3, [r7, #4]
  
  return user_config;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000

08001b68 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <FLASH_OB_GetPCROP+0xf4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d114      	bne.n	8001baa <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8001b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b84:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <FLASH_OB_GetPCROP+0xf8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <FLASH_OB_GetPCROP+0x3c>
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <FLASH_OB_GetPCROP+0xf8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	085a      	lsrs	r2, r3, #1
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <FLASH_OB_GetPCROP+0xfc>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001ba2:	e000      	b.n	8001ba6 <FLASH_OB_GetPCROP+0x3e>
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <FLASH_OB_GetPCROP+0x100>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e013      	b.n	8001bd2 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <FLASH_OB_GetPCROP+0xf8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d008      	beq.n	8001bc8 <FLASH_OB_GetPCROP+0x60>
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <FLASH_OB_GetPCROP+0xf8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	029b      	lsls	r3, r3, #10
 8001bbc:	085a      	lsrs	r2, r3, #1
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <FLASH_OB_GetPCROP+0xfc>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001bc6:	e000      	b.n	8001bca <FLASH_OB_GetPCROP+0x62>
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <FLASH_OB_GetPCROP+0x100>)
 8001bca:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8001bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bd0:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d114      	bne.n	8001c08 <FLASH_OB_GetPCROP+0xa0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <FLASH_OB_GetPCROP+0x104>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	00da      	lsls	r2, r3, #3
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	441a      	add	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <FLASH_OB_GetPCROP+0x104>)
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	00da      	lsls	r2, r3, #3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e019      	b.n	8001c3c <FLASH_OB_GetPCROP+0xd4>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d113      	bne.n	8001c3c <FLASH_OB_GetPCROP+0xd4>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <FLASH_OB_GetPCROP+0x104>)
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	00da      	lsls	r2, r3, #3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	441a      	add	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	601a      	str	r2, [r3, #0]
      
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <FLASH_OB_GetPCROP+0x104>)
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	00da      	lsls	r2, r3, #3
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }
  
  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <FLASH_OB_GetPCROP+0x104>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	1fff75e0 	.word	0x1fff75e0
 8001c64:	001ffe00 	.word	0x001ffe00
 8001c68:	08080000 	.word	0x08080000
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c86:	e17f      	b.n	8001f88 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8171 	beq.w	8001f82 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x40>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	d123      	bne.n	8001cf8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	6939      	ldr	r1, [r7, #16]
 8001cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d00b      	beq.n	8001d4c <HAL_GPIO_Init+0xdc>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d40:	2b11      	cmp	r3, #17
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d130      	bne.n	8001dae <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 0201 	and.w	r2, r3, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d118      	bne.n	8001dec <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80ac 	beq.w	8001f82 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <HAL_GPIO_Init+0x334>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_GPIO_Init+0x334>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6613      	str	r3, [r2, #96]	; 0x60
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_GPIO_Init+0x334>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e42:	4a59      	ldr	r2, [pc, #356]	; (8001fa8 <HAL_GPIO_Init+0x338>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x24a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_GPIO_Init+0x33c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x246>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x340>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x344>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x23e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <HAL_GPIO_Init+0x348>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x23a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_GPIO_Init+0x34c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x236>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_GPIO_Init+0x350>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x232>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00c      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e00a      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x24c>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ecc:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_GPIO_Init+0x338>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efe:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_GPIO_Init+0x354>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f47f ae78 	bne.w	8001c88 <HAL_GPIO_Init+0x18>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	48000800 	.word	0x48000800
 8001fb4:	48000c00 	.word	0x48000c00
 8001fb8:	48001000 	.word	0x48001000
 8001fbc:	48001400 	.word	0x48001400
 8001fc0:	48001800 	.word	0x48001800
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8001fde:	e0cd      	b.n	800217c <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80c0 	beq.w	8002176 <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2103      	movs	r1, #3
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	08d2      	lsrs	r2, r2, #3
 800202a:	4019      	ands	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2103      	movs	r1, #3
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	2101      	movs	r1, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2103      	movs	r1, #3
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002078:	2101      	movs	r1, #1
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8002088:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_GPIO_DeInit+0x1d0>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_DeInit+0x136>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a39      	ldr	r2, [pc, #228]	; (800219c <HAL_GPIO_DeInit+0x1d4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_DeInit+0x132>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <HAL_GPIO_DeInit+0x1d8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_DeInit+0x12e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_GPIO_DeInit+0x1dc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_DeInit+0x12a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_GPIO_DeInit+0x1e0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_DeInit+0x126>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a35      	ldr	r2, [pc, #212]	; (80021ac <HAL_GPIO_DeInit+0x1e4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_DeInit+0x122>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <HAL_GPIO_DeInit+0x1e8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_DeInit+0x11e>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_DeInit+0x138>
 80020fe:	2300      	movs	r3, #0
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d132      	bne.n	8002176 <HAL_GPIO_DeInit+0x1ae>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_GPIO_DeInit+0x1d0>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43da      	mvns	r2, r3
 8002130:	4819      	ldr	r0, [pc, #100]	; (8002198 <HAL_GPIO_DeInit+0x1d0>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	400a      	ands	r2, r1
 8002138:	3302      	adds	r3, #2
 800213a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	491b      	ldr	r1, [pc, #108]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 8002148:	4013      	ands	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	4917      	ldr	r1, [pc, #92]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 8002156:	4013      	ands	r3, r2
 8002158:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	4914      	ldr	r1, [pc, #80]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 8002164:	4013      	ands	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	4910      	ldr	r1, [pc, #64]	; (80021b4 <HAL_GPIO_DeInit+0x1ec>)
 8002172:	4013      	ands	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af2b 	bne.w	8001fe0 <HAL_GPIO_DeInit+0x18>
  }
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	48000c00 	.word	0x48000c00
 80021a8:	48001000 	.word	0x48001000
 80021ac:	48001400 	.word	0x48001400
 80021b0:	48001800 	.word	0x48001800
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fc90 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_I2C_Init+0x1a>
  {
    hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e081      	b.n	8002336 <HAL_I2C_Init+0x11e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fc1c 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_I2C_Init+0x82>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e006      	b.n	80022a8 <HAL_I2C_Init+0x90>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d104      	bne.n	80022ba <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	ea42 0103 	orr.w	r1, r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	021a      	lsls	r2, r3, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69d9      	ldr	r1, [r3, #28]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	f040 80f7 	bne.w	8002556 <HAL_I2C_Mem_Write+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_I2C_Mem_Write+0x34>
 800236e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0eb      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_I2C_Mem_Write+0x4e>
 800238a:	2302      	movs	r3, #2
 800238c:	e0e4      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002396:	f7fe fd35 	bl	8000e04 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2319      	movs	r3, #25
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 ff37 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0cf      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e0:	88f8      	ldrh	r0, [r7, #6]
 80023e2:	893a      	ldrh	r2, [r7, #8]
 80023e4:	8979      	ldrh	r1, [r7, #10]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4603      	mov	r3, r0
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fb6f 	bl	8002ad4 <I2C_RequestMemoryWrite>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0a7      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f001 f819 	bl	8003460 <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f001 f808 	bl	8003460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 ff21 	bl	800329c <I2C_WaitOnTXISFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e079      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6251      	str	r1, [r2, #36]	; 0x24
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d034      	beq.n	8002504 <HAL_I2C_Mem_Write+0x1c4>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d130      	bne.n	8002504 <HAL_I2C_Mem_Write+0x1c4>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	2200      	movs	r2, #0
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 feb5 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Write+0x17c>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04d      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2bff      	cmp	r3, #255	; 0xff
 80024c4:	d90e      	bls.n	80024e4 <HAL_I2C_Mem_Write+0x1a4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 ffbf 	bl	8003460 <I2C_TransferConfig>
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Mem_Write+0x1c4>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 ffae 	bl	8003460 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1a0      	bne.n	8002450 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 ff02 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01a      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_I2C_Mem_Write+0x220>)
 8002536:	400b      	ands	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2C_Mem_Write+0x218>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80fb 	bne.w	8002782 <HAL_I2C_Mem_Read+0x21e>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_I2C_Mem_Read+0x34>
 8002592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0ef      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x4e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0e8      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ba:	f7fe fc23 	bl	8000e04 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fe25 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d3      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2222      	movs	r2, #34	; 0x22
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002604:	88f8      	ldrh	r0, [r7, #6]
 8002606:	893a      	ldrh	r2, [r7, #8]
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4603      	mov	r3, r0
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fab1 	bl	8002b7c <I2C_RequestMemoryRead>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0ab      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d90e      	bls.n	8002654 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	4b51      	ldr	r3, [pc, #324]	; (800278c <HAL_I2C_Mem_Read+0x228>)
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 ff07 	bl	8003460 <I2C_TransferConfig>
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <HAL_I2C_Mem_Read+0x228>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fef6 	bl	8003460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2200      	movs	r2, #0
 800267c:	2104      	movs	r1, #4
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fdcc 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07a      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c59      	adds	r1, r3, #1
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	6251      	str	r1, [r2, #36]	; 0x24
 800269e:	b2c2      	uxtb	r2, r0
 80026a0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d034      	beq.n	8002730 <HAL_I2C_Mem_Read+0x1cc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d130      	bne.n	8002730 <HAL_I2C_Mem_Read+0x1cc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fd9f 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x184>
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e04d      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Read+0x1ac>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fea9 	bl	8003460 <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Read+0x1cc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fe98 	bl	8003460 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d19c      	bne.n	8002674 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fdec 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Mem_Read+0x1ea>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e01a      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_I2C_Mem_Read+0x22c>)
 8002762:	400b      	ands	r3, r1
 8002764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_I2C_Mem_Read+0x220>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	80002400 	.word	0x80002400
 8002790:	fe00e800 	.word	0xfe00e800

08002794 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
  }
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00f      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x42>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00f      	beq.n	8002834 <HAL_I2C_ER_IRQHandler+0x6c>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f043 0208 	orr.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002832:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_I2C_ER_IRQHandler+0x96>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f043 0202 	orr.w	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285c:	61da      	str	r2, [r3, #28]
  }

  /* Call the Error Callback in case of Error detected */
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f003 030b 	and.w	r3, r3, #11
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fbbd 	bl	8002ff0 <I2C_ITError>
  }
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70fb      	strb	r3, [r7, #3]
 80028b2:	4613      	mov	r3, r2
 80028b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <I2C_Slave_ISR_IT+0x1a>
 8002914:	2302      	movs	r3, #2
 8002916:	e0d8      	b.n	8002aca <I2C_Slave_ISR_IT+0x1cc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	d045      	beq.n	80029b6 <I2C_Slave_ISR_IT+0xb8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d040      	beq.n	80029b6 <I2C_Slave_ISR_IT+0xb8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d12f      	bne.n	800299e <I2C_Slave_ISR_IT+0xa0>
    {
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002946:	d004      	beq.n	8002952 <I2C_Slave_ISR_IT+0x54>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002950:	d10a      	bne.n	8002968 <I2C_Slave_ISR_IT+0x6a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002958:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800295a:	2b28      	cmp	r3, #40	; 0x28
 800295c:	d104      	bne.n	8002968 <I2C_Slave_ISR_IT+0x6a>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 faf3 	bl	8002f4c <I2C_ITListenCplt>
 8002966:	e025      	b.n	80029b4 <I2C_Slave_ISR_IT+0xb6>
      }
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002970:	d010      	beq.n	8002994 <I2C_Slave_ISR_IT+0x96>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b29      	cmp	r3, #41	; 0x29
 800297c:	d10a      	bne.n	8002994 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fbf8 	bl	800317c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f9cb 	bl	8002d28 <I2C_ITSlaveSequentialCplt>
 8002992:	e00f      	b.n	80029b4 <I2C_Slave_ISR_IT+0xb6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800299c:	e082      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hi2c->XferCount == 0U)
 80029b2:	e077      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
 80029b4:	e076      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
    }
  }
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02e      	beq.n	8002a1e <I2C_Slave_ISR_IT+0x120>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d029      	beq.n	8002a1e <I2C_Slave_ISR_IT+0x120>
  {
    if (hi2c->XferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d016      	beq.n	8002a02 <I2C_Slave_ISR_IT+0x104>
    {
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6251      	str	r1, [r2, #36]	; 0x24
 80029e4:	b2c2      	uxtb	r2, r0
 80029e6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d14a      	bne.n	8002aa2 <I2C_Slave_ISR_IT+0x1a4>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8002a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a14:	d045      	beq.n	8002aa2 <I2C_Slave_ISR_IT+0x1a4>
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSequentialCplt(hi2c);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f986 	bl	8002d28 <I2C_ITSlaveSequentialCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a1c:	e041      	b.n	8002aa2 <I2C_Slave_ISR_IT+0x1a4>
    }
  }
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <I2C_Slave_ISR_IT+0x13e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <I2C_Slave_ISR_IT+0x13e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f8f5 	bl	8002c24 <I2C_ITAddrCplt>
 8002a3a:	e033      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
  }
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d02e      	beq.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d029      	beq.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <I2C_Slave_ISR_IT+0x18a>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6251      	str	r1, [r2, #36]	; 0x24
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a86:	e00d      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
    }
    else
    {
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a90:	d003      	beq.n	8002a9a <I2C_Slave_ISR_IT+0x19c>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSequentialCplt(hi2c);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f944 	bl	8002d28 <I2C_ITSlaveSequentialCplt>
 8002aa0:	e000      	b.n	8002aa4 <I2C_Slave_ISR_IT+0x1a6>
    if ((hi2c->XferCount == 0U) && \
 8002aa2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <I2C_Slave_ISR_IT+0x1c2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <I2C_Slave_ISR_IT+0x1c2>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f972 	bl	8002da4 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <I2C_RequestMemoryWrite+0xa4>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fcaf 	bl	8003460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fbc8 	bl	800329c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02c      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
 8002b26:	e015      	b.n	8002b54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b28:	893b      	ldrh	r3, [r7, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fbae 	bl	800329c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e012      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fb5c 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	80002000 	.word	0x80002000

08002b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <I2C_RequestMemoryRead+0xa4>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fc5c 	bl	8003460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fb75 	bl	800329c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e02c      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc2:	893b      	ldrh	r3, [r7, #8]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
 8002bcc:	e015      	b.n	8002bfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bce:	893b      	ldrh	r3, [r7, #8]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fb5b 	bl	800329c <I2C_WaitOnTXISFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e012      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb09 	bl	800321c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	80002000 	.word	0x80002000

08002c24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c3a:	2b28      	cmp	r3, #40	; 0x28
 8002c3c:	d168      	bne.n	8002d10 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d137      	bne.n	8002cf2 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	09db      	lsrs	r3, r3, #7
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	89bb      	ldrh	r3, [r7, #12]
 8002c8a:	4053      	eors	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	f003 0306 	and.w	r3, r3, #6
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11c      	bne.n	8002cd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d139      	bne.n	8002d20 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cc2:	89ba      	ldrh	r2, [r7, #12]
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fdec 	bl	80028a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cce:	e027      	b.n	8002d20 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8002cd0:	893b      	ldrh	r3, [r7, #8]
 8002cd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fbf0 	bl	80034bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ce4:	89ba      	ldrh	r2, [r7, #12]
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fddb 	bl	80028a6 <HAL_I2C_AddrCallback>
}
 8002cf0:	e016      	b.n	8002d20 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fbe1 	bl	80034bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d02:	89ba      	ldrh	r2, [r7, #12]
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fdcc 	bl	80028a6 <HAL_I2C_AddrCallback>
}
 8002d0e:	e007      	b.n	8002d20 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2208      	movs	r2, #8
 8002d16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_ITSlaveSequentialCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSequentialCplt(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b29      	cmp	r3, #41	; 0x29
 8002d42:	d112      	bne.n	8002d6a <I2C_ITSlaveSequentialCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2228      	movs	r2, #40	; 0x28
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2221      	movs	r2, #33	; 0x21
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d52:	2101      	movs	r1, #1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fbb1 	bl	80034bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fd8b 	bl	800287e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d68:	e017      	b.n	8002d9a <I2C_ITSlaveSequentialCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b2a      	cmp	r3, #42	; 0x2a
 8002d74:	d111      	bne.n	8002d9a <I2C_ITSlaveSequentialCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2228      	movs	r2, #40	; 0x28
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2222      	movs	r2, #34	; 0x22
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d84:	2102      	movs	r1, #2
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fb98 	bl	80034bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fd7c 	bl	8002892 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2220      	movs	r2, #32
 8002db4:	61da      	str	r2, [r3, #28]

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002dbe:	2107      	movs	r1, #7
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fb7b 	bl	80034bc <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <I2C_ITSlaveCplt+0x1a0>)
 8002de2:	400b      	ands	r3, r1
 8002de4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9c8 	bl	800317c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfa:	d007      	beq.n	8002e0c <I2C_ITSlaveCplt+0x68>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d11c      	bne.n	8002e46 <I2C_ITSlaveCplt+0xa2>
  {
    if ((hi2c->hdmarx != NULL) || (hi2c->hdmatx != NULL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <I2C_ITSlaveCplt+0x78>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d014      	beq.n	8002e46 <I2C_ITSlaveCplt+0xa2>
    {
      hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d105      	bne.n	8002e38 <I2C_ITSlaveCplt+0x94>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	e004      	b.n	8002e42 <I2C_ITSlaveCplt+0x9e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	8553      	strh	r3, [r2, #42]	; 0x2a
    }
  }

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <I2C_ITSlaveCplt+0xe2>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c59      	adds	r1, r3, #1
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6251      	str	r1, [r2, #36]	; 0x24
 8002e60:	b2c2      	uxtb	r2, r0
 8002e62:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <I2C_ITSlaveCplt+0xe2>
    {
      hi2c->XferSize--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <I2C_ITSlaveCplt+0xf8>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <I2C_ITSlaveCplt+0x136>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f896 	bl	8002ff0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b28      	cmp	r3, #40	; 0x28
 8002ece:	d135      	bne.n	8002f3c <I2C_ITSlaveCplt+0x198>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 8002ed0:	6839      	ldr	r1, [r7, #0]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f83a 	bl	8002f4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ed8:	e030      	b.n	8002f3c <I2C_ITSlaveCplt+0x198>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee2:	d00e      	beq.n	8002f02 <I2C_ITSlaveCplt+0x15e>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <I2C_ITSlaveCplt+0x1a4>)
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fce1 	bl	80028c2 <HAL_I2C_ListenCpltCallback>
}
 8002f00:	e01c      	b.n	8002f3c <I2C_ITSlaveCplt+0x198>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b22      	cmp	r3, #34	; 0x22
 8002f0c:	d10b      	bne.n	8002f26 <I2C_ITSlaveCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fcb7 	bl	8002892 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f24:	e00a      	b.n	8002f3c <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fca1 	bl	800287e <HAL_I2C_SlaveTxCpltCallback>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	fe00e800 	.word	0xfe00e800
 8002f48:	ffff0000 	.word	0xffff0000

08002f4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <I2C_ITListenCplt+0xa0>)
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d020      	beq.n	8002fc4 <I2C_ITListenCplt+0x78>
  {
    /* Read data from RXDR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6251      	str	r1, [r2, #36]	; 0x24
 8002f92:	b2c2      	uxtb	r2, r0
 8002f94:	701a      	strb	r2, [r3, #0]

    if ((hi2c->XferSize > 0U))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <I2C_ITListenCplt+0x78>
    {
      hi2c->XferSize--;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fc4:	2107      	movs	r1, #7
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa78 	bl	80034bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff fc70 	bl	80028c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	ffff0000 	.word	0xffff0000

08002ff0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a5a      	ldr	r2, [pc, #360]	; (8003170 <I2C_ITError+0x180>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b28      	cmp	r3, #40	; 0x28
 8003024:	d00b      	beq.n	800303e <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800302e:	2b29      	cmp	r3, #41	; 0x29
 8003030:	d005      	beq.n	800303e <I2C_ITError+0x4e>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800303a:	2b2a      	cmp	r3, #42	; 0x2a
 800303c:	d10e      	bne.n	800305c <I2C_ITError+0x6c>
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800303e:	2103      	movs	r1, #3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa3b 	bl	80034bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2228      	movs	r2, #40	; 0x28
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a47      	ldr	r2, [pc, #284]	; (8003174 <I2C_ITError+0x184>)
 8003058:	635a      	str	r2, [r3, #52]	; 0x34
 800305a:	e013      	b.n	8003084 <I2C_ITError+0x94>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800305c:	2107      	movs	r1, #7
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa2c 	bl	80034bc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d003      	beq.n	8003078 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003092:	d123      	bne.n	80030dc <I2C_ITError+0xec>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05c      	beq.n	8003166 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	4a31      	ldr	r2, [pc, #196]	; (8003178 <I2C_ITError+0x188>)
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe f8f9 	bl	80012b8 <HAL_DMA_Abort_IT>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d04c      	beq.n	8003166 <I2C_ITError+0x176>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d6:	4610      	mov	r0, r2
 80030d8:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030da:	e044      	b.n	8003166 <I2C_ITError+0x176>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ea:	d123      	bne.n	8003134 <I2C_ITError+0x144>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fa:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d030      	beq.n	8003166 <I2C_ITError+0x176>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <I2C_ITError+0x188>)
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe f8cd 	bl	80012b8 <HAL_DMA_Abort_IT>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <I2C_ITError+0x176>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800312e:	4610      	mov	r0, r2
 8003130:	4798      	blx	r3
}
 8003132:	e018      	b.n	8003166 <I2C_ITError+0x176>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b60      	cmp	r3, #96	; 0x60
 800313e:	d10b      	bne.n	8003158 <I2C_ITError+0x168>
    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fbca 	bl	80028ea <HAL_I2C_AbortCpltCallback>
}
 8003156:	e006      	b.n	8003166 <I2C_ITError+0x176>
    __HAL_UNLOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fbb8 	bl	80028d6 <HAL_I2C_ErrorCallback>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	ffff0000 	.word	0xffff0000
 8003174:	080028ff 	.word	0x080028ff
 8003178:	080031c5 	.word	0x080031c5

0800317c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d103      	bne.n	800319a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d007      	beq.n	80031b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	619a      	str	r2, [r3, #24]
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e0:	605a      	str	r2, [r3, #4]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2200      	movs	r2, #0
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2200      	movs	r2, #0
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b60      	cmp	r3, #96	; 0x60
 80031fc:	d107      	bne.n	800320e <I2C_DMAAbort+0x4a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fb6f 	bl	80028ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800320c:	e002      	b.n	8003214 <I2C_DMAAbort+0x50>
    HAL_I2C_ErrorCallback(hi2c);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff fb61 	bl	80028d6 <HAL_I2C_ErrorCallback>
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	e022      	b.n	8003274 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d01e      	beq.n	8003274 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fd fde5 	bl	8000e04 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d113      	bne.n	8003274 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e00f      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d0cd      	beq.n	800322e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a8:	e02c      	b.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f870 	bl	8003394 <I2C_IsAcknowledgeFailed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e02a      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d01e      	beq.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fd fd9d 	bl	8000e04 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d1cb      	bne.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e028      	b.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f830 	bl	8003394 <I2C_IsAcknowledgeFailed>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e026      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fd fd61 	bl	8000e04 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d113      	bne.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	d1cf      	bne.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d151      	bne.n	8003452 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ae:	e022      	b.n	80033f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d01e      	beq.n	80033f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b8:	f7fd fd24 	bl	8000e04 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <I2C_IsAcknowledgeFailed+0x3a>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e02e      	b.n	8003454 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d1d5      	bne.n	80033b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2210      	movs	r2, #16
 800340a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2220      	movs	r2, #32
 8003412:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff feb1 	bl	800317c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <I2C_IsAcknowledgeFailed+0xc8>)
 8003426:	400b      	ands	r3, r1
 8003428:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	817b      	strh	r3, [r7, #10]
 800346e:	4613      	mov	r3, r2
 8003470:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	0d5b      	lsrs	r3, r3, #21
 800347c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <I2C_TransferConfig+0x58>)
 8003482:	430b      	orrs	r3, r1
 8003484:	43db      	mvns	r3, r3
 8003486:	ea02 0103 	and.w	r1, r2, r3
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003490:	7a7b      	ldrb	r3, [r7, #9]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	431a      	orrs	r2, r3
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	03ff63ff 	.word	0x03ff63ff

080034bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80034dc:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034ea:	2b28      	cmp	r3, #40	; 0x28
 80034ec:	d003      	beq.n	80034f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003506:	60fb      	str	r3, [r7, #12]

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003514:	2b28      	cmp	r3, #40	; 0x28
 8003516:	d003      	beq.n	8003520 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800351e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	f003 0311 	and.w	r3, r3, #17
 8003538:	2b11      	cmp	r3, #17
 800353a:	d103      	bne.n	8003544 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003542:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	f003 0312 	and.w	r3, r3, #18
 800354a:	2b12      	cmp	r3, #18
 800354c:	d103      	bne.n	8003556 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f043 0320 	orr.w	r3, r3, #32
 8003554:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	f003 0312 	and.w	r3, r3, #18
 800355c:	2b12      	cmp	r3, #18
 800355e:	d103      	bne.n	8003568 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	d138      	bne.n	800360e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e032      	b.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d139      	bne.n	80036a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800363c:	2302      	movs	r3, #2
 800363e:	e033      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800366e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim: LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_LPTIM_Init+0x16>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e076      	b.n	80037b8 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_LPTIM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd f8c2 	bl	8000868 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d103      	bne.n	8003704 <HAL_LPTIM_Init+0x50>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 031e 	bic.w	r3, r3, #30
 8003702:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370c:	4293      	cmp	r3, r2
 800370e:	d005      	beq.n	800371c <HAL_LPTIM_Init+0x68>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003716:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_LPTIM_Init+0x10c>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800372c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003732:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003738:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800373e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source) ==  LPTIM_CLOCKSOURCE_ULPTIM)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8003756:	4313      	orrs	r3, r2
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003766:	4293      	cmp	r3, r2
 8003768:	d00a      	beq.n	8003780 <HAL_LPTIM_Init+0xcc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003772:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003778:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <HAL_LPTIM_Init+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <HAL_LPTIM_Init+0xf0>
    /* Check LPTIM1 Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));

    /* Configure LPTIM1 Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	621a      	str	r2, [r3, #32]
 80037a2:	e004      	b.n	80037ae <HAL_LPTIM_Init+0xfa>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037ac:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	ff19f1fe 	.word	0xff19f1fe
 80037c4:	40007c00 	.word	0x40007c00

080037c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000

080037e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_PWREx_GetVoltageRange+0x18>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003816:	d12f      	bne.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d037      	beq.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003826:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003834:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	2232      	movs	r2, #50	; 0x32
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800384a:	e002      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3b01      	subs	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d006      	beq.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x62>
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d0f2      	beq.n	800384c <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d110      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e00f      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d007      	beq.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003890:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003894:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}  
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40007000 	.word	0x40007000
 80038a8:	20000004 	.word	0x20000004
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e356      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80d0 	beq.w	8003a70 <HAL_RCC_OscConfig+0x1c0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80038d0:	4ba1      	ldr	r3, [pc, #644]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d179      	bne.n	80039d0 <HAL_RCC_OscConfig+0x120>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038dc:	4b9e      	ldr	r3, [pc, #632]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_OscConfig+0x44>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x44>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e33d      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	4b97      	ldr	r3, [pc, #604]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_RCC_OscConfig+0x5e>
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	e005      	b.n	800391a <HAL_RCC_OscConfig+0x6a>
 800390e:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391a:	4293      	cmp	r3, r2
 800391c:	d223      	bcs.n	8003966 <HAL_RCC_OscConfig+0xb6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fce8 	bl	80042f8 <RCC_SetFlashLatencyFromMSIRange>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e31e      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003932:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a88      	ldr	r2, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b86      	ldr	r3, [pc, #536]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4983      	ldr	r1, [pc, #524]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	497e      	ldr	r1, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
 8003964:	e022      	b.n	80039ac <HAL_RCC_OscConfig+0xfc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7b      	ldr	r2, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b79      	ldr	r3, [pc, #484]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4976      	ldr	r1, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003984:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	4971      	ldr	r1, [pc, #452]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fcab 	bl	80042f8 <RCC_SetFlashLatencyFromMSIRange>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e2e1      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ac:	f000 fbc0 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80039b0:	4601      	mov	r1, r0
 80039b2:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	4a67      	ldr	r2, [pc, #412]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	fa21 f303 	lsr.w	r3, r1, r3
 80039c4:	4a66      	ldr	r2, [pc, #408]	; (8003b60 <HAL_RCC_OscConfig+0x2b0>)
 80039c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7fd f9f1 	bl	8000db0 <HAL_InitTick>
 80039ce:	e04f      	b.n	8003a70 <HAL_RCC_OscConfig+0x1c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d032      	beq.n	8003a3e <HAL_RCC_OscConfig+0x18e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039d8:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039e4:	f7fd fa0e 	bl	8000e04 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ec:	f7fd fa0a 	bl	8000e04 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e2b8      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80039fe:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x13c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0a:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a10:	f043 0308 	orr.w	r3, r3, #8
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	494d      	ldr	r1, [pc, #308]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	4948      	ldr	r1, [pc, #288]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e018      	b.n	8003a70 <HAL_RCC_OscConfig+0x1c0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a3e:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a45      	ldr	r2, [pc, #276]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f9db 	bl	8000e04 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a52:	f7fd f9d7 	bl	8000e04 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e285      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003a64:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x1a2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d07b      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00b      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x1f0>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a88:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x208>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x208>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d062      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2c2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d15e      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2c2>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e25b      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x220>
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e01d      	b.n	8003b0c <HAL_RCC_OscConfig+0x25c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x244>
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0x25c>
 8003af4:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_RCC_OscConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd f976 	bl	8000e04 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fd f972 	bl	8000e04 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e220      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_RCC_OscConfig+0x2a8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x26c>
 8003b3a:	e01b      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd f962 	bl	8000e04 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd f95e 	bl	8000e04 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d908      	bls.n	8003b64 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e20c      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08009170 	.word	0x08009170
 8003b60:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003b64:	4ba9      	ldr	r3, [pc, #676]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e9      	bne.n	8003b44 <HAL_RCC_OscConfig+0x294>
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d069      	beq.n	8003c54 <HAL_RCC_OscConfig+0x3a4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003b80:	4ba2      	ldr	r3, [pc, #648]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b8c:	4b9f      	ldr	r3, [pc, #636]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d11c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x322>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b98:	4b9c      	ldr	r3, [pc, #624]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d116      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x322>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_OscConfig+0x30c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x30c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e1d9      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b93      	ldr	r3, [pc, #588]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	4990      	ldr	r1, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd0:	e040      	b.n	8003c54 <HAL_RCC_OscConfig+0x3a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d023      	beq.n	8003c22 <HAL_RCC_OscConfig+0x372>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bda:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a8b      	ldr	r2, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd f90d 	bl	8000e04 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fd f909 	bl	8000e04 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1b7      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003c00:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	497c      	ldr	r1, [pc, #496]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	e018      	b.n	8003c54 <HAL_RCC_OscConfig+0x3a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b7a      	ldr	r3, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a79      	ldr	r2, [pc, #484]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd f8e9 	bl	8000e04 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fd f8e5 	bl	8000e04 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e193      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8003c48:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03c      	beq.n	8003cda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x3f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6e:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f8c4 	bl	8000e04 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd f8c0 	bl	8000e04 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e16e      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <HAL_RCC_OscConfig+0x3d0>
 8003ca0:	e01b      	b.n	8003cda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca2:	4b5a      	ldr	r3, [pc, #360]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca8:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd f8a7 	bl	8000e04 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd f8a3 	bl	8000e04 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e151      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ef      	bne.n	8003cba <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a6 	beq.w	8003e34 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cec:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCC_OscConfig+0x464>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b44      	ldr	r3, [pc, #272]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	4a43      	ldr	r2, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	; 0x58
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x560>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCC_OscConfig+0x4a2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RCC_OscConfig+0x560>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3a      	ldr	r2, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x560>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f86a 	bl	8000e04 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fd f866 	bl	8000e04 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e114      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x560>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x484>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4bc>
 8003d5a:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6a:	e024      	b.n	8003db6 <HAL_RCC_OscConfig+0x506>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d110      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4e6>
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a24      	ldr	r2, [pc, #144]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d94:	e00f      	b.n	8003db6 <HAL_RCC_OscConfig+0x506>
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da6:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCC_OscConfig+0x53c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fd f821 	bl	8000e04 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x52c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd f81d 	bl	8000e04 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0c9      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x55c>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ed      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x516>
 8003dea:	e01a      	b.n	8003e22 <HAL_RCC_OscConfig+0x572>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd f80a 	bl	8000e04 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003df2:	e00f      	b.n	8003e14 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fd f806 	bl	8000e04 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d906      	bls.n	8003e14 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0b2      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003e14:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e8      	bne.n	8003df4 <HAL_RCC_OscConfig+0x544>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8098 	beq.w	8003f6e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	f000 808f 	beq.w	8003f6a <HAL_RCC_OscConfig+0x6ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d156      	bne.n	8003f02 <HAL_RCC_OscConfig+0x652>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fc ffd0 	bl	8000e04 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x5ca>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fc ffcc 	bl	8000e04 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x5ca>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e07a      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5b8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011a      	lsls	r2, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	045b      	lsls	r3, r3, #17
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	055b      	lsls	r3, r3, #21
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	065b      	lsls	r3, r3, #25
 8003ebc:	492e      	ldr	r1, [pc, #184]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fc ff93 	bl	8000e04 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x644>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fc ff8f 	bl	8000e04 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x644>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e03d      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x632>
 8003f00:	e035      	b.n	8003f6e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003f0e:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCC_OscConfig+0x682>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003f1a:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           &&
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x682>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f2c:	f023 0303 	bic.w	r3, r3, #3
 8003f30:	60d3      	str	r3, [r2, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fc ff5f 	bl	8000e04 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x6ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fc ff5b 	bl	8000e04 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e009      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_OscConfig+0x6c8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x69a>
 8003f68:	e001      	b.n	8003f6e <HAL_RCC_OscConfig+0x6be>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x6c0>
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0;
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0c2      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d910      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b60      	ldr	r3, [pc, #384]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 0207 	bic.w	r2, r3, #7
 8003fa6:	495e      	ldr	r1, [pc, #376]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0aa      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d04c      	beq.n	8004066 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d121      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e098      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003fec:	4b4d      	ldr	r3, [pc, #308]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e08c      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004004:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e080      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004014:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e078      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004024:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 0203 	bic.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	493c      	ldr	r1, [pc, #240]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc fee5 	bl	8000e04 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	e00a      	b.n	8004054 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403e:	f7fc fee1 	bl	8000e04 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e060      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 020c 	and.w	r2, r3, #12
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	429a      	cmp	r2, r3
 8004064:	d1eb      	bne.n	800403e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004072:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4929      	ldr	r1, [pc, #164]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d210      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 0207 	bic.w	r2, r3, #7
 800409a:	4921      	ldr	r1, [pc, #132]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCC_ClockConfig+0x1a4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e030      	b.n	8004116 <HAL_RCC_ClockConfig+0x19a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4915      	ldr	r1, [pc, #84]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	490d      	ldr	r1, [pc, #52]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f2:	f000 f81d 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040f6:	4601      	mov	r1, r0
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_ClockConfig+0x1a8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a09      	ldr	r2, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1ac>)
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	fa21 f303 	lsr.w	r3, r1, r3
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_RCC_ClockConfig+0x1b0>)
 800410c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800410e:	2000      	movs	r0, #0
 8004110:	f7fc fe4e 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40022000 	.word	0x40022000
 8004124:	40021000 	.word	0x40021000
 8004128:	08009170 	.word	0x08009170
 800412c:	20000004 	.word	0x20000004

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	2302      	movs	r3, #2
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	2302      	movs	r3, #2
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800414e:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800415a:	4b49      	ldr	r3, [pc, #292]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d127      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d121      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800417e:	4b40      	ldr	r3, [pc, #256]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e005      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800418e:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800419a:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <HAL_RCC_GetSysClockFreq+0x154>)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d113      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80041b4:	e010      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041b6:	4b32      	ldr	r3, [pc, #200]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d102      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_GetSysClockFreq+0x158>)
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e007      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d4:	4b2d      	ldr	r3, [pc, #180]	; (800428c <HAL_RCC_GetSysClockFreq+0x15c>)
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d145      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	3301      	adds	r3, #1
 80041fa:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d002      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0xd8>
 8004202:	2b03      	cmp	r3, #3
 8004204:	d00d      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0xf2>
 8004206:	e019      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_RCC_GetSysClockFreq+0x158>)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004212:	68d2      	ldr	r2, [r2, #12]
 8004214:	0a12      	lsrs	r2, r2, #8
 8004216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	613b      	str	r3, [r7, #16]
      break;
 8004220:	e019      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	0a12      	lsrs	r2, r2, #8
 8004230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	613b      	str	r3, [r7, #16]
      break;
 800423a:	e00c      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004246:	68d2      	ldr	r2, [r2, #12]
 8004248:	0a12      	lsrs	r2, r2, #8
 800424a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	613b      	str	r3, [r7, #16]
      break;
 8004254:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCC_GetSysClockFreq+0x150>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0e5b      	lsrs	r3, r3, #25
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	3301      	adds	r3, #1
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	08009188 	.word	0x08009188
 8004288:	00f42400 	.word	0x00f42400
 800428c:	007a1200 	.word	0x007a1200

08004290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042b0:	4601      	mov	r1, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4a03      	ldr	r2, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08009180 	.word	0x08009180

080042d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d4:	f7ff ffdc 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042d8:	4601      	mov	r1, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0adb      	lsrs	r3, r3, #11
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e6:	5cd3      	ldrb	r3, [r2, r3]
 80042e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	08009180 	.word	0x08009180

080042f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004314:	f7ff fa68 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 8004318:	6178      	str	r0, [r7, #20]
 800431a:	e014      	b.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	6593      	str	r3, [r2, #88]	; 0x58
 8004328:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004334:	f7ff fa58 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 8004338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d10b      	bne.n	8004366 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d919      	bls.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2ba0      	cmp	r3, #160	; 0xa0
 8004358:	d902      	bls.n	8004360 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800435a:	2302      	movs	r3, #2
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e013      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004360:	2301      	movs	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	e010      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d902      	bls.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800436c:	2303      	movs	r3, #3
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e00a      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d102      	bne.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004378:	2302      	movs	r3, #2
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e004      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b70      	cmp	r3, #112	; 0x70
 8004382:	d101      	bne.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 0207 	bic.w	r2, r3, #7
 8004390:	4909      	ldr	r1, [pc, #36]	; (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40022000 	.word	0x40022000

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043cc:	2300      	movs	r3, #0
 80043ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043d0:	2300      	movs	r3, #0
 80043d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e8:	d01c      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ee:	d802      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043f4:	e01f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80043fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004400:	d01c      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x80>
 8004402:	e018      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004404:	4b82      	ldr	r3, [pc, #520]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800440a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004410:	e015      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fab3 	bl	8004984 <RCCEx_PLLSAI1_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3320      	adds	r3, #32
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb9c 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	74fb      	strb	r3, [r7, #19]
      break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 800443c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004444:	4b72      	ldr	r3, [pc, #456]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	496f      	ldr	r1, [pc, #444]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800445a:	e001      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d03f      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004474:	d01c      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004476:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800447a:	d802      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00e      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004480:	e01f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004488:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448c:	d01c      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800448e:	e018      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004490:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a5e      	ldr	r2, [pc, #376]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800449c:	e015      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3304      	adds	r3, #4
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fa6d 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044ae:	e00c      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3320      	adds	r3, #32
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fb56 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044c0:	e003      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	74fb      	strb	r3, [r7, #19]
      break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044d0:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044de:	494c      	ldr	r1, [pc, #304]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044e6:	e001      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 809a 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b44      	ldr	r3, [pc, #272]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	; 0x58
 8004516:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004532:	f7fc fc67 	bl	8000e04 <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8004538:	e009      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc fc63 	bl	8000e04 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d902      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	74fb      	strb	r3, [r7, #19]
        break;
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ef      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d15b      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01f      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	429a      	cmp	r2, r3
 800457c:	d019      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fc fc22 	bl	8000e04 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80045c2:	e00b      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fc fc1e 	bl	8000e04 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d902      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	74fb      	strb	r3, [r7, #19]
            break;
 80045da:	e006      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0ec      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10c      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004608:	e008      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	74bb      	strb	r3, [r7, #18]
 800460e:	e005      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461c:	7c7b      	ldrb	r3, [r7, #17]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b9e      	ldr	r3, [pc, #632]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	4a9d      	ldr	r2, [pc, #628]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4b98      	ldr	r3, [pc, #608]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4994      	ldr	r1, [pc, #592]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465c:	4b8f      	ldr	r3, [pc, #572]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 020c 	bic.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	498c      	ldr	r1, [pc, #560]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467e:	4b87      	ldr	r3, [pc, #540]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4983      	ldr	r1, [pc, #524]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a0:	4b7e      	ldr	r3, [pc, #504]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	497b      	ldr	r1, [pc, #492]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	4972      	ldr	r1, [pc, #456]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e4:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	496a      	ldr	r1, [pc, #424]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	4961      	ldr	r1, [pc, #388]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004728:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	4959      	ldr	r1, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800474a:	4b54      	ldr	r3, [pc, #336]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	4950      	ldr	r1, [pc, #320]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800476c:	4b4b      	ldr	r3, [pc, #300]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	4948      	ldr	r1, [pc, #288]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800478e:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	493f      	ldr	r1, [pc, #252]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d028      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047be:	4937      	ldr	r1, [pc, #220]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d106      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047da:	60d3      	str	r3, [r2, #12]
 80047dc:	e011      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e6:	d10c      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f8c8 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	491f      	ldr	r1, [pc, #124]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482c:	d106      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004838:	60d3      	str	r3, [r2, #12]
 800483a:	e011      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f899 	bl	8004984 <RCCEx_PLLSAI1_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004856:	7cfb      	ldrb	r3, [r7, #19]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487a:	4908      	ldr	r1, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a02      	ldr	r2, [pc, #8]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
 8004898:	e014      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f867 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048de:	4928      	ldr	r1, [pc, #160]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ee:	d10d      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f844 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	74bb      	strb	r3, [r7, #18]
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3320      	adds	r3, #32
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f923 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494a:	490d      	ldr	r1, [pc, #52]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496e:	4904      	ldr	r1, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004976:	7cbb      	ldrb	r3, [r7, #18]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000

08004984 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004996:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049a2:	4b70      	ldr	r3, [pc, #448]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0203 	and.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d10d      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
       ||
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
       ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d044      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	e041      	b.n	8004a58 <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d00c      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0x72>
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d013      	beq.n	8004a08 <RCCEx_PLLSAI1_Config+0x84>
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d120      	bne.n	8004a26 <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e4:	4b5f      	ldr	r3, [pc, #380]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11d      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e01a      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049f6:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a06:	e013      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a08:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0xb0>
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a24:	e006      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      break;
 8004a2a:	e004      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004a34:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a3c:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	430b      	orrs	r3, r1
 8004a52:	4944      	ldr	r1, [pc, #272]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d17d      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a40      	ldr	r2, [pc, #256]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fc f9cb 	bl	8000e04 <HAL_GetTick>
 8004a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004a70:	e009      	b.n	8004a86 <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a72:	f7fc f9c7 	bl	8000e04 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d902      	bls.n	8004a86 <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	73fb      	strb	r3, [r7, #15]
        break;
 8004a84:	e005      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1ef      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d160      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d111      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a9e:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	0211      	lsls	r1, r2, #8
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68d2      	ldr	r2, [r2, #12]
 8004ab4:	0912      	lsrs	r2, r2, #4
 8004ab6:	0452      	lsls	r2, r2, #17
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	492a      	ldr	r1, [pc, #168]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	610b      	str	r3, [r1, #16]
 8004ac0:	e027      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d112      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ad0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6892      	ldr	r2, [r2, #8]
 8004ad8:	0211      	lsls	r1, r2, #8
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6912      	ldr	r2, [r2, #16]
 8004ade:	0852      	lsrs	r2, r2, #1
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0552      	lsls	r2, r2, #21
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	491f      	ldr	r1, [pc, #124]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	610b      	str	r3, [r1, #16]
 8004aec:	e011      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004af6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	0211      	lsls	r1, r2, #8
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6952      	ldr	r2, [r2, #20]
 8004b04:	0852      	lsrs	r2, r2, #1
 8004b06:	3a01      	subs	r2, #1
 8004b08:	0652      	lsls	r2, r2, #25
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	4915      	ldr	r1, [pc, #84]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fc f971 	bl	8000e04 <HAL_GetTick>
 8004b22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004b24:	e009      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b26:	f7fc f96d 	bl	8000e04 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	73fb      	strb	r3, [r7, #15]
          break;
 8004b38:	e005      	b.n	8004b46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ef      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000

08004b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b7a:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b86:	4b65      	ldr	r3, [pc, #404]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0203 	and.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10d      	bne.n	8004bb2 <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
       ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b9e:	4b5f      	ldr	r3, [pc, #380]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
       ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d044      	beq.n	8004c3c <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e041      	b.n	8004c3c <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d00c      	beq.n	8004bda <RCCEx_PLLSAI2_Config+0x72>
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d013      	beq.n	8004bec <RCCEx_PLLSAI2_Config+0x84>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d120      	bne.n	8004c0a <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bc8:	4b54      	ldr	r3, [pc, #336]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11d      	bne.n	8004c10 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd8:	e01a      	b.n	8004c10 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bea:	e013      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0xb0>
 8004bf8:	4b48      	ldr	r3, [pc, #288]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c08:	e006      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0e:	e004      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8004c10:	bf00      	nop
 8004c12:	e002      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8004c14:	bf00      	nop
 8004c16:	e000      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8004c18:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c20:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	430b      	orrs	r3, r1
 8004c36:	4939      	ldr	r1, [pc, #228]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d167      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c42:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a35      	ldr	r2, [pc, #212]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4e:	f7fc f8d9 	bl	8000e04 <HAL_GetTick>
 8004c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8004c54:	e009      	b.n	8004c6a <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c56:	f7fc f8d5 	bl	8000e04 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d902      	bls.n	8004c6a <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	73fb      	strb	r3, [r7, #15]
        break;
 8004c68:	e005      	b.n	8004c76 <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1ef      	bne.n	8004c56 <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d14a      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d111      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6892      	ldr	r2, [r2, #8]
 8004c92:	0211      	lsls	r1, r2, #8
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68d2      	ldr	r2, [r2, #12]
 8004c98:	0912      	lsrs	r2, r2, #4
 8004c9a:	0452      	lsls	r2, r2, #17
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	491f      	ldr	r1, [pc, #124]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	614b      	str	r3, [r1, #20]
 8004ca4:	e011      	b.n	8004cca <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ca6:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	0211      	lsls	r1, r2, #8
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6912      	ldr	r2, [r2, #16]
 8004cbc:	0852      	lsrs	r2, r2, #1
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	0652      	lsls	r2, r2, #25
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	4915      	ldr	r1, [pc, #84]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd6:	f7fc f895 	bl	8000e04 <HAL_GetTick>
 8004cda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8004cdc:	e009      	b.n	8004cf2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cde:	f7fc f891 	bl	8000e04 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d902      	bls.n	8004cf2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	73fb      	strb	r3, [r7, #15]
          break;
 8004cf0:	e005      	b.n	8004cfe <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ef      	beq.n	8004cde <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	4903      	ldr	r1, [pc, #12]	; (8004d1c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000

08004d20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d06f      	beq.n	8004e12 <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb fe5a 	bl	8000a00 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ca      	movs	r2, #202	; 0xca
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2253      	movs	r2, #83	; 0x53
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f87f 	bl	8004e68 <RTC_EnterInitMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d14e      	bne.n	8004e12 <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6899      	ldr	r1, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	041a      	lsls	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f883 	bl	8004ed0 <RTC_ExitInitMode>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11e      	bne.n	8004e12 <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0203 	bic.w	r2, r2, #3
 8004de2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	22ff      	movs	r2, #255	; 0xff
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e32:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e34:	f7fb ffe6 	bl	8000e04 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e3a:	e009      	b.n	8004e50 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e3c:	f7fb ffe2 	bl	8000e04 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4a:	d901      	bls.n	8004e50 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e007      	b.n	8004e60 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ee      	beq.n	8004e3c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d120      	bne.n	8004ec4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e8c:	f7fb ffba 	bl	8000e04 <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e92:	e00d      	b.n	8004eb0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e94:	f7fb ffb6 	bl	8000e04 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea2:	d905      	bls.n	8004eb0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <RTC_EnterInitMode+0x5c>
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d1e7      	bne.n	8004e94 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ee8:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10c      	bne.n	8004f0e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff91 	bl	8004e1c <HAL_RTC_WaitForSynchro>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01e      	beq.n	8004f3e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2203      	movs	r2, #3
 8004f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e017      	b.n	8004f3e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004f14:	f023 0320 	bic.w	r3, r3, #32
 8004f18:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff7e 	bl	8004e1c <HAL_RTC_WaitForSynchro>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <RTC_ExitInitMode+0x78>)
 8004f38:	f043 0320 	orr.w	r3, r3, #32
 8004f3c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40002800 	.word	0x40002800

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e01d      	b.n	8004f9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fc38 	bl	80007e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fa56 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <HAL_TIM_Base_Start+0x54>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d00f      	beq.n	8004fe2 <HAL_TIM_Base_Start+0x3e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_TIM_Base_Start+0x54>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d007      	beq.n	8004fe2 <HAL_TIM_Base_Start+0x3e>
  {
    __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	00010007 	.word	0x00010007

08004ffc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e01d      	b.n	800504a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f815 	bl	8005052 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 f9fe 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d841      	bhi.n	80050fc <HAL_TIM_OC_Start_IT+0x94>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <HAL_TIM_OC_Start_IT+0x18>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050fd 	.word	0x080050fd
 8005088:	080050fd 	.word	0x080050fd
 800508c:	080050fd 	.word	0x080050fd
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050fd 	.word	0x080050fd
 8005098:	080050fd 	.word	0x080050fd
 800509c:	080050fd 	.word	0x080050fd
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	080050fd 	.word	0x080050fd
 80050ac:	080050fd 	.word	0x080050fd
 80050b0:	080050eb 	.word	0x080050eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0202 	orr.w	r2, r2, #2
 80050c2:	60da      	str	r2, [r3, #12]
      break;
 80050c4:	e01b      	b.n	80050fe <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0204 	orr.w	r2, r2, #4
 80050d4:	60da      	str	r2, [r3, #12]
      break;
 80050d6:	e012      	b.n	80050fe <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	60da      	str	r2, [r3, #12]
      break;
 80050e8:	e009      	b.n	80050fe <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0210 	orr.w	r2, r2, #16
 80050f8:	60da      	str	r2, [r3, #12]
      break;
 80050fa:	e000      	b.n	80050fe <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80050fc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fda2 	bl	8005c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1f      	ldr	r2, [pc, #124]	; (8005190 <HAL_TIM_OC_Start_IT+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_TIM_OC_Start_IT+0xd6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1e      	ldr	r2, [pc, #120]	; (8005194 <HAL_TIM_OC_Start_IT+0x12c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIM_OC_Start_IT+0xd6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <HAL_TIM_OC_Start_IT+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <HAL_TIM_OC_Start_IT+0xd6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1b      	ldr	r2, [pc, #108]	; (800519c <HAL_TIM_OC_Start_IT+0x134>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIM_OC_Start_IT+0xd6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_TIM_OC_Start_IT+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <HAL_TIM_OC_Start_IT+0xda>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <HAL_TIM_OC_Start_IT+0xdc>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_TIM_OC_Start_IT+0x13c>)
 8005160:	4013      	ands	r3, r2
 8005162:	2b06      	cmp	r3, #6
 8005164:	d00f      	beq.n	8005186 <HAL_TIM_OC_Start_IT+0x11e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <HAL_TIM_OC_Start_IT+0x13c>)
 800516e:	4013      	ands	r3, r2
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d007      	beq.n	8005186 <HAL_TIM_OC_Start_IT+0x11e>
  {
    __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800
 80051a4:	00010007 	.word	0x00010007

080051a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80051be:	2302      	movs	r3, #2
 80051c0:	e06c      	b.n	800529c <HAL_TIM_OC_ConfigChannel+0xf4>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b14      	cmp	r3, #20
 80051d6:	d857      	bhi.n	8005288 <HAL_TIM_OC_ConfigChannel+0xe0>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005289 	.word	0x08005289
 80051e8:	08005289 	.word	0x08005289
 80051ec:	08005289 	.word	0x08005289
 80051f0:	08005243 	.word	0x08005243
 80051f4:	08005289 	.word	0x08005289
 80051f8:	08005289 	.word	0x08005289
 80051fc:	08005289 	.word	0x08005289
 8005200:	08005251 	.word	0x08005251
 8005204:	08005289 	.word	0x08005289
 8005208:	08005289 	.word	0x08005289
 800520c:	08005289 	.word	0x08005289
 8005210:	0800525f 	.word	0x0800525f
 8005214:	08005289 	.word	0x08005289
 8005218:	08005289 	.word	0x08005289
 800521c:	08005289 	.word	0x08005289
 8005220:	0800526d 	.word	0x0800526d
 8005224:	08005289 	.word	0x08005289
 8005228:	08005289 	.word	0x08005289
 800522c:	08005289 	.word	0x08005289
 8005230:	0800527b 	.word	0x0800527b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f998 	bl	8005570 <TIM_OC1_SetConfig>
      break;
 8005240:	e023      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa21 	bl	8005690 <TIM_OC2_SetConfig>
      break;
 800524e:	e01c      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 faa4 	bl	80057a4 <TIM_OC3_SetConfig>
      break;
 800525c:	e015      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fb25 	bl	80058b4 <TIM_OC4_SetConfig>
      break;
 800526a:	e00e      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb88 	bl	8005988 <TIM_OC5_SetConfig>
      break;
 8005278:	e007      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fbe5 	bl	8005a50 <TIM_OC6_SetConfig>
      break;
 8005286:	e000      	b.n	800528a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005288:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIM_ConfigClockSource+0x18>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0ba      	b.n	8005432 <HAL_TIM_ConfigClockSource+0x18e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d07a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x14a>
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d80d      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x74>
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	f000 8086 	beq.w	800540e <HAL_TIM_ConfigClockSource+0x16a>
 8005302:	2b10      	cmp	r3, #16
 8005304:	d803      	bhi.n	800530e <HAL_TIM_ConfigClockSource+0x6a>
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8081 	beq.w	800540e <HAL_TIM_ConfigClockSource+0x16a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800530c:	e088      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 800530e:	2b20      	cmp	r3, #32
 8005310:	d07d      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x16a>
 8005312:	2b30      	cmp	r3, #48	; 0x30
 8005314:	d07b      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8005316:	e083      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d018      	beq.n	800534e <HAL_TIM_ConfigClockSource+0xaa>
 800531c:	2b70      	cmp	r3, #112	; 0x70
 800531e:	d804      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x86>
 8005320:	2b50      	cmp	r3, #80	; 0x50
 8005322:	d044      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x10a>
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d052      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x12a>
      break;
 8005328:	e07a      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
  switch (sClockSourceConfig->ClockSource)
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d003      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x94>
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005334:	d028      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8005336:	e073      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	6093      	str	r3, [r2, #8]
      break;
 800534c:	e068      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f000 fc57 	bl	8005c10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005370:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005374:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800537c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	609a      	str	r2, [r3, #8]
      break;
 8005386:	e04b      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f000 fc3a 	bl	8005c10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053aa:	609a      	str	r2, [r3, #8]
      break;
 80053ac:	e038      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 fbae 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2150      	movs	r1, #80	; 0x50
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fc07 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80053cc:	e028      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 fbcd 	bl	8005b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2160      	movs	r1, #96	; 0x60
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fbf7 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 80053ec:	e018      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 fb8e 	bl	8005b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fbe7 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 800540c:	e008      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x17c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f000 fbde 	bl	8005bda <TIM_ITRx_SetConfig>
      break;
 800541e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a40      	ldr	r2, [pc, #256]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d00f      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3d      	ldr	r2, [pc, #244]	; (8005554 <TIM_Base_SetConfig+0x118>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3b      	ldr	r2, [pc, #236]	; (800555c <TIM_Base_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3a      	ldr	r2, [pc, #232]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01f      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d01b      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <TIM_Base_SetConfig+0x118>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d017      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2a      	ldr	r2, [pc, #168]	; (800555c <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a29      	ldr	r2, [pc, #164]	; (8005560 <TIM_Base_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a28      	ldr	r2, [pc, #160]	; (8005564 <TIM_Base_SetConfig+0x128>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a27      	ldr	r2, [pc, #156]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_Base_SetConfig+0x9a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a10      	ldr	r2, [pc, #64]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a11      	ldr	r2, [pc, #68]	; (8005564 <TIM_Base_SetConfig+0x128>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0f      	ldr	r2, [pc, #60]	; (800556c <TIM_Base_SetConfig+0x130>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40013400 	.word	0x40013400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800

08005570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 0302 	bic.w	r3, r3, #2
 80055bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a2c      	ldr	r2, [pc, #176]	; (800567c <TIM_OC1_SetConfig+0x10c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00f      	beq.n	80055f0 <TIM_OC1_SetConfig+0x80>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <TIM_OC1_SetConfig+0x110>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_OC1_SetConfig+0x80>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <TIM_OC1_SetConfig+0x114>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_OC1_SetConfig+0x80>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a29      	ldr	r2, [pc, #164]	; (8005688 <TIM_OC1_SetConfig+0x118>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC1_SetConfig+0x80>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a28      	ldr	r2, [pc, #160]	; (800568c <TIM_OC1_SetConfig+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0308 	bic.w	r3, r3, #8
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1b      	ldr	r2, [pc, #108]	; (800567c <TIM_OC1_SetConfig+0x10c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00f      	beq.n	8005632 <TIM_OC1_SetConfig+0xc2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <TIM_OC1_SetConfig+0x110>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_OC1_SetConfig+0xc2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <TIM_OC1_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_OC1_SetConfig+0xc2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <TIM_OC1_SetConfig+0x118>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_OC1_SetConfig+0xc2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a17      	ldr	r2, [pc, #92]	; (800568c <TIM_OC1_SetConfig+0x11c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d111      	bne.n	8005656 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40013400 	.word	0x40013400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800

08005690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0210 	bic.w	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0320 	bic.w	r3, r3, #32
 80056de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a28      	ldr	r2, [pc, #160]	; (8005790 <TIM_OC2_SetConfig+0x100>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_OC2_SetConfig+0x6c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a27      	ldr	r2, [pc, #156]	; (8005794 <TIM_OC2_SetConfig+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d10d      	bne.n	8005718 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <TIM_OC2_SetConfig+0x100>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_OC2_SetConfig+0xb0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <TIM_OC2_SetConfig+0x104>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_OC2_SetConfig+0xb0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <TIM_OC2_SetConfig+0x108>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_OC2_SetConfig+0xb0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <TIM_OC2_SetConfig+0x10c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC2_SetConfig+0xb0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <TIM_OC2_SetConfig+0x110>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d113      	bne.n	8005768 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800574e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40013400 	.word	0x40013400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800

080057a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0303 	bic.w	r3, r3, #3
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <TIM_OC3_SetConfig+0xfc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC3_SetConfig+0x6a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <TIM_OC3_SetConfig+0x100>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10d      	bne.n	800582a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <TIM_OC3_SetConfig+0xfc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00f      	beq.n	8005852 <TIM_OC3_SetConfig+0xae>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <TIM_OC3_SetConfig+0x100>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_OC3_SetConfig+0xae>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <TIM_OC3_SetConfig+0x104>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_OC3_SetConfig+0xae>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a19      	ldr	r2, [pc, #100]	; (80058ac <TIM_OC3_SetConfig+0x108>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0xae>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <TIM_OC3_SetConfig+0x10c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	031b      	lsls	r3, r3, #12
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC4_SetConfig+0xc0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00f      	beq.n	8005938 <TIM_OC4_SetConfig+0x84>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC4_SetConfig+0xc4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00b      	beq.n	8005938 <TIM_OC4_SetConfig+0x84>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC4_SetConfig+0xc8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <TIM_OC4_SetConfig+0x84>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <TIM_OC4_SetConfig+0xcc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC4_SetConfig+0x84>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <TIM_OC4_SetConfig+0xd0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d109      	bne.n	800594c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	019b      	lsls	r3, r3, #6
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800

08005988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <TIM_OC5_SetConfig+0xb4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_OC5_SetConfig+0x7a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <TIM_OC5_SetConfig+0xb8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_OC5_SetConfig+0x7a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC5_SetConfig+0xbc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_OC5_SetConfig+0x7a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <TIM_OC5_SetConfig+0xc0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC5_SetConfig+0x7a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <TIM_OC5_SetConfig+0xc4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d109      	bne.n	8005a16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	051b      	lsls	r3, r3, #20
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <TIM_OC6_SetConfig+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00f      	beq.n	8005acc <TIM_OC6_SetConfig+0x7c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <TIM_OC6_SetConfig+0xbc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_OC6_SetConfig+0x7c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <TIM_OC6_SetConfig+0xc0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_OC6_SetConfig+0x7c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <TIM_OC6_SetConfig+0xc4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC6_SetConfig+0x7c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <TIM_OC6_SetConfig+0xc8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f043 0307 	orr.w	r3, r3, #7
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2201      	movs	r2, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e045      	b.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1b      	ldr	r2, [pc, #108]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d12:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40013400 	.word	0x40013400

08005d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e043      	b.n	8005dee <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fa fd9a 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa69 	bl	8006270 <UART_SetConfig>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e022      	b.n	8005dee <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fda9 	bl	8006908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fe30 	bl	8006a4c <UART_CheckIdleState>
 8005dec:	4603      	mov	r3, r0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e02a      	b.n	8005e5e <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fa fdab 	bl	8000994 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08a      	sub	sp, #40	; 0x28
 8005e6a:	af02      	add	r7, sp, #8
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	f040 80ad 	bne.w	8005fe2 <HAL_UART_Receive+0x17c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_UART_Receive+0x2e>
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0a5      	b.n	8005fe4 <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Receive+0x40>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e09e      	b.n	8005fe4 <HAL_UART_Receive+0x17e>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2222      	movs	r2, #34	; 0x22
 8005eb8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005ebc:	f7fa ffa2 	bl	8000e04 <HAL_GetTick>
 8005ec0:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize  = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eda:	d10e      	bne.n	8005efa <HAL_UART_Receive+0x94>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <HAL_UART_Receive+0x8a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eee:	e028      	b.n	8005f42 <HAL_UART_Receive+0xdc>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ef8:	e023      	b.n	8005f42 <HAL_UART_Receive+0xdc>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <HAL_UART_Receive+0xb8>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Receive+0xae>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f12:	e016      	b.n	8005f42 <HAL_UART_Receive+0xdc>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	227f      	movs	r2, #127	; 0x7f
 8005f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f1c:	e011      	b.n	8005f42 <HAL_UART_Receive+0xdc>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f26:	d10c      	bne.n	8005f42 <HAL_UART_Receive+0xdc>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_UART_Receive+0xd4>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	227f      	movs	r2, #127	; 0x7f
 8005f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f38:	e003      	b.n	8005f42 <HAL_UART_Receive+0xdc>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	223f      	movs	r2, #63	; 0x3f
 8005f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f48:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f4a:	e03a      	b.n	8005fc2 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2200      	movs	r2, #0
 8005f54:	2120      	movs	r1, #32
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fdc1 	bl	8006ade <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_UART_Receive+0x100>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e03e      	b.n	8005fe4 <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d112      	bne.n	8005f96 <HAL_UART_Receive+0x130>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10e      	bne.n	8005f96 <HAL_UART_Receive+0x130>
      {
        tmp = (uint16_t *) pData ;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	8b7b      	ldrh	r3, [r7, #26]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	801a      	strh	r2, [r3, #0]
        pData += 2U;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	3302      	adds	r3, #2
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	e00c      	b.n	8005fb0 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	b2d9      	uxtb	r1, r3
 8005fa0:	8b7b      	ldrh	r3, [r7, #26]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	1c58      	adds	r0, r3, #1
 8005fa8:	60b8      	str	r0, [r7, #8]
 8005faa:	400a      	ands	r2, r1
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
      }
      huart->RxXferCount--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1be      	bne.n	8005f4c <HAL_UART_Receive+0xe6>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8005fe2:	2302      	movs	r3, #2
  }
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d113      	bne.n	8006042 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
            || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
    if (((isrflags & USART_ISR_RXNE) != RESET)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_UART_IRQHandler+0x56>
#endif
    {
      if (huart->RxISR != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80fd 	beq.w	8006232 <HAL_UART_IRQHandler+0x246>
      {
        huart->RxISR(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      }
      return;
 8006040:	e0f7      	b.n	8006232 <HAL_UART_IRQHandler+0x246>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != RESET)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))))
#else
  if ((errorflags != RESET)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80bf 	beq.w	80061c8 <HAL_UART_IRQHandler+0x1dc>
      && (((cr3its & USART_CR3_EIE) != RESET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80b4 	beq.w	80061c8 <HAL_UART_IRQHandler+0x1dc>
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00e      	beq.n	8006088 <HAL_UART_IRQHandler+0x9c>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <HAL_UART_IRQHandler+0xc4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2202      	movs	r2, #2
 80060a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a8:	f043 0204 	orr.w	r2, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <HAL_UART_IRQHandler+0xec>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2204      	movs	r2, #4
 80060ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d0:	f043 0202 	orr.w	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	675a      	str	r2, [r3, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != RESET)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if (((isrflags & USART_ISR_ORE) != RESET)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d013      	beq.n	800610a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != RESET)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <HAL_UART_IRQHandler+0x11e>
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2208      	movs	r2, #8
 80060fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	f043 0208 	orr.w	r2, r3, #8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8091 	beq.w	8006236 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
              || ((cr3its & USART_CR3_RXFTIE) != RESET)))
#else
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00c      	beq.n	8006138 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_UART_IRQHandler+0x14c>
#endif
      {
        if (huart->RxISR != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <HAL_UART_IRQHandler+0x166>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d131      	bne.n	80061b6 <HAL_UART_IRQHandler+0x1ca>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd0d 	bl	8006b72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d123      	bne.n	80061ae <HAL_UART_IRQHandler+0x1c2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d013      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1ba>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	4a30      	ldr	r2, [pc, #192]	; (8006244 <HAL_UART_IRQHandler+0x258>)
 8006184:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618a:	4618      	mov	r0, r3
 800618c:	f7fb f894 	bl	80012b8 <HAL_DMA_Abort_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <HAL_UART_IRQHandler+0x1d8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	e00e      	b.n	80061c4 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f858 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	e00a      	b.n	80061c4 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f854 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	e006      	b.n	80061c4 <HAL_UART_IRQHandler+0x1d8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f850 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	675a      	str	r2, [r3, #116]	; 0x74
      }
    }
    return;
 80061c2:	e038      	b.n	8006236 <HAL_UART_IRQHandler+0x24a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	bf00      	nop
    return;
 80061c6:	e036      	b.n	8006236 <HAL_UART_IRQHandler+0x24a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <HAL_UART_IRQHandler+0x202>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x202>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fd14 	bl	8006c14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ec:	e026      	b.n	800623c <HAL_UART_IRQHandler+0x250>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != RESET)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
          || ((cr3its & USART_CR3_TXFTIE) != RESET)))
#else
  if (((isrflags & USART_ISR_TXE) != RESET)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_UART_IRQHandler+0x228>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_UART_IRQHandler+0x228>
#endif
  {
    if (huart->TxISR != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006206:	2b00      	cmp	r3, #0
 8006208:	d017      	beq.n	800623a <HAL_UART_IRQHandler+0x24e>
    {
      huart->TxISR(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
    }
    return;
 8006212:	e012      	b.n	800623a <HAL_UART_IRQHandler+0x24e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00e      	beq.n	800623c <HAL_UART_IRQHandler+0x250>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_UART_IRQHandler+0x250>
  {
    UART_EndTransmit_IT(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fcd9 	bl	8006be0 <UART_EndTransmit_IT>
    return;
 800622e:	bf00      	nop
 8006230:	e004      	b.n	800623c <HAL_UART_IRQHandler+0x250>
      return;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <HAL_UART_IRQHandler+0x250>
    return;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_UART_IRQHandler+0x250>
    return;
 800623a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif
}
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	08006bb5 	.word	0x08006bb5

08006248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006270:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006274:	b088      	sub	sp, #32
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800627e:	2310      	movs	r3, #16
 8006280:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 8006282:	2300      	movs	r3, #0
 8006284:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4bab      	ldr	r3, [pc, #684]	; (8006560 <UART_SetConfig+0x2f0>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	430b      	orrs	r3, r1
 80062bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4aa1      	ldr	r2, [pc, #644]	; (8006564 <UART_SetConfig+0x2f4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a98      	ldr	r2, [pc, #608]	; (8006568 <UART_SetConfig+0x2f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d121      	bne.n	8006350 <UART_SetConfig+0xe0>
 800630c:	4b97      	ldr	r3, [pc, #604]	; (800656c <UART_SetConfig+0x2fc>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b03      	cmp	r3, #3
 8006318:	d816      	bhi.n	8006348 <UART_SetConfig+0xd8>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0xb0>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006331 	.word	0x08006331
 8006324:	0800633d 	.word	0x0800633d
 8006328:	08006337 	.word	0x08006337
 800632c:	08006343 	.word	0x08006343
 8006330:	2301      	movs	r3, #1
 8006332:	76fb      	strb	r3, [r7, #27]
 8006334:	e0e6      	b.n	8006504 <UART_SetConfig+0x294>
 8006336:	2302      	movs	r3, #2
 8006338:	76fb      	strb	r3, [r7, #27]
 800633a:	e0e3      	b.n	8006504 <UART_SetConfig+0x294>
 800633c:	2304      	movs	r3, #4
 800633e:	76fb      	strb	r3, [r7, #27]
 8006340:	e0e0      	b.n	8006504 <UART_SetConfig+0x294>
 8006342:	2308      	movs	r3, #8
 8006344:	76fb      	strb	r3, [r7, #27]
 8006346:	e0dd      	b.n	8006504 <UART_SetConfig+0x294>
 8006348:	2310      	movs	r3, #16
 800634a:	76fb      	strb	r3, [r7, #27]
 800634c:	bf00      	nop
 800634e:	e0d9      	b.n	8006504 <UART_SetConfig+0x294>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a86      	ldr	r2, [pc, #536]	; (8006570 <UART_SetConfig+0x300>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d134      	bne.n	80063c4 <UART_SetConfig+0x154>
 800635a:	4b84      	ldr	r3, [pc, #528]	; (800656c <UART_SetConfig+0x2fc>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b0c      	cmp	r3, #12
 8006366:	d829      	bhi.n	80063bc <UART_SetConfig+0x14c>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x100>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063bd 	.word	0x080063bd
 8006378:	080063bd 	.word	0x080063bd
 800637c:	080063bd 	.word	0x080063bd
 8006380:	080063b1 	.word	0x080063b1
 8006384:	080063bd 	.word	0x080063bd
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063bd 	.word	0x080063bd
 8006390:	080063ab 	.word	0x080063ab
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063bd 	.word	0x080063bd
 80063a0:	080063b7 	.word	0x080063b7
 80063a4:	2300      	movs	r3, #0
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e0ac      	b.n	8006504 <UART_SetConfig+0x294>
 80063aa:	2302      	movs	r3, #2
 80063ac:	76fb      	strb	r3, [r7, #27]
 80063ae:	e0a9      	b.n	8006504 <UART_SetConfig+0x294>
 80063b0:	2304      	movs	r3, #4
 80063b2:	76fb      	strb	r3, [r7, #27]
 80063b4:	e0a6      	b.n	8006504 <UART_SetConfig+0x294>
 80063b6:	2308      	movs	r3, #8
 80063b8:	76fb      	strb	r3, [r7, #27]
 80063ba:	e0a3      	b.n	8006504 <UART_SetConfig+0x294>
 80063bc:	2310      	movs	r3, #16
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	bf00      	nop
 80063c2:	e09f      	b.n	8006504 <UART_SetConfig+0x294>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a6a      	ldr	r2, [pc, #424]	; (8006574 <UART_SetConfig+0x304>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d120      	bne.n	8006410 <UART_SetConfig+0x1a0>
 80063ce:	4b67      	ldr	r3, [pc, #412]	; (800656c <UART_SetConfig+0x2fc>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d00f      	beq.n	80063fc <UART_SetConfig+0x18c>
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d802      	bhi.n	80063e6 <UART_SetConfig+0x176>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <UART_SetConfig+0x180>
 80063e4:	e010      	b.n	8006408 <UART_SetConfig+0x198>
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d005      	beq.n	80063f6 <UART_SetConfig+0x186>
 80063ea:	2b30      	cmp	r3, #48	; 0x30
 80063ec:	d009      	beq.n	8006402 <UART_SetConfig+0x192>
 80063ee:	e00b      	b.n	8006408 <UART_SetConfig+0x198>
 80063f0:	2300      	movs	r3, #0
 80063f2:	76fb      	strb	r3, [r7, #27]
 80063f4:	e086      	b.n	8006504 <UART_SetConfig+0x294>
 80063f6:	2302      	movs	r3, #2
 80063f8:	76fb      	strb	r3, [r7, #27]
 80063fa:	e083      	b.n	8006504 <UART_SetConfig+0x294>
 80063fc:	2304      	movs	r3, #4
 80063fe:	76fb      	strb	r3, [r7, #27]
 8006400:	e080      	b.n	8006504 <UART_SetConfig+0x294>
 8006402:	2308      	movs	r3, #8
 8006404:	76fb      	strb	r3, [r7, #27]
 8006406:	e07d      	b.n	8006504 <UART_SetConfig+0x294>
 8006408:	2310      	movs	r3, #16
 800640a:	76fb      	strb	r3, [r7, #27]
 800640c:	bf00      	nop
 800640e:	e079      	b.n	8006504 <UART_SetConfig+0x294>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a58      	ldr	r2, [pc, #352]	; (8006578 <UART_SetConfig+0x308>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d120      	bne.n	800645c <UART_SetConfig+0x1ec>
 800641a:	4b54      	ldr	r3, [pc, #336]	; (800656c <UART_SetConfig+0x2fc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d00f      	beq.n	8006448 <UART_SetConfig+0x1d8>
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d802      	bhi.n	8006432 <UART_SetConfig+0x1c2>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <UART_SetConfig+0x1cc>
 8006430:	e010      	b.n	8006454 <UART_SetConfig+0x1e4>
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d005      	beq.n	8006442 <UART_SetConfig+0x1d2>
 8006436:	2bc0      	cmp	r3, #192	; 0xc0
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x1de>
 800643a:	e00b      	b.n	8006454 <UART_SetConfig+0x1e4>
 800643c:	2300      	movs	r3, #0
 800643e:	76fb      	strb	r3, [r7, #27]
 8006440:	e060      	b.n	8006504 <UART_SetConfig+0x294>
 8006442:	2302      	movs	r3, #2
 8006444:	76fb      	strb	r3, [r7, #27]
 8006446:	e05d      	b.n	8006504 <UART_SetConfig+0x294>
 8006448:	2304      	movs	r3, #4
 800644a:	76fb      	strb	r3, [r7, #27]
 800644c:	e05a      	b.n	8006504 <UART_SetConfig+0x294>
 800644e:	2308      	movs	r3, #8
 8006450:	76fb      	strb	r3, [r7, #27]
 8006452:	e057      	b.n	8006504 <UART_SetConfig+0x294>
 8006454:	2310      	movs	r3, #16
 8006456:	76fb      	strb	r3, [r7, #27]
 8006458:	bf00      	nop
 800645a:	e053      	b.n	8006504 <UART_SetConfig+0x294>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a46      	ldr	r2, [pc, #280]	; (800657c <UART_SetConfig+0x30c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d124      	bne.n	80064b0 <UART_SetConfig+0x240>
 8006466:	4b41      	ldr	r3, [pc, #260]	; (800656c <UART_SetConfig+0x2fc>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006474:	d012      	beq.n	800649c <UART_SetConfig+0x22c>
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	d802      	bhi.n	8006482 <UART_SetConfig+0x212>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <UART_SetConfig+0x220>
 8006480:	e012      	b.n	80064a8 <UART_SetConfig+0x238>
 8006482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006486:	d006      	beq.n	8006496 <UART_SetConfig+0x226>
 8006488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648c:	d009      	beq.n	80064a2 <UART_SetConfig+0x232>
 800648e:	e00b      	b.n	80064a8 <UART_SetConfig+0x238>
 8006490:	2300      	movs	r3, #0
 8006492:	76fb      	strb	r3, [r7, #27]
 8006494:	e036      	b.n	8006504 <UART_SetConfig+0x294>
 8006496:	2302      	movs	r3, #2
 8006498:	76fb      	strb	r3, [r7, #27]
 800649a:	e033      	b.n	8006504 <UART_SetConfig+0x294>
 800649c:	2304      	movs	r3, #4
 800649e:	76fb      	strb	r3, [r7, #27]
 80064a0:	e030      	b.n	8006504 <UART_SetConfig+0x294>
 80064a2:	2308      	movs	r3, #8
 80064a4:	76fb      	strb	r3, [r7, #27]
 80064a6:	e02d      	b.n	8006504 <UART_SetConfig+0x294>
 80064a8:	2310      	movs	r3, #16
 80064aa:	76fb      	strb	r3, [r7, #27]
 80064ac:	bf00      	nop
 80064ae:	e029      	b.n	8006504 <UART_SetConfig+0x294>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <UART_SetConfig+0x2f4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d123      	bne.n	8006502 <UART_SetConfig+0x292>
 80064ba:	4b2c      	ldr	r3, [pc, #176]	; (800656c <UART_SetConfig+0x2fc>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c8:	d012      	beq.n	80064f0 <UART_SetConfig+0x280>
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ce:	d802      	bhi.n	80064d6 <UART_SetConfig+0x266>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <UART_SetConfig+0x274>
 80064d4:	e012      	b.n	80064fc <UART_SetConfig+0x28c>
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d006      	beq.n	80064ea <UART_SetConfig+0x27a>
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e0:	d009      	beq.n	80064f6 <UART_SetConfig+0x286>
 80064e2:	e00b      	b.n	80064fc <UART_SetConfig+0x28c>
 80064e4:	2300      	movs	r3, #0
 80064e6:	76fb      	strb	r3, [r7, #27]
 80064e8:	e00c      	b.n	8006504 <UART_SetConfig+0x294>
 80064ea:	2302      	movs	r3, #2
 80064ec:	76fb      	strb	r3, [r7, #27]
 80064ee:	e009      	b.n	8006504 <UART_SetConfig+0x294>
 80064f0:	2304      	movs	r3, #4
 80064f2:	76fb      	strb	r3, [r7, #27]
 80064f4:	e006      	b.n	8006504 <UART_SetConfig+0x294>
 80064f6:	2308      	movs	r3, #8
 80064f8:	76fb      	strb	r3, [r7, #27]
 80064fa:	e003      	b.n	8006504 <UART_SetConfig+0x294>
 80064fc:	2310      	movs	r3, #16
 80064fe:	76fb      	strb	r3, [r7, #27]
 8006500:	e000      	b.n	8006504 <UART_SetConfig+0x294>
 8006502:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a16      	ldr	r2, [pc, #88]	; (8006564 <UART_SetConfig+0x2f4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f040 80fa 	bne.w	8006704 <UART_SetConfig+0x494>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006510:	7efb      	ldrb	r3, [r7, #27]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d836      	bhi.n	8006584 <UART_SetConfig+0x314>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0x2ac>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006541 	.word	0x08006541
 8006520:	08006585 	.word	0x08006585
 8006524:	08006549 	.word	0x08006549
 8006528:	08006585 	.word	0x08006585
 800652c:	0800654f 	.word	0x0800654f
 8006530:	08006585 	.word	0x08006585
 8006534:	08006585 	.word	0x08006585
 8006538:	08006585 	.word	0x08006585
 800653c:	08006557 	.word	0x08006557
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006540:	f7fd feb2 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006544:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8006546:	e020      	b.n	800658a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <UART_SetConfig+0x310>)
 800654a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800654c:	e01d      	b.n	800658a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800654e:	f7fd fdef 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8006552:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8006554:	e019      	b.n	800658a <UART_SetConfig+0x31a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655a:	60fb      	str	r3, [r7, #12]
#endif
        break;
 800655c:	e015      	b.n	800658a <UART_SetConfig+0x31a>
 800655e:	bf00      	nop
 8006560:	efff69f3 	.word	0xefff69f3
 8006564:	40008000 	.word	0x40008000
 8006568:	40013800 	.word	0x40013800
 800656c:	40021000 	.word	0x40021000
 8006570:	40004400 	.word	0x40004400
 8006574:	40004800 	.word	0x40004800
 8006578:	40004c00 	.word	0x40004c00
 800657c:	40005000 	.word	0x40005000
 8006580:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	74fb      	strb	r3, [r7, #19]
        break;
 8006588:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 81ac 	beq.w	80068ea <UART_SetConfig+0x67a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d305      	bcc.n	80065ae <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d902      	bls.n	80065b4 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	74fb      	strb	r3, [r7, #19]
 80065b2:	e19a      	b.n	80068ea <UART_SetConfig+0x67a>
      }
      else
      {
        switch (clocksource)
 80065b4:	7efb      	ldrb	r3, [r7, #27]
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	f200 8091 	bhi.w	80066de <UART_SetConfig+0x46e>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x354>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080066df 	.word	0x080066df
 80065cc:	08006635 	.word	0x08006635
 80065d0:	080066df 	.word	0x080066df
 80065d4:	08006669 	.word	0x08006669
 80065d8:	080066df 	.word	0x080066df
 80065dc:	080066df 	.word	0x080066df
 80065e0:	080066df 	.word	0x080066df
 80065e4:	080066b5 	.word	0x080066b5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80065e8:	f7fd fe5e 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 80065ec:	4603      	mov	r3, r0
 80065ee:	4619      	mov	r1, r3
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	f04f 0400 	mov.w	r4, #0
 80065fc:	0214      	lsls	r4, r2, #8
 80065fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006602:	020b      	lsls	r3, r1, #8
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6852      	ldr	r2, [r2, #4]
 8006608:	0852      	lsrs	r2, r2, #1
 800660a:	4611      	mov	r1, r2
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	eb13 0b01 	adds.w	fp, r3, r1
 8006614:	eb44 0c02 	adc.w	ip, r4, r2
 8006618:	4658      	mov	r0, fp
 800661a:	4661      	mov	r1, ip
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	461a      	mov	r2, r3
 8006626:	4623      	mov	r3, r4
 8006628:	f7f9 fe22 	bl	8000270 <__aeabi_uldivmod>
 800662c:	4603      	mov	r3, r0
 800662e:	460c      	mov	r4, r1
 8006630:	617b      	str	r3, [r7, #20]
#endif
            break;
 8006632:	e057      	b.n	80066e4 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	f04f 0400 	mov.w	r4, #0
 800663e:	49b1      	ldr	r1, [pc, #708]	; (8006904 <UART_SetConfig+0x694>)
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	eb13 0b01 	adds.w	fp, r3, r1
 8006648:	eb44 0c02 	adc.w	ip, r4, r2
 800664c:	4658      	mov	r0, fp
 800664e:	4661      	mov	r1, ip
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f04f 0400 	mov.w	r4, #0
 8006658:	461a      	mov	r2, r3
 800665a:	4623      	mov	r3, r4
 800665c:	f7f9 fe08 	bl	8000270 <__aeabi_uldivmod>
 8006660:	4603      	mov	r3, r0
 8006662:	460c      	mov	r4, r1
 8006664:	617b      	str	r3, [r7, #20]
#endif
            break;
 8006666:	e03d      	b.n	80066e4 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006668:	f7fd fd62 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800666c:	4603      	mov	r3, r0
 800666e:	4619      	mov	r1, r3
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	f04f 0400 	mov.w	r4, #0
 800667c:	0214      	lsls	r4, r2, #8
 800667e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006682:	020b      	lsls	r3, r1, #8
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6852      	ldr	r2, [r2, #4]
 8006688:	0852      	lsrs	r2, r2, #1
 800668a:	4611      	mov	r1, r2
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	eb13 0b01 	adds.w	fp, r3, r1
 8006694:	eb44 0c02 	adc.w	ip, r4, r2
 8006698:	4658      	mov	r0, fp
 800669a:	4661      	mov	r1, ip
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f04f 0400 	mov.w	r4, #0
 80066a4:	461a      	mov	r2, r3
 80066a6:	4623      	mov	r3, r4
 80066a8:	f7f9 fde2 	bl	8000270 <__aeabi_uldivmod>
 80066ac:	4603      	mov	r3, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	617b      	str	r3, [r7, #20]
#endif
            break;
 80066b2:	e017      	b.n	80066e4 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	f04f 0400 	mov.w	r4, #0
 80066be:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80066c2:	f144 0100 	adc.w	r1, r4, #0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f04f 0400 	mov.w	r4, #0
 80066ce:	461a      	mov	r2, r3
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7f9 fdcd 	bl	8000270 <__aeabi_uldivmod>
 80066d6:	4603      	mov	r3, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	617b      	str	r3, [r7, #20]
#endif
            break;
 80066dc:	e002      	b.n	80066e4 <UART_SetConfig+0x474>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	74fb      	strb	r3, [r7, #19]
            break;
 80066e2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ea:	d308      	bcc.n	80066fe <UART_SetConfig+0x48e>
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f2:	d204      	bcs.n	80066fe <UART_SetConfig+0x48e>
        {
          huart->Instance->BRR = usartdiv;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	60da      	str	r2, [r3, #12]
 80066fc:	e0f5      	b.n	80068ea <UART_SetConfig+0x67a>
        }
        else
        {
          ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	74fb      	strb	r3, [r7, #19]
 8006702:	e0f2      	b.n	80068ea <UART_SetConfig+0x67a>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670c:	d17f      	bne.n	800680e <UART_SetConfig+0x59e>
  {
    switch (clocksource)
 800670e:	7efb      	ldrb	r3, [r7, #27]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d85c      	bhi.n	80067ce <UART_SetConfig+0x55e>
 8006714:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x4ac>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	08006741 	.word	0x08006741
 8006720:	0800675f 	.word	0x0800675f
 8006724:	0800677d 	.word	0x0800677d
 8006728:	080067cf 	.word	0x080067cf
 800672c:	08006799 	.word	0x08006799
 8006730:	080067cf 	.word	0x080067cf
 8006734:	080067cf 	.word	0x080067cf
 8006738:	080067cf 	.word	0x080067cf
 800673c:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006740:	f7fd fdb2 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006744:	4603      	mov	r3, r0
 8006746:	005a      	lsls	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	441a      	add	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	b29b      	uxth	r3, r3
 800675a:	617b      	str	r3, [r7, #20]
#endif
        break;
 800675c:	e03a      	b.n	80067d4 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800675e:	f7fd fdb7 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8006762:	4603      	mov	r3, r0
 8006764:	005a      	lsls	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	617b      	str	r3, [r7, #20]
#endif
        break;
 800677a:	e02b      	b.n	80067d4 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006786:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6852      	ldr	r2, [r2, #4]
 800678e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006792:	b29b      	uxth	r3, r3
 8006794:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006796:	e01d      	b.n	80067d4 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006798:	f7fd fcca 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800679c:	4603      	mov	r3, r0
 800679e:	005a      	lsls	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	617b      	str	r3, [r7, #20]
#endif
        break;
 80067b4:	e00e      	b.n	80067d4 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	617b      	str	r3, [r7, #20]
#endif
        break;
 80067cc:	e002      	b.n	80067d4 <UART_SetConfig+0x564>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	74fb      	strb	r3, [r7, #19]
        break;
 80067d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d916      	bls.n	8006808 <UART_SetConfig+0x598>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e0:	d212      	bcs.n	8006808 <UART_SetConfig+0x598>
    {
      brrtemp = usartdiv & 0xFFF0U;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f023 030f 	bic.w	r3, r3, #15
 80067ea:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	897b      	ldrh	r3, [r7, #10]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	897a      	ldrh	r2, [r7, #10]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e070      	b.n	80068ea <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	74fb      	strb	r3, [r7, #19]
 800680c:	e06d      	b.n	80068ea <UART_SetConfig+0x67a>
    }
  }
  else
  {
    switch (clocksource)
 800680e:	7efb      	ldrb	r3, [r7, #27]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d859      	bhi.n	80068c8 <UART_SetConfig+0x658>
 8006814:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x5ac>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	08006841 	.word	0x08006841
 8006820:	0800685d 	.word	0x0800685d
 8006824:	08006879 	.word	0x08006879
 8006828:	080068c9 	.word	0x080068c9
 800682c:	08006895 	.word	0x08006895
 8006830:	080068c9 	.word	0x080068c9
 8006834:	080068c9 	.word	0x080068c9
 8006838:	080068c9 	.word	0x080068c9
 800683c:	080068b1 	.word	0x080068b1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006840:	f7fd fd32 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006844:	4602      	mov	r2, r0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	441a      	add	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	b29b      	uxth	r3, r3
 8006858:	617b      	str	r3, [r7, #20]
#endif
        break;
 800685a:	e038      	b.n	80068ce <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800685c:	f7fd fd38 	bl	80042d0 <HAL_RCC_GetPCLK2Freq>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	441a      	add	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	b29b      	uxth	r3, r3
 8006874:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006876:	e02a      	b.n	80068ce <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006882:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6852      	ldr	r2, [r2, #4]
 800688a:	fbb3 f3f2 	udiv	r3, r3, r2
 800688e:	b29b      	uxth	r3, r3
 8006890:	617b      	str	r3, [r7, #20]
#endif
        break;
 8006892:	e01c      	b.n	80068ce <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006894:	f7fd fc4c 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	617b      	str	r3, [r7, #20]
#endif
        break;
 80068ae:	e00e      	b.n	80068ce <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	617b      	str	r3, [r7, #20]
#endif
        break;
 80068c6:	e002      	b.n	80068ce <UART_SetConfig+0x65e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	74fb      	strb	r3, [r7, #19]
        break;
 80068cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b0f      	cmp	r3, #15
 80068d2:	d908      	bls.n	80068e6 <UART_SetConfig+0x676>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068da:	d204      	bcs.n	80068e6 <UART_SetConfig+0x676>
    {
      huart->Instance->BRR = usartdiv;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	60da      	str	r2, [r3, #12]
 80068e4:	e001      	b.n	80068ea <UART_SetConfig+0x67a>
    }
    else
    {
      ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80068f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006902:	bf00      	nop
 8006904:	f4240000 	.word	0xf4240000

08006908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d10a      	bne.n	8006a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a5e:	f7fa f9d1 	bl	8000e04 <HAL_GetTick>
 8006a62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d10e      	bne.n	8006a90 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f82c 	bl	8006ade <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e022      	b.n	8006ad6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d10e      	bne.n	8006abc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f816 	bl	8006ade <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e00c      	b.n	8006ad6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aee:	e02c      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d028      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x30>
 8006afe:	f7fa f981 	bl	8000e04 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d21d      	bcs.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b1c:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00f      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4013      	ands	r3, r2
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d0c3      	beq.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b88:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff fb42 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fb1e 	bl	8006248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <MX_GPIO_Init>:
#include "hw_gpio.h"
/*---------------------------------------------------------------------------*/
void MX_GPIO_Init(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c2e:	4b55      	ldr	r3, [pc, #340]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	4a54      	ldr	r2, [pc, #336]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c34:	f043 0304 	orr.w	r3, r3, #4
 8006c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c3a:	4b52      	ldr	r3, [pc, #328]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c46:	4b4f      	ldr	r3, [pc, #316]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	4a4e      	ldr	r2, [pc, #312]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c52:	4b4c      	ldr	r3, [pc, #304]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5e:	4b49      	ldr	r3, [pc, #292]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	4a48      	ldr	r2, [pc, #288]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c6a:	4b46      	ldr	r3, [pc, #280]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c76:	4b43      	ldr	r3, [pc, #268]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	4a42      	ldr	r2, [pc, #264]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c82:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <MX_GPIO_Init+0x15c>)
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]

  // ---------------config all gpio as reset---------------
  /* except PA14 (SWCLK) and PA13 (SWDIO) */
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8006c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c98:	f7fb fa8e 	bl	80021b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOA, 0x9FFF, &GPIO_InitStruct );
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	461a      	mov	r2, r3
 8006cae:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8006cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cb6:	f000 f86b 	bl	8006d90 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, 0x9FFF, GPIO_PIN_RESET);
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8006cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cc4:	f7fb fa78 	bl	80021b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cce:	482e      	ldr	r0, [pc, #184]	; (8006d88 <MX_GPIO_Init+0x160>)
 8006cd0:	f7fb fa72 	bl	80021b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOB, 0xffff, &GPIO_InitStruct );
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cea:	4827      	ldr	r0, [pc, #156]	; (8006d88 <MX_GPIO_Init+0x160>)
 8006cec:	f000 f850 	bl	8006d90 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, 0xffff, GPIO_PIN_RESET);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cf6:	4824      	ldr	r0, [pc, #144]	; (8006d88 <MX_GPIO_Init+0x160>)
 8006cf8:	f7fb fa5e 	bl	80021b8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d02:	4822      	ldr	r0, [pc, #136]	; (8006d8c <MX_GPIO_Init+0x164>)
 8006d04:	f7fb fa58 	bl	80021b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d10:	2300      	movs	r3, #0
 8006d12:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(GPIOC, 0xffff, &GPIO_InitStruct );
 8006d14:	f107 0314 	add.w	r3, r7, #20
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d1e:	481b      	ldr	r0, [pc, #108]	; (8006d8c <MX_GPIO_Init+0x164>)
 8006d20:	f000 f836 	bl	8006d90 <HW_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, 0xffff, GPIO_PIN_RESET);
 8006d24:	2200      	movs	r2, #0
 8006d26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d2a:	4818      	ldr	r0, [pc, #96]	; (8006d8c <MX_GPIO_Init+0x164>)
 8006d2c:	f7fb fa44 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure LED pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, GPIO_PIN_RESET);
 8006d30:	2200      	movs	r2, #0
 8006d32:	f641 5148 	movw	r1, #7496	; 0x1d48
 8006d36:	4815      	ldr	r0, [pc, #84]	; (8006d8c <MX_GPIO_Init+0x164>)
 8006d38:	f7fb fa3e 	bl	80021b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(LED_GPIO_Port, LED1|LED2|LED3|LED4|LED5|LED6, &GPIO_InitStruct );
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f641 5148 	movw	r1, #7496	; 0x1d48
 8006d52:	480e      	ldr	r0, [pc, #56]	; (8006d8c <MX_GPIO_Init+0x164>)
 8006d54:	f000 f81c 	bl	8006d90 <HW_GPIO_Init>

  // TODO: no need to config?
  /*Configure RADIO_DIO_3_PIN pin Output Level */
  HAL_GPIO_WritePin(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, GPIO_PIN_RESET);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	480a      	ldr	r0, [pc, #40]	; (8006d88 <MX_GPIO_Init+0x160>)
 8006d5e:	f7fb fa2b 	bl	80021b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d62:	2301      	movs	r3, #1
 8006d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]

  HW_GPIO_Init(RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &GPIO_InitStruct );
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	461a      	mov	r2, r3
 8006d74:	2110      	movs	r1, #16
 8006d76:	4804      	ldr	r0, [pc, #16]	; (8006d88 <MX_GPIO_Init+0x160>)
 8006d78:	f000 f80a 	bl	8006d90 <HW_GPIO_Init>
}
 8006d7c:	bf00      	nop
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40021000 	.word	0x40021000
 8006d88:	48000400 	.word	0x48000400
 8006d8c:	48000800 	.word	0x48000800

08006d90 <HW_GPIO_Init>:
	default: return EXTI15_10_IRQn;
  }
}

void HW_GPIO_Init( GPIO_TypeDef* port, uint16_t GPIO_Pin, GPIO_InitTypeDef* initStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	; 0x28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	817b      	strh	r3, [r7, #10]
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HW_GPIO_Init+0xc8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01a      	beq.n	8006ddc <HW_GPIO_Init+0x4c>
 8006da6:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <HW_GPIO_Init+0xc8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d803      	bhi.n	8006db4 <HW_GPIO_Init+0x24>
 8006dac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006db0:	d007      	beq.n	8006dc2 <HW_GPIO_Init+0x32>
 8006db2:	e03a      	b.n	8006e2a <HW_GPIO_Init+0x9a>
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <HW_GPIO_Init+0xcc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01d      	beq.n	8006df6 <HW_GPIO_Init+0x66>
 8006dba:	4a29      	ldr	r2, [pc, #164]	; (8006e60 <HW_GPIO_Init+0xd0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HW_GPIO_Init+0x80>
 8006dc0:	e033      	b.n	8006e2a <HW_GPIO_Init+0x9a>
 8006dc2:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	e032      	b.n	8006e42 <HW_GPIO_Init+0xb2>
 8006ddc:	4b21      	ldr	r3, [pc, #132]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de0:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006de2:	f043 0302 	orr.w	r3, r3, #2
 8006de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	e025      	b.n	8006e42 <HW_GPIO_Init+0xb2>
 8006df6:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006dfc:	f043 0304 	orr.w	r3, r3, #4
 8006e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	e018      	b.n	8006e42 <HW_GPIO_Init+0xb2>
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e16:	f043 0308 	orr.w	r3, r3, #8
 8006e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	e00b      	b.n	8006e42 <HW_GPIO_Init+0xb2>
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <HW_GPIO_Init+0xd4>)
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8006e42:	897a      	ldrh	r2, [r7, #10]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init( port, initStruct );
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fa ff10 	bl	8001c70 <HAL_GPIO_Init>
}
 8006e50:	bf00      	nop
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	48000400 	.word	0x48000400
 8006e5c:	48000800 	.word	0x48000800
 8006e60:	48000c00 	.word	0x48000c00
 8006e64:	40021000 	.word	0x40021000

08006e68 <HW_GPIO_IrqHandler>:
    GpioIrq[ BitPos ] = NULL;
  }
}

void HW_GPIO_IrqHandler( uint16_t GPIO_Pin )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80fb      	strh	r3, [r7, #6]
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f815 	bl	8006ea4 <HW_GPIO_GetBitPos>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	60fb      	str	r3, [r7, #12]

  if ( GpioIrq[ BitPos ]  != NULL)
 8006e7e:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <HW_GPIO_IrqHandler+0x38>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HW_GPIO_IrqHandler+0x2e>
  {
    GpioIrq[ BitPos ] ( NULL );
 8006e8a:	4a05      	ldr	r2, [pc, #20]	; (8006ea0 <HW_GPIO_IrqHandler+0x38>)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e92:	2000      	movs	r0, #0
 8006e94:	4798      	blx	r3
  }
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200000b0 	.word	0x200000b0

08006ea4 <HW_GPIO_GetBitPos>:
{
  return HAL_GPIO_ReadPin( GPIOx, GPIO_Pin);
}

uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	80fb      	strh	r3, [r7, #6]
  uint8_t PinPos=0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HW_GPIO_GetBitPos+0x20>
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	f043 0308 	orr.w	r3, r3, #8
 8006ec2:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <HW_GPIO_GetBitPos+0x34>
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	f043 0304 	orr.w	r3, r3, #4
 8006ed6:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8006ed8:	88fa      	ldrh	r2, [r7, #6]
 8006eda:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HW_GPIO_GetBitPos+0x48>
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	73fb      	strb	r3, [r7, #15]
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HW_GPIO_GetBitPos+0x5c>
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]

  return PinPos;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b0b8      	sub	sp, #224	; 0xe0
 8006f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure LSE Drive Capability*/
  HAL_PWR_EnableBkUpAccess();
 8006f16:	f7fc fc57 	bl	80037c8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006f1a:	4b4a      	ldr	r3, [pc, #296]	; (8007044 <SystemClock_Config+0x134>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	4a48      	ldr	r2, [pc, #288]	; (8007044 <SystemClock_Config+0x134>)
 8006f22:	f023 0318 	bic.w	r3, r3, #24
 8006f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_LSI;
 8006f2a:	230e      	movs	r3, #14
 8006f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8006f3e:	2310      	movs	r3, #16
 8006f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006f44:	2301      	movs	r3, #1
 8006f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006f50:	2302      	movs	r3, #2
 8006f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006f5c:	230a      	movs	r3, #10
 8006f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006f62:	2307      	movs	r3, #7
 8006f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fc fc99 	bl	80038b0 <HAL_RCC_OscConfig>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006f84:	218c      	movs	r1, #140	; 0x8c
 8006f86:	4830      	ldr	r0, [pc, #192]	; (8007048 <SystemClock_Config+0x138>)
 8006f88:	f7f9 fbd9 	bl	800073e <_Error_Handler>
  }

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f8c:	230f      	movs	r3, #15
 8006f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f92:	2303      	movs	r3, #3
 8006f94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006faa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006fae:	2104      	movs	r1, #4
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fc ffe3 	bl	8003f7c <HAL_RCC_ClockConfig>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006fbc:	219a      	movs	r1, #154	; 0x9a
 8006fbe:	4822      	ldr	r0, [pc, #136]	; (8007048 <SystemClock_Config+0x138>)
 8006fc0:	f7f9 fbbd 	bl	800073e <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM1|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <SystemClock_Config+0x13c>)
 8006fc6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8006fd0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8006fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fe2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8006fec:	2308      	movs	r3, #8
 8006fee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006ff0:	2307      	movs	r3, #7
 8006ff2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8006ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007000:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007002:	463b      	mov	r3, r7
 8007004:	4618      	mov	r0, r3
 8007006:	f7fd f9d9 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <SystemClock_Config+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007010:	21ac      	movs	r1, #172	; 0xac
 8007012:	480d      	ldr	r0, [pc, #52]	; (8007048 <SystemClock_Config+0x138>)
 8007014:	f7f9 fb93 	bl	800073e <_Error_Handler>
  }

  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007018:	f44f 7000 	mov.w	r0, #512	; 0x200
 800701c:	f7fc fbf2 	bl	8003804 <HAL_PWREx_ControlVoltageScaling>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <SystemClock_Config+0x11e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007026:	21b3      	movs	r1, #179	; 0xb3
 8007028:	4807      	ldr	r0, [pc, #28]	; (8007048 <SystemClock_Config+0x138>)
 800702a:	f7f9 fb88 	bl	800073e <_Error_Handler>
  }

  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800702e:	4b08      	ldr	r3, [pc, #32]	; (8007050 <SystemClock_Config+0x140>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a07      	ldr	r2, [pc, #28]	; (8007050 <SystemClock_Config+0x140>)
 8007034:	f023 0302 	bic.w	r3, r3, #2
 8007038:	6013      	str	r3, [r2, #0]
}
 800703a:	bf00      	nop
 800703c:	37e0      	adds	r7, #224	; 0xe0
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000
 8007048:	080091b8 	.word	0x080091b8
 800704c:	00024206 	.word	0x00024206
 8007050:	e000e010 	.word	0xe000e010

08007054 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08e      	sub	sp, #56	; 0x38
 8007058:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <MX_TIM2_Init+0xcc>)
 800705c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8007062:	4b2f      	ldr	r3, [pc, #188]	; (8007120 <MX_TIM2_Init+0xcc>)
 8007064:	2204      	movs	r2, #4
 8007066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007068:	4b2d      	ldr	r3, [pc, #180]	; (8007120 <MX_TIM2_Init+0xcc>)
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800706e:	4b2c      	ldr	r3, [pc, #176]	; (8007120 <MX_TIM2_Init+0xcc>)
 8007070:	f04f 32ff 	mov.w	r2, #4294967295
 8007074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007076:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <MX_TIM2_Init+0xcc>)
 8007078:	2200      	movs	r2, #0
 800707a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800707c:	4b28      	ldr	r3, [pc, #160]	; (8007120 <MX_TIM2_Init+0xcc>)
 800707e:	2200      	movs	r2, #0
 8007080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007082:	4827      	ldr	r0, [pc, #156]	; (8007120 <MX_TIM2_Init+0xcc>)
 8007084:	f7fd ff62 	bl	8004f4c <HAL_TIM_Base_Init>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800708e:	21c8      	movs	r1, #200	; 0xc8
 8007090:	4824      	ldr	r0, [pc, #144]	; (8007124 <MX_TIM2_Init+0xd0>)
 8007092:	f7f9 fb54 	bl	800073e <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800709c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070a0:	4619      	mov	r1, r3
 80070a2:	481f      	ldr	r0, [pc, #124]	; (8007120 <MX_TIM2_Init+0xcc>)
 80070a4:	f7fe f8fe 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <MX_TIM2_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80070ae:	21ce      	movs	r1, #206	; 0xce
 80070b0:	481c      	ldr	r0, [pc, #112]	; (8007124 <MX_TIM2_Init+0xd0>)
 80070b2:	f7f9 fb44 	bl	800073e <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80070b6:	481a      	ldr	r0, [pc, #104]	; (8007120 <MX_TIM2_Init+0xcc>)
 80070b8:	f7fd ffa0 	bl	8004ffc <HAL_TIM_OC_Init>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <MX_TIM2_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80070c2:	21d3      	movs	r1, #211	; 0xd3
 80070c4:	4817      	ldr	r0, [pc, #92]	; (8007124 <MX_TIM2_Init+0xd0>)
 80070c6:	f7f9 fb3a 	bl	800073e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80070d2:	f107 031c 	add.w	r3, r7, #28
 80070d6:	4619      	mov	r1, r3
 80070d8:	4811      	ldr	r0, [pc, #68]	; (8007120 <MX_TIM2_Init+0xcc>)
 80070da:	f7fe fddf 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <MX_TIM2_Init+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 80070e4:	21da      	movs	r1, #218	; 0xda
 80070e6:	480f      	ldr	r0, [pc, #60]	; (8007124 <MX_TIM2_Init+0xd0>)
 80070e8:	f7f9 fb29 	bl	800073e <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80070ec:	2300      	movs	r3, #0
 80070ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0xFFFFFFFF;
 80070f0:	f04f 33ff 	mov.w	r3, #4294967295
 80070f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80070fe:	463b      	mov	r3, r7
 8007100:	2200      	movs	r2, #0
 8007102:	4619      	mov	r1, r3
 8007104:	4806      	ldr	r0, [pc, #24]	; (8007120 <MX_TIM2_Init+0xcc>)
 8007106:	f7fe f84f 	bl	80051a8 <HAL_TIM_OC_ConfigChannel>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <MX_TIM2_Init+0xc4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007110:	21e3      	movs	r1, #227	; 0xe3
 8007112:	4804      	ldr	r0, [pc, #16]	; (8007124 <MX_TIM2_Init+0xd0>)
 8007114:	f7f9 fb13 	bl	800073e <_Error_Handler>
  }

}
 8007118:	bf00      	nop
 800711a:	3738      	adds	r7, #56	; 0x38
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200004dc 	.word	0x200004dc
 8007124:	080091b8 	.word	0x080091b8

08007128 <MX_TIM5_Init>:

static void MX_TIM5_Init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007130:	4a26      	ldr	r2, [pc, #152]	; (80071cc <MX_TIM5_Init+0xa4>)
 8007132:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007136:	2204      	movs	r2, #4
 8007138:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <MX_TIM5_Init+0xa0>)
 800713c:	2200      	movs	r2, #0
 800713e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = GPI_FAST_CLOCK_RATE * DOG_PERIOD;
 8007140:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007142:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <MX_TIM5_Init+0xa8>)
 8007144:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007148:	2200      	movs	r2, #0
 800714a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <MX_TIM5_Init+0xa0>)
 800714e:	2200      	movs	r2, #0
 8007150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007152:	481d      	ldr	r0, [pc, #116]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007154:	f7fd fefa 	bl	8004f4c <HAL_TIM_Base_Init>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <MX_TIM5_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800715e:	21f5      	movs	r1, #245	; 0xf5
 8007160:	481c      	ldr	r0, [pc, #112]	; (80071d4 <MX_TIM5_Init+0xac>)
 8007162:	f7f9 faec 	bl	800073e <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800716c:	f107 0310 	add.w	r3, r7, #16
 8007170:	4619      	mov	r1, r3
 8007172:	4815      	ldr	r0, [pc, #84]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007174:	f7fe f896 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <MX_TIM5_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800717e:	21fb      	movs	r1, #251	; 0xfb
 8007180:	4814      	ldr	r0, [pc, #80]	; (80071d4 <MX_TIM5_Init+0xac>)
 8007182:	f7f9 fadc 	bl	800073e <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8007186:	4810      	ldr	r0, [pc, #64]	; (80071c8 <MX_TIM5_Init+0xa0>)
 8007188:	f7fd ff38 	bl	8004ffc <HAL_TIM_OC_Init>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <MX_TIM5_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007196:	480f      	ldr	r0, [pc, #60]	; (80071d4 <MX_TIM5_Init+0xac>)
 8007198:	f7f9 fad1 	bl	800073e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800719c:	2300      	movs	r3, #0
 800719e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80071a4:	1d3b      	adds	r3, r7, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4807      	ldr	r0, [pc, #28]	; (80071c8 <MX_TIM5_Init+0xa0>)
 80071aa:	f7fe fd77 	bl	8005c9c <HAL_TIMEx_MasterConfigSynchronization>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <MX_TIM5_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80071b4:	f240 1107 	movw	r1, #263	; 0x107
 80071b8:	4806      	ldr	r0, [pc, #24]	; (80071d4 <MX_TIM5_Init+0xac>)
 80071ba:	f7f9 fac0 	bl	800073e <_Error_Handler>
  }
}
 80071be:	bf00      	nop
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000354 	.word	0x20000354
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	1312d000 	.word	0x1312d000
 80071d4:	080091b8 	.word	0x080091b8

080071d8 <MX_LPTIM1_Init>:

void MX_LPTIM1_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 80071dc:	4b14      	ldr	r3, [pc, #80]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <MX_LPTIM1_Init+0x5c>)
 80071e0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071f4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80071fc:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <MX_LPTIM1_Init+0x58>)
 80071fe:	2200      	movs	r2, #0
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <MX_LPTIM1_Init+0x58>)
 8007204:	2200      	movs	r2, #0
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <MX_LPTIM1_Init+0x58>)
 800720a:	2200      	movs	r2, #0
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <MX_LPTIM1_Init+0x58>)
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8007214:	4806      	ldr	r0, [pc, #24]	; (8007230 <MX_LPTIM1_Init+0x58>)
 8007216:	f7fc fa4d 	bl	80036b4 <HAL_LPTIM_Init>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <MX_LPTIM1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007220:	f240 1119 	movw	r1, #281	; 0x119
 8007224:	4804      	ldr	r0, [pc, #16]	; (8007238 <MX_LPTIM1_Init+0x60>)
 8007226:	f7f9 fa8a 	bl	800073e <_Error_Handler>
  }

}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200003f8 	.word	0x200003f8
 8007234:	40007c00 	.word	0x40007c00
 8007238:	080091b8 	.word	0x080091b8

0800723c <HAL_LPTIM_Start>:

void HAL_LPTIM_Start(LPTIM_HandleTypeDef *hlptim){
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800725a:	60da      	str	r2, [r3, #12]

  __HAL_LPTIM_ENABLE(hlptim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	611a      	str	r2, [r3, #16]

	__HAL_LPTIM_AUTORELOAD_SET(hlptim, 65535);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007274:	619a      	str	r2, [r3, #24]

  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0204 	orr.w	r2, r2, #4
 8007284:	611a      	str	r2, [r3, #16]

  hlptim->State= HAL_LPTIM_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80072a0:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072a2:	4a16      	ldr	r2, [pc, #88]	; (80072fc <MX_USART2_UART_Init+0x60>)
 80072a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80072ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80072ae:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072bc:	2200      	movs	r2, #0
 80072be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80072c0:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072c2:	220c      	movs	r2, #12
 80072c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80072d8:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072da:	2200      	movs	r2, #0
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80072de:	4806      	ldr	r0, [pc, #24]	; (80072f8 <MX_USART2_UART_Init+0x5c>)
 80072e0:	f7fe fd38 	bl	8005d54 <HAL_UART_Init>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80072ea:	f240 113b 	movw	r1, #315	; 0x13b
 80072ee:	4804      	ldr	r0, [pc, #16]	; (8007300 <MX_USART2_UART_Init+0x64>)
 80072f0:	f7f9 fa25 	bl	800073e <_Error_Handler>
  }
}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000560 	.word	0x20000560
 80072fc:	40004400 	.word	0x40004400
 8007300:	080091b8 	.word	0x080091b8

08007304 <_read>:

int _read (int fd, char *pBuffer, int size)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e011      	b.n	800733a <_read+0x36>
    {
      while((USART2->ISR&0X40)==0);
 8007316:	bf00      	nop
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <_read+0x4c>)
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0f9      	beq.n	8007318 <_read+0x14>
      pBuffer[i] = USART2->RDR;
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <_read+0x4c>)
 8007326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007328:	b299      	uxth	r1, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	4413      	add	r3, r2
 8007330:	b2ca      	uxtb	r2, r1
 8007332:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3301      	adds	r3, #1
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	dbe9      	blt.n	8007316 <_read+0x12>
    }
    return size;
 8007342:	687b      	ldr	r3, [r7, #4]
}
 8007344:	4618      	mov	r0, r3
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40004400 	.word	0x40004400

08007354 <_write>:

int _write (int fd, char *pBuffer, int size)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e010      	b.n	8007388 <_write+0x34>
    {
      while((USART2->ISR&0X40)==0);
 8007366:	bf00      	nop
 8007368:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <_write+0x4c>)
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f9      	beq.n	8007368 <_write+0x14>
      USART2->TDR = (uint8_t) pBuffer[i];
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	4413      	add	r3, r2
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <_write+0x4c>)
 800737e:	b292      	uxth	r2, r2
 8007380:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < size; i++)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	3301      	adds	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	dbea      	blt.n	8007366 <_write+0x12>
    }
    return size;
 8007390:	687b      	ldr	r3, [r7, #4]
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40004400 	.word	0x40004400

080073a4 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073aa:	4a1a      	ldr	r2, [pc, #104]	; (8007414 <MX_USART3_UART_Init+0x70>)
 80073ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80073ae:	4b18      	ldr	r3, [pc, #96]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80073bc:	4b14      	ldr	r3, [pc, #80]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073be:	2200      	movs	r2, #0
 80073c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80073c8:	4b11      	ldr	r3, [pc, #68]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073ca:	220c      	movs	r2, #12
 80073cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ce:	4b10      	ldr	r3, [pc, #64]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80073d4:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	61da      	str	r2, [r3, #28]
  // huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_DeInit(&huart3) != HAL_OK)
 80073e0:	480b      	ldr	r0, [pc, #44]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073e2:	f7fe fd08 	bl	8005df6 <HAL_UART_DeInit>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80073ec:	f240 1163 	movw	r1, #355	; 0x163
 80073f0:	4809      	ldr	r0, [pc, #36]	; (8007418 <MX_USART3_UART_Init+0x74>)
 80073f2:	f7f9 f9a4 	bl	800073e <_Error_Handler>
  }
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80073f6:	4806      	ldr	r0, [pc, #24]	; (8007410 <MX_USART3_UART_Init+0x6c>)
 80073f8:	f7fe fcac 	bl	8005d54 <HAL_UART_Init>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8007402:	f240 1167 	movw	r1, #359	; 0x167
 8007406:	4804      	ldr	r0, [pc, #16]	; (8007418 <MX_USART3_UART_Init+0x74>)
 8007408:	f7f9 f999 	bl	800073e <_Error_Handler>
  }
}
 800740c:	bf00      	nop
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2000026c 	.word	0x2000026c
 8007414:	40004800 	.word	0x40004800
 8007418:	080091b8 	.word	0x080091b8

0800741c <MX_RTC_Init>:
    GPS_Uart_Irq();
  #endif
}

static void MX_RTC_Init(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <MX_RTC_Init+0x70>)
 8007422:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <MX_RTC_Init+0x74>)
 8007424:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <MX_RTC_Init+0x70>)
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <MX_RTC_Init+0x70>)
 800742e:	227f      	movs	r2, #127	; 0x7f
 8007430:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <MX_RTC_Init+0x70>)
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <MX_RTC_Init+0x70>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <MX_RTC_Init+0x70>)
 8007440:	2200      	movs	r2, #0
 8007442:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <MX_RTC_Init+0x70>)
 8007446:	2200      	movs	r2, #0
 8007448:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <MX_RTC_Init+0x70>)
 800744c:	2200      	movs	r2, #0
 800744e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007450:	480e      	ldr	r0, [pc, #56]	; (800748c <MX_RTC_Init+0x70>)
 8007452:	f7fd fc65 	bl	8004d20 <HAL_RTC_Init>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <MX_RTC_Init+0x4a>
  {
    Error_Handler();
 800745c:	f240 1181 	movw	r1, #385	; 0x181
 8007460:	480c      	ldr	r0, [pc, #48]	; (8007494 <MX_RTC_Init+0x78>)
 8007462:	f7f9 f96c 	bl	800073e <_Error_Handler>
  }
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <MX_RTC_Init+0x70>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	22ca      	movs	r2, #202	; 0xca
 800746c:	625a      	str	r2, [r3, #36]	; 0x24
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <MX_RTC_Init+0x70>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2253      	movs	r2, #83	; 0x53
 8007474:	625a      	str	r2, [r3, #36]	; 0x24
  // disable RTC wakeup
  CLEAR_BIT(hrtc.Instance->CR, RTC_CR_WUTE);
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <MX_RTC_Init+0x70>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	4b03      	ldr	r3, [pc, #12]	; (800748c <MX_RTC_Init+0x70>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000454 	.word	0x20000454
 8007490:	40002800 	.word	0x40002800
 8007494:	080091b8 	.word	0x080091b8

08007498 <MX_CRC_Init>:

#if MX_FLASH_FILE

static void MX_CRC_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* CRC configured */
  CrcHandle.Instance = CRC;
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <MX_CRC_Init+0x58>)
 800749e:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <MX_CRC_Init+0x5c>)
 80074a0:	601a      	str	r2, [r3, #0]

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 80074a2:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <MX_CRC_Init+0x58>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	711a      	strb	r2, [r3, #4]
  CrcHandle.Init.GeneratingPolynomial    = 0x1021;
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <MX_CRC_Init+0x58>)
 80074aa:	f241 0221 	movw	r2, #4129	; 0x1021
 80074ae:	609a      	str	r2, [r3, #8]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <MX_CRC_Init+0x58>)
 80074b2:	2208      	movs	r2, #8
 80074b4:	60da      	str	r2, [r3, #12]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <MX_CRC_Init+0x58>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	715a      	strb	r2, [r3, #5]
  CrcHandle.Init.InitValue               = 0;
 80074bc:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <MX_CRC_Init+0x58>)
 80074be:	2200      	movs	r2, #0
 80074c0:	611a      	str	r2, [r3, #16]

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <MX_CRC_Init+0x58>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	615a      	str	r2, [r3, #20]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <MX_CRC_Init+0x58>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	619a      	str	r2, [r3, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <MX_CRC_Init+0x58>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	621a      	str	r2, [r3, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 80074d4:	4806      	ldr	r0, [pc, #24]	; (80074f0 <MX_CRC_Init+0x58>)
 80074d6:	f7f9 fe11 	bl	80010fc <HAL_CRC_Init>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <MX_CRC_Init+0x52>
  {
    /* Initialization Error */
    _Error_Handler(__FILE__, __LINE__);
 80074e0:	f240 11a5 	movw	r1, #421	; 0x1a5
 80074e4:	4804      	ldr	r0, [pc, #16]	; (80074f8 <MX_CRC_Init+0x60>)
 80074e6:	f7f9 f92a 	bl	800073e <_Error_Handler>
  }
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000430 	.word	0x20000430
 80074f4:	40023000 	.word	0x40023000
 80074f8:	080091b8 	.word	0x080091b8

080074fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007500:	4b19      	ldr	r3, [pc, #100]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007502:	4a1a      	ldr	r2, [pc, #104]	; (800756c <MX_I2C2_Init+0x70>)
 8007504:	601a      	str	r2, [r3, #0]
  // I2C speed frequency 100 KHz; Rise time 100 ns; Fall time 100 ns; Coefficient of digital filter 0;
  hi2c2.Init.Timing = 0x10D19CE4;
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007508:	4a19      	ldr	r2, [pc, #100]	; (8007570 <MX_I2C2_Init+0x74>)
 800750a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800750c:	4b16      	ldr	r3, [pc, #88]	; (8007568 <MX_I2C2_Init+0x6c>)
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007514:	2201      	movs	r2, #1
 8007516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007518:	4b13      	ldr	r3, [pc, #76]	; (8007568 <MX_I2C2_Init+0x6c>)
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800751e:	4b12      	ldr	r3, [pc, #72]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007520:	2200      	movs	r2, #0
 8007522:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007524:	4b10      	ldr	r3, [pc, #64]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007526:	2200      	movs	r2, #0
 8007528:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <MX_I2C2_Init+0x6c>)
 800752c:	2200      	movs	r2, #0
 800752e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007532:	2200      	movs	r2, #0
 8007534:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007536:	480c      	ldr	r0, [pc, #48]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007538:	f7fa fe6e 	bl	8002218 <HAL_I2C_Init>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d000      	beq.n	8007544 <MX_I2C2_Init+0x48>
  {
    while(1);
 8007542:	e7fe      	b.n	8007542 <MX_I2C2_Init+0x46>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007544:	2100      	movs	r1, #0
 8007546:	4808      	ldr	r0, [pc, #32]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007548:	f7fc f81d 	bl	8003586 <HAL_I2CEx_ConfigAnalogFilter>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d000      	beq.n	8007554 <MX_I2C2_Init+0x58>
  {
    while(1);
 8007552:	e7fe      	b.n	8007552 <MX_I2C2_Init+0x56>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007554:	2100      	movs	r1, #0
 8007556:	4804      	ldr	r0, [pc, #16]	; (8007568 <MX_I2C2_Init+0x6c>)
 8007558:	f7fc f860 	bl	800361c <HAL_I2CEx_ConfigDigitalFilter>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d000      	beq.n	8007564 <MX_I2C2_Init+0x68>
  {
    while(1);
 8007562:	e7fe      	b.n	8007562 <MX_I2C2_Init+0x66>
  }
}
 8007564:	bf00      	nop
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200002f4 	.word	0x200002f4
 800756c:	40005800 	.word	0x40005800
 8007570:	10d19ce4 	.word	0x10d19ce4

08007574 <gpi_platform_init>:
  /* USER CODE END ADC1_Init 2 */

}

void gpi_platform_init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
    ASSERT_CT(GPI_ARCH_IS_OS(NONE));
    SystemClock_Config();
 8007578:	f7ff fcca 	bl	8006f10 <SystemClock_Config>
    MX_GPIO_Init();
 800757c:	f7ff fb54 	bl	8006c28 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8007580:	f7ff fe8c 	bl	800729c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8007584:	f7ff ff0e 	bl	80073a4 <MX_USART3_UART_Init>
    #if MX_FLASH_FILE
      MX_CRC_Init();
 8007588:	f7ff ff86 	bl	8007498 <MX_CRC_Init>
    #endif
    MX_RTC_Init();
 800758c:	f7ff ff46 	bl	800741c <MX_RTC_Init>
    MX_I2C2_Init();
 8007590:	f7ff ffb4 	bl	80074fc <MX_I2C2_Init>

    MX_TIM2_Init();
 8007594:	f7ff fd5e 	bl	8007054 <MX_TIM2_Init>
    HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8007598:	2100      	movs	r1, #0
 800759a:	480f      	ldr	r0, [pc, #60]	; (80075d8 <gpi_platform_init+0x64>)
 800759c:	f7fd fd64 	bl	8005068 <HAL_TIM_OC_Start_IT>
    __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80075a0:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <gpi_platform_init+0x64>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <gpi_platform_init+0x64>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0202 	bic.w	r2, r2, #2
 80075ae:	60da      	str	r2, [r3, #12]

    MX_TIM5_Init();
 80075b0:	f7ff fdba 	bl	8007128 <MX_TIM5_Init>
    // HAL_TIM_Base_Start(&htim5);
    HAL_TIM_Base_Start(&htim5);
 80075b4:	4809      	ldr	r0, [pc, #36]	; (80075dc <gpi_platform_init+0x68>)
 80075b6:	f7fd fcf5 	bl	8004fa4 <HAL_TIM_Base_Start>
    __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <gpi_platform_init+0x68>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <gpi_platform_init+0x68>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	60da      	str	r2, [r3, #12]

		MX_LPTIM1_Init();
 80075ca:	f7ff fe05 	bl	80071d8 <MX_LPTIM1_Init>
		HAL_LPTIM_Start(&hlptim1);
 80075ce:	4804      	ldr	r0, [pc, #16]	; (80075e0 <gpi_platform_init+0x6c>)
 80075d0:	f7ff fe34 	bl	800723c <HAL_LPTIM_Start>
    // MX_IWDG_Init();
}
 80075d4:	bf00      	nop
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200004dc 	.word	0x200004dc
 80075dc:	20000354 	.word	0x20000354
 80075e0:	200003f8 	.word	0x200003f8

080075e4 <NVIC_SystemReset>:
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075e8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <NVIC_SystemReset+0x20>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80075f4:	4903      	ldr	r1, [pc, #12]	; (8007604 <NVIC_SystemReset+0x20>)
 80075f6:	4b04      	ldr	r3, [pc, #16]	; (8007608 <NVIC_SystemReset+0x24>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60cb      	str	r3, [r1, #12]
 80075fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007600:	bf00      	nop
    __NOP();
 8007602:	e7fd      	b.n	8007600 <NVIC_SystemReset+0x1c>
 8007604:	e000ed00 	.word	0xe000ed00
 8007608:	05fa0004 	.word	0x05fa0004

0800760c <BCD2DEC>:
  * @brief  Convert a BCD to a DEC
  * @param  temp: The BCD to be converted
  * @retval The converted DEC
  */
uint8_t BCD2DEC(uint8_t temp)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	71fb      	strb	r3, [r7, #7]
  return (temp - 6 * (temp >> 4));
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	4413      	add	r3, r2
 800762a:	b2db      	uxtb	r3, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <DEC2BCD>:
  * @brief  Convert a DEC to a BCD
  * @param  temp: The DEC to be converted
  * @retval The converted BCD
  */
uint8_t DEC2BCD(uint8_t temp)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  return (temp + 6 * (temp / 10));
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	4a09      	ldr	r2, [pc, #36]	; (800766c <DEC2BCD+0x34>)
 8007646:	fba2 2303 	umull	r2, r3, r2, r3
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	0052      	lsls	r2, r2, #1
 8007652:	4413      	add	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	4413      	add	r3, r2
 800765c:	b2db      	uxtb	r3, r3
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	cccccccd 	.word	0xcccccccd

08007670 <DS3231_ModifyTime>:
  * @param  second: 00–59
  * @retval None
  */
void DS3231_ModifyTime(uint8_t year, uint8_t month, uint8_t date,
                       uint8_t day, uint8_t hour, uint8_t mintue, uint8_t second)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b089      	sub	sp, #36	; 0x24
 8007674:	af04      	add	r7, sp, #16
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4623      	mov	r3, r4
 8007680:	71fb      	strb	r3, [r7, #7]
 8007682:	4603      	mov	r3, r0
 8007684:	71bb      	strb	r3, [r7, #6]
 8007686:	460b      	mov	r3, r1
 8007688:	717b      	strb	r3, [r7, #5]
 800768a:	4613      	mov	r3, r2
 800768c:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t DS3231_Databuff[DS3231_TIME_LENGTH];
  uint8_t i;
  DS3231_Databuff[DS3231_memaddr.year] = year;
 800768e:	2306      	movs	r3, #6
 8007690:	f107 0210 	add.w	r2, r7, #16
 8007694:	4413      	add	r3, r2
 8007696:	79fa      	ldrb	r2, [r7, #7]
 8007698:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.month] = month;
 800769c:	2305      	movs	r3, #5
 800769e:	f107 0210 	add.w	r2, r7, #16
 80076a2:	4413      	add	r3, r2
 80076a4:	79ba      	ldrb	r2, [r7, #6]
 80076a6:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.date] = date;
 80076aa:	2304      	movs	r3, #4
 80076ac:	f107 0210 	add.w	r2, r7, #16
 80076b0:	4413      	add	r3, r2
 80076b2:	797a      	ldrb	r2, [r7, #5]
 80076b4:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.day] = day;
 80076b8:	2303      	movs	r3, #3
 80076ba:	f107 0210 	add.w	r2, r7, #16
 80076be:	4413      	add	r3, r2
 80076c0:	793a      	ldrb	r2, [r7, #4]
 80076c2:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.hour] = hour; //default modem is 24 hour
 80076c6:	2302      	movs	r3, #2
 80076c8:	f107 0210 	add.w	r2, r7, #16
 80076cc:	4413      	add	r3, r2
 80076ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80076d2:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.min] = mintue;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f107 0210 	add.w	r2, r7, #16
 80076dc:	4413      	add	r3, r2
 80076de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80076e2:	f803 2c08 	strb.w	r2, [r3, #-8]
  DS3231_Databuff[DS3231_memaddr.sec] = second;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f107 0210 	add.w	r2, r7, #16
 80076ec:	4413      	add	r3, r2
 80076ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80076f2:	f803 2c08 	strb.w	r2, [r3, #-8]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
 80076fa:	e010      	b.n	800771e <DS3231_ModifyTime+0xae>
    DS3231_Buff[i] = DEC2BCD(DS3231_Databuff[i]);
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	f107 0210 	add.w	r2, r7, #16
 8007702:	4413      	add	r3, r2
 8007704:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007708:	7bfc      	ldrb	r4, [r7, #15]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff ff94 	bl	8007638 <DEC2BCD>
 8007710:	4603      	mov	r3, r0
 8007712:	461a      	mov	r2, r3
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <DS3231_ModifyTime+0xdc>)
 8007716:	551a      	strb	r2, [r3, r4]
  for (i = 0; i < DS3231_TIME_LENGTH; i++)
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	3301      	adds	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b06      	cmp	r3, #6
 8007722:	d9eb      	bls.n	80076fc <DS3231_ModifyTime+0x8c>
  while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, 0, I2C_MEMADD_SIZE_8BIT, DS3231_Buff, DS3231_TIME_LENGTH, 0x01) != HAL_OK)
 8007724:	bf00      	nop
 8007726:	2301      	movs	r3, #1
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	2307      	movs	r3, #7
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <DS3231_ModifyTime+0xdc>)
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	2301      	movs	r3, #1
 8007734:	2200      	movs	r2, #0
 8007736:	21d0      	movs	r1, #208	; 0xd0
 8007738:	4805      	ldr	r0, [pc, #20]	; (8007750 <DS3231_ModifyTime+0xe0>)
 800773a:	f7fa fe01 	bl	8002340 <HAL_I2C_Mem_Write>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f0      	bne.n	8007726 <DS3231_ModifyTime+0xb6>
    ;
  #endif
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bd90      	pop	{r4, r7, pc}
 800774c:	20000640 	.word	0x20000640
 8007750:	200002f4 	.word	0x200002f4

08007754 <DS3231_ClearAlarm1_Time>:
  RTC_Time.chirp_sec = DS3231.Second;
  return RTC_Time;
}

void DS3231_ClearAlarm1_Time()
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af04      	add	r7, sp, #16
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	71bb      	strb	r3, [r7, #6]
  while (!alarm_flag)
 8007762:	e060      	b.n	8007826 <DS3231_ClearAlarm1_Time+0xd2>
  {
    count++;
 8007764:	79bb      	ldrb	r3, [r7, #6]
 8007766:	3301      	adds	r3, #1
 8007768:	71bb      	strb	r3, [r7, #6]
    assert_reset((count < 10));
 800776a:	79bb      	ldrb	r3, [r7, #6]
 800776c:	2b09      	cmp	r3, #9
 800776e:	d905      	bls.n	800777c <DS3231_ClearAlarm1_Time+0x28>
 8007770:	79bb      	ldrb	r3, [r7, #6]
 8007772:	2b09      	cmp	r3, #9
 8007774:	d902      	bls.n	800777c <DS3231_ClearAlarm1_Time+0x28>
  __ASM volatile ("cpsid f" : : : "memory");
 8007776:	b671      	cpsid	f
 8007778:	f7ff ff34 	bl	80075e4 <NVIC_SystemReset>
    printf("clear alarm\n");
 800777c:	482d      	ldr	r0, [pc, #180]	; (8007834 <DS3231_ClearAlarm1_Time+0xe0>)
 800777e:	f000 ffd5 	bl	800872c <puts>
    /* read control and status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 8007782:	bf00      	nop
 8007784:	230e      	movs	r3, #14
 8007786:	b29a      	uxth	r2, r3
 8007788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	2302      	movs	r3, #2
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	4b29      	ldr	r3, [pc, #164]	; (8007838 <DS3231_ClearAlarm1_Time+0xe4>)
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	2301      	movs	r3, #1
 8007798:	21d0      	movs	r1, #208	; 0xd0
 800779a:	4828      	ldr	r0, [pc, #160]	; (800783c <DS3231_ClearAlarm1_Time+0xe8>)
 800779c:	f7fa fee2 	bl	8002564 <HAL_I2C_Mem_Read>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ee      	bne.n	8007784 <DS3231_ClearAlarm1_Time+0x30>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Control &= 0xFC;
 80077a6:	4b26      	ldr	r3, [pc, #152]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 80077a8:	7a5b      	ldrb	r3, [r3, #9]
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	4b23      	ldr	r3, [pc, #140]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 80077b2:	725a      	strb	r2, [r3, #9]
    DS3231.Status &= 0xFC;
 80077b4:	4b22      	ldr	r3, [pc, #136]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 80077b6:	7a9b      	ldrb	r3, [r3, #10]
 80077b8:	f023 0303 	bic.w	r3, r3, #3
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b20      	ldr	r3, [pc, #128]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 80077c0:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 80077c2:	bf00      	nop
 80077c4:	230e      	movs	r3, #14
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	2302      	movs	r3, #2
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	4b19      	ldr	r3, [pc, #100]	; (8007838 <DS3231_ClearAlarm1_Time+0xe4>)
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	2301      	movs	r3, #1
 80077d8:	21d0      	movs	r1, #208	; 0xd0
 80077da:	4818      	ldr	r0, [pc, #96]	; (800783c <DS3231_ClearAlarm1_Time+0xe8>)
 80077dc:	f7fa fdb0 	bl	8002340 <HAL_I2C_Mem_Write>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ee      	bne.n	80077c4 <DS3231_ClearAlarm1_Time+0x70>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm Status */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 80077e6:	bf00      	nop
 80077e8:	230e      	movs	r3, #14
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	2302      	movs	r3, #2
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	4b10      	ldr	r3, [pc, #64]	; (8007838 <DS3231_ClearAlarm1_Time+0xe4>)
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	2301      	movs	r3, #1
 80077fc:	21d0      	movs	r1, #208	; 0xd0
 80077fe:	480f      	ldr	r0, [pc, #60]	; (800783c <DS3231_ClearAlarm1_Time+0xe8>)
 8007800:	f7fa feb0 	bl	8002564 <HAL_I2C_Mem_Read>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ee      	bne.n	80077e8 <DS3231_ClearAlarm1_Time+0x94>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((!(DS3231.Control & 0x03)) && (!(DS3231.Status & 0x03)))
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 800780c:	7a5b      	ldrb	r3, [r3, #9]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d107      	bne.n	8007826 <DS3231_ClearAlarm1_Time+0xd2>
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <DS3231_ClearAlarm1_Time+0xec>)
 8007818:	7a9b      	ldrb	r3, [r3, #10]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <DS3231_ClearAlarm1_Time+0xd2>
      alarm_flag = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	71fb      	strb	r3, [r7, #7]
  while (!alarm_flag)
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d09b      	beq.n	8007764 <DS3231_ClearAlarm1_Time+0x10>
  }
  #endif
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08009148 	.word	0x08009148
 8007838:	2000065d 	.word	0x2000065d
 800783c:	200002f4 	.word	0x200002f4
 8007840:	20000654 	.word	0x20000654

08007844 <DS3231_SetAlarm1_Time>:
  * @param  mintue: 00–59
  * @param  second: 00–59
  * @retval None
  */
void DS3231_SetAlarm1_Time(uint8_t date, uint8_t hour, uint8_t mintue, uint8_t second)
{
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af04      	add	r7, sp, #16
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4623      	mov	r3, r4
 8007854:	71fb      	strb	r3, [r7, #7]
 8007856:	4603      	mov	r3, r0
 8007858:	71bb      	strb	r3, [r7, #6]
 800785a:	460b      	mov	r3, r1
 800785c:	717b      	strb	r3, [r7, #5]
 800785e:	4613      	mov	r3, r2
 8007860:	713b      	strb	r3, [r7, #4]
  #if BANK_1_RUN
  uint8_t alarm_flag = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  uint8_t count = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	73bb      	strb	r3, [r7, #14]
  while (!alarm_flag)
 800786a:	e094      	b.n	8007996 <DS3231_SetAlarm1_Time+0x152>
  {
    count++;
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	3301      	adds	r3, #1
 8007870:	73bb      	strb	r3, [r7, #14]
    assert_reset((count < 10));
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b09      	cmp	r3, #9
 8007876:	d905      	bls.n	8007884 <DS3231_SetAlarm1_Time+0x40>
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b09      	cmp	r3, #9
 800787c:	d902      	bls.n	8007884 <DS3231_SetAlarm1_Time+0x40>
 800787e:	b671      	cpsid	f
 8007880:	f7ff feb0 	bl	80075e4 <NVIC_SystemReset>
    printf("set alarm\n");
 8007884:	486c      	ldr	r0, [pc, #432]	; (8007a38 <DS3231_SetAlarm1_Time+0x1f4>)
 8007886:	f000 ff51 	bl	800872c <puts>
    /* write alarm time */
    DS3231_Buff[DS3231_memaddr.alarm1_dydt] = DEC2BCD(date);
 800788a:	230a      	movs	r3, #10
 800788c:	461c      	mov	r4, r3
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fed1 	bl	8007638 <DEC2BCD>
 8007896:	4603      	mov	r3, r0
 8007898:	461a      	mov	r2, r3
 800789a:	4b68      	ldr	r3, [pc, #416]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 800789c:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_hour] = DEC2BCD(hour);
 800789e:	2309      	movs	r3, #9
 80078a0:	461c      	mov	r4, r3
 80078a2:	79bb      	ldrb	r3, [r7, #6]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fec7 	bl	8007638 <DEC2BCD>
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	4b63      	ldr	r3, [pc, #396]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 80078b0:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_min] = DEC2BCD(mintue);
 80078b2:	2308      	movs	r3, #8
 80078b4:	461c      	mov	r4, r3
 80078b6:	797b      	ldrb	r3, [r7, #5]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff febd 	bl	8007638 <DEC2BCD>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b5e      	ldr	r3, [pc, #376]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 80078c4:	551a      	strb	r2, [r3, r4]
    DS3231_Buff[DS3231_memaddr.alarm1_sec] = DEC2BCD(second);
 80078c6:	2307      	movs	r3, #7
 80078c8:	461c      	mov	r4, r3
 80078ca:	793b      	ldrb	r3, [r7, #4]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff feb3 	bl	8007638 <DEC2BCD>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 80078d8:	551a      	strb	r2, [r3, r4]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80078da:	bf00      	nop
 80078dc:	2307      	movs	r3, #7
 80078de:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK)
 80078e0:	2307      	movs	r3, #7
 80078e2:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 80078e4:	4b55      	ldr	r3, [pc, #340]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 80078e6:	4413      	add	r3, r2
 80078e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ec:	9202      	str	r2, [sp, #8]
 80078ee:	2204      	movs	r2, #4
 80078f0:	9201      	str	r2, [sp, #4]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	2301      	movs	r3, #1
 80078f6:	460a      	mov	r2, r1
 80078f8:	21d0      	movs	r1, #208	; 0xd0
 80078fa:	4851      	ldr	r0, [pc, #324]	; (8007a40 <DS3231_SetAlarm1_Time+0x1fc>)
 80078fc:	f7fa fd20 	bl	8002340 <HAL_I2C_Mem_Write>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1ea      	bne.n	80078dc <DS3231_SetAlarm1_Time+0x98>
      ;
    /* read alarm time */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 8007906:	bf00      	nop
 8007908:	2307      	movs	r3, #7
 800790a:	b299      	uxth	r1, r3
                            &(DS3231_Buff[DS3231_memaddr.alarm1_sec]), DS3231_ALARM1_LENGTH, 0xffff) != HAL_OK);
 800790c:	2307      	movs	r3, #7
 800790e:	461a      	mov	r2, r3
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.alarm1_sec, I2C_MEMADD_SIZE_8BIT,
 8007910:	4b4a      	ldr	r3, [pc, #296]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 8007912:	4413      	add	r3, r2
 8007914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007918:	9202      	str	r2, [sp, #8]
 800791a:	2204      	movs	r2, #4
 800791c:	9201      	str	r2, [sp, #4]
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2301      	movs	r3, #1
 8007922:	460a      	mov	r2, r1
 8007924:	21d0      	movs	r1, #208	; 0xd0
 8007926:	4846      	ldr	r0, [pc, #280]	; (8007a40 <DS3231_SetAlarm1_Time+0x1fc>)
 8007928:	f7fa fe1c 	bl	8002564 <HAL_I2C_Mem_Read>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1ea      	bne.n	8007908 <DS3231_SetAlarm1_Time+0xc4>
    /* if alarm time set right, flag as 1 */
    if ((BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_dydt]) == date) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_hour]) == hour) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_min]) == mintue) && (BCD2DEC(DS3231_Buff[DS3231_memaddr.alarm1_sec]) == second))
 8007932:	230a      	movs	r3, #10
 8007934:	461a      	mov	r2, r3
 8007936:	4b41      	ldr	r3, [pc, #260]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 8007938:	5c9b      	ldrb	r3, [r3, r2]
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fe66 	bl	800760c <BCD2DEC>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	4293      	cmp	r3, r2
 8007948:	d125      	bne.n	8007996 <DS3231_SetAlarm1_Time+0x152>
 800794a:	2309      	movs	r3, #9
 800794c:	461a      	mov	r2, r3
 800794e:	4b3b      	ldr	r3, [pc, #236]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 8007950:	5c9b      	ldrb	r3, [r3, r2]
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fe5a 	bl	800760c <BCD2DEC>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	79bb      	ldrb	r3, [r7, #6]
 800795e:	4293      	cmp	r3, r2
 8007960:	d119      	bne.n	8007996 <DS3231_SetAlarm1_Time+0x152>
 8007962:	2308      	movs	r3, #8
 8007964:	461a      	mov	r2, r3
 8007966:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 8007968:	5c9b      	ldrb	r3, [r3, r2]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fe4e 	bl	800760c <BCD2DEC>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	797b      	ldrb	r3, [r7, #5]
 8007976:	4293      	cmp	r3, r2
 8007978:	d10d      	bne.n	8007996 <DS3231_SetAlarm1_Time+0x152>
 800797a:	2307      	movs	r3, #7
 800797c:	461a      	mov	r2, r3
 800797e:	4b2f      	ldr	r3, [pc, #188]	; (8007a3c <DS3231_SetAlarm1_Time+0x1f8>)
 8007980:	5c9b      	ldrb	r3, [r3, r2]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fe42 	bl	800760c <BCD2DEC>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	793b      	ldrb	r3, [r7, #4]
 800798e:	4293      	cmp	r3, r2
 8007990:	d101      	bne.n	8007996 <DS3231_SetAlarm1_Time+0x152>
      alarm_flag = 1;
 8007992:	2301      	movs	r3, #1
 8007994:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f43f af67 	beq.w	800786c <DS3231_SetAlarm1_Time+0x28>
  }
  alarm_flag = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 80079a2:	e042      	b.n	8007a2a <DS3231_SetAlarm1_Time+0x1e6>
  {
    printf("Enable alarm\n");
 80079a4:	4827      	ldr	r0, [pc, #156]	; (8007a44 <DS3231_SetAlarm1_Time+0x200>)
 80079a6:	f000 fec1 	bl	800872c <puts>
    // Enable the A1IE and INTCN in Control (0Eh)
    DS3231.Control |= 0x05;
 80079aa:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 80079ac:	7a5b      	ldrb	r3, [r3, #9]
 80079ae:	f043 0305 	orr.w	r3, r3, #5
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 80079b6:	725a      	strb	r2, [r3, #9]
    // Clear the AF1 and AF2 in Status (0Fh)
    DS3231.Status &= 0xFC;
 80079b8:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 80079ba:	7a9b      	ldrb	r3, [r3, #10]
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 80079c4:	729a      	strb	r2, [r3, #10]
    while (HAL_I2C_Mem_Write(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 80079c6:	bf00      	nop
 80079c8:	230e      	movs	r3, #14
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079d0:	9302      	str	r3, [sp, #8]
 80079d2:	2302      	movs	r3, #2
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <DS3231_SetAlarm1_Time+0x208>)
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	2301      	movs	r3, #1
 80079dc:	21d0      	movs	r1, #208	; 0xd0
 80079de:	4818      	ldr	r0, [pc, #96]	; (8007a40 <DS3231_SetAlarm1_Time+0x1fc>)
 80079e0:	f7fa fcae 	bl	8002340 <HAL_I2C_Mem_Write>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1ee      	bne.n	80079c8 <DS3231_SetAlarm1_Time+0x184>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK)
      ;
    /* read alarm enable */
    while (HAL_I2C_Mem_Read(&hi2c2, DS3231_ADD, DS3231_memaddr.control, I2C_MEMADD_SIZE_8BIT,
 80079ea:	bf00      	nop
 80079ec:	230e      	movs	r3, #14
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	2302      	movs	r3, #2
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <DS3231_SetAlarm1_Time+0x208>)
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2301      	movs	r3, #1
 8007a00:	21d0      	movs	r1, #208	; 0xd0
 8007a02:	480f      	ldr	r0, [pc, #60]	; (8007a40 <DS3231_SetAlarm1_Time+0x1fc>)
 8007a04:	f7fa fdae 	bl	8002564 <HAL_I2C_Mem_Read>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1ee      	bne.n	80079ec <DS3231_SetAlarm1_Time+0x1a8>
                            &(DS3231.Control), 2, 0xffff) != HAL_OK);
    if ((DS3231.Control & 0x05) && (!(DS3231.Status & 0x03)))
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 8007a10:	7a5b      	ldrb	r3, [r3, #9]
 8007a12:	f003 0305 	and.w	r3, r3, #5
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <DS3231_SetAlarm1_Time+0x1e6>
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <DS3231_SetAlarm1_Time+0x204>)
 8007a1c:	7a9b      	ldrb	r3, [r3, #10]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <DS3231_SetAlarm1_Time+0x1e6>
      alarm_flag = 1;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
  while (!alarm_flag)
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0b9      	beq.n	80079a4 <DS3231_SetAlarm1_Time+0x160>
  }
  #endif
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd90      	pop	{r4, r7, pc}
 8007a38:	08009154 	.word	0x08009154
 8007a3c:	20000640 	.word	0x20000640
 8007a40:	200002f4 	.word	0x200002f4
 8007a44:	08009160 	.word	0x08009160
 8007a48:	20000654 	.word	0x20000654
 8007a4c:	2000065d 	.word	0x2000065d

08007a50 <Bank1_WRP>:
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */

uint32_t Bank1_WRP(uint32_t strtA_offset, uint32_t endA_offset)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08e      	sub	sp, #56	; 0x38
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]

	/* Check the parameters */
	assert_param(IS_FLASH_PAGE(strtA_offset));
	assert_param(IS_FLASH_PAGE(endA_offset));
	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 8007a5a:	f7f9 fc6f 	bl	800133c <HAL_FLASH_Unlock>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 8007a64:	f7f9 fc8c 	bl	8001380 <HAL_FLASH_OB_Unlock>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a70:	4313      	orrs	r3, r2
 8007a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 8007a76:	23aa      	movs	r3, #170	; 0xaa
 8007a78:	61fb      	str	r3, [r7, #28]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPEndOffset = endA_offset;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	61bb      	str	r3, [r7, #24]
	OptionsBytesStruct1.WRPStartOffset = strtA_offset;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	617b      	str	r3, [r7, #20]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8007a8a:	f107 030c 	add.w	r3, r7, #12
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7f9 fd02 	bl	8001498 <HAL_FLASHEx_OBProgram>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 8007aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <Bank1_WRP+0x5e>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e000      	b.n	8007ab0 <Bank1_WRP+0x60>
 8007aae:	2307      	movs	r3, #7
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3738      	adds	r7, #56	; 0x38
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <Bank1_nWRP>:
  * @brief  Reset the FLASH_WRP1xR status of daemon flash area.
  * @param  none
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */
uint32_t Bank1_nWRP( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;
	HAL_StatusTypeDef retr;

	/* Unlock the Flash to enable the flash control register access *************/
	retr = HAL_FLASH_Unlock();
 8007abe:	f7f9 fc3d 	bl	800133c <HAL_FLASH_Unlock>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Unlock the Options Bytes *************************************************/
	retr |= HAL_FLASH_OB_Unlock();
 8007ac8:	f7f9 fc5a 	bl	8001380 <HAL_FLASH_OB_Unlock>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.RDPLevel = OB_RDP_LEVEL_0;
 8007ada:	23aa      	movs	r3, #170	; 0xaa
 8007adc:	617b      	str	r3, [r7, #20]
	OptionsBytesStruct1.OptionType = OPTIONBYTE_WRP;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	607b      	str	r3, [r7, #4]
	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
	OptionsBytesStruct1.WRPEndOffset = 0x00;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
	OptionsBytesStruct1.WRPStartOffset = 0xFF;
 8007aea:	23ff      	movs	r3, #255	; 0xff
 8007aec:	60fb      	str	r3, [r7, #12]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f9 fcd1 	bl	8001498 <HAL_FLASHEx_OBProgram>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAB;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
	retr |= HAL_FLASHEx_OBProgram(&OptionsBytesStruct1);
 8007b08:	1d3b      	adds	r3, r7, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7f9 fcc4 	bl	8001498 <HAL_FLASHEx_OBProgram>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return (retr == HAL_OK ? FLASHIF_OK : FLASHIF_PROTECTION_ERRROR);
 8007b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <Bank1_nWRP+0x72>
 8007b26:	2300      	movs	r3, #0
 8007b28:	e000      	b.n	8007b2c <Bank1_nWRP+0x74>
 8007b2a:	2307      	movs	r3, #7
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3730      	adds	r7, #48	; 0x30
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <Bank_WRT_Check>:
 * @description: Read the flag in flash to check if the bank is under write protected, if under WRT, clear the corresponding option bytes and reset the bank to make it effective.
 * @param None
 * @return: None
 */
void Bank_WRT_Check( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	; 0x28
 8007b38:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OptionsBytesStruct1;

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8007b3a:	f7f9 fbff 	bl	800133c <HAL_FLASH_Unlock>

	/* Unlock the Options Bytes *************************************************/
	HAL_FLASH_OB_Unlock();
 8007b3e:	f7f9 fc1f 	bl	8001380 <HAL_FLASH_OB_Unlock>

	OptionsBytesStruct1.WRPArea = OB_WRPAREA_BANK1_AREAA;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
	HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct1);
 8007b46:	463b      	mov	r3, r7
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7f9 fd13 	bl	8001574 <HAL_FLASHEx_OBGetConfig>
	if((OptionsBytesStruct1.WRPStartOffset == 0) && (OptionsBytesStruct1.WRPEndOffset == 0xff))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <Bank_WRT_Check+0x2e>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2bff      	cmp	r3, #255	; 0xff
 8007b58:	d103      	bne.n	8007b62 <Bank_WRT_Check+0x2e>
	{
        /* Boot come back from FUT in Bank 2, need to unlock the write protection of flash */
        Bank1_nWRP();
 8007b5a:	f7ff ffad 	bl	8007ab8 <Bank1_nWRP>
        HAL_FLASH_OB_Launch();
 8007b5e:	f7f9 fc2b 	bl	80013b8 <HAL_FLASH_OB_Launch>
	}
}
 8007b62:	bf00      	nop
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <LL_FLASH_IsActiveFlag_BSY>:
  FLASH_CHK_OK = 0,
  FLASH_CHK_EMPTY
};

__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_BSY(FLASH_TypeDef *FLASHx)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(FLASHx->SR, FLASH_SR_BSY) == (FLASH_SR_BSY));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <LL_FLASH_SET_OBL_Launch>:
  /* Set the OBL_Launch bit to launch the option byte loading */
__STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	615a      	str	r2, [r3, #20]
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <LL_FLASH_Lock>:
__STATIC_INLINE void LL_FLASH_Lock(FLASH_TypeDef *FLASHx)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_LOCK);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	615a      	str	r2, [r3, #20]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <LL_FLASH_LockState>:
/*read flash's states of lock or unlock*/
__STATIC_INLINE uint32_t LL_FLASH_LockState(FLASH_TypeDef *FLASHx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
	return READ_BIT(FLASHx->CR,FLASH_CR_LOCK);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <LL_FLASh_SetKey>:
/*set key for flash*/
__STATIC_INLINE void LL_FLASh_SetKey(FLASH_TypeDef *FLASHx,uint32_t key)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
	WRITE_REG(FLASHx->KEYR,key);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	609a      	str	r2, [r3, #8]
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <LL_FLASH_EnableProgram>:

/*EnableProgram*/
__STATIC_INLINE void LL_FLASH_EnableProgram(FLASH_TypeDef *FLASHx)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR,FLASH_CR_PG);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	615a      	str	r2, [r3, #20]
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <LL_FLASH_DisenableProgram>:
/*DisenableProgram*/
__STATIC_INLINE void LL_FLASH_DisenableProgram(FLASH_TypeDef *FLASHx)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(FLASHx->CR,FLASH_CR_PG);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f023 0201 	bic.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	615a      	str	r2, [r3, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <LL_FLASH_PageErase>:
uint8_t LL_Flash_Unlock(void);
uint32_t FLASH_If_Check(uint32_t start);
uint8_t LL_FLASH_OB_Unlock(void);

uint8_t LL_FLASH_PageErase(uint16_t PageNumber)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	80fb      	strh	r3, [r7, #6]
	uint32_t BankActive;
	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8007c56:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <LL_FLASH_PageErase+0xb0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5e:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 8007c60:	f000 f8fc 	bl	8007e5c <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 8007c64:	bf00      	nop
 8007c66:	4826      	ldr	r0, [pc, #152]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c68:	f7ff ff7f 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f9      	bne.n	8007c66 <LL_FLASH_PageErase+0x1a>
	{
	}
	if(PageNumber>200)
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	2bc8      	cmp	r3, #200	; 0xc8
 8007c76:	d93b      	bls.n	8007cf0 <LL_FLASH_PageErase+0xa4>
	{
		SET_BIT(FLASH->CR, FLASH_CR_PER);        //enable flash earse
 8007c78:	4b21      	ldr	r3, [pc, #132]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	4a20      	ldr	r2, [pc, #128]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c7e:	f043 0302 	orr.w	r3, r3, #2
 8007c82:	6153      	str	r3, [r2, #20]
		if(BankActive == 0)                      //bank1 is active
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <LL_FLASH_PageErase+0x4c>
		{
			CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);   //earse bank1
 8007c8a:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	4a1c      	ldr	r2, [pc, #112]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c94:	6153      	str	r3, [r2, #20]
 8007c96:	e005      	b.n	8007ca4 <LL_FLASH_PageErase+0x58>
		}
		else                                     //bank2 is active
		{
			SET_BIT(FLASH->CR, FLASH_CR_BKER);     //earse bank2
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007c9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ca2:	6153      	str	r3, [r2, #20]
		}
	  SET_BIT(FLASH->CR, (PageNumber << 3));   //set page to earse
 8007ca4:	4b16      	ldr	r3, [pc, #88]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	00d2      	lsls	r2, r2, #3
 8007cac:	4611      	mov	r1, r2
 8007cae:	4a14      	ldr	r2, [pc, #80]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);       //start earsing...
 8007cb4:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	4a11      	ldr	r2, [pc, #68]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbe:	6153      	str	r3, [r2, #20]
		while (LL_FLASH_IsActiveFlag_BSY(FLASH)) //wait for flash operation complete
 8007cc0:	bf00      	nop
 8007cc2:	480f      	ldr	r0, [pc, #60]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cc4:	f7ff ff51 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f9      	bne.n	8007cc2 <LL_FLASH_PageErase+0x76>
	  {
	  }
		CLEAR_BIT(FLASH->CR, FLASH_CR_PNB);      //clear page to earse
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	4a0b      	ldr	r2, [pc, #44]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007cd8:	6153      	str	r3, [r2, #20]
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);      //disable flash earse
 8007cda:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007ce0:	f023 0302 	bic.w	r3, r3, #2
 8007ce4:	6153      	str	r3, [r2, #20]
	else
	{
		return LL_ERROR;
	}

	LL_FLASH_Lock(FLASH);
 8007ce6:	4806      	ldr	r0, [pc, #24]	; (8007d00 <LL_FLASH_PageErase+0xb4>)
 8007ce8:	f7ff ff63 	bl	8007bb2 <LL_FLASH_Lock>
	return LL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e000      	b.n	8007cf2 <LL_FLASH_PageErase+0xa6>
		return LL_ERROR;
 8007cf0:	2301      	movs	r3, #1
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40022000 	.word	0x40022000

08007d04 <LL_FLASH_Program64>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint8_t LL_FLASH_Program64(uint32_t faddr,uint32_t* pData)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 8007d12:	f000 f8a3 	bl	8007e5c <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8007d16:	bf00      	nop
 8007d18:	4818      	ldr	r0, [pc, #96]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d1a:	f7ff ff26 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f9      	bne.n	8007d18 <LL_FLASH_Program64+0x14>
	{
	}
	LL_FLASH_EnableProgram(FLASH);              //flash program enable
 8007d24:	4815      	ldr	r0, [pc, #84]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d26:	f7ff ff70 	bl	8007c0a <LL_FLASH_EnableProgram>
	/* Program the double word */
  *(__IO uint32_t*)faddr = *pData;            //program 4 bytes, little endian
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	6812      	ldr	r2, [r2, #0]
 8007d30:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(faddr+4) = *(pData+1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3304      	adds	r3, #4
 8007d36:	461a      	mov	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	6013      	str	r3, [r2, #0]

	prog_bit = FLASH_CR_PG;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8007d42:	bf00      	nop
 8007d44:	480d      	ldr	r0, [pc, #52]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d46:	f7ff ff10 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1f9      	bne.n	8007d44 <LL_FLASH_Program64+0x40>
	{
	}
	if(prog_bit!=0)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <LL_FLASH_Program64+0x60>
	{
		CLEAR_BIT(FLASH->CR,prog_bit);
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d58:	695a      	ldr	r2, [r3, #20]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	4907      	ldr	r1, [pc, #28]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	614b      	str	r3, [r1, #20]
	}
	LL_FLASH_DisenableProgram(FLASH);
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d66:	f7ff ff60 	bl	8007c2a <LL_FLASH_DisenableProgram>
	LL_FLASH_Lock(FLASH);
 8007d6a:	4804      	ldr	r0, [pc, #16]	; (8007d7c <LL_FLASH_Program64+0x78>)
 8007d6c:	f7ff ff21 	bl	8007bb2 <LL_FLASH_Lock>
	return LL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40022000 	.word	0x40022000

08007d80 <STMFLASH_Read32>:
	LL_FLASH_Lock(FLASH);
	return LL_OK;
}

uint32_t STMFLASH_Read32( uint32_t faddr )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  return *(__IO uint32_t*)faddr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <STMFLASH_BankSwitch>:

uint8_t STMFLASH_BankSwitch(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	uint8_t result;
	uint32_t BankActive = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	603b      	str	r3, [r7, #0]

	LL_FLASH_Lock(FLASH);
 8007da2:	482c      	ldr	r0, [pc, #176]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007da4:	f7ff ff05 	bl	8007bb2 <LL_FLASH_Lock>
	/* Clear OPTVERR bit set on virgin samples */
	if((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { SET_BIT(FLASH->ECCR, ((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }

  if((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { WRITE_REG(FLASH->SR, ((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }
 8007da8:	4b2a      	ldr	r3, [pc, #168]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007daa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007dae:	611a      	str	r2, [r3, #16]

	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8007db0:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <STMFLASH_BankSwitch+0xc0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db8:	603b      	str	r3, [r7, #0]
  result = LL_Flash_Unlock();
 8007dba:	f000 f84f 	bl	8007e5c <LL_Flash_Unlock>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]

	if( result == LL_OK)
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d140      	bne.n	8007e4a <STMFLASH_BankSwitch+0xb2>
	{
		  result = LL_FLASH_OB_Unlock();
 8007dc8:	f000 f868 	bl	8007e9c <LL_FLASH_OB_Unlock>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	71fb      	strb	r3, [r7, #7]
		  if((READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == RESET))
 8007dd0:	4b20      	ldr	r3, [pc, #128]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d116      	bne.n	8007e0a <STMFLASH_BankSwitch+0x72>
			{
				  while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8007ddc:	bf00      	nop
 8007dde:	481d      	ldr	r0, [pc, #116]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007de0:	f7ff fec3 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f9      	bne.n	8007dde <STMFLASH_BankSwitch+0x46>
					{
					}
					/* When no firmware at bank2, board is working at bank1 with BFB2 flag set. So BFB2 flag should be clear by checking bank (when FUT is at bank 1)instead of BFB2. */
					if (BankActive != 0)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <STMFLASH_BankSwitch+0x66>
					{
						CLEAR_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 8007df0:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007df6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dfa:	6213      	str	r3, [r2, #32]
 8007dfc:	e005      	b.n	8007e0a <STMFLASH_BankSwitch+0x72>
					}
					else
					{
						SET_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 8007dfe:	4b15      	ldr	r3, [pc, #84]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e08:	6213      	str	r3, [r2, #32]
					}
			}
			/* Set OPTSTRT Bit */
			SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	4a11      	ldr	r2, [pc, #68]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	6153      	str	r3, [r2, #20]
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8007e16:	bf00      	nop
 8007e18:	480e      	ldr	r0, [pc, #56]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e1a:	f7ff fea6 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f9      	bne.n	8007e18 <STMFLASH_BankSwitch+0x80>
			{
			}
			/* If the option byte program operation is completed, disable the OPTSTRT Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e2e:	6153      	str	r3, [r2, #20]

			/* Set the bit to force the option byte reloading */
			if (result == LL_OK)
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <STMFLASH_BankSwitch+0xa4>
			{
				LL_FLASH_SET_OBL_Launch(FLASH);
 8007e36:	4807      	ldr	r0, [pc, #28]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e38:	f7ff feab 	bl	8007b92 <LL_FLASH_SET_OBL_Launch>
			}
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8007e3c:	bf00      	nop
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <STMFLASH_BankSwitch+0xbc>)
 8007e40:	f7ff fe93 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f9      	bne.n	8007e3e <STMFLASH_BankSwitch+0xa6>
			{
			}
	}
	return result;
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40022000 	.word	0x40022000
 8007e58:	40010000 	.word	0x40010000

08007e5c <LL_Flash_Unlock>:

uint8_t LL_Flash_Unlock(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 8007e60:	bf00      	nop
 8007e62:	480b      	ldr	r0, [pc, #44]	; (8007e90 <LL_Flash_Unlock+0x34>)
 8007e64:	f7ff fe81 	bl	8007b6a <LL_FLASH_IsActiveFlag_BSY>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f9      	bne.n	8007e62 <LL_Flash_Unlock+0x6>
	{
	}
	if (LL_FLASH_LockState(FLASH)!=0)
 8007e6e:	4808      	ldr	r0, [pc, #32]	; (8007e90 <LL_Flash_Unlock+0x34>)
 8007e70:	f7ff feaf 	bl	8007bd2 <LL_FLASH_LockState>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <LL_Flash_Unlock+0x2e>
	{
		LL_FLASh_SetKey(FLASH,FLASH_KEY1);
 8007e7a:	4906      	ldr	r1, [pc, #24]	; (8007e94 <LL_Flash_Unlock+0x38>)
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <LL_Flash_Unlock+0x34>)
 8007e7e:	f7ff feb6 	bl	8007bee <LL_FLASh_SetKey>
		LL_FLASh_SetKey(FLASH,FLASH_KEY2);
 8007e82:	4905      	ldr	r1, [pc, #20]	; (8007e98 <LL_Flash_Unlock+0x3c>)
 8007e84:	4802      	ldr	r0, [pc, #8]	; (8007e90 <LL_Flash_Unlock+0x34>)
 8007e86:	f7ff feb2 	bl	8007bee <LL_FLASh_SetKey>
	}
	return LL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40022000 	.word	0x40022000
 8007e94:	45670123 	.word	0x45670123
 8007e98:	cdef89ab 	.word	0xcdef89ab

08007e9c <LL_FLASH_OB_Unlock>:
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASH_CHK_EMPTY;
  return FLASH_CHK_OK;
}
uint8_t LL_FLASH_OB_Unlock(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != RESET)
 8007ea0:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <LL_FLASH_OB_Unlock+0x2c>)
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <LL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);//allow programming
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <LL_FLASH_OB_Unlock+0x2c>)
 8007eae:	4a07      	ldr	r2, [pc, #28]	; (8007ecc <LL_FLASH_OB_Unlock+0x30>)
 8007eb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);//allow erasing
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <LL_FLASH_OB_Unlock+0x2c>)
 8007eb4:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <LL_FLASH_OB_Unlock+0x34>)
 8007eb6:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return LL_ERROR;
  }
  return LL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <LL_FLASH_OB_Unlock+0x22>
    return LL_ERROR;
 8007ebc:	2301      	movs	r3, #1
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	40022000 	.word	0x40022000
 8007ecc:	08192a3b 	.word	0x08192a3b
 8007ed0:	4c5d6e7f 	.word	0x4c5d6e7f

08007ed4 <Reset_Handler>:
					)
				}
#endif

void Reset_Handler(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
					__ASM volatile
 8007eda:	f8df d060 	ldr.w	sp, [pc, #96]	; 8007f3c <LoopForever+0x10>
 8007ede:	2100      	movs	r1, #0
 8007ee0:	e003      	b.n	8007eea <LoopCopyDataInit>

08007ee2 <CopyDataInit>:
 8007ee2:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <LoopForever+0x14>)
 8007ee4:	585b      	ldr	r3, [r3, r1]
 8007ee6:	5043      	str	r3, [r0, r1]
 8007ee8:	3104      	adds	r1, #4

08007eea <LoopCopyDataInit>:
 8007eea:	4816      	ldr	r0, [pc, #88]	; (8007f44 <LoopForever+0x18>)
 8007eec:	4b16      	ldr	r3, [pc, #88]	; (8007f48 <LoopForever+0x1c>)
 8007eee:	1842      	adds	r2, r0, r1
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d3f6      	bcc.n	8007ee2 <CopyDataInit>
 8007ef4:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <LoopForever+0x20>)
 8007ef6:	e002      	b.n	8007efe <LoopFillZerobss>

08007ef8 <FillZerobss>:
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f842 3b04 	str.w	r3, [r2], #4

08007efe <LoopFillZerobss>:
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <LoopForever+0x24>)
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3f9      	bcc.n	8007ef8 <FillZerobss>
	#if defined ( __GNUC__ )
		BEFORE_MAIN();
		SystemInit();
 8007f04:	f7f8 ff06 	bl	8000d14 <SystemInit>
	#else
		SystemInit();
	#endif
	/* Only examine JUMP when in bank 2 */
	uint32_t BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <LoopForever+0xc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	607b      	str	r3, [r7, #4]
	if (((BankActive != 0) && (TOGGLE_RESET_EXTI_CALLBACK() == FLAG_WRT_OK)) || (BankActive == 0))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <LoopFillZerobss+0x24>
 8007f18:	f000 ff7a 	bl	8008e10 <_etext>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <LoopFillZerobss+0x2a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <LoopForever+0x2>
					__ASM volatile
 8007f28:	f7f8 fc02 	bl	8000730 <main>

08007f2c <LoopForever>:
 8007f2c:	e7fe      	b.n	8007f2c <LoopForever>
		INTO_MAIN();
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	20018000 	.word	0x20018000
 8007f40:	08009290 	.word	0x08009290
 8007f44:	20000000 	.word	0x20000000
 8007f48:	20000090 	.word	0x20000090
 8007f4c:	20000090 	.word	0x20000090
 8007f50:	2000066c 	.word	0x2000066c

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <_free_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4605      	mov	r5, r0
 8007f68:	2900      	cmp	r1, #0
 8007f6a:	d045      	beq.n	8007ff8 <_free_r+0x94>
 8007f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f70:	1f0c      	subs	r4, r1, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfb8      	it	lt
 8007f76:	18e4      	addlt	r4, r4, r3
 8007f78:	f000 fe8e 	bl	8008c98 <__malloc_lock>
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <_free_r+0x98>)
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	4610      	mov	r0, r2
 8007f82:	b933      	cbnz	r3, 8007f92 <_free_r+0x2e>
 8007f84:	6063      	str	r3, [r4, #4]
 8007f86:	6014      	str	r4, [r2, #0]
 8007f88:	4628      	mov	r0, r5
 8007f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8e:	f000 be84 	b.w	8008c9a <__malloc_unlock>
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	d90c      	bls.n	8007fb0 <_free_r+0x4c>
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1862      	adds	r2, r4, r1
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bf04      	itt	eq
 8007f9e:	681a      	ldreq	r2, [r3, #0]
 8007fa0:	685b      	ldreq	r3, [r3, #4]
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	bf04      	itt	eq
 8007fa6:	1852      	addeq	r2, r2, r1
 8007fa8:	6022      	streq	r2, [r4, #0]
 8007faa:	6004      	str	r4, [r0, #0]
 8007fac:	e7ec      	b.n	8007f88 <_free_r+0x24>
 8007fae:	4613      	mov	r3, r2
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	b10a      	cbz	r2, 8007fb8 <_free_r+0x54>
 8007fb4:	42a2      	cmp	r2, r4
 8007fb6:	d9fa      	bls.n	8007fae <_free_r+0x4a>
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	1858      	adds	r0, r3, r1
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d10b      	bne.n	8007fd8 <_free_r+0x74>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	1858      	adds	r0, r3, r1
 8007fc6:	4282      	cmp	r2, r0
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	d1dd      	bne.n	8007f88 <_free_r+0x24>
 8007fcc:	6810      	ldr	r0, [r2, #0]
 8007fce:	6852      	ldr	r2, [r2, #4]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	6019      	str	r1, [r3, #0]
 8007fd6:	e7d7      	b.n	8007f88 <_free_r+0x24>
 8007fd8:	d902      	bls.n	8007fe0 <_free_r+0x7c>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	e7d3      	b.n	8007f88 <_free_r+0x24>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	1821      	adds	r1, r4, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	bf04      	itt	eq
 8007fe8:	6811      	ldreq	r1, [r2, #0]
 8007fea:	6852      	ldreq	r2, [r2, #4]
 8007fec:	6062      	str	r2, [r4, #4]
 8007fee:	bf04      	itt	eq
 8007ff0:	1809      	addeq	r1, r1, r0
 8007ff2:	6021      	streq	r1, [r4, #0]
 8007ff4:	605c      	str	r4, [r3, #4]
 8007ff6:	e7c7      	b.n	8007f88 <_free_r+0x24>
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200000f0 	.word	0x200000f0

08008000 <_malloc_r>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	1ccd      	adds	r5, r1, #3
 8008004:	f025 0503 	bic.w	r5, r5, #3
 8008008:	3508      	adds	r5, #8
 800800a:	2d0c      	cmp	r5, #12
 800800c:	bf38      	it	cc
 800800e:	250c      	movcc	r5, #12
 8008010:	2d00      	cmp	r5, #0
 8008012:	4606      	mov	r6, r0
 8008014:	db01      	blt.n	800801a <_malloc_r+0x1a>
 8008016:	42a9      	cmp	r1, r5
 8008018:	d903      	bls.n	8008022 <_malloc_r+0x22>
 800801a:	230c      	movs	r3, #12
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	2000      	movs	r0, #0
 8008020:	bd70      	pop	{r4, r5, r6, pc}
 8008022:	f000 fe39 	bl	8008c98 <__malloc_lock>
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <_malloc_r+0xac>)
 8008028:	6814      	ldr	r4, [r2, #0]
 800802a:	4621      	mov	r1, r4
 800802c:	b991      	cbnz	r1, 8008054 <_malloc_r+0x54>
 800802e:	4c20      	ldr	r4, [pc, #128]	; (80080b0 <_malloc_r+0xb0>)
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	b91b      	cbnz	r3, 800803c <_malloc_r+0x3c>
 8008034:	4630      	mov	r0, r6
 8008036:	f000 fb81 	bl	800873c <_sbrk_r>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	4629      	mov	r1, r5
 800803e:	4630      	mov	r0, r6
 8008040:	f000 fb7c 	bl	800873c <_sbrk_r>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d124      	bne.n	8008092 <_malloc_r+0x92>
 8008048:	230c      	movs	r3, #12
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 fe24 	bl	8008c9a <__malloc_unlock>
 8008052:	e7e4      	b.n	800801e <_malloc_r+0x1e>
 8008054:	680b      	ldr	r3, [r1, #0]
 8008056:	1b5b      	subs	r3, r3, r5
 8008058:	d418      	bmi.n	800808c <_malloc_r+0x8c>
 800805a:	2b0b      	cmp	r3, #11
 800805c:	d90f      	bls.n	800807e <_malloc_r+0x7e>
 800805e:	600b      	str	r3, [r1, #0]
 8008060:	50cd      	str	r5, [r1, r3]
 8008062:	18cc      	adds	r4, r1, r3
 8008064:	4630      	mov	r0, r6
 8008066:	f000 fe18 	bl	8008c9a <__malloc_unlock>
 800806a:	f104 000b 	add.w	r0, r4, #11
 800806e:	1d23      	adds	r3, r4, #4
 8008070:	f020 0007 	bic.w	r0, r0, #7
 8008074:	1ac3      	subs	r3, r0, r3
 8008076:	d0d3      	beq.n	8008020 <_malloc_r+0x20>
 8008078:	425a      	negs	r2, r3
 800807a:	50e2      	str	r2, [r4, r3]
 800807c:	e7d0      	b.n	8008020 <_malloc_r+0x20>
 800807e:	428c      	cmp	r4, r1
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	bf16      	itet	ne
 8008084:	6063      	strne	r3, [r4, #4]
 8008086:	6013      	streq	r3, [r2, #0]
 8008088:	460c      	movne	r4, r1
 800808a:	e7eb      	b.n	8008064 <_malloc_r+0x64>
 800808c:	460c      	mov	r4, r1
 800808e:	6849      	ldr	r1, [r1, #4]
 8008090:	e7cc      	b.n	800802c <_malloc_r+0x2c>
 8008092:	1cc4      	adds	r4, r0, #3
 8008094:	f024 0403 	bic.w	r4, r4, #3
 8008098:	42a0      	cmp	r0, r4
 800809a:	d005      	beq.n	80080a8 <_malloc_r+0xa8>
 800809c:	1a21      	subs	r1, r4, r0
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 fb4c 	bl	800873c <_sbrk_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d0cf      	beq.n	8008048 <_malloc_r+0x48>
 80080a8:	6025      	str	r5, [r4, #0]
 80080aa:	e7db      	b.n	8008064 <_malloc_r+0x64>
 80080ac:	200000f0 	.word	0x200000f0
 80080b0:	200000f4 	.word	0x200000f4

080080b4 <__sfputc_r>:
 80080b4:	6893      	ldr	r3, [r2, #8]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	b410      	push	{r4}
 80080bc:	6093      	str	r3, [r2, #8]
 80080be:	da08      	bge.n	80080d2 <__sfputc_r+0x1e>
 80080c0:	6994      	ldr	r4, [r2, #24]
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	db01      	blt.n	80080ca <__sfputc_r+0x16>
 80080c6:	290a      	cmp	r1, #10
 80080c8:	d103      	bne.n	80080d2 <__sfputc_r+0x1e>
 80080ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ce:	f000 bb45 	b.w	800875c <__swbuf_r>
 80080d2:	6813      	ldr	r3, [r2, #0]
 80080d4:	1c58      	adds	r0, r3, #1
 80080d6:	6010      	str	r0, [r2, #0]
 80080d8:	7019      	strb	r1, [r3, #0]
 80080da:	4608      	mov	r0, r1
 80080dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <__sfputs_r>:
 80080e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e4:	4606      	mov	r6, r0
 80080e6:	460f      	mov	r7, r1
 80080e8:	4614      	mov	r4, r2
 80080ea:	18d5      	adds	r5, r2, r3
 80080ec:	42ac      	cmp	r4, r5
 80080ee:	d101      	bne.n	80080f4 <__sfputs_r+0x12>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e007      	b.n	8008104 <__sfputs_r+0x22>
 80080f4:	463a      	mov	r2, r7
 80080f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff ffda 	bl	80080b4 <__sfputc_r>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d1f3      	bne.n	80080ec <__sfputs_r+0xa>
 8008104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008108 <_vfiprintf_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	b09d      	sub	sp, #116	; 0x74
 8008110:	4617      	mov	r7, r2
 8008112:	461d      	mov	r5, r3
 8008114:	4606      	mov	r6, r0
 8008116:	b118      	cbz	r0, 8008120 <_vfiprintf_r+0x18>
 8008118:	6983      	ldr	r3, [r0, #24]
 800811a:	b90b      	cbnz	r3, 8008120 <_vfiprintf_r+0x18>
 800811c:	f000 fcce 	bl	8008abc <__sinit>
 8008120:	4b7c      	ldr	r3, [pc, #496]	; (8008314 <_vfiprintf_r+0x20c>)
 8008122:	429c      	cmp	r4, r3
 8008124:	d158      	bne.n	80081d8 <_vfiprintf_r+0xd0>
 8008126:	6874      	ldr	r4, [r6, #4]
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	0718      	lsls	r0, r3, #28
 800812c:	d55e      	bpl.n	80081ec <_vfiprintf_r+0xe4>
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d05b      	beq.n	80081ec <_vfiprintf_r+0xe4>
 8008134:	2300      	movs	r3, #0
 8008136:	9309      	str	r3, [sp, #36]	; 0x24
 8008138:	2320      	movs	r3, #32
 800813a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813e:	2330      	movs	r3, #48	; 0x30
 8008140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008144:	9503      	str	r5, [sp, #12]
 8008146:	f04f 0b01 	mov.w	fp, #1
 800814a:	46b8      	mov	r8, r7
 800814c:	4645      	mov	r5, r8
 800814e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008152:	b10b      	cbz	r3, 8008158 <_vfiprintf_r+0x50>
 8008154:	2b25      	cmp	r3, #37	; 0x25
 8008156:	d154      	bne.n	8008202 <_vfiprintf_r+0xfa>
 8008158:	ebb8 0a07 	subs.w	sl, r8, r7
 800815c:	d00b      	beq.n	8008176 <_vfiprintf_r+0x6e>
 800815e:	4653      	mov	r3, sl
 8008160:	463a      	mov	r2, r7
 8008162:	4621      	mov	r1, r4
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff ffbc 	bl	80080e2 <__sfputs_r>
 800816a:	3001      	adds	r0, #1
 800816c:	f000 80c2 	beq.w	80082f4 <_vfiprintf_r+0x1ec>
 8008170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008172:	4453      	add	r3, sl
 8008174:	9309      	str	r3, [sp, #36]	; 0x24
 8008176:	f898 3000 	ldrb.w	r3, [r8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80ba 	beq.w	80082f4 <_vfiprintf_r+0x1ec>
 8008180:	2300      	movs	r3, #0
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008192:	931a      	str	r3, [sp, #104]	; 0x68
 8008194:	46a8      	mov	r8, r5
 8008196:	2205      	movs	r2, #5
 8008198:	f818 1b01 	ldrb.w	r1, [r8], #1
 800819c:	485e      	ldr	r0, [pc, #376]	; (8008318 <_vfiprintf_r+0x210>)
 800819e:	f7f8 f817 	bl	80001d0 <memchr>
 80081a2:	9b04      	ldr	r3, [sp, #16]
 80081a4:	bb78      	cbnz	r0, 8008206 <_vfiprintf_r+0xfe>
 80081a6:	06d9      	lsls	r1, r3, #27
 80081a8:	bf44      	itt	mi
 80081aa:	2220      	movmi	r2, #32
 80081ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081b0:	071a      	lsls	r2, r3, #28
 80081b2:	bf44      	itt	mi
 80081b4:	222b      	movmi	r2, #43	; 0x2b
 80081b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081ba:	782a      	ldrb	r2, [r5, #0]
 80081bc:	2a2a      	cmp	r2, #42	; 0x2a
 80081be:	d02a      	beq.n	8008216 <_vfiprintf_r+0x10e>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	46a8      	mov	r8, r5
 80081c4:	2000      	movs	r0, #0
 80081c6:	250a      	movs	r5, #10
 80081c8:	4641      	mov	r1, r8
 80081ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ce:	3b30      	subs	r3, #48	; 0x30
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d969      	bls.n	80082a8 <_vfiprintf_r+0x1a0>
 80081d4:	b360      	cbz	r0, 8008230 <_vfiprintf_r+0x128>
 80081d6:	e024      	b.n	8008222 <_vfiprintf_r+0x11a>
 80081d8:	4b50      	ldr	r3, [pc, #320]	; (800831c <_vfiprintf_r+0x214>)
 80081da:	429c      	cmp	r4, r3
 80081dc:	d101      	bne.n	80081e2 <_vfiprintf_r+0xda>
 80081de:	68b4      	ldr	r4, [r6, #8]
 80081e0:	e7a2      	b.n	8008128 <_vfiprintf_r+0x20>
 80081e2:	4b4f      	ldr	r3, [pc, #316]	; (8008320 <_vfiprintf_r+0x218>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	bf08      	it	eq
 80081e8:	68f4      	ldreq	r4, [r6, #12]
 80081ea:	e79d      	b.n	8008128 <_vfiprintf_r+0x20>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 fb06 	bl	8008800 <__swsetup_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d09d      	beq.n	8008134 <_vfiprintf_r+0x2c>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	b01d      	add	sp, #116	; 0x74
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	46a8      	mov	r8, r5
 8008204:	e7a2      	b.n	800814c <_vfiprintf_r+0x44>
 8008206:	4a44      	ldr	r2, [pc, #272]	; (8008318 <_vfiprintf_r+0x210>)
 8008208:	1a80      	subs	r0, r0, r2
 800820a:	fa0b f000 	lsl.w	r0, fp, r0
 800820e:	4318      	orrs	r0, r3
 8008210:	9004      	str	r0, [sp, #16]
 8008212:	4645      	mov	r5, r8
 8008214:	e7be      	b.n	8008194 <_vfiprintf_r+0x8c>
 8008216:	9a03      	ldr	r2, [sp, #12]
 8008218:	1d11      	adds	r1, r2, #4
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	9103      	str	r1, [sp, #12]
 800821e:	2a00      	cmp	r2, #0
 8008220:	db01      	blt.n	8008226 <_vfiprintf_r+0x11e>
 8008222:	9207      	str	r2, [sp, #28]
 8008224:	e004      	b.n	8008230 <_vfiprintf_r+0x128>
 8008226:	4252      	negs	r2, r2
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	9207      	str	r2, [sp, #28]
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	f898 3000 	ldrb.w	r3, [r8]
 8008234:	2b2e      	cmp	r3, #46	; 0x2e
 8008236:	d10e      	bne.n	8008256 <_vfiprintf_r+0x14e>
 8008238:	f898 3001 	ldrb.w	r3, [r8, #1]
 800823c:	2b2a      	cmp	r3, #42	; 0x2a
 800823e:	d138      	bne.n	80082b2 <_vfiprintf_r+0x1aa>
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1d1a      	adds	r2, r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	9203      	str	r2, [sp, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfb8      	it	lt
 800824c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008250:	f108 0802 	add.w	r8, r8, #2
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	4d33      	ldr	r5, [pc, #204]	; (8008324 <_vfiprintf_r+0x21c>)
 8008258:	f898 1000 	ldrb.w	r1, [r8]
 800825c:	2203      	movs	r2, #3
 800825e:	4628      	mov	r0, r5
 8008260:	f7f7 ffb6 	bl	80001d0 <memchr>
 8008264:	b140      	cbz	r0, 8008278 <_vfiprintf_r+0x170>
 8008266:	2340      	movs	r3, #64	; 0x40
 8008268:	1b40      	subs	r0, r0, r5
 800826a:	fa03 f000 	lsl.w	r0, r3, r0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	4303      	orrs	r3, r0
 8008272:	f108 0801 	add.w	r8, r8, #1
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	f898 1000 	ldrb.w	r1, [r8]
 800827c:	482a      	ldr	r0, [pc, #168]	; (8008328 <_vfiprintf_r+0x220>)
 800827e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008282:	2206      	movs	r2, #6
 8008284:	f108 0701 	add.w	r7, r8, #1
 8008288:	f7f7 ffa2 	bl	80001d0 <memchr>
 800828c:	2800      	cmp	r0, #0
 800828e:	d037      	beq.n	8008300 <_vfiprintf_r+0x1f8>
 8008290:	4b26      	ldr	r3, [pc, #152]	; (800832c <_vfiprintf_r+0x224>)
 8008292:	bb1b      	cbnz	r3, 80082dc <_vfiprintf_r+0x1d4>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	3307      	adds	r3, #7
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	3308      	adds	r3, #8
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	444b      	add	r3, r9
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	e750      	b.n	800814a <_vfiprintf_r+0x42>
 80082a8:	fb05 3202 	mla	r2, r5, r2, r3
 80082ac:	2001      	movs	r0, #1
 80082ae:	4688      	mov	r8, r1
 80082b0:	e78a      	b.n	80081c8 <_vfiprintf_r+0xc0>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f108 0801 	add.w	r8, r8, #1
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	4619      	mov	r1, r3
 80082bc:	250a      	movs	r5, #10
 80082be:	4640      	mov	r0, r8
 80082c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c4:	3a30      	subs	r2, #48	; 0x30
 80082c6:	2a09      	cmp	r2, #9
 80082c8:	d903      	bls.n	80082d2 <_vfiprintf_r+0x1ca>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c3      	beq.n	8008256 <_vfiprintf_r+0x14e>
 80082ce:	9105      	str	r1, [sp, #20]
 80082d0:	e7c1      	b.n	8008256 <_vfiprintf_r+0x14e>
 80082d2:	fb05 2101 	mla	r1, r5, r1, r2
 80082d6:	2301      	movs	r3, #1
 80082d8:	4680      	mov	r8, r0
 80082da:	e7f0      	b.n	80082be <_vfiprintf_r+0x1b6>
 80082dc:	ab03      	add	r3, sp, #12
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	4622      	mov	r2, r4
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <_vfiprintf_r+0x228>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	4630      	mov	r0, r6
 80082e8:	f3af 8000 	nop.w
 80082ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082f0:	4681      	mov	r9, r0
 80082f2:	d1d5      	bne.n	80082a0 <_vfiprintf_r+0x198>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	065b      	lsls	r3, r3, #25
 80082f8:	f53f af7e 	bmi.w	80081f8 <_vfiprintf_r+0xf0>
 80082fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082fe:	e77d      	b.n	80081fc <_vfiprintf_r+0xf4>
 8008300:	ab03      	add	r3, sp, #12
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	4622      	mov	r2, r4
 8008306:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <_vfiprintf_r+0x228>)
 8008308:	a904      	add	r1, sp, #16
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f888 	bl	8008420 <_printf_i>
 8008310:	e7ec      	b.n	80082ec <_vfiprintf_r+0x1e4>
 8008312:	bf00      	nop
 8008314:	08009238 	.word	0x08009238
 8008318:	080091e4 	.word	0x080091e4
 800831c:	08009258 	.word	0x08009258
 8008320:	08009218 	.word	0x08009218
 8008324:	080091ea 	.word	0x080091ea
 8008328:	080091ee 	.word	0x080091ee
 800832c:	00000000 	.word	0x00000000
 8008330:	080080e3 	.word	0x080080e3

08008334 <_printf_common>:
 8008334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	4691      	mov	r9, r2
 800833a:	461f      	mov	r7, r3
 800833c:	688a      	ldr	r2, [r1, #8]
 800833e:	690b      	ldr	r3, [r1, #16]
 8008340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008344:	4293      	cmp	r3, r2
 8008346:	bfb8      	it	lt
 8008348:	4613      	movlt	r3, r2
 800834a:	f8c9 3000 	str.w	r3, [r9]
 800834e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008352:	4606      	mov	r6, r0
 8008354:	460c      	mov	r4, r1
 8008356:	b112      	cbz	r2, 800835e <_printf_common+0x2a>
 8008358:	3301      	adds	r3, #1
 800835a:	f8c9 3000 	str.w	r3, [r9]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	0699      	lsls	r1, r3, #26
 8008362:	bf42      	ittt	mi
 8008364:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008368:	3302      	addmi	r3, #2
 800836a:	f8c9 3000 	strmi.w	r3, [r9]
 800836e:	6825      	ldr	r5, [r4, #0]
 8008370:	f015 0506 	ands.w	r5, r5, #6
 8008374:	d107      	bne.n	8008386 <_printf_common+0x52>
 8008376:	f104 0a19 	add.w	sl, r4, #25
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	f8d9 2000 	ldr.w	r2, [r9]
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	42ab      	cmp	r3, r5
 8008384:	dc28      	bgt.n	80083d8 <_printf_common+0xa4>
 8008386:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	3300      	adds	r3, #0
 800838e:	bf18      	it	ne
 8008390:	2301      	movne	r3, #1
 8008392:	0692      	lsls	r2, r2, #26
 8008394:	d42d      	bmi.n	80083f2 <_printf_common+0xbe>
 8008396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800839a:	4639      	mov	r1, r7
 800839c:	4630      	mov	r0, r6
 800839e:	47c0      	blx	r8
 80083a0:	3001      	adds	r0, #1
 80083a2:	d020      	beq.n	80083e6 <_printf_common+0xb2>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	68e5      	ldr	r5, [r4, #12]
 80083a8:	f8d9 2000 	ldr.w	r2, [r9]
 80083ac:	f003 0306 	and.w	r3, r3, #6
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	bf08      	it	eq
 80083b4:	1aad      	subeq	r5, r5, r2
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	6922      	ldr	r2, [r4, #16]
 80083ba:	bf0c      	ite	eq
 80083bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c0:	2500      	movne	r5, #0
 80083c2:	4293      	cmp	r3, r2
 80083c4:	bfc4      	itt	gt
 80083c6:	1a9b      	subgt	r3, r3, r2
 80083c8:	18ed      	addgt	r5, r5, r3
 80083ca:	f04f 0900 	mov.w	r9, #0
 80083ce:	341a      	adds	r4, #26
 80083d0:	454d      	cmp	r5, r9
 80083d2:	d11a      	bne.n	800840a <_printf_common+0xd6>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e008      	b.n	80083ea <_printf_common+0xb6>
 80083d8:	2301      	movs	r3, #1
 80083da:	4652      	mov	r2, sl
 80083dc:	4639      	mov	r1, r7
 80083de:	4630      	mov	r0, r6
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d103      	bne.n	80083ee <_printf_common+0xba>
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ee:	3501      	adds	r5, #1
 80083f0:	e7c3      	b.n	800837a <_printf_common+0x46>
 80083f2:	18e1      	adds	r1, r4, r3
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	2030      	movs	r0, #48	; 0x30
 80083f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083fc:	4422      	add	r2, r4
 80083fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008406:	3302      	adds	r3, #2
 8008408:	e7c5      	b.n	8008396 <_printf_common+0x62>
 800840a:	2301      	movs	r3, #1
 800840c:	4622      	mov	r2, r4
 800840e:	4639      	mov	r1, r7
 8008410:	4630      	mov	r0, r6
 8008412:	47c0      	blx	r8
 8008414:	3001      	adds	r0, #1
 8008416:	d0e6      	beq.n	80083e6 <_printf_common+0xb2>
 8008418:	f109 0901 	add.w	r9, r9, #1
 800841c:	e7d8      	b.n	80083d0 <_printf_common+0x9c>
	...

08008420 <_printf_i>:
 8008420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008424:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008428:	460c      	mov	r4, r1
 800842a:	7e09      	ldrb	r1, [r1, #24]
 800842c:	b085      	sub	sp, #20
 800842e:	296e      	cmp	r1, #110	; 0x6e
 8008430:	4617      	mov	r7, r2
 8008432:	4606      	mov	r6, r0
 8008434:	4698      	mov	r8, r3
 8008436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008438:	f000 80b3 	beq.w	80085a2 <_printf_i+0x182>
 800843c:	d822      	bhi.n	8008484 <_printf_i+0x64>
 800843e:	2963      	cmp	r1, #99	; 0x63
 8008440:	d036      	beq.n	80084b0 <_printf_i+0x90>
 8008442:	d80a      	bhi.n	800845a <_printf_i+0x3a>
 8008444:	2900      	cmp	r1, #0
 8008446:	f000 80b9 	beq.w	80085bc <_printf_i+0x19c>
 800844a:	2958      	cmp	r1, #88	; 0x58
 800844c:	f000 8083 	beq.w	8008556 <_printf_i+0x136>
 8008450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008454:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008458:	e032      	b.n	80084c0 <_printf_i+0xa0>
 800845a:	2964      	cmp	r1, #100	; 0x64
 800845c:	d001      	beq.n	8008462 <_printf_i+0x42>
 800845e:	2969      	cmp	r1, #105	; 0x69
 8008460:	d1f6      	bne.n	8008450 <_printf_i+0x30>
 8008462:	6820      	ldr	r0, [r4, #0]
 8008464:	6813      	ldr	r3, [r2, #0]
 8008466:	0605      	lsls	r5, r0, #24
 8008468:	f103 0104 	add.w	r1, r3, #4
 800846c:	d52a      	bpl.n	80084c4 <_printf_i+0xa4>
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6011      	str	r1, [r2, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	da03      	bge.n	800847e <_printf_i+0x5e>
 8008476:	222d      	movs	r2, #45	; 0x2d
 8008478:	425b      	negs	r3, r3
 800847a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800847e:	486f      	ldr	r0, [pc, #444]	; (800863c <_printf_i+0x21c>)
 8008480:	220a      	movs	r2, #10
 8008482:	e039      	b.n	80084f8 <_printf_i+0xd8>
 8008484:	2973      	cmp	r1, #115	; 0x73
 8008486:	f000 809d 	beq.w	80085c4 <_printf_i+0x1a4>
 800848a:	d808      	bhi.n	800849e <_printf_i+0x7e>
 800848c:	296f      	cmp	r1, #111	; 0x6f
 800848e:	d020      	beq.n	80084d2 <_printf_i+0xb2>
 8008490:	2970      	cmp	r1, #112	; 0x70
 8008492:	d1dd      	bne.n	8008450 <_printf_i+0x30>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	f043 0320 	orr.w	r3, r3, #32
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	e003      	b.n	80084a6 <_printf_i+0x86>
 800849e:	2975      	cmp	r1, #117	; 0x75
 80084a0:	d017      	beq.n	80084d2 <_printf_i+0xb2>
 80084a2:	2978      	cmp	r1, #120	; 0x78
 80084a4:	d1d4      	bne.n	8008450 <_printf_i+0x30>
 80084a6:	2378      	movs	r3, #120	; 0x78
 80084a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ac:	4864      	ldr	r0, [pc, #400]	; (8008640 <_printf_i+0x220>)
 80084ae:	e055      	b.n	800855c <_printf_i+0x13c>
 80084b0:	6813      	ldr	r3, [r2, #0]
 80084b2:	1d19      	adds	r1, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6011      	str	r1, [r2, #0]
 80084b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084c0:	2301      	movs	r3, #1
 80084c2:	e08c      	b.n	80085de <_printf_i+0x1be>
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6011      	str	r1, [r2, #0]
 80084c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084cc:	bf18      	it	ne
 80084ce:	b21b      	sxthne	r3, r3
 80084d0:	e7cf      	b.n	8008472 <_printf_i+0x52>
 80084d2:	6813      	ldr	r3, [r2, #0]
 80084d4:	6825      	ldr	r5, [r4, #0]
 80084d6:	1d18      	adds	r0, r3, #4
 80084d8:	6010      	str	r0, [r2, #0]
 80084da:	0628      	lsls	r0, r5, #24
 80084dc:	d501      	bpl.n	80084e2 <_printf_i+0xc2>
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	e002      	b.n	80084e8 <_printf_i+0xc8>
 80084e2:	0668      	lsls	r0, r5, #25
 80084e4:	d5fb      	bpl.n	80084de <_printf_i+0xbe>
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	4854      	ldr	r0, [pc, #336]	; (800863c <_printf_i+0x21c>)
 80084ea:	296f      	cmp	r1, #111	; 0x6f
 80084ec:	bf14      	ite	ne
 80084ee:	220a      	movne	r2, #10
 80084f0:	2208      	moveq	r2, #8
 80084f2:	2100      	movs	r1, #0
 80084f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084f8:	6865      	ldr	r5, [r4, #4]
 80084fa:	60a5      	str	r5, [r4, #8]
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	f2c0 8095 	blt.w	800862c <_printf_i+0x20c>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	f021 0104 	bic.w	r1, r1, #4
 8008508:	6021      	str	r1, [r4, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d13d      	bne.n	800858a <_printf_i+0x16a>
 800850e:	2d00      	cmp	r5, #0
 8008510:	f040 808e 	bne.w	8008630 <_printf_i+0x210>
 8008514:	4665      	mov	r5, ip
 8008516:	2a08      	cmp	r2, #8
 8008518:	d10b      	bne.n	8008532 <_printf_i+0x112>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	07db      	lsls	r3, r3, #31
 800851e:	d508      	bpl.n	8008532 <_printf_i+0x112>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	6862      	ldr	r2, [r4, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	bfde      	ittt	le
 8008528:	2330      	movle	r3, #48	; 0x30
 800852a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800852e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008532:	ebac 0305 	sub.w	r3, ip, r5
 8008536:	6123      	str	r3, [r4, #16]
 8008538:	f8cd 8000 	str.w	r8, [sp]
 800853c:	463b      	mov	r3, r7
 800853e:	aa03      	add	r2, sp, #12
 8008540:	4621      	mov	r1, r4
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff fef6 	bl	8008334 <_printf_common>
 8008548:	3001      	adds	r0, #1
 800854a:	d14d      	bne.n	80085e8 <_printf_i+0x1c8>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	b005      	add	sp, #20
 8008552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008556:	4839      	ldr	r0, [pc, #228]	; (800863c <_printf_i+0x21c>)
 8008558:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800855c:	6813      	ldr	r3, [r2, #0]
 800855e:	6821      	ldr	r1, [r4, #0]
 8008560:	1d1d      	adds	r5, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6015      	str	r5, [r2, #0]
 8008566:	060a      	lsls	r2, r1, #24
 8008568:	d50b      	bpl.n	8008582 <_printf_i+0x162>
 800856a:	07ca      	lsls	r2, r1, #31
 800856c:	bf44      	itt	mi
 800856e:	f041 0120 	orrmi.w	r1, r1, #32
 8008572:	6021      	strmi	r1, [r4, #0]
 8008574:	b91b      	cbnz	r3, 800857e <_printf_i+0x15e>
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	f022 0220 	bic.w	r2, r2, #32
 800857c:	6022      	str	r2, [r4, #0]
 800857e:	2210      	movs	r2, #16
 8008580:	e7b7      	b.n	80084f2 <_printf_i+0xd2>
 8008582:	064d      	lsls	r5, r1, #25
 8008584:	bf48      	it	mi
 8008586:	b29b      	uxthmi	r3, r3
 8008588:	e7ef      	b.n	800856a <_printf_i+0x14a>
 800858a:	4665      	mov	r5, ip
 800858c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008590:	fb02 3311 	mls	r3, r2, r1, r3
 8008594:	5cc3      	ldrb	r3, [r0, r3]
 8008596:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800859a:	460b      	mov	r3, r1
 800859c:	2900      	cmp	r1, #0
 800859e:	d1f5      	bne.n	800858c <_printf_i+0x16c>
 80085a0:	e7b9      	b.n	8008516 <_printf_i+0xf6>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	6825      	ldr	r5, [r4, #0]
 80085a6:	6961      	ldr	r1, [r4, #20]
 80085a8:	1d18      	adds	r0, r3, #4
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	0628      	lsls	r0, r5, #24
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	d501      	bpl.n	80085b6 <_printf_i+0x196>
 80085b2:	6019      	str	r1, [r3, #0]
 80085b4:	e002      	b.n	80085bc <_printf_i+0x19c>
 80085b6:	066a      	lsls	r2, r5, #25
 80085b8:	d5fb      	bpl.n	80085b2 <_printf_i+0x192>
 80085ba:	8019      	strh	r1, [r3, #0]
 80085bc:	2300      	movs	r3, #0
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	4665      	mov	r5, ip
 80085c2:	e7b9      	b.n	8008538 <_printf_i+0x118>
 80085c4:	6813      	ldr	r3, [r2, #0]
 80085c6:	1d19      	adds	r1, r3, #4
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	681d      	ldr	r5, [r3, #0]
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	2100      	movs	r1, #0
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7f7 fdfd 	bl	80001d0 <memchr>
 80085d6:	b108      	cbz	r0, 80085dc <_printf_i+0x1bc>
 80085d8:	1b40      	subs	r0, r0, r5
 80085da:	6060      	str	r0, [r4, #4]
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	2300      	movs	r3, #0
 80085e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e6:	e7a7      	b.n	8008538 <_printf_i+0x118>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4639      	mov	r1, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d0aa      	beq.n	800854c <_printf_i+0x12c>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	079b      	lsls	r3, r3, #30
 80085fa:	d413      	bmi.n	8008624 <_printf_i+0x204>
 80085fc:	68e0      	ldr	r0, [r4, #12]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	4298      	cmp	r0, r3
 8008602:	bfb8      	it	lt
 8008604:	4618      	movlt	r0, r3
 8008606:	e7a3      	b.n	8008550 <_printf_i+0x130>
 8008608:	2301      	movs	r3, #1
 800860a:	464a      	mov	r2, r9
 800860c:	4639      	mov	r1, r7
 800860e:	4630      	mov	r0, r6
 8008610:	47c0      	blx	r8
 8008612:	3001      	adds	r0, #1
 8008614:	d09a      	beq.n	800854c <_printf_i+0x12c>
 8008616:	3501      	adds	r5, #1
 8008618:	68e3      	ldr	r3, [r4, #12]
 800861a:	9a03      	ldr	r2, [sp, #12]
 800861c:	1a9b      	subs	r3, r3, r2
 800861e:	42ab      	cmp	r3, r5
 8008620:	dcf2      	bgt.n	8008608 <_printf_i+0x1e8>
 8008622:	e7eb      	b.n	80085fc <_printf_i+0x1dc>
 8008624:	2500      	movs	r5, #0
 8008626:	f104 0919 	add.w	r9, r4, #25
 800862a:	e7f5      	b.n	8008618 <_printf_i+0x1f8>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ac      	bne.n	800858a <_printf_i+0x16a>
 8008630:	7803      	ldrb	r3, [r0, #0]
 8008632:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008636:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800863a:	e76c      	b.n	8008516 <_printf_i+0xf6>
 800863c:	080091f5 	.word	0x080091f5
 8008640:	08009206 	.word	0x08009206

08008644 <iprintf>:
 8008644:	b40f      	push	{r0, r1, r2, r3}
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <iprintf+0x2c>)
 8008648:	b513      	push	{r0, r1, r4, lr}
 800864a:	681c      	ldr	r4, [r3, #0]
 800864c:	b124      	cbz	r4, 8008658 <iprintf+0x14>
 800864e:	69a3      	ldr	r3, [r4, #24]
 8008650:	b913      	cbnz	r3, 8008658 <iprintf+0x14>
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fa32 	bl	8008abc <__sinit>
 8008658:	ab05      	add	r3, sp, #20
 800865a:	9a04      	ldr	r2, [sp, #16]
 800865c:	68a1      	ldr	r1, [r4, #8]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	4620      	mov	r0, r4
 8008662:	f7ff fd51 	bl	8008108 <_vfiprintf_r>
 8008666:	b002      	add	sp, #8
 8008668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866c:	b004      	add	sp, #16
 800866e:	4770      	bx	lr
 8008670:	20000028 	.word	0x20000028

08008674 <_puts_r>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	460e      	mov	r6, r1
 8008678:	4605      	mov	r5, r0
 800867a:	b118      	cbz	r0, 8008684 <_puts_r+0x10>
 800867c:	6983      	ldr	r3, [r0, #24]
 800867e:	b90b      	cbnz	r3, 8008684 <_puts_r+0x10>
 8008680:	f000 fa1c 	bl	8008abc <__sinit>
 8008684:	69ab      	ldr	r3, [r5, #24]
 8008686:	68ac      	ldr	r4, [r5, #8]
 8008688:	b913      	cbnz	r3, 8008690 <_puts_r+0x1c>
 800868a:	4628      	mov	r0, r5
 800868c:	f000 fa16 	bl	8008abc <__sinit>
 8008690:	4b23      	ldr	r3, [pc, #140]	; (8008720 <_puts_r+0xac>)
 8008692:	429c      	cmp	r4, r3
 8008694:	d117      	bne.n	80086c6 <_puts_r+0x52>
 8008696:	686c      	ldr	r4, [r5, #4]
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	071b      	lsls	r3, r3, #28
 800869c:	d51d      	bpl.n	80086da <_puts_r+0x66>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	b1db      	cbz	r3, 80086da <_puts_r+0x66>
 80086a2:	3e01      	subs	r6, #1
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	b9e9      	cbnz	r1, 80086ec <_puts_r+0x78>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da2e      	bge.n	8008712 <_puts_r+0x9e>
 80086b4:	4622      	mov	r2, r4
 80086b6:	210a      	movs	r1, #10
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 f84f 	bl	800875c <__swbuf_r>
 80086be:	3001      	adds	r0, #1
 80086c0:	d011      	beq.n	80086e6 <_puts_r+0x72>
 80086c2:	200a      	movs	r0, #10
 80086c4:	e011      	b.n	80086ea <_puts_r+0x76>
 80086c6:	4b17      	ldr	r3, [pc, #92]	; (8008724 <_puts_r+0xb0>)
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d101      	bne.n	80086d0 <_puts_r+0x5c>
 80086cc:	68ac      	ldr	r4, [r5, #8]
 80086ce:	e7e3      	b.n	8008698 <_puts_r+0x24>
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <_puts_r+0xb4>)
 80086d2:	429c      	cmp	r4, r3
 80086d4:	bf08      	it	eq
 80086d6:	68ec      	ldreq	r4, [r5, #12]
 80086d8:	e7de      	b.n	8008698 <_puts_r+0x24>
 80086da:	4621      	mov	r1, r4
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 f88f 	bl	8008800 <__swsetup_r>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d0dd      	beq.n	80086a2 <_puts_r+0x2e>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da04      	bge.n	80086fa <_puts_r+0x86>
 80086f0:	69a2      	ldr	r2, [r4, #24]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	dc06      	bgt.n	8008704 <_puts_r+0x90>
 80086f6:	290a      	cmp	r1, #10
 80086f8:	d004      	beq.n	8008704 <_puts_r+0x90>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	7019      	strb	r1, [r3, #0]
 8008702:	e7cf      	b.n	80086a4 <_puts_r+0x30>
 8008704:	4622      	mov	r2, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f000 f828 	bl	800875c <__swbuf_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d1c9      	bne.n	80086a4 <_puts_r+0x30>
 8008710:	e7e9      	b.n	80086e6 <_puts_r+0x72>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	200a      	movs	r0, #10
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	7018      	strb	r0, [r3, #0]
 800871c:	e7e5      	b.n	80086ea <_puts_r+0x76>
 800871e:	bf00      	nop
 8008720:	08009238 	.word	0x08009238
 8008724:	08009258 	.word	0x08009258
 8008728:	08009218 	.word	0x08009218

0800872c <puts>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <puts+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f7ff bf9f 	b.w	8008674 <_puts_r>
 8008736:	bf00      	nop
 8008738:	20000028 	.word	0x20000028

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4c06      	ldr	r4, [pc, #24]	; (8008758 <_sbrk_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4605      	mov	r5, r0
 8008744:	4608      	mov	r0, r1
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f7f8 fa82 	bl	8000c50 <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000668 	.word	0x20000668

0800875c <__swbuf_r>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	460e      	mov	r6, r1
 8008760:	4614      	mov	r4, r2
 8008762:	4605      	mov	r5, r0
 8008764:	b118      	cbz	r0, 800876e <__swbuf_r+0x12>
 8008766:	6983      	ldr	r3, [r0, #24]
 8008768:	b90b      	cbnz	r3, 800876e <__swbuf_r+0x12>
 800876a:	f000 f9a7 	bl	8008abc <__sinit>
 800876e:	4b21      	ldr	r3, [pc, #132]	; (80087f4 <__swbuf_r+0x98>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d12a      	bne.n	80087ca <__swbuf_r+0x6e>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	69a3      	ldr	r3, [r4, #24]
 8008778:	60a3      	str	r3, [r4, #8]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	071a      	lsls	r2, r3, #28
 800877e:	d52e      	bpl.n	80087de <__swbuf_r+0x82>
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	b363      	cbz	r3, 80087de <__swbuf_r+0x82>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1ac0      	subs	r0, r0, r3
 800878a:	6963      	ldr	r3, [r4, #20]
 800878c:	b2f6      	uxtb	r6, r6
 800878e:	4283      	cmp	r3, r0
 8008790:	4637      	mov	r7, r6
 8008792:	dc04      	bgt.n	800879e <__swbuf_r+0x42>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f926 	bl	80089e8 <_fflush_r>
 800879c:	bb28      	cbnz	r0, 80087ea <__swbuf_r+0x8e>
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	701e      	strb	r6, [r3, #0]
 80087ac:	6963      	ldr	r3, [r4, #20]
 80087ae:	3001      	adds	r0, #1
 80087b0:	4283      	cmp	r3, r0
 80087b2:	d004      	beq.n	80087be <__swbuf_r+0x62>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	07db      	lsls	r3, r3, #31
 80087b8:	d519      	bpl.n	80087ee <__swbuf_r+0x92>
 80087ba:	2e0a      	cmp	r6, #10
 80087bc:	d117      	bne.n	80087ee <__swbuf_r+0x92>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 f911 	bl	80089e8 <_fflush_r>
 80087c6:	b190      	cbz	r0, 80087ee <__swbuf_r+0x92>
 80087c8:	e00f      	b.n	80087ea <__swbuf_r+0x8e>
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <__swbuf_r+0x9c>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d101      	bne.n	80087d4 <__swbuf_r+0x78>
 80087d0:	68ac      	ldr	r4, [r5, #8]
 80087d2:	e7d0      	b.n	8008776 <__swbuf_r+0x1a>
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <__swbuf_r+0xa0>)
 80087d6:	429c      	cmp	r4, r3
 80087d8:	bf08      	it	eq
 80087da:	68ec      	ldreq	r4, [r5, #12]
 80087dc:	e7cb      	b.n	8008776 <__swbuf_r+0x1a>
 80087de:	4621      	mov	r1, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 f80d 	bl	8008800 <__swsetup_r>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d0cc      	beq.n	8008784 <__swbuf_r+0x28>
 80087ea:	f04f 37ff 	mov.w	r7, #4294967295
 80087ee:	4638      	mov	r0, r7
 80087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f2:	bf00      	nop
 80087f4:	08009238 	.word	0x08009238
 80087f8:	08009258 	.word	0x08009258
 80087fc:	08009218 	.word	0x08009218

08008800 <__swsetup_r>:
 8008800:	4b32      	ldr	r3, [pc, #200]	; (80088cc <__swsetup_r+0xcc>)
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	4606      	mov	r6, r0
 8008808:	460c      	mov	r4, r1
 800880a:	b125      	cbz	r5, 8008816 <__swsetup_r+0x16>
 800880c:	69ab      	ldr	r3, [r5, #24]
 800880e:	b913      	cbnz	r3, 8008816 <__swsetup_r+0x16>
 8008810:	4628      	mov	r0, r5
 8008812:	f000 f953 	bl	8008abc <__sinit>
 8008816:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <__swsetup_r+0xd0>)
 8008818:	429c      	cmp	r4, r3
 800881a:	d10f      	bne.n	800883c <__swsetup_r+0x3c>
 800881c:	686c      	ldr	r4, [r5, #4]
 800881e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008822:	b29a      	uxth	r2, r3
 8008824:	0715      	lsls	r5, r2, #28
 8008826:	d42c      	bmi.n	8008882 <__swsetup_r+0x82>
 8008828:	06d0      	lsls	r0, r2, #27
 800882a:	d411      	bmi.n	8008850 <__swsetup_r+0x50>
 800882c:	2209      	movs	r2, #9
 800882e:	6032      	str	r2, [r6, #0]
 8008830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e03e      	b.n	80088ba <__swsetup_r+0xba>
 800883c:	4b25      	ldr	r3, [pc, #148]	; (80088d4 <__swsetup_r+0xd4>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <__swsetup_r+0x46>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7eb      	b.n	800881e <__swsetup_r+0x1e>
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <__swsetup_r+0xd8>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7e6      	b.n	800881e <__swsetup_r+0x1e>
 8008850:	0751      	lsls	r1, r2, #29
 8008852:	d512      	bpl.n	800887a <__swsetup_r+0x7a>
 8008854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008856:	b141      	cbz	r1, 800886a <__swsetup_r+0x6a>
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d002      	beq.n	8008866 <__swsetup_r+0x66>
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff fb7f 	bl	8007f64 <_free_r>
 8008866:	2300      	movs	r3, #0
 8008868:	6363      	str	r3, [r4, #52]	; 0x34
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	2300      	movs	r3, #0
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	b94b      	cbnz	r3, 800889a <__swsetup_r+0x9a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800888c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008890:	d003      	beq.n	800889a <__swsetup_r+0x9a>
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	f000 f9bf 	bl	8008c18 <__smakebuf_r>
 800889a:	89a2      	ldrh	r2, [r4, #12]
 800889c:	f012 0301 	ands.w	r3, r2, #1
 80088a0:	d00c      	beq.n	80088bc <__swsetup_r+0xbc>
 80088a2:	2300      	movs	r3, #0
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6963      	ldr	r3, [r4, #20]
 80088a8:	425b      	negs	r3, r3
 80088aa:	61a3      	str	r3, [r4, #24]
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	b953      	cbnz	r3, 80088c6 <__swsetup_r+0xc6>
 80088b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80088b8:	d1ba      	bne.n	8008830 <__swsetup_r+0x30>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	0792      	lsls	r2, r2, #30
 80088be:	bf58      	it	pl
 80088c0:	6963      	ldrpl	r3, [r4, #20]
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	e7f2      	b.n	80088ac <__swsetup_r+0xac>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e7f7      	b.n	80088ba <__swsetup_r+0xba>
 80088ca:	bf00      	nop
 80088cc:	20000028 	.word	0x20000028
 80088d0:	08009238 	.word	0x08009238
 80088d4:	08009258 	.word	0x08009258
 80088d8:	08009218 	.word	0x08009218

080088dc <__sflush_r>:
 80088dc:	898a      	ldrh	r2, [r1, #12]
 80088de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e2:	4605      	mov	r5, r0
 80088e4:	0710      	lsls	r0, r2, #28
 80088e6:	460c      	mov	r4, r1
 80088e8:	d458      	bmi.n	800899c <__sflush_r+0xc0>
 80088ea:	684b      	ldr	r3, [r1, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	dc05      	bgt.n	80088fc <__sflush_r+0x20>
 80088f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dc02      	bgt.n	80088fc <__sflush_r+0x20>
 80088f6:	2000      	movs	r0, #0
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fe:	2e00      	cmp	r6, #0
 8008900:	d0f9      	beq.n	80088f6 <__sflush_r+0x1a>
 8008902:	2300      	movs	r3, #0
 8008904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008908:	682f      	ldr	r7, [r5, #0]
 800890a:	6a21      	ldr	r1, [r4, #32]
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	d032      	beq.n	8008976 <__sflush_r+0x9a>
 8008910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	075a      	lsls	r2, r3, #29
 8008916:	d505      	bpl.n	8008924 <__sflush_r+0x48>
 8008918:	6863      	ldr	r3, [r4, #4]
 800891a:	1ac0      	subs	r0, r0, r3
 800891c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800891e:	b10b      	cbz	r3, 8008924 <__sflush_r+0x48>
 8008920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008922:	1ac0      	subs	r0, r0, r3
 8008924:	2300      	movs	r3, #0
 8008926:	4602      	mov	r2, r0
 8008928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892a:	6a21      	ldr	r1, [r4, #32]
 800892c:	4628      	mov	r0, r5
 800892e:	47b0      	blx	r6
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	d106      	bne.n	8008944 <__sflush_r+0x68>
 8008936:	6829      	ldr	r1, [r5, #0]
 8008938:	291d      	cmp	r1, #29
 800893a:	d848      	bhi.n	80089ce <__sflush_r+0xf2>
 800893c:	4a29      	ldr	r2, [pc, #164]	; (80089e4 <__sflush_r+0x108>)
 800893e:	40ca      	lsrs	r2, r1
 8008940:	07d6      	lsls	r6, r2, #31
 8008942:	d544      	bpl.n	80089ce <__sflush_r+0xf2>
 8008944:	2200      	movs	r2, #0
 8008946:	6062      	str	r2, [r4, #4]
 8008948:	04d9      	lsls	r1, r3, #19
 800894a:	6922      	ldr	r2, [r4, #16]
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	d504      	bpl.n	800895a <__sflush_r+0x7e>
 8008950:	1c42      	adds	r2, r0, #1
 8008952:	d101      	bne.n	8008958 <__sflush_r+0x7c>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b903      	cbnz	r3, 800895a <__sflush_r+0x7e>
 8008958:	6560      	str	r0, [r4, #84]	; 0x54
 800895a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895c:	602f      	str	r7, [r5, #0]
 800895e:	2900      	cmp	r1, #0
 8008960:	d0c9      	beq.n	80088f6 <__sflush_r+0x1a>
 8008962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008966:	4299      	cmp	r1, r3
 8008968:	d002      	beq.n	8008970 <__sflush_r+0x94>
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fafa 	bl	8007f64 <_free_r>
 8008970:	2000      	movs	r0, #0
 8008972:	6360      	str	r0, [r4, #52]	; 0x34
 8008974:	e7c0      	b.n	80088f8 <__sflush_r+0x1c>
 8008976:	2301      	movs	r3, #1
 8008978:	4628      	mov	r0, r5
 800897a:	47b0      	blx	r6
 800897c:	1c41      	adds	r1, r0, #1
 800897e:	d1c8      	bne.n	8008912 <__sflush_r+0x36>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0c5      	beq.n	8008912 <__sflush_r+0x36>
 8008986:	2b1d      	cmp	r3, #29
 8008988:	d001      	beq.n	800898e <__sflush_r+0xb2>
 800898a:	2b16      	cmp	r3, #22
 800898c:	d101      	bne.n	8008992 <__sflush_r+0xb6>
 800898e:	602f      	str	r7, [r5, #0]
 8008990:	e7b1      	b.n	80088f6 <__sflush_r+0x1a>
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	e7ad      	b.n	80088f8 <__sflush_r+0x1c>
 800899c:	690f      	ldr	r7, [r1, #16]
 800899e:	2f00      	cmp	r7, #0
 80089a0:	d0a9      	beq.n	80088f6 <__sflush_r+0x1a>
 80089a2:	0793      	lsls	r3, r2, #30
 80089a4:	680e      	ldr	r6, [r1, #0]
 80089a6:	bf08      	it	eq
 80089a8:	694b      	ldreq	r3, [r1, #20]
 80089aa:	600f      	str	r7, [r1, #0]
 80089ac:	bf18      	it	ne
 80089ae:	2300      	movne	r3, #0
 80089b0:	eba6 0807 	sub.w	r8, r6, r7
 80089b4:	608b      	str	r3, [r1, #8]
 80089b6:	f1b8 0f00 	cmp.w	r8, #0
 80089ba:	dd9c      	ble.n	80088f6 <__sflush_r+0x1a>
 80089bc:	4643      	mov	r3, r8
 80089be:	463a      	mov	r2, r7
 80089c0:	6a21      	ldr	r1, [r4, #32]
 80089c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b0      	blx	r6
 80089c8:	2800      	cmp	r0, #0
 80089ca:	dc06      	bgt.n	80089da <__sflush_r+0xfe>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e78e      	b.n	80088f8 <__sflush_r+0x1c>
 80089da:	4407      	add	r7, r0
 80089dc:	eba8 0800 	sub.w	r8, r8, r0
 80089e0:	e7e9      	b.n	80089b6 <__sflush_r+0xda>
 80089e2:	bf00      	nop
 80089e4:	20400001 	.word	0x20400001

080089e8 <_fflush_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	690b      	ldr	r3, [r1, #16]
 80089ec:	4605      	mov	r5, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	b1db      	cbz	r3, 8008a2a <_fflush_r+0x42>
 80089f2:	b118      	cbz	r0, 80089fc <_fflush_r+0x14>
 80089f4:	6983      	ldr	r3, [r0, #24]
 80089f6:	b90b      	cbnz	r3, 80089fc <_fflush_r+0x14>
 80089f8:	f000 f860 	bl	8008abc <__sinit>
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <_fflush_r+0x48>)
 80089fe:	429c      	cmp	r4, r3
 8008a00:	d109      	bne.n	8008a16 <_fflush_r+0x2e>
 8008a02:	686c      	ldr	r4, [r5, #4]
 8008a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a08:	b17b      	cbz	r3, 8008a2a <_fflush_r+0x42>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a12:	f7ff bf63 	b.w	80088dc <__sflush_r>
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <_fflush_r+0x4c>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	d101      	bne.n	8008a20 <_fflush_r+0x38>
 8008a1c:	68ac      	ldr	r4, [r5, #8]
 8008a1e:	e7f1      	b.n	8008a04 <_fflush_r+0x1c>
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <_fflush_r+0x50>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	bf08      	it	eq
 8008a26:	68ec      	ldreq	r4, [r5, #12]
 8008a28:	e7ec      	b.n	8008a04 <_fflush_r+0x1c>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	bf00      	nop
 8008a30:	08009238 	.word	0x08009238
 8008a34:	08009258 	.word	0x08009258
 8008a38:	08009218 	.word	0x08009218

08008a3c <std>:
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	4604      	mov	r4, r0
 8008a42:	e9c0 3300 	strd	r3, r3, [r0]
 8008a46:	6083      	str	r3, [r0, #8]
 8008a48:	8181      	strh	r1, [r0, #12]
 8008a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a4c:	81c2      	strh	r2, [r0, #14]
 8008a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a52:	6183      	str	r3, [r0, #24]
 8008a54:	4619      	mov	r1, r3
 8008a56:	2208      	movs	r2, #8
 8008a58:	305c      	adds	r0, #92	; 0x5c
 8008a5a:	f7ff fa7b 	bl	8007f54 <memset>
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <std+0x38>)
 8008a60:	6263      	str	r3, [r4, #36]	; 0x24
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <std+0x3c>)
 8008a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <std+0x40>)
 8008a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <std+0x44>)
 8008a6c:	6224      	str	r4, [r4, #32]
 8008a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	08008c9d 	.word	0x08008c9d
 8008a78:	08008cbf 	.word	0x08008cbf
 8008a7c:	08008cf7 	.word	0x08008cf7
 8008a80:	08008d1b 	.word	0x08008d1b

08008a84 <_cleanup_r>:
 8008a84:	4901      	ldr	r1, [pc, #4]	; (8008a8c <_cleanup_r+0x8>)
 8008a86:	f000 b885 	b.w	8008b94 <_fwalk_reent>
 8008a8a:	bf00      	nop
 8008a8c:	080089e9 	.word	0x080089e9

08008a90 <__sfmoreglue>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	1e4a      	subs	r2, r1, #1
 8008a94:	2568      	movs	r5, #104	; 0x68
 8008a96:	4355      	muls	r5, r2
 8008a98:	460e      	mov	r6, r1
 8008a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a9e:	f7ff faaf 	bl	8008000 <_malloc_r>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	b140      	cbz	r0, 8008ab8 <__sfmoreglue+0x28>
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8008aac:	300c      	adds	r0, #12
 8008aae:	60a0      	str	r0, [r4, #8]
 8008ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ab4:	f7ff fa4e 	bl	8007f54 <memset>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	bd70      	pop	{r4, r5, r6, pc}

08008abc <__sinit>:
 8008abc:	6983      	ldr	r3, [r0, #24]
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	bb33      	cbnz	r3, 8008b12 <__sinit+0x56>
 8008ac4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ac8:	6503      	str	r3, [r0, #80]	; 0x50
 8008aca:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <__sinit+0x58>)
 8008acc:	4a12      	ldr	r2, [pc, #72]	; (8008b18 <__sinit+0x5c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6282      	str	r2, [r0, #40]	; 0x28
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	bf04      	itt	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	6183      	streq	r3, [r0, #24]
 8008ada:	f000 f81f 	bl	8008b1c <__sfp>
 8008ade:	6060      	str	r0, [r4, #4]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 f81b 	bl	8008b1c <__sfp>
 8008ae6:	60a0      	str	r0, [r4, #8]
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 f817 	bl	8008b1c <__sfp>
 8008aee:	2200      	movs	r2, #0
 8008af0:	60e0      	str	r0, [r4, #12]
 8008af2:	2104      	movs	r1, #4
 8008af4:	6860      	ldr	r0, [r4, #4]
 8008af6:	f7ff ffa1 	bl	8008a3c <std>
 8008afa:	2201      	movs	r2, #1
 8008afc:	2109      	movs	r1, #9
 8008afe:	68a0      	ldr	r0, [r4, #8]
 8008b00:	f7ff ff9c 	bl	8008a3c <std>
 8008b04:	2202      	movs	r2, #2
 8008b06:	2112      	movs	r1, #18
 8008b08:	68e0      	ldr	r0, [r4, #12]
 8008b0a:	f7ff ff97 	bl	8008a3c <std>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	61a3      	str	r3, [r4, #24]
 8008b12:	bd10      	pop	{r4, pc}
 8008b14:	080091e0 	.word	0x080091e0
 8008b18:	08008a85 	.word	0x08008a85

08008b1c <__sfp>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	4b1b      	ldr	r3, [pc, #108]	; (8008b8c <__sfp+0x70>)
 8008b20:	681e      	ldr	r6, [r3, #0]
 8008b22:	69b3      	ldr	r3, [r6, #24]
 8008b24:	4607      	mov	r7, r0
 8008b26:	b913      	cbnz	r3, 8008b2e <__sfp+0x12>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ffc7 	bl	8008abc <__sinit>
 8008b2e:	3648      	adds	r6, #72	; 0x48
 8008b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	d503      	bpl.n	8008b40 <__sfp+0x24>
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	b133      	cbz	r3, 8008b4a <__sfp+0x2e>
 8008b3c:	6836      	ldr	r6, [r6, #0]
 8008b3e:	e7f7      	b.n	8008b30 <__sfp+0x14>
 8008b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b44:	b16d      	cbz	r5, 8008b62 <__sfp+0x46>
 8008b46:	3468      	adds	r4, #104	; 0x68
 8008b48:	e7f4      	b.n	8008b34 <__sfp+0x18>
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff9f 	bl	8008a90 <__sfmoreglue>
 8008b52:	6030      	str	r0, [r6, #0]
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1f1      	bne.n	8008b3c <__sfp+0x20>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4620      	mov	r0, r4
 8008b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b62:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <__sfp+0x74>)
 8008b64:	6665      	str	r5, [r4, #100]	; 0x64
 8008b66:	e9c4 5500 	strd	r5, r5, [r4]
 8008b6a:	60a5      	str	r5, [r4, #8]
 8008b6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b74:	2208      	movs	r2, #8
 8008b76:	4629      	mov	r1, r5
 8008b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b7c:	f7ff f9ea 	bl	8007f54 <memset>
 8008b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b88:	e7e9      	b.n	8008b5e <__sfp+0x42>
 8008b8a:	bf00      	nop
 8008b8c:	080091e0 	.word	0x080091e0
 8008b90:	ffff0001 	.word	0xffff0001

08008b94 <_fwalk_reent>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4680      	mov	r8, r0
 8008b9a:	4689      	mov	r9, r1
 8008b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ba0:	2600      	movs	r6, #0
 8008ba2:	b914      	cbnz	r4, 8008baa <_fwalk_reent+0x16>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008baa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008bae:	3f01      	subs	r7, #1
 8008bb0:	d501      	bpl.n	8008bb6 <_fwalk_reent+0x22>
 8008bb2:	6824      	ldr	r4, [r4, #0]
 8008bb4:	e7f5      	b.n	8008ba2 <_fwalk_reent+0xe>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d907      	bls.n	8008bcc <_fwalk_reent+0x38>
 8008bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	d003      	beq.n	8008bcc <_fwalk_reent+0x38>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	47c8      	blx	r9
 8008bca:	4306      	orrs	r6, r0
 8008bcc:	3568      	adds	r5, #104	; 0x68
 8008bce:	e7ee      	b.n	8008bae <_fwalk_reent+0x1a>

08008bd0 <__swhatbuf_r>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	460e      	mov	r6, r1
 8008bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	b096      	sub	sp, #88	; 0x58
 8008bdc:	4614      	mov	r4, r2
 8008bde:	461d      	mov	r5, r3
 8008be0:	da07      	bge.n	8008bf2 <__swhatbuf_r+0x22>
 8008be2:	2300      	movs	r3, #0
 8008be4:	602b      	str	r3, [r5, #0]
 8008be6:	89b3      	ldrh	r3, [r6, #12]
 8008be8:	061a      	lsls	r2, r3, #24
 8008bea:	d410      	bmi.n	8008c0e <__swhatbuf_r+0x3e>
 8008bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf0:	e00e      	b.n	8008c10 <__swhatbuf_r+0x40>
 8008bf2:	466a      	mov	r2, sp
 8008bf4:	f000 f8b8 	bl	8008d68 <_fstat_r>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	dbf2      	blt.n	8008be2 <__swhatbuf_r+0x12>
 8008bfc:	9a01      	ldr	r2, [sp, #4]
 8008bfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c06:	425a      	negs	r2, r3
 8008c08:	415a      	adcs	r2, r3
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	e7ee      	b.n	8008bec <__swhatbuf_r+0x1c>
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	2000      	movs	r0, #0
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	b016      	add	sp, #88	; 0x58
 8008c16:	bd70      	pop	{r4, r5, r6, pc}

08008c18 <__smakebuf_r>:
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c1c:	079d      	lsls	r5, r3, #30
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	d507      	bpl.n	8008c34 <__smakebuf_r+0x1c>
 8008c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	6163      	str	r3, [r4, #20]
 8008c30:	b002      	add	sp, #8
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	ab01      	add	r3, sp, #4
 8008c36:	466a      	mov	r2, sp
 8008c38:	f7ff ffca 	bl	8008bd0 <__swhatbuf_r>
 8008c3c:	9900      	ldr	r1, [sp, #0]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff f9dd 	bl	8008000 <_malloc_r>
 8008c46:	b948      	cbnz	r0, 8008c5c <__smakebuf_r+0x44>
 8008c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4c:	059a      	lsls	r2, r3, #22
 8008c4e:	d4ef      	bmi.n	8008c30 <__smakebuf_r+0x18>
 8008c50:	f023 0303 	bic.w	r3, r3, #3
 8008c54:	f043 0302 	orr.w	r3, r3, #2
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	e7e3      	b.n	8008c24 <__smakebuf_r+0xc>
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <__smakebuf_r+0x7c>)
 8008c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	9b00      	ldr	r3, [sp, #0]
 8008c6c:	6163      	str	r3, [r4, #20]
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	6120      	str	r0, [r4, #16]
 8008c72:	b15b      	cbz	r3, 8008c8c <__smakebuf_r+0x74>
 8008c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 f887 	bl	8008d8c <_isatty_r>
 8008c7e:	b128      	cbz	r0, 8008c8c <__smakebuf_r+0x74>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	431d      	orrs	r5, r3
 8008c90:	81a5      	strh	r5, [r4, #12]
 8008c92:	e7cd      	b.n	8008c30 <__smakebuf_r+0x18>
 8008c94:	08008a85 	.word	0x08008a85

08008c98 <__malloc_lock>:
 8008c98:	4770      	bx	lr

08008c9a <__malloc_unlock>:
 8008c9a:	4770      	bx	lr

08008c9c <__sread>:
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca4:	f000 f894 	bl	8008dd0 <_read_r>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	bfab      	itete	ge
 8008cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cae:	89a3      	ldrhlt	r3, [r4, #12]
 8008cb0:	181b      	addge	r3, r3, r0
 8008cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cb6:	bfac      	ite	ge
 8008cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cba:	81a3      	strhlt	r3, [r4, #12]
 8008cbc:	bd10      	pop	{r4, pc}

08008cbe <__swrite>:
 8008cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	461f      	mov	r7, r3
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	05db      	lsls	r3, r3, #23
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4616      	mov	r6, r2
 8008cce:	d505      	bpl.n	8008cdc <__swrite+0x1e>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f000 f868 	bl	8008dac <_lseek_r>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	4632      	mov	r2, r6
 8008cea:	463b      	mov	r3, r7
 8008cec:	4628      	mov	r0, r5
 8008cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf2:	f000 b817 	b.w	8008d24 <_write_r>

08008cf6 <__sseek>:
 8008cf6:	b510      	push	{r4, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfe:	f000 f855 	bl	8008dac <_lseek_r>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	bf15      	itete	ne
 8008d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d12:	81a3      	strheq	r3, [r4, #12]
 8008d14:	bf18      	it	ne
 8008d16:	81a3      	strhne	r3, [r4, #12]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__sclose>:
 8008d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1e:	f000 b813 	b.w	8008d48 <_close_r>
	...

08008d24 <_write_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4c07      	ldr	r4, [pc, #28]	; (8008d44 <_write_r+0x20>)
 8008d28:	4605      	mov	r5, r0
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f7fe fb0e 	bl	8007354 <_write>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_write_r+0x1e>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_write_r+0x1e>
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20000668 	.word	0x20000668

08008d48 <_close_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4c06      	ldr	r4, [pc, #24]	; (8008d64 <_close_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4605      	mov	r5, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	6023      	str	r3, [r4, #0]
 8008d54:	f7f7 ffaa 	bl	8000cac <_close>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_close_r+0x1a>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_close_r+0x1a>
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000668 	.word	0x20000668

08008d68 <_fstat_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4c07      	ldr	r4, [pc, #28]	; (8008d88 <_fstat_r+0x20>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4605      	mov	r5, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	f7f7 ffa5 	bl	8000cc4 <_fstat>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	d102      	bne.n	8008d84 <_fstat_r+0x1c>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	b103      	cbz	r3, 8008d84 <_fstat_r+0x1c>
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
 8008d86:	bf00      	nop
 8008d88:	20000668 	.word	0x20000668

08008d8c <_isatty_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4c06      	ldr	r4, [pc, #24]	; (8008da8 <_isatty_r+0x1c>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4605      	mov	r5, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	f7f7 ffa4 	bl	8000ce4 <_isatty>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_isatty_r+0x1a>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_isatty_r+0x1a>
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000668 	.word	0x20000668

08008dac <_lseek_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4c07      	ldr	r4, [pc, #28]	; (8008dcc <_lseek_r+0x20>)
 8008db0:	4605      	mov	r5, r0
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	2200      	movs	r2, #0
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f7f7 ff9d 	bl	8000cfa <_lseek>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_lseek_r+0x1e>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_lseek_r+0x1e>
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000668 	.word	0x20000668

08008dd0 <_read_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4c07      	ldr	r4, [pc, #28]	; (8008df0 <_read_r+0x20>)
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	4611      	mov	r1, r2
 8008dda:	2200      	movs	r2, #0
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f7fe fa90 	bl	8007304 <_read>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_read_r+0x1e>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_read_r+0x1e>
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	20000668 	.word	0x20000668

08008df4 <_init>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr

08008e00 <_fini>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	bf00      	nop
 8008e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e06:	bc08      	pop	{r3}
 8008e08:	469e      	mov	lr, r3
 8008e0a:	4770      	bx	lr
 8008e0c:	0000      	movs	r0, r0
	...

Disassembly of section .ARM.__at_0x08000534:

08008e10 <TOGGLE_RESET_EXTI_CALLBACK>:
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
	unsigned short state=FLAG_WRT_ERR;
 8008e16:	230f      	movs	r3, #15
 8008e18:	81fb      	strh	r3, [r7, #14]
	unsigned int JumpFlag[2] = {0};
 8008e1a:	1d3b      	adds	r3, r7, #4
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	605a      	str	r2, [r3, #4]
	if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_N_FLAG)
 8008e22:	4819      	ldr	r0, [pc, #100]	; (8008e88 <_etext+0x78>)
 8008e24:	f7fe ffac 	bl	8007d80 <STMFLASH_Read32>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2e:	d111      	bne.n	8008e54 <TOGGLE_RESET_EXTI_CALLBACK+0x44>
		JumpFlag[0] = JUMP_FLAG;
 8008e30:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <_etext+0x7c>)
 8008e32:	607b      	str	r3, [r7, #4]
		JumpFlag[1] = JUMP_FLAG;
 8008e34:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <_etext+0x7c>)
 8008e36:	60bb      	str	r3, [r7, #8]
		if(LL_FLASH_Program64(JUMP_FLAG_ADDRESS, (uint32_t *)&JumpFlag)!=LL_OK)
 8008e38:	1d3b      	adds	r3, r7, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4812      	ldr	r0, [pc, #72]	; (8008e88 <_etext+0x78>)
 8008e3e:	f7fe ff61 	bl	8007d04 <LL_FLASH_Program64>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <TOGGLE_RESET_EXTI_CALLBACK+0x3e>
			state = FLAG_WRT_ERR;//Write Error
 8008e48:	230f      	movs	r3, #15
 8008e4a:	81fb      	strh	r3, [r7, #14]
 8008e4c:	e016      	b.n	8008e7c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = FLAG_WRT_OK;//Write Ok
 8008e4e:	2300      	movs	r3, #0
 8008e50:	81fb      	strh	r3, [r7, #14]
 8008e52:	e013      	b.n	8008e7c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
	else if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_FLAG)
 8008e54:	480c      	ldr	r0, [pc, #48]	; (8008e88 <_etext+0x78>)
 8008e56:	f7fe ff93 	bl	8007d80 <STMFLASH_Read32>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <_etext+0x7c>)
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d10c      	bne.n	8008e7c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
		LL_FLASH_PageErase(254);
 8008e62:	20fe      	movs	r0, #254	; 0xfe
 8008e64:	f7fe fef2 	bl	8007c4c <LL_FLASH_PageErase>
		if (STMFLASH_BankSwitch() != LL_OK)
 8008e68:	f7fe ff96 	bl	8007d98 <STMFLASH_BankSwitch>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <TOGGLE_RESET_EXTI_CALLBACK+0x68>
			state = BANK_TOGGLE_ERR;//Jump Error
 8008e72:	231f      	movs	r3, #31
 8008e74:	81fb      	strh	r3, [r7, #14]
 8008e76:	e001      	b.n	8008e7c <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = BANK_TOGGLE_OK;//Jump OK
 8008e78:	2310      	movs	r3, #16
 8008e7a:	81fb      	strh	r3, [r7, #14]
	return state;
 8008e7c:	89fb      	ldrh	r3, [r7, #14]
 8008e7e:	b2db      	uxtb	r3, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	0807f7f8 	.word	0x0807f7f8
 8008e8c:	4a554d50 	.word	0x4a554d50
