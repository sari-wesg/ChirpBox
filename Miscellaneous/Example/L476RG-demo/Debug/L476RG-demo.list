
L476RG-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.__at_0x08000534 00000080  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003cc0  08003cc0  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08003cc8  08003cc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000000b0  20000070  08003d40  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  08003d40  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b78a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001cc7  00000000  00000000  0002b82a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a00  00000000  00000000  0002d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000908  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026eb0  00000000  00000000  0002e800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000093eb  00000000  00000000  000556b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ea53b  00000000  00000000  0005ea9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00148fd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cb8  00000000  00000000  00149054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b78 	.word	0x08003b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003b78 	.word	0x08003b78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 faa0 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8ae 	bl	8000634 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f87c 	bl	80005d4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hhh\n");
 80004dc:	4801      	ldr	r0, [pc, #4]	; (80004e4 <main+0x1c>)
 80004de:	f002 ff3f 	bl	8003360 <puts>
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0x1a>
 80004e4:	08003c10 	.word	0x08003c10

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b0b8      	sub	sp, #224	; 0xe0
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f2:	2244      	movs	r2, #68	; 0x44
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fece 	bl	8003298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2288      	movs	r2, #136	; 0x88
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fec0 	bl	8003298 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	2310      	movs	r3, #16
 8000528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	2302      	movs	r3, #2
 800052e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800053e:	230a      	movs	r3, #10
 8000540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000544:	2307      	movs	r3, #7
 8000546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000550:	2302      	movs	r3, #2
 8000552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fdde 	bl	800111c <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000566:	f000 f91d 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2303      	movs	r3, #3
 8000572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000588:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800058c:	2104      	movs	r1, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f9aa 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800059a:	f000 f903 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800059e:	2302      	movs	r3, #2
 80005a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fba1 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005b4:	f000 f8f6 	bl	80007a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005bc:	f000 fd58 	bl	8001070 <HAL_PWREx_ControlVoltageScaling>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005c6:	f000 f8ed 	bl	80007a4 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	37e0      	adds	r7, #224	; 0xe0
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <MX_USART2_UART_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000618:	f002 f81a 	bl	8002650 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 f8bf 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098
 8000630:	40004400 	.word	0x40004400

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a2a      	ldr	r2, [pc, #168]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_GPIO_Init+0xc4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_GPIO_Init+0xc4>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_GPIO_Init+0xc4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f000 fcb7 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0xc8>)
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_GPIO_Init+0xcc>)
 80006cc:	f000 fb02 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d0:	2320      	movs	r3, #32
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f000 faf3 	bl	8000cd4 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	10210000 	.word	0x10210000
 8000700:	48000800 	.word	0x48000800

08000704 <_read>:

/* USER CODE BEGIN 4 */
int _read (int fd, char *pBuffer, int size)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e011      	b.n	800073a <_read+0x36>
    {
      while((USART2->ISR&0X40)==0);
 8000716:	bf00      	nop
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <_read+0x4c>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <_read+0x14>
      pBuffer[i] = USART2->RDR;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <_read+0x4c>)
 8000726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000728:	b299      	uxth	r1, r3
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	4413      	add	r3, r2
 8000730:	b2ca      	uxtb	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3301      	adds	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	dbe9      	blt.n	8000716 <_read+0x12>
    }
    return size;
 8000742:	687b      	ldr	r3, [r7, #4]
}
 8000744:	4618      	mov	r0, r3
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40004400 	.word	0x40004400

08000754 <_write>:

int _write (int fd, char *pBuffer, int size)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e010      	b.n	8000788 <_write+0x34>
    {
      while((USART2->ISR&0X40)==0);
 8000766:	bf00      	nop
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <_write+0x4c>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f9      	beq.n	8000768 <_write+0x14>
      USART2->TDR = (uint8_t) pBuffer[i];
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <_write+0x4c>)
 800077e:	b292      	uxth	r2, r2
 8000780:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < size; i++)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbea      	blt.n	8000766 <_write+0x12>
    }
    return size;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40004400 	.word	0x40004400

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0x6>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_UART_MspInit+0x7c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d128      	bne.n	8000868 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_UART_MspInit+0x80>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_MspInit+0x80>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000846:	230c      	movs	r3, #12
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000856:	2307      	movs	r3, #7
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f000 fa36 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40004400 	.word	0x40004400
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f900 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	return -1;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f4:	605a      	str	r2, [r3, #4]
	return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_isatty>:

int _isatty(int file)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return 1;
 800090c:	2301      	movs	r3, #1
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091a:	b480      	push	{r7}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f002 fc92 	bl	800328c <__errno>
 8000968:	4602      	mov	r2, r0
 800096a:	230c      	movs	r3, #12
 800096c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20018000 	.word	0x20018000
 8000994:	00000400 	.word	0x00000400
 8000998:	2000008c 	.word	0x2000008c
 800099c:	20000120 	.word	0x20000120

080009a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <SystemInit+0x64>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <SystemInit+0x64>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <SystemInit+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <SystemInit+0x68>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <SystemInit+0x68>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <SystemInit+0x68>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <SystemInit+0x68>)
 80009cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <SystemInit+0x68>)
 80009d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <SystemInit+0x68>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <SystemInit+0x68>)
 80009e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <SystemInit+0x68>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SystemInit+0x64>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	609a      	str	r2, [r3, #8]
#endif
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	40021000 	.word	0x40021000

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_Init+0x3c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_Init+0x3c>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 f920 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f80f 	bl	8000a50 <HAL_InitTick>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	e001      	b.n	8000a42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a3e:	f7ff feb5 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_InitTick+0x6c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d023      	beq.n	8000aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_InitTick+0x70>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_InitTick+0x6c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f91d 	bl	8000cba <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10f      	bne.n	8000aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d809      	bhi.n	8000aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f8f5 	bl	8000c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_InitTick+0x74>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e007      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e004      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e001      	b.n	8000ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000118 	.word	0x20000118

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000118 	.word	0x20000118

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff5c 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffb0 	bl	8000c28 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e17f      	b.n	8000fe4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8171 	beq.w	8000fde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00b      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	2b11      	cmp	r3, #17
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 0201 	and.w	r2, r3, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d118      	bne.n	8000dbc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x128>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b12      	cmp	r3, #18
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80ac 	beq.w	8000fde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b5e      	ldr	r3, [pc, #376]	; (8001000 <HAL_GPIO_Init+0x32c>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	4a5d      	ldr	r2, [pc, #372]	; (8001000 <HAL_GPIO_Init+0x32c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	; 0x60
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_GPIO_Init+0x32c>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e9e:	4a59      	ldr	r2, [pc, #356]	; (8001004 <HAL_GPIO_Init+0x330>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec8:	d025      	beq.n	8000f16 <HAL_GPIO_Init+0x242>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4e      	ldr	r2, [pc, #312]	; (8001008 <HAL_GPIO_Init+0x334>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x23e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	; (800100c <HAL_GPIO_Init+0x338>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x23a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_GPIO_Init+0x33c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x236>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	; (8001014 <HAL_GPIO_Init+0x340>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x232>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x344>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x22e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a49      	ldr	r2, [pc, #292]	; (800101c <HAL_GPIO_Init+0x348>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x22a>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e00c      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e00a      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x244>
 8000f16:	2300      	movs	r3, #0
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f28:	4936      	ldr	r1, [pc, #216]	; (8001004 <HAL_GPIO_Init+0x330>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd8:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_GPIO_Init+0x34c>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa22 f303 	lsr.w	r3, r2, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f47f ae78 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800
 8001010:	48000c00 	.word	0x48000c00
 8001014:	48001000 	.word	0x48001000
 8001018:	48001400 	.word	0x48001400
 800101c:	48001800 	.word	0x48001800
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001040:	e002      	b.n	8001048 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_PWREx_GetVoltageRange+0x18>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007000 	.word	0x40007000

08001070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107e:	d130      	bne.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108c:	d038      	beq.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2232      	movs	r2, #50	; 0x32
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b4:	e002      	b.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d102      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f2      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	d110      	bne.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e00f      	b.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d007      	beq.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f8:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40007000 	.word	0x40007000
 8001114:	20000000 	.word	0x20000000
 8001118:	431bde83 	.word	0x431bde83

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e3d4      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112e:	4ba1      	ldr	r3, [pc, #644]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001138:	4b9e      	ldr	r3, [pc, #632]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80e4 	beq.w	8001318 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_RCC_OscConfig+0x4a>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	f040 808b 	bne.w	8001274 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b01      	cmp	r3, #1
 8001162:	f040 8087 	bne.w	8001274 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001166:	4b93      	ldr	r3, [pc, #588]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x62>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e3ac      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1a      	ldr	r2, [r3, #32]
 8001182:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <HAL_RCC_OscConfig+0x7c>
 800118e:	4b89      	ldr	r3, [pc, #548]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001196:	e005      	b.n	80011a4 <HAL_RCC_OscConfig+0x88>
 8001198:	4b86      	ldr	r3, [pc, #536]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d223      	bcs.n	80011f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fd3f 	bl	8001c30 <RCC_SetFlashLatencyFromMSIRange>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e38d      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011bc:	4b7d      	ldr	r3, [pc, #500]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a7c      	ldr	r2, [pc, #496]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4977      	ldr	r1, [pc, #476]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011da:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	4972      	ldr	r1, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	604b      	str	r3, [r1, #4]
 80011ee:	e025      	b.n	800123c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f0:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6f      	ldr	r2, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	496a      	ldr	r1, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120e:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4965      	ldr	r1, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fcff 	bl	8001c30 <RCC_SetFlashLatencyFromMSIRange>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e34d      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800123c:	f000 fc36 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001240:	4601      	mov	r1, r0
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4a5a      	ldr	r2, [pc, #360]	; (80013b8 <HAL_RCC_OscConfig+0x29c>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	f003 031f 	and.w	r3, r3, #31
 8001254:	fa21 f303 	lsr.w	r3, r1, r3
 8001258:	4a58      	ldr	r2, [pc, #352]	; (80013bc <HAL_RCC_OscConfig+0x2a0>)
 800125a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800125c:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_RCC_OscConfig+0x2a4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fbf5 	bl	8000a50 <HAL_InitTick>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d052      	beq.n	8001316 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	e331      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d032      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc32 	bl	8000af0 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001290:	f7ff fc2e 	bl	8000af0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e31a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b3e      	ldr	r3, [pc, #248]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	493b      	ldr	r1, [pc, #236]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4936      	ldr	r1, [pc, #216]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e01a      	b.n	8001318 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fbff 	bl	8000af0 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f6:	f7ff fbfb 	bl	8000af0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e2e7      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x1da>
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001316:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d074      	beq.n	800140e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b08      	cmp	r3, #8
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x21a>
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b0c      	cmp	r3, #12
 800132e:	d10e      	bne.n	800134e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d10b      	bne.n	800134e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d064      	beq.n	800140c <HAL_RCC_OscConfig+0x2f0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d160      	bne.n	800140c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e2c4      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x24a>
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e01d      	b.n	80013a2 <HAL_RCC_OscConfig+0x286>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x26e>
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x286>
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_RCC_OscConfig+0x298>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fba1 	bl	8000af0 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b0:	e011      	b.n	80013d6 <HAL_RCC_OscConfig+0x2ba>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	08003c14 	.word	0x08003c14
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fb94 	bl	8000af0 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e280      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d6:	4baf      	ldr	r3, [pc, #700]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x2a8>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb84 	bl	8000af0 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fb80 	bl	8000af0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e26c      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fe:	4ba5      	ldr	r3, [pc, #660]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d0>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d060      	beq.n	80014dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x310>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d119      	bne.n	800145a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d116      	bne.n	800145a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	4b99      	ldr	r3, [pc, #612]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x328>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e249      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b93      	ldr	r3, [pc, #588]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4990      	ldr	r1, [pc, #576]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001458:	e040      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d023      	beq.n	80014aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001462:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a8b      	ldr	r2, [pc, #556]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fb3f 	bl	8000af0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fb3b 	bl	8000af0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e227      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	497c      	ldr	r1, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e018      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a79      	ldr	r2, [pc, #484]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb1b 	bl	8000af0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fb17 	bl	8000af0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e203      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d0:	4b70      	ldr	r3, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03c      	beq.n	8001562 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01c      	beq.n	800152a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f6:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001500:	f7ff faf6 	bl	8000af0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff faf2 	bl	8000af0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1de      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151a:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ef      	beq.n	8001508 <HAL_RCC_OscConfig+0x3ec>
 8001528:	e01b      	b.n	8001562 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800152c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fad9 	bl	8000af0 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fad5 	bl	8000af0 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1c1      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001554:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ef      	bne.n	8001542 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a6 	beq.w	80016bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158a:	6593      	str	r3, [r2, #88]	; 0x58
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001598:	2301      	movs	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_OscConfig+0x57c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d118      	bne.n	80015da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a8:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x57c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a3a      	ldr	r2, [pc, #232]	; (8001698 <HAL_RCC_OscConfig+0x57c>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa9c 	bl	8000af0 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff fa98 	bl	8000af0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e184      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x57c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d8>
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e8:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f2:	e024      	b.n	800163e <HAL_RCC_OscConfig+0x522>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d110      	bne.n	800161e <HAL_RCC_OscConfig+0x502>
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161c:	e00f      	b.n	800163e <HAL_RCC_OscConfig+0x522>
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa53 	bl	8000af0 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fa4f 	bl	8000af0 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e139      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_OscConfig+0x578>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ed      	beq.n	800164e <HAL_RCC_OscConfig+0x532>
 8001672:	e01a      	b.n	80016aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fa3c 	bl	8000af0 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fa38 	bl	8000af0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d906      	bls.n	800169c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e122      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	4b90      	ldr	r3, [pc, #576]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1e8      	bne.n	800167c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	4a8a      	ldr	r2, [pc, #552]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8108 	beq.w	80018d6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	f040 80d0 	bne.w	8001870 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d130      	bne.n	8001746 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	3b01      	subs	r3, #1
 80016f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d127      	bne.n	8001746 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d11f      	bne.n	8001746 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001710:	2a07      	cmp	r2, #7
 8001712:	bf14      	ite	ne
 8001714:	2201      	movne	r2, #1
 8001716:	2200      	moveq	r2, #0
 8001718:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171a:	4293      	cmp	r3, r2
 800171c:	d113      	bne.n	8001746 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d109      	bne.n	8001746 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d06e      	beq.n	8001824 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d069      	beq.n	8001820 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b7      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001768:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a5c      	ldr	r2, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800176e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001774:	f7ff f9bc 	bl	8000af0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f9b8 	bl	8000af0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e0a4      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178e:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179a:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	4b51      	ldr	r3, [pc, #324]	; (80018e4 <HAL_RCC_OscConfig+0x7c8>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017aa:	3a01      	subs	r2, #1
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017b4:	0212      	lsls	r2, r2, #8
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017bc:	0852      	lsrs	r2, r2, #1
 80017be:	3a01      	subs	r2, #1
 80017c0:	0552      	lsls	r2, r2, #21
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017c8:	0852      	lsrs	r2, r2, #1
 80017ca:	3a01      	subs	r2, #1
 80017cc:	0652      	lsls	r2, r2, #25
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017d4:	0912      	lsrs	r2, r2, #4
 80017d6:	0452      	lsls	r2, r2, #17
 80017d8:	430a      	orrs	r2, r1
 80017da:	4941      	ldr	r1, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f8:	f7ff f97a 	bl	8000af0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f976 	bl	8000af0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e062      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800181e:	e05a      	b.n	80018d6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e059      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d152      	bne.n	80018d6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001846:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001848:	f7ff f952 	bl	8000af0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f94e 	bl	8000af0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e03a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x734>
 800186e:	e032      	b.n	80018d6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d02d      	beq.n	80018d2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800187c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 8001894:	f023 0303 	bic.w	r3, r3, #3
 8001898:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80018a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff f921 	bl	8000af0 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff f91d 	bl	8000af0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e009      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x7c4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x796>
 80018d0:	e001      	b.n	80018d6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	f99d808c 	.word	0xf99d808c

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0c8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4961      	ldr	r1, [pc, #388]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b0      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d04c      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d121      	bne.n	8001990 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e09e      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d107      	bne.n	8001968 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d115      	bne.n	8001990 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e092      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e086      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e07e      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 0203 	bic.w	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	493f      	ldr	r1, [pc, #252]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a2:	f7ff f8a5 	bl	8000af0 <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7ff f8a1 	bl	8000af0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e066      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 020c 	and.w	r2, r3, #12
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d1eb      	bne.n	80019aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	492c      	ldr	r1, [pc, #176]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d210      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4924      	ldr	r1, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_ClockConfig+0x1b0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e036      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4918      	ldr	r1, [pc, #96]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4910      	ldr	r1, [pc, #64]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a5e:	f000 f825 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a62:	4601      	mov	r1, r0
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	fa21 f303 	lsr.w	r3, r1, r3
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe ffe4 	bl	8000a50 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08003c14 	.word	0x08003c14
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d121      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d11e      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e005      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d102      	bne.n	8001b2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	e004      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d133      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0xaa>
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b52:	617b      	str	r3, [r7, #20]
      break;
 8001b54:	e005      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b58:	617b      	str	r3, [r7, #20]
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	617b      	str	r3, [r7, #20]
      break;
 8001b60:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	fb02 f203 	mul.w	r2, r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0e5b      	lsrs	r3, r3, #25
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3724      	adds	r7, #36	; 0x24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08003c2c 	.word	0x08003c2c
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4601      	mov	r1, r0
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08003c24 	.word	0x08003c24

08001c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c08:	f7ff ffda 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c0c:	4601      	mov	r1, r0
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0adb      	lsrs	r3, r3, #11
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003c24 	.word	0x08003c24

08001c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c48:	f7ff fa04 	bl	8001054 <HAL_PWREx_GetVoltageRange>
 8001c4c:	6178      	str	r0, [r7, #20]
 8001c4e:	e014      	b.n	8001c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c68:	f7ff f9f4 	bl	8001054 <HAL_PWREx_GetVoltageRange>
 8001c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d10b      	bne.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d919      	bls.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c8c:	d902      	bls.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c8e:	2302      	movs	r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	e013      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e010      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d902      	bls.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e00a      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d102      	bne.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e004      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b70      	cmp	r3, #112	; 0x70
 8001cb6:	d101      	bne.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 0207 	bic.w	r2, r3, #7
 8001cc4:	4909      	ldr	r1, [pc, #36]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40022000 	.word	0x40022000

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d03f      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d14:	d01c      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1a:	d802      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d20:	e01f      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d26:	d003      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d2c:	d01c      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d2e:	e018      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d30:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a84      	ldr	r2, [pc, #528]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d3c:	e015      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fab9 	bl	80022bc <RCCEx_PLLSAI1_Config>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d4e:	e00c      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3320      	adds	r3, #32
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fba0 	bl	800249c <RCCEx_PLLSAI2_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d60:	e003      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	74fb      	strb	r3, [r7, #19]
      break;
 8001d66:	e000      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d70:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d7e:	4972      	ldr	r1, [pc, #456]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d86:	e001      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d03f      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d01c      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da6:	d802      	bhi.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001dac:	e01f      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001db2:	d003      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001db4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001db8:	d01c      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dba:	e018      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dbc:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a61      	ldr	r2, [pc, #388]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dc8:	e015      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fa73 	bl	80022bc <RCCEx_PLLSAI1_Config>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dda:	e00c      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3320      	adds	r3, #32
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fb5a 	bl	800249c <RCCEx_PLLSAI2_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dec:	e003      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	74fb      	strb	r3, [r7, #19]
      break;
 8001df2:	e000      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001df6:	7cfb      	ldrb	r3, [r7, #19]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dfc:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e0a:	494f      	ldr	r1, [pc, #316]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e12:	e001      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a0 	beq.w	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4c:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fe42 	bl	8000af0 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e6e:	e009      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7fe fe3e 	bl	8000af0 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d902      	bls.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	74fb      	strb	r3, [r7, #19]
        break;
 8001e82:	e005      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ef      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d15c      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01f      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d019      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ebe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fdfd 	bl	8000af0 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fdf9 	bl	8000af0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d902      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f10:	e006      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ec      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f36:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f3e:	e009      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	74bb      	strb	r3, [r7, #18]
 8001f44:	e006      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f50:	7cfb      	ldrb	r3, [r7, #19]
 8001f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f54:	7c7b      	ldrb	r3, [r7, #17]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d105      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5a:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a9d      	ldr	r2, [pc, #628]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f72:	4b98      	ldr	r3, [pc, #608]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f023 0203 	bic.w	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	4994      	ldr	r1, [pc, #592]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f94:	4b8f      	ldr	r3, [pc, #572]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f023 020c 	bic.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	498c      	ldr	r1, [pc, #560]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fb6:	4b87      	ldr	r3, [pc, #540]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4983      	ldr	r1, [pc, #524]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd8:	4b7e      	ldr	r3, [pc, #504]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	497b      	ldr	r1, [pc, #492]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	4972      	ldr	r1, [pc, #456]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800201c:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	496a      	ldr	r1, [pc, #424]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	4961      	ldr	r1, [pc, #388]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	4959      	ldr	r1, [pc, #356]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002082:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	4950      	ldr	r1, [pc, #320]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020a4:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	4948      	ldr	r1, [pc, #288]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	493f      	ldr	r1, [pc, #252]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d028      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f6:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002106:	d106      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002112:	60d3      	str	r3, [r2, #12]
 8002114:	e011      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800211e:	d10c      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f8c8 	bl	80022bc <RCCEx_PLLSAI1_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d028      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	491f      	ldr	r1, [pc, #124]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002164:	d106      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002170:	60d3      	str	r3, [r2, #12]
 8002172:	e011      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800217c:	d10c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f899 	bl	80022bc <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02b      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c2:	d109      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
 80021d0:	e014      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f867 	bl	80022bc <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d02f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002216:	4928      	ldr	r1, [pc, #160]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002226:	d10d      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	2102      	movs	r1, #2
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f844 	bl	80022bc <RCCEx_PLLSAI1_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	74bb      	strb	r3, [r7, #18]
 8002242:	e011      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3320      	adds	r3, #32
 8002252:	2102      	movs	r1, #2
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f921 	bl	800249c <RCCEx_PLLSAI2_Config>
 800225a:	4603      	mov	r3, r0
 800225c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002282:	490d      	ldr	r1, [pc, #52]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a6:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d018      	beq.n	8002308 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d10d      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
       ||
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
       ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d044      	beq.n	800238c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e041      	b.n	800238c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d00c      	beq.n	800232a <RCCEx_PLLSAI1_Config+0x6e>
 8002310:	2b03      	cmp	r3, #3
 8002312:	d013      	beq.n	800233c <RCCEx_PLLSAI1_Config+0x80>
 8002314:	2b01      	cmp	r3, #1
 8002316:	d120      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002328:	e01a      	b.n	8002360 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233a:	e013      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002358:	e006      	b.n	8002368 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      break;
 800235e:	e004      	b.n	800236a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002360:	bf00      	nop
 8002362:	e002      	b.n	800236a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002364:	bf00      	nop
 8002366:	e000      	b.n	800236a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002368:	bf00      	nop
    }

    if(status == HAL_OK)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002370:	4b49      	ldr	r3, [pc, #292]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	3b01      	subs	r3, #1
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	430b      	orrs	r3, r1
 8002386:	4944      	ldr	r1, [pc, #272]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d17d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002398:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800239c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239e:	f7fe fba7 	bl	8000af0 <HAL_GetTick>
 80023a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a4:	e009      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a6:	f7fe fba3 	bl	8000af0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d902      	bls.n	80023ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	73fb      	strb	r3, [r7, #15]
        break;
 80023b8:	e005      	b.n	80023c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ba:	4b37      	ldr	r3, [pc, #220]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ef      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d160      	bne.n	800248e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d111      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	0211      	lsls	r1, r2, #8
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68d2      	ldr	r2, [r2, #12]
 80023e8:	0912      	lsrs	r2, r2, #4
 80023ea:	0452      	lsls	r2, r2, #17
 80023ec:	430a      	orrs	r2, r1
 80023ee:	492a      	ldr	r1, [pc, #168]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	610b      	str	r3, [r1, #16]
 80023f4:	e027      	b.n	8002446 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d112      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002404:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6892      	ldr	r2, [r2, #8]
 800240c:	0211      	lsls	r1, r2, #8
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6912      	ldr	r2, [r2, #16]
 8002412:	0852      	lsrs	r2, r2, #1
 8002414:	3a01      	subs	r2, #1
 8002416:	0552      	lsls	r2, r2, #21
 8002418:	430a      	orrs	r2, r1
 800241a:	491f      	ldr	r1, [pc, #124]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	610b      	str	r3, [r1, #16]
 8002420:	e011      	b.n	8002446 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800242a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6892      	ldr	r2, [r2, #8]
 8002432:	0211      	lsls	r1, r2, #8
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6952      	ldr	r2, [r2, #20]
 8002438:	0852      	lsrs	r2, r2, #1
 800243a:	3a01      	subs	r2, #1
 800243c:	0652      	lsls	r2, r2, #25
 800243e:	430a      	orrs	r2, r1
 8002440:	4915      	ldr	r1, [pc, #84]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800244c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002450:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe fb4d 	bl	8000af0 <HAL_GetTick>
 8002456:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002458:	e009      	b.n	800246e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245a:	f7fe fb49 	bl	8000af0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d902      	bls.n	800246e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	73fb      	strb	r3, [r7, #15]
          break;
 800246c:	e005      	b.n	800247a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0ef      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000

0800249c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024aa:	4b68      	ldr	r3, [pc, #416]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d018      	beq.n	80024e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10d      	bne.n	80024e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
       ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d044      	beq.n	800256c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e041      	b.n	800256c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d00c      	beq.n	800250a <RCCEx_PLLSAI2_Config+0x6e>
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d013      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x80>
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d120      	bne.n	800253a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024f8:	4b54      	ldr	r3, [pc, #336]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11d      	bne.n	8002540 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e01a      	b.n	8002540 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800250a:	4b50      	ldr	r3, [pc, #320]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e013      	b.n	8002544 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002538:	e006      	b.n	8002548 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      break;
 800253e:	e004      	b.n	800254a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002540:	bf00      	nop
 8002542:	e002      	b.n	800254a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002548:	bf00      	nop
    }

    if(status == HAL_OK)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6819      	ldr	r1, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	3b01      	subs	r3, #1
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	430b      	orrs	r3, r1
 8002566:	4939      	ldr	r1, [pc, #228]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d167      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a35      	ldr	r2, [pc, #212]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257e:	f7fe fab7 	bl	8000af0 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002584:	e009      	b.n	800259a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002586:	f7fe fab3 	bl	8000af0 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	73fb      	strb	r3, [r7, #15]
        break;
 8002598:	e005      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ef      	bne.n	8002586 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d14a      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d111      	bne.n	80025d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6892      	ldr	r2, [r2, #8]
 80025c2:	0211      	lsls	r1, r2, #8
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0912      	lsrs	r2, r2, #4
 80025ca:	0452      	lsls	r2, r2, #17
 80025cc:	430a      	orrs	r2, r1
 80025ce:	491f      	ldr	r1, [pc, #124]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	614b      	str	r3, [r1, #20]
 80025d4:	e011      	b.n	80025fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	0211      	lsls	r1, r2, #8
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6912      	ldr	r2, [r2, #16]
 80025ec:	0852      	lsrs	r2, r2, #1
 80025ee:	3a01      	subs	r2, #1
 80025f0:	0652      	lsls	r2, r2, #25
 80025f2:	430a      	orrs	r2, r1
 80025f4:	4915      	ldr	r1, [pc, #84]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fa73 	bl	8000af0 <HAL_GetTick>
 800260a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800260c:	e009      	b.n	8002622 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800260e:	f7fe fa6f 	bl	8000af0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	73fb      	strb	r3, [r7, #15]
          break;
 8002620:	e005      	b.n	800262e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ef      	beq.n	800260e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <RCCEx_PLLSAI2_Config+0x1b0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e040      	b.n	80026e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f8be 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f82c 	bl	80026ec <UART_SetConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e022      	b.n	80026e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 faaa 	bl	8002c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fb31 	bl	8002d44 <UART_CheckIdleState>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80026f0:	b088      	sub	sp, #32
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4bac      	ldr	r3, [pc, #688]	; (80029cc <UART_SetConfig+0x2e0>)
 800271a:	4013      	ands	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	69f9      	ldr	r1, [r7, #28]
 8002722:	430b      	orrs	r3, r1
 8002724:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4aa2      	ldr	r2, [pc, #648]	; (80029d0 <UART_SetConfig+0x2e4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d004      	beq.n	8002756 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a99      	ldr	r2, [pc, #612]	; (80029d4 <UART_SetConfig+0x2e8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d121      	bne.n	80027b8 <UART_SetConfig+0xcc>
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <UART_SetConfig+0x2ec>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b03      	cmp	r3, #3
 8002780:	d816      	bhi.n	80027b0 <UART_SetConfig+0xc4>
 8002782:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <UART_SetConfig+0x9c>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002799 	.word	0x08002799
 800278c:	080027a5 	.word	0x080027a5
 8002790:	0800279f 	.word	0x0800279f
 8002794:	080027ab 	.word	0x080027ab
 8002798:	2301      	movs	r3, #1
 800279a:	76fb      	strb	r3, [r7, #27]
 800279c:	e0e8      	b.n	8002970 <UART_SetConfig+0x284>
 800279e:	2302      	movs	r3, #2
 80027a0:	76fb      	strb	r3, [r7, #27]
 80027a2:	e0e5      	b.n	8002970 <UART_SetConfig+0x284>
 80027a4:	2304      	movs	r3, #4
 80027a6:	76fb      	strb	r3, [r7, #27]
 80027a8:	e0e2      	b.n	8002970 <UART_SetConfig+0x284>
 80027aa:	2308      	movs	r3, #8
 80027ac:	76fb      	strb	r3, [r7, #27]
 80027ae:	e0df      	b.n	8002970 <UART_SetConfig+0x284>
 80027b0:	2310      	movs	r3, #16
 80027b2:	76fb      	strb	r3, [r7, #27]
 80027b4:	bf00      	nop
 80027b6:	e0db      	b.n	8002970 <UART_SetConfig+0x284>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a87      	ldr	r2, [pc, #540]	; (80029dc <UART_SetConfig+0x2f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d134      	bne.n	800282c <UART_SetConfig+0x140>
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <UART_SetConfig+0x2ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d829      	bhi.n	8002824 <UART_SetConfig+0x138>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <UART_SetConfig+0xec>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002825 	.word	0x08002825
 80027e0:	08002825 	.word	0x08002825
 80027e4:	08002825 	.word	0x08002825
 80027e8:	08002819 	.word	0x08002819
 80027ec:	08002825 	.word	0x08002825
 80027f0:	08002825 	.word	0x08002825
 80027f4:	08002825 	.word	0x08002825
 80027f8:	08002813 	.word	0x08002813
 80027fc:	08002825 	.word	0x08002825
 8002800:	08002825 	.word	0x08002825
 8002804:	08002825 	.word	0x08002825
 8002808:	0800281f 	.word	0x0800281f
 800280c:	2300      	movs	r3, #0
 800280e:	76fb      	strb	r3, [r7, #27]
 8002810:	e0ae      	b.n	8002970 <UART_SetConfig+0x284>
 8002812:	2302      	movs	r3, #2
 8002814:	76fb      	strb	r3, [r7, #27]
 8002816:	e0ab      	b.n	8002970 <UART_SetConfig+0x284>
 8002818:	2304      	movs	r3, #4
 800281a:	76fb      	strb	r3, [r7, #27]
 800281c:	e0a8      	b.n	8002970 <UART_SetConfig+0x284>
 800281e:	2308      	movs	r3, #8
 8002820:	76fb      	strb	r3, [r7, #27]
 8002822:	e0a5      	b.n	8002970 <UART_SetConfig+0x284>
 8002824:	2310      	movs	r3, #16
 8002826:	76fb      	strb	r3, [r7, #27]
 8002828:	bf00      	nop
 800282a:	e0a1      	b.n	8002970 <UART_SetConfig+0x284>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6b      	ldr	r2, [pc, #428]	; (80029e0 <UART_SetConfig+0x2f4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d120      	bne.n	8002878 <UART_SetConfig+0x18c>
 8002836:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <UART_SetConfig+0x2ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002840:	2b10      	cmp	r3, #16
 8002842:	d00f      	beq.n	8002864 <UART_SetConfig+0x178>
 8002844:	2b10      	cmp	r3, #16
 8002846:	d802      	bhi.n	800284e <UART_SetConfig+0x162>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <UART_SetConfig+0x16c>
 800284c:	e010      	b.n	8002870 <UART_SetConfig+0x184>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d005      	beq.n	800285e <UART_SetConfig+0x172>
 8002852:	2b30      	cmp	r3, #48	; 0x30
 8002854:	d009      	beq.n	800286a <UART_SetConfig+0x17e>
 8002856:	e00b      	b.n	8002870 <UART_SetConfig+0x184>
 8002858:	2300      	movs	r3, #0
 800285a:	76fb      	strb	r3, [r7, #27]
 800285c:	e088      	b.n	8002970 <UART_SetConfig+0x284>
 800285e:	2302      	movs	r3, #2
 8002860:	76fb      	strb	r3, [r7, #27]
 8002862:	e085      	b.n	8002970 <UART_SetConfig+0x284>
 8002864:	2304      	movs	r3, #4
 8002866:	76fb      	strb	r3, [r7, #27]
 8002868:	e082      	b.n	8002970 <UART_SetConfig+0x284>
 800286a:	2308      	movs	r3, #8
 800286c:	76fb      	strb	r3, [r7, #27]
 800286e:	e07f      	b.n	8002970 <UART_SetConfig+0x284>
 8002870:	2310      	movs	r3, #16
 8002872:	76fb      	strb	r3, [r7, #27]
 8002874:	bf00      	nop
 8002876:	e07b      	b.n	8002970 <UART_SetConfig+0x284>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <UART_SetConfig+0x2f8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d120      	bne.n	80028c4 <UART_SetConfig+0x1d8>
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <UART_SetConfig+0x2ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d00f      	beq.n	80028b0 <UART_SetConfig+0x1c4>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d802      	bhi.n	800289a <UART_SetConfig+0x1ae>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <UART_SetConfig+0x1b8>
 8002898:	e010      	b.n	80028bc <UART_SetConfig+0x1d0>
 800289a:	2b80      	cmp	r3, #128	; 0x80
 800289c:	d005      	beq.n	80028aa <UART_SetConfig+0x1be>
 800289e:	2bc0      	cmp	r3, #192	; 0xc0
 80028a0:	d009      	beq.n	80028b6 <UART_SetConfig+0x1ca>
 80028a2:	e00b      	b.n	80028bc <UART_SetConfig+0x1d0>
 80028a4:	2300      	movs	r3, #0
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e062      	b.n	8002970 <UART_SetConfig+0x284>
 80028aa:	2302      	movs	r3, #2
 80028ac:	76fb      	strb	r3, [r7, #27]
 80028ae:	e05f      	b.n	8002970 <UART_SetConfig+0x284>
 80028b0:	2304      	movs	r3, #4
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e05c      	b.n	8002970 <UART_SetConfig+0x284>
 80028b6:	2308      	movs	r3, #8
 80028b8:	76fb      	strb	r3, [r7, #27]
 80028ba:	e059      	b.n	8002970 <UART_SetConfig+0x284>
 80028bc:	2310      	movs	r3, #16
 80028be:	76fb      	strb	r3, [r7, #27]
 80028c0:	bf00      	nop
 80028c2:	e055      	b.n	8002970 <UART_SetConfig+0x284>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a47      	ldr	r2, [pc, #284]	; (80029e8 <UART_SetConfig+0x2fc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d124      	bne.n	8002918 <UART_SetConfig+0x22c>
 80028ce:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <UART_SetConfig+0x2ec>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028dc:	d012      	beq.n	8002904 <UART_SetConfig+0x218>
 80028de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e2:	d802      	bhi.n	80028ea <UART_SetConfig+0x1fe>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <UART_SetConfig+0x20c>
 80028e8:	e012      	b.n	8002910 <UART_SetConfig+0x224>
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d006      	beq.n	80028fe <UART_SetConfig+0x212>
 80028f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f4:	d009      	beq.n	800290a <UART_SetConfig+0x21e>
 80028f6:	e00b      	b.n	8002910 <UART_SetConfig+0x224>
 80028f8:	2300      	movs	r3, #0
 80028fa:	76fb      	strb	r3, [r7, #27]
 80028fc:	e038      	b.n	8002970 <UART_SetConfig+0x284>
 80028fe:	2302      	movs	r3, #2
 8002900:	76fb      	strb	r3, [r7, #27]
 8002902:	e035      	b.n	8002970 <UART_SetConfig+0x284>
 8002904:	2304      	movs	r3, #4
 8002906:	76fb      	strb	r3, [r7, #27]
 8002908:	e032      	b.n	8002970 <UART_SetConfig+0x284>
 800290a:	2308      	movs	r3, #8
 800290c:	76fb      	strb	r3, [r7, #27]
 800290e:	e02f      	b.n	8002970 <UART_SetConfig+0x284>
 8002910:	2310      	movs	r3, #16
 8002912:	76fb      	strb	r3, [r7, #27]
 8002914:	bf00      	nop
 8002916:	e02b      	b.n	8002970 <UART_SetConfig+0x284>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <UART_SetConfig+0x2e4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d124      	bne.n	800296c <UART_SetConfig+0x280>
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <UART_SetConfig+0x2ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d012      	beq.n	8002958 <UART_SetConfig+0x26c>
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	d802      	bhi.n	800293e <UART_SetConfig+0x252>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <UART_SetConfig+0x260>
 800293c:	e012      	b.n	8002964 <UART_SetConfig+0x278>
 800293e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002942:	d006      	beq.n	8002952 <UART_SetConfig+0x266>
 8002944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002948:	d009      	beq.n	800295e <UART_SetConfig+0x272>
 800294a:	e00b      	b.n	8002964 <UART_SetConfig+0x278>
 800294c:	2300      	movs	r3, #0
 800294e:	76fb      	strb	r3, [r7, #27]
 8002950:	e00e      	b.n	8002970 <UART_SetConfig+0x284>
 8002952:	2302      	movs	r3, #2
 8002954:	76fb      	strb	r3, [r7, #27]
 8002956:	e00b      	b.n	8002970 <UART_SetConfig+0x284>
 8002958:	2304      	movs	r3, #4
 800295a:	76fb      	strb	r3, [r7, #27]
 800295c:	e008      	b.n	8002970 <UART_SetConfig+0x284>
 800295e:	2308      	movs	r3, #8
 8002960:	76fb      	strb	r3, [r7, #27]
 8002962:	e005      	b.n	8002970 <UART_SetConfig+0x284>
 8002964:	2310      	movs	r3, #16
 8002966:	76fb      	strb	r3, [r7, #27]
 8002968:	bf00      	nop
 800296a:	e001      	b.n	8002970 <UART_SetConfig+0x284>
 800296c:	2310      	movs	r3, #16
 800296e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <UART_SetConfig+0x2e4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 8087 	bne.w	8002a8a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800297c:	7efb      	ldrb	r3, [r7, #27]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d836      	bhi.n	80029f0 <UART_SetConfig+0x304>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <UART_SetConfig+0x29c>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	080029ad 	.word	0x080029ad
 800298c:	080029f1 	.word	0x080029f1
 8002990:	080029b5 	.word	0x080029b5
 8002994:	080029f1 	.word	0x080029f1
 8002998:	080029bb 	.word	0x080029bb
 800299c:	080029f1 	.word	0x080029f1
 80029a0:	080029f1 	.word	0x080029f1
 80029a4:	080029f1 	.word	0x080029f1
 80029a8:	080029c3 	.word	0x080029c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff f914 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80029b0:	6178      	str	r0, [r7, #20]
        break;
 80029b2:	e022      	b.n	80029fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <UART_SetConfig+0x300>)
 80029b6:	617b      	str	r3, [r7, #20]
        break;
 80029b8:	e01f      	b.n	80029fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff f877 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 80029be:	6178      	str	r0, [r7, #20]
        break;
 80029c0:	e01b      	b.n	80029fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c6:	617b      	str	r3, [r7, #20]
        break;
 80029c8:	e017      	b.n	80029fa <UART_SetConfig+0x30e>
 80029ca:	bf00      	nop
 80029cc:	efff69f3 	.word	0xefff69f3
 80029d0:	40008000 	.word	0x40008000
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40004800 	.word	0x40004800
 80029e4:	40004c00 	.word	0x40004c00
 80029e8:	40005000 	.word	0x40005000
 80029ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	76bb      	strb	r3, [r7, #26]
        break;
 80029f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80f1 	beq.w	8002be4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d305      	bcc.n	8002a1e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d902      	bls.n	8002a24 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	76bb      	strb	r3, [r7, #26]
 8002a22:	e0df      	b.n	8002be4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	0214      	lsls	r4, r2, #8
 8002a36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a3a:	020b      	lsls	r3, r1, #8
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	4611      	mov	r1, r2
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	eb13 0b01 	adds.w	fp, r3, r1
 8002a4c:	eb44 0c02 	adc.w	ip, r4, r2
 8002a50:	4658      	mov	r0, fp
 8002a52:	4661      	mov	r1, ip
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4623      	mov	r3, r4
 8002a60:	f7fd fbb2 	bl	80001c8 <__aeabi_uldivmod>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a70:	d308      	bcc.n	8002a84 <UART_SetConfig+0x398>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a78:	d204      	bcs.n	8002a84 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	e0af      	b.n	8002be4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	76bb      	strb	r3, [r7, #26]
 8002a88:	e0ac      	b.n	8002be4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d15b      	bne.n	8002b4c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002a94:	7efb      	ldrb	r3, [r7, #27]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d827      	bhi.n	8002aea <UART_SetConfig+0x3fe>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <UART_SetConfig+0x3b4>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002ad5 	.word	0x08002ad5
 8002aac:	08002aeb 	.word	0x08002aeb
 8002ab0:	08002adb 	.word	0x08002adb
 8002ab4:	08002aeb 	.word	0x08002aeb
 8002ab8:	08002aeb 	.word	0x08002aeb
 8002abc:	08002aeb 	.word	0x08002aeb
 8002ac0:	08002ae3 	.word	0x08002ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f7ff f888 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	6178      	str	r0, [r7, #20]
        break;
 8002aca:	e013      	b.n	8002af4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002acc:	f7ff f89a 	bl	8001c04 <HAL_RCC_GetPCLK2Freq>
 8002ad0:	6178      	str	r0, [r7, #20]
        break;
 8002ad2:	e00f      	b.n	8002af4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad4:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <UART_SetConfig+0x510>)
 8002ad6:	617b      	str	r3, [r7, #20]
        break;
 8002ad8:	e00c      	b.n	8002af4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ada:	f7fe ffe7 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8002ade:	6178      	str	r0, [r7, #20]
        break;
 8002ae0:	e008      	b.n	8002af4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae6:	617b      	str	r3, [r7, #20]
        break;
 8002ae8:	e004      	b.n	8002af4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	76bb      	strb	r3, [r7, #26]
        break;
 8002af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d074      	beq.n	8002be4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d916      	bls.n	8002b46 <UART_SetConfig+0x45a>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d212      	bcs.n	8002b46 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f023 030f 	bic.w	r3, r3, #15
 8002b28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	89fb      	ldrh	r3, [r7, #14]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	89fa      	ldrh	r2, [r7, #14]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e04e      	b.n	8002be4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	76bb      	strb	r3, [r7, #26]
 8002b4a:	e04b      	b.n	8002be4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b4c:	7efb      	ldrb	r3, [r7, #27]
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d827      	bhi.n	8002ba2 <UART_SetConfig+0x4b6>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0x46c>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002ba3 	.word	0x08002ba3
 8002b68:	08002b93 	.word	0x08002b93
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002ba3 	.word	0x08002ba3
 8002b74:	08002ba3 	.word	0x08002ba3
 8002b78:	08002b9b 	.word	0x08002b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7ff f82c 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002b80:	6178      	str	r0, [r7, #20]
        break;
 8002b82:	e013      	b.n	8002bac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7ff f83e 	bl	8001c04 <HAL_RCC_GetPCLK2Freq>
 8002b88:	6178      	str	r0, [r7, #20]
        break;
 8002b8a:	e00f      	b.n	8002bac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <UART_SetConfig+0x510>)
 8002b8e:	617b      	str	r3, [r7, #20]
        break;
 8002b90:	e00c      	b.n	8002bac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b92:	f7fe ff8b 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8002b96:	6178      	str	r0, [r7, #20]
        break;
 8002b98:	e008      	b.n	8002bac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9e:	617b      	str	r3, [r7, #20]
        break;
 8002ba0:	e004      	b.n	8002bac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	76bb      	strb	r3, [r7, #26]
        break;
 8002baa:	bf00      	nop
    }

    if (pclk != 0U)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	085a      	lsrs	r2, r3, #1
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d908      	bls.n	8002be0 <UART_SetConfig+0x4f4>
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d204      	bcs.n	8002be0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e001      	b.n	8002be4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bf0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002bfc:	00f42400 	.word	0x00f42400

08002c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01a      	beq.n	8002d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfe:	d10a      	bne.n	8002d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d52:	f7fd fecd 	bl	8000af0 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d10e      	bne.n	8002d84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f82a 	bl	8002dce <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e020      	b.n	8002dc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d10e      	bne.n	8002db0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f814 	bl	8002dce <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e00a      	b.n	8002dc6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dde:	e05d      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d059      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de8:	f7fd fe82 	bl	8000af0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11b      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e042      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02b      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e52:	d123      	bne.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e00f      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d092      	beq.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <LL_FLASH_IsActiveFlag_BSY>:
  FLASH_CHK_OK = 0,
  FLASH_CHK_EMPTY
};

__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_BSY(FLASH_TypeDef *FLASHx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(FLASHx->SR, FLASH_SR_BSY) == (FLASH_SR_BSY));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_FLASH_SET_OBL_Launch>:
  /* Set the OBL_Launch bit to launch the option byte loading */
__STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	615a      	str	r2, [r3, #20]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_FLASH_Lock>:
__STATIC_INLINE void LL_FLASH_Lock(FLASH_TypeDef *FLASHx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_LOCK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	615a      	str	r2, [r3, #20]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_FLASH_LockState>:
/*read flash's states of lock or unlock*/
__STATIC_INLINE uint32_t LL_FLASH_LockState(FLASH_TypeDef *FLASHx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	return READ_BIT(FLASHx->CR,FLASH_CR_LOCK);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_FLASh_SetKey>:
/*set key for flash*/
__STATIC_INLINE void LL_FLASh_SetKey(FLASH_TypeDef *FLASHx,uint32_t key)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	WRITE_REG(FLASHx->KEYR,key);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_FLASH_EnableProgram>:

/*EnableProgram*/
__STATIC_INLINE void LL_FLASH_EnableProgram(FLASH_TypeDef *FLASHx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR,FLASH_CR_PG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	615a      	str	r2, [r3, #20]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_FLASH_DisenableProgram>:
/*DisenableProgram*/
__STATIC_INLINE void LL_FLASH_DisenableProgram(FLASH_TypeDef *FLASHx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(FLASHx->CR,FLASH_CR_PG);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f023 0201 	bic.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	615a      	str	r2, [r3, #20]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_FLASH_PageErase>:
uint8_t LL_Flash_Unlock(void);
uint32_t FLASH_If_Check(uint32_t start);
uint8_t LL_FLASH_OB_Unlock(void);

uint8_t LL_FLASH_PageErase(uint16_t PageNumber)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
	uint32_t BankActive;
	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8002fae:	4b29      	ldr	r3, [pc, #164]	; (8003054 <LL_FLASH_PageErase+0xb0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 8002fb8:	f000 f8fc 	bl	80031b4 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 8002fbc:	bf00      	nop
 8002fbe:	4826      	ldr	r0, [pc, #152]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002fc0:	f7ff ff80 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <LL_FLASH_PageErase+0x1a>
	{
	}
	if(PageNumber>200)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2bc8      	cmp	r3, #200	; 0xc8
 8002fce:	d93b      	bls.n	8003048 <LL_FLASH_PageErase+0xa4>
	{
		SET_BIT(FLASH->CR, FLASH_CR_PER);        //enable flash earse
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4a20      	ldr	r2, [pc, #128]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	6153      	str	r3, [r2, #20]
		if(BankActive == 0)                      //bank1 is active
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <LL_FLASH_PageErase+0x4c>
		{
			CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);   //earse bank1
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fec:	6153      	str	r3, [r2, #20]
 8002fee:	e005      	b.n	8002ffc <LL_FLASH_PageErase+0x58>
		}
		else                                     //bank2 is active
		{
			SET_BIT(FLASH->CR, FLASH_CR_BKER);     //earse bank2
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002ff6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ffa:	6153      	str	r3, [r2, #20]
		}
	  SET_BIT(FLASH->CR, (PageNumber << 3));   //set page to earse
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	00d2      	lsls	r2, r2, #3
 8003004:	4611      	mov	r1, r2
 8003006:	4a14      	ldr	r2, [pc, #80]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003008:	430b      	orrs	r3, r1
 800300a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);       //start earsing...
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	6153      	str	r3, [r2, #20]
		while (LL_FLASH_IsActiveFlag_BSY(FLASH)) //wait for flash operation complete
 8003018:	bf00      	nop
 800301a:	480f      	ldr	r0, [pc, #60]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 800301c:	f7ff ff52 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <LL_FLASH_PageErase+0x76>
	  {
	  }
		CLEAR_BIT(FLASH->CR, FLASH_CR_PNB);      //clear page to earse
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 800302c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003030:	6153      	str	r3, [r2, #20]
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);      //disable flash earse
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	6153      	str	r3, [r2, #20]
	else
	{
		return LL_ERROR;
	}

	LL_FLASH_Lock(FLASH);
 800303e:	4806      	ldr	r0, [pc, #24]	; (8003058 <LL_FLASH_PageErase+0xb4>)
 8003040:	f7ff ff64 	bl	8002f0c <LL_FLASH_Lock>
	return LL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <LL_FLASH_PageErase+0xa6>
		return LL_ERROR;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40022000 	.word	0x40022000

0800305c <LL_FLASH_Program64>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint8_t LL_FLASH_Program64(uint32_t faddr,uint32_t* pData)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 800306a:	f000 f8a3 	bl	80031b4 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 800306e:	bf00      	nop
 8003070:	4818      	ldr	r0, [pc, #96]	; (80030d4 <LL_FLASH_Program64+0x78>)
 8003072:	f7ff ff27 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f9      	bne.n	8003070 <LL_FLASH_Program64+0x14>
	{
	}
	LL_FLASH_EnableProgram(FLASH);              //flash program enable
 800307c:	4815      	ldr	r0, [pc, #84]	; (80030d4 <LL_FLASH_Program64+0x78>)
 800307e:	f7ff ff71 	bl	8002f64 <LL_FLASH_EnableProgram>
	/* Program the double word */
  *(__IO uint32_t*)faddr = *pData;            //program 4 bytes, little endian
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(faddr+4) = *(pData+1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	461a      	mov	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	6013      	str	r3, [r2, #0]

	prog_bit = FLASH_CR_PG;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 800309a:	bf00      	nop
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <LL_FLASH_Program64+0x78>)
 800309e:	f7ff ff11 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <LL_FLASH_Program64+0x40>
	{
	}
	if(prog_bit!=0)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <LL_FLASH_Program64+0x60>
	{
		CLEAR_BIT(FLASH->CR,prog_bit);
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <LL_FLASH_Program64+0x78>)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4907      	ldr	r1, [pc, #28]	; (80030d4 <LL_FLASH_Program64+0x78>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	614b      	str	r3, [r1, #20]
	}
	LL_FLASH_DisenableProgram(FLASH);
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <LL_FLASH_Program64+0x78>)
 80030be:	f7ff ff61 	bl	8002f84 <LL_FLASH_DisenableProgram>
	LL_FLASH_Lock(FLASH);
 80030c2:	4804      	ldr	r0, [pc, #16]	; (80030d4 <LL_FLASH_Program64+0x78>)
 80030c4:	f7ff ff22 	bl	8002f0c <LL_FLASH_Lock>
	return LL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000

080030d8 <STMFLASH_Read32>:
	LL_FLASH_Lock(FLASH);
	return LL_OK;
}

uint32_t STMFLASH_Read32( uint32_t faddr )
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return *(__IO uint32_t*)faddr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <STMFLASH_BankSwitch>:

uint8_t STMFLASH_BankSwitch(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
	uint8_t result;
	uint32_t BankActive = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]

	LL_FLASH_Lock(FLASH);
 80030fa:	482c      	ldr	r0, [pc, #176]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 80030fc:	f7ff ff06 	bl	8002f0c <LL_FLASH_Lock>
	/* Clear OPTVERR bit set on virgin samples */
	if((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { SET_BIT(FLASH->ECCR, ((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }

  if((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { WRITE_REG(FLASH->SR, ((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003102:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003106:	611a      	str	r2, [r3, #16]

	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <STMFLASH_BankSwitch+0xc0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	603b      	str	r3, [r7, #0]
  result = LL_Flash_Unlock();
 8003112:	f000 f84f 	bl	80031b4 <LL_Flash_Unlock>
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]

	if( result == LL_OK)
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d140      	bne.n	80031a2 <STMFLASH_BankSwitch+0xb2>
	{
		  result = LL_FLASH_OB_Unlock();
 8003120:	f000 f868 	bl	80031f4 <LL_FLASH_OB_Unlock>
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
		  if((READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == RESET))
 8003128:	4b20      	ldr	r3, [pc, #128]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <STMFLASH_BankSwitch+0x72>
			{
				  while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003134:	bf00      	nop
 8003136:	481d      	ldr	r0, [pc, #116]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003138:	f7ff fec4 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <STMFLASH_BankSwitch+0x46>
					{
					}
					/* When no firmware at bank2, board is working at bank1 with BFB2 flag set. So BFB2 flag should be clear by checking bank (when FUT is at bank 1)instead of BFB2. */
					if (BankActive != 0)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <STMFLASH_BankSwitch+0x66>
					{
						CLEAR_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 800314e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e005      	b.n	8003162 <STMFLASH_BankSwitch+0x72>
					}
					else
					{
						SET_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 800315c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003160:	6213      	str	r3, [r2, #32]
					}
			}
			/* Set OPTSTRT Bit */
			SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4a11      	ldr	r2, [pc, #68]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	6153      	str	r3, [r2, #20]
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 800316e:	bf00      	nop
 8003170:	480e      	ldr	r0, [pc, #56]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003172:	f7ff fea7 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f9      	bne.n	8003170 <STMFLASH_BankSwitch+0x80>
			{
			}
			/* If the option byte program operation is completed, disable the OPTSTRT Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003182:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003186:	6153      	str	r3, [r2, #20]

			/* Set the bit to force the option byte reloading */
			if (result == LL_OK)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <STMFLASH_BankSwitch+0xa4>
			{
				LL_FLASH_SET_OBL_Launch(FLASH);
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003190:	f7ff feac 	bl	8002eec <LL_FLASH_SET_OBL_Launch>
			}
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003194:	bf00      	nop
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <STMFLASH_BankSwitch+0xbc>)
 8003198:	f7ff fe94 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f9      	bne.n	8003196 <STMFLASH_BankSwitch+0xa6>
			{
			}
	}
	return result;
 80031a2:	79fb      	ldrb	r3, [r7, #7]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40010000 	.word	0x40010000

080031b4 <LL_Flash_Unlock>:

uint8_t LL_Flash_Unlock(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 80031b8:	bf00      	nop
 80031ba:	480b      	ldr	r0, [pc, #44]	; (80031e8 <LL_Flash_Unlock+0x34>)
 80031bc:	f7ff fe82 	bl	8002ec4 <LL_FLASH_IsActiveFlag_BSY>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f9      	bne.n	80031ba <LL_Flash_Unlock+0x6>
	{
	}
	if (LL_FLASH_LockState(FLASH)!=0)
 80031c6:	4808      	ldr	r0, [pc, #32]	; (80031e8 <LL_Flash_Unlock+0x34>)
 80031c8:	f7ff feb0 	bl	8002f2c <LL_FLASH_LockState>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <LL_Flash_Unlock+0x2e>
	{
		LL_FLASh_SetKey(FLASH,FLASH_KEY1);
 80031d2:	4906      	ldr	r1, [pc, #24]	; (80031ec <LL_Flash_Unlock+0x38>)
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <LL_Flash_Unlock+0x34>)
 80031d6:	f7ff feb7 	bl	8002f48 <LL_FLASh_SetKey>
		LL_FLASh_SetKey(FLASH,FLASH_KEY2);
 80031da:	4905      	ldr	r1, [pc, #20]	; (80031f0 <LL_Flash_Unlock+0x3c>)
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <LL_Flash_Unlock+0x34>)
 80031de:	f7ff feb3 	bl	8002f48 <LL_FLASh_SetKey>
	}
	return LL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40022000 	.word	0x40022000
 80031ec:	45670123 	.word	0x45670123
 80031f0:	cdef89ab 	.word	0xcdef89ab

080031f4 <LL_FLASH_OB_Unlock>:
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASH_CHK_EMPTY;
  return FLASH_CHK_OK;
}
uint8_t LL_FLASH_OB_Unlock(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != RESET)
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <LL_FLASH_OB_Unlock+0x2c>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <LL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);//allow programming
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <LL_FLASH_OB_Unlock+0x2c>)
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <LL_FLASH_OB_Unlock+0x30>)
 8003208:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);//allow erasing
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <LL_FLASH_OB_Unlock+0x2c>)
 800320c:	4a06      	ldr	r2, [pc, #24]	; (8003228 <LL_FLASH_OB_Unlock+0x34>)
 800320e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return LL_ERROR;
  }
  return LL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <LL_FLASH_OB_Unlock+0x22>
    return LL_ERROR;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40022000 	.word	0x40022000
 8003224:	08192a3b 	.word	0x08192a3b
 8003228:	4c5d6e7f 	.word	0x4c5d6e7f

0800322c <Reset_Handler>:
					)
				}
#endif

void Reset_Handler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
					__ASM volatile
 8003230:	f8df d040 	ldr.w	sp, [pc, #64]	; 8003274 <LoopForever+0x8>
 8003234:	2100      	movs	r1, #0
 8003236:	e003      	b.n	8003240 <LoopCopyDataInit>

08003238 <CopyDataInit>:
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <LoopForever+0xc>)
 800323a:	585b      	ldr	r3, [r3, r1]
 800323c:	5043      	str	r3, [r0, r1]
 800323e:	3104      	adds	r1, #4

08003240 <LoopCopyDataInit>:
 8003240:	480e      	ldr	r0, [pc, #56]	; (800327c <LoopForever+0x10>)
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <LoopForever+0x14>)
 8003244:	1842      	adds	r2, r0, r1
 8003246:	429a      	cmp	r2, r3
 8003248:	d3f6      	bcc.n	8003238 <CopyDataInit>
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <LoopForever+0x18>)
 800324c:	e002      	b.n	8003254 <LoopFillZerobss>

0800324e <FillZerobss>:
 800324e:	2300      	movs	r3, #0
 8003250:	f842 3b04 	str.w	r3, [r2], #4

08003254 <LoopFillZerobss>:
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopForever+0x1c>)
 8003256:	429a      	cmp	r2, r3
 8003258:	d3f9      	bcc.n	800324e <FillZerobss>
	#if defined ( __GNUC__ )
		BEFORE_MAIN();
		SystemInit();
 800325a:	f7fd fba1 	bl	80009a0 <SystemInit>
	#else
		SystemInit();
	#endif
	if (TOGGLE_RESET_EXTI_CALLBACK() == FLAG_WRT_OK)
 800325e:	f000 fc97 	bl	8003b90 <_etext>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <LoopForever+0x2>
					__ASM volatile
 8003268:	f7fd f92e 	bl	80004c8 <main>

0800326c <LoopForever>:
 800326c:	e7fe      	b.n	800326c <LoopForever>
		INTO_MAIN();
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	0000      	.short	0x0000
 8003274:	20018000 	.word	0x20018000
 8003278:	08003cd0 	.word	0x08003cd0
 800327c:	20000000 	.word	0x20000000
 8003280:	20000070 	.word	0x20000070
 8003284:	20000070 	.word	0x20000070
 8003288:	20000120 	.word	0x20000120

0800328c <__errno>:
 800328c:	4b01      	ldr	r3, [pc, #4]	; (8003294 <__errno+0x8>)
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	2000000c 	.word	0x2000000c

08003298 <memset>:
 8003298:	4402      	add	r2, r0
 800329a:	4603      	mov	r3, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	d100      	bne.n	80032a2 <memset+0xa>
 80032a0:	4770      	bx	lr
 80032a2:	f803 1b01 	strb.w	r1, [r3], #1
 80032a6:	e7f9      	b.n	800329c <memset+0x4>

080032a8 <_puts_r>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	460e      	mov	r6, r1
 80032ac:	4605      	mov	r5, r0
 80032ae:	b118      	cbz	r0, 80032b8 <_puts_r+0x10>
 80032b0:	6983      	ldr	r3, [r0, #24]
 80032b2:	b90b      	cbnz	r3, 80032b8 <_puts_r+0x10>
 80032b4:	f000 fa0c 	bl	80036d0 <__sinit>
 80032b8:	69ab      	ldr	r3, [r5, #24]
 80032ba:	68ac      	ldr	r4, [r5, #8]
 80032bc:	b913      	cbnz	r3, 80032c4 <_puts_r+0x1c>
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 fa06 	bl	80036d0 <__sinit>
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <_puts_r+0xac>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d117      	bne.n	80032fa <_puts_r+0x52>
 80032ca:	686c      	ldr	r4, [r5, #4]
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	071b      	lsls	r3, r3, #28
 80032d0:	d51d      	bpl.n	800330e <_puts_r+0x66>
 80032d2:	6923      	ldr	r3, [r4, #16]
 80032d4:	b1db      	cbz	r3, 800330e <_puts_r+0x66>
 80032d6:	3e01      	subs	r6, #1
 80032d8:	68a3      	ldr	r3, [r4, #8]
 80032da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032de:	3b01      	subs	r3, #1
 80032e0:	60a3      	str	r3, [r4, #8]
 80032e2:	b9e9      	cbnz	r1, 8003320 <_puts_r+0x78>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da2e      	bge.n	8003346 <_puts_r+0x9e>
 80032e8:	4622      	mov	r2, r4
 80032ea:	210a      	movs	r1, #10
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 f83f 	bl	8003370 <__swbuf_r>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d011      	beq.n	800331a <_puts_r+0x72>
 80032f6:	200a      	movs	r0, #10
 80032f8:	e011      	b.n	800331e <_puts_r+0x76>
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <_puts_r+0xb0>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d101      	bne.n	8003304 <_puts_r+0x5c>
 8003300:	68ac      	ldr	r4, [r5, #8]
 8003302:	e7e3      	b.n	80032cc <_puts_r+0x24>
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <_puts_r+0xb4>)
 8003306:	429c      	cmp	r4, r3
 8003308:	bf08      	it	eq
 800330a:	68ec      	ldreq	r4, [r5, #12]
 800330c:	e7de      	b.n	80032cc <_puts_r+0x24>
 800330e:	4621      	mov	r1, r4
 8003310:	4628      	mov	r0, r5
 8003312:	f000 f87f 	bl	8003414 <__swsetup_r>
 8003316:	2800      	cmp	r0, #0
 8003318:	d0dd      	beq.n	80032d6 <_puts_r+0x2e>
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	2b00      	cmp	r3, #0
 8003322:	da04      	bge.n	800332e <_puts_r+0x86>
 8003324:	69a2      	ldr	r2, [r4, #24]
 8003326:	429a      	cmp	r2, r3
 8003328:	dc06      	bgt.n	8003338 <_puts_r+0x90>
 800332a:	290a      	cmp	r1, #10
 800332c:	d004      	beq.n	8003338 <_puts_r+0x90>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	7019      	strb	r1, [r3, #0]
 8003336:	e7cf      	b.n	80032d8 <_puts_r+0x30>
 8003338:	4622      	mov	r2, r4
 800333a:	4628      	mov	r0, r5
 800333c:	f000 f818 	bl	8003370 <__swbuf_r>
 8003340:	3001      	adds	r0, #1
 8003342:	d1c9      	bne.n	80032d8 <_puts_r+0x30>
 8003344:	e7e9      	b.n	800331a <_puts_r+0x72>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	200a      	movs	r0, #10
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	6022      	str	r2, [r4, #0]
 800334e:	7018      	strb	r0, [r3, #0]
 8003350:	e7e5      	b.n	800331e <_puts_r+0x76>
 8003352:	bf00      	nop
 8003354:	08003c80 	.word	0x08003c80
 8003358:	08003ca0 	.word	0x08003ca0
 800335c:	08003c60 	.word	0x08003c60

08003360 <puts>:
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <puts+0xc>)
 8003362:	4601      	mov	r1, r0
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f7ff bf9f 	b.w	80032a8 <_puts_r>
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c

08003370 <__swbuf_r>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	460e      	mov	r6, r1
 8003374:	4614      	mov	r4, r2
 8003376:	4605      	mov	r5, r0
 8003378:	b118      	cbz	r0, 8003382 <__swbuf_r+0x12>
 800337a:	6983      	ldr	r3, [r0, #24]
 800337c:	b90b      	cbnz	r3, 8003382 <__swbuf_r+0x12>
 800337e:	f000 f9a7 	bl	80036d0 <__sinit>
 8003382:	4b21      	ldr	r3, [pc, #132]	; (8003408 <__swbuf_r+0x98>)
 8003384:	429c      	cmp	r4, r3
 8003386:	d12a      	bne.n	80033de <__swbuf_r+0x6e>
 8003388:	686c      	ldr	r4, [r5, #4]
 800338a:	69a3      	ldr	r3, [r4, #24]
 800338c:	60a3      	str	r3, [r4, #8]
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	071a      	lsls	r2, r3, #28
 8003392:	d52e      	bpl.n	80033f2 <__swbuf_r+0x82>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	b363      	cbz	r3, 80033f2 <__swbuf_r+0x82>
 8003398:	6923      	ldr	r3, [r4, #16]
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	1ac0      	subs	r0, r0, r3
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	b2f6      	uxtb	r6, r6
 80033a2:	4283      	cmp	r3, r0
 80033a4:	4637      	mov	r7, r6
 80033a6:	dc04      	bgt.n	80033b2 <__swbuf_r+0x42>
 80033a8:	4621      	mov	r1, r4
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 f926 	bl	80035fc <_fflush_r>
 80033b0:	bb28      	cbnz	r0, 80033fe <__swbuf_r+0x8e>
 80033b2:	68a3      	ldr	r3, [r4, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60a3      	str	r3, [r4, #8]
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	6022      	str	r2, [r4, #0]
 80033be:	701e      	strb	r6, [r3, #0]
 80033c0:	6963      	ldr	r3, [r4, #20]
 80033c2:	3001      	adds	r0, #1
 80033c4:	4283      	cmp	r3, r0
 80033c6:	d004      	beq.n	80033d2 <__swbuf_r+0x62>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	07db      	lsls	r3, r3, #31
 80033cc:	d519      	bpl.n	8003402 <__swbuf_r+0x92>
 80033ce:	2e0a      	cmp	r6, #10
 80033d0:	d117      	bne.n	8003402 <__swbuf_r+0x92>
 80033d2:	4621      	mov	r1, r4
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f911 	bl	80035fc <_fflush_r>
 80033da:	b190      	cbz	r0, 8003402 <__swbuf_r+0x92>
 80033dc:	e00f      	b.n	80033fe <__swbuf_r+0x8e>
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <__swbuf_r+0x9c>)
 80033e0:	429c      	cmp	r4, r3
 80033e2:	d101      	bne.n	80033e8 <__swbuf_r+0x78>
 80033e4:	68ac      	ldr	r4, [r5, #8]
 80033e6:	e7d0      	b.n	800338a <__swbuf_r+0x1a>
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <__swbuf_r+0xa0>)
 80033ea:	429c      	cmp	r4, r3
 80033ec:	bf08      	it	eq
 80033ee:	68ec      	ldreq	r4, [r5, #12]
 80033f0:	e7cb      	b.n	800338a <__swbuf_r+0x1a>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 f80d 	bl	8003414 <__swsetup_r>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d0cc      	beq.n	8003398 <__swbuf_r+0x28>
 80033fe:	f04f 37ff 	mov.w	r7, #4294967295
 8003402:	4638      	mov	r0, r7
 8003404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003406:	bf00      	nop
 8003408:	08003c80 	.word	0x08003c80
 800340c:	08003ca0 	.word	0x08003ca0
 8003410:	08003c60 	.word	0x08003c60

08003414 <__swsetup_r>:
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <__swsetup_r+0xcc>)
 8003416:	b570      	push	{r4, r5, r6, lr}
 8003418:	681d      	ldr	r5, [r3, #0]
 800341a:	4606      	mov	r6, r0
 800341c:	460c      	mov	r4, r1
 800341e:	b125      	cbz	r5, 800342a <__swsetup_r+0x16>
 8003420:	69ab      	ldr	r3, [r5, #24]
 8003422:	b913      	cbnz	r3, 800342a <__swsetup_r+0x16>
 8003424:	4628      	mov	r0, r5
 8003426:	f000 f953 	bl	80036d0 <__sinit>
 800342a:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <__swsetup_r+0xd0>)
 800342c:	429c      	cmp	r4, r3
 800342e:	d10f      	bne.n	8003450 <__swsetup_r+0x3c>
 8003430:	686c      	ldr	r4, [r5, #4]
 8003432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003436:	b29a      	uxth	r2, r3
 8003438:	0715      	lsls	r5, r2, #28
 800343a:	d42c      	bmi.n	8003496 <__swsetup_r+0x82>
 800343c:	06d0      	lsls	r0, r2, #27
 800343e:	d411      	bmi.n	8003464 <__swsetup_r+0x50>
 8003440:	2209      	movs	r2, #9
 8003442:	6032      	str	r2, [r6, #0]
 8003444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295
 800344e:	e03e      	b.n	80034ce <__swsetup_r+0xba>
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <__swsetup_r+0xd4>)
 8003452:	429c      	cmp	r4, r3
 8003454:	d101      	bne.n	800345a <__swsetup_r+0x46>
 8003456:	68ac      	ldr	r4, [r5, #8]
 8003458:	e7eb      	b.n	8003432 <__swsetup_r+0x1e>
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <__swsetup_r+0xd8>)
 800345c:	429c      	cmp	r4, r3
 800345e:	bf08      	it	eq
 8003460:	68ec      	ldreq	r4, [r5, #12]
 8003462:	e7e6      	b.n	8003432 <__swsetup_r+0x1e>
 8003464:	0751      	lsls	r1, r2, #29
 8003466:	d512      	bpl.n	800348e <__swsetup_r+0x7a>
 8003468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800346a:	b141      	cbz	r1, 800347e <__swsetup_r+0x6a>
 800346c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003470:	4299      	cmp	r1, r3
 8003472:	d002      	beq.n	800347a <__swsetup_r+0x66>
 8003474:	4630      	mov	r0, r6
 8003476:	f000 fa19 	bl	80038ac <_free_r>
 800347a:	2300      	movs	r3, #0
 800347c:	6363      	str	r3, [r4, #52]	; 0x34
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003484:	81a3      	strh	r3, [r4, #12]
 8003486:	2300      	movs	r3, #0
 8003488:	6063      	str	r3, [r4, #4]
 800348a:	6923      	ldr	r3, [r4, #16]
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	b94b      	cbnz	r3, 80034ae <__swsetup_r+0x9a>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d003      	beq.n	80034ae <__swsetup_r+0x9a>
 80034a6:	4621      	mov	r1, r4
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 f9bf 	bl	800382c <__smakebuf_r>
 80034ae:	89a2      	ldrh	r2, [r4, #12]
 80034b0:	f012 0301 	ands.w	r3, r2, #1
 80034b4:	d00c      	beq.n	80034d0 <__swsetup_r+0xbc>
 80034b6:	2300      	movs	r3, #0
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	6963      	ldr	r3, [r4, #20]
 80034bc:	425b      	negs	r3, r3
 80034be:	61a3      	str	r3, [r4, #24]
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	b953      	cbnz	r3, 80034da <__swsetup_r+0xc6>
 80034c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80034cc:	d1ba      	bne.n	8003444 <__swsetup_r+0x30>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	0792      	lsls	r2, r2, #30
 80034d2:	bf58      	it	pl
 80034d4:	6963      	ldrpl	r3, [r4, #20]
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	e7f2      	b.n	80034c0 <__swsetup_r+0xac>
 80034da:	2000      	movs	r0, #0
 80034dc:	e7f7      	b.n	80034ce <__swsetup_r+0xba>
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	08003c80 	.word	0x08003c80
 80034e8:	08003ca0 	.word	0x08003ca0
 80034ec:	08003c60 	.word	0x08003c60

080034f0 <__sflush_r>:
 80034f0:	898a      	ldrh	r2, [r1, #12]
 80034f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f6:	4605      	mov	r5, r0
 80034f8:	0710      	lsls	r0, r2, #28
 80034fa:	460c      	mov	r4, r1
 80034fc:	d458      	bmi.n	80035b0 <__sflush_r+0xc0>
 80034fe:	684b      	ldr	r3, [r1, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	dc05      	bgt.n	8003510 <__sflush_r+0x20>
 8003504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	dc02      	bgt.n	8003510 <__sflush_r+0x20>
 800350a:	2000      	movs	r0, #0
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003512:	2e00      	cmp	r6, #0
 8003514:	d0f9      	beq.n	800350a <__sflush_r+0x1a>
 8003516:	2300      	movs	r3, #0
 8003518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800351c:	682f      	ldr	r7, [r5, #0]
 800351e:	6a21      	ldr	r1, [r4, #32]
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	d032      	beq.n	800358a <__sflush_r+0x9a>
 8003524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	075a      	lsls	r2, r3, #29
 800352a:	d505      	bpl.n	8003538 <__sflush_r+0x48>
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	1ac0      	subs	r0, r0, r3
 8003530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003532:	b10b      	cbz	r3, 8003538 <__sflush_r+0x48>
 8003534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003536:	1ac0      	subs	r0, r0, r3
 8003538:	2300      	movs	r3, #0
 800353a:	4602      	mov	r2, r0
 800353c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800353e:	6a21      	ldr	r1, [r4, #32]
 8003540:	4628      	mov	r0, r5
 8003542:	47b0      	blx	r6
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	d106      	bne.n	8003558 <__sflush_r+0x68>
 800354a:	6829      	ldr	r1, [r5, #0]
 800354c:	291d      	cmp	r1, #29
 800354e:	d848      	bhi.n	80035e2 <__sflush_r+0xf2>
 8003550:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <__sflush_r+0x108>)
 8003552:	40ca      	lsrs	r2, r1
 8003554:	07d6      	lsls	r6, r2, #31
 8003556:	d544      	bpl.n	80035e2 <__sflush_r+0xf2>
 8003558:	2200      	movs	r2, #0
 800355a:	6062      	str	r2, [r4, #4]
 800355c:	04d9      	lsls	r1, r3, #19
 800355e:	6922      	ldr	r2, [r4, #16]
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	d504      	bpl.n	800356e <__sflush_r+0x7e>
 8003564:	1c42      	adds	r2, r0, #1
 8003566:	d101      	bne.n	800356c <__sflush_r+0x7c>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b903      	cbnz	r3, 800356e <__sflush_r+0x7e>
 800356c:	6560      	str	r0, [r4, #84]	; 0x54
 800356e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003570:	602f      	str	r7, [r5, #0]
 8003572:	2900      	cmp	r1, #0
 8003574:	d0c9      	beq.n	800350a <__sflush_r+0x1a>
 8003576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800357a:	4299      	cmp	r1, r3
 800357c:	d002      	beq.n	8003584 <__sflush_r+0x94>
 800357e:	4628      	mov	r0, r5
 8003580:	f000 f994 	bl	80038ac <_free_r>
 8003584:	2000      	movs	r0, #0
 8003586:	6360      	str	r0, [r4, #52]	; 0x34
 8003588:	e7c0      	b.n	800350c <__sflush_r+0x1c>
 800358a:	2301      	movs	r3, #1
 800358c:	4628      	mov	r0, r5
 800358e:	47b0      	blx	r6
 8003590:	1c41      	adds	r1, r0, #1
 8003592:	d1c8      	bne.n	8003526 <__sflush_r+0x36>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0c5      	beq.n	8003526 <__sflush_r+0x36>
 800359a:	2b1d      	cmp	r3, #29
 800359c:	d001      	beq.n	80035a2 <__sflush_r+0xb2>
 800359e:	2b16      	cmp	r3, #22
 80035a0:	d101      	bne.n	80035a6 <__sflush_r+0xb6>
 80035a2:	602f      	str	r7, [r5, #0]
 80035a4:	e7b1      	b.n	800350a <__sflush_r+0x1a>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	e7ad      	b.n	800350c <__sflush_r+0x1c>
 80035b0:	690f      	ldr	r7, [r1, #16]
 80035b2:	2f00      	cmp	r7, #0
 80035b4:	d0a9      	beq.n	800350a <__sflush_r+0x1a>
 80035b6:	0793      	lsls	r3, r2, #30
 80035b8:	680e      	ldr	r6, [r1, #0]
 80035ba:	bf08      	it	eq
 80035bc:	694b      	ldreq	r3, [r1, #20]
 80035be:	600f      	str	r7, [r1, #0]
 80035c0:	bf18      	it	ne
 80035c2:	2300      	movne	r3, #0
 80035c4:	eba6 0807 	sub.w	r8, r6, r7
 80035c8:	608b      	str	r3, [r1, #8]
 80035ca:	f1b8 0f00 	cmp.w	r8, #0
 80035ce:	dd9c      	ble.n	800350a <__sflush_r+0x1a>
 80035d0:	4643      	mov	r3, r8
 80035d2:	463a      	mov	r2, r7
 80035d4:	6a21      	ldr	r1, [r4, #32]
 80035d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035d8:	4628      	mov	r0, r5
 80035da:	47b0      	blx	r6
 80035dc:	2800      	cmp	r0, #0
 80035de:	dc06      	bgt.n	80035ee <__sflush_r+0xfe>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	e78e      	b.n	800350c <__sflush_r+0x1c>
 80035ee:	4407      	add	r7, r0
 80035f0:	eba8 0800 	sub.w	r8, r8, r0
 80035f4:	e7e9      	b.n	80035ca <__sflush_r+0xda>
 80035f6:	bf00      	nop
 80035f8:	20400001 	.word	0x20400001

080035fc <_fflush_r>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	690b      	ldr	r3, [r1, #16]
 8003600:	4605      	mov	r5, r0
 8003602:	460c      	mov	r4, r1
 8003604:	b1db      	cbz	r3, 800363e <_fflush_r+0x42>
 8003606:	b118      	cbz	r0, 8003610 <_fflush_r+0x14>
 8003608:	6983      	ldr	r3, [r0, #24]
 800360a:	b90b      	cbnz	r3, 8003610 <_fflush_r+0x14>
 800360c:	f000 f860 	bl	80036d0 <__sinit>
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <_fflush_r+0x48>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d109      	bne.n	800362a <_fflush_r+0x2e>
 8003616:	686c      	ldr	r4, [r5, #4]
 8003618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361c:	b17b      	cbz	r3, 800363e <_fflush_r+0x42>
 800361e:	4621      	mov	r1, r4
 8003620:	4628      	mov	r0, r5
 8003622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003626:	f7ff bf63 	b.w	80034f0 <__sflush_r>
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <_fflush_r+0x4c>)
 800362c:	429c      	cmp	r4, r3
 800362e:	d101      	bne.n	8003634 <_fflush_r+0x38>
 8003630:	68ac      	ldr	r4, [r5, #8]
 8003632:	e7f1      	b.n	8003618 <_fflush_r+0x1c>
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <_fflush_r+0x50>)
 8003636:	429c      	cmp	r4, r3
 8003638:	bf08      	it	eq
 800363a:	68ec      	ldreq	r4, [r5, #12]
 800363c:	e7ec      	b.n	8003618 <_fflush_r+0x1c>
 800363e:	2000      	movs	r0, #0
 8003640:	bd38      	pop	{r3, r4, r5, pc}
 8003642:	bf00      	nop
 8003644:	08003c80 	.word	0x08003c80
 8003648:	08003ca0 	.word	0x08003ca0
 800364c:	08003c60 	.word	0x08003c60

08003650 <std>:
 8003650:	2300      	movs	r3, #0
 8003652:	b510      	push	{r4, lr}
 8003654:	4604      	mov	r4, r0
 8003656:	e9c0 3300 	strd	r3, r3, [r0]
 800365a:	6083      	str	r3, [r0, #8]
 800365c:	8181      	strh	r1, [r0, #12]
 800365e:	6643      	str	r3, [r0, #100]	; 0x64
 8003660:	81c2      	strh	r2, [r0, #14]
 8003662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003666:	6183      	str	r3, [r0, #24]
 8003668:	4619      	mov	r1, r3
 800366a:	2208      	movs	r2, #8
 800366c:	305c      	adds	r0, #92	; 0x5c
 800366e:	f7ff fe13 	bl	8003298 <memset>
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <std+0x38>)
 8003674:	6263      	str	r3, [r4, #36]	; 0x24
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <std+0x3c>)
 8003678:	62a3      	str	r3, [r4, #40]	; 0x28
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <std+0x40>)
 800367c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x44>)
 8003680:	6224      	str	r4, [r4, #32]
 8003682:	6323      	str	r3, [r4, #48]	; 0x30
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	08003a1d 	.word	0x08003a1d
 800368c:	08003a3f 	.word	0x08003a3f
 8003690:	08003a77 	.word	0x08003a77
 8003694:	08003a9b 	.word	0x08003a9b

08003698 <_cleanup_r>:
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <_cleanup_r+0x8>)
 800369a:	f000 b885 	b.w	80037a8 <_fwalk_reent>
 800369e:	bf00      	nop
 80036a0:	080035fd 	.word	0x080035fd

080036a4 <__sfmoreglue>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	1e4a      	subs	r2, r1, #1
 80036a8:	2568      	movs	r5, #104	; 0x68
 80036aa:	4355      	muls	r5, r2
 80036ac:	460e      	mov	r6, r1
 80036ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036b2:	f000 f949 	bl	8003948 <_malloc_r>
 80036b6:	4604      	mov	r4, r0
 80036b8:	b140      	cbz	r0, 80036cc <__sfmoreglue+0x28>
 80036ba:	2100      	movs	r1, #0
 80036bc:	e9c0 1600 	strd	r1, r6, [r0]
 80036c0:	300c      	adds	r0, #12
 80036c2:	60a0      	str	r0, [r4, #8]
 80036c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036c8:	f7ff fde6 	bl	8003298 <memset>
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd70      	pop	{r4, r5, r6, pc}

080036d0 <__sinit>:
 80036d0:	6983      	ldr	r3, [r0, #24]
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	bb33      	cbnz	r3, 8003726 <__sinit+0x56>
 80036d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80036dc:	6503      	str	r3, [r0, #80]	; 0x50
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <__sinit+0x58>)
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <__sinit+0x5c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6282      	str	r2, [r0, #40]	; 0x28
 80036e6:	4298      	cmp	r0, r3
 80036e8:	bf04      	itt	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	6183      	streq	r3, [r0, #24]
 80036ee:	f000 f81f 	bl	8003730 <__sfp>
 80036f2:	6060      	str	r0, [r4, #4]
 80036f4:	4620      	mov	r0, r4
 80036f6:	f000 f81b 	bl	8003730 <__sfp>
 80036fa:	60a0      	str	r0, [r4, #8]
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 f817 	bl	8003730 <__sfp>
 8003702:	2200      	movs	r2, #0
 8003704:	60e0      	str	r0, [r4, #12]
 8003706:	2104      	movs	r1, #4
 8003708:	6860      	ldr	r0, [r4, #4]
 800370a:	f7ff ffa1 	bl	8003650 <std>
 800370e:	2201      	movs	r2, #1
 8003710:	2109      	movs	r1, #9
 8003712:	68a0      	ldr	r0, [r4, #8]
 8003714:	f7ff ff9c 	bl	8003650 <std>
 8003718:	2202      	movs	r2, #2
 800371a:	2112      	movs	r1, #18
 800371c:	68e0      	ldr	r0, [r4, #12]
 800371e:	f7ff ff97 	bl	8003650 <std>
 8003722:	2301      	movs	r3, #1
 8003724:	61a3      	str	r3, [r4, #24]
 8003726:	bd10      	pop	{r4, pc}
 8003728:	08003c5c 	.word	0x08003c5c
 800372c:	08003699 	.word	0x08003699

08003730 <__sfp>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <__sfp+0x70>)
 8003734:	681e      	ldr	r6, [r3, #0]
 8003736:	69b3      	ldr	r3, [r6, #24]
 8003738:	4607      	mov	r7, r0
 800373a:	b913      	cbnz	r3, 8003742 <__sfp+0x12>
 800373c:	4630      	mov	r0, r6
 800373e:	f7ff ffc7 	bl	80036d0 <__sinit>
 8003742:	3648      	adds	r6, #72	; 0x48
 8003744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003748:	3b01      	subs	r3, #1
 800374a:	d503      	bpl.n	8003754 <__sfp+0x24>
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	b133      	cbz	r3, 800375e <__sfp+0x2e>
 8003750:	6836      	ldr	r6, [r6, #0]
 8003752:	e7f7      	b.n	8003744 <__sfp+0x14>
 8003754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003758:	b16d      	cbz	r5, 8003776 <__sfp+0x46>
 800375a:	3468      	adds	r4, #104	; 0x68
 800375c:	e7f4      	b.n	8003748 <__sfp+0x18>
 800375e:	2104      	movs	r1, #4
 8003760:	4638      	mov	r0, r7
 8003762:	f7ff ff9f 	bl	80036a4 <__sfmoreglue>
 8003766:	6030      	str	r0, [r6, #0]
 8003768:	2800      	cmp	r0, #0
 800376a:	d1f1      	bne.n	8003750 <__sfp+0x20>
 800376c:	230c      	movs	r3, #12
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4604      	mov	r4, r0
 8003772:	4620      	mov	r0, r4
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <__sfp+0x74>)
 8003778:	6665      	str	r5, [r4, #100]	; 0x64
 800377a:	e9c4 5500 	strd	r5, r5, [r4]
 800377e:	60a5      	str	r5, [r4, #8]
 8003780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003788:	2208      	movs	r2, #8
 800378a:	4629      	mov	r1, r5
 800378c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003790:	f7ff fd82 	bl	8003298 <memset>
 8003794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800379c:	e7e9      	b.n	8003772 <__sfp+0x42>
 800379e:	bf00      	nop
 80037a0:	08003c5c 	.word	0x08003c5c
 80037a4:	ffff0001 	.word	0xffff0001

080037a8 <_fwalk_reent>:
 80037a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ac:	4680      	mov	r8, r0
 80037ae:	4689      	mov	r9, r1
 80037b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037b4:	2600      	movs	r6, #0
 80037b6:	b914      	cbnz	r4, 80037be <_fwalk_reent+0x16>
 80037b8:	4630      	mov	r0, r6
 80037ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80037c2:	3f01      	subs	r7, #1
 80037c4:	d501      	bpl.n	80037ca <_fwalk_reent+0x22>
 80037c6:	6824      	ldr	r4, [r4, #0]
 80037c8:	e7f5      	b.n	80037b6 <_fwalk_reent+0xe>
 80037ca:	89ab      	ldrh	r3, [r5, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d907      	bls.n	80037e0 <_fwalk_reent+0x38>
 80037d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037d4:	3301      	adds	r3, #1
 80037d6:	d003      	beq.n	80037e0 <_fwalk_reent+0x38>
 80037d8:	4629      	mov	r1, r5
 80037da:	4640      	mov	r0, r8
 80037dc:	47c8      	blx	r9
 80037de:	4306      	orrs	r6, r0
 80037e0:	3568      	adds	r5, #104	; 0x68
 80037e2:	e7ee      	b.n	80037c2 <_fwalk_reent+0x1a>

080037e4 <__swhatbuf_r>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	460e      	mov	r6, r1
 80037e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ec:	2900      	cmp	r1, #0
 80037ee:	b096      	sub	sp, #88	; 0x58
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	da07      	bge.n	8003806 <__swhatbuf_r+0x22>
 80037f6:	2300      	movs	r3, #0
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	89b3      	ldrh	r3, [r6, #12]
 80037fc:	061a      	lsls	r2, r3, #24
 80037fe:	d410      	bmi.n	8003822 <__swhatbuf_r+0x3e>
 8003800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003804:	e00e      	b.n	8003824 <__swhatbuf_r+0x40>
 8003806:	466a      	mov	r2, sp
 8003808:	f000 f96e 	bl	8003ae8 <_fstat_r>
 800380c:	2800      	cmp	r0, #0
 800380e:	dbf2      	blt.n	80037f6 <__swhatbuf_r+0x12>
 8003810:	9a01      	ldr	r2, [sp, #4]
 8003812:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003816:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800381a:	425a      	negs	r2, r3
 800381c:	415a      	adcs	r2, r3
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	e7ee      	b.n	8003800 <__swhatbuf_r+0x1c>
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	2000      	movs	r0, #0
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	b016      	add	sp, #88	; 0x58
 800382a:	bd70      	pop	{r4, r5, r6, pc}

0800382c <__smakebuf_r>:
 800382c:	898b      	ldrh	r3, [r1, #12]
 800382e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003830:	079d      	lsls	r5, r3, #30
 8003832:	4606      	mov	r6, r0
 8003834:	460c      	mov	r4, r1
 8003836:	d507      	bpl.n	8003848 <__smakebuf_r+0x1c>
 8003838:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	2301      	movs	r3, #1
 8003842:	6163      	str	r3, [r4, #20]
 8003844:	b002      	add	sp, #8
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	ab01      	add	r3, sp, #4
 800384a:	466a      	mov	r2, sp
 800384c:	f7ff ffca 	bl	80037e4 <__swhatbuf_r>
 8003850:	9900      	ldr	r1, [sp, #0]
 8003852:	4605      	mov	r5, r0
 8003854:	4630      	mov	r0, r6
 8003856:	f000 f877 	bl	8003948 <_malloc_r>
 800385a:	b948      	cbnz	r0, 8003870 <__smakebuf_r+0x44>
 800385c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003860:	059a      	lsls	r2, r3, #22
 8003862:	d4ef      	bmi.n	8003844 <__smakebuf_r+0x18>
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	e7e3      	b.n	8003838 <__smakebuf_r+0xc>
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <__smakebuf_r+0x7c>)
 8003872:	62b3      	str	r3, [r6, #40]	; 0x28
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	6020      	str	r0, [r4, #0]
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	9b00      	ldr	r3, [sp, #0]
 8003880:	6163      	str	r3, [r4, #20]
 8003882:	9b01      	ldr	r3, [sp, #4]
 8003884:	6120      	str	r0, [r4, #16]
 8003886:	b15b      	cbz	r3, 80038a0 <__smakebuf_r+0x74>
 8003888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f93d 	bl	8003b0c <_isatty_r>
 8003892:	b128      	cbz	r0, 80038a0 <__smakebuf_r+0x74>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	431d      	orrs	r5, r3
 80038a4:	81a5      	strh	r5, [r4, #12]
 80038a6:	e7cd      	b.n	8003844 <__smakebuf_r+0x18>
 80038a8:	08003699 	.word	0x08003699

080038ac <_free_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4605      	mov	r5, r0
 80038b0:	2900      	cmp	r1, #0
 80038b2:	d045      	beq.n	8003940 <_free_r+0x94>
 80038b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b8:	1f0c      	subs	r4, r1, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfb8      	it	lt
 80038be:	18e4      	addlt	r4, r4, r3
 80038c0:	f000 f946 	bl	8003b50 <__malloc_lock>
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <_free_r+0x98>)
 80038c6:	6813      	ldr	r3, [r2, #0]
 80038c8:	4610      	mov	r0, r2
 80038ca:	b933      	cbnz	r3, 80038da <_free_r+0x2e>
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	6014      	str	r4, [r2, #0]
 80038d0:	4628      	mov	r0, r5
 80038d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d6:	f000 b93c 	b.w	8003b52 <__malloc_unlock>
 80038da:	42a3      	cmp	r3, r4
 80038dc:	d90c      	bls.n	80038f8 <_free_r+0x4c>
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	1862      	adds	r2, r4, r1
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bf04      	itt	eq
 80038e6:	681a      	ldreq	r2, [r3, #0]
 80038e8:	685b      	ldreq	r3, [r3, #4]
 80038ea:	6063      	str	r3, [r4, #4]
 80038ec:	bf04      	itt	eq
 80038ee:	1852      	addeq	r2, r2, r1
 80038f0:	6022      	streq	r2, [r4, #0]
 80038f2:	6004      	str	r4, [r0, #0]
 80038f4:	e7ec      	b.n	80038d0 <_free_r+0x24>
 80038f6:	4613      	mov	r3, r2
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	b10a      	cbz	r2, 8003900 <_free_r+0x54>
 80038fc:	42a2      	cmp	r2, r4
 80038fe:	d9fa      	bls.n	80038f6 <_free_r+0x4a>
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	1858      	adds	r0, r3, r1
 8003904:	42a0      	cmp	r0, r4
 8003906:	d10b      	bne.n	8003920 <_free_r+0x74>
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	4401      	add	r1, r0
 800390c:	1858      	adds	r0, r3, r1
 800390e:	4282      	cmp	r2, r0
 8003910:	6019      	str	r1, [r3, #0]
 8003912:	d1dd      	bne.n	80038d0 <_free_r+0x24>
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	4401      	add	r1, r0
 800391c:	6019      	str	r1, [r3, #0]
 800391e:	e7d7      	b.n	80038d0 <_free_r+0x24>
 8003920:	d902      	bls.n	8003928 <_free_r+0x7c>
 8003922:	230c      	movs	r3, #12
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	e7d3      	b.n	80038d0 <_free_r+0x24>
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	1821      	adds	r1, r4, r0
 800392c:	428a      	cmp	r2, r1
 800392e:	bf04      	itt	eq
 8003930:	6811      	ldreq	r1, [r2, #0]
 8003932:	6852      	ldreq	r2, [r2, #4]
 8003934:	6062      	str	r2, [r4, #4]
 8003936:	bf04      	itt	eq
 8003938:	1809      	addeq	r1, r1, r0
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	605c      	str	r4, [r3, #4]
 800393e:	e7c7      	b.n	80038d0 <_free_r+0x24>
 8003940:	bd38      	pop	{r3, r4, r5, pc}
 8003942:	bf00      	nop
 8003944:	20000090 	.word	0x20000090

08003948 <_malloc_r>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	1ccd      	adds	r5, r1, #3
 800394c:	f025 0503 	bic.w	r5, r5, #3
 8003950:	3508      	adds	r5, #8
 8003952:	2d0c      	cmp	r5, #12
 8003954:	bf38      	it	cc
 8003956:	250c      	movcc	r5, #12
 8003958:	2d00      	cmp	r5, #0
 800395a:	4606      	mov	r6, r0
 800395c:	db01      	blt.n	8003962 <_malloc_r+0x1a>
 800395e:	42a9      	cmp	r1, r5
 8003960:	d903      	bls.n	800396a <_malloc_r+0x22>
 8003962:	230c      	movs	r3, #12
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	2000      	movs	r0, #0
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	f000 f8f1 	bl	8003b50 <__malloc_lock>
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <_malloc_r+0xac>)
 8003970:	6814      	ldr	r4, [r2, #0]
 8003972:	4621      	mov	r1, r4
 8003974:	b991      	cbnz	r1, 800399c <_malloc_r+0x54>
 8003976:	4c20      	ldr	r4, [pc, #128]	; (80039f8 <_malloc_r+0xb0>)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	b91b      	cbnz	r3, 8003984 <_malloc_r+0x3c>
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f83d 	bl	80039fc <_sbrk_r>
 8003982:	6020      	str	r0, [r4, #0]
 8003984:	4629      	mov	r1, r5
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f838 	bl	80039fc <_sbrk_r>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d124      	bne.n	80039da <_malloc_r+0x92>
 8003990:	230c      	movs	r3, #12
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	4630      	mov	r0, r6
 8003996:	f000 f8dc 	bl	8003b52 <__malloc_unlock>
 800399a:	e7e4      	b.n	8003966 <_malloc_r+0x1e>
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	1b5b      	subs	r3, r3, r5
 80039a0:	d418      	bmi.n	80039d4 <_malloc_r+0x8c>
 80039a2:	2b0b      	cmp	r3, #11
 80039a4:	d90f      	bls.n	80039c6 <_malloc_r+0x7e>
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	50cd      	str	r5, [r1, r3]
 80039aa:	18cc      	adds	r4, r1, r3
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f8d0 	bl	8003b52 <__malloc_unlock>
 80039b2:	f104 000b 	add.w	r0, r4, #11
 80039b6:	1d23      	adds	r3, r4, #4
 80039b8:	f020 0007 	bic.w	r0, r0, #7
 80039bc:	1ac3      	subs	r3, r0, r3
 80039be:	d0d3      	beq.n	8003968 <_malloc_r+0x20>
 80039c0:	425a      	negs	r2, r3
 80039c2:	50e2      	str	r2, [r4, r3]
 80039c4:	e7d0      	b.n	8003968 <_malloc_r+0x20>
 80039c6:	428c      	cmp	r4, r1
 80039c8:	684b      	ldr	r3, [r1, #4]
 80039ca:	bf16      	itet	ne
 80039cc:	6063      	strne	r3, [r4, #4]
 80039ce:	6013      	streq	r3, [r2, #0]
 80039d0:	460c      	movne	r4, r1
 80039d2:	e7eb      	b.n	80039ac <_malloc_r+0x64>
 80039d4:	460c      	mov	r4, r1
 80039d6:	6849      	ldr	r1, [r1, #4]
 80039d8:	e7cc      	b.n	8003974 <_malloc_r+0x2c>
 80039da:	1cc4      	adds	r4, r0, #3
 80039dc:	f024 0403 	bic.w	r4, r4, #3
 80039e0:	42a0      	cmp	r0, r4
 80039e2:	d005      	beq.n	80039f0 <_malloc_r+0xa8>
 80039e4:	1a21      	subs	r1, r4, r0
 80039e6:	4630      	mov	r0, r6
 80039e8:	f000 f808 	bl	80039fc <_sbrk_r>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0cf      	beq.n	8003990 <_malloc_r+0x48>
 80039f0:	6025      	str	r5, [r4, #0]
 80039f2:	e7db      	b.n	80039ac <_malloc_r+0x64>
 80039f4:	20000090 	.word	0x20000090
 80039f8:	20000094 	.word	0x20000094

080039fc <_sbrk_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4c06      	ldr	r4, [pc, #24]	; (8003a18 <_sbrk_r+0x1c>)
 8003a00:	2300      	movs	r3, #0
 8003a02:	4605      	mov	r5, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	f7fc ff94 	bl	8000934 <_sbrk>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_sbrk_r+0x1a>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_sbrk_r+0x1a>
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	2000011c 	.word	0x2000011c

08003a1c <__sread>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	460c      	mov	r4, r1
 8003a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a24:	f000 f896 	bl	8003b54 <_read_r>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	bfab      	itete	ge
 8003a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a30:	181b      	addge	r3, r3, r0
 8003a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a36:	bfac      	ite	ge
 8003a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a3a:	81a3      	strhlt	r3, [r4, #12]
 8003a3c:	bd10      	pop	{r4, pc}

08003a3e <__swrite>:
 8003a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a42:	461f      	mov	r7, r3
 8003a44:	898b      	ldrh	r3, [r1, #12]
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	4605      	mov	r5, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	d505      	bpl.n	8003a5c <__swrite+0x1e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	2200      	movs	r2, #0
 8003a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a58:	f000 f868 	bl	8003b2c <_lseek_r>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	4632      	mov	r2, r6
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	f000 b817 	b.w	8003aa4 <_write_r>

08003a76 <__sseek>:
 8003a76:	b510      	push	{r4, lr}
 8003a78:	460c      	mov	r4, r1
 8003a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7e:	f000 f855 	bl	8003b2c <_lseek_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	bf15      	itete	ne
 8003a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a92:	81a3      	strheq	r3, [r4, #12]
 8003a94:	bf18      	it	ne
 8003a96:	81a3      	strhne	r3, [r4, #12]
 8003a98:	bd10      	pop	{r4, pc}

08003a9a <__sclose>:
 8003a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9e:	f000 b813 	b.w	8003ac8 <_close_r>
	...

08003aa4 <_write_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4c07      	ldr	r4, [pc, #28]	; (8003ac4 <_write_r+0x20>)
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	6022      	str	r2, [r4, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7fc fe4e 	bl	8000754 <_write>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_write_r+0x1e>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_write_r+0x1e>
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	2000011c 	.word	0x2000011c

08003ac8 <_close_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4c06      	ldr	r4, [pc, #24]	; (8003ae4 <_close_r+0x1c>)
 8003acc:	2300      	movs	r3, #0
 8003ace:	4605      	mov	r5, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	f7fc fefa 	bl	80008cc <_close>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_close_r+0x1a>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_close_r+0x1a>
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	2000011c 	.word	0x2000011c

08003ae8 <_fstat_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4c07      	ldr	r4, [pc, #28]	; (8003b08 <_fstat_r+0x20>)
 8003aec:	2300      	movs	r3, #0
 8003aee:	4605      	mov	r5, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	f7fc fef5 	bl	80008e4 <_fstat>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	d102      	bne.n	8003b04 <_fstat_r+0x1c>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	b103      	cbz	r3, 8003b04 <_fstat_r+0x1c>
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	bd38      	pop	{r3, r4, r5, pc}
 8003b06:	bf00      	nop
 8003b08:	2000011c 	.word	0x2000011c

08003b0c <_isatty_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4c06      	ldr	r4, [pc, #24]	; (8003b28 <_isatty_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4605      	mov	r5, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	f7fc fef4 	bl	8000904 <_isatty>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_isatty_r+0x1a>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_isatty_r+0x1a>
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	2000011c 	.word	0x2000011c

08003b2c <_lseek_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4c07      	ldr	r4, [pc, #28]	; (8003b4c <_lseek_r+0x20>)
 8003b30:	4605      	mov	r5, r0
 8003b32:	4608      	mov	r0, r1
 8003b34:	4611      	mov	r1, r2
 8003b36:	2200      	movs	r2, #0
 8003b38:	6022      	str	r2, [r4, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7fc feed 	bl	800091a <_lseek>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_lseek_r+0x1e>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_lseek_r+0x1e>
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	2000011c 	.word	0x2000011c

08003b50 <__malloc_lock>:
 8003b50:	4770      	bx	lr

08003b52 <__malloc_unlock>:
 8003b52:	4770      	bx	lr

08003b54 <_read_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4c07      	ldr	r4, [pc, #28]	; (8003b74 <_read_r+0x20>)
 8003b58:	4605      	mov	r5, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fc fdce 	bl	8000704 <_read>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_read_r+0x1e>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_read_r+0x1e>
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	2000011c 	.word	0x2000011c

08003b78 <_init>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr

08003b84 <_fini>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr

Disassembly of section .ARM.__at_0x08000534:

08003b90 <TOGGLE_RESET_EXTI_CALLBACK>:
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
	unsigned short state=FLAG_WRT_ERR;
 8003b96:	230f      	movs	r3, #15
 8003b98:	81fb      	strh	r3, [r7, #14]
	unsigned int JumpFlag[2] = {0};
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
	if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_N_FLAG)
 8003ba2:	4819      	ldr	r0, [pc, #100]	; (8003c08 <_etext+0x78>)
 8003ba4:	f7ff fa98 	bl	80030d8 <STMFLASH_Read32>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d111      	bne.n	8003bd4 <TOGGLE_RESET_EXTI_CALLBACK+0x44>
		JumpFlag[0] = JUMP_FLAG;
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <_etext+0x7c>)
 8003bb2:	607b      	str	r3, [r7, #4]
		JumpFlag[1] = JUMP_FLAG;
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <_etext+0x7c>)
 8003bb6:	60bb      	str	r3, [r7, #8]
		if(LL_FLASH_Program64(JUMP_FLAG_ADDRESS, (uint32_t *)&JumpFlag)!=LL_OK)
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4812      	ldr	r0, [pc, #72]	; (8003c08 <_etext+0x78>)
 8003bbe:	f7ff fa4d 	bl	800305c <LL_FLASH_Program64>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <TOGGLE_RESET_EXTI_CALLBACK+0x3e>
			state = FLAG_WRT_ERR;//Write Error
 8003bc8:	230f      	movs	r3, #15
 8003bca:	81fb      	strh	r3, [r7, #14]
 8003bcc:	e016      	b.n	8003bfc <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = FLAG_WRT_OK;//Write Ok
 8003bce:	2300      	movs	r3, #0
 8003bd0:	81fb      	strh	r3, [r7, #14]
 8003bd2:	e013      	b.n	8003bfc <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
	else if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_FLAG)
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <_etext+0x78>)
 8003bd6:	f7ff fa7f 	bl	80030d8 <STMFLASH_Read32>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <_etext+0x7c>)
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10c      	bne.n	8003bfc <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
		LL_FLASH_PageErase(254);
 8003be2:	20fe      	movs	r0, #254	; 0xfe
 8003be4:	f7ff f9de 	bl	8002fa4 <LL_FLASH_PageErase>
		if (STMFLASH_BankSwitch() != LL_OK)
 8003be8:	f7ff fa82 	bl	80030f0 <STMFLASH_BankSwitch>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <TOGGLE_RESET_EXTI_CALLBACK+0x68>
			state = BANK_TOGGLE_ERR;//Jump Error
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	81fb      	strh	r3, [r7, #14]
 8003bf6:	e001      	b.n	8003bfc <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = BANK_TOGGLE_OK;//Jump OK
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	81fb      	strh	r3, [r7, #14]
	return state;
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	b2db      	uxtb	r3, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	0807f7f8 	.word	0x0807f7f8
 8003c0c:	4a554d50 	.word	0x4a554d50
