
L476RG-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.__at_0x08000534 00000080  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000dc  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003fe8  08003fe8  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08003ff0  08003ff0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  08003ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008b8  20000070  08004068  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  08004068  00020928  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c70c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001f82  00000000  00000000  0002c7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a28  00000000  00000000  0002e730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000920  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002756f  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a019  00000000  00000000  00056fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000eadc5  00000000  00000000  00061000  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014bdc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d50  00000000  00000000  0014be40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e74 	.word	0x08003e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003e74 	.word	0x08003e74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 faae 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8bc 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f88a 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  TRACE_MSG("Hello world\n");
 80004dc:	4806      	ldr	r0, [pc, #24]	; (80004f8 <main+0x30>)
 80004de:	f003 f8bd 	bl	800365c <puts>
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <main+0x34>)
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <main+0x38>)
 80004e6:	2161      	movs	r1, #97	; 0x61
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 ff49 	bl	8003380 <trace_store_msg>
 80004ee:	f002 ffc9 	bl	8003484 <trace_to_flash>
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	08003f0c 	.word	0x08003f0c
 80004fc:	08003f24 	.word	0x08003f24
 8000500:	08003f2c 	.word	0x08003f2c

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f003 f83d 	bl	8003592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 f82f 	bl	8003592 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055a:	230a      	movs	r3, #10
 800055c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000560:	2307      	movs	r3, #7
 8000562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fdde 	bl	8001138 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000582:	f000 f91d 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f9aa 	bl	8001904 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005b6:	f000 f903 	bl	80007c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005be:	2300      	movs	r3, #0
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fba1 	bl	8001d0c <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005d0:	f000 f8f6 	bl	80007c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d8:	f000 fd58 	bl	800108c <HAL_PWREx_ControlVoltageScaling>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005e2:	f000 f8ed 	bl	80007c0 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	37e0      	adds	r7, #224	; 0xe0
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART2_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000634:	f002 f81a 	bl	800266c <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f8bf 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200008a0 	.word	0x200008a0
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_GPIO_Init+0xc4>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f000 fcb7 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_GPIO_Init+0xc8>)
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_GPIO_Init+0xcc>)
 80006e8:	f000 fb02 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 faf3 	bl	8000cf0 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	10210000 	.word	0x10210000
 800071c:	48000800 	.word	0x48000800

08000720 <_read>:

/* USER CODE BEGIN 4 */
int _read (int fd, char *pBuffer, int size)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e011      	b.n	8000756 <_read+0x36>
    {
      while((USART2->ISR&0X40)==0);
 8000732:	bf00      	nop
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <_read+0x4c>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f9      	beq.n	8000734 <_read+0x14>
      pBuffer[i] = USART2->RDR;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <_read+0x4c>)
 8000742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000744:	b299      	uxth	r1, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4413      	add	r3, r2
 800074c:	b2ca      	uxtb	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	dbe9      	blt.n	8000732 <_read+0x12>
    }
    return size;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	371c      	adds	r7, #28
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40004400 	.word	0x40004400

08000770 <_write>:

int _write (int fd, char *pBuffer, int size)
{
 8000770:	b480      	push	{r7}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e010      	b.n	80007a4 <_write+0x34>
    {
      while((USART2->ISR&0X40)==0);
 8000782:	bf00      	nop
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <_write+0x4c>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f9      	beq.n	8000784 <_write+0x14>
      USART2->TDR = (uint8_t) pBuffer[i];
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	4413      	add	r3, r2
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_write+0x4c>)
 800079a:	b292      	uxth	r2, r2
 800079c:	851a      	strh	r2, [r3, #40]	; 0x28
    for (int i = 0; i < size; i++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbea      	blt.n	8000782 <_write+0x12>
    }
    return size;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	371c      	adds	r7, #28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40004400 	.word	0x40004400

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <Error_Handler+0x6>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_UART_MspInit+0x7c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d128      	bne.n	8000884 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6593      	str	r3, [r2, #88]	; 0x58
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_UART_MspInit+0x80>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000862:	230c      	movs	r3, #12
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f000 fa36 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40004400 	.word	0x40004400
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f900 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	return -1;
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000910:	605a      	str	r2, [r3, #4]
	return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_isatty>:

int _isatty(int file)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000936:	b480      	push	{r7}
 8000938:	b085      	sub	sp, #20
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f002 fdf6 	bl	8003570 <__errno>
 8000984:	4602      	mov	r2, r0
 8000986:	230c      	movs	r3, #12
 8000988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20018000 	.word	0x20018000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	20000928 	.word	0x20000928

080009bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <SystemInit+0x64>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <SystemInit+0x64>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <SystemInit+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <SystemInit+0x68>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <SystemInit+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <SystemInit+0x68>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <SystemInit+0x68>)
 80009e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <SystemInit+0x68>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SystemInit+0x68>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <SystemInit+0x68>)
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <SystemInit+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x64>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	40021000 	.word	0x40021000

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_Init+0x3c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_Init+0x3c>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
 8000a44:	f000 f920 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f80f 	bl	8000a6c <HAL_InitTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e001      	b.n	8000a5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5a:	f7ff feb5 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_InitTick+0x70>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f91d 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d809      	bhi.n	8000abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f8f5 	bl	8000c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e007      	b.n	8000acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000920 	.word	0x20000920

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000920 	.word	0x20000920

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff47 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff5c 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffb0 	bl	8000c44 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e17f      	b.n	8001000 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8171 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d00b      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2c:	2b11      	cmp	r3, #17
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	f003 0201 	and.w	r2, r3, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d118      	bne.n	8000dd8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x128>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	6939      	ldr	r1, [r7, #16]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80ac 	beq.w	8000ffa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	; (800101c <HAL_GPIO_Init+0x32c>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	4a5d      	ldr	r2, [pc, #372]	; (800101c <HAL_GPIO_Init+0x32c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6613      	str	r3, [r2, #96]	; 0x60
 8000eae:	4b5b      	ldr	r3, [pc, #364]	; (800101c <HAL_GPIO_Init+0x32c>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eba:	4a59      	ldr	r2, [pc, #356]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x242>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x334>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x23e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x338>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x23a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x33c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x236>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x340>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x232>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	; (8001034 <HAL_GPIO_Init+0x344>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x22e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <HAL_GPIO_Init+0x348>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x22a>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00c      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e00a      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x244>
 8000f32:	2300      	movs	r3, #0
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f44:	4936      	ldr	r1, [pc, #216]	; (8001020 <HAL_GPIO_Init+0x330>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_GPIO_Init+0x34c>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae78 	bne.w	8000d00 <HAL_GPIO_Init+0x10>
  }
}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800
 800102c:	48000c00 	.word	0x48000c00
 8001030:	48001000 	.word	0x48001000
 8001034:	48001400 	.word	0x48001400
 8001038:	48001800 	.word	0x48001800
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105c:	e002      	b.n	8001064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_PWREx_GetVoltageRange+0x18>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000

0800108c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800109a:	d130      	bne.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a8:	d038      	beq.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b2:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2232      	movs	r2, #50	; 0x32
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d0:	e002      	b.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e4:	d102      	bne.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f2      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f8:	d110      	bne.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e00f      	b.n	800111e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d007      	beq.n	800111c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40007000 	.word	0x40007000
 8001130:	20000000 	.word	0x20000000
 8001134:	431bde83 	.word	0x431bde83

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e3d4      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114a:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001154:	4b9e      	ldr	r3, [pc, #632]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80e4 	beq.w	8001334 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_RCC_OscConfig+0x4a>
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	f040 808b 	bne.w	8001290 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b01      	cmp	r3, #1
 800117e:	f040 8087 	bne.w	8001290 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001182:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <HAL_RCC_OscConfig+0x62>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e3ac      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <HAL_RCC_OscConfig+0x7c>
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b2:	e005      	b.n	80011c0 <HAL_RCC_OscConfig+0x88>
 80011b4:	4b86      	ldr	r3, [pc, #536]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d223      	bcs.n	800120c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fd3f 	bl	8001c4c <RCC_SetFlashLatencyFromMSIRange>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e38d      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d8:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4977      	ldr	r1, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	4972      	ldr	r1, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
 800120a:	e025      	b.n	8001258 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6f      	ldr	r2, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	496a      	ldr	r1, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122a:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	4965      	ldr	r1, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fcff 	bl	8001c4c <RCC_SetFlashLatencyFromMSIRange>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e34d      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001258:	f000 fc36 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 800125c:	4601      	mov	r1, r0
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	4a5a      	ldr	r2, [pc, #360]	; (80013d4 <HAL_RCC_OscConfig+0x29c>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	fa21 f303 	lsr.w	r3, r1, r3
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_RCC_OscConfig+0x2a0>)
 8001276:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x2a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fbf5 	bl	8000a6c <HAL_InitTick>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d052      	beq.n	8001332 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	e331      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d032      	beq.n	80012fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc32 	bl	8000b0c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc2e 	bl	8000b0c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e31a      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	493b      	ldr	r1, [pc, #236]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	4936      	ldr	r1, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e01a      	b.n	8001334 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130a:	f7ff fbff 	bl	8000b0c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001312:	f7ff fbfb 	bl	8000b0c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e2e7      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x1da>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001332:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d074      	beq.n	800142a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x21a>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b0c      	cmp	r3, #12
 800134a:	d10e      	bne.n	800136a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d064      	beq.n	8001428 <HAL_RCC_OscConfig+0x2f0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d160      	bne.n	8001428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e2c4      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x24a>
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e01d      	b.n	80013be <HAL_RCC_OscConfig+0x286>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x26e>
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x286>
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x298>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01c      	beq.n	8001400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fba1 	bl	8000b0c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013cc:	e011      	b.n	80013f2 <HAL_RCC_OscConfig+0x2ba>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08003f3c 	.word	0x08003f3c
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fb94 	bl	8000b0c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e280      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	4baf      	ldr	r3, [pc, #700]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2a8>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fb84 	bl	8000b0c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fb80 	bl	8000b0c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e26c      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141a:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x2d0>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d060      	beq.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d005      	beq.n	8001448 <HAL_RCC_OscConfig+0x310>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d119      	bne.n	8001476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d116      	bne.n	8001476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001448:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x328>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e249      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b93      	ldr	r3, [pc, #588]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	4990      	ldr	r1, [pc, #576]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	e040      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d023      	beq.n	80014c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147e:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a8b      	ldr	r2, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb3f 	bl	8000b0c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb3b 	bl	8000b0c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e227      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	061b      	lsls	r3, r3, #24
 80014be:	497c      	ldr	r1, [pc, #496]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb1b 	bl	8000b0c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fb17 	bl	8000b0c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e203      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ec:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d03c      	beq.n	800157e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01c      	beq.n	8001546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001512:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff faf6 	bl	8000b0c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff faf2 	bl	8000b0c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1de      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001536:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ef      	beq.n	8001524 <HAL_RCC_OscConfig+0x3ec>
 8001544:	e01b      	b.n	800157e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001546:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fad9 	bl	8000b0c <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fad5 	bl	8000b0c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1c1      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a6 	beq.w	80016d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10d      	bne.n	80015b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800159e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6593      	str	r3, [r2, #88]	; 0x58
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b4:	2301      	movs	r3, #1
 80015b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_OscConfig+0x57c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d118      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_OscConfig+0x57c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a3a      	ldr	r2, [pc, #232]	; (80016b4 <HAL_RCC_OscConfig+0x57c>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa9c 	bl	8000b0c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d8:	f7ff fa98 	bl	8000b0c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e184      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <HAL_RCC_OscConfig+0x57c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x4d8>
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160e:	e024      	b.n	800165a <HAL_RCC_OscConfig+0x522>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d110      	bne.n	800163a <HAL_RCC_OscConfig+0x502>
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800161a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001638:	e00f      	b.n	800165a <HAL_RCC_OscConfig+0x522>
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fa53 	bl	8000b0c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fa4f 	bl	8000b0c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e139      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x578>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ed      	beq.n	800166a <HAL_RCC_OscConfig+0x532>
 800168e:	e01a      	b.n	80016c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fa3c 	bl	8000b0c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001696:	e00f      	b.n	80016b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fa38 	bl	8000b0c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d906      	bls.n	80016b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e122      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b8:	4b90      	ldr	r3, [pc, #576]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1e8      	bne.n	8001698 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	4a8a      	ldr	r2, [pc, #552]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8108 	beq.w	80018f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f040 80d0 	bne.w	800188c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016ec:	4b83      	ldr	r3, [pc, #524]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d130      	bne.n	8001762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	3b01      	subs	r3, #1
 800170c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d127      	bne.n	8001762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11f      	bne.n	8001762 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800172c:	2a07      	cmp	r2, #7
 800172e:	bf14      	ite	ne
 8001730:	2201      	movne	r2, #1
 8001732:	2200      	moveq	r2, #0
 8001734:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001736:	4293      	cmp	r3, r2
 8001738:	d113      	bne.n	8001762 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	3b01      	subs	r3, #1
 8001748:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d109      	bne.n	8001762 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d06e      	beq.n	8001840 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d069      	beq.n	800183c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b7      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800178a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001790:	f7ff f9bc 	bl	8000b0c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f9b8 	bl	8000b0c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0a4      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017aa:	4b54      	ldr	r3, [pc, #336]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b6:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b51      	ldr	r3, [pc, #324]	; (8001900 <HAL_RCC_OscConfig+0x7c8>)
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017c6:	3a01      	subs	r2, #1
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017d8:	0852      	lsrs	r2, r2, #1
 80017da:	3a01      	subs	r2, #1
 80017dc:	0552      	lsls	r2, r2, #21
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e4:	0852      	lsrs	r2, r2, #1
 80017e6:	3a01      	subs	r2, #1
 80017e8:	0652      	lsls	r2, r2, #25
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f0:	0912      	lsrs	r2, r2, #4
 80017f2:	0452      	lsls	r2, r2, #17
 80017f4:	430a      	orrs	r2, r1
 80017f6:	4941      	ldr	r1, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001814:	f7ff f97a 	bl	8000b0c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff f976 	bl	8000b0c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e062      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800183a:	e05a      	b.n	80018f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e059      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d152      	bne.n	80018f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001864:	f7ff f952 	bl	8000b0c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f94e 	bl	8000b0c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e03a      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x734>
 800188a:	e032      	b.n	80018f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d02d      	beq.n	80018ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018b0:	f023 0303 	bic.w	r3, r3, #3
 80018b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f921 	bl	8000b0c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f91d 	bl	8000b0c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e009      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x7c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x796>
 80018ec:	e001      	b.n	80018f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	f99d808c 	.word	0xf99d808c

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0c8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d910      	bls.n	8001948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4961      	ldr	r1, [pc, #388]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b0      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d04c      	beq.n	80019ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d107      	bne.n	800196c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d121      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e09e      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d107      	bne.n	8001984 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d115      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e092      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e086      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199c:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e07e      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ac:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 0203 	bic.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	493f      	ldr	r1, [pc, #252]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019be:	f7ff f8a5 	bl	8000b0c <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c6:	f7ff f8a1 	bl	8000b0c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e066      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 020c 	and.w	r2, r3, #12
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d1eb      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	492c      	ldr	r1, [pc, #176]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d210      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0207 	bic.w	r2, r3, #7
 8001a22:	4924      	ldr	r1, [pc, #144]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e036      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4910      	ldr	r1, [pc, #64]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7a:	f000 f825 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4601      	mov	r1, r0
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	fa21 f303 	lsr.w	r3, r1, r3
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe ffe4 	bl	8000a6c <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08003f3c 	.word	0x08003f3c
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d121      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d11e      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b18:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10d      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e004      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d133      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0xa4>
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0xaa>
 8001b6a:	e005      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b6e:	617b      	str	r3, [r7, #20]
      break;
 8001b70:	e005      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b74:	617b      	str	r3, [r7, #20]
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	617b      	str	r3, [r7, #20]
      break;
 8001b7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	3301      	adds	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	fb02 f203 	mul.w	r2, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0e5b      	lsrs	r3, r3, #25
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08003f54 	.word	0x08003f54
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08003f4c 	.word	0x08003f4c

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c24:	f7ff ffda 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c28:	4601      	mov	r1, r0
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0adb      	lsrs	r3, r3, #11
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003f4c 	.word	0x08003f4c

08001c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c64:	f7ff fa04 	bl	8001070 <HAL_PWREx_GetVoltageRange>
 8001c68:	6178      	str	r0, [r7, #20]
 8001c6a:	e014      	b.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c84:	f7ff f9f4 	bl	8001070 <HAL_PWREx_GetVoltageRange>
 8001c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9c:	d10b      	bne.n	8001cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b80      	cmp	r3, #128	; 0x80
 8001ca2:	d919      	bls.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca8:	d902      	bls.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001caa:	2302      	movs	r3, #2
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	e013      	b.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	e010      	b.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d902      	bls.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	e00a      	b.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b80      	cmp	r3, #128	; 0x80
 8001cc6:	d102      	bne.n	8001cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc8:	2302      	movs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e004      	b.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b70      	cmp	r3, #112	; 0x70
 8001cd2:	d101      	bne.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 0207 	bic.w	r2, r3, #7
 8001ce0:	4909      	ldr	r1, [pc, #36]	; (8001d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d14:	2300      	movs	r3, #0
 8001d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d03f      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d30:	d01c      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d802      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d3c:	e01f      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d42:	d003      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d4a:	e018      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d4c:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a84      	ldr	r2, [pc, #528]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d58:	e015      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fab9 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 8001d66:	4603      	mov	r3, r0
 8001d68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d6a:	e00c      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3320      	adds	r3, #32
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fba0 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d7c:	e003      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	74fb      	strb	r3, [r7, #19]
      break;
 8001d82:	e000      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10b      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d9a:	4972      	ldr	r1, [pc, #456]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001da2:	e001      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03f      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d01c      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001dbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc2:	d802      	bhi.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001dc8:	e01f      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001dd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dd4:	d01c      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dd6:	e018      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001de4:	e015      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fa73 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 8001df2:	4603      	mov	r3, r0
 8001df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001df6:	e00c      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3320      	adds	r3, #32
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fb5a 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e08:	e003      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e0e:	e000      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e18:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e26:	494f      	ldr	r1, [pc, #316]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e2e:	e001      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a0 	beq.w	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e84:	f7fe fe42 	bl	8000b0c <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe fe3e 	bl	8000b0c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d902      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e9e:	e005      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001eac:	7cfb      	ldrb	r3, [r7, #19]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d15c      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01f      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d019      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d016      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fdfd 	bl	8000b0c <HAL_GetTick>
 8001f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f14:	e00b      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe fdf9 	bl	8000b0c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d902      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f2c:	e006      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ec      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f5a:	e009      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	74bb      	strb	r3, [r7, #18]
 8001f60:	e006      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f70:	7c7b      	ldrb	r3, [r7, #17]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b9e      	ldr	r3, [pc, #632]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a9d      	ldr	r2, [pc, #628]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f8e:	4b98      	ldr	r3, [pc, #608]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f023 0203 	bic.w	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	4994      	ldr	r1, [pc, #592]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f023 020c 	bic.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	498c      	ldr	r1, [pc, #560]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4983      	ldr	r1, [pc, #524]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	497b      	ldr	r1, [pc, #492]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	4972      	ldr	r1, [pc, #456]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	496a      	ldr	r1, [pc, #424]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	4961      	ldr	r1, [pc, #388]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800207c:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	4959      	ldr	r1, [pc, #356]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ac:	4950      	ldr	r1, [pc, #320]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	4948      	ldr	r1, [pc, #288]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	493f      	ldr	r1, [pc, #252]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d028      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002104:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002112:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002122:	d106      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a31      	ldr	r2, [pc, #196]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
 8002130:	e011      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213a:	d10c      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f8c8 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d028      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	491f      	ldr	r1, [pc, #124]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002180:	d106      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218c:	60d3      	str	r3, [r2, #12]
 800218e:	e011      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f899 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d02b      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021de:	d109      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a02      	ldr	r2, [pc, #8]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	e014      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f867 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02f      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002232:	4928      	ldr	r1, [pc, #160]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002242:	d10d      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f844 	bl	80022d8 <RCCEx_PLLSAI1_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d014      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	74bb      	strb	r3, [r7, #18]
 800225e:	e011      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002268:	d10c      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3320      	adds	r3, #32
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f921 	bl	80024b8 <RCCEx_PLLSAI2_Config>
 8002276:	4603      	mov	r3, r0
 8002278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800229e:	490d      	ldr	r1, [pc, #52]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000

080022d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d018      	beq.n	8002324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022f2:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0203 	and.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d10d      	bne.n	800231e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
       ||
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
       ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d044      	beq.n	80023a8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e041      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d00c      	beq.n	8002346 <RCCEx_PLLSAI1_Config+0x6e>
 800232c:	2b03      	cmp	r3, #3
 800232e:	d013      	beq.n	8002358 <RCCEx_PLLSAI1_Config+0x80>
 8002330:	2b01      	cmp	r3, #1
 8002332:	d120      	bne.n	8002376 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002344:	e01a      	b.n	800237c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e013      	b.n	8002380 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10f      	bne.n	8002384 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002374:	e006      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e004      	b.n	8002386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002384:	bf00      	nop
    }

    if(status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	3b01      	subs	r3, #1
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	430b      	orrs	r3, r1
 80023a2:	4944      	ldr	r1, [pc, #272]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d17d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a40      	ldr	r2, [pc, #256]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ba:	f7fe fba7 	bl	8000b0c <HAL_GetTick>
 80023be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023c0:	e009      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023c2:	f7fe fba3 	bl	8000b0c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d902      	bls.n	80023d6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	73fb      	strb	r3, [r7, #15]
        break;
 80023d4:	e005      	b.n	80023e2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d160      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d111      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	0211      	lsls	r1, r2, #8
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68d2      	ldr	r2, [r2, #12]
 8002404:	0912      	lsrs	r2, r2, #4
 8002406:	0452      	lsls	r2, r2, #17
 8002408:	430a      	orrs	r2, r1
 800240a:	492a      	ldr	r1, [pc, #168]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	610b      	str	r3, [r1, #16]
 8002410:	e027      	b.n	8002462 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d112      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002420:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6892      	ldr	r2, [r2, #8]
 8002428:	0211      	lsls	r1, r2, #8
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6912      	ldr	r2, [r2, #16]
 800242e:	0852      	lsrs	r2, r2, #1
 8002430:	3a01      	subs	r2, #1
 8002432:	0552      	lsls	r2, r2, #21
 8002434:	430a      	orrs	r2, r1
 8002436:	491f      	ldr	r1, [pc, #124]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	610b      	str	r3, [r1, #16]
 800243c:	e011      	b.n	8002462 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002446:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6892      	ldr	r2, [r2, #8]
 800244e:	0211      	lsls	r1, r2, #8
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6952      	ldr	r2, [r2, #20]
 8002454:	0852      	lsrs	r2, r2, #1
 8002456:	3a01      	subs	r2, #1
 8002458:	0652      	lsls	r2, r2, #25
 800245a:	430a      	orrs	r2, r1
 800245c:	4915      	ldr	r1, [pc, #84]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800246c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fb4d 	bl	8000b0c <HAL_GetTick>
 8002472:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002474:	e009      	b.n	800248a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002476:	f7fe fb49 	bl	8000b0c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d902      	bls.n	800248a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	73fb      	strb	r3, [r7, #15]
          break;
 8002488:	e005      	b.n	8002496 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ef      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000

080024b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024c6:	4b68      	ldr	r3, [pc, #416]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d018      	beq.n	8002504 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d10d      	bne.n	80024fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
       ||
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024ea:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
       ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d044      	beq.n	8002588 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e041      	b.n	8002588 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d00c      	beq.n	8002526 <RCCEx_PLLSAI2_Config+0x6e>
 800250c:	2b03      	cmp	r3, #3
 800250e:	d013      	beq.n	8002538 <RCCEx_PLLSAI2_Config+0x80>
 8002510:	2b01      	cmp	r3, #1
 8002512:	d120      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002514:	4b54      	ldr	r3, [pc, #336]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11d      	bne.n	800255c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e01a      	b.n	800255c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002526:	4b50      	ldr	r3, [pc, #320]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002536:	e013      	b.n	8002560 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002554:	e006      	b.n	8002564 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
      break;
 800255a:	e004      	b.n	8002566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800255c:	bf00      	nop
 800255e:	e002      	b.n	8002566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002560:	bf00      	nop
 8002562:	e000      	b.n	8002566 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002564:	bf00      	nop
    }

    if(status == HAL_OK)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	3b01      	subs	r3, #1
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	430b      	orrs	r3, r1
 8002582:	4939      	ldr	r1, [pc, #228]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d167      	bne.n	800265e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a35      	ldr	r2, [pc, #212]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259a:	f7fe fab7 	bl	8000b0c <HAL_GetTick>
 800259e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a0:	e009      	b.n	80025b6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025a2:	f7fe fab3 	bl	8000b0c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d902      	bls.n	80025b6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	73fb      	strb	r3, [r7, #15]
        break;
 80025b4:	e005      	b.n	80025c2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ef      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d14a      	bne.n	800265e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d111      	bne.n	80025f2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6892      	ldr	r2, [r2, #8]
 80025de:	0211      	lsls	r1, r2, #8
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68d2      	ldr	r2, [r2, #12]
 80025e4:	0912      	lsrs	r2, r2, #4
 80025e6:	0452      	lsls	r2, r2, #17
 80025e8:	430a      	orrs	r2, r1
 80025ea:	491f      	ldr	r1, [pc, #124]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	614b      	str	r3, [r1, #20]
 80025f0:	e011      	b.n	8002616 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6892      	ldr	r2, [r2, #8]
 8002602:	0211      	lsls	r1, r2, #8
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6912      	ldr	r2, [r2, #16]
 8002608:	0852      	lsrs	r2, r2, #1
 800260a:	3a01      	subs	r2, #1
 800260c:	0652      	lsls	r2, r2, #25
 800260e:	430a      	orrs	r2, r1
 8002610:	4915      	ldr	r1, [pc, #84]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fa73 	bl	8000b0c <HAL_GetTick>
 8002626:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002628:	e009      	b.n	800263e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800262a:	f7fe fa6f 	bl	8000b0c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d902      	bls.n	800263e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	73fb      	strb	r3, [r7, #15]
          break;
 800263c:	e005      	b.n	800264a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ef      	beq.n	800262a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <RCCEx_PLLSAI2_Config+0x1b0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e040      	b.n	8002700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f8be 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f82c 	bl	8002708 <UART_SetConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e022      	b.n	8002700 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 faaa 	bl	8002c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fb31 	bl	8002d60 <UART_CheckIdleState>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002708:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4313      	orrs	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4bac      	ldr	r3, [pc, #688]	; (80029e8 <UART_SetConfig+0x2e0>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	69f9      	ldr	r1, [r7, #28]
 800273e:	430b      	orrs	r3, r1
 8002740:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4aa2      	ldr	r2, [pc, #648]	; (80029ec <UART_SetConfig+0x2e4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	4313      	orrs	r3, r2
 8002770:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a99      	ldr	r2, [pc, #612]	; (80029f0 <UART_SetConfig+0x2e8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d121      	bne.n	80027d4 <UART_SetConfig+0xcc>
 8002790:	4b98      	ldr	r3, [pc, #608]	; (80029f4 <UART_SetConfig+0x2ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d816      	bhi.n	80027cc <UART_SetConfig+0xc4>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <UART_SetConfig+0x9c>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027bb 	.word	0x080027bb
 80027b0:	080027c7 	.word	0x080027c7
 80027b4:	2301      	movs	r3, #1
 80027b6:	76fb      	strb	r3, [r7, #27]
 80027b8:	e0e8      	b.n	800298c <UART_SetConfig+0x284>
 80027ba:	2302      	movs	r3, #2
 80027bc:	76fb      	strb	r3, [r7, #27]
 80027be:	e0e5      	b.n	800298c <UART_SetConfig+0x284>
 80027c0:	2304      	movs	r3, #4
 80027c2:	76fb      	strb	r3, [r7, #27]
 80027c4:	e0e2      	b.n	800298c <UART_SetConfig+0x284>
 80027c6:	2308      	movs	r3, #8
 80027c8:	76fb      	strb	r3, [r7, #27]
 80027ca:	e0df      	b.n	800298c <UART_SetConfig+0x284>
 80027cc:	2310      	movs	r3, #16
 80027ce:	76fb      	strb	r3, [r7, #27]
 80027d0:	bf00      	nop
 80027d2:	e0db      	b.n	800298c <UART_SetConfig+0x284>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <UART_SetConfig+0x2f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d134      	bne.n	8002848 <UART_SetConfig+0x140>
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <UART_SetConfig+0x2ec>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d829      	bhi.n	8002840 <UART_SetConfig+0x138>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <UART_SetConfig+0xec>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002829 	.word	0x08002829
 80027f8:	08002841 	.word	0x08002841
 80027fc:	08002841 	.word	0x08002841
 8002800:	08002841 	.word	0x08002841
 8002804:	08002835 	.word	0x08002835
 8002808:	08002841 	.word	0x08002841
 800280c:	08002841 	.word	0x08002841
 8002810:	08002841 	.word	0x08002841
 8002814:	0800282f 	.word	0x0800282f
 8002818:	08002841 	.word	0x08002841
 800281c:	08002841 	.word	0x08002841
 8002820:	08002841 	.word	0x08002841
 8002824:	0800283b 	.word	0x0800283b
 8002828:	2300      	movs	r3, #0
 800282a:	76fb      	strb	r3, [r7, #27]
 800282c:	e0ae      	b.n	800298c <UART_SetConfig+0x284>
 800282e:	2302      	movs	r3, #2
 8002830:	76fb      	strb	r3, [r7, #27]
 8002832:	e0ab      	b.n	800298c <UART_SetConfig+0x284>
 8002834:	2304      	movs	r3, #4
 8002836:	76fb      	strb	r3, [r7, #27]
 8002838:	e0a8      	b.n	800298c <UART_SetConfig+0x284>
 800283a:	2308      	movs	r3, #8
 800283c:	76fb      	strb	r3, [r7, #27]
 800283e:	e0a5      	b.n	800298c <UART_SetConfig+0x284>
 8002840:	2310      	movs	r3, #16
 8002842:	76fb      	strb	r3, [r7, #27]
 8002844:	bf00      	nop
 8002846:	e0a1      	b.n	800298c <UART_SetConfig+0x284>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6b      	ldr	r2, [pc, #428]	; (80029fc <UART_SetConfig+0x2f4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d120      	bne.n	8002894 <UART_SetConfig+0x18c>
 8002852:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <UART_SetConfig+0x2ec>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800285c:	2b10      	cmp	r3, #16
 800285e:	d00f      	beq.n	8002880 <UART_SetConfig+0x178>
 8002860:	2b10      	cmp	r3, #16
 8002862:	d802      	bhi.n	800286a <UART_SetConfig+0x162>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <UART_SetConfig+0x16c>
 8002868:	e010      	b.n	800288c <UART_SetConfig+0x184>
 800286a:	2b20      	cmp	r3, #32
 800286c:	d005      	beq.n	800287a <UART_SetConfig+0x172>
 800286e:	2b30      	cmp	r3, #48	; 0x30
 8002870:	d009      	beq.n	8002886 <UART_SetConfig+0x17e>
 8002872:	e00b      	b.n	800288c <UART_SetConfig+0x184>
 8002874:	2300      	movs	r3, #0
 8002876:	76fb      	strb	r3, [r7, #27]
 8002878:	e088      	b.n	800298c <UART_SetConfig+0x284>
 800287a:	2302      	movs	r3, #2
 800287c:	76fb      	strb	r3, [r7, #27]
 800287e:	e085      	b.n	800298c <UART_SetConfig+0x284>
 8002880:	2304      	movs	r3, #4
 8002882:	76fb      	strb	r3, [r7, #27]
 8002884:	e082      	b.n	800298c <UART_SetConfig+0x284>
 8002886:	2308      	movs	r3, #8
 8002888:	76fb      	strb	r3, [r7, #27]
 800288a:	e07f      	b.n	800298c <UART_SetConfig+0x284>
 800288c:	2310      	movs	r3, #16
 800288e:	76fb      	strb	r3, [r7, #27]
 8002890:	bf00      	nop
 8002892:	e07b      	b.n	800298c <UART_SetConfig+0x284>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <UART_SetConfig+0x2f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d120      	bne.n	80028e0 <UART_SetConfig+0x1d8>
 800289e:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <UART_SetConfig+0x2ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d00f      	beq.n	80028cc <UART_SetConfig+0x1c4>
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d802      	bhi.n	80028b6 <UART_SetConfig+0x1ae>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <UART_SetConfig+0x1b8>
 80028b4:	e010      	b.n	80028d8 <UART_SetConfig+0x1d0>
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d005      	beq.n	80028c6 <UART_SetConfig+0x1be>
 80028ba:	2bc0      	cmp	r3, #192	; 0xc0
 80028bc:	d009      	beq.n	80028d2 <UART_SetConfig+0x1ca>
 80028be:	e00b      	b.n	80028d8 <UART_SetConfig+0x1d0>
 80028c0:	2300      	movs	r3, #0
 80028c2:	76fb      	strb	r3, [r7, #27]
 80028c4:	e062      	b.n	800298c <UART_SetConfig+0x284>
 80028c6:	2302      	movs	r3, #2
 80028c8:	76fb      	strb	r3, [r7, #27]
 80028ca:	e05f      	b.n	800298c <UART_SetConfig+0x284>
 80028cc:	2304      	movs	r3, #4
 80028ce:	76fb      	strb	r3, [r7, #27]
 80028d0:	e05c      	b.n	800298c <UART_SetConfig+0x284>
 80028d2:	2308      	movs	r3, #8
 80028d4:	76fb      	strb	r3, [r7, #27]
 80028d6:	e059      	b.n	800298c <UART_SetConfig+0x284>
 80028d8:	2310      	movs	r3, #16
 80028da:	76fb      	strb	r3, [r7, #27]
 80028dc:	bf00      	nop
 80028de:	e055      	b.n	800298c <UART_SetConfig+0x284>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a47      	ldr	r2, [pc, #284]	; (8002a04 <UART_SetConfig+0x2fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d124      	bne.n	8002934 <UART_SetConfig+0x22c>
 80028ea:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <UART_SetConfig+0x2ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f8:	d012      	beq.n	8002920 <UART_SetConfig+0x218>
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fe:	d802      	bhi.n	8002906 <UART_SetConfig+0x1fe>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <UART_SetConfig+0x20c>
 8002904:	e012      	b.n	800292c <UART_SetConfig+0x224>
 8002906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290a:	d006      	beq.n	800291a <UART_SetConfig+0x212>
 800290c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002910:	d009      	beq.n	8002926 <UART_SetConfig+0x21e>
 8002912:	e00b      	b.n	800292c <UART_SetConfig+0x224>
 8002914:	2300      	movs	r3, #0
 8002916:	76fb      	strb	r3, [r7, #27]
 8002918:	e038      	b.n	800298c <UART_SetConfig+0x284>
 800291a:	2302      	movs	r3, #2
 800291c:	76fb      	strb	r3, [r7, #27]
 800291e:	e035      	b.n	800298c <UART_SetConfig+0x284>
 8002920:	2304      	movs	r3, #4
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	e032      	b.n	800298c <UART_SetConfig+0x284>
 8002926:	2308      	movs	r3, #8
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e02f      	b.n	800298c <UART_SetConfig+0x284>
 800292c:	2310      	movs	r3, #16
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	bf00      	nop
 8002932:	e02b      	b.n	800298c <UART_SetConfig+0x284>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <UART_SetConfig+0x2e4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d124      	bne.n	8002988 <UART_SetConfig+0x280>
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <UART_SetConfig+0x2ec>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d012      	beq.n	8002974 <UART_SetConfig+0x26c>
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d802      	bhi.n	800295a <UART_SetConfig+0x252>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <UART_SetConfig+0x260>
 8002958:	e012      	b.n	8002980 <UART_SetConfig+0x278>
 800295a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295e:	d006      	beq.n	800296e <UART_SetConfig+0x266>
 8002960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002964:	d009      	beq.n	800297a <UART_SetConfig+0x272>
 8002966:	e00b      	b.n	8002980 <UART_SetConfig+0x278>
 8002968:	2300      	movs	r3, #0
 800296a:	76fb      	strb	r3, [r7, #27]
 800296c:	e00e      	b.n	800298c <UART_SetConfig+0x284>
 800296e:	2302      	movs	r3, #2
 8002970:	76fb      	strb	r3, [r7, #27]
 8002972:	e00b      	b.n	800298c <UART_SetConfig+0x284>
 8002974:	2304      	movs	r3, #4
 8002976:	76fb      	strb	r3, [r7, #27]
 8002978:	e008      	b.n	800298c <UART_SetConfig+0x284>
 800297a:	2308      	movs	r3, #8
 800297c:	76fb      	strb	r3, [r7, #27]
 800297e:	e005      	b.n	800298c <UART_SetConfig+0x284>
 8002980:	2310      	movs	r3, #16
 8002982:	76fb      	strb	r3, [r7, #27]
 8002984:	bf00      	nop
 8002986:	e001      	b.n	800298c <UART_SetConfig+0x284>
 8002988:	2310      	movs	r3, #16
 800298a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a16      	ldr	r2, [pc, #88]	; (80029ec <UART_SetConfig+0x2e4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	f040 8087 	bne.w	8002aa6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002998:	7efb      	ldrb	r3, [r7, #27]
 800299a:	2b08      	cmp	r3, #8
 800299c:	d836      	bhi.n	8002a0c <UART_SetConfig+0x304>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <UART_SetConfig+0x29c>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029c9 	.word	0x080029c9
 80029a8:	08002a0d 	.word	0x08002a0d
 80029ac:	080029d1 	.word	0x080029d1
 80029b0:	08002a0d 	.word	0x08002a0d
 80029b4:	080029d7 	.word	0x080029d7
 80029b8:	08002a0d 	.word	0x08002a0d
 80029bc:	08002a0d 	.word	0x08002a0d
 80029c0:	08002a0d 	.word	0x08002a0d
 80029c4:	080029df 	.word	0x080029df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029c8:	f7ff f914 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 80029cc:	6178      	str	r0, [r7, #20]
        break;
 80029ce:	e022      	b.n	8002a16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <UART_SetConfig+0x300>)
 80029d2:	617b      	str	r3, [r7, #20]
        break;
 80029d4:	e01f      	b.n	8002a16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d6:	f7ff f877 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 80029da:	6178      	str	r0, [r7, #20]
        break;
 80029dc:	e01b      	b.n	8002a16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e2:	617b      	str	r3, [r7, #20]
        break;
 80029e4:	e017      	b.n	8002a16 <UART_SetConfig+0x30e>
 80029e6:	bf00      	nop
 80029e8:	efff69f3 	.word	0xefff69f3
 80029ec:	40008000 	.word	0x40008000
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40004800 	.word	0x40004800
 8002a00:	40004c00 	.word	0x40004c00
 8002a04:	40005000 	.word	0x40005000
 8002a08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	76bb      	strb	r3, [r7, #26]
        break;
 8002a14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80f1 	beq.w	8002c00 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d305      	bcc.n	8002a3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d902      	bls.n	8002a40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	76bb      	strb	r3, [r7, #26]
 8002a3e:	e0df      	b.n	8002c00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	0214      	lsls	r4, r2, #8
 8002a52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a56:	020b      	lsls	r3, r1, #8
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6852      	ldr	r2, [r2, #4]
 8002a5c:	0852      	lsrs	r2, r2, #1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	eb13 0b01 	adds.w	fp, r3, r1
 8002a68:	eb44 0c02 	adc.w	ip, r4, r2
 8002a6c:	4658      	mov	r0, fp
 8002a6e:	4661      	mov	r1, ip
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	f7fd fba4 	bl	80001c8 <__aeabi_uldivmod>
 8002a80:	4603      	mov	r3, r0
 8002a82:	460c      	mov	r4, r1
 8002a84:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8c:	d308      	bcc.n	8002aa0 <UART_SetConfig+0x398>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a94:	d204      	bcs.n	8002aa0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e0af      	b.n	8002c00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	76bb      	strb	r3, [r7, #26]
 8002aa4:	e0ac      	b.n	8002c00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d15b      	bne.n	8002b68 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002ab0:	7efb      	ldrb	r3, [r7, #27]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d827      	bhi.n	8002b06 <UART_SetConfig+0x3fe>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x3b4>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002af1 	.word	0x08002af1
 8002ac8:	08002b07 	.word	0x08002b07
 8002acc:	08002af7 	.word	0x08002af7
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b07 	.word	0x08002b07
 8002adc:	08002aff 	.word	0x08002aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff f888 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	6178      	str	r0, [r7, #20]
        break;
 8002ae6:	e013      	b.n	8002b10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae8:	f7ff f89a 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002aec:	6178      	str	r0, [r7, #20]
        break;
 8002aee:	e00f      	b.n	8002b10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <UART_SetConfig+0x510>)
 8002af2:	617b      	str	r3, [r7, #20]
        break;
 8002af4:	e00c      	b.n	8002b10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af6:	f7fe ffe7 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8002afa:	6178      	str	r0, [r7, #20]
        break;
 8002afc:	e008      	b.n	8002b10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	617b      	str	r3, [r7, #20]
        break;
 8002b04:	e004      	b.n	8002b10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	76bb      	strb	r3, [r7, #26]
        break;
 8002b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d074      	beq.n	8002c00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005a      	lsls	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	441a      	add	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d916      	bls.n	8002b62 <UART_SetConfig+0x45a>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d212      	bcs.n	8002b62 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f023 030f 	bic.w	r3, r3, #15
 8002b44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	89fb      	ldrh	r3, [r7, #14]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	89fa      	ldrh	r2, [r7, #14]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e04e      	b.n	8002c00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	76bb      	strb	r3, [r7, #26]
 8002b66:	e04b      	b.n	8002c00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b68:	7efb      	ldrb	r3, [r7, #27]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d827      	bhi.n	8002bbe <UART_SetConfig+0x4b6>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0x46c>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002bbf 	.word	0x08002bbf
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002bbf 	.word	0x08002bbf
 8002b8c:	08002bbf 	.word	0x08002bbf
 8002b90:	08002bbf 	.word	0x08002bbf
 8002b94:	08002bb7 	.word	0x08002bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7ff f82c 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	6178      	str	r0, [r7, #20]
        break;
 8002b9e:	e013      	b.n	8002bc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff f83e 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	6178      	str	r0, [r7, #20]
        break;
 8002ba6:	e00f      	b.n	8002bc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <UART_SetConfig+0x510>)
 8002baa:	617b      	str	r3, [r7, #20]
        break;
 8002bac:	e00c      	b.n	8002bc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7fe ff8b 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8002bb2:	6178      	str	r0, [r7, #20]
        break;
 8002bb4:	e008      	b.n	8002bc8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	617b      	str	r3, [r7, #20]
        break;
 8002bbc:	e004      	b.n	8002bc8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	76bb      	strb	r3, [r7, #26]
        break;
 8002bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	085a      	lsrs	r2, r3, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d908      	bls.n	8002bfc <UART_SetConfig+0x4f4>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d204      	bcs.n	8002bfc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e001      	b.n	8002c00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002c0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002c18:	00f42400 	.word	0x00f42400

08002c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01a      	beq.n	8002d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1a:	d10a      	bne.n	8002d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
  }
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d6e:	f7fd fecd 	bl	8000b0c <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d10e      	bne.n	8002da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f82a 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e020      	b.n	8002de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d10e      	bne.n	8002dcc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f814 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e00a      	b.n	8002de2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	e05d      	b.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d059      	beq.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fd fe82 	bl	8000b0c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11b      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e042      	b.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02b      	beq.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d123      	bne.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e00f      	b.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d092      	beq.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <LL_FLASH_IsActiveFlag_BSY>:
  FLASH_CHK_OK = 0,
  FLASH_CHK_EMPTY
};

__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_BSY(FLASH_TypeDef *FLASHx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(FLASHx->SR, FLASH_SR_BSY) == (FLASH_SR_BSY));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_FLASH_SET_OBL_Launch>:
  /* Set the OBL_Launch bit to launch the option byte loading */
__STATIC_INLINE void LL_FLASH_SET_OBL_Launch(FLASH_TypeDef *FLASHx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_OBL_LAUNCH);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	615a      	str	r2, [r3, #20]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_FLASH_Lock>:
__STATIC_INLINE void LL_FLASH_Lock(FLASH_TypeDef *FLASHx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR, FLASH_CR_LOCK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	615a      	str	r2, [r3, #20]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_FLASH_LockState>:
/*read flash's states of lock or unlock*/
__STATIC_INLINE uint32_t LL_FLASH_LockState(FLASH_TypeDef *FLASHx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	return READ_BIT(FLASHx->CR,FLASH_CR_LOCK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_FLASh_SetKey>:
/*set key for flash*/
__STATIC_INLINE void LL_FLASh_SetKey(FLASH_TypeDef *FLASHx,uint32_t key)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	WRITE_REG(FLASHx->KEYR,key);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_FLASH_EnableProgram>:

/*EnableProgram*/
__STATIC_INLINE void LL_FLASH_EnableProgram(FLASH_TypeDef *FLASHx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  SET_BIT(FLASHx->CR,FLASH_CR_PG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	615a      	str	r2, [r3, #20]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_FLASH_DisenableProgram>:
/*DisenableProgram*/
__STATIC_INLINE void LL_FLASH_DisenableProgram(FLASH_TypeDef *FLASHx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(FLASHx->CR,FLASH_CR_PG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f023 0201 	bic.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	615a      	str	r2, [r3, #20]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_FLASH_PageErase>:
uint8_t LL_Flash_Unlock(void);
uint32_t FLASH_If_Check(uint32_t start);
uint8_t LL_FLASH_OB_Unlock(void);

uint8_t LL_FLASH_PageErase(uint16_t PageNumber)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
	uint32_t BankActive;
	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 8002fca:	4b29      	ldr	r3, [pc, #164]	; (8003070 <LL_FLASH_PageErase+0xb0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 8002fd4:	f000 f968 	bl	80032a8 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 8002fd8:	bf00      	nop
 8002fda:	4826      	ldr	r0, [pc, #152]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8002fdc:	f7ff ff80 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <LL_FLASH_PageErase+0x1a>
	{
	}
	if(PageNumber>200)
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2bc8      	cmp	r3, #200	; 0xc8
 8002fea:	d93b      	bls.n	8003064 <LL_FLASH_PageErase+0xa4>
	{
		SET_BIT(FLASH->CR, FLASH_CR_PER);        //enable flash earse
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	6153      	str	r3, [r2, #20]
		if(BankActive == 0)                      //bank1 is active
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <LL_FLASH_PageErase+0x4c>
		{
			CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);   //earse bank1
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003008:	6153      	str	r3, [r2, #20]
 800300a:	e005      	b.n	8003018 <LL_FLASH_PageErase+0x58>
		}
		else                                     //bank2 is active
		{
			SET_BIT(FLASH->CR, FLASH_CR_BKER);     //earse bank2
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003016:	6153      	str	r3, [r2, #20]
		}
	  SET_BIT(FLASH->CR, (PageNumber << 3));   //set page to earse
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	00d2      	lsls	r2, r2, #3
 8003020:	4611      	mov	r1, r2
 8003022:	4a14      	ldr	r2, [pc, #80]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);       //start earsing...
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6153      	str	r3, [r2, #20]
		while (LL_FLASH_IsActiveFlag_BSY(FLASH)) //wait for flash operation complete
 8003034:	bf00      	nop
 8003036:	480f      	ldr	r0, [pc, #60]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003038:	f7ff ff52 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <LL_FLASH_PageErase+0x76>
	  {
	  }
		CLEAR_BIT(FLASH->CR, FLASH_CR_PNB);      //clear page to earse
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003048:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800304c:	6153      	str	r3, [r2, #20]
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);      //disable flash earse
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 8003054:	f023 0302 	bic.w	r3, r3, #2
 8003058:	6153      	str	r3, [r2, #20]
	else
	{
		return LL_ERROR;
	}

	LL_FLASH_Lock(FLASH);
 800305a:	4806      	ldr	r0, [pc, #24]	; (8003074 <LL_FLASH_PageErase+0xb4>)
 800305c:	f7ff ff64 	bl	8002f28 <LL_FLASH_Lock>
	return LL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <LL_FLASH_PageErase+0xa6>
		return LL_ERROR;
 8003064:	2301      	movs	r3, #1
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40022000 	.word	0x40022000

08003078 <LL_FLASH_Program64>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint8_t LL_FLASH_Program64(uint32_t faddr,uint32_t* pData)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	uint32_t prog_bit = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
	LL_Flash_Unlock();
 8003086:	f000 f90f 	bl	80032a8 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 800308a:	bf00      	nop
 800308c:	4818      	ldr	r0, [pc, #96]	; (80030f0 <LL_FLASH_Program64+0x78>)
 800308e:	f7ff ff27 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <LL_FLASH_Program64+0x14>
	{
	}
	LL_FLASH_EnableProgram(FLASH);              //flash program enable
 8003098:	4815      	ldr	r0, [pc, #84]	; (80030f0 <LL_FLASH_Program64+0x78>)
 800309a:	f7ff ff71 	bl	8002f80 <LL_FLASH_EnableProgram>
	/* Program the double word */
  *(__IO uint32_t*)faddr = *pData;            //program 4 bytes, little endian
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(faddr+4) = *(pData+1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	461a      	mov	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	6013      	str	r3, [r2, #0]

	prog_bit = FLASH_CR_PG;
 80030b2:	2301      	movs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 80030b6:	bf00      	nop
 80030b8:	480d      	ldr	r0, [pc, #52]	; (80030f0 <LL_FLASH_Program64+0x78>)
 80030ba:	f7ff ff11 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <LL_FLASH_Program64+0x40>
	{
	}
	if(prog_bit!=0)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <LL_FLASH_Program64+0x60>
	{
		CLEAR_BIT(FLASH->CR,prog_bit);
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <LL_FLASH_Program64+0x78>)
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	4907      	ldr	r1, [pc, #28]	; (80030f0 <LL_FLASH_Program64+0x78>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	614b      	str	r3, [r1, #20]
	}
	LL_FLASH_DisenableProgram(FLASH);
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <LL_FLASH_Program64+0x78>)
 80030da:	f7ff ff61 	bl	8002fa0 <LL_FLASH_DisenableProgram>
	LL_FLASH_Lock(FLASH);
 80030de:	4804      	ldr	r0, [pc, #16]	; (80030f0 <LL_FLASH_Program64+0x78>)
 80030e0:	f7ff ff22 	bl	8002f28 <LL_FLASH_Lock>
	return LL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000

080030f4 <LL_FLASH_Program64s>:

uint8_t LL_FLASH_Program64s(uint32_t destination, uint32_t* pData,uint16_t DataLen)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
	uint32_t prog_bit = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
	uint16_t i = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	82fb      	strh	r3, [r7, #22]
	LL_Flash_Unlock();
 800310a:	f000 f8cd 	bl	80032a8 <LL_Flash_Unlock>
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))       //wait for flash operation complete
 800310e:	bf00      	nop
 8003110:	482c      	ldr	r0, [pc, #176]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 8003112:	f7ff fee5 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f9      	bne.n	8003110 <LL_FLASH_Program64s+0x1c>
  {
	}
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 800311c:	2300      	movs	r3, #0
 800311e:	82fb      	strh	r3, [r7, #22]
 8003120:	e03e      	b.n	80031a0 <LL_FLASH_Program64s+0xac>
	{
		LL_FLASH_EnableProgram(FLASH);              //flash program enable
 8003122:	4828      	ldr	r0, [pc, #160]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 8003124:	f7ff ff2c 	bl	8002f80 <LL_FLASH_EnableProgram>
		while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003128:	bf00      	nop
 800312a:	4826      	ldr	r0, [pc, #152]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 800312c:	f7ff fed8 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f9      	bne.n	800312a <LL_FLASH_Program64s+0x36>
	  {
	  }
	  /* Program the double word */
    *(__IO uint32_t*)(destination) = *(pData+2*i);            //program 4 bytes, little endian
 8003136:	8afb      	ldrh	r3, [r7, #22]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	461a      	mov	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	601a      	str	r2, [r3, #0]
    *(__IO uint32_t*)(destination+4) = *(pData+2*i+1);
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	3304      	adds	r3, #4
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4413      	add	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	3204      	adds	r2, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6013      	str	r3, [r2, #0]
		if(*(uint64_t*)destination==*(uint64_t*)(pData+2*i))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4618      	mov	r0, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4403      	add	r3, r0
 8003168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800316c:	42a2      	cmp	r2, r4
 800316e:	bf08      	it	eq
 8003170:	4299      	cmpeq	r1, r3
 8003172:	d10c      	bne.n	800318e <LL_FLASH_Program64s+0x9a>
		{
			destination += 8;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3308      	adds	r3, #8
 8003178:	60fb      	str	r3, [r7, #12]
		  prog_bit = FLASH_CR_PG;
 800317a:	2301      	movs	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
			CLEAR_BIT(FLASH->CR,prog_bit);
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	490f      	ldr	r1, [pc, #60]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 8003188:	4013      	ands	r3, r2
 800318a:	614b      	str	r3, [r1, #20]
 800318c:	e002      	b.n	8003194 <LL_FLASH_Program64s+0xa0>
		}
		else
		  i = i-1;
 800318e:	8afb      	ldrh	r3, [r7, #22]
 8003190:	3b01      	subs	r3, #1
 8003192:	82fb      	strh	r3, [r7, #22]
		LL_FLASH_DisenableProgram(FLASH);
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 8003196:	f7ff ff03 	bl	8002fa0 <LL_FLASH_DisenableProgram>
	for (i = 0; (i < DataLen / 2) && (destination <= (0x08080000 - 8)); i++)
 800319a:	8afb      	ldrh	r3, [r7, #22]
 800319c:	3301      	adds	r3, #1
 800319e:	82fb      	strh	r3, [r7, #22]
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8afa      	ldrh	r2, [r7, #22]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d203      	bcs.n	80031b4 <LL_FLASH_Program64s+0xc0>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <LL_FLASH_Program64s+0xd4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d9b6      	bls.n	8003122 <LL_FLASH_Program64s+0x2e>
	}
	LL_FLASH_Lock(FLASH);
 80031b4:	4803      	ldr	r0, [pc, #12]	; (80031c4 <LL_FLASH_Program64s+0xd0>)
 80031b6:	f7ff feb7 	bl	8002f28 <LL_FLASH_Lock>
	return LL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	40022000 	.word	0x40022000
 80031c8:	0807fff8 	.word	0x0807fff8

080031cc <STMFLASH_Read32>:

uint32_t STMFLASH_Read32( uint32_t faddr )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return *(__IO uint32_t*)faddr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <STMFLASH_BankSwitch>:

uint8_t STMFLASH_BankSwitch(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
	uint8_t result;
	uint32_t BankActive = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]

	LL_FLASH_Lock(FLASH);
 80031ee:	482c      	ldr	r0, [pc, #176]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 80031f0:	f7ff fe9a 	bl	8002f28 <LL_FLASH_Lock>
	/* Clear OPTVERR bit set on virgin samples */
	if((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { SET_BIT(FLASH->ECCR, ((FLASH_SR_OPTVERR) & (FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }

  if((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))
  { WRITE_REG(FLASH->SR, ((FLASH_SR_OPTVERR) & ~(FLASH_ECCR_ECCC | FLASH_ECCR_ECCD))); }
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 80031f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031fa:	611a      	str	r2, [r3, #16]

	BankActive = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE);
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <STMFLASH_BankSwitch+0xc0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	603b      	str	r3, [r7, #0]
  result = LL_Flash_Unlock();
 8003206:	f000 f84f 	bl	80032a8 <LL_Flash_Unlock>
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]

	if( result == LL_OK)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d140      	bne.n	8003296 <STMFLASH_BankSwitch+0xb2>
	{
		  result = LL_FLASH_OB_Unlock();
 8003214:	f000 f868 	bl	80032e8 <LL_FLASH_OB_Unlock>
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
		  if((READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == RESET))
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <STMFLASH_BankSwitch+0x72>
			{
				  while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003228:	bf00      	nop
 800322a:	481d      	ldr	r0, [pc, #116]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800322c:	f7ff fe58 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f9      	bne.n	800322a <STMFLASH_BankSwitch+0x46>
					{
					}
					/* When no firmware at bank2, board is working at bank1 with BFB2 flag set. So BFB2 flag should be clear by checking bank (when FUT is at bank 1)instead of BFB2. */
					if (BankActive != 0)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <STMFLASH_BankSwitch+0x66>
					{
						CLEAR_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003242:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	e005      	b.n	8003256 <STMFLASH_BankSwitch+0x72>
					}
					else
					{
						SET_BIT(FLASH->OPTR, FLASH_OPTR_BFB2);
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003254:	6213      	str	r3, [r2, #32]
					}
			}
			/* Set OPTSTRT Bit */
			SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	6153      	str	r3, [r2, #20]
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003262:	bf00      	nop
 8003264:	480e      	ldr	r0, [pc, #56]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003266:	f7ff fe3b 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <STMFLASH_BankSwitch+0x80>
			{
			}
			/* If the option byte program operation is completed, disable the OPTSTRT Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003276:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800327a:	6153      	str	r3, [r2, #20]

			/* Set the bit to force the option byte reloading */
			if (result == LL_OK)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <STMFLASH_BankSwitch+0xa4>
			{
				LL_FLASH_SET_OBL_Launch(FLASH);
 8003282:	4807      	ldr	r0, [pc, #28]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 8003284:	f7ff fe40 	bl	8002f08 <LL_FLASH_SET_OBL_Launch>
			}
			while (LL_FLASH_IsActiveFlag_BSY(FLASH))    //wait for flash operation complete
 8003288:	bf00      	nop
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <STMFLASH_BankSwitch+0xbc>)
 800328c:	f7ff fe28 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <STMFLASH_BankSwitch+0xa6>
			{
			}
	}
	return result;
 8003296:	79fb      	ldrb	r3, [r7, #7]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40010000 	.word	0x40010000

080032a8 <LL_Flash_Unlock>:

uint8_t LL_Flash_Unlock(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	while (LL_FLASH_IsActiveFlag_BSY(FLASH))
 80032ac:	bf00      	nop
 80032ae:	480b      	ldr	r0, [pc, #44]	; (80032dc <LL_Flash_Unlock+0x34>)
 80032b0:	f7ff fe16 	bl	8002ee0 <LL_FLASH_IsActiveFlag_BSY>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <LL_Flash_Unlock+0x6>
	{
	}
	if (LL_FLASH_LockState(FLASH)!=0)
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <LL_Flash_Unlock+0x34>)
 80032bc:	f7ff fe44 	bl	8002f48 <LL_FLASH_LockState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <LL_Flash_Unlock+0x2e>
	{
		LL_FLASh_SetKey(FLASH,FLASH_KEY1);
 80032c6:	4906      	ldr	r1, [pc, #24]	; (80032e0 <LL_Flash_Unlock+0x38>)
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <LL_Flash_Unlock+0x34>)
 80032ca:	f7ff fe4b 	bl	8002f64 <LL_FLASh_SetKey>
		LL_FLASh_SetKey(FLASH,FLASH_KEY2);
 80032ce:	4905      	ldr	r1, [pc, #20]	; (80032e4 <LL_Flash_Unlock+0x3c>)
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <LL_Flash_Unlock+0x34>)
 80032d2:	f7ff fe47 	bl	8002f64 <LL_FLASh_SetKey>
	}
	return LL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40022000 	.word	0x40022000
 80032e0:	45670123 	.word	0x45670123
 80032e4:	cdef89ab 	.word	0xcdef89ab

080032e8 <LL_FLASH_OB_Unlock>:
  /* checking if the data could be code (first word is stack location) */
  if ((*(uint32_t*)start >> 24) != 0x20 ) return FLASH_CHK_EMPTY;
  return FLASH_CHK_OK;
}
uint8_t LL_FLASH_OB_Unlock(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != RESET)
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <LL_FLASH_OB_Unlock+0x2c>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <LL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);//allow programming
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <LL_FLASH_OB_Unlock+0x2c>)
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <LL_FLASH_OB_Unlock+0x30>)
 80032fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);//allow erasing
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_FLASH_OB_Unlock+0x2c>)
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <LL_FLASH_OB_Unlock+0x34>)
 8003302:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return LL_ERROR;
  }
  return LL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <LL_FLASH_OB_Unlock+0x22>
    return LL_ERROR;
 8003308:	2301      	movs	r3, #1
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40022000 	.word	0x40022000
 8003318:	08192a3b 	.word	0x08192a3b
 800331c:	4c5d6e7f 	.word	0x4c5d6e7f

08003320 <Reset_Handler>:
					)
				}
#endif

void Reset_Handler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
					__ASM volatile
 8003324:	f8df d040 	ldr.w	sp, [pc, #64]	; 8003368 <LoopForever+0x8>
 8003328:	2100      	movs	r1, #0
 800332a:	e003      	b.n	8003334 <LoopCopyDataInit>

0800332c <CopyDataInit>:
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <LoopForever+0xc>)
 800332e:	585b      	ldr	r3, [r3, r1]
 8003330:	5043      	str	r3, [r0, r1]
 8003332:	3104      	adds	r1, #4

08003334 <LoopCopyDataInit>:
 8003334:	480e      	ldr	r0, [pc, #56]	; (8003370 <LoopForever+0x10>)
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <LoopForever+0x14>)
 8003338:	1842      	adds	r2, r0, r1
 800333a:	429a      	cmp	r2, r3
 800333c:	d3f6      	bcc.n	800332c <CopyDataInit>
 800333e:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <LoopForever+0x18>)
 8003340:	e002      	b.n	8003348 <LoopFillZerobss>

08003342 <FillZerobss>:
 8003342:	2300      	movs	r3, #0
 8003344:	f842 3b04 	str.w	r3, [r2], #4

08003348 <LoopFillZerobss>:
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <LoopForever+0x1c>)
 800334a:	429a      	cmp	r2, r3
 800334c:	d3f9      	bcc.n	8003342 <FillZerobss>
	#if defined ( __GNUC__ )
		BEFORE_MAIN();
		SystemInit();
 800334e:	f7fd fb35 	bl	80009bc <SystemInit>
	#else
		SystemInit();
	#endif
	if (TOGGLE_RESET_EXTI_CALLBACK() == FLAG_WRT_OK)
 8003352:	f000 fd9b 	bl	8003e8c <_etext>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <LoopForever+0x2>
					__ASM volatile
 800335c:	f7fd f8b4 	bl	80004c8 <main>

08003360 <LoopForever>:
 8003360:	e7fe      	b.n	8003360 <LoopForever>
		INTO_MAIN();
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	0000      	.short	0x0000
 8003368:	20018000 	.word	0x20018000
 800336c:	08003ff8 	.word	0x08003ff8
 8003370:	20000000 	.word	0x20000000
 8003374:	20000070 	.word	0x20000070
 8003378:	20000070 	.word	0x20000070
 800337c:	20000928 	.word	0x20000928

08003380 <trace_store_msg>:

//**************************************************************************************************
//***** Global Functions ***************************************************************************

void trace_store_msg(const char* file_name, const int file_line, const char* fmt, ...)
{
 8003380:	b40c      	push	{r2, r3}
 8003382:	b590      	push	{r4, r7, lr}
 8003384:	b08d      	sub	sp, #52	; 0x34
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
	__ASM volatile
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	b672      	cpsid	i
 8003392:	461c      	mov	r4, r3
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003394:	f3bf 8f5f 	dmb	sy
	return ie;
 8003398:	4623      	mov	r3, r4
	Trace_Msg *msg;
	unsigned int num_writing;
	int	ie;

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c

    num_writing = s_msg_queue_num_writing++;
 800339c:	4b35      	ldr	r3, [pc, #212]	; (8003474 <trace_store_msg+0xf4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	4934      	ldr	r1, [pc, #208]	; (8003474 <trace_store_msg+0xf4>)
 80033a4:	600a      	str	r2, [r1, #0]
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
    /* copy to the queue */
	msg = &s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS];
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	01db      	lsls	r3, r3, #7
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <trace_store_msg+0xf8>)
 80033c4:	4413      	add	r3, r2
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    memset((Trace_Msg *)&s_msg_queue[num_writing % TRACE_BUFFER_ELEMENTS], 0, sizeof(Trace_Msg));
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <trace_store_msg+0xf8>)
 80033d2:	4413      	add	r3, r2
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f8da 	bl	8003592 <memset>

    memcpy(msg->file_name, file_name, sizeof(msg->file_name));
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	220e      	movs	r2, #14
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f8c9 	bl	800357c <memcpy>
    msg->file_line = file_line;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	81da      	strh	r2, [r3, #14]
    memcpy(msg->arguments, fmt, sizeof(msg->arguments));
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	3310      	adds	r3, #16
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f8be 	bl	800357c <memcpy>

    /* save parameters */
    va_list va;
    va_start(va, fmt);
 8003400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003404:	60fb      	str	r3, [r7, #12]
    size_t va_size_max = (uintptr_t)_estack - (uintptr_t)(va.__ap);
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <trace_store_msg+0xfc>)
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	623b      	str	r3, [r7, #32]
    if (sizeof(msg->var_args) > va_size_max)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2b2f      	cmp	r3, #47	; 0x2f
 8003412:	d807      	bhi.n	8003424 <trace_store_msg+0xa4>
        memcpy(msg->var_args, va.__ap, va_size_max);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3350      	adds	r3, #80	; 0x50
 8003418:	68f9      	ldr	r1, [r7, #12]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f8ad 	bl	800357c <memcpy>
 8003422:	e006      	b.n	8003432 <trace_store_msg+0xb2>
    else memcpy(msg->var_args, va.__ap, sizeof(msg->var_args));
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	3350      	adds	r3, #80	; 0x50
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	2230      	movs	r2, #48	; 0x30
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f8a5 	bl	800357c <memcpy>
	__ASM volatile
 8003432:	f3ef 8310 	mrs	r3, PRIMASK
 8003436:	b672      	cpsid	i
 8003438:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 800343a:	f3bf 8f5f 	dmb	sy
	return ie;
 800343e:	4623      	mov	r3, r4
    va_end(va);

	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (s_msg_queue_num_written == num_writing)
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <trace_store_msg+0x100>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003448:	429a      	cmp	r2, r3
 800344a:	d103      	bne.n	8003454 <trace_store_msg+0xd4>
		s_msg_queue_num_written = s_msg_queue_num_writing;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <trace_store_msg+0xf4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <trace_store_msg+0x100>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f383 8810 	msr	PRIMASK, r3

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 8003466:	bf00      	nop
 8003468:	3734      	adds	r7, #52	; 0x34
 800346a:	46bd      	mov	sp, r7
 800346c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003470:	b002      	add	sp, #8
 8003472:	4770      	bx	lr
 8003474:	20000894 	.word	0x20000894
 8003478:	20000090 	.word	0x20000090
 800347c:	20018000 	.word	0x20018000
 8003480:	20000890 	.word	0x20000890

08003484 <trace_to_flash>:

void trace_to_flash()
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
	uint8_t	num_read_start;
    int8_t i, k = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	737b      	strb	r3, [r7, #13]
	__ASM volatile
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	b672      	cpsid	i
 8003494:	461c      	mov	r4, r3
  __ASM volatile ("dmb 0xF":::"memory");
 8003496:	f3bf 8f5f 	dmb	sy
	return ie;
 800349a:	4623      	mov	r3, r4
	int	ie;
	ie = trace_int_lock();	// implies REORDER_BARRIER() ...
 800349c:	60bb      	str	r3, [r7, #8]

    // erase flash
    LL_FLASH_PageErase(TRACE_PAGE);
 800349e:	20fa      	movs	r0, #250	; 0xfa
 80034a0:	f7ff fd8e 	bl	8002fc0 <LL_FLASH_PageErase>

    /* loop the queue */
    num_read_start = (uint8_t)(s_msg_queue_num_written % TRACE_BUFFER_ELEMENTS) - 1;
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <trace_to_flash+0xe4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
    if (num_read_start == 0xFF)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d101      	bne.n	80034be <trace_to_flash+0x3a>
        num_read_start = TRACE_BUFFER_ELEMENTS - 1;
 80034ba:	230f      	movs	r3, #15
 80034bc:	73fb      	strb	r3, [r7, #15]
    for (i = num_read_start; i >= 0; i--, k++)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	73bb      	strb	r3, [r7, #14]
 80034c2:	e01b      	b.n	80034fc <trace_to_flash+0x78>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 80034c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80034c8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80034cc:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80034d0:	01d8      	lsls	r0, r3, #7
 80034d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034d6:	01db      	lsls	r3, r3, #7
 80034d8:	4a24      	ldr	r2, [pc, #144]	; (800356c <trace_to_flash+0xe8>)
 80034da:	4413      	add	r3, r2
 80034dc:	2220      	movs	r2, #32
 80034de:	4619      	mov	r1, r3
 80034e0:	f7ff fe08 	bl	80030f4 <LL_FLASH_Program64s>
    for (i = num_read_start; i >= 0; i--, k++)
 80034e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73bb      	strb	r3, [r7, #14]
 80034f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	737b      	strb	r3, [r7, #13]
 80034fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003500:	2b00      	cmp	r3, #0
 8003502:	dadf      	bge.n	80034c4 <trace_to_flash+0x40>
    }
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 8003504:	230f      	movs	r3, #15
 8003506:	73bb      	strb	r3, [r7, #14]
 8003508:	e01b      	b.n	8003542 <trace_to_flash+0xbe>
    {
        LL_FLASH_Program64s(TRACE_FLASH_ADDRESS + k * sizeof(Trace_Msg), (uint32_t *)(&s_msg_queue[i]), sizeof(Trace_Msg) / sizeof(uint32_t));
 800350a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800350e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003512:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8003516:	01d8      	lsls	r0, r3, #7
 8003518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <trace_to_flash+0xe8>)
 8003520:	4413      	add	r3, r2
 8003522:	2220      	movs	r2, #32
 8003524:	4619      	mov	r1, r3
 8003526:	f7ff fde5 	bl	80030f4 <LL_FLASH_Program64s>
    for (i = TRACE_BUFFER_ELEMENTS - 1; i > num_read_start; i--, k++)
 800352a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	73bb      	strb	r3, [r7, #14]
 8003536:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	737b      	strb	r3, [r7, #13]
 8003542:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	429a      	cmp	r2, r3
 800354a:	dcde      	bgt.n	800350a <trace_to_flash+0x86>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	f3bf 8f5f 	dmb	sy
	__set_PRIMASK(ie);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	f383 8810 	msr	PRIMASK, r3
    }

	trace_int_unlock(ie);		// implies REORDER_BARRIER() ...
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bd90      	pop	{r4, r7, pc}
 8003566:	bf00      	nop
 8003568:	20000890 	.word	0x20000890
 800356c:	20000090 	.word	0x20000090

08003570 <__errno>:
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <__errno+0x8>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <memcpy>:
 800357c:	b510      	push	{r4, lr}
 800357e:	1e43      	subs	r3, r0, #1
 8003580:	440a      	add	r2, r1
 8003582:	4291      	cmp	r1, r2
 8003584:	d100      	bne.n	8003588 <memcpy+0xc>
 8003586:	bd10      	pop	{r4, pc}
 8003588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800358c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003590:	e7f7      	b.n	8003582 <memcpy+0x6>

08003592 <memset>:
 8003592:	4402      	add	r2, r0
 8003594:	4603      	mov	r3, r0
 8003596:	4293      	cmp	r3, r2
 8003598:	d100      	bne.n	800359c <memset+0xa>
 800359a:	4770      	bx	lr
 800359c:	f803 1b01 	strb.w	r1, [r3], #1
 80035a0:	e7f9      	b.n	8003596 <memset+0x4>
	...

080035a4 <_puts_r>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	460e      	mov	r6, r1
 80035a8:	4605      	mov	r5, r0
 80035aa:	b118      	cbz	r0, 80035b4 <_puts_r+0x10>
 80035ac:	6983      	ldr	r3, [r0, #24]
 80035ae:	b90b      	cbnz	r3, 80035b4 <_puts_r+0x10>
 80035b0:	f000 fa0c 	bl	80039cc <__sinit>
 80035b4:	69ab      	ldr	r3, [r5, #24]
 80035b6:	68ac      	ldr	r4, [r5, #8]
 80035b8:	b913      	cbnz	r3, 80035c0 <_puts_r+0x1c>
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 fa06 	bl	80039cc <__sinit>
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <_puts_r+0xac>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d117      	bne.n	80035f6 <_puts_r+0x52>
 80035c6:	686c      	ldr	r4, [r5, #4]
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	071b      	lsls	r3, r3, #28
 80035cc:	d51d      	bpl.n	800360a <_puts_r+0x66>
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	b1db      	cbz	r3, 800360a <_puts_r+0x66>
 80035d2:	3e01      	subs	r6, #1
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035da:	3b01      	subs	r3, #1
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	b9e9      	cbnz	r1, 800361c <_puts_r+0x78>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da2e      	bge.n	8003642 <_puts_r+0x9e>
 80035e4:	4622      	mov	r2, r4
 80035e6:	210a      	movs	r1, #10
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 f83f 	bl	800366c <__swbuf_r>
 80035ee:	3001      	adds	r0, #1
 80035f0:	d011      	beq.n	8003616 <_puts_r+0x72>
 80035f2:	200a      	movs	r0, #10
 80035f4:	e011      	b.n	800361a <_puts_r+0x76>
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <_puts_r+0xb0>)
 80035f8:	429c      	cmp	r4, r3
 80035fa:	d101      	bne.n	8003600 <_puts_r+0x5c>
 80035fc:	68ac      	ldr	r4, [r5, #8]
 80035fe:	e7e3      	b.n	80035c8 <_puts_r+0x24>
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <_puts_r+0xb4>)
 8003602:	429c      	cmp	r4, r3
 8003604:	bf08      	it	eq
 8003606:	68ec      	ldreq	r4, [r5, #12]
 8003608:	e7de      	b.n	80035c8 <_puts_r+0x24>
 800360a:	4621      	mov	r1, r4
 800360c:	4628      	mov	r0, r5
 800360e:	f000 f87f 	bl	8003710 <__swsetup_r>
 8003612:	2800      	cmp	r0, #0
 8003614:	d0dd      	beq.n	80035d2 <_puts_r+0x2e>
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	2b00      	cmp	r3, #0
 800361e:	da04      	bge.n	800362a <_puts_r+0x86>
 8003620:	69a2      	ldr	r2, [r4, #24]
 8003622:	429a      	cmp	r2, r3
 8003624:	dc06      	bgt.n	8003634 <_puts_r+0x90>
 8003626:	290a      	cmp	r1, #10
 8003628:	d004      	beq.n	8003634 <_puts_r+0x90>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	6022      	str	r2, [r4, #0]
 8003630:	7019      	strb	r1, [r3, #0]
 8003632:	e7cf      	b.n	80035d4 <_puts_r+0x30>
 8003634:	4622      	mov	r2, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f000 f818 	bl	800366c <__swbuf_r>
 800363c:	3001      	adds	r0, #1
 800363e:	d1c9      	bne.n	80035d4 <_puts_r+0x30>
 8003640:	e7e9      	b.n	8003616 <_puts_r+0x72>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	200a      	movs	r0, #10
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	6022      	str	r2, [r4, #0]
 800364a:	7018      	strb	r0, [r3, #0]
 800364c:	e7e5      	b.n	800361a <_puts_r+0x76>
 800364e:	bf00      	nop
 8003650:	08003fa8 	.word	0x08003fa8
 8003654:	08003fc8 	.word	0x08003fc8
 8003658:	08003f88 	.word	0x08003f88

0800365c <puts>:
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <puts+0xc>)
 800365e:	4601      	mov	r1, r0
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	f7ff bf9f 	b.w	80035a4 <_puts_r>
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c

0800366c <__swbuf_r>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	460e      	mov	r6, r1
 8003670:	4614      	mov	r4, r2
 8003672:	4605      	mov	r5, r0
 8003674:	b118      	cbz	r0, 800367e <__swbuf_r+0x12>
 8003676:	6983      	ldr	r3, [r0, #24]
 8003678:	b90b      	cbnz	r3, 800367e <__swbuf_r+0x12>
 800367a:	f000 f9a7 	bl	80039cc <__sinit>
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <__swbuf_r+0x98>)
 8003680:	429c      	cmp	r4, r3
 8003682:	d12a      	bne.n	80036da <__swbuf_r+0x6e>
 8003684:	686c      	ldr	r4, [r5, #4]
 8003686:	69a3      	ldr	r3, [r4, #24]
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	071a      	lsls	r2, r3, #28
 800368e:	d52e      	bpl.n	80036ee <__swbuf_r+0x82>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	b363      	cbz	r3, 80036ee <__swbuf_r+0x82>
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	1ac0      	subs	r0, r0, r3
 800369a:	6963      	ldr	r3, [r4, #20]
 800369c:	b2f6      	uxtb	r6, r6
 800369e:	4283      	cmp	r3, r0
 80036a0:	4637      	mov	r7, r6
 80036a2:	dc04      	bgt.n	80036ae <__swbuf_r+0x42>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 f926 	bl	80038f8 <_fflush_r>
 80036ac:	bb28      	cbnz	r0, 80036fa <__swbuf_r+0x8e>
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60a3      	str	r3, [r4, #8]
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	701e      	strb	r6, [r3, #0]
 80036bc:	6963      	ldr	r3, [r4, #20]
 80036be:	3001      	adds	r0, #1
 80036c0:	4283      	cmp	r3, r0
 80036c2:	d004      	beq.n	80036ce <__swbuf_r+0x62>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	07db      	lsls	r3, r3, #31
 80036c8:	d519      	bpl.n	80036fe <__swbuf_r+0x92>
 80036ca:	2e0a      	cmp	r6, #10
 80036cc:	d117      	bne.n	80036fe <__swbuf_r+0x92>
 80036ce:	4621      	mov	r1, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 f911 	bl	80038f8 <_fflush_r>
 80036d6:	b190      	cbz	r0, 80036fe <__swbuf_r+0x92>
 80036d8:	e00f      	b.n	80036fa <__swbuf_r+0x8e>
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <__swbuf_r+0x9c>)
 80036dc:	429c      	cmp	r4, r3
 80036de:	d101      	bne.n	80036e4 <__swbuf_r+0x78>
 80036e0:	68ac      	ldr	r4, [r5, #8]
 80036e2:	e7d0      	b.n	8003686 <__swbuf_r+0x1a>
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <__swbuf_r+0xa0>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	bf08      	it	eq
 80036ea:	68ec      	ldreq	r4, [r5, #12]
 80036ec:	e7cb      	b.n	8003686 <__swbuf_r+0x1a>
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f80d 	bl	8003710 <__swsetup_r>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d0cc      	beq.n	8003694 <__swbuf_r+0x28>
 80036fa:	f04f 37ff 	mov.w	r7, #4294967295
 80036fe:	4638      	mov	r0, r7
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003702:	bf00      	nop
 8003704:	08003fa8 	.word	0x08003fa8
 8003708:	08003fc8 	.word	0x08003fc8
 800370c:	08003f88 	.word	0x08003f88

08003710 <__swsetup_r>:
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <__swsetup_r+0xcc>)
 8003712:	b570      	push	{r4, r5, r6, lr}
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	4606      	mov	r6, r0
 8003718:	460c      	mov	r4, r1
 800371a:	b125      	cbz	r5, 8003726 <__swsetup_r+0x16>
 800371c:	69ab      	ldr	r3, [r5, #24]
 800371e:	b913      	cbnz	r3, 8003726 <__swsetup_r+0x16>
 8003720:	4628      	mov	r0, r5
 8003722:	f000 f953 	bl	80039cc <__sinit>
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <__swsetup_r+0xd0>)
 8003728:	429c      	cmp	r4, r3
 800372a:	d10f      	bne.n	800374c <__swsetup_r+0x3c>
 800372c:	686c      	ldr	r4, [r5, #4]
 800372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003732:	b29a      	uxth	r2, r3
 8003734:	0715      	lsls	r5, r2, #28
 8003736:	d42c      	bmi.n	8003792 <__swsetup_r+0x82>
 8003738:	06d0      	lsls	r0, r2, #27
 800373a:	d411      	bmi.n	8003760 <__swsetup_r+0x50>
 800373c:	2209      	movs	r2, #9
 800373e:	6032      	str	r2, [r6, #0]
 8003740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003744:	81a3      	strh	r3, [r4, #12]
 8003746:	f04f 30ff 	mov.w	r0, #4294967295
 800374a:	e03e      	b.n	80037ca <__swsetup_r+0xba>
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <__swsetup_r+0xd4>)
 800374e:	429c      	cmp	r4, r3
 8003750:	d101      	bne.n	8003756 <__swsetup_r+0x46>
 8003752:	68ac      	ldr	r4, [r5, #8]
 8003754:	e7eb      	b.n	800372e <__swsetup_r+0x1e>
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <__swsetup_r+0xd8>)
 8003758:	429c      	cmp	r4, r3
 800375a:	bf08      	it	eq
 800375c:	68ec      	ldreq	r4, [r5, #12]
 800375e:	e7e6      	b.n	800372e <__swsetup_r+0x1e>
 8003760:	0751      	lsls	r1, r2, #29
 8003762:	d512      	bpl.n	800378a <__swsetup_r+0x7a>
 8003764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003766:	b141      	cbz	r1, 800377a <__swsetup_r+0x6a>
 8003768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800376c:	4299      	cmp	r1, r3
 800376e:	d002      	beq.n	8003776 <__swsetup_r+0x66>
 8003770:	4630      	mov	r0, r6
 8003772:	f000 fa19 	bl	8003ba8 <_free_r>
 8003776:	2300      	movs	r3, #0
 8003778:	6363      	str	r3, [r4, #52]	; 0x34
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	2300      	movs	r3, #0
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	81a3      	strh	r3, [r4, #12]
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	b94b      	cbnz	r3, 80037aa <__swsetup_r+0x9a>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d003      	beq.n	80037aa <__swsetup_r+0x9a>
 80037a2:	4621      	mov	r1, r4
 80037a4:	4630      	mov	r0, r6
 80037a6:	f000 f9bf 	bl	8003b28 <__smakebuf_r>
 80037aa:	89a2      	ldrh	r2, [r4, #12]
 80037ac:	f012 0301 	ands.w	r3, r2, #1
 80037b0:	d00c      	beq.n	80037cc <__swsetup_r+0xbc>
 80037b2:	2300      	movs	r3, #0
 80037b4:	60a3      	str	r3, [r4, #8]
 80037b6:	6963      	ldr	r3, [r4, #20]
 80037b8:	425b      	negs	r3, r3
 80037ba:	61a3      	str	r3, [r4, #24]
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	b953      	cbnz	r3, 80037d6 <__swsetup_r+0xc6>
 80037c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80037c8:	d1ba      	bne.n	8003740 <__swsetup_r+0x30>
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	0792      	lsls	r2, r2, #30
 80037ce:	bf58      	it	pl
 80037d0:	6963      	ldrpl	r3, [r4, #20]
 80037d2:	60a3      	str	r3, [r4, #8]
 80037d4:	e7f2      	b.n	80037bc <__swsetup_r+0xac>
 80037d6:	2000      	movs	r0, #0
 80037d8:	e7f7      	b.n	80037ca <__swsetup_r+0xba>
 80037da:	bf00      	nop
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	08003fa8 	.word	0x08003fa8
 80037e4:	08003fc8 	.word	0x08003fc8
 80037e8:	08003f88 	.word	0x08003f88

080037ec <__sflush_r>:
 80037ec:	898a      	ldrh	r2, [r1, #12]
 80037ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	0710      	lsls	r0, r2, #28
 80037f6:	460c      	mov	r4, r1
 80037f8:	d458      	bmi.n	80038ac <__sflush_r+0xc0>
 80037fa:	684b      	ldr	r3, [r1, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dc05      	bgt.n	800380c <__sflush_r+0x20>
 8003800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	dc02      	bgt.n	800380c <__sflush_r+0x20>
 8003806:	2000      	movs	r0, #0
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800380e:	2e00      	cmp	r6, #0
 8003810:	d0f9      	beq.n	8003806 <__sflush_r+0x1a>
 8003812:	2300      	movs	r3, #0
 8003814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003818:	682f      	ldr	r7, [r5, #0]
 800381a:	6a21      	ldr	r1, [r4, #32]
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	d032      	beq.n	8003886 <__sflush_r+0x9a>
 8003820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	075a      	lsls	r2, r3, #29
 8003826:	d505      	bpl.n	8003834 <__sflush_r+0x48>
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	1ac0      	subs	r0, r0, r3
 800382c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800382e:	b10b      	cbz	r3, 8003834 <__sflush_r+0x48>
 8003830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003832:	1ac0      	subs	r0, r0, r3
 8003834:	2300      	movs	r3, #0
 8003836:	4602      	mov	r2, r0
 8003838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800383a:	6a21      	ldr	r1, [r4, #32]
 800383c:	4628      	mov	r0, r5
 800383e:	47b0      	blx	r6
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	d106      	bne.n	8003854 <__sflush_r+0x68>
 8003846:	6829      	ldr	r1, [r5, #0]
 8003848:	291d      	cmp	r1, #29
 800384a:	d848      	bhi.n	80038de <__sflush_r+0xf2>
 800384c:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <__sflush_r+0x108>)
 800384e:	40ca      	lsrs	r2, r1
 8003850:	07d6      	lsls	r6, r2, #31
 8003852:	d544      	bpl.n	80038de <__sflush_r+0xf2>
 8003854:	2200      	movs	r2, #0
 8003856:	6062      	str	r2, [r4, #4]
 8003858:	04d9      	lsls	r1, r3, #19
 800385a:	6922      	ldr	r2, [r4, #16]
 800385c:	6022      	str	r2, [r4, #0]
 800385e:	d504      	bpl.n	800386a <__sflush_r+0x7e>
 8003860:	1c42      	adds	r2, r0, #1
 8003862:	d101      	bne.n	8003868 <__sflush_r+0x7c>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b903      	cbnz	r3, 800386a <__sflush_r+0x7e>
 8003868:	6560      	str	r0, [r4, #84]	; 0x54
 800386a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386c:	602f      	str	r7, [r5, #0]
 800386e:	2900      	cmp	r1, #0
 8003870:	d0c9      	beq.n	8003806 <__sflush_r+0x1a>
 8003872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003876:	4299      	cmp	r1, r3
 8003878:	d002      	beq.n	8003880 <__sflush_r+0x94>
 800387a:	4628      	mov	r0, r5
 800387c:	f000 f994 	bl	8003ba8 <_free_r>
 8003880:	2000      	movs	r0, #0
 8003882:	6360      	str	r0, [r4, #52]	; 0x34
 8003884:	e7c0      	b.n	8003808 <__sflush_r+0x1c>
 8003886:	2301      	movs	r3, #1
 8003888:	4628      	mov	r0, r5
 800388a:	47b0      	blx	r6
 800388c:	1c41      	adds	r1, r0, #1
 800388e:	d1c8      	bne.n	8003822 <__sflush_r+0x36>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0c5      	beq.n	8003822 <__sflush_r+0x36>
 8003896:	2b1d      	cmp	r3, #29
 8003898:	d001      	beq.n	800389e <__sflush_r+0xb2>
 800389a:	2b16      	cmp	r3, #22
 800389c:	d101      	bne.n	80038a2 <__sflush_r+0xb6>
 800389e:	602f      	str	r7, [r5, #0]
 80038a0:	e7b1      	b.n	8003806 <__sflush_r+0x1a>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	e7ad      	b.n	8003808 <__sflush_r+0x1c>
 80038ac:	690f      	ldr	r7, [r1, #16]
 80038ae:	2f00      	cmp	r7, #0
 80038b0:	d0a9      	beq.n	8003806 <__sflush_r+0x1a>
 80038b2:	0793      	lsls	r3, r2, #30
 80038b4:	680e      	ldr	r6, [r1, #0]
 80038b6:	bf08      	it	eq
 80038b8:	694b      	ldreq	r3, [r1, #20]
 80038ba:	600f      	str	r7, [r1, #0]
 80038bc:	bf18      	it	ne
 80038be:	2300      	movne	r3, #0
 80038c0:	eba6 0807 	sub.w	r8, r6, r7
 80038c4:	608b      	str	r3, [r1, #8]
 80038c6:	f1b8 0f00 	cmp.w	r8, #0
 80038ca:	dd9c      	ble.n	8003806 <__sflush_r+0x1a>
 80038cc:	4643      	mov	r3, r8
 80038ce:	463a      	mov	r2, r7
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038d4:	4628      	mov	r0, r5
 80038d6:	47b0      	blx	r6
 80038d8:	2800      	cmp	r0, #0
 80038da:	dc06      	bgt.n	80038ea <__sflush_r+0xfe>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e78e      	b.n	8003808 <__sflush_r+0x1c>
 80038ea:	4407      	add	r7, r0
 80038ec:	eba8 0800 	sub.w	r8, r8, r0
 80038f0:	e7e9      	b.n	80038c6 <__sflush_r+0xda>
 80038f2:	bf00      	nop
 80038f4:	20400001 	.word	0x20400001

080038f8 <_fflush_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	690b      	ldr	r3, [r1, #16]
 80038fc:	4605      	mov	r5, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	b1db      	cbz	r3, 800393a <_fflush_r+0x42>
 8003902:	b118      	cbz	r0, 800390c <_fflush_r+0x14>
 8003904:	6983      	ldr	r3, [r0, #24]
 8003906:	b90b      	cbnz	r3, 800390c <_fflush_r+0x14>
 8003908:	f000 f860 	bl	80039cc <__sinit>
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <_fflush_r+0x48>)
 800390e:	429c      	cmp	r4, r3
 8003910:	d109      	bne.n	8003926 <_fflush_r+0x2e>
 8003912:	686c      	ldr	r4, [r5, #4]
 8003914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003918:	b17b      	cbz	r3, 800393a <_fflush_r+0x42>
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003922:	f7ff bf63 	b.w	80037ec <__sflush_r>
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <_fflush_r+0x4c>)
 8003928:	429c      	cmp	r4, r3
 800392a:	d101      	bne.n	8003930 <_fflush_r+0x38>
 800392c:	68ac      	ldr	r4, [r5, #8]
 800392e:	e7f1      	b.n	8003914 <_fflush_r+0x1c>
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <_fflush_r+0x50>)
 8003932:	429c      	cmp	r4, r3
 8003934:	bf08      	it	eq
 8003936:	68ec      	ldreq	r4, [r5, #12]
 8003938:	e7ec      	b.n	8003914 <_fflush_r+0x1c>
 800393a:	2000      	movs	r0, #0
 800393c:	bd38      	pop	{r3, r4, r5, pc}
 800393e:	bf00      	nop
 8003940:	08003fa8 	.word	0x08003fa8
 8003944:	08003fc8 	.word	0x08003fc8
 8003948:	08003f88 	.word	0x08003f88

0800394c <std>:
 800394c:	2300      	movs	r3, #0
 800394e:	b510      	push	{r4, lr}
 8003950:	4604      	mov	r4, r0
 8003952:	e9c0 3300 	strd	r3, r3, [r0]
 8003956:	6083      	str	r3, [r0, #8]
 8003958:	8181      	strh	r1, [r0, #12]
 800395a:	6643      	str	r3, [r0, #100]	; 0x64
 800395c:	81c2      	strh	r2, [r0, #14]
 800395e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003962:	6183      	str	r3, [r0, #24]
 8003964:	4619      	mov	r1, r3
 8003966:	2208      	movs	r2, #8
 8003968:	305c      	adds	r0, #92	; 0x5c
 800396a:	f7ff fe12 	bl	8003592 <memset>
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <std+0x38>)
 8003970:	6263      	str	r3, [r4, #36]	; 0x24
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <std+0x3c>)
 8003974:	62a3      	str	r3, [r4, #40]	; 0x28
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <std+0x40>)
 8003978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <std+0x44>)
 800397c:	6224      	str	r4, [r4, #32]
 800397e:	6323      	str	r3, [r4, #48]	; 0x30
 8003980:	bd10      	pop	{r4, pc}
 8003982:	bf00      	nop
 8003984:	08003d19 	.word	0x08003d19
 8003988:	08003d3b 	.word	0x08003d3b
 800398c:	08003d73 	.word	0x08003d73
 8003990:	08003d97 	.word	0x08003d97

08003994 <_cleanup_r>:
 8003994:	4901      	ldr	r1, [pc, #4]	; (800399c <_cleanup_r+0x8>)
 8003996:	f000 b885 	b.w	8003aa4 <_fwalk_reent>
 800399a:	bf00      	nop
 800399c:	080038f9 	.word	0x080038f9

080039a0 <__sfmoreglue>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	1e4a      	subs	r2, r1, #1
 80039a4:	2568      	movs	r5, #104	; 0x68
 80039a6:	4355      	muls	r5, r2
 80039a8:	460e      	mov	r6, r1
 80039aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039ae:	f000 f949 	bl	8003c44 <_malloc_r>
 80039b2:	4604      	mov	r4, r0
 80039b4:	b140      	cbz	r0, 80039c8 <__sfmoreglue+0x28>
 80039b6:	2100      	movs	r1, #0
 80039b8:	e9c0 1600 	strd	r1, r6, [r0]
 80039bc:	300c      	adds	r0, #12
 80039be:	60a0      	str	r0, [r4, #8]
 80039c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039c4:	f7ff fde5 	bl	8003592 <memset>
 80039c8:	4620      	mov	r0, r4
 80039ca:	bd70      	pop	{r4, r5, r6, pc}

080039cc <__sinit>:
 80039cc:	6983      	ldr	r3, [r0, #24]
 80039ce:	b510      	push	{r4, lr}
 80039d0:	4604      	mov	r4, r0
 80039d2:	bb33      	cbnz	r3, 8003a22 <__sinit+0x56>
 80039d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80039d8:	6503      	str	r3, [r0, #80]	; 0x50
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <__sinit+0x58>)
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <__sinit+0x5c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6282      	str	r2, [r0, #40]	; 0x28
 80039e2:	4298      	cmp	r0, r3
 80039e4:	bf04      	itt	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	6183      	streq	r3, [r0, #24]
 80039ea:	f000 f81f 	bl	8003a2c <__sfp>
 80039ee:	6060      	str	r0, [r4, #4]
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 f81b 	bl	8003a2c <__sfp>
 80039f6:	60a0      	str	r0, [r4, #8]
 80039f8:	4620      	mov	r0, r4
 80039fa:	f000 f817 	bl	8003a2c <__sfp>
 80039fe:	2200      	movs	r2, #0
 8003a00:	60e0      	str	r0, [r4, #12]
 8003a02:	2104      	movs	r1, #4
 8003a04:	6860      	ldr	r0, [r4, #4]
 8003a06:	f7ff ffa1 	bl	800394c <std>
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2109      	movs	r1, #9
 8003a0e:	68a0      	ldr	r0, [r4, #8]
 8003a10:	f7ff ff9c 	bl	800394c <std>
 8003a14:	2202      	movs	r2, #2
 8003a16:	2112      	movs	r1, #18
 8003a18:	68e0      	ldr	r0, [r4, #12]
 8003a1a:	f7ff ff97 	bl	800394c <std>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61a3      	str	r3, [r4, #24]
 8003a22:	bd10      	pop	{r4, pc}
 8003a24:	08003f84 	.word	0x08003f84
 8003a28:	08003995 	.word	0x08003995

08003a2c <__sfp>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <__sfp+0x70>)
 8003a30:	681e      	ldr	r6, [r3, #0]
 8003a32:	69b3      	ldr	r3, [r6, #24]
 8003a34:	4607      	mov	r7, r0
 8003a36:	b913      	cbnz	r3, 8003a3e <__sfp+0x12>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f7ff ffc7 	bl	80039cc <__sinit>
 8003a3e:	3648      	adds	r6, #72	; 0x48
 8003a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	d503      	bpl.n	8003a50 <__sfp+0x24>
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	b133      	cbz	r3, 8003a5a <__sfp+0x2e>
 8003a4c:	6836      	ldr	r6, [r6, #0]
 8003a4e:	e7f7      	b.n	8003a40 <__sfp+0x14>
 8003a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a54:	b16d      	cbz	r5, 8003a72 <__sfp+0x46>
 8003a56:	3468      	adds	r4, #104	; 0x68
 8003a58:	e7f4      	b.n	8003a44 <__sfp+0x18>
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ff9f 	bl	80039a0 <__sfmoreglue>
 8003a62:	6030      	str	r0, [r6, #0]
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1f1      	bne.n	8003a4c <__sfp+0x20>
 8003a68:	230c      	movs	r3, #12
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4620      	mov	r0, r4
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <__sfp+0x74>)
 8003a74:	6665      	str	r5, [r4, #100]	; 0x64
 8003a76:	e9c4 5500 	strd	r5, r5, [r4]
 8003a7a:	60a5      	str	r5, [r4, #8]
 8003a7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a84:	2208      	movs	r2, #8
 8003a86:	4629      	mov	r1, r5
 8003a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a8c:	f7ff fd81 	bl	8003592 <memset>
 8003a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a98:	e7e9      	b.n	8003a6e <__sfp+0x42>
 8003a9a:	bf00      	nop
 8003a9c:	08003f84 	.word	0x08003f84
 8003aa0:	ffff0001 	.word	0xffff0001

08003aa4 <_fwalk_reent>:
 8003aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	4689      	mov	r9, r1
 8003aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	b914      	cbnz	r4, 8003aba <_fwalk_reent+0x16>
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003abe:	3f01      	subs	r7, #1
 8003ac0:	d501      	bpl.n	8003ac6 <_fwalk_reent+0x22>
 8003ac2:	6824      	ldr	r4, [r4, #0]
 8003ac4:	e7f5      	b.n	8003ab2 <_fwalk_reent+0xe>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d907      	bls.n	8003adc <_fwalk_reent+0x38>
 8003acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	d003      	beq.n	8003adc <_fwalk_reent+0x38>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	47c8      	blx	r9
 8003ada:	4306      	orrs	r6, r0
 8003adc:	3568      	adds	r5, #104	; 0x68
 8003ade:	e7ee      	b.n	8003abe <_fwalk_reent+0x1a>

08003ae0 <__swhatbuf_r>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	b096      	sub	sp, #88	; 0x58
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	da07      	bge.n	8003b02 <__swhatbuf_r+0x22>
 8003af2:	2300      	movs	r3, #0
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	89b3      	ldrh	r3, [r6, #12]
 8003af8:	061a      	lsls	r2, r3, #24
 8003afa:	d410      	bmi.n	8003b1e <__swhatbuf_r+0x3e>
 8003afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b00:	e00e      	b.n	8003b20 <__swhatbuf_r+0x40>
 8003b02:	466a      	mov	r2, sp
 8003b04:	f000 f96e 	bl	8003de4 <_fstat_r>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	dbf2      	blt.n	8003af2 <__swhatbuf_r+0x12>
 8003b0c:	9a01      	ldr	r2, [sp, #4]
 8003b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b16:	425a      	negs	r2, r3
 8003b18:	415a      	adcs	r2, r3
 8003b1a:	602a      	str	r2, [r5, #0]
 8003b1c:	e7ee      	b.n	8003afc <__swhatbuf_r+0x1c>
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	2000      	movs	r0, #0
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	b016      	add	sp, #88	; 0x58
 8003b26:	bd70      	pop	{r4, r5, r6, pc}

08003b28 <__smakebuf_r>:
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b2c:	079d      	lsls	r5, r3, #30
 8003b2e:	4606      	mov	r6, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	d507      	bpl.n	8003b44 <__smakebuf_r+0x1c>
 8003b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	6123      	str	r3, [r4, #16]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	6163      	str	r3, [r4, #20]
 8003b40:	b002      	add	sp, #8
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	ab01      	add	r3, sp, #4
 8003b46:	466a      	mov	r2, sp
 8003b48:	f7ff ffca 	bl	8003ae0 <__swhatbuf_r>
 8003b4c:	9900      	ldr	r1, [sp, #0]
 8003b4e:	4605      	mov	r5, r0
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 f877 	bl	8003c44 <_malloc_r>
 8003b56:	b948      	cbnz	r0, 8003b6c <__smakebuf_r+0x44>
 8003b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5c:	059a      	lsls	r2, r3, #22
 8003b5e:	d4ef      	bmi.n	8003b40 <__smakebuf_r+0x18>
 8003b60:	f023 0303 	bic.w	r3, r3, #3
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	81a3      	strh	r3, [r4, #12]
 8003b6a:	e7e3      	b.n	8003b34 <__smakebuf_r+0xc>
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <__smakebuf_r+0x7c>)
 8003b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	6020      	str	r0, [r4, #0]
 8003b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	9b00      	ldr	r3, [sp, #0]
 8003b7c:	6163      	str	r3, [r4, #20]
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	6120      	str	r0, [r4, #16]
 8003b82:	b15b      	cbz	r3, 8003b9c <__smakebuf_r+0x74>
 8003b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f000 f93d 	bl	8003e08 <_isatty_r>
 8003b8e:	b128      	cbz	r0, 8003b9c <__smakebuf_r+0x74>
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	431d      	orrs	r5, r3
 8003ba0:	81a5      	strh	r5, [r4, #12]
 8003ba2:	e7cd      	b.n	8003b40 <__smakebuf_r+0x18>
 8003ba4:	08003995 	.word	0x08003995

08003ba8 <_free_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d045      	beq.n	8003c3c <_free_r+0x94>
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f0c      	subs	r4, r1, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	18e4      	addlt	r4, r4, r3
 8003bbc:	f000 f946 	bl	8003e4c <__malloc_lock>
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <_free_r+0x98>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	b933      	cbnz	r3, 8003bd6 <_free_r+0x2e>
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6014      	str	r4, [r2, #0]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd2:	f000 b93c 	b.w	8003e4e <__malloc_unlock>
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d90c      	bls.n	8003bf4 <_free_r+0x4c>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	1862      	adds	r2, r4, r1
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bf04      	itt	eq
 8003be2:	681a      	ldreq	r2, [r3, #0]
 8003be4:	685b      	ldreq	r3, [r3, #4]
 8003be6:	6063      	str	r3, [r4, #4]
 8003be8:	bf04      	itt	eq
 8003bea:	1852      	addeq	r2, r2, r1
 8003bec:	6022      	streq	r2, [r4, #0]
 8003bee:	6004      	str	r4, [r0, #0]
 8003bf0:	e7ec      	b.n	8003bcc <_free_r+0x24>
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	b10a      	cbz	r2, 8003bfc <_free_r+0x54>
 8003bf8:	42a2      	cmp	r2, r4
 8003bfa:	d9fa      	bls.n	8003bf2 <_free_r+0x4a>
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	1858      	adds	r0, r3, r1
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d10b      	bne.n	8003c1c <_free_r+0x74>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	4401      	add	r1, r0
 8003c08:	1858      	adds	r0, r3, r1
 8003c0a:	4282      	cmp	r2, r0
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	d1dd      	bne.n	8003bcc <_free_r+0x24>
 8003c10:	6810      	ldr	r0, [r2, #0]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	4401      	add	r1, r0
 8003c18:	6019      	str	r1, [r3, #0]
 8003c1a:	e7d7      	b.n	8003bcc <_free_r+0x24>
 8003c1c:	d902      	bls.n	8003c24 <_free_r+0x7c>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	e7d3      	b.n	8003bcc <_free_r+0x24>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	1821      	adds	r1, r4, r0
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	bf04      	itt	eq
 8003c2c:	6811      	ldreq	r1, [r2, #0]
 8003c2e:	6852      	ldreq	r2, [r2, #4]
 8003c30:	6062      	str	r2, [r4, #4]
 8003c32:	bf04      	itt	eq
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	605c      	str	r4, [r3, #4]
 8003c3a:	e7c7      	b.n	8003bcc <_free_r+0x24>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000898 	.word	0x20000898

08003c44 <_malloc_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	1ccd      	adds	r5, r1, #3
 8003c48:	f025 0503 	bic.w	r5, r5, #3
 8003c4c:	3508      	adds	r5, #8
 8003c4e:	2d0c      	cmp	r5, #12
 8003c50:	bf38      	it	cc
 8003c52:	250c      	movcc	r5, #12
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	4606      	mov	r6, r0
 8003c58:	db01      	blt.n	8003c5e <_malloc_r+0x1a>
 8003c5a:	42a9      	cmp	r1, r5
 8003c5c:	d903      	bls.n	8003c66 <_malloc_r+0x22>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	2000      	movs	r0, #0
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
 8003c66:	f000 f8f1 	bl	8003e4c <__malloc_lock>
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <_malloc_r+0xac>)
 8003c6c:	6814      	ldr	r4, [r2, #0]
 8003c6e:	4621      	mov	r1, r4
 8003c70:	b991      	cbnz	r1, 8003c98 <_malloc_r+0x54>
 8003c72:	4c20      	ldr	r4, [pc, #128]	; (8003cf4 <_malloc_r+0xb0>)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	b91b      	cbnz	r3, 8003c80 <_malloc_r+0x3c>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f83d 	bl	8003cf8 <_sbrk_r>
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	4629      	mov	r1, r5
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f838 	bl	8003cf8 <_sbrk_r>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d124      	bne.n	8003cd6 <_malloc_r+0x92>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	4630      	mov	r0, r6
 8003c92:	f000 f8dc 	bl	8003e4e <__malloc_unlock>
 8003c96:	e7e4      	b.n	8003c62 <_malloc_r+0x1e>
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	1b5b      	subs	r3, r3, r5
 8003c9c:	d418      	bmi.n	8003cd0 <_malloc_r+0x8c>
 8003c9e:	2b0b      	cmp	r3, #11
 8003ca0:	d90f      	bls.n	8003cc2 <_malloc_r+0x7e>
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	50cd      	str	r5, [r1, r3]
 8003ca6:	18cc      	adds	r4, r1, r3
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f8d0 	bl	8003e4e <__malloc_unlock>
 8003cae:	f104 000b 	add.w	r0, r4, #11
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	f020 0007 	bic.w	r0, r0, #7
 8003cb8:	1ac3      	subs	r3, r0, r3
 8003cba:	d0d3      	beq.n	8003c64 <_malloc_r+0x20>
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	50e2      	str	r2, [r4, r3]
 8003cc0:	e7d0      	b.n	8003c64 <_malloc_r+0x20>
 8003cc2:	428c      	cmp	r4, r1
 8003cc4:	684b      	ldr	r3, [r1, #4]
 8003cc6:	bf16      	itet	ne
 8003cc8:	6063      	strne	r3, [r4, #4]
 8003cca:	6013      	streq	r3, [r2, #0]
 8003ccc:	460c      	movne	r4, r1
 8003cce:	e7eb      	b.n	8003ca8 <_malloc_r+0x64>
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	6849      	ldr	r1, [r1, #4]
 8003cd4:	e7cc      	b.n	8003c70 <_malloc_r+0x2c>
 8003cd6:	1cc4      	adds	r4, r0, #3
 8003cd8:	f024 0403 	bic.w	r4, r4, #3
 8003cdc:	42a0      	cmp	r0, r4
 8003cde:	d005      	beq.n	8003cec <_malloc_r+0xa8>
 8003ce0:	1a21      	subs	r1, r4, r0
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 f808 	bl	8003cf8 <_sbrk_r>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d0cf      	beq.n	8003c8c <_malloc_r+0x48>
 8003cec:	6025      	str	r5, [r4, #0]
 8003cee:	e7db      	b.n	8003ca8 <_malloc_r+0x64>
 8003cf0:	20000898 	.word	0x20000898
 8003cf4:	2000089c 	.word	0x2000089c

08003cf8 <_sbrk_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4c06      	ldr	r4, [pc, #24]	; (8003d14 <_sbrk_r+0x1c>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4605      	mov	r5, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	f7fc fe24 	bl	8000950 <_sbrk>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_sbrk_r+0x1a>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_sbrk_r+0x1a>
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	20000924 	.word	0x20000924

08003d18 <__sread>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	f000 f896 	bl	8003e50 <_read_r>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	bfab      	itete	ge
 8003d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d2c:	181b      	addge	r3, r3, r0
 8003d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d32:	bfac      	ite	ge
 8003d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d36:	81a3      	strhlt	r3, [r4, #12]
 8003d38:	bd10      	pop	{r4, pc}

08003d3a <__swrite>:
 8003d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	461f      	mov	r7, r3
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	05db      	lsls	r3, r3, #23
 8003d44:	4605      	mov	r5, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	4616      	mov	r6, r2
 8003d4a:	d505      	bpl.n	8003d58 <__swrite+0x1e>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	f000 f868 	bl	8003e28 <_lseek_r>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	4628      	mov	r0, r5
 8003d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	f000 b817 	b.w	8003da0 <_write_r>

08003d72 <__sseek>:
 8003d72:	b510      	push	{r4, lr}
 8003d74:	460c      	mov	r4, r1
 8003d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7a:	f000 f855 	bl	8003e28 <_lseek_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	bf15      	itete	ne
 8003d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d8e:	81a3      	strheq	r3, [r4, #12]
 8003d90:	bf18      	it	ne
 8003d92:	81a3      	strhne	r3, [r4, #12]
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <__sclose>:
 8003d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9a:	f000 b813 	b.w	8003dc4 <_close_r>
	...

08003da0 <_write_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4c07      	ldr	r4, [pc, #28]	; (8003dc0 <_write_r+0x20>)
 8003da4:	4605      	mov	r5, r0
 8003da6:	4608      	mov	r0, r1
 8003da8:	4611      	mov	r1, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	6022      	str	r2, [r4, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f7fc fcde 	bl	8000770 <_write>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_write_r+0x1e>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_write_r+0x1e>
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	20000924 	.word	0x20000924

08003dc4 <_close_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4c06      	ldr	r4, [pc, #24]	; (8003de0 <_close_r+0x1c>)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4605      	mov	r5, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	f7fc fd8a 	bl	80008e8 <_close>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_close_r+0x1a>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_close_r+0x1a>
 8003ddc:	602b      	str	r3, [r5, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	20000924 	.word	0x20000924

08003de4 <_fstat_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4c07      	ldr	r4, [pc, #28]	; (8003e04 <_fstat_r+0x20>)
 8003de8:	2300      	movs	r3, #0
 8003dea:	4605      	mov	r5, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	f7fc fd85 	bl	8000900 <_fstat>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d102      	bne.n	8003e00 <_fstat_r+0x1c>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	b103      	cbz	r3, 8003e00 <_fstat_r+0x1c>
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	bf00      	nop
 8003e04:	20000924 	.word	0x20000924

08003e08 <_isatty_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4c06      	ldr	r4, [pc, #24]	; (8003e24 <_isatty_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4605      	mov	r5, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	f7fc fd84 	bl	8000920 <_isatty>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_isatty_r+0x1a>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_isatty_r+0x1a>
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000924 	.word	0x20000924

08003e28 <_lseek_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4c07      	ldr	r4, [pc, #28]	; (8003e48 <_lseek_r+0x20>)
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	4608      	mov	r0, r1
 8003e30:	4611      	mov	r1, r2
 8003e32:	2200      	movs	r2, #0
 8003e34:	6022      	str	r2, [r4, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7fc fd7d 	bl	8000936 <_lseek>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_lseek_r+0x1e>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_lseek_r+0x1e>
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	20000924 	.word	0x20000924

08003e4c <__malloc_lock>:
 8003e4c:	4770      	bx	lr

08003e4e <__malloc_unlock>:
 8003e4e:	4770      	bx	lr

08003e50 <_read_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4c07      	ldr	r4, [pc, #28]	; (8003e70 <_read_r+0x20>)
 8003e54:	4605      	mov	r5, r0
 8003e56:	4608      	mov	r0, r1
 8003e58:	4611      	mov	r1, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fc fc5e 	bl	8000720 <_read>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_read_r+0x1e>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_read_r+0x1e>
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20000924 	.word	0x20000924

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

Disassembly of section .ARM.__at_0x08000534:

08003e8c <TOGGLE_RESET_EXTI_CALLBACK>:
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
	unsigned short state=FLAG_WRT_ERR;
 8003e92:	230f      	movs	r3, #15
 8003e94:	81fb      	strh	r3, [r7, #14]
	unsigned int JumpFlag[2] = {0};
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
	if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_N_FLAG)
 8003e9e:	4819      	ldr	r0, [pc, #100]	; (8003f04 <_etext+0x78>)
 8003ea0:	f7ff f994 	bl	80031cc <STMFLASH_Read32>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d111      	bne.n	8003ed0 <TOGGLE_RESET_EXTI_CALLBACK+0x44>
		JumpFlag[0] = JUMP_FLAG;
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <_etext+0x7c>)
 8003eae:	607b      	str	r3, [r7, #4]
		JumpFlag[1] = JUMP_FLAG;
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <_etext+0x7c>)
 8003eb2:	60bb      	str	r3, [r7, #8]
		if(LL_FLASH_Program64(JUMP_FLAG_ADDRESS, (uint32_t *)&JumpFlag)!=LL_OK)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4812      	ldr	r0, [pc, #72]	; (8003f04 <_etext+0x78>)
 8003eba:	f7ff f8dd 	bl	8003078 <LL_FLASH_Program64>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <TOGGLE_RESET_EXTI_CALLBACK+0x3e>
			state = FLAG_WRT_ERR;//Write Error
 8003ec4:	230f      	movs	r3, #15
 8003ec6:	81fb      	strh	r3, [r7, #14]
 8003ec8:	e016      	b.n	8003ef8 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = FLAG_WRT_OK;//Write Ok
 8003eca:	2300      	movs	r3, #0
 8003ecc:	81fb      	strh	r3, [r7, #14]
 8003ece:	e013      	b.n	8003ef8 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
	else if(STMFLASH_Read32(JUMP_FLAG_ADDRESS) == JUMP_FLAG)
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <_etext+0x78>)
 8003ed2:	f7ff f97b 	bl	80031cc <STMFLASH_Read32>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <_etext+0x7c>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10c      	bne.n	8003ef8 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
		LL_FLASH_PageErase(254);
 8003ede:	20fe      	movs	r0, #254	; 0xfe
 8003ee0:	f7ff f86e 	bl	8002fc0 <LL_FLASH_PageErase>
		if (STMFLASH_BankSwitch() != LL_OK)
 8003ee4:	f7ff f97e 	bl	80031e4 <STMFLASH_BankSwitch>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <TOGGLE_RESET_EXTI_CALLBACK+0x68>
			state = BANK_TOGGLE_ERR;//Jump Error
 8003eee:	231f      	movs	r3, #31
 8003ef0:	81fb      	strh	r3, [r7, #14]
 8003ef2:	e001      	b.n	8003ef8 <TOGGLE_RESET_EXTI_CALLBACK+0x6c>
			state = BANK_TOGGLE_OK;//Jump OK
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	81fb      	strh	r3, [r7, #14]
	return state;
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	b2db      	uxtb	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	0807f7f8 	.word	0x0807f7f8
 8003f08:	4a554d50 	.word	0x4a554d50
